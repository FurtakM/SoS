// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// PrepareVehicles ;
 219: CALL 1203 0 0
// PrepareHeroes ;
 223: CALL 460 0 0
// PrepareAmericansRandom ;
 227: CALL 1107 0 0
// PrepareDifficulty ;
 231: CALL 8409 0 0
// Action ;
 235: CALL 5273 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode do var i , j ;
 240: LD_EXP 40
 244: IFFALSE 415
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
// begin enable ;
 253: ENABLE
// FogOff ( true ) ;
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 22
 268: PUSH
 269: LD_INT 1
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 69
 294: PUSH
 295: FOR_IN
 296: IFFALSE 312
// SetLives ( i , 1000 ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_INT 1000
 305: PPUSH
 306: CALL_OW 234
 310: GO 295
 312: POP
 313: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 30
 334: PUSH
 335: LD_INT 0
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 413
// for j := 1 to 3 do
 369: LD_ADDR_VAR 0 2
 373: PUSH
 374: DOUBLE
 375: LD_INT 1
 377: DEC
 378: ST_TO_ADDR
 379: LD_INT 3
 381: PUSH
 382: FOR_TO
 383: IFFALSE 409
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: LD_INT 9999
 402: PPUSH
 403: CALL_OW 277
 407: GO 382
 409: POP
 410: POP
 411: GO 366
 413: POP
 414: POP
// end ;
 415: PPOPN 2
 417: END
// every 0 0$1 trigger achivCounter >= 2 do
 418: LD_EXP 41
 422: PUSH
 423: LD_INT 2
 425: GREATEREQUAL
 426: IFFALSE 438
 428: GO 430
 430: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 431: LD_STRING ACH_REMOTE
 433: PPUSH
 434: CALL_OW 543
 438: END
// every 0 0$1 trigger destroyCounter >= 30 do
 439: LD_EXP 42
 443: PUSH
 444: LD_INT 30
 446: GREATEREQUAL
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 452: LD_STRING ACH_DEFMASTER
 454: PPUSH
 455: CALL_OW 543
 459: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
 464: PPUSH
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING JMM
 481: PPUSH
 482: LD_EXP 40
 486: NOT
 487: PPUSH
 488: LD_STRING 13c_
 490: PPUSH
 491: CALL 31072 0 3
 495: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 496: LD_ADDR_EXP 2
 500: PUSH
 501: LD_STRING Stevens
 503: PPUSH
 504: LD_EXP 40
 508: NOT
 509: PPUSH
 510: LD_STRING 13c_
 512: PPUSH
 513: CALL 31072 0 3
 517: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 518: LD_ADDR_EXP 3
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 40
 530: NOT
 531: PPUSH
 532: LD_STRING 13c_
 534: PPUSH
 535: CALL 31072 0 3
 539: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 540: LD_ADDR_EXP 4
 544: PUSH
 545: LD_STRING Donaldson
 547: PPUSH
 548: LD_EXP 40
 552: NOT
 553: PPUSH
 554: LD_STRING 13c_
 556: PPUSH
 557: CALL 31072 0 3
 561: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_STRING Bobby
 569: PPUSH
 570: LD_EXP 40
 574: NOT
 575: PPUSH
 576: LD_STRING 13c_
 578: PPUSH
 579: CALL 31072 0 3
 583: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 584: LD_ADDR_EXP 6
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_EXP 40
 596: NOT
 597: PPUSH
 598: LD_STRING 13c_
 600: PPUSH
 601: CALL 31072 0 3
 605: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 606: LD_ADDR_EXP 7
 610: PUSH
 611: LD_STRING Denis
 613: PPUSH
 614: LD_EXP 40
 618: NOT
 619: PPUSH
 620: LD_STRING 13c_
 622: PPUSH
 623: CALL 31072 0 3
 627: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 628: LD_ADDR_EXP 8
 632: PUSH
 633: LD_STRING Brown
 635: PPUSH
 636: LD_EXP 40
 640: NOT
 641: PPUSH
 642: LD_STRING 13c_
 644: PPUSH
 645: CALL 31072 0 3
 649: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 650: LD_ADDR_EXP 9
 654: PUSH
 655: LD_STRING Gladstone
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: LD_STRING 13c_
 663: PPUSH
 664: CALL 31072 0 3
 668: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 669: LD_ADDR_EXP 10
 673: PUSH
 674: LD_STRING Houten
 676: PPUSH
 677: LD_INT 1
 679: PPUSH
 680: LD_STRING 13c_
 682: PPUSH
 683: CALL 31072 0 3
 687: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 688: LD_ADDR_EXP 11
 692: PUSH
 693: LD_STRING Cornel
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: LD_STRING 13c_
 701: PPUSH
 702: CALL 31072 0 3
 706: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 707: LD_ADDR_EXP 12
 711: PUSH
 712: LD_STRING Gary
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: LD_STRING 13c_
 720: PPUSH
 721: CALL 31072 0 3
 725: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING Frank
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_STRING 13c_
 739: PPUSH
 740: CALL 31072 0 3
 744: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 745: LD_ADDR_EXP 14
 749: PUSH
 750: LD_STRING Kikuchi
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_STRING 13c_
 758: PPUSH
 759: CALL 31072 0 3
 763: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 764: LD_ADDR_EXP 15
 768: PUSH
 769: LD_STRING Powell
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: LD_STRING 
 777: PPUSH
 778: CALL 31072 0 3
 782: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: LD_EXP 1
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_EXP 3
 802: PUSH
 803: LD_EXP 4
 807: PUSH
 808: LD_EXP 5
 812: PUSH
 813: LD_EXP 6
 817: PUSH
 818: LD_EXP 7
 822: PUSH
 823: LD_EXP 8
 827: PUSH
 828: LD_EXP 9
 832: PUSH
 833: LD_EXP 10
 837: PUSH
 838: LD_EXP 11
 842: PUSH
 843: LD_EXP 12
 847: PUSH
 848: LD_EXP 13
 852: PUSH
 853: LD_EXP 14
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 33
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// for i = tmp downto 1 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_VAR 0 2
 929: INC
 930: ST_TO_ADDR
 931: LD_INT 1
 933: PUSH
 934: FOR_DOWNTO
 935: IFFALSE 972
// if not tmp [ i ] then
 937: LD_VAR 0 2
 941: PUSH
 942: LD_VAR 0 4
 946: ARRAY
 947: NOT
 948: IFFALSE 970
// tmp := Delete ( tmp , i ) ;
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 3
 969: ST_TO_ADDR
 970: GO 934
 972: POP
 973: POP
// for i = 1 to tmp do
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_VAR 0 2
 988: PUSH
 989: FOR_TO
 990: IFFALSE 1020
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 992: LD_VAR 0 2
 996: PUSH
 997: LD_VAR 0 4
1001: ARRAY
1002: PPUSH
1003: LD_VAR 0 3
1007: PUSH
1008: LD_VAR 0 4
1012: ARRAY
1013: PPUSH
1014: CALL_OW 52
1018: GO 989
1020: POP
1021: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 25
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: PUSH
1055: LD_INT 22
1057: PUSH
1058: LD_INT 1
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 34
1067: PUSH
1068: LD_INT 13
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 69
1083: PUSH
1084: LD_INT 0
1086: EQUAL
1087: AND
1088: IFFALSE 1102
// SetClass ( JMM , 2 ) ;
1090: LD_EXP 1
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: CALL_OW 336
// end ;
1102: LD_VAR 0 1
1106: RET
// export function PrepareAmericansRandom ; var i ; begin
1107: LD_INT 0
1109: PPUSH
1110: PPUSH
// uc_side = 1 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 1
1118: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1119: LD_ADDR_EXP 16
1123: PUSH
1124: LD_STRING 13c_others
1126: PPUSH
1127: CALL_OW 31
1131: ST_TO_ADDR
// for i in others13 do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: LD_EXP 16
1141: PUSH
1142: FOR_IN
1143: IFFALSE 1196
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1145: LD_VAR 0 2
1149: PPUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 21
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 58
1172: PUSH
1173: EMPTY
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: CALL_OW 52
1194: GO 1142
1196: POP
1197: POP
// end ;
1198: LD_VAR 0 1
1202: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
1207: PPUSH
1208: PPUSH
1209: PPUSH
1210: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1211: LD_ADDR_VAR 0 5
1215: PUSH
1216: LD_STRING 13_VehiclesIn13_1
1218: PPUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 5
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: LD_INT 6
1233: PUSH
1234: LD_INT 100
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 5
1250: PUSH
1251: LD_INT 3
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 6
1259: PUSH
1260: LD_INT 100
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 1
1282: PUSH
1283: LD_INT 6
1285: PUSH
1286: LD_INT 100
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: LD_INT 6
1311: PUSH
1312: LD_INT 100
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 5
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 6
1337: PUSH
1338: LD_INT 100
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 5
1354: PUSH
1355: LD_INT 3
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 100
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 5
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 6
1389: PUSH
1390: LD_INT 100
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 5
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 6
1415: PUSH
1416: LD_INT 100
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1442: LD_ADDR_EXP 24
1446: PUSH
1447: LD_STRING 13_ResourcesInCargo13_1
1449: PPUSH
1450: EMPTY
1451: PPUSH
1452: CALL_OW 30
1456: ST_TO_ADDR
// cargoList = [ ] ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: EMPTY
1463: ST_TO_ADDR
// uc_side = 1 ;
1464: LD_ADDR_OWVAR 20
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// if vehicles then
1472: LD_VAR 0 5
1476: IFFALSE 1823
// begin for i := 1 to vehicles do
1478: LD_ADDR_VAR 0 2
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 5
1492: PUSH
1493: FOR_TO
1494: IFFALSE 1643
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1496: LD_ADDR_OWVAR 21
1500: PUSH
1501: LD_VAR 0 5
1505: PUSH
1506: LD_VAR 0 2
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: ARRAY
1515: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1516: LD_ADDR_OWVAR 37
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_VAR 0 2
1530: ARRAY
1531: PUSH
1532: LD_INT 2
1534: ARRAY
1535: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1536: LD_ADDR_OWVAR 39
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 3
1554: ARRAY
1555: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1556: LD_ADDR_OWVAR 38
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 4
1574: ARRAY
1575: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1576: LD_ADDR_OWVAR 40
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 5
1594: ARRAY
1595: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1596: LD_ADDR_OWVAR 41
1600: PUSH
1601: LD_INT 40
1603: ST_TO_ADDR
// veh = CreateVehicle ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1614: LD_VAR 0 4
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// end ;
1641: GO 1493
1643: POP
1644: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1645: LD_ADDR_VAR 0 6
1649: PUSH
1650: LD_INT 22
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 21
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 34
1672: PUSH
1673: LD_INT 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: ST_TO_ADDR
// if cargoList then
1690: LD_VAR 0 6
1694: IFFALSE 1823
// for i = 1 to cargoList do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_VAR 0 6
1710: PUSH
1711: FOR_TO
1712: IFFALSE 1821
// begin if resources then
1714: LD_EXP 24
1718: IFFALSE 1819
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1720: LD_VAR 0 6
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_EXP 24
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PPUSH
1749: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1753: LD_VAR 0 6
1757: PUSH
1758: LD_VAR 0 2
1762: ARRAY
1763: PPUSH
1764: LD_INT 2
1766: PPUSH
1767: LD_EXP 24
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: PUSH
1778: LD_INT 2
1780: ARRAY
1781: PPUSH
1782: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1786: LD_VAR 0 6
1790: PUSH
1791: LD_VAR 0 2
1795: ARRAY
1796: PPUSH
1797: LD_INT 3
1799: PPUSH
1800: LD_EXP 24
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: PUSH
1811: LD_INT 3
1813: ARRAY
1814: PPUSH
1815: CALL_OW 291
// end ; end ;
1819: GO 1711
1821: POP
1822: POP
// end ; end ;
1823: LD_VAR 0 1
1827: RET
// export function PowellSupport ; var i , veh , un ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
1833: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 4
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 2
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_OWVAR 67
1866: ARRAY
1867: PUSH
1868: FOR_TO
1869: IFFALSE 2133
// begin uc_nation := 1 ;
1871: LD_ADDR_OWVAR 21
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// uc_side := 1 ;
1879: LD_ADDR_OWVAR 20
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// vc_engine := engine_siberite ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// vc_control := control_manual ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: LD_INT 6
1913: PUSH
1914: LD_INT 9
1916: PUSH
1917: LD_INT 5
1919: PUSH
1920: LD_INT 5
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_OWVAR 67
1934: PUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL_OW 12
1945: PLUS
1946: ARRAY
1947: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1948: LD_OWVAR 40
1952: PUSH
1953: LD_INT 6
1955: EQUAL
1956: IFFALSE 1985
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 5
1965: PUSH
1966: LD_INT 4
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_OWVAR 67
1981: ARRAY
1982: ST_TO_ADDR
1983: GO 2020
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: CALL_OW 12
2018: ARRAY
2019: ST_TO_ADDR
// veh = CreateVehicle ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 45
2029: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 2
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// SetDir ( veh , 1 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 1
2052: PPUSH
2053: CALL_OW 233
// hc_gallery :=  ;
2057: LD_ADDR_OWVAR 33
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// hc_name :=  ;
2065: LD_ADDR_OWVAR 26
2069: PUSH
2070: LD_STRING 
2072: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 9
2081: PUSH
2082: LD_INT 8
2084: PUSH
2085: LD_INT 8
2087: PUSH
2088: LD_INT 7
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PPUSH
2103: CALL_OW 380
// un := CreateHuman ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: CALL_OW 44
2116: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2117: LD_VAR 0 4
2121: PPUSH
2122: LD_VAR 0 3
2126: PPUSH
2127: CALL_OW 52
// end ;
2131: GO 1868
2133: POP
2134: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2135: LD_ADDR_VAR 0 2
2139: PUSH
2140: DOUBLE
2141: LD_INT 1
2143: DEC
2144: ST_TO_ADDR
2145: LD_INT 2
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_OWVAR 67
2167: ARRAY
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2245
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 9
2180: PUSH
2181: LD_INT 8
2183: PUSH
2184: LD_INT 8
2186: PUSH
2187: LD_INT 7
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_OWVAR 67
2200: ARRAY
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 4
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2216: LD_VAR 0 4
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2228: LD_VAR 0 4
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// end ;
2243: GO 2169
2245: POP
2246: POP
// end ; end_of_file
2247: LD_VAR 0 1
2251: RET
// export function PrepareBurlak ; begin
2252: LD_INT 0
2254: PPUSH
// uc_side := 7 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 7
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_engine := engine_siberite ;
2271: LD_ADDR_OWVAR 39
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// vc_control := control_manual ;
2279: LD_ADDR_OWVAR 38
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2287: LD_ADDR_OWVAR 40
2291: PUSH
2292: LD_INT 44
2294: PUSH
2295: LD_INT 45
2297: PUSH
2298: LD_INT 46
2300: PUSH
2301: LD_INT 46
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_OWVAR 67
2314: ARRAY
2315: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2316: LD_ADDR_OWVAR 37
2320: PUSH
2321: LD_INT 24
2323: ST_TO_ADDR
// Masha := CreateVehicle ;
2324: LD_ADDR_EXP 18
2328: PUSH
2329: CALL_OW 45
2333: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2334: LD_EXP 18
2338: PPUSH
2339: LD_INT 2
2341: PPUSH
2342: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2346: LD_EXP 18
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2361: LD_EXP 18
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2373: LD_ADDR_EXP 17
2377: PUSH
2378: LD_STRING Burlak
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_STRING 
2386: PPUSH
2387: CALL 31072 0 3
2391: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2392: LD_EXP 17
2396: PPUSH
2397: LD_EXP 18
2401: PPUSH
2402: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2406: LD_EXP 18
2410: PPUSH
2411: LD_INT 107
2413: PPUSH
2414: LD_INT 118
2416: PPUSH
2417: CALL_OW 114
// spawnBurlak := 1 ;
2421: LD_ADDR_EXP 27
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// end ;
2429: LD_VAR 0 1
2433: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2434: LD_INT 0
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// uc_side := 7 ;
2441: LD_ADDR_OWVAR 20
2445: PUSH
2446: LD_INT 7
2448: ST_TO_ADDR
// uc_nation := 3 ;
2449: LD_ADDR_OWVAR 21
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2457: LD_ADDR_EXP 19
2461: PUSH
2462: LD_STRING Gnyevko
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 31072 0 3
2475: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2476: LD_ADDR_EXP 20
2480: PUSH
2481: LD_STRING Titov
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: LD_STRING 
2489: PPUSH
2490: CALL 31072 0 3
2494: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2495: LD_ADDR_EXP 21
2499: PUSH
2500: LD_STRING Xavier2
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_STRING 
2508: PPUSH
2509: CALL 31072 0 3
2513: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2514: LD_ADDR_EXP 22
2518: PUSH
2519: LD_STRING Belkov
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 31072 0 3
2532: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2533: LD_ADDR_EXP 23
2537: PUSH
2538: LD_STRING Lipshchin
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 31072 0 3
2551: ST_TO_ADDR
// for i = 1 to 5 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 5
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2691
// begin vc_engine := engine_siberite ;
2568: LD_ADDR_OWVAR 39
2572: PUSH
2573: LD_INT 3
2575: ST_TO_ADDR
// vc_control := control_manual ;
2576: LD_ADDR_OWVAR 38
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2584: LD_ADDR_OWVAR 40
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: LD_INT 45
2594: PUSH
2595: LD_INT 45
2597: PUSH
2598: LD_INT 44
2600: PUSH
2601: LD_INT 49
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 5
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2623: LD_ADDR_OWVAR 37
2627: PUSH
2628: LD_INT 22
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_INT 24
2636: PUSH
2637: LD_INT 24
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_OWVAR 67
2650: ARRAY
2651: ST_TO_ADDR
// veh = CreateVehicle ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: CALL_OW 45
2661: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2662: LD_VAR 0 3
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// end ;
2689: GO 2565
2691: POP
2692: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2693: LD_ADDR_VAR 0 4
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 7
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 58
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_INT 1
2746: ARRAY
2747: PPUSH
2748: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2752: LD_EXP 20
2756: PPUSH
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2770: LD_EXP 21
2774: PPUSH
2775: LD_VAR 0 4
2779: PUSH
2780: LD_INT 3
2782: ARRAY
2783: PPUSH
2784: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2788: LD_EXP 22
2792: PPUSH
2793: LD_VAR 0 4
2797: PUSH
2798: LD_INT 4
2800: ARRAY
2801: PPUSH
2802: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2806: LD_EXP 23
2810: PPUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 5
2818: ARRAY
2819: PPUSH
2820: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2824: LD_EXP 19
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2836: LD_EXP 20
2840: PUSH
2841: LD_EXP 23
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: LD_INT 9
2852: PPUSH
2853: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_INT 22
2864: PUSH
2865: LD_INT 7
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PPUSH
2872: CALL_OW 69
2876: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2877: LD_VAR 0 4
2881: PPUSH
2882: LD_INT 107
2884: PPUSH
2885: LD_INT 118
2887: PPUSH
2888: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2892: LD_INT 35
2894: PPUSH
2895: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2899: LD_VAR 0 4
2903: PPUSH
2904: LD_INT 34
2906: PUSH
2907: LD_INT 49
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 72
2918: PPUSH
2919: LD_EXP 18
2923: PPUSH
2924: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 34
2938: PUSH
2939: LD_INT 49
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PPUSH
2950: CALL_OW 72
2954: PPUSH
2955: LD_INT 107
2957: PPUSH
2958: LD_INT 118
2960: PPUSH
2961: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2965: LD_ADDR_VAR 0 5
2969: PUSH
2970: LD_EXP 20
2974: PUSH
2975: LD_EXP 23
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: LD_INT 50
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 54
2995: PUSH
2996: EMPTY
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 72
3011: ST_TO_ADDR
// if bazooka then
3012: LD_VAR 0 5
3016: IFFALSE 3058
// begin for i in bazooka do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 5
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3056
// if See ( 1 , i ) then
3031: LD_INT 1
3033: PPUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 292
3043: IFFALSE 3054
// ComSpaceTimeShoot ( i ) ;
3045: LD_VAR 0 2
3049: PPUSH
3050: CALL 32019 0 1
3054: GO 3028
3056: POP
3057: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_INT 34
3065: PUSH
3066: LD_INT 49
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 72
3077: PUSH
3078: LD_INT 0
3080: EQUAL
3081: PUSH
3082: LD_EXP 18
3086: PPUSH
3087: CALL_OW 303
3091: OR
3092: IFFALSE 2892
// repeat wait ( 0 0$1 ) ;
3094: LD_INT 35
3096: PPUSH
3097: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PUSH
3121: LD_EXP 17
3125: DIFF
3126: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 107
3134: PPUSH
3135: LD_INT 118
3137: PPUSH
3138: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_EXP 20
3151: PUSH
3152: LD_EXP 23
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: LD_INT 50
3163: PUSH
3164: EMPTY
3165: LIST
3166: PUSH
3167: LD_INT 3
3169: PUSH
3170: LD_INT 54
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: ST_TO_ADDR
// if bazooka then
3189: LD_VAR 0 5
3193: IFFALSE 3235
// begin for i in bazooka do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_VAR 0 5
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3233
// if See ( 1 , i ) then
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 292
3220: IFFALSE 3231
// ComSpaceTimeShoot ( i ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL 32019 0 1
3231: GO 3205
3233: POP
3234: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3235: LD_EXP 17
3239: PPUSH
3240: CALL_OW 302
3244: PUSH
3245: LD_EXP 17
3249: PPUSH
3250: CALL_OW 310
3254: NOT
3255: AND
3256: IFFALSE 3273
// ComMoveXY ( Burlak , 107 , 118 ) ;
3258: LD_EXP 17
3262: PPUSH
3263: LD_INT 107
3265: PPUSH
3266: LD_INT 118
3268: PPUSH
3269: CALL_OW 111
// until not tmp ;
3273: LD_VAR 0 4
3277: NOT
3278: IFFALSE 3094
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// result := [ ] ;
3293: LD_ADDR_VAR 0 1
3297: PUSH
3298: EMPTY
3299: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 2
3310: PPUSH
3311: CALL_OW 12
3315: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_INT 8
3323: PUSH
3324: LD_INT 9
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_VAR 0 6
3335: ARRAY
3336: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 6
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: LD_INT 10
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_OWVAR 67
3369: ARRAY
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3610
// begin uc_side := 3 ;
3374: LD_ADDR_OWVAR 20
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// uc_nation := 3 ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_INT 3
3389: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3390: LD_INT 24
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 1
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 1
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: CALL_OW 12
3416: ARRAY
3417: PPUSH
3418: LD_INT 46
3420: PUSH
3421: LD_INT 46
3423: PUSH
3424: LD_INT 45
3426: PUSH
3427: LD_INT 47
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 5
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: PPUSH
3452: LD_INT 100
3454: PPUSH
3455: CALL 36087 0 5
// veh := CreateVehicle ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: CALL_OW 45
3468: ST_TO_ADDR
// result := Join ( result , veh ) ;
3469: LD_ADDR_VAR 0 1
3473: PUSH
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_VAR 0 4
3483: PPUSH
3484: CALL 68540 0 2
3488: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 5
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_VAR 0 6
3508: ARRAY
3509: PPUSH
3510: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 49
// if vc_control = control_manual then
3531: LD_OWVAR 38
3535: PUSH
3536: LD_INT 1
3538: EQUAL
3539: IFFALSE 3586
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 10
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_OWVAR 67
3566: ARRAY
3567: PPUSH
3568: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3572: CALL_OW 44
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3586: LD_INT 18
3588: PPUSH
3589: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_INT 100
3600: PPUSH
3601: LD_INT 55
3603: PPUSH
3604: CALL_OW 114
// end ;
3608: GO 3371
3610: POP
3611: POP
// for i in result do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: PUSH
3622: FOR_IN
3623: IFFALSE 3639
// SetTag ( i , 10 ) ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_INT 10
3632: PPUSH
3633: CALL_OW 109
3637: GO 3622
3639: POP
3640: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3641: LD_EXP 44
3645: PPUSH
3646: CALL_OW 427
// end ; end_of_file
3650: LD_VAR 0 1
3654: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3655: LD_INT 0
3657: PPUSH
3658: PPUSH
3659: PPUSH
// rnd := 0 ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// uc_side := 8 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 8
3675: ST_TO_ADDR
// uc_nation := 2 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 2
3683: ST_TO_ADDR
// hc_name :=  ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_gallery :=  ;
3692: LD_ADDR_OWVAR 33
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3700: LD_ADDR_OWVAR 29
3704: PUSH
3705: LD_INT 10
3707: PUSH
3708: LD_INT 11
3710: PUSH
3711: LD_INT 12
3713: PUSH
3714: LD_INT 12
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_OWVAR 67
3727: ARRAY
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: LD_INT 11
3734: PUSH
3735: LD_INT 12
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3757: LD_INT 0
3759: PPUSH
3760: LD_INT 4
3762: PPUSH
3763: LD_INT 7
3765: PUSH
3766: LD_INT 8
3768: PUSH
3769: LD_INT 9
3771: PUSH
3772: LD_INT 10
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PPUSH
3787: CALL_OW 380
// un := CreateHuman ;
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: CALL_OW 44
3800: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3801: LD_VAR 0 2
3805: PPUSH
3806: LD_INT 8
3808: PUSH
3809: LD_INT 9
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// SetTag ( un , 1 ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_EXP 31
3859: PPUSH
3860: CALL_OW 12
3864: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3865: LD_EXP 45
3869: PPUSH
3870: LD_VAR 0 2
3874: PPUSH
3875: LD_EXP 31
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: LD_EXP 31
3894: PUSH
3895: LD_VAR 0 3
3899: ARRAY
3900: PUSH
3901: LD_INT 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 595
// end ;
3918: LD_VAR 0 1
3922: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3923: LD_INT 22
3925: PUSH
3926: LD_INT 8
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 61
3938: PUSH
3939: EMPTY
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 50
3948: PUSH
3949: EMPTY
3950: LIST
3951: PUSH
3952: LD_INT 33
3954: PUSH
3955: LD_INT 2
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PPUSH
3968: CALL_OW 69
3972: IFFALSE 4059
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
// begin enable ;
3980: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3981: LD_ADDR_VAR 0 1
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 8
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 61
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 50
4011: PUSH
4012: EMPTY
4013: LIST
4014: PUSH
4015: LD_INT 33
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PUSH
4036: FOR_IN
4037: IFFALSE 4057
// begin wait ( 0 0$0.3 ) ;
4039: LD_INT 10
4041: PPUSH
4042: CALL_OW 67
// Connect ( i ) ;
4046: LD_VAR 0 1
4050: PPUSH
4051: CALL 39178 0 1
// end ;
4055: GO 4036
4057: POP
4058: POP
// end ;
4059: PPOPN 1
4061: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
// result := [ ] ;
4073: LD_ADDR_VAR 0 1
4077: PUSH
4078: EMPTY
4079: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4080: LD_ADDR_EXP 33
4084: PUSH
4085: LD_EXP 33
4089: PUSH
4090: LD_INT 1
4092: PLUS
4093: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4094: LD_INT 22
4096: PUSH
4097: LD_INT 8
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 58
4109: PUSH
4110: EMPTY
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 34
4119: PUSH
4120: LD_INT 31
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: PPUSH
4132: CALL_OW 69
4136: PUSH
4137: LD_INT 2
4139: LESS
4140: IFFALSE 4384
// begin uc_side := 8 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 8
4149: ST_TO_ADDR
// uc_nation := 2 ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4158: LD_INT 14
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 31
4169: PPUSH
4170: LD_INT 100
4172: PPUSH
4173: CALL 36087 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4177: LD_ADDR_VAR 0 2
4181: PUSH
4182: DOUBLE
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 1
4228: PLUS
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 2
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4382
// begin veh := CreateVehicle ;
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4259: LD_ADDR_VAR 0 4
4263: PUSH
4264: LD_INT 181
4266: PUSH
4267: LD_INT 105
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 137
4276: PUSH
4277: LD_INT 6
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_INT 2
4295: MOD
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: ARRAY
4301: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 2
4323: ARRAY
4324: PPUSH
4325: LD_INT 12
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4335: LD_INT 0
4337: PPUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 9
4343: PUSH
4344: LD_INT 10
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_OWVAR 67
4360: ARRAY
4361: PPUSH
4362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4366: CALL_OW 44
4370: PPUSH
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 52
// end ;
4380: GO 4234
4382: POP
4383: POP
// end ; dir := rand ( 1 , 2 ) ;
4384: LD_ADDR_VAR 0 9
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 12
4399: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4400: LD_ADDR_VAR 0 6
4404: PUSH
4405: LD_INT 8
4407: PUSH
4408: LD_INT 9
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 9
4419: ARRAY
4420: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4421: LD_ADDR_VAR 0 7
4425: PUSH
4426: LD_INT 6
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: LD_INT 10
4434: PUSH
4435: LD_INT 11
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_OWVAR 67
4448: ARRAY
4449: PUSH
4450: LD_EXP 33
4454: PLUS
4455: ST_TO_ADDR
// if counter > 20 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 20
4463: GREATER
4464: IFFALSE 4474
// counter := 20 ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_INT 20
4473: ST_TO_ADDR
// for i := 1 to counter do
4474: LD_ADDR_VAR 0 2
4478: PUSH
4479: DOUBLE
4480: LD_INT 1
4482: DEC
4483: ST_TO_ADDR
4484: LD_VAR 0 7
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4823
// begin uc_side := 8 ;
4492: LD_ADDR_OWVAR 20
4496: PUSH
4497: LD_INT 8
4499: ST_TO_ADDR
// uc_nation := 2 ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_INT 2
4507: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4508: LD_INT 13
4510: PUSH
4511: LD_INT 14
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: CALL_OW 12
4528: ARRAY
4529: PPUSH
4530: LD_INT 3
4532: PPUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 3
4552: PPUSH
4553: CALL_OW 12
4557: ARRAY
4558: PPUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 28
4564: PUSH
4565: LD_INT 27
4567: PUSH
4568: LD_INT 92
4570: PUSH
4571: LD_INT 29
4573: PUSH
4574: LD_INT 25
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_INT 6
4590: PPUSH
4591: CALL_OW 12
4595: ARRAY
4596: PPUSH
4597: LD_INT 100
4599: PPUSH
4600: CALL 36087 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4604: LD_OWVAR 40
4608: PUSH
4609: LD_INT 29
4611: EQUAL
4612: IFFALSE 4622
// vc_control := control_remote ;
4614: LD_ADDR_OWVAR 38
4618: PUSH
4619: LD_INT 2
4621: ST_TO_ADDR
// veh := CreateVehicle ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: CALL_OW 45
4631: ST_TO_ADDR
// result := Join ( result , veh ) ;
4632: LD_ADDR_VAR 0 1
4636: PUSH
4637: LD_VAR 0 1
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 68540 0 2
4651: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 5
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: LD_VAR 0 9
4671: ARRAY
4672: PPUSH
4673: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 49
// if vc_control = control_manual then
4694: LD_OWVAR 38
4698: PUSH
4699: LD_INT 1
4701: EQUAL
4702: IFFALSE 4749
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4704: LD_INT 0
4706: PPUSH
4707: LD_INT 7
4709: PUSH
4710: LD_INT 8
4712: PUSH
4713: LD_INT 9
4715: PUSH
4716: LD_INT 10
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: PUSH
4725: LD_OWVAR 67
4729: ARRAY
4730: PPUSH
4731: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4735: CALL_OW 44
4739: PPUSH
4740: LD_VAR 0 3
4744: PPUSH
4745: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4749: LD_INT 10
4751: PPUSH
4752: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4756: LD_VAR 0 3
4760: PPUSH
4761: CALL_OW 263
4765: PUSH
4766: LD_INT 2
4768: EQUAL
4769: PUSH
4770: LD_VAR 0 3
4774: PPUSH
4775: CALL_OW 312
4779: NOT
4780: AND
4781: IFFALSE 4799
// begin Connect ( veh ) ;
4783: LD_VAR 0 3
4787: PPUSH
4788: CALL 39178 0 1
// wait ( 0 0$0.3 ) ;
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 100
4806: PPUSH
4807: LD_INT 55
4809: PPUSH
4810: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4814: LD_INT 18
4816: PPUSH
4817: CALL_OW 67
// end ;
4821: GO 4489
4823: POP
4824: POP
// if arabianAttacksCounter = 1 then
4825: LD_EXP 33
4829: PUSH
4830: LD_INT 1
4832: EQUAL
4833: IFFALSE 4839
// DestroySibDeposit ;
4835: CALL 3655 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4839: LD_EXP 33
4843: PUSH
4844: LD_INT 4
4846: PUSH
4847: LD_INT 3
4849: PUSH
4850: LD_INT 3
4852: PUSH
4853: LD_INT 2
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_OWVAR 67
4866: ARRAY
4867: MOD
4868: PUSH
4869: LD_INT 0
4871: EQUAL
4872: IFFALSE 5230
// begin tmp := rand ( 0 , 2 ) ;
4874: LD_ADDR_VAR 0 8
4878: PUSH
4879: LD_INT 0
4881: PPUSH
4882: LD_INT 2
4884: PPUSH
4885: CALL_OW 12
4889: ST_TO_ADDR
// if not tmp then
4890: LD_VAR 0 8
4894: NOT
4895: IFFALSE 5056
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 3
4909: PUSH
4910: LD_INT 4
4912: PUSH
4913: LD_INT 4
4915: PUSH
4916: LD_INT 5
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: LD_OWVAR 67
4929: ARRAY
4930: PUSH
4931: FOR_TO
4932: IFFALSE 5052
// begin uc_side := 8 ;
4934: LD_ADDR_OWVAR 20
4938: PUSH
4939: LD_INT 8
4941: ST_TO_ADDR
// uc_nation := 2 ;
4942: LD_ADDR_OWVAR 21
4946: PUSH
4947: LD_INT 2
4949: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4950: LD_INT 0
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: LD_INT 7
4958: PUSH
4959: LD_INT 8
4961: PUSH
4962: LD_INT 9
4964: PUSH
4965: LD_INT 10
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PUSH
4974: LD_OWVAR 67
4978: ARRAY
4979: PPUSH
4980: CALL_OW 380
// un := CreateHuman ;
4984: LD_ADDR_VAR 0 5
4988: PUSH
4989: CALL_OW 44
4993: ST_TO_ADDR
// result := Join ( result , un ) ;
4994: LD_ADDR_VAR 0 1
4998: PUSH
4999: LD_VAR 0 1
5003: PPUSH
5004: LD_VAR 0 5
5008: PPUSH
5009: CALL 68540 0 2
5013: ST_TO_ADDR
// if Prob ( 60 ) then
5014: LD_INT 60
5016: PPUSH
5017: CALL_OW 13
5021: IFFALSE 5035
// SetClass ( un , class_mortar ) ;
5023: LD_VAR 0 5
5027: PPUSH
5028: LD_INT 8
5030: PPUSH
5031: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5035: LD_VAR 0 5
5039: PPUSH
5040: LD_INT 16
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 49
// end ;
5050: GO 4931
5052: POP
5053: POP
// end else
5054: GO 5220
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5056: LD_ADDR_VAR 0 2
5060: PUSH
5061: DOUBLE
5062: LD_INT 1
5064: DEC
5065: ST_TO_ADDR
5066: LD_INT 2
5068: PUSH
5069: LD_INT 3
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 4
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: PUSH
5084: LD_OWVAR 67
5088: ARRAY
5089: PUSH
5090: FOR_TO
5091: IFFALSE 5218
// begin uc_side := 8 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 8
5100: ST_TO_ADDR
// uc_nation := 0 ;
5101: LD_ADDR_OWVAR 21
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5109: LD_ADDR_OWVAR 28
5113: PUSH
5114: LD_INT 17
5116: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5117: LD_ADDR_OWVAR 31
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: LD_INT 0
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5140: LD_ADDR_OWVAR 29
5144: PUSH
5145: LD_INT 10
5147: PUSH
5148: LD_INT 10
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: ST_TO_ADDR
// hc_gallery :=  ;
5155: LD_ADDR_OWVAR 33
5159: PUSH
5160: LD_STRING 
5162: ST_TO_ADDR
// hc_name :=  ;
5163: LD_ADDR_OWVAR 26
5167: PUSH
5168: LD_STRING 
5170: ST_TO_ADDR
// un := CreateHuman ;
5171: LD_ADDR_VAR 0 5
5175: PUSH
5176: CALL_OW 44
5180: ST_TO_ADDR
// result := Join ( result , un ) ;
5181: LD_ADDR_VAR 0 1
5185: PUSH
5186: LD_VAR 0 1
5190: PPUSH
5191: LD_VAR 0 5
5195: PPUSH
5196: CALL 68540 0 2
5200: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5201: LD_VAR 0 5
5205: PPUSH
5206: LD_INT 16
5208: PPUSH
5209: LD_INT 0
5211: PPUSH
5212: CALL_OW 49
// end ;
5216: GO 5090
5218: POP
5219: POP
// end ; if sibDeposits then
5220: LD_EXP 31
5224: IFFALSE 5230
// DestroySibDeposit ;
5226: CALL 3655 0 0
// end ; for i in result do
5230: LD_ADDR_VAR 0 2
5234: PUSH
5235: LD_VAR 0 1
5239: PUSH
5240: FOR_IN
5241: IFFALSE 5257
// SetTag ( i , 10 ) ;
5243: LD_VAR 0 2
5247: PPUSH
5248: LD_INT 10
5250: PPUSH
5251: CALL_OW 109
5255: GO 5240
5257: POP
5258: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5259: LD_EXP 43
5263: PPUSH
5264: CALL_OW 427
// end ; end_of_file
5268: LD_VAR 0 1
5272: RET
// export function Action ; var tmp ; begin
5273: LD_INT 0
5275: PPUSH
5276: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_INT 22
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: LD_INT 21
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: ST_TO_ADDR
// InGameOn ;
5311: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5315: LD_VAR 0 2
5319: PPUSH
5320: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: LD_INT 21
5336: PUSH
5337: LD_INT 2
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL_OW 69
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: LD_INT 94
5358: PPUSH
5359: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5363: LD_EXP 1
5367: PPUSH
5368: LD_STRING D2-JMM-1
5370: PPUSH
5371: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5375: LD_VAR 0 2
5379: PPUSH
5380: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5384: LD_EXP 2
5388: PPUSH
5389: LD_STRING D2-Huck-1
5391: PPUSH
5392: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5405: LD_EXP 1
5409: PPUSH
5410: LD_STRING D2-JMM-2
5412: PPUSH
5413: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5417: LD_VAR 0 2
5421: PPUSH
5422: CALL_OW 87
// InGameOff ;
5426: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5430: LD_STRING M1
5432: PPUSH
5433: CALL_OW 337
// SaveForQuickRestart ;
5437: CALL_OW 22
// wait ( 10 10$00 ) ;
5441: LD_INT 21000
5443: PPUSH
5444: CALL_OW 67
// DialogueOn ;
5448: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5452: LD_EXP 15
5456: PPUSH
5457: LD_STRING D3-Pow-1
5459: PPUSH
5460: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5464: LD_EXP 1
5468: PPUSH
5469: LD_STRING D3-JMM-1
5471: PPUSH
5472: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5476: LD_EXP 15
5480: PPUSH
5481: LD_STRING D3-Pow-2
5483: PPUSH
5484: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5488: LD_EXP 1
5492: PPUSH
5493: LD_STRING D3-JMM-2
5495: PPUSH
5496: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5500: LD_EXP 15
5504: PPUSH
5505: LD_STRING D3-Pow-3
5507: PPUSH
5508: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5512: LD_EXP 1
5516: PPUSH
5517: LD_STRING D3-JMM-3
5519: PPUSH
5520: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5524: LD_EXP 15
5528: PPUSH
5529: LD_STRING D3-Pow-4
5531: PPUSH
5532: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5536: LD_EXP 1
5540: PPUSH
5541: LD_STRING D3-JMM-4
5543: PPUSH
5544: CALL_OW 88
// DialogueOff ;
5548: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5552: LD_STRING M2
5554: PPUSH
5555: CALL_OW 337
// wait ( 2 2$30 ) ;
5559: LD_INT 5250
5561: PPUSH
5562: CALL_OW 67
// PrepareBurlak ;
5566: CALL 2252 0 0
// BurlakArmy ;
5570: CALL 2434 0 0
// end ;
5574: LD_VAR 0 1
5578: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5579: LD_INT 1
5581: PPUSH
5582: LD_EXP 18
5586: PPUSH
5587: CALL_OW 292
5591: IFFALSE 5750
5593: GO 5595
5595: DISABLE
// begin DialogueOn ;
5596: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5600: LD_EXP 18
5604: PPUSH
5605: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 26
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 25
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 25
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 25
5654: PUSH
5655: LD_INT 3
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 25
5664: PUSH
5665: LD_INT 4
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 5
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: CALL_OW 69
5699: PPUSH
5700: LD_STRING D5-Sol1-1
5702: PPUSH
5703: LD_STRING D5-FSol1-1
5705: PPUSH
5706: CALL 8208 0 3
// Say ( JMM , D5-JMM-1 ) ;
5710: LD_EXP 1
5714: PPUSH
5715: LD_STRING D5-JMM-1
5717: PPUSH
5718: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_STRING DAmer-Bur-1
5729: PPUSH
5730: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5734: LD_EXP 1
5738: PPUSH
5739: LD_STRING DAmer-JMM-1
5741: PPUSH
5742: CALL_OW 88
// DialogueOff ;
5746: CALL_OW 7
// end ;
5750: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5751: LD_INT 4
5753: PPUSH
5754: LD_INT 22
5756: PUSH
5757: LD_INT 7
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PPUSH
5764: CALL_OW 70
5768: IFFALSE 6167
5770: GO 5772
5772: DISABLE
5773: LD_INT 0
5775: PPUSH
// begin enable ;
5776: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5777: LD_ADDR_VAR 0 1
5781: PUSH
5782: LD_INT 4
5784: PPUSH
5785: LD_INT 22
5787: PUSH
5788: LD_INT 7
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 70
5799: PUSH
5800: FOR_IN
5801: IFFALSE 6165
// begin if i = Burlak or i = Masha then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_EXP 17
5812: EQUAL
5813: PUSH
5814: LD_VAR 0 1
5818: PUSH
5819: LD_EXP 18
5823: EQUAL
5824: OR
5825: IFFALSE 5972
// begin RemoveUnit ( i ) ;
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 64
// DialogueOn ;
5836: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5840: LD_EXP 1
5844: PPUSH
5845: LD_STRING D5a-JMM-1
5847: PPUSH
5848: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5852: LD_INT 22
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 26
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 2
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 25
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 25
5907: PUSH
5908: LD_INT 4
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 5
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: PPUSH
5938: CALL_OW 69
5942: PPUSH
5943: LD_STRING D5a-Sol1-1
5945: PPUSH
5946: LD_STRING D5-FSol1-1
5948: PPUSH
5949: CALL 8208 0 3
// DialogueOff ;
5953: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5957: LD_STRING M2b
5959: PPUSH
5960: CALL_OW 337
// spawnBurlak = 0 ;
5964: LD_ADDR_EXP 27
5968: PUSH
5969: LD_INT 0
5971: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 247
5981: PUSH
5982: LD_INT 2
5984: EQUAL
5985: PUSH
5986: LD_VAR 0 1
5990: PPUSH
5991: CALL_OW 263
5995: PUSH
5996: LD_INT 1
5998: EQUAL
5999: AND
6000: IFFALSE 6128
// begin case IsDrivenBy ( i ) of Gnyevko :
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 311
6011: PUSH
6012: LD_EXP 19
6016: DOUBLE
6017: EQUAL
6018: IFTRUE 6022
6020: GO 6035
6022: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6023: LD_INT 1
6025: PPUSH
6026: LD_STRING 13_Gnyevko_1
6028: PPUSH
6029: CALL_OW 39
6033: GO 6128
6035: LD_EXP 20
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6058
6045: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6046: LD_INT 1
6048: PPUSH
6049: LD_STRING 13_Titov_1
6051: PPUSH
6052: CALL_OW 39
6056: GO 6128
6058: LD_EXP 21
6062: DOUBLE
6063: EQUAL
6064: IFTRUE 6068
6066: GO 6081
6068: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6069: LD_INT 1
6071: PPUSH
6072: LD_STRING 13_Xavier_1
6074: PPUSH
6075: CALL_OW 39
6079: GO 6128
6081: LD_EXP 22
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6104
6091: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6092: LD_INT 1
6094: PPUSH
6095: LD_STRING 13_Belkov_1
6097: PPUSH
6098: CALL_OW 39
6102: GO 6128
6104: LD_EXP 23
6108: DOUBLE
6109: EQUAL
6110: IFTRUE 6114
6112: GO 6127
6114: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6115: LD_INT 1
6117: PPUSH
6118: LD_STRING 13_Lipshchin_1
6120: PPUSH
6121: CALL_OW 39
6125: GO 6128
6127: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 264
6137: PUSH
6138: LD_INT 49
6140: EQUAL
6141: IFFALSE 6154
// DestroyUnit ( i ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 65
6152: GO 6163
// RemoveUnit ( i ) ;
6154: LD_VAR 0 1
6158: PPUSH
6159: CALL_OW 64
// end ;
6163: GO 5800
6165: POP
6166: POP
// end ;
6167: PPOPN 1
6169: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6170: LD_EXP 17
6174: PPUSH
6175: CALL_OW 302
6179: PUSH
6180: LD_EXP 18
6184: PPUSH
6185: CALL_OW 256
6189: PUSH
6190: LD_INT 500
6192: LESS
6193: AND
6194: PUSH
6195: LD_EXP 18
6199: PPUSH
6200: CALL_OW 255
6204: PUSH
6205: LD_INT 7
6207: EQUAL
6208: AND
6209: IFFALSE 6229
6211: GO 6213
6213: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6214: LD_EXP 17
6218: PPUSH
6219: LD_INT 107
6221: PPUSH
6222: LD_INT 118
6224: PPUSH
6225: CALL_OW 111
6229: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6230: LD_EXP 17
6234: PPUSH
6235: CALL_OW 301
6239: PUSH
6240: LD_EXP 27
6244: PUSH
6245: LD_INT 1
6247: EQUAL
6248: AND
6249: IFFALSE 6382
6251: GO 6253
6253: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6254: LD_EXP 1
6258: PPUSH
6259: LD_STRING D5b-JMM-1
6261: PPUSH
6262: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6266: LD_INT 22
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 26
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 25
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 25
6311: PUSH
6312: LD_INT 3
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 25
6321: PUSH
6322: LD_INT 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 25
6331: PUSH
6332: LD_INT 5
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: PPUSH
6357: LD_STRING D5b-Sol1-1
6359: PPUSH
6360: LD_STRING 
6362: PPUSH
6363: CALL 8208 0 3
// ChangeMissionObjectives ( M2a ) ;
6367: LD_STRING M2a
6369: PPUSH
6370: CALL_OW 337
// burlakStatus := 1 ;
6374: LD_ADDR_EXP 28
6378: PUSH
6379: LD_INT 1
6381: ST_TO_ADDR
// end ;
6382: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6383: LD_EXP 2
6387: PPUSH
6388: CALL_OW 301
6392: IFFALSE 6529
6394: GO 6396
6396: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6397: LD_EXP 1
6401: PPUSH
6402: LD_STRING D6-JMM-1
6404: PPUSH
6405: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6409: LD_INT 22
6411: PUSH
6412: LD_INT 1
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 26
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 25
6434: PUSH
6435: LD_INT 1
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 25
6444: PUSH
6445: LD_INT 2
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 25
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 25
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: LD_INT 25
6474: PUSH
6475: LD_INT 5
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PPUSH
6500: LD_STRING D6-Sol1-1
6502: PPUSH
6503: LD_STRING 
6505: PPUSH
6506: CALL 8208 0 3
// Say ( JMM , D6-JMM-2 ) ;
6510: LD_EXP 1
6514: PPUSH
6515: LD_STRING D6-JMM-2
6517: PPUSH
6518: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6522: LD_STRING M1a
6524: PPUSH
6525: CALL_OW 337
// end ;
6529: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6530: LD_INT 25
6532: PPUSH
6533: LD_INT 1
6535: PPUSH
6536: CALL_OW 321
6540: PUSH
6541: LD_INT 2
6543: EQUAL
6544: IFFALSE 6561
6546: GO 6548
6548: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6549: LD_EXP 2
6553: PPUSH
6554: LD_STRING D6-Huck-2
6556: PPUSH
6557: CALL_OW 88
6561: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6562: LD_INT 22
6564: PUSH
6565: LD_INT 1
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 34
6577: PUSH
6578: LD_INT 8
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 35
6587: PUSH
6588: LD_INT 8
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 69
6608: PUSH
6609: LD_INT 5
6611: PPUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 1
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 21
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 1
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 57
6647: PUSH
6648: EMPTY
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 70
6665: AND
6666: PUSH
6667: LD_INT 5
6669: PPUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 21
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 30
6692: PUSH
6693: LD_INT 5
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: LD_INT 57
6705: PUSH
6706: EMPTY
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: PPUSH
6719: CALL_OW 70
6723: AND
6724: IFFALSE 6766
6726: GO 6728
6728: DISABLE
// begin DialogueOn ;
6729: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6733: LD_EXP 1
6737: PPUSH
6738: LD_STRING D7-JMM-1
6740: PPUSH
6741: CALL_OW 88
// DialogueOff ;
6745: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6749: LD_STRING M4
6751: PPUSH
6752: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6756: LD_INT 5
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 424
// end ;
6766: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6767: LD_INT 6
6769: PPUSH
6770: LD_INT 22
6772: PUSH
6773: LD_INT 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 25
6782: PUSH
6783: LD_INT 4
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PPUSH
6794: CALL_OW 70
6798: PUSH
6799: LD_EXP 37
6803: PUSH
6804: LD_INT 1
6806: EQUAL
6807: AND
6808: PUSH
6809: LD_EXP 29
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: AND
6818: IFFALSE 6883
6820: GO 6822
6822: DISABLE
// begin enable ;
6823: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6824: LD_ADDR_EXP 26
6828: PUSH
6829: LD_INT 6
6831: PPUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 1
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 25
6844: PUSH
6845: LD_INT 4
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 70
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6865: LD_INT 6
6867: PPUSH
6868: LD_INT 0
6870: PPUSH
6871: CALL_OW 424
// radationResearched := 1 ;
6875: LD_ADDR_EXP 29
6879: PUSH
6880: LD_INT 1
6882: ST_TO_ADDR
// end ;
6883: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6884: LD_EXP 26
6888: PPUSH
6889: CALL_OW 301
6893: PUSH
6894: LD_EXP 29
6898: PUSH
6899: LD_INT 1
6901: EQUAL
6902: AND
6903: IFFALSE 6939
6905: GO 6907
6907: DISABLE
// begin enable ;
6908: ENABLE
// radationResearched = 0 ;
6909: LD_ADDR_EXP 29
6913: PUSH
6914: LD_INT 0
6916: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6917: LD_INT 6
6919: PPUSH
6920: LD_INT 1
6922: PPUSH
6923: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6927: LD_EXP 1
6931: PPUSH
6932: LD_STRING D9a-JMM-1
6934: PPUSH
6935: CALL_OW 88
// end ; end_of_file
6939: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6940: LD_VAR 0 5
6944: PUSH
6945: LD_INT 8
6947: EQUAL
6948: PUSH
6949: LD_EXP 35
6953: PUSH
6954: LD_INT 0
6956: EQUAL
6957: AND
6958: IFFALSE 7011
// begin eventVar1 := 1 ;
6960: LD_ADDR_EXP 35
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// DialogueOn ;
6968: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6972: LD_EXP 1
6976: PPUSH
6977: LD_STRING D6a-JMM-1
6979: PPUSH
6980: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6984: LD_EXP 15
6988: PPUSH
6989: LD_STRING D6a-Pow-1
6991: PPUSH
6992: CALL_OW 94
// DialogueOff ;
6996: CALL_OW 7
// wait ( 3 3$0 ) ;
7000: LD_INT 6300
7002: PPUSH
7003: CALL_OW 67
// PowellSupport ;
7007: CALL 1828 0 0
// end ; end ;
7011: PPOPN 5
7013: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL 26783 0 1
// if un = JMM then
7023: LD_VAR 0 1
7027: PUSH
7028: LD_EXP 1
7032: EQUAL
7033: IFFALSE 7042
// YouLost ( JMM ) ;
7035: LD_STRING JMM
7037: PPUSH
7038: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7042: LD_VAR 0 1
7046: PPUSH
7047: CALL_OW 264
7051: PUSH
7052: LD_INT 31
7054: EQUAL
7055: IFFALSE 7071
// achivCounter := achivCounter + 1 ;
7057: LD_ADDR_EXP 41
7061: PUSH
7062: LD_EXP 41
7066: PUSH
7067: LD_INT 1
7069: PLUS
7070: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7071: LD_VAR 0 1
7075: PPUSH
7076: CALL_OW 255
7080: PUSH
7081: LD_INT 1
7083: NONEQUAL
7084: PUSH
7085: LD_VAR 0 1
7089: PPUSH
7090: CALL_OW 247
7094: PUSH
7095: LD_INT 2
7097: EQUAL
7098: AND
7099: IFFALSE 7115
// destroyCounter := destroyCounter + 1 ;
7101: LD_ADDR_EXP 42
7105: PUSH
7106: LD_EXP 42
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ST_TO_ADDR
// end ;
7115: PPOPN 1
7117: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7118: LD_VAR 0 2
7122: PUSH
7123: LD_EXP 18
7127: EQUAL
7128: IFFALSE 7137
// SetAchievement ( ACH_MASHA ) ;
7130: LD_STRING ACH_MASHA
7132: PPUSH
7133: CALL_OW 543
// end ;
7137: PPOPN 4
7139: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: LD_VAR 0 2
7149: PPUSH
7150: CALL 26903 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7154: LD_VAR 0 1
7158: PPUSH
7159: CALL_OW 264
7163: PUSH
7164: LD_INT 8
7166: EQUAL
7167: PUSH
7168: LD_EXP 36
7172: PUSH
7173: LD_INT 0
7175: EQUAL
7176: AND
7177: IFFALSE 7246
// begin eventVar2 := 1 ;
7179: LD_ADDR_EXP 36
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// DialogueOn ;
7187: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D6b-JMM-1
7198: PPUSH
7199: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7203: LD_EXP 15
7207: PPUSH
7208: LD_STRING D6b-Pow-1
7210: PPUSH
7211: CALL_OW 94
// DialogueOff ;
7215: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7219: LD_INT 5
7221: PPUSH
7222: LD_INT 1
7224: PPUSH
7225: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7229: LD_INT 7
7231: PPUSH
7232: LD_INT 1
7234: PPUSH
7235: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7239: LD_STRING M3
7241: PPUSH
7242: CALL_OW 337
// end ; end ;
7246: PPOPN 2
7248: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7249: LD_VAR 0 2
7253: PPUSH
7254: LD_VAR 0 3
7258: PPUSH
7259: LD_INT 5
7261: PPUSH
7262: CALL_OW 309
7266: PUSH
7267: LD_EXP 37
7271: PUSH
7272: LD_INT 0
7274: EQUAL
7275: AND
7276: IFFALSE 7501
// begin eventVar3 := 1 ;
7278: LD_ADDR_EXP 37
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7286: LD_INT 175
7288: PPUSH
7289: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7293: LD_INT 7
7295: PPUSH
7296: LD_INT 22
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 21
7308: PUSH
7309: LD_INT 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 34
7318: PUSH
7319: LD_INT 11
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: PPUSH
7331: CALL_OW 70
7335: IFFALSE 7354
// begin radarOnSpot := 1 ;
7337: LD_ADDR_EXP 30
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7345: LD_STRING M3a
7347: PPUSH
7348: CALL_OW 337
// end else
7352: GO 7361
// ChangeMissionObjectives ( M3b ) ;
7354: LD_STRING M3b
7356: PPUSH
7357: CALL_OW 337
// DialogueOn ;
7361: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7365: LD_EXP 2
7369: PPUSH
7370: LD_STRING D8-Huck-1
7372: PPUSH
7373: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7377: LD_EXP 1
7381: PPUSH
7382: LD_STRING D8-JMM-1
7384: PPUSH
7385: CALL_OW 88
// if IsOk ( Stevens ) then
7389: LD_EXP 2
7393: PPUSH
7394: CALL_OW 302
7398: IFFALSE 7460
// begin Say ( Stevens , D8-Huck-2 ) ;
7400: LD_EXP 2
7404: PPUSH
7405: LD_STRING D8-Huck-2
7407: PPUSH
7408: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7412: LD_EXP 1
7416: PPUSH
7417: LD_STRING D8-JMM-2
7419: PPUSH
7420: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7424: LD_EXP 2
7428: PPUSH
7429: LD_STRING D8-Huck-3
7431: PPUSH
7432: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D8-JMM-3
7443: PPUSH
7444: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7448: LD_EXP 2
7452: PPUSH
7453: LD_STRING D8-Huck-4
7455: PPUSH
7456: CALL_OW 88
// end ; DialogueOff ;
7460: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7464: LD_INT 5
7466: PPUSH
7467: LD_INT 0
7469: PPUSH
7470: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7474: LD_INT 7
7476: PPUSH
7477: LD_INT 0
7479: PPUSH
7480: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7484: LD_INT 6
7486: PPUSH
7487: LD_INT 1
7489: PPUSH
7490: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7494: LD_STRING M5
7496: PPUSH
7497: CALL_OW 337
// end ; end ;
7501: PPOPN 3
7503: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7504: LD_EXP 26
7508: PPUSH
7509: CALL_OW 302
7513: PUSH
7514: LD_VAR 0 2
7518: PUSH
7519: LD_EXP 26
7523: EQUAL
7524: AND
7525: PUSH
7526: LD_EXP 38
7530: PUSH
7531: LD_INT 0
7533: EQUAL
7534: AND
7535: PUSH
7536: LD_EXP 37
7540: PUSH
7541: LD_INT 1
7543: EQUAL
7544: AND
7545: PUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 268
7558: PUSH
7559: LD_INT 11
7561: EQUAL
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: OR
7580: AND
7581: IFFALSE 7591
// eventVar4 := 1 ;
7583: LD_ADDR_EXP 38
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 2
7593: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7598: LD_VAR 0 1
7602: PPUSH
7603: CALL_OW 248
7607: PUSH
7608: LD_INT 2
7610: EQUAL
7611: IFFALSE 7857
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7613: LD_ADDR_EXP 32
7617: PUSH
7618: LD_EXP 32
7622: PUSH
7623: LD_INT 1
7625: PLUS
7626: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7627: LD_ADDR_VAR 0 4
7631: PUSH
7632: DOUBLE
7633: LD_EXP 31
7637: INC
7638: ST_TO_ADDR
7639: LD_INT 1
7641: PUSH
7642: FOR_DOWNTO
7643: IFFALSE 7713
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7645: LD_EXP 31
7649: PUSH
7650: LD_VAR 0 4
7654: ARRAY
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PUSH
7660: LD_VAR 0 2
7664: EQUAL
7665: PUSH
7666: LD_EXP 31
7670: PUSH
7671: LD_VAR 0 4
7675: ARRAY
7676: PUSH
7677: LD_INT 2
7679: ARRAY
7680: PUSH
7681: LD_VAR 0 3
7685: EQUAL
7686: AND
7687: IFFALSE 7711
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7689: LD_ADDR_EXP 31
7693: PUSH
7694: LD_EXP 31
7698: PPUSH
7699: LD_VAR 0 4
7703: PPUSH
7704: CALL_OW 3
7708: ST_TO_ADDR
// break ;
7709: GO 7713
// end ;
7711: GO 7642
7713: POP
7714: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7715: LD_EXP 39
7719: PUSH
7720: LD_INT 0
7722: EQUAL
7723: PUSH
7724: LD_VAR 0 2
7728: PPUSH
7729: LD_VAR 0 3
7733: PPUSH
7734: CALL_OW 428
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PPUSH
7749: CALL_OW 69
7753: IN
7754: AND
7755: IFFALSE 7857
// begin eventVar5 := 1 ;
7757: LD_ADDR_EXP 39
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// DialogueOn ;
7765: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7769: LD_EXP 2
7773: PPUSH
7774: LD_STRING D4-Sci1-1
7776: PPUSH
7777: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7781: LD_EXP 1
7785: PPUSH
7786: LD_STRING D4-JMM-1
7788: PPUSH
7789: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7793: LD_EXP 2
7797: PPUSH
7798: LD_STRING D4-Sci1-2
7800: PPUSH
7801: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7805: LD_EXP 1
7809: PPUSH
7810: LD_STRING D4-JMM-2
7812: PPUSH
7813: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7817: LD_EXP 2
7821: PPUSH
7822: LD_STRING D4-Sci1-3
7824: PPUSH
7825: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7829: LD_EXP 1
7833: PPUSH
7834: LD_STRING D4-JMM-3
7836: PPUSH
7837: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7841: LD_EXP 1
7845: PPUSH
7846: LD_STRING D4-JMM-3a
7848: PPUSH
7849: CALL_OW 88
// DialogueOff ;
7853: CALL_OW 7
// end ; end ; end ;
7857: PPOPN 5
7859: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 255
7869: PUSH
7870: LD_INT 1
7872: EQUAL
7873: PUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 266
7883: PUSH
7884: LD_INT 0
7886: EQUAL
7887: AND
7888: PUSH
7889: LD_INT 22
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 21
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 2
7911: PUSH
7912: LD_INT 30
7914: PUSH
7915: LD_INT 0
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 30
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: PUSH
7947: LD_INT 1
7949: EQUAL
7950: AND
7951: IFFALSE 7965
// SetBName ( building , omega ) ;
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_STRING omega
7960: PPUSH
7961: CALL_OW 500
// end ;
7965: PPOPN 2
7967: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL 26887 0 1
// end ;
7977: PPOPN 1
7979: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7980: LD_VAR 0 1
7984: PUSH
7985: LD_EXP 43
7989: EQUAL
7990: IFFALSE 7996
// ArabianAttack ;
7992: CALL 10061 0 0
// if event = eventRussianAttack then
7996: LD_VAR 0 1
8000: PUSH
8001: LD_EXP 44
8005: EQUAL
8006: IFFALSE 8012
// RussianAttack ;
8008: CALL 10426 0 0
// end ;
8012: PPOPN 1
8014: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8015: LD_VAR 0 1
8019: PUSH
8020: LD_EXP 45
8024: EQUAL
8025: IFFALSE 8119
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8027: LD_VAR 0 2
8031: PPUSH
8032: CALL_OW 302
8036: PUSH
8037: LD_VAR 0 3
8041: PPUSH
8042: LD_VAR 0 4
8046: PPUSH
8047: CALL_OW 488
8051: AND
8052: IFFALSE 8119
// begin repeat wait ( 0 0$1 ) ;
8054: LD_INT 35
8056: PPUSH
8057: CALL_OW 67
// if not HasTask ( p1 ) then
8061: LD_VAR 0 2
8065: PPUSH
8066: CALL_OW 314
8070: NOT
8071: IFFALSE 8107
// begin ComContaminate ( p1 , p2 , p3 ) ;
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_VAR 0 3
8082: PPUSH
8083: LD_VAR 0 4
8087: PPUSH
8088: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8092: LD_VAR 0 2
8096: PPUSH
8097: LD_INT 42
8099: PPUSH
8100: LD_INT 3
8102: PPUSH
8103: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: CALL_OW 302
8116: NOT
8117: IFFALSE 8054
// end ; end ; end ;
8119: PPOPN 7
8121: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8122: LD_VAR 0 1
8126: PPUSH
8127: CALL_OW 255
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 8
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: IN
8142: IFFALSE 8205
// begin ComMoveXY ( driver , 41 , 2 ) ;
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_INT 41
8151: PPUSH
8152: LD_INT 2
8154: PPUSH
8155: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8159: LD_INT 35
8161: PPUSH
8162: CALL_OW 67
// if IsDead ( driver ) then
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 301
8175: IFFALSE 8179
// exit ;
8177: GO 8205
// until IsAt ( driver , 41 , 2 ) ;
8179: LD_VAR 0 1
8183: PPUSH
8184: LD_INT 41
8186: PPUSH
8187: LD_INT 2
8189: PPUSH
8190: CALL_OW 307
8194: IFFALSE 8159
// RemoveUnit ( driver ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 64
// end ; end ; end_of_file
8205: PPOPN 4
8207: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8208: LD_INT 0
8210: PPUSH
8211: PPUSH
8212: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 1
8222: PUSH
8223: LD_EXP 1
8227: PUSH
8228: LD_EXP 2
8232: PUSH
8233: LD_EXP 3
8237: PUSH
8238: LD_EXP 4
8242: PUSH
8243: LD_EXP 5
8247: PUSH
8248: LD_EXP 6
8252: PUSH
8253: LD_EXP 7
8257: PUSH
8258: LD_EXP 8
8262: PUSH
8263: LD_EXP 9
8267: PUSH
8268: LD_EXP 10
8272: PUSH
8273: LD_EXP 11
8277: PUSH
8278: LD_EXP 12
8282: PUSH
8283: LD_EXP 13
8287: PUSH
8288: LD_EXP 14
8292: PUSH
8293: LD_EXP 15
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: DIFF
8315: ST_TO_ADDR
// if not characters then
8316: LD_VAR 0 1
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8404
// speaker := characters [ rand ( 1 , characters ) ] ;
8325: LD_ADDR_VAR 0 6
8329: PUSH
8330: LD_VAR 0 1
8334: PUSH
8335: LD_INT 1
8337: PPUSH
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 12
8347: ARRAY
8348: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8349: LD_VAR 0 6
8353: PPUSH
8354: CALL_OW 258
8358: PUSH
8359: LD_INT 1
8361: EQUAL
8362: IFFALSE 8380
// Say ( speaker , dialogMID ) else
8364: LD_VAR 0 6
8368: PPUSH
8369: LD_VAR 0 2
8373: PPUSH
8374: CALL_OW 88
8378: GO 8394
// Say ( speaker , dialogFID ) ;
8380: LD_VAR 0 6
8384: PPUSH
8385: LD_VAR 0 3
8389: PPUSH
8390: CALL_OW 88
// result := speaker ;
8394: LD_ADDR_VAR 0 4
8398: PUSH
8399: LD_VAR 0 6
8403: ST_TO_ADDR
// end ;
8404: LD_VAR 0 4
8408: RET
// export function PrepareDifficulty ; begin
8409: LD_INT 0
8411: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8412: LD_INT 5
8414: PPUSH
8415: LD_INT 8
8417: PPUSH
8418: LD_INT 2
8420: PPUSH
8421: CALL_OW 322
// if Difficulty = 1 then
8425: LD_OWVAR 67
8429: PUSH
8430: LD_INT 1
8432: EQUAL
8433: IFFALSE 8552
// begin SetTech ( 66 , 8 , state_researched ) ;
8435: LD_INT 66
8437: PPUSH
8438: LD_INT 8
8440: PPUSH
8441: LD_INT 2
8443: PPUSH
8444: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8448: LD_INT 67
8450: PPUSH
8451: LD_INT 8
8453: PPUSH
8454: LD_INT 0
8456: PPUSH
8457: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8461: LD_INT 68
8463: PPUSH
8464: LD_INT 8
8466: PPUSH
8467: LD_INT 0
8469: PPUSH
8470: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8474: LD_INT 51
8476: PPUSH
8477: LD_INT 8
8479: PPUSH
8480: LD_INT 2
8482: PPUSH
8483: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8487: LD_INT 52
8489: PPUSH
8490: LD_INT 8
8492: PPUSH
8493: LD_INT 0
8495: PPUSH
8496: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8500: LD_INT 53
8502: PPUSH
8503: LD_INT 8
8505: PPUSH
8506: LD_INT 0
8508: PPUSH
8509: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8513: LD_INT 60
8515: PPUSH
8516: LD_INT 8
8518: PPUSH
8519: LD_INT 2
8521: PPUSH
8522: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8526: LD_INT 61
8528: PPUSH
8529: LD_INT 8
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8539: LD_INT 62
8541: PPUSH
8542: LD_INT 8
8544: PPUSH
8545: LD_INT 0
8547: PPUSH
8548: CALL_OW 322
// end ; if Difficulty = 2 then
8552: LD_OWVAR 67
8556: PUSH
8557: LD_INT 2
8559: EQUAL
8560: IFFALSE 8679
// begin SetTech ( 66 , 8 , state_researched ) ;
8562: LD_INT 66
8564: PPUSH
8565: LD_INT 8
8567: PPUSH
8568: LD_INT 2
8570: PPUSH
8571: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8575: LD_INT 67
8577: PPUSH
8578: LD_INT 8
8580: PPUSH
8581: LD_INT 2
8583: PPUSH
8584: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8588: LD_INT 68
8590: PPUSH
8591: LD_INT 8
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8601: LD_INT 51
8603: PPUSH
8604: LD_INT 8
8606: PPUSH
8607: LD_INT 2
8609: PPUSH
8610: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8614: LD_INT 52
8616: PPUSH
8617: LD_INT 8
8619: PPUSH
8620: LD_INT 2
8622: PPUSH
8623: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8627: LD_INT 53
8629: PPUSH
8630: LD_INT 8
8632: PPUSH
8633: LD_INT 2
8635: PPUSH
8636: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8640: LD_INT 60
8642: PPUSH
8643: LD_INT 8
8645: PPUSH
8646: LD_INT 2
8648: PPUSH
8649: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8653: LD_INT 61
8655: PPUSH
8656: LD_INT 8
8658: PPUSH
8659: LD_INT 2
8661: PPUSH
8662: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8666: LD_INT 62
8668: PPUSH
8669: LD_INT 8
8671: PPUSH
8672: LD_INT 0
8674: PPUSH
8675: CALL_OW 322
// end ; if Difficulty >= 3 then
8679: LD_OWVAR 67
8683: PUSH
8684: LD_INT 3
8686: GREATEREQUAL
8687: IFFALSE 8806
// begin SetTech ( 66 , 8 , state_researched ) ;
8689: LD_INT 66
8691: PPUSH
8692: LD_INT 8
8694: PPUSH
8695: LD_INT 2
8697: PPUSH
8698: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8702: LD_INT 67
8704: PPUSH
8705: LD_INT 8
8707: PPUSH
8708: LD_INT 2
8710: PPUSH
8711: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8715: LD_INT 68
8717: PPUSH
8718: LD_INT 8
8720: PPUSH
8721: LD_INT 0
8723: PPUSH
8724: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8728: LD_INT 51
8730: PPUSH
8731: LD_INT 8
8733: PPUSH
8734: LD_INT 2
8736: PPUSH
8737: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8741: LD_INT 52
8743: PPUSH
8744: LD_INT 8
8746: PPUSH
8747: LD_INT 2
8749: PPUSH
8750: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8754: LD_INT 53
8756: PPUSH
8757: LD_INT 8
8759: PPUSH
8760: LD_INT 2
8762: PPUSH
8763: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8767: LD_INT 60
8769: PPUSH
8770: LD_INT 8
8772: PPUSH
8773: LD_INT 2
8775: PPUSH
8776: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8780: LD_INT 61
8782: PPUSH
8783: LD_INT 8
8785: PPUSH
8786: LD_INT 2
8788: PPUSH
8789: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8793: LD_INT 62
8795: PPUSH
8796: LD_INT 8
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 322
// end ; end ;
8806: LD_VAR 0 1
8810: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8811: LD_INT 0
8813: PPUSH
8814: PPUSH
// for i in charactersList do
8815: LD_ADDR_VAR 0 4
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// SaveCharacters ( i , ident ) ;
8828: LD_VAR 0 4
8832: PPUSH
8833: LD_VAR 0 2
8837: PPUSH
8838: CALL_OW 38
8842: GO 8825
8844: POP
8845: POP
// end ; end_of_file
8846: LD_VAR 0 3
8850: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8851: LD_EXP 38
8855: PUSH
8856: LD_INT 1
8858: EQUAL
8859: IFFALSE 9765
8861: GO 8863
8863: DISABLE
8864: LD_INT 0
8866: PPUSH
8867: PPUSH
8868: PPUSH
// begin m1 := false ;
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// m2 := false ;
8877: LD_ADDR_VAR 0 2
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// m3 := false ;
8885: LD_ADDR_VAR 0 3
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// DialogueOn ;
8893: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8897: LD_EXP 1
8901: PPUSH
8902: LD_STRING D9b-JMM-1
8904: PPUSH
8905: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8909: LD_EXP 15
8913: PPUSH
8914: LD_STRING D9b-Pow-1
8916: PPUSH
8917: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8921: LD_EXP 1
8925: PPUSH
8926: LD_STRING D9b-JMM-2
8928: PPUSH
8929: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8933: LD_EXP 15
8937: PPUSH
8938: LD_STRING D9b-Pow-2
8940: PPUSH
8941: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8945: LD_EXP 1
8949: PPUSH
8950: LD_STRING D9b-JMM-3
8952: PPUSH
8953: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8957: LD_EXP 15
8961: PPUSH
8962: LD_STRING D9b-Pow-3
8964: PPUSH
8965: CALL_OW 94
// if tick <= 60 60$00 then
8969: LD_OWVAR 1
8973: PUSH
8974: LD_INT 126000
8976: LESSEQUAL
8977: IFFALSE 8986
// SetAchievement ( ACH_ASPEED_13 ) ;
8979: LD_STRING ACH_ASPEED_13
8981: PPUSH
8982: CALL_OW 543
// if burlakStatus = 1 then
8986: LD_EXP 28
8990: PUSH
8991: LD_INT 1
8993: EQUAL
8994: IFFALSE 9016
// begin m1 := true ;
8996: LD_ADDR_VAR 0 1
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9004: LD_STRING Burlak
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 101
// end else
9014: GO 9027
// begin AddMedal ( Burlak , - 1 ) ;
9016: LD_STRING Burlak
9018: PPUSH
9019: LD_INT 1
9021: NEG
9022: PPUSH
9023: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9027: LD_EXP 2
9031: PPUSH
9032: CALL_OW 302
9036: IFFALSE 9058
// begin m2 := true ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9046: LD_STRING Stevens
9048: PPUSH
9049: LD_INT 1
9051: PPUSH
9052: CALL_OW 101
// end else
9056: GO 9069
// begin AddMedal ( Stevens , - 1 ) ;
9058: LD_STRING Stevens
9060: PPUSH
9061: LD_INT 1
9063: NEG
9064: PPUSH
9065: CALL_OW 101
// end ; if radarOnSpot = 1 then
9069: LD_EXP 30
9073: PUSH
9074: LD_INT 1
9076: EQUAL
9077: IFFALSE 9099
// begin m3 := true ;
9079: LD_ADDR_VAR 0 3
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9087: LD_STRING Observation
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 101
// end else
9097: GO 9110
// begin AddMedal ( Observation , - 1 ) ;
9099: LD_STRING Observation
9101: PPUSH
9102: LD_INT 1
9104: NEG
9105: PPUSH
9106: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9110: LD_VAR 0 1
9114: PUSH
9115: LD_VAR 0 2
9119: AND
9120: PUSH
9121: LD_VAR 0 3
9125: AND
9126: PUSH
9127: LD_OWVAR 67
9131: PUSH
9132: LD_INT 3
9134: GREATEREQUAL
9135: AND
9136: IFFALSE 9148
// SetAchievementEX ( ACH_AMER , 13 ) ;
9138: LD_STRING ACH_AMER
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: CALL_OW 564
// GiveMedals ( MAIN ) ;
9148: LD_STRING MAIN
9150: PPUSH
9151: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9155: LD_EXP 28
9159: PPUSH
9160: LD_STRING 13_BurlakStatus_1
9162: PPUSH
9163: CALL_OW 39
// if IsLive ( Stevens ) then
9167: LD_EXP 2
9171: PPUSH
9172: CALL_OW 300
9176: IFFALSE 9190
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9178: LD_INT 1
9180: PPUSH
9181: LD_STRING 13_StevensStatus_1
9183: PPUSH
9184: CALL_OW 39
9188: GO 9200
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9190: LD_INT 0
9192: PPUSH
9193: LD_STRING 13_StevensStatus_1
9195: PPUSH
9196: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9200: LD_INT 22
9202: PUSH
9203: LD_INT 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 21
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 25
9225: PUSH
9226: LD_INT 1
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: LD_INT 25
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 25
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 5
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 8
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: PPUSH
9302: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9306: LD_EXP 1
9310: PPUSH
9311: LD_EXP 34
9315: PUSH
9316: LD_STRING JMM
9318: STR
9319: PPUSH
9320: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9324: LD_EXP 8
9328: PPUSH
9329: LD_EXP 34
9333: PUSH
9334: LD_STRING Brown
9336: STR
9337: PPUSH
9338: CALL 8811 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9342: LD_EXP 4
9346: PPUSH
9347: LD_EXP 34
9351: PUSH
9352: LD_STRING Donaldson
9354: STR
9355: PPUSH
9356: CALL 8811 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9360: LD_EXP 5
9364: PPUSH
9365: LD_EXP 34
9369: PUSH
9370: LD_STRING Bobby
9372: STR
9373: PPUSH
9374: CALL 8811 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9378: LD_EXP 6
9382: PPUSH
9383: LD_EXP 34
9387: PUSH
9388: LD_STRING Cyrus
9390: STR
9391: PPUSH
9392: CALL 8811 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9396: LD_EXP 3
9400: PPUSH
9401: LD_EXP 34
9405: PUSH
9406: LD_STRING Lisa
9408: STR
9409: PPUSH
9410: CALL 8811 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9414: LD_EXP 13
9418: PPUSH
9419: LD_EXP 34
9423: PUSH
9424: LD_STRING Frank
9426: STR
9427: PPUSH
9428: CALL 8811 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9432: LD_EXP 14
9436: PPUSH
9437: LD_EXP 34
9441: PUSH
9442: LD_STRING Kikuchi
9444: STR
9445: PPUSH
9446: CALL 8811 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9450: LD_EXP 10
9454: PPUSH
9455: LD_EXP 34
9459: PUSH
9460: LD_STRING Houten
9462: STR
9463: PPUSH
9464: CALL 8811 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9468: LD_EXP 12
9472: PPUSH
9473: LD_EXP 34
9477: PUSH
9478: LD_STRING Gary
9480: STR
9481: PPUSH
9482: CALL 8811 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9486: LD_EXP 11
9490: PPUSH
9491: LD_EXP 34
9495: PUSH
9496: LD_STRING Cornell
9498: STR
9499: PPUSH
9500: CALL 8811 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9504: LD_EXP 7
9508: PPUSH
9509: LD_EXP 34
9513: PUSH
9514: LD_STRING Denis
9516: STR
9517: PPUSH
9518: CALL 8811 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9522: LD_EXP 9
9526: PPUSH
9527: LD_EXP 34
9531: PUSH
9532: LD_STRING Gladstone
9534: STR
9535: PPUSH
9536: CALL 8811 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9540: LD_EXP 2
9544: PPUSH
9545: LD_EXP 34
9549: PUSH
9550: LD_STRING Stevens
9552: STR
9553: PPUSH
9554: CALL 8811 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 22
9566: PUSH
9567: LD_INT 1
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 21
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 4
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 25
9629: PUSH
9630: LD_INT 5
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 25
9639: PUSH
9640: LD_INT 8
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: LD_EXP 1
9671: PUSH
9672: LD_EXP 8
9676: PUSH
9677: LD_EXP 4
9681: PUSH
9682: LD_EXP 5
9686: PUSH
9687: LD_EXP 6
9691: PUSH
9692: LD_EXP 3
9696: PUSH
9697: LD_EXP 13
9701: PUSH
9702: LD_EXP 9
9706: PUSH
9707: LD_EXP 14
9711: PUSH
9712: LD_EXP 7
9716: PUSH
9717: LD_EXP 10
9721: PUSH
9722: LD_EXP 12
9726: PUSH
9727: LD_EXP 11
9731: PUSH
9732: LD_EXP 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: DIFF
9753: PPUSH
9754: LD_STRING 13_other_survivors
9756: PPUSH
9757: CALL_OW 38
// YouWin ;
9761: CALL_OW 103
// end ; end_of_file
9765: PPOPN 3
9767: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9768: LD_EXP 32
9772: PUSH
9773: LD_INT 2
9775: EQUAL
9776: PUSH
9777: LD_INT 34
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PPUSH
9787: CALL_OW 69
9791: NOT
9792: AND
9793: PUSH
9794: LD_INT 25
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 321
9804: PUSH
9805: LD_INT 1
9807: EQUAL
9808: AND
9809: IFFALSE 9945
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
9817: PPUSH
9818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9819: LD_ADDR_VAR 0 2
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 21
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: LD_INT 30
9849: PUSH
9850: LD_INT 0
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 30
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 69
9881: ST_TO_ADDR
// for i in tmp do
9882: LD_ADDR_VAR 0 1
9886: PUSH
9887: LD_VAR 0 2
9891: PUSH
9892: FOR_IN
9893: IFFALSE 9926
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9895: LD_ADDR_VAR 0 3
9899: PUSH
9900: LD_VAR 0 3
9904: PUSH
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 274
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: CALL_OW 275
9922: PLUS
9923: ST_TO_ADDR
9924: GO 9892
9926: POP
9927: POP
// if yourSiberite < 60 then
9928: LD_VAR 0 3
9932: PUSH
9933: LD_INT 60
9935: LESS
9936: IFFALSE 9945
// YouLost ( siberite ) ;
9938: LD_STRING siberite
9940: PPUSH
9941: CALL_OW 104
// end ; end_of_file
9945: PPOPN 3
9947: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9948: LD_INT 22
9950: PUSH
9951: LD_INT 8
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 1
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PPUSH
9972: CALL_OW 69
9976: PUSH
9977: LD_INT 6
9979: LESS
9980: IFFALSE 9990
9982: GO 9984
9984: DISABLE
// begin enable ;
9985: ENABLE
// PrepareArabianAttack ;
9986: CALL 4062 0 0
// end ;
9990: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9991: LD_EXP 35
9995: PUSH
9996: LD_INT 1
9998: EQUAL
9999: PUSH
10000: LD_INT 22
10002: PUSH
10003: LD_INT 8
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 21
10012: PUSH
10013: LD_INT 1
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 6
10031: LESS
10032: AND
10033: IFFALSE 10060
10035: GO 10037
10037: DISABLE
// begin wait ( 4 4$00 ) ;
10038: LD_INT 8400
10040: PPUSH
10041: CALL_OW 67
// PrepareRussianAttack ;
10045: CALL 3285 0 0
// wait ( 12 12$00 ) ;
10049: LD_INT 25200
10051: PPUSH
10052: CALL_OW 67
// PrepareRussianAttack ;
10056: CALL 3285 0 0
// end ;
10060: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10061: LD_INT 0
10063: PPUSH
10064: PPUSH
10065: PPUSH
10066: PPUSH
10067: PPUSH
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10072: LD_ADDR_VAR 0 8
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_INT 8
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 120
10089: PUSH
10090: LD_INT 10
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PPUSH
10101: CALL_OW 69
10105: ST_TO_ADDR
// if not units then
10106: LD_VAR 0 8
10110: NOT
10111: IFFALSE 10115
// exit ;
10113: GO 10421
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10115: LD_ADDR_VAR 0 4
10119: PUSH
10120: LD_INT 80
10122: PUSH
10123: LD_INT 60
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 54
10132: PUSH
10133: LD_INT 57
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 55
10142: PUSH
10143: LD_INT 74
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 61
10152: PUSH
10153: LD_INT 85
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10166: LD_ADDR_VAR 0 5
10170: PUSH
10171: LD_INT 93
10173: PUSH
10174: LD_INT 99
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 85
10183: PUSH
10184: LD_INT 99
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10195: LD_INT 35
10197: PPUSH
10198: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10202: LD_ADDR_VAR 0 6
10206: PUSH
10207: LD_VAR 0 8
10211: PPUSH
10212: LD_INT 21
10214: PUSH
10215: LD_INT 2
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL_OW 72
10226: ST_TO_ADDR
// if vehicles then
10227: LD_VAR 0 6
10231: IFFALSE 10247
// AgressiveMove ( vehicles , path ) ;
10233: LD_VAR 0 6
10237: PPUSH
10238: LD_VAR 0 4
10242: PPUSH
10243: CALL 71144 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10247: LD_ADDR_VAR 0 7
10251: PUSH
10252: LD_VAR 0 8
10256: PPUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 21
10269: PUSH
10270: LD_INT 1
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: ST_TO_ADDR
// if infantry then
10286: LD_VAR 0 7
10290: IFFALSE 10306
// AgressiveMove ( infantry , path2 ) ;
10292: LD_VAR 0 7
10296: PPUSH
10297: LD_VAR 0 5
10301: PPUSH
10302: CALL 71144 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10306: LD_ADDR_VAR 0 9
10310: PUSH
10311: LD_VAR 0 8
10315: PPUSH
10316: LD_INT 23
10318: PUSH
10319: LD_INT 0
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 72
10344: ST_TO_ADDR
// if apes then
10345: LD_VAR 0 9
10349: IFFALSE 10393
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10351: LD_VAR 0 9
10355: PUSH
10356: LD_INT 1
10358: ARRAY
10359: PPUSH
10360: LD_INT 22
10362: PUSH
10363: LD_INT 1
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: PPUSH
10375: LD_VAR 0 9
10379: PUSH
10380: LD_INT 1
10382: ARRAY
10383: PPUSH
10384: CALL_OW 74
10388: PPUSH
10389: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10393: LD_ADDR_VAR 0 8
10397: PUSH
10398: LD_VAR 0 8
10402: PPUSH
10403: LD_INT 50
10405: PUSH
10406: EMPTY
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: ST_TO_ADDR
// until not units ;
10414: LD_VAR 0 8
10418: NOT
10419: IFFALSE 10195
// end ;
10421: LD_VAR 0 1
10425: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10426: LD_INT 0
10428: PPUSH
10429: PPUSH
10430: PPUSH
10431: PPUSH
10432: PPUSH
10433: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10434: LD_ADDR_VAR 0 6
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 120
10451: PUSH
10452: LD_INT 10
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PPUSH
10463: CALL_OW 69
10467: ST_TO_ADDR
// if not units then
10468: LD_VAR 0 6
10472: NOT
10473: IFFALSE 10477
// exit ;
10475: GO 10608
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10477: LD_ADDR_VAR 0 4
10481: PUSH
10482: LD_INT 80
10484: PUSH
10485: LD_INT 60
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 54
10494: PUSH
10495: LD_INT 57
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 55
10504: PUSH
10505: LD_INT 74
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 61
10514: PUSH
10515: LD_INT 85
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10528: LD_INT 35
10530: PPUSH
10531: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: LD_VAR 0 6
10544: PPUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 72
10559: ST_TO_ADDR
// if vehicles then
10560: LD_VAR 0 5
10564: IFFALSE 10580
// AgressiveMove ( vehicles , path ) ;
10566: LD_VAR 0 5
10570: PPUSH
10571: LD_VAR 0 4
10575: PPUSH
10576: CALL 71144 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10580: LD_ADDR_VAR 0 6
10584: PUSH
10585: LD_VAR 0 6
10589: PPUSH
10590: LD_INT 50
10592: PUSH
10593: EMPTY
10594: LIST
10595: PPUSH
10596: CALL_OW 72
10600: ST_TO_ADDR
// until not units ;
10601: LD_VAR 0 6
10605: NOT
10606: IFFALSE 10528
// end ; end_of_file
10608: LD_VAR 0 1
10612: RET
// every 0 0$01 do var i , cratesSpawned ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin cratesSpawned := 0 ;
10620: LD_ADDR_VAR 0 2
10624: PUSH
10625: LD_INT 0
10627: ST_TO_ADDR
// for i := 1 to 6 do
10628: LD_ADDR_VAR 0 1
10632: PUSH
10633: DOUBLE
10634: LD_INT 1
10636: DEC
10637: ST_TO_ADDR
10638: LD_INT 6
10640: PUSH
10641: FOR_TO
10642: IFFALSE 10667
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 5
10649: PPUSH
10650: CALL_OW 12
10654: PPUSH
10655: LD_INT 17
10657: PPUSH
10658: LD_INT 0
10660: PPUSH
10661: CALL_OW 55
10665: GO 10641
10667: POP
10668: POP
// wait ( 0 0$20 ) ;
10669: LD_INT 700
10671: PPUSH
10672: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10676: LD_INT 280
10678: PPUSH
10679: CALL_OW 67
// if cratesSpawned < 12 then
10683: LD_VAR 0 2
10687: PUSH
10688: LD_INT 12
10690: LESS
10691: IFFALSE 10743
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10693: LD_INT 105
10695: PPUSH
10696: LD_INT 350
10698: PPUSH
10699: CALL_OW 12
10703: PPUSH
10704: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10708: LD_INT 3
10710: PPUSH
10711: LD_INT 5
10713: PPUSH
10714: CALL_OW 12
10718: PPUSH
10719: LD_INT 13
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 2
10738: PUSH
10739: LD_INT 1
10741: PLUS
10742: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10743: LD_VAR 0 2
10747: PUSH
10748: LD_INT 12
10750: GREATEREQUAL
10751: PUSH
10752: LD_VAR 0 2
10756: PUSH
10757: LD_INT 32
10759: LESS
10760: AND
10761: IFFALSE 10813
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10763: LD_INT 420
10765: PPUSH
10766: LD_INT 700
10768: PPUSH
10769: CALL_OW 12
10773: PPUSH
10774: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10778: LD_INT 3
10780: PPUSH
10781: LD_INT 5
10783: PPUSH
10784: CALL_OW 12
10788: PPUSH
10789: LD_INT 13
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10799: LD_ADDR_VAR 0 2
10803: PUSH
10804: LD_VAR 0 2
10808: PUSH
10809: LD_INT 1
10811: PLUS
10812: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10813: LD_VAR 0 2
10817: PUSH
10818: LD_INT 32
10820: GREATEREQUAL
10821: IFFALSE 10895
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10823: LD_INT 13
10825: PPUSH
10826: CALL_OW 435
10830: PUSH
10831: LD_INT 14
10833: LESS
10834: IFFALSE 10845
// wait ( 0 0$20 ) else
10836: LD_INT 700
10838: PPUSH
10839: CALL_OW 67
10843: GO 10860
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10845: LD_INT 1750
10847: PPUSH
10848: LD_INT 3150
10850: PPUSH
10851: CALL_OW 12
10855: PPUSH
10856: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10860: LD_INT 2
10862: PPUSH
10863: LD_INT 5
10865: PPUSH
10866: CALL_OW 12
10870: PPUSH
10871: LD_INT 13
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10881: LD_ADDR_VAR 0 2
10885: PUSH
10886: LD_VAR 0 2
10890: PUSH
10891: LD_INT 1
10893: PLUS
10894: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10895: LD_VAR 0 2
10899: PUSH
10900: LD_INT 120
10902: GREATEREQUAL
10903: IFFALSE 10977
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10905: LD_INT 13
10907: PPUSH
10908: CALL_OW 435
10912: PUSH
10913: LD_INT 14
10915: LESS
10916: IFFALSE 10927
// wait ( 0 0$40 ) else
10918: LD_INT 1400
10920: PPUSH
10921: CALL_OW 67
10925: GO 10942
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10927: LD_INT 2450
10929: PPUSH
10930: LD_INT 3850
10932: PPUSH
10933: CALL_OW 12
10937: PPUSH
10938: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 5
10947: PPUSH
10948: CALL_OW 12
10952: PPUSH
10953: LD_INT 13
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: LD_VAR 0 2
10972: PUSH
10973: LD_INT 1
10975: PLUS
10976: ST_TO_ADDR
// end ; until false ;
10977: LD_INT 0
10979: IFFALSE 10676
// end ; end_of_file end_of_file
10981: PPOPN 2
10983: END
// every 0 0$1 do
10984: GO 10986
10986: DISABLE
// begin enable ;
10987: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10988: LD_STRING updateTimer(
10990: PUSH
10991: LD_OWVAR 1
10995: STR
10996: PUSH
10997: LD_STRING );
10999: STR
11000: PPUSH
11001: CALL_OW 559
// end ;
11005: END
// export function SOS_MapStart ( ) ; begin
11006: LD_INT 0
11008: PPUSH
// if streamModeActive then
11009: LD_EXP 47
11013: IFFALSE 11022
// DefineStreamItems ( true ) ;
11015: LD_INT 1
11017: PPUSH
11018: CALL 12826 0 1
// UpdateLuaVariables ( ) ;
11022: CALL 11039 0 0
// UpdateFactoryWaypoints ( ) ;
11026: CALL 25687 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11030: CALL 25944 0 0
// end ;
11034: LD_VAR 0 1
11038: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
11039: LD_INT 0
11041: PPUSH
// if not globalGameSaveCounter then
11042: LD_EXP 46
11046: NOT
11047: IFFALSE 11058
// ToLua ( setGameSaveCounter(0) ) else
11049: LD_STRING setGameSaveCounter(0)
11051: PPUSH
11052: CALL_OW 559
11056: GO 11090
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11058: LD_ADDR_EXP 46
11062: PUSH
11063: LD_EXP 46
11067: PPUSH
11068: CALL 69901 0 1
11072: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11073: LD_STRING setGameSaveCounter(
11075: PUSH
11076: LD_EXP 46
11080: STR
11081: PUSH
11082: LD_STRING )
11084: STR
11085: PPUSH
11086: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11090: LD_STRING setGameDifficulty(
11092: PUSH
11093: LD_OWVAR 67
11097: STR
11098: PUSH
11099: LD_STRING )
11101: STR
11102: PPUSH
11103: CALL_OW 559
// end ;
11107: LD_VAR 0 1
11111: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11112: LD_INT 0
11114: PPUSH
// if p2 = stream_mode then
11115: LD_VAR 0 2
11119: PUSH
11120: LD_INT 100
11122: EQUAL
11123: IFFALSE 12126
// begin if not StreamModeActive then
11125: LD_EXP 47
11129: NOT
11130: IFFALSE 11140
// StreamModeActive := true ;
11132: LD_ADDR_EXP 47
11136: PUSH
11137: LD_INT 1
11139: ST_TO_ADDR
// if p3 = 0 then
11140: LD_VAR 0 3
11144: PUSH
11145: LD_INT 0
11147: EQUAL
11148: IFFALSE 11154
// InitStreamMode ;
11150: CALL 12362 0 0
// if p3 = 1 then
11154: LD_VAR 0 3
11158: PUSH
11159: LD_INT 1
11161: EQUAL
11162: IFFALSE 11172
// sRocket := true ;
11164: LD_ADDR_EXP 52
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// if p3 = 2 then
11172: LD_VAR 0 3
11176: PUSH
11177: LD_INT 2
11179: EQUAL
11180: IFFALSE 11190
// sSpeed := true ;
11182: LD_ADDR_EXP 51
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 3 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 3
11197: EQUAL
11198: IFFALSE 11208
// sEngine := true ;
11200: LD_ADDR_EXP 53
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 4 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 4
11215: EQUAL
11216: IFFALSE 11226
// sSpec := true ;
11218: LD_ADDR_EXP 50
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 5 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 5
11233: EQUAL
11234: IFFALSE 11244
// sLevel := true ;
11236: LD_ADDR_EXP 54
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// if p3 = 6 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 6
11251: EQUAL
11252: IFFALSE 11262
// sArmoury := true ;
11254: LD_ADDR_EXP 55
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 7 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 7
11269: EQUAL
11270: IFFALSE 11280
// sRadar := true ;
11272: LD_ADDR_EXP 56
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if p3 = 8 then
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 8
11287: EQUAL
11288: IFFALSE 11298
// sBunker := true ;
11290: LD_ADDR_EXP 57
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// if p3 = 9 then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_INT 9
11305: EQUAL
11306: IFFALSE 11316
// sHack := true ;
11308: LD_ADDR_EXP 58
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 10 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 10
11323: EQUAL
11324: IFFALSE 11334
// sFire := true ;
11326: LD_ADDR_EXP 59
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// if p3 = 11 then
11334: LD_VAR 0 3
11338: PUSH
11339: LD_INT 11
11341: EQUAL
11342: IFFALSE 11352
// sRefresh := true ;
11344: LD_ADDR_EXP 60
11348: PUSH
11349: LD_INT 1
11351: ST_TO_ADDR
// if p3 = 12 then
11352: LD_VAR 0 3
11356: PUSH
11357: LD_INT 12
11359: EQUAL
11360: IFFALSE 11370
// sExp := true ;
11362: LD_ADDR_EXP 61
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// if p3 = 13 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 13
11377: EQUAL
11378: IFFALSE 11388
// sDepot := true ;
11380: LD_ADDR_EXP 62
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 14 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 14
11395: EQUAL
11396: IFFALSE 11406
// sFlag := true ;
11398: LD_ADDR_EXP 63
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 15 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 15
11413: EQUAL
11414: IFFALSE 11424
// sKamikadze := true ;
11416: LD_ADDR_EXP 71
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 16 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 16
11431: EQUAL
11432: IFFALSE 11442
// sTroll := true ;
11434: LD_ADDR_EXP 72
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 17 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 17
11449: EQUAL
11450: IFFALSE 11460
// sSlow := true ;
11452: LD_ADDR_EXP 73
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 18 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 18
11467: EQUAL
11468: IFFALSE 11478
// sLack := true ;
11470: LD_ADDR_EXP 74
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 19 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 19
11485: EQUAL
11486: IFFALSE 11496
// sTank := true ;
11488: LD_ADDR_EXP 76
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 20 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 20
11503: EQUAL
11504: IFFALSE 11514
// sRemote := true ;
11506: LD_ADDR_EXP 77
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 21 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 21
11521: EQUAL
11522: IFFALSE 11532
// sPowell := true ;
11524: LD_ADDR_EXP 78
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 22 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 22
11539: EQUAL
11540: IFFALSE 11550
// sTeleport := true ;
11542: LD_ADDR_EXP 81
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 23 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 23
11557: EQUAL
11558: IFFALSE 11568
// sOilTower := true ;
11560: LD_ADDR_EXP 83
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 24 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 24
11575: EQUAL
11576: IFFALSE 11586
// sShovel := true ;
11578: LD_ADDR_EXP 84
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 25 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 25
11593: EQUAL
11594: IFFALSE 11604
// sSheik := true ;
11596: LD_ADDR_EXP 85
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// if p3 = 26 then
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 26
11611: EQUAL
11612: IFFALSE 11622
// sEarthquake := true ;
11614: LD_ADDR_EXP 87
11618: PUSH
11619: LD_INT 1
11621: ST_TO_ADDR
// if p3 = 27 then
11622: LD_VAR 0 3
11626: PUSH
11627: LD_INT 27
11629: EQUAL
11630: IFFALSE 11640
// sAI := true ;
11632: LD_ADDR_EXP 88
11636: PUSH
11637: LD_INT 1
11639: ST_TO_ADDR
// if p3 = 28 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 28
11647: EQUAL
11648: IFFALSE 11658
// sCargo := true ;
11650: LD_ADDR_EXP 91
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// if p3 = 29 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 29
11665: EQUAL
11666: IFFALSE 11676
// sDLaser := true ;
11668: LD_ADDR_EXP 92
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 30 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 30
11683: EQUAL
11684: IFFALSE 11694
// sExchange := true ;
11686: LD_ADDR_EXP 93
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 31 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 31
11701: EQUAL
11702: IFFALSE 11712
// sFac := true ;
11704: LD_ADDR_EXP 94
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 32 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 32
11719: EQUAL
11720: IFFALSE 11730
// sPower := true ;
11722: LD_ADDR_EXP 95
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 33 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 33
11737: EQUAL
11738: IFFALSE 11748
// sRandom := true ;
11740: LD_ADDR_EXP 96
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 34 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 34
11755: EQUAL
11756: IFFALSE 11766
// sShield := true ;
11758: LD_ADDR_EXP 97
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 35 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 35
11773: EQUAL
11774: IFFALSE 11784
// sTime := true ;
11776: LD_ADDR_EXP 98
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 36 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 36
11791: EQUAL
11792: IFFALSE 11802
// sTools := true ;
11794: LD_ADDR_EXP 99
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 101 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 101
11809: EQUAL
11810: IFFALSE 11820
// sSold := true ;
11812: LD_ADDR_EXP 64
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 102 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 102
11827: EQUAL
11828: IFFALSE 11838
// sDiff := true ;
11830: LD_ADDR_EXP 65
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 103 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 103
11845: EQUAL
11846: IFFALSE 11856
// sFog := true ;
11848: LD_ADDR_EXP 68
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 104 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 104
11863: EQUAL
11864: IFFALSE 11874
// sReset := true ;
11866: LD_ADDR_EXP 69
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 105 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 105
11881: EQUAL
11882: IFFALSE 11892
// sSun := true ;
11884: LD_ADDR_EXP 70
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 106 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 106
11899: EQUAL
11900: IFFALSE 11910
// sTiger := true ;
11902: LD_ADDR_EXP 66
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 107 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 107
11917: EQUAL
11918: IFFALSE 11928
// sBomb := true ;
11920: LD_ADDR_EXP 67
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 108 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 108
11935: EQUAL
11936: IFFALSE 11946
// sWound := true ;
11938: LD_ADDR_EXP 75
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 109 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 109
11953: EQUAL
11954: IFFALSE 11964
// sBetray := true ;
11956: LD_ADDR_EXP 79
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 110 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 110
11971: EQUAL
11972: IFFALSE 11982
// sContamin := true ;
11974: LD_ADDR_EXP 80
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 111 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 111
11989: EQUAL
11990: IFFALSE 12000
// sOil := true ;
11992: LD_ADDR_EXP 82
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 112 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 112
12007: EQUAL
12008: IFFALSE 12018
// sStu := true ;
12010: LD_ADDR_EXP 86
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 113 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 113
12025: EQUAL
12026: IFFALSE 12036
// sBazooka := true ;
12028: LD_ADDR_EXP 89
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 114 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 114
12043: EQUAL
12044: IFFALSE 12054
// sMortar := true ;
12046: LD_ADDR_EXP 90
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 115 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 115
12061: EQUAL
12062: IFFALSE 12072
// sRanger := true ;
12064: LD_ADDR_EXP 100
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 116 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 116
12079: EQUAL
12080: IFFALSE 12090
// sComputer := true ;
12082: LD_ADDR_EXP 101
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 117 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 117
12097: EQUAL
12098: IFFALSE 12108
// s30 := true ;
12100: LD_ADDR_EXP 102
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 118 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 118
12115: EQUAL
12116: IFFALSE 12126
// s60 := true ;
12118: LD_ADDR_EXP 103
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// end ; if p2 = hack_mode then
12126: LD_VAR 0 2
12130: PUSH
12131: LD_INT 101
12133: EQUAL
12134: IFFALSE 12262
// begin case p3 of 1 :
12136: LD_VAR 0 3
12140: PUSH
12141: LD_INT 1
12143: DOUBLE
12144: EQUAL
12145: IFTRUE 12149
12147: GO 12156
12149: POP
// hHackUnlimitedResources ; 2 :
12150: CALL 24433 0 0
12154: GO 12262
12156: LD_INT 2
12158: DOUBLE
12159: EQUAL
12160: IFTRUE 12164
12162: GO 12171
12164: POP
// hHackSetLevel10 ; 3 :
12165: CALL 24566 0 0
12169: GO 12262
12171: LD_INT 3
12173: DOUBLE
12174: EQUAL
12175: IFTRUE 12179
12177: GO 12186
12179: POP
// hHackSetLevel10YourUnits ; 4 :
12180: CALL 24651 0 0
12184: GO 12262
12186: LD_INT 4
12188: DOUBLE
12189: EQUAL
12190: IFTRUE 12194
12192: GO 12201
12194: POP
// hHackInvincible ; 5 :
12195: CALL 25099 0 0
12199: GO 12262
12201: LD_INT 5
12203: DOUBLE
12204: EQUAL
12205: IFTRUE 12209
12207: GO 12216
12209: POP
// hHackInvisible ; 6 :
12210: CALL 25210 0 0
12214: GO 12262
12216: LD_INT 6
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12231
12224: POP
// hHackChangeYourSide ; 7 :
12225: CALL 25267 0 0
12229: GO 12262
12231: LD_INT 7
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12246
12239: POP
// hHackChangeUnitSide ; 8 :
12240: CALL 25309 0 0
12244: GO 12262
12246: LD_INT 8
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12261
12254: POP
// hHackFog ; end ;
12255: CALL 25410 0 0
12259: GO 12262
12261: POP
// end ; if p2 = game_save_mode then
12262: LD_VAR 0 2
12266: PUSH
12267: LD_INT 102
12269: EQUAL
12270: IFFALSE 12335
// begin if p3 = 1 then
12272: LD_VAR 0 3
12276: PUSH
12277: LD_INT 1
12279: EQUAL
12280: IFFALSE 12292
// globalGameSaveCounter := p4 ;
12282: LD_ADDR_EXP 46
12286: PUSH
12287: LD_VAR 0 4
12291: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12292: LD_VAR 0 3
12296: PUSH
12297: LD_INT 2
12299: EQUAL
12300: PUSH
12301: LD_EXP 46
12305: AND
12306: IFFALSE 12325
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12308: LD_STRING setGameSaveCounter(
12310: PUSH
12311: LD_EXP 46
12315: STR
12316: PUSH
12317: LD_STRING )
12319: STR
12320: PPUSH
12321: CALL_OW 559
// display_strings := globalGameSaveCounter ;
12325: LD_ADDR_OWVAR 47
12329: PUSH
12330: LD_EXP 46
12334: ST_TO_ADDR
// end ; end ;
12335: LD_VAR 0 7
12339: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12340: GO 12342
12342: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12343: LD_STRING initStreamRollete();
12345: PPUSH
12346: CALL_OW 559
// InitStreamMode ;
12350: CALL 12362 0 0
// DefineStreamItems ( false ) ;
12354: LD_INT 0
12356: PPUSH
12357: CALL 12826 0 1
// end ;
12361: END
// function InitStreamMode ; begin
12362: LD_INT 0
12364: PPUSH
// streamModeActive := false ;
12365: LD_ADDR_EXP 47
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// normalCounter := 36 ;
12373: LD_ADDR_EXP 48
12377: PUSH
12378: LD_INT 36
12380: ST_TO_ADDR
// hardcoreCounter := 18 ;
12381: LD_ADDR_EXP 49
12385: PUSH
12386: LD_INT 18
12388: ST_TO_ADDR
// sRocket := false ;
12389: LD_ADDR_EXP 52
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// sSpeed := false ;
12397: LD_ADDR_EXP 51
12401: PUSH
12402: LD_INT 0
12404: ST_TO_ADDR
// sEngine := false ;
12405: LD_ADDR_EXP 53
12409: PUSH
12410: LD_INT 0
12412: ST_TO_ADDR
// sSpec := false ;
12413: LD_ADDR_EXP 50
12417: PUSH
12418: LD_INT 0
12420: ST_TO_ADDR
// sLevel := false ;
12421: LD_ADDR_EXP 54
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// sArmoury := false ;
12429: LD_ADDR_EXP 55
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// sRadar := false ;
12437: LD_ADDR_EXP 56
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// sBunker := false ;
12445: LD_ADDR_EXP 57
12449: PUSH
12450: LD_INT 0
12452: ST_TO_ADDR
// sHack := false ;
12453: LD_ADDR_EXP 58
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// sFire := false ;
12461: LD_ADDR_EXP 59
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// sRefresh := false ;
12469: LD_ADDR_EXP 60
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// sExp := false ;
12477: LD_ADDR_EXP 61
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// sDepot := false ;
12485: LD_ADDR_EXP 62
12489: PUSH
12490: LD_INT 0
12492: ST_TO_ADDR
// sFlag := false ;
12493: LD_ADDR_EXP 63
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// sKamikadze := false ;
12501: LD_ADDR_EXP 71
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// sTroll := false ;
12509: LD_ADDR_EXP 72
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// sSlow := false ;
12517: LD_ADDR_EXP 73
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// sLack := false ;
12525: LD_ADDR_EXP 74
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// sTank := false ;
12533: LD_ADDR_EXP 76
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// sRemote := false ;
12541: LD_ADDR_EXP 77
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// sPowell := false ;
12549: LD_ADDR_EXP 78
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// sTeleport := false ;
12557: LD_ADDR_EXP 81
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sOilTower := false ;
12565: LD_ADDR_EXP 83
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// sShovel := false ;
12573: LD_ADDR_EXP 84
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// sSheik := false ;
12581: LD_ADDR_EXP 85
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// sEarthquake := false ;
12589: LD_ADDR_EXP 87
12593: PUSH
12594: LD_INT 0
12596: ST_TO_ADDR
// sAI := false ;
12597: LD_ADDR_EXP 88
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sCargo := false ;
12605: LD_ADDR_EXP 91
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sDLaser := false ;
12613: LD_ADDR_EXP 92
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sExchange := false ;
12621: LD_ADDR_EXP 93
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sFac := false ;
12629: LD_ADDR_EXP 94
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sPower := false ;
12637: LD_ADDR_EXP 95
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sRandom := false ;
12645: LD_ADDR_EXP 96
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sShield := false ;
12653: LD_ADDR_EXP 97
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sTime := false ;
12661: LD_ADDR_EXP 98
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sTools := false ;
12669: LD_ADDR_EXP 99
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sSold := false ;
12677: LD_ADDR_EXP 64
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sDiff := false ;
12685: LD_ADDR_EXP 65
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sFog := false ;
12693: LD_ADDR_EXP 68
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sReset := false ;
12701: LD_ADDR_EXP 69
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sSun := false ;
12709: LD_ADDR_EXP 70
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sTiger := false ;
12717: LD_ADDR_EXP 66
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sBomb := false ;
12725: LD_ADDR_EXP 67
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sWound := false ;
12733: LD_ADDR_EXP 75
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sBetray := false ;
12741: LD_ADDR_EXP 79
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sContamin := false ;
12749: LD_ADDR_EXP 80
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sOil := false ;
12757: LD_ADDR_EXP 82
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sStu := false ;
12765: LD_ADDR_EXP 86
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sBazooka := false ;
12773: LD_ADDR_EXP 89
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// sMortar := false ;
12781: LD_ADDR_EXP 90
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// sRanger := false ;
12789: LD_ADDR_EXP 100
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// sComputer := false ;
12797: LD_ADDR_EXP 101
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// s30 := false ;
12805: LD_ADDR_EXP 102
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// s60 := false ;
12813: LD_ADDR_EXP 103
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// end ;
12821: LD_VAR 0 1
12825: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12826: LD_INT 0
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
12832: PPUSH
12833: PPUSH
12834: PPUSH
// result := [ ] ;
12835: LD_ADDR_VAR 0 2
12839: PUSH
12840: EMPTY
12841: ST_TO_ADDR
// if campaign_id = 1 then
12842: LD_OWVAR 69
12846: PUSH
12847: LD_INT 1
12849: EQUAL
12850: IFFALSE 16016
// begin case mission_number of 1 :
12852: LD_OWVAR 70
12856: PUSH
12857: LD_INT 1
12859: DOUBLE
12860: EQUAL
12861: IFTRUE 12865
12863: GO 12941
12865: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12866: LD_ADDR_VAR 0 2
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: LD_INT 4
12876: PUSH
12877: LD_INT 11
12879: PUSH
12880: LD_INT 12
12882: PUSH
12883: LD_INT 15
12885: PUSH
12886: LD_INT 16
12888: PUSH
12889: LD_INT 22
12891: PUSH
12892: LD_INT 23
12894: PUSH
12895: LD_INT 26
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 101
12911: PUSH
12912: LD_INT 102
12914: PUSH
12915: LD_INT 106
12917: PUSH
12918: LD_INT 116
12920: PUSH
12921: LD_INT 117
12923: PUSH
12924: LD_INT 118
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: ST_TO_ADDR
12939: GO 16014
12941: LD_INT 2
12943: DOUBLE
12944: EQUAL
12945: IFTRUE 12949
12947: GO 13033
12949: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12950: LD_ADDR_VAR 0 2
12954: PUSH
12955: LD_INT 2
12957: PUSH
12958: LD_INT 4
12960: PUSH
12961: LD_INT 11
12963: PUSH
12964: LD_INT 12
12966: PUSH
12967: LD_INT 15
12969: PUSH
12970: LD_INT 16
12972: PUSH
12973: LD_INT 22
12975: PUSH
12976: LD_INT 23
12978: PUSH
12979: LD_INT 26
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 101
12995: PUSH
12996: LD_INT 102
12998: PUSH
12999: LD_INT 105
13001: PUSH
13002: LD_INT 106
13004: PUSH
13005: LD_INT 108
13007: PUSH
13008: LD_INT 116
13010: PUSH
13011: LD_INT 117
13013: PUSH
13014: LD_INT 118
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ST_TO_ADDR
13031: GO 16014
13033: LD_INT 3
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13129
13041: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 4
13052: PUSH
13053: LD_INT 5
13055: PUSH
13056: LD_INT 11
13058: PUSH
13059: LD_INT 12
13061: PUSH
13062: LD_INT 15
13064: PUSH
13065: LD_INT 16
13067: PUSH
13068: LD_INT 22
13070: PUSH
13071: LD_INT 26
13073: PUSH
13074: LD_INT 36
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 101
13091: PUSH
13092: LD_INT 102
13094: PUSH
13095: LD_INT 105
13097: PUSH
13098: LD_INT 106
13100: PUSH
13101: LD_INT 108
13103: PUSH
13104: LD_INT 116
13106: PUSH
13107: LD_INT 117
13109: PUSH
13110: LD_INT 118
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: ST_TO_ADDR
13127: GO 16014
13129: LD_INT 4
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13233
13137: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13138: LD_ADDR_VAR 0 2
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: LD_INT 4
13148: PUSH
13149: LD_INT 5
13151: PUSH
13152: LD_INT 8
13154: PUSH
13155: LD_INT 11
13157: PUSH
13158: LD_INT 12
13160: PUSH
13161: LD_INT 15
13163: PUSH
13164: LD_INT 16
13166: PUSH
13167: LD_INT 22
13169: PUSH
13170: LD_INT 23
13172: PUSH
13173: LD_INT 26
13175: PUSH
13176: LD_INT 36
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 101
13195: PUSH
13196: LD_INT 102
13198: PUSH
13199: LD_INT 105
13201: PUSH
13202: LD_INT 106
13204: PUSH
13205: LD_INT 108
13207: PUSH
13208: LD_INT 116
13210: PUSH
13211: LD_INT 117
13213: PUSH
13214: LD_INT 118
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: ST_TO_ADDR
13231: GO 16014
13233: LD_INT 5
13235: DOUBLE
13236: EQUAL
13237: IFTRUE 13241
13239: GO 13353
13241: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: LD_INT 4
13252: PUSH
13253: LD_INT 5
13255: PUSH
13256: LD_INT 6
13258: PUSH
13259: LD_INT 8
13261: PUSH
13262: LD_INT 11
13264: PUSH
13265: LD_INT 12
13267: PUSH
13268: LD_INT 15
13270: PUSH
13271: LD_INT 16
13273: PUSH
13274: LD_INT 22
13276: PUSH
13277: LD_INT 23
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 26
13285: PUSH
13286: LD_INT 36
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 101
13307: PUSH
13308: LD_INT 102
13310: PUSH
13311: LD_INT 105
13313: PUSH
13314: LD_INT 106
13316: PUSH
13317: LD_INT 108
13319: PUSH
13320: LD_INT 109
13322: PUSH
13323: LD_INT 112
13325: PUSH
13326: LD_INT 116
13328: PUSH
13329: LD_INT 117
13331: PUSH
13332: LD_INT 118
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: ST_TO_ADDR
13351: GO 16014
13353: LD_INT 6
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13493
13361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13362: LD_ADDR_VAR 0 2
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 4
13372: PUSH
13373: LD_INT 5
13375: PUSH
13376: LD_INT 6
13378: PUSH
13379: LD_INT 8
13381: PUSH
13382: LD_INT 11
13384: PUSH
13385: LD_INT 12
13387: PUSH
13388: LD_INT 15
13390: PUSH
13391: LD_INT 16
13393: PUSH
13394: LD_INT 20
13396: PUSH
13397: LD_INT 21
13399: PUSH
13400: LD_INT 22
13402: PUSH
13403: LD_INT 23
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 26
13411: PUSH
13412: LD_INT 30
13414: PUSH
13415: LD_INT 31
13417: PUSH
13418: LD_INT 32
13420: PUSH
13421: LD_INT 36
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 101
13447: PUSH
13448: LD_INT 102
13450: PUSH
13451: LD_INT 105
13453: PUSH
13454: LD_INT 106
13456: PUSH
13457: LD_INT 108
13459: PUSH
13460: LD_INT 109
13462: PUSH
13463: LD_INT 112
13465: PUSH
13466: LD_INT 116
13468: PUSH
13469: LD_INT 117
13471: PUSH
13472: LD_INT 118
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: ST_TO_ADDR
13491: GO 16014
13493: LD_INT 7
13495: DOUBLE
13496: EQUAL
13497: IFTRUE 13501
13499: GO 13613
13501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_INT 2
13509: PUSH
13510: LD_INT 4
13512: PUSH
13513: LD_INT 5
13515: PUSH
13516: LD_INT 7
13518: PUSH
13519: LD_INT 11
13521: PUSH
13522: LD_INT 12
13524: PUSH
13525: LD_INT 15
13527: PUSH
13528: LD_INT 16
13530: PUSH
13531: LD_INT 20
13533: PUSH
13534: LD_INT 21
13536: PUSH
13537: LD_INT 22
13539: PUSH
13540: LD_INT 23
13542: PUSH
13543: LD_INT 25
13545: PUSH
13546: LD_INT 26
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 101
13567: PUSH
13568: LD_INT 102
13570: PUSH
13571: LD_INT 103
13573: PUSH
13574: LD_INT 105
13576: PUSH
13577: LD_INT 106
13579: PUSH
13580: LD_INT 108
13582: PUSH
13583: LD_INT 112
13585: PUSH
13586: LD_INT 116
13588: PUSH
13589: LD_INT 117
13591: PUSH
13592: LD_INT 118
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: ST_TO_ADDR
13611: GO 16014
13613: LD_INT 8
13615: DOUBLE
13616: EQUAL
13617: IFTRUE 13621
13619: GO 13761
13621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13622: LD_ADDR_VAR 0 2
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 4
13632: PUSH
13633: LD_INT 5
13635: PUSH
13636: LD_INT 6
13638: PUSH
13639: LD_INT 7
13641: PUSH
13642: LD_INT 8
13644: PUSH
13645: LD_INT 11
13647: PUSH
13648: LD_INT 12
13650: PUSH
13651: LD_INT 15
13653: PUSH
13654: LD_INT 16
13656: PUSH
13657: LD_INT 20
13659: PUSH
13660: LD_INT 21
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 23
13668: PUSH
13669: LD_INT 25
13671: PUSH
13672: LD_INT 26
13674: PUSH
13675: LD_INT 30
13677: PUSH
13678: LD_INT 31
13680: PUSH
13681: LD_INT 32
13683: PUSH
13684: LD_INT 36
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 101
13711: PUSH
13712: LD_INT 102
13714: PUSH
13715: LD_INT 103
13717: PUSH
13718: LD_INT 105
13720: PUSH
13721: LD_INT 106
13723: PUSH
13724: LD_INT 108
13726: PUSH
13727: LD_INT 109
13729: PUSH
13730: LD_INT 112
13732: PUSH
13733: LD_INT 116
13735: PUSH
13736: LD_INT 117
13738: PUSH
13739: LD_INT 118
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: ST_TO_ADDR
13759: GO 16014
13761: LD_INT 9
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13769
13767: GO 13917
13769: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_INT 2
13777: PUSH
13778: LD_INT 4
13780: PUSH
13781: LD_INT 5
13783: PUSH
13784: LD_INT 6
13786: PUSH
13787: LD_INT 7
13789: PUSH
13790: LD_INT 8
13792: PUSH
13793: LD_INT 11
13795: PUSH
13796: LD_INT 12
13798: PUSH
13799: LD_INT 15
13801: PUSH
13802: LD_INT 16
13804: PUSH
13805: LD_INT 20
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_INT 23
13816: PUSH
13817: LD_INT 25
13819: PUSH
13820: LD_INT 26
13822: PUSH
13823: LD_INT 28
13825: PUSH
13826: LD_INT 30
13828: PUSH
13829: LD_INT 31
13831: PUSH
13832: LD_INT 32
13834: PUSH
13835: LD_INT 36
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 101
13863: PUSH
13864: LD_INT 102
13866: PUSH
13867: LD_INT 103
13869: PUSH
13870: LD_INT 105
13872: PUSH
13873: LD_INT 106
13875: PUSH
13876: LD_INT 108
13878: PUSH
13879: LD_INT 109
13881: PUSH
13882: LD_INT 112
13884: PUSH
13885: LD_INT 114
13887: PUSH
13888: LD_INT 116
13890: PUSH
13891: LD_INT 117
13893: PUSH
13894: LD_INT 118
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: ST_TO_ADDR
13915: GO 16014
13917: LD_INT 10
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 14121
13925: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13926: LD_ADDR_VAR 0 2
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 4
13936: PUSH
13937: LD_INT 5
13939: PUSH
13940: LD_INT 6
13942: PUSH
13943: LD_INT 7
13945: PUSH
13946: LD_INT 8
13948: PUSH
13949: LD_INT 9
13951: PUSH
13952: LD_INT 10
13954: PUSH
13955: LD_INT 11
13957: PUSH
13958: LD_INT 12
13960: PUSH
13961: LD_INT 13
13963: PUSH
13964: LD_INT 14
13966: PUSH
13967: LD_INT 15
13969: PUSH
13970: LD_INT 16
13972: PUSH
13973: LD_INT 17
13975: PUSH
13976: LD_INT 18
13978: PUSH
13979: LD_INT 19
13981: PUSH
13982: LD_INT 20
13984: PUSH
13985: LD_INT 21
13987: PUSH
13988: LD_INT 22
13990: PUSH
13991: LD_INT 23
13993: PUSH
13994: LD_INT 24
13996: PUSH
13997: LD_INT 25
13999: PUSH
14000: LD_INT 26
14002: PUSH
14003: LD_INT 28
14005: PUSH
14006: LD_INT 30
14008: PUSH
14009: LD_INT 31
14011: PUSH
14012: LD_INT 32
14014: PUSH
14015: LD_INT 36
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 101
14051: PUSH
14052: LD_INT 102
14054: PUSH
14055: LD_INT 103
14057: PUSH
14058: LD_INT 104
14060: PUSH
14061: LD_INT 105
14063: PUSH
14064: LD_INT 106
14066: PUSH
14067: LD_INT 107
14069: PUSH
14070: LD_INT 108
14072: PUSH
14073: LD_INT 109
14075: PUSH
14076: LD_INT 110
14078: PUSH
14079: LD_INT 111
14081: PUSH
14082: LD_INT 112
14084: PUSH
14085: LD_INT 114
14087: PUSH
14088: LD_INT 116
14090: PUSH
14091: LD_INT 117
14093: PUSH
14094: LD_INT 118
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: ST_TO_ADDR
14119: GO 16014
14121: LD_INT 11
14123: DOUBLE
14124: EQUAL
14125: IFTRUE 14129
14127: GO 14333
14129: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14130: LD_ADDR_VAR 0 2
14134: PUSH
14135: LD_INT 2
14137: PUSH
14138: LD_INT 3
14140: PUSH
14141: LD_INT 4
14143: PUSH
14144: LD_INT 5
14146: PUSH
14147: LD_INT 6
14149: PUSH
14150: LD_INT 7
14152: PUSH
14153: LD_INT 8
14155: PUSH
14156: LD_INT 9
14158: PUSH
14159: LD_INT 10
14161: PUSH
14162: LD_INT 11
14164: PUSH
14165: LD_INT 12
14167: PUSH
14168: LD_INT 13
14170: PUSH
14171: LD_INT 14
14173: PUSH
14174: LD_INT 15
14176: PUSH
14177: LD_INT 16
14179: PUSH
14180: LD_INT 17
14182: PUSH
14183: LD_INT 18
14185: PUSH
14186: LD_INT 19
14188: PUSH
14189: LD_INT 20
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 23
14200: PUSH
14201: LD_INT 24
14203: PUSH
14204: LD_INT 25
14206: PUSH
14207: LD_INT 26
14209: PUSH
14210: LD_INT 28
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 31
14218: PUSH
14219: LD_INT 32
14221: PUSH
14222: LD_INT 34
14224: PUSH
14225: LD_INT 36
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 101
14263: PUSH
14264: LD_INT 102
14266: PUSH
14267: LD_INT 103
14269: PUSH
14270: LD_INT 104
14272: PUSH
14273: LD_INT 105
14275: PUSH
14276: LD_INT 106
14278: PUSH
14279: LD_INT 107
14281: PUSH
14282: LD_INT 108
14284: PUSH
14285: LD_INT 109
14287: PUSH
14288: LD_INT 110
14290: PUSH
14291: LD_INT 111
14293: PUSH
14294: LD_INT 112
14296: PUSH
14297: LD_INT 114
14299: PUSH
14300: LD_INT 116
14302: PUSH
14303: LD_INT 117
14305: PUSH
14306: LD_INT 118
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: ST_TO_ADDR
14331: GO 16014
14333: LD_INT 12
14335: DOUBLE
14336: EQUAL
14337: IFTRUE 14341
14339: GO 14561
14341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14342: LD_ADDR_VAR 0 2
14346: PUSH
14347: LD_INT 1
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: LD_INT 4
14358: PUSH
14359: LD_INT 5
14361: PUSH
14362: LD_INT 6
14364: PUSH
14365: LD_INT 7
14367: PUSH
14368: LD_INT 8
14370: PUSH
14371: LD_INT 9
14373: PUSH
14374: LD_INT 10
14376: PUSH
14377: LD_INT 11
14379: PUSH
14380: LD_INT 12
14382: PUSH
14383: LD_INT 13
14385: PUSH
14386: LD_INT 14
14388: PUSH
14389: LD_INT 15
14391: PUSH
14392: LD_INT 16
14394: PUSH
14395: LD_INT 17
14397: PUSH
14398: LD_INT 18
14400: PUSH
14401: LD_INT 19
14403: PUSH
14404: LD_INT 20
14406: PUSH
14407: LD_INT 21
14409: PUSH
14410: LD_INT 22
14412: PUSH
14413: LD_INT 23
14415: PUSH
14416: LD_INT 24
14418: PUSH
14419: LD_INT 25
14421: PUSH
14422: LD_INT 26
14424: PUSH
14425: LD_INT 27
14427: PUSH
14428: LD_INT 28
14430: PUSH
14431: LD_INT 30
14433: PUSH
14434: LD_INT 31
14436: PUSH
14437: LD_INT 32
14439: PUSH
14440: LD_INT 33
14442: PUSH
14443: LD_INT 34
14445: PUSH
14446: LD_INT 36
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 101
14487: PUSH
14488: LD_INT 102
14490: PUSH
14491: LD_INT 103
14493: PUSH
14494: LD_INT 104
14496: PUSH
14497: LD_INT 105
14499: PUSH
14500: LD_INT 106
14502: PUSH
14503: LD_INT 107
14505: PUSH
14506: LD_INT 108
14508: PUSH
14509: LD_INT 109
14511: PUSH
14512: LD_INT 110
14514: PUSH
14515: LD_INT 111
14517: PUSH
14518: LD_INT 112
14520: PUSH
14521: LD_INT 113
14523: PUSH
14524: LD_INT 114
14526: PUSH
14527: LD_INT 116
14529: PUSH
14530: LD_INT 117
14532: PUSH
14533: LD_INT 118
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: ST_TO_ADDR
14559: GO 16014
14561: LD_INT 13
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14777
14569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 8
14592: PUSH
14593: LD_INT 9
14595: PUSH
14596: LD_INT 10
14598: PUSH
14599: LD_INT 11
14601: PUSH
14602: LD_INT 12
14604: PUSH
14605: LD_INT 14
14607: PUSH
14608: LD_INT 15
14610: PUSH
14611: LD_INT 16
14613: PUSH
14614: LD_INT 17
14616: PUSH
14617: LD_INT 18
14619: PUSH
14620: LD_INT 19
14622: PUSH
14623: LD_INT 20
14625: PUSH
14626: LD_INT 21
14628: PUSH
14629: LD_INT 22
14631: PUSH
14632: LD_INT 23
14634: PUSH
14635: LD_INT 24
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 26
14643: PUSH
14644: LD_INT 27
14646: PUSH
14647: LD_INT 28
14649: PUSH
14650: LD_INT 30
14652: PUSH
14653: LD_INT 31
14655: PUSH
14656: LD_INT 32
14658: PUSH
14659: LD_INT 33
14661: PUSH
14662: LD_INT 34
14664: PUSH
14665: LD_INT 36
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 102
14706: PUSH
14707: LD_INT 103
14709: PUSH
14710: LD_INT 104
14712: PUSH
14713: LD_INT 105
14715: PUSH
14716: LD_INT 106
14718: PUSH
14719: LD_INT 107
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 110
14730: PUSH
14731: LD_INT 111
14733: PUSH
14734: LD_INT 112
14736: PUSH
14737: LD_INT 113
14739: PUSH
14740: LD_INT 114
14742: PUSH
14743: LD_INT 116
14745: PUSH
14746: LD_INT 117
14748: PUSH
14749: LD_INT 118
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: ST_TO_ADDR
14775: GO 16014
14777: LD_INT 14
14779: DOUBLE
14780: EQUAL
14781: IFTRUE 14785
14783: GO 15009
14785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 6
14808: PUSH
14809: LD_INT 7
14811: PUSH
14812: LD_INT 8
14814: PUSH
14815: LD_INT 9
14817: PUSH
14818: LD_INT 10
14820: PUSH
14821: LD_INT 11
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: LD_INT 13
14829: PUSH
14830: LD_INT 14
14832: PUSH
14833: LD_INT 15
14835: PUSH
14836: LD_INT 16
14838: PUSH
14839: LD_INT 17
14841: PUSH
14842: LD_INT 18
14844: PUSH
14845: LD_INT 19
14847: PUSH
14848: LD_INT 20
14850: PUSH
14851: LD_INT 21
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_INT 23
14859: PUSH
14860: LD_INT 24
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 26
14868: PUSH
14869: LD_INT 27
14871: PUSH
14872: LD_INT 28
14874: PUSH
14875: LD_INT 29
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 36
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 101
14935: PUSH
14936: LD_INT 102
14938: PUSH
14939: LD_INT 103
14941: PUSH
14942: LD_INT 104
14944: PUSH
14945: LD_INT 105
14947: PUSH
14948: LD_INT 106
14950: PUSH
14951: LD_INT 107
14953: PUSH
14954: LD_INT 108
14956: PUSH
14957: LD_INT 109
14959: PUSH
14960: LD_INT 110
14962: PUSH
14963: LD_INT 111
14965: PUSH
14966: LD_INT 112
14968: PUSH
14969: LD_INT 113
14971: PUSH
14972: LD_INT 114
14974: PUSH
14975: LD_INT 116
14977: PUSH
14978: LD_INT 117
14980: PUSH
14981: LD_INT 118
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: ST_TO_ADDR
15007: GO 16014
15009: LD_INT 15
15011: DOUBLE
15012: EQUAL
15013: IFTRUE 15017
15015: GO 15241
15017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: LD_INT 4
15034: PUSH
15035: LD_INT 5
15037: PUSH
15038: LD_INT 6
15040: PUSH
15041: LD_INT 7
15043: PUSH
15044: LD_INT 8
15046: PUSH
15047: LD_INT 9
15049: PUSH
15050: LD_INT 10
15052: PUSH
15053: LD_INT 11
15055: PUSH
15056: LD_INT 12
15058: PUSH
15059: LD_INT 13
15061: PUSH
15062: LD_INT 14
15064: PUSH
15065: LD_INT 15
15067: PUSH
15068: LD_INT 16
15070: PUSH
15071: LD_INT 17
15073: PUSH
15074: LD_INT 18
15076: PUSH
15077: LD_INT 19
15079: PUSH
15080: LD_INT 20
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 22
15088: PUSH
15089: LD_INT 23
15091: PUSH
15092: LD_INT 24
15094: PUSH
15095: LD_INT 25
15097: PUSH
15098: LD_INT 26
15100: PUSH
15101: LD_INT 27
15103: PUSH
15104: LD_INT 28
15106: PUSH
15107: LD_INT 29
15109: PUSH
15110: LD_INT 30
15112: PUSH
15113: LD_INT 31
15115: PUSH
15116: LD_INT 32
15118: PUSH
15119: LD_INT 33
15121: PUSH
15122: LD_INT 34
15124: PUSH
15125: LD_INT 36
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 101
15167: PUSH
15168: LD_INT 102
15170: PUSH
15171: LD_INT 103
15173: PUSH
15174: LD_INT 104
15176: PUSH
15177: LD_INT 105
15179: PUSH
15180: LD_INT 106
15182: PUSH
15183: LD_INT 107
15185: PUSH
15186: LD_INT 108
15188: PUSH
15189: LD_INT 109
15191: PUSH
15192: LD_INT 110
15194: PUSH
15195: LD_INT 111
15197: PUSH
15198: LD_INT 112
15200: PUSH
15201: LD_INT 113
15203: PUSH
15204: LD_INT 114
15206: PUSH
15207: LD_INT 116
15209: PUSH
15210: LD_INT 117
15212: PUSH
15213: LD_INT 118
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: ST_TO_ADDR
15239: GO 16014
15241: LD_INT 16
15243: DOUBLE
15244: EQUAL
15245: IFTRUE 15249
15247: GO 15385
15249: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15250: LD_ADDR_VAR 0 2
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: LD_INT 4
15260: PUSH
15261: LD_INT 5
15263: PUSH
15264: LD_INT 7
15266: PUSH
15267: LD_INT 11
15269: PUSH
15270: LD_INT 12
15272: PUSH
15273: LD_INT 15
15275: PUSH
15276: LD_INT 16
15278: PUSH
15279: LD_INT 20
15281: PUSH
15282: LD_INT 21
15284: PUSH
15285: LD_INT 22
15287: PUSH
15288: LD_INT 23
15290: PUSH
15291: LD_INT 25
15293: PUSH
15294: LD_INT 26
15296: PUSH
15297: LD_INT 30
15299: PUSH
15300: LD_INT 31
15302: PUSH
15303: LD_INT 32
15305: PUSH
15306: LD_INT 33
15308: PUSH
15309: LD_INT 34
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 101
15335: PUSH
15336: LD_INT 102
15338: PUSH
15339: LD_INT 103
15341: PUSH
15342: LD_INT 106
15344: PUSH
15345: LD_INT 108
15347: PUSH
15348: LD_INT 112
15350: PUSH
15351: LD_INT 113
15353: PUSH
15354: LD_INT 114
15356: PUSH
15357: LD_INT 116
15359: PUSH
15360: LD_INT 117
15362: PUSH
15363: LD_INT 118
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: ST_TO_ADDR
15383: GO 16014
15385: LD_INT 17
15387: DOUBLE
15388: EQUAL
15389: IFTRUE 15393
15391: GO 15617
15393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: LD_INT 3
15407: PUSH
15408: LD_INT 4
15410: PUSH
15411: LD_INT 5
15413: PUSH
15414: LD_INT 6
15416: PUSH
15417: LD_INT 7
15419: PUSH
15420: LD_INT 8
15422: PUSH
15423: LD_INT 9
15425: PUSH
15426: LD_INT 10
15428: PUSH
15429: LD_INT 11
15431: PUSH
15432: LD_INT 12
15434: PUSH
15435: LD_INT 13
15437: PUSH
15438: LD_INT 14
15440: PUSH
15441: LD_INT 15
15443: PUSH
15444: LD_INT 16
15446: PUSH
15447: LD_INT 17
15449: PUSH
15450: LD_INT 18
15452: PUSH
15453: LD_INT 19
15455: PUSH
15456: LD_INT 20
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 22
15464: PUSH
15465: LD_INT 23
15467: PUSH
15468: LD_INT 24
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 27
15479: PUSH
15480: LD_INT 28
15482: PUSH
15483: LD_INT 29
15485: PUSH
15486: LD_INT 30
15488: PUSH
15489: LD_INT 31
15491: PUSH
15492: LD_INT 32
15494: PUSH
15495: LD_INT 33
15497: PUSH
15498: LD_INT 34
15500: PUSH
15501: LD_INT 36
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 101
15543: PUSH
15544: LD_INT 102
15546: PUSH
15547: LD_INT 103
15549: PUSH
15550: LD_INT 104
15552: PUSH
15553: LD_INT 105
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 107
15561: PUSH
15562: LD_INT 108
15564: PUSH
15565: LD_INT 109
15567: PUSH
15568: LD_INT 110
15570: PUSH
15571: LD_INT 111
15573: PUSH
15574: LD_INT 112
15576: PUSH
15577: LD_INT 113
15579: PUSH
15580: LD_INT 114
15582: PUSH
15583: LD_INT 116
15585: PUSH
15586: LD_INT 117
15588: PUSH
15589: LD_INT 118
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: ST_TO_ADDR
15615: GO 16014
15617: LD_INT 18
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15773
15625: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 4
15636: PUSH
15637: LD_INT 5
15639: PUSH
15640: LD_INT 7
15642: PUSH
15643: LD_INT 11
15645: PUSH
15646: LD_INT 12
15648: PUSH
15649: LD_INT 15
15651: PUSH
15652: LD_INT 16
15654: PUSH
15655: LD_INT 20
15657: PUSH
15658: LD_INT 21
15660: PUSH
15661: LD_INT 22
15663: PUSH
15664: LD_INT 23
15666: PUSH
15667: LD_INT 25
15669: PUSH
15670: LD_INT 26
15672: PUSH
15673: LD_INT 30
15675: PUSH
15676: LD_INT 31
15678: PUSH
15679: LD_INT 32
15681: PUSH
15682: LD_INT 33
15684: PUSH
15685: LD_INT 34
15687: PUSH
15688: LD_INT 35
15690: PUSH
15691: LD_INT 36
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 101
15719: PUSH
15720: LD_INT 102
15722: PUSH
15723: LD_INT 103
15725: PUSH
15726: LD_INT 106
15728: PUSH
15729: LD_INT 108
15731: PUSH
15732: LD_INT 112
15734: PUSH
15735: LD_INT 113
15737: PUSH
15738: LD_INT 114
15740: PUSH
15741: LD_INT 115
15743: PUSH
15744: LD_INT 116
15746: PUSH
15747: LD_INT 117
15749: PUSH
15750: LD_INT 118
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: ST_TO_ADDR
15771: GO 16014
15773: LD_INT 19
15775: DOUBLE
15776: EQUAL
15777: IFTRUE 15781
15779: GO 16013
15781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15782: LD_ADDR_VAR 0 2
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: LD_INT 3
15795: PUSH
15796: LD_INT 4
15798: PUSH
15799: LD_INT 5
15801: PUSH
15802: LD_INT 6
15804: PUSH
15805: LD_INT 7
15807: PUSH
15808: LD_INT 8
15810: PUSH
15811: LD_INT 9
15813: PUSH
15814: LD_INT 10
15816: PUSH
15817: LD_INT 11
15819: PUSH
15820: LD_INT 12
15822: PUSH
15823: LD_INT 13
15825: PUSH
15826: LD_INT 14
15828: PUSH
15829: LD_INT 15
15831: PUSH
15832: LD_INT 16
15834: PUSH
15835: LD_INT 17
15837: PUSH
15838: LD_INT 18
15840: PUSH
15841: LD_INT 19
15843: PUSH
15844: LD_INT 20
15846: PUSH
15847: LD_INT 21
15849: PUSH
15850: LD_INT 22
15852: PUSH
15853: LD_INT 23
15855: PUSH
15856: LD_INT 24
15858: PUSH
15859: LD_INT 25
15861: PUSH
15862: LD_INT 26
15864: PUSH
15865: LD_INT 27
15867: PUSH
15868: LD_INT 28
15870: PUSH
15871: LD_INT 29
15873: PUSH
15874: LD_INT 30
15876: PUSH
15877: LD_INT 31
15879: PUSH
15880: LD_INT 32
15882: PUSH
15883: LD_INT 33
15885: PUSH
15886: LD_INT 34
15888: PUSH
15889: LD_INT 35
15891: PUSH
15892: LD_INT 36
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 101
15935: PUSH
15936: LD_INT 102
15938: PUSH
15939: LD_INT 103
15941: PUSH
15942: LD_INT 104
15944: PUSH
15945: LD_INT 105
15947: PUSH
15948: LD_INT 106
15950: PUSH
15951: LD_INT 107
15953: PUSH
15954: LD_INT 108
15956: PUSH
15957: LD_INT 109
15959: PUSH
15960: LD_INT 110
15962: PUSH
15963: LD_INT 111
15965: PUSH
15966: LD_INT 112
15968: PUSH
15969: LD_INT 113
15971: PUSH
15972: LD_INT 114
15974: PUSH
15975: LD_INT 115
15977: PUSH
15978: LD_INT 116
15980: PUSH
15981: LD_INT 117
15983: PUSH
15984: LD_INT 118
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: ST_TO_ADDR
16011: GO 16014
16013: POP
// end else
16014: GO 16245
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16016: LD_ADDR_VAR 0 2
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: LD_INT 2
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: LD_INT 4
16032: PUSH
16033: LD_INT 5
16035: PUSH
16036: LD_INT 6
16038: PUSH
16039: LD_INT 7
16041: PUSH
16042: LD_INT 8
16044: PUSH
16045: LD_INT 9
16047: PUSH
16048: LD_INT 10
16050: PUSH
16051: LD_INT 11
16053: PUSH
16054: LD_INT 12
16056: PUSH
16057: LD_INT 13
16059: PUSH
16060: LD_INT 14
16062: PUSH
16063: LD_INT 15
16065: PUSH
16066: LD_INT 16
16068: PUSH
16069: LD_INT 17
16071: PUSH
16072: LD_INT 18
16074: PUSH
16075: LD_INT 19
16077: PUSH
16078: LD_INT 20
16080: PUSH
16081: LD_INT 21
16083: PUSH
16084: LD_INT 22
16086: PUSH
16087: LD_INT 23
16089: PUSH
16090: LD_INT 24
16092: PUSH
16093: LD_INT 25
16095: PUSH
16096: LD_INT 26
16098: PUSH
16099: LD_INT 27
16101: PUSH
16102: LD_INT 28
16104: PUSH
16105: LD_INT 29
16107: PUSH
16108: LD_INT 30
16110: PUSH
16111: LD_INT 31
16113: PUSH
16114: LD_INT 32
16116: PUSH
16117: LD_INT 33
16119: PUSH
16120: LD_INT 34
16122: PUSH
16123: LD_INT 35
16125: PUSH
16126: LD_INT 36
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 101
16169: PUSH
16170: LD_INT 102
16172: PUSH
16173: LD_INT 103
16175: PUSH
16176: LD_INT 104
16178: PUSH
16179: LD_INT 105
16181: PUSH
16182: LD_INT 106
16184: PUSH
16185: LD_INT 107
16187: PUSH
16188: LD_INT 108
16190: PUSH
16191: LD_INT 109
16193: PUSH
16194: LD_INT 110
16196: PUSH
16197: LD_INT 111
16199: PUSH
16200: LD_INT 112
16202: PUSH
16203: LD_INT 113
16205: PUSH
16206: LD_INT 114
16208: PUSH
16209: LD_INT 115
16211: PUSH
16212: LD_INT 116
16214: PUSH
16215: LD_INT 117
16217: PUSH
16218: LD_INT 118
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: ST_TO_ADDR
// if result then
16245: LD_VAR 0 2
16249: IFFALSE 17035
// begin normal :=  ;
16251: LD_ADDR_VAR 0 5
16255: PUSH
16256: LD_STRING 
16258: ST_TO_ADDR
// hardcore :=  ;
16259: LD_ADDR_VAR 0 6
16263: PUSH
16264: LD_STRING 
16266: ST_TO_ADDR
// active :=  ;
16267: LD_ADDR_VAR 0 7
16271: PUSH
16272: LD_STRING 
16274: ST_TO_ADDR
// for i = 1 to normalCounter do
16275: LD_ADDR_VAR 0 8
16279: PUSH
16280: DOUBLE
16281: LD_INT 1
16283: DEC
16284: ST_TO_ADDR
16285: LD_EXP 48
16289: PUSH
16290: FOR_TO
16291: IFFALSE 16392
// begin tmp := 0 ;
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: LD_STRING 0
16300: ST_TO_ADDR
// if result [ 1 ] then
16301: LD_VAR 0 2
16305: PUSH
16306: LD_INT 1
16308: ARRAY
16309: IFFALSE 16374
// if result [ 1 ] [ 1 ] = i then
16311: LD_VAR 0 2
16315: PUSH
16316: LD_INT 1
16318: ARRAY
16319: PUSH
16320: LD_INT 1
16322: ARRAY
16323: PUSH
16324: LD_VAR 0 8
16328: EQUAL
16329: IFFALSE 16374
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_VAR 0 2
16340: PPUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_VAR 0 2
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: CALL_OW 3
16360: PPUSH
16361: CALL_OW 1
16365: ST_TO_ADDR
// tmp := 1 ;
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_STRING 1
16373: ST_TO_ADDR
// end ; normal := normal & tmp ;
16374: LD_ADDR_VAR 0 5
16378: PUSH
16379: LD_VAR 0 5
16383: PUSH
16384: LD_VAR 0 3
16388: STR
16389: ST_TO_ADDR
// end ;
16390: GO 16290
16392: POP
16393: POP
// for i = 1 to hardcoreCounter do
16394: LD_ADDR_VAR 0 8
16398: PUSH
16399: DOUBLE
16400: LD_INT 1
16402: DEC
16403: ST_TO_ADDR
16404: LD_EXP 49
16408: PUSH
16409: FOR_TO
16410: IFFALSE 16515
// begin tmp := 0 ;
16412: LD_ADDR_VAR 0 3
16416: PUSH
16417: LD_STRING 0
16419: ST_TO_ADDR
// if result [ 2 ] then
16420: LD_VAR 0 2
16424: PUSH
16425: LD_INT 2
16427: ARRAY
16428: IFFALSE 16497
// if result [ 2 ] [ 1 ] = 100 + i then
16430: LD_VAR 0 2
16434: PUSH
16435: LD_INT 2
16437: ARRAY
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PUSH
16443: LD_INT 100
16445: PUSH
16446: LD_VAR 0 8
16450: PLUS
16451: EQUAL
16452: IFFALSE 16497
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16454: LD_ADDR_VAR 0 2
16458: PUSH
16459: LD_VAR 0 2
16463: PPUSH
16464: LD_INT 2
16466: PPUSH
16467: LD_VAR 0 2
16471: PUSH
16472: LD_INT 2
16474: ARRAY
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 3
16483: PPUSH
16484: CALL_OW 1
16488: ST_TO_ADDR
// tmp := 1 ;
16489: LD_ADDR_VAR 0 3
16493: PUSH
16494: LD_STRING 1
16496: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16497: LD_ADDR_VAR 0 6
16501: PUSH
16502: LD_VAR 0 6
16506: PUSH
16507: LD_VAR 0 3
16511: STR
16512: ST_TO_ADDR
// end ;
16513: GO 16409
16515: POP
16516: POP
// if isGameLoad then
16517: LD_VAR 0 1
16521: IFFALSE 16996
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16523: LD_ADDR_VAR 0 4
16527: PUSH
16528: LD_EXP 52
16532: PUSH
16533: LD_EXP 51
16537: PUSH
16538: LD_EXP 53
16542: PUSH
16543: LD_EXP 50
16547: PUSH
16548: LD_EXP 54
16552: PUSH
16553: LD_EXP 55
16557: PUSH
16558: LD_EXP 56
16562: PUSH
16563: LD_EXP 57
16567: PUSH
16568: LD_EXP 58
16572: PUSH
16573: LD_EXP 59
16577: PUSH
16578: LD_EXP 60
16582: PUSH
16583: LD_EXP 61
16587: PUSH
16588: LD_EXP 62
16592: PUSH
16593: LD_EXP 63
16597: PUSH
16598: LD_EXP 71
16602: PUSH
16603: LD_EXP 72
16607: PUSH
16608: LD_EXP 73
16612: PUSH
16613: LD_EXP 74
16617: PUSH
16618: LD_EXP 76
16622: PUSH
16623: LD_EXP 77
16627: PUSH
16628: LD_EXP 78
16632: PUSH
16633: LD_EXP 81
16637: PUSH
16638: LD_EXP 83
16642: PUSH
16643: LD_EXP 84
16647: PUSH
16648: LD_EXP 85
16652: PUSH
16653: LD_EXP 87
16657: PUSH
16658: LD_EXP 88
16662: PUSH
16663: LD_EXP 91
16667: PUSH
16668: LD_EXP 92
16672: PUSH
16673: LD_EXP 93
16677: PUSH
16678: LD_EXP 94
16682: PUSH
16683: LD_EXP 95
16687: PUSH
16688: LD_EXP 96
16692: PUSH
16693: LD_EXP 97
16697: PUSH
16698: LD_EXP 98
16702: PUSH
16703: LD_EXP 99
16707: PUSH
16708: LD_EXP 64
16712: PUSH
16713: LD_EXP 65
16717: PUSH
16718: LD_EXP 68
16722: PUSH
16723: LD_EXP 69
16727: PUSH
16728: LD_EXP 70
16732: PUSH
16733: LD_EXP 66
16737: PUSH
16738: LD_EXP 67
16742: PUSH
16743: LD_EXP 75
16747: PUSH
16748: LD_EXP 79
16752: PUSH
16753: LD_EXP 80
16757: PUSH
16758: LD_EXP 82
16762: PUSH
16763: LD_EXP 86
16767: PUSH
16768: LD_EXP 89
16772: PUSH
16773: LD_EXP 90
16777: PUSH
16778: LD_EXP 100
16782: PUSH
16783: LD_EXP 101
16787: PUSH
16788: LD_EXP 102
16792: PUSH
16793: LD_EXP 103
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: ST_TO_ADDR
// tmp :=  ;
16854: LD_ADDR_VAR 0 3
16858: PUSH
16859: LD_STRING 
16861: ST_TO_ADDR
// for i = 1 to normalCounter do
16862: LD_ADDR_VAR 0 8
16866: PUSH
16867: DOUBLE
16868: LD_INT 1
16870: DEC
16871: ST_TO_ADDR
16872: LD_EXP 48
16876: PUSH
16877: FOR_TO
16878: IFFALSE 16914
// begin if flags [ i ] then
16880: LD_VAR 0 4
16884: PUSH
16885: LD_VAR 0 8
16889: ARRAY
16890: IFFALSE 16912
// tmp := tmp & i & ; ;
16892: LD_ADDR_VAR 0 3
16896: PUSH
16897: LD_VAR 0 3
16901: PUSH
16902: LD_VAR 0 8
16906: STR
16907: PUSH
16908: LD_STRING ;
16910: STR
16911: ST_TO_ADDR
// end ;
16912: GO 16877
16914: POP
16915: POP
// for i = 1 to hardcoreCounter do
16916: LD_ADDR_VAR 0 8
16920: PUSH
16921: DOUBLE
16922: LD_INT 1
16924: DEC
16925: ST_TO_ADDR
16926: LD_EXP 49
16930: PUSH
16931: FOR_TO
16932: IFFALSE 16978
// begin if flags [ normalCounter + i ] then
16934: LD_VAR 0 4
16938: PUSH
16939: LD_EXP 48
16943: PUSH
16944: LD_VAR 0 8
16948: PLUS
16949: ARRAY
16950: IFFALSE 16976
// tmp := tmp & ( 100 + i ) & ; ;
16952: LD_ADDR_VAR 0 3
16956: PUSH
16957: LD_VAR 0 3
16961: PUSH
16962: LD_INT 100
16964: PUSH
16965: LD_VAR 0 8
16969: PLUS
16970: STR
16971: PUSH
16972: LD_STRING ;
16974: STR
16975: ST_TO_ADDR
// end ;
16976: GO 16931
16978: POP
16979: POP
// if tmp then
16980: LD_VAR 0 3
16984: IFFALSE 16996
// active := tmp ;
16986: LD_ADDR_VAR 0 7
16990: PUSH
16991: LD_VAR 0 3
16995: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16996: LD_STRING getStreamItemsFromMission("
16998: PUSH
16999: LD_VAR 0 5
17003: STR
17004: PUSH
17005: LD_STRING ","
17007: STR
17008: PUSH
17009: LD_VAR 0 6
17013: STR
17014: PUSH
17015: LD_STRING ","
17017: STR
17018: PUSH
17019: LD_VAR 0 7
17023: STR
17024: PUSH
17025: LD_STRING ")
17027: STR
17028: PPUSH
17029: CALL_OW 559
// end else
17033: GO 17042
// ToLua ( getStreamItemsFromMission("","","") ) ;
17035: LD_STRING getStreamItemsFromMission("","","")
17037: PPUSH
17038: CALL_OW 559
// end ;
17042: LD_VAR 0 2
17046: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17047: LD_EXP 47
17051: PUSH
17052: LD_EXP 52
17056: AND
17057: IFFALSE 17181
17059: GO 17061
17061: DISABLE
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
// begin enable ;
17066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17067: LD_ADDR_VAR 0 2
17071: PUSH
17072: LD_INT 22
17074: PUSH
17075: LD_OWVAR 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: LD_INT 34
17089: PUSH
17090: LD_INT 7
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 34
17099: PUSH
17100: LD_INT 45
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 34
17109: PUSH
17110: LD_INT 28
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 34
17119: PUSH
17120: LD_INT 47
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: ST_TO_ADDR
// if not tmp then
17143: LD_VAR 0 2
17147: NOT
17148: IFFALSE 17152
// exit ;
17150: GO 17181
// for i in tmp do
17152: LD_ADDR_VAR 0 1
17156: PUSH
17157: LD_VAR 0 2
17161: PUSH
17162: FOR_IN
17163: IFFALSE 17179
// begin SetLives ( i , 0 ) ;
17165: LD_VAR 0 1
17169: PPUSH
17170: LD_INT 0
17172: PPUSH
17173: CALL_OW 234
// end ;
17177: GO 17162
17179: POP
17180: POP
// end ;
17181: PPOPN 2
17183: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17184: LD_EXP 47
17188: PUSH
17189: LD_EXP 53
17193: AND
17194: IFFALSE 17278
17196: GO 17198
17198: DISABLE
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
// begin enable ;
17203: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17204: LD_ADDR_VAR 0 2
17208: PUSH
17209: LD_INT 22
17211: PUSH
17212: LD_OWVAR 2
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 32
17223: PUSH
17224: LD_INT 3
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 69
17239: ST_TO_ADDR
// if not tmp then
17240: LD_VAR 0 2
17244: NOT
17245: IFFALSE 17249
// exit ;
17247: GO 17278
// for i in tmp do
17249: LD_ADDR_VAR 0 1
17253: PUSH
17254: LD_VAR 0 2
17258: PUSH
17259: FOR_IN
17260: IFFALSE 17276
// begin SetLives ( i , 0 ) ;
17262: LD_VAR 0 1
17266: PPUSH
17267: LD_INT 0
17269: PPUSH
17270: CALL_OW 234
// end ;
17274: GO 17259
17276: POP
17277: POP
// end ;
17278: PPOPN 2
17280: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17281: LD_EXP 47
17285: PUSH
17286: LD_EXP 50
17290: AND
17291: IFFALSE 17384
17293: GO 17295
17295: DISABLE
17296: LD_INT 0
17298: PPUSH
// begin enable ;
17299: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17300: LD_ADDR_VAR 0 1
17304: PUSH
17305: LD_INT 22
17307: PUSH
17308: LD_OWVAR 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 5
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 25
17332: PUSH
17333: LD_INT 9
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 8
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 69
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17382
// begin SetClass ( i , 1 ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: CALL_OW 336
// end ;
17380: GO 17365
17382: POP
17383: POP
// end ;
17384: PPOPN 1
17386: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17387: LD_EXP 47
17391: PUSH
17392: LD_EXP 51
17396: AND
17397: PUSH
17398: LD_OWVAR 65
17402: PUSH
17403: LD_INT 7
17405: LESS
17406: AND
17407: IFFALSE 17421
17409: GO 17411
17411: DISABLE
// begin enable ;
17412: ENABLE
// game_speed := 7 ;
17413: LD_ADDR_OWVAR 65
17417: PUSH
17418: LD_INT 7
17420: ST_TO_ADDR
// end ;
17421: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17422: LD_EXP 47
17426: PUSH
17427: LD_EXP 54
17431: AND
17432: IFFALSE 17634
17434: GO 17436
17436: DISABLE
17437: LD_INT 0
17439: PPUSH
17440: PPUSH
17441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17442: LD_ADDR_VAR 0 3
17446: PUSH
17447: LD_INT 81
17449: PUSH
17450: LD_OWVAR 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 21
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PPUSH
17473: CALL_OW 69
17477: ST_TO_ADDR
// if not tmp then
17478: LD_VAR 0 3
17482: NOT
17483: IFFALSE 17487
// exit ;
17485: GO 17634
// if tmp > 5 then
17487: LD_VAR 0 3
17491: PUSH
17492: LD_INT 5
17494: GREATER
17495: IFFALSE 17507
// k := 5 else
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 5
17504: ST_TO_ADDR
17505: GO 17517
// k := tmp ;
17507: LD_ADDR_VAR 0 2
17511: PUSH
17512: LD_VAR 0 3
17516: ST_TO_ADDR
// for i := 1 to k do
17517: LD_ADDR_VAR 0 1
17521: PUSH
17522: DOUBLE
17523: LD_INT 1
17525: DEC
17526: ST_TO_ADDR
17527: LD_VAR 0 2
17531: PUSH
17532: FOR_TO
17533: IFFALSE 17632
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17535: LD_VAR 0 3
17539: PUSH
17540: LD_VAR 0 1
17544: ARRAY
17545: PPUSH
17546: LD_VAR 0 1
17550: PUSH
17551: LD_INT 4
17553: MOD
17554: PUSH
17555: LD_INT 1
17557: PLUS
17558: PPUSH
17559: CALL_OW 259
17563: PUSH
17564: LD_INT 10
17566: LESS
17567: IFFALSE 17630
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17569: LD_VAR 0 3
17573: PUSH
17574: LD_VAR 0 1
17578: ARRAY
17579: PPUSH
17580: LD_VAR 0 1
17584: PUSH
17585: LD_INT 4
17587: MOD
17588: PUSH
17589: LD_INT 1
17591: PLUS
17592: PPUSH
17593: LD_VAR 0 3
17597: PUSH
17598: LD_VAR 0 1
17602: ARRAY
17603: PPUSH
17604: LD_VAR 0 1
17608: PUSH
17609: LD_INT 4
17611: MOD
17612: PUSH
17613: LD_INT 1
17615: PLUS
17616: PPUSH
17617: CALL_OW 259
17621: PUSH
17622: LD_INT 1
17624: PLUS
17625: PPUSH
17626: CALL_OW 237
17630: GO 17532
17632: POP
17633: POP
// end ;
17634: PPOPN 3
17636: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17637: LD_EXP 47
17641: PUSH
17642: LD_EXP 55
17646: AND
17647: IFFALSE 17667
17649: GO 17651
17651: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17652: LD_INT 4
17654: PPUSH
17655: LD_OWVAR 2
17659: PPUSH
17660: LD_INT 0
17662: PPUSH
17663: CALL_OW 324
17667: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17668: LD_EXP 47
17672: PUSH
17673: LD_EXP 84
17677: AND
17678: IFFALSE 17698
17680: GO 17682
17682: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17683: LD_INT 19
17685: PPUSH
17686: LD_OWVAR 2
17690: PPUSH
17691: LD_INT 0
17693: PPUSH
17694: CALL_OW 324
17698: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17699: LD_EXP 47
17703: PUSH
17704: LD_EXP 56
17708: AND
17709: IFFALSE 17811
17711: GO 17713
17713: DISABLE
17714: LD_INT 0
17716: PPUSH
17717: PPUSH
// begin enable ;
17718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_INT 22
17726: PUSH
17727: LD_OWVAR 2
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: LD_INT 34
17741: PUSH
17742: LD_INT 11
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 34
17751: PUSH
17752: LD_INT 30
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PPUSH
17768: CALL_OW 69
17772: ST_TO_ADDR
// if not tmp then
17773: LD_VAR 0 2
17777: NOT
17778: IFFALSE 17782
// exit ;
17780: GO 17811
// for i in tmp do
17782: LD_ADDR_VAR 0 1
17786: PUSH
17787: LD_VAR 0 2
17791: PUSH
17792: FOR_IN
17793: IFFALSE 17809
// begin SetLives ( i , 0 ) ;
17795: LD_VAR 0 1
17799: PPUSH
17800: LD_INT 0
17802: PPUSH
17803: CALL_OW 234
// end ;
17807: GO 17792
17809: POP
17810: POP
// end ;
17811: PPOPN 2
17813: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17814: LD_EXP 47
17818: PUSH
17819: LD_EXP 57
17823: AND
17824: IFFALSE 17844
17826: GO 17828
17828: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17829: LD_INT 32
17831: PPUSH
17832: LD_OWVAR 2
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 324
17844: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17845: LD_EXP 47
17849: PUSH
17850: LD_EXP 58
17854: AND
17855: IFFALSE 18036
17857: GO 17859
17859: DISABLE
17860: LD_INT 0
17862: PPUSH
17863: PPUSH
17864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17865: LD_ADDR_VAR 0 2
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_OWVAR 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 33
17884: PUSH
17885: LD_INT 3
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: ST_TO_ADDR
// if not tmp then
17901: LD_VAR 0 2
17905: NOT
17906: IFFALSE 17910
// exit ;
17908: GO 18036
// side := 0 ;
17910: LD_ADDR_VAR 0 3
17914: PUSH
17915: LD_INT 0
17917: ST_TO_ADDR
// for i := 1 to 8 do
17918: LD_ADDR_VAR 0 1
17922: PUSH
17923: DOUBLE
17924: LD_INT 1
17926: DEC
17927: ST_TO_ADDR
17928: LD_INT 8
17930: PUSH
17931: FOR_TO
17932: IFFALSE 17980
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17934: LD_OWVAR 2
17938: PUSH
17939: LD_VAR 0 1
17943: NONEQUAL
17944: PUSH
17945: LD_OWVAR 2
17949: PPUSH
17950: LD_VAR 0 1
17954: PPUSH
17955: CALL_OW 81
17959: PUSH
17960: LD_INT 2
17962: EQUAL
17963: AND
17964: IFFALSE 17978
// begin side := i ;
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: LD_VAR 0 1
17975: ST_TO_ADDR
// break ;
17976: GO 17980
// end ;
17978: GO 17931
17980: POP
17981: POP
// if not side then
17982: LD_VAR 0 3
17986: NOT
17987: IFFALSE 17991
// exit ;
17989: GO 18036
// for i := 1 to tmp do
17991: LD_ADDR_VAR 0 1
17995: PUSH
17996: DOUBLE
17997: LD_INT 1
17999: DEC
18000: ST_TO_ADDR
18001: LD_VAR 0 2
18005: PUSH
18006: FOR_TO
18007: IFFALSE 18034
// if Prob ( 60 ) then
18009: LD_INT 60
18011: PPUSH
18012: CALL_OW 13
18016: IFFALSE 18032
// SetSide ( i , side ) ;
18018: LD_VAR 0 1
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: CALL_OW 235
18032: GO 18006
18034: POP
18035: POP
// end ;
18036: PPOPN 3
18038: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18039: LD_EXP 47
18043: PUSH
18044: LD_EXP 60
18048: AND
18049: IFFALSE 18168
18051: GO 18053
18053: DISABLE
18054: LD_INT 0
18056: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18057: LD_ADDR_VAR 0 1
18061: PUSH
18062: LD_INT 22
18064: PUSH
18065: LD_OWVAR 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 21
18076: PUSH
18077: LD_INT 1
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 3
18086: PUSH
18087: LD_INT 23
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 69
18110: PUSH
18111: FOR_IN
18112: IFFALSE 18166
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 257
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: LD_INT 2
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 4
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: IN
18142: IFFALSE 18164
// SetClass ( un , rand ( 1 , 4 ) ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: LD_INT 4
18154: PPUSH
18155: CALL_OW 12
18159: PPUSH
18160: CALL_OW 336
18164: GO 18111
18166: POP
18167: POP
// end ;
18168: PPOPN 1
18170: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18171: LD_EXP 47
18175: PUSH
18176: LD_EXP 59
18180: AND
18181: IFFALSE 18260
18183: GO 18185
18185: DISABLE
18186: LD_INT 0
18188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18189: LD_ADDR_VAR 0 1
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_OWVAR 2
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 21
18208: PUSH
18209: LD_INT 3
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PPUSH
18220: CALL_OW 69
18224: ST_TO_ADDR
// if not tmp then
18225: LD_VAR 0 1
18229: NOT
18230: IFFALSE 18234
// exit ;
18232: GO 18260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18234: LD_VAR 0 1
18238: PUSH
18239: LD_INT 1
18241: PPUSH
18242: LD_VAR 0 1
18246: PPUSH
18247: CALL_OW 12
18251: ARRAY
18252: PPUSH
18253: LD_INT 100
18255: PPUSH
18256: CALL_OW 234
// end ;
18260: PPOPN 1
18262: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18263: LD_EXP 47
18267: PUSH
18268: LD_EXP 61
18272: AND
18273: IFFALSE 18371
18275: GO 18277
18277: DISABLE
18278: LD_INT 0
18280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18281: LD_ADDR_VAR 0 1
18285: PUSH
18286: LD_INT 22
18288: PUSH
18289: LD_OWVAR 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 21
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: ST_TO_ADDR
// if not tmp then
18317: LD_VAR 0 1
18321: NOT
18322: IFFALSE 18326
// exit ;
18324: GO 18371
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18326: LD_VAR 0 1
18330: PUSH
18331: LD_INT 1
18333: PPUSH
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 12
18343: ARRAY
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: LD_INT 4
18350: PPUSH
18351: CALL_OW 12
18355: PPUSH
18356: LD_INT 3000
18358: PPUSH
18359: LD_INT 9000
18361: PPUSH
18362: CALL_OW 12
18366: PPUSH
18367: CALL_OW 492
// end ;
18371: PPOPN 1
18373: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18374: LD_EXP 47
18378: PUSH
18379: LD_EXP 62
18383: AND
18384: IFFALSE 18404
18386: GO 18388
18388: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18389: LD_INT 1
18391: PPUSH
18392: LD_OWVAR 2
18396: PPUSH
18397: LD_INT 0
18399: PPUSH
18400: CALL_OW 324
18404: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18405: LD_EXP 47
18409: PUSH
18410: LD_EXP 63
18414: AND
18415: IFFALSE 18498
18417: GO 18419
18419: DISABLE
18420: LD_INT 0
18422: PPUSH
18423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18424: LD_ADDR_VAR 0 2
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 3
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: ST_TO_ADDR
// if not tmp then
18460: LD_VAR 0 2
18464: NOT
18465: IFFALSE 18469
// exit ;
18467: GO 18498
// for i in tmp do
18469: LD_ADDR_VAR 0 1
18473: PUSH
18474: LD_VAR 0 2
18478: PUSH
18479: FOR_IN
18480: IFFALSE 18496
// SetBLevel ( i , 10 ) ;
18482: LD_VAR 0 1
18486: PPUSH
18487: LD_INT 10
18489: PPUSH
18490: CALL_OW 241
18494: GO 18479
18496: POP
18497: POP
// end ;
18498: PPOPN 2
18500: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18501: LD_EXP 47
18505: PUSH
18506: LD_EXP 64
18510: AND
18511: IFFALSE 18622
18513: GO 18515
18515: DISABLE
18516: LD_INT 0
18518: PPUSH
18519: PPUSH
18520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18521: LD_ADDR_VAR 0 3
18525: PUSH
18526: LD_INT 22
18528: PUSH
18529: LD_OWVAR 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 25
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PPUSH
18552: CALL_OW 69
18556: ST_TO_ADDR
// if not tmp then
18557: LD_VAR 0 3
18561: NOT
18562: IFFALSE 18566
// exit ;
18564: GO 18622
// un := tmp [ rand ( 1 , tmp ) ] ;
18566: LD_ADDR_VAR 0 2
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_INT 1
18578: PPUSH
18579: LD_VAR 0 3
18583: PPUSH
18584: CALL_OW 12
18588: ARRAY
18589: ST_TO_ADDR
// if Crawls ( un ) then
18590: LD_VAR 0 2
18594: PPUSH
18595: CALL_OW 318
18599: IFFALSE 18610
// ComWalk ( un ) ;
18601: LD_VAR 0 2
18605: PPUSH
18606: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18610: LD_VAR 0 2
18614: PPUSH
18615: LD_INT 5
18617: PPUSH
18618: CALL_OW 336
// end ;
18622: PPOPN 3
18624: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18625: LD_EXP 47
18629: PUSH
18630: LD_EXP 65
18634: AND
18635: PUSH
18636: LD_OWVAR 67
18640: PUSH
18641: LD_INT 4
18643: LESS
18644: AND
18645: IFFALSE 18664
18647: GO 18649
18649: DISABLE
// begin Difficulty := Difficulty + 1 ;
18650: LD_ADDR_OWVAR 67
18654: PUSH
18655: LD_OWVAR 67
18659: PUSH
18660: LD_INT 1
18662: PLUS
18663: ST_TO_ADDR
// end ;
18664: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18665: LD_EXP 47
18669: PUSH
18670: LD_EXP 66
18674: AND
18675: IFFALSE 18778
18677: GO 18679
18679: DISABLE
18680: LD_INT 0
18682: PPUSH
// begin for i := 1 to 5 do
18683: LD_ADDR_VAR 0 1
18687: PUSH
18688: DOUBLE
18689: LD_INT 1
18691: DEC
18692: ST_TO_ADDR
18693: LD_INT 5
18695: PUSH
18696: FOR_TO
18697: IFFALSE 18776
// begin uc_nation := nation_nature ;
18699: LD_ADDR_OWVAR 21
18703: PUSH
18704: LD_INT 0
18706: ST_TO_ADDR
// uc_side := 0 ;
18707: LD_ADDR_OWVAR 20
18711: PUSH
18712: LD_INT 0
18714: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18715: LD_ADDR_OWVAR 29
18719: PUSH
18720: LD_INT 12
18722: PUSH
18723: LD_INT 12
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: ST_TO_ADDR
// hc_agressivity := 20 ;
18730: LD_ADDR_OWVAR 35
18734: PUSH
18735: LD_INT 20
18737: ST_TO_ADDR
// hc_class := class_tiger ;
18738: LD_ADDR_OWVAR 28
18742: PUSH
18743: LD_INT 14
18745: ST_TO_ADDR
// hc_gallery :=  ;
18746: LD_ADDR_OWVAR 33
18750: PUSH
18751: LD_STRING 
18753: ST_TO_ADDR
// hc_name :=  ;
18754: LD_ADDR_OWVAR 26
18758: PUSH
18759: LD_STRING 
18761: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18762: CALL_OW 44
18766: PPUSH
18767: LD_INT 0
18769: PPUSH
18770: CALL_OW 51
// end ;
18774: GO 18696
18776: POP
18777: POP
// end ;
18778: PPOPN 1
18780: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18781: LD_EXP 47
18785: PUSH
18786: LD_EXP 67
18790: AND
18791: IFFALSE 18800
18793: GO 18795
18795: DISABLE
// StreamSibBomb ;
18796: CALL 18801 0 0
18800: END
// export function StreamSibBomb ; var i , x , y ; begin
18801: LD_INT 0
18803: PPUSH
18804: PPUSH
18805: PPUSH
18806: PPUSH
// result := false ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_INT 0
18814: ST_TO_ADDR
// for i := 1 to 16 do
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: DOUBLE
18821: LD_INT 1
18823: DEC
18824: ST_TO_ADDR
18825: LD_INT 16
18827: PUSH
18828: FOR_TO
18829: IFFALSE 19028
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 10
18838: PUSH
18839: LD_INT 20
18841: PUSH
18842: LD_INT 30
18844: PUSH
18845: LD_INT 40
18847: PUSH
18848: LD_INT 50
18850: PUSH
18851: LD_INT 60
18853: PUSH
18854: LD_INT 70
18856: PUSH
18857: LD_INT 80
18859: PUSH
18860: LD_INT 90
18862: PUSH
18863: LD_INT 100
18865: PUSH
18866: LD_INT 110
18868: PUSH
18869: LD_INT 120
18871: PUSH
18872: LD_INT 130
18874: PUSH
18875: LD_INT 140
18877: PUSH
18878: LD_INT 150
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: PPUSH
18901: LD_INT 15
18903: PPUSH
18904: CALL_OW 12
18908: ARRAY
18909: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18910: LD_ADDR_VAR 0 4
18914: PUSH
18915: LD_INT 10
18917: PUSH
18918: LD_INT 20
18920: PUSH
18921: LD_INT 30
18923: PUSH
18924: LD_INT 40
18926: PUSH
18927: LD_INT 50
18929: PUSH
18930: LD_INT 60
18932: PUSH
18933: LD_INT 70
18935: PUSH
18936: LD_INT 80
18938: PUSH
18939: LD_INT 90
18941: PUSH
18942: LD_INT 100
18944: PUSH
18945: LD_INT 110
18947: PUSH
18948: LD_INT 120
18950: PUSH
18951: LD_INT 130
18953: PUSH
18954: LD_INT 140
18956: PUSH
18957: LD_INT 150
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PPUSH
18980: LD_INT 15
18982: PPUSH
18983: CALL_OW 12
18987: ARRAY
18988: ST_TO_ADDR
// if ValidHex ( x , y ) then
18989: LD_VAR 0 3
18993: PPUSH
18994: LD_VAR 0 4
18998: PPUSH
18999: CALL_OW 488
19003: IFFALSE 19026
// begin result := [ x , y ] ;
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: LD_VAR 0 3
19014: PUSH
19015: LD_VAR 0 4
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: ST_TO_ADDR
// break ;
19024: GO 19028
// end ; end ;
19026: GO 18828
19028: POP
19029: POP
// if result then
19030: LD_VAR 0 1
19034: IFFALSE 19094
// begin ToLua ( playSibBomb() ) ;
19036: LD_STRING playSibBomb()
19038: PPUSH
19039: CALL_OW 559
// wait ( 0 0$14 ) ;
19043: LD_INT 490
19045: PPUSH
19046: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19050: LD_VAR 0 1
19054: PUSH
19055: LD_INT 1
19057: ARRAY
19058: PPUSH
19059: LD_VAR 0 1
19063: PUSH
19064: LD_INT 2
19066: ARRAY
19067: PPUSH
19068: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19072: LD_VAR 0 1
19076: PUSH
19077: LD_INT 1
19079: ARRAY
19080: PPUSH
19081: LD_VAR 0 1
19085: PUSH
19086: LD_INT 2
19088: ARRAY
19089: PPUSH
19090: CALL_OW 429
// end ; end ;
19094: LD_VAR 0 1
19098: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19099: LD_EXP 47
19103: PUSH
19104: LD_EXP 69
19108: AND
19109: IFFALSE 19121
19111: GO 19113
19113: DISABLE
// YouLost (  ) ;
19114: LD_STRING 
19116: PPUSH
19117: CALL_OW 104
19121: END
// every 0 0$1 trigger StreamModeActive and sFog do
19122: LD_EXP 47
19126: PUSH
19127: LD_EXP 68
19131: AND
19132: IFFALSE 19146
19134: GO 19136
19136: DISABLE
// FogOff ( your_side ) ;
19137: LD_OWVAR 2
19141: PPUSH
19142: CALL_OW 344
19146: END
// every 0 0$1 trigger StreamModeActive and sSun do
19147: LD_EXP 47
19151: PUSH
19152: LD_EXP 70
19156: AND
19157: IFFALSE 19185
19159: GO 19161
19161: DISABLE
// begin solar_recharge_percent := 0 ;
19162: LD_ADDR_OWVAR 79
19166: PUSH
19167: LD_INT 0
19169: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19170: LD_INT 10500
19172: PPUSH
19173: CALL_OW 67
// solar_recharge_percent := 100 ;
19177: LD_ADDR_OWVAR 79
19181: PUSH
19182: LD_INT 100
19184: ST_TO_ADDR
// end ;
19185: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19186: LD_EXP 47
19190: PUSH
19191: LD_EXP 71
19195: AND
19196: IFFALSE 19435
19198: GO 19200
19200: DISABLE
19201: LD_INT 0
19203: PPUSH
19204: PPUSH
19205: PPUSH
// begin tmp := [ ] ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: EMPTY
19212: ST_TO_ADDR
// for i := 1 to 6 do
19213: LD_ADDR_VAR 0 1
19217: PUSH
19218: DOUBLE
19219: LD_INT 1
19221: DEC
19222: ST_TO_ADDR
19223: LD_INT 6
19225: PUSH
19226: FOR_TO
19227: IFFALSE 19332
// begin uc_nation := nation_nature ;
19229: LD_ADDR_OWVAR 21
19233: PUSH
19234: LD_INT 0
19236: ST_TO_ADDR
// uc_side := 0 ;
19237: LD_ADDR_OWVAR 20
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19245: LD_ADDR_OWVAR 29
19249: PUSH
19250: LD_INT 12
19252: PUSH
19253: LD_INT 12
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: ST_TO_ADDR
// hc_agressivity := 20 ;
19260: LD_ADDR_OWVAR 35
19264: PUSH
19265: LD_INT 20
19267: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19268: LD_ADDR_OWVAR 28
19272: PUSH
19273: LD_INT 17
19275: ST_TO_ADDR
// hc_gallery :=  ;
19276: LD_ADDR_OWVAR 33
19280: PUSH
19281: LD_STRING 
19283: ST_TO_ADDR
// hc_name :=  ;
19284: LD_ADDR_OWVAR 26
19288: PUSH
19289: LD_STRING 
19291: ST_TO_ADDR
// un := CreateHuman ;
19292: LD_ADDR_VAR 0 2
19296: PUSH
19297: CALL_OW 44
19301: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19302: LD_VAR 0 2
19306: PPUSH
19307: LD_INT 1
19309: PPUSH
19310: CALL_OW 51
// tmp := tmp ^ un ;
19314: LD_ADDR_VAR 0 3
19318: PUSH
19319: LD_VAR 0 3
19323: PUSH
19324: LD_VAR 0 2
19328: ADD
19329: ST_TO_ADDR
// end ;
19330: GO 19226
19332: POP
19333: POP
// repeat wait ( 0 0$1 ) ;
19334: LD_INT 35
19336: PPUSH
19337: CALL_OW 67
// for un in tmp do
19341: LD_ADDR_VAR 0 2
19345: PUSH
19346: LD_VAR 0 3
19350: PUSH
19351: FOR_IN
19352: IFFALSE 19426
// begin if IsDead ( un ) then
19354: LD_VAR 0 2
19358: PPUSH
19359: CALL_OW 301
19363: IFFALSE 19383
// begin tmp := tmp diff un ;
19365: LD_ADDR_VAR 0 3
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 2
19379: DIFF
19380: ST_TO_ADDR
// continue ;
19381: GO 19351
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19383: LD_VAR 0 2
19387: PPUSH
19388: LD_INT 3
19390: PUSH
19391: LD_INT 22
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 69
19409: PPUSH
19410: LD_VAR 0 2
19414: PPUSH
19415: CALL_OW 74
19419: PPUSH
19420: CALL_OW 115
// end ;
19424: GO 19351
19426: POP
19427: POP
// until not tmp ;
19428: LD_VAR 0 3
19432: NOT
19433: IFFALSE 19334
// end ;
19435: PPOPN 3
19437: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19438: LD_EXP 47
19442: PUSH
19443: LD_EXP 72
19447: AND
19448: IFFALSE 19502
19450: GO 19452
19452: DISABLE
// begin ToLua ( displayTroll(); ) ;
19453: LD_STRING displayTroll();
19455: PPUSH
19456: CALL_OW 559
// wait ( 3 3$00 ) ;
19460: LD_INT 6300
19462: PPUSH
19463: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19467: LD_STRING hideTroll();
19469: PPUSH
19470: CALL_OW 559
// wait ( 1 1$00 ) ;
19474: LD_INT 2100
19476: PPUSH
19477: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19481: LD_STRING displayTroll();
19483: PPUSH
19484: CALL_OW 559
// wait ( 1 1$00 ) ;
19488: LD_INT 2100
19490: PPUSH
19491: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19495: LD_STRING hideTroll();
19497: PPUSH
19498: CALL_OW 559
// end ;
19502: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19503: LD_EXP 47
19507: PUSH
19508: LD_EXP 73
19512: AND
19513: IFFALSE 19576
19515: GO 19517
19517: DISABLE
19518: LD_INT 0
19520: PPUSH
// begin p := 0 ;
19521: LD_ADDR_VAR 0 1
19525: PUSH
19526: LD_INT 0
19528: ST_TO_ADDR
// repeat game_speed := 1 ;
19529: LD_ADDR_OWVAR 65
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19537: LD_INT 35
19539: PPUSH
19540: CALL_OW 67
// p := p + 1 ;
19544: LD_ADDR_VAR 0 1
19548: PUSH
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 1
19556: PLUS
19557: ST_TO_ADDR
// until p >= 60 ;
19558: LD_VAR 0 1
19562: PUSH
19563: LD_INT 60
19565: GREATEREQUAL
19566: IFFALSE 19529
// game_speed := 4 ;
19568: LD_ADDR_OWVAR 65
19572: PUSH
19573: LD_INT 4
19575: ST_TO_ADDR
// end ;
19576: PPOPN 1
19578: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19579: LD_EXP 47
19583: PUSH
19584: LD_EXP 74
19588: AND
19589: IFFALSE 19735
19591: GO 19593
19593: DISABLE
19594: LD_INT 0
19596: PPUSH
19597: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19598: LD_ADDR_VAR 0 1
19602: PUSH
19603: LD_INT 22
19605: PUSH
19606: LD_OWVAR 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_INT 30
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 30
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: ST_TO_ADDR
// if not depot then
19652: LD_VAR 0 1
19656: NOT
19657: IFFALSE 19661
// exit ;
19659: GO 19735
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_VAR 0 1
19670: PUSH
19671: LD_INT 1
19673: PPUSH
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 12
19683: ARRAY
19684: PPUSH
19685: CALL_OW 274
19689: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19690: LD_VAR 0 2
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: LD_INT 0
19700: PPUSH
19701: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19705: LD_VAR 0 2
19709: PPUSH
19710: LD_INT 2
19712: PPUSH
19713: LD_INT 0
19715: PPUSH
19716: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19720: LD_VAR 0 2
19724: PPUSH
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 0
19730: PPUSH
19731: CALL_OW 277
// end ;
19735: PPOPN 2
19737: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19738: LD_EXP 47
19742: PUSH
19743: LD_EXP 75
19747: AND
19748: IFFALSE 19845
19750: GO 19752
19752: DISABLE
19753: LD_INT 0
19755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19756: LD_ADDR_VAR 0 1
19760: PUSH
19761: LD_INT 22
19763: PUSH
19764: LD_OWVAR 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 21
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: LD_INT 23
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: PPUSH
19805: CALL_OW 69
19809: ST_TO_ADDR
// if not tmp then
19810: LD_VAR 0 1
19814: NOT
19815: IFFALSE 19819
// exit ;
19817: GO 19845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19819: LD_VAR 0 1
19823: PUSH
19824: LD_INT 1
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 12
19836: ARRAY
19837: PPUSH
19838: LD_INT 200
19840: PPUSH
19841: CALL_OW 234
// end ;
19845: PPOPN 1
19847: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19848: LD_EXP 47
19852: PUSH
19853: LD_EXP 76
19857: AND
19858: IFFALSE 19937
19860: GO 19862
19862: DISABLE
19863: LD_INT 0
19865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19866: LD_ADDR_VAR 0 1
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_OWVAR 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 21
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PPUSH
19897: CALL_OW 69
19901: ST_TO_ADDR
// if not tmp then
19902: LD_VAR 0 1
19906: NOT
19907: IFFALSE 19911
// exit ;
19909: GO 19937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19911: LD_VAR 0 1
19915: PUSH
19916: LD_INT 1
19918: PPUSH
19919: LD_VAR 0 1
19923: PPUSH
19924: CALL_OW 12
19928: ARRAY
19929: PPUSH
19930: LD_INT 60
19932: PPUSH
19933: CALL_OW 234
// end ;
19937: PPOPN 1
19939: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19940: LD_EXP 47
19944: PUSH
19945: LD_EXP 77
19949: AND
19950: IFFALSE 20049
19952: GO 19954
19954: DISABLE
19955: LD_INT 0
19957: PPUSH
19958: PPUSH
// begin enable ;
19959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19960: LD_ADDR_VAR 0 1
19964: PUSH
19965: LD_INT 22
19967: PUSH
19968: LD_OWVAR 2
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 61
19979: PUSH
19980: EMPTY
19981: LIST
19982: PUSH
19983: LD_INT 33
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: PPUSH
19998: CALL_OW 69
20002: ST_TO_ADDR
// if not tmp then
20003: LD_VAR 0 1
20007: NOT
20008: IFFALSE 20012
// exit ;
20010: GO 20049
// for i in tmp do
20012: LD_ADDR_VAR 0 2
20016: PUSH
20017: LD_VAR 0 1
20021: PUSH
20022: FOR_IN
20023: IFFALSE 20047
// if IsControledBy ( i ) then
20025: LD_VAR 0 2
20029: PPUSH
20030: CALL_OW 312
20034: IFFALSE 20045
// ComUnlink ( i ) ;
20036: LD_VAR 0 2
20040: PPUSH
20041: CALL_OW 136
20045: GO 20022
20047: POP
20048: POP
// end ;
20049: PPOPN 2
20051: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20052: LD_EXP 47
20056: PUSH
20057: LD_EXP 78
20061: AND
20062: IFFALSE 20202
20064: GO 20066
20066: DISABLE
20067: LD_INT 0
20069: PPUSH
20070: PPUSH
// begin ToLua ( displayPowell(); ) ;
20071: LD_STRING displayPowell();
20073: PPUSH
20074: CALL_OW 559
// uc_side := 0 ;
20078: LD_ADDR_OWVAR 20
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// uc_nation := 2 ;
20086: LD_ADDR_OWVAR 21
20090: PUSH
20091: LD_INT 2
20093: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20094: LD_ADDR_OWVAR 37
20098: PUSH
20099: LD_INT 14
20101: ST_TO_ADDR
// vc_engine := engine_siberite ;
20102: LD_ADDR_OWVAR 39
20106: PUSH
20107: LD_INT 3
20109: ST_TO_ADDR
// vc_control := control_apeman ;
20110: LD_ADDR_OWVAR 38
20114: PUSH
20115: LD_INT 5
20117: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20118: LD_ADDR_OWVAR 40
20122: PUSH
20123: LD_INT 29
20125: ST_TO_ADDR
// un := CreateVehicle ;
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: CALL_OW 45
20135: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20148: LD_INT 35
20150: PPUSH
20151: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20155: LD_VAR 0 2
20159: PPUSH
20160: LD_INT 22
20162: PUSH
20163: LD_OWVAR 2
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: PPUSH
20177: LD_VAR 0 2
20181: PPUSH
20182: CALL_OW 74
20186: PPUSH
20187: CALL_OW 115
// until IsDead ( un ) ;
20191: LD_VAR 0 2
20195: PPUSH
20196: CALL_OW 301
20200: IFFALSE 20148
// end ;
20202: PPOPN 2
20204: END
// every 0 0$1 trigger StreamModeActive and sStu do
20205: LD_EXP 47
20209: PUSH
20210: LD_EXP 86
20214: AND
20215: IFFALSE 20231
20217: GO 20219
20219: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20220: LD_STRING displayStucuk();
20222: PPUSH
20223: CALL_OW 559
// ResetFog ;
20227: CALL_OW 335
// end ;
20231: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20232: LD_EXP 47
20236: PUSH
20237: LD_EXP 79
20241: AND
20242: IFFALSE 20383
20244: GO 20246
20246: DISABLE
20247: LD_INT 0
20249: PPUSH
20250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PPUSH
20282: CALL_OW 69
20286: ST_TO_ADDR
// if not tmp then
20287: LD_VAR 0 2
20291: NOT
20292: IFFALSE 20296
// exit ;
20294: GO 20383
// un := tmp [ rand ( 1 , tmp ) ] ;
20296: LD_ADDR_VAR 0 1
20300: PUSH
20301: LD_VAR 0 2
20305: PUSH
20306: LD_INT 1
20308: PPUSH
20309: LD_VAR 0 2
20313: PPUSH
20314: CALL_OW 12
20318: ARRAY
20319: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20320: LD_VAR 0 1
20324: PPUSH
20325: LD_INT 0
20327: PPUSH
20328: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_OWVAR 3
20341: PUSH
20342: LD_VAR 0 1
20346: DIFF
20347: PPUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 74
20357: PPUSH
20358: CALL_OW 115
// wait ( 0 0$20 ) ;
20362: LD_INT 700
20364: PPUSH
20365: CALL_OW 67
// SetSide ( un , your_side ) ;
20369: LD_VAR 0 1
20373: PPUSH
20374: LD_OWVAR 2
20378: PPUSH
20379: CALL_OW 235
// end ;
20383: PPOPN 2
20385: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20386: LD_EXP 47
20390: PUSH
20391: LD_EXP 80
20395: AND
20396: IFFALSE 20502
20398: GO 20400
20400: DISABLE
20401: LD_INT 0
20403: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20404: LD_ADDR_VAR 0 1
20408: PUSH
20409: LD_INT 22
20411: PUSH
20412: LD_OWVAR 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 30
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 30
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 69
20457: ST_TO_ADDR
// if not depot then
20458: LD_VAR 0 1
20462: NOT
20463: IFFALSE 20467
// exit ;
20465: GO 20502
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20467: LD_VAR 0 1
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: PPUSH
20476: CALL_OW 250
20480: PPUSH
20481: LD_VAR 0 1
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: CALL_OW 251
20494: PPUSH
20495: LD_INT 70
20497: PPUSH
20498: CALL_OW 495
// end ;
20502: PPOPN 1
20504: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20505: LD_EXP 47
20509: PUSH
20510: LD_EXP 81
20514: AND
20515: IFFALSE 20726
20517: GO 20519
20519: DISABLE
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20527: LD_ADDR_VAR 0 5
20531: PUSH
20532: LD_INT 22
20534: PUSH
20535: LD_OWVAR 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 21
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PPUSH
20558: CALL_OW 69
20562: ST_TO_ADDR
// if not tmp then
20563: LD_VAR 0 5
20567: NOT
20568: IFFALSE 20572
// exit ;
20570: GO 20726
// for i in tmp do
20572: LD_ADDR_VAR 0 1
20576: PUSH
20577: LD_VAR 0 5
20581: PUSH
20582: FOR_IN
20583: IFFALSE 20724
// begin d := rand ( 0 , 5 ) ;
20585: LD_ADDR_VAR 0 4
20589: PUSH
20590: LD_INT 0
20592: PPUSH
20593: LD_INT 5
20595: PPUSH
20596: CALL_OW 12
20600: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 250
20615: PPUSH
20616: LD_VAR 0 4
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: LD_INT 12
20626: PPUSH
20627: CALL_OW 12
20631: PPUSH
20632: CALL_OW 272
20636: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20637: LD_ADDR_VAR 0 3
20641: PUSH
20642: LD_VAR 0 1
20646: PPUSH
20647: CALL_OW 251
20651: PPUSH
20652: LD_VAR 0 4
20656: PPUSH
20657: LD_INT 3
20659: PPUSH
20660: LD_INT 12
20662: PPUSH
20663: CALL_OW 12
20667: PPUSH
20668: CALL_OW 273
20672: ST_TO_ADDR
// if ValidHex ( x , y ) then
20673: LD_VAR 0 2
20677: PPUSH
20678: LD_VAR 0 3
20682: PPUSH
20683: CALL_OW 488
20687: IFFALSE 20722
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20689: LD_VAR 0 1
20693: PPUSH
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 3
20706: PPUSH
20707: LD_INT 6
20709: PPUSH
20710: CALL_OW 12
20714: PPUSH
20715: LD_INT 1
20717: PPUSH
20718: CALL_OW 483
// end ;
20722: GO 20582
20724: POP
20725: POP
// end ;
20726: PPOPN 5
20728: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20729: LD_EXP 47
20733: PUSH
20734: LD_EXP 82
20738: AND
20739: IFFALSE 20833
20741: GO 20743
20743: DISABLE
20744: LD_INT 0
20746: PPUSH
20747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20748: LD_ADDR_VAR 0 2
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_OWVAR 2
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 32
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 21
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: PPUSH
20790: CALL_OW 69
20794: ST_TO_ADDR
// if not tmp then
20795: LD_VAR 0 2
20799: NOT
20800: IFFALSE 20804
// exit ;
20802: GO 20833
// for i in tmp do
20804: LD_ADDR_VAR 0 1
20808: PUSH
20809: LD_VAR 0 2
20813: PUSH
20814: FOR_IN
20815: IFFALSE 20831
// SetFuel ( i , 0 ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_INT 0
20824: PPUSH
20825: CALL_OW 240
20829: GO 20814
20831: POP
20832: POP
// end ;
20833: PPOPN 2
20835: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20836: LD_EXP 47
20840: PUSH
20841: LD_EXP 83
20845: AND
20846: IFFALSE 20912
20848: GO 20850
20850: DISABLE
20851: LD_INT 0
20853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20854: LD_ADDR_VAR 0 1
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_OWVAR 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 30
20873: PUSH
20874: LD_INT 29
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PPUSH
20885: CALL_OW 69
20889: ST_TO_ADDR
// if not tmp then
20890: LD_VAR 0 1
20894: NOT
20895: IFFALSE 20899
// exit ;
20897: GO 20912
// DestroyUnit ( tmp [ 1 ] ) ;
20899: LD_VAR 0 1
20903: PUSH
20904: LD_INT 1
20906: ARRAY
20907: PPUSH
20908: CALL_OW 65
// end ;
20912: PPOPN 1
20914: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20915: LD_EXP 47
20919: PUSH
20920: LD_EXP 85
20924: AND
20925: IFFALSE 21054
20927: GO 20929
20929: DISABLE
20930: LD_INT 0
20932: PPUSH
// begin uc_side := 0 ;
20933: LD_ADDR_OWVAR 20
20937: PUSH
20938: LD_INT 0
20940: ST_TO_ADDR
// uc_nation := nation_arabian ;
20941: LD_ADDR_OWVAR 21
20945: PUSH
20946: LD_INT 2
20948: ST_TO_ADDR
// hc_gallery :=  ;
20949: LD_ADDR_OWVAR 33
20953: PUSH
20954: LD_STRING 
20956: ST_TO_ADDR
// hc_name :=  ;
20957: LD_ADDR_OWVAR 26
20961: PUSH
20962: LD_STRING 
20964: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20965: LD_INT 1
20967: PPUSH
20968: LD_INT 11
20970: PPUSH
20971: LD_INT 10
20973: PPUSH
20974: CALL_OW 380
// un := CreateHuman ;
20978: LD_ADDR_VAR 0 1
20982: PUSH
20983: CALL_OW 44
20987: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_INT 1
20995: PPUSH
20996: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21000: LD_INT 35
21002: PPUSH
21003: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21007: LD_VAR 0 1
21011: PPUSH
21012: LD_INT 22
21014: PUSH
21015: LD_OWVAR 2
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PPUSH
21024: CALL_OW 69
21028: PPUSH
21029: LD_VAR 0 1
21033: PPUSH
21034: CALL_OW 74
21038: PPUSH
21039: CALL_OW 115
// until IsDead ( un ) ;
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 301
21052: IFFALSE 21000
// end ;
21054: PPOPN 1
21056: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21057: LD_EXP 47
21061: PUSH
21062: LD_EXP 87
21066: AND
21067: IFFALSE 21079
21069: GO 21071
21071: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21072: LD_STRING earthquake(getX(game), 0, 32)
21074: PPUSH
21075: CALL_OW 559
21079: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21080: LD_EXP 47
21084: PUSH
21085: LD_EXP 88
21089: AND
21090: IFFALSE 21181
21092: GO 21094
21094: DISABLE
21095: LD_INT 0
21097: PPUSH
// begin enable ;
21098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21099: LD_ADDR_VAR 0 1
21103: PUSH
21104: LD_INT 22
21106: PUSH
21107: LD_OWVAR 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 21
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 33
21128: PUSH
21129: LD_INT 3
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 69
21145: ST_TO_ADDR
// if not tmp then
21146: LD_VAR 0 1
21150: NOT
21151: IFFALSE 21155
// exit ;
21153: GO 21181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 1
21162: PPUSH
21163: LD_VAR 0 1
21167: PPUSH
21168: CALL_OW 12
21172: ARRAY
21173: PPUSH
21174: LD_INT 1
21176: PPUSH
21177: CALL_OW 234
// end ;
21181: PPOPN 1
21183: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21184: LD_EXP 47
21188: PUSH
21189: LD_EXP 89
21193: AND
21194: IFFALSE 21335
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
21202: PPUSH
21203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21204: LD_ADDR_VAR 0 3
21208: PUSH
21209: LD_INT 22
21211: PUSH
21212: LD_OWVAR 2
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 25
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: ST_TO_ADDR
// if not tmp then
21240: LD_VAR 0 3
21244: NOT
21245: IFFALSE 21249
// exit ;
21247: GO 21335
// un := tmp [ rand ( 1 , tmp ) ] ;
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: LD_VAR 0 3
21258: PUSH
21259: LD_INT 1
21261: PPUSH
21262: LD_VAR 0 3
21266: PPUSH
21267: CALL_OW 12
21271: ARRAY
21272: ST_TO_ADDR
// if Crawls ( un ) then
21273: LD_VAR 0 2
21277: PPUSH
21278: CALL_OW 318
21282: IFFALSE 21293
// ComWalk ( un ) ;
21284: LD_VAR 0 2
21288: PPUSH
21289: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21293: LD_VAR 0 2
21297: PPUSH
21298: LD_INT 9
21300: PPUSH
21301: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21305: LD_INT 28
21307: PPUSH
21308: LD_OWVAR 2
21312: PPUSH
21313: LD_INT 2
21315: PPUSH
21316: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21320: LD_INT 29
21322: PPUSH
21323: LD_OWVAR 2
21327: PPUSH
21328: LD_INT 2
21330: PPUSH
21331: CALL_OW 322
// end ;
21335: PPOPN 3
21337: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21338: LD_EXP 47
21342: PUSH
21343: LD_EXP 90
21347: AND
21348: IFFALSE 21459
21350: GO 21352
21352: DISABLE
21353: LD_INT 0
21355: PPUSH
21356: PPUSH
21357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_OWVAR 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 25
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PPUSH
21389: CALL_OW 69
21393: ST_TO_ADDR
// if not tmp then
21394: LD_VAR 0 3
21398: NOT
21399: IFFALSE 21403
// exit ;
21401: GO 21459
// un := tmp [ rand ( 1 , tmp ) ] ;
21403: LD_ADDR_VAR 0 2
21407: PUSH
21408: LD_VAR 0 3
21412: PUSH
21413: LD_INT 1
21415: PPUSH
21416: LD_VAR 0 3
21420: PPUSH
21421: CALL_OW 12
21425: ARRAY
21426: ST_TO_ADDR
// if Crawls ( un ) then
21427: LD_VAR 0 2
21431: PPUSH
21432: CALL_OW 318
21436: IFFALSE 21447
// ComWalk ( un ) ;
21438: LD_VAR 0 2
21442: PPUSH
21443: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21447: LD_VAR 0 2
21451: PPUSH
21452: LD_INT 8
21454: PPUSH
21455: CALL_OW 336
// end ;
21459: PPOPN 3
21461: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21462: LD_EXP 47
21466: PUSH
21467: LD_EXP 91
21471: AND
21472: IFFALSE 21616
21474: GO 21476
21476: DISABLE
21477: LD_INT 0
21479: PPUSH
21480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21481: LD_ADDR_VAR 0 2
21485: PUSH
21486: LD_INT 22
21488: PUSH
21489: LD_OWVAR 2
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 21
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: LD_INT 34
21513: PUSH
21514: LD_INT 12
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 34
21523: PUSH
21524: LD_INT 51
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 34
21533: PUSH
21534: LD_INT 32
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: PPUSH
21552: CALL_OW 69
21556: ST_TO_ADDR
// if not tmp then
21557: LD_VAR 0 2
21561: NOT
21562: IFFALSE 21566
// exit ;
21564: GO 21616
// for i in tmp do
21566: LD_ADDR_VAR 0 1
21570: PUSH
21571: LD_VAR 0 2
21575: PUSH
21576: FOR_IN
21577: IFFALSE 21614
// if GetCargo ( i , mat_artifact ) = 0 then
21579: LD_VAR 0 1
21583: PPUSH
21584: LD_INT 4
21586: PPUSH
21587: CALL_OW 289
21591: PUSH
21592: LD_INT 0
21594: EQUAL
21595: IFFALSE 21612
// SetCargo ( i , mat_siberit , 100 ) ;
21597: LD_VAR 0 1
21601: PPUSH
21602: LD_INT 3
21604: PPUSH
21605: LD_INT 100
21607: PPUSH
21608: CALL_OW 290
21612: GO 21576
21614: POP
21615: POP
// end ;
21616: PPOPN 2
21618: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21619: LD_EXP 47
21623: PUSH
21624: LD_EXP 92
21628: AND
21629: IFFALSE 21812
21631: GO 21633
21633: DISABLE
21634: LD_INT 0
21636: PPUSH
21637: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21638: LD_ADDR_VAR 0 2
21642: PUSH
21643: LD_INT 22
21645: PUSH
21646: LD_OWVAR 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: ST_TO_ADDR
// if not tmp then
21660: LD_VAR 0 2
21664: NOT
21665: IFFALSE 21669
// exit ;
21667: GO 21812
// for i := 1 to 2 do
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: DOUBLE
21675: LD_INT 1
21677: DEC
21678: ST_TO_ADDR
21679: LD_INT 2
21681: PUSH
21682: FOR_TO
21683: IFFALSE 21810
// begin uc_side := your_side ;
21685: LD_ADDR_OWVAR 20
21689: PUSH
21690: LD_OWVAR 2
21694: ST_TO_ADDR
// uc_nation := nation_american ;
21695: LD_ADDR_OWVAR 21
21699: PUSH
21700: LD_INT 1
21702: ST_TO_ADDR
// vc_chassis := us_morphling ;
21703: LD_ADDR_OWVAR 37
21707: PUSH
21708: LD_INT 5
21710: ST_TO_ADDR
// vc_engine := engine_siberite ;
21711: LD_ADDR_OWVAR 39
21715: PUSH
21716: LD_INT 3
21718: ST_TO_ADDR
// vc_control := control_computer ;
21719: LD_ADDR_OWVAR 38
21723: PUSH
21724: LD_INT 3
21726: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21727: LD_ADDR_OWVAR 40
21731: PUSH
21732: LD_INT 10
21734: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21735: LD_VAR 0 2
21739: PUSH
21740: LD_INT 1
21742: ARRAY
21743: PPUSH
21744: CALL_OW 310
21748: NOT
21749: IFFALSE 21796
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21751: CALL_OW 45
21755: PPUSH
21756: LD_VAR 0 2
21760: PUSH
21761: LD_INT 1
21763: ARRAY
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 2
21774: PUSH
21775: LD_INT 1
21777: ARRAY
21778: PPUSH
21779: CALL_OW 251
21783: PPUSH
21784: LD_INT 12
21786: PPUSH
21787: LD_INT 1
21789: PPUSH
21790: CALL_OW 50
21794: GO 21808
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21796: CALL_OW 45
21800: PPUSH
21801: LD_INT 1
21803: PPUSH
21804: CALL_OW 51
// end ;
21808: GO 21682
21810: POP
21811: POP
// end ;
21812: PPOPN 2
21814: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21815: LD_EXP 47
21819: PUSH
21820: LD_EXP 93
21824: AND
21825: IFFALSE 22047
21827: GO 21829
21829: DISABLE
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21838: LD_ADDR_VAR 0 6
21842: PUSH
21843: LD_INT 22
21845: PUSH
21846: LD_OWVAR 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 21
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: PUSH
21868: LD_INT 23
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: PPUSH
21887: CALL_OW 69
21891: ST_TO_ADDR
// if not tmp then
21892: LD_VAR 0 6
21896: NOT
21897: IFFALSE 21901
// exit ;
21899: GO 22047
// s1 := rand ( 1 , 4 ) ;
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 1
21908: PPUSH
21909: LD_INT 4
21911: PPUSH
21912: CALL_OW 12
21916: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21917: LD_ADDR_VAR 0 4
21921: PUSH
21922: LD_VAR 0 6
21926: PUSH
21927: LD_INT 1
21929: ARRAY
21930: PPUSH
21931: LD_VAR 0 2
21935: PPUSH
21936: CALL_OW 259
21940: ST_TO_ADDR
// if s1 = 1 then
21941: LD_VAR 0 2
21945: PUSH
21946: LD_INT 1
21948: EQUAL
21949: IFFALSE 21969
// s2 := rand ( 2 , 4 ) else
21951: LD_ADDR_VAR 0 3
21955: PUSH
21956: LD_INT 2
21958: PPUSH
21959: LD_INT 4
21961: PPUSH
21962: CALL_OW 12
21966: ST_TO_ADDR
21967: GO 21977
// s2 := 1 ;
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: LD_INT 1
21976: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21977: LD_ADDR_VAR 0 5
21981: PUSH
21982: LD_VAR 0 6
21986: PUSH
21987: LD_INT 1
21989: ARRAY
21990: PPUSH
21991: LD_VAR 0 3
21995: PPUSH
21996: CALL_OW 259
22000: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22001: LD_VAR 0 6
22005: PUSH
22006: LD_INT 1
22008: ARRAY
22009: PPUSH
22010: LD_VAR 0 2
22014: PPUSH
22015: LD_VAR 0 5
22019: PPUSH
22020: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22024: LD_VAR 0 6
22028: PUSH
22029: LD_INT 1
22031: ARRAY
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: LD_VAR 0 4
22042: PPUSH
22043: CALL_OW 237
// end ;
22047: PPOPN 6
22049: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22050: LD_EXP 47
22054: PUSH
22055: LD_EXP 94
22059: AND
22060: IFFALSE 22139
22062: GO 22064
22064: DISABLE
22065: LD_INT 0
22067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 30
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL_OW 69
22103: ST_TO_ADDR
// if not tmp then
22104: LD_VAR 0 1
22108: NOT
22109: IFFALSE 22113
// exit ;
22111: GO 22139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22113: LD_VAR 0 1
22117: PUSH
22118: LD_INT 1
22120: PPUSH
22121: LD_VAR 0 1
22125: PPUSH
22126: CALL_OW 12
22130: ARRAY
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 234
// end ;
22139: PPOPN 1
22141: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22142: LD_EXP 47
22146: PUSH
22147: LD_EXP 95
22151: AND
22152: IFFALSE 22264
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22161: LD_ADDR_VAR 0 2
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_OWVAR 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: LD_INT 30
22183: PUSH
22184: LD_INT 27
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 30
22193: PUSH
22194: LD_INT 26
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 30
22203: PUSH
22204: LD_INT 28
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: ST_TO_ADDR
// if not tmp then
22226: LD_VAR 0 2
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 22264
// for i in tmp do
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: LD_VAR 0 2
22244: PUSH
22245: FOR_IN
22246: IFFALSE 22262
// SetLives ( i , 1 ) ;
22248: LD_VAR 0 1
22252: PPUSH
22253: LD_INT 1
22255: PPUSH
22256: CALL_OW 234
22260: GO 22245
22262: POP
22263: POP
// end ;
22264: PPOPN 2
22266: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22267: LD_EXP 47
22271: PUSH
22272: LD_EXP 96
22276: AND
22277: IFFALSE 22564
22279: GO 22281
22281: DISABLE
22282: LD_INT 0
22284: PPUSH
22285: PPUSH
22286: PPUSH
// begin i := rand ( 1 , 7 ) ;
22287: LD_ADDR_VAR 0 1
22291: PUSH
22292: LD_INT 1
22294: PPUSH
22295: LD_INT 7
22297: PPUSH
22298: CALL_OW 12
22302: ST_TO_ADDR
// case i of 1 :
22303: LD_VAR 0 1
22307: PUSH
22308: LD_INT 1
22310: DOUBLE
22311: EQUAL
22312: IFTRUE 22316
22314: GO 22326
22316: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22317: LD_STRING earthquake(getX(game), 0, 32)
22319: PPUSH
22320: CALL_OW 559
22324: GO 22564
22326: LD_INT 2
22328: DOUBLE
22329: EQUAL
22330: IFTRUE 22334
22332: GO 22348
22334: POP
// begin ToLua ( displayStucuk(); ) ;
22335: LD_STRING displayStucuk();
22337: PPUSH
22338: CALL_OW 559
// ResetFog ;
22342: CALL_OW 335
// end ; 3 :
22346: GO 22564
22348: LD_INT 3
22350: DOUBLE
22351: EQUAL
22352: IFTRUE 22356
22354: GO 22460
22356: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22357: LD_ADDR_VAR 0 2
22361: PUSH
22362: LD_INT 22
22364: PUSH
22365: LD_OWVAR 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 25
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PPUSH
22388: CALL_OW 69
22392: ST_TO_ADDR
// if not tmp then
22393: LD_VAR 0 2
22397: NOT
22398: IFFALSE 22402
// exit ;
22400: GO 22564
// un := tmp [ rand ( 1 , tmp ) ] ;
22402: LD_ADDR_VAR 0 3
22406: PUSH
22407: LD_VAR 0 2
22411: PUSH
22412: LD_INT 1
22414: PPUSH
22415: LD_VAR 0 2
22419: PPUSH
22420: CALL_OW 12
22424: ARRAY
22425: ST_TO_ADDR
// if Crawls ( un ) then
22426: LD_VAR 0 3
22430: PPUSH
22431: CALL_OW 318
22435: IFFALSE 22446
// ComWalk ( un ) ;
22437: LD_VAR 0 3
22441: PPUSH
22442: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22446: LD_VAR 0 3
22450: PPUSH
22451: LD_INT 8
22453: PPUSH
22454: CALL_OW 336
// end ; 4 :
22458: GO 22564
22460: LD_INT 4
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22542
22468: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 30
22488: PUSH
22489: LD_INT 29
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 2
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22564
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22514: LD_VAR 0 2
22518: PUSH
22519: LD_INT 1
22521: ARRAY
22522: PPUSH
22523: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22527: LD_VAR 0 2
22531: PUSH
22532: LD_INT 1
22534: ARRAY
22535: PPUSH
22536: CALL_OW 65
// end ; 5 .. 7 :
22540: GO 22564
22542: LD_INT 5
22544: DOUBLE
22545: GREATEREQUAL
22546: IFFALSE 22554
22548: LD_INT 7
22550: DOUBLE
22551: LESSEQUAL
22552: IFTRUE 22556
22554: GO 22563
22556: POP
// StreamSibBomb ; end ;
22557: CALL 18801 0 0
22561: GO 22564
22563: POP
// end ;
22564: PPOPN 3
22566: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22567: LD_EXP 47
22571: PUSH
22572: LD_EXP 97
22576: AND
22577: IFFALSE 22733
22579: GO 22581
22581: DISABLE
22582: LD_INT 0
22584: PPUSH
22585: PPUSH
22586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22587: LD_ADDR_VAR 0 2
22591: PUSH
22592: LD_INT 81
22594: PUSH
22595: LD_OWVAR 2
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 21
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PPUSH
22636: CALL_OW 69
22640: ST_TO_ADDR
// if not tmp then
22641: LD_VAR 0 2
22645: NOT
22646: IFFALSE 22650
// exit ;
22648: GO 22733
// p := 0 ;
22650: LD_ADDR_VAR 0 3
22654: PUSH
22655: LD_INT 0
22657: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22658: LD_INT 35
22660: PPUSH
22661: CALL_OW 67
// p := p + 1 ;
22665: LD_ADDR_VAR 0 3
22669: PUSH
22670: LD_VAR 0 3
22674: PUSH
22675: LD_INT 1
22677: PLUS
22678: ST_TO_ADDR
// for i in tmp do
22679: LD_ADDR_VAR 0 1
22683: PUSH
22684: LD_VAR 0 2
22688: PUSH
22689: FOR_IN
22690: IFFALSE 22721
// if GetLives ( i ) < 1000 then
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 256
22701: PUSH
22702: LD_INT 1000
22704: LESS
22705: IFFALSE 22719
// SetLives ( i , 1000 ) ;
22707: LD_VAR 0 1
22711: PPUSH
22712: LD_INT 1000
22714: PPUSH
22715: CALL_OW 234
22719: GO 22689
22721: POP
22722: POP
// until p > 20 ;
22723: LD_VAR 0 3
22727: PUSH
22728: LD_INT 20
22730: GREATER
22731: IFFALSE 22658
// end ;
22733: PPOPN 3
22735: END
// every 0 0$1 trigger StreamModeActive and sTime do
22736: LD_EXP 47
22740: PUSH
22741: LD_EXP 98
22745: AND
22746: IFFALSE 22781
22748: GO 22750
22750: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22751: LD_INT 28
22753: PPUSH
22754: LD_OWVAR 2
22758: PPUSH
22759: LD_INT 2
22761: PPUSH
22762: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22766: LD_INT 30
22768: PPUSH
22769: LD_OWVAR 2
22773: PPUSH
22774: LD_INT 2
22776: PPUSH
22777: CALL_OW 322
// end ;
22781: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22782: LD_EXP 47
22786: PUSH
22787: LD_EXP 99
22791: AND
22792: IFFALSE 22913
22794: GO 22796
22796: DISABLE
22797: LD_INT 0
22799: PPUSH
22800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22801: LD_ADDR_VAR 0 2
22805: PUSH
22806: LD_INT 22
22808: PUSH
22809: LD_OWVAR 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 21
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 3
22830: PUSH
22831: LD_INT 23
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: LIST
22849: PPUSH
22850: CALL_OW 69
22854: ST_TO_ADDR
// if not tmp then
22855: LD_VAR 0 2
22859: NOT
22860: IFFALSE 22864
// exit ;
22862: GO 22913
// for i in tmp do
22864: LD_ADDR_VAR 0 1
22868: PUSH
22869: LD_VAR 0 2
22873: PUSH
22874: FOR_IN
22875: IFFALSE 22911
// begin if Crawls ( i ) then
22877: LD_VAR 0 1
22881: PPUSH
22882: CALL_OW 318
22886: IFFALSE 22897
// ComWalk ( i ) ;
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 138
// SetClass ( i , 2 ) ;
22897: LD_VAR 0 1
22901: PPUSH
22902: LD_INT 2
22904: PPUSH
22905: CALL_OW 336
// end ;
22909: GO 22874
22911: POP
22912: POP
// end ;
22913: PPOPN 2
22915: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22916: LD_EXP 47
22920: PUSH
22921: LD_EXP 100
22925: AND
22926: IFFALSE 23214
22928: GO 22930
22930: DISABLE
22931: LD_INT 0
22933: PPUSH
22934: PPUSH
22935: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22936: LD_OWVAR 2
22940: PPUSH
22941: LD_INT 9
22943: PPUSH
22944: LD_INT 1
22946: PPUSH
22947: LD_INT 1
22949: PPUSH
22950: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22954: LD_INT 9
22956: PPUSH
22957: LD_OWVAR 2
22961: PPUSH
22962: CALL_OW 343
// uc_side := 9 ;
22966: LD_ADDR_OWVAR 20
22970: PUSH
22971: LD_INT 9
22973: ST_TO_ADDR
// uc_nation := 2 ;
22974: LD_ADDR_OWVAR 21
22978: PUSH
22979: LD_INT 2
22981: ST_TO_ADDR
// hc_name := Dark Warrior ;
22982: LD_ADDR_OWVAR 26
22986: PUSH
22987: LD_STRING Dark Warrior
22989: ST_TO_ADDR
// hc_gallery :=  ;
22990: LD_ADDR_OWVAR 33
22994: PUSH
22995: LD_STRING 
22997: ST_TO_ADDR
// hc_noskilllimit := true ;
22998: LD_ADDR_OWVAR 76
23002: PUSH
23003: LD_INT 1
23005: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23006: LD_ADDR_OWVAR 31
23010: PUSH
23011: LD_INT 30
23013: PUSH
23014: LD_INT 30
23016: PUSH
23017: LD_INT 30
23019: PUSH
23020: LD_INT 30
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: ST_TO_ADDR
// un := CreateHuman ;
23029: LD_ADDR_VAR 0 3
23033: PUSH
23034: CALL_OW 44
23038: ST_TO_ADDR
// hc_noskilllimit := false ;
23039: LD_ADDR_OWVAR 76
23043: PUSH
23044: LD_INT 0
23046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23047: LD_VAR 0 3
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 51
// ToLua ( playRanger() ) ;
23059: LD_STRING playRanger()
23061: PPUSH
23062: CALL_OW 559
// p := 0 ;
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_INT 0
23073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23074: LD_INT 35
23076: PPUSH
23077: CALL_OW 67
// p := p + 1 ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_VAR 0 2
23090: PUSH
23091: LD_INT 1
23093: PLUS
23094: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23095: LD_VAR 0 3
23099: PPUSH
23100: CALL_OW 256
23104: PUSH
23105: LD_INT 1000
23107: LESS
23108: IFFALSE 23122
// SetLives ( un , 1000 ) ;
23110: LD_VAR 0 3
23114: PPUSH
23115: LD_INT 1000
23117: PPUSH
23118: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 81
23129: PUSH
23130: LD_OWVAR 2
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 91
23141: PUSH
23142: LD_VAR 0 3
23146: PUSH
23147: LD_INT 30
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PPUSH
23159: CALL_OW 69
23163: PPUSH
23164: LD_VAR 0 3
23168: PPUSH
23169: CALL_OW 74
23173: PPUSH
23174: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23178: LD_VAR 0 2
23182: PUSH
23183: LD_INT 80
23185: GREATER
23186: PUSH
23187: LD_VAR 0 3
23191: PPUSH
23192: CALL_OW 301
23196: OR
23197: IFFALSE 23074
// if un then
23199: LD_VAR 0 3
23203: IFFALSE 23214
// RemoveUnit ( un ) ;
23205: LD_VAR 0 3
23209: PPUSH
23210: CALL_OW 64
// end ;
23214: PPOPN 3
23216: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23217: LD_EXP 101
23221: IFFALSE 23337
23223: GO 23225
23225: DISABLE
23226: LD_INT 0
23228: PPUSH
23229: PPUSH
23230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23231: LD_ADDR_VAR 0 2
23235: PUSH
23236: LD_INT 81
23238: PUSH
23239: LD_OWVAR 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PPUSH
23262: CALL_OW 69
23266: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23267: LD_STRING playComputer()
23269: PPUSH
23270: CALL_OW 559
// if not tmp then
23274: LD_VAR 0 2
23278: NOT
23279: IFFALSE 23283
// exit ;
23281: GO 23337
// for i in tmp do
23283: LD_ADDR_VAR 0 1
23287: PUSH
23288: LD_VAR 0 2
23292: PUSH
23293: FOR_IN
23294: IFFALSE 23335
// for j := 1 to 4 do
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: DOUBLE
23302: LD_INT 1
23304: DEC
23305: ST_TO_ADDR
23306: LD_INT 4
23308: PUSH
23309: FOR_TO
23310: IFFALSE 23331
// SetSkill ( i , j , 10 ) ;
23312: LD_VAR 0 1
23316: PPUSH
23317: LD_VAR 0 3
23321: PPUSH
23322: LD_INT 10
23324: PPUSH
23325: CALL_OW 237
23329: GO 23309
23331: POP
23332: POP
23333: GO 23293
23335: POP
23336: POP
// end ;
23337: PPOPN 3
23339: END
// every 0 0$1 trigger s30 do var i , tmp ;
23340: LD_EXP 102
23344: IFFALSE 23413
23346: GO 23348
23348: DISABLE
23349: LD_INT 0
23351: PPUSH
23352: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 22
23360: PUSH
23361: LD_OWVAR 2
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PPUSH
23370: CALL_OW 69
23374: ST_TO_ADDR
// if not tmp then
23375: LD_VAR 0 2
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 23413
// for i in tmp do
23384: LD_ADDR_VAR 0 1
23388: PUSH
23389: LD_VAR 0 2
23393: PUSH
23394: FOR_IN
23395: IFFALSE 23411
// SetLives ( i , 300 ) ;
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_INT 300
23404: PPUSH
23405: CALL_OW 234
23409: GO 23394
23411: POP
23412: POP
// end ;
23413: PPOPN 2
23415: END
// every 0 0$1 trigger s60 do var i , tmp ;
23416: LD_EXP 103
23420: IFFALSE 23489
23422: GO 23424
23424: DISABLE
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 22
23436: PUSH
23437: LD_OWVAR 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PPUSH
23446: CALL_OW 69
23450: ST_TO_ADDR
// if not tmp then
23451: LD_VAR 0 2
23455: NOT
23456: IFFALSE 23460
// exit ;
23458: GO 23489
// for i in tmp do
23460: LD_ADDR_VAR 0 1
23464: PUSH
23465: LD_VAR 0 2
23469: PUSH
23470: FOR_IN
23471: IFFALSE 23487
// SetLives ( i , 600 ) ;
23473: LD_VAR 0 1
23477: PPUSH
23478: LD_INT 600
23480: PPUSH
23481: CALL_OW 234
23485: GO 23470
23487: POP
23488: POP
// end ;
23489: PPOPN 2
23491: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23492: LD_INT 0
23494: PPUSH
// case cmd of 301 :
23495: LD_VAR 0 1
23499: PUSH
23500: LD_INT 301
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23540
23508: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23509: LD_VAR 0 6
23513: PPUSH
23514: LD_VAR 0 7
23518: PPUSH
23519: LD_VAR 0 8
23523: PPUSH
23524: LD_VAR 0 4
23528: PPUSH
23529: LD_VAR 0 5
23533: PPUSH
23534: CALL 24741 0 5
23538: GO 23661
23540: LD_INT 302
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23585
23548: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23549: LD_VAR 0 6
23553: PPUSH
23554: LD_VAR 0 7
23558: PPUSH
23559: LD_VAR 0 8
23563: PPUSH
23564: LD_VAR 0 9
23568: PPUSH
23569: LD_VAR 0 4
23573: PPUSH
23574: LD_VAR 0 5
23578: PPUSH
23579: CALL 24832 0 6
23583: GO 23661
23585: LD_INT 303
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23630
23593: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23594: LD_VAR 0 6
23598: PPUSH
23599: LD_VAR 0 7
23603: PPUSH
23604: LD_VAR 0 8
23608: PPUSH
23609: LD_VAR 0 9
23613: PPUSH
23614: LD_VAR 0 4
23618: PPUSH
23619: LD_VAR 0 5
23623: PPUSH
23624: CALL 23666 0 6
23628: GO 23661
23630: LD_INT 304
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23660
23638: POP
// hHackTeleport ( unit , x , y ) ; end ;
23639: LD_VAR 0 2
23643: PPUSH
23644: LD_VAR 0 4
23648: PPUSH
23649: LD_VAR 0 5
23653: PPUSH
23654: CALL 25425 0 3
23658: GO 23661
23660: POP
// end ;
23661: LD_VAR 0 12
23665: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23666: LD_INT 0
23668: PPUSH
23669: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23670: LD_VAR 0 1
23674: PUSH
23675: LD_INT 1
23677: LESS
23678: PUSH
23679: LD_VAR 0 1
23683: PUSH
23684: LD_INT 3
23686: GREATER
23687: OR
23688: PUSH
23689: LD_VAR 0 5
23693: PPUSH
23694: LD_VAR 0 6
23698: PPUSH
23699: CALL_OW 428
23703: OR
23704: IFFALSE 23708
// exit ;
23706: GO 24428
// uc_side := your_side ;
23708: LD_ADDR_OWVAR 20
23712: PUSH
23713: LD_OWVAR 2
23717: ST_TO_ADDR
// uc_nation := nation ;
23718: LD_ADDR_OWVAR 21
23722: PUSH
23723: LD_VAR 0 1
23727: ST_TO_ADDR
// bc_level = 1 ;
23728: LD_ADDR_OWVAR 43
23732: PUSH
23733: LD_INT 1
23735: ST_TO_ADDR
// case btype of 1 :
23736: LD_VAR 0 2
23740: PUSH
23741: LD_INT 1
23743: DOUBLE
23744: EQUAL
23745: IFTRUE 23749
23747: GO 23760
23749: POP
// bc_type := b_depot ; 2 :
23750: LD_ADDR_OWVAR 42
23754: PUSH
23755: LD_INT 0
23757: ST_TO_ADDR
23758: GO 24372
23760: LD_INT 2
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23779
23768: POP
// bc_type := b_warehouse ; 3 :
23769: LD_ADDR_OWVAR 42
23773: PUSH
23774: LD_INT 1
23776: ST_TO_ADDR
23777: GO 24372
23779: LD_INT 3
23781: DOUBLE
23782: EQUAL
23783: IFTRUE 23787
23785: GO 23798
23787: POP
// bc_type := b_lab ; 4 .. 9 :
23788: LD_ADDR_OWVAR 42
23792: PUSH
23793: LD_INT 6
23795: ST_TO_ADDR
23796: GO 24372
23798: LD_INT 4
23800: DOUBLE
23801: GREATEREQUAL
23802: IFFALSE 23810
23804: LD_INT 9
23806: DOUBLE
23807: LESSEQUAL
23808: IFTRUE 23812
23810: GO 23864
23812: POP
// begin bc_type := b_lab_half ;
23813: LD_ADDR_OWVAR 42
23817: PUSH
23818: LD_INT 7
23820: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23821: LD_ADDR_OWVAR 44
23825: PUSH
23826: LD_INT 10
23828: PUSH
23829: LD_INT 11
23831: PUSH
23832: LD_INT 12
23834: PUSH
23835: LD_INT 15
23837: PUSH
23838: LD_INT 14
23840: PUSH
23841: LD_INT 13
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: LD_VAR 0 2
23856: PUSH
23857: LD_INT 3
23859: MINUS
23860: ARRAY
23861: ST_TO_ADDR
// end ; 10 .. 13 :
23862: GO 24372
23864: LD_INT 10
23866: DOUBLE
23867: GREATEREQUAL
23868: IFFALSE 23876
23870: LD_INT 13
23872: DOUBLE
23873: LESSEQUAL
23874: IFTRUE 23878
23876: GO 23955
23878: POP
// begin bc_type := b_lab_full ;
23879: LD_ADDR_OWVAR 42
23883: PUSH
23884: LD_INT 8
23886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23887: LD_ADDR_OWVAR 44
23891: PUSH
23892: LD_INT 10
23894: PUSH
23895: LD_INT 12
23897: PUSH
23898: LD_INT 14
23900: PUSH
23901: LD_INT 13
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: PUSH
23910: LD_VAR 0 2
23914: PUSH
23915: LD_INT 9
23917: MINUS
23918: ARRAY
23919: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23920: LD_ADDR_OWVAR 45
23924: PUSH
23925: LD_INT 11
23927: PUSH
23928: LD_INT 15
23930: PUSH
23931: LD_INT 12
23933: PUSH
23934: LD_INT 15
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: PUSH
23943: LD_VAR 0 2
23947: PUSH
23948: LD_INT 9
23950: MINUS
23951: ARRAY
23952: ST_TO_ADDR
// end ; 14 :
23953: GO 24372
23955: LD_INT 14
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 23974
23963: POP
// bc_type := b_workshop ; 15 :
23964: LD_ADDR_OWVAR 42
23968: PUSH
23969: LD_INT 2
23971: ST_TO_ADDR
23972: GO 24372
23974: LD_INT 15
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 23993
23982: POP
// bc_type := b_factory ; 16 :
23983: LD_ADDR_OWVAR 42
23987: PUSH
23988: LD_INT 3
23990: ST_TO_ADDR
23991: GO 24372
23993: LD_INT 16
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24001
23999: GO 24012
24001: POP
// bc_type := b_ext_gun ; 17 :
24002: LD_ADDR_OWVAR 42
24006: PUSH
24007: LD_INT 17
24009: ST_TO_ADDR
24010: GO 24372
24012: LD_INT 17
24014: DOUBLE
24015: EQUAL
24016: IFTRUE 24020
24018: GO 24048
24020: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24021: LD_ADDR_OWVAR 42
24025: PUSH
24026: LD_INT 19
24028: PUSH
24029: LD_INT 23
24031: PUSH
24032: LD_INT 19
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: LD_VAR 0 1
24044: ARRAY
24045: ST_TO_ADDR
24046: GO 24372
24048: LD_INT 18
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24067
24056: POP
// bc_type := b_ext_radar ; 19 :
24057: LD_ADDR_OWVAR 42
24061: PUSH
24062: LD_INT 20
24064: ST_TO_ADDR
24065: GO 24372
24067: LD_INT 19
24069: DOUBLE
24070: EQUAL
24071: IFTRUE 24075
24073: GO 24086
24075: POP
// bc_type := b_ext_radio ; 20 :
24076: LD_ADDR_OWVAR 42
24080: PUSH
24081: LD_INT 22
24083: ST_TO_ADDR
24084: GO 24372
24086: LD_INT 20
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24105
24094: POP
// bc_type := b_ext_siberium ; 21 :
24095: LD_ADDR_OWVAR 42
24099: PUSH
24100: LD_INT 21
24102: ST_TO_ADDR
24103: GO 24372
24105: LD_INT 21
24107: DOUBLE
24108: EQUAL
24109: IFTRUE 24113
24111: GO 24124
24113: POP
// bc_type := b_ext_computer ; 22 :
24114: LD_ADDR_OWVAR 42
24118: PUSH
24119: LD_INT 24
24121: ST_TO_ADDR
24122: GO 24372
24124: LD_INT 22
24126: DOUBLE
24127: EQUAL
24128: IFTRUE 24132
24130: GO 24143
24132: POP
// bc_type := b_ext_track ; 23 :
24133: LD_ADDR_OWVAR 42
24137: PUSH
24138: LD_INT 16
24140: ST_TO_ADDR
24141: GO 24372
24143: LD_INT 23
24145: DOUBLE
24146: EQUAL
24147: IFTRUE 24151
24149: GO 24162
24151: POP
// bc_type := b_ext_laser ; 24 :
24152: LD_ADDR_OWVAR 42
24156: PUSH
24157: LD_INT 25
24159: ST_TO_ADDR
24160: GO 24372
24162: LD_INT 24
24164: DOUBLE
24165: EQUAL
24166: IFTRUE 24170
24168: GO 24181
24170: POP
// bc_type := b_control_tower ; 25 :
24171: LD_ADDR_OWVAR 42
24175: PUSH
24176: LD_INT 36
24178: ST_TO_ADDR
24179: GO 24372
24181: LD_INT 25
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 24200
24189: POP
// bc_type := b_breastwork ; 26 :
24190: LD_ADDR_OWVAR 42
24194: PUSH
24195: LD_INT 31
24197: ST_TO_ADDR
24198: GO 24372
24200: LD_INT 26
24202: DOUBLE
24203: EQUAL
24204: IFTRUE 24208
24206: GO 24219
24208: POP
// bc_type := b_bunker ; 27 :
24209: LD_ADDR_OWVAR 42
24213: PUSH
24214: LD_INT 32
24216: ST_TO_ADDR
24217: GO 24372
24219: LD_INT 27
24221: DOUBLE
24222: EQUAL
24223: IFTRUE 24227
24225: GO 24238
24227: POP
// bc_type := b_turret ; 28 :
24228: LD_ADDR_OWVAR 42
24232: PUSH
24233: LD_INT 33
24235: ST_TO_ADDR
24236: GO 24372
24238: LD_INT 28
24240: DOUBLE
24241: EQUAL
24242: IFTRUE 24246
24244: GO 24257
24246: POP
// bc_type := b_armoury ; 29 :
24247: LD_ADDR_OWVAR 42
24251: PUSH
24252: LD_INT 4
24254: ST_TO_ADDR
24255: GO 24372
24257: LD_INT 29
24259: DOUBLE
24260: EQUAL
24261: IFTRUE 24265
24263: GO 24276
24265: POP
// bc_type := b_barracks ; 30 :
24266: LD_ADDR_OWVAR 42
24270: PUSH
24271: LD_INT 5
24273: ST_TO_ADDR
24274: GO 24372
24276: LD_INT 30
24278: DOUBLE
24279: EQUAL
24280: IFTRUE 24284
24282: GO 24295
24284: POP
// bc_type := b_solar_power ; 31 :
24285: LD_ADDR_OWVAR 42
24289: PUSH
24290: LD_INT 27
24292: ST_TO_ADDR
24293: GO 24372
24295: LD_INT 31
24297: DOUBLE
24298: EQUAL
24299: IFTRUE 24303
24301: GO 24314
24303: POP
// bc_type := b_oil_power ; 32 :
24304: LD_ADDR_OWVAR 42
24308: PUSH
24309: LD_INT 26
24311: ST_TO_ADDR
24312: GO 24372
24314: LD_INT 32
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24333
24322: POP
// bc_type := b_siberite_power ; 33 :
24323: LD_ADDR_OWVAR 42
24327: PUSH
24328: LD_INT 28
24330: ST_TO_ADDR
24331: GO 24372
24333: LD_INT 33
24335: DOUBLE
24336: EQUAL
24337: IFTRUE 24341
24339: GO 24352
24341: POP
// bc_type := b_oil_mine ; 34 :
24342: LD_ADDR_OWVAR 42
24346: PUSH
24347: LD_INT 29
24349: ST_TO_ADDR
24350: GO 24372
24352: LD_INT 34
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24371
24360: POP
// bc_type := b_siberite_mine ; end ;
24361: LD_ADDR_OWVAR 42
24365: PUSH
24366: LD_INT 30
24368: ST_TO_ADDR
24369: GO 24372
24371: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24372: LD_ADDR_VAR 0 8
24376: PUSH
24377: LD_VAR 0 5
24381: PPUSH
24382: LD_VAR 0 6
24386: PPUSH
24387: LD_VAR 0 3
24391: PPUSH
24392: CALL_OW 47
24396: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24397: LD_OWVAR 42
24401: PUSH
24402: LD_INT 32
24404: PUSH
24405: LD_INT 33
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: IN
24412: IFFALSE 24428
// PlaceWeaponTurret ( b , weapon ) ;
24414: LD_VAR 0 8
24418: PPUSH
24419: LD_VAR 0 4
24423: PPUSH
24424: CALL_OW 431
// end ;
24428: LD_VAR 0 7
24432: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24439: LD_ADDR_VAR 0 4
24443: PUSH
24444: LD_INT 22
24446: PUSH
24447: LD_OWVAR 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: LD_INT 30
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 30
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: ST_TO_ADDR
// if not tmp then
24493: LD_VAR 0 4
24497: NOT
24498: IFFALSE 24502
// exit ;
24500: GO 24561
// for i in tmp do
24502: LD_ADDR_VAR 0 2
24506: PUSH
24507: LD_VAR 0 4
24511: PUSH
24512: FOR_IN
24513: IFFALSE 24559
// for j = 1 to 3 do
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: DOUBLE
24521: LD_INT 1
24523: DEC
24524: ST_TO_ADDR
24525: LD_INT 3
24527: PUSH
24528: FOR_TO
24529: IFFALSE 24555
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24531: LD_VAR 0 2
24535: PPUSH
24536: CALL_OW 274
24540: PPUSH
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_INT 99999
24548: PPUSH
24549: CALL_OW 277
24553: GO 24528
24555: POP
24556: POP
24557: GO 24512
24559: POP
24560: POP
// end ;
24561: LD_VAR 0 1
24565: RET
// export function hHackSetLevel10 ; var i , j ; begin
24566: LD_INT 0
24568: PPUSH
24569: PPUSH
24570: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24571: LD_ADDR_VAR 0 2
24575: PUSH
24576: LD_INT 21
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PPUSH
24586: CALL_OW 69
24590: PUSH
24591: FOR_IN
24592: IFFALSE 24644
// if IsSelected ( i ) then
24594: LD_VAR 0 2
24598: PPUSH
24599: CALL_OW 306
24603: IFFALSE 24642
// begin for j := 1 to 4 do
24605: LD_ADDR_VAR 0 3
24609: PUSH
24610: DOUBLE
24611: LD_INT 1
24613: DEC
24614: ST_TO_ADDR
24615: LD_INT 4
24617: PUSH
24618: FOR_TO
24619: IFFALSE 24640
// SetSkill ( i , j , 10 ) ;
24621: LD_VAR 0 2
24625: PPUSH
24626: LD_VAR 0 3
24630: PPUSH
24631: LD_INT 10
24633: PPUSH
24634: CALL_OW 237
24638: GO 24618
24640: POP
24641: POP
// end ;
24642: GO 24591
24644: POP
24645: POP
// end ;
24646: LD_VAR 0 1
24650: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24651: LD_INT 0
24653: PPUSH
24654: PPUSH
24655: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24656: LD_ADDR_VAR 0 2
24660: PUSH
24661: LD_INT 22
24663: PUSH
24664: LD_OWVAR 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 21
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PPUSH
24687: CALL_OW 69
24691: PUSH
24692: FOR_IN
24693: IFFALSE 24734
// begin for j := 1 to 4 do
24695: LD_ADDR_VAR 0 3
24699: PUSH
24700: DOUBLE
24701: LD_INT 1
24703: DEC
24704: ST_TO_ADDR
24705: LD_INT 4
24707: PUSH
24708: FOR_TO
24709: IFFALSE 24730
// SetSkill ( i , j , 10 ) ;
24711: LD_VAR 0 2
24715: PPUSH
24716: LD_VAR 0 3
24720: PPUSH
24721: LD_INT 10
24723: PPUSH
24724: CALL_OW 237
24728: GO 24708
24730: POP
24731: POP
// end ;
24732: GO 24692
24734: POP
24735: POP
// end ;
24736: LD_VAR 0 1
24740: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24741: LD_INT 0
24743: PPUSH
// uc_side := your_side ;
24744: LD_ADDR_OWVAR 20
24748: PUSH
24749: LD_OWVAR 2
24753: ST_TO_ADDR
// uc_nation := nation ;
24754: LD_ADDR_OWVAR 21
24758: PUSH
24759: LD_VAR 0 1
24763: ST_TO_ADDR
// InitHc ;
24764: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24768: LD_INT 0
24770: PPUSH
24771: LD_VAR 0 2
24775: PPUSH
24776: LD_VAR 0 3
24780: PPUSH
24781: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24785: LD_VAR 0 4
24789: PPUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: CALL_OW 428
24799: PUSH
24800: LD_INT 0
24802: EQUAL
24803: IFFALSE 24827
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24805: CALL_OW 44
24809: PPUSH
24810: LD_VAR 0 4
24814: PPUSH
24815: LD_VAR 0 5
24819: PPUSH
24820: LD_INT 1
24822: PPUSH
24823: CALL_OW 48
// end ;
24827: LD_VAR 0 6
24831: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24832: LD_INT 0
24834: PPUSH
24835: PPUSH
// uc_side := your_side ;
24836: LD_ADDR_OWVAR 20
24840: PUSH
24841: LD_OWVAR 2
24845: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24846: LD_VAR 0 1
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: LD_INT 4
24862: PUSH
24863: LD_INT 5
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: IN
24873: IFFALSE 24885
// uc_nation := nation_american else
24875: LD_ADDR_OWVAR 21
24879: PUSH
24880: LD_INT 1
24882: ST_TO_ADDR
24883: GO 24928
// if chassis in [ 11 , 12 , 13 , 14 ] then
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 11
24892: PUSH
24893: LD_INT 12
24895: PUSH
24896: LD_INT 13
24898: PUSH
24899: LD_INT 14
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: IN
24908: IFFALSE 24920
// uc_nation := nation_arabian else
24910: LD_ADDR_OWVAR 21
24914: PUSH
24915: LD_INT 2
24917: ST_TO_ADDR
24918: GO 24928
// uc_nation := nation_russian ;
24920: LD_ADDR_OWVAR 21
24924: PUSH
24925: LD_INT 3
24927: ST_TO_ADDR
// vc_chassis := chassis ;
24928: LD_ADDR_OWVAR 37
24932: PUSH
24933: LD_VAR 0 1
24937: ST_TO_ADDR
// vc_engine := engine ;
24938: LD_ADDR_OWVAR 39
24942: PUSH
24943: LD_VAR 0 2
24947: ST_TO_ADDR
// vc_control := control ;
24948: LD_ADDR_OWVAR 38
24952: PUSH
24953: LD_VAR 0 3
24957: ST_TO_ADDR
// vc_weapon := weapon ;
24958: LD_ADDR_OWVAR 40
24962: PUSH
24963: LD_VAR 0 4
24967: ST_TO_ADDR
// un := CreateVehicle ;
24968: LD_ADDR_VAR 0 8
24972: PUSH
24973: CALL_OW 45
24977: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24978: LD_VAR 0 8
24982: PPUSH
24983: LD_INT 0
24985: PPUSH
24986: LD_INT 5
24988: PPUSH
24989: CALL_OW 12
24993: PPUSH
24994: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24998: LD_VAR 0 8
25002: PPUSH
25003: LD_VAR 0 5
25007: PPUSH
25008: LD_VAR 0 6
25012: PPUSH
25013: LD_INT 1
25015: PPUSH
25016: CALL_OW 48
// end ;
25020: LD_VAR 0 7
25024: RET
// export hInvincible ; every 1 do
25025: GO 25027
25027: DISABLE
// hInvincible := [ ] ;
25028: LD_ADDR_EXP 104
25032: PUSH
25033: EMPTY
25034: ST_TO_ADDR
25035: END
// every 10 do var i ;
25036: GO 25038
25038: DISABLE
25039: LD_INT 0
25041: PPUSH
// begin enable ;
25042: ENABLE
// if not hInvincible then
25043: LD_EXP 104
25047: NOT
25048: IFFALSE 25052
// exit ;
25050: GO 25096
// for i in hInvincible do
25052: LD_ADDR_VAR 0 1
25056: PUSH
25057: LD_EXP 104
25061: PUSH
25062: FOR_IN
25063: IFFALSE 25094
// if GetLives ( i ) < 1000 then
25065: LD_VAR 0 1
25069: PPUSH
25070: CALL_OW 256
25074: PUSH
25075: LD_INT 1000
25077: LESS
25078: IFFALSE 25092
// SetLives ( i , 1000 ) ;
25080: LD_VAR 0 1
25084: PPUSH
25085: LD_INT 1000
25087: PPUSH
25088: CALL_OW 234
25092: GO 25062
25094: POP
25095: POP
// end ;
25096: PPOPN 1
25098: END
// export function hHackInvincible ; var i ; begin
25099: LD_INT 0
25101: PPUSH
25102: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25103: LD_ADDR_VAR 0 2
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 21
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 21
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: LIST
25135: PPUSH
25136: CALL_OW 69
25140: PUSH
25141: FOR_IN
25142: IFFALSE 25203
// if IsSelected ( i ) then
25144: LD_VAR 0 2
25148: PPUSH
25149: CALL_OW 306
25153: IFFALSE 25201
// begin if i in hInvincible then
25155: LD_VAR 0 2
25159: PUSH
25160: LD_EXP 104
25164: IN
25165: IFFALSE 25185
// hInvincible := hInvincible diff i else
25167: LD_ADDR_EXP 104
25171: PUSH
25172: LD_EXP 104
25176: PUSH
25177: LD_VAR 0 2
25181: DIFF
25182: ST_TO_ADDR
25183: GO 25201
// hInvincible := hInvincible union i ;
25185: LD_ADDR_EXP 104
25189: PUSH
25190: LD_EXP 104
25194: PUSH
25195: LD_VAR 0 2
25199: UNION
25200: ST_TO_ADDR
// end ;
25201: GO 25141
25203: POP
25204: POP
// end ;
25205: LD_VAR 0 1
25209: RET
// export function hHackInvisible ; var i , j ; begin
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25215: LD_ADDR_VAR 0 2
25219: PUSH
25220: LD_INT 21
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 69
25234: PUSH
25235: FOR_IN
25236: IFFALSE 25260
// if IsSelected ( i ) then
25238: LD_VAR 0 2
25242: PPUSH
25243: CALL_OW 306
25247: IFFALSE 25258
// ComForceInvisible ( i ) ;
25249: LD_VAR 0 2
25253: PPUSH
25254: CALL_OW 496
25258: GO 25235
25260: POP
25261: POP
// end ;
25262: LD_VAR 0 1
25266: RET
// export function hHackChangeYourSide ; begin
25267: LD_INT 0
25269: PPUSH
// if your_side = 8 then
25270: LD_OWVAR 2
25274: PUSH
25275: LD_INT 8
25277: EQUAL
25278: IFFALSE 25290
// your_side := 0 else
25280: LD_ADDR_OWVAR 2
25284: PUSH
25285: LD_INT 0
25287: ST_TO_ADDR
25288: GO 25304
// your_side := your_side + 1 ;
25290: LD_ADDR_OWVAR 2
25294: PUSH
25295: LD_OWVAR 2
25299: PUSH
25300: LD_INT 1
25302: PLUS
25303: ST_TO_ADDR
// end ;
25304: LD_VAR 0 1
25308: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25309: LD_INT 0
25311: PPUSH
25312: PPUSH
25313: PPUSH
// for i in all_units do
25314: LD_ADDR_VAR 0 2
25318: PUSH
25319: LD_OWVAR 3
25323: PUSH
25324: FOR_IN
25325: IFFALSE 25403
// if IsSelected ( i ) then
25327: LD_VAR 0 2
25331: PPUSH
25332: CALL_OW 306
25336: IFFALSE 25401
// begin j := GetSide ( i ) ;
25338: LD_ADDR_VAR 0 3
25342: PUSH
25343: LD_VAR 0 2
25347: PPUSH
25348: CALL_OW 255
25352: ST_TO_ADDR
// if j = 8 then
25353: LD_VAR 0 3
25357: PUSH
25358: LD_INT 8
25360: EQUAL
25361: IFFALSE 25373
// j := 0 else
25363: LD_ADDR_VAR 0 3
25367: PUSH
25368: LD_INT 0
25370: ST_TO_ADDR
25371: GO 25387
// j := j + 1 ;
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_VAR 0 3
25382: PUSH
25383: LD_INT 1
25385: PLUS
25386: ST_TO_ADDR
// SetSide ( i , j ) ;
25387: LD_VAR 0 2
25391: PPUSH
25392: LD_VAR 0 3
25396: PPUSH
25397: CALL_OW 235
// end ;
25401: GO 25324
25403: POP
25404: POP
// end ;
25405: LD_VAR 0 1
25409: RET
// export function hHackFog ; begin
25410: LD_INT 0
25412: PPUSH
// FogOff ( true ) ;
25413: LD_INT 1
25415: PPUSH
25416: CALL_OW 344
// end ;
25420: LD_VAR 0 1
25424: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25425: LD_INT 0
25427: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25428: LD_VAR 0 1
25432: PPUSH
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_VAR 0 3
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: LD_INT 1
25448: PPUSH
25449: CALL_OW 483
// CenterOnXY ( x , y ) ;
25453: LD_VAR 0 2
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: CALL_OW 84
// end ;
25467: LD_VAR 0 4
25471: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25472: LD_INT 0
25474: PPUSH
25475: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25476: LD_VAR 0 1
25480: NOT
25481: PUSH
25482: LD_VAR 0 2
25486: PPUSH
25487: LD_VAR 0 3
25491: PPUSH
25492: CALL_OW 488
25496: NOT
25497: OR
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 266
25508: PUSH
25509: LD_INT 3
25511: NONEQUAL
25512: PUSH
25513: LD_VAR 0 1
25517: PPUSH
25518: CALL_OW 247
25522: PUSH
25523: LD_INT 1
25525: EQUAL
25526: NOT
25527: AND
25528: OR
25529: IFFALSE 25533
// exit ;
25531: GO 25682
// if GetType ( factory ) = unit_human then
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 247
25542: PUSH
25543: LD_INT 1
25545: EQUAL
25546: IFFALSE 25563
// factory := IsInUnit ( factory ) ;
25548: LD_ADDR_VAR 0 1
25552: PUSH
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 310
25562: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25563: LD_VAR 0 1
25567: PPUSH
25568: CALL_OW 266
25572: PUSH
25573: LD_INT 3
25575: NONEQUAL
25576: IFFALSE 25580
// exit ;
25578: GO 25682
// if HexInfo ( x , y ) = factory then
25580: LD_VAR 0 2
25584: PPUSH
25585: LD_VAR 0 3
25589: PPUSH
25590: CALL_OW 428
25594: PUSH
25595: LD_VAR 0 1
25599: EQUAL
25600: IFFALSE 25627
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25602: LD_ADDR_EXP 105
25606: PUSH
25607: LD_EXP 105
25611: PPUSH
25612: LD_VAR 0 1
25616: PPUSH
25617: LD_INT 0
25619: PPUSH
25620: CALL_OW 1
25624: ST_TO_ADDR
25625: GO 25678
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25627: LD_ADDR_EXP 105
25631: PUSH
25632: LD_EXP 105
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: LD_VAR 0 1
25646: PPUSH
25647: CALL_OW 255
25651: PUSH
25652: LD_VAR 0 1
25656: PUSH
25657: LD_VAR 0 2
25661: PUSH
25662: LD_VAR 0 3
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: PPUSH
25673: CALL_OW 1
25677: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25678: CALL 25687 0 0
// end ;
25682: LD_VAR 0 4
25686: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
25691: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25692: LD_STRING resetFactoryWaypoint();
25694: PPUSH
25695: CALL_OW 559
// if factoryWaypoints then
25699: LD_EXP 105
25703: IFFALSE 25829
// begin list := PrepareArray ( factoryWaypoints ) ;
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_EXP 105
25714: PPUSH
25715: CALL 72298 0 1
25719: ST_TO_ADDR
// for i := 1 to list do
25720: LD_ADDR_VAR 0 2
25724: PUSH
25725: DOUBLE
25726: LD_INT 1
25728: DEC
25729: ST_TO_ADDR
25730: LD_VAR 0 3
25734: PUSH
25735: FOR_TO
25736: IFFALSE 25827
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25738: LD_STRING setFactoryWaypointXY(
25740: PUSH
25741: LD_VAR 0 3
25745: PUSH
25746: LD_VAR 0 2
25750: ARRAY
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: STR
25756: PUSH
25757: LD_STRING ,
25759: STR
25760: PUSH
25761: LD_VAR 0 3
25765: PUSH
25766: LD_VAR 0 2
25770: ARRAY
25771: PUSH
25772: LD_INT 2
25774: ARRAY
25775: STR
25776: PUSH
25777: LD_STRING ,
25779: STR
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: LD_VAR 0 2
25790: ARRAY
25791: PUSH
25792: LD_INT 3
25794: ARRAY
25795: STR
25796: PUSH
25797: LD_STRING ,
25799: STR
25800: PUSH
25801: LD_VAR 0 3
25805: PUSH
25806: LD_VAR 0 2
25810: ARRAY
25811: PUSH
25812: LD_INT 4
25814: ARRAY
25815: STR
25816: PUSH
25817: LD_STRING )
25819: STR
25820: PPUSH
25821: CALL_OW 559
25825: GO 25735
25827: POP
25828: POP
// end ; end ;
25829: LD_VAR 0 1
25833: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25834: LD_INT 0
25836: PPUSH
// if HexInfo ( x , y ) = warehouse then
25837: LD_VAR 0 2
25841: PPUSH
25842: LD_VAR 0 3
25846: PPUSH
25847: CALL_OW 428
25851: PUSH
25852: LD_VAR 0 1
25856: EQUAL
25857: IFFALSE 25884
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25859: LD_ADDR_EXP 106
25863: PUSH
25864: LD_EXP 106
25868: PPUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: LD_INT 0
25876: PPUSH
25877: CALL_OW 1
25881: ST_TO_ADDR
25882: GO 25935
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25884: LD_ADDR_EXP 106
25888: PUSH
25889: LD_EXP 106
25893: PPUSH
25894: LD_VAR 0 1
25898: PPUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 255
25908: PUSH
25909: LD_VAR 0 1
25913: PUSH
25914: LD_VAR 0 2
25918: PUSH
25919: LD_VAR 0 3
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 1
25934: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25935: CALL 25944 0 0
// end ;
25939: LD_VAR 0 4
25943: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25944: LD_INT 0
25946: PPUSH
25947: PPUSH
25948: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25949: LD_STRING resetWarehouseGatheringPoints();
25951: PPUSH
25952: CALL_OW 559
// if warehouseGatheringPoints then
25956: LD_EXP 106
25960: IFFALSE 26086
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_EXP 106
25971: PPUSH
25972: CALL 72298 0 1
25976: ST_TO_ADDR
// for i := 1 to list do
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: DOUBLE
25983: LD_INT 1
25985: DEC
25986: ST_TO_ADDR
25987: LD_VAR 0 3
25991: PUSH
25992: FOR_TO
25993: IFFALSE 26084
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25995: LD_STRING setWarehouseGatheringPointXY(
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_VAR 0 2
26007: ARRAY
26008: PUSH
26009: LD_INT 1
26011: ARRAY
26012: STR
26013: PUSH
26014: LD_STRING ,
26016: STR
26017: PUSH
26018: LD_VAR 0 3
26022: PUSH
26023: LD_VAR 0 2
26027: ARRAY
26028: PUSH
26029: LD_INT 2
26031: ARRAY
26032: STR
26033: PUSH
26034: LD_STRING ,
26036: STR
26037: PUSH
26038: LD_VAR 0 3
26042: PUSH
26043: LD_VAR 0 2
26047: ARRAY
26048: PUSH
26049: LD_INT 3
26051: ARRAY
26052: STR
26053: PUSH
26054: LD_STRING ,
26056: STR
26057: PUSH
26058: LD_VAR 0 3
26062: PUSH
26063: LD_VAR 0 2
26067: ARRAY
26068: PUSH
26069: LD_INT 4
26071: ARRAY
26072: STR
26073: PUSH
26074: LD_STRING )
26076: STR
26077: PPUSH
26078: CALL_OW 559
26082: GO 25992
26084: POP
26085: POP
// end ; end ;
26086: LD_VAR 0 1
26090: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26091: LD_EXP 106
26095: IFFALSE 26780
26097: GO 26099
26099: DISABLE
26100: LD_INT 0
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
26106: PPUSH
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
// begin enable ;
26111: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: LD_EXP 106
26121: PPUSH
26122: CALL 72298 0 1
26126: ST_TO_ADDR
// if not list then
26127: LD_VAR 0 3
26131: NOT
26132: IFFALSE 26136
// exit ;
26134: GO 26780
// for i := 1 to list do
26136: LD_ADDR_VAR 0 1
26140: PUSH
26141: DOUBLE
26142: LD_INT 1
26144: DEC
26145: ST_TO_ADDR
26146: LD_VAR 0 3
26150: PUSH
26151: FOR_TO
26152: IFFALSE 26778
// begin depot := list [ i ] [ 2 ] ;
26154: LD_ADDR_VAR 0 8
26158: PUSH
26159: LD_VAR 0 3
26163: PUSH
26164: LD_VAR 0 1
26168: ARRAY
26169: PUSH
26170: LD_INT 2
26172: ARRAY
26173: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26174: LD_ADDR_VAR 0 5
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 1
26188: ARRAY
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26194: LD_VAR 0 8
26198: PPUSH
26199: CALL_OW 301
26203: PUSH
26204: LD_VAR 0 5
26208: PUSH
26209: LD_VAR 0 8
26213: PPUSH
26214: CALL_OW 255
26218: NONEQUAL
26219: OR
26220: IFFALSE 26249
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26222: LD_ADDR_EXP 106
26226: PUSH
26227: LD_EXP 106
26231: PPUSH
26232: LD_VAR 0 8
26236: PPUSH
26237: LD_INT 0
26239: PPUSH
26240: CALL_OW 1
26244: ST_TO_ADDR
// exit ;
26245: POP
26246: POP
26247: GO 26780
// end ; x := list [ i ] [ 3 ] ;
26249: LD_ADDR_VAR 0 6
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_VAR 0 1
26263: ARRAY
26264: PUSH
26265: LD_INT 3
26267: ARRAY
26268: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26269: LD_ADDR_VAR 0 7
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 1
26283: ARRAY
26284: PUSH
26285: LD_INT 4
26287: ARRAY
26288: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26289: LD_ADDR_VAR 0 9
26293: PUSH
26294: LD_VAR 0 6
26298: PPUSH
26299: LD_VAR 0 7
26303: PPUSH
26304: LD_INT 16
26306: PPUSH
26307: CALL 70886 0 3
26311: ST_TO_ADDR
// if not cratesNearbyPoint then
26312: LD_VAR 0 9
26316: NOT
26317: IFFALSE 26323
// exit ;
26319: POP
26320: POP
26321: GO 26780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26323: LD_ADDR_VAR 0 4
26327: PUSH
26328: LD_INT 22
26330: PUSH
26331: LD_VAR 0 5
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: LD_INT 60
26345: PUSH
26346: EMPTY
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 91
26355: PUSH
26356: LD_VAR 0 8
26360: PUSH
26361: LD_INT 6
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 25
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 25
26384: PUSH
26385: LD_INT 16
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 69
26407: PUSH
26408: LD_VAR 0 8
26412: PPUSH
26413: CALL_OW 313
26417: PPUSH
26418: LD_INT 3
26420: PUSH
26421: LD_INT 60
26423: PUSH
26424: EMPTY
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 25
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 25
26446: PUSH
26447: LD_INT 16
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 72
26467: UNION
26468: ST_TO_ADDR
// if tmp then
26469: LD_VAR 0 4
26473: IFFALSE 26553
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26475: LD_ADDR_VAR 0 4
26479: PUSH
26480: LD_VAR 0 4
26484: PPUSH
26485: LD_INT 3
26487: PPUSH
26488: CALL 68855 0 2
26492: ST_TO_ADDR
// for j in tmp do
26493: LD_ADDR_VAR 0 2
26497: PUSH
26498: LD_VAR 0 4
26502: PUSH
26503: FOR_IN
26504: IFFALSE 26547
// begin if IsInUnit ( j ) then
26506: LD_VAR 0 2
26510: PPUSH
26511: CALL_OW 310
26515: IFFALSE 26526
// ComExit ( j ) ;
26517: LD_VAR 0 2
26521: PPUSH
26522: CALL 68938 0 1
// AddComCollect ( j , x , y ) ;
26526: LD_VAR 0 2
26530: PPUSH
26531: LD_VAR 0 6
26535: PPUSH
26536: LD_VAR 0 7
26540: PPUSH
26541: CALL_OW 177
// end ;
26545: GO 26503
26547: POP
26548: POP
// exit ;
26549: POP
26550: POP
26551: GO 26780
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26553: LD_ADDR_VAR 0 4
26557: PUSH
26558: LD_INT 22
26560: PUSH
26561: LD_VAR 0 5
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 91
26572: PUSH
26573: LD_VAR 0 8
26577: PUSH
26578: LD_INT 8
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: LD_INT 34
26591: PUSH
26592: LD_INT 12
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 34
26601: PUSH
26602: LD_INT 51
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 34
26611: PUSH
26612: LD_INT 32
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 34
26621: PUSH
26622: LD_INT 89
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: PPUSH
26641: CALL_OW 69
26645: ST_TO_ADDR
// if tmp then
26646: LD_VAR 0 4
26650: IFFALSE 26776
// begin for j in tmp do
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_VAR 0 4
26661: PUSH
26662: FOR_IN
26663: IFFALSE 26774
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26665: LD_VAR 0 2
26669: PPUSH
26670: CALL_OW 262
26674: PUSH
26675: LD_INT 3
26677: EQUAL
26678: PUSH
26679: LD_VAR 0 2
26683: PPUSH
26684: CALL_OW 261
26688: PUSH
26689: LD_INT 20
26691: GREATER
26692: OR
26693: PUSH
26694: LD_VAR 0 2
26698: PPUSH
26699: CALL_OW 314
26703: NOT
26704: AND
26705: PUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 263
26715: PUSH
26716: LD_INT 1
26718: NONEQUAL
26719: PUSH
26720: LD_VAR 0 2
26724: PPUSH
26725: CALL_OW 311
26729: OR
26730: AND
26731: IFFALSE 26772
// begin ComCollect ( j , x , y ) ;
26733: LD_VAR 0 2
26737: PPUSH
26738: LD_VAR 0 6
26742: PPUSH
26743: LD_VAR 0 7
26747: PPUSH
26748: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26752: LD_VAR 0 2
26756: PPUSH
26757: LD_VAR 0 8
26761: PPUSH
26762: CALL_OW 172
// exit ;
26766: POP
26767: POP
26768: POP
26769: POP
26770: GO 26780
// end ;
26772: GO 26662
26774: POP
26775: POP
// end ; end ;
26776: GO 26151
26778: POP
26779: POP
// end ; end_of_file
26780: PPOPN 9
26782: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26783: LD_INT 0
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26789: LD_VAR 0 1
26793: PPUSH
26794: CALL_OW 264
26798: PUSH
26799: LD_INT 91
26801: EQUAL
26802: IFFALSE 26874
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26804: LD_INT 68
26806: PPUSH
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 255
26816: PPUSH
26817: CALL_OW 321
26821: PUSH
26822: LD_INT 2
26824: EQUAL
26825: IFFALSE 26837
// eff := 70 else
26827: LD_ADDR_VAR 0 4
26831: PUSH
26832: LD_INT 70
26834: ST_TO_ADDR
26835: GO 26845
// eff := 30 ;
26837: LD_ADDR_VAR 0 4
26841: PUSH
26842: LD_INT 30
26844: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26845: LD_VAR 0 1
26849: PPUSH
26850: CALL_OW 250
26854: PPUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 251
26864: PPUSH
26865: LD_VAR 0 4
26869: PPUSH
26870: CALL_OW 495
// end ; end ;
26874: LD_VAR 0 2
26878: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26879: LD_INT 0
26881: PPUSH
// end ;
26882: LD_VAR 0 4
26886: RET
// export function SOS_Command ( cmd ) ; begin
26887: LD_INT 0
26889: PPUSH
// end ;
26890: LD_VAR 0 2
26894: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26895: LD_INT 0
26897: PPUSH
// end ;
26898: LD_VAR 0 6
26902: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
// if not vehicle or not factory then
26907: LD_VAR 0 1
26911: NOT
26912: PUSH
26913: LD_VAR 0 2
26917: NOT
26918: OR
26919: IFFALSE 26923
// exit ;
26921: GO 27154
// if factoryWaypoints >= factory then
26923: LD_EXP 105
26927: PUSH
26928: LD_VAR 0 2
26932: GREATEREQUAL
26933: IFFALSE 27154
// if factoryWaypoints [ factory ] then
26935: LD_EXP 105
26939: PUSH
26940: LD_VAR 0 2
26944: ARRAY
26945: IFFALSE 27154
// begin if GetControl ( vehicle ) = control_manual then
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 263
26956: PUSH
26957: LD_INT 1
26959: EQUAL
26960: IFFALSE 27041
// begin driver := IsDrivenBy ( vehicle ) ;
26962: LD_ADDR_VAR 0 4
26966: PUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 311
26976: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26977: LD_VAR 0 4
26981: PPUSH
26982: LD_EXP 105
26986: PUSH
26987: LD_VAR 0 2
26991: ARRAY
26992: PUSH
26993: LD_INT 3
26995: ARRAY
26996: PPUSH
26997: LD_EXP 105
27001: PUSH
27002: LD_VAR 0 2
27006: ARRAY
27007: PUSH
27008: LD_INT 4
27010: ARRAY
27011: PPUSH
27012: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27016: LD_VAR 0 4
27020: PPUSH
27021: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27025: LD_VAR 0 4
27029: PPUSH
27030: LD_VAR 0 2
27034: PPUSH
27035: CALL_OW 180
// end else
27039: GO 27154
// if GetControl ( vehicle ) = control_remote then
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 263
27050: PUSH
27051: LD_INT 2
27053: EQUAL
27054: IFFALSE 27115
// begin wait ( 0 0$2 ) ;
27056: LD_INT 70
27058: PPUSH
27059: CALL_OW 67
// if Connect ( vehicle ) then
27063: LD_VAR 0 1
27067: PPUSH
27068: CALL 39178 0 1
27072: IFFALSE 27113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27074: LD_VAR 0 1
27078: PPUSH
27079: LD_EXP 105
27083: PUSH
27084: LD_VAR 0 2
27088: ARRAY
27089: PUSH
27090: LD_INT 3
27092: ARRAY
27093: PPUSH
27094: LD_EXP 105
27098: PUSH
27099: LD_VAR 0 2
27103: ARRAY
27104: PUSH
27105: LD_INT 4
27107: ARRAY
27108: PPUSH
27109: CALL_OW 171
// end else
27113: GO 27154
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27115: LD_VAR 0 1
27119: PPUSH
27120: LD_EXP 105
27124: PUSH
27125: LD_VAR 0 2
27129: ARRAY
27130: PUSH
27131: LD_INT 3
27133: ARRAY
27134: PPUSH
27135: LD_EXP 105
27139: PUSH
27140: LD_VAR 0 2
27144: ARRAY
27145: PUSH
27146: LD_INT 4
27148: ARRAY
27149: PPUSH
27150: CALL_OW 171
// end ; end ;
27154: LD_VAR 0 3
27158: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27159: LD_INT 0
27161: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27162: LD_VAR 0 1
27166: PUSH
27167: LD_INT 250
27169: EQUAL
27170: PUSH
27171: LD_VAR 0 2
27175: PPUSH
27176: CALL_OW 264
27180: PUSH
27181: LD_INT 81
27183: EQUAL
27184: AND
27185: IFFALSE 27206
// MinerPlaceMine ( unit , x , y ) ;
27187: LD_VAR 0 2
27191: PPUSH
27192: LD_VAR 0 4
27196: PPUSH
27197: LD_VAR 0 5
27201: PPUSH
27202: CALL 29591 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27206: LD_VAR 0 1
27210: PUSH
27211: LD_INT 251
27213: EQUAL
27214: PUSH
27215: LD_VAR 0 2
27219: PPUSH
27220: CALL_OW 264
27224: PUSH
27225: LD_INT 81
27227: EQUAL
27228: AND
27229: IFFALSE 27250
// MinerDetonateMine ( unit , x , y ) ;
27231: LD_VAR 0 2
27235: PPUSH
27236: LD_VAR 0 4
27240: PPUSH
27241: LD_VAR 0 5
27245: PPUSH
27246: CALL 29866 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27250: LD_VAR 0 1
27254: PUSH
27255: LD_INT 252
27257: EQUAL
27258: PUSH
27259: LD_VAR 0 2
27263: PPUSH
27264: CALL_OW 264
27268: PUSH
27269: LD_INT 81
27271: EQUAL
27272: AND
27273: IFFALSE 27294
// MinerCreateMinefield ( unit , x , y ) ;
27275: LD_VAR 0 2
27279: PPUSH
27280: LD_VAR 0 4
27284: PPUSH
27285: LD_VAR 0 5
27289: PPUSH
27290: CALL 30283 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27294: LD_VAR 0 1
27298: PUSH
27299: LD_INT 253
27301: EQUAL
27302: PUSH
27303: LD_VAR 0 2
27307: PPUSH
27308: CALL_OW 257
27312: PUSH
27313: LD_INT 5
27315: EQUAL
27316: AND
27317: IFFALSE 27338
// ComBinocular ( unit , x , y ) ;
27319: LD_VAR 0 2
27323: PPUSH
27324: LD_VAR 0 4
27328: PPUSH
27329: LD_VAR 0 5
27333: PPUSH
27334: CALL 30652 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27338: LD_VAR 0 1
27342: PUSH
27343: LD_INT 254
27345: EQUAL
27346: PUSH
27347: LD_VAR 0 2
27351: PPUSH
27352: CALL_OW 264
27356: PUSH
27357: LD_INT 99
27359: EQUAL
27360: AND
27361: PUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 263
27371: PUSH
27372: LD_INT 3
27374: EQUAL
27375: AND
27376: IFFALSE 27392
// HackDestroyVehicle ( unit , selectedUnit ) ;
27378: LD_VAR 0 2
27382: PPUSH
27383: LD_VAR 0 3
27387: PPUSH
27388: CALL 28955 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27392: LD_VAR 0 1
27396: PUSH
27397: LD_INT 255
27399: EQUAL
27400: PUSH
27401: LD_VAR 0 2
27405: PPUSH
27406: CALL_OW 264
27410: PUSH
27411: LD_INT 14
27413: PUSH
27414: LD_INT 53
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: IN
27421: AND
27422: PUSH
27423: LD_VAR 0 4
27427: PPUSH
27428: LD_VAR 0 5
27432: PPUSH
27433: CALL_OW 488
27437: AND
27438: IFFALSE 27462
// CutTreeXYR ( unit , x , y , 12 ) ;
27440: LD_VAR 0 2
27444: PPUSH
27445: LD_VAR 0 4
27449: PPUSH
27450: LD_VAR 0 5
27454: PPUSH
27455: LD_INT 12
27457: PPUSH
27458: CALL 27525 0 4
// if cmd = 256 then
27462: LD_VAR 0 1
27466: PUSH
27467: LD_INT 256
27469: EQUAL
27470: IFFALSE 27491
// SetFactoryWaypoint ( unit , x , y ) ;
27472: LD_VAR 0 2
27476: PPUSH
27477: LD_VAR 0 4
27481: PPUSH
27482: LD_VAR 0 5
27486: PPUSH
27487: CALL 25472 0 3
// if cmd = 257 then
27491: LD_VAR 0 1
27495: PUSH
27496: LD_INT 257
27498: EQUAL
27499: IFFALSE 27520
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27501: LD_VAR 0 2
27505: PPUSH
27506: LD_VAR 0 4
27510: PPUSH
27511: LD_VAR 0 5
27515: PPUSH
27516: CALL 25834 0 3
// end ;
27520: LD_VAR 0 6
27524: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27536: LD_VAR 0 1
27540: NOT
27541: PUSH
27542: LD_VAR 0 2
27546: PPUSH
27547: LD_VAR 0 3
27551: PPUSH
27552: CALL_OW 488
27556: NOT
27557: OR
27558: PUSH
27559: LD_VAR 0 4
27563: NOT
27564: OR
27565: IFFALSE 27569
// exit ;
27567: GO 27909
// list := [ ] ;
27569: LD_ADDR_VAR 0 13
27573: PUSH
27574: EMPTY
27575: ST_TO_ADDR
// if x - r < 0 then
27576: LD_VAR 0 2
27580: PUSH
27581: LD_VAR 0 4
27585: MINUS
27586: PUSH
27587: LD_INT 0
27589: LESS
27590: IFFALSE 27602
// min_x := 0 else
27592: LD_ADDR_VAR 0 7
27596: PUSH
27597: LD_INT 0
27599: ST_TO_ADDR
27600: GO 27618
// min_x := x - r ;
27602: LD_ADDR_VAR 0 7
27606: PUSH
27607: LD_VAR 0 2
27611: PUSH
27612: LD_VAR 0 4
27616: MINUS
27617: ST_TO_ADDR
// if y - r < 0 then
27618: LD_VAR 0 3
27622: PUSH
27623: LD_VAR 0 4
27627: MINUS
27628: PUSH
27629: LD_INT 0
27631: LESS
27632: IFFALSE 27644
// min_y := 0 else
27634: LD_ADDR_VAR 0 8
27638: PUSH
27639: LD_INT 0
27641: ST_TO_ADDR
27642: GO 27660
// min_y := y - r ;
27644: LD_ADDR_VAR 0 8
27648: PUSH
27649: LD_VAR 0 3
27653: PUSH
27654: LD_VAR 0 4
27658: MINUS
27659: ST_TO_ADDR
// max_x := x + r ;
27660: LD_ADDR_VAR 0 9
27664: PUSH
27665: LD_VAR 0 2
27669: PUSH
27670: LD_VAR 0 4
27674: PLUS
27675: ST_TO_ADDR
// max_y := y + r ;
27676: LD_ADDR_VAR 0 10
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_VAR 0 4
27690: PLUS
27691: ST_TO_ADDR
// for _x = min_x to max_x do
27692: LD_ADDR_VAR 0 11
27696: PUSH
27697: DOUBLE
27698: LD_VAR 0 7
27702: DEC
27703: ST_TO_ADDR
27704: LD_VAR 0 9
27708: PUSH
27709: FOR_TO
27710: IFFALSE 27827
// for _y = min_y to max_y do
27712: LD_ADDR_VAR 0 12
27716: PUSH
27717: DOUBLE
27718: LD_VAR 0 8
27722: DEC
27723: ST_TO_ADDR
27724: LD_VAR 0 10
27728: PUSH
27729: FOR_TO
27730: IFFALSE 27823
// begin if not ValidHex ( _x , _y ) then
27732: LD_VAR 0 11
27736: PPUSH
27737: LD_VAR 0 12
27741: PPUSH
27742: CALL_OW 488
27746: NOT
27747: IFFALSE 27751
// continue ;
27749: GO 27729
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27751: LD_VAR 0 11
27755: PPUSH
27756: LD_VAR 0 12
27760: PPUSH
27761: CALL_OW 351
27765: PUSH
27766: LD_VAR 0 11
27770: PPUSH
27771: LD_VAR 0 12
27775: PPUSH
27776: CALL_OW 554
27780: AND
27781: IFFALSE 27821
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27783: LD_ADDR_VAR 0 13
27787: PUSH
27788: LD_VAR 0 13
27792: PPUSH
27793: LD_VAR 0 13
27797: PUSH
27798: LD_INT 1
27800: PLUS
27801: PPUSH
27802: LD_VAR 0 11
27806: PUSH
27807: LD_VAR 0 12
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PPUSH
27816: CALL_OW 2
27820: ST_TO_ADDR
// end ;
27821: GO 27729
27823: POP
27824: POP
27825: GO 27709
27827: POP
27828: POP
// if not list then
27829: LD_VAR 0 13
27833: NOT
27834: IFFALSE 27838
// exit ;
27836: GO 27909
// for i in list do
27838: LD_ADDR_VAR 0 6
27842: PUSH
27843: LD_VAR 0 13
27847: PUSH
27848: FOR_IN
27849: IFFALSE 27907
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27851: LD_VAR 0 1
27855: PPUSH
27856: LD_STRING M
27858: PUSH
27859: LD_VAR 0 6
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PUSH
27868: LD_VAR 0 6
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: PPUSH
27901: CALL_OW 447
27905: GO 27848
27907: POP
27908: POP
// end ;
27909: LD_VAR 0 5
27913: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27914: LD_EXP 108
27918: NOT
27919: IFFALSE 27969
27921: GO 27923
27923: DISABLE
// begin initHack := true ;
27924: LD_ADDR_EXP 108
27928: PUSH
27929: LD_INT 1
27931: ST_TO_ADDR
// hackTanks := [ ] ;
27932: LD_ADDR_EXP 109
27936: PUSH
27937: EMPTY
27938: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27939: LD_ADDR_EXP 110
27943: PUSH
27944: EMPTY
27945: ST_TO_ADDR
// hackLimit := 3 ;
27946: LD_ADDR_EXP 111
27950: PUSH
27951: LD_INT 3
27953: ST_TO_ADDR
// hackDist := 12 ;
27954: LD_ADDR_EXP 112
27958: PUSH
27959: LD_INT 12
27961: ST_TO_ADDR
// hackCounter := [ ] ;
27962: LD_ADDR_EXP 113
27966: PUSH
27967: EMPTY
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27970: LD_EXP 108
27974: PUSH
27975: LD_INT 34
27977: PUSH
27978: LD_INT 99
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: AND
27990: IFFALSE 28243
27992: GO 27994
27994: DISABLE
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
// begin enable ;
27999: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28000: LD_ADDR_VAR 0 1
28004: PUSH
28005: LD_INT 34
28007: PUSH
28008: LD_INT 99
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PPUSH
28015: CALL_OW 69
28019: PUSH
28020: FOR_IN
28021: IFFALSE 28241
// begin if not i in hackTanks then
28023: LD_VAR 0 1
28027: PUSH
28028: LD_EXP 109
28032: IN
28033: NOT
28034: IFFALSE 28117
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28036: LD_ADDR_EXP 109
28040: PUSH
28041: LD_EXP 109
28045: PPUSH
28046: LD_EXP 109
28050: PUSH
28051: LD_INT 1
28053: PLUS
28054: PPUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 1
28064: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28065: LD_ADDR_EXP 110
28069: PUSH
28070: LD_EXP 110
28074: PPUSH
28075: LD_EXP 110
28079: PUSH
28080: LD_INT 1
28082: PLUS
28083: PPUSH
28084: EMPTY
28085: PPUSH
28086: CALL_OW 1
28090: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28091: LD_ADDR_EXP 113
28095: PUSH
28096: LD_EXP 113
28100: PPUSH
28101: LD_EXP 113
28105: PUSH
28106: LD_INT 1
28108: PLUS
28109: PPUSH
28110: EMPTY
28111: PPUSH
28112: CALL_OW 1
28116: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28117: LD_VAR 0 1
28121: PPUSH
28122: CALL_OW 302
28126: NOT
28127: IFFALSE 28140
// begin HackUnlinkAll ( i ) ;
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL 28246 0 1
// continue ;
28138: GO 28020
// end ; HackCheckCapturedStatus ( i ) ;
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL 28689 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28149: LD_ADDR_VAR 0 2
28153: PUSH
28154: LD_INT 81
28156: PUSH
28157: LD_VAR 0 1
28161: PPUSH
28162: CALL_OW 255
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 33
28173: PUSH
28174: LD_INT 3
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 91
28183: PUSH
28184: LD_VAR 0 1
28188: PUSH
28189: LD_EXP 112
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 50
28201: PUSH
28202: EMPTY
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: PPUSH
28211: CALL_OW 69
28215: ST_TO_ADDR
// if not tmp then
28216: LD_VAR 0 2
28220: NOT
28221: IFFALSE 28225
// continue ;
28223: GO 28020
// HackLink ( i , tmp ) ;
28225: LD_VAR 0 1
28229: PPUSH
28230: LD_VAR 0 2
28234: PPUSH
28235: CALL 28382 0 2
// end ;
28239: GO 28020
28241: POP
28242: POP
// end ;
28243: PPOPN 2
28245: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
28250: PPUSH
// if not hack in hackTanks then
28251: LD_VAR 0 1
28255: PUSH
28256: LD_EXP 109
28260: IN
28261: NOT
28262: IFFALSE 28266
// exit ;
28264: GO 28377
// index := GetElementIndex ( hackTanks , hack ) ;
28266: LD_ADDR_VAR 0 4
28270: PUSH
28271: LD_EXP 109
28275: PPUSH
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL 35994 0 2
28285: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28286: LD_EXP 110
28290: PUSH
28291: LD_VAR 0 4
28295: ARRAY
28296: IFFALSE 28377
// begin for i in hackTanksCaptured [ index ] do
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_EXP 110
28307: PUSH
28308: LD_VAR 0 4
28312: ARRAY
28313: PUSH
28314: FOR_IN
28315: IFFALSE 28341
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28317: LD_VAR 0 3
28321: PUSH
28322: LD_INT 1
28324: ARRAY
28325: PPUSH
28326: LD_VAR 0 3
28330: PUSH
28331: LD_INT 2
28333: ARRAY
28334: PPUSH
28335: CALL_OW 235
28339: GO 28314
28341: POP
28342: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28343: LD_ADDR_EXP 110
28347: PUSH
28348: LD_EXP 110
28352: PPUSH
28353: LD_VAR 0 4
28357: PPUSH
28358: EMPTY
28359: PPUSH
28360: CALL_OW 1
28364: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28365: LD_VAR 0 1
28369: PPUSH
28370: LD_INT 0
28372: PPUSH
28373: CALL_OW 505
// end ; end ;
28377: LD_VAR 0 2
28381: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28382: LD_INT 0
28384: PPUSH
28385: PPUSH
28386: PPUSH
// if not hack in hackTanks or not vehicles then
28387: LD_VAR 0 1
28391: PUSH
28392: LD_EXP 109
28396: IN
28397: NOT
28398: PUSH
28399: LD_VAR 0 2
28403: NOT
28404: OR
28405: IFFALSE 28409
// exit ;
28407: GO 28684
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_VAR 0 1
28418: PPUSH
28419: LD_VAR 0 2
28423: PPUSH
28424: LD_INT 1
28426: PPUSH
28427: LD_INT 1
28429: PPUSH
28430: CALL 36644 0 4
28434: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28435: LD_ADDR_VAR 0 5
28439: PUSH
28440: LD_EXP 109
28444: PPUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL 35994 0 2
28454: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28455: LD_EXP 110
28459: PUSH
28460: LD_VAR 0 5
28464: ARRAY
28465: PUSH
28466: LD_EXP 111
28470: LESS
28471: IFFALSE 28660
// begin for i := 1 to vehicles do
28473: LD_ADDR_VAR 0 4
28477: PUSH
28478: DOUBLE
28479: LD_INT 1
28481: DEC
28482: ST_TO_ADDR
28483: LD_VAR 0 2
28487: PUSH
28488: FOR_TO
28489: IFFALSE 28658
// begin if hackTanksCaptured [ index ] = hackLimit then
28491: LD_EXP 110
28495: PUSH
28496: LD_VAR 0 5
28500: ARRAY
28501: PUSH
28502: LD_EXP 111
28506: EQUAL
28507: IFFALSE 28511
// break ;
28509: GO 28658
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28511: LD_ADDR_EXP 113
28515: PUSH
28516: LD_EXP 113
28520: PPUSH
28521: LD_VAR 0 5
28525: PPUSH
28526: LD_EXP 113
28530: PUSH
28531: LD_VAR 0 5
28535: ARRAY
28536: PUSH
28537: LD_INT 1
28539: PLUS
28540: PPUSH
28541: CALL_OW 1
28545: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28546: LD_ADDR_EXP 110
28550: PUSH
28551: LD_EXP 110
28555: PPUSH
28556: LD_VAR 0 5
28560: PUSH
28561: LD_EXP 110
28565: PUSH
28566: LD_VAR 0 5
28570: ARRAY
28571: PUSH
28572: LD_INT 1
28574: PLUS
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PPUSH
28580: LD_VAR 0 2
28584: PUSH
28585: LD_VAR 0 4
28589: ARRAY
28590: PUSH
28591: LD_VAR 0 2
28595: PUSH
28596: LD_VAR 0 4
28600: ARRAY
28601: PPUSH
28602: CALL_OW 255
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL 36209 0 3
28615: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28616: LD_VAR 0 2
28620: PUSH
28621: LD_VAR 0 4
28625: ARRAY
28626: PPUSH
28627: LD_VAR 0 1
28631: PPUSH
28632: CALL_OW 255
28636: PPUSH
28637: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28641: LD_VAR 0 2
28645: PUSH
28646: LD_VAR 0 4
28650: ARRAY
28651: PPUSH
28652: CALL_OW 141
// end ;
28656: GO 28488
28658: POP
28659: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28660: LD_VAR 0 1
28664: PPUSH
28665: LD_EXP 110
28669: PUSH
28670: LD_VAR 0 5
28674: ARRAY
28675: PUSH
28676: LD_INT 0
28678: PLUS
28679: PPUSH
28680: CALL_OW 505
// end ;
28684: LD_VAR 0 3
28688: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28689: LD_INT 0
28691: PPUSH
28692: PPUSH
28693: PPUSH
28694: PPUSH
// if not hack in hackTanks then
28695: LD_VAR 0 1
28699: PUSH
28700: LD_EXP 109
28704: IN
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28950
// index := GetElementIndex ( hackTanks , hack ) ;
28710: LD_ADDR_VAR 0 4
28714: PUSH
28715: LD_EXP 109
28719: PPUSH
28720: LD_VAR 0 1
28724: PPUSH
28725: CALL 35994 0 2
28729: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28730: LD_ADDR_VAR 0 3
28734: PUSH
28735: DOUBLE
28736: LD_EXP 110
28740: PUSH
28741: LD_VAR 0 4
28745: ARRAY
28746: INC
28747: ST_TO_ADDR
28748: LD_INT 1
28750: PUSH
28751: FOR_DOWNTO
28752: IFFALSE 28924
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28754: LD_ADDR_VAR 0 5
28758: PUSH
28759: LD_EXP 110
28763: PUSH
28764: LD_VAR 0 4
28768: ARRAY
28769: PUSH
28770: LD_VAR 0 3
28774: ARRAY
28775: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28776: LD_VAR 0 5
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: PPUSH
28785: CALL_OW 302
28789: NOT
28790: PUSH
28791: LD_VAR 0 5
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: PPUSH
28800: CALL_OW 255
28804: PUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 255
28814: NONEQUAL
28815: OR
28816: IFFALSE 28922
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28818: LD_VAR 0 5
28822: PUSH
28823: LD_INT 1
28825: ARRAY
28826: PPUSH
28827: CALL_OW 305
28831: PUSH
28832: LD_VAR 0 5
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: CALL_OW 255
28845: PUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL_OW 255
28855: EQUAL
28856: AND
28857: IFFALSE 28881
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28859: LD_VAR 0 5
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: PPUSH
28868: LD_VAR 0 5
28872: PUSH
28873: LD_INT 2
28875: ARRAY
28876: PPUSH
28877: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28881: LD_ADDR_EXP 110
28885: PUSH
28886: LD_EXP 110
28890: PPUSH
28891: LD_VAR 0 4
28895: PPUSH
28896: LD_EXP 110
28900: PUSH
28901: LD_VAR 0 4
28905: ARRAY
28906: PPUSH
28907: LD_VAR 0 3
28911: PPUSH
28912: CALL_OW 3
28916: PPUSH
28917: CALL_OW 1
28921: ST_TO_ADDR
// end ; end ;
28922: GO 28751
28924: POP
28925: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28926: LD_VAR 0 1
28930: PPUSH
28931: LD_EXP 110
28935: PUSH
28936: LD_VAR 0 4
28940: ARRAY
28941: PUSH
28942: LD_INT 0
28944: PLUS
28945: PPUSH
28946: CALL_OW 505
// end ;
28950: LD_VAR 0 2
28954: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
28960: PPUSH
// if not hack in hackTanks then
28961: LD_VAR 0 1
28965: PUSH
28966: LD_EXP 109
28970: IN
28971: NOT
28972: IFFALSE 28976
// exit ;
28974: GO 29061
// index := GetElementIndex ( hackTanks , hack ) ;
28976: LD_ADDR_VAR 0 5
28980: PUSH
28981: LD_EXP 109
28985: PPUSH
28986: LD_VAR 0 1
28990: PPUSH
28991: CALL 35994 0 2
28995: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28996: LD_ADDR_VAR 0 4
29000: PUSH
29001: DOUBLE
29002: LD_INT 1
29004: DEC
29005: ST_TO_ADDR
29006: LD_EXP 110
29010: PUSH
29011: LD_VAR 0 5
29015: ARRAY
29016: PUSH
29017: FOR_TO
29018: IFFALSE 29059
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29020: LD_EXP 110
29024: PUSH
29025: LD_VAR 0 5
29029: ARRAY
29030: PUSH
29031: LD_VAR 0 4
29035: ARRAY
29036: PUSH
29037: LD_INT 1
29039: ARRAY
29040: PUSH
29041: LD_VAR 0 2
29045: EQUAL
29046: IFFALSE 29057
// KillUnit ( vehicle ) ;
29048: LD_VAR 0 2
29052: PPUSH
29053: CALL_OW 66
29057: GO 29017
29059: POP
29060: POP
// end ;
29061: LD_VAR 0 3
29065: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29066: LD_EXP 114
29070: NOT
29071: IFFALSE 29106
29073: GO 29075
29075: DISABLE
// begin initMiner := true ;
29076: LD_ADDR_EXP 114
29080: PUSH
29081: LD_INT 1
29083: ST_TO_ADDR
// minersList := [ ] ;
29084: LD_ADDR_EXP 115
29088: PUSH
29089: EMPTY
29090: ST_TO_ADDR
// minerMinesList := [ ] ;
29091: LD_ADDR_EXP 116
29095: PUSH
29096: EMPTY
29097: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29098: LD_ADDR_EXP 117
29102: PUSH
29103: LD_INT 5
29105: ST_TO_ADDR
// end ;
29106: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29107: LD_EXP 114
29111: PUSH
29112: LD_INT 34
29114: PUSH
29115: LD_INT 81
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: AND
29127: IFFALSE 29588
29129: GO 29131
29131: DISABLE
29132: LD_INT 0
29134: PPUSH
29135: PPUSH
29136: PPUSH
29137: PPUSH
// begin enable ;
29138: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29139: LD_ADDR_VAR 0 1
29143: PUSH
29144: LD_INT 34
29146: PUSH
29147: LD_INT 81
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PPUSH
29154: CALL_OW 69
29158: PUSH
29159: FOR_IN
29160: IFFALSE 29232
// begin if not i in minersList then
29162: LD_VAR 0 1
29166: PUSH
29167: LD_EXP 115
29171: IN
29172: NOT
29173: IFFALSE 29230
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29175: LD_ADDR_EXP 115
29179: PUSH
29180: LD_EXP 115
29184: PPUSH
29185: LD_EXP 115
29189: PUSH
29190: LD_INT 1
29192: PLUS
29193: PPUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL_OW 1
29203: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29204: LD_ADDR_EXP 116
29208: PUSH
29209: LD_EXP 116
29213: PPUSH
29214: LD_EXP 116
29218: PUSH
29219: LD_INT 1
29221: PLUS
29222: PPUSH
29223: EMPTY
29224: PPUSH
29225: CALL_OW 1
29229: ST_TO_ADDR
// end end ;
29230: GO 29159
29232: POP
29233: POP
// for i := minerMinesList downto 1 do
29234: LD_ADDR_VAR 0 1
29238: PUSH
29239: DOUBLE
29240: LD_EXP 116
29244: INC
29245: ST_TO_ADDR
29246: LD_INT 1
29248: PUSH
29249: FOR_DOWNTO
29250: IFFALSE 29586
// begin if IsLive ( minersList [ i ] ) then
29252: LD_EXP 115
29256: PUSH
29257: LD_VAR 0 1
29261: ARRAY
29262: PPUSH
29263: CALL_OW 300
29267: IFFALSE 29295
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29269: LD_EXP 115
29273: PUSH
29274: LD_VAR 0 1
29278: ARRAY
29279: PPUSH
29280: LD_EXP 116
29284: PUSH
29285: LD_VAR 0 1
29289: ARRAY
29290: PPUSH
29291: CALL_OW 505
// if not minerMinesList [ i ] then
29295: LD_EXP 116
29299: PUSH
29300: LD_VAR 0 1
29304: ARRAY
29305: NOT
29306: IFFALSE 29310
// continue ;
29308: GO 29249
// for j := minerMinesList [ i ] downto 1 do
29310: LD_ADDR_VAR 0 2
29314: PUSH
29315: DOUBLE
29316: LD_EXP 116
29320: PUSH
29321: LD_VAR 0 1
29325: ARRAY
29326: INC
29327: ST_TO_ADDR
29328: LD_INT 1
29330: PUSH
29331: FOR_DOWNTO
29332: IFFALSE 29582
// begin side := GetSide ( minersList [ i ] ) ;
29334: LD_ADDR_VAR 0 3
29338: PUSH
29339: LD_EXP 115
29343: PUSH
29344: LD_VAR 0 1
29348: ARRAY
29349: PPUSH
29350: CALL_OW 255
29354: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29355: LD_ADDR_VAR 0 4
29359: PUSH
29360: LD_EXP 116
29364: PUSH
29365: LD_VAR 0 1
29369: ARRAY
29370: PUSH
29371: LD_VAR 0 2
29375: ARRAY
29376: PUSH
29377: LD_INT 1
29379: ARRAY
29380: PPUSH
29381: LD_EXP 116
29385: PUSH
29386: LD_VAR 0 1
29390: ARRAY
29391: PUSH
29392: LD_VAR 0 2
29396: ARRAY
29397: PUSH
29398: LD_INT 2
29400: ARRAY
29401: PPUSH
29402: CALL_OW 428
29406: ST_TO_ADDR
// if not tmp then
29407: LD_VAR 0 4
29411: NOT
29412: IFFALSE 29416
// continue ;
29414: GO 29331
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29416: LD_VAR 0 4
29420: PUSH
29421: LD_INT 81
29423: PUSH
29424: LD_VAR 0 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PPUSH
29433: CALL_OW 69
29437: IN
29438: PUSH
29439: LD_EXP 116
29443: PUSH
29444: LD_VAR 0 1
29448: ARRAY
29449: PUSH
29450: LD_VAR 0 2
29454: ARRAY
29455: PUSH
29456: LD_INT 1
29458: ARRAY
29459: PPUSH
29460: LD_EXP 116
29464: PUSH
29465: LD_VAR 0 1
29469: ARRAY
29470: PUSH
29471: LD_VAR 0 2
29475: ARRAY
29476: PUSH
29477: LD_INT 2
29479: ARRAY
29480: PPUSH
29481: CALL_OW 458
29485: AND
29486: IFFALSE 29580
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29488: LD_EXP 116
29492: PUSH
29493: LD_VAR 0 1
29497: ARRAY
29498: PUSH
29499: LD_VAR 0 2
29503: ARRAY
29504: PUSH
29505: LD_INT 1
29507: ARRAY
29508: PPUSH
29509: LD_EXP 116
29513: PUSH
29514: LD_VAR 0 1
29518: ARRAY
29519: PUSH
29520: LD_VAR 0 2
29524: ARRAY
29525: PUSH
29526: LD_INT 2
29528: ARRAY
29529: PPUSH
29530: LD_VAR 0 3
29534: PPUSH
29535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29539: LD_ADDR_EXP 116
29543: PUSH
29544: LD_EXP 116
29548: PPUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: LD_EXP 116
29558: PUSH
29559: LD_VAR 0 1
29563: ARRAY
29564: PPUSH
29565: LD_VAR 0 2
29569: PPUSH
29570: CALL_OW 3
29574: PPUSH
29575: CALL_OW 1
29579: ST_TO_ADDR
// end ; end ;
29580: GO 29331
29582: POP
29583: POP
// end ;
29584: GO 29249
29586: POP
29587: POP
// end ;
29588: PPOPN 4
29590: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29591: LD_INT 0
29593: PPUSH
29594: PPUSH
// result := false ;
29595: LD_ADDR_VAR 0 4
29599: PUSH
29600: LD_INT 0
29602: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29603: LD_VAR 0 1
29607: PPUSH
29608: CALL_OW 264
29612: PUSH
29613: LD_INT 81
29615: EQUAL
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29861
// index := GetElementIndex ( minersList , unit ) ;
29621: LD_ADDR_VAR 0 5
29625: PUSH
29626: LD_EXP 115
29630: PPUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: CALL 35994 0 2
29640: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29641: LD_EXP 116
29645: PUSH
29646: LD_VAR 0 5
29650: ARRAY
29651: PUSH
29652: LD_EXP 117
29656: GREATEREQUAL
29657: IFFALSE 29661
// exit ;
29659: GO 29861
// ComMoveXY ( unit , x , y ) ;
29661: LD_VAR 0 1
29665: PPUSH
29666: LD_VAR 0 2
29670: PPUSH
29671: LD_VAR 0 3
29675: PPUSH
29676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29680: LD_INT 35
29682: PPUSH
29683: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_VAR 0 3
29701: PPUSH
29702: CALL 67349 0 3
29706: NOT
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 314
29717: AND
29718: IFFALSE 29722
// exit ;
29720: GO 29861
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: CALL_OW 428
29736: PUSH
29737: LD_VAR 0 1
29741: EQUAL
29742: PUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 314
29752: NOT
29753: AND
29754: IFFALSE 29680
// PlaySoundXY ( x , y , PlantMine ) ;
29756: LD_VAR 0 2
29760: PPUSH
29761: LD_VAR 0 3
29765: PPUSH
29766: LD_STRING PlantMine
29768: PPUSH
29769: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29773: LD_VAR 0 2
29777: PPUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 255
29792: PPUSH
29793: LD_INT 0
29795: PPUSH
29796: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29800: LD_ADDR_EXP 116
29804: PUSH
29805: LD_EXP 116
29809: PPUSH
29810: LD_VAR 0 5
29814: PUSH
29815: LD_EXP 116
29819: PUSH
29820: LD_VAR 0 5
29824: ARRAY
29825: PUSH
29826: LD_INT 1
29828: PLUS
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: LD_VAR 0 2
29838: PUSH
29839: LD_VAR 0 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PPUSH
29848: CALL 36209 0 3
29852: ST_TO_ADDR
// result := true ;
29853: LD_ADDR_VAR 0 4
29857: PUSH
29858: LD_INT 1
29860: ST_TO_ADDR
// end ;
29861: LD_VAR 0 4
29865: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29866: LD_INT 0
29868: PPUSH
29869: PPUSH
29870: PPUSH
// if not unit in minersList then
29871: LD_VAR 0 1
29875: PUSH
29876: LD_EXP 115
29880: IN
29881: NOT
29882: IFFALSE 29886
// exit ;
29884: GO 30278
// index := GetElementIndex ( minersList , unit ) ;
29886: LD_ADDR_VAR 0 6
29890: PUSH
29891: LD_EXP 115
29895: PPUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL 35994 0 2
29905: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29906: LD_ADDR_VAR 0 5
29910: PUSH
29911: DOUBLE
29912: LD_EXP 116
29916: PUSH
29917: LD_VAR 0 6
29921: ARRAY
29922: INC
29923: ST_TO_ADDR
29924: LD_INT 1
29926: PUSH
29927: FOR_DOWNTO
29928: IFFALSE 30089
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29930: LD_EXP 116
29934: PUSH
29935: LD_VAR 0 6
29939: ARRAY
29940: PUSH
29941: LD_VAR 0 5
29945: ARRAY
29946: PUSH
29947: LD_INT 1
29949: ARRAY
29950: PUSH
29951: LD_VAR 0 2
29955: EQUAL
29956: PUSH
29957: LD_EXP 116
29961: PUSH
29962: LD_VAR 0 6
29966: ARRAY
29967: PUSH
29968: LD_VAR 0 5
29972: ARRAY
29973: PUSH
29974: LD_INT 2
29976: ARRAY
29977: PUSH
29978: LD_VAR 0 3
29982: EQUAL
29983: AND
29984: IFFALSE 30087
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29986: LD_EXP 116
29990: PUSH
29991: LD_VAR 0 6
29995: ARRAY
29996: PUSH
29997: LD_VAR 0 5
30001: ARRAY
30002: PUSH
30003: LD_INT 1
30005: ARRAY
30006: PPUSH
30007: LD_EXP 116
30011: PUSH
30012: LD_VAR 0 6
30016: ARRAY
30017: PUSH
30018: LD_VAR 0 5
30022: ARRAY
30023: PUSH
30024: LD_INT 2
30026: ARRAY
30027: PPUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 255
30037: PPUSH
30038: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30042: LD_ADDR_EXP 116
30046: PUSH
30047: LD_EXP 116
30051: PPUSH
30052: LD_VAR 0 6
30056: PPUSH
30057: LD_EXP 116
30061: PUSH
30062: LD_VAR 0 6
30066: ARRAY
30067: PPUSH
30068: LD_VAR 0 5
30072: PPUSH
30073: CALL_OW 3
30077: PPUSH
30078: CALL_OW 1
30082: ST_TO_ADDR
// exit ;
30083: POP
30084: POP
30085: GO 30278
// end ; end ;
30087: GO 29927
30089: POP
30090: POP
// for i := minerMinesList [ index ] downto 1 do
30091: LD_ADDR_VAR 0 5
30095: PUSH
30096: DOUBLE
30097: LD_EXP 116
30101: PUSH
30102: LD_VAR 0 6
30106: ARRAY
30107: INC
30108: ST_TO_ADDR
30109: LD_INT 1
30111: PUSH
30112: FOR_DOWNTO
30113: IFFALSE 30276
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30115: LD_EXP 116
30119: PUSH
30120: LD_VAR 0 6
30124: ARRAY
30125: PUSH
30126: LD_VAR 0 5
30130: ARRAY
30131: PUSH
30132: LD_INT 1
30134: ARRAY
30135: PPUSH
30136: LD_EXP 116
30140: PUSH
30141: LD_VAR 0 6
30145: ARRAY
30146: PUSH
30147: LD_VAR 0 5
30151: ARRAY
30152: PUSH
30153: LD_INT 2
30155: ARRAY
30156: PPUSH
30157: LD_VAR 0 2
30161: PPUSH
30162: LD_VAR 0 3
30166: PPUSH
30167: CALL_OW 298
30171: PUSH
30172: LD_INT 6
30174: LESS
30175: IFFALSE 30274
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30177: LD_EXP 116
30181: PUSH
30182: LD_VAR 0 6
30186: ARRAY
30187: PUSH
30188: LD_VAR 0 5
30192: ARRAY
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: LD_EXP 116
30202: PUSH
30203: LD_VAR 0 6
30207: ARRAY
30208: PUSH
30209: LD_VAR 0 5
30213: ARRAY
30214: PUSH
30215: LD_INT 2
30217: ARRAY
30218: PPUSH
30219: LD_VAR 0 1
30223: PPUSH
30224: CALL_OW 255
30228: PPUSH
30229: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30233: LD_ADDR_EXP 116
30237: PUSH
30238: LD_EXP 116
30242: PPUSH
30243: LD_VAR 0 6
30247: PPUSH
30248: LD_EXP 116
30252: PUSH
30253: LD_VAR 0 6
30257: ARRAY
30258: PPUSH
30259: LD_VAR 0 5
30263: PPUSH
30264: CALL_OW 3
30268: PPUSH
30269: CALL_OW 1
30273: ST_TO_ADDR
// end ; end ;
30274: GO 30112
30276: POP
30277: POP
// end ;
30278: LD_VAR 0 4
30282: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30283: LD_INT 0
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 264
30303: PUSH
30304: LD_INT 81
30306: EQUAL
30307: NOT
30308: PUSH
30309: LD_VAR 0 1
30313: PUSH
30314: LD_EXP 115
30318: IN
30319: NOT
30320: OR
30321: IFFALSE 30325
// exit ;
30323: GO 30647
// index := GetElementIndex ( minersList , unit ) ;
30325: LD_ADDR_VAR 0 6
30329: PUSH
30330: LD_EXP 115
30334: PPUSH
30335: LD_VAR 0 1
30339: PPUSH
30340: CALL 35994 0 2
30344: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30345: LD_ADDR_VAR 0 8
30349: PUSH
30350: LD_EXP 117
30354: PUSH
30355: LD_EXP 116
30359: PUSH
30360: LD_VAR 0 6
30364: ARRAY
30365: MINUS
30366: ST_TO_ADDR
// if not minesFreeAmount then
30367: LD_VAR 0 8
30371: NOT
30372: IFFALSE 30376
// exit ;
30374: GO 30647
// tmp := [ ] ;
30376: LD_ADDR_VAR 0 7
30380: PUSH
30381: EMPTY
30382: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30383: LD_ADDR_VAR 0 5
30387: PUSH
30388: DOUBLE
30389: LD_INT 1
30391: DEC
30392: ST_TO_ADDR
30393: LD_VAR 0 8
30397: PUSH
30398: FOR_TO
30399: IFFALSE 30594
// begin _d := rand ( 0 , 5 ) ;
30401: LD_ADDR_VAR 0 11
30405: PUSH
30406: LD_INT 0
30408: PPUSH
30409: LD_INT 5
30411: PPUSH
30412: CALL_OW 12
30416: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30417: LD_ADDR_VAR 0 12
30421: PUSH
30422: LD_INT 2
30424: PPUSH
30425: LD_INT 6
30427: PPUSH
30428: CALL_OW 12
30432: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30433: LD_ADDR_VAR 0 9
30437: PUSH
30438: LD_VAR 0 2
30442: PPUSH
30443: LD_VAR 0 11
30447: PPUSH
30448: LD_VAR 0 12
30452: PPUSH
30453: CALL_OW 272
30457: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30458: LD_ADDR_VAR 0 10
30462: PUSH
30463: LD_VAR 0 3
30467: PPUSH
30468: LD_VAR 0 11
30472: PPUSH
30473: LD_VAR 0 12
30477: PPUSH
30478: CALL_OW 273
30482: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30483: LD_VAR 0 9
30487: PPUSH
30488: LD_VAR 0 10
30492: PPUSH
30493: CALL_OW 488
30497: PUSH
30498: LD_VAR 0 9
30502: PUSH
30503: LD_VAR 0 10
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_VAR 0 7
30516: IN
30517: NOT
30518: AND
30519: PUSH
30520: LD_VAR 0 9
30524: PPUSH
30525: LD_VAR 0 10
30529: PPUSH
30530: CALL_OW 458
30534: NOT
30535: AND
30536: IFFALSE 30578
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30538: LD_ADDR_VAR 0 7
30542: PUSH
30543: LD_VAR 0 7
30547: PPUSH
30548: LD_VAR 0 7
30552: PUSH
30553: LD_INT 1
30555: PLUS
30556: PPUSH
30557: LD_VAR 0 9
30561: PUSH
30562: LD_VAR 0 10
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PPUSH
30571: CALL_OW 1
30575: ST_TO_ADDR
30576: GO 30592
// i := i - 1 ;
30578: LD_ADDR_VAR 0 5
30582: PUSH
30583: LD_VAR 0 5
30587: PUSH
30588: LD_INT 1
30590: MINUS
30591: ST_TO_ADDR
// end ;
30592: GO 30398
30594: POP
30595: POP
// for i in tmp do
30596: LD_ADDR_VAR 0 5
30600: PUSH
30601: LD_VAR 0 7
30605: PUSH
30606: FOR_IN
30607: IFFALSE 30645
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30609: LD_VAR 0 1
30613: PPUSH
30614: LD_VAR 0 5
30618: PUSH
30619: LD_INT 1
30621: ARRAY
30622: PPUSH
30623: LD_VAR 0 5
30627: PUSH
30628: LD_INT 2
30630: ARRAY
30631: PPUSH
30632: CALL 29591 0 3
30636: NOT
30637: IFFALSE 30643
// exit ;
30639: POP
30640: POP
30641: GO 30647
30643: GO 30606
30645: POP
30646: POP
// end ;
30647: LD_VAR 0 4
30651: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30652: LD_INT 0
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
// if not GetClass ( unit ) = class_sniper then
30661: LD_VAR 0 1
30665: PPUSH
30666: CALL_OW 257
30670: PUSH
30671: LD_INT 5
30673: EQUAL
30674: NOT
30675: IFFALSE 30679
// exit ;
30677: GO 31067
// dist := 8 ;
30679: LD_ADDR_VAR 0 5
30683: PUSH
30684: LD_INT 8
30686: ST_TO_ADDR
// viewRange := 12 ;
30687: LD_ADDR_VAR 0 7
30691: PUSH
30692: LD_INT 12
30694: ST_TO_ADDR
// side := GetSide ( unit ) ;
30695: LD_ADDR_VAR 0 6
30699: PUSH
30700: LD_VAR 0 1
30704: PPUSH
30705: CALL_OW 255
30709: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30710: LD_INT 61
30712: PPUSH
30713: LD_VAR 0 6
30717: PPUSH
30718: CALL_OW 321
30722: PUSH
30723: LD_INT 2
30725: EQUAL
30726: IFFALSE 30736
// viewRange := 16 ;
30728: LD_ADDR_VAR 0 7
30732: PUSH
30733: LD_INT 16
30735: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30736: LD_VAR 0 1
30740: PPUSH
30741: LD_VAR 0 2
30745: PPUSH
30746: LD_VAR 0 3
30750: PPUSH
30751: CALL_OW 297
30755: PUSH
30756: LD_VAR 0 5
30760: GREATER
30761: IFFALSE 30840
// begin ComMoveXY ( unit , x , y ) ;
30763: LD_VAR 0 1
30767: PPUSH
30768: LD_VAR 0 2
30772: PPUSH
30773: LD_VAR 0 3
30777: PPUSH
30778: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30782: LD_INT 35
30784: PPUSH
30785: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30789: LD_VAR 0 1
30793: PPUSH
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 3
30803: PPUSH
30804: CALL 67349 0 3
30808: NOT
30809: IFFALSE 30813
// exit ;
30811: GO 31067
// until GetDistUnitXY ( unit , x , y ) < dist ;
30813: LD_VAR 0 1
30817: PPUSH
30818: LD_VAR 0 2
30822: PPUSH
30823: LD_VAR 0 3
30827: PPUSH
30828: CALL_OW 297
30832: PUSH
30833: LD_VAR 0 5
30837: LESS
30838: IFFALSE 30782
// end ; ComTurnXY ( unit , x , y ) ;
30840: LD_VAR 0 1
30844: PPUSH
30845: LD_VAR 0 2
30849: PPUSH
30850: LD_VAR 0 3
30854: PPUSH
30855: CALL_OW 118
// wait ( 5 ) ;
30859: LD_INT 5
30861: PPUSH
30862: CALL_OW 67
// _d := GetDir ( unit ) ;
30866: LD_ADDR_VAR 0 10
30870: PUSH
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 254
30880: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30881: LD_ADDR_VAR 0 8
30885: PUSH
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 250
30895: PPUSH
30896: LD_VAR 0 10
30900: PPUSH
30901: LD_VAR 0 5
30905: PPUSH
30906: CALL_OW 272
30910: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30911: LD_ADDR_VAR 0 9
30915: PUSH
30916: LD_VAR 0 1
30920: PPUSH
30921: CALL_OW 251
30925: PPUSH
30926: LD_VAR 0 10
30930: PPUSH
30931: LD_VAR 0 5
30935: PPUSH
30936: CALL_OW 273
30940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30941: LD_VAR 0 8
30945: PPUSH
30946: LD_VAR 0 9
30950: PPUSH
30951: CALL_OW 488
30955: NOT
30956: IFFALSE 30960
// exit ;
30958: GO 31067
// ComAnimCustom ( unit , 1 ) ;
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_INT 1
30967: PPUSH
30968: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30972: LD_VAR 0 8
30976: PPUSH
30977: LD_VAR 0 9
30981: PPUSH
30982: LD_VAR 0 6
30986: PPUSH
30987: LD_VAR 0 7
30991: PPUSH
30992: CALL_OW 330
// repeat wait ( 1 ) ;
30996: LD_INT 1
30998: PPUSH
30999: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31003: LD_VAR 0 1
31007: PPUSH
31008: CALL_OW 316
31012: PUSH
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL_OW 314
31022: OR
31023: PUSH
31024: LD_VAR 0 1
31028: PPUSH
31029: CALL_OW 302
31033: NOT
31034: OR
31035: PUSH
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 301
31045: OR
31046: IFFALSE 30996
// RemoveSeeing ( _x , _y , side ) ;
31048: LD_VAR 0 8
31052: PPUSH
31053: LD_VAR 0 9
31057: PPUSH
31058: LD_VAR 0 6
31062: PPUSH
31063: CALL_OW 331
// end ; end_of_file
31067: LD_VAR 0 4
31071: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
// if exist_mode then
31076: LD_VAR 0 2
31080: IFFALSE 31105
// unit := CreateCharacter ( prefix & ident ) else
31082: LD_ADDR_VAR 0 5
31086: PUSH
31087: LD_VAR 0 3
31091: PUSH
31092: LD_VAR 0 1
31096: STR
31097: PPUSH
31098: CALL_OW 34
31102: ST_TO_ADDR
31103: GO 31120
// unit := NewCharacter ( ident ) ;
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_VAR 0 1
31114: PPUSH
31115: CALL_OW 25
31119: ST_TO_ADDR
// result := unit ;
31120: LD_ADDR_VAR 0 4
31124: PUSH
31125: LD_VAR 0 5
31129: ST_TO_ADDR
// end ;
31130: LD_VAR 0 4
31134: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
// if not side or not nation then
31139: LD_VAR 0 1
31143: NOT
31144: PUSH
31145: LD_VAR 0 2
31149: NOT
31150: OR
31151: IFFALSE 31155
// exit ;
31153: GO 31923
// case nation of nation_american :
31155: LD_VAR 0 2
31159: PUSH
31160: LD_INT 1
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31382
31168: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31169: LD_ADDR_VAR 0 4
31173: PUSH
31174: LD_INT 35
31176: PUSH
31177: LD_INT 45
31179: PUSH
31180: LD_INT 46
31182: PUSH
31183: LD_INT 47
31185: PUSH
31186: LD_INT 82
31188: PUSH
31189: LD_INT 83
31191: PUSH
31192: LD_INT 84
31194: PUSH
31195: LD_INT 85
31197: PUSH
31198: LD_INT 86
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 6
31209: PUSH
31210: LD_INT 15
31212: PUSH
31213: LD_INT 16
31215: PUSH
31216: LD_INT 7
31218: PUSH
31219: LD_INT 12
31221: PUSH
31222: LD_INT 13
31224: PUSH
31225: LD_INT 10
31227: PUSH
31228: LD_INT 14
31230: PUSH
31231: LD_INT 20
31233: PUSH
31234: LD_INT 21
31236: PUSH
31237: LD_INT 22
31239: PUSH
31240: LD_INT 25
31242: PUSH
31243: LD_INT 32
31245: PUSH
31246: LD_INT 27
31248: PUSH
31249: LD_INT 36
31251: PUSH
31252: LD_INT 69
31254: PUSH
31255: LD_INT 39
31257: PUSH
31258: LD_INT 34
31260: PUSH
31261: LD_INT 40
31263: PUSH
31264: LD_INT 48
31266: PUSH
31267: LD_INT 49
31269: PUSH
31270: LD_INT 50
31272: PUSH
31273: LD_INT 51
31275: PUSH
31276: LD_INT 52
31278: PUSH
31279: LD_INT 53
31281: PUSH
31282: LD_INT 54
31284: PUSH
31285: LD_INT 55
31287: PUSH
31288: LD_INT 56
31290: PUSH
31291: LD_INT 57
31293: PUSH
31294: LD_INT 58
31296: PUSH
31297: LD_INT 59
31299: PUSH
31300: LD_INT 60
31302: PUSH
31303: LD_INT 61
31305: PUSH
31306: LD_INT 62
31308: PUSH
31309: LD_INT 80
31311: PUSH
31312: LD_INT 82
31314: PUSH
31315: LD_INT 83
31317: PUSH
31318: LD_INT 84
31320: PUSH
31321: LD_INT 85
31323: PUSH
31324: LD_INT 86
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
31380: GO 31847
31382: LD_INT 2
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31616
31390: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31391: LD_ADDR_VAR 0 4
31395: PUSH
31396: LD_INT 35
31398: PUSH
31399: LD_INT 45
31401: PUSH
31402: LD_INT 46
31404: PUSH
31405: LD_INT 47
31407: PUSH
31408: LD_INT 82
31410: PUSH
31411: LD_INT 83
31413: PUSH
31414: LD_INT 84
31416: PUSH
31417: LD_INT 85
31419: PUSH
31420: LD_INT 87
31422: PUSH
31423: LD_INT 70
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 11
31431: PUSH
31432: LD_INT 3
31434: PUSH
31435: LD_INT 4
31437: PUSH
31438: LD_INT 5
31440: PUSH
31441: LD_INT 6
31443: PUSH
31444: LD_INT 15
31446: PUSH
31447: LD_INT 18
31449: PUSH
31450: LD_INT 7
31452: PUSH
31453: LD_INT 17
31455: PUSH
31456: LD_INT 8
31458: PUSH
31459: LD_INT 20
31461: PUSH
31462: LD_INT 21
31464: PUSH
31465: LD_INT 22
31467: PUSH
31468: LD_INT 72
31470: PUSH
31471: LD_INT 26
31473: PUSH
31474: LD_INT 69
31476: PUSH
31477: LD_INT 39
31479: PUSH
31480: LD_INT 40
31482: PUSH
31483: LD_INT 41
31485: PUSH
31486: LD_INT 42
31488: PUSH
31489: LD_INT 43
31491: PUSH
31492: LD_INT 48
31494: PUSH
31495: LD_INT 49
31497: PUSH
31498: LD_INT 50
31500: PUSH
31501: LD_INT 51
31503: PUSH
31504: LD_INT 52
31506: PUSH
31507: LD_INT 53
31509: PUSH
31510: LD_INT 54
31512: PUSH
31513: LD_INT 55
31515: PUSH
31516: LD_INT 56
31518: PUSH
31519: LD_INT 60
31521: PUSH
31522: LD_INT 61
31524: PUSH
31525: LD_INT 62
31527: PUSH
31528: LD_INT 66
31530: PUSH
31531: LD_INT 67
31533: PUSH
31534: LD_INT 68
31536: PUSH
31537: LD_INT 81
31539: PUSH
31540: LD_INT 82
31542: PUSH
31543: LD_INT 83
31545: PUSH
31546: LD_INT 84
31548: PUSH
31549: LD_INT 85
31551: PUSH
31552: LD_INT 87
31554: PUSH
31555: LD_INT 88
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: ST_TO_ADDR
31614: GO 31847
31616: LD_INT 3
31618: DOUBLE
31619: EQUAL
31620: IFTRUE 31624
31622: GO 31846
31624: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31625: LD_ADDR_VAR 0 4
31629: PUSH
31630: LD_INT 46
31632: PUSH
31633: LD_INT 47
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: LD_INT 82
31644: PUSH
31645: LD_INT 83
31647: PUSH
31648: LD_INT 84
31650: PUSH
31651: LD_INT 85
31653: PUSH
31654: LD_INT 86
31656: PUSH
31657: LD_INT 11
31659: PUSH
31660: LD_INT 9
31662: PUSH
31663: LD_INT 20
31665: PUSH
31666: LD_INT 19
31668: PUSH
31669: LD_INT 21
31671: PUSH
31672: LD_INT 24
31674: PUSH
31675: LD_INT 22
31677: PUSH
31678: LD_INT 25
31680: PUSH
31681: LD_INT 28
31683: PUSH
31684: LD_INT 29
31686: PUSH
31687: LD_INT 30
31689: PUSH
31690: LD_INT 31
31692: PUSH
31693: LD_INT 37
31695: PUSH
31696: LD_INT 38
31698: PUSH
31699: LD_INT 32
31701: PUSH
31702: LD_INT 27
31704: PUSH
31705: LD_INT 33
31707: PUSH
31708: LD_INT 69
31710: PUSH
31711: LD_INT 39
31713: PUSH
31714: LD_INT 34
31716: PUSH
31717: LD_INT 40
31719: PUSH
31720: LD_INT 71
31722: PUSH
31723: LD_INT 23
31725: PUSH
31726: LD_INT 44
31728: PUSH
31729: LD_INT 48
31731: PUSH
31732: LD_INT 49
31734: PUSH
31735: LD_INT 50
31737: PUSH
31738: LD_INT 51
31740: PUSH
31741: LD_INT 52
31743: PUSH
31744: LD_INT 53
31746: PUSH
31747: LD_INT 54
31749: PUSH
31750: LD_INT 55
31752: PUSH
31753: LD_INT 56
31755: PUSH
31756: LD_INT 57
31758: PUSH
31759: LD_INT 58
31761: PUSH
31762: LD_INT 59
31764: PUSH
31765: LD_INT 63
31767: PUSH
31768: LD_INT 64
31770: PUSH
31771: LD_INT 65
31773: PUSH
31774: LD_INT 82
31776: PUSH
31777: LD_INT 83
31779: PUSH
31780: LD_INT 84
31782: PUSH
31783: LD_INT 85
31785: PUSH
31786: LD_INT 86
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: ST_TO_ADDR
31844: GO 31847
31846: POP
// if state > - 1 and state < 3 then
31847: LD_VAR 0 3
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: GREATER
31856: PUSH
31857: LD_VAR 0 3
31861: PUSH
31862: LD_INT 3
31864: LESS
31865: AND
31866: IFFALSE 31923
// for i in result do
31868: LD_ADDR_VAR 0 5
31872: PUSH
31873: LD_VAR 0 4
31877: PUSH
31878: FOR_IN
31879: IFFALSE 31921
// if GetTech ( i , side ) <> state then
31881: LD_VAR 0 5
31885: PPUSH
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 321
31895: PUSH
31896: LD_VAR 0 3
31900: NONEQUAL
31901: IFFALSE 31919
// result := result diff i ;
31903: LD_ADDR_VAR 0 4
31907: PUSH
31908: LD_VAR 0 4
31912: PUSH
31913: LD_VAR 0 5
31917: DIFF
31918: ST_TO_ADDR
31919: GO 31878
31921: POP
31922: POP
// end ;
31923: LD_VAR 0 4
31927: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31928: LD_INT 0
31930: PPUSH
31931: PPUSH
31932: PPUSH
// result := true ;
31933: LD_ADDR_VAR 0 3
31937: PUSH
31938: LD_INT 1
31940: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31941: LD_ADDR_VAR 0 5
31945: PUSH
31946: LD_VAR 0 2
31950: PPUSH
31951: CALL_OW 480
31955: ST_TO_ADDR
// if not tmp then
31956: LD_VAR 0 5
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 32014
// for i in tmp do
31965: LD_ADDR_VAR 0 4
31969: PUSH
31970: LD_VAR 0 5
31974: PUSH
31975: FOR_IN
31976: IFFALSE 32012
// if GetTech ( i , side ) <> state_researched then
31978: LD_VAR 0 4
31982: PPUSH
31983: LD_VAR 0 1
31987: PPUSH
31988: CALL_OW 321
31992: PUSH
31993: LD_INT 2
31995: NONEQUAL
31996: IFFALSE 32010
// begin result := false ;
31998: LD_ADDR_VAR 0 3
32002: PUSH
32003: LD_INT 0
32005: ST_TO_ADDR
// exit ;
32006: POP
32007: POP
32008: GO 32014
// end ;
32010: GO 31975
32012: POP
32013: POP
// end ;
32014: LD_VAR 0 3
32018: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32019: LD_INT 0
32021: PPUSH
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
32029: PPUSH
32030: PPUSH
32031: PPUSH
32032: PPUSH
32033: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32034: LD_VAR 0 1
32038: NOT
32039: PUSH
32040: LD_VAR 0 1
32044: PPUSH
32045: CALL_OW 257
32049: PUSH
32050: LD_INT 9
32052: NONEQUAL
32053: OR
32054: IFFALSE 32058
// exit ;
32056: GO 32631
// side := GetSide ( unit ) ;
32058: LD_ADDR_VAR 0 9
32062: PUSH
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 255
32072: ST_TO_ADDR
// tech_space := tech_spacanom ;
32073: LD_ADDR_VAR 0 12
32077: PUSH
32078: LD_INT 29
32080: ST_TO_ADDR
// tech_time := tech_taurad ;
32081: LD_ADDR_VAR 0 13
32085: PUSH
32086: LD_INT 28
32088: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32089: LD_ADDR_VAR 0 11
32093: PUSH
32094: LD_VAR 0 1
32098: PPUSH
32099: CALL_OW 310
32103: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32104: LD_VAR 0 11
32108: PPUSH
32109: CALL_OW 247
32113: PUSH
32114: LD_INT 2
32116: EQUAL
32117: IFFALSE 32121
// exit ;
32119: GO 32631
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32121: LD_ADDR_VAR 0 8
32125: PUSH
32126: LD_INT 81
32128: PUSH
32129: LD_VAR 0 9
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: LD_INT 21
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PPUSH
32159: CALL_OW 69
32163: ST_TO_ADDR
// if not tmp then
32164: LD_VAR 0 8
32168: NOT
32169: IFFALSE 32173
// exit ;
32171: GO 32631
// if in_unit then
32173: LD_VAR 0 11
32177: IFFALSE 32201
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32179: LD_ADDR_VAR 0 10
32183: PUSH
32184: LD_VAR 0 8
32188: PPUSH
32189: LD_VAR 0 11
32193: PPUSH
32194: CALL_OW 74
32198: ST_TO_ADDR
32199: GO 32221
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32201: LD_ADDR_VAR 0 10
32205: PUSH
32206: LD_VAR 0 8
32210: PPUSH
32211: LD_VAR 0 1
32215: PPUSH
32216: CALL_OW 74
32220: ST_TO_ADDR
// if not enemy then
32221: LD_VAR 0 10
32225: NOT
32226: IFFALSE 32230
// exit ;
32228: GO 32631
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32230: LD_VAR 0 11
32234: PUSH
32235: LD_VAR 0 11
32239: PPUSH
32240: LD_VAR 0 10
32244: PPUSH
32245: CALL_OW 296
32249: PUSH
32250: LD_INT 13
32252: GREATER
32253: AND
32254: PUSH
32255: LD_VAR 0 1
32259: PPUSH
32260: LD_VAR 0 10
32264: PPUSH
32265: CALL_OW 296
32269: PUSH
32270: LD_INT 12
32272: GREATER
32273: OR
32274: IFFALSE 32278
// exit ;
32276: GO 32631
// missile := [ 1 ] ;
32278: LD_ADDR_VAR 0 14
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32289: LD_VAR 0 9
32293: PPUSH
32294: LD_VAR 0 12
32298: PPUSH
32299: CALL_OW 325
32303: IFFALSE 32332
// missile := Replace ( missile , missile + 1 , 2 ) ;
32305: LD_ADDR_VAR 0 14
32309: PUSH
32310: LD_VAR 0 14
32314: PPUSH
32315: LD_VAR 0 14
32319: PUSH
32320: LD_INT 1
32322: PLUS
32323: PPUSH
32324: LD_INT 2
32326: PPUSH
32327: CALL_OW 1
32331: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32332: LD_VAR 0 9
32336: PPUSH
32337: LD_VAR 0 13
32341: PPUSH
32342: CALL_OW 325
32346: PUSH
32347: LD_VAR 0 10
32351: PPUSH
32352: CALL_OW 255
32356: PPUSH
32357: LD_VAR 0 13
32361: PPUSH
32362: CALL_OW 325
32366: NOT
32367: AND
32368: IFFALSE 32397
// missile := Replace ( missile , missile + 1 , 3 ) ;
32370: LD_ADDR_VAR 0 14
32374: PUSH
32375: LD_VAR 0 14
32379: PPUSH
32380: LD_VAR 0 14
32384: PUSH
32385: LD_INT 1
32387: PLUS
32388: PPUSH
32389: LD_INT 3
32391: PPUSH
32392: CALL_OW 1
32396: ST_TO_ADDR
// if missile < 2 then
32397: LD_VAR 0 14
32401: PUSH
32402: LD_INT 2
32404: LESS
32405: IFFALSE 32409
// exit ;
32407: GO 32631
// x := GetX ( enemy ) ;
32409: LD_ADDR_VAR 0 4
32413: PUSH
32414: LD_VAR 0 10
32418: PPUSH
32419: CALL_OW 250
32423: ST_TO_ADDR
// y := GetY ( enemy ) ;
32424: LD_ADDR_VAR 0 5
32428: PUSH
32429: LD_VAR 0 10
32433: PPUSH
32434: CALL_OW 251
32438: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32439: LD_ADDR_VAR 0 6
32443: PUSH
32444: LD_VAR 0 4
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PPUSH
32453: LD_INT 1
32455: PPUSH
32456: CALL_OW 12
32460: PLUS
32461: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32462: LD_ADDR_VAR 0 7
32466: PUSH
32467: LD_VAR 0 5
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PPUSH
32476: LD_INT 1
32478: PPUSH
32479: CALL_OW 12
32483: PLUS
32484: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32485: LD_VAR 0 6
32489: PPUSH
32490: LD_VAR 0 7
32494: PPUSH
32495: CALL_OW 488
32499: NOT
32500: IFFALSE 32522
// begin _x := x ;
32502: LD_ADDR_VAR 0 6
32506: PUSH
32507: LD_VAR 0 4
32511: ST_TO_ADDR
// _y := y ;
32512: LD_ADDR_VAR 0 7
32516: PUSH
32517: LD_VAR 0 5
32521: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_INT 1
32529: PPUSH
32530: LD_VAR 0 14
32534: PPUSH
32535: CALL_OW 12
32539: ST_TO_ADDR
// case i of 1 :
32540: LD_VAR 0 3
32544: PUSH
32545: LD_INT 1
32547: DOUBLE
32548: EQUAL
32549: IFTRUE 32553
32551: GO 32570
32553: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_VAR 0 10
32563: PPUSH
32564: CALL_OW 115
32568: GO 32631
32570: LD_INT 2
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32578
32576: GO 32600
32578: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32579: LD_VAR 0 1
32583: PPUSH
32584: LD_VAR 0 6
32588: PPUSH
32589: LD_VAR 0 7
32593: PPUSH
32594: CALL_OW 153
32598: GO 32631
32600: LD_INT 3
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32608
32606: GO 32630
32608: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32609: LD_VAR 0 1
32613: PPUSH
32614: LD_VAR 0 6
32618: PPUSH
32619: LD_VAR 0 7
32623: PPUSH
32624: CALL_OW 154
32628: GO 32631
32630: POP
// end ;
32631: LD_VAR 0 2
32635: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32636: LD_INT 0
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
// if not unit or not building then
32644: LD_VAR 0 1
32648: NOT
32649: PUSH
32650: LD_VAR 0 2
32654: NOT
32655: OR
32656: IFFALSE 32660
// exit ;
32658: GO 32818
// x := GetX ( building ) ;
32660: LD_ADDR_VAR 0 5
32664: PUSH
32665: LD_VAR 0 2
32669: PPUSH
32670: CALL_OW 250
32674: ST_TO_ADDR
// y := GetY ( building ) ;
32675: LD_ADDR_VAR 0 6
32679: PUSH
32680: LD_VAR 0 2
32684: PPUSH
32685: CALL_OW 251
32689: ST_TO_ADDR
// for i = 0 to 5 do
32690: LD_ADDR_VAR 0 4
32694: PUSH
32695: DOUBLE
32696: LD_INT 0
32698: DEC
32699: ST_TO_ADDR
32700: LD_INT 5
32702: PUSH
32703: FOR_TO
32704: IFFALSE 32816
// begin _x := ShiftX ( x , i , 3 ) ;
32706: LD_ADDR_VAR 0 7
32710: PUSH
32711: LD_VAR 0 5
32715: PPUSH
32716: LD_VAR 0 4
32720: PPUSH
32721: LD_INT 3
32723: PPUSH
32724: CALL_OW 272
32728: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32729: LD_ADDR_VAR 0 8
32733: PUSH
32734: LD_VAR 0 6
32738: PPUSH
32739: LD_VAR 0 4
32743: PPUSH
32744: LD_INT 3
32746: PPUSH
32747: CALL_OW 273
32751: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32752: LD_VAR 0 7
32756: PPUSH
32757: LD_VAR 0 8
32761: PPUSH
32762: CALL_OW 488
32766: NOT
32767: IFFALSE 32771
// continue ;
32769: GO 32703
// if HexInfo ( _x , _y ) = 0 then
32771: LD_VAR 0 7
32775: PPUSH
32776: LD_VAR 0 8
32780: PPUSH
32781: CALL_OW 428
32785: PUSH
32786: LD_INT 0
32788: EQUAL
32789: IFFALSE 32814
// begin ComMoveXY ( unit , _x , _y ) ;
32791: LD_VAR 0 1
32795: PPUSH
32796: LD_VAR 0 7
32800: PPUSH
32801: LD_VAR 0 8
32805: PPUSH
32806: CALL_OW 111
// exit ;
32810: POP
32811: POP
32812: GO 32818
// end ; end ;
32814: GO 32703
32816: POP
32817: POP
// end ;
32818: LD_VAR 0 3
32822: RET
// export function ScanBase ( side , base_area ) ; begin
32823: LD_INT 0
32825: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_VAR 0 2
32835: PPUSH
32836: LD_INT 81
32838: PUSH
32839: LD_VAR 0 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PPUSH
32848: CALL_OW 70
32852: ST_TO_ADDR
// end ;
32853: LD_VAR 0 3
32857: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32858: LD_INT 0
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// result := false ;
32864: LD_ADDR_VAR 0 2
32868: PUSH
32869: LD_INT 0
32871: ST_TO_ADDR
// side := GetSide ( unit ) ;
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 255
32886: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32887: LD_ADDR_VAR 0 4
32891: PUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 248
32901: ST_TO_ADDR
// case nat of 1 :
32902: LD_VAR 0 4
32906: PUSH
32907: LD_INT 1
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32926
32915: POP
// tech := tech_lassight ; 2 :
32916: LD_ADDR_VAR 0 5
32920: PUSH
32921: LD_INT 12
32923: ST_TO_ADDR
32924: GO 32965
32926: LD_INT 2
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 32945
32934: POP
// tech := tech_mortar ; 3 :
32935: LD_ADDR_VAR 0 5
32939: PUSH
32940: LD_INT 41
32942: ST_TO_ADDR
32943: GO 32965
32945: LD_INT 3
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 32964
32953: POP
// tech := tech_bazooka ; end ;
32954: LD_ADDR_VAR 0 5
32958: PUSH
32959: LD_INT 44
32961: ST_TO_ADDR
32962: GO 32965
32964: POP
// if Researched ( side , tech ) then
32965: LD_VAR 0 3
32969: PPUSH
32970: LD_VAR 0 5
32974: PPUSH
32975: CALL_OW 325
32979: IFFALSE 33006
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32981: LD_ADDR_VAR 0 2
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: LD_INT 8
32991: PUSH
32992: LD_INT 9
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: PUSH
33000: LD_VAR 0 4
33004: ARRAY
33005: ST_TO_ADDR
// end ;
33006: LD_VAR 0 2
33010: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33011: LD_INT 0
33013: PPUSH
33014: PPUSH
33015: PPUSH
// if not mines then
33016: LD_VAR 0 2
33020: NOT
33021: IFFALSE 33025
// exit ;
33023: GO 33169
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33025: LD_ADDR_VAR 0 5
33029: PUSH
33030: LD_INT 81
33032: PUSH
33033: LD_VAR 0 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 3
33044: PUSH
33045: LD_INT 21
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PPUSH
33063: CALL_OW 69
33067: ST_TO_ADDR
// for i in mines do
33068: LD_ADDR_VAR 0 4
33072: PUSH
33073: LD_VAR 0 2
33077: PUSH
33078: FOR_IN
33079: IFFALSE 33167
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33081: LD_VAR 0 4
33085: PUSH
33086: LD_INT 1
33088: ARRAY
33089: PPUSH
33090: LD_VAR 0 4
33094: PUSH
33095: LD_INT 2
33097: ARRAY
33098: PPUSH
33099: CALL_OW 458
33103: NOT
33104: IFFALSE 33108
// continue ;
33106: GO 33078
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33108: LD_VAR 0 4
33112: PUSH
33113: LD_INT 1
33115: ARRAY
33116: PPUSH
33117: LD_VAR 0 4
33121: PUSH
33122: LD_INT 2
33124: ARRAY
33125: PPUSH
33126: CALL_OW 428
33130: PUSH
33131: LD_VAR 0 5
33135: IN
33136: IFFALSE 33165
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33138: LD_VAR 0 4
33142: PUSH
33143: LD_INT 1
33145: ARRAY
33146: PPUSH
33147: LD_VAR 0 4
33151: PUSH
33152: LD_INT 2
33154: ARRAY
33155: PPUSH
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 456
// end ;
33165: GO 33078
33167: POP
33168: POP
// end ;
33169: LD_VAR 0 3
33173: RET
// export function Count ( array ) ; var i ; begin
33174: LD_INT 0
33176: PPUSH
33177: PPUSH
// result := 0 ;
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: LD_INT 0
33185: ST_TO_ADDR
// for i in array do
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_VAR 0 1
33195: PUSH
33196: FOR_IN
33197: IFFALSE 33221
// if i then
33199: LD_VAR 0 3
33203: IFFALSE 33219
// result := result + 1 ;
33205: LD_ADDR_VAR 0 2
33209: PUSH
33210: LD_VAR 0 2
33214: PUSH
33215: LD_INT 1
33217: PLUS
33218: ST_TO_ADDR
33219: GO 33196
33221: POP
33222: POP
// end ;
33223: LD_VAR 0 2
33227: RET
// export function IsEmpty ( building ) ; begin
33228: LD_INT 0
33230: PPUSH
// if not building then
33231: LD_VAR 0 1
33235: NOT
33236: IFFALSE 33240
// exit ;
33238: GO 33283
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33240: LD_ADDR_VAR 0 2
33244: PUSH
33245: LD_VAR 0 1
33249: PUSH
33250: LD_INT 22
33252: PUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 255
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 58
33269: PUSH
33270: EMPTY
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PPUSH
33277: CALL_OW 69
33281: IN
33282: ST_TO_ADDR
// end ;
33283: LD_VAR 0 2
33287: RET
// export function IsNotFull ( building ) ; var places ; begin
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
// if not building then
33292: LD_VAR 0 1
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 33472
// result := false ;
33301: LD_ADDR_VAR 0 2
33305: PUSH
33306: LD_INT 0
33308: ST_TO_ADDR
// places := 0 ;
33309: LD_ADDR_VAR 0 3
33313: PUSH
33314: LD_INT 0
33316: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 266
33326: PUSH
33327: LD_INT 0
33329: DOUBLE
33330: EQUAL
33331: IFTRUE 33389
33333: LD_INT 1
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33389
33339: LD_INT 6
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33389
33345: LD_INT 7
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33389
33351: LD_INT 8
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33389
33357: LD_INT 4
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33389
33363: LD_INT 5
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33389
33369: LD_INT 2
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33389
33375: LD_INT 3
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33389
33381: LD_INT 35
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33400
33389: POP
// places := 6 ; b_bunker , b_breastwork :
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_INT 6
33397: ST_TO_ADDR
33398: GO 33445
33400: LD_INT 32
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33414
33406: LD_INT 31
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33414
33412: GO 33425
33414: POP
// places := 1 ; b_control_tower :
33415: LD_ADDR_VAR 0 3
33419: PUSH
33420: LD_INT 1
33422: ST_TO_ADDR
33423: GO 33445
33425: LD_INT 36
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33444
33433: POP
// places := 3 ; end ;
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_INT 3
33441: ST_TO_ADDR
33442: GO 33445
33444: POP
// if places then
33445: LD_VAR 0 3
33449: IFFALSE 33472
// result := UnitsInside ( building ) < places ;
33451: LD_ADDR_VAR 0 2
33455: PUSH
33456: LD_VAR 0 1
33460: PPUSH
33461: CALL_OW 313
33465: PUSH
33466: LD_VAR 0 3
33470: LESS
33471: ST_TO_ADDR
// end ;
33472: LD_VAR 0 2
33476: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33477: LD_INT 0
33479: PPUSH
33480: PPUSH
33481: PPUSH
33482: PPUSH
// tmp := [ ] ;
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: EMPTY
33489: ST_TO_ADDR
// list := [ ] ;
33490: LD_ADDR_VAR 0 5
33494: PUSH
33495: EMPTY
33496: ST_TO_ADDR
// for i = 16 to 25 do
33497: LD_ADDR_VAR 0 4
33501: PUSH
33502: DOUBLE
33503: LD_INT 16
33505: DEC
33506: ST_TO_ADDR
33507: LD_INT 25
33509: PUSH
33510: FOR_TO
33511: IFFALSE 33584
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33513: LD_ADDR_VAR 0 3
33517: PUSH
33518: LD_VAR 0 3
33522: PUSH
33523: LD_INT 22
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 255
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 91
33542: PUSH
33543: LD_VAR 0 1
33547: PUSH
33548: LD_INT 6
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 30
33558: PUSH
33559: LD_VAR 0 4
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: PPUSH
33576: CALL_OW 69
33580: ADD
33581: ST_TO_ADDR
33582: GO 33510
33584: POP
33585: POP
// for i = 1 to tmp do
33586: LD_ADDR_VAR 0 4
33590: PUSH
33591: DOUBLE
33592: LD_INT 1
33594: DEC
33595: ST_TO_ADDR
33596: LD_VAR 0 3
33600: PUSH
33601: FOR_TO
33602: IFFALSE 33690
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33604: LD_ADDR_VAR 0 5
33608: PUSH
33609: LD_VAR 0 5
33613: PUSH
33614: LD_VAR 0 3
33618: PUSH
33619: LD_VAR 0 4
33623: ARRAY
33624: PPUSH
33625: CALL_OW 266
33629: PUSH
33630: LD_VAR 0 3
33634: PUSH
33635: LD_VAR 0 4
33639: ARRAY
33640: PPUSH
33641: CALL_OW 250
33645: PUSH
33646: LD_VAR 0 3
33650: PUSH
33651: LD_VAR 0 4
33655: ARRAY
33656: PPUSH
33657: CALL_OW 251
33661: PUSH
33662: LD_VAR 0 3
33666: PUSH
33667: LD_VAR 0 4
33671: ARRAY
33672: PPUSH
33673: CALL_OW 254
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: PUSH
33684: EMPTY
33685: LIST
33686: ADD
33687: ST_TO_ADDR
33688: GO 33601
33690: POP
33691: POP
// result := list ;
33692: LD_ADDR_VAR 0 2
33696: PUSH
33697: LD_VAR 0 5
33701: ST_TO_ADDR
// end ;
33702: LD_VAR 0 2
33706: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33707: LD_INT 0
33709: PPUSH
33710: PPUSH
33711: PPUSH
33712: PPUSH
33713: PPUSH
33714: PPUSH
33715: PPUSH
// if not factory then
33716: LD_VAR 0 1
33720: NOT
33721: IFFALSE 33725
// exit ;
33723: GO 34318
// if control = control_apeman then
33725: LD_VAR 0 4
33729: PUSH
33730: LD_INT 5
33732: EQUAL
33733: IFFALSE 33842
// begin tmp := UnitsInside ( factory ) ;
33735: LD_ADDR_VAR 0 8
33739: PUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 313
33749: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33750: LD_VAR 0 8
33754: PPUSH
33755: LD_INT 25
33757: PUSH
33758: LD_INT 12
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PPUSH
33765: CALL_OW 72
33769: NOT
33770: IFFALSE 33780
// control := control_manual ;
33772: LD_ADDR_VAR 0 4
33776: PUSH
33777: LD_INT 1
33779: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33780: LD_ADDR_VAR 0 8
33784: PUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL 33477 0 1
33794: ST_TO_ADDR
// if tmp then
33795: LD_VAR 0 8
33799: IFFALSE 33842
// begin for i in tmp do
33801: LD_ADDR_VAR 0 7
33805: PUSH
33806: LD_VAR 0 8
33810: PUSH
33811: FOR_IN
33812: IFFALSE 33840
// if i [ 1 ] = b_ext_radio then
33814: LD_VAR 0 7
33818: PUSH
33819: LD_INT 1
33821: ARRAY
33822: PUSH
33823: LD_INT 22
33825: EQUAL
33826: IFFALSE 33838
// begin control := control_remote ;
33828: LD_ADDR_VAR 0 4
33832: PUSH
33833: LD_INT 2
33835: ST_TO_ADDR
// break ;
33836: GO 33840
// end ;
33838: GO 33811
33840: POP
33841: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: LD_VAR 0 3
33856: PPUSH
33857: LD_VAR 0 4
33861: PPUSH
33862: LD_VAR 0 5
33866: PPUSH
33867: CALL_OW 448
33871: IFFALSE 33906
// begin result := [ chassis , engine , control , weapon ] ;
33873: LD_ADDR_VAR 0 6
33877: PUSH
33878: LD_VAR 0 2
33882: PUSH
33883: LD_VAR 0 3
33887: PUSH
33888: LD_VAR 0 4
33892: PUSH
33893: LD_VAR 0 5
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: ST_TO_ADDR
// exit ;
33904: GO 34318
// end ; _chassis := AvailableChassisList ( factory ) ;
33906: LD_ADDR_VAR 0 9
33910: PUSH
33911: LD_VAR 0 1
33915: PPUSH
33916: CALL_OW 475
33920: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33921: LD_ADDR_VAR 0 11
33925: PUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 476
33935: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33936: LD_ADDR_VAR 0 12
33940: PUSH
33941: LD_VAR 0 1
33945: PPUSH
33946: CALL_OW 477
33950: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33951: LD_ADDR_VAR 0 10
33955: PUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 478
33965: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33966: LD_VAR 0 9
33970: NOT
33971: PUSH
33972: LD_VAR 0 11
33976: NOT
33977: OR
33978: PUSH
33979: LD_VAR 0 12
33983: NOT
33984: OR
33985: PUSH
33986: LD_VAR 0 10
33990: NOT
33991: OR
33992: IFFALSE 34027
// begin result := [ chassis , engine , control , weapon ] ;
33994: LD_ADDR_VAR 0 6
33998: PUSH
33999: LD_VAR 0 2
34003: PUSH
34004: LD_VAR 0 3
34008: PUSH
34009: LD_VAR 0 4
34013: PUSH
34014: LD_VAR 0 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
// exit ;
34025: GO 34318
// end ; if not chassis in _chassis then
34027: LD_VAR 0 2
34031: PUSH
34032: LD_VAR 0 9
34036: IN
34037: NOT
34038: IFFALSE 34064
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34040: LD_ADDR_VAR 0 2
34044: PUSH
34045: LD_VAR 0 9
34049: PUSH
34050: LD_INT 1
34052: PPUSH
34053: LD_VAR 0 9
34057: PPUSH
34058: CALL_OW 12
34062: ARRAY
34063: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34064: LD_VAR 0 2
34068: PPUSH
34069: LD_VAR 0 3
34073: PPUSH
34074: CALL 34323 0 2
34078: NOT
34079: IFFALSE 34138
// repeat engine := _engine [ 1 ] ;
34081: LD_ADDR_VAR 0 3
34085: PUSH
34086: LD_VAR 0 11
34090: PUSH
34091: LD_INT 1
34093: ARRAY
34094: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34095: LD_ADDR_VAR 0 11
34099: PUSH
34100: LD_VAR 0 11
34104: PPUSH
34105: LD_INT 1
34107: PPUSH
34108: CALL_OW 3
34112: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34113: LD_VAR 0 2
34117: PPUSH
34118: LD_VAR 0 3
34122: PPUSH
34123: CALL 34323 0 2
34127: PUSH
34128: LD_VAR 0 11
34132: PUSH
34133: EMPTY
34134: EQUAL
34135: OR
34136: IFFALSE 34081
// if not control in _control then
34138: LD_VAR 0 4
34142: PUSH
34143: LD_VAR 0 12
34147: IN
34148: NOT
34149: IFFALSE 34175
// control := _control [ rand ( 1 , _control ) ] ;
34151: LD_ADDR_VAR 0 4
34155: PUSH
34156: LD_VAR 0 12
34160: PUSH
34161: LD_INT 1
34163: PPUSH
34164: LD_VAR 0 12
34168: PPUSH
34169: CALL_OW 12
34173: ARRAY
34174: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34175: LD_VAR 0 2
34179: PPUSH
34180: LD_VAR 0 5
34184: PPUSH
34185: CALL 34543 0 2
34189: NOT
34190: IFFALSE 34249
// repeat weapon := _weapon [ 1 ] ;
34192: LD_ADDR_VAR 0 5
34196: PUSH
34197: LD_VAR 0 10
34201: PUSH
34202: LD_INT 1
34204: ARRAY
34205: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34206: LD_ADDR_VAR 0 10
34210: PUSH
34211: LD_VAR 0 10
34215: PPUSH
34216: LD_INT 1
34218: PPUSH
34219: CALL_OW 3
34223: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34224: LD_VAR 0 2
34228: PPUSH
34229: LD_VAR 0 5
34233: PPUSH
34234: CALL 34543 0 2
34238: PUSH
34239: LD_VAR 0 10
34243: PUSH
34244: EMPTY
34245: EQUAL
34246: OR
34247: IFFALSE 34192
// result := [ ] ;
34249: LD_ADDR_VAR 0 6
34253: PUSH
34254: EMPTY
34255: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_VAR 0 2
34265: PPUSH
34266: LD_VAR 0 3
34270: PPUSH
34271: LD_VAR 0 4
34275: PPUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: CALL_OW 448
34285: IFFALSE 34318
// result := [ chassis , engine , control , weapon ] ;
34287: LD_ADDR_VAR 0 6
34291: PUSH
34292: LD_VAR 0 2
34296: PUSH
34297: LD_VAR 0 3
34301: PUSH
34302: LD_VAR 0 4
34306: PUSH
34307: LD_VAR 0 5
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
// end ;
34318: LD_VAR 0 6
34322: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34323: LD_INT 0
34325: PPUSH
// if not chassis or not engine then
34326: LD_VAR 0 1
34330: NOT
34331: PUSH
34332: LD_VAR 0 2
34336: NOT
34337: OR
34338: IFFALSE 34342
// exit ;
34340: GO 34538
// case engine of engine_solar :
34342: LD_VAR 0 2
34346: PUSH
34347: LD_INT 2
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34393
34355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_INT 11
34363: PUSH
34364: LD_INT 12
34366: PUSH
34367: LD_INT 13
34369: PUSH
34370: LD_INT 14
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 3
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
34391: GO 34522
34393: LD_INT 1
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34401
34399: GO 34463
34401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: LD_INT 11
34409: PUSH
34410: LD_INT 12
34412: PUSH
34413: LD_INT 13
34415: PUSH
34416: LD_INT 14
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 5
34433: PUSH
34434: LD_INT 21
34436: PUSH
34437: LD_INT 23
34439: PUSH
34440: LD_INT 22
34442: PUSH
34443: LD_INT 24
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
34461: GO 34522
34463: LD_INT 3
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 34521
34471: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34472: LD_ADDR_VAR 0 3
34476: PUSH
34477: LD_INT 13
34479: PUSH
34480: LD_INT 14
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: LD_INT 3
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: LD_INT 5
34494: PUSH
34495: LD_INT 21
34497: PUSH
34498: LD_INT 22
34500: PUSH
34501: LD_INT 23
34503: PUSH
34504: LD_INT 24
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
34519: GO 34522
34521: POP
// result := ( chassis in result ) ;
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_VAR 0 1
34531: PUSH
34532: LD_VAR 0 3
34536: IN
34537: ST_TO_ADDR
// end ;
34538: LD_VAR 0 3
34542: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34543: LD_INT 0
34545: PPUSH
// if not chassis or not weapon then
34546: LD_VAR 0 1
34550: NOT
34551: PUSH
34552: LD_VAR 0 2
34556: NOT
34557: OR
34558: IFFALSE 34562
// exit ;
34560: GO 35622
// case weapon of us_machine_gun :
34562: LD_VAR 0 2
34566: PUSH
34567: LD_INT 2
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34575
34573: GO 34605
34575: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34576: LD_ADDR_VAR 0 3
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: ST_TO_ADDR
34603: GO 35606
34605: LD_INT 3
34607: DOUBLE
34608: EQUAL
34609: IFTRUE 34613
34611: GO 34643
34613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34614: LD_ADDR_VAR 0 3
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 3
34627: PUSH
34628: LD_INT 4
34630: PUSH
34631: LD_INT 5
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: ST_TO_ADDR
34641: GO 35606
34643: LD_INT 11
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34651
34649: GO 34681
34651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: LD_INT 4
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
34679: GO 35606
34681: LD_INT 4
34683: DOUBLE
34684: EQUAL
34685: IFTRUE 34689
34687: GO 34715
34689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34690: LD_ADDR_VAR 0 3
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 3
34700: PUSH
34701: LD_INT 4
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
34713: GO 35606
34715: LD_INT 5
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34749
34723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: LD_INT 4
34737: PUSH
34738: LD_INT 5
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: ST_TO_ADDR
34747: GO 35606
34749: LD_INT 9
34751: DOUBLE
34752: EQUAL
34753: IFTRUE 34757
34755: GO 34783
34757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34758: LD_ADDR_VAR 0 3
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 3
34768: PUSH
34769: LD_INT 4
34771: PUSH
34772: LD_INT 5
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
34781: GO 35606
34783: LD_INT 7
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 34817
34791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34792: LD_ADDR_VAR 0 3
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 4
34805: PUSH
34806: LD_INT 5
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
34815: GO 35606
34817: LD_INT 12
34819: DOUBLE
34820: EQUAL
34821: IFTRUE 34825
34823: GO 34851
34825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34826: LD_ADDR_VAR 0 3
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 5
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: ST_TO_ADDR
34849: GO 35606
34851: LD_INT 13
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34885
34859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34860: LD_ADDR_VAR 0 3
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 4
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: ST_TO_ADDR
34883: GO 35606
34885: LD_INT 14
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34911
34893: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34894: LD_ADDR_VAR 0 3
34898: PUSH
34899: LD_INT 4
34901: PUSH
34902: LD_INT 5
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: ST_TO_ADDR
34909: GO 35606
34911: LD_INT 6
34913: DOUBLE
34914: EQUAL
34915: IFTRUE 34919
34917: GO 34937
34919: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34920: LD_ADDR_VAR 0 3
34924: PUSH
34925: LD_INT 4
34927: PUSH
34928: LD_INT 5
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: ST_TO_ADDR
34935: GO 35606
34937: LD_INT 10
34939: DOUBLE
34940: EQUAL
34941: IFTRUE 34945
34943: GO 34963
34945: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34946: LD_ADDR_VAR 0 3
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: ST_TO_ADDR
34961: GO 35606
34963: LD_INT 22
34965: DOUBLE
34966: EQUAL
34967: IFTRUE 34971
34969: GO 34997
34971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34972: LD_ADDR_VAR 0 3
34976: PUSH
34977: LD_INT 11
34979: PUSH
34980: LD_INT 12
34982: PUSH
34983: LD_INT 13
34985: PUSH
34986: LD_INT 14
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
34995: GO 35606
34997: LD_INT 23
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35005
35003: GO 35031
35005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35006: LD_ADDR_VAR 0 3
35010: PUSH
35011: LD_INT 11
35013: PUSH
35014: LD_INT 12
35016: PUSH
35017: LD_INT 13
35019: PUSH
35020: LD_INT 14
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
35029: GO 35606
35031: LD_INT 24
35033: DOUBLE
35034: EQUAL
35035: IFTRUE 35039
35037: GO 35065
35039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35040: LD_ADDR_VAR 0 3
35044: PUSH
35045: LD_INT 11
35047: PUSH
35048: LD_INT 12
35050: PUSH
35051: LD_INT 13
35053: PUSH
35054: LD_INT 14
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: ST_TO_ADDR
35063: GO 35606
35065: LD_INT 30
35067: DOUBLE
35068: EQUAL
35069: IFTRUE 35073
35071: GO 35099
35073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35074: LD_ADDR_VAR 0 3
35078: PUSH
35079: LD_INT 11
35081: PUSH
35082: LD_INT 12
35084: PUSH
35085: LD_INT 13
35087: PUSH
35088: LD_INT 14
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
35097: GO 35606
35099: LD_INT 25
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35125
35107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 13
35115: PUSH
35116: LD_INT 14
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: ST_TO_ADDR
35123: GO 35606
35125: LD_INT 27
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35133
35131: GO 35151
35133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_INT 13
35141: PUSH
35142: LD_INT 14
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: ST_TO_ADDR
35149: GO 35606
35151: LD_INT 92
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35159
35157: GO 35185
35159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35160: LD_ADDR_VAR 0 3
35164: PUSH
35165: LD_INT 11
35167: PUSH
35168: LD_INT 12
35170: PUSH
35171: LD_INT 13
35173: PUSH
35174: LD_INT 14
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: ST_TO_ADDR
35183: GO 35606
35185: LD_INT 28
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35211
35193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 13
35201: PUSH
35202: LD_INT 14
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: ST_TO_ADDR
35209: GO 35606
35211: LD_INT 29
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35219
35217: GO 35237
35219: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_INT 13
35227: PUSH
35228: LD_INT 14
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: ST_TO_ADDR
35235: GO 35606
35237: LD_INT 31
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35245
35243: GO 35263
35245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_INT 13
35253: PUSH
35254: LD_INT 14
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: ST_TO_ADDR
35261: GO 35606
35263: LD_INT 26
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35289
35271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35272: LD_ADDR_VAR 0 3
35276: PUSH
35277: LD_INT 13
35279: PUSH
35280: LD_INT 14
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: ST_TO_ADDR
35287: GO 35606
35289: LD_INT 42
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35297
35295: GO 35323
35297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35298: LD_ADDR_VAR 0 3
35302: PUSH
35303: LD_INT 21
35305: PUSH
35306: LD_INT 22
35308: PUSH
35309: LD_INT 23
35311: PUSH
35312: LD_INT 24
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
35321: GO 35606
35323: LD_INT 43
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35357
35331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_INT 21
35339: PUSH
35340: LD_INT 22
35342: PUSH
35343: LD_INT 23
35345: PUSH
35346: LD_INT 24
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: ST_TO_ADDR
35355: GO 35606
35357: LD_INT 44
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35391
35365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: LD_INT 21
35373: PUSH
35374: LD_INT 22
35376: PUSH
35377: LD_INT 23
35379: PUSH
35380: LD_INT 24
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
35389: GO 35606
35391: LD_INT 45
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35425
35399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_INT 21
35407: PUSH
35408: LD_INT 22
35410: PUSH
35411: LD_INT 23
35413: PUSH
35414: LD_INT 24
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
35423: GO 35606
35425: LD_INT 49
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35459
35433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 21
35441: PUSH
35442: LD_INT 22
35444: PUSH
35445: LD_INT 23
35447: PUSH
35448: LD_INT 24
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
35457: GO 35606
35459: LD_INT 51
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35467
35465: GO 35493
35467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: LD_INT 21
35475: PUSH
35476: LD_INT 22
35478: PUSH
35479: LD_INT 23
35481: PUSH
35482: LD_INT 24
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 35606
35493: LD_INT 52
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35527
35501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 21
35509: PUSH
35510: LD_INT 22
35512: PUSH
35513: LD_INT 23
35515: PUSH
35516: LD_INT 24
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
35525: GO 35606
35527: LD_INT 53
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35535
35533: GO 35553
35535: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_INT 23
35543: PUSH
35544: LD_INT 24
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: ST_TO_ADDR
35551: GO 35606
35553: LD_INT 46
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 35579
35561: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_INT 23
35569: PUSH
35570: LD_INT 24
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: ST_TO_ADDR
35577: GO 35606
35579: LD_INT 47
35581: DOUBLE
35582: EQUAL
35583: IFTRUE 35587
35585: GO 35605
35587: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35588: LD_ADDR_VAR 0 3
35592: PUSH
35593: LD_INT 23
35595: PUSH
35596: LD_INT 24
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: ST_TO_ADDR
35603: GO 35606
35605: POP
// result := ( chassis in result ) ;
35606: LD_ADDR_VAR 0 3
35610: PUSH
35611: LD_VAR 0 1
35615: PUSH
35616: LD_VAR 0 3
35620: IN
35621: ST_TO_ADDR
// end ;
35622: LD_VAR 0 3
35626: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35627: LD_INT 0
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
// result := array ;
35636: LD_ADDR_VAR 0 5
35640: PUSH
35641: LD_VAR 0 1
35645: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35646: LD_VAR 0 1
35650: NOT
35651: PUSH
35652: LD_VAR 0 2
35656: NOT
35657: OR
35658: PUSH
35659: LD_VAR 0 3
35663: NOT
35664: OR
35665: PUSH
35666: LD_VAR 0 2
35670: PUSH
35671: LD_VAR 0 1
35675: GREATER
35676: OR
35677: PUSH
35678: LD_VAR 0 3
35682: PUSH
35683: LD_VAR 0 1
35687: GREATER
35688: OR
35689: IFFALSE 35693
// exit ;
35691: GO 35989
// if direction then
35693: LD_VAR 0 4
35697: IFFALSE 35761
// begin d := 1 ;
35699: LD_ADDR_VAR 0 9
35703: PUSH
35704: LD_INT 1
35706: ST_TO_ADDR
// if i_from > i_to then
35707: LD_VAR 0 2
35711: PUSH
35712: LD_VAR 0 3
35716: GREATER
35717: IFFALSE 35743
// length := ( array - i_from ) + i_to else
35719: LD_ADDR_VAR 0 11
35723: PUSH
35724: LD_VAR 0 1
35728: PUSH
35729: LD_VAR 0 2
35733: MINUS
35734: PUSH
35735: LD_VAR 0 3
35739: PLUS
35740: ST_TO_ADDR
35741: GO 35759
// length := i_to - i_from ;
35743: LD_ADDR_VAR 0 11
35747: PUSH
35748: LD_VAR 0 3
35752: PUSH
35753: LD_VAR 0 2
35757: MINUS
35758: ST_TO_ADDR
// end else
35759: GO 35822
// begin d := - 1 ;
35761: LD_ADDR_VAR 0 9
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: ST_TO_ADDR
// if i_from > i_to then
35770: LD_VAR 0 2
35774: PUSH
35775: LD_VAR 0 3
35779: GREATER
35780: IFFALSE 35800
// length := i_from - i_to else
35782: LD_ADDR_VAR 0 11
35786: PUSH
35787: LD_VAR 0 2
35791: PUSH
35792: LD_VAR 0 3
35796: MINUS
35797: ST_TO_ADDR
35798: GO 35822
// length := ( array - i_to ) + i_from ;
35800: LD_ADDR_VAR 0 11
35804: PUSH
35805: LD_VAR 0 1
35809: PUSH
35810: LD_VAR 0 3
35814: MINUS
35815: PUSH
35816: LD_VAR 0 2
35820: PLUS
35821: ST_TO_ADDR
// end ; if not length then
35822: LD_VAR 0 11
35826: NOT
35827: IFFALSE 35831
// exit ;
35829: GO 35989
// tmp := array ;
35831: LD_ADDR_VAR 0 10
35835: PUSH
35836: LD_VAR 0 1
35840: ST_TO_ADDR
// for i = 1 to length do
35841: LD_ADDR_VAR 0 6
35845: PUSH
35846: DOUBLE
35847: LD_INT 1
35849: DEC
35850: ST_TO_ADDR
35851: LD_VAR 0 11
35855: PUSH
35856: FOR_TO
35857: IFFALSE 35977
// begin for j = 1 to array do
35859: LD_ADDR_VAR 0 7
35863: PUSH
35864: DOUBLE
35865: LD_INT 1
35867: DEC
35868: ST_TO_ADDR
35869: LD_VAR 0 1
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35963
// begin k := j + d ;
35877: LD_ADDR_VAR 0 8
35881: PUSH
35882: LD_VAR 0 7
35886: PUSH
35887: LD_VAR 0 9
35891: PLUS
35892: ST_TO_ADDR
// if k > array then
35893: LD_VAR 0 8
35897: PUSH
35898: LD_VAR 0 1
35902: GREATER
35903: IFFALSE 35913
// k := 1 ;
35905: LD_ADDR_VAR 0 8
35909: PUSH
35910: LD_INT 1
35912: ST_TO_ADDR
// if not k then
35913: LD_VAR 0 8
35917: NOT
35918: IFFALSE 35930
// k := array ;
35920: LD_ADDR_VAR 0 8
35924: PUSH
35925: LD_VAR 0 1
35929: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35930: LD_ADDR_VAR 0 10
35934: PUSH
35935: LD_VAR 0 10
35939: PPUSH
35940: LD_VAR 0 8
35944: PPUSH
35945: LD_VAR 0 1
35949: PUSH
35950: LD_VAR 0 7
35954: ARRAY
35955: PPUSH
35956: CALL_OW 1
35960: ST_TO_ADDR
// end ;
35961: GO 35874
35963: POP
35964: POP
// array := tmp ;
35965: LD_ADDR_VAR 0 1
35969: PUSH
35970: LD_VAR 0 10
35974: ST_TO_ADDR
// end ;
35975: GO 35856
35977: POP
35978: POP
// result := array ;
35979: LD_ADDR_VAR 0 5
35983: PUSH
35984: LD_VAR 0 1
35988: ST_TO_ADDR
// end ;
35989: LD_VAR 0 5
35993: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35994: LD_INT 0
35996: PPUSH
35997: PPUSH
// result := 0 ;
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_INT 0
36005: ST_TO_ADDR
// if not array or not value in array then
36006: LD_VAR 0 1
36010: NOT
36011: PUSH
36012: LD_VAR 0 2
36016: PUSH
36017: LD_VAR 0 1
36021: IN
36022: NOT
36023: OR
36024: IFFALSE 36028
// exit ;
36026: GO 36082
// for i = 1 to array do
36028: LD_ADDR_VAR 0 4
36032: PUSH
36033: DOUBLE
36034: LD_INT 1
36036: DEC
36037: ST_TO_ADDR
36038: LD_VAR 0 1
36042: PUSH
36043: FOR_TO
36044: IFFALSE 36080
// if value = array [ i ] then
36046: LD_VAR 0 2
36050: PUSH
36051: LD_VAR 0 1
36055: PUSH
36056: LD_VAR 0 4
36060: ARRAY
36061: EQUAL
36062: IFFALSE 36078
// begin result := i ;
36064: LD_ADDR_VAR 0 3
36068: PUSH
36069: LD_VAR 0 4
36073: ST_TO_ADDR
// exit ;
36074: POP
36075: POP
36076: GO 36082
// end ;
36078: GO 36043
36080: POP
36081: POP
// end ;
36082: LD_VAR 0 3
36086: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36087: LD_INT 0
36089: PPUSH
// vc_chassis := chassis ;
36090: LD_ADDR_OWVAR 37
36094: PUSH
36095: LD_VAR 0 1
36099: ST_TO_ADDR
// vc_engine := engine ;
36100: LD_ADDR_OWVAR 39
36104: PUSH
36105: LD_VAR 0 2
36109: ST_TO_ADDR
// vc_control := control ;
36110: LD_ADDR_OWVAR 38
36114: PUSH
36115: LD_VAR 0 3
36119: ST_TO_ADDR
// vc_weapon := weapon ;
36120: LD_ADDR_OWVAR 40
36124: PUSH
36125: LD_VAR 0 4
36129: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36130: LD_ADDR_OWVAR 41
36134: PUSH
36135: LD_VAR 0 5
36139: ST_TO_ADDR
// end ;
36140: LD_VAR 0 6
36144: RET
// export function WantPlant ( unit ) ; var task ; begin
36145: LD_INT 0
36147: PPUSH
36148: PPUSH
// result := false ;
36149: LD_ADDR_VAR 0 2
36153: PUSH
36154: LD_INT 0
36156: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36157: LD_ADDR_VAR 0 3
36161: PUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 437
36171: ST_TO_ADDR
// if task then
36172: LD_VAR 0 3
36176: IFFALSE 36204
// if task [ 1 ] [ 1 ] = p then
36178: LD_VAR 0 3
36182: PUSH
36183: LD_INT 1
36185: ARRAY
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PUSH
36191: LD_STRING p
36193: EQUAL
36194: IFFALSE 36204
// result := true ;
36196: LD_ADDR_VAR 0 2
36200: PUSH
36201: LD_INT 1
36203: ST_TO_ADDR
// end ;
36204: LD_VAR 0 2
36208: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36209: LD_INT 0
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
// if pos < 1 then
36215: LD_VAR 0 2
36219: PUSH
36220: LD_INT 1
36222: LESS
36223: IFFALSE 36227
// exit ;
36225: GO 36530
// if pos = 1 then
36227: LD_VAR 0 2
36231: PUSH
36232: LD_INT 1
36234: EQUAL
36235: IFFALSE 36268
// result := Replace ( arr , pos [ 1 ] , value ) else
36237: LD_ADDR_VAR 0 4
36241: PUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: LD_VAR 0 2
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: LD_VAR 0 3
36260: PPUSH
36261: CALL_OW 1
36265: ST_TO_ADDR
36266: GO 36530
// begin tmp := arr ;
36268: LD_ADDR_VAR 0 6
36272: PUSH
36273: LD_VAR 0 1
36277: ST_TO_ADDR
// s_arr := [ tmp ] ;
36278: LD_ADDR_VAR 0 7
36282: PUSH
36283: LD_VAR 0 6
36287: PUSH
36288: EMPTY
36289: LIST
36290: ST_TO_ADDR
// for i = 1 to pos - 1 do
36291: LD_ADDR_VAR 0 5
36295: PUSH
36296: DOUBLE
36297: LD_INT 1
36299: DEC
36300: ST_TO_ADDR
36301: LD_VAR 0 2
36305: PUSH
36306: LD_INT 1
36308: MINUS
36309: PUSH
36310: FOR_TO
36311: IFFALSE 36356
// begin tmp := tmp [ pos [ i ] ] ;
36313: LD_ADDR_VAR 0 6
36317: PUSH
36318: LD_VAR 0 6
36322: PUSH
36323: LD_VAR 0 2
36327: PUSH
36328: LD_VAR 0 5
36332: ARRAY
36333: ARRAY
36334: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36335: LD_ADDR_VAR 0 7
36339: PUSH
36340: LD_VAR 0 7
36344: PUSH
36345: LD_VAR 0 6
36349: PUSH
36350: EMPTY
36351: LIST
36352: ADD
36353: ST_TO_ADDR
// end ;
36354: GO 36310
36356: POP
36357: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36358: LD_ADDR_VAR 0 6
36362: PUSH
36363: LD_VAR 0 6
36367: PPUSH
36368: LD_VAR 0 2
36372: PUSH
36373: LD_VAR 0 2
36377: ARRAY
36378: PPUSH
36379: LD_VAR 0 3
36383: PPUSH
36384: CALL_OW 1
36388: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36389: LD_ADDR_VAR 0 7
36393: PUSH
36394: LD_VAR 0 7
36398: PPUSH
36399: LD_VAR 0 7
36403: PPUSH
36404: LD_VAR 0 6
36408: PPUSH
36409: CALL_OW 1
36413: ST_TO_ADDR
// for i = s_arr downto 2 do
36414: LD_ADDR_VAR 0 5
36418: PUSH
36419: DOUBLE
36420: LD_VAR 0 7
36424: INC
36425: ST_TO_ADDR
36426: LD_INT 2
36428: PUSH
36429: FOR_DOWNTO
36430: IFFALSE 36514
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36432: LD_ADDR_VAR 0 6
36436: PUSH
36437: LD_VAR 0 7
36441: PUSH
36442: LD_VAR 0 5
36446: PUSH
36447: LD_INT 1
36449: MINUS
36450: ARRAY
36451: PPUSH
36452: LD_VAR 0 2
36456: PUSH
36457: LD_VAR 0 5
36461: PUSH
36462: LD_INT 1
36464: MINUS
36465: ARRAY
36466: PPUSH
36467: LD_VAR 0 7
36471: PUSH
36472: LD_VAR 0 5
36476: ARRAY
36477: PPUSH
36478: CALL_OW 1
36482: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36483: LD_ADDR_VAR 0 7
36487: PUSH
36488: LD_VAR 0 7
36492: PPUSH
36493: LD_VAR 0 5
36497: PUSH
36498: LD_INT 1
36500: MINUS
36501: PPUSH
36502: LD_VAR 0 6
36506: PPUSH
36507: CALL_OW 1
36511: ST_TO_ADDR
// end ;
36512: GO 36429
36514: POP
36515: POP
// result := s_arr [ 1 ] ;
36516: LD_ADDR_VAR 0 4
36520: PUSH
36521: LD_VAR 0 7
36525: PUSH
36526: LD_INT 1
36528: ARRAY
36529: ST_TO_ADDR
// end ; end ;
36530: LD_VAR 0 4
36534: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36535: LD_INT 0
36537: PPUSH
36538: PPUSH
// if not list then
36539: LD_VAR 0 1
36543: NOT
36544: IFFALSE 36548
// exit ;
36546: GO 36639
// i := list [ pos1 ] ;
36548: LD_ADDR_VAR 0 5
36552: PUSH
36553: LD_VAR 0 1
36557: PUSH
36558: LD_VAR 0 2
36562: ARRAY
36563: ST_TO_ADDR
// if not i then
36564: LD_VAR 0 5
36568: NOT
36569: IFFALSE 36573
// exit ;
36571: GO 36639
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36573: LD_ADDR_VAR 0 1
36577: PUSH
36578: LD_VAR 0 1
36582: PPUSH
36583: LD_VAR 0 2
36587: PPUSH
36588: LD_VAR 0 1
36592: PUSH
36593: LD_VAR 0 3
36597: ARRAY
36598: PPUSH
36599: CALL_OW 1
36603: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36604: LD_ADDR_VAR 0 1
36608: PUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: LD_VAR 0 3
36618: PPUSH
36619: LD_VAR 0 5
36623: PPUSH
36624: CALL_OW 1
36628: ST_TO_ADDR
// result := list ;
36629: LD_ADDR_VAR 0 4
36633: PUSH
36634: LD_VAR 0 1
36638: ST_TO_ADDR
// end ;
36639: LD_VAR 0 4
36643: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36644: LD_INT 0
36646: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36647: LD_ADDR_VAR 0 5
36651: PUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 250
36661: PPUSH
36662: LD_VAR 0 1
36666: PPUSH
36667: CALL_OW 251
36671: PPUSH
36672: LD_VAR 0 2
36676: PPUSH
36677: LD_VAR 0 3
36681: PPUSH
36682: LD_VAR 0 4
36686: PPUSH
36687: CALL 36697 0 5
36691: ST_TO_ADDR
// end ;
36692: LD_VAR 0 5
36696: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36697: LD_INT 0
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
// if not list then
36703: LD_VAR 0 3
36707: NOT
36708: IFFALSE 36712
// exit ;
36710: GO 37100
// result := [ ] ;
36712: LD_ADDR_VAR 0 6
36716: PUSH
36717: EMPTY
36718: ST_TO_ADDR
// for i in list do
36719: LD_ADDR_VAR 0 7
36723: PUSH
36724: LD_VAR 0 3
36728: PUSH
36729: FOR_IN
36730: IFFALSE 36932
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36732: LD_ADDR_VAR 0 9
36736: PUSH
36737: LD_VAR 0 7
36741: PPUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: LD_VAR 0 2
36751: PPUSH
36752: CALL_OW 297
36756: ST_TO_ADDR
// if not result then
36757: LD_VAR 0 6
36761: NOT
36762: IFFALSE 36788
// result := [ [ i , tmp ] ] else
36764: LD_ADDR_VAR 0 6
36768: PUSH
36769: LD_VAR 0 7
36773: PUSH
36774: LD_VAR 0 9
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: ST_TO_ADDR
36786: GO 36930
// begin if result [ result ] [ 2 ] < tmp then
36788: LD_VAR 0 6
36792: PUSH
36793: LD_VAR 0 6
36797: ARRAY
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: PUSH
36803: LD_VAR 0 9
36807: LESS
36808: IFFALSE 36850
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36810: LD_ADDR_VAR 0 6
36814: PUSH
36815: LD_VAR 0 6
36819: PPUSH
36820: LD_VAR 0 6
36824: PUSH
36825: LD_INT 1
36827: PLUS
36828: PPUSH
36829: LD_VAR 0 7
36833: PUSH
36834: LD_VAR 0 9
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PPUSH
36843: CALL_OW 2
36847: ST_TO_ADDR
36848: GO 36930
// for j = 1 to result do
36850: LD_ADDR_VAR 0 8
36854: PUSH
36855: DOUBLE
36856: LD_INT 1
36858: DEC
36859: ST_TO_ADDR
36860: LD_VAR 0 6
36864: PUSH
36865: FOR_TO
36866: IFFALSE 36928
// begin if tmp < result [ j ] [ 2 ] then
36868: LD_VAR 0 9
36872: PUSH
36873: LD_VAR 0 6
36877: PUSH
36878: LD_VAR 0 8
36882: ARRAY
36883: PUSH
36884: LD_INT 2
36886: ARRAY
36887: LESS
36888: IFFALSE 36926
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36890: LD_ADDR_VAR 0 6
36894: PUSH
36895: LD_VAR 0 6
36899: PPUSH
36900: LD_VAR 0 8
36904: PPUSH
36905: LD_VAR 0 7
36909: PUSH
36910: LD_VAR 0 9
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PPUSH
36919: CALL_OW 2
36923: ST_TO_ADDR
// break ;
36924: GO 36928
// end ; end ;
36926: GO 36865
36928: POP
36929: POP
// end ; end ;
36930: GO 36729
36932: POP
36933: POP
// if result and not asc then
36934: LD_VAR 0 6
36938: PUSH
36939: LD_VAR 0 4
36943: NOT
36944: AND
36945: IFFALSE 37020
// begin tmp := result ;
36947: LD_ADDR_VAR 0 9
36951: PUSH
36952: LD_VAR 0 6
36956: ST_TO_ADDR
// for i = tmp downto 1 do
36957: LD_ADDR_VAR 0 7
36961: PUSH
36962: DOUBLE
36963: LD_VAR 0 9
36967: INC
36968: ST_TO_ADDR
36969: LD_INT 1
36971: PUSH
36972: FOR_DOWNTO
36973: IFFALSE 37018
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36975: LD_ADDR_VAR 0 6
36979: PUSH
36980: LD_VAR 0 6
36984: PPUSH
36985: LD_VAR 0 9
36989: PUSH
36990: LD_VAR 0 7
36994: MINUS
36995: PUSH
36996: LD_INT 1
36998: PLUS
36999: PPUSH
37000: LD_VAR 0 9
37004: PUSH
37005: LD_VAR 0 7
37009: ARRAY
37010: PPUSH
37011: CALL_OW 1
37015: ST_TO_ADDR
37016: GO 36972
37018: POP
37019: POP
// end ; tmp := [ ] ;
37020: LD_ADDR_VAR 0 9
37024: PUSH
37025: EMPTY
37026: ST_TO_ADDR
// if mode then
37027: LD_VAR 0 5
37031: IFFALSE 37100
// begin for i = 1 to result do
37033: LD_ADDR_VAR 0 7
37037: PUSH
37038: DOUBLE
37039: LD_INT 1
37041: DEC
37042: ST_TO_ADDR
37043: LD_VAR 0 6
37047: PUSH
37048: FOR_TO
37049: IFFALSE 37088
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37051: LD_ADDR_VAR 0 9
37055: PUSH
37056: LD_VAR 0 9
37060: PPUSH
37061: LD_VAR 0 7
37065: PPUSH
37066: LD_VAR 0 6
37070: PUSH
37071: LD_VAR 0 7
37075: ARRAY
37076: PUSH
37077: LD_INT 1
37079: ARRAY
37080: PPUSH
37081: CALL_OW 1
37085: ST_TO_ADDR
37086: GO 37048
37088: POP
37089: POP
// result := tmp ;
37090: LD_ADDR_VAR 0 6
37094: PUSH
37095: LD_VAR 0 9
37099: ST_TO_ADDR
// end ; end ;
37100: LD_VAR 0 6
37104: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37105: LD_INT 0
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
// if not x or not y then
37135: LD_VAR 0 2
37139: NOT
37140: PUSH
37141: LD_VAR 0 3
37145: NOT
37146: OR
37147: IFFALSE 37151
// exit ;
37149: GO 38801
// if not range then
37151: LD_VAR 0 4
37155: NOT
37156: IFFALSE 37166
// range := 10 ;
37158: LD_ADDR_VAR 0 4
37162: PUSH
37163: LD_INT 10
37165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37166: LD_ADDR_VAR 0 8
37170: PUSH
37171: LD_INT 81
37173: PUSH
37174: LD_VAR 0 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 92
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_VAR 0 3
37195: PUSH
37196: LD_VAR 0 4
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: LD_INT 21
37212: PUSH
37213: LD_INT 3
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: PPUSH
37229: CALL_OW 69
37233: ST_TO_ADDR
// if not tmp then
37234: LD_VAR 0 8
37238: NOT
37239: IFFALSE 37243
// exit ;
37241: GO 38801
// for i in tmp do
37243: LD_ADDR_VAR 0 6
37247: PUSH
37248: LD_VAR 0 8
37252: PUSH
37253: FOR_IN
37254: IFFALSE 38776
// begin points := [ 0 , 0 , 0 ] ;
37256: LD_ADDR_VAR 0 9
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// bpoints := 1 ;
37275: LD_ADDR_VAR 0 10
37279: PUSH
37280: LD_INT 1
37282: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37283: LD_VAR 0 6
37287: PPUSH
37288: CALL_OW 247
37292: PUSH
37293: LD_INT 1
37295: DOUBLE
37296: EQUAL
37297: IFTRUE 37301
37299: GO 37879
37301: POP
// begin if GetClass ( i ) = 1 then
37302: LD_VAR 0 6
37306: PPUSH
37307: CALL_OW 257
37311: PUSH
37312: LD_INT 1
37314: EQUAL
37315: IFFALSE 37336
// points := [ 10 , 5 , 3 ] ;
37317: LD_ADDR_VAR 0 9
37321: PUSH
37322: LD_INT 10
37324: PUSH
37325: LD_INT 5
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37336: LD_VAR 0 6
37340: PPUSH
37341: CALL_OW 257
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 3
37351: PUSH
37352: LD_INT 4
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: IN
37360: IFFALSE 37381
// points := [ 3 , 2 , 1 ] ;
37362: LD_ADDR_VAR 0 9
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 257
37390: PUSH
37391: LD_INT 5
37393: EQUAL
37394: IFFALSE 37415
// points := [ 130 , 5 , 2 ] ;
37396: LD_ADDR_VAR 0 9
37400: PUSH
37401: LD_INT 130
37403: PUSH
37404: LD_INT 5
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37415: LD_VAR 0 6
37419: PPUSH
37420: CALL_OW 257
37424: PUSH
37425: LD_INT 8
37427: EQUAL
37428: IFFALSE 37449
// points := [ 35 , 35 , 30 ] ;
37430: LD_ADDR_VAR 0 9
37434: PUSH
37435: LD_INT 35
37437: PUSH
37438: LD_INT 35
37440: PUSH
37441: LD_INT 30
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 257
37458: PUSH
37459: LD_INT 9
37461: EQUAL
37462: IFFALSE 37483
// points := [ 20 , 55 , 40 ] ;
37464: LD_ADDR_VAR 0 9
37468: PUSH
37469: LD_INT 20
37471: PUSH
37472: LD_INT 55
37474: PUSH
37475: LD_INT 40
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37483: LD_VAR 0 6
37487: PPUSH
37488: CALL_OW 257
37492: PUSH
37493: LD_INT 12
37495: PUSH
37496: LD_INT 16
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: IN
37503: IFFALSE 37524
// points := [ 5 , 3 , 2 ] ;
37505: LD_ADDR_VAR 0 9
37509: PUSH
37510: LD_INT 5
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37524: LD_VAR 0 6
37528: PPUSH
37529: CALL_OW 257
37533: PUSH
37534: LD_INT 17
37536: EQUAL
37537: IFFALSE 37558
// points := [ 100 , 50 , 75 ] ;
37539: LD_ADDR_VAR 0 9
37543: PUSH
37544: LD_INT 100
37546: PUSH
37547: LD_INT 50
37549: PUSH
37550: LD_INT 75
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37558: LD_VAR 0 6
37562: PPUSH
37563: CALL_OW 257
37567: PUSH
37568: LD_INT 15
37570: EQUAL
37571: IFFALSE 37592
// points := [ 10 , 5 , 3 ] ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_INT 10
37580: PUSH
37581: LD_INT 5
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37592: LD_VAR 0 6
37596: PPUSH
37597: CALL_OW 257
37601: PUSH
37602: LD_INT 14
37604: EQUAL
37605: IFFALSE 37626
// points := [ 10 , 0 , 0 ] ;
37607: LD_ADDR_VAR 0 9
37611: PUSH
37612: LD_INT 10
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37626: LD_VAR 0 6
37630: PPUSH
37631: CALL_OW 257
37635: PUSH
37636: LD_INT 11
37638: EQUAL
37639: IFFALSE 37660
// points := [ 30 , 10 , 5 ] ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_INT 30
37648: PUSH
37649: LD_INT 10
37651: PUSH
37652: LD_INT 5
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37660: LD_VAR 0 1
37664: PPUSH
37665: LD_INT 5
37667: PPUSH
37668: CALL_OW 321
37672: PUSH
37673: LD_INT 2
37675: EQUAL
37676: IFFALSE 37693
// bpoints := bpoints * 1.8 ;
37678: LD_ADDR_VAR 0 10
37682: PUSH
37683: LD_VAR 0 10
37687: PUSH
37688: LD_REAL  1.80000000000000E+0000
37691: MUL
37692: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37693: LD_VAR 0 6
37697: PPUSH
37698: CALL_OW 257
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: LD_INT 4
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: IN
37721: PUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: LD_INT 51
37729: PPUSH
37730: CALL_OW 321
37734: PUSH
37735: LD_INT 2
37737: EQUAL
37738: AND
37739: IFFALSE 37756
// bpoints := bpoints * 1.2 ;
37741: LD_ADDR_VAR 0 10
37745: PUSH
37746: LD_VAR 0 10
37750: PUSH
37751: LD_REAL  1.20000000000000E+0000
37754: MUL
37755: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 257
37765: PUSH
37766: LD_INT 5
37768: PUSH
37769: LD_INT 7
37771: PUSH
37772: LD_INT 9
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: IN
37780: PUSH
37781: LD_VAR 0 1
37785: PPUSH
37786: LD_INT 52
37788: PPUSH
37789: CALL_OW 321
37793: PUSH
37794: LD_INT 2
37796: EQUAL
37797: AND
37798: IFFALSE 37815
// bpoints := bpoints * 1.5 ;
37800: LD_ADDR_VAR 0 10
37804: PUSH
37805: LD_VAR 0 10
37809: PUSH
37810: LD_REAL  1.50000000000000E+0000
37813: MUL
37814: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37815: LD_VAR 0 1
37819: PPUSH
37820: LD_INT 66
37822: PPUSH
37823: CALL_OW 321
37827: PUSH
37828: LD_INT 2
37830: EQUAL
37831: IFFALSE 37848
// bpoints := bpoints * 1.1 ;
37833: LD_ADDR_VAR 0 10
37837: PUSH
37838: LD_VAR 0 10
37842: PUSH
37843: LD_REAL  1.10000000000000E+0000
37846: MUL
37847: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37848: LD_ADDR_VAR 0 10
37852: PUSH
37853: LD_VAR 0 10
37857: PUSH
37858: LD_VAR 0 6
37862: PPUSH
37863: LD_INT 1
37865: PPUSH
37866: CALL_OW 259
37870: PUSH
37871: LD_REAL  1.15000000000000E+0000
37874: MUL
37875: MUL
37876: ST_TO_ADDR
// end ; unit_vehicle :
37877: GO 38705
37879: LD_INT 2
37881: DOUBLE
37882: EQUAL
37883: IFTRUE 37887
37885: GO 38693
37887: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37888: LD_VAR 0 6
37892: PPUSH
37893: CALL_OW 264
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: LD_INT 42
37903: PUSH
37904: LD_INT 24
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: IN
37912: IFFALSE 37933
// points := [ 25 , 5 , 3 ] ;
37914: LD_ADDR_VAR 0 9
37918: PUSH
37919: LD_INT 25
37921: PUSH
37922: LD_INT 5
37924: PUSH
37925: LD_INT 3
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37933: LD_VAR 0 6
37937: PPUSH
37938: CALL_OW 264
37942: PUSH
37943: LD_INT 4
37945: PUSH
37946: LD_INT 43
37948: PUSH
37949: LD_INT 25
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: IN
37957: IFFALSE 37978
// points := [ 40 , 15 , 5 ] ;
37959: LD_ADDR_VAR 0 9
37963: PUSH
37964: LD_INT 40
37966: PUSH
37967: LD_INT 15
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37978: LD_VAR 0 6
37982: PPUSH
37983: CALL_OW 264
37987: PUSH
37988: LD_INT 3
37990: PUSH
37991: LD_INT 23
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: IN
37998: IFFALSE 38019
// points := [ 7 , 25 , 8 ] ;
38000: LD_ADDR_VAR 0 9
38004: PUSH
38005: LD_INT 7
38007: PUSH
38008: LD_INT 25
38010: PUSH
38011: LD_INT 8
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38019: LD_VAR 0 6
38023: PPUSH
38024: CALL_OW 264
38028: PUSH
38029: LD_INT 5
38031: PUSH
38032: LD_INT 27
38034: PUSH
38035: LD_INT 44
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: IN
38043: IFFALSE 38064
// points := [ 14 , 50 , 16 ] ;
38045: LD_ADDR_VAR 0 9
38049: PUSH
38050: LD_INT 14
38052: PUSH
38053: LD_INT 50
38055: PUSH
38056: LD_INT 16
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38064: LD_VAR 0 6
38068: PPUSH
38069: CALL_OW 264
38073: PUSH
38074: LD_INT 6
38076: PUSH
38077: LD_INT 46
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: IN
38084: IFFALSE 38105
// points := [ 32 , 120 , 70 ] ;
38086: LD_ADDR_VAR 0 9
38090: PUSH
38091: LD_INT 32
38093: PUSH
38094: LD_INT 120
38096: PUSH
38097: LD_INT 70
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38105: LD_VAR 0 6
38109: PPUSH
38110: CALL_OW 264
38114: PUSH
38115: LD_INT 7
38117: PUSH
38118: LD_INT 28
38120: PUSH
38121: LD_INT 45
38123: PUSH
38124: LD_INT 92
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: IN
38133: IFFALSE 38154
// points := [ 35 , 20 , 45 ] ;
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: LD_INT 35
38142: PUSH
38143: LD_INT 20
38145: PUSH
38146: LD_INT 45
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38154: LD_VAR 0 6
38158: PPUSH
38159: CALL_OW 264
38163: PUSH
38164: LD_INT 47
38166: PUSH
38167: EMPTY
38168: LIST
38169: IN
38170: IFFALSE 38191
// points := [ 67 , 45 , 75 ] ;
38172: LD_ADDR_VAR 0 9
38176: PUSH
38177: LD_INT 67
38179: PUSH
38180: LD_INT 45
38182: PUSH
38183: LD_INT 75
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38191: LD_VAR 0 6
38195: PPUSH
38196: CALL_OW 264
38200: PUSH
38201: LD_INT 26
38203: PUSH
38204: EMPTY
38205: LIST
38206: IN
38207: IFFALSE 38228
// points := [ 120 , 30 , 80 ] ;
38209: LD_ADDR_VAR 0 9
38213: PUSH
38214: LD_INT 120
38216: PUSH
38217: LD_INT 30
38219: PUSH
38220: LD_INT 80
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38228: LD_VAR 0 6
38232: PPUSH
38233: CALL_OW 264
38237: PUSH
38238: LD_INT 22
38240: PUSH
38241: EMPTY
38242: LIST
38243: IN
38244: IFFALSE 38265
// points := [ 40 , 1 , 1 ] ;
38246: LD_ADDR_VAR 0 9
38250: PUSH
38251: LD_INT 40
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: LIST
38264: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38265: LD_VAR 0 6
38269: PPUSH
38270: CALL_OW 264
38274: PUSH
38275: LD_INT 29
38277: PUSH
38278: EMPTY
38279: LIST
38280: IN
38281: IFFALSE 38302
// points := [ 70 , 200 , 400 ] ;
38283: LD_ADDR_VAR 0 9
38287: PUSH
38288: LD_INT 70
38290: PUSH
38291: LD_INT 200
38293: PUSH
38294: LD_INT 400
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38302: LD_VAR 0 6
38306: PPUSH
38307: CALL_OW 264
38311: PUSH
38312: LD_INT 14
38314: PUSH
38315: LD_INT 53
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: IN
38322: IFFALSE 38343
// points := [ 40 , 10 , 20 ] ;
38324: LD_ADDR_VAR 0 9
38328: PUSH
38329: LD_INT 40
38331: PUSH
38332: LD_INT 10
38334: PUSH
38335: LD_INT 20
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38343: LD_VAR 0 6
38347: PPUSH
38348: CALL_OW 264
38352: PUSH
38353: LD_INT 9
38355: PUSH
38356: EMPTY
38357: LIST
38358: IN
38359: IFFALSE 38380
// points := [ 5 , 70 , 20 ] ;
38361: LD_ADDR_VAR 0 9
38365: PUSH
38366: LD_INT 5
38368: PUSH
38369: LD_INT 70
38371: PUSH
38372: LD_INT 20
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38380: LD_VAR 0 6
38384: PPUSH
38385: CALL_OW 264
38389: PUSH
38390: LD_INT 10
38392: PUSH
38393: EMPTY
38394: LIST
38395: IN
38396: IFFALSE 38417
// points := [ 35 , 110 , 70 ] ;
38398: LD_ADDR_VAR 0 9
38402: PUSH
38403: LD_INT 35
38405: PUSH
38406: LD_INT 110
38408: PUSH
38409: LD_INT 70
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38417: LD_VAR 0 6
38421: PPUSH
38422: CALL_OW 265
38426: PUSH
38427: LD_INT 25
38429: EQUAL
38430: IFFALSE 38451
// points := [ 80 , 65 , 100 ] ;
38432: LD_ADDR_VAR 0 9
38436: PUSH
38437: LD_INT 80
38439: PUSH
38440: LD_INT 65
38442: PUSH
38443: LD_INT 100
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38451: LD_VAR 0 6
38455: PPUSH
38456: CALL_OW 263
38460: PUSH
38461: LD_INT 1
38463: EQUAL
38464: IFFALSE 38499
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38466: LD_ADDR_VAR 0 10
38470: PUSH
38471: LD_VAR 0 10
38475: PUSH
38476: LD_VAR 0 6
38480: PPUSH
38481: CALL_OW 311
38485: PPUSH
38486: LD_INT 3
38488: PPUSH
38489: CALL_OW 259
38493: PUSH
38494: LD_INT 4
38496: MUL
38497: MUL
38498: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38499: LD_VAR 0 6
38503: PPUSH
38504: CALL_OW 263
38508: PUSH
38509: LD_INT 2
38511: EQUAL
38512: IFFALSE 38563
// begin j := IsControledBy ( i ) ;
38514: LD_ADDR_VAR 0 7
38518: PUSH
38519: LD_VAR 0 6
38523: PPUSH
38524: CALL_OW 312
38528: ST_TO_ADDR
// if j then
38529: LD_VAR 0 7
38533: IFFALSE 38563
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38535: LD_ADDR_VAR 0 10
38539: PUSH
38540: LD_VAR 0 10
38544: PUSH
38545: LD_VAR 0 7
38549: PPUSH
38550: LD_INT 3
38552: PPUSH
38553: CALL_OW 259
38557: PUSH
38558: LD_INT 3
38560: MUL
38561: MUL
38562: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38563: LD_VAR 0 6
38567: PPUSH
38568: CALL_OW 264
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: LD_INT 6
38578: PUSH
38579: LD_INT 46
38581: PUSH
38582: LD_INT 44
38584: PUSH
38585: LD_INT 47
38587: PUSH
38588: LD_INT 45
38590: PUSH
38591: LD_INT 28
38593: PUSH
38594: LD_INT 7
38596: PUSH
38597: LD_INT 27
38599: PUSH
38600: LD_INT 29
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: IN
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: LD_INT 52
38623: PPUSH
38624: CALL_OW 321
38628: PUSH
38629: LD_INT 2
38631: EQUAL
38632: AND
38633: IFFALSE 38650
// bpoints := bpoints * 1.2 ;
38635: LD_ADDR_VAR 0 10
38639: PUSH
38640: LD_VAR 0 10
38644: PUSH
38645: LD_REAL  1.20000000000000E+0000
38648: MUL
38649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38650: LD_VAR 0 6
38654: PPUSH
38655: CALL_OW 264
38659: PUSH
38660: LD_INT 6
38662: PUSH
38663: LD_INT 46
38665: PUSH
38666: LD_INT 47
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: IN
38674: IFFALSE 38691
// bpoints := bpoints * 1.2 ;
38676: LD_ADDR_VAR 0 10
38680: PUSH
38681: LD_VAR 0 10
38685: PUSH
38686: LD_REAL  1.20000000000000E+0000
38689: MUL
38690: ST_TO_ADDR
// end ; unit_building :
38691: GO 38705
38693: LD_INT 3
38695: DOUBLE
38696: EQUAL
38697: IFTRUE 38701
38699: GO 38704
38701: POP
// ; end ;
38702: GO 38705
38704: POP
// for j = 1 to 3 do
38705: LD_ADDR_VAR 0 7
38709: PUSH
38710: DOUBLE
38711: LD_INT 1
38713: DEC
38714: ST_TO_ADDR
38715: LD_INT 3
38717: PUSH
38718: FOR_TO
38719: IFFALSE 38772
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38721: LD_ADDR_VAR 0 5
38725: PUSH
38726: LD_VAR 0 5
38730: PPUSH
38731: LD_VAR 0 7
38735: PPUSH
38736: LD_VAR 0 5
38740: PUSH
38741: LD_VAR 0 7
38745: ARRAY
38746: PUSH
38747: LD_VAR 0 9
38751: PUSH
38752: LD_VAR 0 7
38756: ARRAY
38757: PUSH
38758: LD_VAR 0 10
38762: MUL
38763: PLUS
38764: PPUSH
38765: CALL_OW 1
38769: ST_TO_ADDR
38770: GO 38718
38772: POP
38773: POP
// end ;
38774: GO 37253
38776: POP
38777: POP
// result := Replace ( result , 4 , tmp ) ;
38778: LD_ADDR_VAR 0 5
38782: PUSH
38783: LD_VAR 0 5
38787: PPUSH
38788: LD_INT 4
38790: PPUSH
38791: LD_VAR 0 8
38795: PPUSH
38796: CALL_OW 1
38800: ST_TO_ADDR
// end ;
38801: LD_VAR 0 5
38805: RET
// export function DangerAtRange ( unit , range ) ; begin
38806: LD_INT 0
38808: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38809: LD_ADDR_VAR 0 3
38813: PUSH
38814: LD_VAR 0 1
38818: PPUSH
38819: CALL_OW 255
38823: PPUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL_OW 250
38833: PPUSH
38834: LD_VAR 0 1
38838: PPUSH
38839: CALL_OW 251
38843: PPUSH
38844: LD_VAR 0 2
38848: PPUSH
38849: CALL 37105 0 4
38853: ST_TO_ADDR
// end ;
38854: LD_VAR 0 3
38858: RET
// export function DangerInArea ( side , area ) ; begin
38859: LD_INT 0
38861: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_INT 81
38874: PUSH
38875: LD_VAR 0 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PPUSH
38884: CALL_OW 70
38888: ST_TO_ADDR
// end ;
38889: LD_VAR 0 3
38893: RET
// export function IsExtension ( b ) ; begin
38894: LD_INT 0
38896: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38897: LD_ADDR_VAR 0 2
38901: PUSH
38902: LD_VAR 0 1
38906: PUSH
38907: LD_INT 23
38909: PUSH
38910: LD_INT 20
38912: PUSH
38913: LD_INT 22
38915: PUSH
38916: LD_INT 17
38918: PUSH
38919: LD_INT 24
38921: PUSH
38922: LD_INT 21
38924: PUSH
38925: LD_INT 19
38927: PUSH
38928: LD_INT 16
38930: PUSH
38931: LD_INT 25
38933: PUSH
38934: LD_INT 18
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: IN
38949: ST_TO_ADDR
// end ;
38950: LD_VAR 0 2
38954: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38955: LD_INT 0
38957: PPUSH
38958: PPUSH
38959: PPUSH
// result := [ ] ;
38960: LD_ADDR_VAR 0 4
38964: PUSH
38965: EMPTY
38966: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38967: LD_ADDR_VAR 0 5
38971: PUSH
38972: LD_VAR 0 2
38976: PPUSH
38977: LD_INT 21
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PPUSH
38987: CALL_OW 70
38991: ST_TO_ADDR
// if not tmp then
38992: LD_VAR 0 5
38996: NOT
38997: IFFALSE 39001
// exit ;
38999: GO 39065
// if checkLink then
39001: LD_VAR 0 3
39005: IFFALSE 39055
// begin for i in tmp do
39007: LD_ADDR_VAR 0 6
39011: PUSH
39012: LD_VAR 0 5
39016: PUSH
39017: FOR_IN
39018: IFFALSE 39053
// if GetBase ( i ) <> base then
39020: LD_VAR 0 6
39024: PPUSH
39025: CALL_OW 274
39029: PUSH
39030: LD_VAR 0 1
39034: NONEQUAL
39035: IFFALSE 39051
// ComLinkToBase ( base , i ) ;
39037: LD_VAR 0 1
39041: PPUSH
39042: LD_VAR 0 6
39046: PPUSH
39047: CALL_OW 169
39051: GO 39017
39053: POP
39054: POP
// end ; result := tmp ;
39055: LD_ADDR_VAR 0 4
39059: PUSH
39060: LD_VAR 0 5
39064: ST_TO_ADDR
// end ;
39065: LD_VAR 0 4
39069: RET
// export function ComComplete ( units , b ) ; var i ; begin
39070: LD_INT 0
39072: PPUSH
39073: PPUSH
// if not units then
39074: LD_VAR 0 1
39078: NOT
39079: IFFALSE 39083
// exit ;
39081: GO 39173
// for i in units do
39083: LD_ADDR_VAR 0 4
39087: PUSH
39088: LD_VAR 0 1
39092: PUSH
39093: FOR_IN
39094: IFFALSE 39171
// if BuildingStatus ( b ) = bs_build then
39096: LD_VAR 0 2
39100: PPUSH
39101: CALL_OW 461
39105: PUSH
39106: LD_INT 1
39108: EQUAL
39109: IFFALSE 39169
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39111: LD_VAR 0 4
39115: PPUSH
39116: LD_STRING h
39118: PUSH
39119: LD_VAR 0 2
39123: PPUSH
39124: CALL_OW 250
39128: PUSH
39129: LD_VAR 0 2
39133: PPUSH
39134: CALL_OW 251
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: PPUSH
39165: CALL_OW 446
39169: GO 39093
39171: POP
39172: POP
// end ;
39173: LD_VAR 0 3
39177: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39178: LD_INT 0
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39186: LD_VAR 0 1
39190: NOT
39191: PUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 263
39201: PUSH
39202: LD_INT 2
39204: NONEQUAL
39205: OR
39206: IFFALSE 39210
// exit ;
39208: GO 39526
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39210: LD_ADDR_VAR 0 6
39214: PUSH
39215: LD_INT 22
39217: PUSH
39218: LD_VAR 0 1
39222: PPUSH
39223: CALL_OW 255
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 2
39234: PUSH
39235: LD_INT 30
39237: PUSH
39238: LD_INT 36
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 34
39247: PUSH
39248: LD_INT 31
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PPUSH
39264: CALL_OW 69
39268: ST_TO_ADDR
// if not tmp then
39269: LD_VAR 0 6
39273: NOT
39274: IFFALSE 39278
// exit ;
39276: GO 39526
// result := [ ] ;
39278: LD_ADDR_VAR 0 2
39282: PUSH
39283: EMPTY
39284: ST_TO_ADDR
// for i in tmp do
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: LD_VAR 0 6
39294: PUSH
39295: FOR_IN
39296: IFFALSE 39367
// begin t := UnitsInside ( i ) ;
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: LD_VAR 0 3
39307: PPUSH
39308: CALL_OW 313
39312: ST_TO_ADDR
// if t then
39313: LD_VAR 0 4
39317: IFFALSE 39365
// for j in t do
39319: LD_ADDR_VAR 0 7
39323: PUSH
39324: LD_VAR 0 4
39328: PUSH
39329: FOR_IN
39330: IFFALSE 39363
// result := Replace ( result , result + 1 , j ) ;
39332: LD_ADDR_VAR 0 2
39336: PUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 1
39349: PLUS
39350: PPUSH
39351: LD_VAR 0 7
39355: PPUSH
39356: CALL_OW 1
39360: ST_TO_ADDR
39361: GO 39329
39363: POP
39364: POP
// end ;
39365: GO 39295
39367: POP
39368: POP
// if not result then
39369: LD_VAR 0 2
39373: NOT
39374: IFFALSE 39378
// exit ;
39376: GO 39526
// mech := result [ 1 ] ;
39378: LD_ADDR_VAR 0 5
39382: PUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 1
39390: ARRAY
39391: ST_TO_ADDR
// if result > 1 then
39392: LD_VAR 0 2
39396: PUSH
39397: LD_INT 1
39399: GREATER
39400: IFFALSE 39512
// begin for i = 2 to result do
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: DOUBLE
39408: LD_INT 2
39410: DEC
39411: ST_TO_ADDR
39412: LD_VAR 0 2
39416: PUSH
39417: FOR_TO
39418: IFFALSE 39510
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39420: LD_ADDR_VAR 0 4
39424: PUSH
39425: LD_VAR 0 2
39429: PUSH
39430: LD_VAR 0 3
39434: ARRAY
39435: PPUSH
39436: LD_INT 3
39438: PPUSH
39439: CALL_OW 259
39443: PUSH
39444: LD_VAR 0 2
39448: PUSH
39449: LD_VAR 0 3
39453: ARRAY
39454: PPUSH
39455: CALL_OW 432
39459: MINUS
39460: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39461: LD_VAR 0 4
39465: PUSH
39466: LD_VAR 0 5
39470: PPUSH
39471: LD_INT 3
39473: PPUSH
39474: CALL_OW 259
39478: PUSH
39479: LD_VAR 0 5
39483: PPUSH
39484: CALL_OW 432
39488: MINUS
39489: GREATEREQUAL
39490: IFFALSE 39508
// mech := result [ i ] ;
39492: LD_ADDR_VAR 0 5
39496: PUSH
39497: LD_VAR 0 2
39501: PUSH
39502: LD_VAR 0 3
39506: ARRAY
39507: ST_TO_ADDR
// end ;
39508: GO 39417
39510: POP
39511: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39512: LD_VAR 0 1
39516: PPUSH
39517: LD_VAR 0 5
39521: PPUSH
39522: CALL_OW 135
// end ;
39526: LD_VAR 0 2
39530: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39531: LD_INT 0
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
// result := [ ] ;
39546: LD_ADDR_VAR 0 7
39550: PUSH
39551: EMPTY
39552: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39553: LD_VAR 0 1
39557: PPUSH
39558: CALL_OW 266
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: IN
39573: NOT
39574: IFFALSE 39578
// exit ;
39576: GO 41212
// if name then
39578: LD_VAR 0 3
39582: IFFALSE 39598
// SetBName ( base_dep , name ) ;
39584: LD_VAR 0 1
39588: PPUSH
39589: LD_VAR 0 3
39593: PPUSH
39594: CALL_OW 500
// base := GetBase ( base_dep ) ;
39598: LD_ADDR_VAR 0 15
39602: PUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 274
39612: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39613: LD_ADDR_VAR 0 16
39617: PUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: CALL_OW 255
39627: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39628: LD_ADDR_VAR 0 17
39632: PUSH
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 248
39642: ST_TO_ADDR
// if sources then
39643: LD_VAR 0 5
39647: IFFALSE 39694
// for i = 1 to 3 do
39649: LD_ADDR_VAR 0 8
39653: PUSH
39654: DOUBLE
39655: LD_INT 1
39657: DEC
39658: ST_TO_ADDR
39659: LD_INT 3
39661: PUSH
39662: FOR_TO
39663: IFFALSE 39692
// AddResourceType ( base , i , sources [ i ] ) ;
39665: LD_VAR 0 15
39669: PPUSH
39670: LD_VAR 0 8
39674: PPUSH
39675: LD_VAR 0 5
39679: PUSH
39680: LD_VAR 0 8
39684: ARRAY
39685: PPUSH
39686: CALL_OW 276
39690: GO 39662
39692: POP
39693: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39694: LD_ADDR_VAR 0 18
39698: PUSH
39699: LD_VAR 0 15
39703: PPUSH
39704: LD_VAR 0 2
39708: PPUSH
39709: LD_INT 1
39711: PPUSH
39712: CALL 38955 0 3
39716: ST_TO_ADDR
// InitHc ;
39717: CALL_OW 19
// InitUc ;
39721: CALL_OW 18
// uc_side := side ;
39725: LD_ADDR_OWVAR 20
39729: PUSH
39730: LD_VAR 0 16
39734: ST_TO_ADDR
// uc_nation := nation ;
39735: LD_ADDR_OWVAR 21
39739: PUSH
39740: LD_VAR 0 17
39744: ST_TO_ADDR
// if buildings then
39745: LD_VAR 0 18
39749: IFFALSE 41071
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39751: LD_ADDR_VAR 0 19
39755: PUSH
39756: LD_VAR 0 18
39760: PPUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 30
39766: PUSH
39767: LD_INT 29
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 30
39776: PUSH
39777: LD_INT 30
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: PPUSH
39789: CALL_OW 72
39793: ST_TO_ADDR
// if tmp then
39794: LD_VAR 0 19
39798: IFFALSE 39846
// for i in tmp do
39800: LD_ADDR_VAR 0 8
39804: PUSH
39805: LD_VAR 0 19
39809: PUSH
39810: FOR_IN
39811: IFFALSE 39844
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39813: LD_VAR 0 8
39817: PPUSH
39818: CALL_OW 250
39822: PPUSH
39823: LD_VAR 0 8
39827: PPUSH
39828: CALL_OW 251
39832: PPUSH
39833: LD_VAR 0 16
39837: PPUSH
39838: CALL_OW 441
39842: GO 39810
39844: POP
39845: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39846: LD_VAR 0 18
39850: PPUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 30
39856: PUSH
39857: LD_INT 32
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 30
39866: PUSH
39867: LD_INT 33
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: PPUSH
39879: CALL_OW 72
39883: IFFALSE 39971
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39885: LD_ADDR_VAR 0 8
39889: PUSH
39890: LD_VAR 0 18
39894: PPUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 30
39900: PUSH
39901: LD_INT 32
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 30
39910: PUSH
39911: LD_INT 33
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: PPUSH
39923: CALL_OW 72
39927: PUSH
39928: FOR_IN
39929: IFFALSE 39969
// begin if not GetBWeapon ( i ) then
39931: LD_VAR 0 8
39935: PPUSH
39936: CALL_OW 269
39940: NOT
39941: IFFALSE 39967
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39943: LD_VAR 0 8
39947: PPUSH
39948: LD_VAR 0 8
39952: PPUSH
39953: LD_VAR 0 2
39957: PPUSH
39958: CALL 41217 0 2
39962: PPUSH
39963: CALL_OW 431
// end ;
39967: GO 39928
39969: POP
39970: POP
// end ; for i = 1 to personel do
39971: LD_ADDR_VAR 0 8
39975: PUSH
39976: DOUBLE
39977: LD_INT 1
39979: DEC
39980: ST_TO_ADDR
39981: LD_VAR 0 6
39985: PUSH
39986: FOR_TO
39987: IFFALSE 41051
// begin if i > 4 then
39989: LD_VAR 0 8
39993: PUSH
39994: LD_INT 4
39996: GREATER
39997: IFFALSE 40001
// break ;
39999: GO 41051
// case i of 1 :
40001: LD_VAR 0 8
40005: PUSH
40006: LD_INT 1
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 40094
40014: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40015: LD_ADDR_VAR 0 12
40019: PUSH
40020: LD_VAR 0 18
40024: PPUSH
40025: LD_INT 22
40027: PUSH
40028: LD_VAR 0 16
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 58
40039: PUSH
40040: EMPTY
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: LD_INT 32
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 30
40058: PUSH
40059: LD_INT 4
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 30
40068: PUSH
40069: LD_INT 5
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: PPUSH
40087: CALL_OW 72
40091: ST_TO_ADDR
40092: GO 40316
40094: LD_INT 2
40096: DOUBLE
40097: EQUAL
40098: IFTRUE 40102
40100: GO 40164
40102: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40103: LD_ADDR_VAR 0 12
40107: PUSH
40108: LD_VAR 0 18
40112: PPUSH
40113: LD_INT 22
40115: PUSH
40116: LD_VAR 0 16
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PPUSH
40157: CALL_OW 72
40161: ST_TO_ADDR
40162: GO 40316
40164: LD_INT 3
40166: DOUBLE
40167: EQUAL
40168: IFTRUE 40172
40170: GO 40234
40172: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40173: LD_ADDR_VAR 0 12
40177: PUSH
40178: LD_VAR 0 18
40182: PPUSH
40183: LD_INT 22
40185: PUSH
40186: LD_VAR 0 16
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: LD_INT 30
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 30
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PPUSH
40227: CALL_OW 72
40231: ST_TO_ADDR
40232: GO 40316
40234: LD_INT 4
40236: DOUBLE
40237: EQUAL
40238: IFTRUE 40242
40240: GO 40315
40242: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40243: LD_ADDR_VAR 0 12
40247: PUSH
40248: LD_VAR 0 18
40252: PPUSH
40253: LD_INT 22
40255: PUSH
40256: LD_VAR 0 16
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 30
40270: PUSH
40271: LD_INT 6
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 30
40280: PUSH
40281: LD_INT 7
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 30
40290: PUSH
40291: LD_INT 8
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PPUSH
40308: CALL_OW 72
40312: ST_TO_ADDR
40313: GO 40316
40315: POP
// if i = 1 then
40316: LD_VAR 0 8
40320: PUSH
40321: LD_INT 1
40323: EQUAL
40324: IFFALSE 40435
// begin tmp := [ ] ;
40326: LD_ADDR_VAR 0 19
40330: PUSH
40331: EMPTY
40332: ST_TO_ADDR
// for j in f do
40333: LD_ADDR_VAR 0 9
40337: PUSH
40338: LD_VAR 0 12
40342: PUSH
40343: FOR_IN
40344: IFFALSE 40417
// if GetBType ( j ) = b_bunker then
40346: LD_VAR 0 9
40350: PPUSH
40351: CALL_OW 266
40355: PUSH
40356: LD_INT 32
40358: EQUAL
40359: IFFALSE 40386
// tmp := Insert ( tmp , 1 , j ) else
40361: LD_ADDR_VAR 0 19
40365: PUSH
40366: LD_VAR 0 19
40370: PPUSH
40371: LD_INT 1
40373: PPUSH
40374: LD_VAR 0 9
40378: PPUSH
40379: CALL_OW 2
40383: ST_TO_ADDR
40384: GO 40415
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40386: LD_ADDR_VAR 0 19
40390: PUSH
40391: LD_VAR 0 19
40395: PPUSH
40396: LD_VAR 0 19
40400: PUSH
40401: LD_INT 1
40403: PLUS
40404: PPUSH
40405: LD_VAR 0 9
40409: PPUSH
40410: CALL_OW 2
40414: ST_TO_ADDR
40415: GO 40343
40417: POP
40418: POP
// if tmp then
40419: LD_VAR 0 19
40423: IFFALSE 40435
// f := tmp ;
40425: LD_ADDR_VAR 0 12
40429: PUSH
40430: LD_VAR 0 19
40434: ST_TO_ADDR
// end ; x := personel [ i ] ;
40435: LD_ADDR_VAR 0 13
40439: PUSH
40440: LD_VAR 0 6
40444: PUSH
40445: LD_VAR 0 8
40449: ARRAY
40450: ST_TO_ADDR
// if x = - 1 then
40451: LD_VAR 0 13
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: EQUAL
40460: IFFALSE 40669
// begin for j in f do
40462: LD_ADDR_VAR 0 9
40466: PUSH
40467: LD_VAR 0 12
40471: PUSH
40472: FOR_IN
40473: IFFALSE 40665
// repeat InitHc ;
40475: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40479: LD_VAR 0 9
40483: PPUSH
40484: CALL_OW 266
40488: PUSH
40489: LD_INT 5
40491: EQUAL
40492: IFFALSE 40562
// begin if UnitsInside ( j ) < 3 then
40494: LD_VAR 0 9
40498: PPUSH
40499: CALL_OW 313
40503: PUSH
40504: LD_INT 3
40506: LESS
40507: IFFALSE 40543
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40509: LD_INT 0
40511: PPUSH
40512: LD_INT 5
40514: PUSH
40515: LD_INT 8
40517: PUSH
40518: LD_INT 9
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: PUSH
40526: LD_VAR 0 17
40530: ARRAY
40531: PPUSH
40532: LD_VAR 0 4
40536: PPUSH
40537: CALL_OW 380
40541: GO 40560
// PrepareHuman ( false , i , skill ) ;
40543: LD_INT 0
40545: PPUSH
40546: LD_VAR 0 8
40550: PPUSH
40551: LD_VAR 0 4
40555: PPUSH
40556: CALL_OW 380
// end else
40560: GO 40579
// PrepareHuman ( false , i , skill ) ;
40562: LD_INT 0
40564: PPUSH
40565: LD_VAR 0 8
40569: PPUSH
40570: LD_VAR 0 4
40574: PPUSH
40575: CALL_OW 380
// un := CreateHuman ;
40579: LD_ADDR_VAR 0 14
40583: PUSH
40584: CALL_OW 44
40588: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40589: LD_ADDR_VAR 0 7
40593: PUSH
40594: LD_VAR 0 7
40598: PPUSH
40599: LD_INT 1
40601: PPUSH
40602: LD_VAR 0 14
40606: PPUSH
40607: CALL_OW 2
40611: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40612: LD_VAR 0 14
40616: PPUSH
40617: LD_VAR 0 9
40621: PPUSH
40622: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40626: LD_VAR 0 9
40630: PPUSH
40631: CALL_OW 313
40635: PUSH
40636: LD_INT 6
40638: EQUAL
40639: PUSH
40640: LD_VAR 0 9
40644: PPUSH
40645: CALL_OW 266
40649: PUSH
40650: LD_INT 32
40652: PUSH
40653: LD_INT 31
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: IN
40660: OR
40661: IFFALSE 40475
40663: GO 40472
40665: POP
40666: POP
// end else
40667: GO 41049
// for j = 1 to x do
40669: LD_ADDR_VAR 0 9
40673: PUSH
40674: DOUBLE
40675: LD_INT 1
40677: DEC
40678: ST_TO_ADDR
40679: LD_VAR 0 13
40683: PUSH
40684: FOR_TO
40685: IFFALSE 41047
// begin InitHc ;
40687: CALL_OW 19
// if not f then
40691: LD_VAR 0 12
40695: NOT
40696: IFFALSE 40785
// begin PrepareHuman ( false , i , skill ) ;
40698: LD_INT 0
40700: PPUSH
40701: LD_VAR 0 8
40705: PPUSH
40706: LD_VAR 0 4
40710: PPUSH
40711: CALL_OW 380
// un := CreateHuman ;
40715: LD_ADDR_VAR 0 14
40719: PUSH
40720: CALL_OW 44
40724: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40725: LD_ADDR_VAR 0 7
40729: PUSH
40730: LD_VAR 0 7
40734: PPUSH
40735: LD_INT 1
40737: PPUSH
40738: LD_VAR 0 14
40742: PPUSH
40743: CALL_OW 2
40747: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40748: LD_VAR 0 14
40752: PPUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 250
40762: PPUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 251
40772: PPUSH
40773: LD_INT 10
40775: PPUSH
40776: LD_INT 0
40778: PPUSH
40779: CALL_OW 50
// continue ;
40783: GO 40684
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40785: LD_VAR 0 12
40789: PUSH
40790: LD_INT 1
40792: ARRAY
40793: PPUSH
40794: CALL_OW 313
40798: PUSH
40799: LD_VAR 0 12
40803: PUSH
40804: LD_INT 1
40806: ARRAY
40807: PPUSH
40808: CALL_OW 266
40812: PUSH
40813: LD_INT 32
40815: PUSH
40816: LD_INT 31
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: IN
40823: AND
40824: PUSH
40825: LD_VAR 0 12
40829: PUSH
40830: LD_INT 1
40832: ARRAY
40833: PPUSH
40834: CALL_OW 313
40838: PUSH
40839: LD_INT 6
40841: EQUAL
40842: OR
40843: IFFALSE 40863
// f := Delete ( f , 1 ) ;
40845: LD_ADDR_VAR 0 12
40849: PUSH
40850: LD_VAR 0 12
40854: PPUSH
40855: LD_INT 1
40857: PPUSH
40858: CALL_OW 3
40862: ST_TO_ADDR
// if not f then
40863: LD_VAR 0 12
40867: NOT
40868: IFFALSE 40886
// begin x := x + 2 ;
40870: LD_ADDR_VAR 0 13
40874: PUSH
40875: LD_VAR 0 13
40879: PUSH
40880: LD_INT 2
40882: PLUS
40883: ST_TO_ADDR
// continue ;
40884: GO 40684
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40886: LD_VAR 0 12
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PPUSH
40895: CALL_OW 266
40899: PUSH
40900: LD_INT 5
40902: EQUAL
40903: IFFALSE 40977
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40905: LD_VAR 0 12
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: PPUSH
40914: CALL_OW 313
40918: PUSH
40919: LD_INT 3
40921: LESS
40922: IFFALSE 40958
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40924: LD_INT 0
40926: PPUSH
40927: LD_INT 5
40929: PUSH
40930: LD_INT 8
40932: PUSH
40933: LD_INT 9
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: PUSH
40941: LD_VAR 0 17
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 4
40951: PPUSH
40952: CALL_OW 380
40956: GO 40975
// PrepareHuman ( false , i , skill ) ;
40958: LD_INT 0
40960: PPUSH
40961: LD_VAR 0 8
40965: PPUSH
40966: LD_VAR 0 4
40970: PPUSH
40971: CALL_OW 380
// end else
40975: GO 40994
// PrepareHuman ( false , i , skill ) ;
40977: LD_INT 0
40979: PPUSH
40980: LD_VAR 0 8
40984: PPUSH
40985: LD_VAR 0 4
40989: PPUSH
40990: CALL_OW 380
// un := CreateHuman ;
40994: LD_ADDR_VAR 0 14
40998: PUSH
40999: CALL_OW 44
41003: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41004: LD_ADDR_VAR 0 7
41008: PUSH
41009: LD_VAR 0 7
41013: PPUSH
41014: LD_INT 1
41016: PPUSH
41017: LD_VAR 0 14
41021: PPUSH
41022: CALL_OW 2
41026: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41027: LD_VAR 0 14
41031: PPUSH
41032: LD_VAR 0 12
41036: PUSH
41037: LD_INT 1
41039: ARRAY
41040: PPUSH
41041: CALL_OW 52
// end ;
41045: GO 40684
41047: POP
41048: POP
// end ;
41049: GO 39986
41051: POP
41052: POP
// result := result ^ buildings ;
41053: LD_ADDR_VAR 0 7
41057: PUSH
41058: LD_VAR 0 7
41062: PUSH
41063: LD_VAR 0 18
41067: ADD
41068: ST_TO_ADDR
// end else
41069: GO 41212
// begin for i = 1 to personel do
41071: LD_ADDR_VAR 0 8
41075: PUSH
41076: DOUBLE
41077: LD_INT 1
41079: DEC
41080: ST_TO_ADDR
41081: LD_VAR 0 6
41085: PUSH
41086: FOR_TO
41087: IFFALSE 41210
// begin if i > 4 then
41089: LD_VAR 0 8
41093: PUSH
41094: LD_INT 4
41096: GREATER
41097: IFFALSE 41101
// break ;
41099: GO 41210
// x := personel [ i ] ;
41101: LD_ADDR_VAR 0 13
41105: PUSH
41106: LD_VAR 0 6
41110: PUSH
41111: LD_VAR 0 8
41115: ARRAY
41116: ST_TO_ADDR
// if x = - 1 then
41117: LD_VAR 0 13
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: EQUAL
41126: IFFALSE 41130
// continue ;
41128: GO 41086
// PrepareHuman ( false , i , skill ) ;
41130: LD_INT 0
41132: PPUSH
41133: LD_VAR 0 8
41137: PPUSH
41138: LD_VAR 0 4
41142: PPUSH
41143: CALL_OW 380
// un := CreateHuman ;
41147: LD_ADDR_VAR 0 14
41151: PUSH
41152: CALL_OW 44
41156: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41157: LD_VAR 0 14
41161: PPUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 250
41171: PPUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 251
41181: PPUSH
41182: LD_INT 10
41184: PPUSH
41185: LD_INT 0
41187: PPUSH
41188: CALL_OW 50
// result := result ^ un ;
41192: LD_ADDR_VAR 0 7
41196: PUSH
41197: LD_VAR 0 7
41201: PUSH
41202: LD_VAR 0 14
41206: ADD
41207: ST_TO_ADDR
// end ;
41208: GO 41086
41210: POP
41211: POP
// end ; end ;
41212: LD_VAR 0 7
41216: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41217: LD_INT 0
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
// result := false ;
41235: LD_ADDR_VAR 0 3
41239: PUSH
41240: LD_INT 0
41242: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41243: LD_VAR 0 1
41247: NOT
41248: PUSH
41249: LD_VAR 0 1
41253: PPUSH
41254: CALL_OW 266
41258: PUSH
41259: LD_INT 32
41261: PUSH
41262: LD_INT 33
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: IN
41269: NOT
41270: OR
41271: IFFALSE 41275
// exit ;
41273: GO 42384
// nat := GetNation ( tower ) ;
41275: LD_ADDR_VAR 0 12
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: CALL_OW 248
41289: ST_TO_ADDR
// side := GetSide ( tower ) ;
41290: LD_ADDR_VAR 0 16
41294: PUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: CALL_OW 255
41304: ST_TO_ADDR
// x := GetX ( tower ) ;
41305: LD_ADDR_VAR 0 10
41309: PUSH
41310: LD_VAR 0 1
41314: PPUSH
41315: CALL_OW 250
41319: ST_TO_ADDR
// y := GetY ( tower ) ;
41320: LD_ADDR_VAR 0 11
41324: PUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 251
41334: ST_TO_ADDR
// if not x or not y then
41335: LD_VAR 0 10
41339: NOT
41340: PUSH
41341: LD_VAR 0 11
41345: NOT
41346: OR
41347: IFFALSE 41351
// exit ;
41349: GO 42384
// weapon := 0 ;
41351: LD_ADDR_VAR 0 18
41355: PUSH
41356: LD_INT 0
41358: ST_TO_ADDR
// fac_list := [ ] ;
41359: LD_ADDR_VAR 0 17
41363: PUSH
41364: EMPTY
41365: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41366: LD_ADDR_VAR 0 6
41370: PUSH
41371: LD_VAR 0 1
41375: PPUSH
41376: CALL_OW 274
41380: PPUSH
41381: LD_VAR 0 2
41385: PPUSH
41386: LD_INT 0
41388: PPUSH
41389: CALL 38955 0 3
41393: PPUSH
41394: LD_INT 30
41396: PUSH
41397: LD_INT 3
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PPUSH
41404: CALL_OW 72
41408: ST_TO_ADDR
// if not factories then
41409: LD_VAR 0 6
41413: NOT
41414: IFFALSE 41418
// exit ;
41416: GO 42384
// for i in factories do
41418: LD_ADDR_VAR 0 8
41422: PUSH
41423: LD_VAR 0 6
41427: PUSH
41428: FOR_IN
41429: IFFALSE 41454
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41431: LD_ADDR_VAR 0 17
41435: PUSH
41436: LD_VAR 0 17
41440: PUSH
41441: LD_VAR 0 8
41445: PPUSH
41446: CALL_OW 478
41450: UNION
41451: ST_TO_ADDR
41452: GO 41428
41454: POP
41455: POP
// if not fac_list then
41456: LD_VAR 0 17
41460: NOT
41461: IFFALSE 41465
// exit ;
41463: GO 42384
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41465: LD_ADDR_VAR 0 5
41469: PUSH
41470: LD_INT 4
41472: PUSH
41473: LD_INT 5
41475: PUSH
41476: LD_INT 9
41478: PUSH
41479: LD_INT 10
41481: PUSH
41482: LD_INT 6
41484: PUSH
41485: LD_INT 7
41487: PUSH
41488: LD_INT 11
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 27
41502: PUSH
41503: LD_INT 28
41505: PUSH
41506: LD_INT 26
41508: PUSH
41509: LD_INT 30
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 43
41520: PUSH
41521: LD_INT 44
41523: PUSH
41524: LD_INT 46
41526: PUSH
41527: LD_INT 45
41529: PUSH
41530: LD_INT 47
41532: PUSH
41533: LD_INT 49
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: PUSH
41549: LD_VAR 0 12
41553: ARRAY
41554: ST_TO_ADDR
// list := list isect fac_list ;
41555: LD_ADDR_VAR 0 5
41559: PUSH
41560: LD_VAR 0 5
41564: PUSH
41565: LD_VAR 0 17
41569: ISECT
41570: ST_TO_ADDR
// if not list then
41571: LD_VAR 0 5
41575: NOT
41576: IFFALSE 41580
// exit ;
41578: GO 42384
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41580: LD_VAR 0 12
41584: PUSH
41585: LD_INT 3
41587: EQUAL
41588: PUSH
41589: LD_INT 49
41591: PUSH
41592: LD_VAR 0 5
41596: IN
41597: AND
41598: PUSH
41599: LD_INT 31
41601: PPUSH
41602: LD_VAR 0 16
41606: PPUSH
41607: CALL_OW 321
41611: PUSH
41612: LD_INT 2
41614: EQUAL
41615: AND
41616: IFFALSE 41676
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41618: LD_INT 22
41620: PUSH
41621: LD_VAR 0 16
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 35
41632: PUSH
41633: LD_INT 49
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 91
41642: PUSH
41643: LD_VAR 0 1
41647: PUSH
41648: LD_INT 10
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: LIST
41660: PPUSH
41661: CALL_OW 69
41665: NOT
41666: IFFALSE 41676
// weapon := ru_time_lapser ;
41668: LD_ADDR_VAR 0 18
41672: PUSH
41673: LD_INT 49
41675: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41676: LD_VAR 0 12
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: IN
41691: PUSH
41692: LD_INT 11
41694: PUSH
41695: LD_VAR 0 5
41699: IN
41700: PUSH
41701: LD_INT 30
41703: PUSH
41704: LD_VAR 0 5
41708: IN
41709: OR
41710: AND
41711: PUSH
41712: LD_INT 6
41714: PPUSH
41715: LD_VAR 0 16
41719: PPUSH
41720: CALL_OW 321
41724: PUSH
41725: LD_INT 2
41727: EQUAL
41728: AND
41729: IFFALSE 41894
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41731: LD_INT 22
41733: PUSH
41734: LD_VAR 0 16
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 35
41748: PUSH
41749: LD_INT 11
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 35
41758: PUSH
41759: LD_INT 30
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 91
41773: PUSH
41774: LD_VAR 0 1
41778: PUSH
41779: LD_INT 18
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: LIST
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: PPUSH
41792: CALL_OW 69
41796: NOT
41797: PUSH
41798: LD_INT 22
41800: PUSH
41801: LD_VAR 0 16
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 30
41815: PUSH
41816: LD_INT 32
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 30
41825: PUSH
41826: LD_INT 33
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 91
41840: PUSH
41841: LD_VAR 0 1
41845: PUSH
41846: LD_INT 12
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: PPUSH
41862: CALL_OW 69
41866: PUSH
41867: LD_INT 2
41869: GREATER
41870: AND
41871: IFFALSE 41894
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41873: LD_ADDR_VAR 0 18
41877: PUSH
41878: LD_INT 11
41880: PUSH
41881: LD_INT 30
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_VAR 0 12
41892: ARRAY
41893: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41894: LD_VAR 0 18
41898: NOT
41899: PUSH
41900: LD_INT 40
41902: PPUSH
41903: LD_VAR 0 16
41907: PPUSH
41908: CALL_OW 321
41912: PUSH
41913: LD_INT 2
41915: EQUAL
41916: AND
41917: PUSH
41918: LD_INT 7
41920: PUSH
41921: LD_VAR 0 5
41925: IN
41926: PUSH
41927: LD_INT 28
41929: PUSH
41930: LD_VAR 0 5
41934: IN
41935: OR
41936: PUSH
41937: LD_INT 45
41939: PUSH
41940: LD_VAR 0 5
41944: IN
41945: OR
41946: AND
41947: IFFALSE 42201
// begin hex := GetHexInfo ( x , y ) ;
41949: LD_ADDR_VAR 0 4
41953: PUSH
41954: LD_VAR 0 10
41958: PPUSH
41959: LD_VAR 0 11
41963: PPUSH
41964: CALL_OW 546
41968: ST_TO_ADDR
// if hex [ 1 ] then
41969: LD_VAR 0 4
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: IFFALSE 41981
// exit ;
41979: GO 42384
// height := hex [ 2 ] ;
41981: LD_ADDR_VAR 0 15
41985: PUSH
41986: LD_VAR 0 4
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41995: LD_ADDR_VAR 0 14
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: LD_INT 5
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
// for i in tmp do
42018: LD_ADDR_VAR 0 8
42022: PUSH
42023: LD_VAR 0 14
42027: PUSH
42028: FOR_IN
42029: IFFALSE 42199
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: LD_VAR 0 10
42040: PPUSH
42041: LD_VAR 0 8
42045: PPUSH
42046: LD_INT 5
42048: PPUSH
42049: CALL_OW 272
42053: PUSH
42054: LD_VAR 0 11
42058: PPUSH
42059: LD_VAR 0 8
42063: PPUSH
42064: LD_INT 5
42066: PPUSH
42067: CALL_OW 273
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42076: LD_VAR 0 9
42080: PUSH
42081: LD_INT 1
42083: ARRAY
42084: PPUSH
42085: LD_VAR 0 9
42089: PUSH
42090: LD_INT 2
42092: ARRAY
42093: PPUSH
42094: CALL_OW 488
42098: IFFALSE 42197
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42100: LD_ADDR_VAR 0 4
42104: PUSH
42105: LD_VAR 0 9
42109: PUSH
42110: LD_INT 1
42112: ARRAY
42113: PPUSH
42114: LD_VAR 0 9
42118: PUSH
42119: LD_INT 2
42121: ARRAY
42122: PPUSH
42123: CALL_OW 546
42127: ST_TO_ADDR
// if hex [ 1 ] then
42128: LD_VAR 0 4
42132: PUSH
42133: LD_INT 1
42135: ARRAY
42136: IFFALSE 42140
// continue ;
42138: GO 42028
// h := hex [ 2 ] ;
42140: LD_ADDR_VAR 0 13
42144: PUSH
42145: LD_VAR 0 4
42149: PUSH
42150: LD_INT 2
42152: ARRAY
42153: ST_TO_ADDR
// if h + 7 < height then
42154: LD_VAR 0 13
42158: PUSH
42159: LD_INT 7
42161: PLUS
42162: PUSH
42163: LD_VAR 0 15
42167: LESS
42168: IFFALSE 42197
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42170: LD_ADDR_VAR 0 18
42174: PUSH
42175: LD_INT 7
42177: PUSH
42178: LD_INT 28
42180: PUSH
42181: LD_INT 45
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: PUSH
42189: LD_VAR 0 12
42193: ARRAY
42194: ST_TO_ADDR
// break ;
42195: GO 42199
// end ; end ; end ;
42197: GO 42028
42199: POP
42200: POP
// end ; if not weapon then
42201: LD_VAR 0 18
42205: NOT
42206: IFFALSE 42266
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42208: LD_ADDR_VAR 0 5
42212: PUSH
42213: LD_VAR 0 5
42217: PUSH
42218: LD_INT 11
42220: PUSH
42221: LD_INT 30
42223: PUSH
42224: LD_INT 49
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: DIFF
42232: ST_TO_ADDR
// if not list then
42233: LD_VAR 0 5
42237: NOT
42238: IFFALSE 42242
// exit ;
42240: GO 42384
// weapon := list [ rand ( 1 , list ) ] ;
42242: LD_ADDR_VAR 0 18
42246: PUSH
42247: LD_VAR 0 5
42251: PUSH
42252: LD_INT 1
42254: PPUSH
42255: LD_VAR 0 5
42259: PPUSH
42260: CALL_OW 12
42264: ARRAY
42265: ST_TO_ADDR
// end ; if weapon then
42266: LD_VAR 0 18
42270: IFFALSE 42384
// begin tmp := CostOfWeapon ( weapon ) ;
42272: LD_ADDR_VAR 0 14
42276: PUSH
42277: LD_VAR 0 18
42281: PPUSH
42282: CALL_OW 451
42286: ST_TO_ADDR
// j := GetBase ( tower ) ;
42287: LD_ADDR_VAR 0 9
42291: PUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 274
42301: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42302: LD_VAR 0 9
42306: PPUSH
42307: LD_INT 1
42309: PPUSH
42310: CALL_OW 275
42314: PUSH
42315: LD_VAR 0 14
42319: PUSH
42320: LD_INT 1
42322: ARRAY
42323: GREATEREQUAL
42324: PUSH
42325: LD_VAR 0 9
42329: PPUSH
42330: LD_INT 2
42332: PPUSH
42333: CALL_OW 275
42337: PUSH
42338: LD_VAR 0 14
42342: PUSH
42343: LD_INT 2
42345: ARRAY
42346: GREATEREQUAL
42347: AND
42348: PUSH
42349: LD_VAR 0 9
42353: PPUSH
42354: LD_INT 3
42356: PPUSH
42357: CALL_OW 275
42361: PUSH
42362: LD_VAR 0 14
42366: PUSH
42367: LD_INT 3
42369: ARRAY
42370: GREATEREQUAL
42371: AND
42372: IFFALSE 42384
// result := weapon ;
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_VAR 0 18
42383: ST_TO_ADDR
// end ; end ;
42384: LD_VAR 0 3
42388: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42389: LD_INT 0
42391: PPUSH
42392: PPUSH
// result := true ;
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: LD_INT 1
42400: ST_TO_ADDR
// if array1 = array2 then
42401: LD_VAR 0 1
42405: PUSH
42406: LD_VAR 0 2
42410: EQUAL
42411: IFFALSE 42471
// begin for i = 1 to array1 do
42413: LD_ADDR_VAR 0 4
42417: PUSH
42418: DOUBLE
42419: LD_INT 1
42421: DEC
42422: ST_TO_ADDR
42423: LD_VAR 0 1
42427: PUSH
42428: FOR_TO
42429: IFFALSE 42467
// if array1 [ i ] <> array2 [ i ] then
42431: LD_VAR 0 1
42435: PUSH
42436: LD_VAR 0 4
42440: ARRAY
42441: PUSH
42442: LD_VAR 0 2
42446: PUSH
42447: LD_VAR 0 4
42451: ARRAY
42452: NONEQUAL
42453: IFFALSE 42465
// begin result := false ;
42455: LD_ADDR_VAR 0 3
42459: PUSH
42460: LD_INT 0
42462: ST_TO_ADDR
// break ;
42463: GO 42467
// end ;
42465: GO 42428
42467: POP
42468: POP
// end else
42469: GO 42479
// result := false ;
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_INT 0
42478: ST_TO_ADDR
// end ;
42479: LD_VAR 0 3
42483: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42484: LD_INT 0
42486: PPUSH
42487: PPUSH
// if not array1 or not array2 then
42488: LD_VAR 0 1
42492: NOT
42493: PUSH
42494: LD_VAR 0 2
42498: NOT
42499: OR
42500: IFFALSE 42504
// exit ;
42502: GO 42568
// result := true ;
42504: LD_ADDR_VAR 0 3
42508: PUSH
42509: LD_INT 1
42511: ST_TO_ADDR
// for i = 1 to array1 do
42512: LD_ADDR_VAR 0 4
42516: PUSH
42517: DOUBLE
42518: LD_INT 1
42520: DEC
42521: ST_TO_ADDR
42522: LD_VAR 0 1
42526: PUSH
42527: FOR_TO
42528: IFFALSE 42566
// if array1 [ i ] <> array2 [ i ] then
42530: LD_VAR 0 1
42534: PUSH
42535: LD_VAR 0 4
42539: ARRAY
42540: PUSH
42541: LD_VAR 0 2
42545: PUSH
42546: LD_VAR 0 4
42550: ARRAY
42551: NONEQUAL
42552: IFFALSE 42564
// begin result := false ;
42554: LD_ADDR_VAR 0 3
42558: PUSH
42559: LD_INT 0
42561: ST_TO_ADDR
// break ;
42562: GO 42566
// end ;
42564: GO 42527
42566: POP
42567: POP
// end ;
42568: LD_VAR 0 3
42572: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42573: LD_INT 0
42575: PPUSH
42576: PPUSH
42577: PPUSH
// pom := GetBase ( fac ) ;
42578: LD_ADDR_VAR 0 5
42582: PUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: CALL_OW 274
42592: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42593: LD_ADDR_VAR 0 4
42597: PUSH
42598: LD_VAR 0 2
42602: PUSH
42603: LD_INT 1
42605: ARRAY
42606: PPUSH
42607: LD_VAR 0 2
42611: PUSH
42612: LD_INT 2
42614: ARRAY
42615: PPUSH
42616: LD_VAR 0 2
42620: PUSH
42621: LD_INT 3
42623: ARRAY
42624: PPUSH
42625: LD_VAR 0 2
42629: PUSH
42630: LD_INT 4
42632: ARRAY
42633: PPUSH
42634: CALL_OW 449
42638: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42639: LD_ADDR_VAR 0 3
42643: PUSH
42644: LD_VAR 0 5
42648: PPUSH
42649: LD_INT 1
42651: PPUSH
42652: CALL_OW 275
42656: PUSH
42657: LD_VAR 0 4
42661: PUSH
42662: LD_INT 1
42664: ARRAY
42665: GREATEREQUAL
42666: PUSH
42667: LD_VAR 0 5
42671: PPUSH
42672: LD_INT 2
42674: PPUSH
42675: CALL_OW 275
42679: PUSH
42680: LD_VAR 0 4
42684: PUSH
42685: LD_INT 2
42687: ARRAY
42688: GREATEREQUAL
42689: AND
42690: PUSH
42691: LD_VAR 0 5
42695: PPUSH
42696: LD_INT 3
42698: PPUSH
42699: CALL_OW 275
42703: PUSH
42704: LD_VAR 0 4
42708: PUSH
42709: LD_INT 3
42711: ARRAY
42712: GREATEREQUAL
42713: AND
42714: ST_TO_ADDR
// end ;
42715: LD_VAR 0 3
42719: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42720: LD_INT 0
42722: PPUSH
42723: PPUSH
42724: PPUSH
42725: PPUSH
// pom := GetBase ( building ) ;
42726: LD_ADDR_VAR 0 3
42730: PUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 274
42740: ST_TO_ADDR
// if not pom then
42741: LD_VAR 0 3
42745: NOT
42746: IFFALSE 42750
// exit ;
42748: GO 42920
// btype := GetBType ( building ) ;
42750: LD_ADDR_VAR 0 5
42754: PUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL_OW 266
42764: ST_TO_ADDR
// if btype = b_armoury then
42765: LD_VAR 0 5
42769: PUSH
42770: LD_INT 4
42772: EQUAL
42773: IFFALSE 42783
// btype := b_barracks ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_INT 5
42782: ST_TO_ADDR
// if btype = b_depot then
42783: LD_VAR 0 5
42787: PUSH
42788: LD_INT 0
42790: EQUAL
42791: IFFALSE 42801
// btype := b_warehouse ;
42793: LD_ADDR_VAR 0 5
42797: PUSH
42798: LD_INT 1
42800: ST_TO_ADDR
// if btype = b_workshop then
42801: LD_VAR 0 5
42805: PUSH
42806: LD_INT 2
42808: EQUAL
42809: IFFALSE 42819
// btype := b_factory ;
42811: LD_ADDR_VAR 0 5
42815: PUSH
42816: LD_INT 3
42818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42819: LD_ADDR_VAR 0 4
42823: PUSH
42824: LD_VAR 0 5
42828: PPUSH
42829: LD_VAR 0 1
42833: PPUSH
42834: CALL_OW 248
42838: PPUSH
42839: CALL_OW 450
42843: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42844: LD_ADDR_VAR 0 2
42848: PUSH
42849: LD_VAR 0 3
42853: PPUSH
42854: LD_INT 1
42856: PPUSH
42857: CALL_OW 275
42861: PUSH
42862: LD_VAR 0 4
42866: PUSH
42867: LD_INT 1
42869: ARRAY
42870: GREATEREQUAL
42871: PUSH
42872: LD_VAR 0 3
42876: PPUSH
42877: LD_INT 2
42879: PPUSH
42880: CALL_OW 275
42884: PUSH
42885: LD_VAR 0 4
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: GREATEREQUAL
42894: AND
42895: PUSH
42896: LD_VAR 0 3
42900: PPUSH
42901: LD_INT 3
42903: PPUSH
42904: CALL_OW 275
42908: PUSH
42909: LD_VAR 0 4
42913: PUSH
42914: LD_INT 3
42916: ARRAY
42917: GREATEREQUAL
42918: AND
42919: ST_TO_ADDR
// end ;
42920: LD_VAR 0 2
42924: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42925: LD_INT 0
42927: PPUSH
42928: PPUSH
42929: PPUSH
// pom := GetBase ( building ) ;
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 274
42944: ST_TO_ADDR
// if not pom then
42945: LD_VAR 0 4
42949: NOT
42950: IFFALSE 42954
// exit ;
42952: GO 43055
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42954: LD_ADDR_VAR 0 5
42958: PUSH
42959: LD_VAR 0 2
42963: PPUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 248
42973: PPUSH
42974: CALL_OW 450
42978: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_VAR 0 4
42988: PPUSH
42989: LD_INT 1
42991: PPUSH
42992: CALL_OW 275
42996: PUSH
42997: LD_VAR 0 5
43001: PUSH
43002: LD_INT 1
43004: ARRAY
43005: GREATEREQUAL
43006: PUSH
43007: LD_VAR 0 4
43011: PPUSH
43012: LD_INT 2
43014: PPUSH
43015: CALL_OW 275
43019: PUSH
43020: LD_VAR 0 5
43024: PUSH
43025: LD_INT 2
43027: ARRAY
43028: GREATEREQUAL
43029: AND
43030: PUSH
43031: LD_VAR 0 4
43035: PPUSH
43036: LD_INT 3
43038: PPUSH
43039: CALL_OW 275
43043: PUSH
43044: LD_VAR 0 5
43048: PUSH
43049: LD_INT 3
43051: ARRAY
43052: GREATEREQUAL
43053: AND
43054: ST_TO_ADDR
// end ;
43055: LD_VAR 0 3
43059: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43060: LD_INT 0
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
// result := false ;
43073: LD_ADDR_VAR 0 8
43077: PUSH
43078: LD_INT 0
43080: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43081: LD_VAR 0 5
43085: NOT
43086: PUSH
43087: LD_VAR 0 1
43091: NOT
43092: OR
43093: PUSH
43094: LD_VAR 0 2
43098: NOT
43099: OR
43100: PUSH
43101: LD_VAR 0 3
43105: NOT
43106: OR
43107: IFFALSE 43111
// exit ;
43109: GO 43925
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43111: LD_ADDR_VAR 0 14
43115: PUSH
43116: LD_VAR 0 1
43120: PPUSH
43121: LD_VAR 0 2
43125: PPUSH
43126: LD_VAR 0 3
43130: PPUSH
43131: LD_VAR 0 4
43135: PPUSH
43136: LD_VAR 0 5
43140: PUSH
43141: LD_INT 1
43143: ARRAY
43144: PPUSH
43145: CALL_OW 248
43149: PPUSH
43150: LD_INT 0
43152: PPUSH
43153: CALL 45158 0 6
43157: ST_TO_ADDR
// if not hexes then
43158: LD_VAR 0 14
43162: NOT
43163: IFFALSE 43167
// exit ;
43165: GO 43925
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43167: LD_ADDR_VAR 0 17
43171: PUSH
43172: LD_VAR 0 5
43176: PPUSH
43177: LD_INT 22
43179: PUSH
43180: LD_VAR 0 13
43184: PPUSH
43185: CALL_OW 255
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: LD_INT 30
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 30
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PPUSH
43226: CALL_OW 72
43230: ST_TO_ADDR
// for i = 1 to hexes do
43231: LD_ADDR_VAR 0 9
43235: PUSH
43236: DOUBLE
43237: LD_INT 1
43239: DEC
43240: ST_TO_ADDR
43241: LD_VAR 0 14
43245: PUSH
43246: FOR_TO
43247: IFFALSE 43923
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43249: LD_ADDR_VAR 0 13
43253: PUSH
43254: LD_VAR 0 14
43258: PUSH
43259: LD_VAR 0 9
43263: ARRAY
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: PPUSH
43269: LD_VAR 0 14
43273: PUSH
43274: LD_VAR 0 9
43278: ARRAY
43279: PUSH
43280: LD_INT 2
43282: ARRAY
43283: PPUSH
43284: CALL_OW 428
43288: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43289: LD_VAR 0 14
43293: PUSH
43294: LD_VAR 0 9
43298: ARRAY
43299: PUSH
43300: LD_INT 1
43302: ARRAY
43303: PPUSH
43304: LD_VAR 0 14
43308: PUSH
43309: LD_VAR 0 9
43313: ARRAY
43314: PUSH
43315: LD_INT 2
43317: ARRAY
43318: PPUSH
43319: CALL_OW 351
43323: PUSH
43324: LD_VAR 0 14
43328: PUSH
43329: LD_VAR 0 9
43333: ARRAY
43334: PUSH
43335: LD_INT 1
43337: ARRAY
43338: PPUSH
43339: LD_VAR 0 14
43343: PUSH
43344: LD_VAR 0 9
43348: ARRAY
43349: PUSH
43350: LD_INT 2
43352: ARRAY
43353: PPUSH
43354: CALL_OW 488
43358: NOT
43359: OR
43360: PUSH
43361: LD_VAR 0 13
43365: PPUSH
43366: CALL_OW 247
43370: PUSH
43371: LD_INT 3
43373: EQUAL
43374: OR
43375: IFFALSE 43381
// exit ;
43377: POP
43378: POP
43379: GO 43925
// if not tmp then
43381: LD_VAR 0 13
43385: NOT
43386: IFFALSE 43390
// continue ;
43388: GO 43246
// result := true ;
43390: LD_ADDR_VAR 0 8
43394: PUSH
43395: LD_INT 1
43397: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43398: LD_VAR 0 6
43402: PUSH
43403: LD_VAR 0 13
43407: PPUSH
43408: CALL_OW 247
43412: PUSH
43413: LD_INT 2
43415: EQUAL
43416: AND
43417: PUSH
43418: LD_VAR 0 13
43422: PPUSH
43423: CALL_OW 263
43427: PUSH
43428: LD_INT 1
43430: EQUAL
43431: AND
43432: IFFALSE 43596
// begin if IsDrivenBy ( tmp ) then
43434: LD_VAR 0 13
43438: PPUSH
43439: CALL_OW 311
43443: IFFALSE 43447
// continue ;
43445: GO 43246
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43447: LD_VAR 0 6
43451: PPUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 60
43457: PUSH
43458: EMPTY
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: LD_INT 55
43470: PUSH
43471: EMPTY
43472: LIST
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PPUSH
43482: CALL_OW 72
43486: IFFALSE 43594
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43488: LD_ADDR_VAR 0 18
43492: PUSH
43493: LD_VAR 0 6
43497: PPUSH
43498: LD_INT 3
43500: PUSH
43501: LD_INT 60
43503: PUSH
43504: EMPTY
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 55
43516: PUSH
43517: EMPTY
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PPUSH
43528: CALL_OW 72
43532: PUSH
43533: LD_INT 1
43535: ARRAY
43536: ST_TO_ADDR
// if IsInUnit ( driver ) then
43537: LD_VAR 0 18
43541: PPUSH
43542: CALL_OW 310
43546: IFFALSE 43557
// ComExit ( driver ) ;
43548: LD_VAR 0 18
43552: PPUSH
43553: CALL 68938 0 1
// AddComEnterUnit ( driver , tmp ) ;
43557: LD_VAR 0 18
43561: PPUSH
43562: LD_VAR 0 13
43566: PPUSH
43567: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43571: LD_VAR 0 18
43575: PPUSH
43576: LD_VAR 0 7
43580: PPUSH
43581: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43585: LD_VAR 0 18
43589: PPUSH
43590: CALL_OW 181
// end ; continue ;
43594: GO 43246
// end ; if not cleaners or not tmp in cleaners then
43596: LD_VAR 0 6
43600: NOT
43601: PUSH
43602: LD_VAR 0 13
43606: PUSH
43607: LD_VAR 0 6
43611: IN
43612: NOT
43613: OR
43614: IFFALSE 43921
// begin if dep then
43616: LD_VAR 0 17
43620: IFFALSE 43756
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43622: LD_ADDR_VAR 0 16
43626: PUSH
43627: LD_VAR 0 17
43631: PUSH
43632: LD_INT 1
43634: ARRAY
43635: PPUSH
43636: CALL_OW 250
43640: PPUSH
43641: LD_VAR 0 17
43645: PUSH
43646: LD_INT 1
43648: ARRAY
43649: PPUSH
43650: CALL_OW 254
43654: PPUSH
43655: LD_INT 5
43657: PPUSH
43658: CALL_OW 272
43662: PUSH
43663: LD_VAR 0 17
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: PPUSH
43672: CALL_OW 251
43676: PPUSH
43677: LD_VAR 0 17
43681: PUSH
43682: LD_INT 1
43684: ARRAY
43685: PPUSH
43686: CALL_OW 254
43690: PPUSH
43691: LD_INT 5
43693: PPUSH
43694: CALL_OW 273
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43703: LD_VAR 0 16
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: LD_VAR 0 16
43716: PUSH
43717: LD_INT 2
43719: ARRAY
43720: PPUSH
43721: CALL_OW 488
43725: IFFALSE 43756
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43727: LD_VAR 0 13
43731: PPUSH
43732: LD_VAR 0 16
43736: PUSH
43737: LD_INT 1
43739: ARRAY
43740: PPUSH
43741: LD_VAR 0 16
43745: PUSH
43746: LD_INT 2
43748: ARRAY
43749: PPUSH
43750: CALL_OW 111
// continue ;
43754: GO 43246
// end ; end ; r := GetDir ( tmp ) ;
43756: LD_ADDR_VAR 0 15
43760: PUSH
43761: LD_VAR 0 13
43765: PPUSH
43766: CALL_OW 254
43770: ST_TO_ADDR
// if r = 5 then
43771: LD_VAR 0 15
43775: PUSH
43776: LD_INT 5
43778: EQUAL
43779: IFFALSE 43789
// r := 0 ;
43781: LD_ADDR_VAR 0 15
43785: PUSH
43786: LD_INT 0
43788: ST_TO_ADDR
// for j = r to 5 do
43789: LD_ADDR_VAR 0 10
43793: PUSH
43794: DOUBLE
43795: LD_VAR 0 15
43799: DEC
43800: ST_TO_ADDR
43801: LD_INT 5
43803: PUSH
43804: FOR_TO
43805: IFFALSE 43919
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43807: LD_ADDR_VAR 0 11
43811: PUSH
43812: LD_VAR 0 13
43816: PPUSH
43817: CALL_OW 250
43821: PPUSH
43822: LD_VAR 0 10
43826: PPUSH
43827: LD_INT 2
43829: PPUSH
43830: CALL_OW 272
43834: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43835: LD_ADDR_VAR 0 12
43839: PUSH
43840: LD_VAR 0 13
43844: PPUSH
43845: CALL_OW 251
43849: PPUSH
43850: LD_VAR 0 10
43854: PPUSH
43855: LD_INT 2
43857: PPUSH
43858: CALL_OW 273
43862: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43863: LD_VAR 0 11
43867: PPUSH
43868: LD_VAR 0 12
43872: PPUSH
43873: CALL_OW 488
43877: PUSH
43878: LD_VAR 0 11
43882: PPUSH
43883: LD_VAR 0 12
43887: PPUSH
43888: CALL_OW 428
43892: NOT
43893: AND
43894: IFFALSE 43917
// begin ComMoveXY ( tmp , _x , _y ) ;
43896: LD_VAR 0 13
43900: PPUSH
43901: LD_VAR 0 11
43905: PPUSH
43906: LD_VAR 0 12
43910: PPUSH
43911: CALL_OW 111
// break ;
43915: GO 43919
// end ; end ;
43917: GO 43804
43919: POP
43920: POP
// end ; end ;
43921: GO 43246
43923: POP
43924: POP
// end ;
43925: LD_VAR 0 8
43929: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43930: LD_INT 0
43932: PPUSH
// result := true ;
43933: LD_ADDR_VAR 0 3
43937: PUSH
43938: LD_INT 1
43940: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43941: LD_VAR 0 2
43945: PUSH
43946: LD_INT 24
43948: DOUBLE
43949: EQUAL
43950: IFTRUE 43960
43952: LD_INT 33
43954: DOUBLE
43955: EQUAL
43956: IFTRUE 43960
43958: GO 43985
43960: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43961: LD_ADDR_VAR 0 3
43965: PUSH
43966: LD_INT 32
43968: PPUSH
43969: LD_VAR 0 1
43973: PPUSH
43974: CALL_OW 321
43978: PUSH
43979: LD_INT 2
43981: EQUAL
43982: ST_TO_ADDR
43983: GO 44301
43985: LD_INT 20
43987: DOUBLE
43988: EQUAL
43989: IFTRUE 43993
43991: GO 44018
43993: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43994: LD_ADDR_VAR 0 3
43998: PUSH
43999: LD_INT 6
44001: PPUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 321
44011: PUSH
44012: LD_INT 2
44014: EQUAL
44015: ST_TO_ADDR
44016: GO 44301
44018: LD_INT 22
44020: DOUBLE
44021: EQUAL
44022: IFTRUE 44032
44024: LD_INT 36
44026: DOUBLE
44027: EQUAL
44028: IFTRUE 44032
44030: GO 44057
44032: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_INT 15
44040: PPUSH
44041: LD_VAR 0 1
44045: PPUSH
44046: CALL_OW 321
44050: PUSH
44051: LD_INT 2
44053: EQUAL
44054: ST_TO_ADDR
44055: GO 44301
44057: LD_INT 30
44059: DOUBLE
44060: EQUAL
44061: IFTRUE 44065
44063: GO 44090
44065: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44066: LD_ADDR_VAR 0 3
44070: PUSH
44071: LD_INT 20
44073: PPUSH
44074: LD_VAR 0 1
44078: PPUSH
44079: CALL_OW 321
44083: PUSH
44084: LD_INT 2
44086: EQUAL
44087: ST_TO_ADDR
44088: GO 44301
44090: LD_INT 28
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44104
44096: LD_INT 21
44098: DOUBLE
44099: EQUAL
44100: IFTRUE 44104
44102: GO 44129
44104: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44105: LD_ADDR_VAR 0 3
44109: PUSH
44110: LD_INT 21
44112: PPUSH
44113: LD_VAR 0 1
44117: PPUSH
44118: CALL_OW 321
44122: PUSH
44123: LD_INT 2
44125: EQUAL
44126: ST_TO_ADDR
44127: GO 44301
44129: LD_INT 16
44131: DOUBLE
44132: EQUAL
44133: IFTRUE 44137
44135: GO 44162
44137: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_INT 84
44145: PPUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: CALL_OW 321
44155: PUSH
44156: LD_INT 2
44158: EQUAL
44159: ST_TO_ADDR
44160: GO 44301
44162: LD_INT 19
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44176
44168: LD_INT 23
44170: DOUBLE
44171: EQUAL
44172: IFTRUE 44176
44174: GO 44201
44176: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_INT 83
44184: PPUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: CALL_OW 321
44194: PUSH
44195: LD_INT 2
44197: EQUAL
44198: ST_TO_ADDR
44199: GO 44301
44201: LD_INT 17
44203: DOUBLE
44204: EQUAL
44205: IFTRUE 44209
44207: GO 44234
44209: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_INT 39
44217: PPUSH
44218: LD_VAR 0 1
44222: PPUSH
44223: CALL_OW 321
44227: PUSH
44228: LD_INT 2
44230: EQUAL
44231: ST_TO_ADDR
44232: GO 44301
44234: LD_INT 18
44236: DOUBLE
44237: EQUAL
44238: IFTRUE 44242
44240: GO 44267
44242: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44243: LD_ADDR_VAR 0 3
44247: PUSH
44248: LD_INT 40
44250: PPUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 321
44260: PUSH
44261: LD_INT 2
44263: EQUAL
44264: ST_TO_ADDR
44265: GO 44301
44267: LD_INT 27
44269: DOUBLE
44270: EQUAL
44271: IFTRUE 44275
44273: GO 44300
44275: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44276: LD_ADDR_VAR 0 3
44280: PUSH
44281: LD_INT 35
44283: PPUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 321
44293: PUSH
44294: LD_INT 2
44296: EQUAL
44297: ST_TO_ADDR
44298: GO 44301
44300: POP
// end ;
44301: LD_VAR 0 3
44305: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44306: LD_INT 0
44308: PPUSH
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
// result := false ;
44319: LD_ADDR_VAR 0 6
44323: PUSH
44324: LD_INT 0
44326: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44327: LD_VAR 0 1
44331: NOT
44332: PUSH
44333: LD_VAR 0 1
44337: PPUSH
44338: CALL_OW 266
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: IN
44353: NOT
44354: OR
44355: PUSH
44356: LD_VAR 0 2
44360: NOT
44361: OR
44362: PUSH
44363: LD_VAR 0 5
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: LD_INT 4
44382: PUSH
44383: LD_INT 5
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: IN
44394: NOT
44395: OR
44396: PUSH
44397: LD_VAR 0 3
44401: PPUSH
44402: LD_VAR 0 4
44406: PPUSH
44407: CALL_OW 488
44411: NOT
44412: OR
44413: IFFALSE 44417
// exit ;
44415: GO 45153
// side := GetSide ( depot ) ;
44417: LD_ADDR_VAR 0 9
44421: PUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 255
44431: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44432: LD_VAR 0 9
44436: PPUSH
44437: LD_VAR 0 2
44441: PPUSH
44442: CALL 43930 0 2
44446: NOT
44447: IFFALSE 44451
// exit ;
44449: GO 45153
// pom := GetBase ( depot ) ;
44451: LD_ADDR_VAR 0 10
44455: PUSH
44456: LD_VAR 0 1
44460: PPUSH
44461: CALL_OW 274
44465: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44466: LD_ADDR_VAR 0 11
44470: PUSH
44471: LD_VAR 0 2
44475: PPUSH
44476: LD_VAR 0 1
44480: PPUSH
44481: CALL_OW 248
44485: PPUSH
44486: CALL_OW 450
44490: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44491: LD_VAR 0 10
44495: PPUSH
44496: LD_INT 1
44498: PPUSH
44499: CALL_OW 275
44503: PUSH
44504: LD_VAR 0 11
44508: PUSH
44509: LD_INT 1
44511: ARRAY
44512: GREATEREQUAL
44513: PUSH
44514: LD_VAR 0 10
44518: PPUSH
44519: LD_INT 2
44521: PPUSH
44522: CALL_OW 275
44526: PUSH
44527: LD_VAR 0 11
44531: PUSH
44532: LD_INT 2
44534: ARRAY
44535: GREATEREQUAL
44536: AND
44537: PUSH
44538: LD_VAR 0 10
44542: PPUSH
44543: LD_INT 3
44545: PPUSH
44546: CALL_OW 275
44550: PUSH
44551: LD_VAR 0 11
44555: PUSH
44556: LD_INT 3
44558: ARRAY
44559: GREATEREQUAL
44560: AND
44561: NOT
44562: IFFALSE 44566
// exit ;
44564: GO 45153
// if GetBType ( depot ) = b_depot then
44566: LD_VAR 0 1
44570: PPUSH
44571: CALL_OW 266
44575: PUSH
44576: LD_INT 0
44578: EQUAL
44579: IFFALSE 44591
// dist := 28 else
44581: LD_ADDR_VAR 0 14
44585: PUSH
44586: LD_INT 28
44588: ST_TO_ADDR
44589: GO 44599
// dist := 36 ;
44591: LD_ADDR_VAR 0 14
44595: PUSH
44596: LD_INT 36
44598: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44599: LD_VAR 0 1
44603: PPUSH
44604: LD_VAR 0 3
44608: PPUSH
44609: LD_VAR 0 4
44613: PPUSH
44614: CALL_OW 297
44618: PUSH
44619: LD_VAR 0 14
44623: GREATER
44624: IFFALSE 44628
// exit ;
44626: GO 45153
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44628: LD_ADDR_VAR 0 12
44632: PUSH
44633: LD_VAR 0 2
44637: PPUSH
44638: LD_VAR 0 3
44642: PPUSH
44643: LD_VAR 0 4
44647: PPUSH
44648: LD_VAR 0 5
44652: PPUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: CALL_OW 248
44662: PPUSH
44663: LD_INT 0
44665: PPUSH
44666: CALL 45158 0 6
44670: ST_TO_ADDR
// if not hexes then
44671: LD_VAR 0 12
44675: NOT
44676: IFFALSE 44680
// exit ;
44678: GO 45153
// hex := GetHexInfo ( x , y ) ;
44680: LD_ADDR_VAR 0 15
44684: PUSH
44685: LD_VAR 0 3
44689: PPUSH
44690: LD_VAR 0 4
44694: PPUSH
44695: CALL_OW 546
44699: ST_TO_ADDR
// if hex [ 1 ] then
44700: LD_VAR 0 15
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: IFFALSE 44712
// exit ;
44710: GO 45153
// height := hex [ 2 ] ;
44712: LD_ADDR_VAR 0 13
44716: PUSH
44717: LD_VAR 0 15
44721: PUSH
44722: LD_INT 2
44724: ARRAY
44725: ST_TO_ADDR
// for i = 1 to hexes do
44726: LD_ADDR_VAR 0 7
44730: PUSH
44731: DOUBLE
44732: LD_INT 1
44734: DEC
44735: ST_TO_ADDR
44736: LD_VAR 0 12
44740: PUSH
44741: FOR_TO
44742: IFFALSE 45072
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44744: LD_VAR 0 12
44748: PUSH
44749: LD_VAR 0 7
44753: ARRAY
44754: PUSH
44755: LD_INT 1
44757: ARRAY
44758: PPUSH
44759: LD_VAR 0 12
44763: PUSH
44764: LD_VAR 0 7
44768: ARRAY
44769: PUSH
44770: LD_INT 2
44772: ARRAY
44773: PPUSH
44774: CALL_OW 488
44778: NOT
44779: PUSH
44780: LD_VAR 0 12
44784: PUSH
44785: LD_VAR 0 7
44789: ARRAY
44790: PUSH
44791: LD_INT 1
44793: ARRAY
44794: PPUSH
44795: LD_VAR 0 12
44799: PUSH
44800: LD_VAR 0 7
44804: ARRAY
44805: PUSH
44806: LD_INT 2
44808: ARRAY
44809: PPUSH
44810: CALL_OW 428
44814: PUSH
44815: LD_INT 0
44817: GREATER
44818: OR
44819: PUSH
44820: LD_VAR 0 12
44824: PUSH
44825: LD_VAR 0 7
44829: ARRAY
44830: PUSH
44831: LD_INT 1
44833: ARRAY
44834: PPUSH
44835: LD_VAR 0 12
44839: PUSH
44840: LD_VAR 0 7
44844: ARRAY
44845: PUSH
44846: LD_INT 2
44848: ARRAY
44849: PPUSH
44850: CALL_OW 351
44854: OR
44855: IFFALSE 44861
// exit ;
44857: POP
44858: POP
44859: GO 45153
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44861: LD_ADDR_VAR 0 8
44865: PUSH
44866: LD_VAR 0 12
44870: PUSH
44871: LD_VAR 0 7
44875: ARRAY
44876: PUSH
44877: LD_INT 1
44879: ARRAY
44880: PPUSH
44881: LD_VAR 0 12
44885: PUSH
44886: LD_VAR 0 7
44890: ARRAY
44891: PUSH
44892: LD_INT 2
44894: ARRAY
44895: PPUSH
44896: CALL_OW 546
44900: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44901: LD_VAR 0 8
44905: PUSH
44906: LD_INT 1
44908: ARRAY
44909: PUSH
44910: LD_VAR 0 8
44914: PUSH
44915: LD_INT 2
44917: ARRAY
44918: PUSH
44919: LD_VAR 0 13
44923: PUSH
44924: LD_INT 2
44926: PLUS
44927: GREATER
44928: OR
44929: PUSH
44930: LD_VAR 0 8
44934: PUSH
44935: LD_INT 2
44937: ARRAY
44938: PUSH
44939: LD_VAR 0 13
44943: PUSH
44944: LD_INT 2
44946: MINUS
44947: LESS
44948: OR
44949: PUSH
44950: LD_VAR 0 8
44954: PUSH
44955: LD_INT 3
44957: ARRAY
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 8
44964: PUSH
44965: LD_INT 9
44967: PUSH
44968: LD_INT 10
44970: PUSH
44971: LD_INT 11
44973: PUSH
44974: LD_INT 12
44976: PUSH
44977: LD_INT 13
44979: PUSH
44980: LD_INT 16
44982: PUSH
44983: LD_INT 17
44985: PUSH
44986: LD_INT 18
44988: PUSH
44989: LD_INT 19
44991: PUSH
44992: LD_INT 20
44994: PUSH
44995: LD_INT 21
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: IN
45013: NOT
45014: OR
45015: PUSH
45016: LD_VAR 0 8
45020: PUSH
45021: LD_INT 5
45023: ARRAY
45024: NOT
45025: OR
45026: PUSH
45027: LD_VAR 0 8
45031: PUSH
45032: LD_INT 6
45034: ARRAY
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 7
45044: PUSH
45045: LD_INT 9
45047: PUSH
45048: LD_INT 10
45050: PUSH
45051: LD_INT 11
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: IN
45062: NOT
45063: OR
45064: IFFALSE 45070
// exit ;
45066: POP
45067: POP
45068: GO 45153
// end ;
45070: GO 44741
45072: POP
45073: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45074: LD_VAR 0 9
45078: PPUSH
45079: LD_VAR 0 3
45083: PPUSH
45084: LD_VAR 0 4
45088: PPUSH
45089: LD_INT 20
45091: PPUSH
45092: CALL 37105 0 4
45096: PUSH
45097: LD_INT 4
45099: ARRAY
45100: IFFALSE 45104
// exit ;
45102: GO 45153
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45104: LD_VAR 0 2
45108: PUSH
45109: LD_INT 29
45111: PUSH
45112: LD_INT 30
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: IN
45119: PUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: LD_VAR 0 4
45129: PPUSH
45130: LD_VAR 0 9
45134: PPUSH
45135: CALL_OW 440
45139: NOT
45140: AND
45141: IFFALSE 45145
// exit ;
45143: GO 45153
// result := true ;
45145: LD_ADDR_VAR 0 6
45149: PUSH
45150: LD_INT 1
45152: ST_TO_ADDR
// end ;
45153: LD_VAR 0 6
45157: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45158: LD_INT 0
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
// result = [ ] ;
45218: LD_ADDR_VAR 0 7
45222: PUSH
45223: EMPTY
45224: ST_TO_ADDR
// temp_list = [ ] ;
45225: LD_ADDR_VAR 0 9
45229: PUSH
45230: EMPTY
45231: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45232: LD_VAR 0 4
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 4
45251: PUSH
45252: LD_INT 5
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: IN
45263: NOT
45264: PUSH
45265: LD_VAR 0 1
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: IN
45280: PUSH
45281: LD_VAR 0 5
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: IN
45300: NOT
45301: AND
45302: OR
45303: IFFALSE 45307
// exit ;
45305: GO 63698
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45307: LD_VAR 0 1
45311: PUSH
45312: LD_INT 6
45314: PUSH
45315: LD_INT 7
45317: PUSH
45318: LD_INT 8
45320: PUSH
45321: LD_INT 13
45323: PUSH
45324: LD_INT 12
45326: PUSH
45327: LD_INT 15
45329: PUSH
45330: LD_INT 11
45332: PUSH
45333: LD_INT 14
45335: PUSH
45336: LD_INT 10
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: IN
45350: IFFALSE 45360
// btype = b_lab ;
45352: LD_ADDR_VAR 0 1
45356: PUSH
45357: LD_INT 6
45359: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45360: LD_VAR 0 6
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: IN
45379: NOT
45380: PUSH
45381: LD_VAR 0 1
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 6
45400: PUSH
45401: LD_INT 36
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: LD_INT 5
45409: PUSH
45410: LD_INT 31
45412: PUSH
45413: LD_INT 32
45415: PUSH
45416: LD_INT 33
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: IN
45432: NOT
45433: PUSH
45434: LD_VAR 0 6
45438: PUSH
45439: LD_INT 1
45441: EQUAL
45442: AND
45443: OR
45444: PUSH
45445: LD_VAR 0 1
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: IN
45460: NOT
45461: PUSH
45462: LD_VAR 0 6
45466: PUSH
45467: LD_INT 2
45469: EQUAL
45470: AND
45471: OR
45472: IFFALSE 45482
// mode = 0 ;
45474: LD_ADDR_VAR 0 6
45478: PUSH
45479: LD_INT 0
45481: ST_TO_ADDR
// case mode of 0 :
45482: LD_VAR 0 6
45486: PUSH
45487: LD_INT 0
45489: DOUBLE
45490: EQUAL
45491: IFTRUE 45495
45493: GO 56948
45495: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45496: LD_ADDR_VAR 0 11
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45689: LD_ADDR_VAR 0 12
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45885: LD_ADDR_VAR 0 13
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 3
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46084: LD_ADDR_VAR 0 14
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46280: LD_ADDR_VAR 0 15
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46473: LD_ADDR_VAR 0 16
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46666: LD_ADDR_VAR 0 17
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46896: LD_ADDR_VAR 0 18
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47126: LD_ADDR_VAR 0 19
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47356: LD_ADDR_VAR 0 20
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47586: LD_ADDR_VAR 0 21
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47816: LD_ADDR_VAR 0 22
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48046: LD_ADDR_VAR 0 23
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 3
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48326: LD_ADDR_VAR 0 24
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48602: LD_ADDR_VAR 0 25
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 3
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 3
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 3
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48876: LD_ADDR_VAR 0 26
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: LD_INT 3
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49152: LD_ADDR_VAR 0 27
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49432: LD_ADDR_VAR 0 28
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49714: LD_ADDR_VAR 0 29
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49993: LD_ADDR_VAR 0 30
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50271: LD_ADDR_VAR 0 31
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50549: LD_ADDR_VAR 0 32
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 3
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50827: LD_ADDR_VAR 0 33
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51106: LD_ADDR_VAR 0 34
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51386: LD_ADDR_VAR 0 35
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51498: LD_ADDR_VAR 0 36
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51610: LD_ADDR_VAR 0 37
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51722: LD_ADDR_VAR 0 38
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51834: LD_ADDR_VAR 0 39
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51946: LD_ADDR_VAR 0 40
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52058: LD_ADDR_VAR 0 41
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 3
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52408: LD_ADDR_VAR 0 42
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52758: LD_ADDR_VAR 0 43
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53106: LD_ADDR_VAR 0 44
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 3
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: NEG
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: LD_INT 3
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53456: LD_ADDR_VAR 0 45
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 3
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53806: LD_ADDR_VAR 0 46
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54154: LD_ADDR_VAR 0 47
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54305: LD_ADDR_VAR 0 48
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54452: LD_ADDR_VAR 0 49
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54596: LD_ADDR_VAR 0 50
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54740: LD_ADDR_VAR 0 51
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54887: LD_ADDR_VAR 0 52
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55038: LD_ADDR_VAR 0 53
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55268: LD_ADDR_VAR 0 54
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55498: LD_ADDR_VAR 0 55
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55728: LD_ADDR_VAR 0 56
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55958: LD_ADDR_VAR 0 57
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56188: LD_ADDR_VAR 0 58
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56418: LD_ADDR_VAR 0 59
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56506: LD_ADDR_VAR 0 60
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56594: LD_ADDR_VAR 0 61
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56682: LD_ADDR_VAR 0 62
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56770: LD_ADDR_VAR 0 63
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56858: LD_ADDR_VAR 0 64
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// end ; 1 :
56946: GO 62843
56948: LD_INT 1
56950: DOUBLE
56951: EQUAL
56952: IFTRUE 56956
56954: GO 59579
56956: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56957: LD_ADDR_VAR 0 11
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 3
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57001: LD_ADDR_VAR 0 12
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57042: LD_ADDR_VAR 0 13
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 3
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57082: LD_ADDR_VAR 0 14
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57123: LD_ADDR_VAR 0 15
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57167: LD_ADDR_VAR 0 16
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: LIST
57212: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57213: LD_ADDR_VAR 0 17
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57257: LD_ADDR_VAR 0 18
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57298: LD_ADDR_VAR 0 19
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 3
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: LIST
57337: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57338: LD_ADDR_VAR 0 20
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57379: LD_ADDR_VAR 0 21
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57423: LD_ADDR_VAR 0 22
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57469: LD_ADDR_VAR 0 23
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 4
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57513: LD_ADDR_VAR 0 24
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57554: LD_ADDR_VAR 0 25
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 4
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 4
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57594: LD_ADDR_VAR 0 26
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 4
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57635: LD_ADDR_VAR 0 27
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57679: LD_ADDR_VAR 0 28
57683: PUSH
57684: LD_INT 3
57686: NEG
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57725: LD_ADDR_VAR 0 29
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 4
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 4
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 5
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 5
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 4
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 6
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 6
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 5
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57880: LD_ADDR_VAR 0 30
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 5
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 5
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 5
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 6
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 6
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58023: LD_ADDR_VAR 0 31
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 4
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 4
58070: PUSH
58071: LD_INT 4
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: LD_INT 4
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 5
58090: PUSH
58091: LD_INT 4
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 5
58100: PUSH
58101: LD_INT 5
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: LD_INT 5
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 6
58120: PUSH
58121: LD_INT 5
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 6
58130: PUSH
58131: LD_INT 6
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 5
58140: PUSH
58141: LD_INT 6
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58162: LD_ADDR_VAR 0 32
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 4
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 5
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 5
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 4
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 6
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 6
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 5
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58305: LD_ADDR_VAR 0 33
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 4
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 4
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 5
58391: NEG
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 5
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 5
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 6
58425: NEG
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 6
58436: NEG
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58460: LD_ADDR_VAR 0 34
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 4
58527: NEG
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 4
58539: NEG
58540: PUSH
58541: LD_INT 5
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 5
58551: NEG
58552: PUSH
58553: LD_INT 4
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 5
58563: NEG
58564: PUSH
58565: LD_INT 5
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 5
58575: NEG
58576: PUSH
58577: LD_INT 6
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 6
58587: NEG
58588: PUSH
58589: LD_INT 5
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 6
58599: NEG
58600: PUSH
58601: LD_INT 6
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58623: LD_ADDR_VAR 0 41
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58667: LD_ADDR_VAR 0 42
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58708: LD_ADDR_VAR 0 43
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: LIST
58747: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58748: LD_ADDR_VAR 0 44
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58789: LD_ADDR_VAR 0 45
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58833: LD_ADDR_VAR 0 46
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 3
58864: NEG
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: LIST
58878: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58879: LD_ADDR_VAR 0 47
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58912: LD_ADDR_VAR 0 48
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58943: LD_ADDR_VAR 0 49
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58972: LD_ADDR_VAR 0 50
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59001: LD_ADDR_VAR 0 51
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59032: LD_ADDR_VAR 0 52
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59065: LD_ADDR_VAR 0 53
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59109: LD_ADDR_VAR 0 54
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59150: LD_ADDR_VAR 0 55
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59190: LD_ADDR_VAR 0 56
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59231: LD_ADDR_VAR 0 57
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 3
59249: NEG
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59275: LD_ADDR_VAR 0 58
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59321: LD_ADDR_VAR 0 59
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59365: LD_ADDR_VAR 0 60
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59406: LD_ADDR_VAR 0 61
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59446: LD_ADDR_VAR 0 62
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59487: LD_ADDR_VAR 0 63
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59531: LD_ADDR_VAR 0 64
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: ST_TO_ADDR
// end ; 2 :
59577: GO 62843
59579: LD_INT 2
59581: DOUBLE
59582: EQUAL
59583: IFTRUE 59587
59585: GO 62842
59587: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59588: LD_ADDR_VAR 0 29
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 5
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 5
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 5
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 4
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: LD_INT 4
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 3
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 4
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 3
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 5
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 5
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 3
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: LD_INT 5
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 4
59927: NEG
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 4
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 4
59973: NEG
59974: PUSH
59975: LD_INT 4
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 5
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: LD_INT 4
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: LD_INT 5
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: LD_INT 5
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 5
60069: NEG
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60126: LD_ADDR_VAR 0 30
60130: PUSH
60131: LD_INT 4
60133: PUSH
60134: LD_INT 4
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: LD_INT 5
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: LD_INT 5
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 4
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: LD_INT 3
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 5
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: LD_INT 5
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 4
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 3
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: LD_INT 4
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 4
60316: NEG
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 4
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 4
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 5
60372: NEG
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 5
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 5
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: LD_INT 4
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 4
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 4
60514: NEG
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 4
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 5
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 3
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 4
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 5
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: LD_INT 5
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60673: LD_ADDR_VAR 0 31
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 4
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 5
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 5
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 5
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 4
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 4
60852: NEG
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 4
60875: NEG
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: NEG
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: LD_INT 3
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: NEG
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 5
60935: NEG
60936: PUSH
60937: LD_INT 4
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: LD_INT 5
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: LD_INT 5
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 5
60971: NEG
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 4
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 4
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: LD_INT 4
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 4
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 4
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 5
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 5
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 5
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61223: LD_ADDR_VAR 0 32
61227: PUSH
61228: LD_INT 4
61230: NEG
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 4
61275: NEG
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 5
61286: NEG
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 5
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 5
61309: NEG
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 3
61321: NEG
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: LD_INT 3
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: LD_INT 4
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 4
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 4
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 4
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 5
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: LD_INT 4
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 5
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 3
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: LD_INT 5
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 4
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 4
61635: PUSH
61636: LD_INT 4
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 4
61645: PUSH
61646: LD_INT 3
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 5
61655: PUSH
61656: LD_INT 4
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 5
61665: PUSH
61666: LD_INT 5
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 4
61675: PUSH
61676: LD_INT 5
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: LD_INT 4
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: LD_INT 3
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 5
61705: PUSH
61706: LD_INT 3
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: LD_INT 5
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61770: LD_ADDR_VAR 0 33
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: LD_INT 4
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: LD_INT 5
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: LD_INT 4
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 4
61825: NEG
61826: PUSH
61827: LD_INT 3
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 5
61837: NEG
61838: PUSH
61839: LD_INT 4
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: NEG
61850: PUSH
61851: LD_INT 5
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: LD_INT 5
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 5
61873: NEG
61874: PUSH
61875: LD_INT 3
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 4
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 4
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 2
61975: NEG
61976: PUSH
61977: LD_INT 4
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 4
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 5
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 5
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 4
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 5
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 4
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 4
62110: PUSH
62111: LD_INT 4
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: LD_INT 4
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 4
62150: PUSH
62151: LD_INT 2
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 4
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 5
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 5
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 4
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 3
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: LD_INT 5
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62308: LD_ADDR_VAR 0 34
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_INT 4
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 5
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 4
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: LD_INT 4
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 5
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 3
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: LD_INT 5
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 4
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 4
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 4
62510: PUSH
62511: LD_INT 4
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 4
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 5
62530: PUSH
62531: LD_INT 4
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 5
62540: PUSH
62541: LD_INT 5
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 4
62550: PUSH
62551: LD_INT 5
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: LD_INT 4
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 5
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: LD_INT 5
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: LD_INT 4
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: LD_INT 4
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: LD_INT 3
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: LD_INT 4
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 4
62693: NEG
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 4
62704: NEG
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 3
62716: NEG
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 3
62727: NEG
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 4
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 5
62749: NEG
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 5
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 5
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// end ; end ;
62840: GO 62843
62842: POP
// case btype of b_depot , b_warehouse :
62843: LD_VAR 0 1
62847: PUSH
62848: LD_INT 0
62850: DOUBLE
62851: EQUAL
62852: IFTRUE 62862
62854: LD_INT 1
62856: DOUBLE
62857: EQUAL
62858: IFTRUE 62862
62860: GO 63063
62862: POP
// case nation of nation_american :
62863: LD_VAR 0 5
62867: PUSH
62868: LD_INT 1
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62876
62874: GO 62932
62876: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62877: LD_ADDR_VAR 0 9
62881: PUSH
62882: LD_VAR 0 11
62886: PUSH
62887: LD_VAR 0 12
62891: PUSH
62892: LD_VAR 0 13
62896: PUSH
62897: LD_VAR 0 14
62901: PUSH
62902: LD_VAR 0 15
62906: PUSH
62907: LD_VAR 0 16
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: PUSH
62920: LD_VAR 0 4
62924: PUSH
62925: LD_INT 1
62927: PLUS
62928: ARRAY
62929: ST_TO_ADDR
62930: GO 63061
62932: LD_INT 2
62934: DOUBLE
62935: EQUAL
62936: IFTRUE 62940
62938: GO 62996
62940: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62941: LD_ADDR_VAR 0 9
62945: PUSH
62946: LD_VAR 0 17
62950: PUSH
62951: LD_VAR 0 18
62955: PUSH
62956: LD_VAR 0 19
62960: PUSH
62961: LD_VAR 0 20
62965: PUSH
62966: LD_VAR 0 21
62970: PUSH
62971: LD_VAR 0 22
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: PUSH
62984: LD_VAR 0 4
62988: PUSH
62989: LD_INT 1
62991: PLUS
62992: ARRAY
62993: ST_TO_ADDR
62994: GO 63061
62996: LD_INT 3
62998: DOUBLE
62999: EQUAL
63000: IFTRUE 63004
63002: GO 63060
63004: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63005: LD_ADDR_VAR 0 9
63009: PUSH
63010: LD_VAR 0 23
63014: PUSH
63015: LD_VAR 0 24
63019: PUSH
63020: LD_VAR 0 25
63024: PUSH
63025: LD_VAR 0 26
63029: PUSH
63030: LD_VAR 0 27
63034: PUSH
63035: LD_VAR 0 28
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: PUSH
63048: LD_VAR 0 4
63052: PUSH
63053: LD_INT 1
63055: PLUS
63056: ARRAY
63057: ST_TO_ADDR
63058: GO 63061
63060: POP
63061: GO 63616
63063: LD_INT 2
63065: DOUBLE
63066: EQUAL
63067: IFTRUE 63077
63069: LD_INT 3
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63077
63075: GO 63133
63077: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63078: LD_ADDR_VAR 0 9
63082: PUSH
63083: LD_VAR 0 29
63087: PUSH
63088: LD_VAR 0 30
63092: PUSH
63093: LD_VAR 0 31
63097: PUSH
63098: LD_VAR 0 32
63102: PUSH
63103: LD_VAR 0 33
63107: PUSH
63108: LD_VAR 0 34
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: PUSH
63121: LD_VAR 0 4
63125: PUSH
63126: LD_INT 1
63128: PLUS
63129: ARRAY
63130: ST_TO_ADDR
63131: GO 63616
63133: LD_INT 16
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63195
63139: LD_INT 17
63141: DOUBLE
63142: EQUAL
63143: IFTRUE 63195
63145: LD_INT 18
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63195
63151: LD_INT 19
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63195
63157: LD_INT 22
63159: DOUBLE
63160: EQUAL
63161: IFTRUE 63195
63163: LD_INT 20
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63195
63169: LD_INT 21
63171: DOUBLE
63172: EQUAL
63173: IFTRUE 63195
63175: LD_INT 23
63177: DOUBLE
63178: EQUAL
63179: IFTRUE 63195
63181: LD_INT 24
63183: DOUBLE
63184: EQUAL
63185: IFTRUE 63195
63187: LD_INT 25
63189: DOUBLE
63190: EQUAL
63191: IFTRUE 63195
63193: GO 63251
63195: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63196: LD_ADDR_VAR 0 9
63200: PUSH
63201: LD_VAR 0 35
63205: PUSH
63206: LD_VAR 0 36
63210: PUSH
63211: LD_VAR 0 37
63215: PUSH
63216: LD_VAR 0 38
63220: PUSH
63221: LD_VAR 0 39
63225: PUSH
63226: LD_VAR 0 40
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: PUSH
63239: LD_VAR 0 4
63243: PUSH
63244: LD_INT 1
63246: PLUS
63247: ARRAY
63248: ST_TO_ADDR
63249: GO 63616
63251: LD_INT 6
63253: DOUBLE
63254: EQUAL
63255: IFTRUE 63307
63257: LD_INT 7
63259: DOUBLE
63260: EQUAL
63261: IFTRUE 63307
63263: LD_INT 8
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63307
63269: LD_INT 13
63271: DOUBLE
63272: EQUAL
63273: IFTRUE 63307
63275: LD_INT 12
63277: DOUBLE
63278: EQUAL
63279: IFTRUE 63307
63281: LD_INT 15
63283: DOUBLE
63284: EQUAL
63285: IFTRUE 63307
63287: LD_INT 11
63289: DOUBLE
63290: EQUAL
63291: IFTRUE 63307
63293: LD_INT 14
63295: DOUBLE
63296: EQUAL
63297: IFTRUE 63307
63299: LD_INT 10
63301: DOUBLE
63302: EQUAL
63303: IFTRUE 63307
63305: GO 63363
63307: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63308: LD_ADDR_VAR 0 9
63312: PUSH
63313: LD_VAR 0 41
63317: PUSH
63318: LD_VAR 0 42
63322: PUSH
63323: LD_VAR 0 43
63327: PUSH
63328: LD_VAR 0 44
63332: PUSH
63333: LD_VAR 0 45
63337: PUSH
63338: LD_VAR 0 46
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: PUSH
63351: LD_VAR 0 4
63355: PUSH
63356: LD_INT 1
63358: PLUS
63359: ARRAY
63360: ST_TO_ADDR
63361: GO 63616
63363: LD_INT 36
63365: DOUBLE
63366: EQUAL
63367: IFTRUE 63371
63369: GO 63427
63371: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63372: LD_ADDR_VAR 0 9
63376: PUSH
63377: LD_VAR 0 47
63381: PUSH
63382: LD_VAR 0 48
63386: PUSH
63387: LD_VAR 0 49
63391: PUSH
63392: LD_VAR 0 50
63396: PUSH
63397: LD_VAR 0 51
63401: PUSH
63402: LD_VAR 0 52
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: PUSH
63415: LD_VAR 0 4
63419: PUSH
63420: LD_INT 1
63422: PLUS
63423: ARRAY
63424: ST_TO_ADDR
63425: GO 63616
63427: LD_INT 4
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63453
63433: LD_INT 5
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63453
63439: LD_INT 34
63441: DOUBLE
63442: EQUAL
63443: IFTRUE 63453
63445: LD_INT 37
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63453
63451: GO 63509
63453: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63454: LD_ADDR_VAR 0 9
63458: PUSH
63459: LD_VAR 0 53
63463: PUSH
63464: LD_VAR 0 54
63468: PUSH
63469: LD_VAR 0 55
63473: PUSH
63474: LD_VAR 0 56
63478: PUSH
63479: LD_VAR 0 57
63483: PUSH
63484: LD_VAR 0 58
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: PUSH
63497: LD_VAR 0 4
63501: PUSH
63502: LD_INT 1
63504: PLUS
63505: ARRAY
63506: ST_TO_ADDR
63507: GO 63616
63509: LD_INT 31
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63559
63515: LD_INT 32
63517: DOUBLE
63518: EQUAL
63519: IFTRUE 63559
63521: LD_INT 33
63523: DOUBLE
63524: EQUAL
63525: IFTRUE 63559
63527: LD_INT 27
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63559
63533: LD_INT 26
63535: DOUBLE
63536: EQUAL
63537: IFTRUE 63559
63539: LD_INT 28
63541: DOUBLE
63542: EQUAL
63543: IFTRUE 63559
63545: LD_INT 29
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63559
63551: LD_INT 30
63553: DOUBLE
63554: EQUAL
63555: IFTRUE 63559
63557: GO 63615
63559: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63560: LD_ADDR_VAR 0 9
63564: PUSH
63565: LD_VAR 0 59
63569: PUSH
63570: LD_VAR 0 60
63574: PUSH
63575: LD_VAR 0 61
63579: PUSH
63580: LD_VAR 0 62
63584: PUSH
63585: LD_VAR 0 63
63589: PUSH
63590: LD_VAR 0 64
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: PUSH
63603: LD_VAR 0 4
63607: PUSH
63608: LD_INT 1
63610: PLUS
63611: ARRAY
63612: ST_TO_ADDR
63613: GO 63616
63615: POP
// temp_list2 = [ ] ;
63616: LD_ADDR_VAR 0 10
63620: PUSH
63621: EMPTY
63622: ST_TO_ADDR
// for i in temp_list do
63623: LD_ADDR_VAR 0 8
63627: PUSH
63628: LD_VAR 0 9
63632: PUSH
63633: FOR_IN
63634: IFFALSE 63686
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63636: LD_ADDR_VAR 0 10
63640: PUSH
63641: LD_VAR 0 10
63645: PUSH
63646: LD_VAR 0 8
63650: PUSH
63651: LD_INT 1
63653: ARRAY
63654: PUSH
63655: LD_VAR 0 2
63659: PLUS
63660: PUSH
63661: LD_VAR 0 8
63665: PUSH
63666: LD_INT 2
63668: ARRAY
63669: PUSH
63670: LD_VAR 0 3
63674: PLUS
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: EMPTY
63681: LIST
63682: ADD
63683: ST_TO_ADDR
63684: GO 63633
63686: POP
63687: POP
// result = temp_list2 ;
63688: LD_ADDR_VAR 0 7
63692: PUSH
63693: LD_VAR 0 10
63697: ST_TO_ADDR
// end ;
63698: LD_VAR 0 7
63702: RET
// export function EnemyInRange ( unit , dist ) ; begin
63703: LD_INT 0
63705: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63706: LD_ADDR_VAR 0 3
63710: PUSH
63711: LD_VAR 0 1
63715: PPUSH
63716: CALL_OW 255
63720: PPUSH
63721: LD_VAR 0 1
63725: PPUSH
63726: CALL_OW 250
63730: PPUSH
63731: LD_VAR 0 1
63735: PPUSH
63736: CALL_OW 251
63740: PPUSH
63741: LD_VAR 0 2
63745: PPUSH
63746: CALL 37105 0 4
63750: PUSH
63751: LD_INT 4
63753: ARRAY
63754: ST_TO_ADDR
// end ;
63755: LD_VAR 0 3
63759: RET
// export function PlayerSeeMe ( unit ) ; begin
63760: LD_INT 0
63762: PPUSH
// result := See ( your_side , unit ) ;
63763: LD_ADDR_VAR 0 2
63767: PUSH
63768: LD_OWVAR 2
63772: PPUSH
63773: LD_VAR 0 1
63777: PPUSH
63778: CALL_OW 292
63782: ST_TO_ADDR
// end ;
63783: LD_VAR 0 2
63787: RET
// export function ReverseDir ( unit ) ; begin
63788: LD_INT 0
63790: PPUSH
// if not unit then
63791: LD_VAR 0 1
63795: NOT
63796: IFFALSE 63800
// exit ;
63798: GO 63823
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63800: LD_ADDR_VAR 0 2
63804: PUSH
63805: LD_VAR 0 1
63809: PPUSH
63810: CALL_OW 254
63814: PUSH
63815: LD_INT 3
63817: PLUS
63818: PUSH
63819: LD_INT 6
63821: MOD
63822: ST_TO_ADDR
// end ;
63823: LD_VAR 0 2
63827: RET
// export function ReverseArray ( array ) ; var i ; begin
63828: LD_INT 0
63830: PPUSH
63831: PPUSH
// if not array then
63832: LD_VAR 0 1
63836: NOT
63837: IFFALSE 63841
// exit ;
63839: GO 63896
// result := [ ] ;
63841: LD_ADDR_VAR 0 2
63845: PUSH
63846: EMPTY
63847: ST_TO_ADDR
// for i := array downto 1 do
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: DOUBLE
63854: LD_VAR 0 1
63858: INC
63859: ST_TO_ADDR
63860: LD_INT 1
63862: PUSH
63863: FOR_DOWNTO
63864: IFFALSE 63894
// result := Join ( result , array [ i ] ) ;
63866: LD_ADDR_VAR 0 2
63870: PUSH
63871: LD_VAR 0 2
63875: PPUSH
63876: LD_VAR 0 1
63880: PUSH
63881: LD_VAR 0 3
63885: ARRAY
63886: PPUSH
63887: CALL 68540 0 2
63891: ST_TO_ADDR
63892: GO 63863
63894: POP
63895: POP
// end ;
63896: LD_VAR 0 2
63900: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63901: LD_INT 0
63903: PPUSH
63904: PPUSH
63905: PPUSH
63906: PPUSH
63907: PPUSH
63908: PPUSH
// if not unit or not hexes then
63909: LD_VAR 0 1
63913: NOT
63914: PUSH
63915: LD_VAR 0 2
63919: NOT
63920: OR
63921: IFFALSE 63925
// exit ;
63923: GO 64048
// dist := 9999 ;
63925: LD_ADDR_VAR 0 5
63929: PUSH
63930: LD_INT 9999
63932: ST_TO_ADDR
// for i = 1 to hexes do
63933: LD_ADDR_VAR 0 4
63937: PUSH
63938: DOUBLE
63939: LD_INT 1
63941: DEC
63942: ST_TO_ADDR
63943: LD_VAR 0 2
63947: PUSH
63948: FOR_TO
63949: IFFALSE 64036
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63951: LD_ADDR_VAR 0 6
63955: PUSH
63956: LD_VAR 0 1
63960: PPUSH
63961: LD_VAR 0 2
63965: PUSH
63966: LD_VAR 0 4
63970: ARRAY
63971: PUSH
63972: LD_INT 1
63974: ARRAY
63975: PPUSH
63976: LD_VAR 0 2
63980: PUSH
63981: LD_VAR 0 4
63985: ARRAY
63986: PUSH
63987: LD_INT 2
63989: ARRAY
63990: PPUSH
63991: CALL_OW 297
63995: ST_TO_ADDR
// if tdist < dist then
63996: LD_VAR 0 6
64000: PUSH
64001: LD_VAR 0 5
64005: LESS
64006: IFFALSE 64034
// begin hex := hexes [ i ] ;
64008: LD_ADDR_VAR 0 8
64012: PUSH
64013: LD_VAR 0 2
64017: PUSH
64018: LD_VAR 0 4
64022: ARRAY
64023: ST_TO_ADDR
// dist := tdist ;
64024: LD_ADDR_VAR 0 5
64028: PUSH
64029: LD_VAR 0 6
64033: ST_TO_ADDR
// end ; end ;
64034: GO 63948
64036: POP
64037: POP
// result := hex ;
64038: LD_ADDR_VAR 0 3
64042: PUSH
64043: LD_VAR 0 8
64047: ST_TO_ADDR
// end ;
64048: LD_VAR 0 3
64052: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64053: LD_INT 0
64055: PPUSH
64056: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64057: LD_VAR 0 1
64061: NOT
64062: PUSH
64063: LD_VAR 0 1
64067: PUSH
64068: LD_INT 21
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 23
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PPUSH
64092: CALL_OW 69
64096: IN
64097: NOT
64098: OR
64099: IFFALSE 64103
// exit ;
64101: GO 64150
// for i = 1 to 3 do
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: DOUBLE
64109: LD_INT 1
64111: DEC
64112: ST_TO_ADDR
64113: LD_INT 3
64115: PUSH
64116: FOR_TO
64117: IFFALSE 64148
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64119: LD_VAR 0 1
64123: PPUSH
64124: CALL_OW 250
64128: PPUSH
64129: LD_VAR 0 1
64133: PPUSH
64134: CALL_OW 251
64138: PPUSH
64139: LD_INT 1
64141: PPUSH
64142: CALL_OW 453
64146: GO 64116
64148: POP
64149: POP
// end ;
64150: LD_VAR 0 2
64154: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64155: LD_INT 0
64157: PPUSH
64158: PPUSH
64159: PPUSH
64160: PPUSH
64161: PPUSH
64162: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64163: LD_VAR 0 1
64167: NOT
64168: PUSH
64169: LD_VAR 0 2
64173: NOT
64174: OR
64175: PUSH
64176: LD_VAR 0 1
64180: PPUSH
64181: CALL_OW 314
64185: OR
64186: IFFALSE 64190
// exit ;
64188: GO 64657
// if GetLives ( i ) < 250 then
64190: LD_VAR 0 4
64194: PPUSH
64195: CALL_OW 256
64199: PUSH
64200: LD_INT 250
64202: LESS
64203: IFFALSE 64216
// begin ComAutodestruct ( i ) ;
64205: LD_VAR 0 4
64209: PPUSH
64210: CALL 64053 0 1
// exit ;
64214: GO 64657
// end ; x := GetX ( enemy_unit ) ;
64216: LD_ADDR_VAR 0 7
64220: PUSH
64221: LD_VAR 0 2
64225: PPUSH
64226: CALL_OW 250
64230: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64231: LD_ADDR_VAR 0 8
64235: PUSH
64236: LD_VAR 0 2
64240: PPUSH
64241: CALL_OW 251
64245: ST_TO_ADDR
// if not x or not y then
64246: LD_VAR 0 7
64250: NOT
64251: PUSH
64252: LD_VAR 0 8
64256: NOT
64257: OR
64258: IFFALSE 64262
// exit ;
64260: GO 64657
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64262: LD_ADDR_VAR 0 6
64266: PUSH
64267: LD_VAR 0 7
64271: PPUSH
64272: LD_INT 0
64274: PPUSH
64275: LD_INT 4
64277: PPUSH
64278: CALL_OW 272
64282: PUSH
64283: LD_VAR 0 8
64287: PPUSH
64288: LD_INT 0
64290: PPUSH
64291: LD_INT 4
64293: PPUSH
64294: CALL_OW 273
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_VAR 0 7
64307: PPUSH
64308: LD_INT 1
64310: PPUSH
64311: LD_INT 4
64313: PPUSH
64314: CALL_OW 272
64318: PUSH
64319: LD_VAR 0 8
64323: PPUSH
64324: LD_INT 1
64326: PPUSH
64327: LD_INT 4
64329: PPUSH
64330: CALL_OW 273
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 7
64343: PPUSH
64344: LD_INT 2
64346: PPUSH
64347: LD_INT 4
64349: PPUSH
64350: CALL_OW 272
64354: PUSH
64355: LD_VAR 0 8
64359: PPUSH
64360: LD_INT 2
64362: PPUSH
64363: LD_INT 4
64365: PPUSH
64366: CALL_OW 273
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 7
64379: PPUSH
64380: LD_INT 3
64382: PPUSH
64383: LD_INT 4
64385: PPUSH
64386: CALL_OW 272
64390: PUSH
64391: LD_VAR 0 8
64395: PPUSH
64396: LD_INT 3
64398: PPUSH
64399: LD_INT 4
64401: PPUSH
64402: CALL_OW 273
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_VAR 0 7
64415: PPUSH
64416: LD_INT 4
64418: PPUSH
64419: LD_INT 4
64421: PPUSH
64422: CALL_OW 272
64426: PUSH
64427: LD_VAR 0 8
64431: PPUSH
64432: LD_INT 4
64434: PPUSH
64435: LD_INT 4
64437: PPUSH
64438: CALL_OW 273
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_VAR 0 7
64451: PPUSH
64452: LD_INT 5
64454: PPUSH
64455: LD_INT 4
64457: PPUSH
64458: CALL_OW 272
64462: PUSH
64463: LD_VAR 0 8
64467: PPUSH
64468: LD_INT 5
64470: PPUSH
64471: LD_INT 4
64473: PPUSH
64474: CALL_OW 273
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: ST_TO_ADDR
// for i = tmp downto 1 do
64491: LD_ADDR_VAR 0 4
64495: PUSH
64496: DOUBLE
64497: LD_VAR 0 6
64501: INC
64502: ST_TO_ADDR
64503: LD_INT 1
64505: PUSH
64506: FOR_DOWNTO
64507: IFFALSE 64608
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64509: LD_VAR 0 6
64513: PUSH
64514: LD_VAR 0 4
64518: ARRAY
64519: PUSH
64520: LD_INT 1
64522: ARRAY
64523: PPUSH
64524: LD_VAR 0 6
64528: PUSH
64529: LD_VAR 0 4
64533: ARRAY
64534: PUSH
64535: LD_INT 2
64537: ARRAY
64538: PPUSH
64539: CALL_OW 488
64543: NOT
64544: PUSH
64545: LD_VAR 0 6
64549: PUSH
64550: LD_VAR 0 4
64554: ARRAY
64555: PUSH
64556: LD_INT 1
64558: ARRAY
64559: PPUSH
64560: LD_VAR 0 6
64564: PUSH
64565: LD_VAR 0 4
64569: ARRAY
64570: PUSH
64571: LD_INT 2
64573: ARRAY
64574: PPUSH
64575: CALL_OW 428
64579: PUSH
64580: LD_INT 0
64582: NONEQUAL
64583: OR
64584: IFFALSE 64606
// tmp := Delete ( tmp , i ) ;
64586: LD_ADDR_VAR 0 6
64590: PUSH
64591: LD_VAR 0 6
64595: PPUSH
64596: LD_VAR 0 4
64600: PPUSH
64601: CALL_OW 3
64605: ST_TO_ADDR
64606: GO 64506
64608: POP
64609: POP
// j := GetClosestHex ( unit , tmp ) ;
64610: LD_ADDR_VAR 0 5
64614: PUSH
64615: LD_VAR 0 1
64619: PPUSH
64620: LD_VAR 0 6
64624: PPUSH
64625: CALL 63901 0 2
64629: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64630: LD_VAR 0 1
64634: PPUSH
64635: LD_VAR 0 5
64639: PUSH
64640: LD_INT 1
64642: ARRAY
64643: PPUSH
64644: LD_VAR 0 5
64648: PUSH
64649: LD_INT 2
64651: ARRAY
64652: PPUSH
64653: CALL_OW 111
// end ;
64657: LD_VAR 0 3
64661: RET
// export function PrepareApemanSoldier ( ) ; begin
64662: LD_INT 0
64664: PPUSH
// uc_nation := 0 ;
64665: LD_ADDR_OWVAR 21
64669: PUSH
64670: LD_INT 0
64672: ST_TO_ADDR
// hc_sex := sex_male ;
64673: LD_ADDR_OWVAR 27
64677: PUSH
64678: LD_INT 1
64680: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64681: LD_ADDR_OWVAR 28
64685: PUSH
64686: LD_INT 15
64688: ST_TO_ADDR
// hc_gallery :=  ;
64689: LD_ADDR_OWVAR 33
64693: PUSH
64694: LD_STRING 
64696: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64697: LD_ADDR_OWVAR 31
64701: PUSH
64702: LD_INT 0
64704: PPUSH
64705: LD_INT 3
64707: PPUSH
64708: CALL_OW 12
64712: PUSH
64713: LD_INT 0
64715: PPUSH
64716: LD_INT 3
64718: PPUSH
64719: CALL_OW 12
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// end ;
64736: LD_VAR 0 1
64740: RET
// export function PrepareApemanEngineer ( ) ; begin
64741: LD_INT 0
64743: PPUSH
// uc_nation := 0 ;
64744: LD_ADDR_OWVAR 21
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// hc_sex := sex_male ;
64752: LD_ADDR_OWVAR 27
64756: PUSH
64757: LD_INT 1
64759: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64760: LD_ADDR_OWVAR 28
64764: PUSH
64765: LD_INT 16
64767: ST_TO_ADDR
// hc_gallery :=  ;
64768: LD_ADDR_OWVAR 33
64772: PUSH
64773: LD_STRING 
64775: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64776: LD_ADDR_OWVAR 31
64780: PUSH
64781: LD_INT 0
64783: PPUSH
64784: LD_INT 3
64786: PPUSH
64787: CALL_OW 12
64791: PUSH
64792: LD_INT 0
64794: PPUSH
64795: LD_INT 3
64797: PPUSH
64798: CALL_OW 12
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: ST_TO_ADDR
// end ;
64815: LD_VAR 0 1
64819: RET
// export function PrepareApeman ( agressivity ) ; begin
64820: LD_INT 0
64822: PPUSH
// uc_side := 0 ;
64823: LD_ADDR_OWVAR 20
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// uc_nation := 0 ;
64831: LD_ADDR_OWVAR 21
64835: PUSH
64836: LD_INT 0
64838: ST_TO_ADDR
// hc_sex := sex_male ;
64839: LD_ADDR_OWVAR 27
64843: PUSH
64844: LD_INT 1
64846: ST_TO_ADDR
// hc_class := class_apeman ;
64847: LD_ADDR_OWVAR 28
64851: PUSH
64852: LD_INT 12
64854: ST_TO_ADDR
// hc_gallery :=  ;
64855: LD_ADDR_OWVAR 33
64859: PUSH
64860: LD_STRING 
64862: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64863: LD_ADDR_OWVAR 35
64867: PUSH
64868: LD_VAR 0 1
64872: NEG
64873: PPUSH
64874: LD_VAR 0 1
64878: PPUSH
64879: CALL_OW 12
64883: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64884: LD_ADDR_OWVAR 31
64888: PUSH
64889: LD_INT 0
64891: PPUSH
64892: LD_INT 3
64894: PPUSH
64895: CALL_OW 12
64899: PUSH
64900: LD_INT 0
64902: PPUSH
64903: LD_INT 3
64905: PPUSH
64906: CALL_OW 12
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: ST_TO_ADDR
// end ;
64923: LD_VAR 0 2
64927: RET
// export function PrepareTiger ( agressivity ) ; begin
64928: LD_INT 0
64930: PPUSH
// uc_side := 0 ;
64931: LD_ADDR_OWVAR 20
64935: PUSH
64936: LD_INT 0
64938: ST_TO_ADDR
// uc_nation := 0 ;
64939: LD_ADDR_OWVAR 21
64943: PUSH
64944: LD_INT 0
64946: ST_TO_ADDR
// hc_class := class_tiger ;
64947: LD_ADDR_OWVAR 28
64951: PUSH
64952: LD_INT 14
64954: ST_TO_ADDR
// hc_gallery :=  ;
64955: LD_ADDR_OWVAR 33
64959: PUSH
64960: LD_STRING 
64962: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64963: LD_ADDR_OWVAR 35
64967: PUSH
64968: LD_VAR 0 1
64972: NEG
64973: PPUSH
64974: LD_VAR 0 1
64978: PPUSH
64979: CALL_OW 12
64983: ST_TO_ADDR
// end ;
64984: LD_VAR 0 2
64988: RET
// export function PrepareEnchidna ( ) ; begin
64989: LD_INT 0
64991: PPUSH
// uc_side := 0 ;
64992: LD_ADDR_OWVAR 20
64996: PUSH
64997: LD_INT 0
64999: ST_TO_ADDR
// uc_nation := 0 ;
65000: LD_ADDR_OWVAR 21
65004: PUSH
65005: LD_INT 0
65007: ST_TO_ADDR
// hc_class := class_baggie ;
65008: LD_ADDR_OWVAR 28
65012: PUSH
65013: LD_INT 13
65015: ST_TO_ADDR
// hc_gallery :=  ;
65016: LD_ADDR_OWVAR 33
65020: PUSH
65021: LD_STRING 
65023: ST_TO_ADDR
// end ;
65024: LD_VAR 0 1
65028: RET
// export function PrepareFrog ( ) ; begin
65029: LD_INT 0
65031: PPUSH
// uc_side := 0 ;
65032: LD_ADDR_OWVAR 20
65036: PUSH
65037: LD_INT 0
65039: ST_TO_ADDR
// uc_nation := 0 ;
65040: LD_ADDR_OWVAR 21
65044: PUSH
65045: LD_INT 0
65047: ST_TO_ADDR
// hc_class := class_frog ;
65048: LD_ADDR_OWVAR 28
65052: PUSH
65053: LD_INT 19
65055: ST_TO_ADDR
// hc_gallery :=  ;
65056: LD_ADDR_OWVAR 33
65060: PUSH
65061: LD_STRING 
65063: ST_TO_ADDR
// end ;
65064: LD_VAR 0 1
65068: RET
// export function PrepareFish ( ) ; begin
65069: LD_INT 0
65071: PPUSH
// uc_side := 0 ;
65072: LD_ADDR_OWVAR 20
65076: PUSH
65077: LD_INT 0
65079: ST_TO_ADDR
// uc_nation := 0 ;
65080: LD_ADDR_OWVAR 21
65084: PUSH
65085: LD_INT 0
65087: ST_TO_ADDR
// hc_class := class_fish ;
65088: LD_ADDR_OWVAR 28
65092: PUSH
65093: LD_INT 20
65095: ST_TO_ADDR
// hc_gallery :=  ;
65096: LD_ADDR_OWVAR 33
65100: PUSH
65101: LD_STRING 
65103: ST_TO_ADDR
// end ;
65104: LD_VAR 0 1
65108: RET
// export function PrepareBird ( ) ; begin
65109: LD_INT 0
65111: PPUSH
// uc_side := 0 ;
65112: LD_ADDR_OWVAR 20
65116: PUSH
65117: LD_INT 0
65119: ST_TO_ADDR
// uc_nation := 0 ;
65120: LD_ADDR_OWVAR 21
65124: PUSH
65125: LD_INT 0
65127: ST_TO_ADDR
// hc_class := class_phororhacos ;
65128: LD_ADDR_OWVAR 28
65132: PUSH
65133: LD_INT 18
65135: ST_TO_ADDR
// hc_gallery :=  ;
65136: LD_ADDR_OWVAR 33
65140: PUSH
65141: LD_STRING 
65143: ST_TO_ADDR
// end ;
65144: LD_VAR 0 1
65148: RET
// export function PrepareHorse ( ) ; begin
65149: LD_INT 0
65151: PPUSH
// uc_side := 0 ;
65152: LD_ADDR_OWVAR 20
65156: PUSH
65157: LD_INT 0
65159: ST_TO_ADDR
// uc_nation := 0 ;
65160: LD_ADDR_OWVAR 21
65164: PUSH
65165: LD_INT 0
65167: ST_TO_ADDR
// hc_class := class_horse ;
65168: LD_ADDR_OWVAR 28
65172: PUSH
65173: LD_INT 21
65175: ST_TO_ADDR
// hc_gallery :=  ;
65176: LD_ADDR_OWVAR 33
65180: PUSH
65181: LD_STRING 
65183: ST_TO_ADDR
// end ;
65184: LD_VAR 0 1
65188: RET
// export function PrepareMastodont ( ) ; begin
65189: LD_INT 0
65191: PPUSH
// uc_side := 0 ;
65192: LD_ADDR_OWVAR 20
65196: PUSH
65197: LD_INT 0
65199: ST_TO_ADDR
// uc_nation := 0 ;
65200: LD_ADDR_OWVAR 21
65204: PUSH
65205: LD_INT 0
65207: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65208: LD_ADDR_OWVAR 37
65212: PUSH
65213: LD_INT 31
65215: ST_TO_ADDR
// vc_control := control_rider ;
65216: LD_ADDR_OWVAR 38
65220: PUSH
65221: LD_INT 4
65223: ST_TO_ADDR
// end ;
65224: LD_VAR 0 1
65228: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65229: LD_INT 0
65231: PPUSH
65232: PPUSH
65233: PPUSH
// uc_side = 0 ;
65234: LD_ADDR_OWVAR 20
65238: PUSH
65239: LD_INT 0
65241: ST_TO_ADDR
// uc_nation = 0 ;
65242: LD_ADDR_OWVAR 21
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// InitHc_All ( ) ;
65250: CALL_OW 584
// InitVc ;
65254: CALL_OW 20
// if mastodonts then
65258: LD_VAR 0 6
65262: IFFALSE 65329
// for i = 1 to mastodonts do
65264: LD_ADDR_VAR 0 11
65268: PUSH
65269: DOUBLE
65270: LD_INT 1
65272: DEC
65273: ST_TO_ADDR
65274: LD_VAR 0 6
65278: PUSH
65279: FOR_TO
65280: IFFALSE 65327
// begin vc_chassis := 31 ;
65282: LD_ADDR_OWVAR 37
65286: PUSH
65287: LD_INT 31
65289: ST_TO_ADDR
// vc_control := control_rider ;
65290: LD_ADDR_OWVAR 38
65294: PUSH
65295: LD_INT 4
65297: ST_TO_ADDR
// animal := CreateVehicle ;
65298: LD_ADDR_VAR 0 12
65302: PUSH
65303: CALL_OW 45
65307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65308: LD_VAR 0 12
65312: PPUSH
65313: LD_VAR 0 8
65317: PPUSH
65318: LD_INT 0
65320: PPUSH
65321: CALL 67457 0 3
// end ;
65325: GO 65279
65327: POP
65328: POP
// if horses then
65329: LD_VAR 0 5
65333: IFFALSE 65400
// for i = 1 to horses do
65335: LD_ADDR_VAR 0 11
65339: PUSH
65340: DOUBLE
65341: LD_INT 1
65343: DEC
65344: ST_TO_ADDR
65345: LD_VAR 0 5
65349: PUSH
65350: FOR_TO
65351: IFFALSE 65398
// begin hc_class := 21 ;
65353: LD_ADDR_OWVAR 28
65357: PUSH
65358: LD_INT 21
65360: ST_TO_ADDR
// hc_gallery :=  ;
65361: LD_ADDR_OWVAR 33
65365: PUSH
65366: LD_STRING 
65368: ST_TO_ADDR
// animal := CreateHuman ;
65369: LD_ADDR_VAR 0 12
65373: PUSH
65374: CALL_OW 44
65378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65379: LD_VAR 0 12
65383: PPUSH
65384: LD_VAR 0 8
65388: PPUSH
65389: LD_INT 0
65391: PPUSH
65392: CALL 67457 0 3
// end ;
65396: GO 65350
65398: POP
65399: POP
// if birds then
65400: LD_VAR 0 1
65404: IFFALSE 65471
// for i = 1 to birds do
65406: LD_ADDR_VAR 0 11
65410: PUSH
65411: DOUBLE
65412: LD_INT 1
65414: DEC
65415: ST_TO_ADDR
65416: LD_VAR 0 1
65420: PUSH
65421: FOR_TO
65422: IFFALSE 65469
// begin hc_class = 18 ;
65424: LD_ADDR_OWVAR 28
65428: PUSH
65429: LD_INT 18
65431: ST_TO_ADDR
// hc_gallery =  ;
65432: LD_ADDR_OWVAR 33
65436: PUSH
65437: LD_STRING 
65439: ST_TO_ADDR
// animal := CreateHuman ;
65440: LD_ADDR_VAR 0 12
65444: PUSH
65445: CALL_OW 44
65449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65450: LD_VAR 0 12
65454: PPUSH
65455: LD_VAR 0 8
65459: PPUSH
65460: LD_INT 0
65462: PPUSH
65463: CALL 67457 0 3
// end ;
65467: GO 65421
65469: POP
65470: POP
// if tigers then
65471: LD_VAR 0 2
65475: IFFALSE 65559
// for i = 1 to tigers do
65477: LD_ADDR_VAR 0 11
65481: PUSH
65482: DOUBLE
65483: LD_INT 1
65485: DEC
65486: ST_TO_ADDR
65487: LD_VAR 0 2
65491: PUSH
65492: FOR_TO
65493: IFFALSE 65557
// begin hc_class = class_tiger ;
65495: LD_ADDR_OWVAR 28
65499: PUSH
65500: LD_INT 14
65502: ST_TO_ADDR
// hc_gallery =  ;
65503: LD_ADDR_OWVAR 33
65507: PUSH
65508: LD_STRING 
65510: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65511: LD_ADDR_OWVAR 35
65515: PUSH
65516: LD_INT 7
65518: NEG
65519: PPUSH
65520: LD_INT 7
65522: PPUSH
65523: CALL_OW 12
65527: ST_TO_ADDR
// animal := CreateHuman ;
65528: LD_ADDR_VAR 0 12
65532: PUSH
65533: CALL_OW 44
65537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65538: LD_VAR 0 12
65542: PPUSH
65543: LD_VAR 0 8
65547: PPUSH
65548: LD_INT 0
65550: PPUSH
65551: CALL 67457 0 3
// end ;
65555: GO 65492
65557: POP
65558: POP
// if apemans then
65559: LD_VAR 0 3
65563: IFFALSE 65686
// for i = 1 to apemans do
65565: LD_ADDR_VAR 0 11
65569: PUSH
65570: DOUBLE
65571: LD_INT 1
65573: DEC
65574: ST_TO_ADDR
65575: LD_VAR 0 3
65579: PUSH
65580: FOR_TO
65581: IFFALSE 65684
// begin hc_class = class_apeman ;
65583: LD_ADDR_OWVAR 28
65587: PUSH
65588: LD_INT 12
65590: ST_TO_ADDR
// hc_gallery =  ;
65591: LD_ADDR_OWVAR 33
65595: PUSH
65596: LD_STRING 
65598: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65599: LD_ADDR_OWVAR 35
65603: PUSH
65604: LD_INT 2
65606: NEG
65607: PPUSH
65608: LD_INT 2
65610: PPUSH
65611: CALL_OW 12
65615: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65616: LD_ADDR_OWVAR 31
65620: PUSH
65621: LD_INT 1
65623: PPUSH
65624: LD_INT 3
65626: PPUSH
65627: CALL_OW 12
65631: PUSH
65632: LD_INT 1
65634: PPUSH
65635: LD_INT 3
65637: PPUSH
65638: CALL_OW 12
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: ST_TO_ADDR
// animal := CreateHuman ;
65655: LD_ADDR_VAR 0 12
65659: PUSH
65660: CALL_OW 44
65664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65665: LD_VAR 0 12
65669: PPUSH
65670: LD_VAR 0 8
65674: PPUSH
65675: LD_INT 0
65677: PPUSH
65678: CALL 67457 0 3
// end ;
65682: GO 65580
65684: POP
65685: POP
// if enchidnas then
65686: LD_VAR 0 4
65690: IFFALSE 65757
// for i = 1 to enchidnas do
65692: LD_ADDR_VAR 0 11
65696: PUSH
65697: DOUBLE
65698: LD_INT 1
65700: DEC
65701: ST_TO_ADDR
65702: LD_VAR 0 4
65706: PUSH
65707: FOR_TO
65708: IFFALSE 65755
// begin hc_class = 13 ;
65710: LD_ADDR_OWVAR 28
65714: PUSH
65715: LD_INT 13
65717: ST_TO_ADDR
// hc_gallery =  ;
65718: LD_ADDR_OWVAR 33
65722: PUSH
65723: LD_STRING 
65725: ST_TO_ADDR
// animal := CreateHuman ;
65726: LD_ADDR_VAR 0 12
65730: PUSH
65731: CALL_OW 44
65735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65736: LD_VAR 0 12
65740: PPUSH
65741: LD_VAR 0 8
65745: PPUSH
65746: LD_INT 0
65748: PPUSH
65749: CALL 67457 0 3
// end ;
65753: GO 65707
65755: POP
65756: POP
// if fishes then
65757: LD_VAR 0 7
65761: IFFALSE 65828
// for i = 1 to fishes do
65763: LD_ADDR_VAR 0 11
65767: PUSH
65768: DOUBLE
65769: LD_INT 1
65771: DEC
65772: ST_TO_ADDR
65773: LD_VAR 0 7
65777: PUSH
65778: FOR_TO
65779: IFFALSE 65826
// begin hc_class = 20 ;
65781: LD_ADDR_OWVAR 28
65785: PUSH
65786: LD_INT 20
65788: ST_TO_ADDR
// hc_gallery =  ;
65789: LD_ADDR_OWVAR 33
65793: PUSH
65794: LD_STRING 
65796: ST_TO_ADDR
// animal := CreateHuman ;
65797: LD_ADDR_VAR 0 12
65801: PUSH
65802: CALL_OW 44
65806: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65807: LD_VAR 0 12
65811: PPUSH
65812: LD_VAR 0 9
65816: PPUSH
65817: LD_INT 0
65819: PPUSH
65820: CALL 67457 0 3
// end ;
65824: GO 65778
65826: POP
65827: POP
// end ;
65828: LD_VAR 0 10
65832: RET
// export function WantHeal ( sci , unit ) ; begin
65833: LD_INT 0
65835: PPUSH
// if GetTaskList ( sci ) > 0 then
65836: LD_VAR 0 1
65840: PPUSH
65841: CALL_OW 437
65845: PUSH
65846: LD_INT 0
65848: GREATER
65849: IFFALSE 65919
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65851: LD_VAR 0 1
65855: PPUSH
65856: CALL_OW 437
65860: PUSH
65861: LD_INT 1
65863: ARRAY
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PUSH
65869: LD_STRING l
65871: EQUAL
65872: PUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 437
65882: PUSH
65883: LD_INT 1
65885: ARRAY
65886: PUSH
65887: LD_INT 4
65889: ARRAY
65890: PUSH
65891: LD_VAR 0 2
65895: EQUAL
65896: AND
65897: IFFALSE 65909
// result := true else
65899: LD_ADDR_VAR 0 3
65903: PUSH
65904: LD_INT 1
65906: ST_TO_ADDR
65907: GO 65917
// result := false ;
65909: LD_ADDR_VAR 0 3
65913: PUSH
65914: LD_INT 0
65916: ST_TO_ADDR
// end else
65917: GO 65927
// result := false ;
65919: LD_ADDR_VAR 0 3
65923: PUSH
65924: LD_INT 0
65926: ST_TO_ADDR
// end ;
65927: LD_VAR 0 3
65931: RET
// export function HealTarget ( sci ) ; begin
65932: LD_INT 0
65934: PPUSH
// if not sci then
65935: LD_VAR 0 1
65939: NOT
65940: IFFALSE 65944
// exit ;
65942: GO 66009
// result := 0 ;
65944: LD_ADDR_VAR 0 2
65948: PUSH
65949: LD_INT 0
65951: ST_TO_ADDR
// if GetTaskList ( sci ) then
65952: LD_VAR 0 1
65956: PPUSH
65957: CALL_OW 437
65961: IFFALSE 66009
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65963: LD_VAR 0 1
65967: PPUSH
65968: CALL_OW 437
65972: PUSH
65973: LD_INT 1
65975: ARRAY
65976: PUSH
65977: LD_INT 1
65979: ARRAY
65980: PUSH
65981: LD_STRING l
65983: EQUAL
65984: IFFALSE 66009
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65986: LD_ADDR_VAR 0 2
65990: PUSH
65991: LD_VAR 0 1
65995: PPUSH
65996: CALL_OW 437
66000: PUSH
66001: LD_INT 1
66003: ARRAY
66004: PUSH
66005: LD_INT 4
66007: ARRAY
66008: ST_TO_ADDR
// end ;
66009: LD_VAR 0 2
66013: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66014: LD_INT 0
66016: PPUSH
66017: PPUSH
66018: PPUSH
66019: PPUSH
// if not base_units then
66020: LD_VAR 0 1
66024: NOT
66025: IFFALSE 66029
// exit ;
66027: GO 66116
// result := false ;
66029: LD_ADDR_VAR 0 2
66033: PUSH
66034: LD_INT 0
66036: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66037: LD_ADDR_VAR 0 5
66041: PUSH
66042: LD_VAR 0 1
66046: PPUSH
66047: LD_INT 21
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PPUSH
66057: CALL_OW 72
66061: ST_TO_ADDR
// if not tmp then
66062: LD_VAR 0 5
66066: NOT
66067: IFFALSE 66071
// exit ;
66069: GO 66116
// for i in tmp do
66071: LD_ADDR_VAR 0 3
66075: PUSH
66076: LD_VAR 0 5
66080: PUSH
66081: FOR_IN
66082: IFFALSE 66114
// begin result := EnemyInRange ( i , 22 ) ;
66084: LD_ADDR_VAR 0 2
66088: PUSH
66089: LD_VAR 0 3
66093: PPUSH
66094: LD_INT 22
66096: PPUSH
66097: CALL 63703 0 2
66101: ST_TO_ADDR
// if result then
66102: LD_VAR 0 2
66106: IFFALSE 66112
// exit ;
66108: POP
66109: POP
66110: GO 66116
// end ;
66112: GO 66081
66114: POP
66115: POP
// end ;
66116: LD_VAR 0 2
66120: RET
// export function FilterByTag ( units , tag ) ; begin
66121: LD_INT 0
66123: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66124: LD_ADDR_VAR 0 3
66128: PUSH
66129: LD_VAR 0 1
66133: PPUSH
66134: LD_INT 120
66136: PUSH
66137: LD_VAR 0 2
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PPUSH
66146: CALL_OW 72
66150: ST_TO_ADDR
// end ;
66151: LD_VAR 0 3
66155: RET
// export function IsDriver ( un ) ; begin
66156: LD_INT 0
66158: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66159: LD_ADDR_VAR 0 2
66163: PUSH
66164: LD_VAR 0 1
66168: PUSH
66169: LD_INT 55
66171: PUSH
66172: EMPTY
66173: LIST
66174: PPUSH
66175: CALL_OW 69
66179: IN
66180: ST_TO_ADDR
// end ;
66181: LD_VAR 0 2
66185: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66186: LD_INT 0
66188: PPUSH
66189: PPUSH
// list := [ ] ;
66190: LD_ADDR_VAR 0 5
66194: PUSH
66195: EMPTY
66196: ST_TO_ADDR
// case d of 0 :
66197: LD_VAR 0 3
66201: PUSH
66202: LD_INT 0
66204: DOUBLE
66205: EQUAL
66206: IFTRUE 66210
66208: GO 66343
66210: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66211: LD_ADDR_VAR 0 5
66215: PUSH
66216: LD_VAR 0 1
66220: PUSH
66221: LD_INT 4
66223: MINUS
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: LD_INT 4
66232: MINUS
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: PUSH
66242: LD_VAR 0 1
66246: PUSH
66247: LD_INT 3
66249: MINUS
66250: PUSH
66251: LD_VAR 0 2
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: PUSH
66264: LD_VAR 0 1
66268: PUSH
66269: LD_INT 4
66271: PLUS
66272: PUSH
66273: LD_VAR 0 2
66277: PUSH
66278: LD_INT 4
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: LD_VAR 0 1
66290: PUSH
66291: LD_INT 3
66293: PLUS
66294: PUSH
66295: LD_VAR 0 2
66299: PUSH
66300: LD_INT 3
66302: PLUS
66303: PUSH
66304: LD_INT 5
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: PUSH
66312: LD_VAR 0 1
66316: PUSH
66317: LD_VAR 0 2
66321: PUSH
66322: LD_INT 4
66324: PLUS
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// end ; 1 :
66341: GO 67041
66343: LD_INT 1
66345: DOUBLE
66346: EQUAL
66347: IFTRUE 66351
66349: GO 66484
66351: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66352: LD_ADDR_VAR 0 5
66356: PUSH
66357: LD_VAR 0 1
66361: PUSH
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 4
66369: MINUS
66370: PUSH
66371: LD_INT 3
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_INT 3
66386: MINUS
66387: PUSH
66388: LD_VAR 0 2
66392: PUSH
66393: LD_INT 3
66395: MINUS
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: LIST
66404: PUSH
66405: LD_VAR 0 1
66409: PUSH
66410: LD_INT 4
66412: MINUS
66413: PUSH
66414: LD_VAR 0 2
66418: PUSH
66419: LD_INT 1
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: PUSH
66427: LD_VAR 0 1
66431: PUSH
66432: LD_VAR 0 2
66436: PUSH
66437: LD_INT 3
66439: PLUS
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: PUSH
66449: LD_VAR 0 1
66453: PUSH
66454: LD_INT 4
66456: PLUS
66457: PUSH
66458: LD_VAR 0 2
66462: PUSH
66463: LD_INT 4
66465: PLUS
66466: PUSH
66467: LD_INT 5
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: ST_TO_ADDR
// end ; 2 :
66482: GO 67041
66484: LD_INT 2
66486: DOUBLE
66487: EQUAL
66488: IFTRUE 66492
66490: GO 66621
66492: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66493: LD_ADDR_VAR 0 5
66497: PUSH
66498: LD_VAR 0 1
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: LD_INT 3
66510: MINUS
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: PUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 4
66527: PLUS
66528: PUSH
66529: LD_VAR 0 2
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: PUSH
66542: LD_VAR 0 1
66546: PUSH
66547: LD_VAR 0 2
66551: PUSH
66552: LD_INT 4
66554: PLUS
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: LIST
66563: PUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 3
66571: MINUS
66572: PUSH
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: LD_INT 4
66593: MINUS
66594: PUSH
66595: LD_VAR 0 2
66599: PUSH
66600: LD_INT 4
66602: MINUS
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: ST_TO_ADDR
// end ; 3 :
66619: GO 67041
66621: LD_INT 3
66623: DOUBLE
66624: EQUAL
66625: IFTRUE 66629
66627: GO 66762
66629: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66630: LD_ADDR_VAR 0 5
66634: PUSH
66635: LD_VAR 0 1
66639: PUSH
66640: LD_INT 3
66642: PLUS
66643: PUSH
66644: LD_VAR 0 2
66648: PUSH
66649: LD_INT 4
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: PUSH
66657: LD_VAR 0 1
66661: PUSH
66662: LD_INT 4
66664: PLUS
66665: PUSH
66666: LD_VAR 0 2
66670: PUSH
66671: LD_INT 4
66673: PLUS
66674: PUSH
66675: LD_INT 5
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: PUSH
66683: LD_VAR 0 1
66687: PUSH
66688: LD_INT 4
66690: MINUS
66691: PUSH
66692: LD_VAR 0 2
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: PUSH
66705: LD_VAR 0 1
66709: PUSH
66710: LD_VAR 0 2
66714: PUSH
66715: LD_INT 4
66717: MINUS
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: PUSH
66727: LD_VAR 0 1
66731: PUSH
66732: LD_INT 3
66734: MINUS
66735: PUSH
66736: LD_VAR 0 2
66740: PUSH
66741: LD_INT 3
66743: MINUS
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: ST_TO_ADDR
// end ; 4 :
66760: GO 67041
66762: LD_INT 4
66764: DOUBLE
66765: EQUAL
66766: IFTRUE 66770
66768: GO 66903
66770: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66771: LD_ADDR_VAR 0 5
66775: PUSH
66776: LD_VAR 0 1
66780: PUSH
66781: LD_VAR 0 2
66785: PUSH
66786: LD_INT 4
66788: PLUS
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: PUSH
66798: LD_VAR 0 1
66802: PUSH
66803: LD_INT 3
66805: PLUS
66806: PUSH
66807: LD_VAR 0 2
66811: PUSH
66812: LD_INT 3
66814: PLUS
66815: PUSH
66816: LD_INT 5
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: PUSH
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 4
66831: PLUS
66832: PUSH
66833: LD_VAR 0 2
66837: PUSH
66838: LD_INT 4
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: PUSH
66846: LD_VAR 0 1
66850: PUSH
66851: LD_VAR 0 2
66855: PUSH
66856: LD_INT 3
66858: MINUS
66859: PUSH
66860: LD_INT 3
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: PUSH
66868: LD_VAR 0 1
66872: PUSH
66873: LD_INT 4
66875: MINUS
66876: PUSH
66877: LD_VAR 0 2
66881: PUSH
66882: LD_INT 4
66884: MINUS
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: ST_TO_ADDR
// end ; 5 :
66901: GO 67041
66903: LD_INT 5
66905: DOUBLE
66906: EQUAL
66907: IFTRUE 66911
66909: GO 67040
66911: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66912: LD_ADDR_VAR 0 5
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: LD_INT 4
66924: MINUS
66925: PUSH
66926: LD_VAR 0 2
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: PUSH
66939: LD_VAR 0 1
66943: PUSH
66944: LD_VAR 0 2
66948: PUSH
66949: LD_INT 4
66951: MINUS
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: LIST
66960: PUSH
66961: LD_VAR 0 1
66965: PUSH
66966: LD_INT 4
66968: PLUS
66969: PUSH
66970: LD_VAR 0 2
66974: PUSH
66975: LD_INT 4
66977: PLUS
66978: PUSH
66979: LD_INT 5
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: PUSH
66987: LD_VAR 0 1
66991: PUSH
66992: LD_INT 3
66994: PLUS
66995: PUSH
66996: LD_VAR 0 2
67000: PUSH
67001: LD_INT 4
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: PUSH
67009: LD_VAR 0 1
67013: PUSH
67014: LD_VAR 0 2
67018: PUSH
67019: LD_INT 3
67021: PLUS
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: ST_TO_ADDR
// end ; end ;
67038: GO 67041
67040: POP
// result := list ;
67041: LD_ADDR_VAR 0 4
67045: PUSH
67046: LD_VAR 0 5
67050: ST_TO_ADDR
// end ;
67051: LD_VAR 0 4
67055: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67056: LD_INT 0
67058: PPUSH
67059: PPUSH
67060: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67061: LD_VAR 0 1
67065: NOT
67066: PUSH
67067: LD_VAR 0 2
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: LD_INT 4
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: IN
67090: NOT
67091: OR
67092: IFFALSE 67096
// exit ;
67094: GO 67179
// tmp := [ ] ;
67096: LD_ADDR_VAR 0 5
67100: PUSH
67101: EMPTY
67102: ST_TO_ADDR
// for i in units do
67103: LD_ADDR_VAR 0 4
67107: PUSH
67108: LD_VAR 0 1
67112: PUSH
67113: FOR_IN
67114: IFFALSE 67148
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67116: LD_ADDR_VAR 0 5
67120: PUSH
67121: LD_VAR 0 5
67125: PPUSH
67126: LD_VAR 0 4
67130: PPUSH
67131: LD_VAR 0 2
67135: PPUSH
67136: CALL_OW 259
67140: PPUSH
67141: CALL 68540 0 2
67145: ST_TO_ADDR
67146: GO 67113
67148: POP
67149: POP
// if not tmp then
67150: LD_VAR 0 5
67154: NOT
67155: IFFALSE 67159
// exit ;
67157: GO 67179
// result := SortListByListDesc ( units , tmp ) ;
67159: LD_ADDR_VAR 0 3
67163: PUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: LD_VAR 0 5
67173: PPUSH
67174: CALL_OW 77
67178: ST_TO_ADDR
// end ;
67179: LD_VAR 0 3
67183: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67184: LD_INT 0
67186: PPUSH
67187: PPUSH
67188: PPUSH
// result := false ;
67189: LD_ADDR_VAR 0 3
67193: PUSH
67194: LD_INT 0
67196: ST_TO_ADDR
// if not building then
67197: LD_VAR 0 2
67201: NOT
67202: IFFALSE 67206
// exit ;
67204: GO 67344
// x := GetX ( building ) ;
67206: LD_ADDR_VAR 0 4
67210: PUSH
67211: LD_VAR 0 2
67215: PPUSH
67216: CALL_OW 250
67220: ST_TO_ADDR
// y := GetY ( building ) ;
67221: LD_ADDR_VAR 0 5
67225: PUSH
67226: LD_VAR 0 2
67230: PPUSH
67231: CALL_OW 251
67235: ST_TO_ADDR
// if not x or not y then
67236: LD_VAR 0 4
67240: NOT
67241: PUSH
67242: LD_VAR 0 5
67246: NOT
67247: OR
67248: IFFALSE 67252
// exit ;
67250: GO 67344
// if GetTaskList ( unit ) then
67252: LD_VAR 0 1
67256: PPUSH
67257: CALL_OW 437
67261: IFFALSE 67344
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67263: LD_STRING e
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: CALL_OW 437
67275: PUSH
67276: LD_INT 1
67278: ARRAY
67279: PUSH
67280: LD_INT 1
67282: ARRAY
67283: EQUAL
67284: PUSH
67285: LD_VAR 0 4
67289: PUSH
67290: LD_VAR 0 1
67294: PPUSH
67295: CALL_OW 437
67299: PUSH
67300: LD_INT 1
67302: ARRAY
67303: PUSH
67304: LD_INT 2
67306: ARRAY
67307: EQUAL
67308: AND
67309: PUSH
67310: LD_VAR 0 5
67314: PUSH
67315: LD_VAR 0 1
67319: PPUSH
67320: CALL_OW 437
67324: PUSH
67325: LD_INT 1
67327: ARRAY
67328: PUSH
67329: LD_INT 3
67331: ARRAY
67332: EQUAL
67333: AND
67334: IFFALSE 67344
// result := true end ;
67336: LD_ADDR_VAR 0 3
67340: PUSH
67341: LD_INT 1
67343: ST_TO_ADDR
// end ;
67344: LD_VAR 0 3
67348: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67349: LD_INT 0
67351: PPUSH
// result := false ;
67352: LD_ADDR_VAR 0 4
67356: PUSH
67357: LD_INT 0
67359: ST_TO_ADDR
// if GetTaskList ( unit ) then
67360: LD_VAR 0 1
67364: PPUSH
67365: CALL_OW 437
67369: IFFALSE 67452
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67371: LD_STRING M
67373: PUSH
67374: LD_VAR 0 1
67378: PPUSH
67379: CALL_OW 437
67383: PUSH
67384: LD_INT 1
67386: ARRAY
67387: PUSH
67388: LD_INT 1
67390: ARRAY
67391: EQUAL
67392: PUSH
67393: LD_VAR 0 2
67397: PUSH
67398: LD_VAR 0 1
67402: PPUSH
67403: CALL_OW 437
67407: PUSH
67408: LD_INT 1
67410: ARRAY
67411: PUSH
67412: LD_INT 2
67414: ARRAY
67415: EQUAL
67416: AND
67417: PUSH
67418: LD_VAR 0 3
67422: PUSH
67423: LD_VAR 0 1
67427: PPUSH
67428: CALL_OW 437
67432: PUSH
67433: LD_INT 1
67435: ARRAY
67436: PUSH
67437: LD_INT 3
67439: ARRAY
67440: EQUAL
67441: AND
67442: IFFALSE 67452
// result := true ;
67444: LD_ADDR_VAR 0 4
67448: PUSH
67449: LD_INT 1
67451: ST_TO_ADDR
// end ; end ;
67452: LD_VAR 0 4
67456: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67457: LD_INT 0
67459: PPUSH
67460: PPUSH
67461: PPUSH
67462: PPUSH
// if not unit or not area then
67463: LD_VAR 0 1
67467: NOT
67468: PUSH
67469: LD_VAR 0 2
67473: NOT
67474: OR
67475: IFFALSE 67479
// exit ;
67477: GO 67643
// tmp := AreaToList ( area , i ) ;
67479: LD_ADDR_VAR 0 6
67483: PUSH
67484: LD_VAR 0 2
67488: PPUSH
67489: LD_VAR 0 5
67493: PPUSH
67494: CALL_OW 517
67498: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67499: LD_ADDR_VAR 0 5
67503: PUSH
67504: DOUBLE
67505: LD_INT 1
67507: DEC
67508: ST_TO_ADDR
67509: LD_VAR 0 6
67513: PUSH
67514: LD_INT 1
67516: ARRAY
67517: PUSH
67518: FOR_TO
67519: IFFALSE 67641
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67521: LD_ADDR_VAR 0 7
67525: PUSH
67526: LD_VAR 0 6
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PUSH
67535: LD_VAR 0 5
67539: ARRAY
67540: PUSH
67541: LD_VAR 0 6
67545: PUSH
67546: LD_INT 2
67548: ARRAY
67549: PUSH
67550: LD_VAR 0 5
67554: ARRAY
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67560: LD_VAR 0 7
67564: PUSH
67565: LD_INT 1
67567: ARRAY
67568: PPUSH
67569: LD_VAR 0 7
67573: PUSH
67574: LD_INT 2
67576: ARRAY
67577: PPUSH
67578: CALL_OW 428
67582: PUSH
67583: LD_INT 0
67585: EQUAL
67586: IFFALSE 67639
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67588: LD_VAR 0 1
67592: PPUSH
67593: LD_VAR 0 7
67597: PUSH
67598: LD_INT 1
67600: ARRAY
67601: PPUSH
67602: LD_VAR 0 7
67606: PUSH
67607: LD_INT 2
67609: ARRAY
67610: PPUSH
67611: LD_VAR 0 3
67615: PPUSH
67616: CALL_OW 48
// result := IsPlaced ( unit ) ;
67620: LD_ADDR_VAR 0 4
67624: PUSH
67625: LD_VAR 0 1
67629: PPUSH
67630: CALL_OW 305
67634: ST_TO_ADDR
// exit ;
67635: POP
67636: POP
67637: GO 67643
// end ; end ;
67639: GO 67518
67641: POP
67642: POP
// end ;
67643: LD_VAR 0 4
67647: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67648: LD_INT 0
67650: PPUSH
67651: PPUSH
67652: PPUSH
// if not side or side > 8 then
67653: LD_VAR 0 1
67657: NOT
67658: PUSH
67659: LD_VAR 0 1
67663: PUSH
67664: LD_INT 8
67666: GREATER
67667: OR
67668: IFFALSE 67672
// exit ;
67670: GO 67859
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67672: LD_ADDR_VAR 0 4
67676: PUSH
67677: LD_INT 22
67679: PUSH
67680: LD_VAR 0 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 21
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PPUSH
67703: CALL_OW 69
67707: ST_TO_ADDR
// if not tmp then
67708: LD_VAR 0 4
67712: NOT
67713: IFFALSE 67717
// exit ;
67715: GO 67859
// enable_addtolog := true ;
67717: LD_ADDR_OWVAR 81
67721: PUSH
67722: LD_INT 1
67724: ST_TO_ADDR
// AddToLog ( [ ) ;
67725: LD_STRING [
67727: PPUSH
67728: CALL_OW 561
// for i in tmp do
67732: LD_ADDR_VAR 0 3
67736: PUSH
67737: LD_VAR 0 4
67741: PUSH
67742: FOR_IN
67743: IFFALSE 67850
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67745: LD_STRING [
67747: PUSH
67748: LD_VAR 0 3
67752: PPUSH
67753: CALL_OW 266
67757: STR
67758: PUSH
67759: LD_STRING , 
67761: STR
67762: PUSH
67763: LD_VAR 0 3
67767: PPUSH
67768: CALL_OW 250
67772: STR
67773: PUSH
67774: LD_STRING , 
67776: STR
67777: PUSH
67778: LD_VAR 0 3
67782: PPUSH
67783: CALL_OW 251
67787: STR
67788: PUSH
67789: LD_STRING , 
67791: STR
67792: PUSH
67793: LD_VAR 0 3
67797: PPUSH
67798: CALL_OW 254
67802: STR
67803: PUSH
67804: LD_STRING , 
67806: STR
67807: PUSH
67808: LD_VAR 0 3
67812: PPUSH
67813: LD_INT 1
67815: PPUSH
67816: CALL_OW 268
67820: STR
67821: PUSH
67822: LD_STRING , 
67824: STR
67825: PUSH
67826: LD_VAR 0 3
67830: PPUSH
67831: LD_INT 2
67833: PPUSH
67834: CALL_OW 268
67838: STR
67839: PUSH
67840: LD_STRING ],
67842: STR
67843: PPUSH
67844: CALL_OW 561
// end ;
67848: GO 67742
67850: POP
67851: POP
// AddToLog ( ]; ) ;
67852: LD_STRING ];
67854: PPUSH
67855: CALL_OW 561
// end ;
67859: LD_VAR 0 2
67863: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67864: LD_INT 0
67866: PPUSH
67867: PPUSH
67868: PPUSH
67869: PPUSH
67870: PPUSH
// if not area or not rate or not max then
67871: LD_VAR 0 1
67875: NOT
67876: PUSH
67877: LD_VAR 0 2
67881: NOT
67882: OR
67883: PUSH
67884: LD_VAR 0 4
67888: NOT
67889: OR
67890: IFFALSE 67894
// exit ;
67892: GO 68083
// while 1 do
67894: LD_INT 1
67896: IFFALSE 68083
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67898: LD_ADDR_VAR 0 9
67902: PUSH
67903: LD_VAR 0 1
67907: PPUSH
67908: LD_INT 1
67910: PPUSH
67911: CALL_OW 287
67915: PUSH
67916: LD_INT 10
67918: MUL
67919: ST_TO_ADDR
// r := rate / 10 ;
67920: LD_ADDR_VAR 0 7
67924: PUSH
67925: LD_VAR 0 2
67929: PUSH
67930: LD_INT 10
67932: DIVREAL
67933: ST_TO_ADDR
// time := 1 1$00 ;
67934: LD_ADDR_VAR 0 8
67938: PUSH
67939: LD_INT 2100
67941: ST_TO_ADDR
// if amount < min then
67942: LD_VAR 0 9
67946: PUSH
67947: LD_VAR 0 3
67951: LESS
67952: IFFALSE 67970
// r := r * 2 else
67954: LD_ADDR_VAR 0 7
67958: PUSH
67959: LD_VAR 0 7
67963: PUSH
67964: LD_INT 2
67966: MUL
67967: ST_TO_ADDR
67968: GO 67996
// if amount > max then
67970: LD_VAR 0 9
67974: PUSH
67975: LD_VAR 0 4
67979: GREATER
67980: IFFALSE 67996
// r := r / 2 ;
67982: LD_ADDR_VAR 0 7
67986: PUSH
67987: LD_VAR 0 7
67991: PUSH
67992: LD_INT 2
67994: DIVREAL
67995: ST_TO_ADDR
// time := time / r ;
67996: LD_ADDR_VAR 0 8
68000: PUSH
68001: LD_VAR 0 8
68005: PUSH
68006: LD_VAR 0 7
68010: DIVREAL
68011: ST_TO_ADDR
// if time < 0 then
68012: LD_VAR 0 8
68016: PUSH
68017: LD_INT 0
68019: LESS
68020: IFFALSE 68037
// time := time * - 1 ;
68022: LD_ADDR_VAR 0 8
68026: PUSH
68027: LD_VAR 0 8
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: MUL
68036: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68037: LD_VAR 0 8
68041: PUSH
68042: LD_INT 35
68044: PPUSH
68045: LD_INT 875
68047: PPUSH
68048: CALL_OW 12
68052: PLUS
68053: PPUSH
68054: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68058: LD_INT 1
68060: PPUSH
68061: LD_INT 5
68063: PPUSH
68064: CALL_OW 12
68068: PPUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: LD_INT 1
68076: PPUSH
68077: CALL_OW 55
// end ;
68081: GO 67894
// end ;
68083: LD_VAR 0 5
68087: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68088: LD_INT 0
68090: PPUSH
68091: PPUSH
68092: PPUSH
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
// if not turrets or not factories then
68098: LD_VAR 0 1
68102: NOT
68103: PUSH
68104: LD_VAR 0 2
68108: NOT
68109: OR
68110: IFFALSE 68114
// exit ;
68112: GO 68421
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68114: LD_ADDR_VAR 0 10
68118: PUSH
68119: LD_INT 5
68121: PUSH
68122: LD_INT 6
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: LD_INT 4
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: LD_INT 5
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 24
68156: PUSH
68157: LD_INT 25
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 23
68166: PUSH
68167: LD_INT 27
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 42
68180: PUSH
68181: LD_INT 43
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 44
68190: PUSH
68191: LD_INT 46
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 45
68200: PUSH
68201: LD_INT 47
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: LIST
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: ST_TO_ADDR
// result := [ ] ;
68218: LD_ADDR_VAR 0 3
68222: PUSH
68223: EMPTY
68224: ST_TO_ADDR
// for i in turrets do
68225: LD_ADDR_VAR 0 4
68229: PUSH
68230: LD_VAR 0 1
68234: PUSH
68235: FOR_IN
68236: IFFALSE 68419
// begin nat := GetNation ( i ) ;
68238: LD_ADDR_VAR 0 7
68242: PUSH
68243: LD_VAR 0 4
68247: PPUSH
68248: CALL_OW 248
68252: ST_TO_ADDR
// weapon := 0 ;
68253: LD_ADDR_VAR 0 8
68257: PUSH
68258: LD_INT 0
68260: ST_TO_ADDR
// if not nat then
68261: LD_VAR 0 7
68265: NOT
68266: IFFALSE 68270
// continue ;
68268: GO 68235
// for j in list [ nat ] do
68270: LD_ADDR_VAR 0 5
68274: PUSH
68275: LD_VAR 0 10
68279: PUSH
68280: LD_VAR 0 7
68284: ARRAY
68285: PUSH
68286: FOR_IN
68287: IFFALSE 68328
// if GetBWeapon ( i ) = j [ 1 ] then
68289: LD_VAR 0 4
68293: PPUSH
68294: CALL_OW 269
68298: PUSH
68299: LD_VAR 0 5
68303: PUSH
68304: LD_INT 1
68306: ARRAY
68307: EQUAL
68308: IFFALSE 68326
// begin weapon := j [ 2 ] ;
68310: LD_ADDR_VAR 0 8
68314: PUSH
68315: LD_VAR 0 5
68319: PUSH
68320: LD_INT 2
68322: ARRAY
68323: ST_TO_ADDR
// break ;
68324: GO 68328
// end ;
68326: GO 68286
68328: POP
68329: POP
// if not weapon then
68330: LD_VAR 0 8
68334: NOT
68335: IFFALSE 68339
// continue ;
68337: GO 68235
// for k in factories do
68339: LD_ADDR_VAR 0 6
68343: PUSH
68344: LD_VAR 0 2
68348: PUSH
68349: FOR_IN
68350: IFFALSE 68415
// begin weapons := AvailableWeaponList ( k ) ;
68352: LD_ADDR_VAR 0 9
68356: PUSH
68357: LD_VAR 0 6
68361: PPUSH
68362: CALL_OW 478
68366: ST_TO_ADDR
// if not weapons then
68367: LD_VAR 0 9
68371: NOT
68372: IFFALSE 68376
// continue ;
68374: GO 68349
// if weapon in weapons then
68376: LD_VAR 0 8
68380: PUSH
68381: LD_VAR 0 9
68385: IN
68386: IFFALSE 68413
// begin result := [ i , weapon ] ;
68388: LD_ADDR_VAR 0 3
68392: PUSH
68393: LD_VAR 0 4
68397: PUSH
68398: LD_VAR 0 8
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: ST_TO_ADDR
// exit ;
68407: POP
68408: POP
68409: POP
68410: POP
68411: GO 68421
// end ; end ;
68413: GO 68349
68415: POP
68416: POP
// end ;
68417: GO 68235
68419: POP
68420: POP
// end ;
68421: LD_VAR 0 3
68425: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68426: LD_INT 0
68428: PPUSH
// if not side or side > 8 then
68429: LD_VAR 0 3
68433: NOT
68434: PUSH
68435: LD_VAR 0 3
68439: PUSH
68440: LD_INT 8
68442: GREATER
68443: OR
68444: IFFALSE 68448
// exit ;
68446: GO 68507
// if not range then
68448: LD_VAR 0 4
68452: NOT
68453: IFFALSE 68464
// range := - 12 ;
68455: LD_ADDR_VAR 0 4
68459: PUSH
68460: LD_INT 12
68462: NEG
68463: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68464: LD_VAR 0 1
68468: PPUSH
68469: LD_VAR 0 2
68473: PPUSH
68474: LD_VAR 0 3
68478: PPUSH
68479: LD_VAR 0 4
68483: PPUSH
68484: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68488: LD_VAR 0 1
68492: PPUSH
68493: LD_VAR 0 2
68497: PPUSH
68498: LD_VAR 0 3
68502: PPUSH
68503: CALL_OW 331
// end ;
68507: LD_VAR 0 5
68511: RET
// export function Video ( mode ) ; begin
68512: LD_INT 0
68514: PPUSH
// ingame_video = mode ;
68515: LD_ADDR_OWVAR 52
68519: PUSH
68520: LD_VAR 0 1
68524: ST_TO_ADDR
// interface_hidden = mode ;
68525: LD_ADDR_OWVAR 54
68529: PUSH
68530: LD_VAR 0 1
68534: ST_TO_ADDR
// end ;
68535: LD_VAR 0 2
68539: RET
// export function Join ( array , element ) ; begin
68540: LD_INT 0
68542: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68543: LD_ADDR_VAR 0 3
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: LD_VAR 0 1
68557: PUSH
68558: LD_INT 1
68560: PLUS
68561: PPUSH
68562: LD_VAR 0 2
68566: PPUSH
68567: CALL_OW 1
68571: ST_TO_ADDR
// end ;
68572: LD_VAR 0 3
68576: RET
// export function JoinUnion ( array , element ) ; begin
68577: LD_INT 0
68579: PPUSH
// result := array union element ;
68580: LD_ADDR_VAR 0 3
68584: PUSH
68585: LD_VAR 0 1
68589: PUSH
68590: LD_VAR 0 2
68594: UNION
68595: ST_TO_ADDR
// end ;
68596: LD_VAR 0 3
68600: RET
// export function GetBehemoths ( side ) ; begin
68601: LD_INT 0
68603: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68604: LD_ADDR_VAR 0 2
68608: PUSH
68609: LD_INT 22
68611: PUSH
68612: LD_VAR 0 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 31
68623: PUSH
68624: LD_INT 25
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PPUSH
68635: CALL_OW 69
68639: ST_TO_ADDR
// end ;
68640: LD_VAR 0 2
68644: RET
// export function Shuffle ( array ) ; var i , index ; begin
68645: LD_INT 0
68647: PPUSH
68648: PPUSH
68649: PPUSH
// result := [ ] ;
68650: LD_ADDR_VAR 0 2
68654: PUSH
68655: EMPTY
68656: ST_TO_ADDR
// if not array then
68657: LD_VAR 0 1
68661: NOT
68662: IFFALSE 68666
// exit ;
68664: GO 68765
// Randomize ;
68666: CALL_OW 10
// for i = array downto 1 do
68670: LD_ADDR_VAR 0 3
68674: PUSH
68675: DOUBLE
68676: LD_VAR 0 1
68680: INC
68681: ST_TO_ADDR
68682: LD_INT 1
68684: PUSH
68685: FOR_DOWNTO
68686: IFFALSE 68763
// begin index := rand ( 1 , array ) ;
68688: LD_ADDR_VAR 0 4
68692: PUSH
68693: LD_INT 1
68695: PPUSH
68696: LD_VAR 0 1
68700: PPUSH
68701: CALL_OW 12
68705: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68706: LD_ADDR_VAR 0 2
68710: PUSH
68711: LD_VAR 0 2
68715: PPUSH
68716: LD_VAR 0 2
68720: PUSH
68721: LD_INT 1
68723: PLUS
68724: PPUSH
68725: LD_VAR 0 1
68729: PUSH
68730: LD_VAR 0 4
68734: ARRAY
68735: PPUSH
68736: CALL_OW 2
68740: ST_TO_ADDR
// array := Delete ( array , index ) ;
68741: LD_ADDR_VAR 0 1
68745: PUSH
68746: LD_VAR 0 1
68750: PPUSH
68751: LD_VAR 0 4
68755: PPUSH
68756: CALL_OW 3
68760: ST_TO_ADDR
// end ;
68761: GO 68685
68763: POP
68764: POP
// end ;
68765: LD_VAR 0 2
68769: RET
// export function GetBaseMaterials ( base ) ; begin
68770: LD_INT 0
68772: PPUSH
// result := [ 0 , 0 , 0 ] ;
68773: LD_ADDR_VAR 0 2
68777: PUSH
68778: LD_INT 0
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: ST_TO_ADDR
// if not base then
68792: LD_VAR 0 1
68796: NOT
68797: IFFALSE 68801
// exit ;
68799: GO 68850
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_VAR 0 1
68810: PPUSH
68811: LD_INT 1
68813: PPUSH
68814: CALL_OW 275
68818: PUSH
68819: LD_VAR 0 1
68823: PPUSH
68824: LD_INT 2
68826: PPUSH
68827: CALL_OW 275
68831: PUSH
68832: LD_VAR 0 1
68836: PPUSH
68837: LD_INT 3
68839: PPUSH
68840: CALL_OW 275
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: LIST
68849: ST_TO_ADDR
// end ;
68850: LD_VAR 0 2
68854: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68855: LD_INT 0
68857: PPUSH
68858: PPUSH
// result := array ;
68859: LD_ADDR_VAR 0 3
68863: PUSH
68864: LD_VAR 0 1
68868: ST_TO_ADDR
// if size >= result then
68869: LD_VAR 0 2
68873: PUSH
68874: LD_VAR 0 3
68878: GREATEREQUAL
68879: IFFALSE 68883
// exit ;
68881: GO 68933
// if size then
68883: LD_VAR 0 2
68887: IFFALSE 68933
// for i := array downto size do
68889: LD_ADDR_VAR 0 4
68893: PUSH
68894: DOUBLE
68895: LD_VAR 0 1
68899: INC
68900: ST_TO_ADDR
68901: LD_VAR 0 2
68905: PUSH
68906: FOR_DOWNTO
68907: IFFALSE 68931
// result := Delete ( result , result ) ;
68909: LD_ADDR_VAR 0 3
68913: PUSH
68914: LD_VAR 0 3
68918: PPUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL_OW 3
68928: ST_TO_ADDR
68929: GO 68906
68931: POP
68932: POP
// end ;
68933: LD_VAR 0 3
68937: RET
// export function ComExit ( unit ) ; var tmp ; begin
68938: LD_INT 0
68940: PPUSH
68941: PPUSH
// if not IsInUnit ( unit ) then
68942: LD_VAR 0 1
68946: PPUSH
68947: CALL_OW 310
68951: NOT
68952: IFFALSE 68956
// exit ;
68954: GO 69016
// tmp := IsInUnit ( unit ) ;
68956: LD_ADDR_VAR 0 3
68960: PUSH
68961: LD_VAR 0 1
68965: PPUSH
68966: CALL_OW 310
68970: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68971: LD_VAR 0 3
68975: PPUSH
68976: CALL_OW 247
68980: PUSH
68981: LD_INT 2
68983: EQUAL
68984: IFFALSE 68997
// ComExitVehicle ( unit ) else
68986: LD_VAR 0 1
68990: PPUSH
68991: CALL_OW 121
68995: GO 69006
// ComExitBuilding ( unit ) ;
68997: LD_VAR 0 1
69001: PPUSH
69002: CALL_OW 122
// result := tmp ;
69006: LD_ADDR_VAR 0 2
69010: PUSH
69011: LD_VAR 0 3
69015: ST_TO_ADDR
// end ;
69016: LD_VAR 0 2
69020: RET
// export function ComExitAll ( units ) ; var i ; begin
69021: LD_INT 0
69023: PPUSH
69024: PPUSH
// if not units then
69025: LD_VAR 0 1
69029: NOT
69030: IFFALSE 69034
// exit ;
69032: GO 69060
// for i in units do
69034: LD_ADDR_VAR 0 3
69038: PUSH
69039: LD_VAR 0 1
69043: PUSH
69044: FOR_IN
69045: IFFALSE 69058
// ComExit ( i ) ;
69047: LD_VAR 0 3
69051: PPUSH
69052: CALL 68938 0 1
69056: GO 69044
69058: POP
69059: POP
// end ;
69060: LD_VAR 0 2
69064: RET
// export function ResetHc ; begin
69065: LD_INT 0
69067: PPUSH
// InitHc ;
69068: CALL_OW 19
// hc_importance := 0 ;
69072: LD_ADDR_OWVAR 32
69076: PUSH
69077: LD_INT 0
69079: ST_TO_ADDR
// end ;
69080: LD_VAR 0 1
69084: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69085: LD_INT 0
69087: PPUSH
69088: PPUSH
69089: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69090: LD_ADDR_VAR 0 6
69094: PUSH
69095: LD_VAR 0 1
69099: PUSH
69100: LD_VAR 0 3
69104: PLUS
69105: PUSH
69106: LD_INT 2
69108: DIV
69109: ST_TO_ADDR
// if _x < 0 then
69110: LD_VAR 0 6
69114: PUSH
69115: LD_INT 0
69117: LESS
69118: IFFALSE 69135
// _x := _x * - 1 ;
69120: LD_ADDR_VAR 0 6
69124: PUSH
69125: LD_VAR 0 6
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: MUL
69134: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69135: LD_ADDR_VAR 0 7
69139: PUSH
69140: LD_VAR 0 2
69144: PUSH
69145: LD_VAR 0 4
69149: PLUS
69150: PUSH
69151: LD_INT 2
69153: DIV
69154: ST_TO_ADDR
// if _y < 0 then
69155: LD_VAR 0 7
69159: PUSH
69160: LD_INT 0
69162: LESS
69163: IFFALSE 69180
// _y := _y * - 1 ;
69165: LD_ADDR_VAR 0 7
69169: PUSH
69170: LD_VAR 0 7
69174: PUSH
69175: LD_INT 1
69177: NEG
69178: MUL
69179: ST_TO_ADDR
// result := [ _x , _y ] ;
69180: LD_ADDR_VAR 0 5
69184: PUSH
69185: LD_VAR 0 6
69189: PUSH
69190: LD_VAR 0 7
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: ST_TO_ADDR
// end ;
69199: LD_VAR 0 5
69203: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69204: LD_INT 0
69206: PPUSH
69207: PPUSH
69208: PPUSH
69209: PPUSH
// task := GetTaskList ( unit ) ;
69210: LD_ADDR_VAR 0 7
69214: PUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: CALL_OW 437
69224: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69225: LD_VAR 0 7
69229: NOT
69230: PUSH
69231: LD_VAR 0 1
69235: PPUSH
69236: LD_VAR 0 2
69240: PPUSH
69241: CALL_OW 308
69245: NOT
69246: AND
69247: IFFALSE 69251
// exit ;
69249: GO 69369
// if IsInArea ( unit , area ) then
69251: LD_VAR 0 1
69255: PPUSH
69256: LD_VAR 0 2
69260: PPUSH
69261: CALL_OW 308
69265: IFFALSE 69283
// begin ComMoveToArea ( unit , goAway ) ;
69267: LD_VAR 0 1
69271: PPUSH
69272: LD_VAR 0 3
69276: PPUSH
69277: CALL_OW 113
// exit ;
69281: GO 69369
// end ; if task [ 1 ] [ 1 ] <> M then
69283: LD_VAR 0 7
69287: PUSH
69288: LD_INT 1
69290: ARRAY
69291: PUSH
69292: LD_INT 1
69294: ARRAY
69295: PUSH
69296: LD_STRING M
69298: NONEQUAL
69299: IFFALSE 69303
// exit ;
69301: GO 69369
// x := task [ 1 ] [ 2 ] ;
69303: LD_ADDR_VAR 0 5
69307: PUSH
69308: LD_VAR 0 7
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PUSH
69317: LD_INT 2
69319: ARRAY
69320: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69321: LD_ADDR_VAR 0 6
69325: PUSH
69326: LD_VAR 0 7
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PUSH
69335: LD_INT 3
69337: ARRAY
69338: ST_TO_ADDR
// if InArea ( x , y , area ) then
69339: LD_VAR 0 5
69343: PPUSH
69344: LD_VAR 0 6
69348: PPUSH
69349: LD_VAR 0 2
69353: PPUSH
69354: CALL_OW 309
69358: IFFALSE 69369
// ComStop ( unit ) ;
69360: LD_VAR 0 1
69364: PPUSH
69365: CALL_OW 141
// end ;
69369: LD_VAR 0 4
69373: RET
// export function Abs ( value ) ; begin
69374: LD_INT 0
69376: PPUSH
// result := value ;
69377: LD_ADDR_VAR 0 2
69381: PUSH
69382: LD_VAR 0 1
69386: ST_TO_ADDR
// if value < 0 then
69387: LD_VAR 0 1
69391: PUSH
69392: LD_INT 0
69394: LESS
69395: IFFALSE 69412
// result := value * - 1 ;
69397: LD_ADDR_VAR 0 2
69401: PUSH
69402: LD_VAR 0 1
69406: PUSH
69407: LD_INT 1
69409: NEG
69410: MUL
69411: ST_TO_ADDR
// end ;
69412: LD_VAR 0 2
69416: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69417: LD_INT 0
69419: PPUSH
69420: PPUSH
69421: PPUSH
69422: PPUSH
69423: PPUSH
69424: PPUSH
69425: PPUSH
69426: PPUSH
// if not unit or not building then
69427: LD_VAR 0 1
69431: NOT
69432: PUSH
69433: LD_VAR 0 2
69437: NOT
69438: OR
69439: IFFALSE 69443
// exit ;
69441: GO 69669
// x := GetX ( building ) ;
69443: LD_ADDR_VAR 0 4
69447: PUSH
69448: LD_VAR 0 2
69452: PPUSH
69453: CALL_OW 250
69457: ST_TO_ADDR
// y := GetY ( building ) ;
69458: LD_ADDR_VAR 0 6
69462: PUSH
69463: LD_VAR 0 2
69467: PPUSH
69468: CALL_OW 251
69472: ST_TO_ADDR
// d := GetDir ( building ) ;
69473: LD_ADDR_VAR 0 8
69477: PUSH
69478: LD_VAR 0 2
69482: PPUSH
69483: CALL_OW 254
69487: ST_TO_ADDR
// r := 4 ;
69488: LD_ADDR_VAR 0 9
69492: PUSH
69493: LD_INT 4
69495: ST_TO_ADDR
// for i := 1 to 5 do
69496: LD_ADDR_VAR 0 10
69500: PUSH
69501: DOUBLE
69502: LD_INT 1
69504: DEC
69505: ST_TO_ADDR
69506: LD_INT 5
69508: PUSH
69509: FOR_TO
69510: IFFALSE 69667
// begin _x := ShiftX ( x , d , r + i ) ;
69512: LD_ADDR_VAR 0 5
69516: PUSH
69517: LD_VAR 0 4
69521: PPUSH
69522: LD_VAR 0 8
69526: PPUSH
69527: LD_VAR 0 9
69531: PUSH
69532: LD_VAR 0 10
69536: PLUS
69537: PPUSH
69538: CALL_OW 272
69542: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69543: LD_ADDR_VAR 0 7
69547: PUSH
69548: LD_VAR 0 6
69552: PPUSH
69553: LD_VAR 0 8
69557: PPUSH
69558: LD_VAR 0 9
69562: PUSH
69563: LD_VAR 0 10
69567: PLUS
69568: PPUSH
69569: CALL_OW 273
69573: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69574: LD_VAR 0 5
69578: PPUSH
69579: LD_VAR 0 7
69583: PPUSH
69584: CALL_OW 488
69588: PUSH
69589: LD_VAR 0 5
69593: PPUSH
69594: LD_VAR 0 7
69598: PPUSH
69599: CALL_OW 428
69603: PPUSH
69604: CALL_OW 247
69608: PUSH
69609: LD_INT 3
69611: PUSH
69612: LD_INT 2
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: IN
69619: NOT
69620: AND
69621: IFFALSE 69665
// begin ComMoveXY ( unit , _x , _y ) ;
69623: LD_VAR 0 1
69627: PPUSH
69628: LD_VAR 0 5
69632: PPUSH
69633: LD_VAR 0 7
69637: PPUSH
69638: CALL_OW 111
// result := [ _x , _y ] ;
69642: LD_ADDR_VAR 0 3
69646: PUSH
69647: LD_VAR 0 5
69651: PUSH
69652: LD_VAR 0 7
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: ST_TO_ADDR
// exit ;
69661: POP
69662: POP
69663: GO 69669
// end ; end ;
69665: GO 69509
69667: POP
69668: POP
// end ;
69669: LD_VAR 0 3
69673: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69674: LD_INT 0
69676: PPUSH
69677: PPUSH
69678: PPUSH
// result := 0 ;
69679: LD_ADDR_VAR 0 3
69683: PUSH
69684: LD_INT 0
69686: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69687: LD_VAR 0 1
69691: PUSH
69692: LD_INT 0
69694: LESS
69695: PUSH
69696: LD_VAR 0 1
69700: PUSH
69701: LD_INT 8
69703: GREATER
69704: OR
69705: PUSH
69706: LD_VAR 0 2
69710: PUSH
69711: LD_INT 0
69713: LESS
69714: OR
69715: PUSH
69716: LD_VAR 0 2
69720: PUSH
69721: LD_INT 8
69723: GREATER
69724: OR
69725: IFFALSE 69729
// exit ;
69727: GO 69804
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69729: LD_ADDR_VAR 0 4
69733: PUSH
69734: LD_INT 22
69736: PUSH
69737: LD_VAR 0 2
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PPUSH
69746: CALL_OW 69
69750: PUSH
69751: FOR_IN
69752: IFFALSE 69802
// begin un := UnitShoot ( i ) ;
69754: LD_ADDR_VAR 0 5
69758: PUSH
69759: LD_VAR 0 4
69763: PPUSH
69764: CALL_OW 504
69768: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69769: LD_VAR 0 5
69773: PPUSH
69774: CALL_OW 255
69778: PUSH
69779: LD_VAR 0 1
69783: EQUAL
69784: IFFALSE 69800
// begin result := un ;
69786: LD_ADDR_VAR 0 3
69790: PUSH
69791: LD_VAR 0 5
69795: ST_TO_ADDR
// exit ;
69796: POP
69797: POP
69798: GO 69804
// end ; end ;
69800: GO 69751
69802: POP
69803: POP
// end ;
69804: LD_VAR 0 3
69808: RET
// export function GetCargoBay ( units ) ; begin
69809: LD_INT 0
69811: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69812: LD_ADDR_VAR 0 2
69816: PUSH
69817: LD_VAR 0 1
69821: PPUSH
69822: LD_INT 2
69824: PUSH
69825: LD_INT 34
69827: PUSH
69828: LD_INT 12
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 34
69837: PUSH
69838: LD_INT 51
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 34
69847: PUSH
69848: LD_INT 32
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 34
69857: PUSH
69858: LD_INT 89
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: PPUSH
69872: CALL_OW 72
69876: ST_TO_ADDR
// end ;
69877: LD_VAR 0 2
69881: RET
// export function Negate ( value ) ; begin
69882: LD_INT 0
69884: PPUSH
// result := not value ;
69885: LD_ADDR_VAR 0 2
69889: PUSH
69890: LD_VAR 0 1
69894: NOT
69895: ST_TO_ADDR
// end ;
69896: LD_VAR 0 2
69900: RET
// export function Inc ( value ) ; begin
69901: LD_INT 0
69903: PPUSH
// result := value + 1 ;
69904: LD_ADDR_VAR 0 2
69908: PUSH
69909: LD_VAR 0 1
69913: PUSH
69914: LD_INT 1
69916: PLUS
69917: ST_TO_ADDR
// end ;
69918: LD_VAR 0 2
69922: RET
// export function Dec ( value ) ; begin
69923: LD_INT 0
69925: PPUSH
// result := value - 1 ;
69926: LD_ADDR_VAR 0 2
69930: PUSH
69931: LD_VAR 0 1
69935: PUSH
69936: LD_INT 1
69938: MINUS
69939: ST_TO_ADDR
// end ;
69940: LD_VAR 0 2
69944: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69945: LD_INT 0
69947: PPUSH
69948: PPUSH
69949: PPUSH
69950: PPUSH
69951: PPUSH
69952: PPUSH
69953: PPUSH
69954: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69955: LD_VAR 0 1
69959: PPUSH
69960: LD_VAR 0 2
69964: PPUSH
69965: CALL_OW 488
69969: NOT
69970: PUSH
69971: LD_VAR 0 3
69975: PPUSH
69976: LD_VAR 0 4
69980: PPUSH
69981: CALL_OW 488
69985: NOT
69986: OR
69987: IFFALSE 70000
// begin result := - 1 ;
69989: LD_ADDR_VAR 0 5
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: ST_TO_ADDR
// exit ;
69998: GO 70235
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70000: LD_ADDR_VAR 0 12
70004: PUSH
70005: LD_VAR 0 1
70009: PPUSH
70010: LD_VAR 0 2
70014: PPUSH
70015: LD_VAR 0 3
70019: PPUSH
70020: LD_VAR 0 4
70024: PPUSH
70025: CALL 69085 0 4
70029: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70030: LD_ADDR_VAR 0 11
70034: PUSH
70035: LD_VAR 0 1
70039: PPUSH
70040: LD_VAR 0 2
70044: PPUSH
70045: LD_VAR 0 12
70049: PUSH
70050: LD_INT 1
70052: ARRAY
70053: PPUSH
70054: LD_VAR 0 12
70058: PUSH
70059: LD_INT 2
70061: ARRAY
70062: PPUSH
70063: CALL_OW 298
70067: ST_TO_ADDR
// distance := 9999 ;
70068: LD_ADDR_VAR 0 10
70072: PUSH
70073: LD_INT 9999
70075: ST_TO_ADDR
// for i := 0 to 5 do
70076: LD_ADDR_VAR 0 6
70080: PUSH
70081: DOUBLE
70082: LD_INT 0
70084: DEC
70085: ST_TO_ADDR
70086: LD_INT 5
70088: PUSH
70089: FOR_TO
70090: IFFALSE 70233
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70092: LD_ADDR_VAR 0 7
70096: PUSH
70097: LD_VAR 0 1
70101: PPUSH
70102: LD_VAR 0 6
70106: PPUSH
70107: LD_VAR 0 11
70111: PPUSH
70112: CALL_OW 272
70116: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70117: LD_ADDR_VAR 0 8
70121: PUSH
70122: LD_VAR 0 2
70126: PPUSH
70127: LD_VAR 0 6
70131: PPUSH
70132: LD_VAR 0 11
70136: PPUSH
70137: CALL_OW 273
70141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70142: LD_VAR 0 7
70146: PPUSH
70147: LD_VAR 0 8
70151: PPUSH
70152: CALL_OW 488
70156: NOT
70157: IFFALSE 70161
// continue ;
70159: GO 70089
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70161: LD_ADDR_VAR 0 9
70165: PUSH
70166: LD_VAR 0 12
70170: PUSH
70171: LD_INT 1
70173: ARRAY
70174: PPUSH
70175: LD_VAR 0 12
70179: PUSH
70180: LD_INT 2
70182: ARRAY
70183: PPUSH
70184: LD_VAR 0 7
70188: PPUSH
70189: LD_VAR 0 8
70193: PPUSH
70194: CALL_OW 298
70198: ST_TO_ADDR
// if tmp < distance then
70199: LD_VAR 0 9
70203: PUSH
70204: LD_VAR 0 10
70208: LESS
70209: IFFALSE 70231
// begin result := i ;
70211: LD_ADDR_VAR 0 5
70215: PUSH
70216: LD_VAR 0 6
70220: ST_TO_ADDR
// distance := tmp ;
70221: LD_ADDR_VAR 0 10
70225: PUSH
70226: LD_VAR 0 9
70230: ST_TO_ADDR
// end ; end ;
70231: GO 70089
70233: POP
70234: POP
// end ;
70235: LD_VAR 0 5
70239: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70240: LD_INT 0
70242: PPUSH
70243: PPUSH
// if not driver or not IsInUnit ( driver ) then
70244: LD_VAR 0 1
70248: NOT
70249: PUSH
70250: LD_VAR 0 1
70254: PPUSH
70255: CALL_OW 310
70259: NOT
70260: OR
70261: IFFALSE 70265
// exit ;
70263: GO 70355
// vehicle := IsInUnit ( driver ) ;
70265: LD_ADDR_VAR 0 3
70269: PUSH
70270: LD_VAR 0 1
70274: PPUSH
70275: CALL_OW 310
70279: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_STRING \
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: LD_INT 0
70296: PUSH
70297: LD_INT 0
70299: PUSH
70300: LD_INT 0
70302: PUSH
70303: LD_INT 0
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: PUSH
70315: LD_STRING E
70317: PUSH
70318: LD_INT 0
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_VAR 0 3
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PPUSH
70351: CALL_OW 446
// end ;
70355: LD_VAR 0 2
70359: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70360: LD_INT 0
70362: PPUSH
70363: PPUSH
// if not driver or not IsInUnit ( driver ) then
70364: LD_VAR 0 1
70368: NOT
70369: PUSH
70370: LD_VAR 0 1
70374: PPUSH
70375: CALL_OW 310
70379: NOT
70380: OR
70381: IFFALSE 70385
// exit ;
70383: GO 70475
// vehicle := IsInUnit ( driver ) ;
70385: LD_ADDR_VAR 0 3
70389: PUSH
70390: LD_VAR 0 1
70394: PPUSH
70395: CALL_OW 310
70399: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70400: LD_VAR 0 1
70404: PPUSH
70405: LD_STRING \
70407: PUSH
70408: LD_INT 0
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: PUSH
70435: LD_STRING E
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: LD_VAR 0 3
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PPUSH
70471: CALL_OW 447
// end ;
70475: LD_VAR 0 2
70479: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70480: LD_INT 0
70482: PPUSH
70483: PPUSH
70484: PPUSH
// tmp := [ ] ;
70485: LD_ADDR_VAR 0 5
70489: PUSH
70490: EMPTY
70491: ST_TO_ADDR
// for i in units do
70492: LD_ADDR_VAR 0 4
70496: PUSH
70497: LD_VAR 0 1
70501: PUSH
70502: FOR_IN
70503: IFFALSE 70541
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70505: LD_ADDR_VAR 0 5
70509: PUSH
70510: LD_VAR 0 5
70514: PPUSH
70515: LD_VAR 0 5
70519: PUSH
70520: LD_INT 1
70522: PLUS
70523: PPUSH
70524: LD_VAR 0 4
70528: PPUSH
70529: CALL_OW 256
70533: PPUSH
70534: CALL_OW 2
70538: ST_TO_ADDR
70539: GO 70502
70541: POP
70542: POP
// if not tmp then
70543: LD_VAR 0 5
70547: NOT
70548: IFFALSE 70552
// exit ;
70550: GO 70600
// if asc then
70552: LD_VAR 0 2
70556: IFFALSE 70580
// result := SortListByListAsc ( units , tmp ) else
70558: LD_ADDR_VAR 0 3
70562: PUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: LD_VAR 0 5
70572: PPUSH
70573: CALL_OW 76
70577: ST_TO_ADDR
70578: GO 70600
// result := SortListByListDesc ( units , tmp ) ;
70580: LD_ADDR_VAR 0 3
70584: PUSH
70585: LD_VAR 0 1
70589: PPUSH
70590: LD_VAR 0 5
70594: PPUSH
70595: CALL_OW 77
70599: ST_TO_ADDR
// end ;
70600: LD_VAR 0 3
70604: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70605: LD_INT 0
70607: PPUSH
70608: PPUSH
// task := GetTaskList ( mech ) ;
70609: LD_ADDR_VAR 0 4
70613: PUSH
70614: LD_VAR 0 1
70618: PPUSH
70619: CALL_OW 437
70623: ST_TO_ADDR
// if not task then
70624: LD_VAR 0 4
70628: NOT
70629: IFFALSE 70633
// exit ;
70631: GO 70675
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70633: LD_ADDR_VAR 0 3
70637: PUSH
70638: LD_VAR 0 4
70642: PUSH
70643: LD_INT 1
70645: ARRAY
70646: PUSH
70647: LD_INT 1
70649: ARRAY
70650: PUSH
70651: LD_STRING r
70653: EQUAL
70654: PUSH
70655: LD_VAR 0 4
70659: PUSH
70660: LD_INT 1
70662: ARRAY
70663: PUSH
70664: LD_INT 4
70666: ARRAY
70667: PUSH
70668: LD_VAR 0 2
70672: EQUAL
70673: AND
70674: ST_TO_ADDR
// end ;
70675: LD_VAR 0 3
70679: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70680: LD_INT 0
70682: PPUSH
// SetDir ( unit , d ) ;
70683: LD_VAR 0 1
70687: PPUSH
70688: LD_VAR 0 4
70692: PPUSH
70693: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70697: LD_VAR 0 1
70701: PPUSH
70702: LD_VAR 0 2
70706: PPUSH
70707: LD_VAR 0 3
70711: PPUSH
70712: LD_VAR 0 5
70716: PPUSH
70717: CALL_OW 48
// end ;
70721: LD_VAR 0 6
70725: RET
// export function ToNaturalNumber ( number ) ; begin
70726: LD_INT 0
70728: PPUSH
// result := number div 1 ;
70729: LD_ADDR_VAR 0 2
70733: PUSH
70734: LD_VAR 0 1
70738: PUSH
70739: LD_INT 1
70741: DIV
70742: ST_TO_ADDR
// if number < 0 then
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 0
70750: LESS
70751: IFFALSE 70761
// result := 0 ;
70753: LD_ADDR_VAR 0 2
70757: PUSH
70758: LD_INT 0
70760: ST_TO_ADDR
// end ;
70761: LD_VAR 0 2
70765: RET
// export function SortByClass ( units , class ) ; var un ; begin
70766: LD_INT 0
70768: PPUSH
70769: PPUSH
// if not units or not class then
70770: LD_VAR 0 1
70774: NOT
70775: PUSH
70776: LD_VAR 0 2
70780: NOT
70781: OR
70782: IFFALSE 70786
// exit ;
70784: GO 70881
// result := [ ] ;
70786: LD_ADDR_VAR 0 3
70790: PUSH
70791: EMPTY
70792: ST_TO_ADDR
// for un in units do
70793: LD_ADDR_VAR 0 4
70797: PUSH
70798: LD_VAR 0 1
70802: PUSH
70803: FOR_IN
70804: IFFALSE 70879
// if GetClass ( un ) = class then
70806: LD_VAR 0 4
70810: PPUSH
70811: CALL_OW 257
70815: PUSH
70816: LD_VAR 0 2
70820: EQUAL
70821: IFFALSE 70848
// result := Insert ( result , 1 , un ) else
70823: LD_ADDR_VAR 0 3
70827: PUSH
70828: LD_VAR 0 3
70832: PPUSH
70833: LD_INT 1
70835: PPUSH
70836: LD_VAR 0 4
70840: PPUSH
70841: CALL_OW 2
70845: ST_TO_ADDR
70846: GO 70877
// result := Replace ( result , result + 1 , un ) ;
70848: LD_ADDR_VAR 0 3
70852: PUSH
70853: LD_VAR 0 3
70857: PPUSH
70858: LD_VAR 0 3
70862: PUSH
70863: LD_INT 1
70865: PLUS
70866: PPUSH
70867: LD_VAR 0 4
70871: PPUSH
70872: CALL_OW 1
70876: ST_TO_ADDR
70877: GO 70803
70879: POP
70880: POP
// end ;
70881: LD_VAR 0 3
70885: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70886: LD_INT 0
70888: PPUSH
70889: PPUSH
70890: PPUSH
70891: PPUSH
70892: PPUSH
70893: PPUSH
70894: PPUSH
// result := [ ] ;
70895: LD_ADDR_VAR 0 4
70899: PUSH
70900: EMPTY
70901: ST_TO_ADDR
// if x - r < 0 then
70902: LD_VAR 0 1
70906: PUSH
70907: LD_VAR 0 3
70911: MINUS
70912: PUSH
70913: LD_INT 0
70915: LESS
70916: IFFALSE 70928
// min_x := 0 else
70918: LD_ADDR_VAR 0 8
70922: PUSH
70923: LD_INT 0
70925: ST_TO_ADDR
70926: GO 70944
// min_x := x - r ;
70928: LD_ADDR_VAR 0 8
70932: PUSH
70933: LD_VAR 0 1
70937: PUSH
70938: LD_VAR 0 3
70942: MINUS
70943: ST_TO_ADDR
// if y - r < 0 then
70944: LD_VAR 0 2
70948: PUSH
70949: LD_VAR 0 3
70953: MINUS
70954: PUSH
70955: LD_INT 0
70957: LESS
70958: IFFALSE 70970
// min_y := 0 else
70960: LD_ADDR_VAR 0 7
70964: PUSH
70965: LD_INT 0
70967: ST_TO_ADDR
70968: GO 70986
// min_y := y - r ;
70970: LD_ADDR_VAR 0 7
70974: PUSH
70975: LD_VAR 0 2
70979: PUSH
70980: LD_VAR 0 3
70984: MINUS
70985: ST_TO_ADDR
// max_x := x + r ;
70986: LD_ADDR_VAR 0 9
70990: PUSH
70991: LD_VAR 0 1
70995: PUSH
70996: LD_VAR 0 3
71000: PLUS
71001: ST_TO_ADDR
// max_y := y + r ;
71002: LD_ADDR_VAR 0 10
71006: PUSH
71007: LD_VAR 0 2
71011: PUSH
71012: LD_VAR 0 3
71016: PLUS
71017: ST_TO_ADDR
// for _x = min_x to max_x do
71018: LD_ADDR_VAR 0 5
71022: PUSH
71023: DOUBLE
71024: LD_VAR 0 8
71028: DEC
71029: ST_TO_ADDR
71030: LD_VAR 0 9
71034: PUSH
71035: FOR_TO
71036: IFFALSE 71137
// for _y = min_y to max_y do
71038: LD_ADDR_VAR 0 6
71042: PUSH
71043: DOUBLE
71044: LD_VAR 0 7
71048: DEC
71049: ST_TO_ADDR
71050: LD_VAR 0 10
71054: PUSH
71055: FOR_TO
71056: IFFALSE 71133
// begin if not ValidHex ( _x , _y ) then
71058: LD_VAR 0 5
71062: PPUSH
71063: LD_VAR 0 6
71067: PPUSH
71068: CALL_OW 488
71072: NOT
71073: IFFALSE 71077
// continue ;
71075: GO 71055
// if GetResourceTypeXY ( _x , _y ) then
71077: LD_VAR 0 5
71081: PPUSH
71082: LD_VAR 0 6
71086: PPUSH
71087: CALL_OW 283
71091: IFFALSE 71131
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71093: LD_ADDR_VAR 0 4
71097: PUSH
71098: LD_VAR 0 4
71102: PPUSH
71103: LD_VAR 0 4
71107: PUSH
71108: LD_INT 1
71110: PLUS
71111: PPUSH
71112: LD_VAR 0 5
71116: PUSH
71117: LD_VAR 0 6
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PPUSH
71126: CALL_OW 1
71130: ST_TO_ADDR
// end ;
71131: GO 71055
71133: POP
71134: POP
71135: GO 71035
71137: POP
71138: POP
// end ;
71139: LD_VAR 0 4
71143: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71144: LD_INT 0
71146: PPUSH
71147: PPUSH
71148: PPUSH
71149: PPUSH
71150: PPUSH
71151: PPUSH
71152: PPUSH
71153: PPUSH
// if not units then
71154: LD_VAR 0 1
71158: NOT
71159: IFFALSE 71163
// exit ;
71161: GO 71687
// result := UnitFilter ( units , [ f_ok ] ) ;
71163: LD_ADDR_VAR 0 3
71167: PUSH
71168: LD_VAR 0 1
71172: PPUSH
71173: LD_INT 50
71175: PUSH
71176: EMPTY
71177: LIST
71178: PPUSH
71179: CALL_OW 72
71183: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71184: LD_ADDR_VAR 0 8
71188: PUSH
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 1
71196: ARRAY
71197: PPUSH
71198: CALL_OW 255
71202: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71203: LD_ADDR_VAR 0 10
71207: PUSH
71208: LD_INT 29
71210: PUSH
71211: LD_INT 91
71213: PUSH
71214: LD_INT 49
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// if not result then
71222: LD_VAR 0 3
71226: NOT
71227: IFFALSE 71231
// exit ;
71229: GO 71687
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71231: LD_ADDR_VAR 0 5
71235: PUSH
71236: LD_INT 81
71238: PUSH
71239: LD_VAR 0 8
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PPUSH
71248: CALL_OW 69
71252: ST_TO_ADDR
// for i in result do
71253: LD_ADDR_VAR 0 4
71257: PUSH
71258: LD_VAR 0 3
71262: PUSH
71263: FOR_IN
71264: IFFALSE 71685
// begin tag := GetTag ( i ) + 1 ;
71266: LD_ADDR_VAR 0 9
71270: PUSH
71271: LD_VAR 0 4
71275: PPUSH
71276: CALL_OW 110
71280: PUSH
71281: LD_INT 1
71283: PLUS
71284: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71285: LD_ADDR_VAR 0 7
71289: PUSH
71290: LD_VAR 0 4
71294: PPUSH
71295: CALL_OW 250
71299: PPUSH
71300: LD_VAR 0 4
71304: PPUSH
71305: CALL_OW 251
71309: PPUSH
71310: LD_INT 6
71312: PPUSH
71313: CALL 70886 0 3
71317: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71318: LD_VAR 0 4
71322: PPUSH
71323: CALL_OW 247
71327: PUSH
71328: LD_INT 2
71330: EQUAL
71331: PUSH
71332: LD_VAR 0 7
71336: AND
71337: PUSH
71338: LD_VAR 0 4
71342: PPUSH
71343: CALL_OW 264
71347: PUSH
71348: LD_VAR 0 10
71352: IN
71353: NOT
71354: AND
71355: IFFALSE 71394
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71357: LD_VAR 0 4
71361: PPUSH
71362: LD_VAR 0 7
71366: PUSH
71367: LD_INT 1
71369: ARRAY
71370: PUSH
71371: LD_INT 1
71373: ARRAY
71374: PPUSH
71375: LD_VAR 0 7
71379: PUSH
71380: LD_INT 1
71382: ARRAY
71383: PUSH
71384: LD_INT 2
71386: ARRAY
71387: PPUSH
71388: CALL_OW 116
71392: GO 71683
// if path > tag then
71394: LD_VAR 0 2
71398: PUSH
71399: LD_VAR 0 9
71403: GREATER
71404: IFFALSE 71612
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71406: LD_ADDR_VAR 0 6
71410: PUSH
71411: LD_VAR 0 5
71415: PPUSH
71416: LD_INT 91
71418: PUSH
71419: LD_VAR 0 4
71423: PUSH
71424: LD_INT 8
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: LIST
71431: PPUSH
71432: CALL_OW 72
71436: ST_TO_ADDR
// if nearEnemy then
71437: LD_VAR 0 6
71441: IFFALSE 71510
// begin if GetWeapon ( i ) = ru_time_lapser then
71443: LD_VAR 0 4
71447: PPUSH
71448: CALL_OW 264
71452: PUSH
71453: LD_INT 49
71455: EQUAL
71456: IFFALSE 71484
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71458: LD_VAR 0 4
71462: PPUSH
71463: LD_VAR 0 6
71467: PPUSH
71468: LD_VAR 0 4
71472: PPUSH
71473: CALL_OW 74
71477: PPUSH
71478: CALL_OW 112
71482: GO 71508
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71484: LD_VAR 0 4
71488: PPUSH
71489: LD_VAR 0 6
71493: PPUSH
71494: LD_VAR 0 4
71498: PPUSH
71499: CALL_OW 74
71503: PPUSH
71504: CALL_OW 115
// end else
71508: GO 71610
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71510: LD_VAR 0 4
71514: PPUSH
71515: LD_VAR 0 2
71519: PUSH
71520: LD_VAR 0 9
71524: ARRAY
71525: PUSH
71526: LD_INT 1
71528: ARRAY
71529: PPUSH
71530: LD_VAR 0 2
71534: PUSH
71535: LD_VAR 0 9
71539: ARRAY
71540: PUSH
71541: LD_INT 2
71543: ARRAY
71544: PPUSH
71545: CALL_OW 297
71549: PUSH
71550: LD_INT 6
71552: GREATER
71553: IFFALSE 71596
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71555: LD_VAR 0 4
71559: PPUSH
71560: LD_VAR 0 2
71564: PUSH
71565: LD_VAR 0 9
71569: ARRAY
71570: PUSH
71571: LD_INT 1
71573: ARRAY
71574: PPUSH
71575: LD_VAR 0 2
71579: PUSH
71580: LD_VAR 0 9
71584: ARRAY
71585: PUSH
71586: LD_INT 2
71588: ARRAY
71589: PPUSH
71590: CALL_OW 114
71594: GO 71610
// SetTag ( i , tag ) ;
71596: LD_VAR 0 4
71600: PPUSH
71601: LD_VAR 0 9
71605: PPUSH
71606: CALL_OW 109
// end else
71610: GO 71683
// if enemy then
71612: LD_VAR 0 5
71616: IFFALSE 71683
// begin if GetWeapon ( i ) = ru_time_lapser then
71618: LD_VAR 0 4
71622: PPUSH
71623: CALL_OW 264
71627: PUSH
71628: LD_INT 49
71630: EQUAL
71631: IFFALSE 71659
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71633: LD_VAR 0 4
71637: PPUSH
71638: LD_VAR 0 5
71642: PPUSH
71643: LD_VAR 0 4
71647: PPUSH
71648: CALL_OW 74
71652: PPUSH
71653: CALL_OW 112
71657: GO 71683
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71659: LD_VAR 0 4
71663: PPUSH
71664: LD_VAR 0 5
71668: PPUSH
71669: LD_VAR 0 4
71673: PPUSH
71674: CALL_OW 74
71678: PPUSH
71679: CALL_OW 115
// end ; end ;
71683: GO 71263
71685: POP
71686: POP
// end ;
71687: LD_VAR 0 3
71691: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71692: LD_INT 0
71694: PPUSH
71695: PPUSH
71696: PPUSH
// if not unit or IsInUnit ( unit ) then
71697: LD_VAR 0 1
71701: NOT
71702: PUSH
71703: LD_VAR 0 1
71707: PPUSH
71708: CALL_OW 310
71712: OR
71713: IFFALSE 71717
// exit ;
71715: GO 71808
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71717: LD_ADDR_VAR 0 4
71721: PUSH
71722: LD_VAR 0 1
71726: PPUSH
71727: CALL_OW 250
71731: PPUSH
71732: LD_VAR 0 2
71736: PPUSH
71737: LD_INT 1
71739: PPUSH
71740: CALL_OW 272
71744: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71745: LD_ADDR_VAR 0 5
71749: PUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: CALL_OW 251
71759: PPUSH
71760: LD_VAR 0 2
71764: PPUSH
71765: LD_INT 1
71767: PPUSH
71768: CALL_OW 273
71772: ST_TO_ADDR
// if ValidHex ( x , y ) then
71773: LD_VAR 0 4
71777: PPUSH
71778: LD_VAR 0 5
71782: PPUSH
71783: CALL_OW 488
71787: IFFALSE 71808
// ComTurnXY ( unit , x , y ) ;
71789: LD_VAR 0 1
71793: PPUSH
71794: LD_VAR 0 4
71798: PPUSH
71799: LD_VAR 0 5
71803: PPUSH
71804: CALL_OW 118
// end ;
71808: LD_VAR 0 3
71812: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71813: LD_INT 0
71815: PPUSH
71816: PPUSH
// result := false ;
71817: LD_ADDR_VAR 0 3
71821: PUSH
71822: LD_INT 0
71824: ST_TO_ADDR
// if not units then
71825: LD_VAR 0 2
71829: NOT
71830: IFFALSE 71834
// exit ;
71832: GO 71879
// for i in units do
71834: LD_ADDR_VAR 0 4
71838: PUSH
71839: LD_VAR 0 2
71843: PUSH
71844: FOR_IN
71845: IFFALSE 71877
// if See ( side , i ) then
71847: LD_VAR 0 1
71851: PPUSH
71852: LD_VAR 0 4
71856: PPUSH
71857: CALL_OW 292
71861: IFFALSE 71875
// begin result := true ;
71863: LD_ADDR_VAR 0 3
71867: PUSH
71868: LD_INT 1
71870: ST_TO_ADDR
// exit ;
71871: POP
71872: POP
71873: GO 71879
// end ;
71875: GO 71844
71877: POP
71878: POP
// end ;
71879: LD_VAR 0 3
71883: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71884: LD_INT 0
71886: PPUSH
71887: PPUSH
71888: PPUSH
71889: PPUSH
// if not unit or not points then
71890: LD_VAR 0 1
71894: NOT
71895: PUSH
71896: LD_VAR 0 2
71900: NOT
71901: OR
71902: IFFALSE 71906
// exit ;
71904: GO 71996
// dist := 99999 ;
71906: LD_ADDR_VAR 0 5
71910: PUSH
71911: LD_INT 99999
71913: ST_TO_ADDR
// for i in points do
71914: LD_ADDR_VAR 0 4
71918: PUSH
71919: LD_VAR 0 2
71923: PUSH
71924: FOR_IN
71925: IFFALSE 71994
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71927: LD_ADDR_VAR 0 6
71931: PUSH
71932: LD_VAR 0 1
71936: PPUSH
71937: LD_VAR 0 4
71941: PUSH
71942: LD_INT 1
71944: ARRAY
71945: PPUSH
71946: LD_VAR 0 4
71950: PUSH
71951: LD_INT 2
71953: ARRAY
71954: PPUSH
71955: CALL_OW 297
71959: ST_TO_ADDR
// if tmpDist < dist then
71960: LD_VAR 0 6
71964: PUSH
71965: LD_VAR 0 5
71969: LESS
71970: IFFALSE 71992
// begin result := i ;
71972: LD_ADDR_VAR 0 3
71976: PUSH
71977: LD_VAR 0 4
71981: ST_TO_ADDR
// dist := tmpDist ;
71982: LD_ADDR_VAR 0 5
71986: PUSH
71987: LD_VAR 0 6
71991: ST_TO_ADDR
// end ; end ;
71992: GO 71924
71994: POP
71995: POP
// end ;
71996: LD_VAR 0 3
72000: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72001: LD_INT 0
72003: PPUSH
// uc_side := side ;
72004: LD_ADDR_OWVAR 20
72008: PUSH
72009: LD_VAR 0 1
72013: ST_TO_ADDR
// uc_nation := 3 ;
72014: LD_ADDR_OWVAR 21
72018: PUSH
72019: LD_INT 3
72021: ST_TO_ADDR
// vc_chassis := 25 ;
72022: LD_ADDR_OWVAR 37
72026: PUSH
72027: LD_INT 25
72029: ST_TO_ADDR
// vc_engine := engine_siberite ;
72030: LD_ADDR_OWVAR 39
72034: PUSH
72035: LD_INT 3
72037: ST_TO_ADDR
// vc_control := control_computer ;
72038: LD_ADDR_OWVAR 38
72042: PUSH
72043: LD_INT 3
72045: ST_TO_ADDR
// vc_weapon := 59 ;
72046: LD_ADDR_OWVAR 40
72050: PUSH
72051: LD_INT 59
72053: ST_TO_ADDR
// result := CreateVehicle ;
72054: LD_ADDR_VAR 0 5
72058: PUSH
72059: CALL_OW 45
72063: ST_TO_ADDR
// SetDir ( result , d ) ;
72064: LD_VAR 0 5
72068: PPUSH
72069: LD_VAR 0 4
72073: PPUSH
72074: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72078: LD_VAR 0 5
72082: PPUSH
72083: LD_VAR 0 2
72087: PPUSH
72088: LD_VAR 0 3
72092: PPUSH
72093: LD_INT 0
72095: PPUSH
72096: CALL_OW 48
// end ;
72100: LD_VAR 0 5
72104: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72105: LD_INT 0
72107: PPUSH
72108: PPUSH
72109: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72110: LD_ADDR_VAR 0 2
72114: PUSH
72115: LD_INT 0
72117: PUSH
72118: LD_INT 0
72120: PUSH
72121: LD_INT 0
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72133: LD_VAR 0 1
72137: NOT
72138: PUSH
72139: LD_VAR 0 1
72143: PPUSH
72144: CALL_OW 264
72148: PUSH
72149: LD_INT 12
72151: PUSH
72152: LD_INT 51
72154: PUSH
72155: LD_INT 32
72157: PUSH
72158: LD_INT 89
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: IN
72167: NOT
72168: OR
72169: IFFALSE 72173
// exit ;
72171: GO 72271
// for i := 1 to 3 do
72173: LD_ADDR_VAR 0 3
72177: PUSH
72178: DOUBLE
72179: LD_INT 1
72181: DEC
72182: ST_TO_ADDR
72183: LD_INT 3
72185: PUSH
72186: FOR_TO
72187: IFFALSE 72269
// begin tmp := GetCargo ( cargo , i ) ;
72189: LD_ADDR_VAR 0 4
72193: PUSH
72194: LD_VAR 0 1
72198: PPUSH
72199: LD_VAR 0 3
72203: PPUSH
72204: CALL_OW 289
72208: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72209: LD_ADDR_VAR 0 2
72213: PUSH
72214: LD_VAR 0 2
72218: PPUSH
72219: LD_VAR 0 3
72223: PPUSH
72224: LD_VAR 0 4
72228: PPUSH
72229: CALL_OW 1
72233: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72234: LD_ADDR_VAR 0 2
72238: PUSH
72239: LD_VAR 0 2
72243: PPUSH
72244: LD_INT 4
72246: PPUSH
72247: LD_VAR 0 2
72251: PUSH
72252: LD_INT 4
72254: ARRAY
72255: PUSH
72256: LD_VAR 0 4
72260: PLUS
72261: PPUSH
72262: CALL_OW 1
72266: ST_TO_ADDR
// end ;
72267: GO 72186
72269: POP
72270: POP
// end ;
72271: LD_VAR 0 2
72275: RET
// export function Length ( array ) ; begin
72276: LD_INT 0
72278: PPUSH
// result := array + 0 ;
72279: LD_ADDR_VAR 0 2
72283: PUSH
72284: LD_VAR 0 1
72288: PUSH
72289: LD_INT 0
72291: PLUS
72292: ST_TO_ADDR
// end ;
72293: LD_VAR 0 2
72297: RET
// export function PrepareArray ( array ) ; begin
72298: LD_INT 0
72300: PPUSH
// result := array diff 0 ;
72301: LD_ADDR_VAR 0 2
72305: PUSH
72306: LD_VAR 0 1
72310: PUSH
72311: LD_INT 0
72313: DIFF
72314: ST_TO_ADDR
// if not result [ 1 ] then
72315: LD_VAR 0 2
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: NOT
72324: IFFALSE 72344
// result := Delete ( result , 1 ) ;
72326: LD_ADDR_VAR 0 2
72330: PUSH
72331: LD_VAR 0 2
72335: PPUSH
72336: LD_INT 1
72338: PPUSH
72339: CALL_OW 3
72343: ST_TO_ADDR
// end ;
72344: LD_VAR 0 2
72348: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72349: LD_INT 0
72351: PPUSH
72352: PPUSH
72353: PPUSH
72354: PPUSH
// sibRocketRange := 25 ;
72355: LD_ADDR_VAR 0 6
72359: PUSH
72360: LD_INT 25
72362: ST_TO_ADDR
// result := false ;
72363: LD_ADDR_VAR 0 4
72367: PUSH
72368: LD_INT 0
72370: ST_TO_ADDR
// for i := 0 to 5 do
72371: LD_ADDR_VAR 0 5
72375: PUSH
72376: DOUBLE
72377: LD_INT 0
72379: DEC
72380: ST_TO_ADDR
72381: LD_INT 5
72383: PUSH
72384: FOR_TO
72385: IFFALSE 72452
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72387: LD_VAR 0 1
72391: PPUSH
72392: LD_VAR 0 5
72396: PPUSH
72397: LD_VAR 0 6
72401: PPUSH
72402: CALL_OW 272
72406: PPUSH
72407: LD_VAR 0 2
72411: PPUSH
72412: LD_VAR 0 5
72416: PPUSH
72417: LD_VAR 0 6
72421: PPUSH
72422: CALL_OW 273
72426: PPUSH
72427: LD_VAR 0 3
72431: PPUSH
72432: CALL_OW 309
72436: IFFALSE 72450
// begin result := true ;
72438: LD_ADDR_VAR 0 4
72442: PUSH
72443: LD_INT 1
72445: ST_TO_ADDR
// exit ;
72446: POP
72447: POP
72448: GO 72454
// end ;
72450: GO 72384
72452: POP
72453: POP
// end ;
72454: LD_VAR 0 4
72458: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72459: LD_INT 0
72461: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72462: LD_VAR 0 1
72466: PPUSH
72467: LD_VAR 0 2
72471: PPUSH
72472: LD_INT 0
72474: PPUSH
72475: LD_INT 0
72477: PPUSH
72478: LD_INT 1
72480: PPUSH
72481: LD_INT 0
72483: PPUSH
72484: CALL_OW 587
// end ; end_of_file
72488: LD_VAR 0 3
72492: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72493: LD_VAR 0 1
72497: PUSH
72498: LD_INT 200
72500: DOUBLE
72501: GREATEREQUAL
72502: IFFALSE 72510
72504: LD_INT 299
72506: DOUBLE
72507: LESSEQUAL
72508: IFTRUE 72512
72510: GO 72544
72512: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72513: LD_VAR 0 1
72517: PPUSH
72518: LD_VAR 0 2
72522: PPUSH
72523: LD_VAR 0 3
72527: PPUSH
72528: LD_VAR 0 4
72532: PPUSH
72533: LD_VAR 0 5
72537: PPUSH
72538: CALL 27159 0 5
72542: GO 72621
72544: LD_INT 300
72546: DOUBLE
72547: GREATEREQUAL
72548: IFFALSE 72556
72550: LD_INT 399
72552: DOUBLE
72553: LESSEQUAL
72554: IFTRUE 72558
72556: GO 72620
72558: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72559: LD_VAR 0 1
72563: PPUSH
72564: LD_VAR 0 2
72568: PPUSH
72569: LD_VAR 0 3
72573: PPUSH
72574: LD_VAR 0 4
72578: PPUSH
72579: LD_VAR 0 5
72583: PPUSH
72584: LD_VAR 0 6
72588: PPUSH
72589: LD_VAR 0 7
72593: PPUSH
72594: LD_VAR 0 8
72598: PPUSH
72599: LD_VAR 0 9
72603: PPUSH
72604: LD_VAR 0 10
72608: PPUSH
72609: LD_VAR 0 11
72613: PPUSH
72614: CALL 23492 0 11
72618: GO 72621
72620: POP
// end ;
72621: PPOPN 11
72623: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72624: LD_VAR 0 1
72628: PPUSH
72629: LD_VAR 0 2
72633: PPUSH
72634: LD_VAR 0 3
72638: PPUSH
72639: LD_VAR 0 4
72643: PPUSH
72644: LD_VAR 0 5
72648: PPUSH
72649: CALL 26895 0 5
// end ; end_of_file
72653: PPOPN 5
72655: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72656: LD_VAR 0 1
72660: PPUSH
72661: LD_VAR 0 2
72665: PPUSH
72666: LD_VAR 0 3
72670: PPUSH
72671: LD_VAR 0 4
72675: PPUSH
72676: LD_VAR 0 5
72680: PPUSH
72681: LD_VAR 0 6
72685: PPUSH
72686: CALL 11112 0 6
// end ;
72690: PPOPN 6
72692: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72693: LD_INT 0
72695: PPUSH
// begin if not units then
72696: LD_VAR 0 1
72700: NOT
72701: IFFALSE 72705
// exit ;
72703: GO 72705
// end ;
72705: PPOPN 7
72707: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72708: CALL 11006 0 0
// end ;
72712: PPOPN 1
72714: END
