// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6302 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 32097 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 32097 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 32097 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 32097 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 32097 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 32097 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 32097 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 32097 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 32097 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 32097 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 32097 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 32097 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 32097 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 32097 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 32097 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 32097 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 32097 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 32097 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 32097 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 32097 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 32097 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3241
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3239
// Connect ( i ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL 40054 0 1
3237: GO 3225
3239: POP
3240: POP
// end ; end_of_file
3241: PPOPN 1
3243: END
// every 1 do
3244: GO 3246
3246: DISABLE
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3251: LD_INT 22
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 21
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PPUSH
3317: LD_INT 69
3319: PPUSH
3320: LD_INT 94
3322: PPUSH
3323: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3327: LD_EXP 1
3331: PPUSH
3332: LD_STRING D2-JMM-1
3334: PPUSH
3335: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3376: LD_EXP 2
3380: PPUSH
3381: LD_STRING D2-Huck-1
3383: PPUSH
3384: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3388: LD_INT 22
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 69
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D2-JMM-2
3432: PPUSH
3433: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3437: LD_INT 22
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: CALL_OW 87
// InGameOff ;
3474: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3478: LD_STRING M1
3480: PPUSH
3481: CALL_OW 337
// SaveForQuickRestart ;
3485: CALL_OW 22
// end ;
3489: END
// every 10 10$0 do
3490: GO 3492
3492: DISABLE
// begin DialogueOn ;
3493: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_STRING D3-Pow-1
3504: PPUSH
3505: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3509: LD_EXP 1
3513: PPUSH
3514: LD_STRING D3-JMM-1
3516: PPUSH
3517: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_STRING D3-Pow-2
3528: PPUSH
3529: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D3-JMM-2
3540: PPUSH
3541: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING D3-Pow-3
3552: PPUSH
3553: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D3-JMM-3
3564: PPUSH
3565: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3569: LD_EXP 15
3573: PPUSH
3574: LD_STRING D3-Pow-4
3576: PPUSH
3577: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D3-JMM-4
3588: PPUSH
3589: CALL_OW 88
// DialogueOff ;
3593: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3597: LD_STRING M2
3599: PPUSH
3600: CALL_OW 337
// wait ( 2 2$30 ) ;
3604: LD_INT 5250
3606: PPUSH
3607: CALL_OW 67
// PrepareBurlak ;
3611: CALL 2167 0 0
// BurlakArmy ;
3615: CALL 2316 0 0
// end ;
3619: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3620: LD_INT 1
3622: PPUSH
3623: LD_EXP 18
3627: PPUSH
3628: CALL_OW 292
3632: IFFALSE 3791
3634: GO 3636
3636: DISABLE
// begin DialogueOn ;
3637: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3641: LD_EXP 18
3645: PPUSH
3646: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3650: LD_INT 22
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 25
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 25
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 69
3740: PPUSH
3741: LD_STRING D5-Sol1-1
3743: PPUSH
3744: LD_STRING D5-FSol1-1
3746: PPUSH
3747: CALL 6101 0 3
// Say ( JMM , D5-JMM-1 ) ;
3751: LD_EXP 1
3755: PPUSH
3756: LD_STRING D5-JMM-1
3758: PPUSH
3759: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DAmer-Bur-1
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING DAmer-JMM-1
3782: PPUSH
3783: CALL_OW 88
// DialogueOff ;
3787: CALL_OW 7
// end ;
3791: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3792: LD_INT 4
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 70
3809: IFFALSE 4208
3811: GO 3813
3813: DISABLE
3814: LD_INT 0
3816: PPUSH
// begin enable ;
3817: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: LD_INT 4
3825: PPUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 70
3840: PUSH
3841: FOR_IN
3842: IFFALSE 4206
// begin if i = Burlak or i = Masha then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_EXP 17
3853: EQUAL
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: LD_EXP 18
3864: EQUAL
3865: OR
3866: IFFALSE 4013
// begin RemoveUnit ( i ) ;
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 64
// DialogueOn ;
3877: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D5a-JMM-1
3888: PPUSH
3889: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3893: LD_INT 22
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 26
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 25
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PPUSH
3984: LD_STRING D5a-Sol1-1
3986: PPUSH
3987: LD_STRING D5-FSol1-1
3989: PPUSH
3990: CALL 6101 0 3
// DialogueOff ;
3994: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3998: LD_STRING M2b
4000: PPUSH
4001: CALL_OW 337
// spawnBurlak = 0 ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 263
4036: PUSH
4037: LD_INT 1
4039: EQUAL
4040: AND
4041: IFFALSE 4169
// begin case IsDrivenBy ( i ) of Gnyevko :
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 311
4052: PUSH
4053: LD_EXP 19
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4076
4063: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4064: LD_INT 1
4066: PPUSH
4067: LD_STRING 13_Gnyevko_1
4069: PPUSH
4070: CALL_OW 39
4074: GO 4169
4076: LD_EXP 20
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4099
4086: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4087: LD_INT 1
4089: PPUSH
4090: LD_STRING 13_Titov_1
4092: PPUSH
4093: CALL_OW 39
4097: GO 4169
4099: LD_EXP 21
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4122
4109: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4110: LD_INT 1
4112: PPUSH
4113: LD_STRING 13_Xavier_1
4115: PPUSH
4116: CALL_OW 39
4120: GO 4169
4122: LD_EXP 22
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4145
4132: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4133: LD_INT 1
4135: PPUSH
4136: LD_STRING 13_Belkov_1
4138: PPUSH
4139: CALL_OW 39
4143: GO 4169
4145: LD_EXP 23
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4168
4155: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4156: LD_INT 1
4158: PPUSH
4159: LD_STRING 13_Lipshchin_1
4161: PPUSH
4162: CALL_OW 39
4166: GO 4169
4168: POP
// end ; if GetWeapon ( i ) = 49 then
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 264
4178: PUSH
4179: LD_INT 49
4181: EQUAL
4182: IFFALSE 4195
// DestroyUnit ( i ) else
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 65
4193: GO 4204
// RemoveUnit ( i ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 64
// end ;
4204: GO 3841
4206: POP
4207: POP
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4211: LD_EXP 17
4215: PPUSH
4216: CALL_OW 302
4220: PUSH
4221: LD_EXP 18
4225: PPUSH
4226: CALL_OW 256
4230: PUSH
4231: LD_INT 500
4233: LESS
4234: AND
4235: PUSH
4236: LD_EXP 18
4240: PPUSH
4241: CALL_OW 255
4245: PUSH
4246: LD_INT 7
4248: EQUAL
4249: AND
4250: IFFALSE 4270
4252: GO 4254
4254: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4255: LD_EXP 17
4259: PPUSH
4260: LD_INT 107
4262: PPUSH
4263: LD_INT 118
4265: PPUSH
4266: CALL_OW 111
4270: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4271: LD_EXP 17
4275: PPUSH
4276: CALL_OW 301
4280: PUSH
4281: LD_EXP 27
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4423
4292: GO 4294
4294: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4295: LD_EXP 1
4299: PPUSH
4300: LD_STRING D5b-JMM-1
4302: PPUSH
4303: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PPUSH
4398: LD_STRING D5b-Sol1-1
4400: PPUSH
4401: LD_STRING 
4403: PPUSH
4404: CALL 6101 0 3
// ChangeMissionObjectives ( M2a ) ;
4408: LD_STRING M2a
4410: PPUSH
4411: CALL_OW 337
// burlakStatus = 1 ;
4415: LD_ADDR_EXP 28
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// end ;
4423: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4424: LD_EXP 2
4428: PPUSH
4429: CALL_OW 301
4433: IFFALSE 4570
4435: GO 4437
4437: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_STRING D6-JMM-1
4445: PPUSH
4446: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_STRING D6-Sol1-1
4543: PPUSH
4544: LD_STRING 
4546: PPUSH
4547: CALL 6101 0 3
// Say ( JMM , D6-JMM-2 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D6-JMM-2
4558: PPUSH
4559: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4563: LD_STRING M1a
4565: PPUSH
4566: CALL_OW 337
// end ;
4570: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4571: LD_INT 25
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 321
4581: PUSH
4582: LD_INT 2
4584: EQUAL
4585: IFFALSE 4602
4587: GO 4589
4589: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4590: LD_EXP 2
4594: PPUSH
4595: LD_STRING D6-Huck-2
4597: PPUSH
4598: CALL_OW 88
// end ;
4602: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 34
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 8
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: IFFALSE 4845
4655: GO 4657
4657: DISABLE
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
// begin enable ;
4662: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 22
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 57
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 70
4724: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 5
4732: PPUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 57
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4787: LD_VAR 0 1
4791: PUSH
4792: LD_INT 0
4794: GREATER
4795: PUSH
4796: LD_VAR 0 2
4800: PUSH
4801: LD_INT 0
4803: GREATER
4804: AND
4805: IFFALSE 4845
// begin disable ;
4807: DISABLE
// DialogueOn ;
4808: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_STRING D7-JMM-1
4819: PPUSH
4820: CALL_OW 88
// DialogueOff ;
4824: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4828: LD_STRING M4
4830: PPUSH
4831: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4835: LD_INT 5
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 424
// end ; end ;
4845: PPOPN 2
4847: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 25
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 37
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: AND
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: AND
4903: IFFALSE 4968
4905: GO 4907
4907: DISABLE
// begin enable ;
4908: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4909: LD_ADDR_EXP 26
4913: PUSH
4914: LD_INT 6
4916: PPUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 25
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4950: LD_INT 6
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 424
// radationResearched = 1 ;
4960: LD_ADDR_EXP 29
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ;
4968: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4969: LD_EXP 26
4973: PPUSH
4974: CALL_OW 301
4978: PUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5024
4990: GO 4992
4992: DISABLE
// begin enable ;
4993: ENABLE
// radationResearched = 0 ;
4994: LD_ADDR_EXP 29
4998: PUSH
4999: LD_INT 0
5001: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5002: LD_INT 6
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5012: LD_EXP 1
5016: PPUSH
5017: LD_STRING D9a-JMM-1
5019: PPUSH
5020: CALL_OW 88
// end ; end_of_file
5024: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5025: LD_VAR 0 5
5029: PUSH
5030: LD_INT 8
5032: EQUAL
5033: PUSH
5034: LD_EXP 35
5038: PUSH
5039: LD_INT 0
5041: EQUAL
5042: AND
5043: IFFALSE 5096
// begin eventVar1 = 1 ;
5045: LD_ADDR_EXP 35
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// DialogueOn ;
5053: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D6a-JMM-1
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING D6a-Pow-1
5076: PPUSH
5077: CALL_OW 94
// DialogueOff ;
5081: CALL_OW 7
// wait ( 3 3$0 ) ;
5085: LD_INT 6300
5087: PPUSH
5088: CALL_OW 67
// PowellSupport ;
5092: CALL 1939 0 0
// end ; end ;
5096: PPOPN 5
5098: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5099: LD_VAR 0 1
5103: PPUSH
5104: CALL 27457 0 1
// if un = JMM then
5108: LD_VAR 0 1
5112: PUSH
5113: LD_EXP 1
5117: EQUAL
5118: IFFALSE 5127
// YouLost ( JMM ) ;
5120: LD_STRING JMM
5122: PPUSH
5123: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5127: LD_VAR 0 1
5131: PPUSH
5132: CALL_OW 264
5136: PUSH
5137: LD_INT 31
5139: EQUAL
5140: IFFALSE 5156
// achivCounter := achivCounter + 1 ;
5142: LD_ADDR_EXP 41
5146: PUSH
5147: LD_EXP 41
5151: PUSH
5152: LD_INT 1
5154: PLUS
5155: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 255
5165: PUSH
5166: LD_INT 1
5168: NONEQUAL
5169: PUSH
5170: LD_VAR 0 1
5174: PPUSH
5175: CALL_OW 247
5179: PUSH
5180: LD_INT 2
5182: EQUAL
5183: AND
5184: IFFALSE 5200
// destroyCounter := destroyCounter + 1 ;
5186: LD_ADDR_EXP 42
5190: PUSH
5191: LD_EXP 42
5195: PUSH
5196: LD_INT 1
5198: PLUS
5199: ST_TO_ADDR
// end ;
5200: PPOPN 1
5202: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5203: LD_VAR 0 2
5207: PUSH
5208: LD_EXP 18
5212: EQUAL
5213: IFFALSE 5222
// SetAchievement ( ACH_MASHA ) ;
5215: LD_STRING ACH_MASHA
5217: PPUSH
5218: CALL_OW 543
// end ;
5222: PPOPN 4
5224: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: LD_VAR 0 2
5234: PPUSH
5235: CALL 27579 0 2
// if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5239: LD_VAR 0 1
5243: PPUSH
5244: CALL_OW 264
5248: PUSH
5249: LD_INT 8
5251: EQUAL
5252: PUSH
5253: LD_EXP 36
5257: PUSH
5258: LD_INT 0
5260: EQUAL
5261: AND
5262: IFFALSE 5331
// begin eventVar2 = 1 ;
5264: LD_ADDR_EXP 36
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// DialogueOn ;
5272: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5276: LD_EXP 1
5280: PPUSH
5281: LD_STRING D6b-JMM-1
5283: PPUSH
5284: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5288: LD_EXP 15
5292: PPUSH
5293: LD_STRING D6b-Pow-1
5295: PPUSH
5296: CALL_OW 94
// DialogueOff ;
5300: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5304: LD_INT 5
5306: PPUSH
5307: LD_INT 1
5309: PPUSH
5310: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5314: LD_INT 7
5316: PPUSH
5317: LD_INT 1
5319: PPUSH
5320: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5324: LD_STRING M3
5326: PPUSH
5327: CALL_OW 337
// end ; end ;
5331: PPOPN 2
5333: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5334: LD_VAR 0 2
5338: PPUSH
5339: LD_VAR 0 3
5343: PPUSH
5344: LD_INT 5
5346: PPUSH
5347: CALL_OW 309
5351: PUSH
5352: LD_EXP 37
5356: PUSH
5357: LD_INT 0
5359: EQUAL
5360: AND
5361: IFFALSE 5590
// begin eventVar3 = 1 ;
5363: LD_ADDR_EXP 37
5367: PUSH
5368: LD_INT 1
5370: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5371: LD_INT 175
5373: PPUSH
5374: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5378: LD_INT 7
5380: PPUSH
5381: LD_INT 22
5383: PUSH
5384: LD_INT 1
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 21
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 34
5403: PUSH
5404: LD_INT 11
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL_OW 70
5420: PUSH
5421: LD_INT 0
5423: GREATER
5424: IFFALSE 5443
// begin radarOnSpot = 1 ;
5426: LD_ADDR_EXP 30
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5434: LD_STRING M3a
5436: PPUSH
5437: CALL_OW 337
// end else
5441: GO 5450
// begin ChangeMissionObjectives ( M3b ) ;
5443: LD_STRING M3b
5445: PPUSH
5446: CALL_OW 337
// end ; DialogueOn ;
5450: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5454: LD_EXP 2
5458: PPUSH
5459: LD_STRING D8-Huck-1
5461: PPUSH
5462: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5466: LD_EXP 1
5470: PPUSH
5471: LD_STRING D8-JMM-1
5473: PPUSH
5474: CALL_OW 88
// if IsOk ( Stevens ) then
5478: LD_EXP 2
5482: PPUSH
5483: CALL_OW 302
5487: IFFALSE 5549
// begin Say ( Stevens , D8-Huck-2 ) ;
5489: LD_EXP 2
5493: PPUSH
5494: LD_STRING D8-Huck-2
5496: PPUSH
5497: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5501: LD_EXP 1
5505: PPUSH
5506: LD_STRING D8-JMM-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5513: LD_EXP 2
5517: PPUSH
5518: LD_STRING D8-Huck-3
5520: PPUSH
5521: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_STRING D8-JMM-3
5532: PPUSH
5533: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5537: LD_EXP 2
5541: PPUSH
5542: LD_STRING D8-Huck-4
5544: PPUSH
5545: CALL_OW 88
// end ; DialogueOff ;
5549: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5553: LD_INT 5
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5563: LD_INT 7
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5573: LD_INT 6
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5583: LD_STRING M5
5585: PPUSH
5586: CALL_OW 337
// end ; end ;
5590: PPOPN 3
5592: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5593: LD_EXP 26
5597: PPUSH
5598: CALL_OW 302
5602: PUSH
5603: LD_VAR 0 2
5607: PUSH
5608: LD_EXP 26
5612: EQUAL
5613: AND
5614: PUSH
5615: LD_EXP 38
5619: PUSH
5620: LD_INT 0
5622: EQUAL
5623: AND
5624: PUSH
5625: LD_EXP 37
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: AND
5634: IFFALSE 5680
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 268
5648: PUSH
5649: LD_INT 11
5651: EQUAL
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 268
5665: PUSH
5666: LD_INT 11
5668: EQUAL
5669: OR
5670: IFFALSE 5680
// eventVar4 = 1 ;
5672: LD_ADDR_EXP 38
5676: PUSH
5677: LD_INT 1
5679: ST_TO_ADDR
// end ;
5680: PPOPN 2
5682: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
// begin if GetNation ( unit ) = 2 then
5687: LD_VAR 0 1
5691: PPUSH
5692: CALL_OW 248
5696: PUSH
5697: LD_INT 2
5699: EQUAL
5700: IFFALSE 5978
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5702: LD_ADDR_EXP 32
5706: PUSH
5707: LD_EXP 32
5711: PUSH
5712: LD_INT 1
5714: PLUS
5715: ST_TO_ADDR
// for i := 1 to sibDeposits do
5716: LD_ADDR_VAR 0 4
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_EXP 31
5730: PUSH
5731: FOR_TO
5732: IFFALSE 5834
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5734: LD_EXP 31
5738: PUSH
5739: LD_VAR 0 4
5743: ARRAY
5744: PUSH
5745: LD_INT 1
5747: ARRAY
5748: PUSH
5749: LD_VAR 0 2
5753: EQUAL
5754: PUSH
5755: LD_EXP 31
5759: PUSH
5760: LD_VAR 0 4
5764: ARRAY
5765: PUSH
5766: LD_INT 2
5768: ARRAY
5769: PUSH
5770: LD_VAR 0 3
5774: EQUAL
5775: AND
5776: IFFALSE 5832
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5778: LD_ADDR_EXP 31
5782: PUSH
5783: LD_EXP 31
5787: PPUSH
5788: LD_VAR 0 4
5792: PUSH
5793: EMPTY
5794: LIST
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: CALL_OW 3
5804: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5805: LD_ADDR_EXP 31
5809: PUSH
5810: LD_EXP 31
5814: PPUSH
5815: LD_VAR 0 4
5819: PUSH
5820: EMPTY
5821: LIST
5822: PUSH
5823: LD_INT 2
5825: ARRAY
5826: PPUSH
5827: CALL_OW 3
5831: ST_TO_ADDR
// end ;
5832: GO 5731
5834: POP
5835: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5836: LD_EXP 39
5840: PUSH
5841: LD_INT 0
5843: EQUAL
5844: PUSH
5845: LD_VAR 0 2
5849: PPUSH
5850: LD_VAR 0 3
5854: PPUSH
5855: CALL_OW 428
5859: PUSH
5860: LD_INT 22
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: IN
5875: AND
5876: IFFALSE 5978
// begin eventVar5 = 1 ;
5878: LD_ADDR_EXP 39
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// DialogueOn ;
5886: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5890: LD_EXP 2
5894: PPUSH
5895: LD_STRING D4-Sci1-1
5897: PPUSH
5898: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5902: LD_EXP 1
5906: PPUSH
5907: LD_STRING D4-JMM-1
5909: PPUSH
5910: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5914: LD_EXP 2
5918: PPUSH
5919: LD_STRING D4-Sci1-2
5921: PPUSH
5922: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5926: LD_EXP 1
5930: PPUSH
5931: LD_STRING D4-JMM-2
5933: PPUSH
5934: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5938: LD_EXP 2
5942: PPUSH
5943: LD_STRING D4-Sci1-3
5945: PPUSH
5946: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5950: LD_EXP 1
5954: PPUSH
5955: LD_STRING D4-JMM-3
5957: PPUSH
5958: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5962: LD_EXP 1
5966: PPUSH
5967: LD_STRING D4-JMM-3a
5969: PPUSH
5970: CALL_OW 88
// DialogueOff ;
5974: CALL_OW 7
// end ; end ; end ;
5978: PPOPN 5
5980: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5981: LD_VAR 0 1
5985: PPUSH
5986: CALL_OW 255
5990: PUSH
5991: LD_INT 1
5993: EQUAL
5994: PUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 266
6004: PUSH
6005: LD_INT 0
6007: EQUAL
6008: AND
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_INT 1
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 21
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 2
6032: PUSH
6033: LD_INT 30
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 30
6045: PUSH
6046: LD_INT 1
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: PPUSH
6063: CALL_OW 69
6067: PUSH
6068: LD_INT 1
6070: EQUAL
6071: AND
6072: IFFALSE 6086
// SetBName ( building , omega ) ;
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_STRING omega
6081: PPUSH
6082: CALL_OW 500
// end ;
6086: PPOPN 2
6088: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6089: LD_VAR 0 1
6093: PPUSH
6094: CALL 27563 0 1
// end ; end_of_file
6098: PPOPN 1
6100: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
6105: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6106: LD_ADDR_VAR 0 1
6110: PUSH
6111: LD_VAR 0 1
6115: PUSH
6116: LD_EXP 1
6120: PUSH
6121: LD_EXP 2
6125: PUSH
6126: LD_EXP 3
6130: PUSH
6131: LD_EXP 4
6135: PUSH
6136: LD_EXP 5
6140: PUSH
6141: LD_EXP 6
6145: PUSH
6146: LD_EXP 7
6150: PUSH
6151: LD_EXP 8
6155: PUSH
6156: LD_EXP 9
6160: PUSH
6161: LD_EXP 10
6165: PUSH
6166: LD_EXP 11
6170: PUSH
6171: LD_EXP 12
6175: PUSH
6176: LD_EXP 13
6180: PUSH
6181: LD_EXP 14
6185: PUSH
6186: LD_EXP 15
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: DIFF
6208: ST_TO_ADDR
// if not characters then
6209: LD_VAR 0 1
6213: NOT
6214: IFFALSE 6218
// exit ;
6216: GO 6297
// speaker := characters [ rand ( 1 , characters ) ] ;
6218: LD_ADDR_VAR 0 6
6222: PUSH
6223: LD_VAR 0 1
6227: PUSH
6228: LD_INT 1
6230: PPUSH
6231: LD_VAR 0 1
6235: PPUSH
6236: CALL_OW 12
6240: ARRAY
6241: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6242: LD_VAR 0 6
6246: PPUSH
6247: CALL_OW 258
6251: PUSH
6252: LD_INT 1
6254: EQUAL
6255: IFFALSE 6273
// Say ( speaker , dialogMID ) else
6257: LD_VAR 0 6
6261: PPUSH
6262: LD_VAR 0 2
6266: PPUSH
6267: CALL_OW 88
6271: GO 6287
// Say ( speaker , dialogFID ) ;
6273: LD_VAR 0 6
6277: PPUSH
6278: LD_VAR 0 3
6282: PPUSH
6283: CALL_OW 88
// result := speaker ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: LD_VAR 0 6
6296: ST_TO_ADDR
// end ;
6297: LD_VAR 0 4
6301: RET
// export function PrepareDifficulty ; begin
6302: LD_INT 0
6304: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6305: LD_INT 5
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 2
6313: PPUSH
6314: CALL_OW 322
// if difficulty = 1 then
6318: LD_OWVAR 67
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 6445
// begin SetTech ( 66 , 8 , state_researched ) ;
6328: LD_INT 66
6330: PPUSH
6331: LD_INT 8
6333: PPUSH
6334: LD_INT 2
6336: PPUSH
6337: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6341: LD_INT 67
6343: PPUSH
6344: LD_INT 8
6346: PPUSH
6347: LD_INT 0
6349: PPUSH
6350: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6354: LD_INT 68
6356: PPUSH
6357: LD_INT 8
6359: PPUSH
6360: LD_INT 0
6362: PPUSH
6363: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6367: LD_INT 51
6369: PPUSH
6370: LD_INT 8
6372: PPUSH
6373: LD_INT 2
6375: PPUSH
6376: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6380: LD_INT 52
6382: PPUSH
6383: LD_INT 8
6385: PPUSH
6386: LD_INT 0
6388: PPUSH
6389: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6393: LD_INT 53
6395: PPUSH
6396: LD_INT 8
6398: PPUSH
6399: LD_INT 0
6401: PPUSH
6402: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6406: LD_INT 60
6408: PPUSH
6409: LD_INT 8
6411: PPUSH
6412: LD_INT 2
6414: PPUSH
6415: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6419: LD_INT 61
6421: PPUSH
6422: LD_INT 8
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6432: LD_INT 62
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 322
// end ; if difficulty = 2 then
6445: LD_OWVAR 67
6449: PUSH
6450: LD_INT 2
6452: EQUAL
6453: IFFALSE 6572
// begin SetTech ( 66 , 8 , state_researched ) ;
6455: LD_INT 66
6457: PPUSH
6458: LD_INT 8
6460: PPUSH
6461: LD_INT 2
6463: PPUSH
6464: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6468: LD_INT 67
6470: PPUSH
6471: LD_INT 8
6473: PPUSH
6474: LD_INT 2
6476: PPUSH
6477: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6481: LD_INT 68
6483: PPUSH
6484: LD_INT 8
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6494: LD_INT 51
6496: PPUSH
6497: LD_INT 8
6499: PPUSH
6500: LD_INT 2
6502: PPUSH
6503: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6507: LD_INT 52
6509: PPUSH
6510: LD_INT 8
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6520: LD_INT 53
6522: PPUSH
6523: LD_INT 8
6525: PPUSH
6526: LD_INT 2
6528: PPUSH
6529: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6533: LD_INT 60
6535: PPUSH
6536: LD_INT 8
6538: PPUSH
6539: LD_INT 2
6541: PPUSH
6542: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6546: LD_INT 61
6548: PPUSH
6549: LD_INT 8
6551: PPUSH
6552: LD_INT 2
6554: PPUSH
6555: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6559: LD_INT 62
6561: PPUSH
6562: LD_INT 8
6564: PPUSH
6565: LD_INT 0
6567: PPUSH
6568: CALL_OW 322
// end ; if difficulty >= 3 then
6572: LD_OWVAR 67
6576: PUSH
6577: LD_INT 3
6579: GREATEREQUAL
6580: IFFALSE 6699
// begin SetTech ( 66 , 8 , state_researched ) ;
6582: LD_INT 66
6584: PPUSH
6585: LD_INT 8
6587: PPUSH
6588: LD_INT 2
6590: PPUSH
6591: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6595: LD_INT 67
6597: PPUSH
6598: LD_INT 8
6600: PPUSH
6601: LD_INT 2
6603: PPUSH
6604: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6608: LD_INT 68
6610: PPUSH
6611: LD_INT 8
6613: PPUSH
6614: LD_INT 0
6616: PPUSH
6617: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6621: LD_INT 51
6623: PPUSH
6624: LD_INT 8
6626: PPUSH
6627: LD_INT 2
6629: PPUSH
6630: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6634: LD_INT 52
6636: PPUSH
6637: LD_INT 8
6639: PPUSH
6640: LD_INT 2
6642: PPUSH
6643: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6647: LD_INT 53
6649: PPUSH
6650: LD_INT 8
6652: PPUSH
6653: LD_INT 2
6655: PPUSH
6656: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6660: LD_INT 60
6662: PPUSH
6663: LD_INT 8
6665: PPUSH
6666: LD_INT 2
6668: PPUSH
6669: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6673: LD_INT 61
6675: PPUSH
6676: LD_INT 8
6678: PPUSH
6679: LD_INT 2
6681: PPUSH
6682: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6686: LD_INT 62
6688: PPUSH
6689: LD_INT 8
6691: PPUSH
6692: LD_INT 0
6694: PPUSH
6695: CALL_OW 322
// end ; end ;
6699: LD_VAR 0 1
6703: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6704: LD_INT 0
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
6711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6712: LD_ADDR_VAR 0 7
6716: PUSH
6717: LD_INT 22
6719: PUSH
6720: LD_VAR 0 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: LD_INT 9
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 69
6747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6748: LD_ADDR_VAR 0 8
6752: PUSH
6753: LD_INT 22
6755: PUSH
6756: LD_VAR 0 2
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 21
6770: PUSH
6771: LD_INT 3
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PPUSH
6786: CALL_OW 69
6790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6791: LD_ADDR_VAR 0 5
6795: PUSH
6796: LD_INT 1
6798: PPUSH
6799: LD_INT 3
6801: PPUSH
6802: CALL_OW 12
6806: ST_TO_ADDR
// for i = 1 to list do
6807: LD_ADDR_VAR 0 6
6811: PUSH
6812: DOUBLE
6813: LD_INT 1
6815: DEC
6816: ST_TO_ADDR
6817: LD_VAR 0 7
6821: PUSH
6822: FOR_TO
6823: IFFALSE 7005
// for ta in filter do
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: LD_VAR 0 8
6834: PUSH
6835: FOR_IN
6836: IFFALSE 7001
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6838: LD_VAR 0 7
6842: PUSH
6843: LD_VAR 0 6
6847: ARRAY
6848: PPUSH
6849: LD_VAR 0 4
6853: PPUSH
6854: CALL_OW 296
6858: PUSH
6859: LD_INT 13
6861: LESSEQUAL
6862: IFFALSE 6999
// begin case c of 1 :
6864: LD_VAR 0 5
6868: PUSH
6869: LD_INT 1
6871: DOUBLE
6872: EQUAL
6873: IFTRUE 6877
6875: GO 6915
6877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6878: LD_VAR 0 7
6882: PUSH
6883: LD_VAR 0 6
6887: ARRAY
6888: PPUSH
6889: LD_VAR 0 4
6893: PPUSH
6894: CALL_OW 250
6898: PPUSH
6899: LD_VAR 0 4
6903: PPUSH
6904: CALL_OW 251
6908: PPUSH
6909: CALL_OW 154
6913: GO 6999
6915: LD_INT 2
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 6987
6923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6924: LD_VAR 0 7
6928: PUSH
6929: LD_VAR 0 6
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 250
6944: PUSH
6945: LD_INT 1
6947: NEG
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 12
6956: PLUS
6957: PPUSH
6958: LD_VAR 0 4
6962: PPUSH
6963: CALL_OW 251
6967: PUSH
6968: LD_INT 1
6970: NEG
6971: PPUSH
6972: LD_INT 1
6974: PPUSH
6975: CALL_OW 12
6979: PLUS
6980: PPUSH
6981: CALL_OW 153
6985: GO 6999
6987: LD_INT 3
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 6998
6995: POP
// ; end ;
6996: GO 6999
6998: POP
// end ; end ;
6999: GO 6835
7001: POP
7002: POP
7003: GO 6822
7005: POP
7006: POP
// end ;
7007: LD_VAR 0 3
7011: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
// for i in charactersList do
7016: LD_ADDR_VAR 0 4
7020: PUSH
7021: LD_VAR 0 1
7025: PUSH
7026: FOR_IN
7027: IFFALSE 7045
// SaveCharacters ( i , ident ) ;
7029: LD_VAR 0 4
7033: PPUSH
7034: LD_VAR 0 2
7038: PPUSH
7039: CALL_OW 38
7043: GO 7026
7045: POP
7046: POP
// end ;
7047: LD_VAR 0 3
7051: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7052: LD_INT 0
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
7058: PPUSH
7059: PPUSH
7060: PPUSH
7061: PPUSH
7062: PPUSH
7063: PPUSH
7064: PPUSH
// for i = 1 to medicCount do
7065: LD_ADDR_VAR 0 13
7069: PUSH
7070: DOUBLE
7071: LD_INT 1
7073: DEC
7074: ST_TO_ADDR
7075: LD_VAR 0 7
7079: PUSH
7080: FOR_TO
7081: IFFALSE 7163
// begin uc_side = side ;
7083: LD_ADDR_OWVAR 20
7087: PUSH
7088: LD_VAR 0 1
7092: ST_TO_ADDR
// uc_nation = nation ;
7093: LD_ADDR_OWVAR 21
7097: PUSH
7098: LD_VAR 0 2
7102: ST_TO_ADDR
// hc_name =  ;
7103: LD_ADDR_OWVAR 26
7107: PUSH
7108: LD_STRING 
7110: ST_TO_ADDR
// hc_gallery =  ;
7111: LD_ADDR_OWVAR 33
7115: PUSH
7116: LD_STRING 
7118: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7119: LD_INT 0
7121: PPUSH
7122: LD_INT 4
7124: PPUSH
7125: LD_VAR 0 8
7129: PPUSH
7130: CALL_OW 380
// un = CreateHuman ;
7134: LD_ADDR_VAR 0 15
7138: PUSH
7139: CALL_OW 44
7143: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7144: LD_VAR 0 15
7148: PPUSH
7149: LD_VAR 0 9
7153: PPUSH
7154: LD_INT 0
7156: PPUSH
7157: CALL_OW 49
// end ;
7161: GO 7080
7163: POP
7164: POP
// for i = 1 to soldierCount do
7165: LD_ADDR_VAR 0 13
7169: PUSH
7170: DOUBLE
7171: LD_INT 1
7173: DEC
7174: ST_TO_ADDR
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_TO
7181: IFFALSE 7263
// begin uc_side = side ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_VAR 0 1
7192: ST_TO_ADDR
// uc_nation = nation ;
7193: LD_ADDR_OWVAR 21
7197: PUSH
7198: LD_VAR 0 2
7202: ST_TO_ADDR
// hc_name =  ;
7203: LD_ADDR_OWVAR 26
7207: PUSH
7208: LD_STRING 
7210: ST_TO_ADDR
// hc_gallery =  ;
7211: LD_ADDR_OWVAR 33
7215: PUSH
7216: LD_STRING 
7218: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7219: LD_INT 0
7221: PPUSH
7222: LD_INT 1
7224: PPUSH
7225: LD_VAR 0 8
7229: PPUSH
7230: CALL_OW 380
// un = CreateHuman ;
7234: LD_ADDR_VAR 0 15
7238: PUSH
7239: CALL_OW 44
7243: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7244: LD_VAR 0 15
7248: PPUSH
7249: LD_VAR 0 9
7253: PPUSH
7254: LD_INT 0
7256: PPUSH
7257: CALL_OW 49
// end ;
7261: GO 7180
7263: POP
7264: POP
// for i = 1 to sniperCount do
7265: LD_ADDR_VAR 0 13
7269: PUSH
7270: DOUBLE
7271: LD_INT 1
7273: DEC
7274: ST_TO_ADDR
7275: LD_VAR 0 4
7279: PUSH
7280: FOR_TO
7281: IFFALSE 7363
// begin uc_side = side ;
7283: LD_ADDR_OWVAR 20
7287: PUSH
7288: LD_VAR 0 1
7292: ST_TO_ADDR
// uc_nation = nation ;
7293: LD_ADDR_OWVAR 21
7297: PUSH
7298: LD_VAR 0 2
7302: ST_TO_ADDR
// hc_name =  ;
7303: LD_ADDR_OWVAR 26
7307: PUSH
7308: LD_STRING 
7310: ST_TO_ADDR
// hc_gallery =  ;
7311: LD_ADDR_OWVAR 33
7315: PUSH
7316: LD_STRING 
7318: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7319: LD_INT 0
7321: PPUSH
7322: LD_INT 5
7324: PPUSH
7325: LD_VAR 0 8
7329: PPUSH
7330: CALL_OW 380
// un = CreateHuman ;
7334: LD_ADDR_VAR 0 15
7338: PUSH
7339: CALL_OW 44
7343: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7344: LD_VAR 0 15
7348: PPUSH
7349: LD_VAR 0 9
7353: PPUSH
7354: LD_INT 0
7356: PPUSH
7357: CALL_OW 49
// end ;
7361: GO 7280
7363: POP
7364: POP
// for i = 1 to bazookCount do
7365: LD_ADDR_VAR 0 13
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_VAR 0 5
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7463
// begin uc_side = side ;
7383: LD_ADDR_OWVAR 20
7387: PUSH
7388: LD_VAR 0 1
7392: ST_TO_ADDR
// uc_nation = nation ;
7393: LD_ADDR_OWVAR 21
7397: PUSH
7398: LD_VAR 0 2
7402: ST_TO_ADDR
// hc_name =  ;
7403: LD_ADDR_OWVAR 26
7407: PUSH
7408: LD_STRING 
7410: ST_TO_ADDR
// hc_gallery =  ;
7411: LD_ADDR_OWVAR 33
7415: PUSH
7416: LD_STRING 
7418: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7419: LD_INT 0
7421: PPUSH
7422: LD_INT 9
7424: PPUSH
7425: LD_VAR 0 8
7429: PPUSH
7430: CALL_OW 380
// un = CreateHuman ;
7434: LD_ADDR_VAR 0 15
7438: PUSH
7439: CALL_OW 44
7443: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7444: LD_VAR 0 15
7448: PPUSH
7449: LD_VAR 0 9
7453: PPUSH
7454: LD_INT 0
7456: PPUSH
7457: CALL_OW 49
// end ;
7461: GO 7380
7463: POP
7464: POP
// for i = 1 to mortalCount do
7465: LD_ADDR_VAR 0 13
7469: PUSH
7470: DOUBLE
7471: LD_INT 1
7473: DEC
7474: ST_TO_ADDR
7475: LD_VAR 0 6
7479: PUSH
7480: FOR_TO
7481: IFFALSE 7563
// begin uc_side = side ;
7483: LD_ADDR_OWVAR 20
7487: PUSH
7488: LD_VAR 0 1
7492: ST_TO_ADDR
// uc_nation = nation ;
7493: LD_ADDR_OWVAR 21
7497: PUSH
7498: LD_VAR 0 2
7502: ST_TO_ADDR
// hc_name =  ;
7503: LD_ADDR_OWVAR 26
7507: PUSH
7508: LD_STRING 
7510: ST_TO_ADDR
// hc_gallery =  ;
7511: LD_ADDR_OWVAR 33
7515: PUSH
7516: LD_STRING 
7518: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7519: LD_INT 0
7521: PPUSH
7522: LD_INT 8
7524: PPUSH
7525: LD_VAR 0 8
7529: PPUSH
7530: CALL_OW 380
// un = CreateHuman ;
7534: LD_ADDR_VAR 0 15
7538: PUSH
7539: CALL_OW 44
7543: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7544: LD_VAR 0 15
7548: PPUSH
7549: LD_VAR 0 9
7553: PPUSH
7554: LD_INT 0
7556: PPUSH
7557: CALL_OW 49
// end ;
7561: GO 7480
7563: POP
7564: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7565: LD_ADDR_VAR 0 17
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_VAR 0 1
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 25
7584: PUSH
7585: LD_INT 4
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 69
7600: ST_TO_ADDR
// for i in medic_list do
7601: LD_ADDR_VAR 0 13
7605: PUSH
7606: LD_VAR 0 17
7610: PUSH
7611: FOR_IN
7612: IFFALSE 7647
// if GetTag ( i ) = 1 then
7614: LD_VAR 0 13
7618: PPUSH
7619: CALL_OW 110
7623: PUSH
7624: LD_INT 1
7626: EQUAL
7627: IFFALSE 7645
// medic_list := medic_list diff i ;
7629: LD_ADDR_VAR 0 17
7633: PUSH
7634: LD_VAR 0 17
7638: PUSH
7639: LD_VAR 0 13
7643: DIFF
7644: ST_TO_ADDR
7645: GO 7611
7647: POP
7648: POP
// for i in medic_list do
7649: LD_ADDR_VAR 0 13
7653: PUSH
7654: LD_VAR 0 17
7658: PUSH
7659: FOR_IN
7660: IFFALSE 7678
// ComMoveToArea ( i , healArea ) ;
7662: LD_VAR 0 13
7666: PPUSH
7667: LD_VAR 0 10
7671: PPUSH
7672: CALL_OW 113
7676: GO 7659
7678: POP
7679: POP
// repeat wait ( 0 0$1 ) ;
7680: LD_INT 35
7682: PPUSH
7683: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7687: LD_ADDR_VAR 0 16
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_VAR 0 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 24
7712: PUSH
7713: LD_INT 550
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 24
7726: PUSH
7727: LD_INT 250
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 69
7747: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7748: LD_ADDR_VAR 0 18
7752: PUSH
7753: LD_INT 22
7755: PUSH
7756: LD_VAR 0 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 25
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 25
7780: PUSH
7781: LD_INT 5
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 25
7790: PUSH
7791: LD_INT 8
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 25
7800: PUSH
7801: LD_INT 9
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 24
7817: PUSH
7818: LD_INT 1000
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// if medicCount > 0 then
7835: LD_VAR 0 7
7839: PUSH
7840: LD_INT 0
7842: GREATER
7843: IFFALSE 7917
// begin if damageUnit_list > 0 then
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 0
7852: GREATER
7853: IFFALSE 7917
// begin for i in damageUnit_list do
7855: LD_ADDR_VAR 0 13
7859: PUSH
7860: LD_VAR 0 16
7864: PUSH
7865: FOR_IN
7866: IFFALSE 7915
// begin ComMoveToArea ( i , healArea ) ;
7868: LD_VAR 0 13
7872: PPUSH
7873: LD_VAR 0 10
7877: PPUSH
7878: CALL_OW 113
// for j in medic_list do
7882: LD_ADDR_VAR 0 14
7886: PUSH
7887: LD_VAR 0 17
7891: PUSH
7892: FOR_IN
7893: IFFALSE 7911
// AddComHeal ( j , i ) ;
7895: LD_VAR 0 14
7899: PPUSH
7900: LD_VAR 0 13
7904: PPUSH
7905: CALL_OW 188
7909: GO 7892
7911: POP
7912: POP
// end ;
7913: GO 7865
7915: POP
7916: POP
// end ; end ; for i in soldiersOK_list do
7917: LD_ADDR_VAR 0 13
7921: PUSH
7922: LD_VAR 0 18
7926: PUSH
7927: FOR_IN
7928: IFFALSE 8104
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7930: LD_ADDR_VAR 0 21
7934: PUSH
7935: LD_INT 22
7937: PUSH
7938: LD_VAR 0 11
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 69
7951: PPUSH
7952: LD_VAR 0 13
7956: PPUSH
7957: CALL_OW 74
7961: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7962: LD_ADDR_VAR 0 22
7966: PUSH
7967: LD_INT 22
7969: PUSH
7970: LD_VAR 0 11
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 2
7981: PUSH
7982: LD_INT 59
7984: PUSH
7985: EMPTY
7986: LIST
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 1
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 21
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: PPUSH
8021: CALL_OW 69
8025: PPUSH
8026: LD_VAR 0 13
8030: PPUSH
8031: CALL_OW 74
8035: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8036: LD_VAR 0 13
8040: PPUSH
8041: LD_VAR 0 21
8045: PPUSH
8046: CALL_OW 296
8050: PUSH
8051: LD_INT 8
8053: PLUS
8054: PUSH
8055: LD_VAR 0 13
8059: PPUSH
8060: LD_VAR 0 22
8064: PPUSH
8065: CALL_OW 296
8069: LESS
8070: IFFALSE 8088
// begin ComAttackUnit ( i , target1 ) ;
8072: LD_VAR 0 13
8076: PPUSH
8077: LD_VAR 0 21
8081: PPUSH
8082: CALL_OW 115
// end else
8086: GO 8102
// begin ComAttackUnit ( i , target2 ) ;
8088: LD_VAR 0 13
8092: PPUSH
8093: LD_VAR 0 22
8097: PPUSH
8098: CALL_OW 115
// end ; end ;
8102: GO 7927
8104: POP
8105: POP
// until soldiersOK_list = [ ] ;
8106: LD_VAR 0 18
8110: PUSH
8111: EMPTY
8112: EQUAL
8113: IFFALSE 7680
// end ;
8115: LD_VAR 0 12
8119: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8120: LD_INT 0
8122: PPUSH
8123: PPUSH
8124: PPUSH
8125: PPUSH
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
// amChassisTab = [ ] ;
8133: LD_ADDR_VAR 0 19
8137: PUSH
8138: EMPTY
8139: ST_TO_ADDR
// arChassisTab = [ ] ;
8140: LD_ADDR_VAR 0 18
8144: PUSH
8145: EMPTY
8146: ST_TO_ADDR
// ruChassisTab = [ ] ;
8147: LD_ADDR_VAR 0 17
8151: PUSH
8152: EMPTY
8153: ST_TO_ADDR
// for i = 1 to vehCount do
8154: LD_ADDR_VAR 0 13
8158: PUSH
8159: DOUBLE
8160: LD_INT 1
8162: DEC
8163: ST_TO_ADDR
8164: LD_VAR 0 3
8168: PUSH
8169: FOR_TO
8170: IFFALSE 9594
// begin wait ( 0 0$01 ) ;
8172: LD_INT 35
8174: PPUSH
8175: CALL_OW 67
// if nation = 1 then
8179: LD_VAR 0 5
8183: PUSH
8184: LD_INT 1
8186: EQUAL
8187: IFFALSE 8668
// begin uc_side = side ;
8189: LD_ADDR_OWVAR 20
8193: PUSH
8194: LD_VAR 0 2
8198: ST_TO_ADDR
// uc_nation = nation ;
8199: LD_ADDR_OWVAR 21
8203: PUSH
8204: LD_VAR 0 5
8208: ST_TO_ADDR
// vc_engine = vehengine ;
8209: LD_ADDR_OWVAR 39
8213: PUSH
8214: LD_VAR 0 6
8218: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8219: LD_ADDR_OWVAR 40
8223: PUSH
8224: LD_VAR 0 10
8228: PUSH
8229: LD_INT 1
8231: PPUSH
8232: LD_VAR 0 10
8236: PPUSH
8237: CALL_OW 12
8241: ARRAY
8242: ST_TO_ADDR
// for j = 1 to AMWeapon do
8243: LD_ADDR_VAR 0 14
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 10
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8560
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8261: LD_VAR 0 10
8265: PUSH
8266: LD_VAR 0 14
8270: ARRAY
8271: PUSH
8272: LD_INT 2
8274: EQUAL
8275: PUSH
8276: LD_VAR 0 10
8280: PUSH
8281: LD_VAR 0 14
8285: ARRAY
8286: PUSH
8287: LD_INT 3
8289: EQUAL
8290: OR
8291: IFFALSE 8344
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8293: LD_ADDR_VAR 0 19
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: LD_INT 2
8303: PUSH
8304: LD_INT 3
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8320: LD_ADDR_OWVAR 37
8324: PUSH
8325: LD_VAR 0 19
8329: PUSH
8330: LD_INT 1
8332: PPUSH
8333: LD_VAR 0 19
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8344: LD_VAR 0 10
8348: PUSH
8349: LD_VAR 0 14
8353: ARRAY
8354: PUSH
8355: LD_INT 4
8357: EQUAL
8358: PUSH
8359: LD_VAR 0 10
8363: PUSH
8364: LD_VAR 0 14
8368: ARRAY
8369: PUSH
8370: LD_INT 5
8372: EQUAL
8373: OR
8374: PUSH
8375: LD_VAR 0 10
8379: PUSH
8380: LD_VAR 0 14
8384: ARRAY
8385: PUSH
8386: LD_INT 9
8388: EQUAL
8389: OR
8390: PUSH
8391: LD_VAR 0 10
8395: PUSH
8396: LD_VAR 0 14
8400: ARRAY
8401: PUSH
8402: LD_INT 11
8404: EQUAL
8405: OR
8406: PUSH
8407: LD_VAR 0 10
8411: PUSH
8412: LD_VAR 0 14
8416: ARRAY
8417: PUSH
8418: LD_INT 7
8420: EQUAL
8421: OR
8422: IFFALSE 8471
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8424: LD_ADDR_VAR 0 19
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 4
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8447: LD_ADDR_OWVAR 37
8451: PUSH
8452: LD_VAR 0 19
8456: PUSH
8457: LD_INT 1
8459: PPUSH
8460: LD_VAR 0 19
8464: PPUSH
8465: CALL_OW 12
8469: ARRAY
8470: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8471: LD_VAR 0 10
8475: PUSH
8476: LD_VAR 0 14
8480: ARRAY
8481: PUSH
8482: LD_INT 8
8484: EQUAL
8485: PUSH
8486: LD_VAR 0 10
8490: PUSH
8491: LD_VAR 0 14
8495: ARRAY
8496: PUSH
8497: LD_INT 6
8499: EQUAL
8500: OR
8501: PUSH
8502: LD_VAR 0 10
8506: PUSH
8507: LD_VAR 0 14
8511: ARRAY
8512: PUSH
8513: LD_INT 10
8515: EQUAL
8516: OR
8517: IFFALSE 8558
// begin amChassisTab = [ 4 , 5 ] ;
8519: LD_ADDR_VAR 0 19
8523: PUSH
8524: LD_INT 4
8526: PUSH
8527: LD_INT 5
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8534: LD_ADDR_OWVAR 37
8538: PUSH
8539: LD_VAR 0 19
8543: PUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_VAR 0 19
8551: PPUSH
8552: CALL_OW 12
8556: ARRAY
8557: ST_TO_ADDR
// end ; end ;
8558: GO 8258
8560: POP
8561: POP
// veh = CreateVehicle ;
8562: LD_ADDR_VAR 0 16
8566: PUSH
8567: CALL_OW 45
8571: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8572: LD_VAR 0 16
8576: PPUSH
8577: LD_VAR 0 1
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 49
// if vc_control = 1 then
8589: LD_OWVAR 38
8593: PUSH
8594: LD_INT 1
8596: EQUAL
8597: IFFALSE 8654
// begin hc_gallery =  ;
8599: LD_ADDR_OWVAR 33
8603: PUSH
8604: LD_STRING 
8606: ST_TO_ADDR
// hc_name =  ;
8607: LD_ADDR_OWVAR 26
8611: PUSH
8612: LD_STRING 
8614: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8615: LD_INT 0
8617: PPUSH
8618: LD_INT 3
8620: PPUSH
8621: LD_VAR 0 4
8625: PPUSH
8626: CALL_OW 380
// un = CreateHuman ;
8630: LD_ADDR_VAR 0 15
8634: PUSH
8635: CALL_OW 44
8639: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8640: LD_VAR 0 15
8644: PPUSH
8645: LD_VAR 0 16
8649: PPUSH
8650: CALL_OW 52
// end ; i = i + 1 ;
8654: LD_ADDR_VAR 0 13
8658: PUSH
8659: LD_VAR 0 13
8663: PUSH
8664: LD_INT 1
8666: PLUS
8667: ST_TO_ADDR
// end ; if nation = 2 then
8668: LD_VAR 0 5
8672: PUSH
8673: LD_INT 2
8675: EQUAL
8676: IFFALSE 9178
// begin uc_side = side ;
8678: LD_ADDR_OWVAR 20
8682: PUSH
8683: LD_VAR 0 2
8687: ST_TO_ADDR
// uc_nation = nation ;
8688: LD_ADDR_OWVAR 21
8692: PUSH
8693: LD_VAR 0 5
8697: ST_TO_ADDR
// vc_engine = vehengine ;
8698: LD_ADDR_OWVAR 39
8702: PUSH
8703: LD_VAR 0 6
8707: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8708: LD_INT 22
8710: PUSH
8711: LD_VAR 0 2
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 21
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 33
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 50
8742: PUSH
8743: EMPTY
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: PUSH
8757: LD_INT 8
8759: LESSEQUAL
8760: IFFALSE 8788
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8762: LD_ADDR_OWVAR 38
8766: PUSH
8767: LD_VAR 0 7
8771: PUSH
8772: LD_INT 1
8774: PPUSH
8775: LD_VAR 0 7
8779: PPUSH
8780: CALL_OW 12
8784: ARRAY
8785: ST_TO_ADDR
8786: GO 8796
// vc_control = control_apeman ;
8788: LD_ADDR_OWVAR 38
8792: PUSH
8793: LD_INT 5
8795: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8796: LD_ADDR_OWVAR 40
8800: PUSH
8801: LD_VAR 0 9
8805: PUSH
8806: LD_INT 1
8808: PPUSH
8809: LD_VAR 0 9
8813: PPUSH
8814: CALL_OW 12
8818: ARRAY
8819: ST_TO_ADDR
// for j = 1 to ARWeapons do
8820: LD_ADDR_VAR 0 14
8824: PUSH
8825: DOUBLE
8826: LD_INT 1
8828: DEC
8829: ST_TO_ADDR
8830: LD_VAR 0 9
8834: PUSH
8835: FOR_TO
8836: IFFALSE 9070
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8838: LD_VAR 0 9
8842: PUSH
8843: LD_VAR 0 14
8847: ARRAY
8848: PUSH
8849: LD_INT 24
8851: EQUAL
8852: PUSH
8853: LD_VAR 0 9
8857: PUSH
8858: LD_VAR 0 14
8862: ARRAY
8863: PUSH
8864: LD_INT 22
8866: EQUAL
8867: OR
8868: PUSH
8869: LD_VAR 0 9
8873: PUSH
8874: LD_VAR 0 14
8878: ARRAY
8879: PUSH
8880: LD_INT 23
8882: EQUAL
8883: OR
8884: PUSH
8885: LD_VAR 0 9
8889: PUSH
8890: LD_VAR 0 14
8894: ARRAY
8895: PUSH
8896: LD_INT 30
8898: EQUAL
8899: OR
8900: IFFALSE 8949
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8902: LD_ADDR_VAR 0 18
8906: PUSH
8907: LD_INT 11
8909: PUSH
8910: LD_INT 12
8912: PUSH
8913: LD_INT 13
8915: PUSH
8916: LD_INT 14
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8925: LD_ADDR_OWVAR 37
8929: PUSH
8930: LD_VAR 0 18
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 18
8942: PPUSH
8943: CALL_OW 12
8947: ARRAY
8948: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8949: LD_VAR 0 9
8953: PUSH
8954: LD_VAR 0 14
8958: ARRAY
8959: PUSH
8960: LD_INT 29
8962: EQUAL
8963: PUSH
8964: LD_VAR 0 9
8968: PUSH
8969: LD_VAR 0 14
8973: ARRAY
8974: PUSH
8975: LD_INT 28
8977: EQUAL
8978: OR
8979: PUSH
8980: LD_VAR 0 9
8984: PUSH
8985: LD_VAR 0 14
8989: ARRAY
8990: PUSH
8991: LD_INT 27
8993: EQUAL
8994: OR
8995: PUSH
8996: LD_VAR 0 9
9000: PUSH
9001: LD_VAR 0 14
9005: ARRAY
9006: PUSH
9007: LD_INT 26
9009: EQUAL
9010: OR
9011: PUSH
9012: LD_VAR 0 9
9016: PUSH
9017: LD_VAR 0 14
9021: ARRAY
9022: PUSH
9023: LD_INT 25
9025: EQUAL
9026: OR
9027: IFFALSE 9068
// begin arChassisTab = [ 13 , 14 ] ;
9029: LD_ADDR_VAR 0 18
9033: PUSH
9034: LD_INT 13
9036: PUSH
9037: LD_INT 14
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9044: LD_ADDR_OWVAR 37
9048: PUSH
9049: LD_VAR 0 18
9053: PUSH
9054: LD_INT 1
9056: PPUSH
9057: LD_VAR 0 18
9061: PPUSH
9062: CALL_OW 12
9066: ARRAY
9067: ST_TO_ADDR
// end ; end ;
9068: GO 8835
9070: POP
9071: POP
// veh = CreateVehicle ;
9072: LD_ADDR_VAR 0 16
9076: PUSH
9077: CALL_OW 45
9081: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9082: LD_VAR 0 16
9086: PPUSH
9087: LD_VAR 0 1
9091: PPUSH
9092: LD_INT 0
9094: PPUSH
9095: CALL_OW 49
// if vc_control = 1 then
9099: LD_OWVAR 38
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: IFFALSE 9164
// begin hc_gallery =  ;
9109: LD_ADDR_OWVAR 33
9113: PUSH
9114: LD_STRING 
9116: ST_TO_ADDR
// hc_name =  ;
9117: LD_ADDR_OWVAR 26
9121: PUSH
9122: LD_STRING 
9124: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 3
9130: PPUSH
9131: LD_VAR 0 4
9135: PPUSH
9136: CALL_OW 380
// un = CreateHuman ;
9140: LD_ADDR_VAR 0 15
9144: PUSH
9145: CALL_OW 44
9149: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9150: LD_VAR 0 15
9154: PPUSH
9155: LD_VAR 0 16
9159: PPUSH
9160: CALL_OW 52
// end ; i = i + 1 ;
9164: LD_ADDR_VAR 0 13
9168: PUSH
9169: LD_VAR 0 13
9173: PUSH
9174: LD_INT 1
9176: PLUS
9177: ST_TO_ADDR
// end ; if nation = 3 then
9178: LD_VAR 0 5
9182: PUSH
9183: LD_INT 3
9185: EQUAL
9186: IFFALSE 9592
// begin uc_side = side ;
9188: LD_ADDR_OWVAR 20
9192: PUSH
9193: LD_VAR 0 2
9197: ST_TO_ADDR
// uc_nation = nation ;
9198: LD_ADDR_OWVAR 21
9202: PUSH
9203: LD_VAR 0 5
9207: ST_TO_ADDR
// vc_engine = vehengine ;
9208: LD_ADDR_OWVAR 39
9212: PUSH
9213: LD_VAR 0 6
9217: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9218: LD_ADDR_OWVAR 38
9222: PUSH
9223: LD_VAR 0 7
9227: PUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_VAR 0 7
9235: PPUSH
9236: CALL_OW 12
9240: ARRAY
9241: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9242: LD_ADDR_OWVAR 40
9246: PUSH
9247: LD_VAR 0 8
9251: PUSH
9252: LD_INT 1
9254: PPUSH
9255: LD_VAR 0 8
9259: PPUSH
9260: CALL_OW 12
9264: ARRAY
9265: ST_TO_ADDR
// for j = 1 to RuWeapons do
9266: LD_ADDR_VAR 0 14
9270: PUSH
9271: DOUBLE
9272: LD_INT 1
9274: DEC
9275: ST_TO_ADDR
9276: LD_VAR 0 8
9280: PUSH
9281: FOR_TO
9282: IFFALSE 9468
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9284: LD_VAR 0 8
9288: PUSH
9289: LD_VAR 0 14
9293: ARRAY
9294: PUSH
9295: LD_INT 42
9297: EQUAL
9298: PUSH
9299: LD_VAR 0 8
9303: PUSH
9304: LD_VAR 0 14
9308: ARRAY
9309: PUSH
9310: LD_INT 43
9312: EQUAL
9313: OR
9314: PUSH
9315: LD_VAR 0 8
9319: PUSH
9320: LD_VAR 0 14
9324: ARRAY
9325: PUSH
9326: LD_INT 44
9328: EQUAL
9329: OR
9330: PUSH
9331: LD_VAR 0 8
9335: PUSH
9336: LD_VAR 0 14
9340: ARRAY
9341: PUSH
9342: LD_INT 45
9344: EQUAL
9345: OR
9346: PUSH
9347: LD_VAR 0 8
9351: PUSH
9352: LD_VAR 0 14
9356: ARRAY
9357: PUSH
9358: LD_INT 49
9360: EQUAL
9361: OR
9362: IFFALSE 9399
// begin ruChassisTab = [ 24 ] ;
9364: LD_ADDR_VAR 0 17
9368: PUSH
9369: LD_INT 24
9371: PUSH
9372: EMPTY
9373: LIST
9374: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9375: LD_ADDR_OWVAR 37
9379: PUSH
9380: LD_VAR 0 17
9384: PUSH
9385: LD_INT 1
9387: PPUSH
9388: LD_VAR 0 17
9392: PPUSH
9393: CALL_OW 12
9397: ARRAY
9398: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9399: LD_VAR 0 8
9403: PUSH
9404: LD_VAR 0 14
9408: ARRAY
9409: PUSH
9410: LD_INT 46
9412: EQUAL
9413: PUSH
9414: LD_VAR 0 8
9418: PUSH
9419: LD_VAR 0 14
9423: ARRAY
9424: PUSH
9425: LD_INT 47
9427: EQUAL
9428: OR
9429: IFFALSE 9466
// begin ruChassisTab = [ 24 ] ;
9431: LD_ADDR_VAR 0 17
9435: PUSH
9436: LD_INT 24
9438: PUSH
9439: EMPTY
9440: LIST
9441: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9442: LD_ADDR_OWVAR 37
9446: PUSH
9447: LD_VAR 0 17
9451: PUSH
9452: LD_INT 1
9454: PPUSH
9455: LD_VAR 0 17
9459: PPUSH
9460: CALL_OW 12
9464: ARRAY
9465: ST_TO_ADDR
// end ; end ;
9466: GO 9281
9468: POP
9469: POP
// veh = CreateVehicle ;
9470: LD_ADDR_VAR 0 16
9474: PUSH
9475: CALL_OW 45
9479: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9480: LD_VAR 0 16
9484: PPUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_INT 0
9492: PPUSH
9493: CALL_OW 49
// if vc_control = 1 then
9497: LD_OWVAR 38
9501: PUSH
9502: LD_INT 1
9504: EQUAL
9505: IFFALSE 9592
// begin if uc_side = 8 then
9507: LD_OWVAR 20
9511: PUSH
9512: LD_INT 8
9514: EQUAL
9515: IFFALSE 9527
// uc_nation = 2 else
9517: LD_ADDR_OWVAR 21
9521: PUSH
9522: LD_INT 2
9524: ST_TO_ADDR
9525: GO 9537
// uc_nation = nation ;
9527: LD_ADDR_OWVAR 21
9531: PUSH
9532: LD_VAR 0 5
9536: ST_TO_ADDR
// hc_gallery =  ;
9537: LD_ADDR_OWVAR 33
9541: PUSH
9542: LD_STRING 
9544: ST_TO_ADDR
// hc_name =  ;
9545: LD_ADDR_OWVAR 26
9549: PUSH
9550: LD_STRING 
9552: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9553: LD_INT 0
9555: PPUSH
9556: LD_INT 3
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 380
// un = CreateHuman ;
9568: LD_ADDR_VAR 0 15
9572: PUSH
9573: CALL_OW 44
9577: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9578: LD_VAR 0 15
9582: PPUSH
9583: LD_VAR 0 16
9587: PPUSH
9588: CALL_OW 52
// end ; end ; end ;
9592: GO 8169
9594: POP
9595: POP
// repeat wait ( 0 0$1 ) ;
9596: LD_INT 35
9598: PPUSH
9599: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9603: LD_ADDR_VAR 0 20
9607: PUSH
9608: LD_INT 22
9610: PUSH
9611: LD_VAR 0 2
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 21
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 24
9632: PUSH
9633: LD_INT 250
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: LD_INT 34
9645: PUSH
9646: LD_INT 25
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 34
9655: PUSH
9656: LD_INT 26
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 34
9665: PUSH
9666: LD_INT 27
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 34
9675: PUSH
9676: LD_INT 28
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 34
9685: PUSH
9686: LD_INT 29
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 34
9695: PUSH
9696: LD_INT 46
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 34
9705: PUSH
9706: LD_INT 44
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 34
9715: PUSH
9716: LD_INT 45
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 34
9725: PUSH
9726: LD_INT 47
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: PPUSH
9751: CALL_OW 69
9755: ST_TO_ADDR
// if vehicleOK_list > 0 then
9756: LD_VAR 0 20
9760: PUSH
9761: LD_INT 0
9763: GREATER
9764: IFFALSE 9983
// begin for i in vehicleOK_list do
9766: LD_ADDR_VAR 0 13
9770: PUSH
9771: LD_VAR 0 20
9775: PUSH
9776: FOR_IN
9777: IFFALSE 9981
// begin if GetSide ( i ) <> side then
9779: LD_VAR 0 13
9783: PPUSH
9784: CALL_OW 255
9788: PUSH
9789: LD_VAR 0 2
9793: NONEQUAL
9794: IFFALSE 9807
// begin ComStop ( i ) ;
9796: LD_VAR 0 13
9800: PPUSH
9801: CALL_OW 141
// continue ;
9805: GO 9776
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9807: LD_ADDR_VAR 0 21
9811: PUSH
9812: LD_INT 22
9814: PUSH
9815: LD_VAR 0 11
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PPUSH
9824: CALL_OW 69
9828: PPUSH
9829: LD_VAR 0 13
9833: PPUSH
9834: CALL_OW 74
9838: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9839: LD_ADDR_VAR 0 22
9843: PUSH
9844: LD_INT 22
9846: PUSH
9847: LD_VAR 0 11
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: LD_INT 59
9861: PUSH
9862: EMPTY
9863: LIST
9864: PUSH
9865: LD_INT 21
9867: PUSH
9868: LD_INT 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 21
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: PPUSH
9903: LD_VAR 0 13
9907: PPUSH
9908: CALL_OW 74
9912: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9913: LD_VAR 0 13
9917: PPUSH
9918: LD_VAR 0 21
9922: PPUSH
9923: CALL_OW 296
9927: PUSH
9928: LD_INT 8
9930: PLUS
9931: PUSH
9932: LD_VAR 0 13
9936: PPUSH
9937: LD_VAR 0 22
9941: PPUSH
9942: CALL_OW 296
9946: LESS
9947: IFFALSE 9965
// begin ComAttackUnit ( i , target1 ) ;
9949: LD_VAR 0 13
9953: PPUSH
9954: LD_VAR 0 21
9958: PPUSH
9959: CALL_OW 115
// end else
9963: GO 9979
// begin ComAttackUnit ( i , target2 ) ;
9965: LD_VAR 0 13
9969: PPUSH
9970: LD_VAR 0 22
9974: PPUSH
9975: CALL_OW 115
// end ; end ;
9979: GO 9776
9981: POP
9982: POP
// end ; until vehicleOK_list = 0 ;
9983: LD_VAR 0 20
9987: PUSH
9988: LD_INT 0
9990: EQUAL
9991: IFFALSE 9596
// end ;
9993: LD_VAR 0 12
9997: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9998: LD_INT 0
10000: PPUSH
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10006: LD_ADDR_VAR 0 6
10010: PUSH
10011: LD_INT 22
10013: PUSH
10014: LD_VAR 0 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 34
10025: PUSH
10026: LD_INT 29
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 69
10041: ST_TO_ADDR
// if veh_list = 0 then
10042: LD_VAR 0 6
10046: PUSH
10047: LD_INT 0
10049: EQUAL
10050: IFFALSE 10054
// exit ;
10052: GO 10259
// if veh_list > 0 then
10054: LD_VAR 0 6
10058: PUSH
10059: LD_INT 0
10061: GREATER
10062: IFFALSE 10259
// begin for i in veh_List do
10064: LD_ADDR_VAR 0 4
10068: PUSH
10069: LD_VAR 0 6
10073: PUSH
10074: FOR_IN
10075: IFFALSE 10257
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10077: LD_ADDR_VAR 0 7
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_VAR 0 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 24
10096: PUSH
10097: LD_INT 250
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: LD_INT 59
10109: PUSH
10110: EMPTY
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 1
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: PPUSH
10147: CALL_OW 69
10151: PPUSH
10152: LD_VAR 0 4
10156: PPUSH
10157: CALL_OW 74
10161: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10162: LD_VAR 0 4
10166: PPUSH
10167: LD_VAR 0 7
10171: PPUSH
10172: CALL_OW 115
// if not HasTask ( i ) then
10176: LD_VAR 0 4
10180: PPUSH
10181: CALL_OW 314
10185: NOT
10186: IFFALSE 10255
// begin wait ( 0 0$0.1 ) ;
10188: LD_INT 4
10190: PPUSH
10191: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10195: LD_ADDR_VAR 0 8
10199: PUSH
10200: LD_INT 22
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 24
10214: PUSH
10215: LD_INT 250
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PPUSH
10226: CALL_OW 69
10230: PPUSH
10231: LD_VAR 0 4
10235: PPUSH
10236: CALL_OW 74
10240: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10241: LD_VAR 0 4
10245: PPUSH
10246: LD_VAR 0 8
10250: PPUSH
10251: CALL_OW 115
// end ; end ;
10255: GO 10074
10257: POP
10258: POP
// end ; end ; end_of_file
10259: LD_VAR 0 3
10263: RET
// every 0 0$1 do
10264: GO 10266
10266: DISABLE
// begin enable ;
10267: ENABLE
// IntBazooka ( 7 , 1 ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL 6704 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10278: LD_INT 8
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: CALL 9998 0 2
// end ;
10288: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10289: LD_INT 22
10291: PUSH
10292: LD_INT 3
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 21
10301: PUSH
10302: LD_INT 2
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 50
10311: PUSH
10312: EMPTY
10313: LIST
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: LD_INT 34
10320: PUSH
10321: LD_INT 46
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 34
10330: PUSH
10331: LD_INT 44
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 34
10340: PUSH
10341: LD_INT 45
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 34
10350: PUSH
10351: LD_INT 47
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PUSH
10376: LD_INT 0
10378: GREATER
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 2
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 50
10402: PUSH
10403: EMPTY
10404: LIST
10405: PUSH
10406: LD_INT 34
10408: PUSH
10409: LD_INT 49
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: PPUSH
10422: CALL_OW 69
10426: PUSH
10427: LD_INT 0
10429: GREATER
10430: AND
10431: IFFALSE 10603
10433: GO 10435
10435: DISABLE
10436: LD_INT 0
10438: PPUSH
10439: PPUSH
// begin enable ;
10440: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_INT 22
10448: PUSH
10449: LD_INT 3
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 2
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 2
10474: PUSH
10475: LD_INT 34
10477: PUSH
10478: LD_INT 46
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 34
10487: PUSH
10488: LD_INT 44
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 34
10497: PUSH
10498: LD_INT 45
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 34
10507: PUSH
10508: LD_INT 47
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_INT 22
10540: PUSH
10541: LD_INT 3
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 21
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: EMPTY
10562: LIST
10563: PUSH
10564: LD_INT 34
10566: PUSH
10567: LD_INT 49
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PPUSH
10580: CALL_OW 69
10584: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10585: LD_VAR 0 2
10589: PPUSH
10590: LD_VAR 0 1
10594: PUSH
10595: LD_INT 1
10597: ARRAY
10598: PPUSH
10599: CALL_OW 112
// end ; end_of_file
10603: PPOPN 2
10605: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10606: LD_EXP 38
10610: PUSH
10611: LD_INT 1
10613: EQUAL
10614: IFFALSE 11516
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
10622: PPUSH
10623: PPUSH
// begin m1 := false ;
10624: LD_ADDR_VAR 0 1
10628: PUSH
10629: LD_INT 0
10631: ST_TO_ADDR
// m2 := false ;
10632: LD_ADDR_VAR 0 2
10636: PUSH
10637: LD_INT 0
10639: ST_TO_ADDR
// m3 := false ;
10640: LD_ADDR_VAR 0 3
10644: PUSH
10645: LD_INT 0
10647: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10648: LD_EXP 1
10652: PPUSH
10653: LD_STRING D9b-JMM-1
10655: PPUSH
10656: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10660: LD_EXP 15
10664: PPUSH
10665: LD_STRING D9b-Pow-1
10667: PPUSH
10668: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10672: LD_EXP 1
10676: PPUSH
10677: LD_STRING D9b-JMM-2
10679: PPUSH
10680: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10684: LD_EXP 15
10688: PPUSH
10689: LD_STRING D9b-Pow-2
10691: PPUSH
10692: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10696: LD_EXP 1
10700: PPUSH
10701: LD_STRING D9b-JMM-3
10703: PPUSH
10704: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10708: LD_EXP 15
10712: PPUSH
10713: LD_STRING D9b-Pow-3
10715: PPUSH
10716: CALL_OW 94
// if tick <= 60 60$00 then
10720: LD_OWVAR 1
10724: PUSH
10725: LD_INT 126000
10727: LESSEQUAL
10728: IFFALSE 10737
// SetAchievement ( ACH_ASPEED_13 ) ;
10730: LD_STRING ACH_ASPEED_13
10732: PPUSH
10733: CALL_OW 543
// if burlakStatus = 1 then
10737: LD_EXP 28
10741: PUSH
10742: LD_INT 1
10744: EQUAL
10745: IFFALSE 10767
// begin m1 := true ;
10747: LD_ADDR_VAR 0 1
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10755: LD_STRING Burlak
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 101
// end else
10765: GO 10778
// begin AddMedal ( Burlak , - 1 ) ;
10767: LD_STRING Burlak
10769: PPUSH
10770: LD_INT 1
10772: NEG
10773: PPUSH
10774: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10778: LD_EXP 2
10782: PPUSH
10783: CALL_OW 302
10787: IFFALSE 10809
// begin m2 := true ;
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_INT 1
10796: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10797: LD_STRING Stevens
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 101
// end else
10807: GO 10820
// begin AddMedal ( Stevens , - 1 ) ;
10809: LD_STRING Stevens
10811: PPUSH
10812: LD_INT 1
10814: NEG
10815: PPUSH
10816: CALL_OW 101
// end ; if radarOnSpot = 1 then
10820: LD_EXP 30
10824: PUSH
10825: LD_INT 1
10827: EQUAL
10828: IFFALSE 10850
// begin m3 := true ;
10830: LD_ADDR_VAR 0 3
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10838: LD_STRING Observation
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 101
// end else
10848: GO 10861
// begin AddMedal ( Observation , - 1 ) ;
10850: LD_STRING Observation
10852: PPUSH
10853: LD_INT 1
10855: NEG
10856: PPUSH
10857: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10861: LD_VAR 0 1
10865: PUSH
10866: LD_VAR 0 2
10870: AND
10871: PUSH
10872: LD_VAR 0 3
10876: AND
10877: PUSH
10878: LD_OWVAR 67
10882: PUSH
10883: LD_INT 3
10885: GREATEREQUAL
10886: AND
10887: IFFALSE 10899
// SetAchievementEX ( ACH_AMER , 13 ) ;
10889: LD_STRING ACH_AMER
10891: PPUSH
10892: LD_INT 13
10894: PPUSH
10895: CALL_OW 564
// GiveMedals ( MAIN ) ;
10899: LD_STRING MAIN
10901: PPUSH
10902: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10906: LD_EXP 28
10910: PPUSH
10911: LD_STRING 13_BurlakStatus_1
10913: PPUSH
10914: CALL_OW 39
// if IsLive ( Stevens ) then
10918: LD_EXP 2
10922: PPUSH
10923: CALL_OW 300
10927: IFFALSE 10941
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10929: LD_INT 1
10931: PPUSH
10932: LD_STRING 13_StevensStatus_1
10934: PPUSH
10935: CALL_OW 39
10939: GO 10951
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10941: LD_INT 0
10943: PPUSH
10944: LD_STRING 13_StevensStatus_1
10946: PPUSH
10947: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10951: LD_INT 22
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 21
10963: PUSH
10964: LD_INT 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 2
10973: PUSH
10974: LD_INT 25
10976: PUSH
10977: LD_INT 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 25
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 25
10996: PUSH
10997: LD_INT 3
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 25
11006: PUSH
11007: LD_INT 4
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 5
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 25
11026: PUSH
11027: LD_INT 8
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: PPUSH
11053: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11057: LD_EXP 1
11061: PPUSH
11062: LD_EXP 34
11066: PUSH
11067: LD_STRING JMM
11069: STR
11070: PPUSH
11071: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11075: LD_EXP 8
11079: PPUSH
11080: LD_EXP 34
11084: PUSH
11085: LD_STRING Brown
11087: STR
11088: PPUSH
11089: CALL 7012 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11093: LD_EXP 4
11097: PPUSH
11098: LD_EXP 34
11102: PUSH
11103: LD_STRING Donaldson
11105: STR
11106: PPUSH
11107: CALL 7012 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11111: LD_EXP 5
11115: PPUSH
11116: LD_EXP 34
11120: PUSH
11121: LD_STRING Bobby
11123: STR
11124: PPUSH
11125: CALL 7012 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11129: LD_EXP 6
11133: PPUSH
11134: LD_EXP 34
11138: PUSH
11139: LD_STRING Cyrus
11141: STR
11142: PPUSH
11143: CALL 7012 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11147: LD_EXP 3
11151: PPUSH
11152: LD_EXP 34
11156: PUSH
11157: LD_STRING Lisa
11159: STR
11160: PPUSH
11161: CALL 7012 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11165: LD_EXP 13
11169: PPUSH
11170: LD_EXP 34
11174: PUSH
11175: LD_STRING Frank
11177: STR
11178: PPUSH
11179: CALL 7012 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11183: LD_EXP 14
11187: PPUSH
11188: LD_EXP 34
11192: PUSH
11193: LD_STRING Kikuchi
11195: STR
11196: PPUSH
11197: CALL 7012 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11201: LD_EXP 10
11205: PPUSH
11206: LD_EXP 34
11210: PUSH
11211: LD_STRING Houten
11213: STR
11214: PPUSH
11215: CALL 7012 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11219: LD_EXP 12
11223: PPUSH
11224: LD_EXP 34
11228: PUSH
11229: LD_STRING Gary
11231: STR
11232: PPUSH
11233: CALL 7012 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11237: LD_EXP 11
11241: PPUSH
11242: LD_EXP 34
11246: PUSH
11247: LD_STRING Cornell
11249: STR
11250: PPUSH
11251: CALL 7012 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11255: LD_EXP 7
11259: PPUSH
11260: LD_EXP 34
11264: PUSH
11265: LD_STRING Denis
11267: STR
11268: PPUSH
11269: CALL 7012 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11273: LD_EXP 9
11277: PPUSH
11278: LD_EXP 34
11282: PUSH
11283: LD_STRING Gladstone
11285: STR
11286: PPUSH
11287: CALL 7012 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11291: LD_EXP 2
11295: PPUSH
11296: LD_EXP 34
11300: PUSH
11301: LD_STRING Stevens
11303: STR
11304: PPUSH
11305: CALL 7012 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11309: LD_INT 50
11311: PUSH
11312: EMPTY
11313: LIST
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 21
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 2
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 25
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 25
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 25
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 25
11390: PUSH
11391: LD_INT 8
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: PUSH
11418: LD_EXP 1
11422: PUSH
11423: LD_EXP 8
11427: PUSH
11428: LD_EXP 4
11432: PUSH
11433: LD_EXP 5
11437: PUSH
11438: LD_EXP 6
11442: PUSH
11443: LD_EXP 3
11447: PUSH
11448: LD_EXP 13
11452: PUSH
11453: LD_EXP 9
11457: PUSH
11458: LD_EXP 14
11462: PUSH
11463: LD_EXP 7
11467: PUSH
11468: LD_EXP 10
11472: PUSH
11473: LD_EXP 12
11477: PUSH
11478: LD_EXP 11
11482: PUSH
11483: LD_EXP 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: DIFF
11504: PPUSH
11505: LD_STRING 13_other_survivors
11507: PPUSH
11508: CALL_OW 38
// YouWin ;
11512: CALL_OW 103
// end ; end_of_file
11516: PPOPN 3
11518: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11519: LD_EXP 32
11523: PUSH
11524: LD_INT 2
11526: EQUAL
11527: PUSH
11528: LD_INT 34
11530: PUSH
11531: LD_INT 8
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 69
11542: NOT
11543: AND
11544: IFFALSE 11680
11546: GO 11548
11548: DISABLE
11549: LD_INT 0
11551: PPUSH
11552: PPUSH
11553: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11554: LD_ADDR_VAR 0 2
11558: PUSH
11559: LD_INT 22
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: LD_INT 30
11584: PUSH
11585: LD_INT 0
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 30
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: PPUSH
11612: CALL_OW 69
11616: ST_TO_ADDR
// for i in tmp do
11617: LD_ADDR_VAR 0 1
11621: PUSH
11622: LD_VAR 0 2
11626: PUSH
11627: FOR_IN
11628: IFFALSE 11661
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11630: LD_ADDR_VAR 0 3
11634: PUSH
11635: LD_VAR 0 3
11639: PUSH
11640: LD_VAR 0 1
11644: PPUSH
11645: CALL_OW 274
11649: PPUSH
11650: LD_INT 3
11652: PPUSH
11653: CALL_OW 275
11657: PLUS
11658: ST_TO_ADDR
11659: GO 11627
11661: POP
11662: POP
// if yourSiberite < 79 then
11663: LD_VAR 0 3
11667: PUSH
11668: LD_INT 79
11670: LESS
11671: IFFALSE 11680
// YouLost ( siberite ) ;
11673: LD_STRING siberite
11675: PPUSH
11676: CALL_OW 104
// end ; end_of_file
11680: PPOPN 3
11682: END
// every 8 8$0 + 7 7$0 do
11683: GO 11685
11685: DISABLE
// begin enable ;
11686: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11687: LD_INT 8
11689: PPUSH
11690: LD_INT 2
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: LD_INT 3
11698: PPUSH
11699: CALL_OW 12
11703: PPUSH
11704: LD_INT 0
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: LD_INT 4
11718: PUSH
11719: LD_INT 5
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: LD_OWVAR 67
11732: ARRAY
11733: PPUSH
11734: LD_INT 0
11736: PPUSH
11737: LD_INT 10
11739: PPUSH
11740: LD_INT 8
11742: PUSH
11743: LD_INT 9
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 1
11752: PPUSH
11753: LD_INT 2
11755: PPUSH
11756: CALL_OW 12
11760: ARRAY
11761: PPUSH
11762: LD_INT 12
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL 7052 0 11
// end ;
11772: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11773: GO 11775
11775: DISABLE
11776: LD_INT 0
11778: PPUSH
11779: PPUSH
11780: PPUSH
// begin enable ;
11781: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11782: LD_ADDR_EXP 33
11786: PUSH
11787: LD_EXP 33
11791: PUSH
11792: LD_INT 1
11794: PLUS
11795: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11796: LD_INT 22
11798: PUSH
11799: LD_INT 8
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 3
11808: PUSH
11809: LD_INT 58
11811: PUSH
11812: EMPTY
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 34
11821: PUSH
11822: LD_INT 31
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 69
11838: PUSH
11839: LD_INT 2
11841: LESS
11842: IFFALSE 12086
// begin uc_side := 8 ;
11844: LD_ADDR_OWVAR 20
11848: PUSH
11849: LD_INT 8
11851: ST_TO_ADDR
// uc_nation := 2 ;
11852: LD_ADDR_OWVAR 21
11856: PUSH
11857: LD_INT 2
11859: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11860: LD_INT 14
11862: PPUSH
11863: LD_INT 3
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: LD_INT 31
11871: PPUSH
11872: LD_INT 100
11874: PPUSH
11875: CALL 36961 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: DOUBLE
11885: LD_INT 22
11887: PUSH
11888: LD_INT 8
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: LD_INT 3
11897: PUSH
11898: LD_INT 58
11900: PUSH
11901: EMPTY
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 34
11910: PUSH
11911: LD_INT 31
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: PUSH
11928: LD_INT 1
11930: PLUS
11931: DEC
11932: ST_TO_ADDR
11933: LD_INT 2
11935: PUSH
11936: FOR_TO
11937: IFFALSE 12084
// begin veh := CreateVehicle ;
11939: LD_ADDR_VAR 0 2
11943: PUSH
11944: CALL_OW 45
11948: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11949: LD_VAR 0 2
11953: PPUSH
11954: LD_INT 5
11956: PPUSH
11957: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: LD_INT 181
11968: PUSH
11969: LD_INT 105
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 137
11978: PUSH
11979: LD_INT 6
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_VAR 0 1
11994: PUSH
11995: LD_INT 2
11997: MOD
11998: PUSH
11999: LD_INT 1
12001: PLUS
12002: ARRAY
12003: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
12004: LD_VAR 0 2
12008: PPUSH
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 1
12016: ARRAY
12017: PPUSH
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 2
12025: ARRAY
12026: PPUSH
12027: LD_INT 12
12029: PPUSH
12030: LD_INT 0
12032: PPUSH
12033: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12037: LD_INT 0
12039: PPUSH
12040: LD_INT 7
12042: PUSH
12043: LD_INT 9
12045: PUSH
12046: LD_INT 10
12048: PUSH
12049: LD_INT 10
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: LD_OWVAR 67
12062: ARRAY
12063: PPUSH
12064: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12068: CALL_OW 44
12072: PPUSH
12073: LD_VAR 0 2
12077: PPUSH
12078: CALL_OW 52
// end ;
12082: GO 11936
12084: POP
12085: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) , 10 ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12086: LD_INT 8
12088: PUSH
12089: LD_INT 9
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 1
12098: PPUSH
12099: LD_INT 2
12101: PPUSH
12102: CALL_OW 12
12106: ARRAY
12107: PPUSH
12108: LD_INT 8
12110: PPUSH
12111: LD_INT 4
12113: PPUSH
12114: LD_INT 6
12116: PPUSH
12117: CALL_OW 12
12121: PUSH
12122: LD_INT 6
12124: PPUSH
12125: LD_INT 9
12127: PPUSH
12128: CALL_OW 12
12132: PUSH
12133: LD_INT 7
12135: PPUSH
12136: LD_INT 10
12138: PPUSH
12139: CALL_OW 12
12143: PUSH
12144: LD_INT 10
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_OWVAR 67
12157: ARRAY
12158: PPUSH
12159: LD_INT 10
12161: PPUSH
12162: LD_INT 2
12164: PPUSH
12165: LD_INT 3
12167: PPUSH
12168: LD_INT 5
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PPUSH
12178: EMPTY
12179: PPUSH
12180: LD_INT 25
12182: PUSH
12183: LD_INT 26
12185: PUSH
12186: LD_INT 27
12188: PUSH
12189: LD_INT 28
12191: PUSH
12192: LD_INT 29
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PPUSH
12202: EMPTY
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL 8120 0 11
// end ;
12211: PPOPN 3
12213: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12214: LD_EXP 33
12218: PUSH
12219: LD_INT 4
12221: GREATEREQUAL
12222: IFFALSE 12570
12224: GO 12226
12226: DISABLE
12227: LD_INT 0
12229: PPUSH
12230: PPUSH
// begin enable ;
12231: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12232: LD_ADDR_EXP 33
12236: PUSH
12237: LD_EXP 33
12241: PUSH
12242: LD_INT 1
12244: PLUS
12245: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12246: LD_INT 22
12248: PUSH
12249: LD_INT 8
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 58
12261: PUSH
12262: EMPTY
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 34
12271: PUSH
12272: LD_INT 31
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: PUSH
12289: LD_INT 2
12291: LESS
12292: IFFALSE 12481
// begin uc_side := 8 ;
12294: LD_ADDR_OWVAR 20
12298: PUSH
12299: LD_INT 8
12301: ST_TO_ADDR
// uc_nation := 2 ;
12302: LD_ADDR_OWVAR 21
12306: PUSH
12307: LD_INT 2
12309: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12310: LD_INT 14
12312: PPUSH
12313: LD_INT 3
12315: PPUSH
12316: LD_INT 1
12318: PPUSH
12319: LD_INT 31
12321: PPUSH
12322: LD_INT 100
12324: PPUSH
12325: CALL 36961 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: DOUBLE
12335: LD_INT 22
12337: PUSH
12338: LD_INT 8
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 3
12347: PUSH
12348: LD_INT 58
12350: PUSH
12351: EMPTY
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 34
12360: PUSH
12361: LD_INT 31
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: PPUSH
12373: CALL_OW 69
12377: PUSH
12378: LD_INT 1
12380: PLUS
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 2
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12479
// begin veh := CreateVehicle ;
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: CALL_OW 45
12398: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12399: LD_VAR 0 2
12403: PPUSH
12404: LD_INT 5
12406: PPUSH
12407: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12411: LD_VAR 0 2
12415: PPUSH
12416: LD_INT 181
12418: PPUSH
12419: LD_INT 105
12421: PPUSH
12422: LD_INT 12
12424: PPUSH
12425: LD_INT 0
12427: PPUSH
12428: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12432: LD_INT 0
12434: PPUSH
12435: LD_INT 8
12437: PUSH
12438: LD_INT 9
12440: PUSH
12441: LD_INT 10
12443: PUSH
12444: LD_INT 10
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_OWVAR 67
12457: ARRAY
12458: PPUSH
12459: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12463: CALL_OW 44
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: CALL_OW 52
// end ;
12477: GO 12386
12479: POP
12480: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12481: LD_INT 8
12483: PUSH
12484: LD_INT 9
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 1
12493: PPUSH
12494: LD_INT 2
12496: PPUSH
12497: CALL_OW 12
12501: ARRAY
12502: PPUSH
12503: LD_INT 8
12505: PPUSH
12506: LD_INT 1
12508: PUSH
12509: LD_INT 2
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: LD_INT 4
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: PUSH
12524: LD_OWVAR 67
12528: ARRAY
12529: PPUSH
12530: LD_INT 10
12532: PPUSH
12533: LD_INT 3
12535: PPUSH
12536: LD_INT 3
12538: PPUSH
12539: LD_INT 1
12541: PUSH
12542: LD_INT 1
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: LD_INT 47
12551: PUSH
12552: LD_INT 47
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: EMPTY
12560: PPUSH
12561: EMPTY
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL 8120 0 11
// end ;
12570: PPOPN 2
12572: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12573: LD_EXP 36
12577: PUSH
12578: LD_INT 1
12580: EQUAL
12581: IFFALSE 12926
12583: GO 12585
12585: DISABLE
12586: LD_INT 0
12588: PPUSH
12589: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12590: LD_INT 22
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 3
12602: PUSH
12603: LD_INT 58
12605: PUSH
12606: EMPTY
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 34
12615: PUSH
12616: LD_INT 31
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 69
12632: PUSH
12633: LD_INT 2
12635: LESS
12636: IFFALSE 12825
// begin uc_side := 8 ;
12638: LD_ADDR_OWVAR 20
12642: PUSH
12643: LD_INT 8
12645: ST_TO_ADDR
// uc_nation := 2 ;
12646: LD_ADDR_OWVAR 21
12650: PUSH
12651: LD_INT 2
12653: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12654: LD_INT 14
12656: PPUSH
12657: LD_INT 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 31
12665: PPUSH
12666: LD_INT 100
12668: PPUSH
12669: CALL 36961 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12673: LD_ADDR_VAR 0 1
12677: PUSH
12678: DOUBLE
12679: LD_INT 22
12681: PUSH
12682: LD_INT 8
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 3
12691: PUSH
12692: LD_INT 58
12694: PUSH
12695: EMPTY
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 34
12704: PUSH
12705: LD_INT 31
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PUSH
12722: LD_INT 1
12724: PLUS
12725: DEC
12726: ST_TO_ADDR
12727: LD_INT 2
12729: PUSH
12730: FOR_TO
12731: IFFALSE 12823
// begin veh := CreateVehicle ;
12733: LD_ADDR_VAR 0 2
12737: PUSH
12738: CALL_OW 45
12742: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12743: LD_VAR 0 2
12747: PPUSH
12748: LD_INT 5
12750: PPUSH
12751: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12755: LD_VAR 0 2
12759: PPUSH
12760: LD_INT 181
12762: PPUSH
12763: LD_INT 105
12765: PPUSH
12766: LD_INT 12
12768: PPUSH
12769: LD_INT 0
12771: PPUSH
12772: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12776: LD_INT 0
12778: PPUSH
12779: LD_INT 8
12781: PUSH
12782: LD_INT 9
12784: PUSH
12785: LD_INT 10
12787: PUSH
12788: LD_INT 10
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: LD_OWVAR 67
12801: ARRAY
12802: PPUSH
12803: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12807: CALL_OW 44
12811: PPUSH
12812: LD_VAR 0 2
12816: PPUSH
12817: CALL_OW 52
// end ;
12821: GO 12730
12823: POP
12824: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 , 9 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12825: LD_INT 8
12827: PUSH
12828: LD_INT 9
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 1
12837: PPUSH
12838: LD_INT 2
12840: PPUSH
12841: CALL_OW 12
12845: ARRAY
12846: PPUSH
12847: LD_INT 3
12849: PPUSH
12850: LD_INT 5
12852: PUSH
12853: LD_INT 7
12855: PUSH
12856: LD_INT 8
12858: PUSH
12859: LD_INT 9
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: PUSH
12868: LD_OWVAR 67
12872: ARRAY
12873: PPUSH
12874: LD_INT 10
12876: PPUSH
12877: LD_INT 3
12879: PPUSH
12880: LD_INT 3
12882: PPUSH
12883: LD_INT 3
12885: PUSH
12886: LD_INT 3
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: LD_INT 46
12895: PUSH
12896: LD_INT 44
12898: PUSH
12899: LD_INT 45
12901: PUSH
12902: LD_INT 47
12904: PUSH
12905: LD_INT 49
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PPUSH
12915: EMPTY
12916: PPUSH
12917: EMPTY
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL 8120 0 11
// end ; end_of_file
12926: PPOPN 2
12928: END
// every 1 1$0 do
12929: GO 12931
12931: DISABLE
// begin enable ;
12932: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12933: LD_INT 3
12935: PPUSH
12936: LD_INT 5
12938: PPUSH
12939: CALL_OW 12
12943: PPUSH
12944: LD_INT 13
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: CALL_OW 55
// end ; end_of_file
12954: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12955: LD_INT 0
12957: PPUSH
// ar_miner := 81 ;
12958: LD_ADDR_EXP 50
12962: PUSH
12963: LD_INT 81
12965: ST_TO_ADDR
// ar_crane := 88 ;
12966: LD_ADDR_EXP 49
12970: PUSH
12971: LD_INT 88
12973: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12974: LD_ADDR_EXP 44
12978: PUSH
12979: LD_INT 89
12981: ST_TO_ADDR
// us_hack := 99 ;
12982: LD_ADDR_EXP 45
12986: PUSH
12987: LD_INT 99
12989: ST_TO_ADDR
// us_artillery := 97 ;
12990: LD_ADDR_EXP 46
12994: PUSH
12995: LD_INT 97
12997: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12998: LD_ADDR_EXP 47
13002: PUSH
13003: LD_INT 91
13005: ST_TO_ADDR
// ar_mortar := 92 ;
13006: LD_ADDR_EXP 48
13010: PUSH
13011: LD_INT 92
13013: ST_TO_ADDR
// ru_radar := 98 ;
13014: LD_ADDR_EXP 43
13018: PUSH
13019: LD_INT 98
13021: ST_TO_ADDR
// tech_Artillery := 80 ;
13022: LD_ADDR_EXP 51
13026: PUSH
13027: LD_INT 80
13029: ST_TO_ADDR
// tech_RadMat := 81 ;
13030: LD_ADDR_EXP 52
13034: PUSH
13035: LD_INT 81
13037: ST_TO_ADDR
// tech_BasicTools := 82 ;
13038: LD_ADDR_EXP 53
13042: PUSH
13043: LD_INT 82
13045: ST_TO_ADDR
// tech_Cargo := 83 ;
13046: LD_ADDR_EXP 54
13050: PUSH
13051: LD_INT 83
13053: ST_TO_ADDR
// tech_Track := 84 ;
13054: LD_ADDR_EXP 55
13058: PUSH
13059: LD_INT 84
13061: ST_TO_ADDR
// tech_Crane := 85 ;
13062: LD_ADDR_EXP 56
13066: PUSH
13067: LD_INT 85
13069: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13070: LD_ADDR_EXP 57
13074: PUSH
13075: LD_INT 86
13077: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13078: LD_ADDR_EXP 58
13082: PUSH
13083: LD_INT 87
13085: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13086: LD_ADDR_EXP 59
13090: PUSH
13091: LD_INT 88
13093: ST_TO_ADDR
// class_mastodont := 31 ;
13094: LD_ADDR_EXP 60
13098: PUSH
13099: LD_INT 31
13101: ST_TO_ADDR
// class_horse := 21 ;
13102: LD_ADDR_EXP 61
13106: PUSH
13107: LD_INT 21
13109: ST_TO_ADDR
// end ;
13110: LD_VAR 0 1
13114: RET
// every 1 do
13115: GO 13117
13117: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13118: CALL 12955 0 0
13122: END
// every 0 0$1 do
13123: GO 13125
13125: DISABLE
// begin enable ;
13126: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13127: LD_STRING updateTimer(
13129: PUSH
13130: LD_OWVAR 1
13134: STR
13135: PUSH
13136: LD_STRING );
13138: STR
13139: PPUSH
13140: CALL_OW 559
// end ;
13144: END
// export function SOS_MapStart ( ) ; begin
13145: LD_INT 0
13147: PPUSH
// if streamModeActive then
13148: LD_EXP 62
13152: IFFALSE 13161
// DefineStreamItems ( true ) ;
13154: LD_INT 1
13156: PPUSH
13157: CALL 14811 0 1
// UpdateFactoryWaypoints ( ) ;
13161: CALL 28395 0 0
// end ;
13165: LD_VAR 0 1
13169: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13170: LD_INT 0
13172: PPUSH
// if p2 = 100 then
13173: LD_VAR 0 2
13177: PUSH
13178: LD_INT 100
13180: EQUAL
13181: IFFALSE 14184
// begin if not StreamModeActive then
13183: LD_EXP 62
13187: NOT
13188: IFFALSE 13198
// StreamModeActive := true ;
13190: LD_ADDR_EXP 62
13194: PUSH
13195: LD_INT 1
13197: ST_TO_ADDR
// if p3 = 0 then
13198: LD_VAR 0 3
13202: PUSH
13203: LD_INT 0
13205: EQUAL
13206: IFFALSE 13212
// InitStreamMode ;
13208: CALL 14347 0 0
// if p3 = 1 then
13212: LD_VAR 0 3
13216: PUSH
13217: LD_INT 1
13219: EQUAL
13220: IFFALSE 13230
// sRocket := true ;
13222: LD_ADDR_EXP 67
13226: PUSH
13227: LD_INT 1
13229: ST_TO_ADDR
// if p3 = 2 then
13230: LD_VAR 0 3
13234: PUSH
13235: LD_INT 2
13237: EQUAL
13238: IFFALSE 13248
// sSpeed := true ;
13240: LD_ADDR_EXP 66
13244: PUSH
13245: LD_INT 1
13247: ST_TO_ADDR
// if p3 = 3 then
13248: LD_VAR 0 3
13252: PUSH
13253: LD_INT 3
13255: EQUAL
13256: IFFALSE 13266
// sEngine := true ;
13258: LD_ADDR_EXP 68
13262: PUSH
13263: LD_INT 1
13265: ST_TO_ADDR
// if p3 = 4 then
13266: LD_VAR 0 3
13270: PUSH
13271: LD_INT 4
13273: EQUAL
13274: IFFALSE 13284
// sSpec := true ;
13276: LD_ADDR_EXP 65
13280: PUSH
13281: LD_INT 1
13283: ST_TO_ADDR
// if p3 = 5 then
13284: LD_VAR 0 3
13288: PUSH
13289: LD_INT 5
13291: EQUAL
13292: IFFALSE 13302
// sLevel := true ;
13294: LD_ADDR_EXP 69
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// if p3 = 6 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_INT 6
13309: EQUAL
13310: IFFALSE 13320
// sArmoury := true ;
13312: LD_ADDR_EXP 70
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// if p3 = 7 then
13320: LD_VAR 0 3
13324: PUSH
13325: LD_INT 7
13327: EQUAL
13328: IFFALSE 13338
// sRadar := true ;
13330: LD_ADDR_EXP 71
13334: PUSH
13335: LD_INT 1
13337: ST_TO_ADDR
// if p3 = 8 then
13338: LD_VAR 0 3
13342: PUSH
13343: LD_INT 8
13345: EQUAL
13346: IFFALSE 13356
// sBunker := true ;
13348: LD_ADDR_EXP 72
13352: PUSH
13353: LD_INT 1
13355: ST_TO_ADDR
// if p3 = 9 then
13356: LD_VAR 0 3
13360: PUSH
13361: LD_INT 9
13363: EQUAL
13364: IFFALSE 13374
// sHack := true ;
13366: LD_ADDR_EXP 73
13370: PUSH
13371: LD_INT 1
13373: ST_TO_ADDR
// if p3 = 10 then
13374: LD_VAR 0 3
13378: PUSH
13379: LD_INT 10
13381: EQUAL
13382: IFFALSE 13392
// sFire := true ;
13384: LD_ADDR_EXP 74
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// if p3 = 11 then
13392: LD_VAR 0 3
13396: PUSH
13397: LD_INT 11
13399: EQUAL
13400: IFFALSE 13410
// sRefresh := true ;
13402: LD_ADDR_EXP 75
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// if p3 = 12 then
13410: LD_VAR 0 3
13414: PUSH
13415: LD_INT 12
13417: EQUAL
13418: IFFALSE 13428
// sExp := true ;
13420: LD_ADDR_EXP 76
13424: PUSH
13425: LD_INT 1
13427: ST_TO_ADDR
// if p3 = 13 then
13428: LD_VAR 0 3
13432: PUSH
13433: LD_INT 13
13435: EQUAL
13436: IFFALSE 13446
// sDepot := true ;
13438: LD_ADDR_EXP 77
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// if p3 = 14 then
13446: LD_VAR 0 3
13450: PUSH
13451: LD_INT 14
13453: EQUAL
13454: IFFALSE 13464
// sFlag := true ;
13456: LD_ADDR_EXP 78
13460: PUSH
13461: LD_INT 1
13463: ST_TO_ADDR
// if p3 = 15 then
13464: LD_VAR 0 3
13468: PUSH
13469: LD_INT 15
13471: EQUAL
13472: IFFALSE 13482
// sKamikadze := true ;
13474: LD_ADDR_EXP 86
13478: PUSH
13479: LD_INT 1
13481: ST_TO_ADDR
// if p3 = 16 then
13482: LD_VAR 0 3
13486: PUSH
13487: LD_INT 16
13489: EQUAL
13490: IFFALSE 13500
// sTroll := true ;
13492: LD_ADDR_EXP 87
13496: PUSH
13497: LD_INT 1
13499: ST_TO_ADDR
// if p3 = 17 then
13500: LD_VAR 0 3
13504: PUSH
13505: LD_INT 17
13507: EQUAL
13508: IFFALSE 13518
// sSlow := true ;
13510: LD_ADDR_EXP 88
13514: PUSH
13515: LD_INT 1
13517: ST_TO_ADDR
// if p3 = 18 then
13518: LD_VAR 0 3
13522: PUSH
13523: LD_INT 18
13525: EQUAL
13526: IFFALSE 13536
// sLack := true ;
13528: LD_ADDR_EXP 89
13532: PUSH
13533: LD_INT 1
13535: ST_TO_ADDR
// if p3 = 19 then
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 19
13543: EQUAL
13544: IFFALSE 13554
// sTank := true ;
13546: LD_ADDR_EXP 91
13550: PUSH
13551: LD_INT 1
13553: ST_TO_ADDR
// if p3 = 20 then
13554: LD_VAR 0 3
13558: PUSH
13559: LD_INT 20
13561: EQUAL
13562: IFFALSE 13572
// sRemote := true ;
13564: LD_ADDR_EXP 92
13568: PUSH
13569: LD_INT 1
13571: ST_TO_ADDR
// if p3 = 21 then
13572: LD_VAR 0 3
13576: PUSH
13577: LD_INT 21
13579: EQUAL
13580: IFFALSE 13590
// sPowell := true ;
13582: LD_ADDR_EXP 93
13586: PUSH
13587: LD_INT 1
13589: ST_TO_ADDR
// if p3 = 22 then
13590: LD_VAR 0 3
13594: PUSH
13595: LD_INT 22
13597: EQUAL
13598: IFFALSE 13608
// sTeleport := true ;
13600: LD_ADDR_EXP 96
13604: PUSH
13605: LD_INT 1
13607: ST_TO_ADDR
// if p3 = 23 then
13608: LD_VAR 0 3
13612: PUSH
13613: LD_INT 23
13615: EQUAL
13616: IFFALSE 13626
// sOilTower := true ;
13618: LD_ADDR_EXP 98
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// if p3 = 24 then
13626: LD_VAR 0 3
13630: PUSH
13631: LD_INT 24
13633: EQUAL
13634: IFFALSE 13644
// sShovel := true ;
13636: LD_ADDR_EXP 99
13640: PUSH
13641: LD_INT 1
13643: ST_TO_ADDR
// if p3 = 25 then
13644: LD_VAR 0 3
13648: PUSH
13649: LD_INT 25
13651: EQUAL
13652: IFFALSE 13662
// sSheik := true ;
13654: LD_ADDR_EXP 100
13658: PUSH
13659: LD_INT 1
13661: ST_TO_ADDR
// if p3 = 26 then
13662: LD_VAR 0 3
13666: PUSH
13667: LD_INT 26
13669: EQUAL
13670: IFFALSE 13680
// sEarthquake := true ;
13672: LD_ADDR_EXP 102
13676: PUSH
13677: LD_INT 1
13679: ST_TO_ADDR
// if p3 = 27 then
13680: LD_VAR 0 3
13684: PUSH
13685: LD_INT 27
13687: EQUAL
13688: IFFALSE 13698
// sAI := true ;
13690: LD_ADDR_EXP 103
13694: PUSH
13695: LD_INT 1
13697: ST_TO_ADDR
// if p3 = 28 then
13698: LD_VAR 0 3
13702: PUSH
13703: LD_INT 28
13705: EQUAL
13706: IFFALSE 13716
// sCargo := true ;
13708: LD_ADDR_EXP 106
13712: PUSH
13713: LD_INT 1
13715: ST_TO_ADDR
// if p3 = 29 then
13716: LD_VAR 0 3
13720: PUSH
13721: LD_INT 29
13723: EQUAL
13724: IFFALSE 13734
// sDLaser := true ;
13726: LD_ADDR_EXP 107
13730: PUSH
13731: LD_INT 1
13733: ST_TO_ADDR
// if p3 = 30 then
13734: LD_VAR 0 3
13738: PUSH
13739: LD_INT 30
13741: EQUAL
13742: IFFALSE 13752
// sExchange := true ;
13744: LD_ADDR_EXP 108
13748: PUSH
13749: LD_INT 1
13751: ST_TO_ADDR
// if p3 = 31 then
13752: LD_VAR 0 3
13756: PUSH
13757: LD_INT 31
13759: EQUAL
13760: IFFALSE 13770
// sFac := true ;
13762: LD_ADDR_EXP 109
13766: PUSH
13767: LD_INT 1
13769: ST_TO_ADDR
// if p3 = 32 then
13770: LD_VAR 0 3
13774: PUSH
13775: LD_INT 32
13777: EQUAL
13778: IFFALSE 13788
// sPower := true ;
13780: LD_ADDR_EXP 110
13784: PUSH
13785: LD_INT 1
13787: ST_TO_ADDR
// if p3 = 33 then
13788: LD_VAR 0 3
13792: PUSH
13793: LD_INT 33
13795: EQUAL
13796: IFFALSE 13806
// sRandom := true ;
13798: LD_ADDR_EXP 111
13802: PUSH
13803: LD_INT 1
13805: ST_TO_ADDR
// if p3 = 34 then
13806: LD_VAR 0 3
13810: PUSH
13811: LD_INT 34
13813: EQUAL
13814: IFFALSE 13824
// sShield := true ;
13816: LD_ADDR_EXP 112
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// if p3 = 35 then
13824: LD_VAR 0 3
13828: PUSH
13829: LD_INT 35
13831: EQUAL
13832: IFFALSE 13842
// sTime := true ;
13834: LD_ADDR_EXP 113
13838: PUSH
13839: LD_INT 1
13841: ST_TO_ADDR
// if p3 = 36 then
13842: LD_VAR 0 3
13846: PUSH
13847: LD_INT 36
13849: EQUAL
13850: IFFALSE 13860
// sTools := true ;
13852: LD_ADDR_EXP 114
13856: PUSH
13857: LD_INT 1
13859: ST_TO_ADDR
// if p3 = 101 then
13860: LD_VAR 0 3
13864: PUSH
13865: LD_INT 101
13867: EQUAL
13868: IFFALSE 13878
// sSold := true ;
13870: LD_ADDR_EXP 79
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
// if p3 = 102 then
13878: LD_VAR 0 3
13882: PUSH
13883: LD_INT 102
13885: EQUAL
13886: IFFALSE 13896
// sDiff := true ;
13888: LD_ADDR_EXP 80
13892: PUSH
13893: LD_INT 1
13895: ST_TO_ADDR
// if p3 = 103 then
13896: LD_VAR 0 3
13900: PUSH
13901: LD_INT 103
13903: EQUAL
13904: IFFALSE 13914
// sFog := true ;
13906: LD_ADDR_EXP 83
13910: PUSH
13911: LD_INT 1
13913: ST_TO_ADDR
// if p3 = 104 then
13914: LD_VAR 0 3
13918: PUSH
13919: LD_INT 104
13921: EQUAL
13922: IFFALSE 13932
// sReset := true ;
13924: LD_ADDR_EXP 84
13928: PUSH
13929: LD_INT 1
13931: ST_TO_ADDR
// if p3 = 105 then
13932: LD_VAR 0 3
13936: PUSH
13937: LD_INT 105
13939: EQUAL
13940: IFFALSE 13950
// sSun := true ;
13942: LD_ADDR_EXP 85
13946: PUSH
13947: LD_INT 1
13949: ST_TO_ADDR
// if p3 = 106 then
13950: LD_VAR 0 3
13954: PUSH
13955: LD_INT 106
13957: EQUAL
13958: IFFALSE 13968
// sTiger := true ;
13960: LD_ADDR_EXP 81
13964: PUSH
13965: LD_INT 1
13967: ST_TO_ADDR
// if p3 = 107 then
13968: LD_VAR 0 3
13972: PUSH
13973: LD_INT 107
13975: EQUAL
13976: IFFALSE 13986
// sBomb := true ;
13978: LD_ADDR_EXP 82
13982: PUSH
13983: LD_INT 1
13985: ST_TO_ADDR
// if p3 = 108 then
13986: LD_VAR 0 3
13990: PUSH
13991: LD_INT 108
13993: EQUAL
13994: IFFALSE 14004
// sWound := true ;
13996: LD_ADDR_EXP 90
14000: PUSH
14001: LD_INT 1
14003: ST_TO_ADDR
// if p3 = 109 then
14004: LD_VAR 0 3
14008: PUSH
14009: LD_INT 109
14011: EQUAL
14012: IFFALSE 14022
// sBetray := true ;
14014: LD_ADDR_EXP 94
14018: PUSH
14019: LD_INT 1
14021: ST_TO_ADDR
// if p3 = 110 then
14022: LD_VAR 0 3
14026: PUSH
14027: LD_INT 110
14029: EQUAL
14030: IFFALSE 14040
// sContamin := true ;
14032: LD_ADDR_EXP 95
14036: PUSH
14037: LD_INT 1
14039: ST_TO_ADDR
// if p3 = 111 then
14040: LD_VAR 0 3
14044: PUSH
14045: LD_INT 111
14047: EQUAL
14048: IFFALSE 14058
// sOil := true ;
14050: LD_ADDR_EXP 97
14054: PUSH
14055: LD_INT 1
14057: ST_TO_ADDR
// if p3 = 112 then
14058: LD_VAR 0 3
14062: PUSH
14063: LD_INT 112
14065: EQUAL
14066: IFFALSE 14076
// sStu := true ;
14068: LD_ADDR_EXP 101
14072: PUSH
14073: LD_INT 1
14075: ST_TO_ADDR
// if p3 = 113 then
14076: LD_VAR 0 3
14080: PUSH
14081: LD_INT 113
14083: EQUAL
14084: IFFALSE 14094
// sBazooka := true ;
14086: LD_ADDR_EXP 104
14090: PUSH
14091: LD_INT 1
14093: ST_TO_ADDR
// if p3 = 114 then
14094: LD_VAR 0 3
14098: PUSH
14099: LD_INT 114
14101: EQUAL
14102: IFFALSE 14112
// sMortar := true ;
14104: LD_ADDR_EXP 105
14108: PUSH
14109: LD_INT 1
14111: ST_TO_ADDR
// if p3 = 115 then
14112: LD_VAR 0 3
14116: PUSH
14117: LD_INT 115
14119: EQUAL
14120: IFFALSE 14130
// sRanger := true ;
14122: LD_ADDR_EXP 115
14126: PUSH
14127: LD_INT 1
14129: ST_TO_ADDR
// if p3 = 116 then
14130: LD_VAR 0 3
14134: PUSH
14135: LD_INT 116
14137: EQUAL
14138: IFFALSE 14148
// sComputer := true ;
14140: LD_ADDR_EXP 116
14144: PUSH
14145: LD_INT 1
14147: ST_TO_ADDR
// if p3 = 117 then
14148: LD_VAR 0 3
14152: PUSH
14153: LD_INT 117
14155: EQUAL
14156: IFFALSE 14166
// s30 := true ;
14158: LD_ADDR_EXP 117
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
// if p3 = 118 then
14166: LD_VAR 0 3
14170: PUSH
14171: LD_INT 118
14173: EQUAL
14174: IFFALSE 14184
// s60 := true ;
14176: LD_ADDR_EXP 118
14180: PUSH
14181: LD_INT 1
14183: ST_TO_ADDR
// end ; if p2 = 101 then
14184: LD_VAR 0 2
14188: PUSH
14189: LD_INT 101
14191: EQUAL
14192: IFFALSE 14320
// begin case p3 of 1 :
14194: LD_VAR 0 3
14198: PUSH
14199: LD_INT 1
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14214
14207: POP
// hHackUnlimitedResources ; 2 :
14208: CALL 26418 0 0
14212: GO 14320
14214: LD_INT 2
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14229
14222: POP
// hHackSetLevel10 ; 3 :
14223: CALL 26551 0 0
14227: GO 14320
14229: LD_INT 3
14231: DOUBLE
14232: EQUAL
14233: IFTRUE 14237
14235: GO 14244
14237: POP
// hHackSetLevel10YourUnits ; 4 :
14238: CALL 26636 0 0
14242: GO 14320
14244: LD_INT 4
14246: DOUBLE
14247: EQUAL
14248: IFTRUE 14252
14250: GO 14259
14252: POP
// hHackInvincible ; 5 :
14253: CALL 27084 0 0
14257: GO 14320
14259: LD_INT 5
14261: DOUBLE
14262: EQUAL
14263: IFTRUE 14267
14265: GO 14274
14267: POP
// hHackInvisible ; 6 :
14268: CALL 27195 0 0
14272: GO 14320
14274: LD_INT 6
14276: DOUBLE
14277: EQUAL
14278: IFTRUE 14282
14280: GO 14289
14282: POP
// hHackChangeYourSide ; 7 :
14283: CALL 27252 0 0
14287: GO 14320
14289: LD_INT 7
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14304
14297: POP
// hHackChangeUnitSide ; 8 :
14298: CALL 27294 0 0
14302: GO 14320
14304: LD_INT 8
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14319
14312: POP
// hHackFog ; end ;
14313: CALL 27395 0 0
14317: GO 14320
14319: POP
// end ; end ;
14320: LD_VAR 0 7
14324: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14325: GO 14327
14327: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14328: LD_STRING initStreamRollete();
14330: PPUSH
14331: CALL_OW 559
// InitStreamMode ;
14335: CALL 14347 0 0
// DefineStreamItems ( false ) ;
14339: LD_INT 0
14341: PPUSH
14342: CALL 14811 0 1
// end ;
14346: END
// function InitStreamMode ; begin
14347: LD_INT 0
14349: PPUSH
// streamModeActive := false ;
14350: LD_ADDR_EXP 62
14354: PUSH
14355: LD_INT 0
14357: ST_TO_ADDR
// normalCounter := 36 ;
14358: LD_ADDR_EXP 63
14362: PUSH
14363: LD_INT 36
14365: ST_TO_ADDR
// hardcoreCounter := 18 ;
14366: LD_ADDR_EXP 64
14370: PUSH
14371: LD_INT 18
14373: ST_TO_ADDR
// sRocket := false ;
14374: LD_ADDR_EXP 67
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// sSpeed := false ;
14382: LD_ADDR_EXP 66
14386: PUSH
14387: LD_INT 0
14389: ST_TO_ADDR
// sEngine := false ;
14390: LD_ADDR_EXP 68
14394: PUSH
14395: LD_INT 0
14397: ST_TO_ADDR
// sSpec := false ;
14398: LD_ADDR_EXP 65
14402: PUSH
14403: LD_INT 0
14405: ST_TO_ADDR
// sLevel := false ;
14406: LD_ADDR_EXP 69
14410: PUSH
14411: LD_INT 0
14413: ST_TO_ADDR
// sArmoury := false ;
14414: LD_ADDR_EXP 70
14418: PUSH
14419: LD_INT 0
14421: ST_TO_ADDR
// sRadar := false ;
14422: LD_ADDR_EXP 71
14426: PUSH
14427: LD_INT 0
14429: ST_TO_ADDR
// sBunker := false ;
14430: LD_ADDR_EXP 72
14434: PUSH
14435: LD_INT 0
14437: ST_TO_ADDR
// sHack := false ;
14438: LD_ADDR_EXP 73
14442: PUSH
14443: LD_INT 0
14445: ST_TO_ADDR
// sFire := false ;
14446: LD_ADDR_EXP 74
14450: PUSH
14451: LD_INT 0
14453: ST_TO_ADDR
// sRefresh := false ;
14454: LD_ADDR_EXP 75
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
// sExp := false ;
14462: LD_ADDR_EXP 76
14466: PUSH
14467: LD_INT 0
14469: ST_TO_ADDR
// sDepot := false ;
14470: LD_ADDR_EXP 77
14474: PUSH
14475: LD_INT 0
14477: ST_TO_ADDR
// sFlag := false ;
14478: LD_ADDR_EXP 78
14482: PUSH
14483: LD_INT 0
14485: ST_TO_ADDR
// sKamikadze := false ;
14486: LD_ADDR_EXP 86
14490: PUSH
14491: LD_INT 0
14493: ST_TO_ADDR
// sTroll := false ;
14494: LD_ADDR_EXP 87
14498: PUSH
14499: LD_INT 0
14501: ST_TO_ADDR
// sSlow := false ;
14502: LD_ADDR_EXP 88
14506: PUSH
14507: LD_INT 0
14509: ST_TO_ADDR
// sLack := false ;
14510: LD_ADDR_EXP 89
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
// sTank := false ;
14518: LD_ADDR_EXP 91
14522: PUSH
14523: LD_INT 0
14525: ST_TO_ADDR
// sRemote := false ;
14526: LD_ADDR_EXP 92
14530: PUSH
14531: LD_INT 0
14533: ST_TO_ADDR
// sPowell := false ;
14534: LD_ADDR_EXP 93
14538: PUSH
14539: LD_INT 0
14541: ST_TO_ADDR
// sTeleport := false ;
14542: LD_ADDR_EXP 96
14546: PUSH
14547: LD_INT 0
14549: ST_TO_ADDR
// sOilTower := false ;
14550: LD_ADDR_EXP 98
14554: PUSH
14555: LD_INT 0
14557: ST_TO_ADDR
// sShovel := false ;
14558: LD_ADDR_EXP 99
14562: PUSH
14563: LD_INT 0
14565: ST_TO_ADDR
// sSheik := false ;
14566: LD_ADDR_EXP 100
14570: PUSH
14571: LD_INT 0
14573: ST_TO_ADDR
// sEarthquake := false ;
14574: LD_ADDR_EXP 102
14578: PUSH
14579: LD_INT 0
14581: ST_TO_ADDR
// sAI := false ;
14582: LD_ADDR_EXP 103
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// sCargo := false ;
14590: LD_ADDR_EXP 106
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// sDLaser := false ;
14598: LD_ADDR_EXP 107
14602: PUSH
14603: LD_INT 0
14605: ST_TO_ADDR
// sExchange := false ;
14606: LD_ADDR_EXP 108
14610: PUSH
14611: LD_INT 0
14613: ST_TO_ADDR
// sFac := false ;
14614: LD_ADDR_EXP 109
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// sPower := false ;
14622: LD_ADDR_EXP 110
14626: PUSH
14627: LD_INT 0
14629: ST_TO_ADDR
// sRandom := false ;
14630: LD_ADDR_EXP 111
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// sShield := false ;
14638: LD_ADDR_EXP 112
14642: PUSH
14643: LD_INT 0
14645: ST_TO_ADDR
// sTime := false ;
14646: LD_ADDR_EXP 113
14650: PUSH
14651: LD_INT 0
14653: ST_TO_ADDR
// sTools := false ;
14654: LD_ADDR_EXP 114
14658: PUSH
14659: LD_INT 0
14661: ST_TO_ADDR
// sSold := false ;
14662: LD_ADDR_EXP 79
14666: PUSH
14667: LD_INT 0
14669: ST_TO_ADDR
// sDiff := false ;
14670: LD_ADDR_EXP 80
14674: PUSH
14675: LD_INT 0
14677: ST_TO_ADDR
// sFog := false ;
14678: LD_ADDR_EXP 83
14682: PUSH
14683: LD_INT 0
14685: ST_TO_ADDR
// sReset := false ;
14686: LD_ADDR_EXP 84
14690: PUSH
14691: LD_INT 0
14693: ST_TO_ADDR
// sSun := false ;
14694: LD_ADDR_EXP 85
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// sTiger := false ;
14702: LD_ADDR_EXP 81
14706: PUSH
14707: LD_INT 0
14709: ST_TO_ADDR
// sBomb := false ;
14710: LD_ADDR_EXP 82
14714: PUSH
14715: LD_INT 0
14717: ST_TO_ADDR
// sWound := false ;
14718: LD_ADDR_EXP 90
14722: PUSH
14723: LD_INT 0
14725: ST_TO_ADDR
// sBetray := false ;
14726: LD_ADDR_EXP 94
14730: PUSH
14731: LD_INT 0
14733: ST_TO_ADDR
// sContamin := false ;
14734: LD_ADDR_EXP 95
14738: PUSH
14739: LD_INT 0
14741: ST_TO_ADDR
// sOil := false ;
14742: LD_ADDR_EXP 97
14746: PUSH
14747: LD_INT 0
14749: ST_TO_ADDR
// sStu := false ;
14750: LD_ADDR_EXP 101
14754: PUSH
14755: LD_INT 0
14757: ST_TO_ADDR
// sBazooka := false ;
14758: LD_ADDR_EXP 104
14762: PUSH
14763: LD_INT 0
14765: ST_TO_ADDR
// sMortar := false ;
14766: LD_ADDR_EXP 105
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// sRanger := false ;
14774: LD_ADDR_EXP 115
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// sComputer := false ;
14782: LD_ADDR_EXP 116
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// s30 := false ;
14790: LD_ADDR_EXP 117
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// s60 := false ;
14798: LD_ADDR_EXP 118
14802: PUSH
14803: LD_INT 0
14805: ST_TO_ADDR
// end ;
14806: LD_VAR 0 1
14810: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14811: LD_INT 0
14813: PPUSH
14814: PPUSH
14815: PPUSH
14816: PPUSH
14817: PPUSH
14818: PPUSH
14819: PPUSH
// result := [ ] ;
14820: LD_ADDR_VAR 0 2
14824: PUSH
14825: EMPTY
14826: ST_TO_ADDR
// if campaign_id = 1 then
14827: LD_OWVAR 69
14831: PUSH
14832: LD_INT 1
14834: EQUAL
14835: IFFALSE 18001
// begin case mission_number of 1 :
14837: LD_OWVAR 70
14841: PUSH
14842: LD_INT 1
14844: DOUBLE
14845: EQUAL
14846: IFTRUE 14850
14848: GO 14926
14850: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: LD_INT 4
14861: PUSH
14862: LD_INT 11
14864: PUSH
14865: LD_INT 12
14867: PUSH
14868: LD_INT 15
14870: PUSH
14871: LD_INT 16
14873: PUSH
14874: LD_INT 22
14876: PUSH
14877: LD_INT 23
14879: PUSH
14880: LD_INT 26
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 101
14896: PUSH
14897: LD_INT 102
14899: PUSH
14900: LD_INT 106
14902: PUSH
14903: LD_INT 116
14905: PUSH
14906: LD_INT 117
14908: PUSH
14909: LD_INT 118
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: ST_TO_ADDR
14924: GO 17999
14926: LD_INT 2
14928: DOUBLE
14929: EQUAL
14930: IFTRUE 14934
14932: GO 15018
14934: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14935: LD_ADDR_VAR 0 2
14939: PUSH
14940: LD_INT 2
14942: PUSH
14943: LD_INT 4
14945: PUSH
14946: LD_INT 11
14948: PUSH
14949: LD_INT 12
14951: PUSH
14952: LD_INT 15
14954: PUSH
14955: LD_INT 16
14957: PUSH
14958: LD_INT 22
14960: PUSH
14961: LD_INT 23
14963: PUSH
14964: LD_INT 26
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 101
14980: PUSH
14981: LD_INT 102
14983: PUSH
14984: LD_INT 105
14986: PUSH
14987: LD_INT 106
14989: PUSH
14990: LD_INT 108
14992: PUSH
14993: LD_INT 116
14995: PUSH
14996: LD_INT 117
14998: PUSH
14999: LD_INT 118
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 17999
15018: LD_INT 3
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15114
15026: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 4
15037: PUSH
15038: LD_INT 5
15040: PUSH
15041: LD_INT 11
15043: PUSH
15044: LD_INT 12
15046: PUSH
15047: LD_INT 15
15049: PUSH
15050: LD_INT 16
15052: PUSH
15053: LD_INT 22
15055: PUSH
15056: LD_INT 26
15058: PUSH
15059: LD_INT 36
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 101
15076: PUSH
15077: LD_INT 102
15079: PUSH
15080: LD_INT 105
15082: PUSH
15083: LD_INT 106
15085: PUSH
15086: LD_INT 108
15088: PUSH
15089: LD_INT 116
15091: PUSH
15092: LD_INT 117
15094: PUSH
15095: LD_INT 118
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: ST_TO_ADDR
15112: GO 17999
15114: LD_INT 4
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15122
15120: GO 15218
15122: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15123: LD_ADDR_VAR 0 2
15127: PUSH
15128: LD_INT 2
15130: PUSH
15131: LD_INT 4
15133: PUSH
15134: LD_INT 5
15136: PUSH
15137: LD_INT 8
15139: PUSH
15140: LD_INT 11
15142: PUSH
15143: LD_INT 12
15145: PUSH
15146: LD_INT 15
15148: PUSH
15149: LD_INT 16
15151: PUSH
15152: LD_INT 22
15154: PUSH
15155: LD_INT 23
15157: PUSH
15158: LD_INT 26
15160: PUSH
15161: LD_INT 36
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 101
15180: PUSH
15181: LD_INT 102
15183: PUSH
15184: LD_INT 105
15186: PUSH
15187: LD_INT 106
15189: PUSH
15190: LD_INT 108
15192: PUSH
15193: LD_INT 116
15195: PUSH
15196: LD_INT 117
15198: PUSH
15199: LD_INT 118
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: ST_TO_ADDR
15216: GO 17999
15218: LD_INT 5
15220: DOUBLE
15221: EQUAL
15222: IFTRUE 15226
15224: GO 15338
15226: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15227: LD_ADDR_VAR 0 2
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 4
15237: PUSH
15238: LD_INT 5
15240: PUSH
15241: LD_INT 6
15243: PUSH
15244: LD_INT 8
15246: PUSH
15247: LD_INT 11
15249: PUSH
15250: LD_INT 12
15252: PUSH
15253: LD_INT 15
15255: PUSH
15256: LD_INT 16
15258: PUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 25
15267: PUSH
15268: LD_INT 26
15270: PUSH
15271: LD_INT 36
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 101
15292: PUSH
15293: LD_INT 102
15295: PUSH
15296: LD_INT 105
15298: PUSH
15299: LD_INT 106
15301: PUSH
15302: LD_INT 108
15304: PUSH
15305: LD_INT 109
15307: PUSH
15308: LD_INT 112
15310: PUSH
15311: LD_INT 116
15313: PUSH
15314: LD_INT 117
15316: PUSH
15317: LD_INT 118
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: ST_TO_ADDR
15336: GO 17999
15338: LD_INT 6
15340: DOUBLE
15341: EQUAL
15342: IFTRUE 15346
15344: GO 15478
15346: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15347: LD_ADDR_VAR 0 2
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: LD_INT 6
15363: PUSH
15364: LD_INT 8
15366: PUSH
15367: LD_INT 11
15369: PUSH
15370: LD_INT 12
15372: PUSH
15373: LD_INT 15
15375: PUSH
15376: LD_INT 16
15378: PUSH
15379: LD_INT 20
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 22
15387: PUSH
15388: LD_INT 23
15390: PUSH
15391: LD_INT 25
15393: PUSH
15394: LD_INT 26
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 31
15402: PUSH
15403: LD_INT 32
15405: PUSH
15406: LD_INT 36
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 101
15432: PUSH
15433: LD_INT 102
15435: PUSH
15436: LD_INT 105
15438: PUSH
15439: LD_INT 106
15441: PUSH
15442: LD_INT 108
15444: PUSH
15445: LD_INT 109
15447: PUSH
15448: LD_INT 112
15450: PUSH
15451: LD_INT 116
15453: PUSH
15454: LD_INT 117
15456: PUSH
15457: LD_INT 118
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: ST_TO_ADDR
15476: GO 17999
15478: LD_INT 7
15480: DOUBLE
15481: EQUAL
15482: IFTRUE 15486
15484: GO 15598
15486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15487: LD_ADDR_VAR 0 2
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: LD_INT 5
15500: PUSH
15501: LD_INT 7
15503: PUSH
15504: LD_INT 11
15506: PUSH
15507: LD_INT 12
15509: PUSH
15510: LD_INT 15
15512: PUSH
15513: LD_INT 16
15515: PUSH
15516: LD_INT 20
15518: PUSH
15519: LD_INT 21
15521: PUSH
15522: LD_INT 22
15524: PUSH
15525: LD_INT 23
15527: PUSH
15528: LD_INT 25
15530: PUSH
15531: LD_INT 26
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 101
15552: PUSH
15553: LD_INT 102
15555: PUSH
15556: LD_INT 103
15558: PUSH
15559: LD_INT 105
15561: PUSH
15562: LD_INT 106
15564: PUSH
15565: LD_INT 108
15567: PUSH
15568: LD_INT 112
15570: PUSH
15571: LD_INT 116
15573: PUSH
15574: LD_INT 117
15576: PUSH
15577: LD_INT 118
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 17999
15598: LD_INT 8
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15746
15606: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: LD_INT 5
15620: PUSH
15621: LD_INT 6
15623: PUSH
15624: LD_INT 7
15626: PUSH
15627: LD_INT 8
15629: PUSH
15630: LD_INT 11
15632: PUSH
15633: LD_INT 12
15635: PUSH
15636: LD_INT 15
15638: PUSH
15639: LD_INT 16
15641: PUSH
15642: LD_INT 20
15644: PUSH
15645: LD_INT 21
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_INT 23
15653: PUSH
15654: LD_INT 25
15656: PUSH
15657: LD_INT 26
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 31
15665: PUSH
15666: LD_INT 32
15668: PUSH
15669: LD_INT 36
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 101
15696: PUSH
15697: LD_INT 102
15699: PUSH
15700: LD_INT 103
15702: PUSH
15703: LD_INT 105
15705: PUSH
15706: LD_INT 106
15708: PUSH
15709: LD_INT 108
15711: PUSH
15712: LD_INT 109
15714: PUSH
15715: LD_INT 112
15717: PUSH
15718: LD_INT 116
15720: PUSH
15721: LD_INT 117
15723: PUSH
15724: LD_INT 118
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: ST_TO_ADDR
15744: GO 17999
15746: LD_INT 9
15748: DOUBLE
15749: EQUAL
15750: IFTRUE 15754
15752: GO 15902
15754: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15755: LD_ADDR_VAR 0 2
15759: PUSH
15760: LD_INT 2
15762: PUSH
15763: LD_INT 4
15765: PUSH
15766: LD_INT 5
15768: PUSH
15769: LD_INT 6
15771: PUSH
15772: LD_INT 7
15774: PUSH
15775: LD_INT 8
15777: PUSH
15778: LD_INT 11
15780: PUSH
15781: LD_INT 12
15783: PUSH
15784: LD_INT 15
15786: PUSH
15787: LD_INT 16
15789: PUSH
15790: LD_INT 20
15792: PUSH
15793: LD_INT 21
15795: PUSH
15796: LD_INT 22
15798: PUSH
15799: LD_INT 23
15801: PUSH
15802: LD_INT 25
15804: PUSH
15805: LD_INT 26
15807: PUSH
15808: LD_INT 28
15810: PUSH
15811: LD_INT 30
15813: PUSH
15814: LD_INT 31
15816: PUSH
15817: LD_INT 32
15819: PUSH
15820: LD_INT 36
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 101
15848: PUSH
15849: LD_INT 102
15851: PUSH
15852: LD_INT 103
15854: PUSH
15855: LD_INT 105
15857: PUSH
15858: LD_INT 106
15860: PUSH
15861: LD_INT 108
15863: PUSH
15864: LD_INT 109
15866: PUSH
15867: LD_INT 112
15869: PUSH
15870: LD_INT 114
15872: PUSH
15873: LD_INT 116
15875: PUSH
15876: LD_INT 117
15878: PUSH
15879: LD_INT 118
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: ST_TO_ADDR
15900: GO 17999
15902: LD_INT 10
15904: DOUBLE
15905: EQUAL
15906: IFTRUE 15910
15908: GO 16106
15910: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15911: LD_ADDR_VAR 0 2
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: LD_INT 6
15927: PUSH
15928: LD_INT 7
15930: PUSH
15931: LD_INT 8
15933: PUSH
15934: LD_INT 9
15936: PUSH
15937: LD_INT 10
15939: PUSH
15940: LD_INT 11
15942: PUSH
15943: LD_INT 12
15945: PUSH
15946: LD_INT 13
15948: PUSH
15949: LD_INT 14
15951: PUSH
15952: LD_INT 15
15954: PUSH
15955: LD_INT 16
15957: PUSH
15958: LD_INT 17
15960: PUSH
15961: LD_INT 18
15963: PUSH
15964: LD_INT 19
15966: PUSH
15967: LD_INT 20
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 22
15975: PUSH
15976: LD_INT 23
15978: PUSH
15979: LD_INT 24
15981: PUSH
15982: LD_INT 25
15984: PUSH
15985: LD_INT 26
15987: PUSH
15988: LD_INT 28
15990: PUSH
15991: LD_INT 30
15993: PUSH
15994: LD_INT 31
15996: PUSH
15997: LD_INT 32
15999: PUSH
16000: LD_INT 36
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 101
16036: PUSH
16037: LD_INT 102
16039: PUSH
16040: LD_INT 103
16042: PUSH
16043: LD_INT 104
16045: PUSH
16046: LD_INT 105
16048: PUSH
16049: LD_INT 106
16051: PUSH
16052: LD_INT 107
16054: PUSH
16055: LD_INT 108
16057: PUSH
16058: LD_INT 109
16060: PUSH
16061: LD_INT 110
16063: PUSH
16064: LD_INT 111
16066: PUSH
16067: LD_INT 112
16069: PUSH
16070: LD_INT 114
16072: PUSH
16073: LD_INT 116
16075: PUSH
16076: LD_INT 117
16078: PUSH
16079: LD_INT 118
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: ST_TO_ADDR
16104: GO 17999
16106: LD_INT 11
16108: DOUBLE
16109: EQUAL
16110: IFTRUE 16114
16112: GO 16318
16114: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_INT 2
16122: PUSH
16123: LD_INT 3
16125: PUSH
16126: LD_INT 4
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: LD_INT 8
16140: PUSH
16141: LD_INT 9
16143: PUSH
16144: LD_INT 10
16146: PUSH
16147: LD_INT 11
16149: PUSH
16150: LD_INT 12
16152: PUSH
16153: LD_INT 13
16155: PUSH
16156: LD_INT 14
16158: PUSH
16159: LD_INT 15
16161: PUSH
16162: LD_INT 16
16164: PUSH
16165: LD_INT 17
16167: PUSH
16168: LD_INT 18
16170: PUSH
16171: LD_INT 19
16173: PUSH
16174: LD_INT 20
16176: PUSH
16177: LD_INT 21
16179: PUSH
16180: LD_INT 22
16182: PUSH
16183: LD_INT 23
16185: PUSH
16186: LD_INT 24
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: LD_INT 26
16194: PUSH
16195: LD_INT 28
16197: PUSH
16198: LD_INT 30
16200: PUSH
16201: LD_INT 31
16203: PUSH
16204: LD_INT 32
16206: PUSH
16207: LD_INT 34
16209: PUSH
16210: LD_INT 36
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 101
16248: PUSH
16249: LD_INT 102
16251: PUSH
16252: LD_INT 103
16254: PUSH
16255: LD_INT 104
16257: PUSH
16258: LD_INT 105
16260: PUSH
16261: LD_INT 106
16263: PUSH
16264: LD_INT 107
16266: PUSH
16267: LD_INT 108
16269: PUSH
16270: LD_INT 109
16272: PUSH
16273: LD_INT 110
16275: PUSH
16276: LD_INT 111
16278: PUSH
16279: LD_INT 112
16281: PUSH
16282: LD_INT 114
16284: PUSH
16285: LD_INT 116
16287: PUSH
16288: LD_INT 117
16290: PUSH
16291: LD_INT 118
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: ST_TO_ADDR
16316: GO 17999
16318: LD_INT 12
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16546
16326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: LD_INT 3
16340: PUSH
16341: LD_INT 4
16343: PUSH
16344: LD_INT 5
16346: PUSH
16347: LD_INT 6
16349: PUSH
16350: LD_INT 7
16352: PUSH
16353: LD_INT 8
16355: PUSH
16356: LD_INT 9
16358: PUSH
16359: LD_INT 10
16361: PUSH
16362: LD_INT 11
16364: PUSH
16365: LD_INT 12
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 14
16373: PUSH
16374: LD_INT 15
16376: PUSH
16377: LD_INT 16
16379: PUSH
16380: LD_INT 17
16382: PUSH
16383: LD_INT 18
16385: PUSH
16386: LD_INT 19
16388: PUSH
16389: LD_INT 20
16391: PUSH
16392: LD_INT 21
16394: PUSH
16395: LD_INT 22
16397: PUSH
16398: LD_INT 23
16400: PUSH
16401: LD_INT 24
16403: PUSH
16404: LD_INT 25
16406: PUSH
16407: LD_INT 26
16409: PUSH
16410: LD_INT 27
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: LD_INT 30
16418: PUSH
16419: LD_INT 31
16421: PUSH
16422: LD_INT 32
16424: PUSH
16425: LD_INT 33
16427: PUSH
16428: LD_INT 34
16430: PUSH
16431: LD_INT 36
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 101
16472: PUSH
16473: LD_INT 102
16475: PUSH
16476: LD_INT 103
16478: PUSH
16479: LD_INT 104
16481: PUSH
16482: LD_INT 105
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 107
16490: PUSH
16491: LD_INT 108
16493: PUSH
16494: LD_INT 109
16496: PUSH
16497: LD_INT 110
16499: PUSH
16500: LD_INT 111
16502: PUSH
16503: LD_INT 112
16505: PUSH
16506: LD_INT 113
16508: PUSH
16509: LD_INT 114
16511: PUSH
16512: LD_INT 116
16514: PUSH
16515: LD_INT 117
16517: PUSH
16518: LD_INT 118
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: ST_TO_ADDR
16544: GO 17999
16546: LD_INT 13
16548: DOUBLE
16549: EQUAL
16550: IFTRUE 16554
16552: GO 16762
16554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16555: LD_ADDR_VAR 0 2
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 3
16568: PUSH
16569: LD_INT 4
16571: PUSH
16572: LD_INT 5
16574: PUSH
16575: LD_INT 8
16577: PUSH
16578: LD_INT 9
16580: PUSH
16581: LD_INT 10
16583: PUSH
16584: LD_INT 11
16586: PUSH
16587: LD_INT 12
16589: PUSH
16590: LD_INT 14
16592: PUSH
16593: LD_INT 15
16595: PUSH
16596: LD_INT 16
16598: PUSH
16599: LD_INT 17
16601: PUSH
16602: LD_INT 18
16604: PUSH
16605: LD_INT 19
16607: PUSH
16608: LD_INT 20
16610: PUSH
16611: LD_INT 21
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_INT 23
16619: PUSH
16620: LD_INT 24
16622: PUSH
16623: LD_INT 25
16625: PUSH
16626: LD_INT 26
16628: PUSH
16629: LD_INT 27
16631: PUSH
16632: LD_INT 28
16634: PUSH
16635: LD_INT 30
16637: PUSH
16638: LD_INT 31
16640: PUSH
16641: LD_INT 32
16643: PUSH
16644: LD_INT 33
16646: PUSH
16647: LD_INT 34
16649: PUSH
16650: LD_INT 36
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 101
16688: PUSH
16689: LD_INT 102
16691: PUSH
16692: LD_INT 103
16694: PUSH
16695: LD_INT 104
16697: PUSH
16698: LD_INT 105
16700: PUSH
16701: LD_INT 106
16703: PUSH
16704: LD_INT 107
16706: PUSH
16707: LD_INT 108
16709: PUSH
16710: LD_INT 109
16712: PUSH
16713: LD_INT 110
16715: PUSH
16716: LD_INT 111
16718: PUSH
16719: LD_INT 112
16721: PUSH
16722: LD_INT 113
16724: PUSH
16725: LD_INT 114
16727: PUSH
16728: LD_INT 116
16730: PUSH
16731: LD_INT 117
16733: PUSH
16734: LD_INT 118
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: ST_TO_ADDR
16760: GO 17999
16762: LD_INT 14
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16994
16770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16771: LD_ADDR_VAR 0 2
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: LD_INT 3
16784: PUSH
16785: LD_INT 4
16787: PUSH
16788: LD_INT 5
16790: PUSH
16791: LD_INT 6
16793: PUSH
16794: LD_INT 7
16796: PUSH
16797: LD_INT 8
16799: PUSH
16800: LD_INT 9
16802: PUSH
16803: LD_INT 10
16805: PUSH
16806: LD_INT 11
16808: PUSH
16809: LD_INT 12
16811: PUSH
16812: LD_INT 13
16814: PUSH
16815: LD_INT 14
16817: PUSH
16818: LD_INT 15
16820: PUSH
16821: LD_INT 16
16823: PUSH
16824: LD_INT 17
16826: PUSH
16827: LD_INT 18
16829: PUSH
16830: LD_INT 19
16832: PUSH
16833: LD_INT 20
16835: PUSH
16836: LD_INT 21
16838: PUSH
16839: LD_INT 22
16841: PUSH
16842: LD_INT 23
16844: PUSH
16845: LD_INT 24
16847: PUSH
16848: LD_INT 25
16850: PUSH
16851: LD_INT 26
16853: PUSH
16854: LD_INT 27
16856: PUSH
16857: LD_INT 28
16859: PUSH
16860: LD_INT 29
16862: PUSH
16863: LD_INT 30
16865: PUSH
16866: LD_INT 31
16868: PUSH
16869: LD_INT 32
16871: PUSH
16872: LD_INT 33
16874: PUSH
16875: LD_INT 34
16877: PUSH
16878: LD_INT 36
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 101
16920: PUSH
16921: LD_INT 102
16923: PUSH
16924: LD_INT 103
16926: PUSH
16927: LD_INT 104
16929: PUSH
16930: LD_INT 105
16932: PUSH
16933: LD_INT 106
16935: PUSH
16936: LD_INT 107
16938: PUSH
16939: LD_INT 108
16941: PUSH
16942: LD_INT 109
16944: PUSH
16945: LD_INT 110
16947: PUSH
16948: LD_INT 111
16950: PUSH
16951: LD_INT 112
16953: PUSH
16954: LD_INT 113
16956: PUSH
16957: LD_INT 114
16959: PUSH
16960: LD_INT 116
16962: PUSH
16963: LD_INT 117
16965: PUSH
16966: LD_INT 118
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: ST_TO_ADDR
16992: GO 17999
16994: LD_INT 15
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17226
17002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: LD_INT 2
17013: PUSH
17014: LD_INT 3
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: LD_INT 5
17022: PUSH
17023: LD_INT 6
17025: PUSH
17026: LD_INT 7
17028: PUSH
17029: LD_INT 8
17031: PUSH
17032: LD_INT 9
17034: PUSH
17035: LD_INT 10
17037: PUSH
17038: LD_INT 11
17040: PUSH
17041: LD_INT 12
17043: PUSH
17044: LD_INT 13
17046: PUSH
17047: LD_INT 14
17049: PUSH
17050: LD_INT 15
17052: PUSH
17053: LD_INT 16
17055: PUSH
17056: LD_INT 17
17058: PUSH
17059: LD_INT 18
17061: PUSH
17062: LD_INT 19
17064: PUSH
17065: LD_INT 20
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 22
17073: PUSH
17074: LD_INT 23
17076: PUSH
17077: LD_INT 24
17079: PUSH
17080: LD_INT 25
17082: PUSH
17083: LD_INT 26
17085: PUSH
17086: LD_INT 27
17088: PUSH
17089: LD_INT 28
17091: PUSH
17092: LD_INT 29
17094: PUSH
17095: LD_INT 30
17097: PUSH
17098: LD_INT 31
17100: PUSH
17101: LD_INT 32
17103: PUSH
17104: LD_INT 33
17106: PUSH
17107: LD_INT 34
17109: PUSH
17110: LD_INT 36
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 101
17152: PUSH
17153: LD_INT 102
17155: PUSH
17156: LD_INT 103
17158: PUSH
17159: LD_INT 104
17161: PUSH
17162: LD_INT 105
17164: PUSH
17165: LD_INT 106
17167: PUSH
17168: LD_INT 107
17170: PUSH
17171: LD_INT 108
17173: PUSH
17174: LD_INT 109
17176: PUSH
17177: LD_INT 110
17179: PUSH
17180: LD_INT 111
17182: PUSH
17183: LD_INT 112
17185: PUSH
17186: LD_INT 113
17188: PUSH
17189: LD_INT 114
17191: PUSH
17192: LD_INT 116
17194: PUSH
17195: LD_INT 117
17197: PUSH
17198: LD_INT 118
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: ST_TO_ADDR
17224: GO 17999
17226: LD_INT 16
17228: DOUBLE
17229: EQUAL
17230: IFTRUE 17234
17232: GO 17370
17234: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17235: LD_ADDR_VAR 0 2
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: LD_INT 5
17248: PUSH
17249: LD_INT 7
17251: PUSH
17252: LD_INT 11
17254: PUSH
17255: LD_INT 12
17257: PUSH
17258: LD_INT 15
17260: PUSH
17261: LD_INT 16
17263: PUSH
17264: LD_INT 20
17266: PUSH
17267: LD_INT 21
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: LD_INT 23
17275: PUSH
17276: LD_INT 25
17278: PUSH
17279: LD_INT 26
17281: PUSH
17282: LD_INT 30
17284: PUSH
17285: LD_INT 31
17287: PUSH
17288: LD_INT 32
17290: PUSH
17291: LD_INT 33
17293: PUSH
17294: LD_INT 34
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 101
17320: PUSH
17321: LD_INT 102
17323: PUSH
17324: LD_INT 103
17326: PUSH
17327: LD_INT 106
17329: PUSH
17330: LD_INT 108
17332: PUSH
17333: LD_INT 112
17335: PUSH
17336: LD_INT 113
17338: PUSH
17339: LD_INT 114
17341: PUSH
17342: LD_INT 116
17344: PUSH
17345: LD_INT 117
17347: PUSH
17348: LD_INT 118
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: ST_TO_ADDR
17368: GO 17999
17370: LD_INT 17
17372: DOUBLE
17373: EQUAL
17374: IFTRUE 17378
17376: GO 17602
17378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17379: LD_ADDR_VAR 0 2
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: LD_INT 4
17395: PUSH
17396: LD_INT 5
17398: PUSH
17399: LD_INT 6
17401: PUSH
17402: LD_INT 7
17404: PUSH
17405: LD_INT 8
17407: PUSH
17408: LD_INT 9
17410: PUSH
17411: LD_INT 10
17413: PUSH
17414: LD_INT 11
17416: PUSH
17417: LD_INT 12
17419: PUSH
17420: LD_INT 13
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: LD_INT 15
17428: PUSH
17429: LD_INT 16
17431: PUSH
17432: LD_INT 17
17434: PUSH
17435: LD_INT 18
17437: PUSH
17438: LD_INT 19
17440: PUSH
17441: LD_INT 20
17443: PUSH
17444: LD_INT 21
17446: PUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 23
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 25
17458: PUSH
17459: LD_INT 26
17461: PUSH
17462: LD_INT 27
17464: PUSH
17465: LD_INT 28
17467: PUSH
17468: LD_INT 29
17470: PUSH
17471: LD_INT 30
17473: PUSH
17474: LD_INT 31
17476: PUSH
17477: LD_INT 32
17479: PUSH
17480: LD_INT 33
17482: PUSH
17483: LD_INT 34
17485: PUSH
17486: LD_INT 36
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 101
17528: PUSH
17529: LD_INT 102
17531: PUSH
17532: LD_INT 103
17534: PUSH
17535: LD_INT 104
17537: PUSH
17538: LD_INT 105
17540: PUSH
17541: LD_INT 106
17543: PUSH
17544: LD_INT 107
17546: PUSH
17547: LD_INT 108
17549: PUSH
17550: LD_INT 109
17552: PUSH
17553: LD_INT 110
17555: PUSH
17556: LD_INT 111
17558: PUSH
17559: LD_INT 112
17561: PUSH
17562: LD_INT 113
17564: PUSH
17565: LD_INT 114
17567: PUSH
17568: LD_INT 116
17570: PUSH
17571: LD_INT 117
17573: PUSH
17574: LD_INT 118
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: ST_TO_ADDR
17600: GO 17999
17602: LD_INT 18
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17758
17610: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17611: LD_ADDR_VAR 0 2
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: LD_INT 4
17621: PUSH
17622: LD_INT 5
17624: PUSH
17625: LD_INT 7
17627: PUSH
17628: LD_INT 11
17630: PUSH
17631: LD_INT 12
17633: PUSH
17634: LD_INT 15
17636: PUSH
17637: LD_INT 16
17639: PUSH
17640: LD_INT 20
17642: PUSH
17643: LD_INT 21
17645: PUSH
17646: LD_INT 22
17648: PUSH
17649: LD_INT 23
17651: PUSH
17652: LD_INT 25
17654: PUSH
17655: LD_INT 26
17657: PUSH
17658: LD_INT 30
17660: PUSH
17661: LD_INT 31
17663: PUSH
17664: LD_INT 32
17666: PUSH
17667: LD_INT 33
17669: PUSH
17670: LD_INT 34
17672: PUSH
17673: LD_INT 35
17675: PUSH
17676: LD_INT 36
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 101
17704: PUSH
17705: LD_INT 102
17707: PUSH
17708: LD_INT 103
17710: PUSH
17711: LD_INT 106
17713: PUSH
17714: LD_INT 108
17716: PUSH
17717: LD_INT 112
17719: PUSH
17720: LD_INT 113
17722: PUSH
17723: LD_INT 114
17725: PUSH
17726: LD_INT 115
17728: PUSH
17729: LD_INT 116
17731: PUSH
17732: LD_INT 117
17734: PUSH
17735: LD_INT 118
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: ST_TO_ADDR
17756: GO 17999
17758: LD_INT 19
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17998
17766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17767: LD_ADDR_VAR 0 2
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: LD_INT 4
17783: PUSH
17784: LD_INT 5
17786: PUSH
17787: LD_INT 6
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 8
17795: PUSH
17796: LD_INT 9
17798: PUSH
17799: LD_INT 10
17801: PUSH
17802: LD_INT 11
17804: PUSH
17805: LD_INT 12
17807: PUSH
17808: LD_INT 13
17810: PUSH
17811: LD_INT 14
17813: PUSH
17814: LD_INT 15
17816: PUSH
17817: LD_INT 16
17819: PUSH
17820: LD_INT 17
17822: PUSH
17823: LD_INT 18
17825: PUSH
17826: LD_INT 19
17828: PUSH
17829: LD_INT 20
17831: PUSH
17832: LD_INT 21
17834: PUSH
17835: LD_INT 22
17837: PUSH
17838: LD_INT 23
17840: PUSH
17841: LD_INT 24
17843: PUSH
17844: LD_INT 25
17846: PUSH
17847: LD_INT 26
17849: PUSH
17850: LD_INT 27
17852: PUSH
17853: LD_INT 28
17855: PUSH
17856: LD_INT 29
17858: PUSH
17859: LD_INT 30
17861: PUSH
17862: LD_INT 31
17864: PUSH
17865: LD_INT 32
17867: PUSH
17868: LD_INT 33
17870: PUSH
17871: LD_INT 34
17873: PUSH
17874: LD_INT 35
17876: PUSH
17877: LD_INT 36
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 101
17920: PUSH
17921: LD_INT 102
17923: PUSH
17924: LD_INT 103
17926: PUSH
17927: LD_INT 104
17929: PUSH
17930: LD_INT 105
17932: PUSH
17933: LD_INT 106
17935: PUSH
17936: LD_INT 107
17938: PUSH
17939: LD_INT 108
17941: PUSH
17942: LD_INT 109
17944: PUSH
17945: LD_INT 110
17947: PUSH
17948: LD_INT 111
17950: PUSH
17951: LD_INT 112
17953: PUSH
17954: LD_INT 113
17956: PUSH
17957: LD_INT 114
17959: PUSH
17960: LD_INT 115
17962: PUSH
17963: LD_INT 116
17965: PUSH
17966: LD_INT 117
17968: PUSH
17969: LD_INT 118
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: ST_TO_ADDR
17996: GO 17999
17998: POP
// end else
17999: GO 18230
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18001: LD_ADDR_VAR 0 2
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: LD_INT 3
18014: PUSH
18015: LD_INT 4
18017: PUSH
18018: LD_INT 5
18020: PUSH
18021: LD_INT 6
18023: PUSH
18024: LD_INT 7
18026: PUSH
18027: LD_INT 8
18029: PUSH
18030: LD_INT 9
18032: PUSH
18033: LD_INT 10
18035: PUSH
18036: LD_INT 11
18038: PUSH
18039: LD_INT 12
18041: PUSH
18042: LD_INT 13
18044: PUSH
18045: LD_INT 14
18047: PUSH
18048: LD_INT 15
18050: PUSH
18051: LD_INT 16
18053: PUSH
18054: LD_INT 17
18056: PUSH
18057: LD_INT 18
18059: PUSH
18060: LD_INT 19
18062: PUSH
18063: LD_INT 20
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 22
18071: PUSH
18072: LD_INT 23
18074: PUSH
18075: LD_INT 24
18077: PUSH
18078: LD_INT 25
18080: PUSH
18081: LD_INT 26
18083: PUSH
18084: LD_INT 27
18086: PUSH
18087: LD_INT 28
18089: PUSH
18090: LD_INT 29
18092: PUSH
18093: LD_INT 30
18095: PUSH
18096: LD_INT 31
18098: PUSH
18099: LD_INT 32
18101: PUSH
18102: LD_INT 33
18104: PUSH
18105: LD_INT 34
18107: PUSH
18108: LD_INT 35
18110: PUSH
18111: LD_INT 36
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 101
18154: PUSH
18155: LD_INT 102
18157: PUSH
18158: LD_INT 103
18160: PUSH
18161: LD_INT 104
18163: PUSH
18164: LD_INT 105
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 107
18172: PUSH
18173: LD_INT 108
18175: PUSH
18176: LD_INT 109
18178: PUSH
18179: LD_INT 110
18181: PUSH
18182: LD_INT 111
18184: PUSH
18185: LD_INT 112
18187: PUSH
18188: LD_INT 113
18190: PUSH
18191: LD_INT 114
18193: PUSH
18194: LD_INT 115
18196: PUSH
18197: LD_INT 116
18199: PUSH
18200: LD_INT 117
18202: PUSH
18203: LD_INT 118
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: ST_TO_ADDR
// if result then
18230: LD_VAR 0 2
18234: IFFALSE 19020
// begin normal :=  ;
18236: LD_ADDR_VAR 0 5
18240: PUSH
18241: LD_STRING 
18243: ST_TO_ADDR
// hardcore :=  ;
18244: LD_ADDR_VAR 0 6
18248: PUSH
18249: LD_STRING 
18251: ST_TO_ADDR
// active :=  ;
18252: LD_ADDR_VAR 0 7
18256: PUSH
18257: LD_STRING 
18259: ST_TO_ADDR
// for i = 1 to normalCounter do
18260: LD_ADDR_VAR 0 8
18264: PUSH
18265: DOUBLE
18266: LD_INT 1
18268: DEC
18269: ST_TO_ADDR
18270: LD_EXP 63
18274: PUSH
18275: FOR_TO
18276: IFFALSE 18377
// begin tmp := 0 ;
18278: LD_ADDR_VAR 0 3
18282: PUSH
18283: LD_STRING 0
18285: ST_TO_ADDR
// if result [ 1 ] then
18286: LD_VAR 0 2
18290: PUSH
18291: LD_INT 1
18293: ARRAY
18294: IFFALSE 18359
// if result [ 1 ] [ 1 ] = i then
18296: LD_VAR 0 2
18300: PUSH
18301: LD_INT 1
18303: ARRAY
18304: PUSH
18305: LD_INT 1
18307: ARRAY
18308: PUSH
18309: LD_VAR 0 8
18313: EQUAL
18314: IFFALSE 18359
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18316: LD_ADDR_VAR 0 2
18320: PUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_VAR 0 2
18333: PUSH
18334: LD_INT 1
18336: ARRAY
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 3
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// tmp := 1 ;
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: LD_STRING 1
18358: ST_TO_ADDR
// end ; normal := normal & tmp ;
18359: LD_ADDR_VAR 0 5
18363: PUSH
18364: LD_VAR 0 5
18368: PUSH
18369: LD_VAR 0 3
18373: STR
18374: ST_TO_ADDR
// end ;
18375: GO 18275
18377: POP
18378: POP
// for i = 1 to hardcoreCounter do
18379: LD_ADDR_VAR 0 8
18383: PUSH
18384: DOUBLE
18385: LD_INT 1
18387: DEC
18388: ST_TO_ADDR
18389: LD_EXP 64
18393: PUSH
18394: FOR_TO
18395: IFFALSE 18500
// begin tmp := 0 ;
18397: LD_ADDR_VAR 0 3
18401: PUSH
18402: LD_STRING 0
18404: ST_TO_ADDR
// if result [ 2 ] then
18405: LD_VAR 0 2
18409: PUSH
18410: LD_INT 2
18412: ARRAY
18413: IFFALSE 18482
// if result [ 2 ] [ 1 ] = 100 + i then
18415: LD_VAR 0 2
18419: PUSH
18420: LD_INT 2
18422: ARRAY
18423: PUSH
18424: LD_INT 1
18426: ARRAY
18427: PUSH
18428: LD_INT 100
18430: PUSH
18431: LD_VAR 0 8
18435: PLUS
18436: EQUAL
18437: IFFALSE 18482
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18439: LD_ADDR_VAR 0 2
18443: PUSH
18444: LD_VAR 0 2
18448: PPUSH
18449: LD_INT 2
18451: PPUSH
18452: LD_VAR 0 2
18456: PUSH
18457: LD_INT 2
18459: ARRAY
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 3
18468: PPUSH
18469: CALL_OW 1
18473: ST_TO_ADDR
// tmp := 1 ;
18474: LD_ADDR_VAR 0 3
18478: PUSH
18479: LD_STRING 1
18481: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18482: LD_ADDR_VAR 0 6
18486: PUSH
18487: LD_VAR 0 6
18491: PUSH
18492: LD_VAR 0 3
18496: STR
18497: ST_TO_ADDR
// end ;
18498: GO 18394
18500: POP
18501: POP
// if isGameLoad then
18502: LD_VAR 0 1
18506: IFFALSE 18981
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18508: LD_ADDR_VAR 0 4
18512: PUSH
18513: LD_EXP 67
18517: PUSH
18518: LD_EXP 66
18522: PUSH
18523: LD_EXP 68
18527: PUSH
18528: LD_EXP 65
18532: PUSH
18533: LD_EXP 69
18537: PUSH
18538: LD_EXP 70
18542: PUSH
18543: LD_EXP 71
18547: PUSH
18548: LD_EXP 72
18552: PUSH
18553: LD_EXP 73
18557: PUSH
18558: LD_EXP 74
18562: PUSH
18563: LD_EXP 75
18567: PUSH
18568: LD_EXP 76
18572: PUSH
18573: LD_EXP 77
18577: PUSH
18578: LD_EXP 78
18582: PUSH
18583: LD_EXP 86
18587: PUSH
18588: LD_EXP 87
18592: PUSH
18593: LD_EXP 88
18597: PUSH
18598: LD_EXP 89
18602: PUSH
18603: LD_EXP 91
18607: PUSH
18608: LD_EXP 92
18612: PUSH
18613: LD_EXP 93
18617: PUSH
18618: LD_EXP 96
18622: PUSH
18623: LD_EXP 98
18627: PUSH
18628: LD_EXP 99
18632: PUSH
18633: LD_EXP 100
18637: PUSH
18638: LD_EXP 102
18642: PUSH
18643: LD_EXP 103
18647: PUSH
18648: LD_EXP 106
18652: PUSH
18653: LD_EXP 107
18657: PUSH
18658: LD_EXP 108
18662: PUSH
18663: LD_EXP 109
18667: PUSH
18668: LD_EXP 110
18672: PUSH
18673: LD_EXP 111
18677: PUSH
18678: LD_EXP 112
18682: PUSH
18683: LD_EXP 113
18687: PUSH
18688: LD_EXP 114
18692: PUSH
18693: LD_EXP 79
18697: PUSH
18698: LD_EXP 80
18702: PUSH
18703: LD_EXP 83
18707: PUSH
18708: LD_EXP 84
18712: PUSH
18713: LD_EXP 85
18717: PUSH
18718: LD_EXP 81
18722: PUSH
18723: LD_EXP 82
18727: PUSH
18728: LD_EXP 90
18732: PUSH
18733: LD_EXP 94
18737: PUSH
18738: LD_EXP 95
18742: PUSH
18743: LD_EXP 97
18747: PUSH
18748: LD_EXP 101
18752: PUSH
18753: LD_EXP 104
18757: PUSH
18758: LD_EXP 105
18762: PUSH
18763: LD_EXP 115
18767: PUSH
18768: LD_EXP 116
18772: PUSH
18773: LD_EXP 117
18777: PUSH
18778: LD_EXP 118
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: ST_TO_ADDR
// tmp :=  ;
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_STRING 
18846: ST_TO_ADDR
// for i = 1 to normalCounter do
18847: LD_ADDR_VAR 0 8
18851: PUSH
18852: DOUBLE
18853: LD_INT 1
18855: DEC
18856: ST_TO_ADDR
18857: LD_EXP 63
18861: PUSH
18862: FOR_TO
18863: IFFALSE 18899
// begin if flags [ i ] then
18865: LD_VAR 0 4
18869: PUSH
18870: LD_VAR 0 8
18874: ARRAY
18875: IFFALSE 18897
// tmp := tmp & i & ; ;
18877: LD_ADDR_VAR 0 3
18881: PUSH
18882: LD_VAR 0 3
18886: PUSH
18887: LD_VAR 0 8
18891: STR
18892: PUSH
18893: LD_STRING ;
18895: STR
18896: ST_TO_ADDR
// end ;
18897: GO 18862
18899: POP
18900: POP
// for i = 1 to hardcoreCounter do
18901: LD_ADDR_VAR 0 8
18905: PUSH
18906: DOUBLE
18907: LD_INT 1
18909: DEC
18910: ST_TO_ADDR
18911: LD_EXP 64
18915: PUSH
18916: FOR_TO
18917: IFFALSE 18963
// begin if flags [ normalCounter + i ] then
18919: LD_VAR 0 4
18923: PUSH
18924: LD_EXP 63
18928: PUSH
18929: LD_VAR 0 8
18933: PLUS
18934: ARRAY
18935: IFFALSE 18961
// tmp := tmp & ( 100 + i ) & ; ;
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 100
18949: PUSH
18950: LD_VAR 0 8
18954: PLUS
18955: STR
18956: PUSH
18957: LD_STRING ;
18959: STR
18960: ST_TO_ADDR
// end ;
18961: GO 18916
18963: POP
18964: POP
// if tmp then
18965: LD_VAR 0 3
18969: IFFALSE 18981
// active := tmp ;
18971: LD_ADDR_VAR 0 7
18975: PUSH
18976: LD_VAR 0 3
18980: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18981: LD_STRING getStreamItemsFromMission("
18983: PUSH
18984: LD_VAR 0 5
18988: STR
18989: PUSH
18990: LD_STRING ","
18992: STR
18993: PUSH
18994: LD_VAR 0 6
18998: STR
18999: PUSH
19000: LD_STRING ","
19002: STR
19003: PUSH
19004: LD_VAR 0 7
19008: STR
19009: PUSH
19010: LD_STRING ")
19012: STR
19013: PPUSH
19014: CALL_OW 559
// end else
19018: GO 19027
// ToLua ( getStreamItemsFromMission("","","") ) ;
19020: LD_STRING getStreamItemsFromMission("","","")
19022: PPUSH
19023: CALL_OW 559
// end ;
19027: LD_VAR 0 2
19031: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19032: LD_EXP 62
19036: PUSH
19037: LD_EXP 67
19041: AND
19042: IFFALSE 19166
19044: GO 19046
19046: DISABLE
19047: LD_INT 0
19049: PPUSH
19050: PPUSH
// begin enable ;
19051: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19052: LD_ADDR_VAR 0 2
19056: PUSH
19057: LD_INT 22
19059: PUSH
19060: LD_OWVAR 2
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 34
19074: PUSH
19075: LD_INT 7
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 34
19084: PUSH
19085: LD_INT 45
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 34
19094: PUSH
19095: LD_INT 28
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 34
19104: PUSH
19105: LD_INT 47
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: ST_TO_ADDR
// if not tmp then
19128: LD_VAR 0 2
19132: NOT
19133: IFFALSE 19137
// exit ;
19135: GO 19166
// for i in tmp do
19137: LD_ADDR_VAR 0 1
19141: PUSH
19142: LD_VAR 0 2
19146: PUSH
19147: FOR_IN
19148: IFFALSE 19164
// begin SetLives ( i , 0 ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_INT 0
19157: PPUSH
19158: CALL_OW 234
// end ;
19162: GO 19147
19164: POP
19165: POP
// end ;
19166: PPOPN 2
19168: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19169: LD_EXP 62
19173: PUSH
19174: LD_EXP 68
19178: AND
19179: IFFALSE 19263
19181: GO 19183
19183: DISABLE
19184: LD_INT 0
19186: PPUSH
19187: PPUSH
// begin enable ;
19188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19189: LD_ADDR_VAR 0 2
19193: PUSH
19194: LD_INT 22
19196: PUSH
19197: LD_OWVAR 2
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 32
19208: PUSH
19209: LD_INT 3
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: ST_TO_ADDR
// if not tmp then
19225: LD_VAR 0 2
19229: NOT
19230: IFFALSE 19234
// exit ;
19232: GO 19263
// for i in tmp do
19234: LD_ADDR_VAR 0 1
19238: PUSH
19239: LD_VAR 0 2
19243: PUSH
19244: FOR_IN
19245: IFFALSE 19261
// begin SetLives ( i , 0 ) ;
19247: LD_VAR 0 1
19251: PPUSH
19252: LD_INT 0
19254: PPUSH
19255: CALL_OW 234
// end ;
19259: GO 19244
19261: POP
19262: POP
// end ;
19263: PPOPN 2
19265: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19266: LD_EXP 62
19270: PUSH
19271: LD_EXP 65
19275: AND
19276: IFFALSE 19369
19278: GO 19280
19280: DISABLE
19281: LD_INT 0
19283: PPUSH
// begin enable ;
19284: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19285: LD_ADDR_VAR 0 1
19289: PUSH
19290: LD_INT 22
19292: PUSH
19293: LD_OWVAR 2
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 5
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 25
19317: PUSH
19318: LD_INT 9
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 25
19327: PUSH
19328: LD_INT 8
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: PUSH
19350: FOR_IN
19351: IFFALSE 19367
// begin SetClass ( i , 1 ) ;
19353: LD_VAR 0 1
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: CALL_OW 336
// end ;
19365: GO 19350
19367: POP
19368: POP
// end ;
19369: PPOPN 1
19371: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19372: LD_EXP 62
19376: PUSH
19377: LD_EXP 66
19381: AND
19382: PUSH
19383: LD_OWVAR 65
19387: PUSH
19388: LD_INT 7
19390: LESS
19391: AND
19392: IFFALSE 19406
19394: GO 19396
19396: DISABLE
// begin enable ;
19397: ENABLE
// game_speed := 7 ;
19398: LD_ADDR_OWVAR 65
19402: PUSH
19403: LD_INT 7
19405: ST_TO_ADDR
// end ;
19406: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19407: LD_EXP 62
19411: PUSH
19412: LD_EXP 69
19416: AND
19417: IFFALSE 19619
19419: GO 19421
19421: DISABLE
19422: LD_INT 0
19424: PPUSH
19425: PPUSH
19426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: LD_INT 81
19434: PUSH
19435: LD_OWVAR 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 21
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 69
19462: ST_TO_ADDR
// if not tmp then
19463: LD_VAR 0 3
19467: NOT
19468: IFFALSE 19472
// exit ;
19470: GO 19619
// if tmp > 5 then
19472: LD_VAR 0 3
19476: PUSH
19477: LD_INT 5
19479: GREATER
19480: IFFALSE 19492
// k := 5 else
19482: LD_ADDR_VAR 0 2
19486: PUSH
19487: LD_INT 5
19489: ST_TO_ADDR
19490: GO 19502
// k := tmp ;
19492: LD_ADDR_VAR 0 2
19496: PUSH
19497: LD_VAR 0 3
19501: ST_TO_ADDR
// for i := 1 to k do
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: DOUBLE
19508: LD_INT 1
19510: DEC
19511: ST_TO_ADDR
19512: LD_VAR 0 2
19516: PUSH
19517: FOR_TO
19518: IFFALSE 19617
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19520: LD_VAR 0 3
19524: PUSH
19525: LD_VAR 0 1
19529: ARRAY
19530: PPUSH
19531: LD_VAR 0 1
19535: PUSH
19536: LD_INT 4
19538: MOD
19539: PUSH
19540: LD_INT 1
19542: PLUS
19543: PPUSH
19544: CALL_OW 259
19548: PUSH
19549: LD_INT 10
19551: LESS
19552: IFFALSE 19615
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19554: LD_VAR 0 3
19558: PUSH
19559: LD_VAR 0 1
19563: ARRAY
19564: PPUSH
19565: LD_VAR 0 1
19569: PUSH
19570: LD_INT 4
19572: MOD
19573: PUSH
19574: LD_INT 1
19576: PLUS
19577: PPUSH
19578: LD_VAR 0 3
19582: PUSH
19583: LD_VAR 0 1
19587: ARRAY
19588: PPUSH
19589: LD_VAR 0 1
19593: PUSH
19594: LD_INT 4
19596: MOD
19597: PUSH
19598: LD_INT 1
19600: PLUS
19601: PPUSH
19602: CALL_OW 259
19606: PUSH
19607: LD_INT 1
19609: PLUS
19610: PPUSH
19611: CALL_OW 237
19615: GO 19517
19617: POP
19618: POP
// end ;
19619: PPOPN 3
19621: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19622: LD_EXP 62
19626: PUSH
19627: LD_EXP 70
19631: AND
19632: IFFALSE 19652
19634: GO 19636
19636: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19637: LD_INT 4
19639: PPUSH
19640: LD_OWVAR 2
19644: PPUSH
19645: LD_INT 0
19647: PPUSH
19648: CALL_OW 324
19652: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19653: LD_EXP 62
19657: PUSH
19658: LD_EXP 99
19662: AND
19663: IFFALSE 19683
19665: GO 19667
19667: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19668: LD_INT 19
19670: PPUSH
19671: LD_OWVAR 2
19675: PPUSH
19676: LD_INT 0
19678: PPUSH
19679: CALL_OW 324
19683: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19684: LD_EXP 62
19688: PUSH
19689: LD_EXP 71
19693: AND
19694: IFFALSE 19796
19696: GO 19698
19698: DISABLE
19699: LD_INT 0
19701: PPUSH
19702: PPUSH
// begin enable ;
19703: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19704: LD_ADDR_VAR 0 2
19708: PUSH
19709: LD_INT 22
19711: PUSH
19712: LD_OWVAR 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 34
19726: PUSH
19727: LD_INT 11
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 34
19736: PUSH
19737: LD_INT 30
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PPUSH
19753: CALL_OW 69
19757: ST_TO_ADDR
// if not tmp then
19758: LD_VAR 0 2
19762: NOT
19763: IFFALSE 19767
// exit ;
19765: GO 19796
// for i in tmp do
19767: LD_ADDR_VAR 0 1
19771: PUSH
19772: LD_VAR 0 2
19776: PUSH
19777: FOR_IN
19778: IFFALSE 19794
// begin SetLives ( i , 0 ) ;
19780: LD_VAR 0 1
19784: PPUSH
19785: LD_INT 0
19787: PPUSH
19788: CALL_OW 234
// end ;
19792: GO 19777
19794: POP
19795: POP
// end ;
19796: PPOPN 2
19798: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19799: LD_EXP 62
19803: PUSH
19804: LD_EXP 72
19808: AND
19809: IFFALSE 19829
19811: GO 19813
19813: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19814: LD_INT 32
19816: PPUSH
19817: LD_OWVAR 2
19821: PPUSH
19822: LD_INT 0
19824: PPUSH
19825: CALL_OW 324
19829: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19830: LD_EXP 62
19834: PUSH
19835: LD_EXP 73
19839: AND
19840: IFFALSE 20021
19842: GO 19844
19844: DISABLE
19845: LD_INT 0
19847: PPUSH
19848: PPUSH
19849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19850: LD_ADDR_VAR 0 2
19854: PUSH
19855: LD_INT 22
19857: PUSH
19858: LD_OWVAR 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 33
19869: PUSH
19870: LD_INT 3
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL_OW 69
19885: ST_TO_ADDR
// if not tmp then
19886: LD_VAR 0 2
19890: NOT
19891: IFFALSE 19895
// exit ;
19893: GO 20021
// side := 0 ;
19895: LD_ADDR_VAR 0 3
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// for i := 1 to 8 do
19903: LD_ADDR_VAR 0 1
19907: PUSH
19908: DOUBLE
19909: LD_INT 1
19911: DEC
19912: ST_TO_ADDR
19913: LD_INT 8
19915: PUSH
19916: FOR_TO
19917: IFFALSE 19965
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19919: LD_OWVAR 2
19923: PUSH
19924: LD_VAR 0 1
19928: NONEQUAL
19929: PUSH
19930: LD_OWVAR 2
19934: PPUSH
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL_OW 81
19944: PUSH
19945: LD_INT 2
19947: EQUAL
19948: AND
19949: IFFALSE 19963
// begin side := i ;
19951: LD_ADDR_VAR 0 3
19955: PUSH
19956: LD_VAR 0 1
19960: ST_TO_ADDR
// break ;
19961: GO 19965
// end ;
19963: GO 19916
19965: POP
19966: POP
// if not side then
19967: LD_VAR 0 3
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20021
// for i := 1 to tmp do
19976: LD_ADDR_VAR 0 1
19980: PUSH
19981: DOUBLE
19982: LD_INT 1
19984: DEC
19985: ST_TO_ADDR
19986: LD_VAR 0 2
19990: PUSH
19991: FOR_TO
19992: IFFALSE 20019
// if Prob ( 60 ) then
19994: LD_INT 60
19996: PPUSH
19997: CALL_OW 13
20001: IFFALSE 20017
// SetSide ( i , side ) ;
20003: LD_VAR 0 1
20007: PPUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: CALL_OW 235
20017: GO 19991
20019: POP
20020: POP
// end ;
20021: PPOPN 3
20023: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20024: LD_EXP 62
20028: PUSH
20029: LD_EXP 75
20033: AND
20034: IFFALSE 20153
20036: GO 20038
20038: DISABLE
20039: LD_INT 0
20041: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20042: LD_ADDR_VAR 0 1
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_OWVAR 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 21
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 3
20071: PUSH
20072: LD_INT 23
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 69
20095: PUSH
20096: FOR_IN
20097: IFFALSE 20151
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 257
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: LD_INT 4
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: IN
20127: IFFALSE 20149
// SetClass ( un , rand ( 1 , 4 ) ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_INT 1
20136: PPUSH
20137: LD_INT 4
20139: PPUSH
20140: CALL_OW 12
20144: PPUSH
20145: CALL_OW 336
20149: GO 20096
20151: POP
20152: POP
// end ;
20153: PPOPN 1
20155: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20156: LD_EXP 62
20160: PUSH
20161: LD_EXP 74
20165: AND
20166: IFFALSE 20245
20168: GO 20170
20170: DISABLE
20171: LD_INT 0
20173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20174: LD_ADDR_VAR 0 1
20178: PUSH
20179: LD_INT 22
20181: PUSH
20182: LD_OWVAR 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 21
20193: PUSH
20194: LD_INT 3
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PPUSH
20205: CALL_OW 69
20209: ST_TO_ADDR
// if not tmp then
20210: LD_VAR 0 1
20214: NOT
20215: IFFALSE 20219
// exit ;
20217: GO 20245
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20219: LD_VAR 0 1
20223: PUSH
20224: LD_INT 1
20226: PPUSH
20227: LD_VAR 0 1
20231: PPUSH
20232: CALL_OW 12
20236: ARRAY
20237: PPUSH
20238: LD_INT 100
20240: PPUSH
20241: CALL_OW 234
// end ;
20245: PPOPN 1
20247: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20248: LD_EXP 62
20252: PUSH
20253: LD_EXP 76
20257: AND
20258: IFFALSE 20356
20260: GO 20262
20262: DISABLE
20263: LD_INT 0
20265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20266: LD_ADDR_VAR 0 1
20270: PUSH
20271: LD_INT 22
20273: PUSH
20274: LD_OWVAR 2
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 21
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PPUSH
20297: CALL_OW 69
20301: ST_TO_ADDR
// if not tmp then
20302: LD_VAR 0 1
20306: NOT
20307: IFFALSE 20311
// exit ;
20309: GO 20356
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20311: LD_VAR 0 1
20315: PUSH
20316: LD_INT 1
20318: PPUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 12
20328: ARRAY
20329: PPUSH
20330: LD_INT 1
20332: PPUSH
20333: LD_INT 4
20335: PPUSH
20336: CALL_OW 12
20340: PPUSH
20341: LD_INT 3000
20343: PPUSH
20344: LD_INT 9000
20346: PPUSH
20347: CALL_OW 12
20351: PPUSH
20352: CALL_OW 492
// end ;
20356: PPOPN 1
20358: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20359: LD_EXP 62
20363: PUSH
20364: LD_EXP 77
20368: AND
20369: IFFALSE 20389
20371: GO 20373
20373: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20374: LD_INT 1
20376: PPUSH
20377: LD_OWVAR 2
20381: PPUSH
20382: LD_INT 0
20384: PPUSH
20385: CALL_OW 324
20389: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20390: LD_EXP 62
20394: PUSH
20395: LD_EXP 78
20399: AND
20400: IFFALSE 20483
20402: GO 20404
20404: DISABLE
20405: LD_INT 0
20407: PPUSH
20408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20409: LD_ADDR_VAR 0 2
20413: PUSH
20414: LD_INT 22
20416: PUSH
20417: LD_OWVAR 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 21
20428: PUSH
20429: LD_INT 3
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL_OW 69
20444: ST_TO_ADDR
// if not tmp then
20445: LD_VAR 0 2
20449: NOT
20450: IFFALSE 20454
// exit ;
20452: GO 20483
// for i in tmp do
20454: LD_ADDR_VAR 0 1
20458: PUSH
20459: LD_VAR 0 2
20463: PUSH
20464: FOR_IN
20465: IFFALSE 20481
// SetBLevel ( i , 10 ) ;
20467: LD_VAR 0 1
20471: PPUSH
20472: LD_INT 10
20474: PPUSH
20475: CALL_OW 241
20479: GO 20464
20481: POP
20482: POP
// end ;
20483: PPOPN 2
20485: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20486: LD_EXP 62
20490: PUSH
20491: LD_EXP 79
20495: AND
20496: IFFALSE 20607
20498: GO 20500
20500: DISABLE
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
20505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_INT 22
20513: PUSH
20514: LD_OWVAR 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 25
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PPUSH
20537: CALL_OW 69
20541: ST_TO_ADDR
// if not tmp then
20542: LD_VAR 0 3
20546: NOT
20547: IFFALSE 20551
// exit ;
20549: GO 20607
// un := tmp [ rand ( 1 , tmp ) ] ;
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 1
20563: PPUSH
20564: LD_VAR 0 3
20568: PPUSH
20569: CALL_OW 12
20573: ARRAY
20574: ST_TO_ADDR
// if Crawls ( un ) then
20575: LD_VAR 0 2
20579: PPUSH
20580: CALL_OW 318
20584: IFFALSE 20595
// ComWalk ( un ) ;
20586: LD_VAR 0 2
20590: PPUSH
20591: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20595: LD_VAR 0 2
20599: PPUSH
20600: LD_INT 5
20602: PPUSH
20603: CALL_OW 336
// end ;
20607: PPOPN 3
20609: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20610: LD_EXP 62
20614: PUSH
20615: LD_EXP 80
20619: AND
20620: PUSH
20621: LD_OWVAR 67
20625: PUSH
20626: LD_INT 4
20628: LESS
20629: AND
20630: IFFALSE 20649
20632: GO 20634
20634: DISABLE
// begin Difficulty := Difficulty + 1 ;
20635: LD_ADDR_OWVAR 67
20639: PUSH
20640: LD_OWVAR 67
20644: PUSH
20645: LD_INT 1
20647: PLUS
20648: ST_TO_ADDR
// end ;
20649: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20650: LD_EXP 62
20654: PUSH
20655: LD_EXP 81
20659: AND
20660: IFFALSE 20763
20662: GO 20664
20664: DISABLE
20665: LD_INT 0
20667: PPUSH
// begin for i := 1 to 5 do
20668: LD_ADDR_VAR 0 1
20672: PUSH
20673: DOUBLE
20674: LD_INT 1
20676: DEC
20677: ST_TO_ADDR
20678: LD_INT 5
20680: PUSH
20681: FOR_TO
20682: IFFALSE 20761
// begin uc_nation := nation_nature ;
20684: LD_ADDR_OWVAR 21
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// uc_side := 0 ;
20692: LD_ADDR_OWVAR 20
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20700: LD_ADDR_OWVAR 29
20704: PUSH
20705: LD_INT 12
20707: PUSH
20708: LD_INT 12
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: ST_TO_ADDR
// hc_agressivity := 20 ;
20715: LD_ADDR_OWVAR 35
20719: PUSH
20720: LD_INT 20
20722: ST_TO_ADDR
// hc_class := class_tiger ;
20723: LD_ADDR_OWVAR 28
20727: PUSH
20728: LD_INT 14
20730: ST_TO_ADDR
// hc_gallery :=  ;
20731: LD_ADDR_OWVAR 33
20735: PUSH
20736: LD_STRING 
20738: ST_TO_ADDR
// hc_name :=  ;
20739: LD_ADDR_OWVAR 26
20743: PUSH
20744: LD_STRING 
20746: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20747: CALL_OW 44
20751: PPUSH
20752: LD_INT 0
20754: PPUSH
20755: CALL_OW 51
// end ;
20759: GO 20681
20761: POP
20762: POP
// end ;
20763: PPOPN 1
20765: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20766: LD_EXP 62
20770: PUSH
20771: LD_EXP 82
20775: AND
20776: IFFALSE 20785
20778: GO 20780
20780: DISABLE
// StreamSibBomb ;
20781: CALL 20786 0 0
20785: END
// export function StreamSibBomb ; var i , x , y ; begin
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// result := false ;
20792: LD_ADDR_VAR 0 1
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// for i := 1 to 16 do
20800: LD_ADDR_VAR 0 2
20804: PUSH
20805: DOUBLE
20806: LD_INT 1
20808: DEC
20809: ST_TO_ADDR
20810: LD_INT 16
20812: PUSH
20813: FOR_TO
20814: IFFALSE 21013
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20816: LD_ADDR_VAR 0 3
20820: PUSH
20821: LD_INT 10
20823: PUSH
20824: LD_INT 20
20826: PUSH
20827: LD_INT 30
20829: PUSH
20830: LD_INT 40
20832: PUSH
20833: LD_INT 50
20835: PUSH
20836: LD_INT 60
20838: PUSH
20839: LD_INT 70
20841: PUSH
20842: LD_INT 80
20844: PUSH
20845: LD_INT 90
20847: PUSH
20848: LD_INT 100
20850: PUSH
20851: LD_INT 110
20853: PUSH
20854: LD_INT 120
20856: PUSH
20857: LD_INT 130
20859: PUSH
20860: LD_INT 140
20862: PUSH
20863: LD_INT 150
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 15
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20895: LD_ADDR_VAR 0 4
20899: PUSH
20900: LD_INT 10
20902: PUSH
20903: LD_INT 20
20905: PUSH
20906: LD_INT 30
20908: PUSH
20909: LD_INT 40
20911: PUSH
20912: LD_INT 50
20914: PUSH
20915: LD_INT 60
20917: PUSH
20918: LD_INT 70
20920: PUSH
20921: LD_INT 80
20923: PUSH
20924: LD_INT 90
20926: PUSH
20927: LD_INT 100
20929: PUSH
20930: LD_INT 110
20932: PUSH
20933: LD_INT 120
20935: PUSH
20936: LD_INT 130
20938: PUSH
20939: LD_INT 140
20941: PUSH
20942: LD_INT 150
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: PPUSH
20965: LD_INT 15
20967: PPUSH
20968: CALL_OW 12
20972: ARRAY
20973: ST_TO_ADDR
// if ValidHex ( x , y ) then
20974: LD_VAR 0 3
20978: PPUSH
20979: LD_VAR 0 4
20983: PPUSH
20984: CALL_OW 488
20988: IFFALSE 21011
// begin result := [ x , y ] ;
20990: LD_ADDR_VAR 0 1
20994: PUSH
20995: LD_VAR 0 3
20999: PUSH
21000: LD_VAR 0 4
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: ST_TO_ADDR
// break ;
21009: GO 21013
// end ; end ;
21011: GO 20813
21013: POP
21014: POP
// if result then
21015: LD_VAR 0 1
21019: IFFALSE 21079
// begin ToLua ( playSibBomb() ) ;
21021: LD_STRING playSibBomb()
21023: PPUSH
21024: CALL_OW 559
// wait ( 0 0$14 ) ;
21028: LD_INT 490
21030: PPUSH
21031: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21035: LD_VAR 0 1
21039: PUSH
21040: LD_INT 1
21042: ARRAY
21043: PPUSH
21044: LD_VAR 0 1
21048: PUSH
21049: LD_INT 2
21051: ARRAY
21052: PPUSH
21053: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21057: LD_VAR 0 1
21061: PUSH
21062: LD_INT 1
21064: ARRAY
21065: PPUSH
21066: LD_VAR 0 1
21070: PUSH
21071: LD_INT 2
21073: ARRAY
21074: PPUSH
21075: CALL_OW 429
// end ; end ;
21079: LD_VAR 0 1
21083: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21084: LD_EXP 62
21088: PUSH
21089: LD_EXP 84
21093: AND
21094: IFFALSE 21106
21096: GO 21098
21098: DISABLE
// YouLost (  ) ;
21099: LD_STRING 
21101: PPUSH
21102: CALL_OW 104
21106: END
// every 0 0$1 trigger StreamModeActive and sFog do
21107: LD_EXP 62
21111: PUSH
21112: LD_EXP 83
21116: AND
21117: IFFALSE 21131
21119: GO 21121
21121: DISABLE
// FogOff ( your_side ) ;
21122: LD_OWVAR 2
21126: PPUSH
21127: CALL_OW 344
21131: END
// every 0 0$1 trigger StreamModeActive and sSun do
21132: LD_EXP 62
21136: PUSH
21137: LD_EXP 85
21141: AND
21142: IFFALSE 21170
21144: GO 21146
21146: DISABLE
// begin solar_recharge_percent := 0 ;
21147: LD_ADDR_OWVAR 79
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21155: LD_INT 10500
21157: PPUSH
21158: CALL_OW 67
// solar_recharge_percent := 100 ;
21162: LD_ADDR_OWVAR 79
21166: PUSH
21167: LD_INT 100
21169: ST_TO_ADDR
// end ;
21170: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21171: LD_EXP 62
21175: PUSH
21176: LD_EXP 86
21180: AND
21181: IFFALSE 21420
21183: GO 21185
21185: DISABLE
21186: LD_INT 0
21188: PPUSH
21189: PPUSH
21190: PPUSH
// begin tmp := [ ] ;
21191: LD_ADDR_VAR 0 3
21195: PUSH
21196: EMPTY
21197: ST_TO_ADDR
// for i := 1 to 6 do
21198: LD_ADDR_VAR 0 1
21202: PUSH
21203: DOUBLE
21204: LD_INT 1
21206: DEC
21207: ST_TO_ADDR
21208: LD_INT 6
21210: PUSH
21211: FOR_TO
21212: IFFALSE 21317
// begin uc_nation := nation_nature ;
21214: LD_ADDR_OWVAR 21
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// uc_side := 0 ;
21222: LD_ADDR_OWVAR 20
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21230: LD_ADDR_OWVAR 29
21234: PUSH
21235: LD_INT 12
21237: PUSH
21238: LD_INT 12
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: ST_TO_ADDR
// hc_agressivity := 20 ;
21245: LD_ADDR_OWVAR 35
21249: PUSH
21250: LD_INT 20
21252: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21253: LD_ADDR_OWVAR 28
21257: PUSH
21258: LD_INT 17
21260: ST_TO_ADDR
// hc_gallery :=  ;
21261: LD_ADDR_OWVAR 33
21265: PUSH
21266: LD_STRING 
21268: ST_TO_ADDR
// hc_name :=  ;
21269: LD_ADDR_OWVAR 26
21273: PUSH
21274: LD_STRING 
21276: ST_TO_ADDR
// un := CreateHuman ;
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: CALL_OW 44
21286: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21287: LD_VAR 0 2
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL_OW 51
// tmp := tmp ^ un ;
21299: LD_ADDR_VAR 0 3
21303: PUSH
21304: LD_VAR 0 3
21308: PUSH
21309: LD_VAR 0 2
21313: ADD
21314: ST_TO_ADDR
// end ;
21315: GO 21211
21317: POP
21318: POP
// repeat wait ( 0 0$1 ) ;
21319: LD_INT 35
21321: PPUSH
21322: CALL_OW 67
// for un in tmp do
21326: LD_ADDR_VAR 0 2
21330: PUSH
21331: LD_VAR 0 3
21335: PUSH
21336: FOR_IN
21337: IFFALSE 21411
// begin if IsDead ( un ) then
21339: LD_VAR 0 2
21343: PPUSH
21344: CALL_OW 301
21348: IFFALSE 21368
// begin tmp := tmp diff un ;
21350: LD_ADDR_VAR 0 3
21354: PUSH
21355: LD_VAR 0 3
21359: PUSH
21360: LD_VAR 0 2
21364: DIFF
21365: ST_TO_ADDR
// continue ;
21366: GO 21336
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21368: LD_VAR 0 2
21372: PPUSH
21373: LD_INT 3
21375: PUSH
21376: LD_INT 22
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PPUSH
21390: CALL_OW 69
21394: PPUSH
21395: LD_VAR 0 2
21399: PPUSH
21400: CALL_OW 74
21404: PPUSH
21405: CALL_OW 115
// end ;
21409: GO 21336
21411: POP
21412: POP
// until not tmp ;
21413: LD_VAR 0 3
21417: NOT
21418: IFFALSE 21319
// end ;
21420: PPOPN 3
21422: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21423: LD_EXP 62
21427: PUSH
21428: LD_EXP 87
21432: AND
21433: IFFALSE 21487
21435: GO 21437
21437: DISABLE
// begin ToLua ( displayTroll(); ) ;
21438: LD_STRING displayTroll();
21440: PPUSH
21441: CALL_OW 559
// wait ( 3 3$00 ) ;
21445: LD_INT 6300
21447: PPUSH
21448: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21452: LD_STRING hideTroll();
21454: PPUSH
21455: CALL_OW 559
// wait ( 1 1$00 ) ;
21459: LD_INT 2100
21461: PPUSH
21462: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21466: LD_STRING displayTroll();
21468: PPUSH
21469: CALL_OW 559
// wait ( 1 1$00 ) ;
21473: LD_INT 2100
21475: PPUSH
21476: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21480: LD_STRING hideTroll();
21482: PPUSH
21483: CALL_OW 559
// end ;
21487: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21488: LD_EXP 62
21492: PUSH
21493: LD_EXP 88
21497: AND
21498: IFFALSE 21561
21500: GO 21502
21502: DISABLE
21503: LD_INT 0
21505: PPUSH
// begin p := 0 ;
21506: LD_ADDR_VAR 0 1
21510: PUSH
21511: LD_INT 0
21513: ST_TO_ADDR
// repeat game_speed := 1 ;
21514: LD_ADDR_OWVAR 65
21518: PUSH
21519: LD_INT 1
21521: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21522: LD_INT 35
21524: PPUSH
21525: CALL_OW 67
// p := p + 1 ;
21529: LD_ADDR_VAR 0 1
21533: PUSH
21534: LD_VAR 0 1
21538: PUSH
21539: LD_INT 1
21541: PLUS
21542: ST_TO_ADDR
// until p >= 60 ;
21543: LD_VAR 0 1
21547: PUSH
21548: LD_INT 60
21550: GREATEREQUAL
21551: IFFALSE 21514
// game_speed := 4 ;
21553: LD_ADDR_OWVAR 65
21557: PUSH
21558: LD_INT 4
21560: ST_TO_ADDR
// end ;
21561: PPOPN 1
21563: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21564: LD_EXP 62
21568: PUSH
21569: LD_EXP 89
21573: AND
21574: IFFALSE 21720
21576: GO 21578
21578: DISABLE
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21583: LD_ADDR_VAR 0 1
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_OWVAR 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 30
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 30
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PPUSH
21632: CALL_OW 69
21636: ST_TO_ADDR
// if not depot then
21637: LD_VAR 0 1
21641: NOT
21642: IFFALSE 21646
// exit ;
21644: GO 21720
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21646: LD_ADDR_VAR 0 2
21650: PUSH
21651: LD_VAR 0 1
21655: PUSH
21656: LD_INT 1
21658: PPUSH
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 12
21668: ARRAY
21669: PPUSH
21670: CALL_OW 274
21674: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21675: LD_VAR 0 2
21679: PPUSH
21680: LD_INT 1
21682: PPUSH
21683: LD_INT 0
21685: PPUSH
21686: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21690: LD_VAR 0 2
21694: PPUSH
21695: LD_INT 2
21697: PPUSH
21698: LD_INT 0
21700: PPUSH
21701: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21705: LD_VAR 0 2
21709: PPUSH
21710: LD_INT 3
21712: PPUSH
21713: LD_INT 0
21715: PPUSH
21716: CALL_OW 277
// end ;
21720: PPOPN 2
21722: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21723: LD_EXP 62
21727: PUSH
21728: LD_EXP 90
21732: AND
21733: IFFALSE 21830
21735: GO 21737
21737: DISABLE
21738: LD_INT 0
21740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21741: LD_ADDR_VAR 0 1
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 21
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: LD_INT 23
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: PPUSH
21790: CALL_OW 69
21794: ST_TO_ADDR
// if not tmp then
21795: LD_VAR 0 1
21799: NOT
21800: IFFALSE 21804
// exit ;
21802: GO 21830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21804: LD_VAR 0 1
21808: PUSH
21809: LD_INT 1
21811: PPUSH
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL_OW 12
21821: ARRAY
21822: PPUSH
21823: LD_INT 200
21825: PPUSH
21826: CALL_OW 234
// end ;
21830: PPOPN 1
21832: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21833: LD_EXP 62
21837: PUSH
21838: LD_EXP 91
21842: AND
21843: IFFALSE 21922
21845: GO 21847
21847: DISABLE
21848: LD_INT 0
21850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21851: LD_ADDR_VAR 0 1
21855: PUSH
21856: LD_INT 22
21858: PUSH
21859: LD_OWVAR 2
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 21
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PPUSH
21882: CALL_OW 69
21886: ST_TO_ADDR
// if not tmp then
21887: LD_VAR 0 1
21891: NOT
21892: IFFALSE 21896
// exit ;
21894: GO 21922
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21896: LD_VAR 0 1
21900: PUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 12
21913: ARRAY
21914: PPUSH
21915: LD_INT 60
21917: PPUSH
21918: CALL_OW 234
// end ;
21922: PPOPN 1
21924: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21925: LD_EXP 62
21929: PUSH
21930: LD_EXP 92
21934: AND
21935: IFFALSE 22034
21937: GO 21939
21939: DISABLE
21940: LD_INT 0
21942: PPUSH
21943: PPUSH
// begin enable ;
21944: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21945: LD_ADDR_VAR 0 1
21949: PUSH
21950: LD_INT 22
21952: PUSH
21953: LD_OWVAR 2
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 61
21964: PUSH
21965: EMPTY
21966: LIST
21967: PUSH
21968: LD_INT 33
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: PPUSH
21983: CALL_OW 69
21987: ST_TO_ADDR
// if not tmp then
21988: LD_VAR 0 1
21992: NOT
21993: IFFALSE 21997
// exit ;
21995: GO 22034
// for i in tmp do
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_VAR 0 1
22006: PUSH
22007: FOR_IN
22008: IFFALSE 22032
// if IsControledBy ( i ) then
22010: LD_VAR 0 2
22014: PPUSH
22015: CALL_OW 312
22019: IFFALSE 22030
// ComUnlink ( i ) ;
22021: LD_VAR 0 2
22025: PPUSH
22026: CALL_OW 136
22030: GO 22007
22032: POP
22033: POP
// end ;
22034: PPOPN 2
22036: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22037: LD_EXP 62
22041: PUSH
22042: LD_EXP 93
22046: AND
22047: IFFALSE 22187
22049: GO 22051
22051: DISABLE
22052: LD_INT 0
22054: PPUSH
22055: PPUSH
// begin ToLua ( displayPowell(); ) ;
22056: LD_STRING displayPowell();
22058: PPUSH
22059: CALL_OW 559
// uc_side := 0 ;
22063: LD_ADDR_OWVAR 20
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// uc_nation := 2 ;
22071: LD_ADDR_OWVAR 21
22075: PUSH
22076: LD_INT 2
22078: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22079: LD_ADDR_OWVAR 37
22083: PUSH
22084: LD_INT 14
22086: ST_TO_ADDR
// vc_engine := engine_siberite ;
22087: LD_ADDR_OWVAR 39
22091: PUSH
22092: LD_INT 3
22094: ST_TO_ADDR
// vc_control := control_apeman ;
22095: LD_ADDR_OWVAR 38
22099: PUSH
22100: LD_INT 5
22102: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22103: LD_ADDR_OWVAR 40
22107: PUSH
22108: LD_INT 29
22110: ST_TO_ADDR
// un := CreateVehicle ;
22111: LD_ADDR_VAR 0 2
22115: PUSH
22116: CALL_OW 45
22120: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_INT 1
22128: PPUSH
22129: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22140: LD_VAR 0 2
22144: PPUSH
22145: LD_INT 22
22147: PUSH
22148: LD_OWVAR 2
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PPUSH
22157: CALL_OW 69
22161: PPUSH
22162: LD_VAR 0 2
22166: PPUSH
22167: CALL_OW 74
22171: PPUSH
22172: CALL_OW 115
// until IsDead ( un ) ;
22176: LD_VAR 0 2
22180: PPUSH
22181: CALL_OW 301
22185: IFFALSE 22133
// end ;
22187: PPOPN 2
22189: END
// every 0 0$1 trigger StreamModeActive and sStu do
22190: LD_EXP 62
22194: PUSH
22195: LD_EXP 101
22199: AND
22200: IFFALSE 22216
22202: GO 22204
22204: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22205: LD_STRING displayStucuk();
22207: PPUSH
22208: CALL_OW 559
// ResetFog ;
22212: CALL_OW 335
// end ;
22216: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22217: LD_EXP 62
22221: PUSH
22222: LD_EXP 94
22226: AND
22227: IFFALSE 22368
22229: GO 22231
22231: DISABLE
22232: LD_INT 0
22234: PPUSH
22235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 21
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: ST_TO_ADDR
// if not tmp then
22272: LD_VAR 0 2
22276: NOT
22277: IFFALSE 22281
// exit ;
22279: GO 22368
// un := tmp [ rand ( 1 , tmp ) ] ;
22281: LD_ADDR_VAR 0 1
22285: PUSH
22286: LD_VAR 0 2
22290: PUSH
22291: LD_INT 1
22293: PPUSH
22294: LD_VAR 0 2
22298: PPUSH
22299: CALL_OW 12
22303: ARRAY
22304: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22305: LD_VAR 0 1
22309: PPUSH
22310: LD_INT 0
22312: PPUSH
22313: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22317: LD_VAR 0 1
22321: PPUSH
22322: LD_OWVAR 3
22326: PUSH
22327: LD_VAR 0 1
22331: DIFF
22332: PPUSH
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL_OW 74
22342: PPUSH
22343: CALL_OW 115
// wait ( 0 0$20 ) ;
22347: LD_INT 700
22349: PPUSH
22350: CALL_OW 67
// SetSide ( un , your_side ) ;
22354: LD_VAR 0 1
22358: PPUSH
22359: LD_OWVAR 2
22363: PPUSH
22364: CALL_OW 235
// end ;
22368: PPOPN 2
22370: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22371: LD_EXP 62
22375: PUSH
22376: LD_EXP 95
22380: AND
22381: IFFALSE 22487
22383: GO 22385
22385: DISABLE
22386: LD_INT 0
22388: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22389: LD_ADDR_VAR 0 1
22393: PUSH
22394: LD_INT 22
22396: PUSH
22397: LD_OWVAR 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 30
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 30
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PPUSH
22438: CALL_OW 69
22442: ST_TO_ADDR
// if not depot then
22443: LD_VAR 0 1
22447: NOT
22448: IFFALSE 22452
// exit ;
22450: GO 22487
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22452: LD_VAR 0 1
22456: PUSH
22457: LD_INT 1
22459: ARRAY
22460: PPUSH
22461: CALL_OW 250
22465: PPUSH
22466: LD_VAR 0 1
22470: PUSH
22471: LD_INT 1
22473: ARRAY
22474: PPUSH
22475: CALL_OW 251
22479: PPUSH
22480: LD_INT 70
22482: PPUSH
22483: CALL_OW 495
// end ;
22487: PPOPN 1
22489: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22490: LD_EXP 62
22494: PUSH
22495: LD_EXP 96
22499: AND
22500: IFFALSE 22711
22502: GO 22504
22504: DISABLE
22505: LD_INT 0
22507: PPUSH
22508: PPUSH
22509: PPUSH
22510: PPUSH
22511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22512: LD_ADDR_VAR 0 5
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_OWVAR 2
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 21
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PPUSH
22543: CALL_OW 69
22547: ST_TO_ADDR
// if not tmp then
22548: LD_VAR 0 5
22552: NOT
22553: IFFALSE 22557
// exit ;
22555: GO 22711
// for i in tmp do
22557: LD_ADDR_VAR 0 1
22561: PUSH
22562: LD_VAR 0 5
22566: PUSH
22567: FOR_IN
22568: IFFALSE 22709
// begin d := rand ( 0 , 5 ) ;
22570: LD_ADDR_VAR 0 4
22574: PUSH
22575: LD_INT 0
22577: PPUSH
22578: LD_INT 5
22580: PPUSH
22581: CALL_OW 12
22585: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22586: LD_ADDR_VAR 0 2
22590: PUSH
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL_OW 250
22600: PPUSH
22601: LD_VAR 0 4
22605: PPUSH
22606: LD_INT 3
22608: PPUSH
22609: LD_INT 12
22611: PPUSH
22612: CALL_OW 12
22616: PPUSH
22617: CALL_OW 272
22621: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22622: LD_ADDR_VAR 0 3
22626: PUSH
22627: LD_VAR 0 1
22631: PPUSH
22632: CALL_OW 251
22636: PPUSH
22637: LD_VAR 0 4
22641: PPUSH
22642: LD_INT 3
22644: PPUSH
22645: LD_INT 12
22647: PPUSH
22648: CALL_OW 12
22652: PPUSH
22653: CALL_OW 273
22657: ST_TO_ADDR
// if ValidHex ( x , y ) then
22658: LD_VAR 0 2
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: CALL_OW 488
22672: IFFALSE 22707
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22674: LD_VAR 0 1
22678: PPUSH
22679: LD_VAR 0 2
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: LD_INT 3
22691: PPUSH
22692: LD_INT 6
22694: PPUSH
22695: CALL_OW 12
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 483
// end ;
22707: GO 22567
22709: POP
22710: POP
// end ;
22711: PPOPN 5
22713: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22714: LD_EXP 62
22718: PUSH
22719: LD_EXP 97
22723: AND
22724: IFFALSE 22818
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22733: LD_ADDR_VAR 0 2
22737: PUSH
22738: LD_INT 22
22740: PUSH
22741: LD_OWVAR 2
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 32
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 21
22762: PUSH
22763: LD_INT 2
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: LIST
22774: PPUSH
22775: CALL_OW 69
22779: ST_TO_ADDR
// if not tmp then
22780: LD_VAR 0 2
22784: NOT
22785: IFFALSE 22789
// exit ;
22787: GO 22818
// for i in tmp do
22789: LD_ADDR_VAR 0 1
22793: PUSH
22794: LD_VAR 0 2
22798: PUSH
22799: FOR_IN
22800: IFFALSE 22816
// SetFuel ( i , 0 ) ;
22802: LD_VAR 0 1
22806: PPUSH
22807: LD_INT 0
22809: PPUSH
22810: CALL_OW 240
22814: GO 22799
22816: POP
22817: POP
// end ;
22818: PPOPN 2
22820: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22821: LD_EXP 62
22825: PUSH
22826: LD_EXP 98
22830: AND
22831: IFFALSE 22897
22833: GO 22835
22835: DISABLE
22836: LD_INT 0
22838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22839: LD_ADDR_VAR 0 1
22843: PUSH
22844: LD_INT 22
22846: PUSH
22847: LD_OWVAR 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 30
22858: PUSH
22859: LD_INT 29
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 69
22874: ST_TO_ADDR
// if not tmp then
22875: LD_VAR 0 1
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22897
// DestroyUnit ( tmp [ 1 ] ) ;
22884: LD_VAR 0 1
22888: PUSH
22889: LD_INT 1
22891: ARRAY
22892: PPUSH
22893: CALL_OW 65
// end ;
22897: PPOPN 1
22899: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22900: LD_EXP 62
22904: PUSH
22905: LD_EXP 100
22909: AND
22910: IFFALSE 23039
22912: GO 22914
22914: DISABLE
22915: LD_INT 0
22917: PPUSH
// begin uc_side := 0 ;
22918: LD_ADDR_OWVAR 20
22922: PUSH
22923: LD_INT 0
22925: ST_TO_ADDR
// uc_nation := nation_arabian ;
22926: LD_ADDR_OWVAR 21
22930: PUSH
22931: LD_INT 2
22933: ST_TO_ADDR
// hc_gallery :=  ;
22934: LD_ADDR_OWVAR 33
22938: PUSH
22939: LD_STRING 
22941: ST_TO_ADDR
// hc_name :=  ;
22942: LD_ADDR_OWVAR 26
22946: PUSH
22947: LD_STRING 
22949: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22950: LD_INT 1
22952: PPUSH
22953: LD_INT 11
22955: PPUSH
22956: LD_INT 10
22958: PPUSH
22959: CALL_OW 380
// un := CreateHuman ;
22963: LD_ADDR_VAR 0 1
22967: PUSH
22968: CALL_OW 44
22972: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22973: LD_VAR 0 1
22977: PPUSH
22978: LD_INT 1
22980: PPUSH
22981: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22985: LD_INT 35
22987: PPUSH
22988: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22992: LD_VAR 0 1
22996: PPUSH
22997: LD_INT 22
22999: PUSH
23000: LD_OWVAR 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PPUSH
23009: CALL_OW 69
23013: PPUSH
23014: LD_VAR 0 1
23018: PPUSH
23019: CALL_OW 74
23023: PPUSH
23024: CALL_OW 115
// until IsDead ( un ) ;
23028: LD_VAR 0 1
23032: PPUSH
23033: CALL_OW 301
23037: IFFALSE 22985
// end ;
23039: PPOPN 1
23041: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23042: LD_EXP 62
23046: PUSH
23047: LD_EXP 102
23051: AND
23052: IFFALSE 23064
23054: GO 23056
23056: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23057: LD_STRING earthquake(getX(game), 0, 32)
23059: PPUSH
23060: CALL_OW 559
23064: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23065: LD_EXP 62
23069: PUSH
23070: LD_EXP 103
23074: AND
23075: IFFALSE 23166
23077: GO 23079
23079: DISABLE
23080: LD_INT 0
23082: PPUSH
// begin enable ;
23083: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23084: LD_ADDR_VAR 0 1
23088: PUSH
23089: LD_INT 22
23091: PUSH
23092: LD_OWVAR 2
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 21
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 33
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: PPUSH
23126: CALL_OW 69
23130: ST_TO_ADDR
// if not tmp then
23131: LD_VAR 0 1
23135: NOT
23136: IFFALSE 23140
// exit ;
23138: GO 23166
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23140: LD_VAR 0 1
23144: PUSH
23145: LD_INT 1
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 12
23157: ARRAY
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: CALL_OW 234
// end ;
23166: PPOPN 1
23168: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23169: LD_EXP 62
23173: PUSH
23174: LD_EXP 104
23178: AND
23179: IFFALSE 23320
23181: GO 23183
23183: DISABLE
23184: LD_INT 0
23186: PPUSH
23187: PPUSH
23188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_OWVAR 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 25
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: ST_TO_ADDR
// if not tmp then
23225: LD_VAR 0 3
23229: NOT
23230: IFFALSE 23234
// exit ;
23232: GO 23320
// un := tmp [ rand ( 1 , tmp ) ] ;
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: LD_VAR 0 3
23243: PUSH
23244: LD_INT 1
23246: PPUSH
23247: LD_VAR 0 3
23251: PPUSH
23252: CALL_OW 12
23256: ARRAY
23257: ST_TO_ADDR
// if Crawls ( un ) then
23258: LD_VAR 0 2
23262: PPUSH
23263: CALL_OW 318
23267: IFFALSE 23278
// ComWalk ( un ) ;
23269: LD_VAR 0 2
23273: PPUSH
23274: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23278: LD_VAR 0 2
23282: PPUSH
23283: LD_INT 9
23285: PPUSH
23286: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23290: LD_INT 28
23292: PPUSH
23293: LD_OWVAR 2
23297: PPUSH
23298: LD_INT 2
23300: PPUSH
23301: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23305: LD_INT 29
23307: PPUSH
23308: LD_OWVAR 2
23312: PPUSH
23313: LD_INT 2
23315: PPUSH
23316: CALL_OW 322
// end ;
23320: PPOPN 3
23322: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23323: LD_EXP 62
23327: PUSH
23328: LD_EXP 105
23332: AND
23333: IFFALSE 23444
23335: GO 23337
23337: DISABLE
23338: LD_INT 0
23340: PPUSH
23341: PPUSH
23342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23343: LD_ADDR_VAR 0 3
23347: PUSH
23348: LD_INT 22
23350: PUSH
23351: LD_OWVAR 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 25
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: ST_TO_ADDR
// if not tmp then
23379: LD_VAR 0 3
23383: NOT
23384: IFFALSE 23388
// exit ;
23386: GO 23444
// un := tmp [ rand ( 1 , tmp ) ] ;
23388: LD_ADDR_VAR 0 2
23392: PUSH
23393: LD_VAR 0 3
23397: PUSH
23398: LD_INT 1
23400: PPUSH
23401: LD_VAR 0 3
23405: PPUSH
23406: CALL_OW 12
23410: ARRAY
23411: ST_TO_ADDR
// if Crawls ( un ) then
23412: LD_VAR 0 2
23416: PPUSH
23417: CALL_OW 318
23421: IFFALSE 23432
// ComWalk ( un ) ;
23423: LD_VAR 0 2
23427: PPUSH
23428: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23432: LD_VAR 0 2
23436: PPUSH
23437: LD_INT 8
23439: PPUSH
23440: CALL_OW 336
// end ;
23444: PPOPN 3
23446: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23447: LD_EXP 62
23451: PUSH
23452: LD_EXP 106
23456: AND
23457: IFFALSE 23601
23459: GO 23461
23461: DISABLE
23462: LD_INT 0
23464: PPUSH
23465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_INT 22
23473: PUSH
23474: LD_OWVAR 2
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 21
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: PUSH
23496: LD_INT 34
23498: PUSH
23499: LD_INT 12
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 34
23508: PUSH
23509: LD_INT 51
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 34
23518: PUSH
23519: LD_INT 32
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: PPUSH
23537: CALL_OW 69
23541: ST_TO_ADDR
// if not tmp then
23542: LD_VAR 0 2
23546: NOT
23547: IFFALSE 23551
// exit ;
23549: GO 23601
// for i in tmp do
23551: LD_ADDR_VAR 0 1
23555: PUSH
23556: LD_VAR 0 2
23560: PUSH
23561: FOR_IN
23562: IFFALSE 23599
// if GetCargo ( i , mat_artifact ) = 0 then
23564: LD_VAR 0 1
23568: PPUSH
23569: LD_INT 4
23571: PPUSH
23572: CALL_OW 289
23576: PUSH
23577: LD_INT 0
23579: EQUAL
23580: IFFALSE 23597
// SetCargo ( i , mat_siberit , 100 ) ;
23582: LD_VAR 0 1
23586: PPUSH
23587: LD_INT 3
23589: PPUSH
23590: LD_INT 100
23592: PPUSH
23593: CALL_OW 290
23597: GO 23561
23599: POP
23600: POP
// end ;
23601: PPOPN 2
23603: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23604: LD_EXP 62
23608: PUSH
23609: LD_EXP 107
23613: AND
23614: IFFALSE 23797
23616: GO 23618
23618: DISABLE
23619: LD_INT 0
23621: PPUSH
23622: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23623: LD_ADDR_VAR 0 2
23627: PUSH
23628: LD_INT 22
23630: PUSH
23631: LD_OWVAR 2
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PPUSH
23640: CALL_OW 69
23644: ST_TO_ADDR
// if not tmp then
23645: LD_VAR 0 2
23649: NOT
23650: IFFALSE 23654
// exit ;
23652: GO 23797
// for i := 1 to 2 do
23654: LD_ADDR_VAR 0 1
23658: PUSH
23659: DOUBLE
23660: LD_INT 1
23662: DEC
23663: ST_TO_ADDR
23664: LD_INT 2
23666: PUSH
23667: FOR_TO
23668: IFFALSE 23795
// begin uc_side := your_side ;
23670: LD_ADDR_OWVAR 20
23674: PUSH
23675: LD_OWVAR 2
23679: ST_TO_ADDR
// uc_nation := nation_american ;
23680: LD_ADDR_OWVAR 21
23684: PUSH
23685: LD_INT 1
23687: ST_TO_ADDR
// vc_chassis := us_morphling ;
23688: LD_ADDR_OWVAR 37
23692: PUSH
23693: LD_INT 5
23695: ST_TO_ADDR
// vc_engine := engine_siberite ;
23696: LD_ADDR_OWVAR 39
23700: PUSH
23701: LD_INT 3
23703: ST_TO_ADDR
// vc_control := control_computer ;
23704: LD_ADDR_OWVAR 38
23708: PUSH
23709: LD_INT 3
23711: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23712: LD_ADDR_OWVAR 40
23716: PUSH
23717: LD_INT 10
23719: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23720: LD_VAR 0 2
23724: PUSH
23725: LD_INT 1
23727: ARRAY
23728: PPUSH
23729: CALL_OW 310
23733: NOT
23734: IFFALSE 23781
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23736: CALL_OW 45
23740: PPUSH
23741: LD_VAR 0 2
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PPUSH
23750: CALL_OW 250
23754: PPUSH
23755: LD_VAR 0 2
23759: PUSH
23760: LD_INT 1
23762: ARRAY
23763: PPUSH
23764: CALL_OW 251
23768: PPUSH
23769: LD_INT 12
23771: PPUSH
23772: LD_INT 1
23774: PPUSH
23775: CALL_OW 50
23779: GO 23793
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23781: CALL_OW 45
23785: PPUSH
23786: LD_INT 1
23788: PPUSH
23789: CALL_OW 51
// end ;
23793: GO 23667
23795: POP
23796: POP
// end ;
23797: PPOPN 2
23799: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23800: LD_EXP 62
23804: PUSH
23805: LD_EXP 108
23809: AND
23810: IFFALSE 24032
23812: GO 23814
23814: DISABLE
23815: LD_INT 0
23817: PPUSH
23818: PPUSH
23819: PPUSH
23820: PPUSH
23821: PPUSH
23822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23823: LD_ADDR_VAR 0 6
23827: PUSH
23828: LD_INT 22
23830: PUSH
23831: LD_OWVAR 2
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 21
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 3
23852: PUSH
23853: LD_INT 23
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: PPUSH
23872: CALL_OW 69
23876: ST_TO_ADDR
// if not tmp then
23877: LD_VAR 0 6
23881: NOT
23882: IFFALSE 23886
// exit ;
23884: GO 24032
// s1 := rand ( 1 , 4 ) ;
23886: LD_ADDR_VAR 0 2
23890: PUSH
23891: LD_INT 1
23893: PPUSH
23894: LD_INT 4
23896: PPUSH
23897: CALL_OW 12
23901: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23902: LD_ADDR_VAR 0 4
23906: PUSH
23907: LD_VAR 0 6
23911: PUSH
23912: LD_INT 1
23914: ARRAY
23915: PPUSH
23916: LD_VAR 0 2
23920: PPUSH
23921: CALL_OW 259
23925: ST_TO_ADDR
// if s1 = 1 then
23926: LD_VAR 0 2
23930: PUSH
23931: LD_INT 1
23933: EQUAL
23934: IFFALSE 23954
// s2 := rand ( 2 , 4 ) else
23936: LD_ADDR_VAR 0 3
23940: PUSH
23941: LD_INT 2
23943: PPUSH
23944: LD_INT 4
23946: PPUSH
23947: CALL_OW 12
23951: ST_TO_ADDR
23952: GO 23962
// s2 := 1 ;
23954: LD_ADDR_VAR 0 3
23958: PUSH
23959: LD_INT 1
23961: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23962: LD_ADDR_VAR 0 5
23966: PUSH
23967: LD_VAR 0 6
23971: PUSH
23972: LD_INT 1
23974: ARRAY
23975: PPUSH
23976: LD_VAR 0 3
23980: PPUSH
23981: CALL_OW 259
23985: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23986: LD_VAR 0 6
23990: PUSH
23991: LD_INT 1
23993: ARRAY
23994: PPUSH
23995: LD_VAR 0 2
23999: PPUSH
24000: LD_VAR 0 5
24004: PPUSH
24005: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24009: LD_VAR 0 6
24013: PUSH
24014: LD_INT 1
24016: ARRAY
24017: PPUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: LD_VAR 0 4
24027: PPUSH
24028: CALL_OW 237
// end ;
24032: PPOPN 6
24034: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24035: LD_EXP 62
24039: PUSH
24040: LD_EXP 109
24044: AND
24045: IFFALSE 24124
24047: GO 24049
24049: DISABLE
24050: LD_INT 0
24052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24053: LD_ADDR_VAR 0 1
24057: PUSH
24058: LD_INT 22
24060: PUSH
24061: LD_OWVAR 2
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 30
24072: PUSH
24073: LD_INT 3
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PPUSH
24084: CALL_OW 69
24088: ST_TO_ADDR
// if not tmp then
24089: LD_VAR 0 1
24093: NOT
24094: IFFALSE 24098
// exit ;
24096: GO 24124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24098: LD_VAR 0 1
24102: PUSH
24103: LD_INT 1
24105: PPUSH
24106: LD_VAR 0 1
24110: PPUSH
24111: CALL_OW 12
24115: ARRAY
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 234
// end ;
24124: PPOPN 1
24126: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24127: LD_EXP 62
24131: PUSH
24132: LD_EXP 110
24136: AND
24137: IFFALSE 24249
24139: GO 24141
24141: DISABLE
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24146: LD_ADDR_VAR 0 2
24150: PUSH
24151: LD_INT 22
24153: PUSH
24154: LD_OWVAR 2
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: LD_INT 30
24168: PUSH
24169: LD_INT 27
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 30
24178: PUSH
24179: LD_INT 26
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 30
24188: PUSH
24189: LD_INT 28
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 69
24210: ST_TO_ADDR
// if not tmp then
24211: LD_VAR 0 2
24215: NOT
24216: IFFALSE 24220
// exit ;
24218: GO 24249
// for i in tmp do
24220: LD_ADDR_VAR 0 1
24224: PUSH
24225: LD_VAR 0 2
24229: PUSH
24230: FOR_IN
24231: IFFALSE 24247
// SetLives ( i , 1 ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 1
24240: PPUSH
24241: CALL_OW 234
24245: GO 24230
24247: POP
24248: POP
// end ;
24249: PPOPN 2
24251: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24252: LD_EXP 62
24256: PUSH
24257: LD_EXP 111
24261: AND
24262: IFFALSE 24549
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
// begin i := rand ( 1 , 7 ) ;
24272: LD_ADDR_VAR 0 1
24276: PUSH
24277: LD_INT 1
24279: PPUSH
24280: LD_INT 7
24282: PPUSH
24283: CALL_OW 12
24287: ST_TO_ADDR
// case i of 1 :
24288: LD_VAR 0 1
24292: PUSH
24293: LD_INT 1
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24311
24301: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24302: LD_STRING earthquake(getX(game), 0, 32)
24304: PPUSH
24305: CALL_OW 559
24309: GO 24549
24311: LD_INT 2
24313: DOUBLE
24314: EQUAL
24315: IFTRUE 24319
24317: GO 24333
24319: POP
// begin ToLua ( displayStucuk(); ) ;
24320: LD_STRING displayStucuk();
24322: PPUSH
24323: CALL_OW 559
// ResetFog ;
24327: CALL_OW 335
// end ; 3 :
24331: GO 24549
24333: LD_INT 3
24335: DOUBLE
24336: EQUAL
24337: IFTRUE 24341
24339: GO 24445
24341: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24342: LD_ADDR_VAR 0 2
24346: PUSH
24347: LD_INT 22
24349: PUSH
24350: LD_OWVAR 2
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 25
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PPUSH
24373: CALL_OW 69
24377: ST_TO_ADDR
// if not tmp then
24378: LD_VAR 0 2
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24549
// un := tmp [ rand ( 1 , tmp ) ] ;
24387: LD_ADDR_VAR 0 3
24391: PUSH
24392: LD_VAR 0 2
24396: PUSH
24397: LD_INT 1
24399: PPUSH
24400: LD_VAR 0 2
24404: PPUSH
24405: CALL_OW 12
24409: ARRAY
24410: ST_TO_ADDR
// if Crawls ( un ) then
24411: LD_VAR 0 3
24415: PPUSH
24416: CALL_OW 318
24420: IFFALSE 24431
// ComWalk ( un ) ;
24422: LD_VAR 0 3
24426: PPUSH
24427: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24431: LD_VAR 0 3
24435: PPUSH
24436: LD_INT 8
24438: PPUSH
24439: CALL_OW 336
// end ; 4 :
24443: GO 24549
24445: LD_INT 4
24447: DOUBLE
24448: EQUAL
24449: IFTRUE 24453
24451: GO 24527
24453: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24454: LD_ADDR_VAR 0 2
24458: PUSH
24459: LD_INT 22
24461: PUSH
24462: LD_OWVAR 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 30
24473: PUSH
24474: LD_INT 29
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PPUSH
24485: CALL_OW 69
24489: ST_TO_ADDR
// if not tmp then
24490: LD_VAR 0 2
24494: NOT
24495: IFFALSE 24499
// exit ;
24497: GO 24549
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24499: LD_VAR 0 2
24503: PUSH
24504: LD_INT 1
24506: ARRAY
24507: PPUSH
24508: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24512: LD_VAR 0 2
24516: PUSH
24517: LD_INT 1
24519: ARRAY
24520: PPUSH
24521: CALL_OW 65
// end ; 5 .. 7 :
24525: GO 24549
24527: LD_INT 5
24529: DOUBLE
24530: GREATEREQUAL
24531: IFFALSE 24539
24533: LD_INT 7
24535: DOUBLE
24536: LESSEQUAL
24537: IFTRUE 24541
24539: GO 24548
24541: POP
// StreamSibBomb ; end ;
24542: CALL 20786 0 0
24546: GO 24549
24548: POP
// end ;
24549: PPOPN 3
24551: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24552: LD_EXP 62
24556: PUSH
24557: LD_EXP 112
24561: AND
24562: IFFALSE 24718
24564: GO 24566
24566: DISABLE
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
24571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24572: LD_ADDR_VAR 0 2
24576: PUSH
24577: LD_INT 81
24579: PUSH
24580: LD_OWVAR 2
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 21
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 21
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PPUSH
24621: CALL_OW 69
24625: ST_TO_ADDR
// if not tmp then
24626: LD_VAR 0 2
24630: NOT
24631: IFFALSE 24635
// exit ;
24633: GO 24718
// p := 0 ;
24635: LD_ADDR_VAR 0 3
24639: PUSH
24640: LD_INT 0
24642: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24643: LD_INT 35
24645: PPUSH
24646: CALL_OW 67
// p := p + 1 ;
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_VAR 0 3
24659: PUSH
24660: LD_INT 1
24662: PLUS
24663: ST_TO_ADDR
// for i in tmp do
24664: LD_ADDR_VAR 0 1
24668: PUSH
24669: LD_VAR 0 2
24673: PUSH
24674: FOR_IN
24675: IFFALSE 24706
// if GetLives ( i ) < 1000 then
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 256
24686: PUSH
24687: LD_INT 1000
24689: LESS
24690: IFFALSE 24704
// SetLives ( i , 1000 ) ;
24692: LD_VAR 0 1
24696: PPUSH
24697: LD_INT 1000
24699: PPUSH
24700: CALL_OW 234
24704: GO 24674
24706: POP
24707: POP
// until p > 20 ;
24708: LD_VAR 0 3
24712: PUSH
24713: LD_INT 20
24715: GREATER
24716: IFFALSE 24643
// end ;
24718: PPOPN 3
24720: END
// every 0 0$1 trigger StreamModeActive and sTime do
24721: LD_EXP 62
24725: PUSH
24726: LD_EXP 113
24730: AND
24731: IFFALSE 24766
24733: GO 24735
24735: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24736: LD_INT 28
24738: PPUSH
24739: LD_OWVAR 2
24743: PPUSH
24744: LD_INT 2
24746: PPUSH
24747: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24751: LD_INT 30
24753: PPUSH
24754: LD_OWVAR 2
24758: PPUSH
24759: LD_INT 2
24761: PPUSH
24762: CALL_OW 322
// end ;
24766: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24767: LD_EXP 62
24771: PUSH
24772: LD_EXP 114
24776: AND
24777: IFFALSE 24898
24779: GO 24781
24781: DISABLE
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24786: LD_ADDR_VAR 0 2
24790: PUSH
24791: LD_INT 22
24793: PUSH
24794: LD_OWVAR 2
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: LD_INT 23
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: ST_TO_ADDR
// if not tmp then
24840: LD_VAR 0 2
24844: NOT
24845: IFFALSE 24849
// exit ;
24847: GO 24898
// for i in tmp do
24849: LD_ADDR_VAR 0 1
24853: PUSH
24854: LD_VAR 0 2
24858: PUSH
24859: FOR_IN
24860: IFFALSE 24896
// begin if Crawls ( i ) then
24862: LD_VAR 0 1
24866: PPUSH
24867: CALL_OW 318
24871: IFFALSE 24882
// ComWalk ( i ) ;
24873: LD_VAR 0 1
24877: PPUSH
24878: CALL_OW 138
// SetClass ( i , 2 ) ;
24882: LD_VAR 0 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 336
// end ;
24894: GO 24859
24896: POP
24897: POP
// end ;
24898: PPOPN 2
24900: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24901: LD_EXP 62
24905: PUSH
24906: LD_EXP 115
24910: AND
24911: IFFALSE 25199
24913: GO 24915
24915: DISABLE
24916: LD_INT 0
24918: PPUSH
24919: PPUSH
24920: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24921: LD_OWVAR 2
24925: PPUSH
24926: LD_INT 9
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: LD_INT 1
24934: PPUSH
24935: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24939: LD_INT 9
24941: PPUSH
24942: LD_OWVAR 2
24946: PPUSH
24947: CALL_OW 343
// uc_side := 9 ;
24951: LD_ADDR_OWVAR 20
24955: PUSH
24956: LD_INT 9
24958: ST_TO_ADDR
// uc_nation := 2 ;
24959: LD_ADDR_OWVAR 21
24963: PUSH
24964: LD_INT 2
24966: ST_TO_ADDR
// hc_name := Dark Warrior ;
24967: LD_ADDR_OWVAR 26
24971: PUSH
24972: LD_STRING Dark Warrior
24974: ST_TO_ADDR
// hc_gallery :=  ;
24975: LD_ADDR_OWVAR 33
24979: PUSH
24980: LD_STRING 
24982: ST_TO_ADDR
// hc_noskilllimit := true ;
24983: LD_ADDR_OWVAR 76
24987: PUSH
24988: LD_INT 1
24990: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24991: LD_ADDR_OWVAR 31
24995: PUSH
24996: LD_INT 30
24998: PUSH
24999: LD_INT 30
25001: PUSH
25002: LD_INT 30
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: ST_TO_ADDR
// un := CreateHuman ;
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: CALL_OW 44
25023: ST_TO_ADDR
// hc_noskilllimit := false ;
25024: LD_ADDR_OWVAR 76
25028: PUSH
25029: LD_INT 0
25031: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25032: LD_VAR 0 3
25036: PPUSH
25037: LD_INT 1
25039: PPUSH
25040: CALL_OW 51
// ToLua ( playRanger() ) ;
25044: LD_STRING playRanger()
25046: PPUSH
25047: CALL_OW 559
// p := 0 ;
25051: LD_ADDR_VAR 0 2
25055: PUSH
25056: LD_INT 0
25058: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25059: LD_INT 35
25061: PPUSH
25062: CALL_OW 67
// p := p + 1 ;
25066: LD_ADDR_VAR 0 2
25070: PUSH
25071: LD_VAR 0 2
25075: PUSH
25076: LD_INT 1
25078: PLUS
25079: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25080: LD_VAR 0 3
25084: PPUSH
25085: CALL_OW 256
25089: PUSH
25090: LD_INT 1000
25092: LESS
25093: IFFALSE 25107
// SetLives ( un , 1000 ) ;
25095: LD_VAR 0 3
25099: PPUSH
25100: LD_INT 1000
25102: PPUSH
25103: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25107: LD_VAR 0 3
25111: PPUSH
25112: LD_INT 81
25114: PUSH
25115: LD_OWVAR 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 91
25126: PUSH
25127: LD_VAR 0 3
25131: PUSH
25132: LD_INT 30
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PPUSH
25144: CALL_OW 69
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: CALL_OW 74
25158: PPUSH
25159: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25163: LD_VAR 0 2
25167: PUSH
25168: LD_INT 80
25170: GREATER
25171: PUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: CALL_OW 301
25181: OR
25182: IFFALSE 25059
// if un then
25184: LD_VAR 0 3
25188: IFFALSE 25199
// RemoveUnit ( un ) ;
25190: LD_VAR 0 3
25194: PPUSH
25195: CALL_OW 64
// end ;
25199: PPOPN 3
25201: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25202: LD_EXP 116
25206: IFFALSE 25322
25208: GO 25210
25210: DISABLE
25211: LD_INT 0
25213: PPUSH
25214: PPUSH
25215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25216: LD_ADDR_VAR 0 2
25220: PUSH
25221: LD_INT 81
25223: PUSH
25224: LD_OWVAR 2
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 21
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PPUSH
25247: CALL_OW 69
25251: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25252: LD_STRING playComputer()
25254: PPUSH
25255: CALL_OW 559
// if not tmp then
25259: LD_VAR 0 2
25263: NOT
25264: IFFALSE 25268
// exit ;
25266: GO 25322
// for i in tmp do
25268: LD_ADDR_VAR 0 1
25272: PUSH
25273: LD_VAR 0 2
25277: PUSH
25278: FOR_IN
25279: IFFALSE 25320
// for j := 1 to 4 do
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: DOUBLE
25287: LD_INT 1
25289: DEC
25290: ST_TO_ADDR
25291: LD_INT 4
25293: PUSH
25294: FOR_TO
25295: IFFALSE 25316
// SetSkill ( i , j , 10 ) ;
25297: LD_VAR 0 1
25301: PPUSH
25302: LD_VAR 0 3
25306: PPUSH
25307: LD_INT 10
25309: PPUSH
25310: CALL_OW 237
25314: GO 25294
25316: POP
25317: POP
25318: GO 25278
25320: POP
25321: POP
// end ;
25322: PPOPN 3
25324: END
// every 0 0$1 trigger s30 do var i , tmp ;
25325: LD_EXP 117
25329: IFFALSE 25398
25331: GO 25333
25333: DISABLE
25334: LD_INT 0
25336: PPUSH
25337: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25338: LD_ADDR_VAR 0 2
25342: PUSH
25343: LD_INT 22
25345: PUSH
25346: LD_OWVAR 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PPUSH
25355: CALL_OW 69
25359: ST_TO_ADDR
// if not tmp then
25360: LD_VAR 0 2
25364: NOT
25365: IFFALSE 25369
// exit ;
25367: GO 25398
// for i in tmp do
25369: LD_ADDR_VAR 0 1
25373: PUSH
25374: LD_VAR 0 2
25378: PUSH
25379: FOR_IN
25380: IFFALSE 25396
// SetLives ( i , 300 ) ;
25382: LD_VAR 0 1
25386: PPUSH
25387: LD_INT 300
25389: PPUSH
25390: CALL_OW 234
25394: GO 25379
25396: POP
25397: POP
// end ;
25398: PPOPN 2
25400: END
// every 0 0$1 trigger s60 do var i , tmp ;
25401: LD_EXP 118
25405: IFFALSE 25474
25407: GO 25409
25409: DISABLE
25410: LD_INT 0
25412: PPUSH
25413: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: LD_INT 22
25421: PUSH
25422: LD_OWVAR 2
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PPUSH
25431: CALL_OW 69
25435: ST_TO_ADDR
// if not tmp then
25436: LD_VAR 0 2
25440: NOT
25441: IFFALSE 25445
// exit ;
25443: GO 25474
// for i in tmp do
25445: LD_ADDR_VAR 0 1
25449: PUSH
25450: LD_VAR 0 2
25454: PUSH
25455: FOR_IN
25456: IFFALSE 25472
// SetLives ( i , 600 ) ;
25458: LD_VAR 0 1
25462: PPUSH
25463: LD_INT 600
25465: PPUSH
25466: CALL_OW 234
25470: GO 25455
25472: POP
25473: POP
// end ;
25474: PPOPN 2
25476: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25477: LD_INT 0
25479: PPUSH
// case cmd of 301 :
25480: LD_VAR 0 1
25484: PUSH
25485: LD_INT 301
25487: DOUBLE
25488: EQUAL
25489: IFTRUE 25493
25491: GO 25525
25493: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25494: LD_VAR 0 6
25498: PPUSH
25499: LD_VAR 0 7
25503: PPUSH
25504: LD_VAR 0 8
25508: PPUSH
25509: LD_VAR 0 4
25513: PPUSH
25514: LD_VAR 0 5
25518: PPUSH
25519: CALL 26726 0 5
25523: GO 25646
25525: LD_INT 302
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25570
25533: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25534: LD_VAR 0 6
25538: PPUSH
25539: LD_VAR 0 7
25543: PPUSH
25544: LD_VAR 0 8
25548: PPUSH
25549: LD_VAR 0 9
25553: PPUSH
25554: LD_VAR 0 4
25558: PPUSH
25559: LD_VAR 0 5
25563: PPUSH
25564: CALL 26817 0 6
25568: GO 25646
25570: LD_INT 303
25572: DOUBLE
25573: EQUAL
25574: IFTRUE 25578
25576: GO 25615
25578: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25579: LD_VAR 0 6
25583: PPUSH
25584: LD_VAR 0 7
25588: PPUSH
25589: LD_VAR 0 8
25593: PPUSH
25594: LD_VAR 0 9
25598: PPUSH
25599: LD_VAR 0 4
25603: PPUSH
25604: LD_VAR 0 5
25608: PPUSH
25609: CALL 25651 0 6
25613: GO 25646
25615: LD_INT 304
25617: DOUBLE
25618: EQUAL
25619: IFTRUE 25623
25621: GO 25645
25623: POP
// hHackTeleport ( unit , x , y ) ; end ;
25624: LD_VAR 0 2
25628: PPUSH
25629: LD_VAR 0 4
25633: PPUSH
25634: LD_VAR 0 5
25638: PPUSH
25639: CALL 27410 0 3
25643: GO 25646
25645: POP
// end ;
25646: LD_VAR 0 12
25650: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25651: LD_INT 0
25653: PPUSH
25654: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25655: LD_VAR 0 1
25659: PUSH
25660: LD_INT 1
25662: LESS
25663: PUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_INT 3
25671: GREATER
25672: OR
25673: PUSH
25674: LD_VAR 0 5
25678: PPUSH
25679: LD_VAR 0 6
25683: PPUSH
25684: CALL_OW 428
25688: OR
25689: IFFALSE 25693
// exit ;
25691: GO 26413
// uc_side := your_side ;
25693: LD_ADDR_OWVAR 20
25697: PUSH
25698: LD_OWVAR 2
25702: ST_TO_ADDR
// uc_nation := nation ;
25703: LD_ADDR_OWVAR 21
25707: PUSH
25708: LD_VAR 0 1
25712: ST_TO_ADDR
// bc_level = 1 ;
25713: LD_ADDR_OWVAR 43
25717: PUSH
25718: LD_INT 1
25720: ST_TO_ADDR
// case btype of 1 :
25721: LD_VAR 0 2
25725: PUSH
25726: LD_INT 1
25728: DOUBLE
25729: EQUAL
25730: IFTRUE 25734
25732: GO 25745
25734: POP
// bc_type := b_depot ; 2 :
25735: LD_ADDR_OWVAR 42
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
25743: GO 26357
25745: LD_INT 2
25747: DOUBLE
25748: EQUAL
25749: IFTRUE 25753
25751: GO 25764
25753: POP
// bc_type := b_warehouse ; 3 :
25754: LD_ADDR_OWVAR 42
25758: PUSH
25759: LD_INT 1
25761: ST_TO_ADDR
25762: GO 26357
25764: LD_INT 3
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25783
25772: POP
// bc_type := b_lab ; 4 .. 9 :
25773: LD_ADDR_OWVAR 42
25777: PUSH
25778: LD_INT 6
25780: ST_TO_ADDR
25781: GO 26357
25783: LD_INT 4
25785: DOUBLE
25786: GREATEREQUAL
25787: IFFALSE 25795
25789: LD_INT 9
25791: DOUBLE
25792: LESSEQUAL
25793: IFTRUE 25797
25795: GO 25849
25797: POP
// begin bc_type := b_lab_half ;
25798: LD_ADDR_OWVAR 42
25802: PUSH
25803: LD_INT 7
25805: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25806: LD_ADDR_OWVAR 44
25810: PUSH
25811: LD_INT 10
25813: PUSH
25814: LD_INT 11
25816: PUSH
25817: LD_INT 12
25819: PUSH
25820: LD_INT 15
25822: PUSH
25823: LD_INT 14
25825: PUSH
25826: LD_INT 13
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: PUSH
25837: LD_VAR 0 2
25841: PUSH
25842: LD_INT 3
25844: MINUS
25845: ARRAY
25846: ST_TO_ADDR
// end ; 10 .. 13 :
25847: GO 26357
25849: LD_INT 10
25851: DOUBLE
25852: GREATEREQUAL
25853: IFFALSE 25861
25855: LD_INT 13
25857: DOUBLE
25858: LESSEQUAL
25859: IFTRUE 25863
25861: GO 25940
25863: POP
// begin bc_type := b_lab_full ;
25864: LD_ADDR_OWVAR 42
25868: PUSH
25869: LD_INT 8
25871: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25872: LD_ADDR_OWVAR 44
25876: PUSH
25877: LD_INT 10
25879: PUSH
25880: LD_INT 12
25882: PUSH
25883: LD_INT 14
25885: PUSH
25886: LD_INT 13
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: PUSH
25895: LD_VAR 0 2
25899: PUSH
25900: LD_INT 9
25902: MINUS
25903: ARRAY
25904: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25905: LD_ADDR_OWVAR 45
25909: PUSH
25910: LD_INT 11
25912: PUSH
25913: LD_INT 15
25915: PUSH
25916: LD_INT 12
25918: PUSH
25919: LD_INT 15
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: PUSH
25928: LD_VAR 0 2
25932: PUSH
25933: LD_INT 9
25935: MINUS
25936: ARRAY
25937: ST_TO_ADDR
// end ; 14 :
25938: GO 26357
25940: LD_INT 14
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25959
25948: POP
// bc_type := b_workshop ; 15 :
25949: LD_ADDR_OWVAR 42
25953: PUSH
25954: LD_INT 2
25956: ST_TO_ADDR
25957: GO 26357
25959: LD_INT 15
25961: DOUBLE
25962: EQUAL
25963: IFTRUE 25967
25965: GO 25978
25967: POP
// bc_type := b_factory ; 16 :
25968: LD_ADDR_OWVAR 42
25972: PUSH
25973: LD_INT 3
25975: ST_TO_ADDR
25976: GO 26357
25978: LD_INT 16
25980: DOUBLE
25981: EQUAL
25982: IFTRUE 25986
25984: GO 25997
25986: POP
// bc_type := b_ext_gun ; 17 :
25987: LD_ADDR_OWVAR 42
25991: PUSH
25992: LD_INT 17
25994: ST_TO_ADDR
25995: GO 26357
25997: LD_INT 17
25999: DOUBLE
26000: EQUAL
26001: IFTRUE 26005
26003: GO 26033
26005: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26006: LD_ADDR_OWVAR 42
26010: PUSH
26011: LD_INT 19
26013: PUSH
26014: LD_INT 23
26016: PUSH
26017: LD_INT 19
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: PUSH
26025: LD_VAR 0 1
26029: ARRAY
26030: ST_TO_ADDR
26031: GO 26357
26033: LD_INT 18
26035: DOUBLE
26036: EQUAL
26037: IFTRUE 26041
26039: GO 26052
26041: POP
// bc_type := b_ext_radar ; 19 :
26042: LD_ADDR_OWVAR 42
26046: PUSH
26047: LD_INT 20
26049: ST_TO_ADDR
26050: GO 26357
26052: LD_INT 19
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26071
26060: POP
// bc_type := b_ext_radio ; 20 :
26061: LD_ADDR_OWVAR 42
26065: PUSH
26066: LD_INT 22
26068: ST_TO_ADDR
26069: GO 26357
26071: LD_INT 20
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26090
26079: POP
// bc_type := b_ext_siberium ; 21 :
26080: LD_ADDR_OWVAR 42
26084: PUSH
26085: LD_INT 21
26087: ST_TO_ADDR
26088: GO 26357
26090: LD_INT 21
26092: DOUBLE
26093: EQUAL
26094: IFTRUE 26098
26096: GO 26109
26098: POP
// bc_type := b_ext_computer ; 22 :
26099: LD_ADDR_OWVAR 42
26103: PUSH
26104: LD_INT 24
26106: ST_TO_ADDR
26107: GO 26357
26109: LD_INT 22
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26128
26117: POP
// bc_type := b_ext_track ; 23 :
26118: LD_ADDR_OWVAR 42
26122: PUSH
26123: LD_INT 16
26125: ST_TO_ADDR
26126: GO 26357
26128: LD_INT 23
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26147
26136: POP
// bc_type := b_ext_laser ; 24 :
26137: LD_ADDR_OWVAR 42
26141: PUSH
26142: LD_INT 25
26144: ST_TO_ADDR
26145: GO 26357
26147: LD_INT 24
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26166
26155: POP
// bc_type := b_control_tower ; 25 :
26156: LD_ADDR_OWVAR 42
26160: PUSH
26161: LD_INT 36
26163: ST_TO_ADDR
26164: GO 26357
26166: LD_INT 25
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26185
26174: POP
// bc_type := b_breastwork ; 26 :
26175: LD_ADDR_OWVAR 42
26179: PUSH
26180: LD_INT 31
26182: ST_TO_ADDR
26183: GO 26357
26185: LD_INT 26
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26204
26193: POP
// bc_type := b_bunker ; 27 :
26194: LD_ADDR_OWVAR 42
26198: PUSH
26199: LD_INT 32
26201: ST_TO_ADDR
26202: GO 26357
26204: LD_INT 27
26206: DOUBLE
26207: EQUAL
26208: IFTRUE 26212
26210: GO 26223
26212: POP
// bc_type := b_turret ; 28 :
26213: LD_ADDR_OWVAR 42
26217: PUSH
26218: LD_INT 33
26220: ST_TO_ADDR
26221: GO 26357
26223: LD_INT 28
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26242
26231: POP
// bc_type := b_armoury ; 29 :
26232: LD_ADDR_OWVAR 42
26236: PUSH
26237: LD_INT 4
26239: ST_TO_ADDR
26240: GO 26357
26242: LD_INT 29
26244: DOUBLE
26245: EQUAL
26246: IFTRUE 26250
26248: GO 26261
26250: POP
// bc_type := b_barracks ; 30 :
26251: LD_ADDR_OWVAR 42
26255: PUSH
26256: LD_INT 5
26258: ST_TO_ADDR
26259: GO 26357
26261: LD_INT 30
26263: DOUBLE
26264: EQUAL
26265: IFTRUE 26269
26267: GO 26280
26269: POP
// bc_type := b_solar_power ; 31 :
26270: LD_ADDR_OWVAR 42
26274: PUSH
26275: LD_INT 27
26277: ST_TO_ADDR
26278: GO 26357
26280: LD_INT 31
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26299
26288: POP
// bc_type := b_oil_power ; 32 :
26289: LD_ADDR_OWVAR 42
26293: PUSH
26294: LD_INT 26
26296: ST_TO_ADDR
26297: GO 26357
26299: LD_INT 32
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26318
26307: POP
// bc_type := b_siberite_power ; 33 :
26308: LD_ADDR_OWVAR 42
26312: PUSH
26313: LD_INT 28
26315: ST_TO_ADDR
26316: GO 26357
26318: LD_INT 33
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26337
26326: POP
// bc_type := b_oil_mine ; 34 :
26327: LD_ADDR_OWVAR 42
26331: PUSH
26332: LD_INT 29
26334: ST_TO_ADDR
26335: GO 26357
26337: LD_INT 34
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26356
26345: POP
// bc_type := b_siberite_mine ; end ;
26346: LD_ADDR_OWVAR 42
26350: PUSH
26351: LD_INT 30
26353: ST_TO_ADDR
26354: GO 26357
26356: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26357: LD_ADDR_VAR 0 8
26361: PUSH
26362: LD_VAR 0 5
26366: PPUSH
26367: LD_VAR 0 6
26371: PPUSH
26372: LD_VAR 0 3
26376: PPUSH
26377: CALL_OW 47
26381: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26382: LD_OWVAR 42
26386: PUSH
26387: LD_INT 32
26389: PUSH
26390: LD_INT 33
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: IN
26397: IFFALSE 26413
// PlaceWeaponTurret ( b , weapon ) ;
26399: LD_VAR 0 8
26403: PPUSH
26404: LD_VAR 0 4
26408: PPUSH
26409: CALL_OW 431
// end ;
26413: LD_VAR 0 7
26417: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26424: LD_ADDR_VAR 0 4
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_OWVAR 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 30
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 30
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: ST_TO_ADDR
// if not tmp then
26478: LD_VAR 0 4
26482: NOT
26483: IFFALSE 26487
// exit ;
26485: GO 26546
// for i in tmp do
26487: LD_ADDR_VAR 0 2
26491: PUSH
26492: LD_VAR 0 4
26496: PUSH
26497: FOR_IN
26498: IFFALSE 26544
// for j = 1 to 3 do
26500: LD_ADDR_VAR 0 3
26504: PUSH
26505: DOUBLE
26506: LD_INT 1
26508: DEC
26509: ST_TO_ADDR
26510: LD_INT 3
26512: PUSH
26513: FOR_TO
26514: IFFALSE 26540
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26516: LD_VAR 0 2
26520: PPUSH
26521: CALL_OW 274
26525: PPUSH
26526: LD_VAR 0 3
26530: PPUSH
26531: LD_INT 99999
26533: PPUSH
26534: CALL_OW 277
26538: GO 26513
26540: POP
26541: POP
26542: GO 26497
26544: POP
26545: POP
// end ;
26546: LD_VAR 0 1
26550: RET
// export function hHackSetLevel10 ; var i , j ; begin
26551: LD_INT 0
26553: PPUSH
26554: PPUSH
26555: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26556: LD_ADDR_VAR 0 2
26560: PUSH
26561: LD_INT 21
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PPUSH
26571: CALL_OW 69
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26629
// if IsSelected ( i ) then
26579: LD_VAR 0 2
26583: PPUSH
26584: CALL_OW 306
26588: IFFALSE 26627
// begin for j := 1 to 4 do
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: DOUBLE
26596: LD_INT 1
26598: DEC
26599: ST_TO_ADDR
26600: LD_INT 4
26602: PUSH
26603: FOR_TO
26604: IFFALSE 26625
// SetSkill ( i , j , 10 ) ;
26606: LD_VAR 0 2
26610: PPUSH
26611: LD_VAR 0 3
26615: PPUSH
26616: LD_INT 10
26618: PPUSH
26619: CALL_OW 237
26623: GO 26603
26625: POP
26626: POP
// end ;
26627: GO 26576
26629: POP
26630: POP
// end ;
26631: LD_VAR 0 1
26635: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26636: LD_INT 0
26638: PPUSH
26639: PPUSH
26640: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26641: LD_ADDR_VAR 0 2
26645: PUSH
26646: LD_INT 22
26648: PUSH
26649: LD_OWVAR 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 21
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PPUSH
26672: CALL_OW 69
26676: PUSH
26677: FOR_IN
26678: IFFALSE 26719
// begin for j := 1 to 4 do
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: DOUBLE
26686: LD_INT 1
26688: DEC
26689: ST_TO_ADDR
26690: LD_INT 4
26692: PUSH
26693: FOR_TO
26694: IFFALSE 26715
// SetSkill ( i , j , 10 ) ;
26696: LD_VAR 0 2
26700: PPUSH
26701: LD_VAR 0 3
26705: PPUSH
26706: LD_INT 10
26708: PPUSH
26709: CALL_OW 237
26713: GO 26693
26715: POP
26716: POP
// end ;
26717: GO 26677
26719: POP
26720: POP
// end ;
26721: LD_VAR 0 1
26725: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26726: LD_INT 0
26728: PPUSH
// uc_side := your_side ;
26729: LD_ADDR_OWVAR 20
26733: PUSH
26734: LD_OWVAR 2
26738: ST_TO_ADDR
// uc_nation := nation ;
26739: LD_ADDR_OWVAR 21
26743: PUSH
26744: LD_VAR 0 1
26748: ST_TO_ADDR
// InitHc ;
26749: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26753: LD_INT 0
26755: PPUSH
26756: LD_VAR 0 2
26760: PPUSH
26761: LD_VAR 0 3
26765: PPUSH
26766: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26770: LD_VAR 0 4
26774: PPUSH
26775: LD_VAR 0 5
26779: PPUSH
26780: CALL_OW 428
26784: PUSH
26785: LD_INT 0
26787: EQUAL
26788: IFFALSE 26812
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26790: CALL_OW 44
26794: PPUSH
26795: LD_VAR 0 4
26799: PPUSH
26800: LD_VAR 0 5
26804: PPUSH
26805: LD_INT 1
26807: PPUSH
26808: CALL_OW 48
// end ;
26812: LD_VAR 0 6
26816: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26817: LD_INT 0
26819: PPUSH
26820: PPUSH
// uc_side := your_side ;
26821: LD_ADDR_OWVAR 20
26825: PUSH
26826: LD_OWVAR 2
26830: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26831: LD_VAR 0 1
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 4
26847: PUSH
26848: LD_INT 5
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: IN
26858: IFFALSE 26870
// uc_nation := nation_american else
26860: LD_ADDR_OWVAR 21
26864: PUSH
26865: LD_INT 1
26867: ST_TO_ADDR
26868: GO 26913
// if chassis in [ 11 , 12 , 13 , 14 ] then
26870: LD_VAR 0 1
26874: PUSH
26875: LD_INT 11
26877: PUSH
26878: LD_INT 12
26880: PUSH
26881: LD_INT 13
26883: PUSH
26884: LD_INT 14
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: IN
26893: IFFALSE 26905
// uc_nation := nation_arabian else
26895: LD_ADDR_OWVAR 21
26899: PUSH
26900: LD_INT 2
26902: ST_TO_ADDR
26903: GO 26913
// uc_nation := nation_russian ;
26905: LD_ADDR_OWVAR 21
26909: PUSH
26910: LD_INT 3
26912: ST_TO_ADDR
// vc_chassis := chassis ;
26913: LD_ADDR_OWVAR 37
26917: PUSH
26918: LD_VAR 0 1
26922: ST_TO_ADDR
// vc_engine := engine ;
26923: LD_ADDR_OWVAR 39
26927: PUSH
26928: LD_VAR 0 2
26932: ST_TO_ADDR
// vc_control := control ;
26933: LD_ADDR_OWVAR 38
26937: PUSH
26938: LD_VAR 0 3
26942: ST_TO_ADDR
// vc_weapon := weapon ;
26943: LD_ADDR_OWVAR 40
26947: PUSH
26948: LD_VAR 0 4
26952: ST_TO_ADDR
// un := CreateVehicle ;
26953: LD_ADDR_VAR 0 8
26957: PUSH
26958: CALL_OW 45
26962: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26963: LD_VAR 0 8
26967: PPUSH
26968: LD_INT 0
26970: PPUSH
26971: LD_INT 5
26973: PPUSH
26974: CALL_OW 12
26978: PPUSH
26979: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26983: LD_VAR 0 8
26987: PPUSH
26988: LD_VAR 0 5
26992: PPUSH
26993: LD_VAR 0 6
26997: PPUSH
26998: LD_INT 1
27000: PPUSH
27001: CALL_OW 48
// end ;
27005: LD_VAR 0 7
27009: RET
// export hInvincible ; every 1 do
27010: GO 27012
27012: DISABLE
// hInvincible := [ ] ;
27013: LD_ADDR_EXP 119
27017: PUSH
27018: EMPTY
27019: ST_TO_ADDR
27020: END
// every 10 do var i ;
27021: GO 27023
27023: DISABLE
27024: LD_INT 0
27026: PPUSH
// begin enable ;
27027: ENABLE
// if not hInvincible then
27028: LD_EXP 119
27032: NOT
27033: IFFALSE 27037
// exit ;
27035: GO 27081
// for i in hInvincible do
27037: LD_ADDR_VAR 0 1
27041: PUSH
27042: LD_EXP 119
27046: PUSH
27047: FOR_IN
27048: IFFALSE 27079
// if GetLives ( i ) < 1000 then
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 256
27059: PUSH
27060: LD_INT 1000
27062: LESS
27063: IFFALSE 27077
// SetLives ( i , 1000 ) ;
27065: LD_VAR 0 1
27069: PPUSH
27070: LD_INT 1000
27072: PPUSH
27073: CALL_OW 234
27077: GO 27047
27079: POP
27080: POP
// end ;
27081: PPOPN 1
27083: END
// export function hHackInvincible ; var i ; begin
27084: LD_INT 0
27086: PPUSH
27087: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27088: LD_ADDR_VAR 0 2
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 21
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 21
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: PUSH
27126: FOR_IN
27127: IFFALSE 27188
// if IsSelected ( i ) then
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 306
27138: IFFALSE 27186
// begin if i in hInvincible then
27140: LD_VAR 0 2
27144: PUSH
27145: LD_EXP 119
27149: IN
27150: IFFALSE 27170
// hInvincible := hInvincible diff i else
27152: LD_ADDR_EXP 119
27156: PUSH
27157: LD_EXP 119
27161: PUSH
27162: LD_VAR 0 2
27166: DIFF
27167: ST_TO_ADDR
27168: GO 27186
// hInvincible := hInvincible union i ;
27170: LD_ADDR_EXP 119
27174: PUSH
27175: LD_EXP 119
27179: PUSH
27180: LD_VAR 0 2
27184: UNION
27185: ST_TO_ADDR
// end ;
27186: GO 27126
27188: POP
27189: POP
// end ;
27190: LD_VAR 0 1
27194: RET
// export function hHackInvisible ; var i , j ; begin
27195: LD_INT 0
27197: PPUSH
27198: PPUSH
27199: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27200: LD_ADDR_VAR 0 2
27204: PUSH
27205: LD_INT 21
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PPUSH
27215: CALL_OW 69
27219: PUSH
27220: FOR_IN
27221: IFFALSE 27245
// if IsSelected ( i ) then
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 306
27232: IFFALSE 27243
// ComForceInvisible ( i ) ;
27234: LD_VAR 0 2
27238: PPUSH
27239: CALL_OW 496
27243: GO 27220
27245: POP
27246: POP
// end ;
27247: LD_VAR 0 1
27251: RET
// export function hHackChangeYourSide ; begin
27252: LD_INT 0
27254: PPUSH
// if your_side = 8 then
27255: LD_OWVAR 2
27259: PUSH
27260: LD_INT 8
27262: EQUAL
27263: IFFALSE 27275
// your_side := 0 else
27265: LD_ADDR_OWVAR 2
27269: PUSH
27270: LD_INT 0
27272: ST_TO_ADDR
27273: GO 27289
// your_side := your_side + 1 ;
27275: LD_ADDR_OWVAR 2
27279: PUSH
27280: LD_OWVAR 2
27284: PUSH
27285: LD_INT 1
27287: PLUS
27288: ST_TO_ADDR
// end ;
27289: LD_VAR 0 1
27293: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27294: LD_INT 0
27296: PPUSH
27297: PPUSH
27298: PPUSH
// for i in all_units do
27299: LD_ADDR_VAR 0 2
27303: PUSH
27304: LD_OWVAR 3
27308: PUSH
27309: FOR_IN
27310: IFFALSE 27388
// if IsSelected ( i ) then
27312: LD_VAR 0 2
27316: PPUSH
27317: CALL_OW 306
27321: IFFALSE 27386
// begin j := GetSide ( i ) ;
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_VAR 0 2
27332: PPUSH
27333: CALL_OW 255
27337: ST_TO_ADDR
// if j = 8 then
27338: LD_VAR 0 3
27342: PUSH
27343: LD_INT 8
27345: EQUAL
27346: IFFALSE 27358
// j := 0 else
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_INT 0
27355: ST_TO_ADDR
27356: GO 27372
// j := j + 1 ;
27358: LD_ADDR_VAR 0 3
27362: PUSH
27363: LD_VAR 0 3
27367: PUSH
27368: LD_INT 1
27370: PLUS
27371: ST_TO_ADDR
// SetSide ( i , j ) ;
27372: LD_VAR 0 2
27376: PPUSH
27377: LD_VAR 0 3
27381: PPUSH
27382: CALL_OW 235
// end ;
27386: GO 27309
27388: POP
27389: POP
// end ;
27390: LD_VAR 0 1
27394: RET
// export function hHackFog ; begin
27395: LD_INT 0
27397: PPUSH
// FogOff ( true ) ;
27398: LD_INT 1
27400: PPUSH
27401: CALL_OW 344
// end ;
27405: LD_VAR 0 1
27409: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27410: LD_INT 0
27412: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_VAR 0 2
27422: PPUSH
27423: LD_VAR 0 3
27427: PPUSH
27428: LD_INT 1
27430: PPUSH
27431: LD_INT 1
27433: PPUSH
27434: CALL_OW 483
// CenterOnXY ( x , y ) ;
27438: LD_VAR 0 2
27442: PPUSH
27443: LD_VAR 0 3
27447: PPUSH
27448: CALL_OW 84
// end ; end_of_file
27452: LD_VAR 0 4
27456: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 264
27472: PUSH
27473: LD_EXP 47
27477: EQUAL
27478: IFFALSE 27550
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27480: LD_INT 68
27482: PPUSH
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL_OW 255
27492: PPUSH
27493: CALL_OW 321
27497: PUSH
27498: LD_INT 2
27500: EQUAL
27501: IFFALSE 27513
// eff := 70 else
27503: LD_ADDR_VAR 0 4
27507: PUSH
27508: LD_INT 70
27510: ST_TO_ADDR
27511: GO 27521
// eff := 30 ;
27513: LD_ADDR_VAR 0 4
27517: PUSH
27518: LD_INT 30
27520: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 250
27530: PPUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 251
27540: PPUSH
27541: LD_VAR 0 4
27545: PPUSH
27546: CALL_OW 495
// end ; end ;
27550: LD_VAR 0 2
27554: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27555: LD_INT 0
27557: PPUSH
// end ;
27558: LD_VAR 0 4
27562: RET
// export function SOS_Command ( cmd ) ; begin
27563: LD_INT 0
27565: PPUSH
// end ;
27566: LD_VAR 0 2
27570: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27571: LD_INT 0
27573: PPUSH
// end ;
27574: LD_VAR 0 6
27578: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
// if not vehicle or not factory then
27583: LD_VAR 0 1
27587: NOT
27588: PUSH
27589: LD_VAR 0 2
27593: NOT
27594: OR
27595: IFFALSE 27599
// exit ;
27597: GO 27830
// if factoryWaypoints >= factory then
27599: LD_EXP 120
27603: PUSH
27604: LD_VAR 0 2
27608: GREATEREQUAL
27609: IFFALSE 27830
// if factoryWaypoints [ factory ] then
27611: LD_EXP 120
27615: PUSH
27616: LD_VAR 0 2
27620: ARRAY
27621: IFFALSE 27830
// begin if GetControl ( vehicle ) = control_manual then
27623: LD_VAR 0 1
27627: PPUSH
27628: CALL_OW 263
27632: PUSH
27633: LD_INT 1
27635: EQUAL
27636: IFFALSE 27717
// begin driver := IsDrivenBy ( vehicle ) ;
27638: LD_ADDR_VAR 0 4
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 311
27652: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27653: LD_VAR 0 4
27657: PPUSH
27658: LD_EXP 120
27662: PUSH
27663: LD_VAR 0 2
27667: ARRAY
27668: PUSH
27669: LD_INT 3
27671: ARRAY
27672: PPUSH
27673: LD_EXP 120
27677: PUSH
27678: LD_VAR 0 2
27682: ARRAY
27683: PUSH
27684: LD_INT 4
27686: ARRAY
27687: PPUSH
27688: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27692: LD_VAR 0 4
27696: PPUSH
27697: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27701: LD_VAR 0 4
27705: PPUSH
27706: LD_VAR 0 2
27710: PPUSH
27711: CALL_OW 180
// end else
27715: GO 27830
// if GetControl ( vehicle ) = control_remote then
27717: LD_VAR 0 1
27721: PPUSH
27722: CALL_OW 263
27726: PUSH
27727: LD_INT 2
27729: EQUAL
27730: IFFALSE 27791
// begin wait ( 0 0$2 ) ;
27732: LD_INT 70
27734: PPUSH
27735: CALL_OW 67
// if Connect ( vehicle ) then
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL 40054 0 1
27748: IFFALSE 27789
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27750: LD_VAR 0 1
27754: PPUSH
27755: LD_EXP 120
27759: PUSH
27760: LD_VAR 0 2
27764: ARRAY
27765: PUSH
27766: LD_INT 3
27768: ARRAY
27769: PPUSH
27770: LD_EXP 120
27774: PUSH
27775: LD_VAR 0 2
27779: ARRAY
27780: PUSH
27781: LD_INT 4
27783: ARRAY
27784: PPUSH
27785: CALL_OW 171
// end else
27789: GO 27830
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27791: LD_VAR 0 1
27795: PPUSH
27796: LD_EXP 120
27800: PUSH
27801: LD_VAR 0 2
27805: ARRAY
27806: PUSH
27807: LD_INT 3
27809: ARRAY
27810: PPUSH
27811: LD_EXP 120
27815: PUSH
27816: LD_VAR 0 2
27820: ARRAY
27821: PUSH
27822: LD_INT 4
27824: ARRAY
27825: PPUSH
27826: CALL_OW 171
// end ; end ;
27830: LD_VAR 0 3
27834: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27835: LD_INT 0
27837: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27838: LD_VAR 0 1
27842: PUSH
27843: LD_INT 250
27845: EQUAL
27846: PUSH
27847: LD_VAR 0 2
27851: PPUSH
27852: CALL_OW 264
27856: PUSH
27857: LD_EXP 50
27861: EQUAL
27862: AND
27863: IFFALSE 27884
// MinerPlaceMine ( unit , x , y ) ;
27865: LD_VAR 0 2
27869: PPUSH
27870: LD_VAR 0 4
27874: PPUSH
27875: LD_VAR 0 5
27879: PPUSH
27880: CALL 30612 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27884: LD_VAR 0 1
27888: PUSH
27889: LD_INT 251
27891: EQUAL
27892: PUSH
27893: LD_VAR 0 2
27897: PPUSH
27898: CALL_OW 264
27902: PUSH
27903: LD_EXP 50
27907: EQUAL
27908: AND
27909: IFFALSE 27930
// MinerDetonateMine ( unit , x , y ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_VAR 0 4
27920: PPUSH
27921: LD_VAR 0 5
27925: PPUSH
27926: CALL 30889 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27930: LD_VAR 0 1
27934: PUSH
27935: LD_INT 252
27937: EQUAL
27938: PUSH
27939: LD_VAR 0 2
27943: PPUSH
27944: CALL_OW 264
27948: PUSH
27949: LD_EXP 50
27953: EQUAL
27954: AND
27955: IFFALSE 27976
// MinerCreateMinefield ( unit , x , y ) ;
27957: LD_VAR 0 2
27961: PPUSH
27962: LD_VAR 0 4
27966: PPUSH
27967: LD_VAR 0 5
27971: PPUSH
27972: CALL 31306 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27976: LD_VAR 0 1
27980: PUSH
27981: LD_INT 253
27983: EQUAL
27984: PUSH
27985: LD_VAR 0 2
27989: PPUSH
27990: CALL_OW 257
27994: PUSH
27995: LD_INT 5
27997: EQUAL
27998: AND
27999: IFFALSE 28020
// ComBinocular ( unit , x , y ) ;
28001: LD_VAR 0 2
28005: PPUSH
28006: LD_VAR 0 4
28010: PPUSH
28011: LD_VAR 0 5
28015: PPUSH
28016: CALL 31677 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28020: LD_VAR 0 1
28024: PUSH
28025: LD_INT 254
28027: EQUAL
28028: PUSH
28029: LD_VAR 0 2
28033: PPUSH
28034: CALL_OW 264
28038: PUSH
28039: LD_EXP 45
28043: EQUAL
28044: AND
28045: PUSH
28046: LD_VAR 0 3
28050: PPUSH
28051: CALL_OW 263
28055: PUSH
28056: LD_INT 3
28058: EQUAL
28059: AND
28060: IFFALSE 28076
// HackDestroyVehicle ( unit , selectedUnit ) ;
28062: LD_VAR 0 2
28066: PPUSH
28067: LD_VAR 0 3
28071: PPUSH
28072: CALL 29972 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28076: LD_VAR 0 1
28080: PUSH
28081: LD_INT 255
28083: EQUAL
28084: PUSH
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 264
28094: PUSH
28095: LD_INT 14
28097: PUSH
28098: LD_INT 53
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: IN
28105: AND
28106: PUSH
28107: LD_VAR 0 4
28111: PPUSH
28112: LD_VAR 0 5
28116: PPUSH
28117: CALL_OW 488
28121: AND
28122: IFFALSE 28146
// CutTreeXYR ( unit , x , y , 12 ) ;
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 4
28133: PPUSH
28134: LD_VAR 0 5
28138: PPUSH
28139: LD_INT 12
28141: PPUSH
28142: CALL 28538 0 4
// if cmd = 256 then
28146: LD_VAR 0 1
28150: PUSH
28151: LD_INT 256
28153: EQUAL
28154: IFFALSE 28175
// SetFactoryWaypoint ( unit , x , y ) ;
28156: LD_VAR 0 2
28160: PPUSH
28161: LD_VAR 0 4
28165: PPUSH
28166: LD_VAR 0 5
28170: PPUSH
28171: CALL 28180 0 3
// end ;
28175: LD_VAR 0 6
28179: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28180: LD_INT 0
28182: PPUSH
28183: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28184: LD_VAR 0 1
28188: NOT
28189: PUSH
28190: LD_VAR 0 2
28194: PPUSH
28195: LD_VAR 0 3
28199: PPUSH
28200: CALL_OW 488
28204: NOT
28205: OR
28206: PUSH
28207: LD_VAR 0 1
28211: PPUSH
28212: CALL_OW 266
28216: PUSH
28217: LD_INT 3
28219: NONEQUAL
28220: PUSH
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL_OW 247
28230: PUSH
28231: LD_INT 1
28233: EQUAL
28234: NOT
28235: AND
28236: OR
28237: IFFALSE 28241
// exit ;
28239: GO 28390
// if GetType ( factory ) = unit_human then
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 247
28250: PUSH
28251: LD_INT 1
28253: EQUAL
28254: IFFALSE 28271
// factory := IsInUnit ( factory ) ;
28256: LD_ADDR_VAR 0 1
28260: PUSH
28261: LD_VAR 0 1
28265: PPUSH
28266: CALL_OW 310
28270: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 266
28280: PUSH
28281: LD_INT 3
28283: NONEQUAL
28284: IFFALSE 28288
// exit ;
28286: GO 28390
// if HexInfo ( x , y ) = factory then
28288: LD_VAR 0 2
28292: PPUSH
28293: LD_VAR 0 3
28297: PPUSH
28298: CALL_OW 428
28302: PUSH
28303: LD_VAR 0 1
28307: EQUAL
28308: IFFALSE 28335
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28310: LD_ADDR_EXP 120
28314: PUSH
28315: LD_EXP 120
28319: PPUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: LD_INT 0
28327: PPUSH
28328: CALL_OW 1
28332: ST_TO_ADDR
28333: GO 28386
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28335: LD_ADDR_EXP 120
28339: PUSH
28340: LD_EXP 120
28344: PPUSH
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 255
28359: PUSH
28360: LD_VAR 0 1
28364: PUSH
28365: LD_VAR 0 2
28369: PUSH
28370: LD_VAR 0 3
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: PPUSH
28381: CALL_OW 1
28385: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28386: CALL 28395 0 0
// end ;
28390: LD_VAR 0 4
28394: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28399: LD_STRING resetFactoryWaypoint();
28401: PPUSH
28402: CALL_OW 559
// if factoryWaypoints then
28406: LD_EXP 120
28410: IFFALSE 28533
// begin for i := 1 to factoryWaypoints do
28412: LD_ADDR_VAR 0 2
28416: PUSH
28417: DOUBLE
28418: LD_INT 1
28420: DEC
28421: ST_TO_ADDR
28422: LD_EXP 120
28426: PUSH
28427: FOR_TO
28428: IFFALSE 28531
// if factoryWaypoints [ i ] then
28430: LD_EXP 120
28434: PUSH
28435: LD_VAR 0 2
28439: ARRAY
28440: IFFALSE 28529
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
28442: LD_STRING setFactoryWaypointXY(
28444: PUSH
28445: LD_EXP 120
28449: PUSH
28450: LD_VAR 0 2
28454: ARRAY
28455: PUSH
28456: LD_INT 1
28458: ARRAY
28459: STR
28460: PUSH
28461: LD_STRING ,
28463: STR
28464: PUSH
28465: LD_EXP 120
28469: PUSH
28470: LD_VAR 0 2
28474: ARRAY
28475: PUSH
28476: LD_INT 2
28478: ARRAY
28479: STR
28480: PUSH
28481: LD_STRING ,
28483: STR
28484: PUSH
28485: LD_EXP 120
28489: PUSH
28490: LD_VAR 0 2
28494: ARRAY
28495: PUSH
28496: LD_INT 3
28498: ARRAY
28499: STR
28500: PUSH
28501: LD_STRING ,
28503: STR
28504: PUSH
28505: LD_EXP 120
28509: PUSH
28510: LD_VAR 0 2
28514: ARRAY
28515: PUSH
28516: LD_INT 4
28518: ARRAY
28519: STR
28520: PUSH
28521: LD_STRING )
28523: STR
28524: PPUSH
28525: CALL_OW 559
28529: GO 28427
28531: POP
28532: POP
// end ; end ;
28533: LD_VAR 0 1
28537: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28538: LD_INT 0
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28549: LD_VAR 0 1
28553: NOT
28554: PUSH
28555: LD_VAR 0 2
28559: PPUSH
28560: LD_VAR 0 3
28564: PPUSH
28565: CALL_OW 488
28569: NOT
28570: OR
28571: PUSH
28572: LD_VAR 0 4
28576: NOT
28577: OR
28578: IFFALSE 28582
// exit ;
28580: GO 28922
// list := [ ] ;
28582: LD_ADDR_VAR 0 13
28586: PUSH
28587: EMPTY
28588: ST_TO_ADDR
// if x - r < 0 then
28589: LD_VAR 0 2
28593: PUSH
28594: LD_VAR 0 4
28598: MINUS
28599: PUSH
28600: LD_INT 0
28602: LESS
28603: IFFALSE 28615
// min_x := 0 else
28605: LD_ADDR_VAR 0 7
28609: PUSH
28610: LD_INT 0
28612: ST_TO_ADDR
28613: GO 28631
// min_x := x - r ;
28615: LD_ADDR_VAR 0 7
28619: PUSH
28620: LD_VAR 0 2
28624: PUSH
28625: LD_VAR 0 4
28629: MINUS
28630: ST_TO_ADDR
// if y - r < 0 then
28631: LD_VAR 0 3
28635: PUSH
28636: LD_VAR 0 4
28640: MINUS
28641: PUSH
28642: LD_INT 0
28644: LESS
28645: IFFALSE 28657
// min_y := 0 else
28647: LD_ADDR_VAR 0 8
28651: PUSH
28652: LD_INT 0
28654: ST_TO_ADDR
28655: GO 28673
// min_y := y - r ;
28657: LD_ADDR_VAR 0 8
28661: PUSH
28662: LD_VAR 0 3
28666: PUSH
28667: LD_VAR 0 4
28671: MINUS
28672: ST_TO_ADDR
// max_x := x + r ;
28673: LD_ADDR_VAR 0 9
28677: PUSH
28678: LD_VAR 0 2
28682: PUSH
28683: LD_VAR 0 4
28687: PLUS
28688: ST_TO_ADDR
// max_y := y + r ;
28689: LD_ADDR_VAR 0 10
28693: PUSH
28694: LD_VAR 0 3
28698: PUSH
28699: LD_VAR 0 4
28703: PLUS
28704: ST_TO_ADDR
// for _x = min_x to max_x do
28705: LD_ADDR_VAR 0 11
28709: PUSH
28710: DOUBLE
28711: LD_VAR 0 7
28715: DEC
28716: ST_TO_ADDR
28717: LD_VAR 0 9
28721: PUSH
28722: FOR_TO
28723: IFFALSE 28840
// for _y = min_y to max_y do
28725: LD_ADDR_VAR 0 12
28729: PUSH
28730: DOUBLE
28731: LD_VAR 0 8
28735: DEC
28736: ST_TO_ADDR
28737: LD_VAR 0 10
28741: PUSH
28742: FOR_TO
28743: IFFALSE 28836
// begin if not ValidHex ( _x , _y ) then
28745: LD_VAR 0 11
28749: PPUSH
28750: LD_VAR 0 12
28754: PPUSH
28755: CALL_OW 488
28759: NOT
28760: IFFALSE 28764
// continue ;
28762: GO 28742
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28764: LD_VAR 0 11
28768: PPUSH
28769: LD_VAR 0 12
28773: PPUSH
28774: CALL_OW 351
28778: PUSH
28779: LD_VAR 0 11
28783: PPUSH
28784: LD_VAR 0 12
28788: PPUSH
28789: CALL_OW 554
28793: AND
28794: IFFALSE 28834
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28796: LD_ADDR_VAR 0 13
28800: PUSH
28801: LD_VAR 0 13
28805: PPUSH
28806: LD_VAR 0 13
28810: PUSH
28811: LD_INT 1
28813: PLUS
28814: PPUSH
28815: LD_VAR 0 11
28819: PUSH
28820: LD_VAR 0 12
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PPUSH
28829: CALL_OW 2
28833: ST_TO_ADDR
// end ;
28834: GO 28742
28836: POP
28837: POP
28838: GO 28722
28840: POP
28841: POP
// if not list then
28842: LD_VAR 0 13
28846: NOT
28847: IFFALSE 28851
// exit ;
28849: GO 28922
// for i in list do
28851: LD_ADDR_VAR 0 6
28855: PUSH
28856: LD_VAR 0 13
28860: PUSH
28861: FOR_IN
28862: IFFALSE 28920
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28864: LD_VAR 0 1
28868: PPUSH
28869: LD_STRING M
28871: PUSH
28872: LD_VAR 0 6
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PUSH
28881: LD_VAR 0 6
28885: PUSH
28886: LD_INT 2
28888: ARRAY
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: PPUSH
28914: CALL_OW 447
28918: GO 28861
28920: POP
28921: POP
// end ;
28922: LD_VAR 0 5
28926: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28927: LD_EXP 121
28931: NOT
28932: IFFALSE 28982
28934: GO 28936
28936: DISABLE
// begin initHack := true ;
28937: LD_ADDR_EXP 121
28941: PUSH
28942: LD_INT 1
28944: ST_TO_ADDR
// hackTanks := [ ] ;
28945: LD_ADDR_EXP 122
28949: PUSH
28950: EMPTY
28951: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28952: LD_ADDR_EXP 123
28956: PUSH
28957: EMPTY
28958: ST_TO_ADDR
// hackLimit := 3 ;
28959: LD_ADDR_EXP 124
28963: PUSH
28964: LD_INT 3
28966: ST_TO_ADDR
// hackDist := 12 ;
28967: LD_ADDR_EXP 125
28971: PUSH
28972: LD_INT 12
28974: ST_TO_ADDR
// hackCounter := [ ] ;
28975: LD_ADDR_EXP 126
28979: PUSH
28980: EMPTY
28981: ST_TO_ADDR
// end ;
28982: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28983: LD_EXP 121
28987: PUSH
28988: LD_INT 34
28990: PUSH
28991: LD_EXP 45
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PPUSH
29000: CALL_OW 69
29004: AND
29005: IFFALSE 29260
29007: GO 29009
29009: DISABLE
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
// begin enable ;
29014: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29015: LD_ADDR_VAR 0 1
29019: PUSH
29020: LD_INT 34
29022: PUSH
29023: LD_EXP 45
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: PUSH
29037: FOR_IN
29038: IFFALSE 29258
// begin if not i in hackTanks then
29040: LD_VAR 0 1
29044: PUSH
29045: LD_EXP 122
29049: IN
29050: NOT
29051: IFFALSE 29134
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29053: LD_ADDR_EXP 122
29057: PUSH
29058: LD_EXP 122
29062: PPUSH
29063: LD_EXP 122
29067: PUSH
29068: LD_INT 1
29070: PLUS
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 1
29081: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29082: LD_ADDR_EXP 123
29086: PUSH
29087: LD_EXP 123
29091: PPUSH
29092: LD_EXP 123
29096: PUSH
29097: LD_INT 1
29099: PLUS
29100: PPUSH
29101: EMPTY
29102: PPUSH
29103: CALL_OW 1
29107: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29108: LD_ADDR_EXP 126
29112: PUSH
29113: LD_EXP 126
29117: PPUSH
29118: LD_EXP 126
29122: PUSH
29123: LD_INT 1
29125: PLUS
29126: PPUSH
29127: EMPTY
29128: PPUSH
29129: CALL_OW 1
29133: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 302
29143: NOT
29144: IFFALSE 29157
// begin HackUnlinkAll ( i ) ;
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL 29263 0 1
// continue ;
29155: GO 29037
// end ; HackCheckCapturedStatus ( i ) ;
29157: LD_VAR 0 1
29161: PPUSH
29162: CALL 29706 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29166: LD_ADDR_VAR 0 2
29170: PUSH
29171: LD_INT 81
29173: PUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 255
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 33
29190: PUSH
29191: LD_INT 3
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 91
29200: PUSH
29201: LD_VAR 0 1
29205: PUSH
29206: LD_EXP 125
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 50
29218: PUSH
29219: EMPTY
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 69
29232: ST_TO_ADDR
// if not tmp then
29233: LD_VAR 0 2
29237: NOT
29238: IFFALSE 29242
// continue ;
29240: GO 29037
// HackLink ( i , tmp ) ;
29242: LD_VAR 0 1
29246: PPUSH
29247: LD_VAR 0 2
29251: PPUSH
29252: CALL 29399 0 2
// end ;
29256: GO 29037
29258: POP
29259: POP
// end ;
29260: PPOPN 2
29262: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29263: LD_INT 0
29265: PPUSH
29266: PPUSH
29267: PPUSH
// if not hack in hackTanks then
29268: LD_VAR 0 1
29272: PUSH
29273: LD_EXP 122
29277: IN
29278: NOT
29279: IFFALSE 29283
// exit ;
29281: GO 29394
// index := GetElementIndex ( hackTanks , hack ) ;
29283: LD_ADDR_VAR 0 4
29287: PUSH
29288: LD_EXP 122
29292: PPUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL 36868 0 2
29302: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29303: LD_EXP 123
29307: PUSH
29308: LD_VAR 0 4
29312: ARRAY
29313: IFFALSE 29394
// begin for i in hackTanksCaptured [ index ] do
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_EXP 123
29324: PUSH
29325: LD_VAR 0 4
29329: ARRAY
29330: PUSH
29331: FOR_IN
29332: IFFALSE 29358
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29334: LD_VAR 0 3
29338: PUSH
29339: LD_INT 1
29341: ARRAY
29342: PPUSH
29343: LD_VAR 0 3
29347: PUSH
29348: LD_INT 2
29350: ARRAY
29351: PPUSH
29352: CALL_OW 235
29356: GO 29331
29358: POP
29359: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29360: LD_ADDR_EXP 123
29364: PUSH
29365: LD_EXP 123
29369: PPUSH
29370: LD_VAR 0 4
29374: PPUSH
29375: EMPTY
29376: PPUSH
29377: CALL_OW 1
29381: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29382: LD_VAR 0 1
29386: PPUSH
29387: LD_INT 0
29389: PPUSH
29390: CALL_OW 505
// end ; end ;
29394: LD_VAR 0 2
29398: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29399: LD_INT 0
29401: PPUSH
29402: PPUSH
29403: PPUSH
// if not hack in hackTanks or not vehicles then
29404: LD_VAR 0 1
29408: PUSH
29409: LD_EXP 122
29413: IN
29414: NOT
29415: PUSH
29416: LD_VAR 0 2
29420: NOT
29421: OR
29422: IFFALSE 29426
// exit ;
29424: GO 29701
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29426: LD_ADDR_VAR 0 2
29430: PUSH
29431: LD_VAR 0 1
29435: PPUSH
29436: LD_VAR 0 2
29440: PPUSH
29441: LD_INT 1
29443: PPUSH
29444: LD_INT 1
29446: PPUSH
29447: CALL 37518 0 4
29451: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29452: LD_ADDR_VAR 0 5
29456: PUSH
29457: LD_EXP 122
29461: PPUSH
29462: LD_VAR 0 1
29466: PPUSH
29467: CALL 36868 0 2
29471: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29472: LD_EXP 123
29476: PUSH
29477: LD_VAR 0 5
29481: ARRAY
29482: PUSH
29483: LD_EXP 124
29487: LESS
29488: IFFALSE 29677
// begin for i := 1 to vehicles do
29490: LD_ADDR_VAR 0 4
29494: PUSH
29495: DOUBLE
29496: LD_INT 1
29498: DEC
29499: ST_TO_ADDR
29500: LD_VAR 0 2
29504: PUSH
29505: FOR_TO
29506: IFFALSE 29675
// begin if hackTanksCaptured [ index ] = hackLimit then
29508: LD_EXP 123
29512: PUSH
29513: LD_VAR 0 5
29517: ARRAY
29518: PUSH
29519: LD_EXP 124
29523: EQUAL
29524: IFFALSE 29528
// break ;
29526: GO 29675
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29528: LD_ADDR_EXP 126
29532: PUSH
29533: LD_EXP 126
29537: PPUSH
29538: LD_VAR 0 5
29542: PPUSH
29543: LD_EXP 126
29547: PUSH
29548: LD_VAR 0 5
29552: ARRAY
29553: PUSH
29554: LD_INT 1
29556: PLUS
29557: PPUSH
29558: CALL_OW 1
29562: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29563: LD_ADDR_EXP 123
29567: PUSH
29568: LD_EXP 123
29572: PPUSH
29573: LD_VAR 0 5
29577: PUSH
29578: LD_EXP 123
29582: PUSH
29583: LD_VAR 0 5
29587: ARRAY
29588: PUSH
29589: LD_INT 1
29591: PLUS
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PPUSH
29597: LD_VAR 0 2
29601: PUSH
29602: LD_VAR 0 4
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 2
29612: PUSH
29613: LD_VAR 0 4
29617: ARRAY
29618: PPUSH
29619: CALL_OW 255
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PPUSH
29628: CALL 37083 0 3
29632: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29633: LD_VAR 0 2
29637: PUSH
29638: LD_VAR 0 4
29642: ARRAY
29643: PPUSH
29644: LD_VAR 0 1
29648: PPUSH
29649: CALL_OW 255
29653: PPUSH
29654: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29658: LD_VAR 0 2
29662: PUSH
29663: LD_VAR 0 4
29667: ARRAY
29668: PPUSH
29669: CALL_OW 141
// end ;
29673: GO 29505
29675: POP
29676: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29677: LD_VAR 0 1
29681: PPUSH
29682: LD_EXP 123
29686: PUSH
29687: LD_VAR 0 5
29691: ARRAY
29692: PUSH
29693: LD_INT 0
29695: PLUS
29696: PPUSH
29697: CALL_OW 505
// end ;
29701: LD_VAR 0 3
29705: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29706: LD_INT 0
29708: PPUSH
29709: PPUSH
29710: PPUSH
29711: PPUSH
// if not hack in hackTanks then
29712: LD_VAR 0 1
29716: PUSH
29717: LD_EXP 122
29721: IN
29722: NOT
29723: IFFALSE 29727
// exit ;
29725: GO 29967
// index := GetElementIndex ( hackTanks , hack ) ;
29727: LD_ADDR_VAR 0 4
29731: PUSH
29732: LD_EXP 122
29736: PPUSH
29737: LD_VAR 0 1
29741: PPUSH
29742: CALL 36868 0 2
29746: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29747: LD_ADDR_VAR 0 3
29751: PUSH
29752: DOUBLE
29753: LD_EXP 123
29757: PUSH
29758: LD_VAR 0 4
29762: ARRAY
29763: INC
29764: ST_TO_ADDR
29765: LD_INT 1
29767: PUSH
29768: FOR_DOWNTO
29769: IFFALSE 29941
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29771: LD_ADDR_VAR 0 5
29775: PUSH
29776: LD_EXP 123
29780: PUSH
29781: LD_VAR 0 4
29785: ARRAY
29786: PUSH
29787: LD_VAR 0 3
29791: ARRAY
29792: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29793: LD_VAR 0 5
29797: PUSH
29798: LD_INT 1
29800: ARRAY
29801: PPUSH
29802: CALL_OW 302
29806: NOT
29807: PUSH
29808: LD_VAR 0 5
29812: PUSH
29813: LD_INT 1
29815: ARRAY
29816: PPUSH
29817: CALL_OW 255
29821: PUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 255
29831: NONEQUAL
29832: OR
29833: IFFALSE 29939
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29835: LD_VAR 0 5
29839: PUSH
29840: LD_INT 1
29842: ARRAY
29843: PPUSH
29844: CALL_OW 305
29848: PUSH
29849: LD_VAR 0 5
29853: PUSH
29854: LD_INT 1
29856: ARRAY
29857: PPUSH
29858: CALL_OW 255
29862: PUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 255
29872: EQUAL
29873: AND
29874: IFFALSE 29898
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29876: LD_VAR 0 5
29880: PUSH
29881: LD_INT 1
29883: ARRAY
29884: PPUSH
29885: LD_VAR 0 5
29889: PUSH
29890: LD_INT 2
29892: ARRAY
29893: PPUSH
29894: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29898: LD_ADDR_EXP 123
29902: PUSH
29903: LD_EXP 123
29907: PPUSH
29908: LD_VAR 0 4
29912: PPUSH
29913: LD_EXP 123
29917: PUSH
29918: LD_VAR 0 4
29922: ARRAY
29923: PPUSH
29924: LD_VAR 0 3
29928: PPUSH
29929: CALL_OW 3
29933: PPUSH
29934: CALL_OW 1
29938: ST_TO_ADDR
// end ; end ;
29939: GO 29768
29941: POP
29942: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29943: LD_VAR 0 1
29947: PPUSH
29948: LD_EXP 123
29952: PUSH
29953: LD_VAR 0 4
29957: ARRAY
29958: PUSH
29959: LD_INT 0
29961: PLUS
29962: PPUSH
29963: CALL_OW 505
// end ;
29967: LD_VAR 0 2
29971: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29972: LD_INT 0
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
// if not hack in hackTanks then
29978: LD_VAR 0 1
29982: PUSH
29983: LD_EXP 122
29987: IN
29988: NOT
29989: IFFALSE 29993
// exit ;
29991: GO 30078
// index := GetElementIndex ( hackTanks , hack ) ;
29993: LD_ADDR_VAR 0 5
29997: PUSH
29998: LD_EXP 122
30002: PPUSH
30003: LD_VAR 0 1
30007: PPUSH
30008: CALL 36868 0 2
30012: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30013: LD_ADDR_VAR 0 4
30017: PUSH
30018: DOUBLE
30019: LD_INT 1
30021: DEC
30022: ST_TO_ADDR
30023: LD_EXP 123
30027: PUSH
30028: LD_VAR 0 5
30032: ARRAY
30033: PUSH
30034: FOR_TO
30035: IFFALSE 30076
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30037: LD_EXP 123
30041: PUSH
30042: LD_VAR 0 5
30046: ARRAY
30047: PUSH
30048: LD_VAR 0 4
30052: ARRAY
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PUSH
30058: LD_VAR 0 2
30062: EQUAL
30063: IFFALSE 30074
// KillUnit ( vehicle ) ;
30065: LD_VAR 0 2
30069: PPUSH
30070: CALL_OW 66
30074: GO 30034
30076: POP
30077: POP
// end ;
30078: LD_VAR 0 3
30082: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30083: LD_EXP 127
30087: NOT
30088: IFFALSE 30123
30090: GO 30092
30092: DISABLE
// begin initMiner := true ;
30093: LD_ADDR_EXP 127
30097: PUSH
30098: LD_INT 1
30100: ST_TO_ADDR
// minersList := [ ] ;
30101: LD_ADDR_EXP 128
30105: PUSH
30106: EMPTY
30107: ST_TO_ADDR
// minerMinesList := [ ] ;
30108: LD_ADDR_EXP 129
30112: PUSH
30113: EMPTY
30114: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30115: LD_ADDR_EXP 130
30119: PUSH
30120: LD_INT 5
30122: ST_TO_ADDR
// end ;
30123: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30124: LD_EXP 127
30128: PUSH
30129: LD_INT 34
30131: PUSH
30132: LD_EXP 50
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PPUSH
30141: CALL_OW 69
30145: AND
30146: IFFALSE 30609
30148: GO 30150
30150: DISABLE
30151: LD_INT 0
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
// begin enable ;
30157: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30158: LD_ADDR_VAR 0 1
30162: PUSH
30163: LD_INT 34
30165: PUSH
30166: LD_EXP 50
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PPUSH
30175: CALL_OW 69
30179: PUSH
30180: FOR_IN
30181: IFFALSE 30253
// begin if not i in minersList then
30183: LD_VAR 0 1
30187: PUSH
30188: LD_EXP 128
30192: IN
30193: NOT
30194: IFFALSE 30251
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30196: LD_ADDR_EXP 128
30200: PUSH
30201: LD_EXP 128
30205: PPUSH
30206: LD_EXP 128
30210: PUSH
30211: LD_INT 1
30213: PLUS
30214: PPUSH
30215: LD_VAR 0 1
30219: PPUSH
30220: CALL_OW 1
30224: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30225: LD_ADDR_EXP 129
30229: PUSH
30230: LD_EXP 129
30234: PPUSH
30235: LD_EXP 129
30239: PUSH
30240: LD_INT 1
30242: PLUS
30243: PPUSH
30244: EMPTY
30245: PPUSH
30246: CALL_OW 1
30250: ST_TO_ADDR
// end end ;
30251: GO 30180
30253: POP
30254: POP
// for i := minerMinesList downto 1 do
30255: LD_ADDR_VAR 0 1
30259: PUSH
30260: DOUBLE
30261: LD_EXP 129
30265: INC
30266: ST_TO_ADDR
30267: LD_INT 1
30269: PUSH
30270: FOR_DOWNTO
30271: IFFALSE 30607
// begin if IsLive ( minersList [ i ] ) then
30273: LD_EXP 128
30277: PUSH
30278: LD_VAR 0 1
30282: ARRAY
30283: PPUSH
30284: CALL_OW 300
30288: IFFALSE 30316
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30290: LD_EXP 128
30294: PUSH
30295: LD_VAR 0 1
30299: ARRAY
30300: PPUSH
30301: LD_EXP 129
30305: PUSH
30306: LD_VAR 0 1
30310: ARRAY
30311: PPUSH
30312: CALL_OW 505
// if not minerMinesList [ i ] then
30316: LD_EXP 129
30320: PUSH
30321: LD_VAR 0 1
30325: ARRAY
30326: NOT
30327: IFFALSE 30331
// continue ;
30329: GO 30270
// for j := minerMinesList [ i ] downto 1 do
30331: LD_ADDR_VAR 0 2
30335: PUSH
30336: DOUBLE
30337: LD_EXP 129
30341: PUSH
30342: LD_VAR 0 1
30346: ARRAY
30347: INC
30348: ST_TO_ADDR
30349: LD_INT 1
30351: PUSH
30352: FOR_DOWNTO
30353: IFFALSE 30603
// begin side := GetSide ( minersList [ i ] ) ;
30355: LD_ADDR_VAR 0 3
30359: PUSH
30360: LD_EXP 128
30364: PUSH
30365: LD_VAR 0 1
30369: ARRAY
30370: PPUSH
30371: CALL_OW 255
30375: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30376: LD_ADDR_VAR 0 4
30380: PUSH
30381: LD_EXP 129
30385: PUSH
30386: LD_VAR 0 1
30390: ARRAY
30391: PUSH
30392: LD_VAR 0 2
30396: ARRAY
30397: PUSH
30398: LD_INT 1
30400: ARRAY
30401: PPUSH
30402: LD_EXP 129
30406: PUSH
30407: LD_VAR 0 1
30411: ARRAY
30412: PUSH
30413: LD_VAR 0 2
30417: ARRAY
30418: PUSH
30419: LD_INT 2
30421: ARRAY
30422: PPUSH
30423: CALL_OW 428
30427: ST_TO_ADDR
// if not tmp then
30428: LD_VAR 0 4
30432: NOT
30433: IFFALSE 30437
// continue ;
30435: GO 30352
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30437: LD_VAR 0 4
30441: PUSH
30442: LD_INT 81
30444: PUSH
30445: LD_VAR 0 3
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 69
30458: IN
30459: PUSH
30460: LD_EXP 129
30464: PUSH
30465: LD_VAR 0 1
30469: ARRAY
30470: PUSH
30471: LD_VAR 0 2
30475: ARRAY
30476: PUSH
30477: LD_INT 1
30479: ARRAY
30480: PPUSH
30481: LD_EXP 129
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: PUSH
30492: LD_VAR 0 2
30496: ARRAY
30497: PUSH
30498: LD_INT 2
30500: ARRAY
30501: PPUSH
30502: CALL_OW 458
30506: AND
30507: IFFALSE 30601
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30509: LD_EXP 129
30513: PUSH
30514: LD_VAR 0 1
30518: ARRAY
30519: PUSH
30520: LD_VAR 0 2
30524: ARRAY
30525: PUSH
30526: LD_INT 1
30528: ARRAY
30529: PPUSH
30530: LD_EXP 129
30534: PUSH
30535: LD_VAR 0 1
30539: ARRAY
30540: PUSH
30541: LD_VAR 0 2
30545: ARRAY
30546: PUSH
30547: LD_INT 2
30549: ARRAY
30550: PPUSH
30551: LD_VAR 0 3
30555: PPUSH
30556: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30560: LD_ADDR_EXP 129
30564: PUSH
30565: LD_EXP 129
30569: PPUSH
30570: LD_VAR 0 1
30574: PPUSH
30575: LD_EXP 129
30579: PUSH
30580: LD_VAR 0 1
30584: ARRAY
30585: PPUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: CALL_OW 3
30595: PPUSH
30596: CALL_OW 1
30600: ST_TO_ADDR
// end ; end ;
30601: GO 30352
30603: POP
30604: POP
// end ;
30605: GO 30270
30607: POP
30608: POP
// end ;
30609: PPOPN 4
30611: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30612: LD_INT 0
30614: PPUSH
30615: PPUSH
// result := false ;
30616: LD_ADDR_VAR 0 4
30620: PUSH
30621: LD_INT 0
30623: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 264
30633: PUSH
30634: LD_EXP 50
30638: EQUAL
30639: NOT
30640: IFFALSE 30644
// exit ;
30642: GO 30884
// index := GetElementIndex ( minersList , unit ) ;
30644: LD_ADDR_VAR 0 5
30648: PUSH
30649: LD_EXP 128
30653: PPUSH
30654: LD_VAR 0 1
30658: PPUSH
30659: CALL 36868 0 2
30663: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30664: LD_EXP 129
30668: PUSH
30669: LD_VAR 0 5
30673: ARRAY
30674: PUSH
30675: LD_EXP 130
30679: GREATEREQUAL
30680: IFFALSE 30684
// exit ;
30682: GO 30884
// ComMoveXY ( unit , x , y ) ;
30684: LD_VAR 0 1
30688: PPUSH
30689: LD_VAR 0 2
30693: PPUSH
30694: LD_VAR 0 3
30698: PPUSH
30699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30703: LD_INT 35
30705: PPUSH
30706: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30710: LD_VAR 0 1
30714: PPUSH
30715: LD_VAR 0 2
30719: PPUSH
30720: LD_VAR 0 3
30724: PPUSH
30725: CALL 67587 0 3
30729: NOT
30730: PUSH
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL_OW 314
30740: AND
30741: IFFALSE 30745
// exit ;
30743: GO 30884
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30745: LD_VAR 0 2
30749: PPUSH
30750: LD_VAR 0 3
30754: PPUSH
30755: CALL_OW 428
30759: PUSH
30760: LD_VAR 0 1
30764: EQUAL
30765: PUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 314
30775: NOT
30776: AND
30777: IFFALSE 30703
// PlaySoundXY ( x , y , PlantMine ) ;
30779: LD_VAR 0 2
30783: PPUSH
30784: LD_VAR 0 3
30788: PPUSH
30789: LD_STRING PlantMine
30791: PPUSH
30792: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30796: LD_VAR 0 2
30800: PPUSH
30801: LD_VAR 0 3
30805: PPUSH
30806: LD_VAR 0 1
30810: PPUSH
30811: CALL_OW 255
30815: PPUSH
30816: LD_INT 0
30818: PPUSH
30819: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30823: LD_ADDR_EXP 129
30827: PUSH
30828: LD_EXP 129
30832: PPUSH
30833: LD_VAR 0 5
30837: PUSH
30838: LD_EXP 129
30842: PUSH
30843: LD_VAR 0 5
30847: ARRAY
30848: PUSH
30849: LD_INT 1
30851: PLUS
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PPUSH
30857: LD_VAR 0 2
30861: PUSH
30862: LD_VAR 0 3
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PPUSH
30871: CALL 37083 0 3
30875: ST_TO_ADDR
// result := true ;
30876: LD_ADDR_VAR 0 4
30880: PUSH
30881: LD_INT 1
30883: ST_TO_ADDR
// end ;
30884: LD_VAR 0 4
30888: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30889: LD_INT 0
30891: PPUSH
30892: PPUSH
30893: PPUSH
// if not unit in minersList then
30894: LD_VAR 0 1
30898: PUSH
30899: LD_EXP 128
30903: IN
30904: NOT
30905: IFFALSE 30909
// exit ;
30907: GO 31301
// index := GetElementIndex ( minersList , unit ) ;
30909: LD_ADDR_VAR 0 6
30913: PUSH
30914: LD_EXP 128
30918: PPUSH
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL 36868 0 2
30928: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30929: LD_ADDR_VAR 0 5
30933: PUSH
30934: DOUBLE
30935: LD_EXP 129
30939: PUSH
30940: LD_VAR 0 6
30944: ARRAY
30945: INC
30946: ST_TO_ADDR
30947: LD_INT 1
30949: PUSH
30950: FOR_DOWNTO
30951: IFFALSE 31112
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30953: LD_EXP 129
30957: PUSH
30958: LD_VAR 0 6
30962: ARRAY
30963: PUSH
30964: LD_VAR 0 5
30968: ARRAY
30969: PUSH
30970: LD_INT 1
30972: ARRAY
30973: PUSH
30974: LD_VAR 0 2
30978: EQUAL
30979: PUSH
30980: LD_EXP 129
30984: PUSH
30985: LD_VAR 0 6
30989: ARRAY
30990: PUSH
30991: LD_VAR 0 5
30995: ARRAY
30996: PUSH
30997: LD_INT 2
30999: ARRAY
31000: PUSH
31001: LD_VAR 0 3
31005: EQUAL
31006: AND
31007: IFFALSE 31110
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31009: LD_EXP 129
31013: PUSH
31014: LD_VAR 0 6
31018: ARRAY
31019: PUSH
31020: LD_VAR 0 5
31024: ARRAY
31025: PUSH
31026: LD_INT 1
31028: ARRAY
31029: PPUSH
31030: LD_EXP 129
31034: PUSH
31035: LD_VAR 0 6
31039: ARRAY
31040: PUSH
31041: LD_VAR 0 5
31045: ARRAY
31046: PUSH
31047: LD_INT 2
31049: ARRAY
31050: PPUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: CALL_OW 255
31060: PPUSH
31061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31065: LD_ADDR_EXP 129
31069: PUSH
31070: LD_EXP 129
31074: PPUSH
31075: LD_VAR 0 6
31079: PPUSH
31080: LD_EXP 129
31084: PUSH
31085: LD_VAR 0 6
31089: ARRAY
31090: PPUSH
31091: LD_VAR 0 5
31095: PPUSH
31096: CALL_OW 3
31100: PPUSH
31101: CALL_OW 1
31105: ST_TO_ADDR
// exit ;
31106: POP
31107: POP
31108: GO 31301
// end ; end ;
31110: GO 30950
31112: POP
31113: POP
// for i := minerMinesList [ index ] downto 1 do
31114: LD_ADDR_VAR 0 5
31118: PUSH
31119: DOUBLE
31120: LD_EXP 129
31124: PUSH
31125: LD_VAR 0 6
31129: ARRAY
31130: INC
31131: ST_TO_ADDR
31132: LD_INT 1
31134: PUSH
31135: FOR_DOWNTO
31136: IFFALSE 31299
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31138: LD_EXP 129
31142: PUSH
31143: LD_VAR 0 6
31147: ARRAY
31148: PUSH
31149: LD_VAR 0 5
31153: ARRAY
31154: PUSH
31155: LD_INT 1
31157: ARRAY
31158: PPUSH
31159: LD_EXP 129
31163: PUSH
31164: LD_VAR 0 6
31168: ARRAY
31169: PUSH
31170: LD_VAR 0 5
31174: ARRAY
31175: PUSH
31176: LD_INT 2
31178: ARRAY
31179: PPUSH
31180: LD_VAR 0 2
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 298
31194: PUSH
31195: LD_INT 6
31197: LESS
31198: IFFALSE 31297
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31200: LD_EXP 129
31204: PUSH
31205: LD_VAR 0 6
31209: ARRAY
31210: PUSH
31211: LD_VAR 0 5
31215: ARRAY
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: LD_EXP 129
31225: PUSH
31226: LD_VAR 0 6
31230: ARRAY
31231: PUSH
31232: LD_VAR 0 5
31236: ARRAY
31237: PUSH
31238: LD_INT 2
31240: ARRAY
31241: PPUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 255
31251: PPUSH
31252: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31256: LD_ADDR_EXP 129
31260: PUSH
31261: LD_EXP 129
31265: PPUSH
31266: LD_VAR 0 6
31270: PPUSH
31271: LD_EXP 129
31275: PUSH
31276: LD_VAR 0 6
31280: ARRAY
31281: PPUSH
31282: LD_VAR 0 5
31286: PPUSH
31287: CALL_OW 3
31291: PPUSH
31292: CALL_OW 1
31296: ST_TO_ADDR
// end ; end ;
31297: GO 31135
31299: POP
31300: POP
// end ;
31301: LD_VAR 0 4
31305: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31306: LD_INT 0
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31317: LD_VAR 0 1
31321: PPUSH
31322: CALL_OW 264
31326: PUSH
31327: LD_EXP 50
31331: EQUAL
31332: NOT
31333: PUSH
31334: LD_VAR 0 1
31338: PUSH
31339: LD_EXP 128
31343: IN
31344: NOT
31345: OR
31346: IFFALSE 31350
// exit ;
31348: GO 31672
// index := GetElementIndex ( minersList , unit ) ;
31350: LD_ADDR_VAR 0 6
31354: PUSH
31355: LD_EXP 128
31359: PPUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: CALL 36868 0 2
31369: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31370: LD_ADDR_VAR 0 8
31374: PUSH
31375: LD_EXP 130
31379: PUSH
31380: LD_EXP 129
31384: PUSH
31385: LD_VAR 0 6
31389: ARRAY
31390: MINUS
31391: ST_TO_ADDR
// if not minesFreeAmount then
31392: LD_VAR 0 8
31396: NOT
31397: IFFALSE 31401
// exit ;
31399: GO 31672
// tmp := [ ] ;
31401: LD_ADDR_VAR 0 7
31405: PUSH
31406: EMPTY
31407: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31408: LD_ADDR_VAR 0 5
31412: PUSH
31413: DOUBLE
31414: LD_INT 1
31416: DEC
31417: ST_TO_ADDR
31418: LD_VAR 0 8
31422: PUSH
31423: FOR_TO
31424: IFFALSE 31619
// begin _d := rand ( 0 , 5 ) ;
31426: LD_ADDR_VAR 0 11
31430: PUSH
31431: LD_INT 0
31433: PPUSH
31434: LD_INT 5
31436: PPUSH
31437: CALL_OW 12
31441: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31442: LD_ADDR_VAR 0 12
31446: PUSH
31447: LD_INT 2
31449: PPUSH
31450: LD_INT 6
31452: PPUSH
31453: CALL_OW 12
31457: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31458: LD_ADDR_VAR 0 9
31462: PUSH
31463: LD_VAR 0 2
31467: PPUSH
31468: LD_VAR 0 11
31472: PPUSH
31473: LD_VAR 0 12
31477: PPUSH
31478: CALL_OW 272
31482: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31483: LD_ADDR_VAR 0 10
31487: PUSH
31488: LD_VAR 0 3
31492: PPUSH
31493: LD_VAR 0 11
31497: PPUSH
31498: LD_VAR 0 12
31502: PPUSH
31503: CALL_OW 273
31507: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31508: LD_VAR 0 9
31512: PPUSH
31513: LD_VAR 0 10
31517: PPUSH
31518: CALL_OW 488
31522: PUSH
31523: LD_VAR 0 9
31527: PUSH
31528: LD_VAR 0 10
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_VAR 0 7
31541: IN
31542: NOT
31543: AND
31544: PUSH
31545: LD_VAR 0 9
31549: PPUSH
31550: LD_VAR 0 10
31554: PPUSH
31555: CALL_OW 458
31559: NOT
31560: AND
31561: IFFALSE 31603
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31563: LD_ADDR_VAR 0 7
31567: PUSH
31568: LD_VAR 0 7
31572: PPUSH
31573: LD_VAR 0 7
31577: PUSH
31578: LD_INT 1
31580: PLUS
31581: PPUSH
31582: LD_VAR 0 9
31586: PUSH
31587: LD_VAR 0 10
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PPUSH
31596: CALL_OW 1
31600: ST_TO_ADDR
31601: GO 31617
// i := i - 1 ;
31603: LD_ADDR_VAR 0 5
31607: PUSH
31608: LD_VAR 0 5
31612: PUSH
31613: LD_INT 1
31615: MINUS
31616: ST_TO_ADDR
// end ;
31617: GO 31423
31619: POP
31620: POP
// for i in tmp do
31621: LD_ADDR_VAR 0 5
31625: PUSH
31626: LD_VAR 0 7
31630: PUSH
31631: FOR_IN
31632: IFFALSE 31670
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31634: LD_VAR 0 1
31638: PPUSH
31639: LD_VAR 0 5
31643: PUSH
31644: LD_INT 1
31646: ARRAY
31647: PPUSH
31648: LD_VAR 0 5
31652: PUSH
31653: LD_INT 2
31655: ARRAY
31656: PPUSH
31657: CALL 30612 0 3
31661: NOT
31662: IFFALSE 31668
// exit ;
31664: POP
31665: POP
31666: GO 31672
31668: GO 31631
31670: POP
31671: POP
// end ;
31672: LD_VAR 0 4
31676: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31677: LD_INT 0
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
// if not GetClass ( unit ) = class_sniper then
31686: LD_VAR 0 1
31690: PPUSH
31691: CALL_OW 257
31695: PUSH
31696: LD_INT 5
31698: EQUAL
31699: NOT
31700: IFFALSE 31704
// exit ;
31702: GO 32092
// dist := 8 ;
31704: LD_ADDR_VAR 0 5
31708: PUSH
31709: LD_INT 8
31711: ST_TO_ADDR
// viewRange := 12 ;
31712: LD_ADDR_VAR 0 7
31716: PUSH
31717: LD_INT 12
31719: ST_TO_ADDR
// side := GetSide ( unit ) ;
31720: LD_ADDR_VAR 0 6
31724: PUSH
31725: LD_VAR 0 1
31729: PPUSH
31730: CALL_OW 255
31734: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31735: LD_INT 61
31737: PPUSH
31738: LD_VAR 0 6
31742: PPUSH
31743: CALL_OW 321
31747: PUSH
31748: LD_INT 2
31750: EQUAL
31751: IFFALSE 31761
// viewRange := 16 ;
31753: LD_ADDR_VAR 0 7
31757: PUSH
31758: LD_INT 16
31760: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31761: LD_VAR 0 1
31765: PPUSH
31766: LD_VAR 0 2
31770: PPUSH
31771: LD_VAR 0 3
31775: PPUSH
31776: CALL_OW 297
31780: PUSH
31781: LD_VAR 0 5
31785: GREATER
31786: IFFALSE 31865
// begin ComMoveXY ( unit , x , y ) ;
31788: LD_VAR 0 1
31792: PPUSH
31793: LD_VAR 0 2
31797: PPUSH
31798: LD_VAR 0 3
31802: PPUSH
31803: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31807: LD_INT 35
31809: PPUSH
31810: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31814: LD_VAR 0 1
31818: PPUSH
31819: LD_VAR 0 2
31823: PPUSH
31824: LD_VAR 0 3
31828: PPUSH
31829: CALL 67587 0 3
31833: NOT
31834: IFFALSE 31838
// exit ;
31836: GO 32092
// until GetDistUnitXY ( unit , x , y ) < dist ;
31838: LD_VAR 0 1
31842: PPUSH
31843: LD_VAR 0 2
31847: PPUSH
31848: LD_VAR 0 3
31852: PPUSH
31853: CALL_OW 297
31857: PUSH
31858: LD_VAR 0 5
31862: LESS
31863: IFFALSE 31807
// end ; ComTurnXY ( unit , x , y ) ;
31865: LD_VAR 0 1
31869: PPUSH
31870: LD_VAR 0 2
31874: PPUSH
31875: LD_VAR 0 3
31879: PPUSH
31880: CALL_OW 118
// wait ( 5 ) ;
31884: LD_INT 5
31886: PPUSH
31887: CALL_OW 67
// _d := GetDir ( unit ) ;
31891: LD_ADDR_VAR 0 10
31895: PUSH
31896: LD_VAR 0 1
31900: PPUSH
31901: CALL_OW 254
31905: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31906: LD_ADDR_VAR 0 8
31910: PUSH
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 250
31920: PPUSH
31921: LD_VAR 0 10
31925: PPUSH
31926: LD_VAR 0 5
31930: PPUSH
31931: CALL_OW 272
31935: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31936: LD_ADDR_VAR 0 9
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 251
31950: PPUSH
31951: LD_VAR 0 10
31955: PPUSH
31956: LD_VAR 0 5
31960: PPUSH
31961: CALL_OW 273
31965: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31966: LD_VAR 0 8
31970: PPUSH
31971: LD_VAR 0 9
31975: PPUSH
31976: CALL_OW 488
31980: NOT
31981: IFFALSE 31985
// exit ;
31983: GO 32092
// ComAnimCustom ( unit , 1 ) ;
31985: LD_VAR 0 1
31989: PPUSH
31990: LD_INT 1
31992: PPUSH
31993: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31997: LD_VAR 0 8
32001: PPUSH
32002: LD_VAR 0 9
32006: PPUSH
32007: LD_VAR 0 6
32011: PPUSH
32012: LD_VAR 0 7
32016: PPUSH
32017: CALL_OW 330
// repeat wait ( 1 ) ;
32021: LD_INT 1
32023: PPUSH
32024: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 316
32037: PUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 314
32047: OR
32048: PUSH
32049: LD_VAR 0 1
32053: PPUSH
32054: CALL_OW 302
32058: NOT
32059: OR
32060: PUSH
32061: LD_VAR 0 1
32065: PPUSH
32066: CALL_OW 301
32070: OR
32071: IFFALSE 32021
// RemoveSeeing ( _x , _y , side ) ;
32073: LD_VAR 0 8
32077: PPUSH
32078: LD_VAR 0 9
32082: PPUSH
32083: LD_VAR 0 6
32087: PPUSH
32088: CALL_OW 331
// end ; end_of_file
32092: LD_VAR 0 4
32096: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32097: LD_INT 0
32099: PPUSH
32100: PPUSH
// if exist_mode then
32101: LD_VAR 0 2
32105: IFFALSE 32130
// unit := CreateCharacter ( prefix & ident ) else
32107: LD_ADDR_VAR 0 5
32111: PUSH
32112: LD_VAR 0 3
32116: PUSH
32117: LD_VAR 0 1
32121: STR
32122: PPUSH
32123: CALL_OW 34
32127: ST_TO_ADDR
32128: GO 32145
// unit := NewCharacter ( ident ) ;
32130: LD_ADDR_VAR 0 5
32134: PUSH
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 25
32144: ST_TO_ADDR
// result := unit ;
32145: LD_ADDR_VAR 0 4
32149: PUSH
32150: LD_VAR 0 5
32154: ST_TO_ADDR
// end ;
32155: LD_VAR 0 4
32159: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32160: LD_INT 0
32162: PPUSH
32163: PPUSH
// if not side or not nation then
32164: LD_VAR 0 1
32168: NOT
32169: PUSH
32170: LD_VAR 0 2
32174: NOT
32175: OR
32176: IFFALSE 32180
// exit ;
32178: GO 32948
// case nation of nation_american :
32180: LD_VAR 0 2
32184: PUSH
32185: LD_INT 1
32187: DOUBLE
32188: EQUAL
32189: IFTRUE 32193
32191: GO 32407
32193: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32194: LD_ADDR_VAR 0 4
32198: PUSH
32199: LD_INT 35
32201: PUSH
32202: LD_INT 45
32204: PUSH
32205: LD_INT 46
32207: PUSH
32208: LD_INT 47
32210: PUSH
32211: LD_INT 82
32213: PUSH
32214: LD_INT 83
32216: PUSH
32217: LD_INT 84
32219: PUSH
32220: LD_INT 85
32222: PUSH
32223: LD_INT 86
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 6
32234: PUSH
32235: LD_INT 15
32237: PUSH
32238: LD_INT 16
32240: PUSH
32241: LD_INT 7
32243: PUSH
32244: LD_INT 12
32246: PUSH
32247: LD_INT 13
32249: PUSH
32250: LD_INT 10
32252: PUSH
32253: LD_INT 14
32255: PUSH
32256: LD_INT 20
32258: PUSH
32259: LD_INT 21
32261: PUSH
32262: LD_INT 22
32264: PUSH
32265: LD_INT 25
32267: PUSH
32268: LD_INT 32
32270: PUSH
32271: LD_INT 27
32273: PUSH
32274: LD_INT 36
32276: PUSH
32277: LD_INT 69
32279: PUSH
32280: LD_INT 39
32282: PUSH
32283: LD_INT 34
32285: PUSH
32286: LD_INT 40
32288: PUSH
32289: LD_INT 48
32291: PUSH
32292: LD_INT 49
32294: PUSH
32295: LD_INT 50
32297: PUSH
32298: LD_INT 51
32300: PUSH
32301: LD_INT 52
32303: PUSH
32304: LD_INT 53
32306: PUSH
32307: LD_INT 54
32309: PUSH
32310: LD_INT 55
32312: PUSH
32313: LD_INT 56
32315: PUSH
32316: LD_INT 57
32318: PUSH
32319: LD_INT 58
32321: PUSH
32322: LD_INT 59
32324: PUSH
32325: LD_INT 60
32327: PUSH
32328: LD_INT 61
32330: PUSH
32331: LD_INT 62
32333: PUSH
32334: LD_INT 80
32336: PUSH
32337: LD_INT 82
32339: PUSH
32340: LD_INT 83
32342: PUSH
32343: LD_INT 84
32345: PUSH
32346: LD_INT 85
32348: PUSH
32349: LD_INT 86
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: ST_TO_ADDR
32405: GO 32872
32407: LD_INT 2
32409: DOUBLE
32410: EQUAL
32411: IFTRUE 32415
32413: GO 32641
32415: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32416: LD_ADDR_VAR 0 4
32420: PUSH
32421: LD_INT 35
32423: PUSH
32424: LD_INT 45
32426: PUSH
32427: LD_INT 46
32429: PUSH
32430: LD_INT 47
32432: PUSH
32433: LD_INT 82
32435: PUSH
32436: LD_INT 83
32438: PUSH
32439: LD_INT 84
32441: PUSH
32442: LD_INT 85
32444: PUSH
32445: LD_INT 87
32447: PUSH
32448: LD_INT 70
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 11
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: LD_INT 5
32465: PUSH
32466: LD_INT 6
32468: PUSH
32469: LD_INT 15
32471: PUSH
32472: LD_INT 18
32474: PUSH
32475: LD_INT 7
32477: PUSH
32478: LD_INT 17
32480: PUSH
32481: LD_INT 8
32483: PUSH
32484: LD_INT 20
32486: PUSH
32487: LD_INT 21
32489: PUSH
32490: LD_INT 22
32492: PUSH
32493: LD_INT 72
32495: PUSH
32496: LD_INT 26
32498: PUSH
32499: LD_INT 69
32501: PUSH
32502: LD_INT 39
32504: PUSH
32505: LD_INT 40
32507: PUSH
32508: LD_INT 41
32510: PUSH
32511: LD_INT 42
32513: PUSH
32514: LD_INT 43
32516: PUSH
32517: LD_INT 48
32519: PUSH
32520: LD_INT 49
32522: PUSH
32523: LD_INT 50
32525: PUSH
32526: LD_INT 51
32528: PUSH
32529: LD_INT 52
32531: PUSH
32532: LD_INT 53
32534: PUSH
32535: LD_INT 54
32537: PUSH
32538: LD_INT 55
32540: PUSH
32541: LD_INT 56
32543: PUSH
32544: LD_INT 60
32546: PUSH
32547: LD_INT 61
32549: PUSH
32550: LD_INT 62
32552: PUSH
32553: LD_INT 66
32555: PUSH
32556: LD_INT 67
32558: PUSH
32559: LD_INT 68
32561: PUSH
32562: LD_INT 81
32564: PUSH
32565: LD_INT 82
32567: PUSH
32568: LD_INT 83
32570: PUSH
32571: LD_INT 84
32573: PUSH
32574: LD_INT 85
32576: PUSH
32577: LD_INT 87
32579: PUSH
32580: LD_INT 88
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
32639: GO 32872
32641: LD_INT 3
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32649
32647: GO 32871
32649: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32650: LD_ADDR_VAR 0 4
32654: PUSH
32655: LD_INT 46
32657: PUSH
32658: LD_INT 47
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: LD_INT 82
32669: PUSH
32670: LD_INT 83
32672: PUSH
32673: LD_INT 84
32675: PUSH
32676: LD_INT 85
32678: PUSH
32679: LD_INT 86
32681: PUSH
32682: LD_INT 11
32684: PUSH
32685: LD_INT 9
32687: PUSH
32688: LD_INT 20
32690: PUSH
32691: LD_INT 19
32693: PUSH
32694: LD_INT 21
32696: PUSH
32697: LD_INT 24
32699: PUSH
32700: LD_INT 22
32702: PUSH
32703: LD_INT 25
32705: PUSH
32706: LD_INT 28
32708: PUSH
32709: LD_INT 29
32711: PUSH
32712: LD_INT 30
32714: PUSH
32715: LD_INT 31
32717: PUSH
32718: LD_INT 37
32720: PUSH
32721: LD_INT 38
32723: PUSH
32724: LD_INT 32
32726: PUSH
32727: LD_INT 27
32729: PUSH
32730: LD_INT 33
32732: PUSH
32733: LD_INT 69
32735: PUSH
32736: LD_INT 39
32738: PUSH
32739: LD_INT 34
32741: PUSH
32742: LD_INT 40
32744: PUSH
32745: LD_INT 71
32747: PUSH
32748: LD_INT 23
32750: PUSH
32751: LD_INT 44
32753: PUSH
32754: LD_INT 48
32756: PUSH
32757: LD_INT 49
32759: PUSH
32760: LD_INT 50
32762: PUSH
32763: LD_INT 51
32765: PUSH
32766: LD_INT 52
32768: PUSH
32769: LD_INT 53
32771: PUSH
32772: LD_INT 54
32774: PUSH
32775: LD_INT 55
32777: PUSH
32778: LD_INT 56
32780: PUSH
32781: LD_INT 57
32783: PUSH
32784: LD_INT 58
32786: PUSH
32787: LD_INT 59
32789: PUSH
32790: LD_INT 63
32792: PUSH
32793: LD_INT 64
32795: PUSH
32796: LD_INT 65
32798: PUSH
32799: LD_INT 82
32801: PUSH
32802: LD_INT 83
32804: PUSH
32805: LD_INT 84
32807: PUSH
32808: LD_INT 85
32810: PUSH
32811: LD_INT 86
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
32869: GO 32872
32871: POP
// if state > - 1 and state < 3 then
32872: LD_VAR 0 3
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: GREATER
32881: PUSH
32882: LD_VAR 0 3
32886: PUSH
32887: LD_INT 3
32889: LESS
32890: AND
32891: IFFALSE 32948
// for i in result do
32893: LD_ADDR_VAR 0 5
32897: PUSH
32898: LD_VAR 0 4
32902: PUSH
32903: FOR_IN
32904: IFFALSE 32946
// if GetTech ( i , side ) <> state then
32906: LD_VAR 0 5
32910: PPUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 321
32920: PUSH
32921: LD_VAR 0 3
32925: NONEQUAL
32926: IFFALSE 32944
// result := result diff i ;
32928: LD_ADDR_VAR 0 4
32932: PUSH
32933: LD_VAR 0 4
32937: PUSH
32938: LD_VAR 0 5
32942: DIFF
32943: ST_TO_ADDR
32944: GO 32903
32946: POP
32947: POP
// end ;
32948: LD_VAR 0 4
32952: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32953: LD_INT 0
32955: PPUSH
32956: PPUSH
32957: PPUSH
// result := true ;
32958: LD_ADDR_VAR 0 3
32962: PUSH
32963: LD_INT 1
32965: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_VAR 0 2
32975: PPUSH
32976: CALL_OW 480
32980: ST_TO_ADDR
// if not tmp then
32981: LD_VAR 0 5
32985: NOT
32986: IFFALSE 32990
// exit ;
32988: GO 33039
// for i in tmp do
32990: LD_ADDR_VAR 0 4
32994: PUSH
32995: LD_VAR 0 5
32999: PUSH
33000: FOR_IN
33001: IFFALSE 33037
// if GetTech ( i , side ) <> state_researched then
33003: LD_VAR 0 4
33007: PPUSH
33008: LD_VAR 0 1
33012: PPUSH
33013: CALL_OW 321
33017: PUSH
33018: LD_INT 2
33020: NONEQUAL
33021: IFFALSE 33035
// begin result := false ;
33023: LD_ADDR_VAR 0 3
33027: PUSH
33028: LD_INT 0
33030: ST_TO_ADDR
// exit ;
33031: POP
33032: POP
33033: GO 33039
// end ;
33035: GO 33000
33037: POP
33038: POP
// end ;
33039: LD_VAR 0 3
33043: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33044: LD_INT 0
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33059: LD_VAR 0 1
33063: NOT
33064: PUSH
33065: LD_VAR 0 1
33069: PPUSH
33070: CALL_OW 257
33074: PUSH
33075: LD_INT 9
33077: NONEQUAL
33078: OR
33079: IFFALSE 33083
// exit ;
33081: GO 33656
// side := GetSide ( unit ) ;
33083: LD_ADDR_VAR 0 9
33087: PUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 255
33097: ST_TO_ADDR
// tech_space := tech_spacanom ;
33098: LD_ADDR_VAR 0 12
33102: PUSH
33103: LD_INT 29
33105: ST_TO_ADDR
// tech_time := tech_taurad ;
33106: LD_ADDR_VAR 0 13
33110: PUSH
33111: LD_INT 28
33113: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33114: LD_ADDR_VAR 0 11
33118: PUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 310
33128: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33129: LD_VAR 0 11
33133: PPUSH
33134: CALL_OW 247
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: IFFALSE 33146
// exit ;
33144: GO 33656
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33146: LD_ADDR_VAR 0 8
33150: PUSH
33151: LD_INT 81
33153: PUSH
33154: LD_VAR 0 9
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: LD_INT 21
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PPUSH
33184: CALL_OW 69
33188: ST_TO_ADDR
// if not tmp then
33189: LD_VAR 0 8
33193: NOT
33194: IFFALSE 33198
// exit ;
33196: GO 33656
// if in_unit then
33198: LD_VAR 0 11
33202: IFFALSE 33226
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33204: LD_ADDR_VAR 0 10
33208: PUSH
33209: LD_VAR 0 8
33213: PPUSH
33214: LD_VAR 0 11
33218: PPUSH
33219: CALL_OW 74
33223: ST_TO_ADDR
33224: GO 33246
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33226: LD_ADDR_VAR 0 10
33230: PUSH
33231: LD_VAR 0 8
33235: PPUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 74
33245: ST_TO_ADDR
// if not enemy then
33246: LD_VAR 0 10
33250: NOT
33251: IFFALSE 33255
// exit ;
33253: GO 33656
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33255: LD_VAR 0 11
33259: PUSH
33260: LD_VAR 0 11
33264: PPUSH
33265: LD_VAR 0 10
33269: PPUSH
33270: CALL_OW 296
33274: PUSH
33275: LD_INT 13
33277: GREATER
33278: AND
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_VAR 0 10
33289: PPUSH
33290: CALL_OW 296
33294: PUSH
33295: LD_INT 12
33297: GREATER
33298: OR
33299: IFFALSE 33303
// exit ;
33301: GO 33656
// missile := [ 1 ] ;
33303: LD_ADDR_VAR 0 14
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33314: LD_VAR 0 9
33318: PPUSH
33319: LD_VAR 0 12
33323: PPUSH
33324: CALL_OW 325
33328: IFFALSE 33357
// missile := Replace ( missile , missile + 1 , 2 ) ;
33330: LD_ADDR_VAR 0 14
33334: PUSH
33335: LD_VAR 0 14
33339: PPUSH
33340: LD_VAR 0 14
33344: PUSH
33345: LD_INT 1
33347: PLUS
33348: PPUSH
33349: LD_INT 2
33351: PPUSH
33352: CALL_OW 1
33356: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33357: LD_VAR 0 9
33361: PPUSH
33362: LD_VAR 0 13
33366: PPUSH
33367: CALL_OW 325
33371: PUSH
33372: LD_VAR 0 10
33376: PPUSH
33377: CALL_OW 255
33381: PPUSH
33382: LD_VAR 0 13
33386: PPUSH
33387: CALL_OW 325
33391: NOT
33392: AND
33393: IFFALSE 33422
// missile := Replace ( missile , missile + 1 , 3 ) ;
33395: LD_ADDR_VAR 0 14
33399: PUSH
33400: LD_VAR 0 14
33404: PPUSH
33405: LD_VAR 0 14
33409: PUSH
33410: LD_INT 1
33412: PLUS
33413: PPUSH
33414: LD_INT 3
33416: PPUSH
33417: CALL_OW 1
33421: ST_TO_ADDR
// if missile < 2 then
33422: LD_VAR 0 14
33426: PUSH
33427: LD_INT 2
33429: LESS
33430: IFFALSE 33434
// exit ;
33432: GO 33656
// x := GetX ( enemy ) ;
33434: LD_ADDR_VAR 0 4
33438: PUSH
33439: LD_VAR 0 10
33443: PPUSH
33444: CALL_OW 250
33448: ST_TO_ADDR
// y := GetY ( enemy ) ;
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_VAR 0 10
33458: PPUSH
33459: CALL_OW 251
33463: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33464: LD_ADDR_VAR 0 6
33468: PUSH
33469: LD_VAR 0 4
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PPUSH
33478: LD_INT 1
33480: PPUSH
33481: CALL_OW 12
33485: PLUS
33486: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33487: LD_ADDR_VAR 0 7
33491: PUSH
33492: LD_VAR 0 5
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PPUSH
33501: LD_INT 1
33503: PPUSH
33504: CALL_OW 12
33508: PLUS
33509: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33510: LD_VAR 0 6
33514: PPUSH
33515: LD_VAR 0 7
33519: PPUSH
33520: CALL_OW 488
33524: NOT
33525: IFFALSE 33547
// begin _x := x ;
33527: LD_ADDR_VAR 0 6
33531: PUSH
33532: LD_VAR 0 4
33536: ST_TO_ADDR
// _y := y ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 5
33546: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33547: LD_ADDR_VAR 0 3
33551: PUSH
33552: LD_INT 1
33554: PPUSH
33555: LD_VAR 0 14
33559: PPUSH
33560: CALL_OW 12
33564: ST_TO_ADDR
// case i of 1 :
33565: LD_VAR 0 3
33569: PUSH
33570: LD_INT 1
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33595
33578: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33579: LD_VAR 0 1
33583: PPUSH
33584: LD_VAR 0 10
33588: PPUSH
33589: CALL_OW 115
33593: GO 33656
33595: LD_INT 2
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33603
33601: GO 33625
33603: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33604: LD_VAR 0 1
33608: PPUSH
33609: LD_VAR 0 6
33613: PPUSH
33614: LD_VAR 0 7
33618: PPUSH
33619: CALL_OW 153
33623: GO 33656
33625: LD_INT 3
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33633
33631: GO 33655
33633: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33634: LD_VAR 0 1
33638: PPUSH
33639: LD_VAR 0 6
33643: PPUSH
33644: LD_VAR 0 7
33648: PPUSH
33649: CALL_OW 154
33653: GO 33656
33655: POP
// end ;
33656: LD_VAR 0 2
33660: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33661: LD_INT 0
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
// if not unit or not building then
33669: LD_VAR 0 1
33673: NOT
33674: PUSH
33675: LD_VAR 0 2
33679: NOT
33680: OR
33681: IFFALSE 33685
// exit ;
33683: GO 33843
// x := GetX ( building ) ;
33685: LD_ADDR_VAR 0 5
33689: PUSH
33690: LD_VAR 0 2
33694: PPUSH
33695: CALL_OW 250
33699: ST_TO_ADDR
// y := GetY ( building ) ;
33700: LD_ADDR_VAR 0 6
33704: PUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: CALL_OW 251
33714: ST_TO_ADDR
// for i = 0 to 5 do
33715: LD_ADDR_VAR 0 4
33719: PUSH
33720: DOUBLE
33721: LD_INT 0
33723: DEC
33724: ST_TO_ADDR
33725: LD_INT 5
33727: PUSH
33728: FOR_TO
33729: IFFALSE 33841
// begin _x := ShiftX ( x , i , 3 ) ;
33731: LD_ADDR_VAR 0 7
33735: PUSH
33736: LD_VAR 0 5
33740: PPUSH
33741: LD_VAR 0 4
33745: PPUSH
33746: LD_INT 3
33748: PPUSH
33749: CALL_OW 272
33753: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33754: LD_ADDR_VAR 0 8
33758: PUSH
33759: LD_VAR 0 6
33763: PPUSH
33764: LD_VAR 0 4
33768: PPUSH
33769: LD_INT 3
33771: PPUSH
33772: CALL_OW 273
33776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33777: LD_VAR 0 7
33781: PPUSH
33782: LD_VAR 0 8
33786: PPUSH
33787: CALL_OW 488
33791: NOT
33792: IFFALSE 33796
// continue ;
33794: GO 33728
// if HexInfo ( _x , _y ) = 0 then
33796: LD_VAR 0 7
33800: PPUSH
33801: LD_VAR 0 8
33805: PPUSH
33806: CALL_OW 428
33810: PUSH
33811: LD_INT 0
33813: EQUAL
33814: IFFALSE 33839
// begin ComMoveXY ( unit , _x , _y ) ;
33816: LD_VAR 0 1
33820: PPUSH
33821: LD_VAR 0 7
33825: PPUSH
33826: LD_VAR 0 8
33830: PPUSH
33831: CALL_OW 111
// exit ;
33835: POP
33836: POP
33837: GO 33843
// end ; end ;
33839: GO 33728
33841: POP
33842: POP
// end ;
33843: LD_VAR 0 3
33847: RET
// export function ScanBase ( side , base_area ) ; begin
33848: LD_INT 0
33850: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_VAR 0 2
33860: PPUSH
33861: LD_INT 81
33863: PUSH
33864: LD_VAR 0 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PPUSH
33873: CALL_OW 70
33877: ST_TO_ADDR
// end ;
33878: LD_VAR 0 3
33882: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
// result := false ;
33889: LD_ADDR_VAR 0 2
33893: PUSH
33894: LD_INT 0
33896: ST_TO_ADDR
// side := GetSide ( unit ) ;
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 255
33911: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 248
33926: ST_TO_ADDR
// case nat of 1 :
33927: LD_VAR 0 4
33931: PUSH
33932: LD_INT 1
33934: DOUBLE
33935: EQUAL
33936: IFTRUE 33940
33938: GO 33951
33940: POP
// tech := tech_lassight ; 2 :
33941: LD_ADDR_VAR 0 5
33945: PUSH
33946: LD_INT 12
33948: ST_TO_ADDR
33949: GO 33990
33951: LD_INT 2
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33959
33957: GO 33970
33959: POP
// tech := tech_mortar ; 3 :
33960: LD_ADDR_VAR 0 5
33964: PUSH
33965: LD_INT 41
33967: ST_TO_ADDR
33968: GO 33990
33970: LD_INT 3
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 33989
33978: POP
// tech := tech_bazooka ; end ;
33979: LD_ADDR_VAR 0 5
33983: PUSH
33984: LD_INT 44
33986: ST_TO_ADDR
33987: GO 33990
33989: POP
// if Researched ( side , tech ) then
33990: LD_VAR 0 3
33994: PPUSH
33995: LD_VAR 0 5
33999: PPUSH
34000: CALL_OW 325
34004: IFFALSE 34031
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34006: LD_ADDR_VAR 0 2
34010: PUSH
34011: LD_INT 5
34013: PUSH
34014: LD_INT 8
34016: PUSH
34017: LD_INT 9
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: PUSH
34025: LD_VAR 0 4
34029: ARRAY
34030: ST_TO_ADDR
// end ;
34031: LD_VAR 0 2
34035: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
34040: PPUSH
// if not mines then
34041: LD_VAR 0 2
34045: NOT
34046: IFFALSE 34050
// exit ;
34048: GO 34194
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34050: LD_ADDR_VAR 0 5
34054: PUSH
34055: LD_INT 81
34057: PUSH
34058: LD_VAR 0 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 21
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PPUSH
34088: CALL_OW 69
34092: ST_TO_ADDR
// for i in mines do
34093: LD_ADDR_VAR 0 4
34097: PUSH
34098: LD_VAR 0 2
34102: PUSH
34103: FOR_IN
34104: IFFALSE 34192
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34106: LD_VAR 0 4
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PPUSH
34115: LD_VAR 0 4
34119: PUSH
34120: LD_INT 2
34122: ARRAY
34123: PPUSH
34124: CALL_OW 458
34128: NOT
34129: IFFALSE 34133
// continue ;
34131: GO 34103
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34133: LD_VAR 0 4
34137: PUSH
34138: LD_INT 1
34140: ARRAY
34141: PPUSH
34142: LD_VAR 0 4
34146: PUSH
34147: LD_INT 2
34149: ARRAY
34150: PPUSH
34151: CALL_OW 428
34155: PUSH
34156: LD_VAR 0 5
34160: IN
34161: IFFALSE 34190
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34163: LD_VAR 0 4
34167: PUSH
34168: LD_INT 1
34170: ARRAY
34171: PPUSH
34172: LD_VAR 0 4
34176: PUSH
34177: LD_INT 2
34179: ARRAY
34180: PPUSH
34181: LD_VAR 0 1
34185: PPUSH
34186: CALL_OW 456
// end ;
34190: GO 34103
34192: POP
34193: POP
// end ;
34194: LD_VAR 0 3
34198: RET
// export function Count ( array ) ; var i ; begin
34199: LD_INT 0
34201: PPUSH
34202: PPUSH
// result := 0 ;
34203: LD_ADDR_VAR 0 2
34207: PUSH
34208: LD_INT 0
34210: ST_TO_ADDR
// for i in array do
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_VAR 0 1
34220: PUSH
34221: FOR_IN
34222: IFFALSE 34246
// if i then
34224: LD_VAR 0 3
34228: IFFALSE 34244
// result := result + 1 ;
34230: LD_ADDR_VAR 0 2
34234: PUSH
34235: LD_VAR 0 2
34239: PUSH
34240: LD_INT 1
34242: PLUS
34243: ST_TO_ADDR
34244: GO 34221
34246: POP
34247: POP
// end ;
34248: LD_VAR 0 2
34252: RET
// export function IsEmpty ( building ) ; begin
34253: LD_INT 0
34255: PPUSH
// if not building then
34256: LD_VAR 0 1
34260: NOT
34261: IFFALSE 34265
// exit ;
34263: GO 34308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34265: LD_ADDR_VAR 0 2
34269: PUSH
34270: LD_VAR 0 1
34274: PUSH
34275: LD_INT 22
34277: PUSH
34278: LD_VAR 0 1
34282: PPUSH
34283: CALL_OW 255
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 58
34294: PUSH
34295: EMPTY
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PPUSH
34302: CALL_OW 69
34306: IN
34307: ST_TO_ADDR
// end ;
34308: LD_VAR 0 2
34312: RET
// export function IsNotFull ( building ) ; begin
34313: LD_INT 0
34315: PPUSH
// if not building then
34316: LD_VAR 0 1
34320: NOT
34321: IFFALSE 34325
// exit ;
34323: GO 34344
// result := UnitsInside ( building ) < 6 ;
34325: LD_ADDR_VAR 0 2
34329: PUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 313
34339: PUSH
34340: LD_INT 6
34342: LESS
34343: ST_TO_ADDR
// end ;
34344: LD_VAR 0 2
34348: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34349: LD_INT 0
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
// tmp := [ ] ;
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: EMPTY
34361: ST_TO_ADDR
// list := [ ] ;
34362: LD_ADDR_VAR 0 5
34366: PUSH
34367: EMPTY
34368: ST_TO_ADDR
// for i = 16 to 25 do
34369: LD_ADDR_VAR 0 4
34373: PUSH
34374: DOUBLE
34375: LD_INT 16
34377: DEC
34378: ST_TO_ADDR
34379: LD_INT 25
34381: PUSH
34382: FOR_TO
34383: IFFALSE 34456
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34385: LD_ADDR_VAR 0 3
34389: PUSH
34390: LD_VAR 0 3
34394: PUSH
34395: LD_INT 22
34397: PUSH
34398: LD_VAR 0 1
34402: PPUSH
34403: CALL_OW 255
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 91
34414: PUSH
34415: LD_VAR 0 1
34419: PUSH
34420: LD_INT 6
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 30
34430: PUSH
34431: LD_VAR 0 4
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: PPUSH
34448: CALL_OW 69
34452: ADD
34453: ST_TO_ADDR
34454: GO 34382
34456: POP
34457: POP
// for i = 1 to tmp do
34458: LD_ADDR_VAR 0 4
34462: PUSH
34463: DOUBLE
34464: LD_INT 1
34466: DEC
34467: ST_TO_ADDR
34468: LD_VAR 0 3
34472: PUSH
34473: FOR_TO
34474: IFFALSE 34562
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34476: LD_ADDR_VAR 0 5
34480: PUSH
34481: LD_VAR 0 5
34485: PUSH
34486: LD_VAR 0 3
34490: PUSH
34491: LD_VAR 0 4
34495: ARRAY
34496: PPUSH
34497: CALL_OW 266
34501: PUSH
34502: LD_VAR 0 3
34506: PUSH
34507: LD_VAR 0 4
34511: ARRAY
34512: PPUSH
34513: CALL_OW 250
34517: PUSH
34518: LD_VAR 0 3
34522: PUSH
34523: LD_VAR 0 4
34527: ARRAY
34528: PPUSH
34529: CALL_OW 251
34533: PUSH
34534: LD_VAR 0 3
34538: PUSH
34539: LD_VAR 0 4
34543: ARRAY
34544: PPUSH
34545: CALL_OW 254
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: PUSH
34556: EMPTY
34557: LIST
34558: ADD
34559: ST_TO_ADDR
34560: GO 34473
34562: POP
34563: POP
// result := list ;
34564: LD_ADDR_VAR 0 2
34568: PUSH
34569: LD_VAR 0 5
34573: ST_TO_ADDR
// end ;
34574: LD_VAR 0 2
34578: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34579: LD_INT 0
34581: PPUSH
34582: PPUSH
34583: PPUSH
34584: PPUSH
34585: PPUSH
34586: PPUSH
34587: PPUSH
// if not factory then
34588: LD_VAR 0 1
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 35190
// if control = control_apeman then
34597: LD_VAR 0 4
34601: PUSH
34602: LD_INT 5
34604: EQUAL
34605: IFFALSE 34714
// begin tmp := UnitsInside ( factory ) ;
34607: LD_ADDR_VAR 0 8
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 313
34621: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34622: LD_VAR 0 8
34626: PPUSH
34627: LD_INT 25
34629: PUSH
34630: LD_INT 12
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PPUSH
34637: CALL_OW 72
34641: NOT
34642: IFFALSE 34652
// control := control_manual ;
34644: LD_ADDR_VAR 0 4
34648: PUSH
34649: LD_INT 1
34651: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34652: LD_ADDR_VAR 0 8
34656: PUSH
34657: LD_VAR 0 1
34661: PPUSH
34662: CALL 34349 0 1
34666: ST_TO_ADDR
// if tmp then
34667: LD_VAR 0 8
34671: IFFALSE 34714
// begin for i in tmp do
34673: LD_ADDR_VAR 0 7
34677: PUSH
34678: LD_VAR 0 8
34682: PUSH
34683: FOR_IN
34684: IFFALSE 34712
// if i [ 1 ] = b_ext_radio then
34686: LD_VAR 0 7
34690: PUSH
34691: LD_INT 1
34693: ARRAY
34694: PUSH
34695: LD_INT 22
34697: EQUAL
34698: IFFALSE 34710
// begin control := control_remote ;
34700: LD_ADDR_VAR 0 4
34704: PUSH
34705: LD_INT 2
34707: ST_TO_ADDR
// break ;
34708: GO 34712
// end ;
34710: GO 34683
34712: POP
34713: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34714: LD_VAR 0 1
34718: PPUSH
34719: LD_VAR 0 2
34723: PPUSH
34724: LD_VAR 0 3
34728: PPUSH
34729: LD_VAR 0 4
34733: PPUSH
34734: LD_VAR 0 5
34738: PPUSH
34739: CALL_OW 448
34743: IFFALSE 34778
// begin result := [ chassis , engine , control , weapon ] ;
34745: LD_ADDR_VAR 0 6
34749: PUSH
34750: LD_VAR 0 2
34754: PUSH
34755: LD_VAR 0 3
34759: PUSH
34760: LD_VAR 0 4
34764: PUSH
34765: LD_VAR 0 5
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: ST_TO_ADDR
// exit ;
34776: GO 35190
// end ; _chassis := AvailableChassisList ( factory ) ;
34778: LD_ADDR_VAR 0 9
34782: PUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL_OW 475
34792: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34793: LD_ADDR_VAR 0 11
34797: PUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL_OW 476
34807: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34808: LD_ADDR_VAR 0 12
34812: PUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: CALL_OW 477
34822: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34823: LD_ADDR_VAR 0 10
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 478
34837: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34838: LD_VAR 0 9
34842: NOT
34843: PUSH
34844: LD_VAR 0 11
34848: NOT
34849: OR
34850: PUSH
34851: LD_VAR 0 12
34855: NOT
34856: OR
34857: PUSH
34858: LD_VAR 0 10
34862: NOT
34863: OR
34864: IFFALSE 34899
// begin result := [ chassis , engine , control , weapon ] ;
34866: LD_ADDR_VAR 0 6
34870: PUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_VAR 0 3
34880: PUSH
34881: LD_VAR 0 4
34885: PUSH
34886: LD_VAR 0 5
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// exit ;
34897: GO 35190
// end ; if not chassis in _chassis then
34899: LD_VAR 0 2
34903: PUSH
34904: LD_VAR 0 9
34908: IN
34909: NOT
34910: IFFALSE 34936
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34912: LD_ADDR_VAR 0 2
34916: PUSH
34917: LD_VAR 0 9
34921: PUSH
34922: LD_INT 1
34924: PPUSH
34925: LD_VAR 0 9
34929: PPUSH
34930: CALL_OW 12
34934: ARRAY
34935: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34936: LD_VAR 0 2
34940: PPUSH
34941: LD_VAR 0 3
34945: PPUSH
34946: CALL 35195 0 2
34950: NOT
34951: IFFALSE 35010
// repeat engine := _engine [ 1 ] ;
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_VAR 0 11
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34967: LD_ADDR_VAR 0 11
34971: PUSH
34972: LD_VAR 0 11
34976: PPUSH
34977: LD_INT 1
34979: PPUSH
34980: CALL_OW 3
34984: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34985: LD_VAR 0 2
34989: PPUSH
34990: LD_VAR 0 3
34994: PPUSH
34995: CALL 35195 0 2
34999: PUSH
35000: LD_VAR 0 11
35004: PUSH
35005: EMPTY
35006: EQUAL
35007: OR
35008: IFFALSE 34953
// if not control in _control then
35010: LD_VAR 0 4
35014: PUSH
35015: LD_VAR 0 12
35019: IN
35020: NOT
35021: IFFALSE 35047
// control := _control [ rand ( 1 , _control ) ] ;
35023: LD_ADDR_VAR 0 4
35027: PUSH
35028: LD_VAR 0 12
35032: PUSH
35033: LD_INT 1
35035: PPUSH
35036: LD_VAR 0 12
35040: PPUSH
35041: CALL_OW 12
35045: ARRAY
35046: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35047: LD_VAR 0 2
35051: PPUSH
35052: LD_VAR 0 5
35056: PPUSH
35057: CALL 35415 0 2
35061: NOT
35062: IFFALSE 35121
// repeat weapon := _weapon [ 1 ] ;
35064: LD_ADDR_VAR 0 5
35068: PUSH
35069: LD_VAR 0 10
35073: PUSH
35074: LD_INT 1
35076: ARRAY
35077: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35078: LD_ADDR_VAR 0 10
35082: PUSH
35083: LD_VAR 0 10
35087: PPUSH
35088: LD_INT 1
35090: PPUSH
35091: CALL_OW 3
35095: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35096: LD_VAR 0 2
35100: PPUSH
35101: LD_VAR 0 5
35105: PPUSH
35106: CALL 35415 0 2
35110: PUSH
35111: LD_VAR 0 10
35115: PUSH
35116: EMPTY
35117: EQUAL
35118: OR
35119: IFFALSE 35064
// result := [ ] ;
35121: LD_ADDR_VAR 0 6
35125: PUSH
35126: EMPTY
35127: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35128: LD_VAR 0 1
35132: PPUSH
35133: LD_VAR 0 2
35137: PPUSH
35138: LD_VAR 0 3
35142: PPUSH
35143: LD_VAR 0 4
35147: PPUSH
35148: LD_VAR 0 5
35152: PPUSH
35153: CALL_OW 448
35157: IFFALSE 35190
// result := [ chassis , engine , control , weapon ] ;
35159: LD_ADDR_VAR 0 6
35163: PUSH
35164: LD_VAR 0 2
35168: PUSH
35169: LD_VAR 0 3
35173: PUSH
35174: LD_VAR 0 4
35178: PUSH
35179: LD_VAR 0 5
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
// end ;
35190: LD_VAR 0 6
35194: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35195: LD_INT 0
35197: PPUSH
// if not chassis or not engine then
35198: LD_VAR 0 1
35202: NOT
35203: PUSH
35204: LD_VAR 0 2
35208: NOT
35209: OR
35210: IFFALSE 35214
// exit ;
35212: GO 35410
// case engine of engine_solar :
35214: LD_VAR 0 2
35218: PUSH
35219: LD_INT 2
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35265
35227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35228: LD_ADDR_VAR 0 3
35232: PUSH
35233: LD_INT 11
35235: PUSH
35236: LD_INT 12
35238: PUSH
35239: LD_INT 13
35241: PUSH
35242: LD_INT 14
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 3
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
35263: GO 35394
35265: LD_INT 1
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35273
35271: GO 35335
35273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_INT 11
35281: PUSH
35282: LD_INT 12
35284: PUSH
35285: LD_INT 13
35287: PUSH
35288: LD_INT 14
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: LD_INT 3
35299: PUSH
35300: LD_INT 4
35302: PUSH
35303: LD_INT 5
35305: PUSH
35306: LD_INT 21
35308: PUSH
35309: LD_INT 23
35311: PUSH
35312: LD_INT 22
35314: PUSH
35315: LD_INT 24
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
35333: GO 35394
35335: LD_INT 3
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35393
35343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35344: LD_ADDR_VAR 0 3
35348: PUSH
35349: LD_INT 13
35351: PUSH
35352: LD_INT 14
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: LD_INT 5
35366: PUSH
35367: LD_INT 21
35369: PUSH
35370: LD_INT 22
35372: PUSH
35373: LD_INT 23
35375: PUSH
35376: LD_INT 24
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: ST_TO_ADDR
35391: GO 35394
35393: POP
// result := ( chassis in result ) ;
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_VAR 0 1
35403: PUSH
35404: LD_VAR 0 3
35408: IN
35409: ST_TO_ADDR
// end ;
35410: LD_VAR 0 3
35414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35415: LD_INT 0
35417: PPUSH
// if not chassis or not weapon then
35418: LD_VAR 0 1
35422: NOT
35423: PUSH
35424: LD_VAR 0 2
35428: NOT
35429: OR
35430: IFFALSE 35434
// exit ;
35432: GO 36496
// case weapon of us_machine_gun :
35434: LD_VAR 0 2
35438: PUSH
35439: LD_INT 2
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35477
35447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35448: LD_ADDR_VAR 0 3
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 3
35461: PUSH
35462: LD_INT 4
35464: PUSH
35465: LD_INT 5
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: ST_TO_ADDR
35475: GO 36480
35477: LD_INT 3
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35485
35483: GO 35515
35485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35486: LD_ADDR_VAR 0 3
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: LD_INT 3
35499: PUSH
35500: LD_INT 4
35502: PUSH
35503: LD_INT 5
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: ST_TO_ADDR
35513: GO 36480
35515: LD_INT 11
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35523
35521: GO 35553
35523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35524: LD_ADDR_VAR 0 3
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 3
35537: PUSH
35538: LD_INT 4
35540: PUSH
35541: LD_INT 5
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
35551: GO 36480
35553: LD_INT 4
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 35587
35561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_INT 2
35569: PUSH
35570: LD_INT 3
35572: PUSH
35573: LD_INT 4
35575: PUSH
35576: LD_INT 5
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 36480
35587: LD_INT 5
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35621
35595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: LD_INT 4
35609: PUSH
35610: LD_INT 5
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 36480
35621: LD_INT 9
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35655
35629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 3
35640: PUSH
35641: LD_INT 4
35643: PUSH
35644: LD_INT 5
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
35653: GO 36480
35655: LD_INT 7
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 35689
35663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: LD_INT 3
35674: PUSH
35675: LD_INT 4
35677: PUSH
35678: LD_INT 5
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
35687: GO 36480
35689: LD_INT 12
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35697
35695: GO 35723
35697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35698: LD_ADDR_VAR 0 3
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: LD_INT 5
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
35721: GO 36480
35723: LD_INT 13
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35731
35729: GO 35757
35731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: LD_INT 4
35745: PUSH
35746: LD_INT 5
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
35755: GO 36480
35757: LD_INT 14
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35765
35763: GO 35783
35765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_INT 4
35773: PUSH
35774: LD_INT 5
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: ST_TO_ADDR
35781: GO 36480
35783: LD_INT 6
35785: DOUBLE
35786: EQUAL
35787: IFTRUE 35791
35789: GO 35809
35791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35792: LD_ADDR_VAR 0 3
35796: PUSH
35797: LD_INT 4
35799: PUSH
35800: LD_INT 5
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: ST_TO_ADDR
35807: GO 36480
35809: LD_INT 10
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35817
35815: GO 35835
35817: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_INT 4
35825: PUSH
35826: LD_INT 5
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: ST_TO_ADDR
35833: GO 36480
35835: LD_INT 22
35837: DOUBLE
35838: EQUAL
35839: IFTRUE 35843
35841: GO 35869
35843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35844: LD_ADDR_VAR 0 3
35848: PUSH
35849: LD_INT 11
35851: PUSH
35852: LD_INT 12
35854: PUSH
35855: LD_INT 13
35857: PUSH
35858: LD_INT 14
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
35867: GO 36480
35869: LD_INT 23
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35877
35875: GO 35903
35877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35878: LD_ADDR_VAR 0 3
35882: PUSH
35883: LD_INT 11
35885: PUSH
35886: LD_INT 12
35888: PUSH
35889: LD_INT 13
35891: PUSH
35892: LD_INT 14
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: ST_TO_ADDR
35901: GO 36480
35903: LD_INT 24
35905: DOUBLE
35906: EQUAL
35907: IFTRUE 35911
35909: GO 35937
35911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35912: LD_ADDR_VAR 0 3
35916: PUSH
35917: LD_INT 11
35919: PUSH
35920: LD_INT 12
35922: PUSH
35923: LD_INT 13
35925: PUSH
35926: LD_INT 14
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: ST_TO_ADDR
35935: GO 36480
35937: LD_INT 30
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35945
35943: GO 35971
35945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35946: LD_ADDR_VAR 0 3
35950: PUSH
35951: LD_INT 11
35953: PUSH
35954: LD_INT 12
35956: PUSH
35957: LD_INT 13
35959: PUSH
35960: LD_INT 14
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: ST_TO_ADDR
35969: GO 36480
35971: LD_INT 25
35973: DOUBLE
35974: EQUAL
35975: IFTRUE 35979
35977: GO 35997
35979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35980: LD_ADDR_VAR 0 3
35984: PUSH
35985: LD_INT 13
35987: PUSH
35988: LD_INT 14
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: ST_TO_ADDR
35995: GO 36480
35997: LD_INT 27
35999: DOUBLE
36000: EQUAL
36001: IFTRUE 36005
36003: GO 36023
36005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36006: LD_ADDR_VAR 0 3
36010: PUSH
36011: LD_INT 13
36013: PUSH
36014: LD_INT 14
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: ST_TO_ADDR
36021: GO 36480
36023: LD_EXP 48
36027: DOUBLE
36028: EQUAL
36029: IFTRUE 36033
36031: GO 36059
36033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36034: LD_ADDR_VAR 0 3
36038: PUSH
36039: LD_INT 11
36041: PUSH
36042: LD_INT 12
36044: PUSH
36045: LD_INT 13
36047: PUSH
36048: LD_INT 14
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: ST_TO_ADDR
36057: GO 36480
36059: LD_INT 28
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36067
36065: GO 36085
36067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36068: LD_ADDR_VAR 0 3
36072: PUSH
36073: LD_INT 13
36075: PUSH
36076: LD_INT 14
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: ST_TO_ADDR
36083: GO 36480
36085: LD_INT 29
36087: DOUBLE
36088: EQUAL
36089: IFTRUE 36093
36091: GO 36111
36093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36094: LD_ADDR_VAR 0 3
36098: PUSH
36099: LD_INT 13
36101: PUSH
36102: LD_INT 14
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: ST_TO_ADDR
36109: GO 36480
36111: LD_INT 31
36113: DOUBLE
36114: EQUAL
36115: IFTRUE 36119
36117: GO 36137
36119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36120: LD_ADDR_VAR 0 3
36124: PUSH
36125: LD_INT 13
36127: PUSH
36128: LD_INT 14
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: ST_TO_ADDR
36135: GO 36480
36137: LD_INT 26
36139: DOUBLE
36140: EQUAL
36141: IFTRUE 36145
36143: GO 36163
36145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36146: LD_ADDR_VAR 0 3
36150: PUSH
36151: LD_INT 13
36153: PUSH
36154: LD_INT 14
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 36480
36163: LD_INT 42
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36197
36171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36172: LD_ADDR_VAR 0 3
36176: PUSH
36177: LD_INT 21
36179: PUSH
36180: LD_INT 22
36182: PUSH
36183: LD_INT 23
36185: PUSH
36186: LD_INT 24
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
36195: GO 36480
36197: LD_INT 43
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36205
36203: GO 36231
36205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36206: LD_ADDR_VAR 0 3
36210: PUSH
36211: LD_INT 21
36213: PUSH
36214: LD_INT 22
36216: PUSH
36217: LD_INT 23
36219: PUSH
36220: LD_INT 24
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
36229: GO 36480
36231: LD_INT 44
36233: DOUBLE
36234: EQUAL
36235: IFTRUE 36239
36237: GO 36265
36239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36240: LD_ADDR_VAR 0 3
36244: PUSH
36245: LD_INT 21
36247: PUSH
36248: LD_INT 22
36250: PUSH
36251: LD_INT 23
36253: PUSH
36254: LD_INT 24
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
36263: GO 36480
36265: LD_INT 45
36267: DOUBLE
36268: EQUAL
36269: IFTRUE 36273
36271: GO 36299
36273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: LD_INT 21
36281: PUSH
36282: LD_INT 22
36284: PUSH
36285: LD_INT 23
36287: PUSH
36288: LD_INT 24
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: ST_TO_ADDR
36297: GO 36480
36299: LD_INT 49
36301: DOUBLE
36302: EQUAL
36303: IFTRUE 36307
36305: GO 36333
36307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36308: LD_ADDR_VAR 0 3
36312: PUSH
36313: LD_INT 21
36315: PUSH
36316: LD_INT 22
36318: PUSH
36319: LD_INT 23
36321: PUSH
36322: LD_INT 24
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
36331: GO 36480
36333: LD_INT 51
36335: DOUBLE
36336: EQUAL
36337: IFTRUE 36341
36339: GO 36367
36341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36342: LD_ADDR_VAR 0 3
36346: PUSH
36347: LD_INT 21
36349: PUSH
36350: LD_INT 22
36352: PUSH
36353: LD_INT 23
36355: PUSH
36356: LD_INT 24
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: ST_TO_ADDR
36365: GO 36480
36367: LD_INT 52
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36375
36373: GO 36401
36375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: LD_INT 21
36383: PUSH
36384: LD_INT 22
36386: PUSH
36387: LD_INT 23
36389: PUSH
36390: LD_INT 24
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
36399: GO 36480
36401: LD_INT 53
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36409
36407: GO 36427
36409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36410: LD_ADDR_VAR 0 3
36414: PUSH
36415: LD_INT 23
36417: PUSH
36418: LD_INT 24
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: ST_TO_ADDR
36425: GO 36480
36427: LD_INT 46
36429: DOUBLE
36430: EQUAL
36431: IFTRUE 36435
36433: GO 36453
36435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36436: LD_ADDR_VAR 0 3
36440: PUSH
36441: LD_INT 23
36443: PUSH
36444: LD_INT 24
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: ST_TO_ADDR
36451: GO 36480
36453: LD_INT 47
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36461
36459: GO 36479
36461: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36462: LD_ADDR_VAR 0 3
36466: PUSH
36467: LD_INT 23
36469: PUSH
36470: LD_INT 24
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: ST_TO_ADDR
36477: GO 36480
36479: POP
// result := ( chassis in result ) ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_VAR 0 1
36489: PUSH
36490: LD_VAR 0 3
36494: IN
36495: ST_TO_ADDR
// end ;
36496: LD_VAR 0 3
36500: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36501: LD_INT 0
36503: PPUSH
36504: PPUSH
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
// result := array ;
36510: LD_ADDR_VAR 0 5
36514: PUSH
36515: LD_VAR 0 1
36519: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36520: LD_VAR 0 1
36524: NOT
36525: PUSH
36526: LD_VAR 0 2
36530: NOT
36531: OR
36532: PUSH
36533: LD_VAR 0 3
36537: NOT
36538: OR
36539: PUSH
36540: LD_VAR 0 2
36544: PUSH
36545: LD_VAR 0 1
36549: GREATER
36550: OR
36551: PUSH
36552: LD_VAR 0 3
36556: PUSH
36557: LD_VAR 0 1
36561: GREATER
36562: OR
36563: IFFALSE 36567
// exit ;
36565: GO 36863
// if direction then
36567: LD_VAR 0 4
36571: IFFALSE 36635
// begin d := 1 ;
36573: LD_ADDR_VAR 0 9
36577: PUSH
36578: LD_INT 1
36580: ST_TO_ADDR
// if i_from > i_to then
36581: LD_VAR 0 2
36585: PUSH
36586: LD_VAR 0 3
36590: GREATER
36591: IFFALSE 36617
// length := ( array - i_from ) + i_to else
36593: LD_ADDR_VAR 0 11
36597: PUSH
36598: LD_VAR 0 1
36602: PUSH
36603: LD_VAR 0 2
36607: MINUS
36608: PUSH
36609: LD_VAR 0 3
36613: PLUS
36614: ST_TO_ADDR
36615: GO 36633
// length := i_to - i_from ;
36617: LD_ADDR_VAR 0 11
36621: PUSH
36622: LD_VAR 0 3
36626: PUSH
36627: LD_VAR 0 2
36631: MINUS
36632: ST_TO_ADDR
// end else
36633: GO 36696
// begin d := - 1 ;
36635: LD_ADDR_VAR 0 9
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: ST_TO_ADDR
// if i_from > i_to then
36644: LD_VAR 0 2
36648: PUSH
36649: LD_VAR 0 3
36653: GREATER
36654: IFFALSE 36674
// length := i_from - i_to else
36656: LD_ADDR_VAR 0 11
36660: PUSH
36661: LD_VAR 0 2
36665: PUSH
36666: LD_VAR 0 3
36670: MINUS
36671: ST_TO_ADDR
36672: GO 36696
// length := ( array - i_to ) + i_from ;
36674: LD_ADDR_VAR 0 11
36678: PUSH
36679: LD_VAR 0 1
36683: PUSH
36684: LD_VAR 0 3
36688: MINUS
36689: PUSH
36690: LD_VAR 0 2
36694: PLUS
36695: ST_TO_ADDR
// end ; if not length then
36696: LD_VAR 0 11
36700: NOT
36701: IFFALSE 36705
// exit ;
36703: GO 36863
// tmp := array ;
36705: LD_ADDR_VAR 0 10
36709: PUSH
36710: LD_VAR 0 1
36714: ST_TO_ADDR
// for i = 1 to length do
36715: LD_ADDR_VAR 0 6
36719: PUSH
36720: DOUBLE
36721: LD_INT 1
36723: DEC
36724: ST_TO_ADDR
36725: LD_VAR 0 11
36729: PUSH
36730: FOR_TO
36731: IFFALSE 36851
// begin for j = 1 to array do
36733: LD_ADDR_VAR 0 7
36737: PUSH
36738: DOUBLE
36739: LD_INT 1
36741: DEC
36742: ST_TO_ADDR
36743: LD_VAR 0 1
36747: PUSH
36748: FOR_TO
36749: IFFALSE 36837
// begin k := j + d ;
36751: LD_ADDR_VAR 0 8
36755: PUSH
36756: LD_VAR 0 7
36760: PUSH
36761: LD_VAR 0 9
36765: PLUS
36766: ST_TO_ADDR
// if k > array then
36767: LD_VAR 0 8
36771: PUSH
36772: LD_VAR 0 1
36776: GREATER
36777: IFFALSE 36787
// k := 1 ;
36779: LD_ADDR_VAR 0 8
36783: PUSH
36784: LD_INT 1
36786: ST_TO_ADDR
// if not k then
36787: LD_VAR 0 8
36791: NOT
36792: IFFALSE 36804
// k := array ;
36794: LD_ADDR_VAR 0 8
36798: PUSH
36799: LD_VAR 0 1
36803: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36804: LD_ADDR_VAR 0 10
36808: PUSH
36809: LD_VAR 0 10
36813: PPUSH
36814: LD_VAR 0 8
36818: PPUSH
36819: LD_VAR 0 1
36823: PUSH
36824: LD_VAR 0 7
36828: ARRAY
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
// end ;
36835: GO 36748
36837: POP
36838: POP
// array := tmp ;
36839: LD_ADDR_VAR 0 1
36843: PUSH
36844: LD_VAR 0 10
36848: ST_TO_ADDR
// end ;
36849: GO 36730
36851: POP
36852: POP
// result := array ;
36853: LD_ADDR_VAR 0 5
36857: PUSH
36858: LD_VAR 0 1
36862: ST_TO_ADDR
// end ;
36863: LD_VAR 0 5
36867: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36868: LD_INT 0
36870: PPUSH
36871: PPUSH
// result := 0 ;
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_INT 0
36879: ST_TO_ADDR
// if not array or not value in array then
36880: LD_VAR 0 1
36884: NOT
36885: PUSH
36886: LD_VAR 0 2
36890: PUSH
36891: LD_VAR 0 1
36895: IN
36896: NOT
36897: OR
36898: IFFALSE 36902
// exit ;
36900: GO 36956
// for i = 1 to array do
36902: LD_ADDR_VAR 0 4
36906: PUSH
36907: DOUBLE
36908: LD_INT 1
36910: DEC
36911: ST_TO_ADDR
36912: LD_VAR 0 1
36916: PUSH
36917: FOR_TO
36918: IFFALSE 36954
// if value = array [ i ] then
36920: LD_VAR 0 2
36924: PUSH
36925: LD_VAR 0 1
36929: PUSH
36930: LD_VAR 0 4
36934: ARRAY
36935: EQUAL
36936: IFFALSE 36952
// begin result := i ;
36938: LD_ADDR_VAR 0 3
36942: PUSH
36943: LD_VAR 0 4
36947: ST_TO_ADDR
// exit ;
36948: POP
36949: POP
36950: GO 36956
// end ;
36952: GO 36917
36954: POP
36955: POP
// end ;
36956: LD_VAR 0 3
36960: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36961: LD_INT 0
36963: PPUSH
// vc_chassis := chassis ;
36964: LD_ADDR_OWVAR 37
36968: PUSH
36969: LD_VAR 0 1
36973: ST_TO_ADDR
// vc_engine := engine ;
36974: LD_ADDR_OWVAR 39
36978: PUSH
36979: LD_VAR 0 2
36983: ST_TO_ADDR
// vc_control := control ;
36984: LD_ADDR_OWVAR 38
36988: PUSH
36989: LD_VAR 0 3
36993: ST_TO_ADDR
// vc_weapon := weapon ;
36994: LD_ADDR_OWVAR 40
36998: PUSH
36999: LD_VAR 0 4
37003: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37004: LD_ADDR_OWVAR 41
37008: PUSH
37009: LD_VAR 0 5
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 6
37018: RET
// export function WantPlant ( unit ) ; var task ; begin
37019: LD_INT 0
37021: PPUSH
37022: PPUSH
// result := false ;
37023: LD_ADDR_VAR 0 2
37027: PUSH
37028: LD_INT 0
37030: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 437
37045: ST_TO_ADDR
// if task then
37046: LD_VAR 0 3
37050: IFFALSE 37078
// if task [ 1 ] [ 1 ] = p then
37052: LD_VAR 0 3
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: PUSH
37061: LD_INT 1
37063: ARRAY
37064: PUSH
37065: LD_STRING p
37067: EQUAL
37068: IFFALSE 37078
// result := true ;
37070: LD_ADDR_VAR 0 2
37074: PUSH
37075: LD_INT 1
37077: ST_TO_ADDR
// end ;
37078: LD_VAR 0 2
37082: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37083: LD_INT 0
37085: PPUSH
37086: PPUSH
37087: PPUSH
37088: PPUSH
// if pos < 1 then
37089: LD_VAR 0 2
37093: PUSH
37094: LD_INT 1
37096: LESS
37097: IFFALSE 37101
// exit ;
37099: GO 37404
// if pos = 1 then
37101: LD_VAR 0 2
37105: PUSH
37106: LD_INT 1
37108: EQUAL
37109: IFFALSE 37142
// result := Replace ( arr , pos [ 1 ] , value ) else
37111: LD_ADDR_VAR 0 4
37115: PUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: LD_VAR 0 2
37125: PUSH
37126: LD_INT 1
37128: ARRAY
37129: PPUSH
37130: LD_VAR 0 3
37134: PPUSH
37135: CALL_OW 1
37139: ST_TO_ADDR
37140: GO 37404
// begin tmp := arr ;
37142: LD_ADDR_VAR 0 6
37146: PUSH
37147: LD_VAR 0 1
37151: ST_TO_ADDR
// s_arr := [ tmp ] ;
37152: LD_ADDR_VAR 0 7
37156: PUSH
37157: LD_VAR 0 6
37161: PUSH
37162: EMPTY
37163: LIST
37164: ST_TO_ADDR
// for i = 1 to pos - 1 do
37165: LD_ADDR_VAR 0 5
37169: PUSH
37170: DOUBLE
37171: LD_INT 1
37173: DEC
37174: ST_TO_ADDR
37175: LD_VAR 0 2
37179: PUSH
37180: LD_INT 1
37182: MINUS
37183: PUSH
37184: FOR_TO
37185: IFFALSE 37230
// begin tmp := tmp [ pos [ i ] ] ;
37187: LD_ADDR_VAR 0 6
37191: PUSH
37192: LD_VAR 0 6
37196: PUSH
37197: LD_VAR 0 2
37201: PUSH
37202: LD_VAR 0 5
37206: ARRAY
37207: ARRAY
37208: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37209: LD_ADDR_VAR 0 7
37213: PUSH
37214: LD_VAR 0 7
37218: PUSH
37219: LD_VAR 0 6
37223: PUSH
37224: EMPTY
37225: LIST
37226: ADD
37227: ST_TO_ADDR
// end ;
37228: GO 37184
37230: POP
37231: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37232: LD_ADDR_VAR 0 6
37236: PUSH
37237: LD_VAR 0 6
37241: PPUSH
37242: LD_VAR 0 2
37246: PUSH
37247: LD_VAR 0 2
37251: ARRAY
37252: PPUSH
37253: LD_VAR 0 3
37257: PPUSH
37258: CALL_OW 1
37262: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37263: LD_ADDR_VAR 0 7
37267: PUSH
37268: LD_VAR 0 7
37272: PPUSH
37273: LD_VAR 0 7
37277: PPUSH
37278: LD_VAR 0 6
37282: PPUSH
37283: CALL_OW 1
37287: ST_TO_ADDR
// for i = s_arr downto 2 do
37288: LD_ADDR_VAR 0 5
37292: PUSH
37293: DOUBLE
37294: LD_VAR 0 7
37298: INC
37299: ST_TO_ADDR
37300: LD_INT 2
37302: PUSH
37303: FOR_DOWNTO
37304: IFFALSE 37388
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37306: LD_ADDR_VAR 0 6
37310: PUSH
37311: LD_VAR 0 7
37315: PUSH
37316: LD_VAR 0 5
37320: PUSH
37321: LD_INT 1
37323: MINUS
37324: ARRAY
37325: PPUSH
37326: LD_VAR 0 2
37330: PUSH
37331: LD_VAR 0 5
37335: PUSH
37336: LD_INT 1
37338: MINUS
37339: ARRAY
37340: PPUSH
37341: LD_VAR 0 7
37345: PUSH
37346: LD_VAR 0 5
37350: ARRAY
37351: PPUSH
37352: CALL_OW 1
37356: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37357: LD_ADDR_VAR 0 7
37361: PUSH
37362: LD_VAR 0 7
37366: PPUSH
37367: LD_VAR 0 5
37371: PUSH
37372: LD_INT 1
37374: MINUS
37375: PPUSH
37376: LD_VAR 0 6
37380: PPUSH
37381: CALL_OW 1
37385: ST_TO_ADDR
// end ;
37386: GO 37303
37388: POP
37389: POP
// result := s_arr [ 1 ] ;
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: LD_VAR 0 7
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: ST_TO_ADDR
// end ; end ;
37404: LD_VAR 0 4
37408: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37409: LD_INT 0
37411: PPUSH
37412: PPUSH
// if not list then
37413: LD_VAR 0 1
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 37513
// i := list [ pos1 ] ;
37422: LD_ADDR_VAR 0 5
37426: PUSH
37427: LD_VAR 0 1
37431: PUSH
37432: LD_VAR 0 2
37436: ARRAY
37437: ST_TO_ADDR
// if not i then
37438: LD_VAR 0 5
37442: NOT
37443: IFFALSE 37447
// exit ;
37445: GO 37513
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37447: LD_ADDR_VAR 0 1
37451: PUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: LD_VAR 0 2
37461: PPUSH
37462: LD_VAR 0 1
37466: PUSH
37467: LD_VAR 0 3
37471: ARRAY
37472: PPUSH
37473: CALL_OW 1
37477: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37478: LD_ADDR_VAR 0 1
37482: PUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: LD_VAR 0 3
37492: PPUSH
37493: LD_VAR 0 5
37497: PPUSH
37498: CALL_OW 1
37502: ST_TO_ADDR
// result := list ;
37503: LD_ADDR_VAR 0 4
37507: PUSH
37508: LD_VAR 0 1
37512: ST_TO_ADDR
// end ;
37513: LD_VAR 0 4
37517: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37518: LD_INT 0
37520: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37521: LD_ADDR_VAR 0 5
37525: PUSH
37526: LD_VAR 0 1
37530: PPUSH
37531: CALL_OW 250
37535: PPUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 251
37545: PPUSH
37546: LD_VAR 0 2
37550: PPUSH
37551: LD_VAR 0 3
37555: PPUSH
37556: LD_VAR 0 4
37560: PPUSH
37561: CALL 37571 0 5
37565: ST_TO_ADDR
// end ;
37566: LD_VAR 0 5
37570: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
// if not list then
37577: LD_VAR 0 3
37581: NOT
37582: IFFALSE 37586
// exit ;
37584: GO 37974
// result := [ ] ;
37586: LD_ADDR_VAR 0 6
37590: PUSH
37591: EMPTY
37592: ST_TO_ADDR
// for i in list do
37593: LD_ADDR_VAR 0 7
37597: PUSH
37598: LD_VAR 0 3
37602: PUSH
37603: FOR_IN
37604: IFFALSE 37806
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37606: LD_ADDR_VAR 0 9
37610: PUSH
37611: LD_VAR 0 7
37615: PPUSH
37616: LD_VAR 0 1
37620: PPUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: CALL_OW 297
37630: ST_TO_ADDR
// if not result then
37631: LD_VAR 0 6
37635: NOT
37636: IFFALSE 37662
// result := [ [ i , tmp ] ] else
37638: LD_ADDR_VAR 0 6
37642: PUSH
37643: LD_VAR 0 7
37647: PUSH
37648: LD_VAR 0 9
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: EMPTY
37658: LIST
37659: ST_TO_ADDR
37660: GO 37804
// begin if result [ result ] [ 2 ] < tmp then
37662: LD_VAR 0 6
37666: PUSH
37667: LD_VAR 0 6
37671: ARRAY
37672: PUSH
37673: LD_INT 2
37675: ARRAY
37676: PUSH
37677: LD_VAR 0 9
37681: LESS
37682: IFFALSE 37724
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37684: LD_ADDR_VAR 0 6
37688: PUSH
37689: LD_VAR 0 6
37693: PPUSH
37694: LD_VAR 0 6
37698: PUSH
37699: LD_INT 1
37701: PLUS
37702: PPUSH
37703: LD_VAR 0 7
37707: PUSH
37708: LD_VAR 0 9
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PPUSH
37717: CALL_OW 2
37721: ST_TO_ADDR
37722: GO 37804
// for j = 1 to result do
37724: LD_ADDR_VAR 0 8
37728: PUSH
37729: DOUBLE
37730: LD_INT 1
37732: DEC
37733: ST_TO_ADDR
37734: LD_VAR 0 6
37738: PUSH
37739: FOR_TO
37740: IFFALSE 37802
// begin if tmp < result [ j ] [ 2 ] then
37742: LD_VAR 0 9
37746: PUSH
37747: LD_VAR 0 6
37751: PUSH
37752: LD_VAR 0 8
37756: ARRAY
37757: PUSH
37758: LD_INT 2
37760: ARRAY
37761: LESS
37762: IFFALSE 37800
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37764: LD_ADDR_VAR 0 6
37768: PUSH
37769: LD_VAR 0 6
37773: PPUSH
37774: LD_VAR 0 8
37778: PPUSH
37779: LD_VAR 0 7
37783: PUSH
37784: LD_VAR 0 9
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PPUSH
37793: CALL_OW 2
37797: ST_TO_ADDR
// break ;
37798: GO 37802
// end ; end ;
37800: GO 37739
37802: POP
37803: POP
// end ; end ;
37804: GO 37603
37806: POP
37807: POP
// if result and not asc then
37808: LD_VAR 0 6
37812: PUSH
37813: LD_VAR 0 4
37817: NOT
37818: AND
37819: IFFALSE 37894
// begin tmp := result ;
37821: LD_ADDR_VAR 0 9
37825: PUSH
37826: LD_VAR 0 6
37830: ST_TO_ADDR
// for i = tmp downto 1 do
37831: LD_ADDR_VAR 0 7
37835: PUSH
37836: DOUBLE
37837: LD_VAR 0 9
37841: INC
37842: ST_TO_ADDR
37843: LD_INT 1
37845: PUSH
37846: FOR_DOWNTO
37847: IFFALSE 37892
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37849: LD_ADDR_VAR 0 6
37853: PUSH
37854: LD_VAR 0 6
37858: PPUSH
37859: LD_VAR 0 9
37863: PUSH
37864: LD_VAR 0 7
37868: MINUS
37869: PUSH
37870: LD_INT 1
37872: PLUS
37873: PPUSH
37874: LD_VAR 0 9
37878: PUSH
37879: LD_VAR 0 7
37883: ARRAY
37884: PPUSH
37885: CALL_OW 1
37889: ST_TO_ADDR
37890: GO 37846
37892: POP
37893: POP
// end ; tmp := [ ] ;
37894: LD_ADDR_VAR 0 9
37898: PUSH
37899: EMPTY
37900: ST_TO_ADDR
// if mode then
37901: LD_VAR 0 5
37905: IFFALSE 37974
// begin for i = 1 to result do
37907: LD_ADDR_VAR 0 7
37911: PUSH
37912: DOUBLE
37913: LD_INT 1
37915: DEC
37916: ST_TO_ADDR
37917: LD_VAR 0 6
37921: PUSH
37922: FOR_TO
37923: IFFALSE 37962
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37925: LD_ADDR_VAR 0 9
37929: PUSH
37930: LD_VAR 0 9
37934: PPUSH
37935: LD_VAR 0 7
37939: PPUSH
37940: LD_VAR 0 6
37944: PUSH
37945: LD_VAR 0 7
37949: ARRAY
37950: PUSH
37951: LD_INT 1
37953: ARRAY
37954: PPUSH
37955: CALL_OW 1
37959: ST_TO_ADDR
37960: GO 37922
37962: POP
37963: POP
// result := tmp ;
37964: LD_ADDR_VAR 0 6
37968: PUSH
37969: LD_VAR 0 9
37973: ST_TO_ADDR
// end ; end ;
37974: LD_VAR 0 6
37978: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37979: LD_INT 0
37981: PPUSH
37982: PPUSH
37983: PPUSH
37984: PPUSH
37985: PPUSH
37986: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37987: LD_ADDR_VAR 0 5
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// if not x or not y then
38009: LD_VAR 0 2
38013: NOT
38014: PUSH
38015: LD_VAR 0 3
38019: NOT
38020: OR
38021: IFFALSE 38025
// exit ;
38023: GO 39677
// if not range then
38025: LD_VAR 0 4
38029: NOT
38030: IFFALSE 38040
// range := 10 ;
38032: LD_ADDR_VAR 0 4
38036: PUSH
38037: LD_INT 10
38039: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38040: LD_ADDR_VAR 0 8
38044: PUSH
38045: LD_INT 81
38047: PUSH
38048: LD_VAR 0 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 92
38059: PUSH
38060: LD_VAR 0 2
38064: PUSH
38065: LD_VAR 0 3
38069: PUSH
38070: LD_VAR 0 4
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 3
38083: PUSH
38084: LD_INT 21
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: PPUSH
38103: CALL_OW 69
38107: ST_TO_ADDR
// if not tmp then
38108: LD_VAR 0 8
38112: NOT
38113: IFFALSE 38117
// exit ;
38115: GO 39677
// for i in tmp do
38117: LD_ADDR_VAR 0 6
38121: PUSH
38122: LD_VAR 0 8
38126: PUSH
38127: FOR_IN
38128: IFFALSE 39652
// begin points := [ 0 , 0 , 0 ] ;
38130: LD_ADDR_VAR 0 9
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// bpoints := 1 ;
38149: LD_ADDR_VAR 0 10
38153: PUSH
38154: LD_INT 1
38156: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38157: LD_VAR 0 6
38161: PPUSH
38162: CALL_OW 247
38166: PUSH
38167: LD_INT 1
38169: DOUBLE
38170: EQUAL
38171: IFTRUE 38175
38173: GO 38753
38175: POP
// begin if GetClass ( i ) = 1 then
38176: LD_VAR 0 6
38180: PPUSH
38181: CALL_OW 257
38185: PUSH
38186: LD_INT 1
38188: EQUAL
38189: IFFALSE 38210
// points := [ 10 , 5 , 3 ] ;
38191: LD_ADDR_VAR 0 9
38195: PUSH
38196: LD_INT 10
38198: PUSH
38199: LD_INT 5
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38210: LD_VAR 0 6
38214: PPUSH
38215: CALL_OW 257
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: LD_INT 4
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: IN
38234: IFFALSE 38255
// points := [ 3 , 2 , 1 ] ;
38236: LD_ADDR_VAR 0 9
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38255: LD_VAR 0 6
38259: PPUSH
38260: CALL_OW 257
38264: PUSH
38265: LD_INT 5
38267: EQUAL
38268: IFFALSE 38289
// points := [ 130 , 5 , 2 ] ;
38270: LD_ADDR_VAR 0 9
38274: PUSH
38275: LD_INT 130
38277: PUSH
38278: LD_INT 5
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38289: LD_VAR 0 6
38293: PPUSH
38294: CALL_OW 257
38298: PUSH
38299: LD_INT 8
38301: EQUAL
38302: IFFALSE 38323
// points := [ 35 , 35 , 30 ] ;
38304: LD_ADDR_VAR 0 9
38308: PUSH
38309: LD_INT 35
38311: PUSH
38312: LD_INT 35
38314: PUSH
38315: LD_INT 30
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38323: LD_VAR 0 6
38327: PPUSH
38328: CALL_OW 257
38332: PUSH
38333: LD_INT 9
38335: EQUAL
38336: IFFALSE 38357
// points := [ 20 , 55 , 40 ] ;
38338: LD_ADDR_VAR 0 9
38342: PUSH
38343: LD_INT 20
38345: PUSH
38346: LD_INT 55
38348: PUSH
38349: LD_INT 40
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38357: LD_VAR 0 6
38361: PPUSH
38362: CALL_OW 257
38366: PUSH
38367: LD_INT 12
38369: PUSH
38370: LD_INT 16
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: IN
38377: IFFALSE 38398
// points := [ 5 , 3 , 2 ] ;
38379: LD_ADDR_VAR 0 9
38383: PUSH
38384: LD_INT 5
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38398: LD_VAR 0 6
38402: PPUSH
38403: CALL_OW 257
38407: PUSH
38408: LD_INT 17
38410: EQUAL
38411: IFFALSE 38432
// points := [ 100 , 50 , 75 ] ;
38413: LD_ADDR_VAR 0 9
38417: PUSH
38418: LD_INT 100
38420: PUSH
38421: LD_INT 50
38423: PUSH
38424: LD_INT 75
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38432: LD_VAR 0 6
38436: PPUSH
38437: CALL_OW 257
38441: PUSH
38442: LD_INT 15
38444: EQUAL
38445: IFFALSE 38466
// points := [ 10 , 5 , 3 ] ;
38447: LD_ADDR_VAR 0 9
38451: PUSH
38452: LD_INT 10
38454: PUSH
38455: LD_INT 5
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38466: LD_VAR 0 6
38470: PPUSH
38471: CALL_OW 257
38475: PUSH
38476: LD_INT 14
38478: EQUAL
38479: IFFALSE 38500
// points := [ 10 , 0 , 0 ] ;
38481: LD_ADDR_VAR 0 9
38485: PUSH
38486: LD_INT 10
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38500: LD_VAR 0 6
38504: PPUSH
38505: CALL_OW 257
38509: PUSH
38510: LD_INT 11
38512: EQUAL
38513: IFFALSE 38534
// points := [ 30 , 10 , 5 ] ;
38515: LD_ADDR_VAR 0 9
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 10
38525: PUSH
38526: LD_INT 5
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38534: LD_VAR 0 1
38538: PPUSH
38539: LD_INT 5
38541: PPUSH
38542: CALL_OW 321
38546: PUSH
38547: LD_INT 2
38549: EQUAL
38550: IFFALSE 38567
// bpoints := bpoints * 1.8 ;
38552: LD_ADDR_VAR 0 10
38556: PUSH
38557: LD_VAR 0 10
38561: PUSH
38562: LD_REAL  1.80000000000000E+0000
38565: MUL
38566: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38567: LD_VAR 0 6
38571: PPUSH
38572: CALL_OW 257
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 4
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: IN
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: LD_INT 51
38603: PPUSH
38604: CALL_OW 321
38608: PUSH
38609: LD_INT 2
38611: EQUAL
38612: AND
38613: IFFALSE 38630
// bpoints := bpoints * 1.2 ;
38615: LD_ADDR_VAR 0 10
38619: PUSH
38620: LD_VAR 0 10
38624: PUSH
38625: LD_REAL  1.20000000000000E+0000
38628: MUL
38629: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38630: LD_VAR 0 6
38634: PPUSH
38635: CALL_OW 257
38639: PUSH
38640: LD_INT 5
38642: PUSH
38643: LD_INT 7
38645: PUSH
38646: LD_INT 9
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: IN
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_INT 52
38662: PPUSH
38663: CALL_OW 321
38667: PUSH
38668: LD_INT 2
38670: EQUAL
38671: AND
38672: IFFALSE 38689
// bpoints := bpoints * 1.5 ;
38674: LD_ADDR_VAR 0 10
38678: PUSH
38679: LD_VAR 0 10
38683: PUSH
38684: LD_REAL  1.50000000000000E+0000
38687: MUL
38688: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38689: LD_VAR 0 1
38693: PPUSH
38694: LD_INT 66
38696: PPUSH
38697: CALL_OW 321
38701: PUSH
38702: LD_INT 2
38704: EQUAL
38705: IFFALSE 38722
// bpoints := bpoints * 1.1 ;
38707: LD_ADDR_VAR 0 10
38711: PUSH
38712: LD_VAR 0 10
38716: PUSH
38717: LD_REAL  1.10000000000000E+0000
38720: MUL
38721: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38722: LD_ADDR_VAR 0 10
38726: PUSH
38727: LD_VAR 0 10
38731: PUSH
38732: LD_VAR 0 6
38736: PPUSH
38737: LD_INT 1
38739: PPUSH
38740: CALL_OW 259
38744: PUSH
38745: LD_REAL  1.15000000000000E+0000
38748: MUL
38749: MUL
38750: ST_TO_ADDR
// end ; unit_vehicle :
38751: GO 39581
38753: LD_INT 2
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38761
38759: GO 39569
38761: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38762: LD_VAR 0 6
38766: PPUSH
38767: CALL_OW 264
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 42
38777: PUSH
38778: LD_INT 24
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: IN
38786: IFFALSE 38807
// points := [ 25 , 5 , 3 ] ;
38788: LD_ADDR_VAR 0 9
38792: PUSH
38793: LD_INT 25
38795: PUSH
38796: LD_INT 5
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38807: LD_VAR 0 6
38811: PPUSH
38812: CALL_OW 264
38816: PUSH
38817: LD_INT 4
38819: PUSH
38820: LD_INT 43
38822: PUSH
38823: LD_INT 25
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: IN
38831: IFFALSE 38852
// points := [ 40 , 15 , 5 ] ;
38833: LD_ADDR_VAR 0 9
38837: PUSH
38838: LD_INT 40
38840: PUSH
38841: LD_INT 15
38843: PUSH
38844: LD_INT 5
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38852: LD_VAR 0 6
38856: PPUSH
38857: CALL_OW 264
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 23
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: IN
38872: IFFALSE 38893
// points := [ 7 , 25 , 8 ] ;
38874: LD_ADDR_VAR 0 9
38878: PUSH
38879: LD_INT 7
38881: PUSH
38882: LD_INT 25
38884: PUSH
38885: LD_INT 8
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38893: LD_VAR 0 6
38897: PPUSH
38898: CALL_OW 264
38902: PUSH
38903: LD_INT 5
38905: PUSH
38906: LD_INT 27
38908: PUSH
38909: LD_INT 44
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: IN
38917: IFFALSE 38938
// points := [ 14 , 50 , 16 ] ;
38919: LD_ADDR_VAR 0 9
38923: PUSH
38924: LD_INT 14
38926: PUSH
38927: LD_INT 50
38929: PUSH
38930: LD_INT 16
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38938: LD_VAR 0 6
38942: PPUSH
38943: CALL_OW 264
38947: PUSH
38948: LD_INT 6
38950: PUSH
38951: LD_INT 46
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: IN
38958: IFFALSE 38979
// points := [ 32 , 120 , 70 ] ;
38960: LD_ADDR_VAR 0 9
38964: PUSH
38965: LD_INT 32
38967: PUSH
38968: LD_INT 120
38970: PUSH
38971: LD_INT 70
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38979: LD_VAR 0 6
38983: PPUSH
38984: CALL_OW 264
38988: PUSH
38989: LD_INT 7
38991: PUSH
38992: LD_INT 28
38994: PUSH
38995: LD_INT 45
38997: PUSH
38998: LD_EXP 48
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: IN
39009: IFFALSE 39030
// points := [ 35 , 20 , 45 ] ;
39011: LD_ADDR_VAR 0 9
39015: PUSH
39016: LD_INT 35
39018: PUSH
39019: LD_INT 20
39021: PUSH
39022: LD_INT 45
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39030: LD_VAR 0 6
39034: PPUSH
39035: CALL_OW 264
39039: PUSH
39040: LD_INT 47
39042: PUSH
39043: EMPTY
39044: LIST
39045: IN
39046: IFFALSE 39067
// points := [ 67 , 45 , 75 ] ;
39048: LD_ADDR_VAR 0 9
39052: PUSH
39053: LD_INT 67
39055: PUSH
39056: LD_INT 45
39058: PUSH
39059: LD_INT 75
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39067: LD_VAR 0 6
39071: PPUSH
39072: CALL_OW 264
39076: PUSH
39077: LD_INT 26
39079: PUSH
39080: EMPTY
39081: LIST
39082: IN
39083: IFFALSE 39104
// points := [ 120 , 30 , 80 ] ;
39085: LD_ADDR_VAR 0 9
39089: PUSH
39090: LD_INT 120
39092: PUSH
39093: LD_INT 30
39095: PUSH
39096: LD_INT 80
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39104: LD_VAR 0 6
39108: PPUSH
39109: CALL_OW 264
39113: PUSH
39114: LD_INT 22
39116: PUSH
39117: EMPTY
39118: LIST
39119: IN
39120: IFFALSE 39141
// points := [ 40 , 1 , 1 ] ;
39122: LD_ADDR_VAR 0 9
39126: PUSH
39127: LD_INT 40
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39141: LD_VAR 0 6
39145: PPUSH
39146: CALL_OW 264
39150: PUSH
39151: LD_INT 29
39153: PUSH
39154: EMPTY
39155: LIST
39156: IN
39157: IFFALSE 39178
// points := [ 70 , 200 , 400 ] ;
39159: LD_ADDR_VAR 0 9
39163: PUSH
39164: LD_INT 70
39166: PUSH
39167: LD_INT 200
39169: PUSH
39170: LD_INT 400
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39178: LD_VAR 0 6
39182: PPUSH
39183: CALL_OW 264
39187: PUSH
39188: LD_INT 14
39190: PUSH
39191: LD_INT 53
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: IN
39198: IFFALSE 39219
// points := [ 40 , 10 , 20 ] ;
39200: LD_ADDR_VAR 0 9
39204: PUSH
39205: LD_INT 40
39207: PUSH
39208: LD_INT 10
39210: PUSH
39211: LD_INT 20
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39219: LD_VAR 0 6
39223: PPUSH
39224: CALL_OW 264
39228: PUSH
39229: LD_INT 9
39231: PUSH
39232: EMPTY
39233: LIST
39234: IN
39235: IFFALSE 39256
// points := [ 5 , 70 , 20 ] ;
39237: LD_ADDR_VAR 0 9
39241: PUSH
39242: LD_INT 5
39244: PUSH
39245: LD_INT 70
39247: PUSH
39248: LD_INT 20
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39256: LD_VAR 0 6
39260: PPUSH
39261: CALL_OW 264
39265: PUSH
39266: LD_INT 10
39268: PUSH
39269: EMPTY
39270: LIST
39271: IN
39272: IFFALSE 39293
// points := [ 35 , 110 , 70 ] ;
39274: LD_ADDR_VAR 0 9
39278: PUSH
39279: LD_INT 35
39281: PUSH
39282: LD_INT 110
39284: PUSH
39285: LD_INT 70
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39293: LD_VAR 0 6
39297: PPUSH
39298: CALL_OW 265
39302: PUSH
39303: LD_INT 25
39305: EQUAL
39306: IFFALSE 39327
// points := [ 80 , 65 , 100 ] ;
39308: LD_ADDR_VAR 0 9
39312: PUSH
39313: LD_INT 80
39315: PUSH
39316: LD_INT 65
39318: PUSH
39319: LD_INT 100
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39327: LD_VAR 0 6
39331: PPUSH
39332: CALL_OW 263
39336: PUSH
39337: LD_INT 1
39339: EQUAL
39340: IFFALSE 39375
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39342: LD_ADDR_VAR 0 10
39346: PUSH
39347: LD_VAR 0 10
39351: PUSH
39352: LD_VAR 0 6
39356: PPUSH
39357: CALL_OW 311
39361: PPUSH
39362: LD_INT 3
39364: PPUSH
39365: CALL_OW 259
39369: PUSH
39370: LD_INT 4
39372: MUL
39373: MUL
39374: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39375: LD_VAR 0 6
39379: PPUSH
39380: CALL_OW 263
39384: PUSH
39385: LD_INT 2
39387: EQUAL
39388: IFFALSE 39439
// begin j := IsControledBy ( i ) ;
39390: LD_ADDR_VAR 0 7
39394: PUSH
39395: LD_VAR 0 6
39399: PPUSH
39400: CALL_OW 312
39404: ST_TO_ADDR
// if j then
39405: LD_VAR 0 7
39409: IFFALSE 39439
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39411: LD_ADDR_VAR 0 10
39415: PUSH
39416: LD_VAR 0 10
39420: PUSH
39421: LD_VAR 0 7
39425: PPUSH
39426: LD_INT 3
39428: PPUSH
39429: CALL_OW 259
39433: PUSH
39434: LD_INT 3
39436: MUL
39437: MUL
39438: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39439: LD_VAR 0 6
39443: PPUSH
39444: CALL_OW 264
39448: PUSH
39449: LD_INT 5
39451: PUSH
39452: LD_INT 6
39454: PUSH
39455: LD_INT 46
39457: PUSH
39458: LD_INT 44
39460: PUSH
39461: LD_INT 47
39463: PUSH
39464: LD_INT 45
39466: PUSH
39467: LD_INT 28
39469: PUSH
39470: LD_INT 7
39472: PUSH
39473: LD_INT 27
39475: PUSH
39476: LD_INT 29
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: IN
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: LD_INT 52
39499: PPUSH
39500: CALL_OW 321
39504: PUSH
39505: LD_INT 2
39507: EQUAL
39508: AND
39509: IFFALSE 39526
// bpoints := bpoints * 1.2 ;
39511: LD_ADDR_VAR 0 10
39515: PUSH
39516: LD_VAR 0 10
39520: PUSH
39521: LD_REAL  1.20000000000000E+0000
39524: MUL
39525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39526: LD_VAR 0 6
39530: PPUSH
39531: CALL_OW 264
39535: PUSH
39536: LD_INT 6
39538: PUSH
39539: LD_INT 46
39541: PUSH
39542: LD_INT 47
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: IN
39550: IFFALSE 39567
// bpoints := bpoints * 1.2 ;
39552: LD_ADDR_VAR 0 10
39556: PUSH
39557: LD_VAR 0 10
39561: PUSH
39562: LD_REAL  1.20000000000000E+0000
39565: MUL
39566: ST_TO_ADDR
// end ; unit_building :
39567: GO 39581
39569: LD_INT 3
39571: DOUBLE
39572: EQUAL
39573: IFTRUE 39577
39575: GO 39580
39577: POP
// ; end ;
39578: GO 39581
39580: POP
// for j = 1 to 3 do
39581: LD_ADDR_VAR 0 7
39585: PUSH
39586: DOUBLE
39587: LD_INT 1
39589: DEC
39590: ST_TO_ADDR
39591: LD_INT 3
39593: PUSH
39594: FOR_TO
39595: IFFALSE 39648
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39597: LD_ADDR_VAR 0 5
39601: PUSH
39602: LD_VAR 0 5
39606: PPUSH
39607: LD_VAR 0 7
39611: PPUSH
39612: LD_VAR 0 5
39616: PUSH
39617: LD_VAR 0 7
39621: ARRAY
39622: PUSH
39623: LD_VAR 0 9
39627: PUSH
39628: LD_VAR 0 7
39632: ARRAY
39633: PUSH
39634: LD_VAR 0 10
39638: MUL
39639: PLUS
39640: PPUSH
39641: CALL_OW 1
39645: ST_TO_ADDR
39646: GO 39594
39648: POP
39649: POP
// end ;
39650: GO 38127
39652: POP
39653: POP
// result := Replace ( result , 4 , tmp ) ;
39654: LD_ADDR_VAR 0 5
39658: PUSH
39659: LD_VAR 0 5
39663: PPUSH
39664: LD_INT 4
39666: PPUSH
39667: LD_VAR 0 8
39671: PPUSH
39672: CALL_OW 1
39676: ST_TO_ADDR
// end ;
39677: LD_VAR 0 5
39681: RET
// export function DangerAtRange ( unit , range ) ; begin
39682: LD_INT 0
39684: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39685: LD_ADDR_VAR 0 3
39689: PUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 255
39699: PPUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 250
39709: PPUSH
39710: LD_VAR 0 1
39714: PPUSH
39715: CALL_OW 251
39719: PPUSH
39720: LD_VAR 0 2
39724: PPUSH
39725: CALL 37979 0 4
39729: ST_TO_ADDR
// end ;
39730: LD_VAR 0 3
39734: RET
// export function DangerInArea ( side , area ) ; begin
39735: LD_INT 0
39737: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39738: LD_ADDR_VAR 0 3
39742: PUSH
39743: LD_VAR 0 2
39747: PPUSH
39748: LD_INT 81
39750: PUSH
39751: LD_VAR 0 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PPUSH
39760: CALL_OW 70
39764: ST_TO_ADDR
// end ;
39765: LD_VAR 0 3
39769: RET
// export function IsExtension ( b ) ; begin
39770: LD_INT 0
39772: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39773: LD_ADDR_VAR 0 2
39777: PUSH
39778: LD_VAR 0 1
39782: PUSH
39783: LD_INT 23
39785: PUSH
39786: LD_INT 20
39788: PUSH
39789: LD_INT 22
39791: PUSH
39792: LD_INT 17
39794: PUSH
39795: LD_INT 24
39797: PUSH
39798: LD_INT 21
39800: PUSH
39801: LD_INT 19
39803: PUSH
39804: LD_INT 16
39806: PUSH
39807: LD_INT 25
39809: PUSH
39810: LD_INT 18
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: IN
39825: ST_TO_ADDR
// end ;
39826: LD_VAR 0 2
39830: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39831: LD_INT 0
39833: PPUSH
39834: PPUSH
39835: PPUSH
// result := [ ] ;
39836: LD_ADDR_VAR 0 4
39840: PUSH
39841: EMPTY
39842: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39843: LD_ADDR_VAR 0 5
39847: PUSH
39848: LD_VAR 0 2
39852: PPUSH
39853: LD_INT 21
39855: PUSH
39856: LD_INT 3
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PPUSH
39863: CALL_OW 70
39867: ST_TO_ADDR
// if not tmp then
39868: LD_VAR 0 5
39872: NOT
39873: IFFALSE 39877
// exit ;
39875: GO 39941
// if checkLink then
39877: LD_VAR 0 3
39881: IFFALSE 39931
// begin for i in tmp do
39883: LD_ADDR_VAR 0 6
39887: PUSH
39888: LD_VAR 0 5
39892: PUSH
39893: FOR_IN
39894: IFFALSE 39929
// if GetBase ( i ) <> base then
39896: LD_VAR 0 6
39900: PPUSH
39901: CALL_OW 274
39905: PUSH
39906: LD_VAR 0 1
39910: NONEQUAL
39911: IFFALSE 39927
// ComLinkToBase ( base , i ) ;
39913: LD_VAR 0 1
39917: PPUSH
39918: LD_VAR 0 6
39922: PPUSH
39923: CALL_OW 169
39927: GO 39893
39929: POP
39930: POP
// end ; result := tmp ;
39931: LD_ADDR_VAR 0 4
39935: PUSH
39936: LD_VAR 0 5
39940: ST_TO_ADDR
// end ;
39941: LD_VAR 0 4
39945: RET
// export function ComComplete ( units , b ) ; var i ; begin
39946: LD_INT 0
39948: PPUSH
39949: PPUSH
// if not units then
39950: LD_VAR 0 1
39954: NOT
39955: IFFALSE 39959
// exit ;
39957: GO 40049
// for i in units do
39959: LD_ADDR_VAR 0 4
39963: PUSH
39964: LD_VAR 0 1
39968: PUSH
39969: FOR_IN
39970: IFFALSE 40047
// if BuildingStatus ( b ) = bs_build then
39972: LD_VAR 0 2
39976: PPUSH
39977: CALL_OW 461
39981: PUSH
39982: LD_INT 1
39984: EQUAL
39985: IFFALSE 40045
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39987: LD_VAR 0 4
39991: PPUSH
39992: LD_STRING h
39994: PUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: CALL_OW 250
40004: PUSH
40005: LD_VAR 0 2
40009: PPUSH
40010: CALL_OW 251
40014: PUSH
40015: LD_VAR 0 2
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: PPUSH
40041: CALL_OW 446
40045: GO 39969
40047: POP
40048: POP
// end ;
40049: LD_VAR 0 3
40053: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40062: LD_VAR 0 1
40066: NOT
40067: PUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 263
40077: PUSH
40078: LD_INT 2
40080: NONEQUAL
40081: OR
40082: IFFALSE 40086
// exit ;
40084: GO 40402
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40086: LD_ADDR_VAR 0 6
40090: PUSH
40091: LD_INT 22
40093: PUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 255
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 30
40113: PUSH
40114: LD_INT 36
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 34
40123: PUSH
40124: LD_INT 31
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PPUSH
40140: CALL_OW 69
40144: ST_TO_ADDR
// if not tmp then
40145: LD_VAR 0 6
40149: NOT
40150: IFFALSE 40154
// exit ;
40152: GO 40402
// result := [ ] ;
40154: LD_ADDR_VAR 0 2
40158: PUSH
40159: EMPTY
40160: ST_TO_ADDR
// for i in tmp do
40161: LD_ADDR_VAR 0 3
40165: PUSH
40166: LD_VAR 0 6
40170: PUSH
40171: FOR_IN
40172: IFFALSE 40243
// begin t := UnitsInside ( i ) ;
40174: LD_ADDR_VAR 0 4
40178: PUSH
40179: LD_VAR 0 3
40183: PPUSH
40184: CALL_OW 313
40188: ST_TO_ADDR
// if t then
40189: LD_VAR 0 4
40193: IFFALSE 40241
// for j in t do
40195: LD_ADDR_VAR 0 7
40199: PUSH
40200: LD_VAR 0 4
40204: PUSH
40205: FOR_IN
40206: IFFALSE 40239
// result := Replace ( result , result + 1 , j ) ;
40208: LD_ADDR_VAR 0 2
40212: PUSH
40213: LD_VAR 0 2
40217: PPUSH
40218: LD_VAR 0 2
40222: PUSH
40223: LD_INT 1
40225: PLUS
40226: PPUSH
40227: LD_VAR 0 7
40231: PPUSH
40232: CALL_OW 1
40236: ST_TO_ADDR
40237: GO 40205
40239: POP
40240: POP
// end ;
40241: GO 40171
40243: POP
40244: POP
// if not result then
40245: LD_VAR 0 2
40249: NOT
40250: IFFALSE 40254
// exit ;
40252: GO 40402
// mech := result [ 1 ] ;
40254: LD_ADDR_VAR 0 5
40258: PUSH
40259: LD_VAR 0 2
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: ST_TO_ADDR
// if result > 1 then
40268: LD_VAR 0 2
40272: PUSH
40273: LD_INT 1
40275: GREATER
40276: IFFALSE 40388
// begin for i = 2 to result do
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: DOUBLE
40284: LD_INT 2
40286: DEC
40287: ST_TO_ADDR
40288: LD_VAR 0 2
40292: PUSH
40293: FOR_TO
40294: IFFALSE 40386
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40296: LD_ADDR_VAR 0 4
40300: PUSH
40301: LD_VAR 0 2
40305: PUSH
40306: LD_VAR 0 3
40310: ARRAY
40311: PPUSH
40312: LD_INT 3
40314: PPUSH
40315: CALL_OW 259
40319: PUSH
40320: LD_VAR 0 2
40324: PUSH
40325: LD_VAR 0 3
40329: ARRAY
40330: PPUSH
40331: CALL_OW 432
40335: MINUS
40336: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40337: LD_VAR 0 4
40341: PUSH
40342: LD_VAR 0 5
40346: PPUSH
40347: LD_INT 3
40349: PPUSH
40350: CALL_OW 259
40354: PUSH
40355: LD_VAR 0 5
40359: PPUSH
40360: CALL_OW 432
40364: MINUS
40365: GREATEREQUAL
40366: IFFALSE 40384
// mech := result [ i ] ;
40368: LD_ADDR_VAR 0 5
40372: PUSH
40373: LD_VAR 0 2
40377: PUSH
40378: LD_VAR 0 3
40382: ARRAY
40383: ST_TO_ADDR
// end ;
40384: GO 40293
40386: POP
40387: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40388: LD_VAR 0 1
40392: PPUSH
40393: LD_VAR 0 5
40397: PPUSH
40398: CALL_OW 135
// end ;
40402: LD_VAR 0 2
40406: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
40420: PPUSH
40421: PPUSH
// result := [ ] ;
40422: LD_ADDR_VAR 0 7
40426: PUSH
40427: EMPTY
40428: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40429: LD_VAR 0 1
40433: PPUSH
40434: CALL_OW 266
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: IN
40449: NOT
40450: IFFALSE 40454
// exit ;
40452: GO 42088
// if name then
40454: LD_VAR 0 3
40458: IFFALSE 40474
// SetBName ( base_dep , name ) ;
40460: LD_VAR 0 1
40464: PPUSH
40465: LD_VAR 0 3
40469: PPUSH
40470: CALL_OW 500
// base := GetBase ( base_dep ) ;
40474: LD_ADDR_VAR 0 15
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 274
40488: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40489: LD_ADDR_VAR 0 16
40493: PUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 255
40503: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40504: LD_ADDR_VAR 0 17
40508: PUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 248
40518: ST_TO_ADDR
// if sources then
40519: LD_VAR 0 5
40523: IFFALSE 40570
// for i = 1 to 3 do
40525: LD_ADDR_VAR 0 8
40529: PUSH
40530: DOUBLE
40531: LD_INT 1
40533: DEC
40534: ST_TO_ADDR
40535: LD_INT 3
40537: PUSH
40538: FOR_TO
40539: IFFALSE 40568
// AddResourceType ( base , i , sources [ i ] ) ;
40541: LD_VAR 0 15
40545: PPUSH
40546: LD_VAR 0 8
40550: PPUSH
40551: LD_VAR 0 5
40555: PUSH
40556: LD_VAR 0 8
40560: ARRAY
40561: PPUSH
40562: CALL_OW 276
40566: GO 40538
40568: POP
40569: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40570: LD_ADDR_VAR 0 18
40574: PUSH
40575: LD_VAR 0 15
40579: PPUSH
40580: LD_VAR 0 2
40584: PPUSH
40585: LD_INT 1
40587: PPUSH
40588: CALL 39831 0 3
40592: ST_TO_ADDR
// InitHc ;
40593: CALL_OW 19
// InitUc ;
40597: CALL_OW 18
// uc_side := side ;
40601: LD_ADDR_OWVAR 20
40605: PUSH
40606: LD_VAR 0 16
40610: ST_TO_ADDR
// uc_nation := nation ;
40611: LD_ADDR_OWVAR 21
40615: PUSH
40616: LD_VAR 0 17
40620: ST_TO_ADDR
// if buildings then
40621: LD_VAR 0 18
40625: IFFALSE 41947
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40627: LD_ADDR_VAR 0 19
40631: PUSH
40632: LD_VAR 0 18
40636: PPUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 30
40642: PUSH
40643: LD_INT 29
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 30
40652: PUSH
40653: LD_INT 30
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: PPUSH
40665: CALL_OW 72
40669: ST_TO_ADDR
// if tmp then
40670: LD_VAR 0 19
40674: IFFALSE 40722
// for i in tmp do
40676: LD_ADDR_VAR 0 8
40680: PUSH
40681: LD_VAR 0 19
40685: PUSH
40686: FOR_IN
40687: IFFALSE 40720
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40689: LD_VAR 0 8
40693: PPUSH
40694: CALL_OW 250
40698: PPUSH
40699: LD_VAR 0 8
40703: PPUSH
40704: CALL_OW 251
40708: PPUSH
40709: LD_VAR 0 16
40713: PPUSH
40714: CALL_OW 441
40718: GO 40686
40720: POP
40721: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40722: LD_VAR 0 18
40726: PPUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 30
40732: PUSH
40733: LD_INT 32
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 30
40742: PUSH
40743: LD_INT 33
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: PPUSH
40755: CALL_OW 72
40759: IFFALSE 40847
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40761: LD_ADDR_VAR 0 8
40765: PUSH
40766: LD_VAR 0 18
40770: PPUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 30
40776: PUSH
40777: LD_INT 32
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 30
40786: PUSH
40787: LD_INT 33
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: PPUSH
40799: CALL_OW 72
40803: PUSH
40804: FOR_IN
40805: IFFALSE 40845
// begin if not GetBWeapon ( i ) then
40807: LD_VAR 0 8
40811: PPUSH
40812: CALL_OW 269
40816: NOT
40817: IFFALSE 40843
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40819: LD_VAR 0 8
40823: PPUSH
40824: LD_VAR 0 8
40828: PPUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: CALL 42093 0 2
40838: PPUSH
40839: CALL_OW 431
// end ;
40843: GO 40804
40845: POP
40846: POP
// end ; for i = 1 to personel do
40847: LD_ADDR_VAR 0 8
40851: PUSH
40852: DOUBLE
40853: LD_INT 1
40855: DEC
40856: ST_TO_ADDR
40857: LD_VAR 0 6
40861: PUSH
40862: FOR_TO
40863: IFFALSE 41927
// begin if i > 4 then
40865: LD_VAR 0 8
40869: PUSH
40870: LD_INT 4
40872: GREATER
40873: IFFALSE 40877
// break ;
40875: GO 41927
// case i of 1 :
40877: LD_VAR 0 8
40881: PUSH
40882: LD_INT 1
40884: DOUBLE
40885: EQUAL
40886: IFTRUE 40890
40888: GO 40970
40890: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40891: LD_ADDR_VAR 0 12
40895: PUSH
40896: LD_VAR 0 18
40900: PPUSH
40901: LD_INT 22
40903: PUSH
40904: LD_VAR 0 16
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 58
40915: PUSH
40916: EMPTY
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 30
40924: PUSH
40925: LD_INT 32
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 30
40934: PUSH
40935: LD_INT 4
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 30
40944: PUSH
40945: LD_INT 5
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: PPUSH
40963: CALL_OW 72
40967: ST_TO_ADDR
40968: GO 41192
40970: LD_INT 2
40972: DOUBLE
40973: EQUAL
40974: IFTRUE 40978
40976: GO 41040
40978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40979: LD_ADDR_VAR 0 12
40983: PUSH
40984: LD_VAR 0 18
40988: PPUSH
40989: LD_INT 22
40991: PUSH
40992: LD_VAR 0 16
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 30
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 30
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 72
41037: ST_TO_ADDR
41038: GO 41192
41040: LD_INT 3
41042: DOUBLE
41043: EQUAL
41044: IFTRUE 41048
41046: GO 41110
41048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41049: LD_ADDR_VAR 0 12
41053: PUSH
41054: LD_VAR 0 18
41058: PPUSH
41059: LD_INT 22
41061: PUSH
41062: LD_VAR 0 16
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 30
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 30
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PPUSH
41103: CALL_OW 72
41107: ST_TO_ADDR
41108: GO 41192
41110: LD_INT 4
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41118
41116: GO 41191
41118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41119: LD_ADDR_VAR 0 12
41123: PUSH
41124: LD_VAR 0 18
41128: PPUSH
41129: LD_INT 22
41131: PUSH
41132: LD_VAR 0 16
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 30
41146: PUSH
41147: LD_INT 6
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 30
41156: PUSH
41157: LD_INT 7
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 30
41166: PUSH
41167: LD_INT 8
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PPUSH
41184: CALL_OW 72
41188: ST_TO_ADDR
41189: GO 41192
41191: POP
// if i = 1 then
41192: LD_VAR 0 8
41196: PUSH
41197: LD_INT 1
41199: EQUAL
41200: IFFALSE 41311
// begin tmp := [ ] ;
41202: LD_ADDR_VAR 0 19
41206: PUSH
41207: EMPTY
41208: ST_TO_ADDR
// for j in f do
41209: LD_ADDR_VAR 0 9
41213: PUSH
41214: LD_VAR 0 12
41218: PUSH
41219: FOR_IN
41220: IFFALSE 41293
// if GetBType ( j ) = b_bunker then
41222: LD_VAR 0 9
41226: PPUSH
41227: CALL_OW 266
41231: PUSH
41232: LD_INT 32
41234: EQUAL
41235: IFFALSE 41262
// tmp := Insert ( tmp , 1 , j ) else
41237: LD_ADDR_VAR 0 19
41241: PUSH
41242: LD_VAR 0 19
41246: PPUSH
41247: LD_INT 1
41249: PPUSH
41250: LD_VAR 0 9
41254: PPUSH
41255: CALL_OW 2
41259: ST_TO_ADDR
41260: GO 41291
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41262: LD_ADDR_VAR 0 19
41266: PUSH
41267: LD_VAR 0 19
41271: PPUSH
41272: LD_VAR 0 19
41276: PUSH
41277: LD_INT 1
41279: PLUS
41280: PPUSH
41281: LD_VAR 0 9
41285: PPUSH
41286: CALL_OW 2
41290: ST_TO_ADDR
41291: GO 41219
41293: POP
41294: POP
// if tmp then
41295: LD_VAR 0 19
41299: IFFALSE 41311
// f := tmp ;
41301: LD_ADDR_VAR 0 12
41305: PUSH
41306: LD_VAR 0 19
41310: ST_TO_ADDR
// end ; x := personel [ i ] ;
41311: LD_ADDR_VAR 0 13
41315: PUSH
41316: LD_VAR 0 6
41320: PUSH
41321: LD_VAR 0 8
41325: ARRAY
41326: ST_TO_ADDR
// if x = - 1 then
41327: LD_VAR 0 13
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: EQUAL
41336: IFFALSE 41545
// begin for j in f do
41338: LD_ADDR_VAR 0 9
41342: PUSH
41343: LD_VAR 0 12
41347: PUSH
41348: FOR_IN
41349: IFFALSE 41541
// repeat InitHc ;
41351: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41355: LD_VAR 0 9
41359: PPUSH
41360: CALL_OW 266
41364: PUSH
41365: LD_INT 5
41367: EQUAL
41368: IFFALSE 41438
// begin if UnitsInside ( j ) < 3 then
41370: LD_VAR 0 9
41374: PPUSH
41375: CALL_OW 313
41379: PUSH
41380: LD_INT 3
41382: LESS
41383: IFFALSE 41419
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41385: LD_INT 0
41387: PPUSH
41388: LD_INT 5
41390: PUSH
41391: LD_INT 8
41393: PUSH
41394: LD_INT 9
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: PUSH
41402: LD_VAR 0 17
41406: ARRAY
41407: PPUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: CALL_OW 380
41417: GO 41436
// PrepareHuman ( false , i , skill ) ;
41419: LD_INT 0
41421: PPUSH
41422: LD_VAR 0 8
41426: PPUSH
41427: LD_VAR 0 4
41431: PPUSH
41432: CALL_OW 380
// end else
41436: GO 41455
// PrepareHuman ( false , i , skill ) ;
41438: LD_INT 0
41440: PPUSH
41441: LD_VAR 0 8
41445: PPUSH
41446: LD_VAR 0 4
41450: PPUSH
41451: CALL_OW 380
// un := CreateHuman ;
41455: LD_ADDR_VAR 0 14
41459: PUSH
41460: CALL_OW 44
41464: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41465: LD_ADDR_VAR 0 7
41469: PUSH
41470: LD_VAR 0 7
41474: PPUSH
41475: LD_INT 1
41477: PPUSH
41478: LD_VAR 0 14
41482: PPUSH
41483: CALL_OW 2
41487: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41488: LD_VAR 0 14
41492: PPUSH
41493: LD_VAR 0 9
41497: PPUSH
41498: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41502: LD_VAR 0 9
41506: PPUSH
41507: CALL_OW 313
41511: PUSH
41512: LD_INT 6
41514: EQUAL
41515: PUSH
41516: LD_VAR 0 9
41520: PPUSH
41521: CALL_OW 266
41525: PUSH
41526: LD_INT 32
41528: PUSH
41529: LD_INT 31
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: IN
41536: OR
41537: IFFALSE 41351
41539: GO 41348
41541: POP
41542: POP
// end else
41543: GO 41925
// for j = 1 to x do
41545: LD_ADDR_VAR 0 9
41549: PUSH
41550: DOUBLE
41551: LD_INT 1
41553: DEC
41554: ST_TO_ADDR
41555: LD_VAR 0 13
41559: PUSH
41560: FOR_TO
41561: IFFALSE 41923
// begin InitHc ;
41563: CALL_OW 19
// if not f then
41567: LD_VAR 0 12
41571: NOT
41572: IFFALSE 41661
// begin PrepareHuman ( false , i , skill ) ;
41574: LD_INT 0
41576: PPUSH
41577: LD_VAR 0 8
41581: PPUSH
41582: LD_VAR 0 4
41586: PPUSH
41587: CALL_OW 380
// un := CreateHuman ;
41591: LD_ADDR_VAR 0 14
41595: PUSH
41596: CALL_OW 44
41600: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41601: LD_ADDR_VAR 0 7
41605: PUSH
41606: LD_VAR 0 7
41610: PPUSH
41611: LD_INT 1
41613: PPUSH
41614: LD_VAR 0 14
41618: PPUSH
41619: CALL_OW 2
41623: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41624: LD_VAR 0 14
41628: PPUSH
41629: LD_VAR 0 1
41633: PPUSH
41634: CALL_OW 250
41638: PPUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: CALL_OW 251
41648: PPUSH
41649: LD_INT 10
41651: PPUSH
41652: LD_INT 0
41654: PPUSH
41655: CALL_OW 50
// continue ;
41659: GO 41560
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41661: LD_VAR 0 12
41665: PUSH
41666: LD_INT 1
41668: ARRAY
41669: PPUSH
41670: CALL_OW 313
41674: PUSH
41675: LD_VAR 0 12
41679: PUSH
41680: LD_INT 1
41682: ARRAY
41683: PPUSH
41684: CALL_OW 266
41688: PUSH
41689: LD_INT 32
41691: PUSH
41692: LD_INT 31
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: IN
41699: AND
41700: PUSH
41701: LD_VAR 0 12
41705: PUSH
41706: LD_INT 1
41708: ARRAY
41709: PPUSH
41710: CALL_OW 313
41714: PUSH
41715: LD_INT 6
41717: EQUAL
41718: OR
41719: IFFALSE 41739
// f := Delete ( f , 1 ) ;
41721: LD_ADDR_VAR 0 12
41725: PUSH
41726: LD_VAR 0 12
41730: PPUSH
41731: LD_INT 1
41733: PPUSH
41734: CALL_OW 3
41738: ST_TO_ADDR
// if not f then
41739: LD_VAR 0 12
41743: NOT
41744: IFFALSE 41762
// begin x := x + 2 ;
41746: LD_ADDR_VAR 0 13
41750: PUSH
41751: LD_VAR 0 13
41755: PUSH
41756: LD_INT 2
41758: PLUS
41759: ST_TO_ADDR
// continue ;
41760: GO 41560
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41762: LD_VAR 0 12
41766: PUSH
41767: LD_INT 1
41769: ARRAY
41770: PPUSH
41771: CALL_OW 266
41775: PUSH
41776: LD_INT 5
41778: EQUAL
41779: IFFALSE 41853
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41781: LD_VAR 0 12
41785: PUSH
41786: LD_INT 1
41788: ARRAY
41789: PPUSH
41790: CALL_OW 313
41794: PUSH
41795: LD_INT 3
41797: LESS
41798: IFFALSE 41834
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41800: LD_INT 0
41802: PPUSH
41803: LD_INT 5
41805: PUSH
41806: LD_INT 8
41808: PUSH
41809: LD_INT 9
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: PUSH
41817: LD_VAR 0 17
41821: ARRAY
41822: PPUSH
41823: LD_VAR 0 4
41827: PPUSH
41828: CALL_OW 380
41832: GO 41851
// PrepareHuman ( false , i , skill ) ;
41834: LD_INT 0
41836: PPUSH
41837: LD_VAR 0 8
41841: PPUSH
41842: LD_VAR 0 4
41846: PPUSH
41847: CALL_OW 380
// end else
41851: GO 41870
// PrepareHuman ( false , i , skill ) ;
41853: LD_INT 0
41855: PPUSH
41856: LD_VAR 0 8
41860: PPUSH
41861: LD_VAR 0 4
41865: PPUSH
41866: CALL_OW 380
// un := CreateHuman ;
41870: LD_ADDR_VAR 0 14
41874: PUSH
41875: CALL_OW 44
41879: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41880: LD_ADDR_VAR 0 7
41884: PUSH
41885: LD_VAR 0 7
41889: PPUSH
41890: LD_INT 1
41892: PPUSH
41893: LD_VAR 0 14
41897: PPUSH
41898: CALL_OW 2
41902: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41903: LD_VAR 0 14
41907: PPUSH
41908: LD_VAR 0 12
41912: PUSH
41913: LD_INT 1
41915: ARRAY
41916: PPUSH
41917: CALL_OW 52
// end ;
41921: GO 41560
41923: POP
41924: POP
// end ;
41925: GO 40862
41927: POP
41928: POP
// result := result ^ buildings ;
41929: LD_ADDR_VAR 0 7
41933: PUSH
41934: LD_VAR 0 7
41938: PUSH
41939: LD_VAR 0 18
41943: ADD
41944: ST_TO_ADDR
// end else
41945: GO 42088
// begin for i = 1 to personel do
41947: LD_ADDR_VAR 0 8
41951: PUSH
41952: DOUBLE
41953: LD_INT 1
41955: DEC
41956: ST_TO_ADDR
41957: LD_VAR 0 6
41961: PUSH
41962: FOR_TO
41963: IFFALSE 42086
// begin if i > 4 then
41965: LD_VAR 0 8
41969: PUSH
41970: LD_INT 4
41972: GREATER
41973: IFFALSE 41977
// break ;
41975: GO 42086
// x := personel [ i ] ;
41977: LD_ADDR_VAR 0 13
41981: PUSH
41982: LD_VAR 0 6
41986: PUSH
41987: LD_VAR 0 8
41991: ARRAY
41992: ST_TO_ADDR
// if x = - 1 then
41993: LD_VAR 0 13
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: EQUAL
42002: IFFALSE 42006
// continue ;
42004: GO 41962
// PrepareHuman ( false , i , skill ) ;
42006: LD_INT 0
42008: PPUSH
42009: LD_VAR 0 8
42013: PPUSH
42014: LD_VAR 0 4
42018: PPUSH
42019: CALL_OW 380
// un := CreateHuman ;
42023: LD_ADDR_VAR 0 14
42027: PUSH
42028: CALL_OW 44
42032: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42033: LD_VAR 0 14
42037: PPUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: CALL_OW 250
42047: PPUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 251
42057: PPUSH
42058: LD_INT 10
42060: PPUSH
42061: LD_INT 0
42063: PPUSH
42064: CALL_OW 50
// result := result ^ un ;
42068: LD_ADDR_VAR 0 7
42072: PUSH
42073: LD_VAR 0 7
42077: PUSH
42078: LD_VAR 0 14
42082: ADD
42083: ST_TO_ADDR
// end ;
42084: GO 41962
42086: POP
42087: POP
// end ; end ;
42088: LD_VAR 0 7
42092: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42093: LD_INT 0
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
// result := false ;
42111: LD_ADDR_VAR 0 3
42115: PUSH
42116: LD_INT 0
42118: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42119: LD_VAR 0 1
42123: NOT
42124: PUSH
42125: LD_VAR 0 1
42129: PPUSH
42130: CALL_OW 266
42134: PUSH
42135: LD_INT 32
42137: PUSH
42138: LD_INT 33
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: IN
42145: NOT
42146: OR
42147: IFFALSE 42151
// exit ;
42149: GO 43260
// nat := GetNation ( tower ) ;
42151: LD_ADDR_VAR 0 12
42155: PUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 248
42165: ST_TO_ADDR
// side := GetSide ( tower ) ;
42166: LD_ADDR_VAR 0 16
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: CALL_OW 255
42180: ST_TO_ADDR
// x := GetX ( tower ) ;
42181: LD_ADDR_VAR 0 10
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 250
42195: ST_TO_ADDR
// y := GetY ( tower ) ;
42196: LD_ADDR_VAR 0 11
42200: PUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 251
42210: ST_TO_ADDR
// if not x or not y then
42211: LD_VAR 0 10
42215: NOT
42216: PUSH
42217: LD_VAR 0 11
42221: NOT
42222: OR
42223: IFFALSE 42227
// exit ;
42225: GO 43260
// weapon := 0 ;
42227: LD_ADDR_VAR 0 18
42231: PUSH
42232: LD_INT 0
42234: ST_TO_ADDR
// fac_list := [ ] ;
42235: LD_ADDR_VAR 0 17
42239: PUSH
42240: EMPTY
42241: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42242: LD_ADDR_VAR 0 6
42246: PUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 274
42256: PPUSH
42257: LD_VAR 0 2
42261: PPUSH
42262: LD_INT 0
42264: PPUSH
42265: CALL 39831 0 3
42269: PPUSH
42270: LD_INT 30
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PPUSH
42280: CALL_OW 72
42284: ST_TO_ADDR
// if not factories then
42285: LD_VAR 0 6
42289: NOT
42290: IFFALSE 42294
// exit ;
42292: GO 43260
// for i in factories do
42294: LD_ADDR_VAR 0 8
42298: PUSH
42299: LD_VAR 0 6
42303: PUSH
42304: FOR_IN
42305: IFFALSE 42330
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42307: LD_ADDR_VAR 0 17
42311: PUSH
42312: LD_VAR 0 17
42316: PUSH
42317: LD_VAR 0 8
42321: PPUSH
42322: CALL_OW 478
42326: UNION
42327: ST_TO_ADDR
42328: GO 42304
42330: POP
42331: POP
// if not fac_list then
42332: LD_VAR 0 17
42336: NOT
42337: IFFALSE 42341
// exit ;
42339: GO 43260
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42341: LD_ADDR_VAR 0 5
42345: PUSH
42346: LD_INT 4
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: LD_INT 9
42354: PUSH
42355: LD_INT 10
42357: PUSH
42358: LD_INT 6
42360: PUSH
42361: LD_INT 7
42363: PUSH
42364: LD_INT 11
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 27
42378: PUSH
42379: LD_INT 28
42381: PUSH
42382: LD_INT 26
42384: PUSH
42385: LD_INT 30
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 43
42396: PUSH
42397: LD_INT 44
42399: PUSH
42400: LD_INT 46
42402: PUSH
42403: LD_INT 45
42405: PUSH
42406: LD_INT 47
42408: PUSH
42409: LD_INT 49
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: PUSH
42425: LD_VAR 0 12
42429: ARRAY
42430: ST_TO_ADDR
// list := list isect fac_list ;
42431: LD_ADDR_VAR 0 5
42435: PUSH
42436: LD_VAR 0 5
42440: PUSH
42441: LD_VAR 0 17
42445: ISECT
42446: ST_TO_ADDR
// if not list then
42447: LD_VAR 0 5
42451: NOT
42452: IFFALSE 42456
// exit ;
42454: GO 43260
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42456: LD_VAR 0 12
42460: PUSH
42461: LD_INT 3
42463: EQUAL
42464: PUSH
42465: LD_INT 49
42467: PUSH
42468: LD_VAR 0 5
42472: IN
42473: AND
42474: PUSH
42475: LD_INT 31
42477: PPUSH
42478: LD_VAR 0 16
42482: PPUSH
42483: CALL_OW 321
42487: PUSH
42488: LD_INT 2
42490: EQUAL
42491: AND
42492: IFFALSE 42552
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42494: LD_INT 22
42496: PUSH
42497: LD_VAR 0 16
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 35
42508: PUSH
42509: LD_INT 49
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 91
42518: PUSH
42519: LD_VAR 0 1
42523: PUSH
42524: LD_INT 10
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: PPUSH
42537: CALL_OW 69
42541: NOT
42542: IFFALSE 42552
// weapon := ru_time_lapser ;
42544: LD_ADDR_VAR 0 18
42548: PUSH
42549: LD_INT 49
42551: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42552: LD_VAR 0 12
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: IN
42567: PUSH
42568: LD_INT 11
42570: PUSH
42571: LD_VAR 0 5
42575: IN
42576: PUSH
42577: LD_INT 30
42579: PUSH
42580: LD_VAR 0 5
42584: IN
42585: OR
42586: AND
42587: PUSH
42588: LD_INT 6
42590: PPUSH
42591: LD_VAR 0 16
42595: PPUSH
42596: CALL_OW 321
42600: PUSH
42601: LD_INT 2
42603: EQUAL
42604: AND
42605: IFFALSE 42770
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42607: LD_INT 22
42609: PUSH
42610: LD_VAR 0 16
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 35
42624: PUSH
42625: LD_INT 11
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 35
42634: PUSH
42635: LD_INT 30
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 91
42649: PUSH
42650: LD_VAR 0 1
42654: PUSH
42655: LD_INT 18
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: PPUSH
42668: CALL_OW 69
42672: NOT
42673: PUSH
42674: LD_INT 22
42676: PUSH
42677: LD_VAR 0 16
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 30
42691: PUSH
42692: LD_INT 32
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 30
42701: PUSH
42702: LD_INT 33
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 91
42716: PUSH
42717: LD_VAR 0 1
42721: PUSH
42722: LD_INT 12
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: PPUSH
42738: CALL_OW 69
42742: PUSH
42743: LD_INT 2
42745: GREATER
42746: AND
42747: IFFALSE 42770
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42749: LD_ADDR_VAR 0 18
42753: PUSH
42754: LD_INT 11
42756: PUSH
42757: LD_INT 30
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_VAR 0 12
42768: ARRAY
42769: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42770: LD_VAR 0 18
42774: NOT
42775: PUSH
42776: LD_INT 40
42778: PPUSH
42779: LD_VAR 0 16
42783: PPUSH
42784: CALL_OW 321
42788: PUSH
42789: LD_INT 2
42791: EQUAL
42792: AND
42793: PUSH
42794: LD_INT 7
42796: PUSH
42797: LD_VAR 0 5
42801: IN
42802: PUSH
42803: LD_INT 28
42805: PUSH
42806: LD_VAR 0 5
42810: IN
42811: OR
42812: PUSH
42813: LD_INT 45
42815: PUSH
42816: LD_VAR 0 5
42820: IN
42821: OR
42822: AND
42823: IFFALSE 43077
// begin hex := GetHexInfo ( x , y ) ;
42825: LD_ADDR_VAR 0 4
42829: PUSH
42830: LD_VAR 0 10
42834: PPUSH
42835: LD_VAR 0 11
42839: PPUSH
42840: CALL_OW 546
42844: ST_TO_ADDR
// if hex [ 1 ] then
42845: LD_VAR 0 4
42849: PUSH
42850: LD_INT 1
42852: ARRAY
42853: IFFALSE 42857
// exit ;
42855: GO 43260
// height := hex [ 2 ] ;
42857: LD_ADDR_VAR 0 15
42861: PUSH
42862: LD_VAR 0 4
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42871: LD_ADDR_VAR 0 14
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 5
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: ST_TO_ADDR
// for i in tmp do
42894: LD_ADDR_VAR 0 8
42898: PUSH
42899: LD_VAR 0 14
42903: PUSH
42904: FOR_IN
42905: IFFALSE 43075
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42907: LD_ADDR_VAR 0 9
42911: PUSH
42912: LD_VAR 0 10
42916: PPUSH
42917: LD_VAR 0 8
42921: PPUSH
42922: LD_INT 5
42924: PPUSH
42925: CALL_OW 272
42929: PUSH
42930: LD_VAR 0 11
42934: PPUSH
42935: LD_VAR 0 8
42939: PPUSH
42940: LD_INT 5
42942: PPUSH
42943: CALL_OW 273
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42952: LD_VAR 0 9
42956: PUSH
42957: LD_INT 1
42959: ARRAY
42960: PPUSH
42961: LD_VAR 0 9
42965: PUSH
42966: LD_INT 2
42968: ARRAY
42969: PPUSH
42970: CALL_OW 488
42974: IFFALSE 43073
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42976: LD_ADDR_VAR 0 4
42980: PUSH
42981: LD_VAR 0 9
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PPUSH
42990: LD_VAR 0 9
42994: PUSH
42995: LD_INT 2
42997: ARRAY
42998: PPUSH
42999: CALL_OW 546
43003: ST_TO_ADDR
// if hex [ 1 ] then
43004: LD_VAR 0 4
43008: PUSH
43009: LD_INT 1
43011: ARRAY
43012: IFFALSE 43016
// continue ;
43014: GO 42904
// h := hex [ 2 ] ;
43016: LD_ADDR_VAR 0 13
43020: PUSH
43021: LD_VAR 0 4
43025: PUSH
43026: LD_INT 2
43028: ARRAY
43029: ST_TO_ADDR
// if h + 7 < height then
43030: LD_VAR 0 13
43034: PUSH
43035: LD_INT 7
43037: PLUS
43038: PUSH
43039: LD_VAR 0 15
43043: LESS
43044: IFFALSE 43073
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43046: LD_ADDR_VAR 0 18
43050: PUSH
43051: LD_INT 7
43053: PUSH
43054: LD_INT 28
43056: PUSH
43057: LD_INT 45
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: PUSH
43065: LD_VAR 0 12
43069: ARRAY
43070: ST_TO_ADDR
// break ;
43071: GO 43075
// end ; end ; end ;
43073: GO 42904
43075: POP
43076: POP
// end ; if not weapon then
43077: LD_VAR 0 18
43081: NOT
43082: IFFALSE 43142
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43084: LD_ADDR_VAR 0 5
43088: PUSH
43089: LD_VAR 0 5
43093: PUSH
43094: LD_INT 11
43096: PUSH
43097: LD_INT 30
43099: PUSH
43100: LD_INT 49
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: DIFF
43108: ST_TO_ADDR
// if not list then
43109: LD_VAR 0 5
43113: NOT
43114: IFFALSE 43118
// exit ;
43116: GO 43260
// weapon := list [ rand ( 1 , list ) ] ;
43118: LD_ADDR_VAR 0 18
43122: PUSH
43123: LD_VAR 0 5
43127: PUSH
43128: LD_INT 1
43130: PPUSH
43131: LD_VAR 0 5
43135: PPUSH
43136: CALL_OW 12
43140: ARRAY
43141: ST_TO_ADDR
// end ; if weapon then
43142: LD_VAR 0 18
43146: IFFALSE 43260
// begin tmp := CostOfWeapon ( weapon ) ;
43148: LD_ADDR_VAR 0 14
43152: PUSH
43153: LD_VAR 0 18
43157: PPUSH
43158: CALL_OW 451
43162: ST_TO_ADDR
// j := GetBase ( tower ) ;
43163: LD_ADDR_VAR 0 9
43167: PUSH
43168: LD_VAR 0 1
43172: PPUSH
43173: CALL_OW 274
43177: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43178: LD_VAR 0 9
43182: PPUSH
43183: LD_INT 1
43185: PPUSH
43186: CALL_OW 275
43190: PUSH
43191: LD_VAR 0 14
43195: PUSH
43196: LD_INT 1
43198: ARRAY
43199: GREATEREQUAL
43200: PUSH
43201: LD_VAR 0 9
43205: PPUSH
43206: LD_INT 2
43208: PPUSH
43209: CALL_OW 275
43213: PUSH
43214: LD_VAR 0 14
43218: PUSH
43219: LD_INT 2
43221: ARRAY
43222: GREATEREQUAL
43223: AND
43224: PUSH
43225: LD_VAR 0 9
43229: PPUSH
43230: LD_INT 3
43232: PPUSH
43233: CALL_OW 275
43237: PUSH
43238: LD_VAR 0 14
43242: PUSH
43243: LD_INT 3
43245: ARRAY
43246: GREATEREQUAL
43247: AND
43248: IFFALSE 43260
// result := weapon ;
43250: LD_ADDR_VAR 0 3
43254: PUSH
43255: LD_VAR 0 18
43259: ST_TO_ADDR
// end ; end ;
43260: LD_VAR 0 3
43264: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43265: LD_INT 0
43267: PPUSH
43268: PPUSH
// result := true ;
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_INT 1
43276: ST_TO_ADDR
// if array1 = array2 then
43277: LD_VAR 0 1
43281: PUSH
43282: LD_VAR 0 2
43286: EQUAL
43287: IFFALSE 43347
// begin for i = 1 to array1 do
43289: LD_ADDR_VAR 0 4
43293: PUSH
43294: DOUBLE
43295: LD_INT 1
43297: DEC
43298: ST_TO_ADDR
43299: LD_VAR 0 1
43303: PUSH
43304: FOR_TO
43305: IFFALSE 43343
// if array1 [ i ] <> array2 [ i ] then
43307: LD_VAR 0 1
43311: PUSH
43312: LD_VAR 0 4
43316: ARRAY
43317: PUSH
43318: LD_VAR 0 2
43322: PUSH
43323: LD_VAR 0 4
43327: ARRAY
43328: NONEQUAL
43329: IFFALSE 43341
// begin result := false ;
43331: LD_ADDR_VAR 0 3
43335: PUSH
43336: LD_INT 0
43338: ST_TO_ADDR
// break ;
43339: GO 43343
// end ;
43341: GO 43304
43343: POP
43344: POP
// end else
43345: GO 43355
// result := false ;
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 0
43354: ST_TO_ADDR
// end ;
43355: LD_VAR 0 3
43359: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43360: LD_INT 0
43362: PPUSH
43363: PPUSH
// if not array1 or not array2 then
43364: LD_VAR 0 1
43368: NOT
43369: PUSH
43370: LD_VAR 0 2
43374: NOT
43375: OR
43376: IFFALSE 43380
// exit ;
43378: GO 43444
// result := true ;
43380: LD_ADDR_VAR 0 3
43384: PUSH
43385: LD_INT 1
43387: ST_TO_ADDR
// for i = 1 to array1 do
43388: LD_ADDR_VAR 0 4
43392: PUSH
43393: DOUBLE
43394: LD_INT 1
43396: DEC
43397: ST_TO_ADDR
43398: LD_VAR 0 1
43402: PUSH
43403: FOR_TO
43404: IFFALSE 43442
// if array1 [ i ] <> array2 [ i ] then
43406: LD_VAR 0 1
43410: PUSH
43411: LD_VAR 0 4
43415: ARRAY
43416: PUSH
43417: LD_VAR 0 2
43421: PUSH
43422: LD_VAR 0 4
43426: ARRAY
43427: NONEQUAL
43428: IFFALSE 43440
// begin result := false ;
43430: LD_ADDR_VAR 0 3
43434: PUSH
43435: LD_INT 0
43437: ST_TO_ADDR
// break ;
43438: GO 43442
// end ;
43440: GO 43403
43442: POP
43443: POP
// end ;
43444: LD_VAR 0 3
43448: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43449: LD_INT 0
43451: PPUSH
43452: PPUSH
43453: PPUSH
// pom := GetBase ( fac ) ;
43454: LD_ADDR_VAR 0 5
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL_OW 274
43468: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43469: LD_ADDR_VAR 0 4
43473: PUSH
43474: LD_VAR 0 2
43478: PUSH
43479: LD_INT 1
43481: ARRAY
43482: PPUSH
43483: LD_VAR 0 2
43487: PUSH
43488: LD_INT 2
43490: ARRAY
43491: PPUSH
43492: LD_VAR 0 2
43496: PUSH
43497: LD_INT 3
43499: ARRAY
43500: PPUSH
43501: LD_VAR 0 2
43505: PUSH
43506: LD_INT 4
43508: ARRAY
43509: PPUSH
43510: CALL_OW 449
43514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: LD_VAR 0 5
43524: PPUSH
43525: LD_INT 1
43527: PPUSH
43528: CALL_OW 275
43532: PUSH
43533: LD_VAR 0 4
43537: PUSH
43538: LD_INT 1
43540: ARRAY
43541: GREATEREQUAL
43542: PUSH
43543: LD_VAR 0 5
43547: PPUSH
43548: LD_INT 2
43550: PPUSH
43551: CALL_OW 275
43555: PUSH
43556: LD_VAR 0 4
43560: PUSH
43561: LD_INT 2
43563: ARRAY
43564: GREATEREQUAL
43565: AND
43566: PUSH
43567: LD_VAR 0 5
43571: PPUSH
43572: LD_INT 3
43574: PPUSH
43575: CALL_OW 275
43579: PUSH
43580: LD_VAR 0 4
43584: PUSH
43585: LD_INT 3
43587: ARRAY
43588: GREATEREQUAL
43589: AND
43590: ST_TO_ADDR
// end ;
43591: LD_VAR 0 3
43595: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43596: LD_INT 0
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
// pom := GetBase ( building ) ;
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: CALL_OW 274
43616: ST_TO_ADDR
// if not pom then
43617: LD_VAR 0 3
43621: NOT
43622: IFFALSE 43626
// exit ;
43624: GO 43796
// btype := GetBType ( building ) ;
43626: LD_ADDR_VAR 0 5
43630: PUSH
43631: LD_VAR 0 1
43635: PPUSH
43636: CALL_OW 266
43640: ST_TO_ADDR
// if btype = b_armoury then
43641: LD_VAR 0 5
43645: PUSH
43646: LD_INT 4
43648: EQUAL
43649: IFFALSE 43659
// btype := b_barracks ;
43651: LD_ADDR_VAR 0 5
43655: PUSH
43656: LD_INT 5
43658: ST_TO_ADDR
// if btype = b_depot then
43659: LD_VAR 0 5
43663: PUSH
43664: LD_INT 0
43666: EQUAL
43667: IFFALSE 43677
// btype := b_warehouse ;
43669: LD_ADDR_VAR 0 5
43673: PUSH
43674: LD_INT 1
43676: ST_TO_ADDR
// if btype = b_workshop then
43677: LD_VAR 0 5
43681: PUSH
43682: LD_INT 2
43684: EQUAL
43685: IFFALSE 43695
// btype := b_factory ;
43687: LD_ADDR_VAR 0 5
43691: PUSH
43692: LD_INT 3
43694: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43695: LD_ADDR_VAR 0 4
43699: PUSH
43700: LD_VAR 0 5
43704: PPUSH
43705: LD_VAR 0 1
43709: PPUSH
43710: CALL_OW 248
43714: PPUSH
43715: CALL_OW 450
43719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43720: LD_ADDR_VAR 0 2
43724: PUSH
43725: LD_VAR 0 3
43729: PPUSH
43730: LD_INT 1
43732: PPUSH
43733: CALL_OW 275
43737: PUSH
43738: LD_VAR 0 4
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: GREATEREQUAL
43747: PUSH
43748: LD_VAR 0 3
43752: PPUSH
43753: LD_INT 2
43755: PPUSH
43756: CALL_OW 275
43760: PUSH
43761: LD_VAR 0 4
43765: PUSH
43766: LD_INT 2
43768: ARRAY
43769: GREATEREQUAL
43770: AND
43771: PUSH
43772: LD_VAR 0 3
43776: PPUSH
43777: LD_INT 3
43779: PPUSH
43780: CALL_OW 275
43784: PUSH
43785: LD_VAR 0 4
43789: PUSH
43790: LD_INT 3
43792: ARRAY
43793: GREATEREQUAL
43794: AND
43795: ST_TO_ADDR
// end ;
43796: LD_VAR 0 2
43800: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43801: LD_INT 0
43803: PPUSH
43804: PPUSH
43805: PPUSH
// pom := GetBase ( building ) ;
43806: LD_ADDR_VAR 0 4
43810: PUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 274
43820: ST_TO_ADDR
// if not pom then
43821: LD_VAR 0 4
43825: NOT
43826: IFFALSE 43830
// exit ;
43828: GO 43931
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43830: LD_ADDR_VAR 0 5
43834: PUSH
43835: LD_VAR 0 2
43839: PPUSH
43840: LD_VAR 0 1
43844: PPUSH
43845: CALL_OW 248
43849: PPUSH
43850: CALL_OW 450
43854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43855: LD_ADDR_VAR 0 3
43859: PUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: LD_INT 1
43867: PPUSH
43868: CALL_OW 275
43872: PUSH
43873: LD_VAR 0 5
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: GREATEREQUAL
43882: PUSH
43883: LD_VAR 0 4
43887: PPUSH
43888: LD_INT 2
43890: PPUSH
43891: CALL_OW 275
43895: PUSH
43896: LD_VAR 0 5
43900: PUSH
43901: LD_INT 2
43903: ARRAY
43904: GREATEREQUAL
43905: AND
43906: PUSH
43907: LD_VAR 0 4
43911: PPUSH
43912: LD_INT 3
43914: PPUSH
43915: CALL_OW 275
43919: PUSH
43920: LD_VAR 0 5
43924: PUSH
43925: LD_INT 3
43927: ARRAY
43928: GREATEREQUAL
43929: AND
43930: ST_TO_ADDR
// end ;
43931: LD_VAR 0 3
43935: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43936: LD_INT 0
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
// result := false ;
43949: LD_ADDR_VAR 0 8
43953: PUSH
43954: LD_INT 0
43956: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43957: LD_VAR 0 5
43961: NOT
43962: PUSH
43963: LD_VAR 0 1
43967: NOT
43968: OR
43969: PUSH
43970: LD_VAR 0 2
43974: NOT
43975: OR
43976: PUSH
43977: LD_VAR 0 3
43981: NOT
43982: OR
43983: IFFALSE 43987
// exit ;
43985: GO 44801
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43987: LD_ADDR_VAR 0 14
43991: PUSH
43992: LD_VAR 0 1
43996: PPUSH
43997: LD_VAR 0 2
44001: PPUSH
44002: LD_VAR 0 3
44006: PPUSH
44007: LD_VAR 0 4
44011: PPUSH
44012: LD_VAR 0 5
44016: PUSH
44017: LD_INT 1
44019: ARRAY
44020: PPUSH
44021: CALL_OW 248
44025: PPUSH
44026: LD_INT 0
44028: PPUSH
44029: CALL 46038 0 6
44033: ST_TO_ADDR
// if not hexes then
44034: LD_VAR 0 14
44038: NOT
44039: IFFALSE 44043
// exit ;
44041: GO 44801
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44043: LD_ADDR_VAR 0 17
44047: PUSH
44048: LD_VAR 0 5
44052: PPUSH
44053: LD_INT 22
44055: PUSH
44056: LD_VAR 0 13
44060: PPUSH
44061: CALL_OW 255
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 30
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 30
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PPUSH
44102: CALL_OW 72
44106: ST_TO_ADDR
// for i = 1 to hexes do
44107: LD_ADDR_VAR 0 9
44111: PUSH
44112: DOUBLE
44113: LD_INT 1
44115: DEC
44116: ST_TO_ADDR
44117: LD_VAR 0 14
44121: PUSH
44122: FOR_TO
44123: IFFALSE 44799
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44125: LD_ADDR_VAR 0 13
44129: PUSH
44130: LD_VAR 0 14
44134: PUSH
44135: LD_VAR 0 9
44139: ARRAY
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PPUSH
44145: LD_VAR 0 14
44149: PUSH
44150: LD_VAR 0 9
44154: ARRAY
44155: PUSH
44156: LD_INT 2
44158: ARRAY
44159: PPUSH
44160: CALL_OW 428
44164: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44165: LD_VAR 0 14
44169: PUSH
44170: LD_VAR 0 9
44174: ARRAY
44175: PUSH
44176: LD_INT 1
44178: ARRAY
44179: PPUSH
44180: LD_VAR 0 14
44184: PUSH
44185: LD_VAR 0 9
44189: ARRAY
44190: PUSH
44191: LD_INT 2
44193: ARRAY
44194: PPUSH
44195: CALL_OW 351
44199: PUSH
44200: LD_VAR 0 14
44204: PUSH
44205: LD_VAR 0 9
44209: ARRAY
44210: PUSH
44211: LD_INT 1
44213: ARRAY
44214: PPUSH
44215: LD_VAR 0 14
44219: PUSH
44220: LD_VAR 0 9
44224: ARRAY
44225: PUSH
44226: LD_INT 2
44228: ARRAY
44229: PPUSH
44230: CALL_OW 488
44234: NOT
44235: OR
44236: PUSH
44237: LD_VAR 0 13
44241: PPUSH
44242: CALL_OW 247
44246: PUSH
44247: LD_INT 3
44249: EQUAL
44250: OR
44251: IFFALSE 44257
// exit ;
44253: POP
44254: POP
44255: GO 44801
// if not tmp then
44257: LD_VAR 0 13
44261: NOT
44262: IFFALSE 44266
// continue ;
44264: GO 44122
// result := true ;
44266: LD_ADDR_VAR 0 8
44270: PUSH
44271: LD_INT 1
44273: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44274: LD_VAR 0 6
44278: PUSH
44279: LD_VAR 0 13
44283: PPUSH
44284: CALL_OW 247
44288: PUSH
44289: LD_INT 2
44291: EQUAL
44292: AND
44293: PUSH
44294: LD_VAR 0 13
44298: PPUSH
44299: CALL_OW 263
44303: PUSH
44304: LD_INT 1
44306: EQUAL
44307: AND
44308: IFFALSE 44472
// begin if IsDrivenBy ( tmp ) then
44310: LD_VAR 0 13
44314: PPUSH
44315: CALL_OW 311
44319: IFFALSE 44323
// continue ;
44321: GO 44122
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44323: LD_VAR 0 6
44327: PPUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 60
44333: PUSH
44334: EMPTY
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: LD_INT 55
44346: PUSH
44347: EMPTY
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PPUSH
44358: CALL_OW 72
44362: IFFALSE 44470
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44364: LD_ADDR_VAR 0 18
44368: PUSH
44369: LD_VAR 0 6
44373: PPUSH
44374: LD_INT 3
44376: PUSH
44377: LD_INT 60
44379: PUSH
44380: EMPTY
44381: LIST
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 55
44392: PUSH
44393: EMPTY
44394: LIST
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PPUSH
44404: CALL_OW 72
44408: PUSH
44409: LD_INT 1
44411: ARRAY
44412: ST_TO_ADDR
// if IsInUnit ( driver ) then
44413: LD_VAR 0 18
44417: PPUSH
44418: CALL_OW 310
44422: IFFALSE 44433
// ComExit ( driver ) ;
44424: LD_VAR 0 18
44428: PPUSH
44429: CALL 69166 0 1
// AddComEnterUnit ( driver , tmp ) ;
44433: LD_VAR 0 18
44437: PPUSH
44438: LD_VAR 0 13
44442: PPUSH
44443: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44447: LD_VAR 0 18
44451: PPUSH
44452: LD_VAR 0 7
44456: PPUSH
44457: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44461: LD_VAR 0 18
44465: PPUSH
44466: CALL_OW 181
// end ; continue ;
44470: GO 44122
// end ; if not cleaners or not tmp in cleaners then
44472: LD_VAR 0 6
44476: NOT
44477: PUSH
44478: LD_VAR 0 13
44482: PUSH
44483: LD_VAR 0 6
44487: IN
44488: NOT
44489: OR
44490: IFFALSE 44797
// begin if dep then
44492: LD_VAR 0 17
44496: IFFALSE 44632
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44498: LD_ADDR_VAR 0 16
44502: PUSH
44503: LD_VAR 0 17
44507: PUSH
44508: LD_INT 1
44510: ARRAY
44511: PPUSH
44512: CALL_OW 250
44516: PPUSH
44517: LD_VAR 0 17
44521: PUSH
44522: LD_INT 1
44524: ARRAY
44525: PPUSH
44526: CALL_OW 254
44530: PPUSH
44531: LD_INT 5
44533: PPUSH
44534: CALL_OW 272
44538: PUSH
44539: LD_VAR 0 17
44543: PUSH
44544: LD_INT 1
44546: ARRAY
44547: PPUSH
44548: CALL_OW 251
44552: PPUSH
44553: LD_VAR 0 17
44557: PUSH
44558: LD_INT 1
44560: ARRAY
44561: PPUSH
44562: CALL_OW 254
44566: PPUSH
44567: LD_INT 5
44569: PPUSH
44570: CALL_OW 273
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44579: LD_VAR 0 16
44583: PUSH
44584: LD_INT 1
44586: ARRAY
44587: PPUSH
44588: LD_VAR 0 16
44592: PUSH
44593: LD_INT 2
44595: ARRAY
44596: PPUSH
44597: CALL_OW 488
44601: IFFALSE 44632
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44603: LD_VAR 0 13
44607: PPUSH
44608: LD_VAR 0 16
44612: PUSH
44613: LD_INT 1
44615: ARRAY
44616: PPUSH
44617: LD_VAR 0 16
44621: PUSH
44622: LD_INT 2
44624: ARRAY
44625: PPUSH
44626: CALL_OW 111
// continue ;
44630: GO 44122
// end ; end ; r := GetDir ( tmp ) ;
44632: LD_ADDR_VAR 0 15
44636: PUSH
44637: LD_VAR 0 13
44641: PPUSH
44642: CALL_OW 254
44646: ST_TO_ADDR
// if r = 5 then
44647: LD_VAR 0 15
44651: PUSH
44652: LD_INT 5
44654: EQUAL
44655: IFFALSE 44665
// r := 0 ;
44657: LD_ADDR_VAR 0 15
44661: PUSH
44662: LD_INT 0
44664: ST_TO_ADDR
// for j = r to 5 do
44665: LD_ADDR_VAR 0 10
44669: PUSH
44670: DOUBLE
44671: LD_VAR 0 15
44675: DEC
44676: ST_TO_ADDR
44677: LD_INT 5
44679: PUSH
44680: FOR_TO
44681: IFFALSE 44795
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44683: LD_ADDR_VAR 0 11
44687: PUSH
44688: LD_VAR 0 13
44692: PPUSH
44693: CALL_OW 250
44697: PPUSH
44698: LD_VAR 0 10
44702: PPUSH
44703: LD_INT 2
44705: PPUSH
44706: CALL_OW 272
44710: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44711: LD_ADDR_VAR 0 12
44715: PUSH
44716: LD_VAR 0 13
44720: PPUSH
44721: CALL_OW 251
44725: PPUSH
44726: LD_VAR 0 10
44730: PPUSH
44731: LD_INT 2
44733: PPUSH
44734: CALL_OW 273
44738: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44739: LD_VAR 0 11
44743: PPUSH
44744: LD_VAR 0 12
44748: PPUSH
44749: CALL_OW 488
44753: PUSH
44754: LD_VAR 0 11
44758: PPUSH
44759: LD_VAR 0 12
44763: PPUSH
44764: CALL_OW 428
44768: NOT
44769: AND
44770: IFFALSE 44793
// begin ComMoveXY ( tmp , _x , _y ) ;
44772: LD_VAR 0 13
44776: PPUSH
44777: LD_VAR 0 11
44781: PPUSH
44782: LD_VAR 0 12
44786: PPUSH
44787: CALL_OW 111
// break ;
44791: GO 44795
// end ; end ;
44793: GO 44680
44795: POP
44796: POP
// end ; end ;
44797: GO 44122
44799: POP
44800: POP
// end ;
44801: LD_VAR 0 8
44805: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44806: LD_INT 0
44808: PPUSH
// result := true ;
44809: LD_ADDR_VAR 0 3
44813: PUSH
44814: LD_INT 1
44816: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44817: LD_VAR 0 2
44821: PUSH
44822: LD_INT 24
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44836
44828: LD_INT 33
44830: DOUBLE
44831: EQUAL
44832: IFTRUE 44836
44834: GO 44861
44836: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44837: LD_ADDR_VAR 0 3
44841: PUSH
44842: LD_INT 32
44844: PPUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 321
44854: PUSH
44855: LD_INT 2
44857: EQUAL
44858: ST_TO_ADDR
44859: GO 45181
44861: LD_INT 20
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 44894
44869: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_INT 6
44877: PPUSH
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 321
44887: PUSH
44888: LD_INT 2
44890: EQUAL
44891: ST_TO_ADDR
44892: GO 45181
44894: LD_INT 22
44896: DOUBLE
44897: EQUAL
44898: IFTRUE 44908
44900: LD_INT 36
44902: DOUBLE
44903: EQUAL
44904: IFTRUE 44908
44906: GO 44933
44908: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44909: LD_ADDR_VAR 0 3
44913: PUSH
44914: LD_INT 15
44916: PPUSH
44917: LD_VAR 0 1
44921: PPUSH
44922: CALL_OW 321
44926: PUSH
44927: LD_INT 2
44929: EQUAL
44930: ST_TO_ADDR
44931: GO 45181
44933: LD_INT 30
44935: DOUBLE
44936: EQUAL
44937: IFTRUE 44941
44939: GO 44966
44941: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44942: LD_ADDR_VAR 0 3
44946: PUSH
44947: LD_INT 20
44949: PPUSH
44950: LD_VAR 0 1
44954: PPUSH
44955: CALL_OW 321
44959: PUSH
44960: LD_INT 2
44962: EQUAL
44963: ST_TO_ADDR
44964: GO 45181
44966: LD_INT 28
44968: DOUBLE
44969: EQUAL
44970: IFTRUE 44980
44972: LD_INT 21
44974: DOUBLE
44975: EQUAL
44976: IFTRUE 44980
44978: GO 45005
44980: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44981: LD_ADDR_VAR 0 3
44985: PUSH
44986: LD_INT 21
44988: PPUSH
44989: LD_VAR 0 1
44993: PPUSH
44994: CALL_OW 321
44998: PUSH
44999: LD_INT 2
45001: EQUAL
45002: ST_TO_ADDR
45003: GO 45181
45005: LD_INT 16
45007: DOUBLE
45008: EQUAL
45009: IFTRUE 45013
45011: GO 45040
45013: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45014: LD_ADDR_VAR 0 3
45018: PUSH
45019: LD_EXP 55
45023: PPUSH
45024: LD_VAR 0 1
45028: PPUSH
45029: CALL_OW 321
45033: PUSH
45034: LD_INT 2
45036: EQUAL
45037: ST_TO_ADDR
45038: GO 45181
45040: LD_INT 19
45042: DOUBLE
45043: EQUAL
45044: IFTRUE 45054
45046: LD_INT 23
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45054
45052: GO 45081
45054: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45055: LD_ADDR_VAR 0 3
45059: PUSH
45060: LD_EXP 54
45064: PPUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: CALL_OW 321
45074: PUSH
45075: LD_INT 2
45077: EQUAL
45078: ST_TO_ADDR
45079: GO 45181
45081: LD_INT 17
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45114
45089: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 39
45097: PPUSH
45098: LD_VAR 0 1
45102: PPUSH
45103: CALL_OW 321
45107: PUSH
45108: LD_INT 2
45110: EQUAL
45111: ST_TO_ADDR
45112: GO 45181
45114: LD_INT 18
45116: DOUBLE
45117: EQUAL
45118: IFTRUE 45122
45120: GO 45147
45122: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45123: LD_ADDR_VAR 0 3
45127: PUSH
45128: LD_INT 40
45130: PPUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 321
45140: PUSH
45141: LD_INT 2
45143: EQUAL
45144: ST_TO_ADDR
45145: GO 45181
45147: LD_INT 27
45149: DOUBLE
45150: EQUAL
45151: IFTRUE 45155
45153: GO 45180
45155: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45156: LD_ADDR_VAR 0 3
45160: PUSH
45161: LD_INT 35
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 321
45173: PUSH
45174: LD_INT 2
45176: EQUAL
45177: ST_TO_ADDR
45178: GO 45181
45180: POP
// end ;
45181: LD_VAR 0 3
45185: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45186: LD_INT 0
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
// result := false ;
45199: LD_ADDR_VAR 0 6
45203: PUSH
45204: LD_INT 0
45206: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45207: LD_VAR 0 1
45211: NOT
45212: PUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: CALL_OW 266
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: IN
45233: NOT
45234: OR
45235: PUSH
45236: LD_VAR 0 2
45240: NOT
45241: OR
45242: PUSH
45243: LD_VAR 0 5
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: LD_INT 4
45262: PUSH
45263: LD_INT 5
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: IN
45274: NOT
45275: OR
45276: PUSH
45277: LD_VAR 0 3
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: CALL_OW 488
45291: NOT
45292: OR
45293: IFFALSE 45297
// exit ;
45295: GO 46033
// side := GetSide ( depot ) ;
45297: LD_ADDR_VAR 0 9
45301: PUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: CALL_OW 255
45311: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45312: LD_VAR 0 9
45316: PPUSH
45317: LD_VAR 0 2
45321: PPUSH
45322: CALL 44806 0 2
45326: NOT
45327: IFFALSE 45331
// exit ;
45329: GO 46033
// pom := GetBase ( depot ) ;
45331: LD_ADDR_VAR 0 10
45335: PUSH
45336: LD_VAR 0 1
45340: PPUSH
45341: CALL_OW 274
45345: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45346: LD_ADDR_VAR 0 11
45350: PUSH
45351: LD_VAR 0 2
45355: PPUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: CALL_OW 248
45365: PPUSH
45366: CALL_OW 450
45370: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45371: LD_VAR 0 10
45375: PPUSH
45376: LD_INT 1
45378: PPUSH
45379: CALL_OW 275
45383: PUSH
45384: LD_VAR 0 11
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: GREATEREQUAL
45393: PUSH
45394: LD_VAR 0 10
45398: PPUSH
45399: LD_INT 2
45401: PPUSH
45402: CALL_OW 275
45406: PUSH
45407: LD_VAR 0 11
45411: PUSH
45412: LD_INT 2
45414: ARRAY
45415: GREATEREQUAL
45416: AND
45417: PUSH
45418: LD_VAR 0 10
45422: PPUSH
45423: LD_INT 3
45425: PPUSH
45426: CALL_OW 275
45430: PUSH
45431: LD_VAR 0 11
45435: PUSH
45436: LD_INT 3
45438: ARRAY
45439: GREATEREQUAL
45440: AND
45441: NOT
45442: IFFALSE 45446
// exit ;
45444: GO 46033
// if GetBType ( depot ) = b_depot then
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 266
45455: PUSH
45456: LD_INT 0
45458: EQUAL
45459: IFFALSE 45471
// dist := 28 else
45461: LD_ADDR_VAR 0 14
45465: PUSH
45466: LD_INT 28
45468: ST_TO_ADDR
45469: GO 45479
// dist := 36 ;
45471: LD_ADDR_VAR 0 14
45475: PUSH
45476: LD_INT 36
45478: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45479: LD_VAR 0 1
45483: PPUSH
45484: LD_VAR 0 3
45488: PPUSH
45489: LD_VAR 0 4
45493: PPUSH
45494: CALL_OW 297
45498: PUSH
45499: LD_VAR 0 14
45503: GREATER
45504: IFFALSE 45508
// exit ;
45506: GO 46033
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45508: LD_ADDR_VAR 0 12
45512: PUSH
45513: LD_VAR 0 2
45517: PPUSH
45518: LD_VAR 0 3
45522: PPUSH
45523: LD_VAR 0 4
45527: PPUSH
45528: LD_VAR 0 5
45532: PPUSH
45533: LD_VAR 0 1
45537: PPUSH
45538: CALL_OW 248
45542: PPUSH
45543: LD_INT 0
45545: PPUSH
45546: CALL 46038 0 6
45550: ST_TO_ADDR
// if not hexes then
45551: LD_VAR 0 12
45555: NOT
45556: IFFALSE 45560
// exit ;
45558: GO 46033
// hex := GetHexInfo ( x , y ) ;
45560: LD_ADDR_VAR 0 15
45564: PUSH
45565: LD_VAR 0 3
45569: PPUSH
45570: LD_VAR 0 4
45574: PPUSH
45575: CALL_OW 546
45579: ST_TO_ADDR
// if hex [ 1 ] then
45580: LD_VAR 0 15
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: IFFALSE 45592
// exit ;
45590: GO 46033
// height := hex [ 2 ] ;
45592: LD_ADDR_VAR 0 13
45596: PUSH
45597: LD_VAR 0 15
45601: PUSH
45602: LD_INT 2
45604: ARRAY
45605: ST_TO_ADDR
// for i = 1 to hexes do
45606: LD_ADDR_VAR 0 7
45610: PUSH
45611: DOUBLE
45612: LD_INT 1
45614: DEC
45615: ST_TO_ADDR
45616: LD_VAR 0 12
45620: PUSH
45621: FOR_TO
45622: IFFALSE 45952
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45624: LD_VAR 0 12
45628: PUSH
45629: LD_VAR 0 7
45633: ARRAY
45634: PUSH
45635: LD_INT 1
45637: ARRAY
45638: PPUSH
45639: LD_VAR 0 12
45643: PUSH
45644: LD_VAR 0 7
45648: ARRAY
45649: PUSH
45650: LD_INT 2
45652: ARRAY
45653: PPUSH
45654: CALL_OW 488
45658: NOT
45659: PUSH
45660: LD_VAR 0 12
45664: PUSH
45665: LD_VAR 0 7
45669: ARRAY
45670: PUSH
45671: LD_INT 1
45673: ARRAY
45674: PPUSH
45675: LD_VAR 0 12
45679: PUSH
45680: LD_VAR 0 7
45684: ARRAY
45685: PUSH
45686: LD_INT 2
45688: ARRAY
45689: PPUSH
45690: CALL_OW 428
45694: PUSH
45695: LD_INT 0
45697: GREATER
45698: OR
45699: PUSH
45700: LD_VAR 0 12
45704: PUSH
45705: LD_VAR 0 7
45709: ARRAY
45710: PUSH
45711: LD_INT 1
45713: ARRAY
45714: PPUSH
45715: LD_VAR 0 12
45719: PUSH
45720: LD_VAR 0 7
45724: ARRAY
45725: PUSH
45726: LD_INT 2
45728: ARRAY
45729: PPUSH
45730: CALL_OW 351
45734: OR
45735: IFFALSE 45741
// exit ;
45737: POP
45738: POP
45739: GO 46033
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45741: LD_ADDR_VAR 0 8
45745: PUSH
45746: LD_VAR 0 12
45750: PUSH
45751: LD_VAR 0 7
45755: ARRAY
45756: PUSH
45757: LD_INT 1
45759: ARRAY
45760: PPUSH
45761: LD_VAR 0 12
45765: PUSH
45766: LD_VAR 0 7
45770: ARRAY
45771: PUSH
45772: LD_INT 2
45774: ARRAY
45775: PPUSH
45776: CALL_OW 546
45780: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45781: LD_VAR 0 8
45785: PUSH
45786: LD_INT 1
45788: ARRAY
45789: PUSH
45790: LD_VAR 0 8
45794: PUSH
45795: LD_INT 2
45797: ARRAY
45798: PUSH
45799: LD_VAR 0 13
45803: PUSH
45804: LD_INT 2
45806: PLUS
45807: GREATER
45808: OR
45809: PUSH
45810: LD_VAR 0 8
45814: PUSH
45815: LD_INT 2
45817: ARRAY
45818: PUSH
45819: LD_VAR 0 13
45823: PUSH
45824: LD_INT 2
45826: MINUS
45827: LESS
45828: OR
45829: PUSH
45830: LD_VAR 0 8
45834: PUSH
45835: LD_INT 3
45837: ARRAY
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 8
45844: PUSH
45845: LD_INT 9
45847: PUSH
45848: LD_INT 10
45850: PUSH
45851: LD_INT 11
45853: PUSH
45854: LD_INT 12
45856: PUSH
45857: LD_INT 13
45859: PUSH
45860: LD_INT 16
45862: PUSH
45863: LD_INT 17
45865: PUSH
45866: LD_INT 18
45868: PUSH
45869: LD_INT 19
45871: PUSH
45872: LD_INT 20
45874: PUSH
45875: LD_INT 21
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: IN
45893: NOT
45894: OR
45895: PUSH
45896: LD_VAR 0 8
45900: PUSH
45901: LD_INT 5
45903: ARRAY
45904: NOT
45905: OR
45906: PUSH
45907: LD_VAR 0 8
45911: PUSH
45912: LD_INT 6
45914: ARRAY
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 7
45924: PUSH
45925: LD_INT 9
45927: PUSH
45928: LD_INT 10
45930: PUSH
45931: LD_INT 11
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: IN
45942: NOT
45943: OR
45944: IFFALSE 45950
// exit ;
45946: POP
45947: POP
45948: GO 46033
// end ;
45950: GO 45621
45952: POP
45953: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45954: LD_VAR 0 9
45958: PPUSH
45959: LD_VAR 0 3
45963: PPUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_INT 20
45971: PPUSH
45972: CALL 37979 0 4
45976: PUSH
45977: LD_INT 4
45979: ARRAY
45980: IFFALSE 45984
// exit ;
45982: GO 46033
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45984: LD_VAR 0 2
45988: PUSH
45989: LD_INT 29
45991: PUSH
45992: LD_INT 30
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: IN
45999: PUSH
46000: LD_VAR 0 3
46004: PPUSH
46005: LD_VAR 0 4
46009: PPUSH
46010: LD_VAR 0 9
46014: PPUSH
46015: CALL_OW 440
46019: NOT
46020: AND
46021: IFFALSE 46025
// exit ;
46023: GO 46033
// result := true ;
46025: LD_ADDR_VAR 0 6
46029: PUSH
46030: LD_INT 1
46032: ST_TO_ADDR
// end ;
46033: LD_VAR 0 6
46037: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46038: LD_INT 0
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
46054: PPUSH
46055: PPUSH
46056: PPUSH
46057: PPUSH
46058: PPUSH
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
// result = [ ] ;
46098: LD_ADDR_VAR 0 7
46102: PUSH
46103: EMPTY
46104: ST_TO_ADDR
// temp_list = [ ] ;
46105: LD_ADDR_VAR 0 9
46109: PUSH
46110: EMPTY
46111: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46112: LD_VAR 0 4
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: LD_INT 4
46131: PUSH
46132: LD_INT 5
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: IN
46143: NOT
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: IN
46160: PUSH
46161: LD_VAR 0 5
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: IN
46180: NOT
46181: AND
46182: OR
46183: IFFALSE 46187
// exit ;
46185: GO 64578
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46187: LD_VAR 0 1
46191: PUSH
46192: LD_INT 6
46194: PUSH
46195: LD_INT 7
46197: PUSH
46198: LD_INT 8
46200: PUSH
46201: LD_INT 13
46203: PUSH
46204: LD_INT 12
46206: PUSH
46207: LD_INT 15
46209: PUSH
46210: LD_INT 11
46212: PUSH
46213: LD_INT 14
46215: PUSH
46216: LD_INT 10
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: IN
46230: IFFALSE 46240
// btype = b_lab ;
46232: LD_ADDR_VAR 0 1
46236: PUSH
46237: LD_INT 6
46239: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46240: LD_VAR 0 6
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: IN
46259: NOT
46260: PUSH
46261: LD_VAR 0 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 3
46277: PUSH
46278: LD_INT 6
46280: PUSH
46281: LD_INT 36
46283: PUSH
46284: LD_INT 4
46286: PUSH
46287: LD_INT 5
46289: PUSH
46290: LD_INT 31
46292: PUSH
46293: LD_INT 32
46295: PUSH
46296: LD_INT 33
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: IN
46312: NOT
46313: PUSH
46314: LD_VAR 0 6
46318: PUSH
46319: LD_INT 1
46321: EQUAL
46322: AND
46323: OR
46324: PUSH
46325: LD_VAR 0 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: IN
46340: NOT
46341: PUSH
46342: LD_VAR 0 6
46346: PUSH
46347: LD_INT 2
46349: EQUAL
46350: AND
46351: OR
46352: IFFALSE 46362
// mode = 0 ;
46354: LD_ADDR_VAR 0 6
46358: PUSH
46359: LD_INT 0
46361: ST_TO_ADDR
// case mode of 0 :
46362: LD_VAR 0 6
46366: PUSH
46367: LD_INT 0
46369: DOUBLE
46370: EQUAL
46371: IFTRUE 46375
46373: GO 57828
46375: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46376: LD_ADDR_VAR 0 11
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46569: LD_ADDR_VAR 0 12
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 3
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46765: LD_ADDR_VAR 0 13
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46964: LD_ADDR_VAR 0 14
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 3
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47160: LD_ADDR_VAR 0 15
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47353: LD_ADDR_VAR 0 16
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47546: LD_ADDR_VAR 0 17
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47776: LD_ADDR_VAR 0 18
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48006: LD_ADDR_VAR 0 19
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48236: LD_ADDR_VAR 0 20
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48466: LD_ADDR_VAR 0 21
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48696: LD_ADDR_VAR 0 22
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48926: LD_ADDR_VAR 0 23
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49206: LD_ADDR_VAR 0 24
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49482: LD_ADDR_VAR 0 25
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 3
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49756: LD_ADDR_VAR 0 26
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50032: LD_ADDR_VAR 0 27
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50312: LD_ADDR_VAR 0 28
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50594: LD_ADDR_VAR 0 29
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50873: LD_ADDR_VAR 0 30
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51151: LD_ADDR_VAR 0 31
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: NEG
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51429: LD_ADDR_VAR 0 32
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51707: LD_ADDR_VAR 0 33
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51986: LD_ADDR_VAR 0 34
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52266: LD_ADDR_VAR 0 35
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52378: LD_ADDR_VAR 0 36
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52490: LD_ADDR_VAR 0 37
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52602: LD_ADDR_VAR 0 38
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52714: LD_ADDR_VAR 0 39
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52826: LD_ADDR_VAR 0 40
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52938: LD_ADDR_VAR 0 41
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53288: LD_ADDR_VAR 0 42
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53638: LD_ADDR_VAR 0 43
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53986: LD_ADDR_VAR 0 44
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54336: LD_ADDR_VAR 0 45
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 3
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54686: LD_ADDR_VAR 0 46
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55034: LD_ADDR_VAR 0 47
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55185: LD_ADDR_VAR 0 48
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55332: LD_ADDR_VAR 0 49
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55476: LD_ADDR_VAR 0 50
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55620: LD_ADDR_VAR 0 51
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55767: LD_ADDR_VAR 0 52
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55918: LD_ADDR_VAR 0 53
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56148: LD_ADDR_VAR 0 54
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56378: LD_ADDR_VAR 0 55
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56608: LD_ADDR_VAR 0 56
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56838: LD_ADDR_VAR 0 57
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57068: LD_ADDR_VAR 0 58
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57298: LD_ADDR_VAR 0 59
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57386: LD_ADDR_VAR 0 60
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57474: LD_ADDR_VAR 0 61
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57562: LD_ADDR_VAR 0 62
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57650: LD_ADDR_VAR 0 63
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57738: LD_ADDR_VAR 0 64
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// end ; 1 :
57826: GO 63723
57828: LD_INT 1
57830: DOUBLE
57831: EQUAL
57832: IFTRUE 57836
57834: GO 60459
57836: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57837: LD_ADDR_VAR 0 11
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57881: LD_ADDR_VAR 0 12
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57922: LD_ADDR_VAR 0 13
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57962: LD_ADDR_VAR 0 14
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58003: LD_ADDR_VAR 0 15
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58047: LD_ADDR_VAR 0 16
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58093: LD_ADDR_VAR 0 17
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58137: LD_ADDR_VAR 0 18
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58178: LD_ADDR_VAR 0 19
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58218: LD_ADDR_VAR 0 20
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58259: LD_ADDR_VAR 0 21
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58303: LD_ADDR_VAR 0 22
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58349: LD_ADDR_VAR 0 23
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58393: LD_ADDR_VAR 0 24
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58434: LD_ADDR_VAR 0 25
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58474: LD_ADDR_VAR 0 26
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58515: LD_ADDR_VAR 0 27
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58559: LD_ADDR_VAR 0 28
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58605: LD_ADDR_VAR 0 29
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 4
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 5
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 5
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 4
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 6
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 6
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 5
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58760: LD_ADDR_VAR 0 30
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 5
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 5
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 5
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 6
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 6
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58903: LD_ADDR_VAR 0 31
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 4
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 5
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: LD_INT 5
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 6
59000: PUSH
59001: LD_INT 5
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 6
59010: PUSH
59011: LD_INT 6
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 5
59020: PUSH
59021: LD_INT 6
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59042: LD_ADDR_VAR 0 32
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 5
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 6
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 6
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 5
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59185: LD_ADDR_VAR 0 33
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 4
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 5
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 5
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 6
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 6
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59340: LD_ADDR_VAR 0 34
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: LD_INT 3
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: LD_INT 4
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 4
59407: NEG
59408: PUSH
59409: LD_INT 4
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: LD_INT 5
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: LD_INT 4
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 5
59443: NEG
59444: PUSH
59445: LD_INT 5
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 5
59455: NEG
59456: PUSH
59457: LD_INT 6
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 6
59467: NEG
59468: PUSH
59469: LD_INT 5
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 6
59479: NEG
59480: PUSH
59481: LD_INT 6
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59503: LD_ADDR_VAR 0 41
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59547: LD_ADDR_VAR 0 42
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59588: LD_ADDR_VAR 0 43
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59628: LD_ADDR_VAR 0 44
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59669: LD_ADDR_VAR 0 45
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59713: LD_ADDR_VAR 0 46
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59759: LD_ADDR_VAR 0 47
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59792: LD_ADDR_VAR 0 48
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59823: LD_ADDR_VAR 0 49
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59852: LD_ADDR_VAR 0 50
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59881: LD_ADDR_VAR 0 51
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59912: LD_ADDR_VAR 0 52
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59945: LD_ADDR_VAR 0 53
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 3
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59989: LD_ADDR_VAR 0 54
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: LIST
60029: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60030: LD_ADDR_VAR 0 55
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60070: LD_ADDR_VAR 0 56
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60111: LD_ADDR_VAR 0 57
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60155: LD_ADDR_VAR 0 58
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: LD_INT 3
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60201: LD_ADDR_VAR 0 59
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60245: LD_ADDR_VAR 0 60
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60286: LD_ADDR_VAR 0 61
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60326: LD_ADDR_VAR 0 62
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60367: LD_ADDR_VAR 0 63
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60411: LD_ADDR_VAR 0 64
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// end ; 2 :
60457: GO 63723
60459: LD_INT 2
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60467
60465: GO 63722
60467: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60468: LD_ADDR_VAR 0 29
60472: PUSH
60473: LD_INT 4
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 5
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 5
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 4
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 5
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 4
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 4
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: PUSH
60609: LD_INT 4
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 4
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 4
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 5
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 5
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 4
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: LD_INT 4
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 3
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 5
60913: NEG
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 5
60925: NEG
60926: PUSH
60927: LD_INT 5
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: LD_INT 5
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 5
60949: NEG
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61006: LD_ADDR_VAR 0 30
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 5
61033: PUSH
61034: LD_INT 4
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: LD_INT 5
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 5
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: LD_INT 5
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 4
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 4
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 5
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 5
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: NEG
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: LD_INT 3
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: NEG
61371: PUSH
61372: LD_INT 4
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 5
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 4
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 5
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 5
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61553: LD_ADDR_VAR 0 31
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 4
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 5
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 5
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 5
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: NEG
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 4
61709: NEG
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: LD_INT 4
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: LD_INT 5
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: LD_INT 4
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 5
61815: NEG
61816: PUSH
61817: LD_INT 4
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 5
61827: NEG
61828: PUSH
61829: LD_INT 5
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: LD_INT 5
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 5
61851: NEG
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 4
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 4
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 4
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 5
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 5
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 5
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62103: LD_ADDR_VAR 0 32
62107: PUSH
62108: LD_INT 4
62110: NEG
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 4
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 5
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 5
62189: NEG
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 4
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: LD_INT 4
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 4
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 4
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 5
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 4
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: LD_INT 4
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 5
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 5
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 4
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 4
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 4
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 4
62515: PUSH
62516: LD_INT 4
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 4
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: LD_INT 4
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 5
62545: PUSH
62546: LD_INT 5
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 4
62555: PUSH
62556: LD_INT 5
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: LD_INT 4
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 5
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 5
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62650: LD_ADDR_VAR 0 33
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: LD_INT 4
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 4
62669: NEG
62670: PUSH
62671: LD_INT 5
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: LD_INT 4
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 5
62717: NEG
62718: PUSH
62719: LD_INT 4
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 5
62729: NEG
62730: PUSH
62731: LD_INT 5
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: LD_INT 5
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 3
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 4
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: LD_INT 3
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 3
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: LD_INT 4
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 4
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 4
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 5
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 5
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: LD_INT 2
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 5
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 4
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: LD_INT 4
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 4
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 4
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 3
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 5
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 5
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 5
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63188: LD_ADDR_VAR 0 34
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 4
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 5
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 3
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: LD_INT 4
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: LD_INT 5
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 5
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 4
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 4
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 4
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: PUSH
63391: LD_INT 4
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 5
63410: PUSH
63411: LD_INT 4
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 5
63420: PUSH
63421: LD_INT 5
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 4
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: LD_INT 3
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 5
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: LD_INT 5
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 4
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 4
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: NEG
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 4
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 5
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 5
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 5
63652: NEG
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: LD_INT 2
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// end ; end ;
63720: GO 63723
63722: POP
// case btype of b_depot , b_warehouse :
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 0
63730: DOUBLE
63731: EQUAL
63732: IFTRUE 63742
63734: LD_INT 1
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63742
63740: GO 63943
63742: POP
// case nation of nation_american :
63743: LD_VAR 0 5
63747: PUSH
63748: LD_INT 1
63750: DOUBLE
63751: EQUAL
63752: IFTRUE 63756
63754: GO 63812
63756: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63757: LD_ADDR_VAR 0 9
63761: PUSH
63762: LD_VAR 0 11
63766: PUSH
63767: LD_VAR 0 12
63771: PUSH
63772: LD_VAR 0 13
63776: PUSH
63777: LD_VAR 0 14
63781: PUSH
63782: LD_VAR 0 15
63786: PUSH
63787: LD_VAR 0 16
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: PUSH
63800: LD_VAR 0 4
63804: PUSH
63805: LD_INT 1
63807: PLUS
63808: ARRAY
63809: ST_TO_ADDR
63810: GO 63941
63812: LD_INT 2
63814: DOUBLE
63815: EQUAL
63816: IFTRUE 63820
63818: GO 63876
63820: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63821: LD_ADDR_VAR 0 9
63825: PUSH
63826: LD_VAR 0 17
63830: PUSH
63831: LD_VAR 0 18
63835: PUSH
63836: LD_VAR 0 19
63840: PUSH
63841: LD_VAR 0 20
63845: PUSH
63846: LD_VAR 0 21
63850: PUSH
63851: LD_VAR 0 22
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 4
63868: PUSH
63869: LD_INT 1
63871: PLUS
63872: ARRAY
63873: ST_TO_ADDR
63874: GO 63941
63876: LD_INT 3
63878: DOUBLE
63879: EQUAL
63880: IFTRUE 63884
63882: GO 63940
63884: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63885: LD_ADDR_VAR 0 9
63889: PUSH
63890: LD_VAR 0 23
63894: PUSH
63895: LD_VAR 0 24
63899: PUSH
63900: LD_VAR 0 25
63904: PUSH
63905: LD_VAR 0 26
63909: PUSH
63910: LD_VAR 0 27
63914: PUSH
63915: LD_VAR 0 28
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: PUSH
63928: LD_VAR 0 4
63932: PUSH
63933: LD_INT 1
63935: PLUS
63936: ARRAY
63937: ST_TO_ADDR
63938: GO 63941
63940: POP
63941: GO 64496
63943: LD_INT 2
63945: DOUBLE
63946: EQUAL
63947: IFTRUE 63957
63949: LD_INT 3
63951: DOUBLE
63952: EQUAL
63953: IFTRUE 63957
63955: GO 64013
63957: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63958: LD_ADDR_VAR 0 9
63962: PUSH
63963: LD_VAR 0 29
63967: PUSH
63968: LD_VAR 0 30
63972: PUSH
63973: LD_VAR 0 31
63977: PUSH
63978: LD_VAR 0 32
63982: PUSH
63983: LD_VAR 0 33
63987: PUSH
63988: LD_VAR 0 34
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 4
64005: PUSH
64006: LD_INT 1
64008: PLUS
64009: ARRAY
64010: ST_TO_ADDR
64011: GO 64496
64013: LD_INT 16
64015: DOUBLE
64016: EQUAL
64017: IFTRUE 64075
64019: LD_INT 17
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64075
64025: LD_INT 18
64027: DOUBLE
64028: EQUAL
64029: IFTRUE 64075
64031: LD_INT 19
64033: DOUBLE
64034: EQUAL
64035: IFTRUE 64075
64037: LD_INT 22
64039: DOUBLE
64040: EQUAL
64041: IFTRUE 64075
64043: LD_INT 20
64045: DOUBLE
64046: EQUAL
64047: IFTRUE 64075
64049: LD_INT 21
64051: DOUBLE
64052: EQUAL
64053: IFTRUE 64075
64055: LD_INT 23
64057: DOUBLE
64058: EQUAL
64059: IFTRUE 64075
64061: LD_INT 24
64063: DOUBLE
64064: EQUAL
64065: IFTRUE 64075
64067: LD_INT 25
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64075
64073: GO 64131
64075: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64076: LD_ADDR_VAR 0 9
64080: PUSH
64081: LD_VAR 0 35
64085: PUSH
64086: LD_VAR 0 36
64090: PUSH
64091: LD_VAR 0 37
64095: PUSH
64096: LD_VAR 0 38
64100: PUSH
64101: LD_VAR 0 39
64105: PUSH
64106: LD_VAR 0 40
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 4
64123: PUSH
64124: LD_INT 1
64126: PLUS
64127: ARRAY
64128: ST_TO_ADDR
64129: GO 64496
64131: LD_INT 6
64133: DOUBLE
64134: EQUAL
64135: IFTRUE 64187
64137: LD_INT 7
64139: DOUBLE
64140: EQUAL
64141: IFTRUE 64187
64143: LD_INT 8
64145: DOUBLE
64146: EQUAL
64147: IFTRUE 64187
64149: LD_INT 13
64151: DOUBLE
64152: EQUAL
64153: IFTRUE 64187
64155: LD_INT 12
64157: DOUBLE
64158: EQUAL
64159: IFTRUE 64187
64161: LD_INT 15
64163: DOUBLE
64164: EQUAL
64165: IFTRUE 64187
64167: LD_INT 11
64169: DOUBLE
64170: EQUAL
64171: IFTRUE 64187
64173: LD_INT 14
64175: DOUBLE
64176: EQUAL
64177: IFTRUE 64187
64179: LD_INT 10
64181: DOUBLE
64182: EQUAL
64183: IFTRUE 64187
64185: GO 64243
64187: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64188: LD_ADDR_VAR 0 9
64192: PUSH
64193: LD_VAR 0 41
64197: PUSH
64198: LD_VAR 0 42
64202: PUSH
64203: LD_VAR 0 43
64207: PUSH
64208: LD_VAR 0 44
64212: PUSH
64213: LD_VAR 0 45
64217: PUSH
64218: LD_VAR 0 46
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: PUSH
64231: LD_VAR 0 4
64235: PUSH
64236: LD_INT 1
64238: PLUS
64239: ARRAY
64240: ST_TO_ADDR
64241: GO 64496
64243: LD_INT 36
64245: DOUBLE
64246: EQUAL
64247: IFTRUE 64251
64249: GO 64307
64251: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64252: LD_ADDR_VAR 0 9
64256: PUSH
64257: LD_VAR 0 47
64261: PUSH
64262: LD_VAR 0 48
64266: PUSH
64267: LD_VAR 0 49
64271: PUSH
64272: LD_VAR 0 50
64276: PUSH
64277: LD_VAR 0 51
64281: PUSH
64282: LD_VAR 0 52
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_VAR 0 4
64299: PUSH
64300: LD_INT 1
64302: PLUS
64303: ARRAY
64304: ST_TO_ADDR
64305: GO 64496
64307: LD_INT 4
64309: DOUBLE
64310: EQUAL
64311: IFTRUE 64333
64313: LD_INT 5
64315: DOUBLE
64316: EQUAL
64317: IFTRUE 64333
64319: LD_INT 34
64321: DOUBLE
64322: EQUAL
64323: IFTRUE 64333
64325: LD_INT 37
64327: DOUBLE
64328: EQUAL
64329: IFTRUE 64333
64331: GO 64389
64333: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64334: LD_ADDR_VAR 0 9
64338: PUSH
64339: LD_VAR 0 53
64343: PUSH
64344: LD_VAR 0 54
64348: PUSH
64349: LD_VAR 0 55
64353: PUSH
64354: LD_VAR 0 56
64358: PUSH
64359: LD_VAR 0 57
64363: PUSH
64364: LD_VAR 0 58
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: PUSH
64377: LD_VAR 0 4
64381: PUSH
64382: LD_INT 1
64384: PLUS
64385: ARRAY
64386: ST_TO_ADDR
64387: GO 64496
64389: LD_INT 31
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64439
64395: LD_INT 32
64397: DOUBLE
64398: EQUAL
64399: IFTRUE 64439
64401: LD_INT 33
64403: DOUBLE
64404: EQUAL
64405: IFTRUE 64439
64407: LD_INT 27
64409: DOUBLE
64410: EQUAL
64411: IFTRUE 64439
64413: LD_INT 26
64415: DOUBLE
64416: EQUAL
64417: IFTRUE 64439
64419: LD_INT 28
64421: DOUBLE
64422: EQUAL
64423: IFTRUE 64439
64425: LD_INT 29
64427: DOUBLE
64428: EQUAL
64429: IFTRUE 64439
64431: LD_INT 30
64433: DOUBLE
64434: EQUAL
64435: IFTRUE 64439
64437: GO 64495
64439: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64440: LD_ADDR_VAR 0 9
64444: PUSH
64445: LD_VAR 0 59
64449: PUSH
64450: LD_VAR 0 60
64454: PUSH
64455: LD_VAR 0 61
64459: PUSH
64460: LD_VAR 0 62
64464: PUSH
64465: LD_VAR 0 63
64469: PUSH
64470: LD_VAR 0 64
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: LD_VAR 0 4
64487: PUSH
64488: LD_INT 1
64490: PLUS
64491: ARRAY
64492: ST_TO_ADDR
64493: GO 64496
64495: POP
// temp_list2 = [ ] ;
64496: LD_ADDR_VAR 0 10
64500: PUSH
64501: EMPTY
64502: ST_TO_ADDR
// for i in temp_list do
64503: LD_ADDR_VAR 0 8
64507: PUSH
64508: LD_VAR 0 9
64512: PUSH
64513: FOR_IN
64514: IFFALSE 64566
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64516: LD_ADDR_VAR 0 10
64520: PUSH
64521: LD_VAR 0 10
64525: PUSH
64526: LD_VAR 0 8
64530: PUSH
64531: LD_INT 1
64533: ARRAY
64534: PUSH
64535: LD_VAR 0 2
64539: PLUS
64540: PUSH
64541: LD_VAR 0 8
64545: PUSH
64546: LD_INT 2
64548: ARRAY
64549: PUSH
64550: LD_VAR 0 3
64554: PLUS
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: ADD
64563: ST_TO_ADDR
64564: GO 64513
64566: POP
64567: POP
// result = temp_list2 ;
64568: LD_ADDR_VAR 0 7
64572: PUSH
64573: LD_VAR 0 10
64577: ST_TO_ADDR
// end ;
64578: LD_VAR 0 7
64582: RET
// export function EnemyInRange ( unit , dist ) ; begin
64583: LD_INT 0
64585: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64586: LD_ADDR_VAR 0 3
64590: PUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 255
64600: PPUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 250
64610: PPUSH
64611: LD_VAR 0 1
64615: PPUSH
64616: CALL_OW 251
64620: PPUSH
64621: LD_VAR 0 2
64625: PPUSH
64626: CALL 37979 0 4
64630: PUSH
64631: LD_INT 4
64633: ARRAY
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 3
64639: RET
// export function PlayerSeeMe ( unit ) ; begin
64640: LD_INT 0
64642: PPUSH
// result := See ( your_side , unit ) ;
64643: LD_ADDR_VAR 0 2
64647: PUSH
64648: LD_OWVAR 2
64652: PPUSH
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL_OW 292
64662: ST_TO_ADDR
// end ;
64663: LD_VAR 0 2
64667: RET
// export function ReverseDir ( unit ) ; begin
64668: LD_INT 0
64670: PPUSH
// if not unit then
64671: LD_VAR 0 1
64675: NOT
64676: IFFALSE 64680
// exit ;
64678: GO 64703
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64680: LD_ADDR_VAR 0 2
64684: PUSH
64685: LD_VAR 0 1
64689: PPUSH
64690: CALL_OW 254
64694: PUSH
64695: LD_INT 3
64697: PLUS
64698: PUSH
64699: LD_INT 6
64701: MOD
64702: ST_TO_ADDR
// end ;
64703: LD_VAR 0 2
64707: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64708: LD_INT 0
64710: PPUSH
64711: PPUSH
64712: PPUSH
64713: PPUSH
64714: PPUSH
// if not hexes then
64715: LD_VAR 0 2
64719: NOT
64720: IFFALSE 64724
// exit ;
64722: GO 64872
// dist := 9999 ;
64724: LD_ADDR_VAR 0 5
64728: PUSH
64729: LD_INT 9999
64731: ST_TO_ADDR
// for i = 1 to hexes do
64732: LD_ADDR_VAR 0 4
64736: PUSH
64737: DOUBLE
64738: LD_INT 1
64740: DEC
64741: ST_TO_ADDR
64742: LD_VAR 0 2
64746: PUSH
64747: FOR_TO
64748: IFFALSE 64860
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64750: LD_VAR 0 1
64754: PPUSH
64755: LD_VAR 0 2
64759: PUSH
64760: LD_VAR 0 4
64764: ARRAY
64765: PUSH
64766: LD_INT 1
64768: ARRAY
64769: PPUSH
64770: LD_VAR 0 2
64774: PUSH
64775: LD_VAR 0 4
64779: ARRAY
64780: PUSH
64781: LD_INT 2
64783: ARRAY
64784: PPUSH
64785: CALL_OW 297
64789: PUSH
64790: LD_VAR 0 5
64794: LESS
64795: IFFALSE 64858
// begin hex := hexes [ i ] ;
64797: LD_ADDR_VAR 0 7
64801: PUSH
64802: LD_VAR 0 2
64806: PUSH
64807: LD_VAR 0 4
64811: ARRAY
64812: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64813: LD_ADDR_VAR 0 5
64817: PUSH
64818: LD_VAR 0 1
64822: PPUSH
64823: LD_VAR 0 2
64827: PUSH
64828: LD_VAR 0 4
64832: ARRAY
64833: PUSH
64834: LD_INT 1
64836: ARRAY
64837: PPUSH
64838: LD_VAR 0 2
64842: PUSH
64843: LD_VAR 0 4
64847: ARRAY
64848: PUSH
64849: LD_INT 2
64851: ARRAY
64852: PPUSH
64853: CALL_OW 297
64857: ST_TO_ADDR
// end ; end ;
64858: GO 64747
64860: POP
64861: POP
// result := hex ;
64862: LD_ADDR_VAR 0 3
64866: PUSH
64867: LD_VAR 0 7
64871: ST_TO_ADDR
// end ;
64872: LD_VAR 0 3
64876: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64881: LD_VAR 0 1
64885: NOT
64886: PUSH
64887: LD_VAR 0 1
64891: PUSH
64892: LD_INT 21
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 23
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PPUSH
64916: CALL_OW 69
64920: IN
64921: NOT
64922: OR
64923: IFFALSE 64927
// exit ;
64925: GO 64974
// for i = 1 to 3 do
64927: LD_ADDR_VAR 0 3
64931: PUSH
64932: DOUBLE
64933: LD_INT 1
64935: DEC
64936: ST_TO_ADDR
64937: LD_INT 3
64939: PUSH
64940: FOR_TO
64941: IFFALSE 64972
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64943: LD_VAR 0 1
64947: PPUSH
64948: CALL_OW 250
64952: PPUSH
64953: LD_VAR 0 1
64957: PPUSH
64958: CALL_OW 251
64962: PPUSH
64963: LD_INT 1
64965: PPUSH
64966: CALL_OW 453
64970: GO 64940
64972: POP
64973: POP
// end ;
64974: LD_VAR 0 2
64978: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64979: LD_INT 0
64981: PPUSH
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
64986: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64987: LD_VAR 0 1
64991: NOT
64992: PUSH
64993: LD_VAR 0 2
64997: NOT
64998: OR
64999: PUSH
65000: LD_VAR 0 1
65004: PPUSH
65005: CALL_OW 314
65009: OR
65010: IFFALSE 65014
// exit ;
65012: GO 65455
// x := GetX ( enemy_unit ) ;
65014: LD_ADDR_VAR 0 7
65018: PUSH
65019: LD_VAR 0 2
65023: PPUSH
65024: CALL_OW 250
65028: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65029: LD_ADDR_VAR 0 8
65033: PUSH
65034: LD_VAR 0 2
65038: PPUSH
65039: CALL_OW 251
65043: ST_TO_ADDR
// if not x or not y then
65044: LD_VAR 0 7
65048: NOT
65049: PUSH
65050: LD_VAR 0 8
65054: NOT
65055: OR
65056: IFFALSE 65060
// exit ;
65058: GO 65455
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65060: LD_ADDR_VAR 0 6
65064: PUSH
65065: LD_VAR 0 7
65069: PPUSH
65070: LD_INT 0
65072: PPUSH
65073: LD_INT 4
65075: PPUSH
65076: CALL_OW 272
65080: PUSH
65081: LD_VAR 0 8
65085: PPUSH
65086: LD_INT 0
65088: PPUSH
65089: LD_INT 4
65091: PPUSH
65092: CALL_OW 273
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_VAR 0 7
65105: PPUSH
65106: LD_INT 1
65108: PPUSH
65109: LD_INT 4
65111: PPUSH
65112: CALL_OW 272
65116: PUSH
65117: LD_VAR 0 8
65121: PPUSH
65122: LD_INT 1
65124: PPUSH
65125: LD_INT 4
65127: PPUSH
65128: CALL_OW 273
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_VAR 0 7
65141: PPUSH
65142: LD_INT 2
65144: PPUSH
65145: LD_INT 4
65147: PPUSH
65148: CALL_OW 272
65152: PUSH
65153: LD_VAR 0 8
65157: PPUSH
65158: LD_INT 2
65160: PPUSH
65161: LD_INT 4
65163: PPUSH
65164: CALL_OW 273
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_VAR 0 7
65177: PPUSH
65178: LD_INT 3
65180: PPUSH
65181: LD_INT 4
65183: PPUSH
65184: CALL_OW 272
65188: PUSH
65189: LD_VAR 0 8
65193: PPUSH
65194: LD_INT 3
65196: PPUSH
65197: LD_INT 4
65199: PPUSH
65200: CALL_OW 273
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_VAR 0 7
65213: PPUSH
65214: LD_INT 4
65216: PPUSH
65217: LD_INT 4
65219: PPUSH
65220: CALL_OW 272
65224: PUSH
65225: LD_VAR 0 8
65229: PPUSH
65230: LD_INT 4
65232: PPUSH
65233: LD_INT 4
65235: PPUSH
65236: CALL_OW 273
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 7
65249: PPUSH
65250: LD_INT 5
65252: PPUSH
65253: LD_INT 4
65255: PPUSH
65256: CALL_OW 272
65260: PUSH
65261: LD_VAR 0 8
65265: PPUSH
65266: LD_INT 5
65268: PPUSH
65269: LD_INT 4
65271: PPUSH
65272: CALL_OW 273
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: ST_TO_ADDR
// for i = tmp downto 1 do
65289: LD_ADDR_VAR 0 4
65293: PUSH
65294: DOUBLE
65295: LD_VAR 0 6
65299: INC
65300: ST_TO_ADDR
65301: LD_INT 1
65303: PUSH
65304: FOR_DOWNTO
65305: IFFALSE 65406
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65307: LD_VAR 0 6
65311: PUSH
65312: LD_VAR 0 4
65316: ARRAY
65317: PUSH
65318: LD_INT 1
65320: ARRAY
65321: PPUSH
65322: LD_VAR 0 6
65326: PUSH
65327: LD_VAR 0 4
65331: ARRAY
65332: PUSH
65333: LD_INT 2
65335: ARRAY
65336: PPUSH
65337: CALL_OW 488
65341: NOT
65342: PUSH
65343: LD_VAR 0 6
65347: PUSH
65348: LD_VAR 0 4
65352: ARRAY
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PPUSH
65358: LD_VAR 0 6
65362: PUSH
65363: LD_VAR 0 4
65367: ARRAY
65368: PUSH
65369: LD_INT 2
65371: ARRAY
65372: PPUSH
65373: CALL_OW 428
65377: PUSH
65378: LD_INT 0
65380: NONEQUAL
65381: OR
65382: IFFALSE 65404
// tmp := Delete ( tmp , i ) ;
65384: LD_ADDR_VAR 0 6
65388: PUSH
65389: LD_VAR 0 6
65393: PPUSH
65394: LD_VAR 0 4
65398: PPUSH
65399: CALL_OW 3
65403: ST_TO_ADDR
65404: GO 65304
65406: POP
65407: POP
// j := GetClosestHex ( unit , tmp ) ;
65408: LD_ADDR_VAR 0 5
65412: PUSH
65413: LD_VAR 0 1
65417: PPUSH
65418: LD_VAR 0 6
65422: PPUSH
65423: CALL 64708 0 2
65427: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65428: LD_VAR 0 1
65432: PPUSH
65433: LD_VAR 0 5
65437: PUSH
65438: LD_INT 1
65440: ARRAY
65441: PPUSH
65442: LD_VAR 0 5
65446: PUSH
65447: LD_INT 2
65449: ARRAY
65450: PPUSH
65451: CALL_OW 111
// end ;
65455: LD_VAR 0 3
65459: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65460: LD_INT 0
65462: PPUSH
65463: PPUSH
65464: PPUSH
// uc_side = 0 ;
65465: LD_ADDR_OWVAR 20
65469: PUSH
65470: LD_INT 0
65472: ST_TO_ADDR
// uc_nation = 0 ;
65473: LD_ADDR_OWVAR 21
65477: PUSH
65478: LD_INT 0
65480: ST_TO_ADDR
// InitHc_All ( ) ;
65481: CALL_OW 584
// InitVc ;
65485: CALL_OW 20
// if mastodonts then
65489: LD_VAR 0 6
65493: IFFALSE 65560
// for i = 1 to mastodonts do
65495: LD_ADDR_VAR 0 11
65499: PUSH
65500: DOUBLE
65501: LD_INT 1
65503: DEC
65504: ST_TO_ADDR
65505: LD_VAR 0 6
65509: PUSH
65510: FOR_TO
65511: IFFALSE 65558
// begin vc_chassis := 31 ;
65513: LD_ADDR_OWVAR 37
65517: PUSH
65518: LD_INT 31
65520: ST_TO_ADDR
// vc_control := control_rider ;
65521: LD_ADDR_OWVAR 38
65525: PUSH
65526: LD_INT 4
65528: ST_TO_ADDR
// animal := CreateVehicle ;
65529: LD_ADDR_VAR 0 12
65533: PUSH
65534: CALL_OW 45
65538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65539: LD_VAR 0 12
65543: PPUSH
65544: LD_VAR 0 8
65548: PPUSH
65549: LD_INT 0
65551: PPUSH
65552: CALL 67695 0 3
// end ;
65556: GO 65510
65558: POP
65559: POP
// if horses then
65560: LD_VAR 0 5
65564: IFFALSE 65631
// for i = 1 to horses do
65566: LD_ADDR_VAR 0 11
65570: PUSH
65571: DOUBLE
65572: LD_INT 1
65574: DEC
65575: ST_TO_ADDR
65576: LD_VAR 0 5
65580: PUSH
65581: FOR_TO
65582: IFFALSE 65629
// begin hc_class := 21 ;
65584: LD_ADDR_OWVAR 28
65588: PUSH
65589: LD_INT 21
65591: ST_TO_ADDR
// hc_gallery :=  ;
65592: LD_ADDR_OWVAR 33
65596: PUSH
65597: LD_STRING 
65599: ST_TO_ADDR
// animal := CreateHuman ;
65600: LD_ADDR_VAR 0 12
65604: PUSH
65605: CALL_OW 44
65609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65610: LD_VAR 0 12
65614: PPUSH
65615: LD_VAR 0 8
65619: PPUSH
65620: LD_INT 0
65622: PPUSH
65623: CALL 67695 0 3
// end ;
65627: GO 65581
65629: POP
65630: POP
// if birds then
65631: LD_VAR 0 1
65635: IFFALSE 65702
// for i = 1 to birds do
65637: LD_ADDR_VAR 0 11
65641: PUSH
65642: DOUBLE
65643: LD_INT 1
65645: DEC
65646: ST_TO_ADDR
65647: LD_VAR 0 1
65651: PUSH
65652: FOR_TO
65653: IFFALSE 65700
// begin hc_class = 18 ;
65655: LD_ADDR_OWVAR 28
65659: PUSH
65660: LD_INT 18
65662: ST_TO_ADDR
// hc_gallery =  ;
65663: LD_ADDR_OWVAR 33
65667: PUSH
65668: LD_STRING 
65670: ST_TO_ADDR
// animal := CreateHuman ;
65671: LD_ADDR_VAR 0 12
65675: PUSH
65676: CALL_OW 44
65680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65681: LD_VAR 0 12
65685: PPUSH
65686: LD_VAR 0 8
65690: PPUSH
65691: LD_INT 0
65693: PPUSH
65694: CALL 67695 0 3
// end ;
65698: GO 65652
65700: POP
65701: POP
// if tigers then
65702: LD_VAR 0 2
65706: IFFALSE 65790
// for i = 1 to tigers do
65708: LD_ADDR_VAR 0 11
65712: PUSH
65713: DOUBLE
65714: LD_INT 1
65716: DEC
65717: ST_TO_ADDR
65718: LD_VAR 0 2
65722: PUSH
65723: FOR_TO
65724: IFFALSE 65788
// begin hc_class = class_tiger ;
65726: LD_ADDR_OWVAR 28
65730: PUSH
65731: LD_INT 14
65733: ST_TO_ADDR
// hc_gallery =  ;
65734: LD_ADDR_OWVAR 33
65738: PUSH
65739: LD_STRING 
65741: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65742: LD_ADDR_OWVAR 35
65746: PUSH
65747: LD_INT 7
65749: NEG
65750: PPUSH
65751: LD_INT 7
65753: PPUSH
65754: CALL_OW 12
65758: ST_TO_ADDR
// animal := CreateHuman ;
65759: LD_ADDR_VAR 0 12
65763: PUSH
65764: CALL_OW 44
65768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65769: LD_VAR 0 12
65773: PPUSH
65774: LD_VAR 0 8
65778: PPUSH
65779: LD_INT 0
65781: PPUSH
65782: CALL 67695 0 3
// end ;
65786: GO 65723
65788: POP
65789: POP
// if apemans then
65790: LD_VAR 0 3
65794: IFFALSE 65917
// for i = 1 to apemans do
65796: LD_ADDR_VAR 0 11
65800: PUSH
65801: DOUBLE
65802: LD_INT 1
65804: DEC
65805: ST_TO_ADDR
65806: LD_VAR 0 3
65810: PUSH
65811: FOR_TO
65812: IFFALSE 65915
// begin hc_class = class_apeman ;
65814: LD_ADDR_OWVAR 28
65818: PUSH
65819: LD_INT 12
65821: ST_TO_ADDR
// hc_gallery =  ;
65822: LD_ADDR_OWVAR 33
65826: PUSH
65827: LD_STRING 
65829: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65830: LD_ADDR_OWVAR 35
65834: PUSH
65835: LD_INT 2
65837: NEG
65838: PPUSH
65839: LD_INT 2
65841: PPUSH
65842: CALL_OW 12
65846: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65847: LD_ADDR_OWVAR 31
65851: PUSH
65852: LD_INT 1
65854: PPUSH
65855: LD_INT 3
65857: PPUSH
65858: CALL_OW 12
65862: PUSH
65863: LD_INT 1
65865: PPUSH
65866: LD_INT 3
65868: PPUSH
65869: CALL_OW 12
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: ST_TO_ADDR
// animal := CreateHuman ;
65886: LD_ADDR_VAR 0 12
65890: PUSH
65891: CALL_OW 44
65895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65896: LD_VAR 0 12
65900: PPUSH
65901: LD_VAR 0 8
65905: PPUSH
65906: LD_INT 0
65908: PPUSH
65909: CALL 67695 0 3
// end ;
65913: GO 65811
65915: POP
65916: POP
// if enchidnas then
65917: LD_VAR 0 4
65921: IFFALSE 65988
// for i = 1 to enchidnas do
65923: LD_ADDR_VAR 0 11
65927: PUSH
65928: DOUBLE
65929: LD_INT 1
65931: DEC
65932: ST_TO_ADDR
65933: LD_VAR 0 4
65937: PUSH
65938: FOR_TO
65939: IFFALSE 65986
// begin hc_class = 13 ;
65941: LD_ADDR_OWVAR 28
65945: PUSH
65946: LD_INT 13
65948: ST_TO_ADDR
// hc_gallery =  ;
65949: LD_ADDR_OWVAR 33
65953: PUSH
65954: LD_STRING 
65956: ST_TO_ADDR
// animal := CreateHuman ;
65957: LD_ADDR_VAR 0 12
65961: PUSH
65962: CALL_OW 44
65966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65967: LD_VAR 0 12
65971: PPUSH
65972: LD_VAR 0 8
65976: PPUSH
65977: LD_INT 0
65979: PPUSH
65980: CALL 67695 0 3
// end ;
65984: GO 65938
65986: POP
65987: POP
// if fishes then
65988: LD_VAR 0 7
65992: IFFALSE 66059
// for i = 1 to fishes do
65994: LD_ADDR_VAR 0 11
65998: PUSH
65999: DOUBLE
66000: LD_INT 1
66002: DEC
66003: ST_TO_ADDR
66004: LD_VAR 0 7
66008: PUSH
66009: FOR_TO
66010: IFFALSE 66057
// begin hc_class = 20 ;
66012: LD_ADDR_OWVAR 28
66016: PUSH
66017: LD_INT 20
66019: ST_TO_ADDR
// hc_gallery =  ;
66020: LD_ADDR_OWVAR 33
66024: PUSH
66025: LD_STRING 
66027: ST_TO_ADDR
// animal := CreateHuman ;
66028: LD_ADDR_VAR 0 12
66032: PUSH
66033: CALL_OW 44
66037: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66038: LD_VAR 0 12
66042: PPUSH
66043: LD_VAR 0 9
66047: PPUSH
66048: LD_INT 0
66050: PPUSH
66051: CALL 67695 0 3
// end ;
66055: GO 66009
66057: POP
66058: POP
// end ;
66059: LD_VAR 0 10
66063: RET
// export function WantHeal ( sci , unit ) ; begin
66064: LD_INT 0
66066: PPUSH
// if GetTaskList ( sci ) > 0 then
66067: LD_VAR 0 1
66071: PPUSH
66072: CALL_OW 437
66076: PUSH
66077: LD_INT 0
66079: GREATER
66080: IFFALSE 66150
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66082: LD_VAR 0 1
66086: PPUSH
66087: CALL_OW 437
66091: PUSH
66092: LD_INT 1
66094: ARRAY
66095: PUSH
66096: LD_INT 1
66098: ARRAY
66099: PUSH
66100: LD_STRING l
66102: EQUAL
66103: PUSH
66104: LD_VAR 0 1
66108: PPUSH
66109: CALL_OW 437
66113: PUSH
66114: LD_INT 1
66116: ARRAY
66117: PUSH
66118: LD_INT 4
66120: ARRAY
66121: PUSH
66122: LD_VAR 0 2
66126: EQUAL
66127: AND
66128: IFFALSE 66140
// result := true else
66130: LD_ADDR_VAR 0 3
66134: PUSH
66135: LD_INT 1
66137: ST_TO_ADDR
66138: GO 66148
// result := false ;
66140: LD_ADDR_VAR 0 3
66144: PUSH
66145: LD_INT 0
66147: ST_TO_ADDR
// end else
66148: GO 66158
// result := false ;
66150: LD_ADDR_VAR 0 3
66154: PUSH
66155: LD_INT 0
66157: ST_TO_ADDR
// end ;
66158: LD_VAR 0 3
66162: RET
// export function HealTarget ( sci ) ; begin
66163: LD_INT 0
66165: PPUSH
// if not sci then
66166: LD_VAR 0 1
66170: NOT
66171: IFFALSE 66175
// exit ;
66173: GO 66240
// result := 0 ;
66175: LD_ADDR_VAR 0 2
66179: PUSH
66180: LD_INT 0
66182: ST_TO_ADDR
// if GetTaskList ( sci ) then
66183: LD_VAR 0 1
66187: PPUSH
66188: CALL_OW 437
66192: IFFALSE 66240
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66194: LD_VAR 0 1
66198: PPUSH
66199: CALL_OW 437
66203: PUSH
66204: LD_INT 1
66206: ARRAY
66207: PUSH
66208: LD_INT 1
66210: ARRAY
66211: PUSH
66212: LD_STRING l
66214: EQUAL
66215: IFFALSE 66240
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66217: LD_ADDR_VAR 0 2
66221: PUSH
66222: LD_VAR 0 1
66226: PPUSH
66227: CALL_OW 437
66231: PUSH
66232: LD_INT 1
66234: ARRAY
66235: PUSH
66236: LD_INT 4
66238: ARRAY
66239: ST_TO_ADDR
// end ;
66240: LD_VAR 0 2
66244: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66245: LD_INT 0
66247: PPUSH
66248: PPUSH
66249: PPUSH
66250: PPUSH
// if not base_units then
66251: LD_VAR 0 1
66255: NOT
66256: IFFALSE 66260
// exit ;
66258: GO 66347
// result := false ;
66260: LD_ADDR_VAR 0 2
66264: PUSH
66265: LD_INT 0
66267: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66268: LD_ADDR_VAR 0 5
66272: PUSH
66273: LD_VAR 0 1
66277: PPUSH
66278: LD_INT 21
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PPUSH
66288: CALL_OW 72
66292: ST_TO_ADDR
// if not tmp then
66293: LD_VAR 0 5
66297: NOT
66298: IFFALSE 66302
// exit ;
66300: GO 66347
// for i in tmp do
66302: LD_ADDR_VAR 0 3
66306: PUSH
66307: LD_VAR 0 5
66311: PUSH
66312: FOR_IN
66313: IFFALSE 66345
// begin result := EnemyInRange ( i , 22 ) ;
66315: LD_ADDR_VAR 0 2
66319: PUSH
66320: LD_VAR 0 3
66324: PPUSH
66325: LD_INT 22
66327: PPUSH
66328: CALL 64583 0 2
66332: ST_TO_ADDR
// if result then
66333: LD_VAR 0 2
66337: IFFALSE 66343
// exit ;
66339: POP
66340: POP
66341: GO 66347
// end ;
66343: GO 66312
66345: POP
66346: POP
// end ;
66347: LD_VAR 0 2
66351: RET
// export function FilterByTag ( units , tag ) ; begin
66352: LD_INT 0
66354: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66355: LD_ADDR_VAR 0 3
66359: PUSH
66360: LD_VAR 0 1
66364: PPUSH
66365: LD_INT 120
66367: PUSH
66368: LD_VAR 0 2
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PPUSH
66377: CALL_OW 72
66381: ST_TO_ADDR
// end ;
66382: LD_VAR 0 3
66386: RET
// export function IsDriver ( un ) ; begin
66387: LD_INT 0
66389: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66390: LD_ADDR_VAR 0 2
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 55
66402: PUSH
66403: EMPTY
66404: LIST
66405: PPUSH
66406: CALL_OW 69
66410: IN
66411: ST_TO_ADDR
// end ;
66412: LD_VAR 0 2
66416: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66417: LD_INT 0
66419: PPUSH
66420: PPUSH
// list := [ ] ;
66421: LD_ADDR_VAR 0 5
66425: PUSH
66426: EMPTY
66427: ST_TO_ADDR
// case d of 0 :
66428: LD_VAR 0 3
66432: PUSH
66433: LD_INT 0
66435: DOUBLE
66436: EQUAL
66437: IFTRUE 66441
66439: GO 66574
66441: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66442: LD_ADDR_VAR 0 5
66446: PUSH
66447: LD_VAR 0 1
66451: PUSH
66452: LD_INT 4
66454: MINUS
66455: PUSH
66456: LD_VAR 0 2
66460: PUSH
66461: LD_INT 4
66463: MINUS
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: PUSH
66473: LD_VAR 0 1
66477: PUSH
66478: LD_INT 3
66480: MINUS
66481: PUSH
66482: LD_VAR 0 2
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: PUSH
66495: LD_VAR 0 1
66499: PUSH
66500: LD_INT 4
66502: PLUS
66503: PUSH
66504: LD_VAR 0 2
66508: PUSH
66509: LD_INT 4
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: LD_VAR 0 1
66521: PUSH
66522: LD_INT 3
66524: PLUS
66525: PUSH
66526: LD_VAR 0 2
66530: PUSH
66531: LD_INT 3
66533: PLUS
66534: PUSH
66535: LD_INT 5
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: PUSH
66543: LD_VAR 0 1
66547: PUSH
66548: LD_VAR 0 2
66552: PUSH
66553: LD_INT 4
66555: PLUS
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: LIST
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// end ; 1 :
66572: GO 67272
66574: LD_INT 1
66576: DOUBLE
66577: EQUAL
66578: IFTRUE 66582
66580: GO 66715
66582: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66583: LD_ADDR_VAR 0 5
66587: PUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_VAR 0 2
66597: PUSH
66598: LD_INT 4
66600: MINUS
66601: PUSH
66602: LD_INT 3
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: PUSH
66610: LD_VAR 0 1
66614: PUSH
66615: LD_INT 3
66617: MINUS
66618: PUSH
66619: LD_VAR 0 2
66623: PUSH
66624: LD_INT 3
66626: MINUS
66627: PUSH
66628: LD_INT 2
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: PUSH
66636: LD_VAR 0 1
66640: PUSH
66641: LD_INT 4
66643: MINUS
66644: PUSH
66645: LD_VAR 0 2
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: PUSH
66658: LD_VAR 0 1
66662: PUSH
66663: LD_VAR 0 2
66667: PUSH
66668: LD_INT 3
66670: PLUS
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: PUSH
66680: LD_VAR 0 1
66684: PUSH
66685: LD_INT 4
66687: PLUS
66688: PUSH
66689: LD_VAR 0 2
66693: PUSH
66694: LD_INT 4
66696: PLUS
66697: PUSH
66698: LD_INT 5
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: ST_TO_ADDR
// end ; 2 :
66713: GO 67272
66715: LD_INT 2
66717: DOUBLE
66718: EQUAL
66719: IFTRUE 66723
66721: GO 66852
66723: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66724: LD_ADDR_VAR 0 5
66728: PUSH
66729: LD_VAR 0 1
66733: PUSH
66734: LD_VAR 0 2
66738: PUSH
66739: LD_INT 3
66741: MINUS
66742: PUSH
66743: LD_INT 3
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: LD_VAR 0 1
66755: PUSH
66756: LD_INT 4
66758: PLUS
66759: PUSH
66760: LD_VAR 0 2
66764: PUSH
66765: LD_INT 4
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: LIST
66772: PUSH
66773: LD_VAR 0 1
66777: PUSH
66778: LD_VAR 0 2
66782: PUSH
66783: LD_INT 4
66785: PLUS
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: PUSH
66795: LD_VAR 0 1
66799: PUSH
66800: LD_INT 3
66802: MINUS
66803: PUSH
66804: LD_VAR 0 2
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: PUSH
66817: LD_VAR 0 1
66821: PUSH
66822: LD_INT 4
66824: MINUS
66825: PUSH
66826: LD_VAR 0 2
66830: PUSH
66831: LD_INT 4
66833: MINUS
66834: PUSH
66835: LD_INT 2
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: ST_TO_ADDR
// end ; 3 :
66850: GO 67272
66852: LD_INT 3
66854: DOUBLE
66855: EQUAL
66856: IFTRUE 66860
66858: GO 66993
66860: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66861: LD_ADDR_VAR 0 5
66865: PUSH
66866: LD_VAR 0 1
66870: PUSH
66871: LD_INT 3
66873: PLUS
66874: PUSH
66875: LD_VAR 0 2
66879: PUSH
66880: LD_INT 4
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: PUSH
66888: LD_VAR 0 1
66892: PUSH
66893: LD_INT 4
66895: PLUS
66896: PUSH
66897: LD_VAR 0 2
66901: PUSH
66902: LD_INT 4
66904: PLUS
66905: PUSH
66906: LD_INT 5
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: PUSH
66914: LD_VAR 0 1
66918: PUSH
66919: LD_INT 4
66921: MINUS
66922: PUSH
66923: LD_VAR 0 2
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: LIST
66935: PUSH
66936: LD_VAR 0 1
66940: PUSH
66941: LD_VAR 0 2
66945: PUSH
66946: LD_INT 4
66948: MINUS
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: PUSH
66958: LD_VAR 0 1
66962: PUSH
66963: LD_INT 3
66965: MINUS
66966: PUSH
66967: LD_VAR 0 2
66971: PUSH
66972: LD_INT 3
66974: MINUS
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: ST_TO_ADDR
// end ; 4 :
66991: GO 67272
66993: LD_INT 4
66995: DOUBLE
66996: EQUAL
66997: IFTRUE 67001
66999: GO 67134
67001: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67002: LD_ADDR_VAR 0 5
67006: PUSH
67007: LD_VAR 0 1
67011: PUSH
67012: LD_VAR 0 2
67016: PUSH
67017: LD_INT 4
67019: PLUS
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: PUSH
67029: LD_VAR 0 1
67033: PUSH
67034: LD_INT 3
67036: PLUS
67037: PUSH
67038: LD_VAR 0 2
67042: PUSH
67043: LD_INT 3
67045: PLUS
67046: PUSH
67047: LD_INT 5
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: PUSH
67055: LD_VAR 0 1
67059: PUSH
67060: LD_INT 4
67062: PLUS
67063: PUSH
67064: LD_VAR 0 2
67068: PUSH
67069: LD_INT 4
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: PUSH
67077: LD_VAR 0 1
67081: PUSH
67082: LD_VAR 0 2
67086: PUSH
67087: LD_INT 3
67089: MINUS
67090: PUSH
67091: LD_INT 3
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: LIST
67098: PUSH
67099: LD_VAR 0 1
67103: PUSH
67104: LD_INT 4
67106: MINUS
67107: PUSH
67108: LD_VAR 0 2
67112: PUSH
67113: LD_INT 4
67115: MINUS
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: ST_TO_ADDR
// end ; 5 :
67132: GO 67272
67134: LD_INT 5
67136: DOUBLE
67137: EQUAL
67138: IFTRUE 67142
67140: GO 67271
67142: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67143: LD_ADDR_VAR 0 5
67147: PUSH
67148: LD_VAR 0 1
67152: PUSH
67153: LD_INT 4
67155: MINUS
67156: PUSH
67157: LD_VAR 0 2
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: PUSH
67170: LD_VAR 0 1
67174: PUSH
67175: LD_VAR 0 2
67179: PUSH
67180: LD_INT 4
67182: MINUS
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: PUSH
67192: LD_VAR 0 1
67196: PUSH
67197: LD_INT 4
67199: PLUS
67200: PUSH
67201: LD_VAR 0 2
67205: PUSH
67206: LD_INT 4
67208: PLUS
67209: PUSH
67210: LD_INT 5
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: LIST
67217: PUSH
67218: LD_VAR 0 1
67222: PUSH
67223: LD_INT 3
67225: PLUS
67226: PUSH
67227: LD_VAR 0 2
67231: PUSH
67232: LD_INT 4
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: PUSH
67240: LD_VAR 0 1
67244: PUSH
67245: LD_VAR 0 2
67249: PUSH
67250: LD_INT 3
67252: PLUS
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: LIST
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: ST_TO_ADDR
// end ; end ;
67269: GO 67272
67271: POP
// result := list ;
67272: LD_ADDR_VAR 0 4
67276: PUSH
67277: LD_VAR 0 5
67281: ST_TO_ADDR
// end ;
67282: LD_VAR 0 4
67286: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67287: LD_INT 0
67289: PPUSH
67290: PPUSH
67291: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67292: LD_VAR 0 1
67296: NOT
67297: PUSH
67298: LD_VAR 0 2
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: LD_INT 4
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: IN
67321: NOT
67322: OR
67323: IFFALSE 67327
// exit ;
67325: GO 67419
// tmp := [ ] ;
67327: LD_ADDR_VAR 0 5
67331: PUSH
67332: EMPTY
67333: ST_TO_ADDR
// for i in units do
67334: LD_ADDR_VAR 0 4
67338: PUSH
67339: LD_VAR 0 1
67343: PUSH
67344: FOR_IN
67345: IFFALSE 67388
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67347: LD_ADDR_VAR 0 5
67351: PUSH
67352: LD_VAR 0 5
67356: PPUSH
67357: LD_VAR 0 5
67361: PUSH
67362: LD_INT 1
67364: PLUS
67365: PPUSH
67366: LD_VAR 0 4
67370: PPUSH
67371: LD_VAR 0 2
67375: PPUSH
67376: CALL_OW 259
67380: PPUSH
67381: CALL_OW 2
67385: ST_TO_ADDR
67386: GO 67344
67388: POP
67389: POP
// if not tmp then
67390: LD_VAR 0 5
67394: NOT
67395: IFFALSE 67399
// exit ;
67397: GO 67419
// result := SortListByListDesc ( units , tmp ) ;
67399: LD_ADDR_VAR 0 3
67403: PUSH
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_VAR 0 5
67413: PPUSH
67414: CALL_OW 77
67418: ST_TO_ADDR
// end ;
67419: LD_VAR 0 3
67423: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67424: LD_INT 0
67426: PPUSH
67427: PPUSH
67428: PPUSH
// result := false ;
67429: LD_ADDR_VAR 0 3
67433: PUSH
67434: LD_INT 0
67436: ST_TO_ADDR
// x := GetX ( building ) ;
67437: LD_ADDR_VAR 0 4
67441: PUSH
67442: LD_VAR 0 2
67446: PPUSH
67447: CALL_OW 250
67451: ST_TO_ADDR
// y := GetY ( building ) ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 2
67461: PPUSH
67462: CALL_OW 251
67466: ST_TO_ADDR
// if not building or not x or not y then
67467: LD_VAR 0 2
67471: NOT
67472: PUSH
67473: LD_VAR 0 4
67477: NOT
67478: OR
67479: PUSH
67480: LD_VAR 0 5
67484: NOT
67485: OR
67486: IFFALSE 67490
// exit ;
67488: GO 67582
// if GetTaskList ( unit ) then
67490: LD_VAR 0 1
67494: PPUSH
67495: CALL_OW 437
67499: IFFALSE 67582
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67501: LD_STRING e
67503: PUSH
67504: LD_VAR 0 1
67508: PPUSH
67509: CALL_OW 437
67513: PUSH
67514: LD_INT 1
67516: ARRAY
67517: PUSH
67518: LD_INT 1
67520: ARRAY
67521: EQUAL
67522: PUSH
67523: LD_VAR 0 4
67527: PUSH
67528: LD_VAR 0 1
67532: PPUSH
67533: CALL_OW 437
67537: PUSH
67538: LD_INT 1
67540: ARRAY
67541: PUSH
67542: LD_INT 2
67544: ARRAY
67545: EQUAL
67546: AND
67547: PUSH
67548: LD_VAR 0 5
67552: PUSH
67553: LD_VAR 0 1
67557: PPUSH
67558: CALL_OW 437
67562: PUSH
67563: LD_INT 1
67565: ARRAY
67566: PUSH
67567: LD_INT 3
67569: ARRAY
67570: EQUAL
67571: AND
67572: IFFALSE 67582
// result := true end ;
67574: LD_ADDR_VAR 0 3
67578: PUSH
67579: LD_INT 1
67581: ST_TO_ADDR
// end ;
67582: LD_VAR 0 3
67586: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67587: LD_INT 0
67589: PPUSH
// result := false ;
67590: LD_ADDR_VAR 0 4
67594: PUSH
67595: LD_INT 0
67597: ST_TO_ADDR
// if GetTaskList ( unit ) then
67598: LD_VAR 0 1
67602: PPUSH
67603: CALL_OW 437
67607: IFFALSE 67690
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67609: LD_STRING M
67611: PUSH
67612: LD_VAR 0 1
67616: PPUSH
67617: CALL_OW 437
67621: PUSH
67622: LD_INT 1
67624: ARRAY
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: EQUAL
67630: PUSH
67631: LD_VAR 0 2
67635: PUSH
67636: LD_VAR 0 1
67640: PPUSH
67641: CALL_OW 437
67645: PUSH
67646: LD_INT 1
67648: ARRAY
67649: PUSH
67650: LD_INT 2
67652: ARRAY
67653: EQUAL
67654: AND
67655: PUSH
67656: LD_VAR 0 3
67660: PUSH
67661: LD_VAR 0 1
67665: PPUSH
67666: CALL_OW 437
67670: PUSH
67671: LD_INT 1
67673: ARRAY
67674: PUSH
67675: LD_INT 3
67677: ARRAY
67678: EQUAL
67679: AND
67680: IFFALSE 67690
// result := true ;
67682: LD_ADDR_VAR 0 4
67686: PUSH
67687: LD_INT 1
67689: ST_TO_ADDR
// end ; end ;
67690: LD_VAR 0 4
67694: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67695: LD_INT 0
67697: PPUSH
67698: PPUSH
67699: PPUSH
67700: PPUSH
// if not unit or not area then
67701: LD_VAR 0 1
67705: NOT
67706: PUSH
67707: LD_VAR 0 2
67711: NOT
67712: OR
67713: IFFALSE 67717
// exit ;
67715: GO 67881
// tmp := AreaToList ( area , i ) ;
67717: LD_ADDR_VAR 0 6
67721: PUSH
67722: LD_VAR 0 2
67726: PPUSH
67727: LD_VAR 0 5
67731: PPUSH
67732: CALL_OW 517
67736: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67737: LD_ADDR_VAR 0 5
67741: PUSH
67742: DOUBLE
67743: LD_INT 1
67745: DEC
67746: ST_TO_ADDR
67747: LD_VAR 0 6
67751: PUSH
67752: LD_INT 1
67754: ARRAY
67755: PUSH
67756: FOR_TO
67757: IFFALSE 67879
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67759: LD_ADDR_VAR 0 7
67763: PUSH
67764: LD_VAR 0 6
67768: PUSH
67769: LD_INT 1
67771: ARRAY
67772: PUSH
67773: LD_VAR 0 5
67777: ARRAY
67778: PUSH
67779: LD_VAR 0 6
67783: PUSH
67784: LD_INT 2
67786: ARRAY
67787: PUSH
67788: LD_VAR 0 5
67792: ARRAY
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67798: LD_VAR 0 7
67802: PUSH
67803: LD_INT 1
67805: ARRAY
67806: PPUSH
67807: LD_VAR 0 7
67811: PUSH
67812: LD_INT 2
67814: ARRAY
67815: PPUSH
67816: CALL_OW 428
67820: PUSH
67821: LD_INT 0
67823: EQUAL
67824: IFFALSE 67877
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67826: LD_VAR 0 1
67830: PPUSH
67831: LD_VAR 0 7
67835: PUSH
67836: LD_INT 1
67838: ARRAY
67839: PPUSH
67840: LD_VAR 0 7
67844: PUSH
67845: LD_INT 2
67847: ARRAY
67848: PPUSH
67849: LD_VAR 0 3
67853: PPUSH
67854: CALL_OW 48
// result := IsPlaced ( unit ) ;
67858: LD_ADDR_VAR 0 4
67862: PUSH
67863: LD_VAR 0 1
67867: PPUSH
67868: CALL_OW 305
67872: ST_TO_ADDR
// exit ;
67873: POP
67874: POP
67875: GO 67881
// end ; end ;
67877: GO 67756
67879: POP
67880: POP
// end ;
67881: LD_VAR 0 4
67885: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67886: LD_INT 0
67888: PPUSH
67889: PPUSH
67890: PPUSH
// if not side or side > 8 then
67891: LD_VAR 0 1
67895: NOT
67896: PUSH
67897: LD_VAR 0 1
67901: PUSH
67902: LD_INT 8
67904: GREATER
67905: OR
67906: IFFALSE 67910
// exit ;
67908: GO 68097
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67910: LD_ADDR_VAR 0 4
67914: PUSH
67915: LD_INT 22
67917: PUSH
67918: LD_VAR 0 1
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 21
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PPUSH
67941: CALL_OW 69
67945: ST_TO_ADDR
// if not tmp then
67946: LD_VAR 0 4
67950: NOT
67951: IFFALSE 67955
// exit ;
67953: GO 68097
// enable_addtolog := true ;
67955: LD_ADDR_OWVAR 81
67959: PUSH
67960: LD_INT 1
67962: ST_TO_ADDR
// AddToLog ( [ ) ;
67963: LD_STRING [
67965: PPUSH
67966: CALL_OW 561
// for i in tmp do
67970: LD_ADDR_VAR 0 3
67974: PUSH
67975: LD_VAR 0 4
67979: PUSH
67980: FOR_IN
67981: IFFALSE 68088
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67983: LD_STRING [
67985: PUSH
67986: LD_VAR 0 3
67990: PPUSH
67991: CALL_OW 266
67995: STR
67996: PUSH
67997: LD_STRING , 
67999: STR
68000: PUSH
68001: LD_VAR 0 3
68005: PPUSH
68006: CALL_OW 250
68010: STR
68011: PUSH
68012: LD_STRING , 
68014: STR
68015: PUSH
68016: LD_VAR 0 3
68020: PPUSH
68021: CALL_OW 251
68025: STR
68026: PUSH
68027: LD_STRING , 
68029: STR
68030: PUSH
68031: LD_VAR 0 3
68035: PPUSH
68036: CALL_OW 254
68040: STR
68041: PUSH
68042: LD_STRING , 
68044: STR
68045: PUSH
68046: LD_VAR 0 3
68050: PPUSH
68051: LD_INT 1
68053: PPUSH
68054: CALL_OW 268
68058: STR
68059: PUSH
68060: LD_STRING , 
68062: STR
68063: PUSH
68064: LD_VAR 0 3
68068: PPUSH
68069: LD_INT 2
68071: PPUSH
68072: CALL_OW 268
68076: STR
68077: PUSH
68078: LD_STRING ],
68080: STR
68081: PPUSH
68082: CALL_OW 561
// end ;
68086: GO 67980
68088: POP
68089: POP
// AddToLog ( ]; ) ;
68090: LD_STRING ];
68092: PPUSH
68093: CALL_OW 561
// end ;
68097: LD_VAR 0 2
68101: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68102: LD_INT 0
68104: PPUSH
68105: PPUSH
68106: PPUSH
68107: PPUSH
68108: PPUSH
// if not area or not rate or not max then
68109: LD_VAR 0 1
68113: NOT
68114: PUSH
68115: LD_VAR 0 2
68119: NOT
68120: OR
68121: PUSH
68122: LD_VAR 0 4
68126: NOT
68127: OR
68128: IFFALSE 68132
// exit ;
68130: GO 68321
// while 1 do
68132: LD_INT 1
68134: IFFALSE 68321
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68136: LD_ADDR_VAR 0 9
68140: PUSH
68141: LD_VAR 0 1
68145: PPUSH
68146: LD_INT 1
68148: PPUSH
68149: CALL_OW 287
68153: PUSH
68154: LD_INT 10
68156: MUL
68157: ST_TO_ADDR
// r := rate / 10 ;
68158: LD_ADDR_VAR 0 7
68162: PUSH
68163: LD_VAR 0 2
68167: PUSH
68168: LD_INT 10
68170: DIVREAL
68171: ST_TO_ADDR
// time := 1 1$00 ;
68172: LD_ADDR_VAR 0 8
68176: PUSH
68177: LD_INT 2100
68179: ST_TO_ADDR
// if amount < min then
68180: LD_VAR 0 9
68184: PUSH
68185: LD_VAR 0 3
68189: LESS
68190: IFFALSE 68208
// r := r * 2 else
68192: LD_ADDR_VAR 0 7
68196: PUSH
68197: LD_VAR 0 7
68201: PUSH
68202: LD_INT 2
68204: MUL
68205: ST_TO_ADDR
68206: GO 68234
// if amount > max then
68208: LD_VAR 0 9
68212: PUSH
68213: LD_VAR 0 4
68217: GREATER
68218: IFFALSE 68234
// r := r / 2 ;
68220: LD_ADDR_VAR 0 7
68224: PUSH
68225: LD_VAR 0 7
68229: PUSH
68230: LD_INT 2
68232: DIVREAL
68233: ST_TO_ADDR
// time := time / r ;
68234: LD_ADDR_VAR 0 8
68238: PUSH
68239: LD_VAR 0 8
68243: PUSH
68244: LD_VAR 0 7
68248: DIVREAL
68249: ST_TO_ADDR
// if time < 0 then
68250: LD_VAR 0 8
68254: PUSH
68255: LD_INT 0
68257: LESS
68258: IFFALSE 68275
// time := time * - 1 ;
68260: LD_ADDR_VAR 0 8
68264: PUSH
68265: LD_VAR 0 8
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: MUL
68274: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68275: LD_VAR 0 8
68279: PUSH
68280: LD_INT 35
68282: PPUSH
68283: LD_INT 875
68285: PPUSH
68286: CALL_OW 12
68290: PLUS
68291: PPUSH
68292: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68296: LD_INT 1
68298: PPUSH
68299: LD_INT 5
68301: PPUSH
68302: CALL_OW 12
68306: PPUSH
68307: LD_VAR 0 1
68311: PPUSH
68312: LD_INT 1
68314: PPUSH
68315: CALL_OW 55
// end ;
68319: GO 68132
// end ;
68321: LD_VAR 0 5
68325: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68326: LD_INT 0
68328: PPUSH
68329: PPUSH
68330: PPUSH
68331: PPUSH
68332: PPUSH
68333: PPUSH
68334: PPUSH
68335: PPUSH
// if not turrets or not factories then
68336: LD_VAR 0 1
68340: NOT
68341: PUSH
68342: LD_VAR 0 2
68346: NOT
68347: OR
68348: IFFALSE 68352
// exit ;
68350: GO 68659
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68352: LD_ADDR_VAR 0 10
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: LD_INT 6
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: LD_INT 5
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 24
68394: PUSH
68395: LD_INT 25
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 23
68404: PUSH
68405: LD_INT 27
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 42
68418: PUSH
68419: LD_INT 43
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 44
68428: PUSH
68429: LD_INT 46
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 45
68438: PUSH
68439: LD_INT 47
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: LIST
68455: ST_TO_ADDR
// result := [ ] ;
68456: LD_ADDR_VAR 0 3
68460: PUSH
68461: EMPTY
68462: ST_TO_ADDR
// for i in turrets do
68463: LD_ADDR_VAR 0 4
68467: PUSH
68468: LD_VAR 0 1
68472: PUSH
68473: FOR_IN
68474: IFFALSE 68657
// begin nat := GetNation ( i ) ;
68476: LD_ADDR_VAR 0 7
68480: PUSH
68481: LD_VAR 0 4
68485: PPUSH
68486: CALL_OW 248
68490: ST_TO_ADDR
// weapon := 0 ;
68491: LD_ADDR_VAR 0 8
68495: PUSH
68496: LD_INT 0
68498: ST_TO_ADDR
// if not nat then
68499: LD_VAR 0 7
68503: NOT
68504: IFFALSE 68508
// continue ;
68506: GO 68473
// for j in list [ nat ] do
68508: LD_ADDR_VAR 0 5
68512: PUSH
68513: LD_VAR 0 10
68517: PUSH
68518: LD_VAR 0 7
68522: ARRAY
68523: PUSH
68524: FOR_IN
68525: IFFALSE 68566
// if GetBWeapon ( i ) = j [ 1 ] then
68527: LD_VAR 0 4
68531: PPUSH
68532: CALL_OW 269
68536: PUSH
68537: LD_VAR 0 5
68541: PUSH
68542: LD_INT 1
68544: ARRAY
68545: EQUAL
68546: IFFALSE 68564
// begin weapon := j [ 2 ] ;
68548: LD_ADDR_VAR 0 8
68552: PUSH
68553: LD_VAR 0 5
68557: PUSH
68558: LD_INT 2
68560: ARRAY
68561: ST_TO_ADDR
// break ;
68562: GO 68566
// end ;
68564: GO 68524
68566: POP
68567: POP
// if not weapon then
68568: LD_VAR 0 8
68572: NOT
68573: IFFALSE 68577
// continue ;
68575: GO 68473
// for k in factories do
68577: LD_ADDR_VAR 0 6
68581: PUSH
68582: LD_VAR 0 2
68586: PUSH
68587: FOR_IN
68588: IFFALSE 68653
// begin weapons := AvailableWeaponList ( k ) ;
68590: LD_ADDR_VAR 0 9
68594: PUSH
68595: LD_VAR 0 6
68599: PPUSH
68600: CALL_OW 478
68604: ST_TO_ADDR
// if not weapons then
68605: LD_VAR 0 9
68609: NOT
68610: IFFALSE 68614
// continue ;
68612: GO 68587
// if weapon in weapons then
68614: LD_VAR 0 8
68618: PUSH
68619: LD_VAR 0 9
68623: IN
68624: IFFALSE 68651
// begin result := [ i , weapon ] ;
68626: LD_ADDR_VAR 0 3
68630: PUSH
68631: LD_VAR 0 4
68635: PUSH
68636: LD_VAR 0 8
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: ST_TO_ADDR
// exit ;
68645: POP
68646: POP
68647: POP
68648: POP
68649: GO 68659
// end ; end ;
68651: GO 68587
68653: POP
68654: POP
// end ;
68655: GO 68473
68657: POP
68658: POP
// end ;
68659: LD_VAR 0 3
68663: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68664: LD_INT 0
68666: PPUSH
// if not side or side > 8 then
68667: LD_VAR 0 3
68671: NOT
68672: PUSH
68673: LD_VAR 0 3
68677: PUSH
68678: LD_INT 8
68680: GREATER
68681: OR
68682: IFFALSE 68686
// exit ;
68684: GO 68745
// if not range then
68686: LD_VAR 0 4
68690: NOT
68691: IFFALSE 68702
// range := - 12 ;
68693: LD_ADDR_VAR 0 4
68697: PUSH
68698: LD_INT 12
68700: NEG
68701: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68702: LD_VAR 0 1
68706: PPUSH
68707: LD_VAR 0 2
68711: PPUSH
68712: LD_VAR 0 3
68716: PPUSH
68717: LD_VAR 0 4
68721: PPUSH
68722: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68726: LD_VAR 0 1
68730: PPUSH
68731: LD_VAR 0 2
68735: PPUSH
68736: LD_VAR 0 3
68740: PPUSH
68741: CALL_OW 331
// end ;
68745: LD_VAR 0 5
68749: RET
// export function Video ( mode ) ; begin
68750: LD_INT 0
68752: PPUSH
// ingame_video = mode ;
68753: LD_ADDR_OWVAR 52
68757: PUSH
68758: LD_VAR 0 1
68762: ST_TO_ADDR
// interface_hidden = mode ;
68763: LD_ADDR_OWVAR 54
68767: PUSH
68768: LD_VAR 0 1
68772: ST_TO_ADDR
// end ;
68773: LD_VAR 0 2
68777: RET
// export function Join ( array , element ) ; begin
68778: LD_INT 0
68780: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: LD_VAR 0 1
68790: PPUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_INT 1
68798: PLUS
68799: PPUSH
68800: LD_VAR 0 2
68804: PPUSH
68805: CALL_OW 1
68809: ST_TO_ADDR
// end ;
68810: LD_VAR 0 3
68814: RET
// export function JoinUnion ( array , element ) ; begin
68815: LD_INT 0
68817: PPUSH
// result := array union element ;
68818: LD_ADDR_VAR 0 3
68822: PUSH
68823: LD_VAR 0 1
68827: PUSH
68828: LD_VAR 0 2
68832: UNION
68833: ST_TO_ADDR
// end ;
68834: LD_VAR 0 3
68838: RET
// export function GetBehemoths ( side ) ; begin
68839: LD_INT 0
68841: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68842: LD_ADDR_VAR 0 2
68846: PUSH
68847: LD_INT 22
68849: PUSH
68850: LD_VAR 0 1
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 31
68861: PUSH
68862: LD_INT 25
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PPUSH
68873: CALL_OW 69
68877: ST_TO_ADDR
// end ;
68878: LD_VAR 0 2
68882: RET
// export function Shuffle ( array ) ; var i , index ; begin
68883: LD_INT 0
68885: PPUSH
68886: PPUSH
68887: PPUSH
// result := [ ] ;
68888: LD_ADDR_VAR 0 2
68892: PUSH
68893: EMPTY
68894: ST_TO_ADDR
// if not array then
68895: LD_VAR 0 1
68899: NOT
68900: IFFALSE 68904
// exit ;
68902: GO 69003
// Randomize ;
68904: CALL_OW 10
// for i = array downto 1 do
68908: LD_ADDR_VAR 0 3
68912: PUSH
68913: DOUBLE
68914: LD_VAR 0 1
68918: INC
68919: ST_TO_ADDR
68920: LD_INT 1
68922: PUSH
68923: FOR_DOWNTO
68924: IFFALSE 69001
// begin index := rand ( 1 , array ) ;
68926: LD_ADDR_VAR 0 4
68930: PUSH
68931: LD_INT 1
68933: PPUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: CALL_OW 12
68943: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68944: LD_ADDR_VAR 0 2
68948: PUSH
68949: LD_VAR 0 2
68953: PPUSH
68954: LD_VAR 0 2
68958: PUSH
68959: LD_INT 1
68961: PLUS
68962: PPUSH
68963: LD_VAR 0 1
68967: PUSH
68968: LD_VAR 0 4
68972: ARRAY
68973: PPUSH
68974: CALL_OW 2
68978: ST_TO_ADDR
// array := Delete ( array , index ) ;
68979: LD_ADDR_VAR 0 1
68983: PUSH
68984: LD_VAR 0 1
68988: PPUSH
68989: LD_VAR 0 4
68993: PPUSH
68994: CALL_OW 3
68998: ST_TO_ADDR
// end ;
68999: GO 68923
69001: POP
69002: POP
// end ;
69003: LD_VAR 0 2
69007: RET
// export function GetBaseMaterials ( base ) ; begin
69008: LD_INT 0
69010: PPUSH
// result := [ 0 , 0 , 0 ] ;
69011: LD_ADDR_VAR 0 2
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: ST_TO_ADDR
// if not base then
69030: LD_VAR 0 1
69034: NOT
69035: IFFALSE 69039
// exit ;
69037: GO 69088
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69039: LD_ADDR_VAR 0 2
69043: PUSH
69044: LD_VAR 0 1
69048: PPUSH
69049: LD_INT 1
69051: PPUSH
69052: CALL_OW 275
69056: PUSH
69057: LD_VAR 0 1
69061: PPUSH
69062: LD_INT 2
69064: PPUSH
69065: CALL_OW 275
69069: PUSH
69070: LD_VAR 0 1
69074: PPUSH
69075: LD_INT 3
69077: PPUSH
69078: CALL_OW 275
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: LIST
69087: ST_TO_ADDR
// end ;
69088: LD_VAR 0 2
69092: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69093: LD_INT 0
69095: PPUSH
69096: PPUSH
// result := array ;
69097: LD_ADDR_VAR 0 3
69101: PUSH
69102: LD_VAR 0 1
69106: ST_TO_ADDR
// if size > 0 then
69107: LD_VAR 0 2
69111: PUSH
69112: LD_INT 0
69114: GREATER
69115: IFFALSE 69161
// for i := array downto size do
69117: LD_ADDR_VAR 0 4
69121: PUSH
69122: DOUBLE
69123: LD_VAR 0 1
69127: INC
69128: ST_TO_ADDR
69129: LD_VAR 0 2
69133: PUSH
69134: FOR_DOWNTO
69135: IFFALSE 69159
// result := Delete ( result , result ) ;
69137: LD_ADDR_VAR 0 3
69141: PUSH
69142: LD_VAR 0 3
69146: PPUSH
69147: LD_VAR 0 3
69151: PPUSH
69152: CALL_OW 3
69156: ST_TO_ADDR
69157: GO 69134
69159: POP
69160: POP
// end ;
69161: LD_VAR 0 3
69165: RET
// export function ComExit ( unit ) ; var tmp ; begin
69166: LD_INT 0
69168: PPUSH
69169: PPUSH
// if not IsInUnit ( unit ) then
69170: LD_VAR 0 1
69174: PPUSH
69175: CALL_OW 310
69179: NOT
69180: IFFALSE 69184
// exit ;
69182: GO 69244
// tmp := IsInUnit ( unit ) ;
69184: LD_ADDR_VAR 0 3
69188: PUSH
69189: LD_VAR 0 1
69193: PPUSH
69194: CALL_OW 310
69198: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69199: LD_VAR 0 3
69203: PPUSH
69204: CALL_OW 247
69208: PUSH
69209: LD_INT 2
69211: EQUAL
69212: IFFALSE 69225
// ComExitVehicle ( unit ) else
69214: LD_VAR 0 1
69218: PPUSH
69219: CALL_OW 121
69223: GO 69234
// ComExitBuilding ( unit ) ;
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 122
// result := tmp ;
69234: LD_ADDR_VAR 0 2
69238: PUSH
69239: LD_VAR 0 3
69243: ST_TO_ADDR
// end ;
69244: LD_VAR 0 2
69248: RET
// export function ComExitAll ( units ) ; var i ; begin
69249: LD_INT 0
69251: PPUSH
69252: PPUSH
// if not units then
69253: LD_VAR 0 1
69257: NOT
69258: IFFALSE 69262
// exit ;
69260: GO 69288
// for i in units do
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: LD_VAR 0 1
69271: PUSH
69272: FOR_IN
69273: IFFALSE 69286
// ComExit ( i ) ;
69275: LD_VAR 0 3
69279: PPUSH
69280: CALL 69166 0 1
69284: GO 69272
69286: POP
69287: POP
// end ;
69288: LD_VAR 0 2
69292: RET
// export function ResetHc ; begin
69293: LD_INT 0
69295: PPUSH
// InitHc ;
69296: CALL_OW 19
// hc_importance := 0 ;
69300: LD_ADDR_OWVAR 32
69304: PUSH
69305: LD_INT 0
69307: ST_TO_ADDR
// end ;
69308: LD_VAR 0 1
69312: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69313: LD_INT 0
69315: PPUSH
69316: PPUSH
69317: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69318: LD_ADDR_VAR 0 6
69322: PUSH
69323: LD_VAR 0 1
69327: PUSH
69328: LD_VAR 0 3
69332: PLUS
69333: PUSH
69334: LD_INT 2
69336: DIV
69337: ST_TO_ADDR
// if _x < 0 then
69338: LD_VAR 0 6
69342: PUSH
69343: LD_INT 0
69345: LESS
69346: IFFALSE 69363
// _x := _x * - 1 ;
69348: LD_ADDR_VAR 0 6
69352: PUSH
69353: LD_VAR 0 6
69357: PUSH
69358: LD_INT 1
69360: NEG
69361: MUL
69362: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69363: LD_ADDR_VAR 0 7
69367: PUSH
69368: LD_VAR 0 2
69372: PUSH
69373: LD_VAR 0 4
69377: PLUS
69378: PUSH
69379: LD_INT 2
69381: DIV
69382: ST_TO_ADDR
// if _y < 0 then
69383: LD_VAR 0 7
69387: PUSH
69388: LD_INT 0
69390: LESS
69391: IFFALSE 69408
// _y := _y * - 1 ;
69393: LD_ADDR_VAR 0 7
69397: PUSH
69398: LD_VAR 0 7
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: MUL
69407: ST_TO_ADDR
// result := [ _x , _y ] ;
69408: LD_ADDR_VAR 0 5
69412: PUSH
69413: LD_VAR 0 6
69417: PUSH
69418: LD_VAR 0 7
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: ST_TO_ADDR
// end ;
69427: LD_VAR 0 5
69431: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69432: LD_INT 0
69434: PPUSH
69435: PPUSH
69436: PPUSH
69437: PPUSH
// task := GetTaskList ( unit ) ;
69438: LD_ADDR_VAR 0 7
69442: PUSH
69443: LD_VAR 0 1
69447: PPUSH
69448: CALL_OW 437
69452: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69453: LD_VAR 0 7
69457: NOT
69458: PUSH
69459: LD_VAR 0 1
69463: PPUSH
69464: LD_VAR 0 2
69468: PPUSH
69469: CALL_OW 308
69473: NOT
69474: AND
69475: IFFALSE 69479
// exit ;
69477: GO 69597
// if IsInArea ( unit , area ) then
69479: LD_VAR 0 1
69483: PPUSH
69484: LD_VAR 0 2
69488: PPUSH
69489: CALL_OW 308
69493: IFFALSE 69511
// begin ComMoveToArea ( unit , goAway ) ;
69495: LD_VAR 0 1
69499: PPUSH
69500: LD_VAR 0 3
69504: PPUSH
69505: CALL_OW 113
// exit ;
69509: GO 69597
// end ; if task [ 1 ] [ 1 ] <> M then
69511: LD_VAR 0 7
69515: PUSH
69516: LD_INT 1
69518: ARRAY
69519: PUSH
69520: LD_INT 1
69522: ARRAY
69523: PUSH
69524: LD_STRING M
69526: NONEQUAL
69527: IFFALSE 69531
// exit ;
69529: GO 69597
// x := task [ 1 ] [ 2 ] ;
69531: LD_ADDR_VAR 0 5
69535: PUSH
69536: LD_VAR 0 7
69540: PUSH
69541: LD_INT 1
69543: ARRAY
69544: PUSH
69545: LD_INT 2
69547: ARRAY
69548: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69549: LD_ADDR_VAR 0 6
69553: PUSH
69554: LD_VAR 0 7
69558: PUSH
69559: LD_INT 1
69561: ARRAY
69562: PUSH
69563: LD_INT 3
69565: ARRAY
69566: ST_TO_ADDR
// if InArea ( x , y , area ) then
69567: LD_VAR 0 5
69571: PPUSH
69572: LD_VAR 0 6
69576: PPUSH
69577: LD_VAR 0 2
69581: PPUSH
69582: CALL_OW 309
69586: IFFALSE 69597
// ComStop ( unit ) ;
69588: LD_VAR 0 1
69592: PPUSH
69593: CALL_OW 141
// end ;
69597: LD_VAR 0 4
69601: RET
// export function Abs ( value ) ; begin
69602: LD_INT 0
69604: PPUSH
// result := value ;
69605: LD_ADDR_VAR 0 2
69609: PUSH
69610: LD_VAR 0 1
69614: ST_TO_ADDR
// if value < 0 then
69615: LD_VAR 0 1
69619: PUSH
69620: LD_INT 0
69622: LESS
69623: IFFALSE 69640
// result := value * - 1 ;
69625: LD_ADDR_VAR 0 2
69629: PUSH
69630: LD_VAR 0 1
69634: PUSH
69635: LD_INT 1
69637: NEG
69638: MUL
69639: ST_TO_ADDR
// end ;
69640: LD_VAR 0 2
69644: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69645: LD_INT 0
69647: PPUSH
69648: PPUSH
69649: PPUSH
69650: PPUSH
69651: PPUSH
69652: PPUSH
69653: PPUSH
69654: PPUSH
// if not unit or not building then
69655: LD_VAR 0 1
69659: NOT
69660: PUSH
69661: LD_VAR 0 2
69665: NOT
69666: OR
69667: IFFALSE 69671
// exit ;
69669: GO 69897
// x := GetX ( building ) ;
69671: LD_ADDR_VAR 0 4
69675: PUSH
69676: LD_VAR 0 2
69680: PPUSH
69681: CALL_OW 250
69685: ST_TO_ADDR
// y := GetY ( building ) ;
69686: LD_ADDR_VAR 0 6
69690: PUSH
69691: LD_VAR 0 2
69695: PPUSH
69696: CALL_OW 251
69700: ST_TO_ADDR
// d := GetDir ( building ) ;
69701: LD_ADDR_VAR 0 8
69705: PUSH
69706: LD_VAR 0 2
69710: PPUSH
69711: CALL_OW 254
69715: ST_TO_ADDR
// r := 4 ;
69716: LD_ADDR_VAR 0 9
69720: PUSH
69721: LD_INT 4
69723: ST_TO_ADDR
// for i := 1 to 5 do
69724: LD_ADDR_VAR 0 10
69728: PUSH
69729: DOUBLE
69730: LD_INT 1
69732: DEC
69733: ST_TO_ADDR
69734: LD_INT 5
69736: PUSH
69737: FOR_TO
69738: IFFALSE 69895
// begin _x := ShiftX ( x , d , r + i ) ;
69740: LD_ADDR_VAR 0 5
69744: PUSH
69745: LD_VAR 0 4
69749: PPUSH
69750: LD_VAR 0 8
69754: PPUSH
69755: LD_VAR 0 9
69759: PUSH
69760: LD_VAR 0 10
69764: PLUS
69765: PPUSH
69766: CALL_OW 272
69770: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69771: LD_ADDR_VAR 0 7
69775: PUSH
69776: LD_VAR 0 6
69780: PPUSH
69781: LD_VAR 0 8
69785: PPUSH
69786: LD_VAR 0 9
69790: PUSH
69791: LD_VAR 0 10
69795: PLUS
69796: PPUSH
69797: CALL_OW 273
69801: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69802: LD_VAR 0 5
69806: PPUSH
69807: LD_VAR 0 7
69811: PPUSH
69812: CALL_OW 488
69816: PUSH
69817: LD_VAR 0 5
69821: PPUSH
69822: LD_VAR 0 7
69826: PPUSH
69827: CALL_OW 428
69831: PPUSH
69832: CALL_OW 247
69836: PUSH
69837: LD_INT 3
69839: PUSH
69840: LD_INT 2
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: IN
69847: NOT
69848: AND
69849: IFFALSE 69893
// begin ComMoveXY ( unit , _x , _y ) ;
69851: LD_VAR 0 1
69855: PPUSH
69856: LD_VAR 0 5
69860: PPUSH
69861: LD_VAR 0 7
69865: PPUSH
69866: CALL_OW 111
// result := [ _x , _y ] ;
69870: LD_ADDR_VAR 0 3
69874: PUSH
69875: LD_VAR 0 5
69879: PUSH
69880: LD_VAR 0 7
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: ST_TO_ADDR
// exit ;
69889: POP
69890: POP
69891: GO 69897
// end ; end ;
69893: GO 69737
69895: POP
69896: POP
// end ;
69897: LD_VAR 0 3
69901: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69902: LD_INT 0
69904: PPUSH
69905: PPUSH
69906: PPUSH
// result := 0 ;
69907: LD_ADDR_VAR 0 3
69911: PUSH
69912: LD_INT 0
69914: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69915: LD_VAR 0 1
69919: PUSH
69920: LD_INT 0
69922: LESS
69923: PUSH
69924: LD_VAR 0 1
69928: PUSH
69929: LD_INT 8
69931: GREATER
69932: OR
69933: PUSH
69934: LD_VAR 0 2
69938: PUSH
69939: LD_INT 0
69941: LESS
69942: OR
69943: PUSH
69944: LD_VAR 0 2
69948: PUSH
69949: LD_INT 8
69951: GREATER
69952: OR
69953: IFFALSE 69957
// exit ;
69955: GO 70032
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69957: LD_ADDR_VAR 0 4
69961: PUSH
69962: LD_INT 22
69964: PUSH
69965: LD_VAR 0 2
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PPUSH
69974: CALL_OW 69
69978: PUSH
69979: FOR_IN
69980: IFFALSE 70030
// begin un := UnitShoot ( i ) ;
69982: LD_ADDR_VAR 0 5
69986: PUSH
69987: LD_VAR 0 4
69991: PPUSH
69992: CALL_OW 504
69996: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69997: LD_VAR 0 5
70001: PPUSH
70002: CALL_OW 255
70006: PUSH
70007: LD_VAR 0 1
70011: EQUAL
70012: IFFALSE 70028
// begin result := un ;
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: LD_VAR 0 5
70023: ST_TO_ADDR
// exit ;
70024: POP
70025: POP
70026: GO 70032
// end ; end ;
70028: GO 69979
70030: POP
70031: POP
// end ;
70032: LD_VAR 0 3
70036: RET
// export function GetCargoBay ( units ) ; begin
70037: LD_INT 0
70039: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70040: LD_ADDR_VAR 0 2
70044: PUSH
70045: LD_VAR 0 1
70049: PPUSH
70050: LD_INT 2
70052: PUSH
70053: LD_INT 34
70055: PUSH
70056: LD_INT 12
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 34
70065: PUSH
70066: LD_INT 51
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 34
70075: PUSH
70076: LD_INT 32
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 34
70085: PUSH
70086: LD_EXP 44
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: PPUSH
70102: CALL_OW 72
70106: ST_TO_ADDR
// end ;
70107: LD_VAR 0 2
70111: RET
// export function Negate ( value ) ; begin
70112: LD_INT 0
70114: PPUSH
// result := not value ;
70115: LD_ADDR_VAR 0 2
70119: PUSH
70120: LD_VAR 0 1
70124: NOT
70125: ST_TO_ADDR
// end ;
70126: LD_VAR 0 2
70130: RET
// export function Inc ( value ) ; begin
70131: LD_INT 0
70133: PPUSH
// result := value + 1 ;
70134: LD_ADDR_VAR 0 2
70138: PUSH
70139: LD_VAR 0 1
70143: PUSH
70144: LD_INT 1
70146: PLUS
70147: ST_TO_ADDR
// end ;
70148: LD_VAR 0 2
70152: RET
// export function Dec ( value ) ; begin
70153: LD_INT 0
70155: PPUSH
// result := value - 1 ;
70156: LD_ADDR_VAR 0 2
70160: PUSH
70161: LD_VAR 0 1
70165: PUSH
70166: LD_INT 1
70168: MINUS
70169: ST_TO_ADDR
// end ;
70170: LD_VAR 0 2
70174: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70175: LD_INT 0
70177: PPUSH
70178: PPUSH
70179: PPUSH
70180: PPUSH
70181: PPUSH
70182: PPUSH
70183: PPUSH
70184: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70185: LD_VAR 0 1
70189: PPUSH
70190: LD_VAR 0 2
70194: PPUSH
70195: CALL_OW 488
70199: NOT
70200: PUSH
70201: LD_VAR 0 3
70205: PPUSH
70206: LD_VAR 0 4
70210: PPUSH
70211: CALL_OW 488
70215: NOT
70216: OR
70217: IFFALSE 70230
// begin result := - 1 ;
70219: LD_ADDR_VAR 0 5
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: ST_TO_ADDR
// exit ;
70228: GO 70465
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70230: LD_ADDR_VAR 0 12
70234: PUSH
70235: LD_VAR 0 1
70239: PPUSH
70240: LD_VAR 0 2
70244: PPUSH
70245: LD_VAR 0 3
70249: PPUSH
70250: LD_VAR 0 4
70254: PPUSH
70255: CALL 69313 0 4
70259: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70260: LD_ADDR_VAR 0 11
70264: PUSH
70265: LD_VAR 0 1
70269: PPUSH
70270: LD_VAR 0 2
70274: PPUSH
70275: LD_VAR 0 12
70279: PUSH
70280: LD_INT 1
70282: ARRAY
70283: PPUSH
70284: LD_VAR 0 12
70288: PUSH
70289: LD_INT 2
70291: ARRAY
70292: PPUSH
70293: CALL_OW 298
70297: ST_TO_ADDR
// distance := 9999 ;
70298: LD_ADDR_VAR 0 10
70302: PUSH
70303: LD_INT 9999
70305: ST_TO_ADDR
// for i := 0 to 5 do
70306: LD_ADDR_VAR 0 6
70310: PUSH
70311: DOUBLE
70312: LD_INT 0
70314: DEC
70315: ST_TO_ADDR
70316: LD_INT 5
70318: PUSH
70319: FOR_TO
70320: IFFALSE 70463
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70322: LD_ADDR_VAR 0 7
70326: PUSH
70327: LD_VAR 0 1
70331: PPUSH
70332: LD_VAR 0 6
70336: PPUSH
70337: LD_VAR 0 11
70341: PPUSH
70342: CALL_OW 272
70346: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70347: LD_ADDR_VAR 0 8
70351: PUSH
70352: LD_VAR 0 2
70356: PPUSH
70357: LD_VAR 0 6
70361: PPUSH
70362: LD_VAR 0 11
70366: PPUSH
70367: CALL_OW 273
70371: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70372: LD_VAR 0 7
70376: PPUSH
70377: LD_VAR 0 8
70381: PPUSH
70382: CALL_OW 488
70386: NOT
70387: IFFALSE 70391
// continue ;
70389: GO 70319
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70391: LD_ADDR_VAR 0 9
70395: PUSH
70396: LD_VAR 0 12
70400: PUSH
70401: LD_INT 1
70403: ARRAY
70404: PPUSH
70405: LD_VAR 0 12
70409: PUSH
70410: LD_INT 2
70412: ARRAY
70413: PPUSH
70414: LD_VAR 0 7
70418: PPUSH
70419: LD_VAR 0 8
70423: PPUSH
70424: CALL_OW 298
70428: ST_TO_ADDR
// if tmp < distance then
70429: LD_VAR 0 9
70433: PUSH
70434: LD_VAR 0 10
70438: LESS
70439: IFFALSE 70461
// begin result := i ;
70441: LD_ADDR_VAR 0 5
70445: PUSH
70446: LD_VAR 0 6
70450: ST_TO_ADDR
// distance := tmp ;
70451: LD_ADDR_VAR 0 10
70455: PUSH
70456: LD_VAR 0 9
70460: ST_TO_ADDR
// end ; end ;
70461: GO 70319
70463: POP
70464: POP
// end ;
70465: LD_VAR 0 5
70469: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70470: LD_INT 0
70472: PPUSH
70473: PPUSH
// if not driver or not IsInUnit ( driver ) then
70474: LD_VAR 0 1
70478: NOT
70479: PUSH
70480: LD_VAR 0 1
70484: PPUSH
70485: CALL_OW 310
70489: NOT
70490: OR
70491: IFFALSE 70495
// exit ;
70493: GO 70585
// vehicle := IsInUnit ( driver ) ;
70495: LD_ADDR_VAR 0 3
70499: PUSH
70500: LD_VAR 0 1
70504: PPUSH
70505: CALL_OW 310
70509: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70510: LD_VAR 0 1
70514: PPUSH
70515: LD_STRING \
70517: PUSH
70518: LD_INT 0
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: LD_INT 0
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: PUSH
70545: LD_STRING E
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_VAR 0 3
70558: PUSH
70559: LD_INT 0
70561: PUSH
70562: LD_INT 0
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PPUSH
70581: CALL_OW 446
// end ;
70585: LD_VAR 0 2
70589: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70590: LD_INT 0
70592: PPUSH
70593: PPUSH
// if not driver or not IsInUnit ( driver ) then
70594: LD_VAR 0 1
70598: NOT
70599: PUSH
70600: LD_VAR 0 1
70604: PPUSH
70605: CALL_OW 310
70609: NOT
70610: OR
70611: IFFALSE 70615
// exit ;
70613: GO 70705
// vehicle := IsInUnit ( driver ) ;
70615: LD_ADDR_VAR 0 3
70619: PUSH
70620: LD_VAR 0 1
70624: PPUSH
70625: CALL_OW 310
70629: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70630: LD_VAR 0 1
70634: PPUSH
70635: LD_STRING \
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: PUSH
70665: LD_STRING E
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_VAR 0 3
70678: PUSH
70679: LD_INT 0
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PPUSH
70701: CALL_OW 447
// end ;
70705: LD_VAR 0 2
70709: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70710: LD_INT 0
70712: PPUSH
70713: PPUSH
70714: PPUSH
// tmp := [ ] ;
70715: LD_ADDR_VAR 0 5
70719: PUSH
70720: EMPTY
70721: ST_TO_ADDR
// for i in units do
70722: LD_ADDR_VAR 0 4
70726: PUSH
70727: LD_VAR 0 1
70731: PUSH
70732: FOR_IN
70733: IFFALSE 70771
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70735: LD_ADDR_VAR 0 5
70739: PUSH
70740: LD_VAR 0 5
70744: PPUSH
70745: LD_VAR 0 5
70749: PUSH
70750: LD_INT 1
70752: PLUS
70753: PPUSH
70754: LD_VAR 0 4
70758: PPUSH
70759: CALL_OW 256
70763: PPUSH
70764: CALL_OW 2
70768: ST_TO_ADDR
70769: GO 70732
70771: POP
70772: POP
// if not tmp then
70773: LD_VAR 0 5
70777: NOT
70778: IFFALSE 70782
// exit ;
70780: GO 70830
// if asc then
70782: LD_VAR 0 2
70786: IFFALSE 70810
// result := SortListByListAsc ( units , tmp ) else
70788: LD_ADDR_VAR 0 3
70792: PUSH
70793: LD_VAR 0 1
70797: PPUSH
70798: LD_VAR 0 5
70802: PPUSH
70803: CALL_OW 76
70807: ST_TO_ADDR
70808: GO 70830
// result := SortListByListDesc ( units , tmp ) ;
70810: LD_ADDR_VAR 0 3
70814: PUSH
70815: LD_VAR 0 1
70819: PPUSH
70820: LD_VAR 0 5
70824: PPUSH
70825: CALL_OW 77
70829: ST_TO_ADDR
// end ;
70830: LD_VAR 0 3
70834: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70835: LD_INT 0
70837: PPUSH
70838: PPUSH
// task := GetTaskList ( mech ) ;
70839: LD_ADDR_VAR 0 4
70843: PUSH
70844: LD_VAR 0 1
70848: PPUSH
70849: CALL_OW 437
70853: ST_TO_ADDR
// if not task then
70854: LD_VAR 0 4
70858: NOT
70859: IFFALSE 70863
// exit ;
70861: GO 70905
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70863: LD_ADDR_VAR 0 3
70867: PUSH
70868: LD_VAR 0 4
70872: PUSH
70873: LD_INT 1
70875: ARRAY
70876: PUSH
70877: LD_INT 1
70879: ARRAY
70880: PUSH
70881: LD_STRING r
70883: EQUAL
70884: PUSH
70885: LD_VAR 0 4
70889: PUSH
70890: LD_INT 1
70892: ARRAY
70893: PUSH
70894: LD_INT 4
70896: ARRAY
70897: PUSH
70898: LD_VAR 0 2
70902: EQUAL
70903: AND
70904: ST_TO_ADDR
// end ;
70905: LD_VAR 0 3
70909: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70910: LD_INT 0
70912: PPUSH
// SetDir ( unit , d ) ;
70913: LD_VAR 0 1
70917: PPUSH
70918: LD_VAR 0 4
70922: PPUSH
70923: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70927: LD_VAR 0 1
70931: PPUSH
70932: LD_VAR 0 2
70936: PPUSH
70937: LD_VAR 0 3
70941: PPUSH
70942: LD_VAR 0 5
70946: PPUSH
70947: CALL_OW 48
// end ;
70951: LD_VAR 0 6
70955: RET
// export function ToNaturalNumber ( number ) ; begin
70956: LD_INT 0
70958: PPUSH
// result := number div 1 ;
70959: LD_ADDR_VAR 0 2
70963: PUSH
70964: LD_VAR 0 1
70968: PUSH
70969: LD_INT 1
70971: DIV
70972: ST_TO_ADDR
// if number < 0 then
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 0
70980: LESS
70981: IFFALSE 70991
// result := 0 ;
70983: LD_ADDR_VAR 0 2
70987: PUSH
70988: LD_INT 0
70990: ST_TO_ADDR
// end ;
70991: LD_VAR 0 2
70995: RET
// export function SortByClass ( units , class ) ; var un ; begin
70996: LD_INT 0
70998: PPUSH
70999: PPUSH
// if not units or not class then
71000: LD_VAR 0 1
71004: NOT
71005: PUSH
71006: LD_VAR 0 2
71010: NOT
71011: OR
71012: IFFALSE 71016
// exit ;
71014: GO 71111
// result := [ ] ;
71016: LD_ADDR_VAR 0 3
71020: PUSH
71021: EMPTY
71022: ST_TO_ADDR
// for un in units do
71023: LD_ADDR_VAR 0 4
71027: PUSH
71028: LD_VAR 0 1
71032: PUSH
71033: FOR_IN
71034: IFFALSE 71109
// if GetClass ( un ) = class then
71036: LD_VAR 0 4
71040: PPUSH
71041: CALL_OW 257
71045: PUSH
71046: LD_VAR 0 2
71050: EQUAL
71051: IFFALSE 71078
// result := Insert ( result , 1 , un ) else
71053: LD_ADDR_VAR 0 3
71057: PUSH
71058: LD_VAR 0 3
71062: PPUSH
71063: LD_INT 1
71065: PPUSH
71066: LD_VAR 0 4
71070: PPUSH
71071: CALL_OW 2
71075: ST_TO_ADDR
71076: GO 71107
// result := Replace ( result , result + 1 , un ) ;
71078: LD_ADDR_VAR 0 3
71082: PUSH
71083: LD_VAR 0 3
71087: PPUSH
71088: LD_VAR 0 3
71092: PUSH
71093: LD_INT 1
71095: PLUS
71096: PPUSH
71097: LD_VAR 0 4
71101: PPUSH
71102: CALL_OW 1
71106: ST_TO_ADDR
71107: GO 71033
71109: POP
71110: POP
// end ;
71111: LD_VAR 0 3
71115: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71116: LD_INT 0
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
71123: PPUSH
71124: PPUSH
// result := [ ] ;
71125: LD_ADDR_VAR 0 4
71129: PUSH
71130: EMPTY
71131: ST_TO_ADDR
// if x - r < 0 then
71132: LD_VAR 0 1
71136: PUSH
71137: LD_VAR 0 3
71141: MINUS
71142: PUSH
71143: LD_INT 0
71145: LESS
71146: IFFALSE 71158
// min_x := 0 else
71148: LD_ADDR_VAR 0 8
71152: PUSH
71153: LD_INT 0
71155: ST_TO_ADDR
71156: GO 71174
// min_x := x - r ;
71158: LD_ADDR_VAR 0 8
71162: PUSH
71163: LD_VAR 0 1
71167: PUSH
71168: LD_VAR 0 3
71172: MINUS
71173: ST_TO_ADDR
// if y - r < 0 then
71174: LD_VAR 0 2
71178: PUSH
71179: LD_VAR 0 3
71183: MINUS
71184: PUSH
71185: LD_INT 0
71187: LESS
71188: IFFALSE 71200
// min_y := 0 else
71190: LD_ADDR_VAR 0 7
71194: PUSH
71195: LD_INT 0
71197: ST_TO_ADDR
71198: GO 71216
// min_y := y - r ;
71200: LD_ADDR_VAR 0 7
71204: PUSH
71205: LD_VAR 0 2
71209: PUSH
71210: LD_VAR 0 3
71214: MINUS
71215: ST_TO_ADDR
// max_x := x + r ;
71216: LD_ADDR_VAR 0 9
71220: PUSH
71221: LD_VAR 0 1
71225: PUSH
71226: LD_VAR 0 3
71230: PLUS
71231: ST_TO_ADDR
// max_y := y + r ;
71232: LD_ADDR_VAR 0 10
71236: PUSH
71237: LD_VAR 0 2
71241: PUSH
71242: LD_VAR 0 3
71246: PLUS
71247: ST_TO_ADDR
// for _x = min_x to max_x do
71248: LD_ADDR_VAR 0 5
71252: PUSH
71253: DOUBLE
71254: LD_VAR 0 8
71258: DEC
71259: ST_TO_ADDR
71260: LD_VAR 0 9
71264: PUSH
71265: FOR_TO
71266: IFFALSE 71367
// for _y = min_y to max_y do
71268: LD_ADDR_VAR 0 6
71272: PUSH
71273: DOUBLE
71274: LD_VAR 0 7
71278: DEC
71279: ST_TO_ADDR
71280: LD_VAR 0 10
71284: PUSH
71285: FOR_TO
71286: IFFALSE 71363
// begin if not ValidHex ( _x , _y ) then
71288: LD_VAR 0 5
71292: PPUSH
71293: LD_VAR 0 6
71297: PPUSH
71298: CALL_OW 488
71302: NOT
71303: IFFALSE 71307
// continue ;
71305: GO 71285
// if GetResourceTypeXY ( _x , _y ) then
71307: LD_VAR 0 5
71311: PPUSH
71312: LD_VAR 0 6
71316: PPUSH
71317: CALL_OW 283
71321: IFFALSE 71361
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71323: LD_ADDR_VAR 0 4
71327: PUSH
71328: LD_VAR 0 4
71332: PPUSH
71333: LD_VAR 0 4
71337: PUSH
71338: LD_INT 1
71340: PLUS
71341: PPUSH
71342: LD_VAR 0 5
71346: PUSH
71347: LD_VAR 0 6
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PPUSH
71356: CALL_OW 1
71360: ST_TO_ADDR
// end ;
71361: GO 71285
71363: POP
71364: POP
71365: GO 71265
71367: POP
71368: POP
// end ;
71369: LD_VAR 0 4
71373: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71374: LD_INT 0
71376: PPUSH
71377: PPUSH
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
71382: PPUSH
71383: PPUSH
// if not units then
71384: LD_VAR 0 1
71388: NOT
71389: IFFALSE 71393
// exit ;
71391: GO 71818
// result := UnitFilter ( units , [ f_ok ] ) ;
71393: LD_ADDR_VAR 0 3
71397: PUSH
71398: LD_VAR 0 1
71402: PPUSH
71403: LD_INT 50
71405: PUSH
71406: EMPTY
71407: LIST
71408: PPUSH
71409: CALL_OW 72
71413: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71414: LD_ADDR_VAR 0 8
71418: PUSH
71419: LD_VAR 0 1
71423: PUSH
71424: LD_INT 1
71426: ARRAY
71427: PPUSH
71428: CALL_OW 255
71432: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
71433: LD_ADDR_VAR 0 10
71437: PUSH
71438: LD_INT 29
71440: PUSH
71441: LD_EXP 47
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: ST_TO_ADDR
// if not result then
71450: LD_VAR 0 3
71454: NOT
71455: IFFALSE 71459
// exit ;
71457: GO 71818
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71459: LD_ADDR_VAR 0 5
71463: PUSH
71464: LD_INT 81
71466: PUSH
71467: LD_VAR 0 8
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PPUSH
71476: CALL_OW 69
71480: ST_TO_ADDR
// for i in result do
71481: LD_ADDR_VAR 0 4
71485: PUSH
71486: LD_VAR 0 3
71490: PUSH
71491: FOR_IN
71492: IFFALSE 71816
// begin tag := GetTag ( i ) + 1 ;
71494: LD_ADDR_VAR 0 9
71498: PUSH
71499: LD_VAR 0 4
71503: PPUSH
71504: CALL_OW 110
71508: PUSH
71509: LD_INT 1
71511: PLUS
71512: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71513: LD_ADDR_VAR 0 7
71517: PUSH
71518: LD_VAR 0 4
71522: PPUSH
71523: CALL_OW 250
71527: PPUSH
71528: LD_VAR 0 4
71532: PPUSH
71533: CALL_OW 251
71537: PPUSH
71538: LD_INT 6
71540: PPUSH
71541: CALL 71116 0 3
71545: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71546: LD_VAR 0 7
71550: PUSH
71551: LD_VAR 0 4
71555: PPUSH
71556: CALL_OW 264
71560: PUSH
71561: LD_VAR 0 10
71565: IN
71566: NOT
71567: AND
71568: IFFALSE 71607
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71570: LD_VAR 0 4
71574: PPUSH
71575: LD_VAR 0 7
71579: PUSH
71580: LD_INT 1
71582: ARRAY
71583: PUSH
71584: LD_INT 1
71586: ARRAY
71587: PPUSH
71588: LD_VAR 0 7
71592: PUSH
71593: LD_INT 1
71595: ARRAY
71596: PUSH
71597: LD_INT 2
71599: ARRAY
71600: PPUSH
71601: CALL_OW 116
71605: GO 71814
// if path > tag then
71607: LD_VAR 0 2
71611: PUSH
71612: LD_VAR 0 9
71616: GREATER
71617: IFFALSE 71784
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
71619: LD_ADDR_VAR 0 6
71623: PUSH
71624: LD_VAR 0 5
71628: PPUSH
71629: LD_INT 91
71631: PUSH
71632: LD_VAR 0 4
71636: PUSH
71637: LD_INT 12
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: LIST
71644: PPUSH
71645: CALL_OW 72
71649: ST_TO_ADDR
// if nearEnemy then
71650: LD_VAR 0 6
71654: IFFALSE 71682
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71656: LD_VAR 0 4
71660: PPUSH
71661: LD_VAR 0 6
71665: PPUSH
71666: LD_VAR 0 4
71670: PPUSH
71671: CALL_OW 74
71675: PPUSH
71676: CALL_OW 115
71680: GO 71782
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71682: LD_VAR 0 4
71686: PPUSH
71687: LD_VAR 0 2
71691: PUSH
71692: LD_VAR 0 9
71696: ARRAY
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: PPUSH
71702: LD_VAR 0 2
71706: PUSH
71707: LD_VAR 0 9
71711: ARRAY
71712: PUSH
71713: LD_INT 2
71715: ARRAY
71716: PPUSH
71717: CALL_OW 297
71721: PUSH
71722: LD_INT 6
71724: GREATER
71725: IFFALSE 71768
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71727: LD_VAR 0 4
71731: PPUSH
71732: LD_VAR 0 2
71736: PUSH
71737: LD_VAR 0 9
71741: ARRAY
71742: PUSH
71743: LD_INT 1
71745: ARRAY
71746: PPUSH
71747: LD_VAR 0 2
71751: PUSH
71752: LD_VAR 0 9
71756: ARRAY
71757: PUSH
71758: LD_INT 2
71760: ARRAY
71761: PPUSH
71762: CALL_OW 114
71766: GO 71782
// SetTag ( i , tag ) ;
71768: LD_VAR 0 4
71772: PPUSH
71773: LD_VAR 0 9
71777: PPUSH
71778: CALL_OW 109
// end else
71782: GO 71814
// if enemy then
71784: LD_VAR 0 5
71788: IFFALSE 71814
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71790: LD_VAR 0 4
71794: PPUSH
71795: LD_VAR 0 5
71799: PPUSH
71800: LD_VAR 0 4
71804: PPUSH
71805: CALL_OW 74
71809: PPUSH
71810: CALL_OW 115
// end ;
71814: GO 71491
71816: POP
71817: POP
// end ;
71818: LD_VAR 0 3
71822: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71823: LD_INT 0
71825: PPUSH
71826: PPUSH
71827: PPUSH
// if not unit or IsInUnit ( unit ) then
71828: LD_VAR 0 1
71832: NOT
71833: PUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: CALL_OW 310
71843: OR
71844: IFFALSE 71848
// exit ;
71846: GO 71939
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71848: LD_ADDR_VAR 0 4
71852: PUSH
71853: LD_VAR 0 1
71857: PPUSH
71858: CALL_OW 250
71862: PPUSH
71863: LD_VAR 0 2
71867: PPUSH
71868: LD_INT 1
71870: PPUSH
71871: CALL_OW 272
71875: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71876: LD_ADDR_VAR 0 5
71880: PUSH
71881: LD_VAR 0 1
71885: PPUSH
71886: CALL_OW 251
71890: PPUSH
71891: LD_VAR 0 2
71895: PPUSH
71896: LD_INT 1
71898: PPUSH
71899: CALL_OW 273
71903: ST_TO_ADDR
// if ValidHex ( x , y ) then
71904: LD_VAR 0 4
71908: PPUSH
71909: LD_VAR 0 5
71913: PPUSH
71914: CALL_OW 488
71918: IFFALSE 71939
// ComTurnXY ( unit , x , y ) ;
71920: LD_VAR 0 1
71924: PPUSH
71925: LD_VAR 0 4
71929: PPUSH
71930: LD_VAR 0 5
71934: PPUSH
71935: CALL_OW 118
// end ;
71939: LD_VAR 0 3
71943: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71944: LD_INT 0
71946: PPUSH
71947: PPUSH
// result := false ;
71948: LD_ADDR_VAR 0 3
71952: PUSH
71953: LD_INT 0
71955: ST_TO_ADDR
// if not units then
71956: LD_VAR 0 2
71960: NOT
71961: IFFALSE 71965
// exit ;
71963: GO 72010
// for i in units do
71965: LD_ADDR_VAR 0 4
71969: PUSH
71970: LD_VAR 0 2
71974: PUSH
71975: FOR_IN
71976: IFFALSE 72008
// if See ( side , i ) then
71978: LD_VAR 0 1
71982: PPUSH
71983: LD_VAR 0 4
71987: PPUSH
71988: CALL_OW 292
71992: IFFALSE 72006
// begin result := true ;
71994: LD_ADDR_VAR 0 3
71998: PUSH
71999: LD_INT 1
72001: ST_TO_ADDR
// exit ;
72002: POP
72003: POP
72004: GO 72010
// end ;
72006: GO 71975
72008: POP
72009: POP
// end ;
72010: LD_VAR 0 3
72014: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72015: LD_INT 0
72017: PPUSH
72018: PPUSH
72019: PPUSH
72020: PPUSH
// if not unit or not points then
72021: LD_VAR 0 1
72025: NOT
72026: PUSH
72027: LD_VAR 0 2
72031: NOT
72032: OR
72033: IFFALSE 72037
// exit ;
72035: GO 72127
// dist := 99999 ;
72037: LD_ADDR_VAR 0 5
72041: PUSH
72042: LD_INT 99999
72044: ST_TO_ADDR
// for i in points do
72045: LD_ADDR_VAR 0 4
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: FOR_IN
72056: IFFALSE 72125
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72058: LD_ADDR_VAR 0 6
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: LD_VAR 0 4
72072: PUSH
72073: LD_INT 1
72075: ARRAY
72076: PPUSH
72077: LD_VAR 0 4
72081: PUSH
72082: LD_INT 2
72084: ARRAY
72085: PPUSH
72086: CALL_OW 297
72090: ST_TO_ADDR
// if tmpDist < dist then
72091: LD_VAR 0 6
72095: PUSH
72096: LD_VAR 0 5
72100: LESS
72101: IFFALSE 72123
// begin result := i ;
72103: LD_ADDR_VAR 0 3
72107: PUSH
72108: LD_VAR 0 4
72112: ST_TO_ADDR
// dist := tmpDist ;
72113: LD_ADDR_VAR 0 5
72117: PUSH
72118: LD_VAR 0 6
72122: ST_TO_ADDR
// end ; end ;
72123: GO 72055
72125: POP
72126: POP
// end ; end_of_file
72127: LD_VAR 0 3
72131: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72132: LD_VAR 0 1
72136: PUSH
72137: LD_INT 200
72139: DOUBLE
72140: GREATEREQUAL
72141: IFFALSE 72149
72143: LD_INT 299
72145: DOUBLE
72146: LESSEQUAL
72147: IFTRUE 72151
72149: GO 72183
72151: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72152: LD_VAR 0 1
72156: PPUSH
72157: LD_VAR 0 2
72161: PPUSH
72162: LD_VAR 0 3
72166: PPUSH
72167: LD_VAR 0 4
72171: PPUSH
72172: LD_VAR 0 5
72176: PPUSH
72177: CALL 27835 0 5
72181: GO 72260
72183: LD_INT 300
72185: DOUBLE
72186: GREATEREQUAL
72187: IFFALSE 72195
72189: LD_INT 399
72191: DOUBLE
72192: LESSEQUAL
72193: IFTRUE 72197
72195: GO 72259
72197: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72198: LD_VAR 0 1
72202: PPUSH
72203: LD_VAR 0 2
72207: PPUSH
72208: LD_VAR 0 3
72212: PPUSH
72213: LD_VAR 0 4
72217: PPUSH
72218: LD_VAR 0 5
72222: PPUSH
72223: LD_VAR 0 6
72227: PPUSH
72228: LD_VAR 0 7
72232: PPUSH
72233: LD_VAR 0 8
72237: PPUSH
72238: LD_VAR 0 9
72242: PPUSH
72243: LD_VAR 0 10
72247: PPUSH
72248: LD_VAR 0 11
72252: PPUSH
72253: CALL 25477 0 11
72257: GO 72260
72259: POP
// end ;
72260: PPOPN 11
72262: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72263: LD_VAR 0 1
72267: PPUSH
72268: LD_VAR 0 2
72272: PPUSH
72273: LD_VAR 0 3
72277: PPUSH
72278: LD_VAR 0 4
72282: PPUSH
72283: LD_VAR 0 5
72287: PPUSH
72288: CALL 27571 0 5
// end ; end_of_file
72292: PPOPN 5
72294: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72295: LD_VAR 0 1
72299: PPUSH
72300: LD_VAR 0 2
72304: PPUSH
72305: LD_VAR 0 3
72309: PPUSH
72310: LD_VAR 0 4
72314: PPUSH
72315: LD_VAR 0 5
72319: PPUSH
72320: LD_VAR 0 6
72324: PPUSH
72325: CALL 13170 0 6
// end ;
72329: PPOPN 6
72331: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72332: CALL 13145 0 0
// end ;
72336: PPOPN 1
72338: END
