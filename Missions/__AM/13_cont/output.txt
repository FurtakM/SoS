// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6279 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 30912 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 30912 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 30912 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 30912 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 30912 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 30912 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 30912 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 30912 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 30912 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 30912 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 30912 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 30912 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 30912 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 30912 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 30912 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 30912 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 30912 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 30912 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 30912 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 30912 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 30912 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3241
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3239
// Connect ( i ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL 38869 0 1
3237: GO 3225
3239: POP
3240: POP
// end ; end_of_file
3241: PPOPN 1
3243: END
// every 1 do
3244: GO 3246
3246: DISABLE
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3251: LD_INT 22
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 21
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PPUSH
3317: LD_INT 69
3319: PPUSH
3320: LD_INT 94
3322: PPUSH
3323: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3327: LD_EXP 1
3331: PPUSH
3332: LD_STRING D2-JMM-1
3334: PPUSH
3335: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3376: LD_EXP 2
3380: PPUSH
3381: LD_STRING D2-Huck-1
3383: PPUSH
3384: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3388: LD_INT 22
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 69
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D2-JMM-2
3432: PPUSH
3433: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3437: LD_INT 22
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: CALL_OW 87
// InGameOff ;
3474: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3478: LD_STRING M1
3480: PPUSH
3481: CALL_OW 337
// SaveForQuickRestart ;
3485: CALL_OW 22
// end ;
3489: END
// every 10 10$0 do
3490: GO 3492
3492: DISABLE
// begin DialogueOn ;
3493: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_STRING D3-Pow-1
3504: PPUSH
3505: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3509: LD_EXP 1
3513: PPUSH
3514: LD_STRING D3-JMM-1
3516: PPUSH
3517: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_STRING D3-Pow-2
3528: PPUSH
3529: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D3-JMM-2
3540: PPUSH
3541: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING D3-Pow-3
3552: PPUSH
3553: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D3-JMM-3
3564: PPUSH
3565: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3569: LD_EXP 15
3573: PPUSH
3574: LD_STRING D3-Pow-4
3576: PPUSH
3577: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D3-JMM-4
3588: PPUSH
3589: CALL_OW 88
// DialogueOff ;
3593: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3597: LD_STRING M2
3599: PPUSH
3600: CALL_OW 337
// wait ( 2 2$30 ) ;
3604: LD_INT 5250
3606: PPUSH
3607: CALL_OW 67
// PrepareBurlak ;
3611: CALL 2167 0 0
// BurlakArmy ;
3615: CALL 2316 0 0
// end ;
3619: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3620: LD_INT 1
3622: PPUSH
3623: LD_EXP 18
3627: PPUSH
3628: CALL_OW 292
3632: IFFALSE 3791
3634: GO 3636
3636: DISABLE
// begin DialogueOn ;
3637: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3641: LD_EXP 18
3645: PPUSH
3646: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3650: LD_INT 22
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 25
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 25
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 69
3740: PPUSH
3741: LD_STRING D5-Sol1-1
3743: PPUSH
3744: LD_STRING D5-FSol1-1
3746: PPUSH
3747: CALL 6078 0 3
// Say ( JMM , D5-JMM-1 ) ;
3751: LD_EXP 1
3755: PPUSH
3756: LD_STRING D5-JMM-1
3758: PPUSH
3759: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DAmer-Bur-1
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING DAmer-JMM-1
3782: PPUSH
3783: CALL_OW 88
// DialogueOff ;
3787: CALL_OW 7
// end ;
3791: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3792: LD_INT 4
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 70
3809: IFFALSE 4208
3811: GO 3813
3813: DISABLE
3814: LD_INT 0
3816: PPUSH
// begin enable ;
3817: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: LD_INT 4
3825: PPUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 70
3840: PUSH
3841: FOR_IN
3842: IFFALSE 4206
// begin if i = Burlak or i = Masha then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_EXP 17
3853: EQUAL
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: LD_EXP 18
3864: EQUAL
3865: OR
3866: IFFALSE 4013
// begin RemoveUnit ( i ) ;
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 64
// DialogueOn ;
3877: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D5a-JMM-1
3888: PPUSH
3889: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3893: LD_INT 22
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 26
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 25
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PPUSH
3984: LD_STRING D5a-Sol1-1
3986: PPUSH
3987: LD_STRING D5-FSol1-1
3989: PPUSH
3990: CALL 6078 0 3
// DialogueOff ;
3994: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3998: LD_STRING M2b
4000: PPUSH
4001: CALL_OW 337
// spawnBurlak = 0 ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 263
4036: PUSH
4037: LD_INT 1
4039: EQUAL
4040: AND
4041: IFFALSE 4169
// begin case IsDrivenBy ( i ) of Gnyevko :
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 311
4052: PUSH
4053: LD_EXP 19
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4076
4063: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4064: LD_INT 1
4066: PPUSH
4067: LD_STRING 13_Gnyevko_1
4069: PPUSH
4070: CALL_OW 39
4074: GO 4169
4076: LD_EXP 20
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4099
4086: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4087: LD_INT 1
4089: PPUSH
4090: LD_STRING 13_Titov_1
4092: PPUSH
4093: CALL_OW 39
4097: GO 4169
4099: LD_EXP 21
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4122
4109: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4110: LD_INT 1
4112: PPUSH
4113: LD_STRING 13_Xavier_1
4115: PPUSH
4116: CALL_OW 39
4120: GO 4169
4122: LD_EXP 22
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4145
4132: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4133: LD_INT 1
4135: PPUSH
4136: LD_STRING 13_Belkov_1
4138: PPUSH
4139: CALL_OW 39
4143: GO 4169
4145: LD_EXP 23
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4168
4155: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4156: LD_INT 1
4158: PPUSH
4159: LD_STRING 13_Lipshchin_1
4161: PPUSH
4162: CALL_OW 39
4166: GO 4169
4168: POP
// end ; if GetWeapon ( i ) = 49 then
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 264
4178: PUSH
4179: LD_INT 49
4181: EQUAL
4182: IFFALSE 4195
// DestroyUnit ( i ) else
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 65
4193: GO 4204
// RemoveUnit ( i ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 64
// end ;
4204: GO 3841
4206: POP
4207: POP
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4211: LD_EXP 17
4215: PPUSH
4216: CALL_OW 302
4220: PUSH
4221: LD_EXP 18
4225: PPUSH
4226: CALL_OW 256
4230: PUSH
4231: LD_INT 500
4233: LESS
4234: AND
4235: PUSH
4236: LD_EXP 18
4240: PPUSH
4241: CALL_OW 255
4245: PUSH
4246: LD_INT 7
4248: EQUAL
4249: AND
4250: IFFALSE 4270
4252: GO 4254
4254: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4255: LD_EXP 17
4259: PPUSH
4260: LD_INT 107
4262: PPUSH
4263: LD_INT 118
4265: PPUSH
4266: CALL_OW 111
4270: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4271: LD_EXP 17
4275: PPUSH
4276: CALL_OW 301
4280: PUSH
4281: LD_EXP 27
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4423
4292: GO 4294
4294: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4295: LD_EXP 1
4299: PPUSH
4300: LD_STRING D5b-JMM-1
4302: PPUSH
4303: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PPUSH
4398: LD_STRING D5b-Sol1-1
4400: PPUSH
4401: LD_STRING 
4403: PPUSH
4404: CALL 6078 0 3
// ChangeMissionObjectives ( M2a ) ;
4408: LD_STRING M2a
4410: PPUSH
4411: CALL_OW 337
// burlakStatus = 1 ;
4415: LD_ADDR_EXP 28
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// end ;
4423: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4424: LD_EXP 2
4428: PPUSH
4429: CALL_OW 301
4433: IFFALSE 4570
4435: GO 4437
4437: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_STRING D6-JMM-1
4445: PPUSH
4446: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_STRING D6-Sol1-1
4543: PPUSH
4544: LD_STRING 
4546: PPUSH
4547: CALL 6078 0 3
// Say ( JMM , D6-JMM-2 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D6-JMM-2
4558: PPUSH
4559: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4563: LD_STRING M1a
4565: PPUSH
4566: CALL_OW 337
// end ;
4570: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4571: LD_INT 25
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 321
4581: PUSH
4582: LD_INT 2
4584: EQUAL
4585: IFFALSE 4602
4587: GO 4589
4589: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4590: LD_EXP 2
4594: PPUSH
4595: LD_STRING D6-Huck-2
4597: PPUSH
4598: CALL_OW 88
// end ;
4602: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 34
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 8
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: IFFALSE 4845
4655: GO 4657
4657: DISABLE
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
// begin enable ;
4662: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 22
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 57
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 70
4724: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 5
4732: PPUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 57
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4787: LD_VAR 0 1
4791: PUSH
4792: LD_INT 0
4794: GREATER
4795: PUSH
4796: LD_VAR 0 2
4800: PUSH
4801: LD_INT 0
4803: GREATER
4804: AND
4805: IFFALSE 4845
// begin disable ;
4807: DISABLE
// DialogueOn ;
4808: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_STRING D7-JMM-1
4819: PPUSH
4820: CALL_OW 88
// DialogueOff ;
4824: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4828: LD_STRING M4
4830: PPUSH
4831: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4835: LD_INT 5
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 424
// end ; end ;
4845: PPOPN 2
4847: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 25
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 37
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: AND
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: AND
4903: IFFALSE 4968
4905: GO 4907
4907: DISABLE
// begin enable ;
4908: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4909: LD_ADDR_EXP 26
4913: PUSH
4914: LD_INT 6
4916: PPUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 25
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4950: LD_INT 6
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 424
// radationResearched = 1 ;
4960: LD_ADDR_EXP 29
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ;
4968: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4969: LD_EXP 26
4973: PPUSH
4974: CALL_OW 301
4978: PUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5024
4990: GO 4992
4992: DISABLE
// begin enable ;
4993: ENABLE
// radationResearched = 0 ;
4994: LD_ADDR_EXP 29
4998: PUSH
4999: LD_INT 0
5001: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5002: LD_INT 6
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5012: LD_EXP 1
5016: PPUSH
5017: LD_STRING D9a-JMM-1
5019: PPUSH
5020: CALL_OW 88
// end ; end_of_file
5024: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5025: LD_VAR 0 5
5029: PUSH
5030: LD_INT 8
5032: EQUAL
5033: PUSH
5034: LD_EXP 35
5038: PUSH
5039: LD_INT 0
5041: EQUAL
5042: AND
5043: IFFALSE 5096
// begin eventVar1 = 1 ;
5045: LD_ADDR_EXP 35
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// DialogueOn ;
5053: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D6a-JMM-1
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING D6a-Pow-1
5076: PPUSH
5077: CALL_OW 94
// DialogueOff ;
5081: CALL_OW 7
// wait ( 3 3$0 ) ;
5085: LD_INT 6300
5087: PPUSH
5088: CALL_OW 67
// PowellSupport ;
5092: CALL 1939 0 0
// end ; end ;
5096: PPOPN 5
5098: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5099: LD_VAR 0 1
5103: PUSH
5104: LD_EXP 1
5108: EQUAL
5109: IFFALSE 5118
// YouLost ( JMM ) ;
5111: LD_STRING JMM
5113: PPUSH
5114: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 264
5127: PUSH
5128: LD_INT 31
5130: EQUAL
5131: IFFALSE 5147
// achivCounter := achivCounter + 1 ;
5133: LD_ADDR_EXP 41
5137: PUSH
5138: LD_EXP 41
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 1
5159: NONEQUAL
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 247
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: IFFALSE 5191
// destroyCounter := destroyCounter + 1 ;
5177: LD_ADDR_EXP 42
5181: PUSH
5182: LD_EXP 42
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// end ;
5191: PPOPN 1
5193: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5194: LD_VAR 0 2
5198: PUSH
5199: LD_EXP 18
5203: EQUAL
5204: IFFALSE 5213
// SetAchievement ( ACH_MASHA ) ;
5206: LD_STRING ACH_MASHA
5208: PPUSH
5209: CALL_OW 543
// end ;
5213: PPOPN 4
5215: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 264
5225: PUSH
5226: LD_INT 8
5228: EQUAL
5229: PUSH
5230: LD_EXP 36
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5308
// begin eventVar2 = 1 ;
5241: LD_ADDR_EXP 36
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// DialogueOn ;
5249: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_STRING D6b-JMM-1
5260: PPUSH
5261: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5265: LD_EXP 15
5269: PPUSH
5270: LD_STRING D6b-Pow-1
5272: PPUSH
5273: CALL_OW 94
// DialogueOff ;
5277: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5281: LD_INT 5
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5301: LD_STRING M3
5303: PPUSH
5304: CALL_OW 337
// end ; end ;
5308: PPOPN 2
5310: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: LD_INT 5
5323: PPUSH
5324: CALL_OW 309
5328: PUSH
5329: LD_EXP 37
5333: PUSH
5334: LD_INT 0
5336: EQUAL
5337: AND
5338: IFFALSE 5567
// begin eventVar3 = 1 ;
5340: LD_ADDR_EXP 37
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5348: LD_INT 175
5350: PPUSH
5351: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5355: LD_INT 7
5357: PPUSH
5358: LD_INT 22
5360: PUSH
5361: LD_INT 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 21
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 34
5380: PUSH
5381: LD_INT 11
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: GREATER
5401: IFFALSE 5420
// begin radarOnSpot = 1 ;
5403: LD_ADDR_EXP 30
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5411: LD_STRING M3a
5413: PPUSH
5414: CALL_OW 337
// end else
5418: GO 5427
// begin ChangeMissionObjectives ( M3b ) ;
5420: LD_STRING M3b
5422: PPUSH
5423: CALL_OW 337
// end ; DialogueOn ;
5427: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D8-Huck-1
5438: PPUSH
5439: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D8-JMM-1
5450: PPUSH
5451: CALL_OW 88
// if IsOk ( Stevens ) then
5455: LD_EXP 2
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5526
// begin Say ( Stevens , D8-Huck-2 ) ;
5466: LD_EXP 2
5470: PPUSH
5471: LD_STRING D8-Huck-2
5473: PPUSH
5474: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5478: LD_EXP 1
5482: PPUSH
5483: LD_STRING D8-JMM-2
5485: PPUSH
5486: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5490: LD_EXP 2
5494: PPUSH
5495: LD_STRING D8-Huck-3
5497: PPUSH
5498: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5502: LD_EXP 1
5506: PPUSH
5507: LD_STRING D8-JMM-3
5509: PPUSH
5510: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5514: LD_EXP 2
5518: PPUSH
5519: LD_STRING D8-Huck-4
5521: PPUSH
5522: CALL_OW 88
// end ; DialogueOff ;
5526: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5540: LD_INT 7
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5550: LD_INT 6
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5560: LD_STRING M5
5562: PPUSH
5563: CALL_OW 337
// end ; end ;
5567: PPOPN 3
5569: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5570: LD_EXP 26
5574: PPUSH
5575: CALL_OW 302
5579: PUSH
5580: LD_VAR 0 2
5584: PUSH
5585: LD_EXP 26
5589: EQUAL
5590: AND
5591: PUSH
5592: LD_EXP 38
5596: PUSH
5597: LD_INT 0
5599: EQUAL
5600: AND
5601: PUSH
5602: LD_EXP 37
5606: PUSH
5607: LD_INT 1
5609: EQUAL
5610: AND
5611: IFFALSE 5657
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5613: LD_VAR 0 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 268
5625: PUSH
5626: LD_INT 11
5628: EQUAL
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 268
5642: PUSH
5643: LD_INT 11
5645: EQUAL
5646: OR
5647: IFFALSE 5657
// eventVar4 = 1 ;
5649: LD_ADDR_EXP 38
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// end ;
5657: PPOPN 2
5659: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// begin if GetNation ( unit ) = 2 then
5664: LD_VAR 0 1
5668: PPUSH
5669: CALL_OW 248
5673: PUSH
5674: LD_INT 2
5676: EQUAL
5677: IFFALSE 5955
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5679: LD_ADDR_EXP 32
5683: PUSH
5684: LD_EXP 32
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: ST_TO_ADDR
// for i := 1 to sibDeposits do
5693: LD_ADDR_VAR 0 4
5697: PUSH
5698: DOUBLE
5699: LD_INT 1
5701: DEC
5702: ST_TO_ADDR
5703: LD_EXP 31
5707: PUSH
5708: FOR_TO
5709: IFFALSE 5811
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5711: LD_EXP 31
5715: PUSH
5716: LD_VAR 0 4
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PUSH
5726: LD_VAR 0 2
5730: EQUAL
5731: PUSH
5732: LD_EXP 31
5736: PUSH
5737: LD_VAR 0 4
5741: ARRAY
5742: PUSH
5743: LD_INT 2
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 3
5751: EQUAL
5752: AND
5753: IFFALSE 5809
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5755: LD_ADDR_EXP 31
5759: PUSH
5760: LD_EXP 31
5764: PPUSH
5765: LD_VAR 0 4
5769: PUSH
5770: EMPTY
5771: LIST
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: CALL_OW 3
5781: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5782: LD_ADDR_EXP 31
5786: PUSH
5787: LD_EXP 31
5791: PPUSH
5792: LD_VAR 0 4
5796: PUSH
5797: EMPTY
5798: LIST
5799: PUSH
5800: LD_INT 2
5802: ARRAY
5803: PPUSH
5804: CALL_OW 3
5808: ST_TO_ADDR
// end ;
5809: GO 5708
5811: POP
5812: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5813: LD_EXP 39
5817: PUSH
5818: LD_INT 0
5820: EQUAL
5821: PUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: IN
5852: AND
5853: IFFALSE 5955
// begin eventVar5 = 1 ;
5855: LD_ADDR_EXP 39
5859: PUSH
5860: LD_INT 1
5862: ST_TO_ADDR
// DialogueOn ;
5863: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5867: LD_EXP 2
5871: PPUSH
5872: LD_STRING D4-Sci1-1
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4-JMM-1
5886: PPUSH
5887: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5891: LD_EXP 2
5895: PPUSH
5896: LD_STRING D4-Sci1-2
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4-JMM-2
5910: PPUSH
5911: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5915: LD_EXP 2
5919: PPUSH
5920: LD_STRING D4-Sci1-3
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4-JMM-3
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4-JMM-3a
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// end ; end ; end ;
5955: PPOPN 5
5957: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5958: LD_VAR 0 1
5962: PPUSH
5963: CALL_OW 255
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 266
5981: PUSH
5982: LD_INT 0
5984: EQUAL
5985: AND
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: AND
6049: IFFALSE 6063
// SetBName ( building , omega ) ;
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_STRING omega
6058: PPUSH
6059: CALL_OW 500
// end ;
6063: PPOPN 2
6065: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL 27013 0 1
// end ; end_of_file
6075: PPOPN 1
6077: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_EXP 1
6097: PUSH
6098: LD_EXP 2
6102: PUSH
6103: LD_EXP 3
6107: PUSH
6108: LD_EXP 4
6112: PUSH
6113: LD_EXP 5
6117: PUSH
6118: LD_EXP 6
6122: PUSH
6123: LD_EXP 7
6127: PUSH
6128: LD_EXP 8
6132: PUSH
6133: LD_EXP 9
6137: PUSH
6138: LD_EXP 10
6142: PUSH
6143: LD_EXP 11
6147: PUSH
6148: LD_EXP 12
6152: PUSH
6153: LD_EXP 13
6157: PUSH
6158: LD_EXP 14
6162: PUSH
6163: LD_EXP 15
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: DIFF
6185: ST_TO_ADDR
// if not characters then
6186: LD_VAR 0 1
6190: NOT
6191: IFFALSE 6195
// exit ;
6193: GO 6274
// speaker := characters [ rand ( 1 , characters ) ] ;
6195: LD_ADDR_VAR 0 6
6199: PUSH
6200: LD_VAR 0 1
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6219: LD_VAR 0 6
6223: PPUSH
6224: CALL_OW 258
6228: PUSH
6229: LD_INT 1
6231: EQUAL
6232: IFFALSE 6250
// Say ( speaker , dialogMID ) else
6234: LD_VAR 0 6
6238: PPUSH
6239: LD_VAR 0 2
6243: PPUSH
6244: CALL_OW 88
6248: GO 6264
// Say ( speaker , dialogFID ) ;
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: CALL_OW 88
// result := speaker ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 6
6273: ST_TO_ADDR
// end ;
6274: LD_VAR 0 4
6278: RET
// export function PrepareDifficulty ; begin
6279: LD_INT 0
6281: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6282: LD_INT 5
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// if difficulty = 1 then
6295: LD_OWVAR 67
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6422
// begin SetTech ( 66 , 8 , state_researched ) ;
6305: LD_INT 66
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 2
6313: PPUSH
6314: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6318: LD_INT 67
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6331: LD_INT 68
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6344: LD_INT 51
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6357: LD_INT 52
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6370: LD_INT 53
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 0
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6383: LD_INT 60
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6396: LD_INT 61
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6409: LD_INT 62
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 322
// end ; if difficulty = 2 then
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 2
6429: EQUAL
6430: IFFALSE 6549
// begin SetTech ( 66 , 8 , state_researched ) ;
6432: LD_INT 66
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 2
6440: PPUSH
6441: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6445: LD_INT 67
6447: PPUSH
6448: LD_INT 8
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6458: LD_INT 68
6460: PPUSH
6461: LD_INT 8
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6471: LD_INT 51
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6484: LD_INT 52
6486: PPUSH
6487: LD_INT 8
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6497: LD_INT 53
6499: PPUSH
6500: LD_INT 8
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6510: LD_INT 60
6512: PPUSH
6513: LD_INT 8
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6523: LD_INT 61
6525: PPUSH
6526: LD_INT 8
6528: PPUSH
6529: LD_INT 2
6531: PPUSH
6532: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6536: LD_INT 62
6538: PPUSH
6539: LD_INT 8
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 322
// end ; if difficulty >= 3 then
6549: LD_OWVAR 67
6553: PUSH
6554: LD_INT 3
6556: GREATEREQUAL
6557: IFFALSE 6676
// begin SetTech ( 66 , 8 , state_researched ) ;
6559: LD_INT 66
6561: PPUSH
6562: LD_INT 8
6564: PPUSH
6565: LD_INT 2
6567: PPUSH
6568: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6572: LD_INT 67
6574: PPUSH
6575: LD_INT 8
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6585: LD_INT 68
6587: PPUSH
6588: LD_INT 8
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 8
6603: PPUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6611: LD_INT 52
6613: PPUSH
6614: LD_INT 8
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6624: LD_INT 53
6626: PPUSH
6627: LD_INT 8
6629: PPUSH
6630: LD_INT 2
6632: PPUSH
6633: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6637: LD_INT 60
6639: PPUSH
6640: LD_INT 8
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6650: LD_INT 61
6652: PPUSH
6653: LD_INT 8
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6663: LD_INT 62
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: LD_INT 0
6671: PPUSH
6672: CALL_OW 322
// end ; end ;
6676: LD_VAR 0 1
6680: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6689: LD_ADDR_VAR 0 7
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 25
6708: PUSH
6709: LD_INT 9
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6725: LD_ADDR_VAR 0 8
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 12
6783: ST_TO_ADDR
// for i = 1 to list do
6784: LD_ADDR_VAR 0 6
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 7
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6982
// for ta in filter do
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_VAR 0 8
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6978
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_VAR 0 6
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: CALL_OW 296
6835: PUSH
6836: LD_INT 13
6838: LESSEQUAL
6839: IFFALSE 6976
// begin case c of 1 :
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 1
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6892
6854: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6855: LD_VAR 0 7
6859: PUSH
6860: LD_VAR 0 6
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 4
6870: PPUSH
6871: CALL_OW 250
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 251
6885: PPUSH
6886: CALL_OW 154
6890: GO 6976
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6964
6900: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6901: LD_VAR 0 7
6905: PUSH
6906: LD_VAR 0 6
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 250
6921: PUSH
6922: LD_INT 1
6924: NEG
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 12
6933: PLUS
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 251
6944: PUSH
6945: LD_INT 1
6947: NEG
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 12
6956: PLUS
6957: PPUSH
6958: CALL_OW 153
6962: GO 6976
6964: LD_INT 3
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6975
6972: POP
// ; end ;
6973: GO 6976
6975: POP
// end ; end ;
6976: GO 6812
6978: POP
6979: POP
6980: GO 6799
6982: POP
6983: POP
// end ;
6984: LD_VAR 0 3
6988: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// for i in charactersList do
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7022
// SaveCharacters ( i , ident ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 38
7020: GO 7003
7022: POP
7023: POP
// end ;
7024: LD_VAR 0 3
7028: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// for i = 1 to medicCount do
7042: LD_ADDR_VAR 0 13
7046: PUSH
7047: DOUBLE
7048: LD_INT 1
7050: DEC
7051: ST_TO_ADDR
7052: LD_VAR 0 7
7056: PUSH
7057: FOR_TO
7058: IFFALSE 7140
// begin uc_side = side ;
7060: LD_ADDR_OWVAR 20
7064: PUSH
7065: LD_VAR 0 1
7069: ST_TO_ADDR
// uc_nation = nation ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// hc_name =  ;
7080: LD_ADDR_OWVAR 26
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// hc_gallery =  ;
7088: LD_ADDR_OWVAR 33
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7096: LD_INT 0
7098: PPUSH
7099: LD_INT 4
7101: PPUSH
7102: LD_VAR 0 8
7106: PPUSH
7107: CALL_OW 380
// un = CreateHuman ;
7111: LD_ADDR_VAR 0 15
7115: PUSH
7116: CALL_OW 44
7120: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7121: LD_VAR 0 15
7125: PPUSH
7126: LD_VAR 0 9
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 49
// end ;
7138: GO 7057
7140: POP
7141: POP
// for i = 1 to soldierCount do
7142: LD_ADDR_VAR 0 13
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_VAR 0 3
7156: PUSH
7157: FOR_TO
7158: IFFALSE 7240
// begin uc_side = side ;
7160: LD_ADDR_OWVAR 20
7164: PUSH
7165: LD_VAR 0 1
7169: ST_TO_ADDR
// uc_nation = nation ;
7170: LD_ADDR_OWVAR 21
7174: PUSH
7175: LD_VAR 0 2
7179: ST_TO_ADDR
// hc_name =  ;
7180: LD_ADDR_OWVAR 26
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_gallery =  ;
7188: LD_ADDR_OWVAR 33
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_VAR 0 8
7206: PPUSH
7207: CALL_OW 380
// un = CreateHuman ;
7211: LD_ADDR_VAR 0 15
7215: PUSH
7216: CALL_OW 44
7220: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7221: LD_VAR 0 15
7225: PPUSH
7226: LD_VAR 0 9
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 49
// end ;
7238: GO 7157
7240: POP
7241: POP
// for i = 1 to sniperCount do
7242: LD_ADDR_VAR 0 13
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7340
// begin uc_side = side ;
7260: LD_ADDR_OWVAR 20
7264: PUSH
7265: LD_VAR 0 1
7269: ST_TO_ADDR
// uc_nation = nation ;
7270: LD_ADDR_OWVAR 21
7274: PUSH
7275: LD_VAR 0 2
7279: ST_TO_ADDR
// hc_name =  ;
7280: LD_ADDR_OWVAR 26
7284: PUSH
7285: LD_STRING 
7287: ST_TO_ADDR
// hc_gallery =  ;
7288: LD_ADDR_OWVAR 33
7292: PUSH
7293: LD_STRING 
7295: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7296: LD_INT 0
7298: PPUSH
7299: LD_INT 5
7301: PPUSH
7302: LD_VAR 0 8
7306: PPUSH
7307: CALL_OW 380
// un = CreateHuman ;
7311: LD_ADDR_VAR 0 15
7315: PUSH
7316: CALL_OW 44
7320: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7321: LD_VAR 0 15
7325: PPUSH
7326: LD_VAR 0 9
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 49
// end ;
7338: GO 7257
7340: POP
7341: POP
// for i = 1 to bazookCount do
7342: LD_ADDR_VAR 0 13
7346: PUSH
7347: DOUBLE
7348: LD_INT 1
7350: DEC
7351: ST_TO_ADDR
7352: LD_VAR 0 5
7356: PUSH
7357: FOR_TO
7358: IFFALSE 7440
// begin uc_side = side ;
7360: LD_ADDR_OWVAR 20
7364: PUSH
7365: LD_VAR 0 1
7369: ST_TO_ADDR
// uc_nation = nation ;
7370: LD_ADDR_OWVAR 21
7374: PUSH
7375: LD_VAR 0 2
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_gallery =  ;
7388: LD_ADDR_OWVAR 33
7392: PUSH
7393: LD_STRING 
7395: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7396: LD_INT 0
7398: PPUSH
7399: LD_INT 9
7401: PPUSH
7402: LD_VAR 0 8
7406: PPUSH
7407: CALL_OW 380
// un = CreateHuman ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: CALL_OW 44
7420: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7421: LD_VAR 0 15
7425: PPUSH
7426: LD_VAR 0 9
7430: PPUSH
7431: LD_INT 0
7433: PPUSH
7434: CALL_OW 49
// end ;
7438: GO 7357
7440: POP
7441: POP
// for i = 1 to mortalCount do
7442: LD_ADDR_VAR 0 13
7446: PUSH
7447: DOUBLE
7448: LD_INT 1
7450: DEC
7451: ST_TO_ADDR
7452: LD_VAR 0 6
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7540
// begin uc_side = side ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_VAR 0 1
7469: ST_TO_ADDR
// uc_nation = nation ;
7470: LD_ADDR_OWVAR 21
7474: PUSH
7475: LD_VAR 0 2
7479: ST_TO_ADDR
// hc_name =  ;
7480: LD_ADDR_OWVAR 26
7484: PUSH
7485: LD_STRING 
7487: ST_TO_ADDR
// hc_gallery =  ;
7488: LD_ADDR_OWVAR 33
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7496: LD_INT 0
7498: PPUSH
7499: LD_INT 8
7501: PPUSH
7502: LD_VAR 0 8
7506: PPUSH
7507: CALL_OW 380
// un = CreateHuman ;
7511: LD_ADDR_VAR 0 15
7515: PUSH
7516: CALL_OW 44
7520: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 9
7530: PPUSH
7531: LD_INT 0
7533: PPUSH
7534: CALL_OW 49
// end ;
7538: GO 7457
7540: POP
7541: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7542: LD_ADDR_VAR 0 17
7546: PUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: ST_TO_ADDR
// for i in medic_list do
7578: LD_ADDR_VAR 0 13
7582: PUSH
7583: LD_VAR 0 17
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7624
// if GetTag ( i ) = 1 then
7591: LD_VAR 0 13
7595: PPUSH
7596: CALL_OW 110
7600: PUSH
7601: LD_INT 1
7603: EQUAL
7604: IFFALSE 7622
// medic_list := medic_list diff i ;
7606: LD_ADDR_VAR 0 17
7610: PUSH
7611: LD_VAR 0 17
7615: PUSH
7616: LD_VAR 0 13
7620: DIFF
7621: ST_TO_ADDR
7622: GO 7588
7624: POP
7625: POP
// for i in medic_list do
7626: LD_ADDR_VAR 0 13
7630: PUSH
7631: LD_VAR 0 17
7635: PUSH
7636: FOR_IN
7637: IFFALSE 7655
// ComMoveToArea ( i , healArea ) ;
7639: LD_VAR 0 13
7643: PPUSH
7644: LD_VAR 0 10
7648: PPUSH
7649: CALL_OW 113
7653: GO 7636
7655: POP
7656: POP
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7664: LD_ADDR_VAR 0 16
7668: PUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 550
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 250
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7725: LD_ADDR_VAR 0 18
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_VAR 0 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// if medicCount > 0 then
7812: LD_VAR 0 7
7816: PUSH
7817: LD_INT 0
7819: GREATER
7820: IFFALSE 7894
// begin if damageUnit_list > 0 then
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 0
7829: GREATER
7830: IFFALSE 7894
// begin for i in damageUnit_list do
7832: LD_ADDR_VAR 0 13
7836: PUSH
7837: LD_VAR 0 16
7841: PUSH
7842: FOR_IN
7843: IFFALSE 7892
// begin ComMoveToArea ( i , healArea ) ;
7845: LD_VAR 0 13
7849: PPUSH
7850: LD_VAR 0 10
7854: PPUSH
7855: CALL_OW 113
// for j in medic_list do
7859: LD_ADDR_VAR 0 14
7863: PUSH
7864: LD_VAR 0 17
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7888
// AddComHeal ( j , i ) ;
7872: LD_VAR 0 14
7876: PPUSH
7877: LD_VAR 0 13
7881: PPUSH
7882: CALL_OW 188
7886: GO 7869
7888: POP
7889: POP
// end ;
7890: GO 7842
7892: POP
7893: POP
// end ; end ; for i in soldiersOK_list do
7894: LD_ADDR_VAR 0 13
7898: PUSH
7899: LD_VAR 0 18
7903: PUSH
7904: FOR_IN
7905: IFFALSE 8081
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7907: LD_ADDR_VAR 0 21
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_VAR 0 11
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_VAR 0 13
7933: PPUSH
7934: CALL_OW 74
7938: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7939: LD_ADDR_VAR 0 22
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 11
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 59
7961: PUSH
7962: EMPTY
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 21
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PPUSH
8003: LD_VAR 0 13
8007: PPUSH
8008: CALL_OW 74
8012: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8013: LD_VAR 0 13
8017: PPUSH
8018: LD_VAR 0 21
8022: PPUSH
8023: CALL_OW 296
8027: PUSH
8028: LD_INT 8
8030: PLUS
8031: PUSH
8032: LD_VAR 0 13
8036: PPUSH
8037: LD_VAR 0 22
8041: PPUSH
8042: CALL_OW 296
8046: LESS
8047: IFFALSE 8065
// begin ComAttackUnit ( i , target1 ) ;
8049: LD_VAR 0 13
8053: PPUSH
8054: LD_VAR 0 21
8058: PPUSH
8059: CALL_OW 115
// end else
8063: GO 8079
// begin ComAttackUnit ( i , target2 ) ;
8065: LD_VAR 0 13
8069: PPUSH
8070: LD_VAR 0 22
8074: PPUSH
8075: CALL_OW 115
// end ; end ;
8079: GO 7904
8081: POP
8082: POP
// until soldiersOK_list = [ ] ;
8083: LD_VAR 0 18
8087: PUSH
8088: EMPTY
8089: EQUAL
8090: IFFALSE 7657
// end ;
8092: LD_VAR 0 12
8096: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
// amChassisTab = [ ] ;
8110: LD_ADDR_VAR 0 19
8114: PUSH
8115: EMPTY
8116: ST_TO_ADDR
// arChassisTab = [ ] ;
8117: LD_ADDR_VAR 0 18
8121: PUSH
8122: EMPTY
8123: ST_TO_ADDR
// ruChassisTab = [ ] ;
8124: LD_ADDR_VAR 0 17
8128: PUSH
8129: EMPTY
8130: ST_TO_ADDR
// for i = 1 to vehCount do
8131: LD_ADDR_VAR 0 13
8135: PUSH
8136: DOUBLE
8137: LD_INT 1
8139: DEC
8140: ST_TO_ADDR
8141: LD_VAR 0 3
8145: PUSH
8146: FOR_TO
8147: IFFALSE 9571
// begin wait ( 0 0$01 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// if nation = 1 then
8156: LD_VAR 0 5
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 8645
// begin uc_side = side ;
8166: LD_ADDR_OWVAR 20
8170: PUSH
8171: LD_VAR 0 2
8175: ST_TO_ADDR
// uc_nation = nation ;
8176: LD_ADDR_OWVAR 21
8180: PUSH
8181: LD_VAR 0 5
8185: ST_TO_ADDR
// vc_engine = vehengine ;
8186: LD_ADDR_OWVAR 39
8190: PUSH
8191: LD_VAR 0 6
8195: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8196: LD_ADDR_OWVAR 40
8200: PUSH
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 10
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// for j = 1 to AMWeapon do
8220: LD_ADDR_VAR 0 14
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_VAR 0 10
8234: PUSH
8235: FOR_TO
8236: IFFALSE 8537
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 3
8266: EQUAL
8267: OR
8268: IFFALSE 8321
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8270: LD_ADDR_VAR 0 19
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8297: LD_ADDR_OWVAR 37
8301: PUSH
8302: LD_VAR 0 19
8306: PUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 19
8314: PPUSH
8315: CALL_OW 12
8319: ARRAY
8320: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8321: LD_VAR 0 10
8325: PUSH
8326: LD_VAR 0 14
8330: ARRAY
8331: PUSH
8332: LD_INT 4
8334: EQUAL
8335: PUSH
8336: LD_VAR 0 10
8340: PUSH
8341: LD_VAR 0 14
8345: ARRAY
8346: PUSH
8347: LD_INT 5
8349: EQUAL
8350: OR
8351: PUSH
8352: LD_VAR 0 10
8356: PUSH
8357: LD_VAR 0 14
8361: ARRAY
8362: PUSH
8363: LD_INT 9
8365: EQUAL
8366: OR
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_VAR 0 14
8377: ARRAY
8378: PUSH
8379: LD_INT 11
8381: EQUAL
8382: OR
8383: PUSH
8384: LD_VAR 0 10
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PUSH
8395: LD_INT 7
8397: EQUAL
8398: OR
8399: IFFALSE 8448
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8401: LD_ADDR_VAR 0 19
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8424: LD_ADDR_OWVAR 37
8428: PUSH
8429: LD_VAR 0 19
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 19
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8448: LD_VAR 0 10
8452: PUSH
8453: LD_VAR 0 14
8457: ARRAY
8458: PUSH
8459: LD_INT 8
8461: EQUAL
8462: PUSH
8463: LD_VAR 0 10
8467: PUSH
8468: LD_VAR 0 14
8472: ARRAY
8473: PUSH
8474: LD_INT 6
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 10
8483: PUSH
8484: LD_VAR 0 14
8488: ARRAY
8489: PUSH
8490: LD_INT 10
8492: EQUAL
8493: OR
8494: IFFALSE 8535
// begin amChassisTab = [ 4 , 5 ] ;
8496: LD_ADDR_VAR 0 19
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8511: LD_ADDR_OWVAR 37
8515: PUSH
8516: LD_VAR 0 19
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 19
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
// end ; end ;
8535: GO 8235
8537: POP
8538: POP
// veh = CreateVehicle ;
8539: LD_ADDR_VAR 0 16
8543: PUSH
8544: CALL_OW 45
8548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8549: LD_VAR 0 16
8553: PPUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 49
// if vc_control = 1 then
8566: LD_OWVAR 38
8570: PUSH
8571: LD_INT 1
8573: EQUAL
8574: IFFALSE 8631
// begin hc_gallery =  ;
8576: LD_ADDR_OWVAR 33
8580: PUSH
8581: LD_STRING 
8583: ST_TO_ADDR
// hc_name =  ;
8584: LD_ADDR_OWVAR 26
8588: PUSH
8589: LD_STRING 
8591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8592: LD_INT 0
8594: PPUSH
8595: LD_INT 3
8597: PPUSH
8598: LD_VAR 0 4
8602: PPUSH
8603: CALL_OW 380
// un = CreateHuman ;
8607: LD_ADDR_VAR 0 15
8611: PUSH
8612: CALL_OW 44
8616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8617: LD_VAR 0 15
8621: PPUSH
8622: LD_VAR 0 16
8626: PPUSH
8627: CALL_OW 52
// end ; i = i + 1 ;
8631: LD_ADDR_VAR 0 13
8635: PUSH
8636: LD_VAR 0 13
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: ST_TO_ADDR
// end ; if nation = 2 then
8645: LD_VAR 0 5
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: IFFALSE 9155
// begin uc_side = side ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_VAR 0 2
8664: ST_TO_ADDR
// uc_nation = nation ;
8665: LD_ADDR_OWVAR 21
8669: PUSH
8670: LD_VAR 0 5
8674: ST_TO_ADDR
// vc_engine = vehengine ;
8675: LD_ADDR_OWVAR 39
8679: PUSH
8680: LD_VAR 0 6
8684: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 50
8719: PUSH
8720: EMPTY
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 69
8733: PUSH
8734: LD_INT 8
8736: LESSEQUAL
8737: IFFALSE 8765
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_VAR 0 7
8748: PUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 7
8756: PPUSH
8757: CALL_OW 12
8761: ARRAY
8762: ST_TO_ADDR
8763: GO 8773
// vc_control = control_apeman ;
8765: LD_ADDR_OWVAR 38
8769: PUSH
8770: LD_INT 5
8772: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8773: LD_ADDR_OWVAR 40
8777: PUSH
8778: LD_VAR 0 9
8782: PUSH
8783: LD_INT 1
8785: PPUSH
8786: LD_VAR 0 9
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: ST_TO_ADDR
// for j = 1 to ARWeapons do
8797: LD_ADDR_VAR 0 14
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 9
8811: PUSH
8812: FOR_TO
8813: IFFALSE 9047
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 14
8824: ARRAY
8825: PUSH
8826: LD_INT 24
8828: EQUAL
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PUSH
8841: LD_INT 22
8843: EQUAL
8844: OR
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 23
8859: EQUAL
8860: OR
8861: PUSH
8862: LD_VAR 0 9
8866: PUSH
8867: LD_VAR 0 14
8871: ARRAY
8872: PUSH
8873: LD_INT 30
8875: EQUAL
8876: OR
8877: IFFALSE 8926
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8879: LD_ADDR_VAR 0 18
8883: PUSH
8884: LD_INT 11
8886: PUSH
8887: LD_INT 12
8889: PUSH
8890: LD_INT 13
8892: PUSH
8893: LD_INT 14
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8902: LD_ADDR_OWVAR 37
8906: PUSH
8907: LD_VAR 0 18
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 18
8919: PPUSH
8920: CALL_OW 12
8924: ARRAY
8925: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8926: LD_VAR 0 9
8930: PUSH
8931: LD_VAR 0 14
8935: ARRAY
8936: PUSH
8937: LD_INT 29
8939: EQUAL
8940: PUSH
8941: LD_VAR 0 9
8945: PUSH
8946: LD_VAR 0 14
8950: ARRAY
8951: PUSH
8952: LD_INT 28
8954: EQUAL
8955: OR
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 14
8966: ARRAY
8967: PUSH
8968: LD_INT 27
8970: EQUAL
8971: OR
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: LD_VAR 0 14
8982: ARRAY
8983: PUSH
8984: LD_INT 26
8986: EQUAL
8987: OR
8988: PUSH
8989: LD_VAR 0 9
8993: PUSH
8994: LD_VAR 0 14
8998: ARRAY
8999: PUSH
9000: LD_INT 25
9002: EQUAL
9003: OR
9004: IFFALSE 9045
// begin arChassisTab = [ 13 , 14 ] ;
9006: LD_ADDR_VAR 0 18
9010: PUSH
9011: LD_INT 13
9013: PUSH
9014: LD_INT 14
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9021: LD_ADDR_OWVAR 37
9025: PUSH
9026: LD_VAR 0 18
9030: PUSH
9031: LD_INT 1
9033: PPUSH
9034: LD_VAR 0 18
9038: PPUSH
9039: CALL_OW 12
9043: ARRAY
9044: ST_TO_ADDR
// end ; end ;
9045: GO 8812
9047: POP
9048: POP
// veh = CreateVehicle ;
9049: LD_ADDR_VAR 0 16
9053: PUSH
9054: CALL_OW 45
9058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9059: LD_VAR 0 16
9063: PPUSH
9064: LD_VAR 0 1
9068: PPUSH
9069: LD_INT 0
9071: PPUSH
9072: CALL_OW 49
// if vc_control = 1 then
9076: LD_OWVAR 38
9080: PUSH
9081: LD_INT 1
9083: EQUAL
9084: IFFALSE 9141
// begin hc_gallery =  ;
9086: LD_ADDR_OWVAR 33
9090: PUSH
9091: LD_STRING 
9093: ST_TO_ADDR
// hc_name =  ;
9094: LD_ADDR_OWVAR 26
9098: PUSH
9099: LD_STRING 
9101: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9102: LD_INT 0
9104: PPUSH
9105: LD_INT 3
9107: PPUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 380
// un = CreateHuman ;
9117: LD_ADDR_VAR 0 15
9121: PUSH
9122: CALL_OW 44
9126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9127: LD_VAR 0 15
9131: PPUSH
9132: LD_VAR 0 16
9136: PPUSH
9137: CALL_OW 52
// end ; i = i + 1 ;
9141: LD_ADDR_VAR 0 13
9145: PUSH
9146: LD_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PLUS
9154: ST_TO_ADDR
// end ; if nation = 3 then
9155: LD_VAR 0 5
9159: PUSH
9160: LD_INT 3
9162: EQUAL
9163: IFFALSE 9569
// begin uc_side = side ;
9165: LD_ADDR_OWVAR 20
9169: PUSH
9170: LD_VAR 0 2
9174: ST_TO_ADDR
// uc_nation = nation ;
9175: LD_ADDR_OWVAR 21
9179: PUSH
9180: LD_VAR 0 5
9184: ST_TO_ADDR
// vc_engine = vehengine ;
9185: LD_ADDR_OWVAR 39
9189: PUSH
9190: LD_VAR 0 6
9194: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9195: LD_ADDR_OWVAR 38
9199: PUSH
9200: LD_VAR 0 7
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9219: LD_ADDR_OWVAR 40
9223: PUSH
9224: LD_VAR 0 8
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: ST_TO_ADDR
// for j = 1 to RuWeapons do
9243: LD_ADDR_VAR 0 14
9247: PUSH
9248: DOUBLE
9249: LD_INT 1
9251: DEC
9252: ST_TO_ADDR
9253: LD_VAR 0 8
9257: PUSH
9258: FOR_TO
9259: IFFALSE 9445
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9261: LD_VAR 0 8
9265: PUSH
9266: LD_VAR 0 14
9270: ARRAY
9271: PUSH
9272: LD_INT 42
9274: EQUAL
9275: PUSH
9276: LD_VAR 0 8
9280: PUSH
9281: LD_VAR 0 14
9285: ARRAY
9286: PUSH
9287: LD_INT 43
9289: EQUAL
9290: OR
9291: PUSH
9292: LD_VAR 0 8
9296: PUSH
9297: LD_VAR 0 14
9301: ARRAY
9302: PUSH
9303: LD_INT 44
9305: EQUAL
9306: OR
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: LD_VAR 0 14
9317: ARRAY
9318: PUSH
9319: LD_INT 45
9321: EQUAL
9322: OR
9323: PUSH
9324: LD_VAR 0 8
9328: PUSH
9329: LD_VAR 0 14
9333: ARRAY
9334: PUSH
9335: LD_INT 49
9337: EQUAL
9338: OR
9339: IFFALSE 9376
// begin ruChassisTab = [ 24 ] ;
9341: LD_ADDR_VAR 0 17
9345: PUSH
9346: LD_INT 24
9348: PUSH
9349: EMPTY
9350: LIST
9351: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9352: LD_ADDR_OWVAR 37
9356: PUSH
9357: LD_VAR 0 17
9361: PUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 17
9369: PPUSH
9370: CALL_OW 12
9374: ARRAY
9375: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9376: LD_VAR 0 8
9380: PUSH
9381: LD_VAR 0 14
9385: ARRAY
9386: PUSH
9387: LD_INT 46
9389: EQUAL
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_VAR 0 14
9400: ARRAY
9401: PUSH
9402: LD_INT 47
9404: EQUAL
9405: OR
9406: IFFALSE 9443
// begin ruChassisTab = [ 24 ] ;
9408: LD_ADDR_VAR 0 17
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: EMPTY
9417: LIST
9418: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9419: LD_ADDR_OWVAR 37
9423: PUSH
9424: LD_VAR 0 17
9428: PUSH
9429: LD_INT 1
9431: PPUSH
9432: LD_VAR 0 17
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// end ; end ;
9443: GO 9258
9445: POP
9446: POP
// veh = CreateVehicle ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 45
9456: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// if vc_control = 1 then
9474: LD_OWVAR 38
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 9569
// begin if uc_side = 8 then
9484: LD_OWVAR 20
9488: PUSH
9489: LD_INT 8
9491: EQUAL
9492: IFFALSE 9504
// uc_nation = 2 else
9494: LD_ADDR_OWVAR 21
9498: PUSH
9499: LD_INT 2
9501: ST_TO_ADDR
9502: GO 9514
// uc_nation = nation ;
9504: LD_ADDR_OWVAR 21
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// hc_gallery =  ;
9514: LD_ADDR_OWVAR 33
9518: PUSH
9519: LD_STRING 
9521: ST_TO_ADDR
// hc_name =  ;
9522: LD_ADDR_OWVAR 26
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9530: LD_INT 0
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 380
// un = CreateHuman ;
9545: LD_ADDR_VAR 0 15
9549: PUSH
9550: CALL_OW 44
9554: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9555: LD_VAR 0 15
9559: PPUSH
9560: LD_VAR 0 16
9564: PPUSH
9565: CALL_OW 52
// end ; end ; end ;
9569: GO 8146
9571: POP
9572: POP
// repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9580: LD_ADDR_VAR 0 20
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 24
9609: PUSH
9610: LD_INT 250
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 34
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 27
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 28
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 34
9662: PUSH
9663: LD_INT 29
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 46
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 34
9682: PUSH
9683: LD_INT 44
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 47
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if vehicleOK_list > 0 then
9733: LD_VAR 0 20
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9960
// begin for i in vehicleOK_list do
9743: LD_ADDR_VAR 0 13
9747: PUSH
9748: LD_VAR 0 20
9752: PUSH
9753: FOR_IN
9754: IFFALSE 9958
// begin if GetSide ( i ) <> side then
9756: LD_VAR 0 13
9760: PPUSH
9761: CALL_OW 255
9765: PUSH
9766: LD_VAR 0 2
9770: NONEQUAL
9771: IFFALSE 9784
// begin ComStop ( i ) ;
9773: LD_VAR 0 13
9777: PPUSH
9778: CALL_OW 141
// continue ;
9782: GO 9753
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9784: LD_ADDR_VAR 0 21
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 11
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PPUSH
9806: LD_VAR 0 13
9810: PPUSH
9811: CALL_OW 74
9815: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9816: LD_ADDR_VAR 0 22
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_VAR 0 11
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 59
9838: PUSH
9839: EMPTY
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 1
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 21
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PPUSH
9880: LD_VAR 0 13
9884: PPUSH
9885: CALL_OW 74
9889: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9890: LD_VAR 0 13
9894: PPUSH
9895: LD_VAR 0 21
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: PLUS
9908: PUSH
9909: LD_VAR 0 13
9913: PPUSH
9914: LD_VAR 0 22
9918: PPUSH
9919: CALL_OW 296
9923: LESS
9924: IFFALSE 9942
// begin ComAttackUnit ( i , target1 ) ;
9926: LD_VAR 0 13
9930: PPUSH
9931: LD_VAR 0 21
9935: PPUSH
9936: CALL_OW 115
// end else
9940: GO 9956
// begin ComAttackUnit ( i , target2 ) ;
9942: LD_VAR 0 13
9946: PPUSH
9947: LD_VAR 0 22
9951: PPUSH
9952: CALL_OW 115
// end ; end ;
9956: GO 9753
9958: POP
9959: POP
// end ; until vehicleOK_list = 0 ;
9960: LD_VAR 0 20
9964: PUSH
9965: LD_INT 0
9967: EQUAL
9968: IFFALSE 9573
// end ;
9970: LD_VAR 0 12
9974: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9975: LD_INT 0
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 34
10002: PUSH
10003: LD_INT 29
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: ST_TO_ADDR
// if veh_list = 0 then
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 0
10026: EQUAL
10027: IFFALSE 10031
// exit ;
10029: GO 10236
// if veh_list > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: IFFALSE 10236
// begin for i in veh_List do
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_VAR 0 6
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10054: LD_ADDR_VAR 0 7
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_VAR 0 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 24
10073: PUSH
10074: LD_INT 250
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 59
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: PPUSH
10124: CALL_OW 69
10128: PPUSH
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 74
10138: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 7
10148: PPUSH
10149: CALL_OW 115
// if not HasTask ( i ) then
10153: LD_VAR 0 4
10157: PPUSH
10158: CALL_OW 314
10162: NOT
10163: IFFALSE 10232
// begin wait ( 0 0$0.1 ) ;
10165: LD_INT 4
10167: PPUSH
10168: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10172: LD_ADDR_VAR 0 8
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 250
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: CALL_OW 74
10217: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 8
10227: PPUSH
10228: CALL_OW 115
// end ; end ;
10232: GO 10051
10234: POP
10235: POP
// end ; end ; end_of_file
10236: LD_VAR 0 3
10240: RET
// every 0 0$1 do
10241: GO 10243
10243: DISABLE
// begin enable ;
10244: ENABLE
// IntBazooka ( 7 , 1 ) ;
10245: LD_INT 7
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL 6681 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10255: LD_INT 8
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL 9975 0 2
// end ;
10265: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10266: LD_INT 22
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 50
10288: PUSH
10289: EMPTY
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 34
10297: PUSH
10298: LD_INT 46
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 44
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 34
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 34
10327: PUSH
10328: LD_INT 47
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PUSH
10353: LD_INT 0
10355: GREATER
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 50
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: LD_INT 34
10385: PUSH
10386: LD_INT 49
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PUSH
10404: LD_INT 0
10406: GREATER
10407: AND
10408: IFFALSE 10580
10410: GO 10412
10412: DISABLE
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// begin enable ;
10417: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 3
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 50
10445: PUSH
10446: EMPTY
10447: LIST
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 44
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 45
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 47
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 50
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: LD_INT 34
10543: PUSH
10544: LD_INT 49
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: CALL_OW 112
// end ; end_of_file
10580: PPOPN 2
10582: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10583: LD_EXP 38
10587: PUSH
10588: LD_INT 1
10590: EQUAL
10591: IFFALSE 11493
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
10599: PPUSH
10600: PPUSH
// begin m1 := false ;
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
// m2 := false ;
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// m3 := false ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: LD_INT 0
10624: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10625: LD_EXP 1
10629: PPUSH
10630: LD_STRING D9b-JMM-1
10632: PPUSH
10633: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10637: LD_EXP 15
10641: PPUSH
10642: LD_STRING D9b-Pow-1
10644: PPUSH
10645: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10649: LD_EXP 1
10653: PPUSH
10654: LD_STRING D9b-JMM-2
10656: PPUSH
10657: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10661: LD_EXP 15
10665: PPUSH
10666: LD_STRING D9b-Pow-2
10668: PPUSH
10669: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10673: LD_EXP 1
10677: PPUSH
10678: LD_STRING D9b-JMM-3
10680: PPUSH
10681: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10685: LD_EXP 15
10689: PPUSH
10690: LD_STRING D9b-Pow-3
10692: PPUSH
10693: CALL_OW 94
// if tick <= 60 60$00 then
10697: LD_OWVAR 1
10701: PUSH
10702: LD_INT 126000
10704: LESSEQUAL
10705: IFFALSE 10714
// SetAchievement ( ACH_ASPEED_13 ) ;
10707: LD_STRING ACH_ASPEED_13
10709: PPUSH
10710: CALL_OW 543
// if burlakStatus = 1 then
10714: LD_EXP 28
10718: PUSH
10719: LD_INT 1
10721: EQUAL
10722: IFFALSE 10744
// begin m1 := true ;
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10732: LD_STRING Burlak
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 101
// end else
10742: GO 10755
// begin AddMedal ( Burlak , - 1 ) ;
10744: LD_STRING Burlak
10746: PPUSH
10747: LD_INT 1
10749: NEG
10750: PPUSH
10751: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10755: LD_EXP 2
10759: PPUSH
10760: CALL_OW 302
10764: IFFALSE 10786
// begin m2 := true ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10774: LD_STRING Stevens
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
// end else
10784: GO 10797
// begin AddMedal ( Stevens , - 1 ) ;
10786: LD_STRING Stevens
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// end ; if radarOnSpot = 1 then
10797: LD_EXP 30
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10827
// begin m3 := true ;
10807: LD_ADDR_VAR 0 3
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10815: LD_STRING Observation
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 101
// end else
10825: GO 10838
// begin AddMedal ( Observation , - 1 ) ;
10827: LD_STRING Observation
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10838: LD_VAR 0 1
10842: PUSH
10843: LD_VAR 0 2
10847: AND
10848: PUSH
10849: LD_VAR 0 3
10853: AND
10854: PUSH
10855: LD_OWVAR 67
10859: PUSH
10860: LD_INT 3
10862: GREATEREQUAL
10863: AND
10864: IFFALSE 10876
// SetAchievementEX ( ACH_AMER , 13 ) ;
10866: LD_STRING ACH_AMER
10868: PPUSH
10869: LD_INT 13
10871: PPUSH
10872: CALL_OW 564
// GiveMedals ( MAIN ) ;
10876: LD_STRING MAIN
10878: PPUSH
10879: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10883: LD_EXP 28
10887: PPUSH
10888: LD_STRING 13_BurlakStatus_1
10890: PPUSH
10891: CALL_OW 39
// if IsLive ( Stevens ) then
10895: LD_EXP 2
10899: PPUSH
10900: CALL_OW 300
10904: IFFALSE 10918
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10906: LD_INT 1
10908: PPUSH
10909: LD_STRING 13_StevensStatus_1
10911: PPUSH
10912: CALL_OW 39
10916: GO 10928
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10918: LD_INT 0
10920: PPUSH
10921: LD_STRING 13_StevensStatus_1
10923: PPUSH
10924: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 3
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 4
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 8
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 69
11029: PPUSH
11030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11034: LD_EXP 1
11038: PPUSH
11039: LD_EXP 34
11043: PUSH
11044: LD_STRING JMM
11046: STR
11047: PPUSH
11048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11052: LD_EXP 8
11056: PPUSH
11057: LD_EXP 34
11061: PUSH
11062: LD_STRING Brown
11064: STR
11065: PPUSH
11066: CALL 6989 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11070: LD_EXP 4
11074: PPUSH
11075: LD_EXP 34
11079: PUSH
11080: LD_STRING Donaldson
11082: STR
11083: PPUSH
11084: CALL 6989 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11088: LD_EXP 5
11092: PPUSH
11093: LD_EXP 34
11097: PUSH
11098: LD_STRING Bobby
11100: STR
11101: PPUSH
11102: CALL 6989 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11106: LD_EXP 6
11110: PPUSH
11111: LD_EXP 34
11115: PUSH
11116: LD_STRING Cyrus
11118: STR
11119: PPUSH
11120: CALL 6989 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 3
11128: PPUSH
11129: LD_EXP 34
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL 6989 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11142: LD_EXP 13
11146: PPUSH
11147: LD_EXP 34
11151: PUSH
11152: LD_STRING Frank
11154: STR
11155: PPUSH
11156: CALL 6989 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_EXP 34
11169: PUSH
11170: LD_STRING Kikuchi
11172: STR
11173: PPUSH
11174: CALL 6989 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11178: LD_EXP 10
11182: PPUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_STRING Houten
11190: STR
11191: PPUSH
11192: CALL 6989 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11196: LD_EXP 12
11200: PPUSH
11201: LD_EXP 34
11205: PUSH
11206: LD_STRING Gary
11208: STR
11209: PPUSH
11210: CALL 6989 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11214: LD_EXP 11
11218: PPUSH
11219: LD_EXP 34
11223: PUSH
11224: LD_STRING Cornell
11226: STR
11227: PPUSH
11228: CALL 6989 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11232: LD_EXP 7
11236: PPUSH
11237: LD_EXP 34
11241: PUSH
11242: LD_STRING Denis
11244: STR
11245: PPUSH
11246: CALL 6989 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11250: LD_EXP 9
11254: PPUSH
11255: LD_EXP 34
11259: PUSH
11260: LD_STRING Gladstone
11262: STR
11263: PPUSH
11264: CALL 6989 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_EXP 34
11277: PUSH
11278: LD_STRING Stevens
11280: STR
11281: PPUSH
11282: CALL 6989 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11286: LD_INT 50
11288: PUSH
11289: EMPTY
11290: LIST
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: PUSH
11395: LD_EXP 1
11399: PUSH
11400: LD_EXP 8
11404: PUSH
11405: LD_EXP 4
11409: PUSH
11410: LD_EXP 5
11414: PUSH
11415: LD_EXP 6
11419: PUSH
11420: LD_EXP 3
11424: PUSH
11425: LD_EXP 13
11429: PUSH
11430: LD_EXP 9
11434: PUSH
11435: LD_EXP 14
11439: PUSH
11440: LD_EXP 7
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 12
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: DIFF
11481: PPUSH
11482: LD_STRING 13_other_survivors
11484: PPUSH
11485: CALL_OW 38
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 3
11495: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11496: LD_EXP 32
11500: PUSH
11501: LD_INT 2
11503: EQUAL
11504: PUSH
11505: LD_INT 34
11507: PUSH
11508: LD_INT 8
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: NOT
11520: AND
11521: IFFALSE 11657
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
11530: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: ST_TO_ADDR
// for i in tmp do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11638
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 3
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 274
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 275
11634: PLUS
11635: ST_TO_ADDR
11636: GO 11604
11638: POP
11639: POP
// if yourSiberite < 79 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 79
11647: LESS
11648: IFFALSE 11657
// YouLost ( siberite ) ;
11650: LD_STRING siberite
11652: PPUSH
11653: CALL_OW 104
// end ; end_of_file
11657: PPOPN 3
11659: END
// every 8 8$0 + 7 7$0 do
11660: GO 11662
11662: DISABLE
// begin enable ;
11663: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11664: LD_INT 8
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: LD_INT 3
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 0
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: LD_INT 2
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: LD_INT 5
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_OWVAR 67
11709: ARRAY
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: LD_INT 10
11716: PPUSH
11717: LD_INT 8
11719: PUSH
11720: LD_INT 9
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 12
11737: ARRAY
11738: PPUSH
11739: LD_INT 12
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL 7029 0 11
// end ;
11749: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
11757: PPUSH
// begin enable ;
11758: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11759: LD_ADDR_EXP 33
11763: PUSH
11764: LD_EXP 33
11768: PUSH
11769: LD_INT 1
11771: PLUS
11772: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11773: LD_INT 22
11775: PUSH
11776: LD_INT 8
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: LD_INT 58
11788: PUSH
11789: EMPTY
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 34
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: PUSH
11816: LD_INT 2
11818: LESS
11819: IFFALSE 12063
// begin uc_side := 8 ;
11821: LD_ADDR_OWVAR 20
11825: PUSH
11826: LD_INT 8
11828: ST_TO_ADDR
// uc_nation := 2 ;
11829: LD_ADDR_OWVAR 21
11833: PUSH
11834: LD_INT 2
11836: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11837: LD_INT 14
11839: PPUSH
11840: LD_INT 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 31
11848: PPUSH
11849: LD_INT 100
11851: PPUSH
11852: CALL 35776 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11856: LD_ADDR_VAR 0 1
11860: PUSH
11861: DOUBLE
11862: LD_INT 22
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 3
11874: PUSH
11875: LD_INT 58
11877: PUSH
11878: EMPTY
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 34
11887: PUSH
11888: LD_INT 31
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: PUSH
11905: LD_INT 1
11907: PLUS
11908: DEC
11909: ST_TO_ADDR
11910: LD_INT 2
11912: PUSH
11913: FOR_TO
11914: IFFALSE 12061
// begin veh := CreateVehicle ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: CALL_OW 45
11925: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11926: LD_VAR 0 2
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_INT 181
11945: PUSH
11946: LD_INT 105
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 137
11955: PUSH
11956: LD_INT 6
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 2
11974: MOD
11975: PUSH
11976: LD_INT 1
11978: PLUS
11979: ARRAY
11980: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PPUSH
12004: LD_INT 12
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12014: LD_INT 0
12016: PPUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: LD_INT 10
12025: PUSH
12026: LD_INT 10
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_OWVAR 67
12039: ARRAY
12040: PPUSH
12041: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12045: CALL_OW 44
12049: PPUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 52
// end ;
12059: GO 11913
12061: POP
12062: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) , 10 ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12063: LD_INT 8
12065: PUSH
12066: LD_INT 9
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 1
12075: PPUSH
12076: LD_INT 2
12078: PPUSH
12079: CALL_OW 12
12083: ARRAY
12084: PPUSH
12085: LD_INT 8
12087: PPUSH
12088: LD_INT 4
12090: PPUSH
12091: LD_INT 6
12093: PPUSH
12094: CALL_OW 12
12098: PUSH
12099: LD_INT 6
12101: PPUSH
12102: LD_INT 9
12104: PPUSH
12105: CALL_OW 12
12109: PUSH
12110: LD_INT 7
12112: PPUSH
12113: LD_INT 10
12115: PPUSH
12116: CALL_OW 12
12120: PUSH
12121: LD_INT 10
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_OWVAR 67
12134: ARRAY
12135: PPUSH
12136: LD_INT 10
12138: PPUSH
12139: LD_INT 2
12141: PPUSH
12142: LD_INT 3
12144: PPUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: EMPTY
12156: PPUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 26
12162: PUSH
12163: LD_INT 27
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 29
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PPUSH
12179: EMPTY
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL 8097 0 11
// end ;
12188: PPOPN 3
12190: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12191: LD_EXP 33
12195: PUSH
12196: LD_INT 4
12198: GREATEREQUAL
12199: IFFALSE 12547
12201: GO 12203
12203: DISABLE
12204: LD_INT 0
12206: PPUSH
12207: PPUSH
// begin enable ;
12208: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12209: LD_ADDR_EXP 33
12213: PUSH
12214: LD_EXP 33
12218: PUSH
12219: LD_INT 1
12221: PLUS
12222: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12223: LD_INT 22
12225: PUSH
12226: LD_INT 8
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: LD_INT 58
12238: PUSH
12239: EMPTY
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 34
12248: PUSH
12249: LD_INT 31
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 69
12265: PUSH
12266: LD_INT 2
12268: LESS
12269: IFFALSE 12458
// begin uc_side := 8 ;
12271: LD_ADDR_OWVAR 20
12275: PUSH
12276: LD_INT 8
12278: ST_TO_ADDR
// uc_nation := 2 ;
12279: LD_ADDR_OWVAR 21
12283: PUSH
12284: LD_INT 2
12286: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12287: LD_INT 14
12289: PPUSH
12290: LD_INT 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 31
12298: PPUSH
12299: LD_INT 100
12301: PPUSH
12302: CALL 35776 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: DOUBLE
12312: LD_INT 22
12314: PUSH
12315: LD_INT 8
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 58
12327: PUSH
12328: EMPTY
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 34
12337: PUSH
12338: LD_INT 31
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_INT 1
12357: PLUS
12358: DEC
12359: ST_TO_ADDR
12360: LD_INT 2
12362: PUSH
12363: FOR_TO
12364: IFFALSE 12456
// begin veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 2
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12376: LD_VAR 0 2
12380: PPUSH
12381: LD_INT 5
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_INT 181
12395: PPUSH
12396: LD_INT 105
12398: PPUSH
12399: LD_INT 12
12401: PPUSH
12402: LD_INT 0
12404: PPUSH
12405: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12409: LD_INT 0
12411: PPUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 9
12417: PUSH
12418: LD_INT 10
12420: PUSH
12421: LD_INT 10
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: LD_OWVAR 67
12434: ARRAY
12435: PPUSH
12436: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12440: CALL_OW 44
12444: PPUSH
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 52
// end ;
12454: GO 12363
12456: POP
12457: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12458: LD_INT 8
12460: PUSH
12461: LD_INT 9
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_INT 2
12473: PPUSH
12474: CALL_OW 12
12478: ARRAY
12479: PPUSH
12480: LD_INT 8
12482: PPUSH
12483: LD_INT 1
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_OWVAR 67
12505: ARRAY
12506: PPUSH
12507: LD_INT 10
12509: PPUSH
12510: LD_INT 3
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: LD_INT 1
12518: PUSH
12519: LD_INT 1
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: LD_INT 47
12528: PUSH
12529: LD_INT 47
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: EMPTY
12537: PPUSH
12538: EMPTY
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL 8097 0 11
// end ;
12547: PPOPN 2
12549: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12550: LD_EXP 36
12554: PUSH
12555: LD_INT 1
12557: EQUAL
12558: IFFALSE 12903
12560: GO 12562
12562: DISABLE
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12567: LD_INT 22
12569: PUSH
12570: LD_INT 8
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: LD_INT 58
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 34
12592: PUSH
12593: LD_INT 31
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_INT 2
12612: LESS
12613: IFFALSE 12802
// begin uc_side := 8 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 8
12622: ST_TO_ADDR
// uc_nation := 2 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 2
12630: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12631: LD_INT 14
12633: PPUSH
12634: LD_INT 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: LD_INT 31
12642: PPUSH
12643: LD_INT 100
12645: PPUSH
12646: CALL 35776 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: DOUBLE
12656: LD_INT 22
12658: PUSH
12659: LD_INT 8
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 3
12668: PUSH
12669: LD_INT 58
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 34
12681: PUSH
12682: LD_INT 31
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_INT 1
12701: PLUS
12702: DEC
12703: ST_TO_ADDR
12704: LD_INT 2
12706: PUSH
12707: FOR_TO
12708: IFFALSE 12800
// begin veh := CreateVehicle ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: CALL_OW 45
12719: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_INT 5
12727: PPUSH
12728: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12732: LD_VAR 0 2
12736: PPUSH
12737: LD_INT 181
12739: PPUSH
12740: LD_INT 105
12742: PPUSH
12743: LD_INT 12
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_INT 8
12758: PUSH
12759: LD_INT 9
12761: PUSH
12762: LD_INT 10
12764: PUSH
12765: LD_INT 10
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_OWVAR 67
12778: ARRAY
12779: PPUSH
12780: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12784: CALL_OW 44
12788: PPUSH
12789: LD_VAR 0 2
12793: PPUSH
12794: CALL_OW 52
// end ;
12798: GO 12707
12800: POP
12801: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 , 9 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12802: LD_INT 8
12804: PUSH
12805: LD_INT 9
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 1
12814: PPUSH
12815: LD_INT 2
12817: PPUSH
12818: CALL_OW 12
12822: ARRAY
12823: PPUSH
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 7
12832: PUSH
12833: LD_INT 8
12835: PUSH
12836: LD_INT 9
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_OWVAR 67
12849: ARRAY
12850: PPUSH
12851: LD_INT 10
12853: PPUSH
12854: LD_INT 3
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: LD_INT 3
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: LD_INT 46
12872: PUSH
12873: LD_INT 44
12875: PUSH
12876: LD_INT 45
12878: PUSH
12879: LD_INT 47
12881: PUSH
12882: LD_INT 49
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PPUSH
12892: EMPTY
12893: PPUSH
12894: EMPTY
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL 8097 0 11
// end ; end_of_file
12903: PPOPN 2
12905: END
// every 1 1$0 do
12906: GO 12908
12908: DISABLE
// begin enable ;
12909: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12910: LD_INT 3
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: LD_INT 13
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 55
// end ; end_of_file
12931: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12932: LD_INT 0
12934: PPUSH
// ar_miner := 81 ;
12935: LD_ADDR_EXP 50
12939: PUSH
12940: LD_INT 81
12942: ST_TO_ADDR
// ar_crane := 88 ;
12943: LD_ADDR_EXP 49
12947: PUSH
12948: LD_INT 88
12950: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12951: LD_ADDR_EXP 44
12955: PUSH
12956: LD_INT 89
12958: ST_TO_ADDR
// us_hack := 99 ;
12959: LD_ADDR_EXP 45
12963: PUSH
12964: LD_INT 99
12966: ST_TO_ADDR
// us_artillery := 97 ;
12967: LD_ADDR_EXP 46
12971: PUSH
12972: LD_INT 97
12974: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12975: LD_ADDR_EXP 47
12979: PUSH
12980: LD_INT 91
12982: ST_TO_ADDR
// ar_mortar := 92 ;
12983: LD_ADDR_EXP 48
12987: PUSH
12988: LD_INT 92
12990: ST_TO_ADDR
// ru_radar := 98 ;
12991: LD_ADDR_EXP 43
12995: PUSH
12996: LD_INT 98
12998: ST_TO_ADDR
// tech_Artillery := 80 ;
12999: LD_ADDR_EXP 51
13003: PUSH
13004: LD_INT 80
13006: ST_TO_ADDR
// tech_RadMat := 81 ;
13007: LD_ADDR_EXP 52
13011: PUSH
13012: LD_INT 81
13014: ST_TO_ADDR
// tech_BasicTools := 82 ;
13015: LD_ADDR_EXP 53
13019: PUSH
13020: LD_INT 82
13022: ST_TO_ADDR
// tech_Cargo := 83 ;
13023: LD_ADDR_EXP 54
13027: PUSH
13028: LD_INT 83
13030: ST_TO_ADDR
// tech_Track := 84 ;
13031: LD_ADDR_EXP 55
13035: PUSH
13036: LD_INT 84
13038: ST_TO_ADDR
// tech_Crane := 85 ;
13039: LD_ADDR_EXP 56
13043: PUSH
13044: LD_INT 85
13046: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13047: LD_ADDR_EXP 57
13051: PUSH
13052: LD_INT 86
13054: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13055: LD_ADDR_EXP 58
13059: PUSH
13060: LD_INT 87
13062: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13063: LD_ADDR_EXP 59
13067: PUSH
13068: LD_INT 88
13070: ST_TO_ADDR
// class_mastodont := 31 ;
13071: LD_ADDR_EXP 60
13075: PUSH
13076: LD_INT 31
13078: ST_TO_ADDR
// class_horse := 21 ;
13079: LD_ADDR_EXP 61
13083: PUSH
13084: LD_INT 21
13086: ST_TO_ADDR
// end ;
13087: LD_VAR 0 1
13091: RET
// every 1 do
13092: GO 13094
13094: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13095: CALL 12932 0 0
13099: END
// every 0 0$1 do
13100: GO 13102
13102: DISABLE
// begin enable ;
13103: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13104: LD_STRING updateTimer(
13106: PUSH
13107: LD_OWVAR 1
13111: STR
13112: PUSH
13113: LD_STRING );
13115: STR
13116: PPUSH
13117: CALL_OW 559
// end ;
13121: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13122: LD_INT 0
13124: PPUSH
// if p2 = 100 then
13125: LD_VAR 0 2
13129: PUSH
13130: LD_INT 100
13132: EQUAL
13133: IFFALSE 14136
// begin if not StreamModeActive then
13135: LD_EXP 62
13139: NOT
13140: IFFALSE 13150
// StreamModeActive := true ;
13142: LD_ADDR_EXP 62
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if p3 = 0 then
13150: LD_VAR 0 3
13154: PUSH
13155: LD_INT 0
13157: EQUAL
13158: IFFALSE 13164
// InitStreamMode ;
13160: CALL 14296 0 0
// if p3 = 1 then
13164: LD_VAR 0 3
13168: PUSH
13169: LD_INT 1
13171: EQUAL
13172: IFFALSE 13182
// sRocket := true ;
13174: LD_ADDR_EXP 67
13178: PUSH
13179: LD_INT 1
13181: ST_TO_ADDR
// if p3 = 2 then
13182: LD_VAR 0 3
13186: PUSH
13187: LD_INT 2
13189: EQUAL
13190: IFFALSE 13200
// sSpeed := true ;
13192: LD_ADDR_EXP 66
13196: PUSH
13197: LD_INT 1
13199: ST_TO_ADDR
// if p3 = 3 then
13200: LD_VAR 0 3
13204: PUSH
13205: LD_INT 3
13207: EQUAL
13208: IFFALSE 13218
// sEngine := true ;
13210: LD_ADDR_EXP 68
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// if p3 = 4 then
13218: LD_VAR 0 3
13222: PUSH
13223: LD_INT 4
13225: EQUAL
13226: IFFALSE 13236
// sSpec := true ;
13228: LD_ADDR_EXP 65
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// if p3 = 5 then
13236: LD_VAR 0 3
13240: PUSH
13241: LD_INT 5
13243: EQUAL
13244: IFFALSE 13254
// sLevel := true ;
13246: LD_ADDR_EXP 69
13250: PUSH
13251: LD_INT 1
13253: ST_TO_ADDR
// if p3 = 6 then
13254: LD_VAR 0 3
13258: PUSH
13259: LD_INT 6
13261: EQUAL
13262: IFFALSE 13272
// sArmoury := true ;
13264: LD_ADDR_EXP 70
13268: PUSH
13269: LD_INT 1
13271: ST_TO_ADDR
// if p3 = 7 then
13272: LD_VAR 0 3
13276: PUSH
13277: LD_INT 7
13279: EQUAL
13280: IFFALSE 13290
// sRadar := true ;
13282: LD_ADDR_EXP 71
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// if p3 = 8 then
13290: LD_VAR 0 3
13294: PUSH
13295: LD_INT 8
13297: EQUAL
13298: IFFALSE 13308
// sBunker := true ;
13300: LD_ADDR_EXP 72
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// if p3 = 9 then
13308: LD_VAR 0 3
13312: PUSH
13313: LD_INT 9
13315: EQUAL
13316: IFFALSE 13326
// sHack := true ;
13318: LD_ADDR_EXP 73
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// if p3 = 10 then
13326: LD_VAR 0 3
13330: PUSH
13331: LD_INT 10
13333: EQUAL
13334: IFFALSE 13344
// sFire := true ;
13336: LD_ADDR_EXP 74
13340: PUSH
13341: LD_INT 1
13343: ST_TO_ADDR
// if p3 = 11 then
13344: LD_VAR 0 3
13348: PUSH
13349: LD_INT 11
13351: EQUAL
13352: IFFALSE 13362
// sRefresh := true ;
13354: LD_ADDR_EXP 75
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// if p3 = 12 then
13362: LD_VAR 0 3
13366: PUSH
13367: LD_INT 12
13369: EQUAL
13370: IFFALSE 13380
// sExp := true ;
13372: LD_ADDR_EXP 76
13376: PUSH
13377: LD_INT 1
13379: ST_TO_ADDR
// if p3 = 13 then
13380: LD_VAR 0 3
13384: PUSH
13385: LD_INT 13
13387: EQUAL
13388: IFFALSE 13398
// sDepot := true ;
13390: LD_ADDR_EXP 77
13394: PUSH
13395: LD_INT 1
13397: ST_TO_ADDR
// if p3 = 14 then
13398: LD_VAR 0 3
13402: PUSH
13403: LD_INT 14
13405: EQUAL
13406: IFFALSE 13416
// sFlag := true ;
13408: LD_ADDR_EXP 78
13412: PUSH
13413: LD_INT 1
13415: ST_TO_ADDR
// if p3 = 15 then
13416: LD_VAR 0 3
13420: PUSH
13421: LD_INT 15
13423: EQUAL
13424: IFFALSE 13434
// sKamikadze := true ;
13426: LD_ADDR_EXP 86
13430: PUSH
13431: LD_INT 1
13433: ST_TO_ADDR
// if p3 = 16 then
13434: LD_VAR 0 3
13438: PUSH
13439: LD_INT 16
13441: EQUAL
13442: IFFALSE 13452
// sTroll := true ;
13444: LD_ADDR_EXP 87
13448: PUSH
13449: LD_INT 1
13451: ST_TO_ADDR
// if p3 = 17 then
13452: LD_VAR 0 3
13456: PUSH
13457: LD_INT 17
13459: EQUAL
13460: IFFALSE 13470
// sSlow := true ;
13462: LD_ADDR_EXP 88
13466: PUSH
13467: LD_INT 1
13469: ST_TO_ADDR
// if p3 = 18 then
13470: LD_VAR 0 3
13474: PUSH
13475: LD_INT 18
13477: EQUAL
13478: IFFALSE 13488
// sLack := true ;
13480: LD_ADDR_EXP 89
13484: PUSH
13485: LD_INT 1
13487: ST_TO_ADDR
// if p3 = 19 then
13488: LD_VAR 0 3
13492: PUSH
13493: LD_INT 19
13495: EQUAL
13496: IFFALSE 13506
// sTank := true ;
13498: LD_ADDR_EXP 91
13502: PUSH
13503: LD_INT 1
13505: ST_TO_ADDR
// if p3 = 20 then
13506: LD_VAR 0 3
13510: PUSH
13511: LD_INT 20
13513: EQUAL
13514: IFFALSE 13524
// sRemote := true ;
13516: LD_ADDR_EXP 92
13520: PUSH
13521: LD_INT 1
13523: ST_TO_ADDR
// if p3 = 21 then
13524: LD_VAR 0 3
13528: PUSH
13529: LD_INT 21
13531: EQUAL
13532: IFFALSE 13542
// sPowell := true ;
13534: LD_ADDR_EXP 93
13538: PUSH
13539: LD_INT 1
13541: ST_TO_ADDR
// if p3 = 22 then
13542: LD_VAR 0 3
13546: PUSH
13547: LD_INT 22
13549: EQUAL
13550: IFFALSE 13560
// sTeleport := true ;
13552: LD_ADDR_EXP 96
13556: PUSH
13557: LD_INT 1
13559: ST_TO_ADDR
// if p3 = 23 then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 23
13567: EQUAL
13568: IFFALSE 13578
// sOilTower := true ;
13570: LD_ADDR_EXP 98
13574: PUSH
13575: LD_INT 1
13577: ST_TO_ADDR
// if p3 = 24 then
13578: LD_VAR 0 3
13582: PUSH
13583: LD_INT 24
13585: EQUAL
13586: IFFALSE 13596
// sShovel := true ;
13588: LD_ADDR_EXP 99
13592: PUSH
13593: LD_INT 1
13595: ST_TO_ADDR
// if p3 = 25 then
13596: LD_VAR 0 3
13600: PUSH
13601: LD_INT 25
13603: EQUAL
13604: IFFALSE 13614
// sSheik := true ;
13606: LD_ADDR_EXP 100
13610: PUSH
13611: LD_INT 1
13613: ST_TO_ADDR
// if p3 = 26 then
13614: LD_VAR 0 3
13618: PUSH
13619: LD_INT 26
13621: EQUAL
13622: IFFALSE 13632
// sEarthquake := true ;
13624: LD_ADDR_EXP 102
13628: PUSH
13629: LD_INT 1
13631: ST_TO_ADDR
// if p3 = 27 then
13632: LD_VAR 0 3
13636: PUSH
13637: LD_INT 27
13639: EQUAL
13640: IFFALSE 13650
// sAI := true ;
13642: LD_ADDR_EXP 103
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// if p3 = 28 then
13650: LD_VAR 0 3
13654: PUSH
13655: LD_INT 28
13657: EQUAL
13658: IFFALSE 13668
// sCargo := true ;
13660: LD_ADDR_EXP 106
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if p3 = 29 then
13668: LD_VAR 0 3
13672: PUSH
13673: LD_INT 29
13675: EQUAL
13676: IFFALSE 13686
// sDLaser := true ;
13678: LD_ADDR_EXP 107
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// if p3 = 30 then
13686: LD_VAR 0 3
13690: PUSH
13691: LD_INT 30
13693: EQUAL
13694: IFFALSE 13704
// sExchange := true ;
13696: LD_ADDR_EXP 108
13700: PUSH
13701: LD_INT 1
13703: ST_TO_ADDR
// if p3 = 31 then
13704: LD_VAR 0 3
13708: PUSH
13709: LD_INT 31
13711: EQUAL
13712: IFFALSE 13722
// sFac := true ;
13714: LD_ADDR_EXP 109
13718: PUSH
13719: LD_INT 1
13721: ST_TO_ADDR
// if p3 = 32 then
13722: LD_VAR 0 3
13726: PUSH
13727: LD_INT 32
13729: EQUAL
13730: IFFALSE 13740
// sPower := true ;
13732: LD_ADDR_EXP 110
13736: PUSH
13737: LD_INT 1
13739: ST_TO_ADDR
// if p3 = 33 then
13740: LD_VAR 0 3
13744: PUSH
13745: LD_INT 33
13747: EQUAL
13748: IFFALSE 13758
// sRandom := true ;
13750: LD_ADDR_EXP 111
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// if p3 = 34 then
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 34
13765: EQUAL
13766: IFFALSE 13776
// sShield := true ;
13768: LD_ADDR_EXP 112
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// if p3 = 35 then
13776: LD_VAR 0 3
13780: PUSH
13781: LD_INT 35
13783: EQUAL
13784: IFFALSE 13794
// sTime := true ;
13786: LD_ADDR_EXP 113
13790: PUSH
13791: LD_INT 1
13793: ST_TO_ADDR
// if p3 = 36 then
13794: LD_VAR 0 3
13798: PUSH
13799: LD_INT 36
13801: EQUAL
13802: IFFALSE 13812
// sTools := true ;
13804: LD_ADDR_EXP 114
13808: PUSH
13809: LD_INT 1
13811: ST_TO_ADDR
// if p3 = 101 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 101
13819: EQUAL
13820: IFFALSE 13830
// sSold := true ;
13822: LD_ADDR_EXP 79
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// if p3 = 102 then
13830: LD_VAR 0 3
13834: PUSH
13835: LD_INT 102
13837: EQUAL
13838: IFFALSE 13848
// sDiff := true ;
13840: LD_ADDR_EXP 80
13844: PUSH
13845: LD_INT 1
13847: ST_TO_ADDR
// if p3 = 103 then
13848: LD_VAR 0 3
13852: PUSH
13853: LD_INT 103
13855: EQUAL
13856: IFFALSE 13866
// sFog := true ;
13858: LD_ADDR_EXP 83
13862: PUSH
13863: LD_INT 1
13865: ST_TO_ADDR
// if p3 = 104 then
13866: LD_VAR 0 3
13870: PUSH
13871: LD_INT 104
13873: EQUAL
13874: IFFALSE 13884
// sReset := true ;
13876: LD_ADDR_EXP 84
13880: PUSH
13881: LD_INT 1
13883: ST_TO_ADDR
// if p3 = 105 then
13884: LD_VAR 0 3
13888: PUSH
13889: LD_INT 105
13891: EQUAL
13892: IFFALSE 13902
// sSun := true ;
13894: LD_ADDR_EXP 85
13898: PUSH
13899: LD_INT 1
13901: ST_TO_ADDR
// if p3 = 106 then
13902: LD_VAR 0 3
13906: PUSH
13907: LD_INT 106
13909: EQUAL
13910: IFFALSE 13920
// sTiger := true ;
13912: LD_ADDR_EXP 81
13916: PUSH
13917: LD_INT 1
13919: ST_TO_ADDR
// if p3 = 107 then
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 107
13927: EQUAL
13928: IFFALSE 13938
// sBomb := true ;
13930: LD_ADDR_EXP 82
13934: PUSH
13935: LD_INT 1
13937: ST_TO_ADDR
// if p3 = 108 then
13938: LD_VAR 0 3
13942: PUSH
13943: LD_INT 108
13945: EQUAL
13946: IFFALSE 13956
// sWound := true ;
13948: LD_ADDR_EXP 90
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// if p3 = 109 then
13956: LD_VAR 0 3
13960: PUSH
13961: LD_INT 109
13963: EQUAL
13964: IFFALSE 13974
// sBetray := true ;
13966: LD_ADDR_EXP 94
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// if p3 = 110 then
13974: LD_VAR 0 3
13978: PUSH
13979: LD_INT 110
13981: EQUAL
13982: IFFALSE 13992
// sContamin := true ;
13984: LD_ADDR_EXP 95
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// if p3 = 111 then
13992: LD_VAR 0 3
13996: PUSH
13997: LD_INT 111
13999: EQUAL
14000: IFFALSE 14010
// sOil := true ;
14002: LD_ADDR_EXP 97
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
// if p3 = 112 then
14010: LD_VAR 0 3
14014: PUSH
14015: LD_INT 112
14017: EQUAL
14018: IFFALSE 14028
// sStu := true ;
14020: LD_ADDR_EXP 101
14024: PUSH
14025: LD_INT 1
14027: ST_TO_ADDR
// if p3 = 113 then
14028: LD_VAR 0 3
14032: PUSH
14033: LD_INT 113
14035: EQUAL
14036: IFFALSE 14046
// sBazooka := true ;
14038: LD_ADDR_EXP 104
14042: PUSH
14043: LD_INT 1
14045: ST_TO_ADDR
// if p3 = 114 then
14046: LD_VAR 0 3
14050: PUSH
14051: LD_INT 114
14053: EQUAL
14054: IFFALSE 14064
// sMortar := true ;
14056: LD_ADDR_EXP 105
14060: PUSH
14061: LD_INT 1
14063: ST_TO_ADDR
// if p3 = 115 then
14064: LD_VAR 0 3
14068: PUSH
14069: LD_INT 115
14071: EQUAL
14072: IFFALSE 14082
// sRanger := true ;
14074: LD_ADDR_EXP 115
14078: PUSH
14079: LD_INT 1
14081: ST_TO_ADDR
// if p3 = 116 then
14082: LD_VAR 0 3
14086: PUSH
14087: LD_INT 116
14089: EQUAL
14090: IFFALSE 14100
// sComputer := true ;
14092: LD_ADDR_EXP 116
14096: PUSH
14097: LD_INT 1
14099: ST_TO_ADDR
// if p3 = 117 then
14100: LD_VAR 0 3
14104: PUSH
14105: LD_INT 117
14107: EQUAL
14108: IFFALSE 14118
// s30 := true ;
14110: LD_ADDR_EXP 117
14114: PUSH
14115: LD_INT 1
14117: ST_TO_ADDR
// if p3 = 118 then
14118: LD_VAR 0 3
14122: PUSH
14123: LD_INT 118
14125: EQUAL
14126: IFFALSE 14136
// s60 := true ;
14128: LD_ADDR_EXP 118
14132: PUSH
14133: LD_INT 1
14135: ST_TO_ADDR
// end ; if p2 = 101 then
14136: LD_VAR 0 2
14140: PUSH
14141: LD_INT 101
14143: EQUAL
14144: IFFALSE 14272
// begin case p3 of 1 :
14146: LD_VAR 0 3
14150: PUSH
14151: LD_INT 1
14153: DOUBLE
14154: EQUAL
14155: IFTRUE 14159
14157: GO 14166
14159: POP
// hHackUnlimitedResources ; 2 :
14160: CALL 25868 0 0
14164: GO 14272
14166: LD_INT 2
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14181
14174: POP
// hHackSetLevel10 ; 3 :
14175: CALL 26001 0 0
14179: GO 14272
14181: LD_INT 3
14183: DOUBLE
14184: EQUAL
14185: IFTRUE 14189
14187: GO 14196
14189: POP
// hHackSetLevel10YourUnits ; 4 :
14190: CALL 26086 0 0
14194: GO 14272
14196: LD_INT 4
14198: DOUBLE
14199: EQUAL
14200: IFTRUE 14204
14202: GO 14211
14204: POP
// hHackInvincible ; 5 :
14205: CALL 26534 0 0
14209: GO 14272
14211: LD_INT 5
14213: DOUBLE
14214: EQUAL
14215: IFTRUE 14219
14217: GO 14226
14219: POP
// hHackInvisible ; 6 :
14220: CALL 26645 0 0
14224: GO 14272
14226: LD_INT 6
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14241
14234: POP
// hHackChangeYourSide ; 7 :
14235: CALL 26702 0 0
14239: GO 14272
14241: LD_INT 7
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14256
14249: POP
// hHackChangeUnitSide ; 8 :
14250: CALL 26744 0 0
14254: GO 14272
14256: LD_INT 8
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14271
14264: POP
// hHackFog ; end ;
14265: CALL 26845 0 0
14269: GO 14272
14271: POP
// end ; end ;
14272: LD_VAR 0 7
14276: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14277: GO 14279
14279: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14280: LD_STRING initStreamRollete();
14282: PPUSH
14283: CALL_OW 559
// InitStreamMode ;
14287: CALL 14296 0 0
// DefineStreamItems ( ) ;
14291: CALL 14760 0 0
// end ;
14295: END
// function InitStreamMode ; begin
14296: LD_INT 0
14298: PPUSH
// streamModeActive := false ;
14299: LD_ADDR_EXP 62
14303: PUSH
14304: LD_INT 0
14306: ST_TO_ADDR
// normalCounter := 36 ;
14307: LD_ADDR_EXP 63
14311: PUSH
14312: LD_INT 36
14314: ST_TO_ADDR
// hardcoreCounter := 16 ;
14315: LD_ADDR_EXP 64
14319: PUSH
14320: LD_INT 16
14322: ST_TO_ADDR
// sRocket := false ;
14323: LD_ADDR_EXP 67
14327: PUSH
14328: LD_INT 0
14330: ST_TO_ADDR
// sSpeed := false ;
14331: LD_ADDR_EXP 66
14335: PUSH
14336: LD_INT 0
14338: ST_TO_ADDR
// sEngine := false ;
14339: LD_ADDR_EXP 68
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// sSpec := false ;
14347: LD_ADDR_EXP 65
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// sLevel := false ;
14355: LD_ADDR_EXP 69
14359: PUSH
14360: LD_INT 0
14362: ST_TO_ADDR
// sArmoury := false ;
14363: LD_ADDR_EXP 70
14367: PUSH
14368: LD_INT 0
14370: ST_TO_ADDR
// sRadar := false ;
14371: LD_ADDR_EXP 71
14375: PUSH
14376: LD_INT 0
14378: ST_TO_ADDR
// sBunker := false ;
14379: LD_ADDR_EXP 72
14383: PUSH
14384: LD_INT 0
14386: ST_TO_ADDR
// sHack := false ;
14387: LD_ADDR_EXP 73
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// sFire := false ;
14395: LD_ADDR_EXP 74
14399: PUSH
14400: LD_INT 0
14402: ST_TO_ADDR
// sRefresh := false ;
14403: LD_ADDR_EXP 75
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// sExp := false ;
14411: LD_ADDR_EXP 76
14415: PUSH
14416: LD_INT 0
14418: ST_TO_ADDR
// sDepot := false ;
14419: LD_ADDR_EXP 77
14423: PUSH
14424: LD_INT 0
14426: ST_TO_ADDR
// sFlag := false ;
14427: LD_ADDR_EXP 78
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
// sKamikadze := false ;
14435: LD_ADDR_EXP 86
14439: PUSH
14440: LD_INT 0
14442: ST_TO_ADDR
// sTroll := false ;
14443: LD_ADDR_EXP 87
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// sSlow := false ;
14451: LD_ADDR_EXP 88
14455: PUSH
14456: LD_INT 0
14458: ST_TO_ADDR
// sLack := false ;
14459: LD_ADDR_EXP 89
14463: PUSH
14464: LD_INT 0
14466: ST_TO_ADDR
// sTank := false ;
14467: LD_ADDR_EXP 91
14471: PUSH
14472: LD_INT 0
14474: ST_TO_ADDR
// sRemote := false ;
14475: LD_ADDR_EXP 92
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
// sPowell := false ;
14483: LD_ADDR_EXP 93
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// sTeleport := false ;
14491: LD_ADDR_EXP 96
14495: PUSH
14496: LD_INT 0
14498: ST_TO_ADDR
// sOilTower := false ;
14499: LD_ADDR_EXP 98
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// sShovel := false ;
14507: LD_ADDR_EXP 99
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// sSheik := false ;
14515: LD_ADDR_EXP 100
14519: PUSH
14520: LD_INT 0
14522: ST_TO_ADDR
// sEarthquake := false ;
14523: LD_ADDR_EXP 102
14527: PUSH
14528: LD_INT 0
14530: ST_TO_ADDR
// sAI := false ;
14531: LD_ADDR_EXP 103
14535: PUSH
14536: LD_INT 0
14538: ST_TO_ADDR
// sCargo := false ;
14539: LD_ADDR_EXP 106
14543: PUSH
14544: LD_INT 0
14546: ST_TO_ADDR
// sDLaser := false ;
14547: LD_ADDR_EXP 107
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// sExchange := false ;
14555: LD_ADDR_EXP 108
14559: PUSH
14560: LD_INT 0
14562: ST_TO_ADDR
// sFac := false ;
14563: LD_ADDR_EXP 109
14567: PUSH
14568: LD_INT 0
14570: ST_TO_ADDR
// sPower := false ;
14571: LD_ADDR_EXP 110
14575: PUSH
14576: LD_INT 0
14578: ST_TO_ADDR
// sRandom := false ;
14579: LD_ADDR_EXP 111
14583: PUSH
14584: LD_INT 0
14586: ST_TO_ADDR
// sShield := false ;
14587: LD_ADDR_EXP 112
14591: PUSH
14592: LD_INT 0
14594: ST_TO_ADDR
// sTime := false ;
14595: LD_ADDR_EXP 113
14599: PUSH
14600: LD_INT 0
14602: ST_TO_ADDR
// sTools := false ;
14603: LD_ADDR_EXP 114
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// sSold := false ;
14611: LD_ADDR_EXP 79
14615: PUSH
14616: LD_INT 0
14618: ST_TO_ADDR
// sDiff := false ;
14619: LD_ADDR_EXP 80
14623: PUSH
14624: LD_INT 0
14626: ST_TO_ADDR
// sFog := false ;
14627: LD_ADDR_EXP 83
14631: PUSH
14632: LD_INT 0
14634: ST_TO_ADDR
// sReset := false ;
14635: LD_ADDR_EXP 84
14639: PUSH
14640: LD_INT 0
14642: ST_TO_ADDR
// sSun := false ;
14643: LD_ADDR_EXP 85
14647: PUSH
14648: LD_INT 0
14650: ST_TO_ADDR
// sTiger := false ;
14651: LD_ADDR_EXP 81
14655: PUSH
14656: LD_INT 0
14658: ST_TO_ADDR
// sBomb := false ;
14659: LD_ADDR_EXP 82
14663: PUSH
14664: LD_INT 0
14666: ST_TO_ADDR
// sWound := false ;
14667: LD_ADDR_EXP 90
14671: PUSH
14672: LD_INT 0
14674: ST_TO_ADDR
// sBetray := false ;
14675: LD_ADDR_EXP 94
14679: PUSH
14680: LD_INT 0
14682: ST_TO_ADDR
// sContamin := false ;
14683: LD_ADDR_EXP 95
14687: PUSH
14688: LD_INT 0
14690: ST_TO_ADDR
// sOil := false ;
14691: LD_ADDR_EXP 97
14695: PUSH
14696: LD_INT 0
14698: ST_TO_ADDR
// sStu := false ;
14699: LD_ADDR_EXP 101
14703: PUSH
14704: LD_INT 0
14706: ST_TO_ADDR
// sBazooka := false ;
14707: LD_ADDR_EXP 104
14711: PUSH
14712: LD_INT 0
14714: ST_TO_ADDR
// sMortar := false ;
14715: LD_ADDR_EXP 105
14719: PUSH
14720: LD_INT 0
14722: ST_TO_ADDR
// sRanger := false ;
14723: LD_ADDR_EXP 115
14727: PUSH
14728: LD_INT 0
14730: ST_TO_ADDR
// sComputer := false ;
14731: LD_ADDR_EXP 116
14735: PUSH
14736: LD_INT 0
14738: ST_TO_ADDR
// s30 := false ;
14739: LD_ADDR_EXP 117
14743: PUSH
14744: LD_INT 0
14746: ST_TO_ADDR
// s60 := false ;
14747: LD_ADDR_EXP 118
14751: PUSH
14752: LD_INT 0
14754: ST_TO_ADDR
// end ;
14755: LD_VAR 0 1
14759: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14760: LD_INT 0
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
// result := [ ] ;
14767: LD_ADDR_VAR 0 1
14771: PUSH
14772: EMPTY
14773: ST_TO_ADDR
// if campaign_id = 1 then
14774: LD_OWVAR 69
14778: PUSH
14779: LD_INT 1
14781: EQUAL
14782: IFFALSE 17948
// begin case mission_number of 1 :
14784: LD_OWVAR 70
14788: PUSH
14789: LD_INT 1
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 14873
14797: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: LD_INT 4
14808: PUSH
14809: LD_INT 11
14811: PUSH
14812: LD_INT 12
14814: PUSH
14815: LD_INT 15
14817: PUSH
14818: LD_INT 16
14820: PUSH
14821: LD_INT 22
14823: PUSH
14824: LD_INT 23
14826: PUSH
14827: LD_INT 26
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 101
14843: PUSH
14844: LD_INT 102
14846: PUSH
14847: LD_INT 106
14849: PUSH
14850: LD_INT 116
14852: PUSH
14853: LD_INT 117
14855: PUSH
14856: LD_INT 118
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: ST_TO_ADDR
14871: GO 17946
14873: LD_INT 2
14875: DOUBLE
14876: EQUAL
14877: IFTRUE 14881
14879: GO 14965
14881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14882: LD_ADDR_VAR 0 1
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 4
14892: PUSH
14893: LD_INT 11
14895: PUSH
14896: LD_INT 12
14898: PUSH
14899: LD_INT 15
14901: PUSH
14902: LD_INT 16
14904: PUSH
14905: LD_INT 22
14907: PUSH
14908: LD_INT 23
14910: PUSH
14911: LD_INT 26
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 101
14927: PUSH
14928: LD_INT 102
14930: PUSH
14931: LD_INT 105
14933: PUSH
14934: LD_INT 106
14936: PUSH
14937: LD_INT 108
14939: PUSH
14940: LD_INT 116
14942: PUSH
14943: LD_INT 117
14945: PUSH
14946: LD_INT 118
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: ST_TO_ADDR
14963: GO 17946
14965: LD_INT 3
14967: DOUBLE
14968: EQUAL
14969: IFTRUE 14973
14971: GO 15061
14973: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14974: LD_ADDR_VAR 0 1
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: LD_INT 4
14984: PUSH
14985: LD_INT 5
14987: PUSH
14988: LD_INT 11
14990: PUSH
14991: LD_INT 12
14993: PUSH
14994: LD_INT 15
14996: PUSH
14997: LD_INT 16
14999: PUSH
15000: LD_INT 22
15002: PUSH
15003: LD_INT 26
15005: PUSH
15006: LD_INT 36
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 101
15023: PUSH
15024: LD_INT 102
15026: PUSH
15027: LD_INT 105
15029: PUSH
15030: LD_INT 106
15032: PUSH
15033: LD_INT 108
15035: PUSH
15036: LD_INT 116
15038: PUSH
15039: LD_INT 117
15041: PUSH
15042: LD_INT 118
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: ST_TO_ADDR
15059: GO 17946
15061: LD_INT 4
15063: DOUBLE
15064: EQUAL
15065: IFTRUE 15069
15067: GO 15165
15069: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15070: LD_ADDR_VAR 0 1
15074: PUSH
15075: LD_INT 2
15077: PUSH
15078: LD_INT 4
15080: PUSH
15081: LD_INT 5
15083: PUSH
15084: LD_INT 8
15086: PUSH
15087: LD_INT 11
15089: PUSH
15090: LD_INT 12
15092: PUSH
15093: LD_INT 15
15095: PUSH
15096: LD_INT 16
15098: PUSH
15099: LD_INT 22
15101: PUSH
15102: LD_INT 23
15104: PUSH
15105: LD_INT 26
15107: PUSH
15108: LD_INT 36
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 101
15127: PUSH
15128: LD_INT 102
15130: PUSH
15131: LD_INT 105
15133: PUSH
15134: LD_INT 106
15136: PUSH
15137: LD_INT 108
15139: PUSH
15140: LD_INT 116
15142: PUSH
15143: LD_INT 117
15145: PUSH
15146: LD_INT 118
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: ST_TO_ADDR
15163: GO 17946
15165: LD_INT 5
15167: DOUBLE
15168: EQUAL
15169: IFTRUE 15173
15171: GO 15285
15173: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15174: LD_ADDR_VAR 0 1
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: LD_INT 4
15184: PUSH
15185: LD_INT 5
15187: PUSH
15188: LD_INT 6
15190: PUSH
15191: LD_INT 8
15193: PUSH
15194: LD_INT 11
15196: PUSH
15197: LD_INT 12
15199: PUSH
15200: LD_INT 15
15202: PUSH
15203: LD_INT 16
15205: PUSH
15206: LD_INT 22
15208: PUSH
15209: LD_INT 23
15211: PUSH
15212: LD_INT 25
15214: PUSH
15215: LD_INT 26
15217: PUSH
15218: LD_INT 36
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 101
15239: PUSH
15240: LD_INT 102
15242: PUSH
15243: LD_INT 105
15245: PUSH
15246: LD_INT 106
15248: PUSH
15249: LD_INT 108
15251: PUSH
15252: LD_INT 109
15254: PUSH
15255: LD_INT 112
15257: PUSH
15258: LD_INT 116
15260: PUSH
15261: LD_INT 117
15263: PUSH
15264: LD_INT 118
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: ST_TO_ADDR
15283: GO 17946
15285: LD_INT 6
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15425
15293: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: LD_INT 4
15304: PUSH
15305: LD_INT 5
15307: PUSH
15308: LD_INT 6
15310: PUSH
15311: LD_INT 8
15313: PUSH
15314: LD_INT 11
15316: PUSH
15317: LD_INT 12
15319: PUSH
15320: LD_INT 15
15322: PUSH
15323: LD_INT 16
15325: PUSH
15326: LD_INT 20
15328: PUSH
15329: LD_INT 21
15331: PUSH
15332: LD_INT 22
15334: PUSH
15335: LD_INT 23
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 26
15343: PUSH
15344: LD_INT 30
15346: PUSH
15347: LD_INT 31
15349: PUSH
15350: LD_INT 32
15352: PUSH
15353: LD_INT 36
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 101
15379: PUSH
15380: LD_INT 102
15382: PUSH
15383: LD_INT 105
15385: PUSH
15386: LD_INT 106
15388: PUSH
15389: LD_INT 108
15391: PUSH
15392: LD_INT 109
15394: PUSH
15395: LD_INT 112
15397: PUSH
15398: LD_INT 116
15400: PUSH
15401: LD_INT 117
15403: PUSH
15404: LD_INT 118
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: ST_TO_ADDR
15423: GO 17946
15425: LD_INT 7
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 15545
15433: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 4
15444: PUSH
15445: LD_INT 5
15447: PUSH
15448: LD_INT 7
15450: PUSH
15451: LD_INT 11
15453: PUSH
15454: LD_INT 12
15456: PUSH
15457: LD_INT 15
15459: PUSH
15460: LD_INT 16
15462: PUSH
15463: LD_INT 20
15465: PUSH
15466: LD_INT 21
15468: PUSH
15469: LD_INT 22
15471: PUSH
15472: LD_INT 23
15474: PUSH
15475: LD_INT 25
15477: PUSH
15478: LD_INT 26
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 101
15499: PUSH
15500: LD_INT 102
15502: PUSH
15503: LD_INT 103
15505: PUSH
15506: LD_INT 105
15508: PUSH
15509: LD_INT 106
15511: PUSH
15512: LD_INT 108
15514: PUSH
15515: LD_INT 112
15517: PUSH
15518: LD_INT 116
15520: PUSH
15521: LD_INT 117
15523: PUSH
15524: LD_INT 118
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: ST_TO_ADDR
15543: GO 17946
15545: LD_INT 8
15547: DOUBLE
15548: EQUAL
15549: IFTRUE 15553
15551: GO 15693
15553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: LD_INT 2
15561: PUSH
15562: LD_INT 4
15564: PUSH
15565: LD_INT 5
15567: PUSH
15568: LD_INT 6
15570: PUSH
15571: LD_INT 7
15573: PUSH
15574: LD_INT 8
15576: PUSH
15577: LD_INT 11
15579: PUSH
15580: LD_INT 12
15582: PUSH
15583: LD_INT 15
15585: PUSH
15586: LD_INT 16
15588: PUSH
15589: LD_INT 20
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 22
15597: PUSH
15598: LD_INT 23
15600: PUSH
15601: LD_INT 25
15603: PUSH
15604: LD_INT 26
15606: PUSH
15607: LD_INT 30
15609: PUSH
15610: LD_INT 31
15612: PUSH
15613: LD_INT 32
15615: PUSH
15616: LD_INT 36
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 101
15643: PUSH
15644: LD_INT 102
15646: PUSH
15647: LD_INT 103
15649: PUSH
15650: LD_INT 105
15652: PUSH
15653: LD_INT 106
15655: PUSH
15656: LD_INT 108
15658: PUSH
15659: LD_INT 109
15661: PUSH
15662: LD_INT 112
15664: PUSH
15665: LD_INT 116
15667: PUSH
15668: LD_INT 117
15670: PUSH
15671: LD_INT 118
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
15691: GO 17946
15693: LD_INT 9
15695: DOUBLE
15696: EQUAL
15697: IFTRUE 15701
15699: GO 15849
15701: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 6
15718: PUSH
15719: LD_INT 7
15721: PUSH
15722: LD_INT 8
15724: PUSH
15725: LD_INT 11
15727: PUSH
15728: LD_INT 12
15730: PUSH
15731: LD_INT 15
15733: PUSH
15734: LD_INT 16
15736: PUSH
15737: LD_INT 20
15739: PUSH
15740: LD_INT 21
15742: PUSH
15743: LD_INT 22
15745: PUSH
15746: LD_INT 23
15748: PUSH
15749: LD_INT 25
15751: PUSH
15752: LD_INT 26
15754: PUSH
15755: LD_INT 28
15757: PUSH
15758: LD_INT 30
15760: PUSH
15761: LD_INT 31
15763: PUSH
15764: LD_INT 32
15766: PUSH
15767: LD_INT 36
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 101
15795: PUSH
15796: LD_INT 102
15798: PUSH
15799: LD_INT 103
15801: PUSH
15802: LD_INT 105
15804: PUSH
15805: LD_INT 106
15807: PUSH
15808: LD_INT 108
15810: PUSH
15811: LD_INT 109
15813: PUSH
15814: LD_INT 112
15816: PUSH
15817: LD_INT 114
15819: PUSH
15820: LD_INT 116
15822: PUSH
15823: LD_INT 117
15825: PUSH
15826: LD_INT 118
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: ST_TO_ADDR
15847: GO 17946
15849: LD_INT 10
15851: DOUBLE
15852: EQUAL
15853: IFTRUE 15857
15855: GO 16053
15857: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: LD_INT 4
15868: PUSH
15869: LD_INT 5
15871: PUSH
15872: LD_INT 6
15874: PUSH
15875: LD_INT 7
15877: PUSH
15878: LD_INT 8
15880: PUSH
15881: LD_INT 9
15883: PUSH
15884: LD_INT 10
15886: PUSH
15887: LD_INT 11
15889: PUSH
15890: LD_INT 12
15892: PUSH
15893: LD_INT 13
15895: PUSH
15896: LD_INT 14
15898: PUSH
15899: LD_INT 15
15901: PUSH
15902: LD_INT 16
15904: PUSH
15905: LD_INT 17
15907: PUSH
15908: LD_INT 18
15910: PUSH
15911: LD_INT 19
15913: PUSH
15914: LD_INT 20
15916: PUSH
15917: LD_INT 21
15919: PUSH
15920: LD_INT 22
15922: PUSH
15923: LD_INT 23
15925: PUSH
15926: LD_INT 24
15928: PUSH
15929: LD_INT 25
15931: PUSH
15932: LD_INT 26
15934: PUSH
15935: LD_INT 28
15937: PUSH
15938: LD_INT 30
15940: PUSH
15941: LD_INT 31
15943: PUSH
15944: LD_INT 32
15946: PUSH
15947: LD_INT 36
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 101
15983: PUSH
15984: LD_INT 102
15986: PUSH
15987: LD_INT 103
15989: PUSH
15990: LD_INT 104
15992: PUSH
15993: LD_INT 105
15995: PUSH
15996: LD_INT 106
15998: PUSH
15999: LD_INT 107
16001: PUSH
16002: LD_INT 108
16004: PUSH
16005: LD_INT 109
16007: PUSH
16008: LD_INT 110
16010: PUSH
16011: LD_INT 111
16013: PUSH
16014: LD_INT 112
16016: PUSH
16017: LD_INT 114
16019: PUSH
16020: LD_INT 116
16022: PUSH
16023: LD_INT 117
16025: PUSH
16026: LD_INT 118
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ST_TO_ADDR
16051: GO 17946
16053: LD_INT 11
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16061
16059: GO 16265
16061: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16062: LD_ADDR_VAR 0 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 3
16072: PUSH
16073: LD_INT 4
16075: PUSH
16076: LD_INT 5
16078: PUSH
16079: LD_INT 6
16081: PUSH
16082: LD_INT 7
16084: PUSH
16085: LD_INT 8
16087: PUSH
16088: LD_INT 9
16090: PUSH
16091: LD_INT 10
16093: PUSH
16094: LD_INT 11
16096: PUSH
16097: LD_INT 12
16099: PUSH
16100: LD_INT 13
16102: PUSH
16103: LD_INT 14
16105: PUSH
16106: LD_INT 15
16108: PUSH
16109: LD_INT 16
16111: PUSH
16112: LD_INT 17
16114: PUSH
16115: LD_INT 18
16117: PUSH
16118: LD_INT 19
16120: PUSH
16121: LD_INT 20
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 22
16129: PUSH
16130: LD_INT 23
16132: PUSH
16133: LD_INT 24
16135: PUSH
16136: LD_INT 25
16138: PUSH
16139: LD_INT 26
16141: PUSH
16142: LD_INT 28
16144: PUSH
16145: LD_INT 30
16147: PUSH
16148: LD_INT 31
16150: PUSH
16151: LD_INT 32
16153: PUSH
16154: LD_INT 34
16156: PUSH
16157: LD_INT 36
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 101
16195: PUSH
16196: LD_INT 102
16198: PUSH
16199: LD_INT 103
16201: PUSH
16202: LD_INT 104
16204: PUSH
16205: LD_INT 105
16207: PUSH
16208: LD_INT 106
16210: PUSH
16211: LD_INT 107
16213: PUSH
16214: LD_INT 108
16216: PUSH
16217: LD_INT 109
16219: PUSH
16220: LD_INT 110
16222: PUSH
16223: LD_INT 111
16225: PUSH
16226: LD_INT 112
16228: PUSH
16229: LD_INT 114
16231: PUSH
16232: LD_INT 116
16234: PUSH
16235: LD_INT 117
16237: PUSH
16238: LD_INT 118
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: ST_TO_ADDR
16263: GO 17946
16265: LD_INT 12
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16273
16271: GO 16493
16273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16274: LD_ADDR_VAR 0 1
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: LD_INT 3
16287: PUSH
16288: LD_INT 4
16290: PUSH
16291: LD_INT 5
16293: PUSH
16294: LD_INT 6
16296: PUSH
16297: LD_INT 7
16299: PUSH
16300: LD_INT 8
16302: PUSH
16303: LD_INT 9
16305: PUSH
16306: LD_INT 10
16308: PUSH
16309: LD_INT 11
16311: PUSH
16312: LD_INT 12
16314: PUSH
16315: LD_INT 13
16317: PUSH
16318: LD_INT 14
16320: PUSH
16321: LD_INT 15
16323: PUSH
16324: LD_INT 16
16326: PUSH
16327: LD_INT 17
16329: PUSH
16330: LD_INT 18
16332: PUSH
16333: LD_INT 19
16335: PUSH
16336: LD_INT 20
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_INT 23
16347: PUSH
16348: LD_INT 24
16350: PUSH
16351: LD_INT 25
16353: PUSH
16354: LD_INT 26
16356: PUSH
16357: LD_INT 27
16359: PUSH
16360: LD_INT 28
16362: PUSH
16363: LD_INT 30
16365: PUSH
16366: LD_INT 31
16368: PUSH
16369: LD_INT 32
16371: PUSH
16372: LD_INT 33
16374: PUSH
16375: LD_INT 34
16377: PUSH
16378: LD_INT 36
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 101
16419: PUSH
16420: LD_INT 102
16422: PUSH
16423: LD_INT 103
16425: PUSH
16426: LD_INT 104
16428: PUSH
16429: LD_INT 105
16431: PUSH
16432: LD_INT 106
16434: PUSH
16435: LD_INT 107
16437: PUSH
16438: LD_INT 108
16440: PUSH
16441: LD_INT 109
16443: PUSH
16444: LD_INT 110
16446: PUSH
16447: LD_INT 111
16449: PUSH
16450: LD_INT 112
16452: PUSH
16453: LD_INT 113
16455: PUSH
16456: LD_INT 114
16458: PUSH
16459: LD_INT 116
16461: PUSH
16462: LD_INT 117
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: ST_TO_ADDR
16491: GO 17946
16493: LD_INT 13
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16709
16501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16502: LD_ADDR_VAR 0 1
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: LD_INT 8
16524: PUSH
16525: LD_INT 9
16527: PUSH
16528: LD_INT 10
16530: PUSH
16531: LD_INT 11
16533: PUSH
16534: LD_INT 12
16536: PUSH
16537: LD_INT 14
16539: PUSH
16540: LD_INT 15
16542: PUSH
16543: LD_INT 16
16545: PUSH
16546: LD_INT 17
16548: PUSH
16549: LD_INT 18
16551: PUSH
16552: LD_INT 19
16554: PUSH
16555: LD_INT 20
16557: PUSH
16558: LD_INT 21
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_INT 23
16566: PUSH
16567: LD_INT 24
16569: PUSH
16570: LD_INT 25
16572: PUSH
16573: LD_INT 26
16575: PUSH
16576: LD_INT 27
16578: PUSH
16579: LD_INT 28
16581: PUSH
16582: LD_INT 30
16584: PUSH
16585: LD_INT 31
16587: PUSH
16588: LD_INT 32
16590: PUSH
16591: LD_INT 33
16593: PUSH
16594: LD_INT 34
16596: PUSH
16597: LD_INT 36
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 101
16635: PUSH
16636: LD_INT 102
16638: PUSH
16639: LD_INT 103
16641: PUSH
16642: LD_INT 104
16644: PUSH
16645: LD_INT 105
16647: PUSH
16648: LD_INT 106
16650: PUSH
16651: LD_INT 107
16653: PUSH
16654: LD_INT 108
16656: PUSH
16657: LD_INT 109
16659: PUSH
16660: LD_INT 110
16662: PUSH
16663: LD_INT 111
16665: PUSH
16666: LD_INT 112
16668: PUSH
16669: LD_INT 113
16671: PUSH
16672: LD_INT 114
16674: PUSH
16675: LD_INT 116
16677: PUSH
16678: LD_INT 117
16680: PUSH
16681: LD_INT 118
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: ST_TO_ADDR
16707: GO 17946
16709: LD_INT 14
16711: DOUBLE
16712: EQUAL
16713: IFTRUE 16717
16715: GO 16941
16717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16718: LD_ADDR_VAR 0 1
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: LD_INT 6
16740: PUSH
16741: LD_INT 7
16743: PUSH
16744: LD_INT 8
16746: PUSH
16747: LD_INT 9
16749: PUSH
16750: LD_INT 10
16752: PUSH
16753: LD_INT 11
16755: PUSH
16756: LD_INT 12
16758: PUSH
16759: LD_INT 13
16761: PUSH
16762: LD_INT 14
16764: PUSH
16765: LD_INT 15
16767: PUSH
16768: LD_INT 16
16770: PUSH
16771: LD_INT 17
16773: PUSH
16774: LD_INT 18
16776: PUSH
16777: LD_INT 19
16779: PUSH
16780: LD_INT 20
16782: PUSH
16783: LD_INT 21
16785: PUSH
16786: LD_INT 22
16788: PUSH
16789: LD_INT 23
16791: PUSH
16792: LD_INT 24
16794: PUSH
16795: LD_INT 25
16797: PUSH
16798: LD_INT 26
16800: PUSH
16801: LD_INT 27
16803: PUSH
16804: LD_INT 28
16806: PUSH
16807: LD_INT 29
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: LD_INT 31
16815: PUSH
16816: LD_INT 32
16818: PUSH
16819: LD_INT 33
16821: PUSH
16822: LD_INT 34
16824: PUSH
16825: LD_INT 36
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 101
16867: PUSH
16868: LD_INT 102
16870: PUSH
16871: LD_INT 103
16873: PUSH
16874: LD_INT 104
16876: PUSH
16877: LD_INT 105
16879: PUSH
16880: LD_INT 106
16882: PUSH
16883: LD_INT 107
16885: PUSH
16886: LD_INT 108
16888: PUSH
16889: LD_INT 109
16891: PUSH
16892: LD_INT 110
16894: PUSH
16895: LD_INT 111
16897: PUSH
16898: LD_INT 112
16900: PUSH
16901: LD_INT 113
16903: PUSH
16904: LD_INT 114
16906: PUSH
16907: LD_INT 116
16909: PUSH
16910: LD_INT 117
16912: PUSH
16913: LD_INT 118
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: ST_TO_ADDR
16939: GO 17946
16941: LD_INT 15
16943: DOUBLE
16944: EQUAL
16945: IFTRUE 16949
16947: GO 17173
16949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_INT 1
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: LD_INT 4
16966: PUSH
16967: LD_INT 5
16969: PUSH
16970: LD_INT 6
16972: PUSH
16973: LD_INT 7
16975: PUSH
16976: LD_INT 8
16978: PUSH
16979: LD_INT 9
16981: PUSH
16982: LD_INT 10
16984: PUSH
16985: LD_INT 11
16987: PUSH
16988: LD_INT 12
16990: PUSH
16991: LD_INT 13
16993: PUSH
16994: LD_INT 14
16996: PUSH
16997: LD_INT 15
16999: PUSH
17000: LD_INT 16
17002: PUSH
17003: LD_INT 17
17005: PUSH
17006: LD_INT 18
17008: PUSH
17009: LD_INT 19
17011: PUSH
17012: LD_INT 20
17014: PUSH
17015: LD_INT 21
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_INT 23
17023: PUSH
17024: LD_INT 24
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 26
17032: PUSH
17033: LD_INT 27
17035: PUSH
17036: LD_INT 28
17038: PUSH
17039: LD_INT 29
17041: PUSH
17042: LD_INT 30
17044: PUSH
17045: LD_INT 31
17047: PUSH
17048: LD_INT 32
17050: PUSH
17051: LD_INT 33
17053: PUSH
17054: LD_INT 34
17056: PUSH
17057: LD_INT 36
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 101
17099: PUSH
17100: LD_INT 102
17102: PUSH
17103: LD_INT 103
17105: PUSH
17106: LD_INT 104
17108: PUSH
17109: LD_INT 105
17111: PUSH
17112: LD_INT 106
17114: PUSH
17115: LD_INT 107
17117: PUSH
17118: LD_INT 108
17120: PUSH
17121: LD_INT 109
17123: PUSH
17124: LD_INT 110
17126: PUSH
17127: LD_INT 111
17129: PUSH
17130: LD_INT 112
17132: PUSH
17133: LD_INT 113
17135: PUSH
17136: LD_INT 114
17138: PUSH
17139: LD_INT 116
17141: PUSH
17142: LD_INT 117
17144: PUSH
17145: LD_INT 118
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: ST_TO_ADDR
17171: GO 17946
17173: LD_INT 16
17175: DOUBLE
17176: EQUAL
17177: IFTRUE 17181
17179: GO 17317
17181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17182: LD_ADDR_VAR 0 1
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: LD_INT 4
17192: PUSH
17193: LD_INT 5
17195: PUSH
17196: LD_INT 7
17198: PUSH
17199: LD_INT 11
17201: PUSH
17202: LD_INT 12
17204: PUSH
17205: LD_INT 15
17207: PUSH
17208: LD_INT 16
17210: PUSH
17211: LD_INT 20
17213: PUSH
17214: LD_INT 21
17216: PUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 23
17222: PUSH
17223: LD_INT 25
17225: PUSH
17226: LD_INT 26
17228: PUSH
17229: LD_INT 30
17231: PUSH
17232: LD_INT 31
17234: PUSH
17235: LD_INT 32
17237: PUSH
17238: LD_INT 33
17240: PUSH
17241: LD_INT 34
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 101
17267: PUSH
17268: LD_INT 102
17270: PUSH
17271: LD_INT 103
17273: PUSH
17274: LD_INT 106
17276: PUSH
17277: LD_INT 108
17279: PUSH
17280: LD_INT 112
17282: PUSH
17283: LD_INT 113
17285: PUSH
17286: LD_INT 114
17288: PUSH
17289: LD_INT 116
17291: PUSH
17292: LD_INT 117
17294: PUSH
17295: LD_INT 118
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: ST_TO_ADDR
17315: GO 17946
17317: LD_INT 17
17319: DOUBLE
17320: EQUAL
17321: IFTRUE 17325
17323: GO 17549
17325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17326: LD_ADDR_VAR 0 1
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: LD_INT 2
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 4
17342: PUSH
17343: LD_INT 5
17345: PUSH
17346: LD_INT 6
17348: PUSH
17349: LD_INT 7
17351: PUSH
17352: LD_INT 8
17354: PUSH
17355: LD_INT 9
17357: PUSH
17358: LD_INT 10
17360: PUSH
17361: LD_INT 11
17363: PUSH
17364: LD_INT 12
17366: PUSH
17367: LD_INT 13
17369: PUSH
17370: LD_INT 14
17372: PUSH
17373: LD_INT 15
17375: PUSH
17376: LD_INT 16
17378: PUSH
17379: LD_INT 17
17381: PUSH
17382: LD_INT 18
17384: PUSH
17385: LD_INT 19
17387: PUSH
17388: LD_INT 20
17390: PUSH
17391: LD_INT 21
17393: PUSH
17394: LD_INT 22
17396: PUSH
17397: LD_INT 23
17399: PUSH
17400: LD_INT 24
17402: PUSH
17403: LD_INT 25
17405: PUSH
17406: LD_INT 26
17408: PUSH
17409: LD_INT 27
17411: PUSH
17412: LD_INT 28
17414: PUSH
17415: LD_INT 29
17417: PUSH
17418: LD_INT 30
17420: PUSH
17421: LD_INT 31
17423: PUSH
17424: LD_INT 32
17426: PUSH
17427: LD_INT 33
17429: PUSH
17430: LD_INT 34
17432: PUSH
17433: LD_INT 36
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 101
17475: PUSH
17476: LD_INT 102
17478: PUSH
17479: LD_INT 103
17481: PUSH
17482: LD_INT 104
17484: PUSH
17485: LD_INT 105
17487: PUSH
17488: LD_INT 106
17490: PUSH
17491: LD_INT 107
17493: PUSH
17494: LD_INT 108
17496: PUSH
17497: LD_INT 109
17499: PUSH
17500: LD_INT 110
17502: PUSH
17503: LD_INT 111
17505: PUSH
17506: LD_INT 112
17508: PUSH
17509: LD_INT 113
17511: PUSH
17512: LD_INT 114
17514: PUSH
17515: LD_INT 116
17517: PUSH
17518: LD_INT 117
17520: PUSH
17521: LD_INT 118
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: ST_TO_ADDR
17547: GO 17946
17549: LD_INT 18
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17705
17557: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: LD_INT 2
17565: PUSH
17566: LD_INT 4
17568: PUSH
17569: LD_INT 5
17571: PUSH
17572: LD_INT 7
17574: PUSH
17575: LD_INT 11
17577: PUSH
17578: LD_INT 12
17580: PUSH
17581: LD_INT 15
17583: PUSH
17584: LD_INT 16
17586: PUSH
17587: LD_INT 20
17589: PUSH
17590: LD_INT 21
17592: PUSH
17593: LD_INT 22
17595: PUSH
17596: LD_INT 23
17598: PUSH
17599: LD_INT 25
17601: PUSH
17602: LD_INT 26
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 31
17610: PUSH
17611: LD_INT 32
17613: PUSH
17614: LD_INT 33
17616: PUSH
17617: LD_INT 34
17619: PUSH
17620: LD_INT 35
17622: PUSH
17623: LD_INT 36
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 101
17651: PUSH
17652: LD_INT 102
17654: PUSH
17655: LD_INT 103
17657: PUSH
17658: LD_INT 106
17660: PUSH
17661: LD_INT 108
17663: PUSH
17664: LD_INT 112
17666: PUSH
17667: LD_INT 113
17669: PUSH
17670: LD_INT 114
17672: PUSH
17673: LD_INT 115
17675: PUSH
17676: LD_INT 116
17678: PUSH
17679: LD_INT 117
17681: PUSH
17682: LD_INT 118
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: ST_TO_ADDR
17703: GO 17946
17705: LD_INT 19
17707: DOUBLE
17708: EQUAL
17709: IFTRUE 17713
17711: GO 17945
17713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: LD_INT 4
17730: PUSH
17731: LD_INT 5
17733: PUSH
17734: LD_INT 6
17736: PUSH
17737: LD_INT 7
17739: PUSH
17740: LD_INT 8
17742: PUSH
17743: LD_INT 9
17745: PUSH
17746: LD_INT 10
17748: PUSH
17749: LD_INT 11
17751: PUSH
17752: LD_INT 12
17754: PUSH
17755: LD_INT 13
17757: PUSH
17758: LD_INT 14
17760: PUSH
17761: LD_INT 15
17763: PUSH
17764: LD_INT 16
17766: PUSH
17767: LD_INT 17
17769: PUSH
17770: LD_INT 18
17772: PUSH
17773: LD_INT 19
17775: PUSH
17776: LD_INT 20
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 22
17784: PUSH
17785: LD_INT 23
17787: PUSH
17788: LD_INT 24
17790: PUSH
17791: LD_INT 25
17793: PUSH
17794: LD_INT 26
17796: PUSH
17797: LD_INT 27
17799: PUSH
17800: LD_INT 28
17802: PUSH
17803: LD_INT 29
17805: PUSH
17806: LD_INT 30
17808: PUSH
17809: LD_INT 31
17811: PUSH
17812: LD_INT 32
17814: PUSH
17815: LD_INT 33
17817: PUSH
17818: LD_INT 34
17820: PUSH
17821: LD_INT 35
17823: PUSH
17824: LD_INT 36
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 101
17867: PUSH
17868: LD_INT 102
17870: PUSH
17871: LD_INT 103
17873: PUSH
17874: LD_INT 104
17876: PUSH
17877: LD_INT 105
17879: PUSH
17880: LD_INT 106
17882: PUSH
17883: LD_INT 107
17885: PUSH
17886: LD_INT 108
17888: PUSH
17889: LD_INT 109
17891: PUSH
17892: LD_INT 110
17894: PUSH
17895: LD_INT 111
17897: PUSH
17898: LD_INT 112
17900: PUSH
17901: LD_INT 113
17903: PUSH
17904: LD_INT 114
17906: PUSH
17907: LD_INT 115
17909: PUSH
17910: LD_INT 116
17912: PUSH
17913: LD_INT 117
17915: PUSH
17916: LD_INT 118
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: ST_TO_ADDR
17943: GO 17946
17945: POP
// end else
17946: GO 18177
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17948: LD_ADDR_VAR 0 1
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 3
17961: PUSH
17962: LD_INT 4
17964: PUSH
17965: LD_INT 5
17967: PUSH
17968: LD_INT 6
17970: PUSH
17971: LD_INT 7
17973: PUSH
17974: LD_INT 8
17976: PUSH
17977: LD_INT 9
17979: PUSH
17980: LD_INT 10
17982: PUSH
17983: LD_INT 11
17985: PUSH
17986: LD_INT 12
17988: PUSH
17989: LD_INT 13
17991: PUSH
17992: LD_INT 14
17994: PUSH
17995: LD_INT 15
17997: PUSH
17998: LD_INT 16
18000: PUSH
18001: LD_INT 17
18003: PUSH
18004: LD_INT 18
18006: PUSH
18007: LD_INT 19
18009: PUSH
18010: LD_INT 20
18012: PUSH
18013: LD_INT 21
18015: PUSH
18016: LD_INT 22
18018: PUSH
18019: LD_INT 23
18021: PUSH
18022: LD_INT 24
18024: PUSH
18025: LD_INT 25
18027: PUSH
18028: LD_INT 26
18030: PUSH
18031: LD_INT 27
18033: PUSH
18034: LD_INT 28
18036: PUSH
18037: LD_INT 29
18039: PUSH
18040: LD_INT 30
18042: PUSH
18043: LD_INT 31
18045: PUSH
18046: LD_INT 32
18048: PUSH
18049: LD_INT 33
18051: PUSH
18052: LD_INT 34
18054: PUSH
18055: LD_INT 35
18057: PUSH
18058: LD_INT 36
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 101
18101: PUSH
18102: LD_INT 102
18104: PUSH
18105: LD_INT 103
18107: PUSH
18108: LD_INT 104
18110: PUSH
18111: LD_INT 105
18113: PUSH
18114: LD_INT 106
18116: PUSH
18117: LD_INT 107
18119: PUSH
18120: LD_INT 108
18122: PUSH
18123: LD_INT 109
18125: PUSH
18126: LD_INT 110
18128: PUSH
18129: LD_INT 111
18131: PUSH
18132: LD_INT 112
18134: PUSH
18135: LD_INT 113
18137: PUSH
18138: LD_INT 114
18140: PUSH
18141: LD_INT 115
18143: PUSH
18144: LD_INT 116
18146: PUSH
18147: LD_INT 117
18149: PUSH
18150: LD_INT 118
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: ST_TO_ADDR
// if result then
18177: LD_VAR 0 1
18181: IFFALSE 18470
// begin normal :=  ;
18183: LD_ADDR_VAR 0 3
18187: PUSH
18188: LD_STRING 
18190: ST_TO_ADDR
// hardcore :=  ;
18191: LD_ADDR_VAR 0 4
18195: PUSH
18196: LD_STRING 
18198: ST_TO_ADDR
// for i = 1 to normalCounter do
18199: LD_ADDR_VAR 0 5
18203: PUSH
18204: DOUBLE
18205: LD_INT 1
18207: DEC
18208: ST_TO_ADDR
18209: LD_EXP 63
18213: PUSH
18214: FOR_TO
18215: IFFALSE 18316
// begin tmp := 0 ;
18217: LD_ADDR_VAR 0 2
18221: PUSH
18222: LD_STRING 0
18224: ST_TO_ADDR
// if result [ 1 ] then
18225: LD_VAR 0 1
18229: PUSH
18230: LD_INT 1
18232: ARRAY
18233: IFFALSE 18298
// if result [ 1 ] [ 1 ] = i then
18235: LD_VAR 0 1
18239: PUSH
18240: LD_INT 1
18242: ARRAY
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PUSH
18248: LD_VAR 0 5
18252: EQUAL
18253: IFFALSE 18298
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18255: LD_ADDR_VAR 0 1
18259: PUSH
18260: LD_VAR 0 1
18264: PPUSH
18265: LD_INT 1
18267: PPUSH
18268: LD_VAR 0 1
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PPUSH
18277: LD_INT 1
18279: PPUSH
18280: CALL_OW 3
18284: PPUSH
18285: CALL_OW 1
18289: ST_TO_ADDR
// tmp := 1 ;
18290: LD_ADDR_VAR 0 2
18294: PUSH
18295: LD_STRING 1
18297: ST_TO_ADDR
// end ; normal := normal & tmp ;
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: LD_VAR 0 3
18307: PUSH
18308: LD_VAR 0 2
18312: STR
18313: ST_TO_ADDR
// end ;
18314: GO 18214
18316: POP
18317: POP
// for i = 1 to hardcoreCounter do
18318: LD_ADDR_VAR 0 5
18322: PUSH
18323: DOUBLE
18324: LD_INT 1
18326: DEC
18327: ST_TO_ADDR
18328: LD_EXP 64
18332: PUSH
18333: FOR_TO
18334: IFFALSE 18439
// begin tmp := 0 ;
18336: LD_ADDR_VAR 0 2
18340: PUSH
18341: LD_STRING 0
18343: ST_TO_ADDR
// if result [ 2 ] then
18344: LD_VAR 0 1
18348: PUSH
18349: LD_INT 2
18351: ARRAY
18352: IFFALSE 18421
// if result [ 2 ] [ 1 ] = 100 + i then
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 2
18361: ARRAY
18362: PUSH
18363: LD_INT 1
18365: ARRAY
18366: PUSH
18367: LD_INT 100
18369: PUSH
18370: LD_VAR 0 5
18374: PLUS
18375: EQUAL
18376: IFFALSE 18421
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_VAR 0 1
18387: PPUSH
18388: LD_INT 2
18390: PPUSH
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 2
18398: ARRAY
18399: PPUSH
18400: LD_INT 1
18402: PPUSH
18403: CALL_OW 3
18407: PPUSH
18408: CALL_OW 1
18412: ST_TO_ADDR
// tmp := 1 ;
18413: LD_ADDR_VAR 0 2
18417: PUSH
18418: LD_STRING 1
18420: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18421: LD_ADDR_VAR 0 4
18425: PUSH
18426: LD_VAR 0 4
18430: PUSH
18431: LD_VAR 0 2
18435: STR
18436: ST_TO_ADDR
// end ;
18437: GO 18333
18439: POP
18440: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
18441: LD_STRING getStreamItemsFromMission("
18443: PUSH
18444: LD_VAR 0 3
18448: STR
18449: PUSH
18450: LD_STRING ","
18452: STR
18453: PUSH
18454: LD_VAR 0 4
18458: STR
18459: PUSH
18460: LD_STRING ")
18462: STR
18463: PPUSH
18464: CALL_OW 559
// end else
18468: GO 18477
// ToLua ( getStreamItemsFromMission("","") ) ;
18470: LD_STRING getStreamItemsFromMission("","")
18472: PPUSH
18473: CALL_OW 559
// end ;
18477: LD_VAR 0 1
18481: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18482: LD_EXP 62
18486: PUSH
18487: LD_EXP 67
18491: AND
18492: IFFALSE 18616
18494: GO 18496
18496: DISABLE
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
// begin enable ;
18501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18502: LD_ADDR_VAR 0 2
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_OWVAR 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 34
18524: PUSH
18525: LD_INT 7
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 34
18534: PUSH
18535: LD_INT 45
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 34
18544: PUSH
18545: LD_INT 28
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 34
18554: PUSH
18555: LD_INT 47
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PPUSH
18573: CALL_OW 69
18577: ST_TO_ADDR
// if not tmp then
18578: LD_VAR 0 2
18582: NOT
18583: IFFALSE 18587
// exit ;
18585: GO 18616
// for i in tmp do
18587: LD_ADDR_VAR 0 1
18591: PUSH
18592: LD_VAR 0 2
18596: PUSH
18597: FOR_IN
18598: IFFALSE 18614
// begin SetLives ( i , 0 ) ;
18600: LD_VAR 0 1
18604: PPUSH
18605: LD_INT 0
18607: PPUSH
18608: CALL_OW 234
// end ;
18612: GO 18597
18614: POP
18615: POP
// end ;
18616: PPOPN 2
18618: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18619: LD_EXP 62
18623: PUSH
18624: LD_EXP 68
18628: AND
18629: IFFALSE 18713
18631: GO 18633
18633: DISABLE
18634: LD_INT 0
18636: PPUSH
18637: PPUSH
// begin enable ;
18638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18639: LD_ADDR_VAR 0 2
18643: PUSH
18644: LD_INT 22
18646: PUSH
18647: LD_OWVAR 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 32
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PPUSH
18670: CALL_OW 69
18674: ST_TO_ADDR
// if not tmp then
18675: LD_VAR 0 2
18679: NOT
18680: IFFALSE 18684
// exit ;
18682: GO 18713
// for i in tmp do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: LD_VAR 0 2
18693: PUSH
18694: FOR_IN
18695: IFFALSE 18711
// begin SetLives ( i , 0 ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_INT 0
18704: PPUSH
18705: CALL_OW 234
// end ;
18709: GO 18694
18711: POP
18712: POP
// end ;
18713: PPOPN 2
18715: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18716: LD_EXP 62
18720: PUSH
18721: LD_EXP 65
18725: AND
18726: IFFALSE 18819
18728: GO 18730
18730: DISABLE
18731: LD_INT 0
18733: PPUSH
// begin enable ;
18734: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18735: LD_ADDR_VAR 0 1
18739: PUSH
18740: LD_INT 22
18742: PUSH
18743: LD_OWVAR 2
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: LD_INT 25
18757: PUSH
18758: LD_INT 5
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 25
18767: PUSH
18768: LD_INT 9
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 8
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 69
18799: PUSH
18800: FOR_IN
18801: IFFALSE 18817
// begin SetClass ( i , 1 ) ;
18803: LD_VAR 0 1
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 336
// end ;
18815: GO 18800
18817: POP
18818: POP
// end ;
18819: PPOPN 1
18821: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18822: LD_EXP 62
18826: PUSH
18827: LD_EXP 66
18831: AND
18832: PUSH
18833: LD_OWVAR 65
18837: PUSH
18838: LD_INT 7
18840: LESS
18841: AND
18842: IFFALSE 18856
18844: GO 18846
18846: DISABLE
// begin enable ;
18847: ENABLE
// game_speed := 7 ;
18848: LD_ADDR_OWVAR 65
18852: PUSH
18853: LD_INT 7
18855: ST_TO_ADDR
// end ;
18856: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18857: LD_EXP 62
18861: PUSH
18862: LD_EXP 69
18866: AND
18867: IFFALSE 19069
18869: GO 18871
18871: DISABLE
18872: LD_INT 0
18874: PPUSH
18875: PPUSH
18876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18877: LD_ADDR_VAR 0 3
18881: PUSH
18882: LD_INT 81
18884: PUSH
18885: LD_OWVAR 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 69
18912: ST_TO_ADDR
// if not tmp then
18913: LD_VAR 0 3
18917: NOT
18918: IFFALSE 18922
// exit ;
18920: GO 19069
// if tmp > 5 then
18922: LD_VAR 0 3
18926: PUSH
18927: LD_INT 5
18929: GREATER
18930: IFFALSE 18942
// k := 5 else
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 5
18939: ST_TO_ADDR
18940: GO 18952
// k := tmp ;
18942: LD_ADDR_VAR 0 2
18946: PUSH
18947: LD_VAR 0 3
18951: ST_TO_ADDR
// for i := 1 to k do
18952: LD_ADDR_VAR 0 1
18956: PUSH
18957: DOUBLE
18958: LD_INT 1
18960: DEC
18961: ST_TO_ADDR
18962: LD_VAR 0 2
18966: PUSH
18967: FOR_TO
18968: IFFALSE 19067
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18970: LD_VAR 0 3
18974: PUSH
18975: LD_VAR 0 1
18979: ARRAY
18980: PPUSH
18981: LD_VAR 0 1
18985: PUSH
18986: LD_INT 4
18988: MOD
18989: PUSH
18990: LD_INT 1
18992: PLUS
18993: PPUSH
18994: CALL_OW 259
18998: PUSH
18999: LD_INT 10
19001: LESS
19002: IFFALSE 19065
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19004: LD_VAR 0 3
19008: PUSH
19009: LD_VAR 0 1
19013: ARRAY
19014: PPUSH
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 4
19022: MOD
19023: PUSH
19024: LD_INT 1
19026: PLUS
19027: PPUSH
19028: LD_VAR 0 3
19032: PUSH
19033: LD_VAR 0 1
19037: ARRAY
19038: PPUSH
19039: LD_VAR 0 1
19043: PUSH
19044: LD_INT 4
19046: MOD
19047: PUSH
19048: LD_INT 1
19050: PLUS
19051: PPUSH
19052: CALL_OW 259
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: PPUSH
19061: CALL_OW 237
19065: GO 18967
19067: POP
19068: POP
// end ;
19069: PPOPN 3
19071: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19072: LD_EXP 62
19076: PUSH
19077: LD_EXP 70
19081: AND
19082: IFFALSE 19102
19084: GO 19086
19086: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19087: LD_INT 4
19089: PPUSH
19090: LD_OWVAR 2
19094: PPUSH
19095: LD_INT 0
19097: PPUSH
19098: CALL_OW 324
19102: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19103: LD_EXP 62
19107: PUSH
19108: LD_EXP 99
19112: AND
19113: IFFALSE 19133
19115: GO 19117
19117: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19118: LD_INT 19
19120: PPUSH
19121: LD_OWVAR 2
19125: PPUSH
19126: LD_INT 0
19128: PPUSH
19129: CALL_OW 324
19133: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19134: LD_EXP 62
19138: PUSH
19139: LD_EXP 71
19143: AND
19144: IFFALSE 19246
19146: GO 19148
19148: DISABLE
19149: LD_INT 0
19151: PPUSH
19152: PPUSH
// begin enable ;
19153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19154: LD_ADDR_VAR 0 2
19158: PUSH
19159: LD_INT 22
19161: PUSH
19162: LD_OWVAR 2
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 34
19176: PUSH
19177: LD_INT 11
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 34
19186: PUSH
19187: LD_INT 30
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 69
19207: ST_TO_ADDR
// if not tmp then
19208: LD_VAR 0 2
19212: NOT
19213: IFFALSE 19217
// exit ;
19215: GO 19246
// for i in tmp do
19217: LD_ADDR_VAR 0 1
19221: PUSH
19222: LD_VAR 0 2
19226: PUSH
19227: FOR_IN
19228: IFFALSE 19244
// begin SetLives ( i , 0 ) ;
19230: LD_VAR 0 1
19234: PPUSH
19235: LD_INT 0
19237: PPUSH
19238: CALL_OW 234
// end ;
19242: GO 19227
19244: POP
19245: POP
// end ;
19246: PPOPN 2
19248: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19249: LD_EXP 62
19253: PUSH
19254: LD_EXP 72
19258: AND
19259: IFFALSE 19279
19261: GO 19263
19263: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19264: LD_INT 32
19266: PPUSH
19267: LD_OWVAR 2
19271: PPUSH
19272: LD_INT 0
19274: PPUSH
19275: CALL_OW 324
19279: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19280: LD_EXP 62
19284: PUSH
19285: LD_EXP 73
19289: AND
19290: IFFALSE 19471
19292: GO 19294
19294: DISABLE
19295: LD_INT 0
19297: PPUSH
19298: PPUSH
19299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19300: LD_ADDR_VAR 0 2
19304: PUSH
19305: LD_INT 22
19307: PUSH
19308: LD_OWVAR 2
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 33
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PPUSH
19331: CALL_OW 69
19335: ST_TO_ADDR
// if not tmp then
19336: LD_VAR 0 2
19340: NOT
19341: IFFALSE 19345
// exit ;
19343: GO 19471
// side := 0 ;
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// for i := 1 to 8 do
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: DOUBLE
19359: LD_INT 1
19361: DEC
19362: ST_TO_ADDR
19363: LD_INT 8
19365: PUSH
19366: FOR_TO
19367: IFFALSE 19415
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19369: LD_OWVAR 2
19373: PUSH
19374: LD_VAR 0 1
19378: NONEQUAL
19379: PUSH
19380: LD_OWVAR 2
19384: PPUSH
19385: LD_VAR 0 1
19389: PPUSH
19390: CALL_OW 81
19394: PUSH
19395: LD_INT 2
19397: EQUAL
19398: AND
19399: IFFALSE 19413
// begin side := i ;
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: ST_TO_ADDR
// break ;
19411: GO 19415
// end ;
19413: GO 19366
19415: POP
19416: POP
// if not side then
19417: LD_VAR 0 3
19421: NOT
19422: IFFALSE 19426
// exit ;
19424: GO 19471
// for i := 1 to tmp do
19426: LD_ADDR_VAR 0 1
19430: PUSH
19431: DOUBLE
19432: LD_INT 1
19434: DEC
19435: ST_TO_ADDR
19436: LD_VAR 0 2
19440: PUSH
19441: FOR_TO
19442: IFFALSE 19469
// if Prob ( 60 ) then
19444: LD_INT 60
19446: PPUSH
19447: CALL_OW 13
19451: IFFALSE 19467
// SetSide ( i , side ) ;
19453: LD_VAR 0 1
19457: PPUSH
19458: LD_VAR 0 3
19462: PPUSH
19463: CALL_OW 235
19467: GO 19441
19469: POP
19470: POP
// end ;
19471: PPOPN 3
19473: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19474: LD_EXP 62
19478: PUSH
19479: LD_EXP 75
19483: AND
19484: IFFALSE 19603
19486: GO 19488
19488: DISABLE
19489: LD_INT 0
19491: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19492: LD_ADDR_VAR 0 1
19496: PUSH
19497: LD_INT 22
19499: PUSH
19500: LD_OWVAR 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 21
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: LD_INT 23
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 69
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19601
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 257
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: LD_INT 3
19567: PUSH
19568: LD_INT 4
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: IN
19577: IFFALSE 19599
// SetClass ( un , rand ( 1 , 4 ) ) ;
19579: LD_VAR 0 1
19583: PPUSH
19584: LD_INT 1
19586: PPUSH
19587: LD_INT 4
19589: PPUSH
19590: CALL_OW 12
19594: PPUSH
19595: CALL_OW 336
19599: GO 19546
19601: POP
19602: POP
// end ;
19603: PPOPN 1
19605: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19606: LD_EXP 62
19610: PUSH
19611: LD_EXP 74
19615: AND
19616: IFFALSE 19695
19618: GO 19620
19620: DISABLE
19621: LD_INT 0
19623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_OWVAR 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 21
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 69
19659: ST_TO_ADDR
// if not tmp then
19660: LD_VAR 0 1
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 1
19676: PPUSH
19677: LD_VAR 0 1
19681: PPUSH
19682: CALL_OW 12
19686: ARRAY
19687: PPUSH
19688: LD_INT 100
19690: PPUSH
19691: CALL_OW 234
// end ;
19695: PPOPN 1
19697: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19698: LD_EXP 62
19702: PUSH
19703: LD_EXP 76
19707: AND
19708: IFFALSE 19806
19710: GO 19712
19712: DISABLE
19713: LD_INT 0
19715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19716: LD_ADDR_VAR 0 1
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 21
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// if not tmp then
19752: LD_VAR 0 1
19756: NOT
19757: IFFALSE 19761
// exit ;
19759: GO 19806
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19761: LD_VAR 0 1
19765: PUSH
19766: LD_INT 1
19768: PPUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 12
19778: ARRAY
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: LD_INT 4
19785: PPUSH
19786: CALL_OW 12
19790: PPUSH
19791: LD_INT 3000
19793: PPUSH
19794: LD_INT 9000
19796: PPUSH
19797: CALL_OW 12
19801: PPUSH
19802: CALL_OW 492
// end ;
19806: PPOPN 1
19808: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19809: LD_EXP 62
19813: PUSH
19814: LD_EXP 77
19818: AND
19819: IFFALSE 19839
19821: GO 19823
19823: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19824: LD_INT 1
19826: PPUSH
19827: LD_OWVAR 2
19831: PPUSH
19832: LD_INT 0
19834: PPUSH
19835: CALL_OW 324
19839: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19840: LD_EXP 62
19844: PUSH
19845: LD_EXP 78
19849: AND
19850: IFFALSE 19933
19852: GO 19854
19854: DISABLE
19855: LD_INT 0
19857: PPUSH
19858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19859: LD_ADDR_VAR 0 2
19863: PUSH
19864: LD_INT 22
19866: PUSH
19867: LD_OWVAR 2
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 21
19878: PUSH
19879: LD_INT 3
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PPUSH
19890: CALL_OW 69
19894: ST_TO_ADDR
// if not tmp then
19895: LD_VAR 0 2
19899: NOT
19900: IFFALSE 19904
// exit ;
19902: GO 19933
// for i in tmp do
19904: LD_ADDR_VAR 0 1
19908: PUSH
19909: LD_VAR 0 2
19913: PUSH
19914: FOR_IN
19915: IFFALSE 19931
// SetBLevel ( i , 10 ) ;
19917: LD_VAR 0 1
19921: PPUSH
19922: LD_INT 10
19924: PPUSH
19925: CALL_OW 241
19929: GO 19914
19931: POP
19932: POP
// end ;
19933: PPOPN 2
19935: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19936: LD_EXP 62
19940: PUSH
19941: LD_EXP 79
19945: AND
19946: IFFALSE 20057
19948: GO 19950
19950: DISABLE
19951: LD_INT 0
19953: PPUSH
19954: PPUSH
19955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19956: LD_ADDR_VAR 0 3
19960: PUSH
19961: LD_INT 22
19963: PUSH
19964: LD_OWVAR 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 25
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PPUSH
19987: CALL_OW 69
19991: ST_TO_ADDR
// if not tmp then
19992: LD_VAR 0 3
19996: NOT
19997: IFFALSE 20001
// exit ;
19999: GO 20057
// un := tmp [ rand ( 1 , tmp ) ] ;
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 1
20013: PPUSH
20014: LD_VAR 0 3
20018: PPUSH
20019: CALL_OW 12
20023: ARRAY
20024: ST_TO_ADDR
// if Crawls ( un ) then
20025: LD_VAR 0 2
20029: PPUSH
20030: CALL_OW 318
20034: IFFALSE 20045
// ComWalk ( un ) ;
20036: LD_VAR 0 2
20040: PPUSH
20041: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20045: LD_VAR 0 2
20049: PPUSH
20050: LD_INT 5
20052: PPUSH
20053: CALL_OW 336
// end ;
20057: PPOPN 3
20059: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20060: LD_EXP 62
20064: PUSH
20065: LD_EXP 80
20069: AND
20070: PUSH
20071: LD_OWVAR 67
20075: PUSH
20076: LD_INT 4
20078: LESS
20079: AND
20080: IFFALSE 20099
20082: GO 20084
20084: DISABLE
// begin Difficulty := Difficulty + 1 ;
20085: LD_ADDR_OWVAR 67
20089: PUSH
20090: LD_OWVAR 67
20094: PUSH
20095: LD_INT 1
20097: PLUS
20098: ST_TO_ADDR
// end ;
20099: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20100: LD_EXP 62
20104: PUSH
20105: LD_EXP 81
20109: AND
20110: IFFALSE 20213
20112: GO 20114
20114: DISABLE
20115: LD_INT 0
20117: PPUSH
// begin for i := 1 to 5 do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_INT 5
20130: PUSH
20131: FOR_TO
20132: IFFALSE 20211
// begin uc_nation := nation_nature ;
20134: LD_ADDR_OWVAR 21
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// uc_side := 0 ;
20142: LD_ADDR_OWVAR 20
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20150: LD_ADDR_OWVAR 29
20154: PUSH
20155: LD_INT 12
20157: PUSH
20158: LD_INT 12
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: ST_TO_ADDR
// hc_agressivity := 20 ;
20165: LD_ADDR_OWVAR 35
20169: PUSH
20170: LD_INT 20
20172: ST_TO_ADDR
// hc_class := class_tiger ;
20173: LD_ADDR_OWVAR 28
20177: PUSH
20178: LD_INT 14
20180: ST_TO_ADDR
// hc_gallery :=  ;
20181: LD_ADDR_OWVAR 33
20185: PUSH
20186: LD_STRING 
20188: ST_TO_ADDR
// hc_name :=  ;
20189: LD_ADDR_OWVAR 26
20193: PUSH
20194: LD_STRING 
20196: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20197: CALL_OW 44
20201: PPUSH
20202: LD_INT 0
20204: PPUSH
20205: CALL_OW 51
// end ;
20209: GO 20131
20211: POP
20212: POP
// end ;
20213: PPOPN 1
20215: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20216: LD_EXP 62
20220: PUSH
20221: LD_EXP 82
20225: AND
20226: IFFALSE 20235
20228: GO 20230
20230: DISABLE
// StreamSibBomb ;
20231: CALL 20236 0 0
20235: END
// export function StreamSibBomb ; var i , x , y ; begin
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
20240: PPUSH
20241: PPUSH
// result := false ;
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: LD_INT 0
20249: ST_TO_ADDR
// for i := 1 to 16 do
20250: LD_ADDR_VAR 0 2
20254: PUSH
20255: DOUBLE
20256: LD_INT 1
20258: DEC
20259: ST_TO_ADDR
20260: LD_INT 16
20262: PUSH
20263: FOR_TO
20264: IFFALSE 20463
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20266: LD_ADDR_VAR 0 3
20270: PUSH
20271: LD_INT 10
20273: PUSH
20274: LD_INT 20
20276: PUSH
20277: LD_INT 30
20279: PUSH
20280: LD_INT 40
20282: PUSH
20283: LD_INT 50
20285: PUSH
20286: LD_INT 60
20288: PUSH
20289: LD_INT 70
20291: PUSH
20292: LD_INT 80
20294: PUSH
20295: LD_INT 90
20297: PUSH
20298: LD_INT 100
20300: PUSH
20301: LD_INT 110
20303: PUSH
20304: LD_INT 120
20306: PUSH
20307: LD_INT 130
20309: PUSH
20310: LD_INT 140
20312: PUSH
20313: LD_INT 150
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 1
20335: PPUSH
20336: LD_INT 15
20338: PPUSH
20339: CALL_OW 12
20343: ARRAY
20344: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20345: LD_ADDR_VAR 0 4
20349: PUSH
20350: LD_INT 10
20352: PUSH
20353: LD_INT 20
20355: PUSH
20356: LD_INT 30
20358: PUSH
20359: LD_INT 40
20361: PUSH
20362: LD_INT 50
20364: PUSH
20365: LD_INT 60
20367: PUSH
20368: LD_INT 70
20370: PUSH
20371: LD_INT 80
20373: PUSH
20374: LD_INT 90
20376: PUSH
20377: LD_INT 100
20379: PUSH
20380: LD_INT 110
20382: PUSH
20383: LD_INT 120
20385: PUSH
20386: LD_INT 130
20388: PUSH
20389: LD_INT 140
20391: PUSH
20392: LD_INT 150
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: PPUSH
20415: LD_INT 15
20417: PPUSH
20418: CALL_OW 12
20422: ARRAY
20423: ST_TO_ADDR
// if ValidHex ( x , y ) then
20424: LD_VAR 0 3
20428: PPUSH
20429: LD_VAR 0 4
20433: PPUSH
20434: CALL_OW 488
20438: IFFALSE 20461
// begin result := [ x , y ] ;
20440: LD_ADDR_VAR 0 1
20444: PUSH
20445: LD_VAR 0 3
20449: PUSH
20450: LD_VAR 0 4
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: ST_TO_ADDR
// break ;
20459: GO 20463
// end ; end ;
20461: GO 20263
20463: POP
20464: POP
// if result then
20465: LD_VAR 0 1
20469: IFFALSE 20529
// begin ToLua ( playSibBomb() ) ;
20471: LD_STRING playSibBomb()
20473: PPUSH
20474: CALL_OW 559
// wait ( 0 0$14 ) ;
20478: LD_INT 490
20480: PPUSH
20481: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20485: LD_VAR 0 1
20489: PUSH
20490: LD_INT 1
20492: ARRAY
20493: PPUSH
20494: LD_VAR 0 1
20498: PUSH
20499: LD_INT 2
20501: ARRAY
20502: PPUSH
20503: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20507: LD_VAR 0 1
20511: PUSH
20512: LD_INT 1
20514: ARRAY
20515: PPUSH
20516: LD_VAR 0 1
20520: PUSH
20521: LD_INT 2
20523: ARRAY
20524: PPUSH
20525: CALL_OW 429
// end ; end ;
20529: LD_VAR 0 1
20533: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20534: LD_EXP 62
20538: PUSH
20539: LD_EXP 84
20543: AND
20544: IFFALSE 20556
20546: GO 20548
20548: DISABLE
// YouLost (  ) ;
20549: LD_STRING 
20551: PPUSH
20552: CALL_OW 104
20556: END
// every 0 0$1 trigger StreamModeActive and sFog do
20557: LD_EXP 62
20561: PUSH
20562: LD_EXP 83
20566: AND
20567: IFFALSE 20581
20569: GO 20571
20571: DISABLE
// FogOff ( your_side ) ;
20572: LD_OWVAR 2
20576: PPUSH
20577: CALL_OW 344
20581: END
// every 0 0$1 trigger StreamModeActive and sSun do
20582: LD_EXP 62
20586: PUSH
20587: LD_EXP 85
20591: AND
20592: IFFALSE 20620
20594: GO 20596
20596: DISABLE
// begin solar_recharge_percent := 0 ;
20597: LD_ADDR_OWVAR 79
20601: PUSH
20602: LD_INT 0
20604: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20605: LD_INT 10500
20607: PPUSH
20608: CALL_OW 67
// solar_recharge_percent := 100 ;
20612: LD_ADDR_OWVAR 79
20616: PUSH
20617: LD_INT 100
20619: ST_TO_ADDR
// end ;
20620: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20621: LD_EXP 62
20625: PUSH
20626: LD_EXP 86
20630: AND
20631: IFFALSE 20870
20633: GO 20635
20635: DISABLE
20636: LD_INT 0
20638: PPUSH
20639: PPUSH
20640: PPUSH
// begin tmp := [ ] ;
20641: LD_ADDR_VAR 0 3
20645: PUSH
20646: EMPTY
20647: ST_TO_ADDR
// for i := 1 to 6 do
20648: LD_ADDR_VAR 0 1
20652: PUSH
20653: DOUBLE
20654: LD_INT 1
20656: DEC
20657: ST_TO_ADDR
20658: LD_INT 6
20660: PUSH
20661: FOR_TO
20662: IFFALSE 20767
// begin uc_nation := nation_nature ;
20664: LD_ADDR_OWVAR 21
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// uc_side := 0 ;
20672: LD_ADDR_OWVAR 20
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20680: LD_ADDR_OWVAR 29
20684: PUSH
20685: LD_INT 12
20687: PUSH
20688: LD_INT 12
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
// hc_agressivity := 20 ;
20695: LD_ADDR_OWVAR 35
20699: PUSH
20700: LD_INT 20
20702: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20703: LD_ADDR_OWVAR 28
20707: PUSH
20708: LD_INT 17
20710: ST_TO_ADDR
// hc_gallery :=  ;
20711: LD_ADDR_OWVAR 33
20715: PUSH
20716: LD_STRING 
20718: ST_TO_ADDR
// hc_name :=  ;
20719: LD_ADDR_OWVAR 26
20723: PUSH
20724: LD_STRING 
20726: ST_TO_ADDR
// un := CreateHuman ;
20727: LD_ADDR_VAR 0 2
20731: PUSH
20732: CALL_OW 44
20736: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: CALL_OW 51
// tmp := tmp ^ un ;
20749: LD_ADDR_VAR 0 3
20753: PUSH
20754: LD_VAR 0 3
20758: PUSH
20759: LD_VAR 0 2
20763: ADD
20764: ST_TO_ADDR
// end ;
20765: GO 20661
20767: POP
20768: POP
// repeat wait ( 0 0$1 ) ;
20769: LD_INT 35
20771: PPUSH
20772: CALL_OW 67
// for un in tmp do
20776: LD_ADDR_VAR 0 2
20780: PUSH
20781: LD_VAR 0 3
20785: PUSH
20786: FOR_IN
20787: IFFALSE 20861
// begin if IsDead ( un ) then
20789: LD_VAR 0 2
20793: PPUSH
20794: CALL_OW 301
20798: IFFALSE 20818
// begin tmp := tmp diff un ;
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_VAR 0 3
20809: PUSH
20810: LD_VAR 0 2
20814: DIFF
20815: ST_TO_ADDR
// continue ;
20816: GO 20786
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20818: LD_VAR 0 2
20822: PPUSH
20823: LD_INT 3
20825: PUSH
20826: LD_INT 22
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PPUSH
20840: CALL_OW 69
20844: PPUSH
20845: LD_VAR 0 2
20849: PPUSH
20850: CALL_OW 74
20854: PPUSH
20855: CALL_OW 115
// end ;
20859: GO 20786
20861: POP
20862: POP
// until not tmp ;
20863: LD_VAR 0 3
20867: NOT
20868: IFFALSE 20769
// end ;
20870: PPOPN 3
20872: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20873: LD_EXP 62
20877: PUSH
20878: LD_EXP 87
20882: AND
20883: IFFALSE 20937
20885: GO 20887
20887: DISABLE
// begin ToLua ( displayTroll(); ) ;
20888: LD_STRING displayTroll();
20890: PPUSH
20891: CALL_OW 559
// wait ( 3 3$00 ) ;
20895: LD_INT 6300
20897: PPUSH
20898: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20902: LD_STRING hideTroll();
20904: PPUSH
20905: CALL_OW 559
// wait ( 1 1$00 ) ;
20909: LD_INT 2100
20911: PPUSH
20912: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20916: LD_STRING displayTroll();
20918: PPUSH
20919: CALL_OW 559
// wait ( 1 1$00 ) ;
20923: LD_INT 2100
20925: PPUSH
20926: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20930: LD_STRING hideTroll();
20932: PPUSH
20933: CALL_OW 559
// end ;
20937: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20938: LD_EXP 62
20942: PUSH
20943: LD_EXP 88
20947: AND
20948: IFFALSE 21011
20950: GO 20952
20952: DISABLE
20953: LD_INT 0
20955: PPUSH
// begin p := 0 ;
20956: LD_ADDR_VAR 0 1
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// repeat game_speed := 1 ;
20964: LD_ADDR_OWVAR 65
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20972: LD_INT 35
20974: PPUSH
20975: CALL_OW 67
// p := p + 1 ;
20979: LD_ADDR_VAR 0 1
20983: PUSH
20984: LD_VAR 0 1
20988: PUSH
20989: LD_INT 1
20991: PLUS
20992: ST_TO_ADDR
// until p >= 60 ;
20993: LD_VAR 0 1
20997: PUSH
20998: LD_INT 60
21000: GREATEREQUAL
21001: IFFALSE 20964
// game_speed := 4 ;
21003: LD_ADDR_OWVAR 65
21007: PUSH
21008: LD_INT 4
21010: ST_TO_ADDR
// end ;
21011: PPOPN 1
21013: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21014: LD_EXP 62
21018: PUSH
21019: LD_EXP 89
21023: AND
21024: IFFALSE 21170
21026: GO 21028
21028: DISABLE
21029: LD_INT 0
21031: PPUSH
21032: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21033: LD_ADDR_VAR 0 1
21037: PUSH
21038: LD_INT 22
21040: PUSH
21041: LD_OWVAR 2
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 30
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 30
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PPUSH
21082: CALL_OW 69
21086: ST_TO_ADDR
// if not depot then
21087: LD_VAR 0 1
21091: NOT
21092: IFFALSE 21096
// exit ;
21094: GO 21170
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_VAR 0 1
21105: PUSH
21106: LD_INT 1
21108: PPUSH
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 12
21118: ARRAY
21119: PPUSH
21120: CALL_OW 274
21124: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21125: LD_VAR 0 2
21129: PPUSH
21130: LD_INT 1
21132: PPUSH
21133: LD_INT 0
21135: PPUSH
21136: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21140: LD_VAR 0 2
21144: PPUSH
21145: LD_INT 2
21147: PPUSH
21148: LD_INT 0
21150: PPUSH
21151: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21155: LD_VAR 0 2
21159: PPUSH
21160: LD_INT 3
21162: PPUSH
21163: LD_INT 0
21165: PPUSH
21166: CALL_OW 277
// end ;
21170: PPOPN 2
21172: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21173: LD_EXP 62
21177: PUSH
21178: LD_EXP 90
21182: AND
21183: IFFALSE 21280
21185: GO 21187
21187: DISABLE
21188: LD_INT 0
21190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21191: LD_ADDR_VAR 0 1
21195: PUSH
21196: LD_INT 22
21198: PUSH
21199: LD_OWVAR 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 21
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 3
21220: PUSH
21221: LD_INT 23
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 69
21244: ST_TO_ADDR
// if not tmp then
21245: LD_VAR 0 1
21249: NOT
21250: IFFALSE 21254
// exit ;
21252: GO 21280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21254: LD_VAR 0 1
21258: PUSH
21259: LD_INT 1
21261: PPUSH
21262: LD_VAR 0 1
21266: PPUSH
21267: CALL_OW 12
21271: ARRAY
21272: PPUSH
21273: LD_INT 200
21275: PPUSH
21276: CALL_OW 234
// end ;
21280: PPOPN 1
21282: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21283: LD_EXP 62
21287: PUSH
21288: LD_EXP 91
21292: AND
21293: IFFALSE 21372
21295: GO 21297
21297: DISABLE
21298: LD_INT 0
21300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21301: LD_ADDR_VAR 0 1
21305: PUSH
21306: LD_INT 22
21308: PUSH
21309: LD_OWVAR 2
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: ST_TO_ADDR
// if not tmp then
21337: LD_VAR 0 1
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21346: LD_VAR 0 1
21350: PUSH
21351: LD_INT 1
21353: PPUSH
21354: LD_VAR 0 1
21358: PPUSH
21359: CALL_OW 12
21363: ARRAY
21364: PPUSH
21365: LD_INT 60
21367: PPUSH
21368: CALL_OW 234
// end ;
21372: PPOPN 1
21374: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21375: LD_EXP 62
21379: PUSH
21380: LD_EXP 92
21384: AND
21385: IFFALSE 21484
21387: GO 21389
21389: DISABLE
21390: LD_INT 0
21392: PPUSH
21393: PPUSH
// begin enable ;
21394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_INT 22
21402: PUSH
21403: LD_OWVAR 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 61
21414: PUSH
21415: EMPTY
21416: LIST
21417: PUSH
21418: LD_INT 33
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// if not tmp then
21438: LD_VAR 0 1
21442: NOT
21443: IFFALSE 21447
// exit ;
21445: GO 21484
// for i in tmp do
21447: LD_ADDR_VAR 0 2
21451: PUSH
21452: LD_VAR 0 1
21456: PUSH
21457: FOR_IN
21458: IFFALSE 21482
// if IsControledBy ( i ) then
21460: LD_VAR 0 2
21464: PPUSH
21465: CALL_OW 312
21469: IFFALSE 21480
// ComUnlink ( i ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: CALL_OW 136
21480: GO 21457
21482: POP
21483: POP
// end ;
21484: PPOPN 2
21486: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21487: LD_EXP 62
21491: PUSH
21492: LD_EXP 93
21496: AND
21497: IFFALSE 21637
21499: GO 21501
21501: DISABLE
21502: LD_INT 0
21504: PPUSH
21505: PPUSH
// begin ToLua ( displayPowell(); ) ;
21506: LD_STRING displayPowell();
21508: PPUSH
21509: CALL_OW 559
// uc_side := 0 ;
21513: LD_ADDR_OWVAR 20
21517: PUSH
21518: LD_INT 0
21520: ST_TO_ADDR
// uc_nation := 2 ;
21521: LD_ADDR_OWVAR 21
21525: PUSH
21526: LD_INT 2
21528: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21529: LD_ADDR_OWVAR 37
21533: PUSH
21534: LD_INT 14
21536: ST_TO_ADDR
// vc_engine := engine_siberite ;
21537: LD_ADDR_OWVAR 39
21541: PUSH
21542: LD_INT 3
21544: ST_TO_ADDR
// vc_control := control_apeman ;
21545: LD_ADDR_OWVAR 38
21549: PUSH
21550: LD_INT 5
21552: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21553: LD_ADDR_OWVAR 40
21557: PUSH
21558: LD_INT 29
21560: ST_TO_ADDR
// un := CreateVehicle ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: CALL_OW 45
21570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21571: LD_VAR 0 2
21575: PPUSH
21576: LD_INT 1
21578: PPUSH
21579: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21583: LD_INT 35
21585: PPUSH
21586: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21590: LD_VAR 0 2
21594: PPUSH
21595: LD_INT 22
21597: PUSH
21598: LD_OWVAR 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PPUSH
21607: CALL_OW 69
21611: PPUSH
21612: LD_VAR 0 2
21616: PPUSH
21617: CALL_OW 74
21621: PPUSH
21622: CALL_OW 115
// until IsDead ( un ) ;
21626: LD_VAR 0 2
21630: PPUSH
21631: CALL_OW 301
21635: IFFALSE 21583
// end ;
21637: PPOPN 2
21639: END
// every 0 0$1 trigger StreamModeActive and sStu do
21640: LD_EXP 62
21644: PUSH
21645: LD_EXP 101
21649: AND
21650: IFFALSE 21666
21652: GO 21654
21654: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21655: LD_STRING displayStucuk();
21657: PPUSH
21658: CALL_OW 559
// ResetFog ;
21662: CALL_OW 335
// end ;
21666: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21667: LD_EXP 62
21671: PUSH
21672: LD_EXP 94
21676: AND
21677: IFFALSE 21818
21679: GO 21681
21681: DISABLE
21682: LD_INT 0
21684: PPUSH
21685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21686: LD_ADDR_VAR 0 2
21690: PUSH
21691: LD_INT 22
21693: PUSH
21694: LD_OWVAR 2
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 21
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PPUSH
21717: CALL_OW 69
21721: ST_TO_ADDR
// if not tmp then
21722: LD_VAR 0 2
21726: NOT
21727: IFFALSE 21731
// exit ;
21729: GO 21818
// un := tmp [ rand ( 1 , tmp ) ] ;
21731: LD_ADDR_VAR 0 1
21735: PUSH
21736: LD_VAR 0 2
21740: PUSH
21741: LD_INT 1
21743: PPUSH
21744: LD_VAR 0 2
21748: PPUSH
21749: CALL_OW 12
21753: ARRAY
21754: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21755: LD_VAR 0 1
21759: PPUSH
21760: LD_INT 0
21762: PPUSH
21763: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21767: LD_VAR 0 1
21771: PPUSH
21772: LD_OWVAR 3
21776: PUSH
21777: LD_VAR 0 1
21781: DIFF
21782: PPUSH
21783: LD_VAR 0 1
21787: PPUSH
21788: CALL_OW 74
21792: PPUSH
21793: CALL_OW 115
// wait ( 0 0$20 ) ;
21797: LD_INT 700
21799: PPUSH
21800: CALL_OW 67
// SetSide ( un , your_side ) ;
21804: LD_VAR 0 1
21808: PPUSH
21809: LD_OWVAR 2
21813: PPUSH
21814: CALL_OW 235
// end ;
21818: PPOPN 2
21820: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21821: LD_EXP 62
21825: PUSH
21826: LD_EXP 95
21830: AND
21831: IFFALSE 21937
21833: GO 21835
21835: DISABLE
21836: LD_INT 0
21838: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_INT 22
21846: PUSH
21847: LD_OWVAR 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 30
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 69
21892: ST_TO_ADDR
// if not depot then
21893: LD_VAR 0 1
21897: NOT
21898: IFFALSE 21902
// exit ;
21900: GO 21937
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21902: LD_VAR 0 1
21906: PUSH
21907: LD_INT 1
21909: ARRAY
21910: PPUSH
21911: CALL_OW 250
21915: PPUSH
21916: LD_VAR 0 1
21920: PUSH
21921: LD_INT 1
21923: ARRAY
21924: PPUSH
21925: CALL_OW 251
21929: PPUSH
21930: LD_INT 70
21932: PPUSH
21933: CALL_OW 495
// end ;
21937: PPOPN 1
21939: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21940: LD_EXP 62
21944: PUSH
21945: LD_EXP 96
21949: AND
21950: IFFALSE 22161
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
21961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21962: LD_ADDR_VAR 0 5
21966: PUSH
21967: LD_INT 22
21969: PUSH
21970: LD_OWVAR 2
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 21
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PPUSH
21993: CALL_OW 69
21997: ST_TO_ADDR
// if not tmp then
21998: LD_VAR 0 5
22002: NOT
22003: IFFALSE 22007
// exit ;
22005: GO 22161
// for i in tmp do
22007: LD_ADDR_VAR 0 1
22011: PUSH
22012: LD_VAR 0 5
22016: PUSH
22017: FOR_IN
22018: IFFALSE 22159
// begin d := rand ( 0 , 5 ) ;
22020: LD_ADDR_VAR 0 4
22024: PUSH
22025: LD_INT 0
22027: PPUSH
22028: LD_INT 5
22030: PPUSH
22031: CALL_OW 12
22035: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_VAR 0 1
22045: PPUSH
22046: CALL_OW 250
22050: PPUSH
22051: LD_VAR 0 4
22055: PPUSH
22056: LD_INT 3
22058: PPUSH
22059: LD_INT 12
22061: PPUSH
22062: CALL_OW 12
22066: PPUSH
22067: CALL_OW 272
22071: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 251
22086: PPUSH
22087: LD_VAR 0 4
22091: PPUSH
22092: LD_INT 3
22094: PPUSH
22095: LD_INT 12
22097: PPUSH
22098: CALL_OW 12
22102: PPUSH
22103: CALL_OW 273
22107: ST_TO_ADDR
// if ValidHex ( x , y ) then
22108: LD_VAR 0 2
22112: PPUSH
22113: LD_VAR 0 3
22117: PPUSH
22118: CALL_OW 488
22122: IFFALSE 22157
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22124: LD_VAR 0 1
22128: PPUSH
22129: LD_VAR 0 2
22133: PPUSH
22134: LD_VAR 0 3
22138: PPUSH
22139: LD_INT 3
22141: PPUSH
22142: LD_INT 6
22144: PPUSH
22145: CALL_OW 12
22149: PPUSH
22150: LD_INT 1
22152: PPUSH
22153: CALL_OW 483
// end ;
22157: GO 22017
22159: POP
22160: POP
// end ;
22161: PPOPN 5
22163: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22164: LD_EXP 62
22168: PUSH
22169: LD_EXP 97
22173: AND
22174: IFFALSE 22268
22176: GO 22178
22178: DISABLE
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22183: LD_ADDR_VAR 0 2
22187: PUSH
22188: LD_INT 22
22190: PUSH
22191: LD_OWVAR 2
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 32
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 21
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: PPUSH
22225: CALL_OW 69
22229: ST_TO_ADDR
// if not tmp then
22230: LD_VAR 0 2
22234: NOT
22235: IFFALSE 22239
// exit ;
22237: GO 22268
// for i in tmp do
22239: LD_ADDR_VAR 0 1
22243: PUSH
22244: LD_VAR 0 2
22248: PUSH
22249: FOR_IN
22250: IFFALSE 22266
// SetFuel ( i , 0 ) ;
22252: LD_VAR 0 1
22256: PPUSH
22257: LD_INT 0
22259: PPUSH
22260: CALL_OW 240
22264: GO 22249
22266: POP
22267: POP
// end ;
22268: PPOPN 2
22270: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22271: LD_EXP 62
22275: PUSH
22276: LD_EXP 98
22280: AND
22281: IFFALSE 22347
22283: GO 22285
22285: DISABLE
22286: LD_INT 0
22288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22289: LD_ADDR_VAR 0 1
22293: PUSH
22294: LD_INT 22
22296: PUSH
22297: LD_OWVAR 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 30
22308: PUSH
22309: LD_INT 29
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PPUSH
22320: CALL_OW 69
22324: ST_TO_ADDR
// if not tmp then
22325: LD_VAR 0 1
22329: NOT
22330: IFFALSE 22334
// exit ;
22332: GO 22347
// DestroyUnit ( tmp [ 1 ] ) ;
22334: LD_VAR 0 1
22338: PUSH
22339: LD_INT 1
22341: ARRAY
22342: PPUSH
22343: CALL_OW 65
// end ;
22347: PPOPN 1
22349: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22350: LD_EXP 62
22354: PUSH
22355: LD_EXP 100
22359: AND
22360: IFFALSE 22489
22362: GO 22364
22364: DISABLE
22365: LD_INT 0
22367: PPUSH
// begin uc_side := 0 ;
22368: LD_ADDR_OWVAR 20
22372: PUSH
22373: LD_INT 0
22375: ST_TO_ADDR
// uc_nation := nation_arabian ;
22376: LD_ADDR_OWVAR 21
22380: PUSH
22381: LD_INT 2
22383: ST_TO_ADDR
// hc_gallery :=  ;
22384: LD_ADDR_OWVAR 33
22388: PUSH
22389: LD_STRING 
22391: ST_TO_ADDR
// hc_name :=  ;
22392: LD_ADDR_OWVAR 26
22396: PUSH
22397: LD_STRING 
22399: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22400: LD_INT 1
22402: PPUSH
22403: LD_INT 11
22405: PPUSH
22406: LD_INT 10
22408: PPUSH
22409: CALL_OW 380
// un := CreateHuman ;
22413: LD_ADDR_VAR 0 1
22417: PUSH
22418: CALL_OW 44
22422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22423: LD_VAR 0 1
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22435: LD_INT 35
22437: PPUSH
22438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22442: LD_VAR 0 1
22446: PPUSH
22447: LD_INT 22
22449: PUSH
22450: LD_OWVAR 2
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 69
22463: PPUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 74
22473: PPUSH
22474: CALL_OW 115
// until IsDead ( un ) ;
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 301
22487: IFFALSE 22435
// end ;
22489: PPOPN 1
22491: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22492: LD_EXP 62
22496: PUSH
22497: LD_EXP 102
22501: AND
22502: IFFALSE 22514
22504: GO 22506
22506: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22507: LD_STRING earthquake(getX(game), 0, 32)
22509: PPUSH
22510: CALL_OW 559
22514: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22515: LD_EXP 62
22519: PUSH
22520: LD_EXP 103
22524: AND
22525: IFFALSE 22616
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
// begin enable ;
22533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22534: LD_ADDR_VAR 0 1
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_OWVAR 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 21
22553: PUSH
22554: LD_INT 2
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 33
22563: PUSH
22564: LD_INT 3
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: ST_TO_ADDR
// if not tmp then
22581: LD_VAR 0 1
22585: NOT
22586: IFFALSE 22590
// exit ;
22588: GO 22616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22590: LD_VAR 0 1
22594: PUSH
22595: LD_INT 1
22597: PPUSH
22598: LD_VAR 0 1
22602: PPUSH
22603: CALL_OW 12
22607: ARRAY
22608: PPUSH
22609: LD_INT 1
22611: PPUSH
22612: CALL_OW 234
// end ;
22616: PPOPN 1
22618: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22619: LD_EXP 62
22623: PUSH
22624: LD_EXP 104
22628: AND
22629: IFFALSE 22770
22631: GO 22633
22633: DISABLE
22634: LD_INT 0
22636: PPUSH
22637: PPUSH
22638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22639: LD_ADDR_VAR 0 3
22643: PUSH
22644: LD_INT 22
22646: PUSH
22647: LD_OWVAR 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 25
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PPUSH
22670: CALL_OW 69
22674: ST_TO_ADDR
// if not tmp then
22675: LD_VAR 0 3
22679: NOT
22680: IFFALSE 22684
// exit ;
22682: GO 22770
// un := tmp [ rand ( 1 , tmp ) ] ;
22684: LD_ADDR_VAR 0 2
22688: PUSH
22689: LD_VAR 0 3
22693: PUSH
22694: LD_INT 1
22696: PPUSH
22697: LD_VAR 0 3
22701: PPUSH
22702: CALL_OW 12
22706: ARRAY
22707: ST_TO_ADDR
// if Crawls ( un ) then
22708: LD_VAR 0 2
22712: PPUSH
22713: CALL_OW 318
22717: IFFALSE 22728
// ComWalk ( un ) ;
22719: LD_VAR 0 2
22723: PPUSH
22724: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22728: LD_VAR 0 2
22732: PPUSH
22733: LD_INT 9
22735: PPUSH
22736: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22740: LD_INT 28
22742: PPUSH
22743: LD_OWVAR 2
22747: PPUSH
22748: LD_INT 2
22750: PPUSH
22751: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22755: LD_INT 29
22757: PPUSH
22758: LD_OWVAR 2
22762: PPUSH
22763: LD_INT 2
22765: PPUSH
22766: CALL_OW 322
// end ;
22770: PPOPN 3
22772: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22773: LD_EXP 62
22777: PUSH
22778: LD_EXP 105
22782: AND
22783: IFFALSE 22894
22785: GO 22787
22787: DISABLE
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
22792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22793: LD_ADDR_VAR 0 3
22797: PUSH
22798: LD_INT 22
22800: PUSH
22801: LD_OWVAR 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 25
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: ST_TO_ADDR
// if not tmp then
22829: LD_VAR 0 3
22833: NOT
22834: IFFALSE 22838
// exit ;
22836: GO 22894
// un := tmp [ rand ( 1 , tmp ) ] ;
22838: LD_ADDR_VAR 0 2
22842: PUSH
22843: LD_VAR 0 3
22847: PUSH
22848: LD_INT 1
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: CALL_OW 12
22860: ARRAY
22861: ST_TO_ADDR
// if Crawls ( un ) then
22862: LD_VAR 0 2
22866: PPUSH
22867: CALL_OW 318
22871: IFFALSE 22882
// ComWalk ( un ) ;
22873: LD_VAR 0 2
22877: PPUSH
22878: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22882: LD_VAR 0 2
22886: PPUSH
22887: LD_INT 8
22889: PPUSH
22890: CALL_OW 336
// end ;
22894: PPOPN 3
22896: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22897: LD_EXP 62
22901: PUSH
22902: LD_EXP 106
22906: AND
22907: IFFALSE 23051
22909: GO 22911
22911: DISABLE
22912: LD_INT 0
22914: PPUSH
22915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_INT 22
22923: PUSH
22924: LD_OWVAR 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 21
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 12
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 34
22958: PUSH
22959: LD_INT 51
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 34
22968: PUSH
22969: LD_INT 32
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: PPUSH
22987: CALL_OW 69
22991: ST_TO_ADDR
// if not tmp then
22992: LD_VAR 0 2
22996: NOT
22997: IFFALSE 23001
// exit ;
22999: GO 23051
// for i in tmp do
23001: LD_ADDR_VAR 0 1
23005: PUSH
23006: LD_VAR 0 2
23010: PUSH
23011: FOR_IN
23012: IFFALSE 23049
// if GetCargo ( i , mat_artifact ) = 0 then
23014: LD_VAR 0 1
23018: PPUSH
23019: LD_INT 4
23021: PPUSH
23022: CALL_OW 289
23026: PUSH
23027: LD_INT 0
23029: EQUAL
23030: IFFALSE 23047
// SetCargo ( i , mat_siberit , 100 ) ;
23032: LD_VAR 0 1
23036: PPUSH
23037: LD_INT 3
23039: PPUSH
23040: LD_INT 100
23042: PPUSH
23043: CALL_OW 290
23047: GO 23011
23049: POP
23050: POP
// end ;
23051: PPOPN 2
23053: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23054: LD_EXP 62
23058: PUSH
23059: LD_EXP 107
23063: AND
23064: IFFALSE 23247
23066: GO 23068
23068: DISABLE
23069: LD_INT 0
23071: PPUSH
23072: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23073: LD_ADDR_VAR 0 2
23077: PUSH
23078: LD_INT 22
23080: PUSH
23081: LD_OWVAR 2
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PPUSH
23090: CALL_OW 69
23094: ST_TO_ADDR
// if not tmp then
23095: LD_VAR 0 2
23099: NOT
23100: IFFALSE 23104
// exit ;
23102: GO 23247
// for i := 1 to 2 do
23104: LD_ADDR_VAR 0 1
23108: PUSH
23109: DOUBLE
23110: LD_INT 1
23112: DEC
23113: ST_TO_ADDR
23114: LD_INT 2
23116: PUSH
23117: FOR_TO
23118: IFFALSE 23245
// begin uc_side := your_side ;
23120: LD_ADDR_OWVAR 20
23124: PUSH
23125: LD_OWVAR 2
23129: ST_TO_ADDR
// uc_nation := nation_american ;
23130: LD_ADDR_OWVAR 21
23134: PUSH
23135: LD_INT 1
23137: ST_TO_ADDR
// vc_chassis := us_morphling ;
23138: LD_ADDR_OWVAR 37
23142: PUSH
23143: LD_INT 5
23145: ST_TO_ADDR
// vc_engine := engine_siberite ;
23146: LD_ADDR_OWVAR 39
23150: PUSH
23151: LD_INT 3
23153: ST_TO_ADDR
// vc_control := control_computer ;
23154: LD_ADDR_OWVAR 38
23158: PUSH
23159: LD_INT 3
23161: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23162: LD_ADDR_OWVAR 40
23166: PUSH
23167: LD_INT 10
23169: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23170: LD_VAR 0 2
23174: PUSH
23175: LD_INT 1
23177: ARRAY
23178: PPUSH
23179: CALL_OW 310
23183: NOT
23184: IFFALSE 23231
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23186: CALL_OW 45
23190: PPUSH
23191: LD_VAR 0 2
23195: PUSH
23196: LD_INT 1
23198: ARRAY
23199: PPUSH
23200: CALL_OW 250
23204: PPUSH
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 1
23212: ARRAY
23213: PPUSH
23214: CALL_OW 251
23218: PPUSH
23219: LD_INT 12
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: CALL_OW 50
23229: GO 23243
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23231: CALL_OW 45
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 51
// end ;
23243: GO 23117
23245: POP
23246: POP
// end ;
23247: PPOPN 2
23249: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23250: LD_EXP 62
23254: PUSH
23255: LD_EXP 108
23259: AND
23260: IFFALSE 23482
23262: GO 23264
23264: DISABLE
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
23271: PPUSH
23272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23273: LD_ADDR_VAR 0 6
23277: PUSH
23278: LD_INT 22
23280: PUSH
23281: LD_OWVAR 2
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 21
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 3
23302: PUSH
23303: LD_INT 23
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: PPUSH
23322: CALL_OW 69
23326: ST_TO_ADDR
// if not tmp then
23327: LD_VAR 0 6
23331: NOT
23332: IFFALSE 23336
// exit ;
23334: GO 23482
// s1 := rand ( 1 , 4 ) ;
23336: LD_ADDR_VAR 0 2
23340: PUSH
23341: LD_INT 1
23343: PPUSH
23344: LD_INT 4
23346: PPUSH
23347: CALL_OW 12
23351: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23352: LD_ADDR_VAR 0 4
23356: PUSH
23357: LD_VAR 0 6
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: PPUSH
23366: LD_VAR 0 2
23370: PPUSH
23371: CALL_OW 259
23375: ST_TO_ADDR
// if s1 = 1 then
23376: LD_VAR 0 2
23380: PUSH
23381: LD_INT 1
23383: EQUAL
23384: IFFALSE 23404
// s2 := rand ( 2 , 4 ) else
23386: LD_ADDR_VAR 0 3
23390: PUSH
23391: LD_INT 2
23393: PPUSH
23394: LD_INT 4
23396: PPUSH
23397: CALL_OW 12
23401: ST_TO_ADDR
23402: GO 23412
// s2 := 1 ;
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 1
23411: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23412: LD_ADDR_VAR 0 5
23416: PUSH
23417: LD_VAR 0 6
23421: PUSH
23422: LD_INT 1
23424: ARRAY
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: CALL_OW 259
23435: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23436: LD_VAR 0 6
23440: PUSH
23441: LD_INT 1
23443: ARRAY
23444: PPUSH
23445: LD_VAR 0 2
23449: PPUSH
23450: LD_VAR 0 5
23454: PPUSH
23455: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23459: LD_VAR 0 6
23463: PUSH
23464: LD_INT 1
23466: ARRAY
23467: PPUSH
23468: LD_VAR 0 3
23472: PPUSH
23473: LD_VAR 0 4
23477: PPUSH
23478: CALL_OW 237
// end ;
23482: PPOPN 6
23484: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23485: LD_EXP 62
23489: PUSH
23490: LD_EXP 109
23494: AND
23495: IFFALSE 23574
23497: GO 23499
23499: DISABLE
23500: LD_INT 0
23502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23503: LD_ADDR_VAR 0 1
23507: PUSH
23508: LD_INT 22
23510: PUSH
23511: LD_OWVAR 2
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 30
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: CALL_OW 69
23538: ST_TO_ADDR
// if not tmp then
23539: LD_VAR 0 1
23543: NOT
23544: IFFALSE 23548
// exit ;
23546: GO 23574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23548: LD_VAR 0 1
23552: PUSH
23553: LD_INT 1
23555: PPUSH
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 12
23565: ARRAY
23566: PPUSH
23567: LD_INT 1
23569: PPUSH
23570: CALL_OW 234
// end ;
23574: PPOPN 1
23576: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23577: LD_EXP 62
23581: PUSH
23582: LD_EXP 110
23586: AND
23587: IFFALSE 23699
23589: GO 23591
23591: DISABLE
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23596: LD_ADDR_VAR 0 2
23600: PUSH
23601: LD_INT 22
23603: PUSH
23604: LD_OWVAR 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 30
23618: PUSH
23619: LD_INT 27
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 30
23628: PUSH
23629: LD_INT 26
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 30
23638: PUSH
23639: LD_INT 28
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: CALL_OW 69
23660: ST_TO_ADDR
// if not tmp then
23661: LD_VAR 0 2
23665: NOT
23666: IFFALSE 23670
// exit ;
23668: GO 23699
// for i in tmp do
23670: LD_ADDR_VAR 0 1
23674: PUSH
23675: LD_VAR 0 2
23679: PUSH
23680: FOR_IN
23681: IFFALSE 23697
// SetLives ( i , 1 ) ;
23683: LD_VAR 0 1
23687: PPUSH
23688: LD_INT 1
23690: PPUSH
23691: CALL_OW 234
23695: GO 23680
23697: POP
23698: POP
// end ;
23699: PPOPN 2
23701: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23702: LD_EXP 62
23706: PUSH
23707: LD_EXP 111
23711: AND
23712: IFFALSE 23999
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
23720: PPUSH
23721: PPUSH
// begin i := rand ( 1 , 7 ) ;
23722: LD_ADDR_VAR 0 1
23726: PUSH
23727: LD_INT 1
23729: PPUSH
23730: LD_INT 7
23732: PPUSH
23733: CALL_OW 12
23737: ST_TO_ADDR
// case i of 1 :
23738: LD_VAR 0 1
23742: PUSH
23743: LD_INT 1
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23761
23751: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23752: LD_STRING earthquake(getX(game), 0, 32)
23754: PPUSH
23755: CALL_OW 559
23759: GO 23999
23761: LD_INT 2
23763: DOUBLE
23764: EQUAL
23765: IFTRUE 23769
23767: GO 23783
23769: POP
// begin ToLua ( displayStucuk(); ) ;
23770: LD_STRING displayStucuk();
23772: PPUSH
23773: CALL_OW 559
// ResetFog ;
23777: CALL_OW 335
// end ; 3 :
23781: GO 23999
23783: LD_INT 3
23785: DOUBLE
23786: EQUAL
23787: IFTRUE 23791
23789: GO 23895
23791: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23792: LD_ADDR_VAR 0 2
23796: PUSH
23797: LD_INT 22
23799: PUSH
23800: LD_OWVAR 2
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 25
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PPUSH
23823: CALL_OW 69
23827: ST_TO_ADDR
// if not tmp then
23828: LD_VAR 0 2
23832: NOT
23833: IFFALSE 23837
// exit ;
23835: GO 23999
// un := tmp [ rand ( 1 , tmp ) ] ;
23837: LD_ADDR_VAR 0 3
23841: PUSH
23842: LD_VAR 0 2
23846: PUSH
23847: LD_INT 1
23849: PPUSH
23850: LD_VAR 0 2
23854: PPUSH
23855: CALL_OW 12
23859: ARRAY
23860: ST_TO_ADDR
// if Crawls ( un ) then
23861: LD_VAR 0 3
23865: PPUSH
23866: CALL_OW 318
23870: IFFALSE 23881
// ComWalk ( un ) ;
23872: LD_VAR 0 3
23876: PPUSH
23877: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23881: LD_VAR 0 3
23885: PPUSH
23886: LD_INT 8
23888: PPUSH
23889: CALL_OW 336
// end ; 4 :
23893: GO 23999
23895: LD_INT 4
23897: DOUBLE
23898: EQUAL
23899: IFTRUE 23903
23901: GO 23977
23903: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23904: LD_ADDR_VAR 0 2
23908: PUSH
23909: LD_INT 22
23911: PUSH
23912: LD_OWVAR 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 30
23923: PUSH
23924: LD_INT 29
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PPUSH
23935: CALL_OW 69
23939: ST_TO_ADDR
// if not tmp then
23940: LD_VAR 0 2
23944: NOT
23945: IFFALSE 23949
// exit ;
23947: GO 23999
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23949: LD_VAR 0 2
23953: PUSH
23954: LD_INT 1
23956: ARRAY
23957: PPUSH
23958: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23962: LD_VAR 0 2
23966: PUSH
23967: LD_INT 1
23969: ARRAY
23970: PPUSH
23971: CALL_OW 65
// end ; 5 .. 7 :
23975: GO 23999
23977: LD_INT 5
23979: DOUBLE
23980: GREATEREQUAL
23981: IFFALSE 23989
23983: LD_INT 7
23985: DOUBLE
23986: LESSEQUAL
23987: IFTRUE 23991
23989: GO 23998
23991: POP
// StreamSibBomb ; end ;
23992: CALL 20236 0 0
23996: GO 23999
23998: POP
// end ;
23999: PPOPN 3
24001: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24002: LD_EXP 62
24006: PUSH
24007: LD_EXP 112
24011: AND
24012: IFFALSE 24168
24014: GO 24016
24016: DISABLE
24017: LD_INT 0
24019: PPUSH
24020: PPUSH
24021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24022: LD_ADDR_VAR 0 2
24026: PUSH
24027: LD_INT 81
24029: PUSH
24030: LD_OWVAR 2
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: LD_INT 21
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 21
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: LIST
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PPUSH
24071: CALL_OW 69
24075: ST_TO_ADDR
// if not tmp then
24076: LD_VAR 0 2
24080: NOT
24081: IFFALSE 24085
// exit ;
24083: GO 24168
// p := 0 ;
24085: LD_ADDR_VAR 0 3
24089: PUSH
24090: LD_INT 0
24092: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24093: LD_INT 35
24095: PPUSH
24096: CALL_OW 67
// p := p + 1 ;
24100: LD_ADDR_VAR 0 3
24104: PUSH
24105: LD_VAR 0 3
24109: PUSH
24110: LD_INT 1
24112: PLUS
24113: ST_TO_ADDR
// for i in tmp do
24114: LD_ADDR_VAR 0 1
24118: PUSH
24119: LD_VAR 0 2
24123: PUSH
24124: FOR_IN
24125: IFFALSE 24156
// if GetLives ( i ) < 1000 then
24127: LD_VAR 0 1
24131: PPUSH
24132: CALL_OW 256
24136: PUSH
24137: LD_INT 1000
24139: LESS
24140: IFFALSE 24154
// SetLives ( i , 1000 ) ;
24142: LD_VAR 0 1
24146: PPUSH
24147: LD_INT 1000
24149: PPUSH
24150: CALL_OW 234
24154: GO 24124
24156: POP
24157: POP
// until p > 20 ;
24158: LD_VAR 0 3
24162: PUSH
24163: LD_INT 20
24165: GREATER
24166: IFFALSE 24093
// end ;
24168: PPOPN 3
24170: END
// every 0 0$1 trigger StreamModeActive and sTime do
24171: LD_EXP 62
24175: PUSH
24176: LD_EXP 113
24180: AND
24181: IFFALSE 24216
24183: GO 24185
24185: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24186: LD_INT 28
24188: PPUSH
24189: LD_OWVAR 2
24193: PPUSH
24194: LD_INT 2
24196: PPUSH
24197: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24201: LD_INT 30
24203: PPUSH
24204: LD_OWVAR 2
24208: PPUSH
24209: LD_INT 2
24211: PPUSH
24212: CALL_OW 322
// end ;
24216: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24217: LD_EXP 62
24221: PUSH
24222: LD_EXP 114
24226: AND
24227: IFFALSE 24348
24229: GO 24231
24231: DISABLE
24232: LD_INT 0
24234: PPUSH
24235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_INT 22
24243: PUSH
24244: LD_OWVAR 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 21
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 69
24289: ST_TO_ADDR
// if not tmp then
24290: LD_VAR 0 2
24294: NOT
24295: IFFALSE 24299
// exit ;
24297: GO 24348
// for i in tmp do
24299: LD_ADDR_VAR 0 1
24303: PUSH
24304: LD_VAR 0 2
24308: PUSH
24309: FOR_IN
24310: IFFALSE 24346
// begin if Crawls ( i ) then
24312: LD_VAR 0 1
24316: PPUSH
24317: CALL_OW 318
24321: IFFALSE 24332
// ComWalk ( i ) ;
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 138
// SetClass ( i , 2 ) ;
24332: LD_VAR 0 1
24336: PPUSH
24337: LD_INT 2
24339: PPUSH
24340: CALL_OW 336
// end ;
24344: GO 24309
24346: POP
24347: POP
// end ;
24348: PPOPN 2
24350: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24351: LD_EXP 62
24355: PUSH
24356: LD_EXP 115
24360: AND
24361: IFFALSE 24649
24363: GO 24365
24365: DISABLE
24366: LD_INT 0
24368: PPUSH
24369: PPUSH
24370: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24371: LD_OWVAR 2
24375: PPUSH
24376: LD_INT 9
24378: PPUSH
24379: LD_INT 1
24381: PPUSH
24382: LD_INT 1
24384: PPUSH
24385: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24389: LD_INT 9
24391: PPUSH
24392: LD_OWVAR 2
24396: PPUSH
24397: CALL_OW 343
// uc_side := 9 ;
24401: LD_ADDR_OWVAR 20
24405: PUSH
24406: LD_INT 9
24408: ST_TO_ADDR
// uc_nation := 2 ;
24409: LD_ADDR_OWVAR 21
24413: PUSH
24414: LD_INT 2
24416: ST_TO_ADDR
// hc_name := Dark Warrior ;
24417: LD_ADDR_OWVAR 26
24421: PUSH
24422: LD_STRING Dark Warrior
24424: ST_TO_ADDR
// hc_gallery :=  ;
24425: LD_ADDR_OWVAR 33
24429: PUSH
24430: LD_STRING 
24432: ST_TO_ADDR
// hc_noskilllimit := true ;
24433: LD_ADDR_OWVAR 76
24437: PUSH
24438: LD_INT 1
24440: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24441: LD_ADDR_OWVAR 31
24445: PUSH
24446: LD_INT 30
24448: PUSH
24449: LD_INT 30
24451: PUSH
24452: LD_INT 30
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: ST_TO_ADDR
// un := CreateHuman ;
24464: LD_ADDR_VAR 0 3
24468: PUSH
24469: CALL_OW 44
24473: ST_TO_ADDR
// hc_noskilllimit := false ;
24474: LD_ADDR_OWVAR 76
24478: PUSH
24479: LD_INT 0
24481: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24482: LD_VAR 0 3
24486: PPUSH
24487: LD_INT 1
24489: PPUSH
24490: CALL_OW 51
// ToLua ( playRanger() ) ;
24494: LD_STRING playRanger()
24496: PPUSH
24497: CALL_OW 559
// p := 0 ;
24501: LD_ADDR_VAR 0 2
24505: PUSH
24506: LD_INT 0
24508: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24509: LD_INT 35
24511: PPUSH
24512: CALL_OW 67
// p := p + 1 ;
24516: LD_ADDR_VAR 0 2
24520: PUSH
24521: LD_VAR 0 2
24525: PUSH
24526: LD_INT 1
24528: PLUS
24529: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24530: LD_VAR 0 3
24534: PPUSH
24535: CALL_OW 256
24539: PUSH
24540: LD_INT 1000
24542: LESS
24543: IFFALSE 24557
// SetLives ( un , 1000 ) ;
24545: LD_VAR 0 3
24549: PPUSH
24550: LD_INT 1000
24552: PPUSH
24553: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24557: LD_VAR 0 3
24561: PPUSH
24562: LD_INT 81
24564: PUSH
24565: LD_OWVAR 2
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 91
24576: PUSH
24577: LD_VAR 0 3
24581: PUSH
24582: LD_INT 30
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PPUSH
24594: CALL_OW 69
24598: PPUSH
24599: LD_VAR 0 3
24603: PPUSH
24604: CALL_OW 74
24608: PPUSH
24609: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24613: LD_VAR 0 2
24617: PUSH
24618: LD_INT 80
24620: GREATER
24621: PUSH
24622: LD_VAR 0 3
24626: PPUSH
24627: CALL_OW 301
24631: OR
24632: IFFALSE 24509
// if un then
24634: LD_VAR 0 3
24638: IFFALSE 24649
// RemoveUnit ( un ) ;
24640: LD_VAR 0 3
24644: PPUSH
24645: CALL_OW 64
// end ;
24649: PPOPN 3
24651: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24652: LD_EXP 116
24656: IFFALSE 24772
24658: GO 24660
24660: DISABLE
24661: LD_INT 0
24663: PPUSH
24664: PPUSH
24665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24666: LD_ADDR_VAR 0 2
24670: PUSH
24671: LD_INT 81
24673: PUSH
24674: LD_OWVAR 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 21
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24702: LD_STRING playComputer()
24704: PPUSH
24705: CALL_OW 559
// if not tmp then
24709: LD_VAR 0 2
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24772
// for i in tmp do
24718: LD_ADDR_VAR 0 1
24722: PUSH
24723: LD_VAR 0 2
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24770
// for j := 1 to 4 do
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: DOUBLE
24737: LD_INT 1
24739: DEC
24740: ST_TO_ADDR
24741: LD_INT 4
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24766
// SetSkill ( i , j , 10 ) ;
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_VAR 0 3
24756: PPUSH
24757: LD_INT 10
24759: PPUSH
24760: CALL_OW 237
24764: GO 24744
24766: POP
24767: POP
24768: GO 24728
24770: POP
24771: POP
// end ;
24772: PPOPN 3
24774: END
// every 0 0$1 trigger s30 do var i , tmp ;
24775: LD_EXP 117
24779: IFFALSE 24848
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
24787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24788: LD_ADDR_VAR 0 2
24792: PUSH
24793: LD_INT 22
24795: PUSH
24796: LD_OWVAR 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PPUSH
24805: CALL_OW 69
24809: ST_TO_ADDR
// if not tmp then
24810: LD_VAR 0 2
24814: NOT
24815: IFFALSE 24819
// exit ;
24817: GO 24848
// for i in tmp do
24819: LD_ADDR_VAR 0 1
24823: PUSH
24824: LD_VAR 0 2
24828: PUSH
24829: FOR_IN
24830: IFFALSE 24846
// SetLives ( i , 300 ) ;
24832: LD_VAR 0 1
24836: PPUSH
24837: LD_INT 300
24839: PPUSH
24840: CALL_OW 234
24844: GO 24829
24846: POP
24847: POP
// end ;
24848: PPOPN 2
24850: END
// every 0 0$1 trigger s60 do var i , tmp ;
24851: LD_EXP 118
24855: IFFALSE 24924
24857: GO 24859
24859: DISABLE
24860: LD_INT 0
24862: PPUSH
24863: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24864: LD_ADDR_VAR 0 2
24868: PUSH
24869: LD_INT 22
24871: PUSH
24872: LD_OWVAR 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PPUSH
24881: CALL_OW 69
24885: ST_TO_ADDR
// if not tmp then
24886: LD_VAR 0 2
24890: NOT
24891: IFFALSE 24895
// exit ;
24893: GO 24924
// for i in tmp do
24895: LD_ADDR_VAR 0 1
24899: PUSH
24900: LD_VAR 0 2
24904: PUSH
24905: FOR_IN
24906: IFFALSE 24922
// SetLives ( i , 600 ) ;
24908: LD_VAR 0 1
24912: PPUSH
24913: LD_INT 600
24915: PPUSH
24916: CALL_OW 234
24920: GO 24905
24922: POP
24923: POP
// end ;
24924: PPOPN 2
24926: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24927: LD_INT 0
24929: PPUSH
// case cmd of 301 :
24930: LD_VAR 0 1
24934: PUSH
24935: LD_INT 301
24937: DOUBLE
24938: EQUAL
24939: IFTRUE 24943
24941: GO 24975
24943: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24944: LD_VAR 0 6
24948: PPUSH
24949: LD_VAR 0 7
24953: PPUSH
24954: LD_VAR 0 8
24958: PPUSH
24959: LD_VAR 0 4
24963: PPUSH
24964: LD_VAR 0 5
24968: PPUSH
24969: CALL 26176 0 5
24973: GO 25096
24975: LD_INT 302
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25020
24983: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24984: LD_VAR 0 6
24988: PPUSH
24989: LD_VAR 0 7
24993: PPUSH
24994: LD_VAR 0 8
24998: PPUSH
24999: LD_VAR 0 9
25003: PPUSH
25004: LD_VAR 0 4
25008: PPUSH
25009: LD_VAR 0 5
25013: PPUSH
25014: CALL 26267 0 6
25018: GO 25096
25020: LD_INT 303
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25065
25028: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25029: LD_VAR 0 6
25033: PPUSH
25034: LD_VAR 0 7
25038: PPUSH
25039: LD_VAR 0 8
25043: PPUSH
25044: LD_VAR 0 9
25048: PPUSH
25049: LD_VAR 0 4
25053: PPUSH
25054: LD_VAR 0 5
25058: PPUSH
25059: CALL 25101 0 6
25063: GO 25096
25065: LD_INT 304
25067: DOUBLE
25068: EQUAL
25069: IFTRUE 25073
25071: GO 25095
25073: POP
// hHackTeleport ( unit , x , y ) ; end ;
25074: LD_VAR 0 2
25078: PPUSH
25079: LD_VAR 0 4
25083: PPUSH
25084: LD_VAR 0 5
25088: PPUSH
25089: CALL 26860 0 3
25093: GO 25096
25095: POP
// end ;
25096: LD_VAR 0 12
25100: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25101: LD_INT 0
25103: PPUSH
25104: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25105: LD_VAR 0 1
25109: PUSH
25110: LD_INT 1
25112: LESS
25113: PUSH
25114: LD_VAR 0 1
25118: PUSH
25119: LD_INT 3
25121: GREATER
25122: OR
25123: PUSH
25124: LD_VAR 0 5
25128: PPUSH
25129: LD_VAR 0 6
25133: PPUSH
25134: CALL_OW 428
25138: OR
25139: IFFALSE 25143
// exit ;
25141: GO 25863
// uc_side := your_side ;
25143: LD_ADDR_OWVAR 20
25147: PUSH
25148: LD_OWVAR 2
25152: ST_TO_ADDR
// uc_nation := nation ;
25153: LD_ADDR_OWVAR 21
25157: PUSH
25158: LD_VAR 0 1
25162: ST_TO_ADDR
// bc_level = 1 ;
25163: LD_ADDR_OWVAR 43
25167: PUSH
25168: LD_INT 1
25170: ST_TO_ADDR
// case btype of 1 :
25171: LD_VAR 0 2
25175: PUSH
25176: LD_INT 1
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25195
25184: POP
// bc_type := b_depot ; 2 :
25185: LD_ADDR_OWVAR 42
25189: PUSH
25190: LD_INT 0
25192: ST_TO_ADDR
25193: GO 25807
25195: LD_INT 2
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25214
25203: POP
// bc_type := b_warehouse ; 3 :
25204: LD_ADDR_OWVAR 42
25208: PUSH
25209: LD_INT 1
25211: ST_TO_ADDR
25212: GO 25807
25214: LD_INT 3
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25233
25222: POP
// bc_type := b_lab ; 4 .. 9 :
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 6
25230: ST_TO_ADDR
25231: GO 25807
25233: LD_INT 4
25235: DOUBLE
25236: GREATEREQUAL
25237: IFFALSE 25245
25239: LD_INT 9
25241: DOUBLE
25242: LESSEQUAL
25243: IFTRUE 25247
25245: GO 25299
25247: POP
// begin bc_type := b_lab_half ;
25248: LD_ADDR_OWVAR 42
25252: PUSH
25253: LD_INT 7
25255: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25256: LD_ADDR_OWVAR 44
25260: PUSH
25261: LD_INT 10
25263: PUSH
25264: LD_INT 11
25266: PUSH
25267: LD_INT 12
25269: PUSH
25270: LD_INT 15
25272: PUSH
25273: LD_INT 14
25275: PUSH
25276: LD_INT 13
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_INT 3
25294: MINUS
25295: ARRAY
25296: ST_TO_ADDR
// end ; 10 .. 13 :
25297: GO 25807
25299: LD_INT 10
25301: DOUBLE
25302: GREATEREQUAL
25303: IFFALSE 25311
25305: LD_INT 13
25307: DOUBLE
25308: LESSEQUAL
25309: IFTRUE 25313
25311: GO 25390
25313: POP
// begin bc_type := b_lab_full ;
25314: LD_ADDR_OWVAR 42
25318: PUSH
25319: LD_INT 8
25321: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25322: LD_ADDR_OWVAR 44
25326: PUSH
25327: LD_INT 10
25329: PUSH
25330: LD_INT 12
25332: PUSH
25333: LD_INT 14
25335: PUSH
25336: LD_INT 13
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: PUSH
25345: LD_VAR 0 2
25349: PUSH
25350: LD_INT 9
25352: MINUS
25353: ARRAY
25354: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25355: LD_ADDR_OWVAR 45
25359: PUSH
25360: LD_INT 11
25362: PUSH
25363: LD_INT 15
25365: PUSH
25366: LD_INT 12
25368: PUSH
25369: LD_INT 15
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: PUSH
25378: LD_VAR 0 2
25382: PUSH
25383: LD_INT 9
25385: MINUS
25386: ARRAY
25387: ST_TO_ADDR
// end ; 14 :
25388: GO 25807
25390: LD_INT 14
25392: DOUBLE
25393: EQUAL
25394: IFTRUE 25398
25396: GO 25409
25398: POP
// bc_type := b_workshop ; 15 :
25399: LD_ADDR_OWVAR 42
25403: PUSH
25404: LD_INT 2
25406: ST_TO_ADDR
25407: GO 25807
25409: LD_INT 15
25411: DOUBLE
25412: EQUAL
25413: IFTRUE 25417
25415: GO 25428
25417: POP
// bc_type := b_factory ; 16 :
25418: LD_ADDR_OWVAR 42
25422: PUSH
25423: LD_INT 3
25425: ST_TO_ADDR
25426: GO 25807
25428: LD_INT 16
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25436
25434: GO 25447
25436: POP
// bc_type := b_ext_gun ; 17 :
25437: LD_ADDR_OWVAR 42
25441: PUSH
25442: LD_INT 17
25444: ST_TO_ADDR
25445: GO 25807
25447: LD_INT 17
25449: DOUBLE
25450: EQUAL
25451: IFTRUE 25455
25453: GO 25483
25455: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25456: LD_ADDR_OWVAR 42
25460: PUSH
25461: LD_INT 19
25463: PUSH
25464: LD_INT 23
25466: PUSH
25467: LD_INT 19
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: PUSH
25475: LD_VAR 0 1
25479: ARRAY
25480: ST_TO_ADDR
25481: GO 25807
25483: LD_INT 18
25485: DOUBLE
25486: EQUAL
25487: IFTRUE 25491
25489: GO 25502
25491: POP
// bc_type := b_ext_radar ; 19 :
25492: LD_ADDR_OWVAR 42
25496: PUSH
25497: LD_INT 20
25499: ST_TO_ADDR
25500: GO 25807
25502: LD_INT 19
25504: DOUBLE
25505: EQUAL
25506: IFTRUE 25510
25508: GO 25521
25510: POP
// bc_type := b_ext_radio ; 20 :
25511: LD_ADDR_OWVAR 42
25515: PUSH
25516: LD_INT 22
25518: ST_TO_ADDR
25519: GO 25807
25521: LD_INT 20
25523: DOUBLE
25524: EQUAL
25525: IFTRUE 25529
25527: GO 25540
25529: POP
// bc_type := b_ext_siberium ; 21 :
25530: LD_ADDR_OWVAR 42
25534: PUSH
25535: LD_INT 21
25537: ST_TO_ADDR
25538: GO 25807
25540: LD_INT 21
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25548
25546: GO 25559
25548: POP
// bc_type := b_ext_computer ; 22 :
25549: LD_ADDR_OWVAR 42
25553: PUSH
25554: LD_INT 24
25556: ST_TO_ADDR
25557: GO 25807
25559: LD_INT 22
25561: DOUBLE
25562: EQUAL
25563: IFTRUE 25567
25565: GO 25578
25567: POP
// bc_type := b_ext_track ; 23 :
25568: LD_ADDR_OWVAR 42
25572: PUSH
25573: LD_INT 16
25575: ST_TO_ADDR
25576: GO 25807
25578: LD_INT 23
25580: DOUBLE
25581: EQUAL
25582: IFTRUE 25586
25584: GO 25597
25586: POP
// bc_type := b_ext_laser ; 24 :
25587: LD_ADDR_OWVAR 42
25591: PUSH
25592: LD_INT 25
25594: ST_TO_ADDR
25595: GO 25807
25597: LD_INT 24
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25605
25603: GO 25616
25605: POP
// bc_type := b_control_tower ; 25 :
25606: LD_ADDR_OWVAR 42
25610: PUSH
25611: LD_INT 36
25613: ST_TO_ADDR
25614: GO 25807
25616: LD_INT 25
25618: DOUBLE
25619: EQUAL
25620: IFTRUE 25624
25622: GO 25635
25624: POP
// bc_type := b_breastwork ; 26 :
25625: LD_ADDR_OWVAR 42
25629: PUSH
25630: LD_INT 31
25632: ST_TO_ADDR
25633: GO 25807
25635: LD_INT 26
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25654
25643: POP
// bc_type := b_bunker ; 27 :
25644: LD_ADDR_OWVAR 42
25648: PUSH
25649: LD_INT 32
25651: ST_TO_ADDR
25652: GO 25807
25654: LD_INT 27
25656: DOUBLE
25657: EQUAL
25658: IFTRUE 25662
25660: GO 25673
25662: POP
// bc_type := b_turret ; 28 :
25663: LD_ADDR_OWVAR 42
25667: PUSH
25668: LD_INT 33
25670: ST_TO_ADDR
25671: GO 25807
25673: LD_INT 28
25675: DOUBLE
25676: EQUAL
25677: IFTRUE 25681
25679: GO 25692
25681: POP
// bc_type := b_armoury ; 29 :
25682: LD_ADDR_OWVAR 42
25686: PUSH
25687: LD_INT 4
25689: ST_TO_ADDR
25690: GO 25807
25692: LD_INT 29
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25711
25700: POP
// bc_type := b_barracks ; 30 :
25701: LD_ADDR_OWVAR 42
25705: PUSH
25706: LD_INT 5
25708: ST_TO_ADDR
25709: GO 25807
25711: LD_INT 30
25713: DOUBLE
25714: EQUAL
25715: IFTRUE 25719
25717: GO 25730
25719: POP
// bc_type := b_solar_power ; 31 :
25720: LD_ADDR_OWVAR 42
25724: PUSH
25725: LD_INT 27
25727: ST_TO_ADDR
25728: GO 25807
25730: LD_INT 31
25732: DOUBLE
25733: EQUAL
25734: IFTRUE 25738
25736: GO 25749
25738: POP
// bc_type := b_oil_power ; 32 :
25739: LD_ADDR_OWVAR 42
25743: PUSH
25744: LD_INT 26
25746: ST_TO_ADDR
25747: GO 25807
25749: LD_INT 32
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 25768
25757: POP
// bc_type := b_siberite_power ; 33 :
25758: LD_ADDR_OWVAR 42
25762: PUSH
25763: LD_INT 28
25765: ST_TO_ADDR
25766: GO 25807
25768: LD_INT 33
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25787
25776: POP
// bc_type := b_oil_mine ; 34 :
25777: LD_ADDR_OWVAR 42
25781: PUSH
25782: LD_INT 29
25784: ST_TO_ADDR
25785: GO 25807
25787: LD_INT 34
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25806
25795: POP
// bc_type := b_siberite_mine ; end ;
25796: LD_ADDR_OWVAR 42
25800: PUSH
25801: LD_INT 30
25803: ST_TO_ADDR
25804: GO 25807
25806: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25807: LD_ADDR_VAR 0 8
25811: PUSH
25812: LD_VAR 0 5
25816: PPUSH
25817: LD_VAR 0 6
25821: PPUSH
25822: LD_VAR 0 3
25826: PPUSH
25827: CALL_OW 47
25831: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25832: LD_OWVAR 42
25836: PUSH
25837: LD_INT 32
25839: PUSH
25840: LD_INT 33
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: IN
25847: IFFALSE 25863
// PlaceWeaponTurret ( b , weapon ) ;
25849: LD_VAR 0 8
25853: PPUSH
25854: LD_VAR 0 4
25858: PPUSH
25859: CALL_OW 431
// end ;
25863: LD_VAR 0 7
25867: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25868: LD_INT 0
25870: PPUSH
25871: PPUSH
25872: PPUSH
25873: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25874: LD_ADDR_VAR 0 4
25878: PUSH
25879: LD_INT 22
25881: PUSH
25882: LD_OWVAR 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: PUSH
25894: LD_INT 30
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 69
25927: ST_TO_ADDR
// if not tmp then
25928: LD_VAR 0 4
25932: NOT
25933: IFFALSE 25937
// exit ;
25935: GO 25996
// for i in tmp do
25937: LD_ADDR_VAR 0 2
25941: PUSH
25942: LD_VAR 0 4
25946: PUSH
25947: FOR_IN
25948: IFFALSE 25994
// for j = 1 to 3 do
25950: LD_ADDR_VAR 0 3
25954: PUSH
25955: DOUBLE
25956: LD_INT 1
25958: DEC
25959: ST_TO_ADDR
25960: LD_INT 3
25962: PUSH
25963: FOR_TO
25964: IFFALSE 25990
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL_OW 274
25975: PPUSH
25976: LD_VAR 0 3
25980: PPUSH
25981: LD_INT 99999
25983: PPUSH
25984: CALL_OW 277
25988: GO 25963
25990: POP
25991: POP
25992: GO 25947
25994: POP
25995: POP
// end ;
25996: LD_VAR 0 1
26000: RET
// export function hHackSetLevel10 ; var i , j ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26006: LD_ADDR_VAR 0 2
26010: PUSH
26011: LD_INT 21
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PPUSH
26021: CALL_OW 69
26025: PUSH
26026: FOR_IN
26027: IFFALSE 26079
// if IsSelected ( i ) then
26029: LD_VAR 0 2
26033: PPUSH
26034: CALL_OW 306
26038: IFFALSE 26077
// begin for j := 1 to 4 do
26040: LD_ADDR_VAR 0 3
26044: PUSH
26045: DOUBLE
26046: LD_INT 1
26048: DEC
26049: ST_TO_ADDR
26050: LD_INT 4
26052: PUSH
26053: FOR_TO
26054: IFFALSE 26075
// SetSkill ( i , j , 10 ) ;
26056: LD_VAR 0 2
26060: PPUSH
26061: LD_VAR 0 3
26065: PPUSH
26066: LD_INT 10
26068: PPUSH
26069: CALL_OW 237
26073: GO 26053
26075: POP
26076: POP
// end ;
26077: GO 26026
26079: POP
26080: POP
// end ;
26081: LD_VAR 0 1
26085: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26086: LD_INT 0
26088: PPUSH
26089: PPUSH
26090: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26091: LD_ADDR_VAR 0 2
26095: PUSH
26096: LD_INT 22
26098: PUSH
26099: LD_OWVAR 2
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 21
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PPUSH
26122: CALL_OW 69
26126: PUSH
26127: FOR_IN
26128: IFFALSE 26169
// begin for j := 1 to 4 do
26130: LD_ADDR_VAR 0 3
26134: PUSH
26135: DOUBLE
26136: LD_INT 1
26138: DEC
26139: ST_TO_ADDR
26140: LD_INT 4
26142: PUSH
26143: FOR_TO
26144: IFFALSE 26165
// SetSkill ( i , j , 10 ) ;
26146: LD_VAR 0 2
26150: PPUSH
26151: LD_VAR 0 3
26155: PPUSH
26156: LD_INT 10
26158: PPUSH
26159: CALL_OW 237
26163: GO 26143
26165: POP
26166: POP
// end ;
26167: GO 26127
26169: POP
26170: POP
// end ;
26171: LD_VAR 0 1
26175: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26176: LD_INT 0
26178: PPUSH
// uc_side := your_side ;
26179: LD_ADDR_OWVAR 20
26183: PUSH
26184: LD_OWVAR 2
26188: ST_TO_ADDR
// uc_nation := nation ;
26189: LD_ADDR_OWVAR 21
26193: PUSH
26194: LD_VAR 0 1
26198: ST_TO_ADDR
// InitHc ;
26199: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26203: LD_INT 0
26205: PPUSH
26206: LD_VAR 0 2
26210: PPUSH
26211: LD_VAR 0 3
26215: PPUSH
26216: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26220: LD_VAR 0 4
26224: PPUSH
26225: LD_VAR 0 5
26229: PPUSH
26230: CALL_OW 428
26234: PUSH
26235: LD_INT 0
26237: EQUAL
26238: IFFALSE 26262
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26240: CALL_OW 44
26244: PPUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: LD_VAR 0 5
26254: PPUSH
26255: LD_INT 1
26257: PPUSH
26258: CALL_OW 48
// end ;
26262: LD_VAR 0 6
26266: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26267: LD_INT 0
26269: PPUSH
26270: PPUSH
// uc_side := your_side ;
26271: LD_ADDR_OWVAR 20
26275: PUSH
26276: LD_OWVAR 2
26280: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26281: LD_VAR 0 1
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 3
26294: PUSH
26295: LD_INT 4
26297: PUSH
26298: LD_INT 5
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: IN
26308: IFFALSE 26320
// uc_nation := nation_american else
26310: LD_ADDR_OWVAR 21
26314: PUSH
26315: LD_INT 1
26317: ST_TO_ADDR
26318: GO 26363
// if chassis in [ 11 , 12 , 13 , 14 ] then
26320: LD_VAR 0 1
26324: PUSH
26325: LD_INT 11
26327: PUSH
26328: LD_INT 12
26330: PUSH
26331: LD_INT 13
26333: PUSH
26334: LD_INT 14
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: IN
26343: IFFALSE 26355
// uc_nation := nation_arabian else
26345: LD_ADDR_OWVAR 21
26349: PUSH
26350: LD_INT 2
26352: ST_TO_ADDR
26353: GO 26363
// uc_nation := nation_russian ;
26355: LD_ADDR_OWVAR 21
26359: PUSH
26360: LD_INT 3
26362: ST_TO_ADDR
// vc_chassis := chassis ;
26363: LD_ADDR_OWVAR 37
26367: PUSH
26368: LD_VAR 0 1
26372: ST_TO_ADDR
// vc_engine := engine ;
26373: LD_ADDR_OWVAR 39
26377: PUSH
26378: LD_VAR 0 2
26382: ST_TO_ADDR
// vc_control := control ;
26383: LD_ADDR_OWVAR 38
26387: PUSH
26388: LD_VAR 0 3
26392: ST_TO_ADDR
// vc_weapon := weapon ;
26393: LD_ADDR_OWVAR 40
26397: PUSH
26398: LD_VAR 0 4
26402: ST_TO_ADDR
// un := CreateVehicle ;
26403: LD_ADDR_VAR 0 8
26407: PUSH
26408: CALL_OW 45
26412: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26413: LD_VAR 0 8
26417: PPUSH
26418: LD_INT 0
26420: PPUSH
26421: LD_INT 5
26423: PPUSH
26424: CALL_OW 12
26428: PPUSH
26429: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26433: LD_VAR 0 8
26437: PPUSH
26438: LD_VAR 0 5
26442: PPUSH
26443: LD_VAR 0 6
26447: PPUSH
26448: LD_INT 1
26450: PPUSH
26451: CALL_OW 48
// end ;
26455: LD_VAR 0 7
26459: RET
// export hInvincible ; every 1 do
26460: GO 26462
26462: DISABLE
// hInvincible := [ ] ;
26463: LD_ADDR_EXP 119
26467: PUSH
26468: EMPTY
26469: ST_TO_ADDR
26470: END
// every 10 do var i ;
26471: GO 26473
26473: DISABLE
26474: LD_INT 0
26476: PPUSH
// begin enable ;
26477: ENABLE
// if not hInvincible then
26478: LD_EXP 119
26482: NOT
26483: IFFALSE 26487
// exit ;
26485: GO 26531
// for i in hInvincible do
26487: LD_ADDR_VAR 0 1
26491: PUSH
26492: LD_EXP 119
26496: PUSH
26497: FOR_IN
26498: IFFALSE 26529
// if GetLives ( i ) < 1000 then
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 256
26509: PUSH
26510: LD_INT 1000
26512: LESS
26513: IFFALSE 26527
// SetLives ( i , 1000 ) ;
26515: LD_VAR 0 1
26519: PPUSH
26520: LD_INT 1000
26522: PPUSH
26523: CALL_OW 234
26527: GO 26497
26529: POP
26530: POP
// end ;
26531: PPOPN 1
26533: END
// export function hHackInvincible ; var i ; begin
26534: LD_INT 0
26536: PPUSH
26537: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26538: LD_ADDR_VAR 0 2
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: LD_INT 21
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 21
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PPUSH
26571: CALL_OW 69
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26638
// if IsSelected ( i ) then
26579: LD_VAR 0 2
26583: PPUSH
26584: CALL_OW 306
26588: IFFALSE 26636
// begin if i in hInvincible then
26590: LD_VAR 0 2
26594: PUSH
26595: LD_EXP 119
26599: IN
26600: IFFALSE 26620
// hInvincible := hInvincible diff i else
26602: LD_ADDR_EXP 119
26606: PUSH
26607: LD_EXP 119
26611: PUSH
26612: LD_VAR 0 2
26616: DIFF
26617: ST_TO_ADDR
26618: GO 26636
// hInvincible := hInvincible union i ;
26620: LD_ADDR_EXP 119
26624: PUSH
26625: LD_EXP 119
26629: PUSH
26630: LD_VAR 0 2
26634: UNION
26635: ST_TO_ADDR
// end ;
26636: GO 26576
26638: POP
26639: POP
// end ;
26640: LD_VAR 0 1
26644: RET
// export function hHackInvisible ; var i , j ; begin
26645: LD_INT 0
26647: PPUSH
26648: PPUSH
26649: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26650: LD_ADDR_VAR 0 2
26654: PUSH
26655: LD_INT 21
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PPUSH
26665: CALL_OW 69
26669: PUSH
26670: FOR_IN
26671: IFFALSE 26695
// if IsSelected ( i ) then
26673: LD_VAR 0 2
26677: PPUSH
26678: CALL_OW 306
26682: IFFALSE 26693
// ComForceInvisible ( i ) ;
26684: LD_VAR 0 2
26688: PPUSH
26689: CALL_OW 496
26693: GO 26670
26695: POP
26696: POP
// end ;
26697: LD_VAR 0 1
26701: RET
// export function hHackChangeYourSide ; begin
26702: LD_INT 0
26704: PPUSH
// if your_side = 8 then
26705: LD_OWVAR 2
26709: PUSH
26710: LD_INT 8
26712: EQUAL
26713: IFFALSE 26725
// your_side := 0 else
26715: LD_ADDR_OWVAR 2
26719: PUSH
26720: LD_INT 0
26722: ST_TO_ADDR
26723: GO 26739
// your_side := your_side + 1 ;
26725: LD_ADDR_OWVAR 2
26729: PUSH
26730: LD_OWVAR 2
26734: PUSH
26735: LD_INT 1
26737: PLUS
26738: ST_TO_ADDR
// end ;
26739: LD_VAR 0 1
26743: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26744: LD_INT 0
26746: PPUSH
26747: PPUSH
26748: PPUSH
// for i in all_units do
26749: LD_ADDR_VAR 0 2
26753: PUSH
26754: LD_OWVAR 3
26758: PUSH
26759: FOR_IN
26760: IFFALSE 26838
// if IsSelected ( i ) then
26762: LD_VAR 0 2
26766: PPUSH
26767: CALL_OW 306
26771: IFFALSE 26836
// begin j := GetSide ( i ) ;
26773: LD_ADDR_VAR 0 3
26777: PUSH
26778: LD_VAR 0 2
26782: PPUSH
26783: CALL_OW 255
26787: ST_TO_ADDR
// if j = 8 then
26788: LD_VAR 0 3
26792: PUSH
26793: LD_INT 8
26795: EQUAL
26796: IFFALSE 26808
// j := 0 else
26798: LD_ADDR_VAR 0 3
26802: PUSH
26803: LD_INT 0
26805: ST_TO_ADDR
26806: GO 26822
// j := j + 1 ;
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_VAR 0 3
26817: PUSH
26818: LD_INT 1
26820: PLUS
26821: ST_TO_ADDR
// SetSide ( i , j ) ;
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL_OW 235
// end ;
26836: GO 26759
26838: POP
26839: POP
// end ;
26840: LD_VAR 0 1
26844: RET
// export function hHackFog ; begin
26845: LD_INT 0
26847: PPUSH
// FogOff ( true ) ;
26848: LD_INT 1
26850: PPUSH
26851: CALL_OW 344
// end ;
26855: LD_VAR 0 1
26859: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26860: LD_INT 0
26862: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26863: LD_VAR 0 1
26867: PPUSH
26868: LD_VAR 0 2
26872: PPUSH
26873: LD_VAR 0 3
26877: PPUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_INT 1
26883: PPUSH
26884: CALL_OW 483
// CenterOnXY ( x , y ) ;
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_VAR 0 3
26897: PPUSH
26898: CALL_OW 84
// end ; end_of_file
26902: LD_VAR 0 4
26906: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26907: LD_INT 0
26909: PPUSH
26910: PPUSH
26911: PPUSH
26912: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 264
26922: PUSH
26923: LD_EXP 47
26927: EQUAL
26928: IFFALSE 27000
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26930: LD_INT 68
26932: PPUSH
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL_OW 255
26942: PPUSH
26943: CALL_OW 321
26947: PUSH
26948: LD_INT 2
26950: EQUAL
26951: IFFALSE 26963
// eff := 70 else
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: LD_INT 70
26960: ST_TO_ADDR
26961: GO 26971
// eff := 30 ;
26963: LD_ADDR_VAR 0 4
26967: PUSH
26968: LD_INT 30
26970: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26971: LD_VAR 0 1
26975: PPUSH
26976: CALL_OW 250
26980: PPUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: CALL_OW 251
26990: PPUSH
26991: LD_VAR 0 4
26995: PPUSH
26996: CALL_OW 495
// end ; end ;
27000: LD_VAR 0 2
27004: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27005: LD_INT 0
27007: PPUSH
// end ;
27008: LD_VAR 0 4
27012: RET
// export function SOS_Command ( cmd ) ; begin
27013: LD_INT 0
27015: PPUSH
// end ;
27016: LD_VAR 0 2
27020: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27021: LD_INT 0
27023: PPUSH
// end ;
27024: LD_VAR 0 6
27028: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27029: LD_INT 0
27031: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27032: LD_VAR 0 1
27036: PUSH
27037: LD_INT 250
27039: EQUAL
27040: PUSH
27041: LD_VAR 0 2
27045: PPUSH
27046: CALL_OW 264
27050: PUSH
27051: LD_EXP 50
27055: EQUAL
27056: AND
27057: IFFALSE 27078
// MinerPlaceMine ( unit , x , y ) ;
27059: LD_VAR 0 2
27063: PPUSH
27064: LD_VAR 0 4
27068: PPUSH
27069: LD_VAR 0 5
27073: PPUSH
27074: CALL 29427 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27078: LD_VAR 0 1
27082: PUSH
27083: LD_INT 251
27085: EQUAL
27086: PUSH
27087: LD_VAR 0 2
27091: PPUSH
27092: CALL_OW 264
27096: PUSH
27097: LD_EXP 50
27101: EQUAL
27102: AND
27103: IFFALSE 27124
// MinerDetonateMine ( unit , x , y ) ;
27105: LD_VAR 0 2
27109: PPUSH
27110: LD_VAR 0 4
27114: PPUSH
27115: LD_VAR 0 5
27119: PPUSH
27120: CALL 29704 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27124: LD_VAR 0 1
27128: PUSH
27129: LD_INT 252
27131: EQUAL
27132: PUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 264
27142: PUSH
27143: LD_EXP 50
27147: EQUAL
27148: AND
27149: IFFALSE 27170
// MinerCreateMinefield ( unit , x , y ) ;
27151: LD_VAR 0 2
27155: PPUSH
27156: LD_VAR 0 4
27160: PPUSH
27161: LD_VAR 0 5
27165: PPUSH
27166: CALL 30121 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27170: LD_VAR 0 1
27174: PUSH
27175: LD_INT 253
27177: EQUAL
27178: PUSH
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 257
27188: PUSH
27189: LD_INT 5
27191: EQUAL
27192: AND
27193: IFFALSE 27214
// ComBinocular ( unit , x , y ) ;
27195: LD_VAR 0 2
27199: PPUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: LD_VAR 0 5
27209: PPUSH
27210: CALL 30492 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27214: LD_VAR 0 1
27218: PUSH
27219: LD_INT 254
27221: EQUAL
27222: PUSH
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 264
27232: PUSH
27233: LD_EXP 45
27237: EQUAL
27238: AND
27239: PUSH
27240: LD_VAR 0 3
27244: PPUSH
27245: CALL_OW 263
27249: PUSH
27250: LD_INT 3
27252: EQUAL
27253: AND
27254: IFFALSE 27270
// HackDestroyVehicle ( unit , selectedUnit ) ;
27256: LD_VAR 0 2
27260: PPUSH
27261: LD_VAR 0 3
27265: PPUSH
27266: CALL 28787 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27270: LD_VAR 0 1
27274: PUSH
27275: LD_INT 255
27277: EQUAL
27278: PUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 264
27288: PUSH
27289: LD_INT 14
27291: PUSH
27292: LD_INT 53
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: IN
27299: AND
27300: PUSH
27301: LD_VAR 0 4
27305: PPUSH
27306: LD_VAR 0 5
27310: PPUSH
27311: CALL_OW 488
27315: AND
27316: IFFALSE 27340
// CutTreeXYR ( unit , x , y , 12 ) ;
27318: LD_VAR 0 2
27322: PPUSH
27323: LD_VAR 0 4
27327: PPUSH
27328: LD_VAR 0 5
27332: PPUSH
27333: LD_INT 12
27335: PPUSH
27336: CALL 27353 0 4
// end ;
27340: LD_VAR 0 6
27344: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
27345: LD_INT 0
27347: PPUSH
// end ;
27348: LD_VAR 0 4
27352: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27353: LD_INT 0
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27364: LD_VAR 0 1
27368: NOT
27369: PUSH
27370: LD_VAR 0 2
27374: PPUSH
27375: LD_VAR 0 3
27379: PPUSH
27380: CALL_OW 488
27384: NOT
27385: OR
27386: PUSH
27387: LD_VAR 0 4
27391: NOT
27392: OR
27393: IFFALSE 27397
// exit ;
27395: GO 27737
// list := [ ] ;
27397: LD_ADDR_VAR 0 13
27401: PUSH
27402: EMPTY
27403: ST_TO_ADDR
// if x - r < 0 then
27404: LD_VAR 0 2
27408: PUSH
27409: LD_VAR 0 4
27413: MINUS
27414: PUSH
27415: LD_INT 0
27417: LESS
27418: IFFALSE 27430
// min_x := 0 else
27420: LD_ADDR_VAR 0 7
27424: PUSH
27425: LD_INT 0
27427: ST_TO_ADDR
27428: GO 27446
// min_x := x - r ;
27430: LD_ADDR_VAR 0 7
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_VAR 0 4
27444: MINUS
27445: ST_TO_ADDR
// if y - r < 0 then
27446: LD_VAR 0 3
27450: PUSH
27451: LD_VAR 0 4
27455: MINUS
27456: PUSH
27457: LD_INT 0
27459: LESS
27460: IFFALSE 27472
// min_y := 0 else
27462: LD_ADDR_VAR 0 8
27466: PUSH
27467: LD_INT 0
27469: ST_TO_ADDR
27470: GO 27488
// min_y := y - r ;
27472: LD_ADDR_VAR 0 8
27476: PUSH
27477: LD_VAR 0 3
27481: PUSH
27482: LD_VAR 0 4
27486: MINUS
27487: ST_TO_ADDR
// max_x := x + r ;
27488: LD_ADDR_VAR 0 9
27492: PUSH
27493: LD_VAR 0 2
27497: PUSH
27498: LD_VAR 0 4
27502: PLUS
27503: ST_TO_ADDR
// max_y := y + r ;
27504: LD_ADDR_VAR 0 10
27508: PUSH
27509: LD_VAR 0 3
27513: PUSH
27514: LD_VAR 0 4
27518: PLUS
27519: ST_TO_ADDR
// for _x = min_x to max_x do
27520: LD_ADDR_VAR 0 11
27524: PUSH
27525: DOUBLE
27526: LD_VAR 0 7
27530: DEC
27531: ST_TO_ADDR
27532: LD_VAR 0 9
27536: PUSH
27537: FOR_TO
27538: IFFALSE 27655
// for _y = min_y to max_y do
27540: LD_ADDR_VAR 0 12
27544: PUSH
27545: DOUBLE
27546: LD_VAR 0 8
27550: DEC
27551: ST_TO_ADDR
27552: LD_VAR 0 10
27556: PUSH
27557: FOR_TO
27558: IFFALSE 27651
// begin if not ValidHex ( _x , _y ) then
27560: LD_VAR 0 11
27564: PPUSH
27565: LD_VAR 0 12
27569: PPUSH
27570: CALL_OW 488
27574: NOT
27575: IFFALSE 27579
// continue ;
27577: GO 27557
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27579: LD_VAR 0 11
27583: PPUSH
27584: LD_VAR 0 12
27588: PPUSH
27589: CALL_OW 351
27593: PUSH
27594: LD_VAR 0 11
27598: PPUSH
27599: LD_VAR 0 12
27603: PPUSH
27604: CALL_OW 554
27608: AND
27609: IFFALSE 27649
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27611: LD_ADDR_VAR 0 13
27615: PUSH
27616: LD_VAR 0 13
27620: PPUSH
27621: LD_VAR 0 13
27625: PUSH
27626: LD_INT 1
27628: PLUS
27629: PPUSH
27630: LD_VAR 0 11
27634: PUSH
27635: LD_VAR 0 12
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PPUSH
27644: CALL_OW 2
27648: ST_TO_ADDR
// end ;
27649: GO 27557
27651: POP
27652: POP
27653: GO 27537
27655: POP
27656: POP
// if not list then
27657: LD_VAR 0 13
27661: NOT
27662: IFFALSE 27666
// exit ;
27664: GO 27737
// for i in list do
27666: LD_ADDR_VAR 0 6
27670: PUSH
27671: LD_VAR 0 13
27675: PUSH
27676: FOR_IN
27677: IFFALSE 27735
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27679: LD_VAR 0 1
27683: PPUSH
27684: LD_STRING M
27686: PUSH
27687: LD_VAR 0 6
27691: PUSH
27692: LD_INT 1
27694: ARRAY
27695: PUSH
27696: LD_VAR 0 6
27700: PUSH
27701: LD_INT 2
27703: ARRAY
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: PPUSH
27729: CALL_OW 447
27733: GO 27676
27735: POP
27736: POP
// end ;
27737: LD_VAR 0 5
27741: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27742: LD_EXP 122
27746: NOT
27747: IFFALSE 27797
27749: GO 27751
27751: DISABLE
// begin initHack := true ;
27752: LD_ADDR_EXP 122
27756: PUSH
27757: LD_INT 1
27759: ST_TO_ADDR
// hackTanks := [ ] ;
27760: LD_ADDR_EXP 123
27764: PUSH
27765: EMPTY
27766: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27767: LD_ADDR_EXP 124
27771: PUSH
27772: EMPTY
27773: ST_TO_ADDR
// hackLimit := 3 ;
27774: LD_ADDR_EXP 125
27778: PUSH
27779: LD_INT 3
27781: ST_TO_ADDR
// hackDist := 12 ;
27782: LD_ADDR_EXP 126
27786: PUSH
27787: LD_INT 12
27789: ST_TO_ADDR
// hackCounter := [ ] ;
27790: LD_ADDR_EXP 127
27794: PUSH
27795: EMPTY
27796: ST_TO_ADDR
// end ;
27797: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27798: LD_EXP 122
27802: PUSH
27803: LD_INT 34
27805: PUSH
27806: LD_EXP 45
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 69
27819: AND
27820: IFFALSE 28075
27822: GO 27824
27824: DISABLE
27825: LD_INT 0
27827: PPUSH
27828: PPUSH
// begin enable ;
27829: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27830: LD_ADDR_VAR 0 1
27834: PUSH
27835: LD_INT 34
27837: PUSH
27838: LD_EXP 45
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PPUSH
27847: CALL_OW 69
27851: PUSH
27852: FOR_IN
27853: IFFALSE 28073
// begin if not i in hackTanks then
27855: LD_VAR 0 1
27859: PUSH
27860: LD_EXP 123
27864: IN
27865: NOT
27866: IFFALSE 27949
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27868: LD_ADDR_EXP 123
27872: PUSH
27873: LD_EXP 123
27877: PPUSH
27878: LD_EXP 123
27882: PUSH
27883: LD_INT 1
27885: PLUS
27886: PPUSH
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL_OW 1
27896: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27897: LD_ADDR_EXP 124
27901: PUSH
27902: LD_EXP 124
27906: PPUSH
27907: LD_EXP 124
27911: PUSH
27912: LD_INT 1
27914: PLUS
27915: PPUSH
27916: EMPTY
27917: PPUSH
27918: CALL_OW 1
27922: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27923: LD_ADDR_EXP 127
27927: PUSH
27928: LD_EXP 127
27932: PPUSH
27933: LD_EXP 127
27937: PUSH
27938: LD_INT 1
27940: PLUS
27941: PPUSH
27942: EMPTY
27943: PPUSH
27944: CALL_OW 1
27948: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 302
27958: NOT
27959: IFFALSE 27972
// begin HackUnlinkAll ( i ) ;
27961: LD_VAR 0 1
27965: PPUSH
27966: CALL 28078 0 1
// continue ;
27970: GO 27852
// end ; HackCheckCapturedStatus ( i ) ;
27972: LD_VAR 0 1
27976: PPUSH
27977: CALL 28521 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27981: LD_ADDR_VAR 0 2
27985: PUSH
27986: LD_INT 81
27988: PUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 255
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 33
28005: PUSH
28006: LD_INT 3
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 91
28015: PUSH
28016: LD_VAR 0 1
28020: PUSH
28021: LD_EXP 126
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 50
28033: PUSH
28034: EMPTY
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: PPUSH
28043: CALL_OW 69
28047: ST_TO_ADDR
// if not tmp then
28048: LD_VAR 0 2
28052: NOT
28053: IFFALSE 28057
// continue ;
28055: GO 27852
// HackLink ( i , tmp ) ;
28057: LD_VAR 0 1
28061: PPUSH
28062: LD_VAR 0 2
28066: PPUSH
28067: CALL 28214 0 2
// end ;
28071: GO 27852
28073: POP
28074: POP
// end ;
28075: PPOPN 2
28077: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28078: LD_INT 0
28080: PPUSH
28081: PPUSH
28082: PPUSH
// if not hack in hackTanks then
28083: LD_VAR 0 1
28087: PUSH
28088: LD_EXP 123
28092: IN
28093: NOT
28094: IFFALSE 28098
// exit ;
28096: GO 28209
// index := GetElementIndex ( hackTanks , hack ) ;
28098: LD_ADDR_VAR 0 4
28102: PUSH
28103: LD_EXP 123
28107: PPUSH
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL 35683 0 2
28117: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28118: LD_EXP 124
28122: PUSH
28123: LD_VAR 0 4
28127: ARRAY
28128: IFFALSE 28209
// begin for i in hackTanksCaptured [ index ] do
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_EXP 124
28139: PUSH
28140: LD_VAR 0 4
28144: ARRAY
28145: PUSH
28146: FOR_IN
28147: IFFALSE 28173
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28149: LD_VAR 0 3
28153: PUSH
28154: LD_INT 1
28156: ARRAY
28157: PPUSH
28158: LD_VAR 0 3
28162: PUSH
28163: LD_INT 2
28165: ARRAY
28166: PPUSH
28167: CALL_OW 235
28171: GO 28146
28173: POP
28174: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28175: LD_ADDR_EXP 124
28179: PUSH
28180: LD_EXP 124
28184: PPUSH
28185: LD_VAR 0 4
28189: PPUSH
28190: EMPTY
28191: PPUSH
28192: CALL_OW 1
28196: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_INT 0
28204: PPUSH
28205: CALL_OW 505
// end ; end ;
28209: LD_VAR 0 2
28213: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
28218: PPUSH
// if not hack in hackTanks or not vehicles then
28219: LD_VAR 0 1
28223: PUSH
28224: LD_EXP 123
28228: IN
28229: NOT
28230: PUSH
28231: LD_VAR 0 2
28235: NOT
28236: OR
28237: IFFALSE 28241
// exit ;
28239: GO 28516
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28241: LD_ADDR_VAR 0 2
28245: PUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: LD_VAR 0 2
28255: PPUSH
28256: LD_INT 1
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: CALL 36333 0 4
28266: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28267: LD_ADDR_VAR 0 5
28271: PUSH
28272: LD_EXP 123
28276: PPUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL 35683 0 2
28286: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28287: LD_EXP 124
28291: PUSH
28292: LD_VAR 0 5
28296: ARRAY
28297: PUSH
28298: LD_EXP 125
28302: LESS
28303: IFFALSE 28492
// begin for i := 1 to vehicles do
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: DOUBLE
28311: LD_INT 1
28313: DEC
28314: ST_TO_ADDR
28315: LD_VAR 0 2
28319: PUSH
28320: FOR_TO
28321: IFFALSE 28490
// begin if hackTanksCaptured [ index ] = hackLimit then
28323: LD_EXP 124
28327: PUSH
28328: LD_VAR 0 5
28332: ARRAY
28333: PUSH
28334: LD_EXP 125
28338: EQUAL
28339: IFFALSE 28343
// break ;
28341: GO 28490
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28343: LD_ADDR_EXP 127
28347: PUSH
28348: LD_EXP 127
28352: PPUSH
28353: LD_VAR 0 5
28357: PPUSH
28358: LD_EXP 127
28362: PUSH
28363: LD_VAR 0 5
28367: ARRAY
28368: PUSH
28369: LD_INT 1
28371: PLUS
28372: PPUSH
28373: CALL_OW 1
28377: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28378: LD_ADDR_EXP 124
28382: PUSH
28383: LD_EXP 124
28387: PPUSH
28388: LD_VAR 0 5
28392: PUSH
28393: LD_EXP 124
28397: PUSH
28398: LD_VAR 0 5
28402: ARRAY
28403: PUSH
28404: LD_INT 1
28406: PLUS
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PPUSH
28412: LD_VAR 0 2
28416: PUSH
28417: LD_VAR 0 4
28421: ARRAY
28422: PUSH
28423: LD_VAR 0 2
28427: PUSH
28428: LD_VAR 0 4
28432: ARRAY
28433: PPUSH
28434: CALL_OW 255
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL 35898 0 3
28447: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28448: LD_VAR 0 2
28452: PUSH
28453: LD_VAR 0 4
28457: ARRAY
28458: PPUSH
28459: LD_VAR 0 1
28463: PPUSH
28464: CALL_OW 255
28468: PPUSH
28469: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28473: LD_VAR 0 2
28477: PUSH
28478: LD_VAR 0 4
28482: ARRAY
28483: PPUSH
28484: CALL_OW 141
// end ;
28488: GO 28320
28490: POP
28491: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28492: LD_VAR 0 1
28496: PPUSH
28497: LD_EXP 124
28501: PUSH
28502: LD_VAR 0 5
28506: ARRAY
28507: PUSH
28508: LD_INT 0
28510: PLUS
28511: PPUSH
28512: CALL_OW 505
// end ;
28516: LD_VAR 0 3
28520: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
28525: PPUSH
28526: PPUSH
// if not hack in hackTanks then
28527: LD_VAR 0 1
28531: PUSH
28532: LD_EXP 123
28536: IN
28537: NOT
28538: IFFALSE 28542
// exit ;
28540: GO 28782
// index := GetElementIndex ( hackTanks , hack ) ;
28542: LD_ADDR_VAR 0 4
28546: PUSH
28547: LD_EXP 123
28551: PPUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL 35683 0 2
28561: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: DOUBLE
28568: LD_EXP 124
28572: PUSH
28573: LD_VAR 0 4
28577: ARRAY
28578: INC
28579: ST_TO_ADDR
28580: LD_INT 1
28582: PUSH
28583: FOR_DOWNTO
28584: IFFALSE 28756
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28586: LD_ADDR_VAR 0 5
28590: PUSH
28591: LD_EXP 124
28595: PUSH
28596: LD_VAR 0 4
28600: ARRAY
28601: PUSH
28602: LD_VAR 0 3
28606: ARRAY
28607: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28608: LD_VAR 0 5
28612: PUSH
28613: LD_INT 1
28615: ARRAY
28616: PPUSH
28617: CALL_OW 302
28621: NOT
28622: PUSH
28623: LD_VAR 0 5
28627: PUSH
28628: LD_INT 1
28630: ARRAY
28631: PPUSH
28632: CALL_OW 255
28636: PUSH
28637: LD_VAR 0 1
28641: PPUSH
28642: CALL_OW 255
28646: NONEQUAL
28647: OR
28648: IFFALSE 28754
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28650: LD_VAR 0 5
28654: PUSH
28655: LD_INT 1
28657: ARRAY
28658: PPUSH
28659: CALL_OW 305
28663: PUSH
28664: LD_VAR 0 5
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PPUSH
28673: CALL_OW 255
28677: PUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL_OW 255
28687: EQUAL
28688: AND
28689: IFFALSE 28713
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28691: LD_VAR 0 5
28695: PUSH
28696: LD_INT 1
28698: ARRAY
28699: PPUSH
28700: LD_VAR 0 5
28704: PUSH
28705: LD_INT 2
28707: ARRAY
28708: PPUSH
28709: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28713: LD_ADDR_EXP 124
28717: PUSH
28718: LD_EXP 124
28722: PPUSH
28723: LD_VAR 0 4
28727: PPUSH
28728: LD_EXP 124
28732: PUSH
28733: LD_VAR 0 4
28737: ARRAY
28738: PPUSH
28739: LD_VAR 0 3
28743: PPUSH
28744: CALL_OW 3
28748: PPUSH
28749: CALL_OW 1
28753: ST_TO_ADDR
// end ; end ;
28754: GO 28583
28756: POP
28757: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28758: LD_VAR 0 1
28762: PPUSH
28763: LD_EXP 124
28767: PUSH
28768: LD_VAR 0 4
28772: ARRAY
28773: PUSH
28774: LD_INT 0
28776: PLUS
28777: PPUSH
28778: CALL_OW 505
// end ;
28782: LD_VAR 0 2
28786: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28787: LD_INT 0
28789: PPUSH
28790: PPUSH
28791: PPUSH
28792: PPUSH
// if not hack in hackTanks then
28793: LD_VAR 0 1
28797: PUSH
28798: LD_EXP 123
28802: IN
28803: NOT
28804: IFFALSE 28808
// exit ;
28806: GO 28893
// index := GetElementIndex ( hackTanks , hack ) ;
28808: LD_ADDR_VAR 0 5
28812: PUSH
28813: LD_EXP 123
28817: PPUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL 35683 0 2
28827: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28828: LD_ADDR_VAR 0 4
28832: PUSH
28833: DOUBLE
28834: LD_INT 1
28836: DEC
28837: ST_TO_ADDR
28838: LD_EXP 124
28842: PUSH
28843: LD_VAR 0 5
28847: ARRAY
28848: PUSH
28849: FOR_TO
28850: IFFALSE 28891
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28852: LD_EXP 124
28856: PUSH
28857: LD_VAR 0 5
28861: ARRAY
28862: PUSH
28863: LD_VAR 0 4
28867: ARRAY
28868: PUSH
28869: LD_INT 1
28871: ARRAY
28872: PUSH
28873: LD_VAR 0 2
28877: EQUAL
28878: IFFALSE 28889
// KillUnit ( vehicle ) ;
28880: LD_VAR 0 2
28884: PPUSH
28885: CALL_OW 66
28889: GO 28849
28891: POP
28892: POP
// end ;
28893: LD_VAR 0 3
28897: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28898: LD_EXP 128
28902: NOT
28903: IFFALSE 28938
28905: GO 28907
28907: DISABLE
// begin initMiner := true ;
28908: LD_ADDR_EXP 128
28912: PUSH
28913: LD_INT 1
28915: ST_TO_ADDR
// minersList := [ ] ;
28916: LD_ADDR_EXP 129
28920: PUSH
28921: EMPTY
28922: ST_TO_ADDR
// minerMinesList := [ ] ;
28923: LD_ADDR_EXP 130
28927: PUSH
28928: EMPTY
28929: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28930: LD_ADDR_EXP 131
28934: PUSH
28935: LD_INT 5
28937: ST_TO_ADDR
// end ;
28938: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28939: LD_EXP 128
28943: PUSH
28944: LD_INT 34
28946: PUSH
28947: LD_EXP 50
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PPUSH
28956: CALL_OW 69
28960: AND
28961: IFFALSE 29424
28963: GO 28965
28965: DISABLE
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
// begin enable ;
28972: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28973: LD_ADDR_VAR 0 1
28977: PUSH
28978: LD_INT 34
28980: PUSH
28981: LD_EXP 50
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PPUSH
28990: CALL_OW 69
28994: PUSH
28995: FOR_IN
28996: IFFALSE 29068
// begin if not i in minersList then
28998: LD_VAR 0 1
29002: PUSH
29003: LD_EXP 129
29007: IN
29008: NOT
29009: IFFALSE 29066
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29011: LD_ADDR_EXP 129
29015: PUSH
29016: LD_EXP 129
29020: PPUSH
29021: LD_EXP 129
29025: PUSH
29026: LD_INT 1
29028: PLUS
29029: PPUSH
29030: LD_VAR 0 1
29034: PPUSH
29035: CALL_OW 1
29039: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29040: LD_ADDR_EXP 130
29044: PUSH
29045: LD_EXP 130
29049: PPUSH
29050: LD_EXP 130
29054: PUSH
29055: LD_INT 1
29057: PLUS
29058: PPUSH
29059: EMPTY
29060: PPUSH
29061: CALL_OW 1
29065: ST_TO_ADDR
// end end ;
29066: GO 28995
29068: POP
29069: POP
// for i := minerMinesList downto 1 do
29070: LD_ADDR_VAR 0 1
29074: PUSH
29075: DOUBLE
29076: LD_EXP 130
29080: INC
29081: ST_TO_ADDR
29082: LD_INT 1
29084: PUSH
29085: FOR_DOWNTO
29086: IFFALSE 29422
// begin if IsLive ( minersList [ i ] ) then
29088: LD_EXP 129
29092: PUSH
29093: LD_VAR 0 1
29097: ARRAY
29098: PPUSH
29099: CALL_OW 300
29103: IFFALSE 29131
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29105: LD_EXP 129
29109: PUSH
29110: LD_VAR 0 1
29114: ARRAY
29115: PPUSH
29116: LD_EXP 130
29120: PUSH
29121: LD_VAR 0 1
29125: ARRAY
29126: PPUSH
29127: CALL_OW 505
// if not minerMinesList [ i ] then
29131: LD_EXP 130
29135: PUSH
29136: LD_VAR 0 1
29140: ARRAY
29141: NOT
29142: IFFALSE 29146
// continue ;
29144: GO 29085
// for j := minerMinesList [ i ] downto 1 do
29146: LD_ADDR_VAR 0 2
29150: PUSH
29151: DOUBLE
29152: LD_EXP 130
29156: PUSH
29157: LD_VAR 0 1
29161: ARRAY
29162: INC
29163: ST_TO_ADDR
29164: LD_INT 1
29166: PUSH
29167: FOR_DOWNTO
29168: IFFALSE 29418
// begin side := GetSide ( minersList [ i ] ) ;
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_EXP 129
29179: PUSH
29180: LD_VAR 0 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 255
29190: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29191: LD_ADDR_VAR 0 4
29195: PUSH
29196: LD_EXP 130
29200: PUSH
29201: LD_VAR 0 1
29205: ARRAY
29206: PUSH
29207: LD_VAR 0 2
29211: ARRAY
29212: PUSH
29213: LD_INT 1
29215: ARRAY
29216: PPUSH
29217: LD_EXP 130
29221: PUSH
29222: LD_VAR 0 1
29226: ARRAY
29227: PUSH
29228: LD_VAR 0 2
29232: ARRAY
29233: PUSH
29234: LD_INT 2
29236: ARRAY
29237: PPUSH
29238: CALL_OW 428
29242: ST_TO_ADDR
// if not tmp then
29243: LD_VAR 0 4
29247: NOT
29248: IFFALSE 29252
// continue ;
29250: GO 29167
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29252: LD_VAR 0 4
29256: PUSH
29257: LD_INT 81
29259: PUSH
29260: LD_VAR 0 3
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL_OW 69
29273: IN
29274: PUSH
29275: LD_EXP 130
29279: PUSH
29280: LD_VAR 0 1
29284: ARRAY
29285: PUSH
29286: LD_VAR 0 2
29290: ARRAY
29291: PUSH
29292: LD_INT 1
29294: ARRAY
29295: PPUSH
29296: LD_EXP 130
29300: PUSH
29301: LD_VAR 0 1
29305: ARRAY
29306: PUSH
29307: LD_VAR 0 2
29311: ARRAY
29312: PUSH
29313: LD_INT 2
29315: ARRAY
29316: PPUSH
29317: CALL_OW 458
29321: AND
29322: IFFALSE 29416
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29324: LD_EXP 130
29328: PUSH
29329: LD_VAR 0 1
29333: ARRAY
29334: PUSH
29335: LD_VAR 0 2
29339: ARRAY
29340: PUSH
29341: LD_INT 1
29343: ARRAY
29344: PPUSH
29345: LD_EXP 130
29349: PUSH
29350: LD_VAR 0 1
29354: ARRAY
29355: PUSH
29356: LD_VAR 0 2
29360: ARRAY
29361: PUSH
29362: LD_INT 2
29364: ARRAY
29365: PPUSH
29366: LD_VAR 0 3
29370: PPUSH
29371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29375: LD_ADDR_EXP 130
29379: PUSH
29380: LD_EXP 130
29384: PPUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: LD_EXP 130
29394: PUSH
29395: LD_VAR 0 1
29399: ARRAY
29400: PPUSH
29401: LD_VAR 0 2
29405: PPUSH
29406: CALL_OW 3
29410: PPUSH
29411: CALL_OW 1
29415: ST_TO_ADDR
// end ; end ;
29416: GO 29167
29418: POP
29419: POP
// end ;
29420: GO 29085
29422: POP
29423: POP
// end ;
29424: PPOPN 4
29426: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29427: LD_INT 0
29429: PPUSH
29430: PPUSH
// result := false ;
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: LD_INT 0
29438: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 264
29448: PUSH
29449: LD_EXP 50
29453: EQUAL
29454: NOT
29455: IFFALSE 29459
// exit ;
29457: GO 29699
// index := GetElementIndex ( minersList , unit ) ;
29459: LD_ADDR_VAR 0 5
29463: PUSH
29464: LD_EXP 129
29468: PPUSH
29469: LD_VAR 0 1
29473: PPUSH
29474: CALL 35683 0 2
29478: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29479: LD_EXP 130
29483: PUSH
29484: LD_VAR 0 5
29488: ARRAY
29489: PUSH
29490: LD_EXP 131
29494: GREATEREQUAL
29495: IFFALSE 29499
// exit ;
29497: GO 29699
// ComMoveXY ( unit , x , y ) ;
29499: LD_VAR 0 1
29503: PPUSH
29504: LD_VAR 0 2
29508: PPUSH
29509: LD_VAR 0 3
29513: PPUSH
29514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29518: LD_INT 35
29520: PPUSH
29521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29525: LD_VAR 0 1
29529: PPUSH
29530: LD_VAR 0 2
29534: PPUSH
29535: LD_VAR 0 3
29539: PPUSH
29540: CALL 66455 0 3
29544: NOT
29545: PUSH
29546: LD_VAR 0 1
29550: PPUSH
29551: CALL_OW 314
29555: AND
29556: IFFALSE 29560
// exit ;
29558: GO 29699
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29560: LD_VAR 0 2
29564: PPUSH
29565: LD_VAR 0 3
29569: PPUSH
29570: CALL_OW 428
29574: PUSH
29575: LD_VAR 0 1
29579: EQUAL
29580: PUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 314
29590: NOT
29591: AND
29592: IFFALSE 29518
// PlaySoundXY ( x , y , PlantMine ) ;
29594: LD_VAR 0 2
29598: PPUSH
29599: LD_VAR 0 3
29603: PPUSH
29604: LD_STRING PlantMine
29606: PPUSH
29607: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29611: LD_VAR 0 2
29615: PPUSH
29616: LD_VAR 0 3
29620: PPUSH
29621: LD_VAR 0 1
29625: PPUSH
29626: CALL_OW 255
29630: PPUSH
29631: LD_INT 0
29633: PPUSH
29634: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29638: LD_ADDR_EXP 130
29642: PUSH
29643: LD_EXP 130
29647: PPUSH
29648: LD_VAR 0 5
29652: PUSH
29653: LD_EXP 130
29657: PUSH
29658: LD_VAR 0 5
29662: ARRAY
29663: PUSH
29664: LD_INT 1
29666: PLUS
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PPUSH
29672: LD_VAR 0 2
29676: PUSH
29677: LD_VAR 0 3
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PPUSH
29686: CALL 35898 0 3
29690: ST_TO_ADDR
// result := true ;
29691: LD_ADDR_VAR 0 4
29695: PUSH
29696: LD_INT 1
29698: ST_TO_ADDR
// end ;
29699: LD_VAR 0 4
29703: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29704: LD_INT 0
29706: PPUSH
29707: PPUSH
29708: PPUSH
// if not unit in minersList then
29709: LD_VAR 0 1
29713: PUSH
29714: LD_EXP 129
29718: IN
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 30116
// index := GetElementIndex ( minersList , unit ) ;
29724: LD_ADDR_VAR 0 6
29728: PUSH
29729: LD_EXP 129
29733: PPUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL 35683 0 2
29743: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29744: LD_ADDR_VAR 0 5
29748: PUSH
29749: DOUBLE
29750: LD_EXP 130
29754: PUSH
29755: LD_VAR 0 6
29759: ARRAY
29760: INC
29761: ST_TO_ADDR
29762: LD_INT 1
29764: PUSH
29765: FOR_DOWNTO
29766: IFFALSE 29927
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29768: LD_EXP 130
29772: PUSH
29773: LD_VAR 0 6
29777: ARRAY
29778: PUSH
29779: LD_VAR 0 5
29783: ARRAY
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PUSH
29789: LD_VAR 0 2
29793: EQUAL
29794: PUSH
29795: LD_EXP 130
29799: PUSH
29800: LD_VAR 0 6
29804: ARRAY
29805: PUSH
29806: LD_VAR 0 5
29810: ARRAY
29811: PUSH
29812: LD_INT 2
29814: ARRAY
29815: PUSH
29816: LD_VAR 0 3
29820: EQUAL
29821: AND
29822: IFFALSE 29925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29824: LD_EXP 130
29828: PUSH
29829: LD_VAR 0 6
29833: ARRAY
29834: PUSH
29835: LD_VAR 0 5
29839: ARRAY
29840: PUSH
29841: LD_INT 1
29843: ARRAY
29844: PPUSH
29845: LD_EXP 130
29849: PUSH
29850: LD_VAR 0 6
29854: ARRAY
29855: PUSH
29856: LD_VAR 0 5
29860: ARRAY
29861: PUSH
29862: LD_INT 2
29864: ARRAY
29865: PPUSH
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 255
29875: PPUSH
29876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29880: LD_ADDR_EXP 130
29884: PUSH
29885: LD_EXP 130
29889: PPUSH
29890: LD_VAR 0 6
29894: PPUSH
29895: LD_EXP 130
29899: PUSH
29900: LD_VAR 0 6
29904: ARRAY
29905: PPUSH
29906: LD_VAR 0 5
29910: PPUSH
29911: CALL_OW 3
29915: PPUSH
29916: CALL_OW 1
29920: ST_TO_ADDR
// exit ;
29921: POP
29922: POP
29923: GO 30116
// end ; end ;
29925: GO 29765
29927: POP
29928: POP
// for i := minerMinesList [ index ] downto 1 do
29929: LD_ADDR_VAR 0 5
29933: PUSH
29934: DOUBLE
29935: LD_EXP 130
29939: PUSH
29940: LD_VAR 0 6
29944: ARRAY
29945: INC
29946: ST_TO_ADDR
29947: LD_INT 1
29949: PUSH
29950: FOR_DOWNTO
29951: IFFALSE 30114
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29953: LD_EXP 130
29957: PUSH
29958: LD_VAR 0 6
29962: ARRAY
29963: PUSH
29964: LD_VAR 0 5
29968: ARRAY
29969: PUSH
29970: LD_INT 1
29972: ARRAY
29973: PPUSH
29974: LD_EXP 130
29978: PUSH
29979: LD_VAR 0 6
29983: ARRAY
29984: PUSH
29985: LD_VAR 0 5
29989: ARRAY
29990: PUSH
29991: LD_INT 2
29993: ARRAY
29994: PPUSH
29995: LD_VAR 0 2
29999: PPUSH
30000: LD_VAR 0 3
30004: PPUSH
30005: CALL_OW 298
30009: PUSH
30010: LD_INT 6
30012: LESS
30013: IFFALSE 30112
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30015: LD_EXP 130
30019: PUSH
30020: LD_VAR 0 6
30024: ARRAY
30025: PUSH
30026: LD_VAR 0 5
30030: ARRAY
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: LD_EXP 130
30040: PUSH
30041: LD_VAR 0 6
30045: ARRAY
30046: PUSH
30047: LD_VAR 0 5
30051: ARRAY
30052: PUSH
30053: LD_INT 2
30055: ARRAY
30056: PPUSH
30057: LD_VAR 0 1
30061: PPUSH
30062: CALL_OW 255
30066: PPUSH
30067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30071: LD_ADDR_EXP 130
30075: PUSH
30076: LD_EXP 130
30080: PPUSH
30081: LD_VAR 0 6
30085: PPUSH
30086: LD_EXP 130
30090: PUSH
30091: LD_VAR 0 6
30095: ARRAY
30096: PPUSH
30097: LD_VAR 0 5
30101: PPUSH
30102: CALL_OW 3
30106: PPUSH
30107: CALL_OW 1
30111: ST_TO_ADDR
// end ; end ;
30112: GO 29950
30114: POP
30115: POP
// end ;
30116: LD_VAR 0 4
30120: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30121: LD_INT 0
30123: PPUSH
30124: PPUSH
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 264
30141: PUSH
30142: LD_EXP 50
30146: EQUAL
30147: NOT
30148: PUSH
30149: LD_VAR 0 1
30153: PUSH
30154: LD_EXP 129
30158: IN
30159: NOT
30160: OR
30161: IFFALSE 30165
// exit ;
30163: GO 30487
// index := GetElementIndex ( minersList , unit ) ;
30165: LD_ADDR_VAR 0 6
30169: PUSH
30170: LD_EXP 129
30174: PPUSH
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL 35683 0 2
30184: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30185: LD_ADDR_VAR 0 8
30189: PUSH
30190: LD_EXP 131
30194: PUSH
30195: LD_EXP 130
30199: PUSH
30200: LD_VAR 0 6
30204: ARRAY
30205: MINUS
30206: ST_TO_ADDR
// if not minesFreeAmount then
30207: LD_VAR 0 8
30211: NOT
30212: IFFALSE 30216
// exit ;
30214: GO 30487
// tmp := [ ] ;
30216: LD_ADDR_VAR 0 7
30220: PUSH
30221: EMPTY
30222: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30223: LD_ADDR_VAR 0 5
30227: PUSH
30228: DOUBLE
30229: LD_INT 1
30231: DEC
30232: ST_TO_ADDR
30233: LD_VAR 0 8
30237: PUSH
30238: FOR_TO
30239: IFFALSE 30434
// begin _d := rand ( 0 , 5 ) ;
30241: LD_ADDR_VAR 0 11
30245: PUSH
30246: LD_INT 0
30248: PPUSH
30249: LD_INT 5
30251: PPUSH
30252: CALL_OW 12
30256: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30257: LD_ADDR_VAR 0 12
30261: PUSH
30262: LD_INT 2
30264: PPUSH
30265: LD_INT 6
30267: PPUSH
30268: CALL_OW 12
30272: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30273: LD_ADDR_VAR 0 9
30277: PUSH
30278: LD_VAR 0 2
30282: PPUSH
30283: LD_VAR 0 11
30287: PPUSH
30288: LD_VAR 0 12
30292: PPUSH
30293: CALL_OW 272
30297: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30298: LD_ADDR_VAR 0 10
30302: PUSH
30303: LD_VAR 0 3
30307: PPUSH
30308: LD_VAR 0 11
30312: PPUSH
30313: LD_VAR 0 12
30317: PPUSH
30318: CALL_OW 273
30322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30323: LD_VAR 0 9
30327: PPUSH
30328: LD_VAR 0 10
30332: PPUSH
30333: CALL_OW 488
30337: PUSH
30338: LD_VAR 0 9
30342: PUSH
30343: LD_VAR 0 10
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_VAR 0 7
30356: IN
30357: NOT
30358: AND
30359: PUSH
30360: LD_VAR 0 9
30364: PPUSH
30365: LD_VAR 0 10
30369: PPUSH
30370: CALL_OW 458
30374: NOT
30375: AND
30376: IFFALSE 30418
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30378: LD_ADDR_VAR 0 7
30382: PUSH
30383: LD_VAR 0 7
30387: PPUSH
30388: LD_VAR 0 7
30392: PUSH
30393: LD_INT 1
30395: PLUS
30396: PPUSH
30397: LD_VAR 0 9
30401: PUSH
30402: LD_VAR 0 10
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PPUSH
30411: CALL_OW 1
30415: ST_TO_ADDR
30416: GO 30432
// i := i - 1 ;
30418: LD_ADDR_VAR 0 5
30422: PUSH
30423: LD_VAR 0 5
30427: PUSH
30428: LD_INT 1
30430: MINUS
30431: ST_TO_ADDR
// end ;
30432: GO 30238
30434: POP
30435: POP
// for i in tmp do
30436: LD_ADDR_VAR 0 5
30440: PUSH
30441: LD_VAR 0 7
30445: PUSH
30446: FOR_IN
30447: IFFALSE 30485
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30449: LD_VAR 0 1
30453: PPUSH
30454: LD_VAR 0 5
30458: PUSH
30459: LD_INT 1
30461: ARRAY
30462: PPUSH
30463: LD_VAR 0 5
30467: PUSH
30468: LD_INT 2
30470: ARRAY
30471: PPUSH
30472: CALL 29427 0 3
30476: NOT
30477: IFFALSE 30483
// exit ;
30479: POP
30480: POP
30481: GO 30487
30483: GO 30446
30485: POP
30486: POP
// end ;
30487: LD_VAR 0 4
30491: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
// if not GetClass ( unit ) = class_sniper then
30501: LD_VAR 0 1
30505: PPUSH
30506: CALL_OW 257
30510: PUSH
30511: LD_INT 5
30513: EQUAL
30514: NOT
30515: IFFALSE 30519
// exit ;
30517: GO 30907
// dist := 8 ;
30519: LD_ADDR_VAR 0 5
30523: PUSH
30524: LD_INT 8
30526: ST_TO_ADDR
// viewRange := 12 ;
30527: LD_ADDR_VAR 0 7
30531: PUSH
30532: LD_INT 12
30534: ST_TO_ADDR
// side := GetSide ( unit ) ;
30535: LD_ADDR_VAR 0 6
30539: PUSH
30540: LD_VAR 0 1
30544: PPUSH
30545: CALL_OW 255
30549: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30550: LD_INT 61
30552: PPUSH
30553: LD_VAR 0 6
30557: PPUSH
30558: CALL_OW 321
30562: PUSH
30563: LD_INT 2
30565: EQUAL
30566: IFFALSE 30576
// viewRange := 16 ;
30568: LD_ADDR_VAR 0 7
30572: PUSH
30573: LD_INT 16
30575: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30576: LD_VAR 0 1
30580: PPUSH
30581: LD_VAR 0 2
30585: PPUSH
30586: LD_VAR 0 3
30590: PPUSH
30591: CALL_OW 297
30595: PUSH
30596: LD_VAR 0 5
30600: GREATER
30601: IFFALSE 30680
// begin ComMoveXY ( unit , x , y ) ;
30603: LD_VAR 0 1
30607: PPUSH
30608: LD_VAR 0 2
30612: PPUSH
30613: LD_VAR 0 3
30617: PPUSH
30618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30622: LD_INT 35
30624: PPUSH
30625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30629: LD_VAR 0 1
30633: PPUSH
30634: LD_VAR 0 2
30638: PPUSH
30639: LD_VAR 0 3
30643: PPUSH
30644: CALL 66455 0 3
30648: NOT
30649: IFFALSE 30653
// exit ;
30651: GO 30907
// until GetDistUnitXY ( unit , x , y ) < dist ;
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_VAR 0 2
30662: PPUSH
30663: LD_VAR 0 3
30667: PPUSH
30668: CALL_OW 297
30672: PUSH
30673: LD_VAR 0 5
30677: LESS
30678: IFFALSE 30622
// end ; ComTurnXY ( unit , x , y ) ;
30680: LD_VAR 0 1
30684: PPUSH
30685: LD_VAR 0 2
30689: PPUSH
30690: LD_VAR 0 3
30694: PPUSH
30695: CALL_OW 118
// wait ( 5 ) ;
30699: LD_INT 5
30701: PPUSH
30702: CALL_OW 67
// _d := GetDir ( unit ) ;
30706: LD_ADDR_VAR 0 10
30710: PUSH
30711: LD_VAR 0 1
30715: PPUSH
30716: CALL_OW 254
30720: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30721: LD_ADDR_VAR 0 8
30725: PUSH
30726: LD_VAR 0 1
30730: PPUSH
30731: CALL_OW 250
30735: PPUSH
30736: LD_VAR 0 10
30740: PPUSH
30741: LD_VAR 0 5
30745: PPUSH
30746: CALL_OW 272
30750: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30751: LD_ADDR_VAR 0 9
30755: PUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 251
30765: PPUSH
30766: LD_VAR 0 10
30770: PPUSH
30771: LD_VAR 0 5
30775: PPUSH
30776: CALL_OW 273
30780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30781: LD_VAR 0 8
30785: PPUSH
30786: LD_VAR 0 9
30790: PPUSH
30791: CALL_OW 488
30795: NOT
30796: IFFALSE 30800
// exit ;
30798: GO 30907
// ComAnimCustom ( unit , 1 ) ;
30800: LD_VAR 0 1
30804: PPUSH
30805: LD_INT 1
30807: PPUSH
30808: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30812: LD_VAR 0 8
30816: PPUSH
30817: LD_VAR 0 9
30821: PPUSH
30822: LD_VAR 0 6
30826: PPUSH
30827: LD_VAR 0 7
30831: PPUSH
30832: CALL_OW 330
// repeat wait ( 1 ) ;
30836: LD_INT 1
30838: PPUSH
30839: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 316
30852: PUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 314
30862: OR
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 302
30873: NOT
30874: OR
30875: PUSH
30876: LD_VAR 0 1
30880: PPUSH
30881: CALL_OW 301
30885: OR
30886: IFFALSE 30836
// RemoveSeeing ( _x , _y , side ) ;
30888: LD_VAR 0 8
30892: PPUSH
30893: LD_VAR 0 9
30897: PPUSH
30898: LD_VAR 0 6
30902: PPUSH
30903: CALL_OW 331
// end ; end_of_file
30907: LD_VAR 0 4
30911: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
// if exist_mode then
30916: LD_VAR 0 2
30920: IFFALSE 30945
// unit := CreateCharacter ( prefix & ident ) else
30922: LD_ADDR_VAR 0 5
30926: PUSH
30927: LD_VAR 0 3
30931: PUSH
30932: LD_VAR 0 1
30936: STR
30937: PPUSH
30938: CALL_OW 34
30942: ST_TO_ADDR
30943: GO 30960
// unit := NewCharacter ( ident ) ;
30945: LD_ADDR_VAR 0 5
30949: PUSH
30950: LD_VAR 0 1
30954: PPUSH
30955: CALL_OW 25
30959: ST_TO_ADDR
// result := unit ;
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_VAR 0 5
30969: ST_TO_ADDR
// end ;
30970: LD_VAR 0 4
30974: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30975: LD_INT 0
30977: PPUSH
30978: PPUSH
// if not side or not nation then
30979: LD_VAR 0 1
30983: NOT
30984: PUSH
30985: LD_VAR 0 2
30989: NOT
30990: OR
30991: IFFALSE 30995
// exit ;
30993: GO 31763
// case nation of nation_american :
30995: LD_VAR 0 2
30999: PUSH
31000: LD_INT 1
31002: DOUBLE
31003: EQUAL
31004: IFTRUE 31008
31006: GO 31222
31008: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31009: LD_ADDR_VAR 0 4
31013: PUSH
31014: LD_INT 35
31016: PUSH
31017: LD_INT 45
31019: PUSH
31020: LD_INT 46
31022: PUSH
31023: LD_INT 47
31025: PUSH
31026: LD_INT 82
31028: PUSH
31029: LD_INT 83
31031: PUSH
31032: LD_INT 84
31034: PUSH
31035: LD_INT 85
31037: PUSH
31038: LD_INT 86
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: LD_INT 6
31049: PUSH
31050: LD_INT 15
31052: PUSH
31053: LD_INT 16
31055: PUSH
31056: LD_INT 7
31058: PUSH
31059: LD_INT 12
31061: PUSH
31062: LD_INT 13
31064: PUSH
31065: LD_INT 10
31067: PUSH
31068: LD_INT 14
31070: PUSH
31071: LD_INT 20
31073: PUSH
31074: LD_INT 21
31076: PUSH
31077: LD_INT 22
31079: PUSH
31080: LD_INT 25
31082: PUSH
31083: LD_INT 32
31085: PUSH
31086: LD_INT 27
31088: PUSH
31089: LD_INT 36
31091: PUSH
31092: LD_INT 69
31094: PUSH
31095: LD_INT 39
31097: PUSH
31098: LD_INT 34
31100: PUSH
31101: LD_INT 40
31103: PUSH
31104: LD_INT 48
31106: PUSH
31107: LD_INT 49
31109: PUSH
31110: LD_INT 50
31112: PUSH
31113: LD_INT 51
31115: PUSH
31116: LD_INT 52
31118: PUSH
31119: LD_INT 53
31121: PUSH
31122: LD_INT 54
31124: PUSH
31125: LD_INT 55
31127: PUSH
31128: LD_INT 56
31130: PUSH
31131: LD_INT 57
31133: PUSH
31134: LD_INT 58
31136: PUSH
31137: LD_INT 59
31139: PUSH
31140: LD_INT 60
31142: PUSH
31143: LD_INT 61
31145: PUSH
31146: LD_INT 62
31148: PUSH
31149: LD_INT 80
31151: PUSH
31152: LD_INT 82
31154: PUSH
31155: LD_INT 83
31157: PUSH
31158: LD_INT 84
31160: PUSH
31161: LD_INT 85
31163: PUSH
31164: LD_INT 86
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: ST_TO_ADDR
31220: GO 31687
31222: LD_INT 2
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31456
31230: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31231: LD_ADDR_VAR 0 4
31235: PUSH
31236: LD_INT 35
31238: PUSH
31239: LD_INT 45
31241: PUSH
31242: LD_INT 46
31244: PUSH
31245: LD_INT 47
31247: PUSH
31248: LD_INT 82
31250: PUSH
31251: LD_INT 83
31253: PUSH
31254: LD_INT 84
31256: PUSH
31257: LD_INT 85
31259: PUSH
31260: LD_INT 87
31262: PUSH
31263: LD_INT 70
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 11
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: LD_INT 4
31277: PUSH
31278: LD_INT 5
31280: PUSH
31281: LD_INT 6
31283: PUSH
31284: LD_INT 15
31286: PUSH
31287: LD_INT 18
31289: PUSH
31290: LD_INT 7
31292: PUSH
31293: LD_INT 17
31295: PUSH
31296: LD_INT 8
31298: PUSH
31299: LD_INT 20
31301: PUSH
31302: LD_INT 21
31304: PUSH
31305: LD_INT 22
31307: PUSH
31308: LD_INT 72
31310: PUSH
31311: LD_INT 26
31313: PUSH
31314: LD_INT 69
31316: PUSH
31317: LD_INT 39
31319: PUSH
31320: LD_INT 40
31322: PUSH
31323: LD_INT 41
31325: PUSH
31326: LD_INT 42
31328: PUSH
31329: LD_INT 43
31331: PUSH
31332: LD_INT 48
31334: PUSH
31335: LD_INT 49
31337: PUSH
31338: LD_INT 50
31340: PUSH
31341: LD_INT 51
31343: PUSH
31344: LD_INT 52
31346: PUSH
31347: LD_INT 53
31349: PUSH
31350: LD_INT 54
31352: PUSH
31353: LD_INT 55
31355: PUSH
31356: LD_INT 56
31358: PUSH
31359: LD_INT 60
31361: PUSH
31362: LD_INT 61
31364: PUSH
31365: LD_INT 62
31367: PUSH
31368: LD_INT 66
31370: PUSH
31371: LD_INT 67
31373: PUSH
31374: LD_INT 68
31376: PUSH
31377: LD_INT 81
31379: PUSH
31380: LD_INT 82
31382: PUSH
31383: LD_INT 83
31385: PUSH
31386: LD_INT 84
31388: PUSH
31389: LD_INT 85
31391: PUSH
31392: LD_INT 87
31394: PUSH
31395: LD_INT 88
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: ST_TO_ADDR
31454: GO 31687
31456: LD_INT 3
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31686
31464: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31465: LD_ADDR_VAR 0 4
31469: PUSH
31470: LD_INT 46
31472: PUSH
31473: LD_INT 47
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 82
31484: PUSH
31485: LD_INT 83
31487: PUSH
31488: LD_INT 84
31490: PUSH
31491: LD_INT 85
31493: PUSH
31494: LD_INT 86
31496: PUSH
31497: LD_INT 11
31499: PUSH
31500: LD_INT 9
31502: PUSH
31503: LD_INT 20
31505: PUSH
31506: LD_INT 19
31508: PUSH
31509: LD_INT 21
31511: PUSH
31512: LD_INT 24
31514: PUSH
31515: LD_INT 22
31517: PUSH
31518: LD_INT 25
31520: PUSH
31521: LD_INT 28
31523: PUSH
31524: LD_INT 29
31526: PUSH
31527: LD_INT 30
31529: PUSH
31530: LD_INT 31
31532: PUSH
31533: LD_INT 37
31535: PUSH
31536: LD_INT 38
31538: PUSH
31539: LD_INT 32
31541: PUSH
31542: LD_INT 27
31544: PUSH
31545: LD_INT 33
31547: PUSH
31548: LD_INT 69
31550: PUSH
31551: LD_INT 39
31553: PUSH
31554: LD_INT 34
31556: PUSH
31557: LD_INT 40
31559: PUSH
31560: LD_INT 71
31562: PUSH
31563: LD_INT 23
31565: PUSH
31566: LD_INT 44
31568: PUSH
31569: LD_INT 48
31571: PUSH
31572: LD_INT 49
31574: PUSH
31575: LD_INT 50
31577: PUSH
31578: LD_INT 51
31580: PUSH
31581: LD_INT 52
31583: PUSH
31584: LD_INT 53
31586: PUSH
31587: LD_INT 54
31589: PUSH
31590: LD_INT 55
31592: PUSH
31593: LD_INT 56
31595: PUSH
31596: LD_INT 57
31598: PUSH
31599: LD_INT 58
31601: PUSH
31602: LD_INT 59
31604: PUSH
31605: LD_INT 63
31607: PUSH
31608: LD_INT 64
31610: PUSH
31611: LD_INT 65
31613: PUSH
31614: LD_INT 82
31616: PUSH
31617: LD_INT 83
31619: PUSH
31620: LD_INT 84
31622: PUSH
31623: LD_INT 85
31625: PUSH
31626: LD_INT 86
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
31684: GO 31687
31686: POP
// if state > - 1 and state < 3 then
31687: LD_VAR 0 3
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: GREATER
31696: PUSH
31697: LD_VAR 0 3
31701: PUSH
31702: LD_INT 3
31704: LESS
31705: AND
31706: IFFALSE 31763
// for i in result do
31708: LD_ADDR_VAR 0 5
31712: PUSH
31713: LD_VAR 0 4
31717: PUSH
31718: FOR_IN
31719: IFFALSE 31761
// if GetTech ( i , side ) <> state then
31721: LD_VAR 0 5
31725: PPUSH
31726: LD_VAR 0 1
31730: PPUSH
31731: CALL_OW 321
31735: PUSH
31736: LD_VAR 0 3
31740: NONEQUAL
31741: IFFALSE 31759
// result := result diff i ;
31743: LD_ADDR_VAR 0 4
31747: PUSH
31748: LD_VAR 0 4
31752: PUSH
31753: LD_VAR 0 5
31757: DIFF
31758: ST_TO_ADDR
31759: GO 31718
31761: POP
31762: POP
// end ;
31763: LD_VAR 0 4
31767: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31768: LD_INT 0
31770: PPUSH
31771: PPUSH
31772: PPUSH
// result := true ;
31773: LD_ADDR_VAR 0 3
31777: PUSH
31778: LD_INT 1
31780: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31781: LD_ADDR_VAR 0 5
31785: PUSH
31786: LD_VAR 0 2
31790: PPUSH
31791: CALL_OW 480
31795: ST_TO_ADDR
// if not tmp then
31796: LD_VAR 0 5
31800: NOT
31801: IFFALSE 31805
// exit ;
31803: GO 31854
// for i in tmp do
31805: LD_ADDR_VAR 0 4
31809: PUSH
31810: LD_VAR 0 5
31814: PUSH
31815: FOR_IN
31816: IFFALSE 31852
// if GetTech ( i , side ) <> state_researched then
31818: LD_VAR 0 4
31822: PPUSH
31823: LD_VAR 0 1
31827: PPUSH
31828: CALL_OW 321
31832: PUSH
31833: LD_INT 2
31835: NONEQUAL
31836: IFFALSE 31850
// begin result := false ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_INT 0
31845: ST_TO_ADDR
// exit ;
31846: POP
31847: POP
31848: GO 31854
// end ;
31850: GO 31815
31852: POP
31853: POP
// end ;
31854: LD_VAR 0 3
31858: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31859: LD_INT 0
31861: PPUSH
31862: PPUSH
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
31869: PPUSH
31870: PPUSH
31871: PPUSH
31872: PPUSH
31873: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31874: LD_VAR 0 1
31878: NOT
31879: PUSH
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 257
31889: PUSH
31890: LD_INT 9
31892: NONEQUAL
31893: OR
31894: IFFALSE 31898
// exit ;
31896: GO 32471
// side := GetSide ( unit ) ;
31898: LD_ADDR_VAR 0 9
31902: PUSH
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 255
31912: ST_TO_ADDR
// tech_space := tech_spacanom ;
31913: LD_ADDR_VAR 0 12
31917: PUSH
31918: LD_INT 29
31920: ST_TO_ADDR
// tech_time := tech_taurad ;
31921: LD_ADDR_VAR 0 13
31925: PUSH
31926: LD_INT 28
31928: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31929: LD_ADDR_VAR 0 11
31933: PUSH
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 310
31943: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31944: LD_VAR 0 11
31948: PPUSH
31949: CALL_OW 247
31953: PUSH
31954: LD_INT 2
31956: EQUAL
31957: IFFALSE 31961
// exit ;
31959: GO 32471
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31961: LD_ADDR_VAR 0 8
31965: PUSH
31966: LD_INT 81
31968: PUSH
31969: LD_VAR 0 9
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 3
31980: PUSH
31981: LD_INT 21
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PPUSH
31999: CALL_OW 69
32003: ST_TO_ADDR
// if not tmp then
32004: LD_VAR 0 8
32008: NOT
32009: IFFALSE 32013
// exit ;
32011: GO 32471
// if in_unit then
32013: LD_VAR 0 11
32017: IFFALSE 32041
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32019: LD_ADDR_VAR 0 10
32023: PUSH
32024: LD_VAR 0 8
32028: PPUSH
32029: LD_VAR 0 11
32033: PPUSH
32034: CALL_OW 74
32038: ST_TO_ADDR
32039: GO 32061
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32041: LD_ADDR_VAR 0 10
32045: PUSH
32046: LD_VAR 0 8
32050: PPUSH
32051: LD_VAR 0 1
32055: PPUSH
32056: CALL_OW 74
32060: ST_TO_ADDR
// if not enemy then
32061: LD_VAR 0 10
32065: NOT
32066: IFFALSE 32070
// exit ;
32068: GO 32471
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32070: LD_VAR 0 11
32074: PUSH
32075: LD_VAR 0 11
32079: PPUSH
32080: LD_VAR 0 10
32084: PPUSH
32085: CALL_OW 296
32089: PUSH
32090: LD_INT 13
32092: GREATER
32093: AND
32094: PUSH
32095: LD_VAR 0 1
32099: PPUSH
32100: LD_VAR 0 10
32104: PPUSH
32105: CALL_OW 296
32109: PUSH
32110: LD_INT 12
32112: GREATER
32113: OR
32114: IFFALSE 32118
// exit ;
32116: GO 32471
// missile := [ 1 ] ;
32118: LD_ADDR_VAR 0 14
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32129: LD_VAR 0 9
32133: PPUSH
32134: LD_VAR 0 12
32138: PPUSH
32139: CALL_OW 325
32143: IFFALSE 32172
// missile := Insert ( missile , missile + 1 , 2 ) ;
32145: LD_ADDR_VAR 0 14
32149: PUSH
32150: LD_VAR 0 14
32154: PPUSH
32155: LD_VAR 0 14
32159: PUSH
32160: LD_INT 1
32162: PLUS
32163: PPUSH
32164: LD_INT 2
32166: PPUSH
32167: CALL_OW 2
32171: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32172: LD_VAR 0 9
32176: PPUSH
32177: LD_VAR 0 13
32181: PPUSH
32182: CALL_OW 325
32186: PUSH
32187: LD_VAR 0 10
32191: PPUSH
32192: CALL_OW 255
32196: PPUSH
32197: LD_VAR 0 13
32201: PPUSH
32202: CALL_OW 325
32206: NOT
32207: AND
32208: IFFALSE 32237
// missile := Insert ( missile , missile + 1 , 3 ) ;
32210: LD_ADDR_VAR 0 14
32214: PUSH
32215: LD_VAR 0 14
32219: PPUSH
32220: LD_VAR 0 14
32224: PUSH
32225: LD_INT 1
32227: PLUS
32228: PPUSH
32229: LD_INT 3
32231: PPUSH
32232: CALL_OW 2
32236: ST_TO_ADDR
// if missile < 2 then
32237: LD_VAR 0 14
32241: PUSH
32242: LD_INT 2
32244: LESS
32245: IFFALSE 32249
// exit ;
32247: GO 32471
// x := GetX ( enemy ) ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_VAR 0 10
32258: PPUSH
32259: CALL_OW 250
32263: ST_TO_ADDR
// y := GetY ( enemy ) ;
32264: LD_ADDR_VAR 0 5
32268: PUSH
32269: LD_VAR 0 10
32273: PPUSH
32274: CALL_OW 251
32278: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32279: LD_ADDR_VAR 0 6
32283: PUSH
32284: LD_VAR 0 4
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PPUSH
32293: LD_INT 1
32295: PPUSH
32296: CALL_OW 12
32300: PLUS
32301: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32302: LD_ADDR_VAR 0 7
32306: PUSH
32307: LD_VAR 0 5
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PPUSH
32316: LD_INT 1
32318: PPUSH
32319: CALL_OW 12
32323: PLUS
32324: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32325: LD_VAR 0 6
32329: PPUSH
32330: LD_VAR 0 7
32334: PPUSH
32335: CALL_OW 488
32339: NOT
32340: IFFALSE 32362
// begin _x := x ;
32342: LD_ADDR_VAR 0 6
32346: PUSH
32347: LD_VAR 0 4
32351: ST_TO_ADDR
// _y := y ;
32352: LD_ADDR_VAR 0 7
32356: PUSH
32357: LD_VAR 0 5
32361: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 1
32369: PPUSH
32370: LD_VAR 0 14
32374: PPUSH
32375: CALL_OW 12
32379: ST_TO_ADDR
// case i of 1 :
32380: LD_VAR 0 3
32384: PUSH
32385: LD_INT 1
32387: DOUBLE
32388: EQUAL
32389: IFTRUE 32393
32391: GO 32410
32393: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32394: LD_VAR 0 1
32398: PPUSH
32399: LD_VAR 0 10
32403: PPUSH
32404: CALL_OW 115
32408: GO 32471
32410: LD_INT 2
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32440
32418: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32419: LD_VAR 0 1
32423: PPUSH
32424: LD_VAR 0 6
32428: PPUSH
32429: LD_VAR 0 7
32433: PPUSH
32434: CALL_OW 153
32438: GO 32471
32440: LD_INT 3
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32470
32448: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32449: LD_VAR 0 1
32453: PPUSH
32454: LD_VAR 0 6
32458: PPUSH
32459: LD_VAR 0 7
32463: PPUSH
32464: CALL_OW 154
32468: GO 32471
32470: POP
// end ;
32471: LD_VAR 0 2
32475: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32476: LD_INT 0
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
// if not unit or not building then
32484: LD_VAR 0 1
32488: NOT
32489: PUSH
32490: LD_VAR 0 2
32494: NOT
32495: OR
32496: IFFALSE 32500
// exit ;
32498: GO 32658
// x := GetX ( building ) ;
32500: LD_ADDR_VAR 0 5
32504: PUSH
32505: LD_VAR 0 2
32509: PPUSH
32510: CALL_OW 250
32514: ST_TO_ADDR
// y := GetY ( building ) ;
32515: LD_ADDR_VAR 0 6
32519: PUSH
32520: LD_VAR 0 2
32524: PPUSH
32525: CALL_OW 251
32529: ST_TO_ADDR
// for i = 0 to 5 do
32530: LD_ADDR_VAR 0 4
32534: PUSH
32535: DOUBLE
32536: LD_INT 0
32538: DEC
32539: ST_TO_ADDR
32540: LD_INT 5
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32656
// begin _x := ShiftX ( x , i , 3 ) ;
32546: LD_ADDR_VAR 0 7
32550: PUSH
32551: LD_VAR 0 5
32555: PPUSH
32556: LD_VAR 0 4
32560: PPUSH
32561: LD_INT 3
32563: PPUSH
32564: CALL_OW 272
32568: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32569: LD_ADDR_VAR 0 8
32573: PUSH
32574: LD_VAR 0 6
32578: PPUSH
32579: LD_VAR 0 4
32583: PPUSH
32584: LD_INT 3
32586: PPUSH
32587: CALL_OW 273
32591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32592: LD_VAR 0 7
32596: PPUSH
32597: LD_VAR 0 8
32601: PPUSH
32602: CALL_OW 488
32606: NOT
32607: IFFALSE 32611
// continue ;
32609: GO 32543
// if HexInfo ( _x , _y ) = 0 then
32611: LD_VAR 0 7
32615: PPUSH
32616: LD_VAR 0 8
32620: PPUSH
32621: CALL_OW 428
32625: PUSH
32626: LD_INT 0
32628: EQUAL
32629: IFFALSE 32654
// begin ComMoveXY ( unit , _x , _y ) ;
32631: LD_VAR 0 1
32635: PPUSH
32636: LD_VAR 0 7
32640: PPUSH
32641: LD_VAR 0 8
32645: PPUSH
32646: CALL_OW 111
// exit ;
32650: POP
32651: POP
32652: GO 32658
// end ; end ;
32654: GO 32543
32656: POP
32657: POP
// end ;
32658: LD_VAR 0 3
32662: RET
// export function ScanBase ( side , base_area ) ; begin
32663: LD_INT 0
32665: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32666: LD_ADDR_VAR 0 3
32670: PUSH
32671: LD_VAR 0 2
32675: PPUSH
32676: LD_INT 81
32678: PUSH
32679: LD_VAR 0 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PPUSH
32688: CALL_OW 70
32692: ST_TO_ADDR
// end ;
32693: LD_VAR 0 3
32697: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32698: LD_INT 0
32700: PPUSH
32701: PPUSH
32702: PPUSH
32703: PPUSH
// result := false ;
32704: LD_ADDR_VAR 0 2
32708: PUSH
32709: LD_INT 0
32711: ST_TO_ADDR
// side := GetSide ( unit ) ;
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL_OW 255
32726: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32727: LD_ADDR_VAR 0 4
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 248
32741: ST_TO_ADDR
// case nat of 1 :
32742: LD_VAR 0 4
32746: PUSH
32747: LD_INT 1
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32766
32755: POP
// tech := tech_lassight ; 2 :
32756: LD_ADDR_VAR 0 5
32760: PUSH
32761: LD_INT 12
32763: ST_TO_ADDR
32764: GO 32805
32766: LD_INT 2
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32785
32774: POP
// tech := tech_mortar ; 3 :
32775: LD_ADDR_VAR 0 5
32779: PUSH
32780: LD_INT 41
32782: ST_TO_ADDR
32783: GO 32805
32785: LD_INT 3
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 32804
32793: POP
// tech := tech_bazooka ; end ;
32794: LD_ADDR_VAR 0 5
32798: PUSH
32799: LD_INT 44
32801: ST_TO_ADDR
32802: GO 32805
32804: POP
// if Researched ( side , tech ) then
32805: LD_VAR 0 3
32809: PPUSH
32810: LD_VAR 0 5
32814: PPUSH
32815: CALL_OW 325
32819: IFFALSE 32846
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32821: LD_ADDR_VAR 0 2
32825: PUSH
32826: LD_INT 5
32828: PUSH
32829: LD_INT 8
32831: PUSH
32832: LD_INT 9
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: PUSH
32840: LD_VAR 0 4
32844: ARRAY
32845: ST_TO_ADDR
// end ;
32846: LD_VAR 0 2
32850: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
32855: PPUSH
// if not mines then
32856: LD_VAR 0 2
32860: NOT
32861: IFFALSE 32865
// exit ;
32863: GO 33009
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32865: LD_ADDR_VAR 0 5
32869: PUSH
32870: LD_INT 81
32872: PUSH
32873: LD_VAR 0 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 21
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PPUSH
32903: CALL_OW 69
32907: ST_TO_ADDR
// for i in mines do
32908: LD_ADDR_VAR 0 4
32912: PUSH
32913: LD_VAR 0 2
32917: PUSH
32918: FOR_IN
32919: IFFALSE 33007
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32921: LD_VAR 0 4
32925: PUSH
32926: LD_INT 1
32928: ARRAY
32929: PPUSH
32930: LD_VAR 0 4
32934: PUSH
32935: LD_INT 2
32937: ARRAY
32938: PPUSH
32939: CALL_OW 458
32943: NOT
32944: IFFALSE 32948
// continue ;
32946: GO 32918
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32948: LD_VAR 0 4
32952: PUSH
32953: LD_INT 1
32955: ARRAY
32956: PPUSH
32957: LD_VAR 0 4
32961: PUSH
32962: LD_INT 2
32964: ARRAY
32965: PPUSH
32966: CALL_OW 428
32970: PUSH
32971: LD_VAR 0 5
32975: IN
32976: IFFALSE 33005
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32978: LD_VAR 0 4
32982: PUSH
32983: LD_INT 1
32985: ARRAY
32986: PPUSH
32987: LD_VAR 0 4
32991: PUSH
32992: LD_INT 2
32994: ARRAY
32995: PPUSH
32996: LD_VAR 0 1
33000: PPUSH
33001: CALL_OW 456
// end ;
33005: GO 32918
33007: POP
33008: POP
// end ;
33009: LD_VAR 0 3
33013: RET
// export function Count ( array ) ; var i ; begin
33014: LD_INT 0
33016: PPUSH
33017: PPUSH
// result := 0 ;
33018: LD_ADDR_VAR 0 2
33022: PUSH
33023: LD_INT 0
33025: ST_TO_ADDR
// for i in array do
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_VAR 0 1
33035: PUSH
33036: FOR_IN
33037: IFFALSE 33061
// if i then
33039: LD_VAR 0 3
33043: IFFALSE 33059
// result := result + 1 ;
33045: LD_ADDR_VAR 0 2
33049: PUSH
33050: LD_VAR 0 2
33054: PUSH
33055: LD_INT 1
33057: PLUS
33058: ST_TO_ADDR
33059: GO 33036
33061: POP
33062: POP
// end ;
33063: LD_VAR 0 2
33067: RET
// export function IsEmpty ( building ) ; begin
33068: LD_INT 0
33070: PPUSH
// if not building then
33071: LD_VAR 0 1
33075: NOT
33076: IFFALSE 33080
// exit ;
33078: GO 33123
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33080: LD_ADDR_VAR 0 2
33084: PUSH
33085: LD_VAR 0 1
33089: PUSH
33090: LD_INT 22
33092: PUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: CALL_OW 255
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 58
33109: PUSH
33110: EMPTY
33111: LIST
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PPUSH
33117: CALL_OW 69
33121: IN
33122: ST_TO_ADDR
// end ;
33123: LD_VAR 0 2
33127: RET
// export function IsNotFull ( building ) ; begin
33128: LD_INT 0
33130: PPUSH
// if not building then
33131: LD_VAR 0 1
33135: NOT
33136: IFFALSE 33140
// exit ;
33138: GO 33159
// result := UnitsInside ( building ) < 6 ;
33140: LD_ADDR_VAR 0 2
33144: PUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 313
33154: PUSH
33155: LD_INT 6
33157: LESS
33158: ST_TO_ADDR
// end ;
33159: LD_VAR 0 2
33163: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
33168: PPUSH
33169: PPUSH
// tmp := [ ] ;
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: EMPTY
33176: ST_TO_ADDR
// list := [ ] ;
33177: LD_ADDR_VAR 0 5
33181: PUSH
33182: EMPTY
33183: ST_TO_ADDR
// for i = 16 to 25 do
33184: LD_ADDR_VAR 0 4
33188: PUSH
33189: DOUBLE
33190: LD_INT 16
33192: DEC
33193: ST_TO_ADDR
33194: LD_INT 25
33196: PUSH
33197: FOR_TO
33198: IFFALSE 33271
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33200: LD_ADDR_VAR 0 3
33204: PUSH
33205: LD_VAR 0 3
33209: PUSH
33210: LD_INT 22
33212: PUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL_OW 255
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 91
33229: PUSH
33230: LD_VAR 0 1
33234: PUSH
33235: LD_INT 6
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 30
33245: PUSH
33246: LD_VAR 0 4
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: PPUSH
33263: CALL_OW 69
33267: ADD
33268: ST_TO_ADDR
33269: GO 33197
33271: POP
33272: POP
// for i = 1 to tmp do
33273: LD_ADDR_VAR 0 4
33277: PUSH
33278: DOUBLE
33279: LD_INT 1
33281: DEC
33282: ST_TO_ADDR
33283: LD_VAR 0 3
33287: PUSH
33288: FOR_TO
33289: IFFALSE 33377
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33291: LD_ADDR_VAR 0 5
33295: PUSH
33296: LD_VAR 0 5
33300: PUSH
33301: LD_VAR 0 3
33305: PUSH
33306: LD_VAR 0 4
33310: ARRAY
33311: PPUSH
33312: CALL_OW 266
33316: PUSH
33317: LD_VAR 0 3
33321: PUSH
33322: LD_VAR 0 4
33326: ARRAY
33327: PPUSH
33328: CALL_OW 250
33332: PUSH
33333: LD_VAR 0 3
33337: PUSH
33338: LD_VAR 0 4
33342: ARRAY
33343: PPUSH
33344: CALL_OW 251
33348: PUSH
33349: LD_VAR 0 3
33353: PUSH
33354: LD_VAR 0 4
33358: ARRAY
33359: PPUSH
33360: CALL_OW 254
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: ADD
33374: ST_TO_ADDR
33375: GO 33288
33377: POP
33378: POP
// result := list ;
33379: LD_ADDR_VAR 0 2
33383: PUSH
33384: LD_VAR 0 5
33388: ST_TO_ADDR
// end ;
33389: LD_VAR 0 2
33393: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
// if not factory then
33403: LD_VAR 0 1
33407: NOT
33408: IFFALSE 33412
// exit ;
33410: GO 34005
// if control = control_apeman then
33412: LD_VAR 0 4
33416: PUSH
33417: LD_INT 5
33419: EQUAL
33420: IFFALSE 33529
// begin tmp := UnitsInside ( factory ) ;
33422: LD_ADDR_VAR 0 8
33426: PUSH
33427: LD_VAR 0 1
33431: PPUSH
33432: CALL_OW 313
33436: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33437: LD_VAR 0 8
33441: PPUSH
33442: LD_INT 25
33444: PUSH
33445: LD_INT 12
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PPUSH
33452: CALL_OW 72
33456: NOT
33457: IFFALSE 33467
// control := control_manual ;
33459: LD_ADDR_VAR 0 4
33463: PUSH
33464: LD_INT 1
33466: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33467: LD_ADDR_VAR 0 8
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL 33164 0 1
33481: ST_TO_ADDR
// if tmp then
33482: LD_VAR 0 8
33486: IFFALSE 33529
// begin for i in tmp do
33488: LD_ADDR_VAR 0 7
33492: PUSH
33493: LD_VAR 0 8
33497: PUSH
33498: FOR_IN
33499: IFFALSE 33527
// if i [ 1 ] = b_ext_radio then
33501: LD_VAR 0 7
33505: PUSH
33506: LD_INT 1
33508: ARRAY
33509: PUSH
33510: LD_INT 22
33512: EQUAL
33513: IFFALSE 33525
// begin control := control_remote ;
33515: LD_ADDR_VAR 0 4
33519: PUSH
33520: LD_INT 2
33522: ST_TO_ADDR
// break ;
33523: GO 33527
// end ;
33525: GO 33498
33527: POP
33528: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33529: LD_VAR 0 1
33533: PPUSH
33534: LD_VAR 0 2
33538: PPUSH
33539: LD_VAR 0 3
33543: PPUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: LD_VAR 0 5
33553: PPUSH
33554: CALL_OW 448
33558: IFFALSE 33593
// begin result := [ chassis , engine , control , weapon ] ;
33560: LD_ADDR_VAR 0 6
33564: PUSH
33565: LD_VAR 0 2
33569: PUSH
33570: LD_VAR 0 3
33574: PUSH
33575: LD_VAR 0 4
33579: PUSH
33580: LD_VAR 0 5
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: ST_TO_ADDR
// exit ;
33591: GO 34005
// end ; _chassis := AvailableChassisList ( factory ) ;
33593: LD_ADDR_VAR 0 9
33597: PUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL_OW 475
33607: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33608: LD_ADDR_VAR 0 11
33612: PUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: CALL_OW 476
33622: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33623: LD_ADDR_VAR 0 12
33627: PUSH
33628: LD_VAR 0 1
33632: PPUSH
33633: CALL_OW 477
33637: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33638: LD_ADDR_VAR 0 10
33642: PUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 478
33652: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33653: LD_VAR 0 9
33657: NOT
33658: PUSH
33659: LD_VAR 0 11
33663: NOT
33664: OR
33665: PUSH
33666: LD_VAR 0 12
33670: NOT
33671: OR
33672: PUSH
33673: LD_VAR 0 10
33677: NOT
33678: OR
33679: IFFALSE 33714
// begin result := [ chassis , engine , control , weapon ] ;
33681: LD_ADDR_VAR 0 6
33685: PUSH
33686: LD_VAR 0 2
33690: PUSH
33691: LD_VAR 0 3
33695: PUSH
33696: LD_VAR 0 4
33700: PUSH
33701: LD_VAR 0 5
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: ST_TO_ADDR
// exit ;
33712: GO 34005
// end ; if not chassis in _chassis then
33714: LD_VAR 0 2
33718: PUSH
33719: LD_VAR 0 9
33723: IN
33724: NOT
33725: IFFALSE 33751
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33727: LD_ADDR_VAR 0 2
33731: PUSH
33732: LD_VAR 0 9
33736: PUSH
33737: LD_INT 1
33739: PPUSH
33740: LD_VAR 0 9
33744: PPUSH
33745: CALL_OW 12
33749: ARRAY
33750: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33751: LD_VAR 0 2
33755: PPUSH
33756: LD_VAR 0 3
33760: PPUSH
33761: CALL 34010 0 2
33765: NOT
33766: IFFALSE 33825
// repeat engine := _engine [ 1 ] ;
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_VAR 0 11
33777: PUSH
33778: LD_INT 1
33780: ARRAY
33781: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33782: LD_ADDR_VAR 0 11
33786: PUSH
33787: LD_VAR 0 11
33791: PPUSH
33792: LD_INT 1
33794: PPUSH
33795: CALL_OW 3
33799: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33800: LD_VAR 0 2
33804: PPUSH
33805: LD_VAR 0 3
33809: PPUSH
33810: CALL 34010 0 2
33814: PUSH
33815: LD_VAR 0 11
33819: PUSH
33820: EMPTY
33821: EQUAL
33822: OR
33823: IFFALSE 33768
// if not control in _control then
33825: LD_VAR 0 4
33829: PUSH
33830: LD_VAR 0 12
33834: IN
33835: NOT
33836: IFFALSE 33862
// control := _control [ rand ( 1 , _control ) ] ;
33838: LD_ADDR_VAR 0 4
33842: PUSH
33843: LD_VAR 0 12
33847: PUSH
33848: LD_INT 1
33850: PPUSH
33851: LD_VAR 0 12
33855: PPUSH
33856: CALL_OW 12
33860: ARRAY
33861: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33862: LD_VAR 0 2
33866: PPUSH
33867: LD_VAR 0 5
33871: PPUSH
33872: CALL 34230 0 2
33876: NOT
33877: IFFALSE 33936
// repeat weapon := _weapon [ 1 ] ;
33879: LD_ADDR_VAR 0 5
33883: PUSH
33884: LD_VAR 0 10
33888: PUSH
33889: LD_INT 1
33891: ARRAY
33892: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33893: LD_ADDR_VAR 0 10
33897: PUSH
33898: LD_VAR 0 10
33902: PPUSH
33903: LD_INT 1
33905: PPUSH
33906: CALL_OW 3
33910: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33911: LD_VAR 0 2
33915: PPUSH
33916: LD_VAR 0 5
33920: PPUSH
33921: CALL 34230 0 2
33925: PUSH
33926: LD_VAR 0 10
33930: PUSH
33931: EMPTY
33932: EQUAL
33933: OR
33934: IFFALSE 33879
// result := [ ] ;
33936: LD_ADDR_VAR 0 6
33940: PUSH
33941: EMPTY
33942: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33943: LD_VAR 0 1
33947: PPUSH
33948: LD_VAR 0 2
33952: PPUSH
33953: LD_VAR 0 3
33957: PPUSH
33958: LD_VAR 0 4
33962: PPUSH
33963: LD_VAR 0 5
33967: PPUSH
33968: CALL_OW 448
33972: IFFALSE 34005
// result := [ chassis , engine , control , weapon ] ;
33974: LD_ADDR_VAR 0 6
33978: PUSH
33979: LD_VAR 0 2
33983: PUSH
33984: LD_VAR 0 3
33988: PUSH
33989: LD_VAR 0 4
33993: PUSH
33994: LD_VAR 0 5
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
// end ;
34005: LD_VAR 0 6
34009: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34010: LD_INT 0
34012: PPUSH
// if not chassis or not engine then
34013: LD_VAR 0 1
34017: NOT
34018: PUSH
34019: LD_VAR 0 2
34023: NOT
34024: OR
34025: IFFALSE 34029
// exit ;
34027: GO 34225
// case engine of engine_solar :
34029: LD_VAR 0 2
34033: PUSH
34034: LD_INT 2
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34042
34040: GO 34080
34042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34043: LD_ADDR_VAR 0 3
34047: PUSH
34048: LD_INT 11
34050: PUSH
34051: LD_INT 12
34053: PUSH
34054: LD_INT 13
34056: PUSH
34057: LD_INT 14
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 3
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
34078: GO 34209
34080: LD_INT 1
34082: DOUBLE
34083: EQUAL
34084: IFTRUE 34088
34086: GO 34150
34088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34089: LD_ADDR_VAR 0 3
34093: PUSH
34094: LD_INT 11
34096: PUSH
34097: LD_INT 12
34099: PUSH
34100: LD_INT 13
34102: PUSH
34103: LD_INT 14
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 4
34117: PUSH
34118: LD_INT 5
34120: PUSH
34121: LD_INT 21
34123: PUSH
34124: LD_INT 23
34126: PUSH
34127: LD_INT 22
34129: PUSH
34130: LD_INT 24
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
34148: GO 34209
34150: LD_INT 3
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34208
34158: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 13
34166: PUSH
34167: LD_INT 14
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: LD_INT 4
34178: PUSH
34179: LD_INT 5
34181: PUSH
34182: LD_INT 21
34184: PUSH
34185: LD_INT 22
34187: PUSH
34188: LD_INT 23
34190: PUSH
34191: LD_INT 24
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: ST_TO_ADDR
34206: GO 34209
34208: POP
// result := ( chassis in result ) ;
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_VAR 0 1
34218: PUSH
34219: LD_VAR 0 3
34223: IN
34224: ST_TO_ADDR
// end ;
34225: LD_VAR 0 3
34229: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34230: LD_INT 0
34232: PPUSH
// if not chassis or not weapon then
34233: LD_VAR 0 1
34237: NOT
34238: PUSH
34239: LD_VAR 0 2
34243: NOT
34244: OR
34245: IFFALSE 34249
// exit ;
34247: GO 35311
// case weapon of us_machine_gun :
34249: LD_VAR 0 2
34253: PUSH
34254: LD_INT 2
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 34292
34262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34263: LD_ADDR_VAR 0 3
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 4
34279: PUSH
34280: LD_INT 5
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: ST_TO_ADDR
34290: GO 35295
34292: LD_INT 3
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34330
34300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: LD_INT 5
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
34328: GO 35295
34330: LD_INT 11
34332: DOUBLE
34333: EQUAL
34334: IFTRUE 34338
34336: GO 34368
34338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34339: LD_ADDR_VAR 0 3
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: LD_INT 4
34355: PUSH
34356: LD_INT 5
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
34366: GO 35295
34368: LD_INT 4
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34376
34374: GO 34402
34376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 3
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: LD_INT 5
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
34400: GO 35295
34402: LD_INT 5
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34436
34410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34411: LD_ADDR_VAR 0 3
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 5
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: ST_TO_ADDR
34434: GO 35295
34436: LD_INT 9
34438: DOUBLE
34439: EQUAL
34440: IFTRUE 34444
34442: GO 34470
34444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34445: LD_ADDR_VAR 0 3
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: ST_TO_ADDR
34468: GO 35295
34470: LD_INT 7
34472: DOUBLE
34473: EQUAL
34474: IFTRUE 34478
34476: GO 34504
34478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34479: LD_ADDR_VAR 0 3
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: LD_INT 3
34489: PUSH
34490: LD_INT 4
34492: PUSH
34493: LD_INT 5
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: ST_TO_ADDR
34502: GO 35295
34504: LD_INT 12
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34512
34510: GO 34538
34512: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 4
34526: PUSH
34527: LD_INT 5
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: ST_TO_ADDR
34536: GO 35295
34538: LD_INT 13
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34546
34544: GO 34572
34546: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 4
34560: PUSH
34561: LD_INT 5
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
34570: GO 35295
34572: LD_INT 14
34574: DOUBLE
34575: EQUAL
34576: IFTRUE 34580
34578: GO 34598
34580: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34581: LD_ADDR_VAR 0 3
34585: PUSH
34586: LD_INT 4
34588: PUSH
34589: LD_INT 5
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: ST_TO_ADDR
34596: GO 35295
34598: LD_INT 6
34600: DOUBLE
34601: EQUAL
34602: IFTRUE 34606
34604: GO 34624
34606: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34607: LD_ADDR_VAR 0 3
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 5
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: ST_TO_ADDR
34622: GO 35295
34624: LD_INT 10
34626: DOUBLE
34627: EQUAL
34628: IFTRUE 34632
34630: GO 34650
34632: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34633: LD_ADDR_VAR 0 3
34637: PUSH
34638: LD_INT 4
34640: PUSH
34641: LD_INT 5
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: ST_TO_ADDR
34648: GO 35295
34650: LD_INT 22
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 34684
34658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34659: LD_ADDR_VAR 0 3
34663: PUSH
34664: LD_INT 11
34666: PUSH
34667: LD_INT 12
34669: PUSH
34670: LD_INT 13
34672: PUSH
34673: LD_INT 14
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: ST_TO_ADDR
34682: GO 35295
34684: LD_INT 23
34686: DOUBLE
34687: EQUAL
34688: IFTRUE 34692
34690: GO 34718
34692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34693: LD_ADDR_VAR 0 3
34697: PUSH
34698: LD_INT 11
34700: PUSH
34701: LD_INT 12
34703: PUSH
34704: LD_INT 13
34706: PUSH
34707: LD_INT 14
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
34716: GO 35295
34718: LD_INT 24
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34752
34726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_INT 11
34734: PUSH
34735: LD_INT 12
34737: PUSH
34738: LD_INT 13
34740: PUSH
34741: LD_INT 14
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
34750: GO 35295
34752: LD_INT 30
34754: DOUBLE
34755: EQUAL
34756: IFTRUE 34760
34758: GO 34786
34760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_INT 11
34768: PUSH
34769: LD_INT 12
34771: PUSH
34772: LD_INT 13
34774: PUSH
34775: LD_INT 14
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: ST_TO_ADDR
34784: GO 35295
34786: LD_INT 25
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34794
34792: GO 34812
34794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34795: LD_ADDR_VAR 0 3
34799: PUSH
34800: LD_INT 13
34802: PUSH
34803: LD_INT 14
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: ST_TO_ADDR
34810: GO 35295
34812: LD_INT 27
34814: DOUBLE
34815: EQUAL
34816: IFTRUE 34820
34818: GO 34838
34820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_INT 13
34828: PUSH
34829: LD_INT 14
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: ST_TO_ADDR
34836: GO 35295
34838: LD_EXP 48
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34848
34846: GO 34874
34848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34849: LD_ADDR_VAR 0 3
34853: PUSH
34854: LD_INT 11
34856: PUSH
34857: LD_INT 12
34859: PUSH
34860: LD_INT 13
34862: PUSH
34863: LD_INT 14
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
34872: GO 35295
34874: LD_INT 28
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34882
34880: GO 34900
34882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_INT 13
34890: PUSH
34891: LD_INT 14
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: ST_TO_ADDR
34898: GO 35295
34900: LD_INT 29
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34926
34908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34909: LD_ADDR_VAR 0 3
34913: PUSH
34914: LD_INT 13
34916: PUSH
34917: LD_INT 14
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: ST_TO_ADDR
34924: GO 35295
34926: LD_INT 31
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34952
34934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34935: LD_ADDR_VAR 0 3
34939: PUSH
34940: LD_INT 13
34942: PUSH
34943: LD_INT 14
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: ST_TO_ADDR
34950: GO 35295
34952: LD_INT 26
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34978
34960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34961: LD_ADDR_VAR 0 3
34965: PUSH
34966: LD_INT 13
34968: PUSH
34969: LD_INT 14
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: ST_TO_ADDR
34976: GO 35295
34978: LD_INT 42
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35012
34986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_INT 21
34994: PUSH
34995: LD_INT 22
34997: PUSH
34998: LD_INT 23
35000: PUSH
35001: LD_INT 24
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
35010: GO 35295
35012: LD_INT 43
35014: DOUBLE
35015: EQUAL
35016: IFTRUE 35020
35018: GO 35046
35020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 21
35028: PUSH
35029: LD_INT 22
35031: PUSH
35032: LD_INT 23
35034: PUSH
35035: LD_INT 24
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: ST_TO_ADDR
35044: GO 35295
35046: LD_INT 44
35048: DOUBLE
35049: EQUAL
35050: IFTRUE 35054
35052: GO 35080
35054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35055: LD_ADDR_VAR 0 3
35059: PUSH
35060: LD_INT 21
35062: PUSH
35063: LD_INT 22
35065: PUSH
35066: LD_INT 23
35068: PUSH
35069: LD_INT 24
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
35078: GO 35295
35080: LD_INT 45
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35088
35086: GO 35114
35088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_INT 21
35096: PUSH
35097: LD_INT 22
35099: PUSH
35100: LD_INT 23
35102: PUSH
35103: LD_INT 24
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: ST_TO_ADDR
35112: GO 35295
35114: LD_INT 49
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35148
35122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35123: LD_ADDR_VAR 0 3
35127: PUSH
35128: LD_INT 21
35130: PUSH
35131: LD_INT 22
35133: PUSH
35134: LD_INT 23
35136: PUSH
35137: LD_INT 24
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: ST_TO_ADDR
35146: GO 35295
35148: LD_INT 51
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35182
35156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35157: LD_ADDR_VAR 0 3
35161: PUSH
35162: LD_INT 21
35164: PUSH
35165: LD_INT 22
35167: PUSH
35168: LD_INT 23
35170: PUSH
35171: LD_INT 24
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: ST_TO_ADDR
35180: GO 35295
35182: LD_INT 52
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35190
35188: GO 35216
35190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35191: LD_ADDR_VAR 0 3
35195: PUSH
35196: LD_INT 21
35198: PUSH
35199: LD_INT 22
35201: PUSH
35202: LD_INT 23
35204: PUSH
35205: LD_INT 24
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: ST_TO_ADDR
35214: GO 35295
35216: LD_INT 53
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35224
35222: GO 35242
35224: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_INT 23
35232: PUSH
35233: LD_INT 24
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: ST_TO_ADDR
35240: GO 35295
35242: LD_INT 46
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35268
35250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 23
35258: PUSH
35259: LD_INT 24
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: ST_TO_ADDR
35266: GO 35295
35268: LD_INT 47
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35294
35276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 23
35284: PUSH
35285: LD_INT 24
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: ST_TO_ADDR
35292: GO 35295
35294: POP
// result := ( chassis in result ) ;
35295: LD_ADDR_VAR 0 3
35299: PUSH
35300: LD_VAR 0 1
35304: PUSH
35305: LD_VAR 0 3
35309: IN
35310: ST_TO_ADDR
// end ;
35311: LD_VAR 0 3
35315: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35316: LD_INT 0
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
35322: PPUSH
35323: PPUSH
35324: PPUSH
// result := array ;
35325: LD_ADDR_VAR 0 5
35329: PUSH
35330: LD_VAR 0 1
35334: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35335: LD_VAR 0 1
35339: NOT
35340: PUSH
35341: LD_VAR 0 2
35345: NOT
35346: OR
35347: PUSH
35348: LD_VAR 0 3
35352: NOT
35353: OR
35354: PUSH
35355: LD_VAR 0 2
35359: PUSH
35360: LD_VAR 0 1
35364: GREATER
35365: OR
35366: PUSH
35367: LD_VAR 0 3
35371: PUSH
35372: LD_VAR 0 1
35376: GREATER
35377: OR
35378: IFFALSE 35382
// exit ;
35380: GO 35678
// if direction then
35382: LD_VAR 0 4
35386: IFFALSE 35450
// begin d := 1 ;
35388: LD_ADDR_VAR 0 9
35392: PUSH
35393: LD_INT 1
35395: ST_TO_ADDR
// if i_from > i_to then
35396: LD_VAR 0 2
35400: PUSH
35401: LD_VAR 0 3
35405: GREATER
35406: IFFALSE 35432
// length := ( array - i_from ) + i_to else
35408: LD_ADDR_VAR 0 11
35412: PUSH
35413: LD_VAR 0 1
35417: PUSH
35418: LD_VAR 0 2
35422: MINUS
35423: PUSH
35424: LD_VAR 0 3
35428: PLUS
35429: ST_TO_ADDR
35430: GO 35448
// length := i_to - i_from ;
35432: LD_ADDR_VAR 0 11
35436: PUSH
35437: LD_VAR 0 3
35441: PUSH
35442: LD_VAR 0 2
35446: MINUS
35447: ST_TO_ADDR
// end else
35448: GO 35511
// begin d := - 1 ;
35450: LD_ADDR_VAR 0 9
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: ST_TO_ADDR
// if i_from > i_to then
35459: LD_VAR 0 2
35463: PUSH
35464: LD_VAR 0 3
35468: GREATER
35469: IFFALSE 35489
// length := i_from - i_to else
35471: LD_ADDR_VAR 0 11
35475: PUSH
35476: LD_VAR 0 2
35480: PUSH
35481: LD_VAR 0 3
35485: MINUS
35486: ST_TO_ADDR
35487: GO 35511
// length := ( array - i_to ) + i_from ;
35489: LD_ADDR_VAR 0 11
35493: PUSH
35494: LD_VAR 0 1
35498: PUSH
35499: LD_VAR 0 3
35503: MINUS
35504: PUSH
35505: LD_VAR 0 2
35509: PLUS
35510: ST_TO_ADDR
// end ; if not length then
35511: LD_VAR 0 11
35515: NOT
35516: IFFALSE 35520
// exit ;
35518: GO 35678
// tmp := array ;
35520: LD_ADDR_VAR 0 10
35524: PUSH
35525: LD_VAR 0 1
35529: ST_TO_ADDR
// for i = 1 to length do
35530: LD_ADDR_VAR 0 6
35534: PUSH
35535: DOUBLE
35536: LD_INT 1
35538: DEC
35539: ST_TO_ADDR
35540: LD_VAR 0 11
35544: PUSH
35545: FOR_TO
35546: IFFALSE 35666
// begin for j = 1 to array do
35548: LD_ADDR_VAR 0 7
35552: PUSH
35553: DOUBLE
35554: LD_INT 1
35556: DEC
35557: ST_TO_ADDR
35558: LD_VAR 0 1
35562: PUSH
35563: FOR_TO
35564: IFFALSE 35652
// begin k := j + d ;
35566: LD_ADDR_VAR 0 8
35570: PUSH
35571: LD_VAR 0 7
35575: PUSH
35576: LD_VAR 0 9
35580: PLUS
35581: ST_TO_ADDR
// if k > array then
35582: LD_VAR 0 8
35586: PUSH
35587: LD_VAR 0 1
35591: GREATER
35592: IFFALSE 35602
// k := 1 ;
35594: LD_ADDR_VAR 0 8
35598: PUSH
35599: LD_INT 1
35601: ST_TO_ADDR
// if not k then
35602: LD_VAR 0 8
35606: NOT
35607: IFFALSE 35619
// k := array ;
35609: LD_ADDR_VAR 0 8
35613: PUSH
35614: LD_VAR 0 1
35618: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35619: LD_ADDR_VAR 0 10
35623: PUSH
35624: LD_VAR 0 10
35628: PPUSH
35629: LD_VAR 0 8
35633: PPUSH
35634: LD_VAR 0 1
35638: PUSH
35639: LD_VAR 0 7
35643: ARRAY
35644: PPUSH
35645: CALL_OW 1
35649: ST_TO_ADDR
// end ;
35650: GO 35563
35652: POP
35653: POP
// array := tmp ;
35654: LD_ADDR_VAR 0 1
35658: PUSH
35659: LD_VAR 0 10
35663: ST_TO_ADDR
// end ;
35664: GO 35545
35666: POP
35667: POP
// result := array ;
35668: LD_ADDR_VAR 0 5
35672: PUSH
35673: LD_VAR 0 1
35677: ST_TO_ADDR
// end ;
35678: LD_VAR 0 5
35682: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35683: LD_INT 0
35685: PPUSH
35686: PPUSH
// result := 0 ;
35687: LD_ADDR_VAR 0 3
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// if not array or not value in array then
35695: LD_VAR 0 1
35699: NOT
35700: PUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_VAR 0 1
35710: IN
35711: NOT
35712: OR
35713: IFFALSE 35717
// exit ;
35715: GO 35771
// for i = 1 to array do
35717: LD_ADDR_VAR 0 4
35721: PUSH
35722: DOUBLE
35723: LD_INT 1
35725: DEC
35726: ST_TO_ADDR
35727: LD_VAR 0 1
35731: PUSH
35732: FOR_TO
35733: IFFALSE 35769
// if value = array [ i ] then
35735: LD_VAR 0 2
35739: PUSH
35740: LD_VAR 0 1
35744: PUSH
35745: LD_VAR 0 4
35749: ARRAY
35750: EQUAL
35751: IFFALSE 35767
// begin result := i ;
35753: LD_ADDR_VAR 0 3
35757: PUSH
35758: LD_VAR 0 4
35762: ST_TO_ADDR
// exit ;
35763: POP
35764: POP
35765: GO 35771
// end ;
35767: GO 35732
35769: POP
35770: POP
// end ;
35771: LD_VAR 0 3
35775: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35776: LD_INT 0
35778: PPUSH
// vc_chassis := chassis ;
35779: LD_ADDR_OWVAR 37
35783: PUSH
35784: LD_VAR 0 1
35788: ST_TO_ADDR
// vc_engine := engine ;
35789: LD_ADDR_OWVAR 39
35793: PUSH
35794: LD_VAR 0 2
35798: ST_TO_ADDR
// vc_control := control ;
35799: LD_ADDR_OWVAR 38
35803: PUSH
35804: LD_VAR 0 3
35808: ST_TO_ADDR
// vc_weapon := weapon ;
35809: LD_ADDR_OWVAR 40
35813: PUSH
35814: LD_VAR 0 4
35818: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35819: LD_ADDR_OWVAR 41
35823: PUSH
35824: LD_VAR 0 5
35828: ST_TO_ADDR
// end ;
35829: LD_VAR 0 6
35833: RET
// export function WantPlant ( unit ) ; var task ; begin
35834: LD_INT 0
35836: PPUSH
35837: PPUSH
// result := false ;
35838: LD_ADDR_VAR 0 2
35842: PUSH
35843: LD_INT 0
35845: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35846: LD_ADDR_VAR 0 3
35850: PUSH
35851: LD_VAR 0 1
35855: PPUSH
35856: CALL_OW 437
35860: ST_TO_ADDR
// if task then
35861: LD_VAR 0 3
35865: IFFALSE 35893
// if task [ 1 ] [ 1 ] = p then
35867: LD_VAR 0 3
35871: PUSH
35872: LD_INT 1
35874: ARRAY
35875: PUSH
35876: LD_INT 1
35878: ARRAY
35879: PUSH
35880: LD_STRING p
35882: EQUAL
35883: IFFALSE 35893
// result := true ;
35885: LD_ADDR_VAR 0 2
35889: PUSH
35890: LD_INT 1
35892: ST_TO_ADDR
// end ;
35893: LD_VAR 0 2
35897: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35898: LD_INT 0
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
// if pos < 1 then
35904: LD_VAR 0 2
35908: PUSH
35909: LD_INT 1
35911: LESS
35912: IFFALSE 35916
// exit ;
35914: GO 36219
// if pos = 1 then
35916: LD_VAR 0 2
35920: PUSH
35921: LD_INT 1
35923: EQUAL
35924: IFFALSE 35957
// result := Replace ( arr , pos [ 1 ] , value ) else
35926: LD_ADDR_VAR 0 4
35930: PUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: LD_VAR 0 2
35940: PUSH
35941: LD_INT 1
35943: ARRAY
35944: PPUSH
35945: LD_VAR 0 3
35949: PPUSH
35950: CALL_OW 1
35954: ST_TO_ADDR
35955: GO 36219
// begin tmp := arr ;
35957: LD_ADDR_VAR 0 6
35961: PUSH
35962: LD_VAR 0 1
35966: ST_TO_ADDR
// s_arr := [ tmp ] ;
35967: LD_ADDR_VAR 0 7
35971: PUSH
35972: LD_VAR 0 6
35976: PUSH
35977: EMPTY
35978: LIST
35979: ST_TO_ADDR
// for i = 1 to pos - 1 do
35980: LD_ADDR_VAR 0 5
35984: PUSH
35985: DOUBLE
35986: LD_INT 1
35988: DEC
35989: ST_TO_ADDR
35990: LD_VAR 0 2
35994: PUSH
35995: LD_INT 1
35997: MINUS
35998: PUSH
35999: FOR_TO
36000: IFFALSE 36045
// begin tmp := tmp [ pos [ i ] ] ;
36002: LD_ADDR_VAR 0 6
36006: PUSH
36007: LD_VAR 0 6
36011: PUSH
36012: LD_VAR 0 2
36016: PUSH
36017: LD_VAR 0 5
36021: ARRAY
36022: ARRAY
36023: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36024: LD_ADDR_VAR 0 7
36028: PUSH
36029: LD_VAR 0 7
36033: PUSH
36034: LD_VAR 0 6
36038: PUSH
36039: EMPTY
36040: LIST
36041: ADD
36042: ST_TO_ADDR
// end ;
36043: GO 35999
36045: POP
36046: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36047: LD_ADDR_VAR 0 6
36051: PUSH
36052: LD_VAR 0 6
36056: PPUSH
36057: LD_VAR 0 2
36061: PUSH
36062: LD_VAR 0 2
36066: ARRAY
36067: PPUSH
36068: LD_VAR 0 3
36072: PPUSH
36073: CALL_OW 1
36077: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36078: LD_ADDR_VAR 0 7
36082: PUSH
36083: LD_VAR 0 7
36087: PPUSH
36088: LD_VAR 0 7
36092: PPUSH
36093: LD_VAR 0 6
36097: PPUSH
36098: CALL_OW 1
36102: ST_TO_ADDR
// for i = s_arr downto 2 do
36103: LD_ADDR_VAR 0 5
36107: PUSH
36108: DOUBLE
36109: LD_VAR 0 7
36113: INC
36114: ST_TO_ADDR
36115: LD_INT 2
36117: PUSH
36118: FOR_DOWNTO
36119: IFFALSE 36203
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36121: LD_ADDR_VAR 0 6
36125: PUSH
36126: LD_VAR 0 7
36130: PUSH
36131: LD_VAR 0 5
36135: PUSH
36136: LD_INT 1
36138: MINUS
36139: ARRAY
36140: PPUSH
36141: LD_VAR 0 2
36145: PUSH
36146: LD_VAR 0 5
36150: PUSH
36151: LD_INT 1
36153: MINUS
36154: ARRAY
36155: PPUSH
36156: LD_VAR 0 7
36160: PUSH
36161: LD_VAR 0 5
36165: ARRAY
36166: PPUSH
36167: CALL_OW 1
36171: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36172: LD_ADDR_VAR 0 7
36176: PUSH
36177: LD_VAR 0 7
36181: PPUSH
36182: LD_VAR 0 5
36186: PUSH
36187: LD_INT 1
36189: MINUS
36190: PPUSH
36191: LD_VAR 0 6
36195: PPUSH
36196: CALL_OW 1
36200: ST_TO_ADDR
// end ;
36201: GO 36118
36203: POP
36204: POP
// result := s_arr [ 1 ] ;
36205: LD_ADDR_VAR 0 4
36209: PUSH
36210: LD_VAR 0 7
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: ST_TO_ADDR
// end ; end ;
36219: LD_VAR 0 4
36223: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36224: LD_INT 0
36226: PPUSH
36227: PPUSH
// if not list then
36228: LD_VAR 0 1
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36328
// i := list [ pos1 ] ;
36237: LD_ADDR_VAR 0 5
36241: PUSH
36242: LD_VAR 0 1
36246: PUSH
36247: LD_VAR 0 2
36251: ARRAY
36252: ST_TO_ADDR
// if not i then
36253: LD_VAR 0 5
36257: NOT
36258: IFFALSE 36262
// exit ;
36260: GO 36328
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36262: LD_ADDR_VAR 0 1
36266: PUSH
36267: LD_VAR 0 1
36271: PPUSH
36272: LD_VAR 0 2
36276: PPUSH
36277: LD_VAR 0 1
36281: PUSH
36282: LD_VAR 0 3
36286: ARRAY
36287: PPUSH
36288: CALL_OW 1
36292: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36293: LD_ADDR_VAR 0 1
36297: PUSH
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_VAR 0 3
36307: PPUSH
36308: LD_VAR 0 5
36312: PPUSH
36313: CALL_OW 1
36317: ST_TO_ADDR
// result := list ;
36318: LD_ADDR_VAR 0 4
36322: PUSH
36323: LD_VAR 0 1
36327: ST_TO_ADDR
// end ;
36328: LD_VAR 0 4
36332: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36333: LD_INT 0
36335: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: LD_VAR 0 1
36345: PPUSH
36346: CALL_OW 250
36350: PPUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 251
36360: PPUSH
36361: LD_VAR 0 2
36365: PPUSH
36366: LD_VAR 0 3
36370: PPUSH
36371: LD_VAR 0 4
36375: PPUSH
36376: CALL 36386 0 5
36380: ST_TO_ADDR
// end ;
36381: LD_VAR 0 5
36385: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36386: LD_INT 0
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
// if not list then
36392: LD_VAR 0 3
36396: NOT
36397: IFFALSE 36401
// exit ;
36399: GO 36789
// result := [ ] ;
36401: LD_ADDR_VAR 0 6
36405: PUSH
36406: EMPTY
36407: ST_TO_ADDR
// for i in list do
36408: LD_ADDR_VAR 0 7
36412: PUSH
36413: LD_VAR 0 3
36417: PUSH
36418: FOR_IN
36419: IFFALSE 36621
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36421: LD_ADDR_VAR 0 9
36425: PUSH
36426: LD_VAR 0 7
36430: PPUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: LD_VAR 0 2
36440: PPUSH
36441: CALL_OW 297
36445: ST_TO_ADDR
// if not result then
36446: LD_VAR 0 6
36450: NOT
36451: IFFALSE 36477
// result := [ [ i , tmp ] ] else
36453: LD_ADDR_VAR 0 6
36457: PUSH
36458: LD_VAR 0 7
36462: PUSH
36463: LD_VAR 0 9
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: ST_TO_ADDR
36475: GO 36619
// begin if result [ result ] [ 2 ] < tmp then
36477: LD_VAR 0 6
36481: PUSH
36482: LD_VAR 0 6
36486: ARRAY
36487: PUSH
36488: LD_INT 2
36490: ARRAY
36491: PUSH
36492: LD_VAR 0 9
36496: LESS
36497: IFFALSE 36539
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36499: LD_ADDR_VAR 0 6
36503: PUSH
36504: LD_VAR 0 6
36508: PPUSH
36509: LD_VAR 0 6
36513: PUSH
36514: LD_INT 1
36516: PLUS
36517: PPUSH
36518: LD_VAR 0 7
36522: PUSH
36523: LD_VAR 0 9
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PPUSH
36532: CALL_OW 2
36536: ST_TO_ADDR
36537: GO 36619
// for j = 1 to result do
36539: LD_ADDR_VAR 0 8
36543: PUSH
36544: DOUBLE
36545: LD_INT 1
36547: DEC
36548: ST_TO_ADDR
36549: LD_VAR 0 6
36553: PUSH
36554: FOR_TO
36555: IFFALSE 36617
// begin if tmp < result [ j ] [ 2 ] then
36557: LD_VAR 0 9
36561: PUSH
36562: LD_VAR 0 6
36566: PUSH
36567: LD_VAR 0 8
36571: ARRAY
36572: PUSH
36573: LD_INT 2
36575: ARRAY
36576: LESS
36577: IFFALSE 36615
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36579: LD_ADDR_VAR 0 6
36583: PUSH
36584: LD_VAR 0 6
36588: PPUSH
36589: LD_VAR 0 8
36593: PPUSH
36594: LD_VAR 0 7
36598: PUSH
36599: LD_VAR 0 9
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PPUSH
36608: CALL_OW 2
36612: ST_TO_ADDR
// break ;
36613: GO 36617
// end ; end ;
36615: GO 36554
36617: POP
36618: POP
// end ; end ;
36619: GO 36418
36621: POP
36622: POP
// if result and not asc then
36623: LD_VAR 0 6
36627: PUSH
36628: LD_VAR 0 4
36632: NOT
36633: AND
36634: IFFALSE 36709
// begin tmp := result ;
36636: LD_ADDR_VAR 0 9
36640: PUSH
36641: LD_VAR 0 6
36645: ST_TO_ADDR
// for i = tmp downto 1 do
36646: LD_ADDR_VAR 0 7
36650: PUSH
36651: DOUBLE
36652: LD_VAR 0 9
36656: INC
36657: ST_TO_ADDR
36658: LD_INT 1
36660: PUSH
36661: FOR_DOWNTO
36662: IFFALSE 36707
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36664: LD_ADDR_VAR 0 6
36668: PUSH
36669: LD_VAR 0 6
36673: PPUSH
36674: LD_VAR 0 9
36678: PUSH
36679: LD_VAR 0 7
36683: MINUS
36684: PUSH
36685: LD_INT 1
36687: PLUS
36688: PPUSH
36689: LD_VAR 0 9
36693: PUSH
36694: LD_VAR 0 7
36698: ARRAY
36699: PPUSH
36700: CALL_OW 1
36704: ST_TO_ADDR
36705: GO 36661
36707: POP
36708: POP
// end ; tmp := [ ] ;
36709: LD_ADDR_VAR 0 9
36713: PUSH
36714: EMPTY
36715: ST_TO_ADDR
// if mode then
36716: LD_VAR 0 5
36720: IFFALSE 36789
// begin for i = 1 to result do
36722: LD_ADDR_VAR 0 7
36726: PUSH
36727: DOUBLE
36728: LD_INT 1
36730: DEC
36731: ST_TO_ADDR
36732: LD_VAR 0 6
36736: PUSH
36737: FOR_TO
36738: IFFALSE 36777
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36740: LD_ADDR_VAR 0 9
36744: PUSH
36745: LD_VAR 0 9
36749: PPUSH
36750: LD_VAR 0 7
36754: PPUSH
36755: LD_VAR 0 6
36759: PUSH
36760: LD_VAR 0 7
36764: ARRAY
36765: PUSH
36766: LD_INT 1
36768: ARRAY
36769: PPUSH
36770: CALL_OW 1
36774: ST_TO_ADDR
36775: GO 36737
36777: POP
36778: POP
// result := tmp ;
36779: LD_ADDR_VAR 0 6
36783: PUSH
36784: LD_VAR 0 9
36788: ST_TO_ADDR
// end ; end ;
36789: LD_VAR 0 6
36793: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36794: LD_INT 0
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36802: LD_ADDR_VAR 0 5
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// if not x or not y then
36824: LD_VAR 0 2
36828: NOT
36829: PUSH
36830: LD_VAR 0 3
36834: NOT
36835: OR
36836: IFFALSE 36840
// exit ;
36838: GO 38492
// if not range then
36840: LD_VAR 0 4
36844: NOT
36845: IFFALSE 36855
// range := 10 ;
36847: LD_ADDR_VAR 0 4
36851: PUSH
36852: LD_INT 10
36854: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36855: LD_ADDR_VAR 0 8
36859: PUSH
36860: LD_INT 81
36862: PUSH
36863: LD_VAR 0 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 92
36874: PUSH
36875: LD_VAR 0 2
36879: PUSH
36880: LD_VAR 0 3
36884: PUSH
36885: LD_VAR 0 4
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: PUSH
36899: LD_INT 21
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: PPUSH
36918: CALL_OW 69
36922: ST_TO_ADDR
// if not tmp then
36923: LD_VAR 0 8
36927: NOT
36928: IFFALSE 36932
// exit ;
36930: GO 38492
// for i in tmp do
36932: LD_ADDR_VAR 0 6
36936: PUSH
36937: LD_VAR 0 8
36941: PUSH
36942: FOR_IN
36943: IFFALSE 38467
// begin points := [ 0 , 0 , 0 ] ;
36945: LD_ADDR_VAR 0 9
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// bpoints := 1 ;
36964: LD_ADDR_VAR 0 10
36968: PUSH
36969: LD_INT 1
36971: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36972: LD_VAR 0 6
36976: PPUSH
36977: CALL_OW 247
36981: PUSH
36982: LD_INT 1
36984: DOUBLE
36985: EQUAL
36986: IFTRUE 36990
36988: GO 37568
36990: POP
// begin if GetClass ( i ) = 1 then
36991: LD_VAR 0 6
36995: PPUSH
36996: CALL_OW 257
37000: PUSH
37001: LD_INT 1
37003: EQUAL
37004: IFFALSE 37025
// points := [ 10 , 5 , 3 ] ;
37006: LD_ADDR_VAR 0 9
37010: PUSH
37011: LD_INT 10
37013: PUSH
37014: LD_INT 5
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37025: LD_VAR 0 6
37029: PPUSH
37030: CALL_OW 257
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: LD_INT 4
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: IN
37049: IFFALSE 37070
// points := [ 3 , 2 , 1 ] ;
37051: LD_ADDR_VAR 0 9
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37070: LD_VAR 0 6
37074: PPUSH
37075: CALL_OW 257
37079: PUSH
37080: LD_INT 5
37082: EQUAL
37083: IFFALSE 37104
// points := [ 130 , 5 , 2 ] ;
37085: LD_ADDR_VAR 0 9
37089: PUSH
37090: LD_INT 130
37092: PUSH
37093: LD_INT 5
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37104: LD_VAR 0 6
37108: PPUSH
37109: CALL_OW 257
37113: PUSH
37114: LD_INT 8
37116: EQUAL
37117: IFFALSE 37138
// points := [ 35 , 35 , 30 ] ;
37119: LD_ADDR_VAR 0 9
37123: PUSH
37124: LD_INT 35
37126: PUSH
37127: LD_INT 35
37129: PUSH
37130: LD_INT 30
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37138: LD_VAR 0 6
37142: PPUSH
37143: CALL_OW 257
37147: PUSH
37148: LD_INT 9
37150: EQUAL
37151: IFFALSE 37172
// points := [ 20 , 55 , 40 ] ;
37153: LD_ADDR_VAR 0 9
37157: PUSH
37158: LD_INT 20
37160: PUSH
37161: LD_INT 55
37163: PUSH
37164: LD_INT 40
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37172: LD_VAR 0 6
37176: PPUSH
37177: CALL_OW 257
37181: PUSH
37182: LD_INT 12
37184: PUSH
37185: LD_INT 16
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: IN
37192: IFFALSE 37213
// points := [ 5 , 3 , 2 ] ;
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: LD_INT 5
37201: PUSH
37202: LD_INT 3
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37213: LD_VAR 0 6
37217: PPUSH
37218: CALL_OW 257
37222: PUSH
37223: LD_INT 17
37225: EQUAL
37226: IFFALSE 37247
// points := [ 100 , 50 , 75 ] ;
37228: LD_ADDR_VAR 0 9
37232: PUSH
37233: LD_INT 100
37235: PUSH
37236: LD_INT 50
37238: PUSH
37239: LD_INT 75
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37247: LD_VAR 0 6
37251: PPUSH
37252: CALL_OW 257
37256: PUSH
37257: LD_INT 15
37259: EQUAL
37260: IFFALSE 37281
// points := [ 10 , 5 , 3 ] ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_INT 10
37269: PUSH
37270: LD_INT 5
37272: PUSH
37273: LD_INT 3
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37281: LD_VAR 0 6
37285: PPUSH
37286: CALL_OW 257
37290: PUSH
37291: LD_INT 14
37293: EQUAL
37294: IFFALSE 37315
// points := [ 10 , 0 , 0 ] ;
37296: LD_ADDR_VAR 0 9
37300: PUSH
37301: LD_INT 10
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37315: LD_VAR 0 6
37319: PPUSH
37320: CALL_OW 257
37324: PUSH
37325: LD_INT 11
37327: EQUAL
37328: IFFALSE 37349
// points := [ 30 , 10 , 5 ] ;
37330: LD_ADDR_VAR 0 9
37334: PUSH
37335: LD_INT 30
37337: PUSH
37338: LD_INT 10
37340: PUSH
37341: LD_INT 5
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37349: LD_VAR 0 1
37353: PPUSH
37354: LD_INT 5
37356: PPUSH
37357: CALL_OW 321
37361: PUSH
37362: LD_INT 2
37364: EQUAL
37365: IFFALSE 37382
// bpoints := bpoints * 1.8 ;
37367: LD_ADDR_VAR 0 10
37371: PUSH
37372: LD_VAR 0 10
37376: PUSH
37377: LD_REAL  1.80000000000000E+0000
37380: MUL
37381: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37382: LD_VAR 0 6
37386: PPUSH
37387: CALL_OW 257
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 2
37397: PUSH
37398: LD_INT 3
37400: PUSH
37401: LD_INT 4
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: IN
37410: PUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: LD_INT 51
37418: PPUSH
37419: CALL_OW 321
37423: PUSH
37424: LD_INT 2
37426: EQUAL
37427: AND
37428: IFFALSE 37445
// bpoints := bpoints * 1.2 ;
37430: LD_ADDR_VAR 0 10
37434: PUSH
37435: LD_VAR 0 10
37439: PUSH
37440: LD_REAL  1.20000000000000E+0000
37443: MUL
37444: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37445: LD_VAR 0 6
37449: PPUSH
37450: CALL_OW 257
37454: PUSH
37455: LD_INT 5
37457: PUSH
37458: LD_INT 7
37460: PUSH
37461: LD_INT 9
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: IN
37469: PUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: LD_INT 52
37477: PPUSH
37478: CALL_OW 321
37482: PUSH
37483: LD_INT 2
37485: EQUAL
37486: AND
37487: IFFALSE 37504
// bpoints := bpoints * 1.5 ;
37489: LD_ADDR_VAR 0 10
37493: PUSH
37494: LD_VAR 0 10
37498: PUSH
37499: LD_REAL  1.50000000000000E+0000
37502: MUL
37503: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37504: LD_VAR 0 1
37508: PPUSH
37509: LD_INT 66
37511: PPUSH
37512: CALL_OW 321
37516: PUSH
37517: LD_INT 2
37519: EQUAL
37520: IFFALSE 37537
// bpoints := bpoints * 1.1 ;
37522: LD_ADDR_VAR 0 10
37526: PUSH
37527: LD_VAR 0 10
37531: PUSH
37532: LD_REAL  1.10000000000000E+0000
37535: MUL
37536: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37537: LD_ADDR_VAR 0 10
37541: PUSH
37542: LD_VAR 0 10
37546: PUSH
37547: LD_VAR 0 6
37551: PPUSH
37552: LD_INT 1
37554: PPUSH
37555: CALL_OW 259
37559: PUSH
37560: LD_REAL  1.15000000000000E+0000
37563: MUL
37564: MUL
37565: ST_TO_ADDR
// end ; unit_vehicle :
37566: GO 38396
37568: LD_INT 2
37570: DOUBLE
37571: EQUAL
37572: IFTRUE 37576
37574: GO 38384
37576: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37577: LD_VAR 0 6
37581: PPUSH
37582: CALL_OW 264
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 42
37592: PUSH
37593: LD_INT 24
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: IN
37601: IFFALSE 37622
// points := [ 25 , 5 , 3 ] ;
37603: LD_ADDR_VAR 0 9
37607: PUSH
37608: LD_INT 25
37610: PUSH
37611: LD_INT 5
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37622: LD_VAR 0 6
37626: PPUSH
37627: CALL_OW 264
37631: PUSH
37632: LD_INT 4
37634: PUSH
37635: LD_INT 43
37637: PUSH
37638: LD_INT 25
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: IN
37646: IFFALSE 37667
// points := [ 40 , 15 , 5 ] ;
37648: LD_ADDR_VAR 0 9
37652: PUSH
37653: LD_INT 40
37655: PUSH
37656: LD_INT 15
37658: PUSH
37659: LD_INT 5
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37667: LD_VAR 0 6
37671: PPUSH
37672: CALL_OW 264
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 23
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: IN
37687: IFFALSE 37708
// points := [ 7 , 25 , 8 ] ;
37689: LD_ADDR_VAR 0 9
37693: PUSH
37694: LD_INT 7
37696: PUSH
37697: LD_INT 25
37699: PUSH
37700: LD_INT 8
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37708: LD_VAR 0 6
37712: PPUSH
37713: CALL_OW 264
37717: PUSH
37718: LD_INT 5
37720: PUSH
37721: LD_INT 27
37723: PUSH
37724: LD_INT 44
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: IN
37732: IFFALSE 37753
// points := [ 14 , 50 , 16 ] ;
37734: LD_ADDR_VAR 0 9
37738: PUSH
37739: LD_INT 14
37741: PUSH
37742: LD_INT 50
37744: PUSH
37745: LD_INT 16
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37753: LD_VAR 0 6
37757: PPUSH
37758: CALL_OW 264
37762: PUSH
37763: LD_INT 6
37765: PUSH
37766: LD_INT 46
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: IN
37773: IFFALSE 37794
// points := [ 32 , 120 , 70 ] ;
37775: LD_ADDR_VAR 0 9
37779: PUSH
37780: LD_INT 32
37782: PUSH
37783: LD_INT 120
37785: PUSH
37786: LD_INT 70
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37794: LD_VAR 0 6
37798: PPUSH
37799: CALL_OW 264
37803: PUSH
37804: LD_INT 7
37806: PUSH
37807: LD_INT 28
37809: PUSH
37810: LD_INT 45
37812: PUSH
37813: LD_EXP 48
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: IN
37824: IFFALSE 37845
// points := [ 35 , 20 , 45 ] ;
37826: LD_ADDR_VAR 0 9
37830: PUSH
37831: LD_INT 35
37833: PUSH
37834: LD_INT 20
37836: PUSH
37837: LD_INT 45
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37845: LD_VAR 0 6
37849: PPUSH
37850: CALL_OW 264
37854: PUSH
37855: LD_INT 47
37857: PUSH
37858: EMPTY
37859: LIST
37860: IN
37861: IFFALSE 37882
// points := [ 67 , 45 , 75 ] ;
37863: LD_ADDR_VAR 0 9
37867: PUSH
37868: LD_INT 67
37870: PUSH
37871: LD_INT 45
37873: PUSH
37874: LD_INT 75
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37882: LD_VAR 0 6
37886: PPUSH
37887: CALL_OW 264
37891: PUSH
37892: LD_INT 26
37894: PUSH
37895: EMPTY
37896: LIST
37897: IN
37898: IFFALSE 37919
// points := [ 120 , 30 , 80 ] ;
37900: LD_ADDR_VAR 0 9
37904: PUSH
37905: LD_INT 120
37907: PUSH
37908: LD_INT 30
37910: PUSH
37911: LD_INT 80
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37919: LD_VAR 0 6
37923: PPUSH
37924: CALL_OW 264
37928: PUSH
37929: LD_INT 22
37931: PUSH
37932: EMPTY
37933: LIST
37934: IN
37935: IFFALSE 37956
// points := [ 40 , 1 , 1 ] ;
37937: LD_ADDR_VAR 0 9
37941: PUSH
37942: LD_INT 40
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37956: LD_VAR 0 6
37960: PPUSH
37961: CALL_OW 264
37965: PUSH
37966: LD_INT 29
37968: PUSH
37969: EMPTY
37970: LIST
37971: IN
37972: IFFALSE 37993
// points := [ 70 , 200 , 400 ] ;
37974: LD_ADDR_VAR 0 9
37978: PUSH
37979: LD_INT 70
37981: PUSH
37982: LD_INT 200
37984: PUSH
37985: LD_INT 400
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37993: LD_VAR 0 6
37997: PPUSH
37998: CALL_OW 264
38002: PUSH
38003: LD_INT 14
38005: PUSH
38006: LD_INT 53
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: IN
38013: IFFALSE 38034
// points := [ 40 , 10 , 20 ] ;
38015: LD_ADDR_VAR 0 9
38019: PUSH
38020: LD_INT 40
38022: PUSH
38023: LD_INT 10
38025: PUSH
38026: LD_INT 20
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38034: LD_VAR 0 6
38038: PPUSH
38039: CALL_OW 264
38043: PUSH
38044: LD_INT 9
38046: PUSH
38047: EMPTY
38048: LIST
38049: IN
38050: IFFALSE 38071
// points := [ 5 , 70 , 20 ] ;
38052: LD_ADDR_VAR 0 9
38056: PUSH
38057: LD_INT 5
38059: PUSH
38060: LD_INT 70
38062: PUSH
38063: LD_INT 20
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38071: LD_VAR 0 6
38075: PPUSH
38076: CALL_OW 264
38080: PUSH
38081: LD_INT 10
38083: PUSH
38084: EMPTY
38085: LIST
38086: IN
38087: IFFALSE 38108
// points := [ 35 , 110 , 70 ] ;
38089: LD_ADDR_VAR 0 9
38093: PUSH
38094: LD_INT 35
38096: PUSH
38097: LD_INT 110
38099: PUSH
38100: LD_INT 70
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38108: LD_VAR 0 6
38112: PPUSH
38113: CALL_OW 265
38117: PUSH
38118: LD_INT 25
38120: EQUAL
38121: IFFALSE 38142
// points := [ 80 , 65 , 100 ] ;
38123: LD_ADDR_VAR 0 9
38127: PUSH
38128: LD_INT 80
38130: PUSH
38131: LD_INT 65
38133: PUSH
38134: LD_INT 100
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38142: LD_VAR 0 6
38146: PPUSH
38147: CALL_OW 263
38151: PUSH
38152: LD_INT 1
38154: EQUAL
38155: IFFALSE 38190
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38157: LD_ADDR_VAR 0 10
38161: PUSH
38162: LD_VAR 0 10
38166: PUSH
38167: LD_VAR 0 6
38171: PPUSH
38172: CALL_OW 311
38176: PPUSH
38177: LD_INT 3
38179: PPUSH
38180: CALL_OW 259
38184: PUSH
38185: LD_INT 4
38187: MUL
38188: MUL
38189: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38190: LD_VAR 0 6
38194: PPUSH
38195: CALL_OW 263
38199: PUSH
38200: LD_INT 2
38202: EQUAL
38203: IFFALSE 38254
// begin j := IsControledBy ( i ) ;
38205: LD_ADDR_VAR 0 7
38209: PUSH
38210: LD_VAR 0 6
38214: PPUSH
38215: CALL_OW 312
38219: ST_TO_ADDR
// if j then
38220: LD_VAR 0 7
38224: IFFALSE 38254
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38226: LD_ADDR_VAR 0 10
38230: PUSH
38231: LD_VAR 0 10
38235: PUSH
38236: LD_VAR 0 7
38240: PPUSH
38241: LD_INT 3
38243: PPUSH
38244: CALL_OW 259
38248: PUSH
38249: LD_INT 3
38251: MUL
38252: MUL
38253: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38254: LD_VAR 0 6
38258: PPUSH
38259: CALL_OW 264
38263: PUSH
38264: LD_INT 5
38266: PUSH
38267: LD_INT 6
38269: PUSH
38270: LD_INT 46
38272: PUSH
38273: LD_INT 44
38275: PUSH
38276: LD_INT 47
38278: PUSH
38279: LD_INT 45
38281: PUSH
38282: LD_INT 28
38284: PUSH
38285: LD_INT 7
38287: PUSH
38288: LD_INT 27
38290: PUSH
38291: LD_INT 29
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: IN
38306: PUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: LD_INT 52
38314: PPUSH
38315: CALL_OW 321
38319: PUSH
38320: LD_INT 2
38322: EQUAL
38323: AND
38324: IFFALSE 38341
// bpoints := bpoints * 1.2 ;
38326: LD_ADDR_VAR 0 10
38330: PUSH
38331: LD_VAR 0 10
38335: PUSH
38336: LD_REAL  1.20000000000000E+0000
38339: MUL
38340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 264
38350: PUSH
38351: LD_INT 6
38353: PUSH
38354: LD_INT 46
38356: PUSH
38357: LD_INT 47
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: IN
38365: IFFALSE 38382
// bpoints := bpoints * 1.2 ;
38367: LD_ADDR_VAR 0 10
38371: PUSH
38372: LD_VAR 0 10
38376: PUSH
38377: LD_REAL  1.20000000000000E+0000
38380: MUL
38381: ST_TO_ADDR
// end ; unit_building :
38382: GO 38396
38384: LD_INT 3
38386: DOUBLE
38387: EQUAL
38388: IFTRUE 38392
38390: GO 38395
38392: POP
// ; end ;
38393: GO 38396
38395: POP
// for j = 1 to 3 do
38396: LD_ADDR_VAR 0 7
38400: PUSH
38401: DOUBLE
38402: LD_INT 1
38404: DEC
38405: ST_TO_ADDR
38406: LD_INT 3
38408: PUSH
38409: FOR_TO
38410: IFFALSE 38463
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38412: LD_ADDR_VAR 0 5
38416: PUSH
38417: LD_VAR 0 5
38421: PPUSH
38422: LD_VAR 0 7
38426: PPUSH
38427: LD_VAR 0 5
38431: PUSH
38432: LD_VAR 0 7
38436: ARRAY
38437: PUSH
38438: LD_VAR 0 9
38442: PUSH
38443: LD_VAR 0 7
38447: ARRAY
38448: PUSH
38449: LD_VAR 0 10
38453: MUL
38454: PLUS
38455: PPUSH
38456: CALL_OW 1
38460: ST_TO_ADDR
38461: GO 38409
38463: POP
38464: POP
// end ;
38465: GO 36942
38467: POP
38468: POP
// result := Replace ( result , 4 , tmp ) ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 5
38478: PPUSH
38479: LD_INT 4
38481: PPUSH
38482: LD_VAR 0 8
38486: PPUSH
38487: CALL_OW 1
38491: ST_TO_ADDR
// end ;
38492: LD_VAR 0 5
38496: RET
// export function DangerAtRange ( unit , range ) ; begin
38497: LD_INT 0
38499: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38500: LD_ADDR_VAR 0 3
38504: PUSH
38505: LD_VAR 0 1
38509: PPUSH
38510: CALL_OW 255
38514: PPUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 250
38524: PPUSH
38525: LD_VAR 0 1
38529: PPUSH
38530: CALL_OW 251
38534: PPUSH
38535: LD_VAR 0 2
38539: PPUSH
38540: CALL 36794 0 4
38544: ST_TO_ADDR
// end ;
38545: LD_VAR 0 3
38549: RET
// export function DangerInArea ( side , area ) ; begin
38550: LD_INT 0
38552: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_VAR 0 2
38562: PPUSH
38563: LD_INT 81
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PPUSH
38575: CALL_OW 70
38579: ST_TO_ADDR
// end ;
38580: LD_VAR 0 3
38584: RET
// export function IsExtension ( b ) ; begin
38585: LD_INT 0
38587: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38588: LD_ADDR_VAR 0 2
38592: PUSH
38593: LD_VAR 0 1
38597: PUSH
38598: LD_INT 23
38600: PUSH
38601: LD_INT 20
38603: PUSH
38604: LD_INT 22
38606: PUSH
38607: LD_INT 17
38609: PUSH
38610: LD_INT 24
38612: PUSH
38613: LD_INT 21
38615: PUSH
38616: LD_INT 19
38618: PUSH
38619: LD_INT 16
38621: PUSH
38622: LD_INT 25
38624: PUSH
38625: LD_INT 18
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: IN
38640: ST_TO_ADDR
// end ;
38641: LD_VAR 0 2
38645: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
38650: PPUSH
// result := [ ] ;
38651: LD_ADDR_VAR 0 4
38655: PUSH
38656: EMPTY
38657: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38658: LD_ADDR_VAR 0 5
38662: PUSH
38663: LD_VAR 0 2
38667: PPUSH
38668: LD_INT 21
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PPUSH
38678: CALL_OW 70
38682: ST_TO_ADDR
// if not tmp then
38683: LD_VAR 0 5
38687: NOT
38688: IFFALSE 38692
// exit ;
38690: GO 38756
// if checkLink then
38692: LD_VAR 0 3
38696: IFFALSE 38746
// begin for i in tmp do
38698: LD_ADDR_VAR 0 6
38702: PUSH
38703: LD_VAR 0 5
38707: PUSH
38708: FOR_IN
38709: IFFALSE 38744
// if GetBase ( i ) <> base then
38711: LD_VAR 0 6
38715: PPUSH
38716: CALL_OW 274
38720: PUSH
38721: LD_VAR 0 1
38725: NONEQUAL
38726: IFFALSE 38742
// ComLinkToBase ( base , i ) ;
38728: LD_VAR 0 1
38732: PPUSH
38733: LD_VAR 0 6
38737: PPUSH
38738: CALL_OW 169
38742: GO 38708
38744: POP
38745: POP
// end ; result := tmp ;
38746: LD_ADDR_VAR 0 4
38750: PUSH
38751: LD_VAR 0 5
38755: ST_TO_ADDR
// end ;
38756: LD_VAR 0 4
38760: RET
// export function ComComplete ( units , b ) ; var i ; begin
38761: LD_INT 0
38763: PPUSH
38764: PPUSH
// if not units then
38765: LD_VAR 0 1
38769: NOT
38770: IFFALSE 38774
// exit ;
38772: GO 38864
// for i in units do
38774: LD_ADDR_VAR 0 4
38778: PUSH
38779: LD_VAR 0 1
38783: PUSH
38784: FOR_IN
38785: IFFALSE 38862
// if BuildingStatus ( b ) = bs_build then
38787: LD_VAR 0 2
38791: PPUSH
38792: CALL_OW 461
38796: PUSH
38797: LD_INT 1
38799: EQUAL
38800: IFFALSE 38860
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38802: LD_VAR 0 4
38806: PPUSH
38807: LD_STRING h
38809: PUSH
38810: LD_VAR 0 2
38814: PPUSH
38815: CALL_OW 250
38819: PUSH
38820: LD_VAR 0 2
38824: PPUSH
38825: CALL_OW 251
38829: PUSH
38830: LD_VAR 0 2
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: PUSH
38853: EMPTY
38854: LIST
38855: PPUSH
38856: CALL_OW 446
38860: GO 38784
38862: POP
38863: POP
// end ;
38864: LD_VAR 0 3
38868: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38869: LD_INT 0
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38877: LD_VAR 0 1
38881: NOT
38882: PUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL_OW 263
38892: PUSH
38893: LD_INT 2
38895: NONEQUAL
38896: OR
38897: IFFALSE 38901
// exit ;
38899: GO 39217
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38901: LD_ADDR_VAR 0 6
38905: PUSH
38906: LD_INT 22
38908: PUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: CALL_OW 255
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 30
38928: PUSH
38929: LD_INT 36
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 34
38938: PUSH
38939: LD_INT 31
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PPUSH
38955: CALL_OW 69
38959: ST_TO_ADDR
// if not tmp then
38960: LD_VAR 0 6
38964: NOT
38965: IFFALSE 38969
// exit ;
38967: GO 39217
// result := [ ] ;
38969: LD_ADDR_VAR 0 2
38973: PUSH
38974: EMPTY
38975: ST_TO_ADDR
// for i in tmp do
38976: LD_ADDR_VAR 0 3
38980: PUSH
38981: LD_VAR 0 6
38985: PUSH
38986: FOR_IN
38987: IFFALSE 39058
// begin t := UnitsInside ( i ) ;
38989: LD_ADDR_VAR 0 4
38993: PUSH
38994: LD_VAR 0 3
38998: PPUSH
38999: CALL_OW 313
39003: ST_TO_ADDR
// if t then
39004: LD_VAR 0 4
39008: IFFALSE 39056
// for j in t do
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: LD_VAR 0 4
39019: PUSH
39020: FOR_IN
39021: IFFALSE 39054
// result := Replace ( result , result + 1 , j ) ;
39023: LD_ADDR_VAR 0 2
39027: PUSH
39028: LD_VAR 0 2
39032: PPUSH
39033: LD_VAR 0 2
39037: PUSH
39038: LD_INT 1
39040: PLUS
39041: PPUSH
39042: LD_VAR 0 7
39046: PPUSH
39047: CALL_OW 1
39051: ST_TO_ADDR
39052: GO 39020
39054: POP
39055: POP
// end ;
39056: GO 38986
39058: POP
39059: POP
// if not result then
39060: LD_VAR 0 2
39064: NOT
39065: IFFALSE 39069
// exit ;
39067: GO 39217
// mech := result [ 1 ] ;
39069: LD_ADDR_VAR 0 5
39073: PUSH
39074: LD_VAR 0 2
39078: PUSH
39079: LD_INT 1
39081: ARRAY
39082: ST_TO_ADDR
// if result > 1 then
39083: LD_VAR 0 2
39087: PUSH
39088: LD_INT 1
39090: GREATER
39091: IFFALSE 39203
// begin for i = 2 to result do
39093: LD_ADDR_VAR 0 3
39097: PUSH
39098: DOUBLE
39099: LD_INT 2
39101: DEC
39102: ST_TO_ADDR
39103: LD_VAR 0 2
39107: PUSH
39108: FOR_TO
39109: IFFALSE 39201
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39111: LD_ADDR_VAR 0 4
39115: PUSH
39116: LD_VAR 0 2
39120: PUSH
39121: LD_VAR 0 3
39125: ARRAY
39126: PPUSH
39127: LD_INT 3
39129: PPUSH
39130: CALL_OW 259
39134: PUSH
39135: LD_VAR 0 2
39139: PUSH
39140: LD_VAR 0 3
39144: ARRAY
39145: PPUSH
39146: CALL_OW 432
39150: MINUS
39151: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39152: LD_VAR 0 4
39156: PUSH
39157: LD_VAR 0 5
39161: PPUSH
39162: LD_INT 3
39164: PPUSH
39165: CALL_OW 259
39169: PUSH
39170: LD_VAR 0 5
39174: PPUSH
39175: CALL_OW 432
39179: MINUS
39180: GREATEREQUAL
39181: IFFALSE 39199
// mech := result [ i ] ;
39183: LD_ADDR_VAR 0 5
39187: PUSH
39188: LD_VAR 0 2
39192: PUSH
39193: LD_VAR 0 3
39197: ARRAY
39198: ST_TO_ADDR
// end ;
39199: GO 39108
39201: POP
39202: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39203: LD_VAR 0 1
39207: PPUSH
39208: LD_VAR 0 5
39212: PPUSH
39213: CALL_OW 135
// end ;
39217: LD_VAR 0 2
39221: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39222: LD_INT 0
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
// result := [ ] ;
39237: LD_ADDR_VAR 0 7
39241: PUSH
39242: EMPTY
39243: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 266
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: IN
39264: NOT
39265: IFFALSE 39269
// exit ;
39267: GO 40903
// if name then
39269: LD_VAR 0 3
39273: IFFALSE 39289
// SetBName ( base_dep , name ) ;
39275: LD_VAR 0 1
39279: PPUSH
39280: LD_VAR 0 3
39284: PPUSH
39285: CALL_OW 500
// base := GetBase ( base_dep ) ;
39289: LD_ADDR_VAR 0 15
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: CALL_OW 274
39303: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39304: LD_ADDR_VAR 0 16
39308: PUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: CALL_OW 255
39318: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39319: LD_ADDR_VAR 0 17
39323: PUSH
39324: LD_VAR 0 1
39328: PPUSH
39329: CALL_OW 248
39333: ST_TO_ADDR
// if sources then
39334: LD_VAR 0 5
39338: IFFALSE 39385
// for i = 1 to 3 do
39340: LD_ADDR_VAR 0 8
39344: PUSH
39345: DOUBLE
39346: LD_INT 1
39348: DEC
39349: ST_TO_ADDR
39350: LD_INT 3
39352: PUSH
39353: FOR_TO
39354: IFFALSE 39383
// AddResourceType ( base , i , sources [ i ] ) ;
39356: LD_VAR 0 15
39360: PPUSH
39361: LD_VAR 0 8
39365: PPUSH
39366: LD_VAR 0 5
39370: PUSH
39371: LD_VAR 0 8
39375: ARRAY
39376: PPUSH
39377: CALL_OW 276
39381: GO 39353
39383: POP
39384: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39385: LD_ADDR_VAR 0 18
39389: PUSH
39390: LD_VAR 0 15
39394: PPUSH
39395: LD_VAR 0 2
39399: PPUSH
39400: LD_INT 1
39402: PPUSH
39403: CALL 38646 0 3
39407: ST_TO_ADDR
// InitHc ;
39408: CALL_OW 19
// InitUc ;
39412: CALL_OW 18
// uc_side := side ;
39416: LD_ADDR_OWVAR 20
39420: PUSH
39421: LD_VAR 0 16
39425: ST_TO_ADDR
// uc_nation := nation ;
39426: LD_ADDR_OWVAR 21
39430: PUSH
39431: LD_VAR 0 17
39435: ST_TO_ADDR
// if buildings then
39436: LD_VAR 0 18
39440: IFFALSE 40762
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39442: LD_ADDR_VAR 0 19
39446: PUSH
39447: LD_VAR 0 18
39451: PPUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 30
39457: PUSH
39458: LD_INT 29
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 30
39467: PUSH
39468: LD_INT 30
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 72
39484: ST_TO_ADDR
// if tmp then
39485: LD_VAR 0 19
39489: IFFALSE 39537
// for i in tmp do
39491: LD_ADDR_VAR 0 8
39495: PUSH
39496: LD_VAR 0 19
39500: PUSH
39501: FOR_IN
39502: IFFALSE 39535
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39504: LD_VAR 0 8
39508: PPUSH
39509: CALL_OW 250
39513: PPUSH
39514: LD_VAR 0 8
39518: PPUSH
39519: CALL_OW 251
39523: PPUSH
39524: LD_VAR 0 16
39528: PPUSH
39529: CALL_OW 441
39533: GO 39501
39535: POP
39536: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39537: LD_VAR 0 18
39541: PPUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 30
39547: PUSH
39548: LD_INT 32
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 30
39557: PUSH
39558: LD_INT 33
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: PPUSH
39570: CALL_OW 72
39574: IFFALSE 39662
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39576: LD_ADDR_VAR 0 8
39580: PUSH
39581: LD_VAR 0 18
39585: PPUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 30
39591: PUSH
39592: LD_INT 32
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 30
39601: PUSH
39602: LD_INT 33
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: PPUSH
39614: CALL_OW 72
39618: PUSH
39619: FOR_IN
39620: IFFALSE 39660
// begin if not GetBWeapon ( i ) then
39622: LD_VAR 0 8
39626: PPUSH
39627: CALL_OW 269
39631: NOT
39632: IFFALSE 39658
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39634: LD_VAR 0 8
39638: PPUSH
39639: LD_VAR 0 8
39643: PPUSH
39644: LD_VAR 0 2
39648: PPUSH
39649: CALL 40908 0 2
39653: PPUSH
39654: CALL_OW 431
// end ;
39658: GO 39619
39660: POP
39661: POP
// end ; for i = 1 to personel do
39662: LD_ADDR_VAR 0 8
39666: PUSH
39667: DOUBLE
39668: LD_INT 1
39670: DEC
39671: ST_TO_ADDR
39672: LD_VAR 0 6
39676: PUSH
39677: FOR_TO
39678: IFFALSE 40742
// begin if i > 4 then
39680: LD_VAR 0 8
39684: PUSH
39685: LD_INT 4
39687: GREATER
39688: IFFALSE 39692
// break ;
39690: GO 40742
// case i of 1 :
39692: LD_VAR 0 8
39696: PUSH
39697: LD_INT 1
39699: DOUBLE
39700: EQUAL
39701: IFTRUE 39705
39703: GO 39785
39705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39706: LD_ADDR_VAR 0 12
39710: PUSH
39711: LD_VAR 0 18
39715: PPUSH
39716: LD_INT 22
39718: PUSH
39719: LD_VAR 0 16
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 58
39730: PUSH
39731: EMPTY
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: LD_INT 30
39739: PUSH
39740: LD_INT 32
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 30
39749: PUSH
39750: LD_INT 4
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 30
39759: PUSH
39760: LD_INT 5
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: PPUSH
39778: CALL_OW 72
39782: ST_TO_ADDR
39783: GO 40007
39785: LD_INT 2
39787: DOUBLE
39788: EQUAL
39789: IFTRUE 39793
39791: GO 39855
39793: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39794: LD_ADDR_VAR 0 12
39798: PUSH
39799: LD_VAR 0 18
39803: PPUSH
39804: LD_INT 22
39806: PUSH
39807: LD_VAR 0 16
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 30
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 30
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PPUSH
39848: CALL_OW 72
39852: ST_TO_ADDR
39853: GO 40007
39855: LD_INT 3
39857: DOUBLE
39858: EQUAL
39859: IFTRUE 39863
39861: GO 39925
39863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39864: LD_ADDR_VAR 0 12
39868: PUSH
39869: LD_VAR 0 18
39873: PPUSH
39874: LD_INT 22
39876: PUSH
39877: LD_VAR 0 16
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: LD_INT 30
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 30
39901: PUSH
39902: LD_INT 3
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PPUSH
39918: CALL_OW 72
39922: ST_TO_ADDR
39923: GO 40007
39925: LD_INT 4
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 40006
39933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39934: LD_ADDR_VAR 0 12
39938: PUSH
39939: LD_VAR 0 18
39943: PPUSH
39944: LD_INT 22
39946: PUSH
39947: LD_VAR 0 16
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 30
39961: PUSH
39962: LD_INT 6
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 30
39971: PUSH
39972: LD_INT 7
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 30
39981: PUSH
39982: LD_INT 8
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PPUSH
39999: CALL_OW 72
40003: ST_TO_ADDR
40004: GO 40007
40006: POP
// if i = 1 then
40007: LD_VAR 0 8
40011: PUSH
40012: LD_INT 1
40014: EQUAL
40015: IFFALSE 40126
// begin tmp := [ ] ;
40017: LD_ADDR_VAR 0 19
40021: PUSH
40022: EMPTY
40023: ST_TO_ADDR
// for j in f do
40024: LD_ADDR_VAR 0 9
40028: PUSH
40029: LD_VAR 0 12
40033: PUSH
40034: FOR_IN
40035: IFFALSE 40108
// if GetBType ( j ) = b_bunker then
40037: LD_VAR 0 9
40041: PPUSH
40042: CALL_OW 266
40046: PUSH
40047: LD_INT 32
40049: EQUAL
40050: IFFALSE 40077
// tmp := Insert ( tmp , 1 , j ) else
40052: LD_ADDR_VAR 0 19
40056: PUSH
40057: LD_VAR 0 19
40061: PPUSH
40062: LD_INT 1
40064: PPUSH
40065: LD_VAR 0 9
40069: PPUSH
40070: CALL_OW 2
40074: ST_TO_ADDR
40075: GO 40106
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40077: LD_ADDR_VAR 0 19
40081: PUSH
40082: LD_VAR 0 19
40086: PPUSH
40087: LD_VAR 0 19
40091: PUSH
40092: LD_INT 1
40094: PLUS
40095: PPUSH
40096: LD_VAR 0 9
40100: PPUSH
40101: CALL_OW 2
40105: ST_TO_ADDR
40106: GO 40034
40108: POP
40109: POP
// if tmp then
40110: LD_VAR 0 19
40114: IFFALSE 40126
// f := tmp ;
40116: LD_ADDR_VAR 0 12
40120: PUSH
40121: LD_VAR 0 19
40125: ST_TO_ADDR
// end ; x := personel [ i ] ;
40126: LD_ADDR_VAR 0 13
40130: PUSH
40131: LD_VAR 0 6
40135: PUSH
40136: LD_VAR 0 8
40140: ARRAY
40141: ST_TO_ADDR
// if x = - 1 then
40142: LD_VAR 0 13
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: EQUAL
40151: IFFALSE 40360
// begin for j in f do
40153: LD_ADDR_VAR 0 9
40157: PUSH
40158: LD_VAR 0 12
40162: PUSH
40163: FOR_IN
40164: IFFALSE 40356
// repeat InitHc ;
40166: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40170: LD_VAR 0 9
40174: PPUSH
40175: CALL_OW 266
40179: PUSH
40180: LD_INT 5
40182: EQUAL
40183: IFFALSE 40253
// begin if UnitsInside ( j ) < 3 then
40185: LD_VAR 0 9
40189: PPUSH
40190: CALL_OW 313
40194: PUSH
40195: LD_INT 3
40197: LESS
40198: IFFALSE 40234
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40200: LD_INT 0
40202: PPUSH
40203: LD_INT 5
40205: PUSH
40206: LD_INT 8
40208: PUSH
40209: LD_INT 9
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: PUSH
40217: LD_VAR 0 17
40221: ARRAY
40222: PPUSH
40223: LD_VAR 0 4
40227: PPUSH
40228: CALL_OW 380
40232: GO 40251
// PrepareHuman ( false , i , skill ) ;
40234: LD_INT 0
40236: PPUSH
40237: LD_VAR 0 8
40241: PPUSH
40242: LD_VAR 0 4
40246: PPUSH
40247: CALL_OW 380
// end else
40251: GO 40270
// PrepareHuman ( false , i , skill ) ;
40253: LD_INT 0
40255: PPUSH
40256: LD_VAR 0 8
40260: PPUSH
40261: LD_VAR 0 4
40265: PPUSH
40266: CALL_OW 380
// un := CreateHuman ;
40270: LD_ADDR_VAR 0 14
40274: PUSH
40275: CALL_OW 44
40279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40280: LD_ADDR_VAR 0 7
40284: PUSH
40285: LD_VAR 0 7
40289: PPUSH
40290: LD_INT 1
40292: PPUSH
40293: LD_VAR 0 14
40297: PPUSH
40298: CALL_OW 2
40302: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40303: LD_VAR 0 14
40307: PPUSH
40308: LD_VAR 0 9
40312: PPUSH
40313: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40317: LD_VAR 0 9
40321: PPUSH
40322: CALL_OW 313
40326: PUSH
40327: LD_INT 6
40329: EQUAL
40330: PUSH
40331: LD_VAR 0 9
40335: PPUSH
40336: CALL_OW 266
40340: PUSH
40341: LD_INT 32
40343: PUSH
40344: LD_INT 31
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: IN
40351: OR
40352: IFFALSE 40166
40354: GO 40163
40356: POP
40357: POP
// end else
40358: GO 40740
// for j = 1 to x do
40360: LD_ADDR_VAR 0 9
40364: PUSH
40365: DOUBLE
40366: LD_INT 1
40368: DEC
40369: ST_TO_ADDR
40370: LD_VAR 0 13
40374: PUSH
40375: FOR_TO
40376: IFFALSE 40738
// begin InitHc ;
40378: CALL_OW 19
// if not f then
40382: LD_VAR 0 12
40386: NOT
40387: IFFALSE 40476
// begin PrepareHuman ( false , i , skill ) ;
40389: LD_INT 0
40391: PPUSH
40392: LD_VAR 0 8
40396: PPUSH
40397: LD_VAR 0 4
40401: PPUSH
40402: CALL_OW 380
// un := CreateHuman ;
40406: LD_ADDR_VAR 0 14
40410: PUSH
40411: CALL_OW 44
40415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40416: LD_ADDR_VAR 0 7
40420: PUSH
40421: LD_VAR 0 7
40425: PPUSH
40426: LD_INT 1
40428: PPUSH
40429: LD_VAR 0 14
40433: PPUSH
40434: CALL_OW 2
40438: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40439: LD_VAR 0 14
40443: PPUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL_OW 250
40453: PPUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: CALL_OW 251
40463: PPUSH
40464: LD_INT 10
40466: PPUSH
40467: LD_INT 0
40469: PPUSH
40470: CALL_OW 50
// continue ;
40474: GO 40375
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40476: LD_VAR 0 12
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PPUSH
40485: CALL_OW 313
40489: PUSH
40490: LD_VAR 0 12
40494: PUSH
40495: LD_INT 1
40497: ARRAY
40498: PPUSH
40499: CALL_OW 266
40503: PUSH
40504: LD_INT 32
40506: PUSH
40507: LD_INT 31
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: IN
40514: AND
40515: PUSH
40516: LD_VAR 0 12
40520: PUSH
40521: LD_INT 1
40523: ARRAY
40524: PPUSH
40525: CALL_OW 313
40529: PUSH
40530: LD_INT 6
40532: EQUAL
40533: OR
40534: IFFALSE 40554
// f := Delete ( f , 1 ) ;
40536: LD_ADDR_VAR 0 12
40540: PUSH
40541: LD_VAR 0 12
40545: PPUSH
40546: LD_INT 1
40548: PPUSH
40549: CALL_OW 3
40553: ST_TO_ADDR
// if not f then
40554: LD_VAR 0 12
40558: NOT
40559: IFFALSE 40577
// begin x := x + 2 ;
40561: LD_ADDR_VAR 0 13
40565: PUSH
40566: LD_VAR 0 13
40570: PUSH
40571: LD_INT 2
40573: PLUS
40574: ST_TO_ADDR
// continue ;
40575: GO 40375
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40577: LD_VAR 0 12
40581: PUSH
40582: LD_INT 1
40584: ARRAY
40585: PPUSH
40586: CALL_OW 266
40590: PUSH
40591: LD_INT 5
40593: EQUAL
40594: IFFALSE 40668
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40596: LD_VAR 0 12
40600: PUSH
40601: LD_INT 1
40603: ARRAY
40604: PPUSH
40605: CALL_OW 313
40609: PUSH
40610: LD_INT 3
40612: LESS
40613: IFFALSE 40649
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40615: LD_INT 0
40617: PPUSH
40618: LD_INT 5
40620: PUSH
40621: LD_INT 8
40623: PUSH
40624: LD_INT 9
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: PUSH
40632: LD_VAR 0 17
40636: ARRAY
40637: PPUSH
40638: LD_VAR 0 4
40642: PPUSH
40643: CALL_OW 380
40647: GO 40666
// PrepareHuman ( false , i , skill ) ;
40649: LD_INT 0
40651: PPUSH
40652: LD_VAR 0 8
40656: PPUSH
40657: LD_VAR 0 4
40661: PPUSH
40662: CALL_OW 380
// end else
40666: GO 40685
// PrepareHuman ( false , i , skill ) ;
40668: LD_INT 0
40670: PPUSH
40671: LD_VAR 0 8
40675: PPUSH
40676: LD_VAR 0 4
40680: PPUSH
40681: CALL_OW 380
// un := CreateHuman ;
40685: LD_ADDR_VAR 0 14
40689: PUSH
40690: CALL_OW 44
40694: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40695: LD_ADDR_VAR 0 7
40699: PUSH
40700: LD_VAR 0 7
40704: PPUSH
40705: LD_INT 1
40707: PPUSH
40708: LD_VAR 0 14
40712: PPUSH
40713: CALL_OW 2
40717: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40718: LD_VAR 0 14
40722: PPUSH
40723: LD_VAR 0 12
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: CALL_OW 52
// end ;
40736: GO 40375
40738: POP
40739: POP
// end ;
40740: GO 39677
40742: POP
40743: POP
// result := result ^ buildings ;
40744: LD_ADDR_VAR 0 7
40748: PUSH
40749: LD_VAR 0 7
40753: PUSH
40754: LD_VAR 0 18
40758: ADD
40759: ST_TO_ADDR
// end else
40760: GO 40903
// begin for i = 1 to personel do
40762: LD_ADDR_VAR 0 8
40766: PUSH
40767: DOUBLE
40768: LD_INT 1
40770: DEC
40771: ST_TO_ADDR
40772: LD_VAR 0 6
40776: PUSH
40777: FOR_TO
40778: IFFALSE 40901
// begin if i > 4 then
40780: LD_VAR 0 8
40784: PUSH
40785: LD_INT 4
40787: GREATER
40788: IFFALSE 40792
// break ;
40790: GO 40901
// x := personel [ i ] ;
40792: LD_ADDR_VAR 0 13
40796: PUSH
40797: LD_VAR 0 6
40801: PUSH
40802: LD_VAR 0 8
40806: ARRAY
40807: ST_TO_ADDR
// if x = - 1 then
40808: LD_VAR 0 13
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: EQUAL
40817: IFFALSE 40821
// continue ;
40819: GO 40777
// PrepareHuman ( false , i , skill ) ;
40821: LD_INT 0
40823: PPUSH
40824: LD_VAR 0 8
40828: PPUSH
40829: LD_VAR 0 4
40833: PPUSH
40834: CALL_OW 380
// un := CreateHuman ;
40838: LD_ADDR_VAR 0 14
40842: PUSH
40843: CALL_OW 44
40847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40848: LD_VAR 0 14
40852: PPUSH
40853: LD_VAR 0 1
40857: PPUSH
40858: CALL_OW 250
40862: PPUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 251
40872: PPUSH
40873: LD_INT 10
40875: PPUSH
40876: LD_INT 0
40878: PPUSH
40879: CALL_OW 50
// result := result ^ un ;
40883: LD_ADDR_VAR 0 7
40887: PUSH
40888: LD_VAR 0 7
40892: PUSH
40893: LD_VAR 0 14
40897: ADD
40898: ST_TO_ADDR
// end ;
40899: GO 40777
40901: POP
40902: POP
// end ; end ;
40903: LD_VAR 0 7
40907: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40908: LD_INT 0
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
// result := false ;
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_INT 0
40933: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40934: LD_VAR 0 1
40938: NOT
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 266
40949: PUSH
40950: LD_INT 32
40952: PUSH
40953: LD_INT 33
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: IN
40960: NOT
40961: OR
40962: IFFALSE 40966
// exit ;
40964: GO 42075
// nat := GetNation ( tower ) ;
40966: LD_ADDR_VAR 0 12
40970: PUSH
40971: LD_VAR 0 1
40975: PPUSH
40976: CALL_OW 248
40980: ST_TO_ADDR
// side := GetSide ( tower ) ;
40981: LD_ADDR_VAR 0 16
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 255
40995: ST_TO_ADDR
// x := GetX ( tower ) ;
40996: LD_ADDR_VAR 0 10
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 250
41010: ST_TO_ADDR
// y := GetY ( tower ) ;
41011: LD_ADDR_VAR 0 11
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 251
41025: ST_TO_ADDR
// if not x or not y then
41026: LD_VAR 0 10
41030: NOT
41031: PUSH
41032: LD_VAR 0 11
41036: NOT
41037: OR
41038: IFFALSE 41042
// exit ;
41040: GO 42075
// weapon := 0 ;
41042: LD_ADDR_VAR 0 18
41046: PUSH
41047: LD_INT 0
41049: ST_TO_ADDR
// fac_list := [ ] ;
41050: LD_ADDR_VAR 0 17
41054: PUSH
41055: EMPTY
41056: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41057: LD_ADDR_VAR 0 6
41061: PUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 274
41071: PPUSH
41072: LD_VAR 0 2
41076: PPUSH
41077: LD_INT 0
41079: PPUSH
41080: CALL 38646 0 3
41084: PPUSH
41085: LD_INT 30
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PPUSH
41095: CALL_OW 72
41099: ST_TO_ADDR
// if not factories then
41100: LD_VAR 0 6
41104: NOT
41105: IFFALSE 41109
// exit ;
41107: GO 42075
// for i in factories do
41109: LD_ADDR_VAR 0 8
41113: PUSH
41114: LD_VAR 0 6
41118: PUSH
41119: FOR_IN
41120: IFFALSE 41145
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41122: LD_ADDR_VAR 0 17
41126: PUSH
41127: LD_VAR 0 17
41131: PUSH
41132: LD_VAR 0 8
41136: PPUSH
41137: CALL_OW 478
41141: UNION
41142: ST_TO_ADDR
41143: GO 41119
41145: POP
41146: POP
// if not fac_list then
41147: LD_VAR 0 17
41151: NOT
41152: IFFALSE 41156
// exit ;
41154: GO 42075
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41156: LD_ADDR_VAR 0 5
41160: PUSH
41161: LD_INT 4
41163: PUSH
41164: LD_INT 5
41166: PUSH
41167: LD_INT 9
41169: PUSH
41170: LD_INT 10
41172: PUSH
41173: LD_INT 6
41175: PUSH
41176: LD_INT 7
41178: PUSH
41179: LD_INT 11
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 27
41193: PUSH
41194: LD_INT 28
41196: PUSH
41197: LD_INT 26
41199: PUSH
41200: LD_INT 30
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 43
41211: PUSH
41212: LD_INT 44
41214: PUSH
41215: LD_INT 46
41217: PUSH
41218: LD_INT 45
41220: PUSH
41221: LD_INT 47
41223: PUSH
41224: LD_INT 49
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: PUSH
41240: LD_VAR 0 12
41244: ARRAY
41245: ST_TO_ADDR
// list := list isect fac_list ;
41246: LD_ADDR_VAR 0 5
41250: PUSH
41251: LD_VAR 0 5
41255: PUSH
41256: LD_VAR 0 17
41260: ISECT
41261: ST_TO_ADDR
// if not list then
41262: LD_VAR 0 5
41266: NOT
41267: IFFALSE 41271
// exit ;
41269: GO 42075
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41271: LD_VAR 0 12
41275: PUSH
41276: LD_INT 3
41278: EQUAL
41279: PUSH
41280: LD_INT 49
41282: PUSH
41283: LD_VAR 0 5
41287: IN
41288: AND
41289: PUSH
41290: LD_INT 31
41292: PPUSH
41293: LD_VAR 0 16
41297: PPUSH
41298: CALL_OW 321
41302: PUSH
41303: LD_INT 2
41305: EQUAL
41306: AND
41307: IFFALSE 41367
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41309: LD_INT 22
41311: PUSH
41312: LD_VAR 0 16
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 35
41323: PUSH
41324: LD_INT 49
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 91
41333: PUSH
41334: LD_VAR 0 1
41338: PUSH
41339: LD_INT 10
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: PPUSH
41352: CALL_OW 69
41356: NOT
41357: IFFALSE 41367
// weapon := ru_time_lapser ;
41359: LD_ADDR_VAR 0 18
41363: PUSH
41364: LD_INT 49
41366: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41367: LD_VAR 0 12
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: IN
41382: PUSH
41383: LD_INT 11
41385: PUSH
41386: LD_VAR 0 5
41390: IN
41391: PUSH
41392: LD_INT 30
41394: PUSH
41395: LD_VAR 0 5
41399: IN
41400: OR
41401: AND
41402: PUSH
41403: LD_INT 6
41405: PPUSH
41406: LD_VAR 0 16
41410: PPUSH
41411: CALL_OW 321
41415: PUSH
41416: LD_INT 2
41418: EQUAL
41419: AND
41420: IFFALSE 41585
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41422: LD_INT 22
41424: PUSH
41425: LD_VAR 0 16
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: LD_INT 35
41439: PUSH
41440: LD_INT 11
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 35
41449: PUSH
41450: LD_INT 30
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 91
41464: PUSH
41465: LD_VAR 0 1
41469: PUSH
41470: LD_INT 18
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: PPUSH
41483: CALL_OW 69
41487: NOT
41488: PUSH
41489: LD_INT 22
41491: PUSH
41492: LD_VAR 0 16
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 30
41506: PUSH
41507: LD_INT 32
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 30
41516: PUSH
41517: LD_INT 33
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 91
41531: PUSH
41532: LD_VAR 0 1
41536: PUSH
41537: LD_INT 12
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: PPUSH
41553: CALL_OW 69
41557: PUSH
41558: LD_INT 2
41560: GREATER
41561: AND
41562: IFFALSE 41585
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41564: LD_ADDR_VAR 0 18
41568: PUSH
41569: LD_INT 11
41571: PUSH
41572: LD_INT 30
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_VAR 0 12
41583: ARRAY
41584: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41585: LD_VAR 0 18
41589: NOT
41590: PUSH
41591: LD_INT 40
41593: PPUSH
41594: LD_VAR 0 16
41598: PPUSH
41599: CALL_OW 321
41603: PUSH
41604: LD_INT 2
41606: EQUAL
41607: AND
41608: PUSH
41609: LD_INT 7
41611: PUSH
41612: LD_VAR 0 5
41616: IN
41617: PUSH
41618: LD_INT 28
41620: PUSH
41621: LD_VAR 0 5
41625: IN
41626: OR
41627: PUSH
41628: LD_INT 45
41630: PUSH
41631: LD_VAR 0 5
41635: IN
41636: OR
41637: AND
41638: IFFALSE 41892
// begin hex := GetHexInfo ( x , y ) ;
41640: LD_ADDR_VAR 0 4
41644: PUSH
41645: LD_VAR 0 10
41649: PPUSH
41650: LD_VAR 0 11
41654: PPUSH
41655: CALL_OW 546
41659: ST_TO_ADDR
// if hex [ 1 ] then
41660: LD_VAR 0 4
41664: PUSH
41665: LD_INT 1
41667: ARRAY
41668: IFFALSE 41672
// exit ;
41670: GO 42075
// height := hex [ 2 ] ;
41672: LD_ADDR_VAR 0 15
41676: PUSH
41677: LD_VAR 0 4
41681: PUSH
41682: LD_INT 2
41684: ARRAY
41685: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41686: LD_ADDR_VAR 0 14
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 3
41699: PUSH
41700: LD_INT 5
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
// for i in tmp do
41709: LD_ADDR_VAR 0 8
41713: PUSH
41714: LD_VAR 0 14
41718: PUSH
41719: FOR_IN
41720: IFFALSE 41890
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41722: LD_ADDR_VAR 0 9
41726: PUSH
41727: LD_VAR 0 10
41731: PPUSH
41732: LD_VAR 0 8
41736: PPUSH
41737: LD_INT 5
41739: PPUSH
41740: CALL_OW 272
41744: PUSH
41745: LD_VAR 0 11
41749: PPUSH
41750: LD_VAR 0 8
41754: PPUSH
41755: LD_INT 5
41757: PPUSH
41758: CALL_OW 273
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41767: LD_VAR 0 9
41771: PUSH
41772: LD_INT 1
41774: ARRAY
41775: PPUSH
41776: LD_VAR 0 9
41780: PUSH
41781: LD_INT 2
41783: ARRAY
41784: PPUSH
41785: CALL_OW 488
41789: IFFALSE 41888
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41791: LD_ADDR_VAR 0 4
41795: PUSH
41796: LD_VAR 0 9
41800: PUSH
41801: LD_INT 1
41803: ARRAY
41804: PPUSH
41805: LD_VAR 0 9
41809: PUSH
41810: LD_INT 2
41812: ARRAY
41813: PPUSH
41814: CALL_OW 546
41818: ST_TO_ADDR
// if hex [ 1 ] then
41819: LD_VAR 0 4
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: IFFALSE 41831
// continue ;
41829: GO 41719
// h := hex [ 2 ] ;
41831: LD_ADDR_VAR 0 13
41835: PUSH
41836: LD_VAR 0 4
41840: PUSH
41841: LD_INT 2
41843: ARRAY
41844: ST_TO_ADDR
// if h + 7 < height then
41845: LD_VAR 0 13
41849: PUSH
41850: LD_INT 7
41852: PLUS
41853: PUSH
41854: LD_VAR 0 15
41858: LESS
41859: IFFALSE 41888
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41861: LD_ADDR_VAR 0 18
41865: PUSH
41866: LD_INT 7
41868: PUSH
41869: LD_INT 28
41871: PUSH
41872: LD_INT 45
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: PUSH
41880: LD_VAR 0 12
41884: ARRAY
41885: ST_TO_ADDR
// break ;
41886: GO 41890
// end ; end ; end ;
41888: GO 41719
41890: POP
41891: POP
// end ; if not weapon then
41892: LD_VAR 0 18
41896: NOT
41897: IFFALSE 41957
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41899: LD_ADDR_VAR 0 5
41903: PUSH
41904: LD_VAR 0 5
41908: PUSH
41909: LD_INT 11
41911: PUSH
41912: LD_INT 30
41914: PUSH
41915: LD_INT 49
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: DIFF
41923: ST_TO_ADDR
// if not list then
41924: LD_VAR 0 5
41928: NOT
41929: IFFALSE 41933
// exit ;
41931: GO 42075
// weapon := list [ rand ( 1 , list ) ] ;
41933: LD_ADDR_VAR 0 18
41937: PUSH
41938: LD_VAR 0 5
41942: PUSH
41943: LD_INT 1
41945: PPUSH
41946: LD_VAR 0 5
41950: PPUSH
41951: CALL_OW 12
41955: ARRAY
41956: ST_TO_ADDR
// end ; if weapon then
41957: LD_VAR 0 18
41961: IFFALSE 42075
// begin tmp := CostOfWeapon ( weapon ) ;
41963: LD_ADDR_VAR 0 14
41967: PUSH
41968: LD_VAR 0 18
41972: PPUSH
41973: CALL_OW 451
41977: ST_TO_ADDR
// j := GetBase ( tower ) ;
41978: LD_ADDR_VAR 0 9
41982: PUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 274
41992: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41993: LD_VAR 0 9
41997: PPUSH
41998: LD_INT 1
42000: PPUSH
42001: CALL_OW 275
42005: PUSH
42006: LD_VAR 0 14
42010: PUSH
42011: LD_INT 1
42013: ARRAY
42014: GREATEREQUAL
42015: PUSH
42016: LD_VAR 0 9
42020: PPUSH
42021: LD_INT 2
42023: PPUSH
42024: CALL_OW 275
42028: PUSH
42029: LD_VAR 0 14
42033: PUSH
42034: LD_INT 2
42036: ARRAY
42037: GREATEREQUAL
42038: AND
42039: PUSH
42040: LD_VAR 0 9
42044: PPUSH
42045: LD_INT 3
42047: PPUSH
42048: CALL_OW 275
42052: PUSH
42053: LD_VAR 0 14
42057: PUSH
42058: LD_INT 3
42060: ARRAY
42061: GREATEREQUAL
42062: AND
42063: IFFALSE 42075
// result := weapon ;
42065: LD_ADDR_VAR 0 3
42069: PUSH
42070: LD_VAR 0 18
42074: ST_TO_ADDR
// end ; end ;
42075: LD_VAR 0 3
42079: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42080: LD_INT 0
42082: PPUSH
42083: PPUSH
// result := true ;
42084: LD_ADDR_VAR 0 3
42088: PUSH
42089: LD_INT 1
42091: ST_TO_ADDR
// if array1 = array2 then
42092: LD_VAR 0 1
42096: PUSH
42097: LD_VAR 0 2
42101: EQUAL
42102: IFFALSE 42162
// begin for i = 1 to array1 do
42104: LD_ADDR_VAR 0 4
42108: PUSH
42109: DOUBLE
42110: LD_INT 1
42112: DEC
42113: ST_TO_ADDR
42114: LD_VAR 0 1
42118: PUSH
42119: FOR_TO
42120: IFFALSE 42158
// if array1 [ i ] <> array2 [ i ] then
42122: LD_VAR 0 1
42126: PUSH
42127: LD_VAR 0 4
42131: ARRAY
42132: PUSH
42133: LD_VAR 0 2
42137: PUSH
42138: LD_VAR 0 4
42142: ARRAY
42143: NONEQUAL
42144: IFFALSE 42156
// begin result := false ;
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_INT 0
42153: ST_TO_ADDR
// break ;
42154: GO 42158
// end ;
42156: GO 42119
42158: POP
42159: POP
// end else
42160: GO 42170
// result := false ;
42162: LD_ADDR_VAR 0 3
42166: PUSH
42167: LD_INT 0
42169: ST_TO_ADDR
// end ;
42170: LD_VAR 0 3
42174: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42175: LD_INT 0
42177: PPUSH
42178: PPUSH
// if not array1 or not array2 then
42179: LD_VAR 0 1
42183: NOT
42184: PUSH
42185: LD_VAR 0 2
42189: NOT
42190: OR
42191: IFFALSE 42195
// exit ;
42193: GO 42259
// result := true ;
42195: LD_ADDR_VAR 0 3
42199: PUSH
42200: LD_INT 1
42202: ST_TO_ADDR
// for i = 1 to array1 do
42203: LD_ADDR_VAR 0 4
42207: PUSH
42208: DOUBLE
42209: LD_INT 1
42211: DEC
42212: ST_TO_ADDR
42213: LD_VAR 0 1
42217: PUSH
42218: FOR_TO
42219: IFFALSE 42257
// if array1 [ i ] <> array2 [ i ] then
42221: LD_VAR 0 1
42225: PUSH
42226: LD_VAR 0 4
42230: ARRAY
42231: PUSH
42232: LD_VAR 0 2
42236: PUSH
42237: LD_VAR 0 4
42241: ARRAY
42242: NONEQUAL
42243: IFFALSE 42255
// begin result := false ;
42245: LD_ADDR_VAR 0 3
42249: PUSH
42250: LD_INT 0
42252: ST_TO_ADDR
// break ;
42253: GO 42257
// end ;
42255: GO 42218
42257: POP
42258: POP
// end ;
42259: LD_VAR 0 3
42263: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42264: LD_INT 0
42266: PPUSH
42267: PPUSH
42268: PPUSH
// pom := GetBase ( fac ) ;
42269: LD_ADDR_VAR 0 5
42273: PUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: CALL_OW 274
42283: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42284: LD_ADDR_VAR 0 4
42288: PUSH
42289: LD_VAR 0 2
42293: PUSH
42294: LD_INT 1
42296: ARRAY
42297: PPUSH
42298: LD_VAR 0 2
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: PPUSH
42307: LD_VAR 0 2
42311: PUSH
42312: LD_INT 3
42314: ARRAY
42315: PPUSH
42316: LD_VAR 0 2
42320: PUSH
42321: LD_INT 4
42323: ARRAY
42324: PPUSH
42325: CALL_OW 449
42329: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: LD_INT 1
42342: PPUSH
42343: CALL_OW 275
42347: PUSH
42348: LD_VAR 0 4
42352: PUSH
42353: LD_INT 1
42355: ARRAY
42356: GREATEREQUAL
42357: PUSH
42358: LD_VAR 0 5
42362: PPUSH
42363: LD_INT 2
42365: PPUSH
42366: CALL_OW 275
42370: PUSH
42371: LD_VAR 0 4
42375: PUSH
42376: LD_INT 2
42378: ARRAY
42379: GREATEREQUAL
42380: AND
42381: PUSH
42382: LD_VAR 0 5
42386: PPUSH
42387: LD_INT 3
42389: PPUSH
42390: CALL_OW 275
42394: PUSH
42395: LD_VAR 0 4
42399: PUSH
42400: LD_INT 3
42402: ARRAY
42403: GREATEREQUAL
42404: AND
42405: ST_TO_ADDR
// end ;
42406: LD_VAR 0 3
42410: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42411: LD_INT 0
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
// pom := GetBase ( building ) ;
42417: LD_ADDR_VAR 0 3
42421: PUSH
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 274
42431: ST_TO_ADDR
// if not pom then
42432: LD_VAR 0 3
42436: NOT
42437: IFFALSE 42441
// exit ;
42439: GO 42611
// btype := GetBType ( building ) ;
42441: LD_ADDR_VAR 0 5
42445: PUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 266
42455: ST_TO_ADDR
// if btype = b_armoury then
42456: LD_VAR 0 5
42460: PUSH
42461: LD_INT 4
42463: EQUAL
42464: IFFALSE 42474
// btype := b_barracks ;
42466: LD_ADDR_VAR 0 5
42470: PUSH
42471: LD_INT 5
42473: ST_TO_ADDR
// if btype = b_depot then
42474: LD_VAR 0 5
42478: PUSH
42479: LD_INT 0
42481: EQUAL
42482: IFFALSE 42492
// btype := b_warehouse ;
42484: LD_ADDR_VAR 0 5
42488: PUSH
42489: LD_INT 1
42491: ST_TO_ADDR
// if btype = b_workshop then
42492: LD_VAR 0 5
42496: PUSH
42497: LD_INT 2
42499: EQUAL
42500: IFFALSE 42510
// btype := b_factory ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: LD_INT 3
42509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42510: LD_ADDR_VAR 0 4
42514: PUSH
42515: LD_VAR 0 5
42519: PPUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 248
42529: PPUSH
42530: CALL_OW 450
42534: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42535: LD_ADDR_VAR 0 2
42539: PUSH
42540: LD_VAR 0 3
42544: PPUSH
42545: LD_INT 1
42547: PPUSH
42548: CALL_OW 275
42552: PUSH
42553: LD_VAR 0 4
42557: PUSH
42558: LD_INT 1
42560: ARRAY
42561: GREATEREQUAL
42562: PUSH
42563: LD_VAR 0 3
42567: PPUSH
42568: LD_INT 2
42570: PPUSH
42571: CALL_OW 275
42575: PUSH
42576: LD_VAR 0 4
42580: PUSH
42581: LD_INT 2
42583: ARRAY
42584: GREATEREQUAL
42585: AND
42586: PUSH
42587: LD_VAR 0 3
42591: PPUSH
42592: LD_INT 3
42594: PPUSH
42595: CALL_OW 275
42599: PUSH
42600: LD_VAR 0 4
42604: PUSH
42605: LD_INT 3
42607: ARRAY
42608: GREATEREQUAL
42609: AND
42610: ST_TO_ADDR
// end ;
42611: LD_VAR 0 2
42615: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42616: LD_INT 0
42618: PPUSH
42619: PPUSH
42620: PPUSH
// pom := GetBase ( building ) ;
42621: LD_ADDR_VAR 0 4
42625: PUSH
42626: LD_VAR 0 1
42630: PPUSH
42631: CALL_OW 274
42635: ST_TO_ADDR
// if not pom then
42636: LD_VAR 0 4
42640: NOT
42641: IFFALSE 42645
// exit ;
42643: GO 42746
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_VAR 0 2
42654: PPUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 248
42664: PPUSH
42665: CALL_OW 450
42669: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42670: LD_ADDR_VAR 0 3
42674: PUSH
42675: LD_VAR 0 4
42679: PPUSH
42680: LD_INT 1
42682: PPUSH
42683: CALL_OW 275
42687: PUSH
42688: LD_VAR 0 5
42692: PUSH
42693: LD_INT 1
42695: ARRAY
42696: GREATEREQUAL
42697: PUSH
42698: LD_VAR 0 4
42702: PPUSH
42703: LD_INT 2
42705: PPUSH
42706: CALL_OW 275
42710: PUSH
42711: LD_VAR 0 5
42715: PUSH
42716: LD_INT 2
42718: ARRAY
42719: GREATEREQUAL
42720: AND
42721: PUSH
42722: LD_VAR 0 4
42726: PPUSH
42727: LD_INT 3
42729: PPUSH
42730: CALL_OW 275
42734: PUSH
42735: LD_VAR 0 5
42739: PUSH
42740: LD_INT 3
42742: ARRAY
42743: GREATEREQUAL
42744: AND
42745: ST_TO_ADDR
// end ;
42746: LD_VAR 0 3
42750: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42751: LD_INT 0
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
// result := false ;
42764: LD_ADDR_VAR 0 8
42768: PUSH
42769: LD_INT 0
42771: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42772: LD_VAR 0 5
42776: NOT
42777: PUSH
42778: LD_VAR 0 1
42782: NOT
42783: OR
42784: PUSH
42785: LD_VAR 0 2
42789: NOT
42790: OR
42791: PUSH
42792: LD_VAR 0 3
42796: NOT
42797: OR
42798: IFFALSE 42802
// exit ;
42800: GO 43616
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42802: LD_ADDR_VAR 0 14
42806: PUSH
42807: LD_VAR 0 1
42811: PPUSH
42812: LD_VAR 0 2
42816: PPUSH
42817: LD_VAR 0 3
42821: PPUSH
42822: LD_VAR 0 4
42826: PPUSH
42827: LD_VAR 0 5
42831: PUSH
42832: LD_INT 1
42834: ARRAY
42835: PPUSH
42836: CALL_OW 248
42840: PPUSH
42841: LD_INT 0
42843: PPUSH
42844: CALL 44853 0 6
42848: ST_TO_ADDR
// if not hexes then
42849: LD_VAR 0 14
42853: NOT
42854: IFFALSE 42858
// exit ;
42856: GO 43616
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42858: LD_ADDR_VAR 0 17
42862: PUSH
42863: LD_VAR 0 5
42867: PPUSH
42868: LD_INT 22
42870: PUSH
42871: LD_VAR 0 13
42875: PPUSH
42876: CALL_OW 255
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: LD_INT 30
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 30
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PPUSH
42917: CALL_OW 72
42921: ST_TO_ADDR
// for i = 1 to hexes do
42922: LD_ADDR_VAR 0 9
42926: PUSH
42927: DOUBLE
42928: LD_INT 1
42930: DEC
42931: ST_TO_ADDR
42932: LD_VAR 0 14
42936: PUSH
42937: FOR_TO
42938: IFFALSE 43614
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42940: LD_ADDR_VAR 0 13
42944: PUSH
42945: LD_VAR 0 14
42949: PUSH
42950: LD_VAR 0 9
42954: ARRAY
42955: PUSH
42956: LD_INT 1
42958: ARRAY
42959: PPUSH
42960: LD_VAR 0 14
42964: PUSH
42965: LD_VAR 0 9
42969: ARRAY
42970: PUSH
42971: LD_INT 2
42973: ARRAY
42974: PPUSH
42975: CALL_OW 428
42979: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42980: LD_VAR 0 14
42984: PUSH
42985: LD_VAR 0 9
42989: ARRAY
42990: PUSH
42991: LD_INT 1
42993: ARRAY
42994: PPUSH
42995: LD_VAR 0 14
42999: PUSH
43000: LD_VAR 0 9
43004: ARRAY
43005: PUSH
43006: LD_INT 2
43008: ARRAY
43009: PPUSH
43010: CALL_OW 351
43014: PUSH
43015: LD_VAR 0 14
43019: PUSH
43020: LD_VAR 0 9
43024: ARRAY
43025: PUSH
43026: LD_INT 1
43028: ARRAY
43029: PPUSH
43030: LD_VAR 0 14
43034: PUSH
43035: LD_VAR 0 9
43039: ARRAY
43040: PUSH
43041: LD_INT 2
43043: ARRAY
43044: PPUSH
43045: CALL_OW 488
43049: NOT
43050: OR
43051: PUSH
43052: LD_VAR 0 13
43056: PPUSH
43057: CALL_OW 247
43061: PUSH
43062: LD_INT 3
43064: EQUAL
43065: OR
43066: IFFALSE 43072
// exit ;
43068: POP
43069: POP
43070: GO 43616
// if not tmp then
43072: LD_VAR 0 13
43076: NOT
43077: IFFALSE 43081
// continue ;
43079: GO 42937
// result := true ;
43081: LD_ADDR_VAR 0 8
43085: PUSH
43086: LD_INT 1
43088: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43089: LD_VAR 0 6
43093: PUSH
43094: LD_VAR 0 13
43098: PPUSH
43099: CALL_OW 247
43103: PUSH
43104: LD_INT 2
43106: EQUAL
43107: AND
43108: PUSH
43109: LD_VAR 0 13
43113: PPUSH
43114: CALL_OW 263
43118: PUSH
43119: LD_INT 1
43121: EQUAL
43122: AND
43123: IFFALSE 43287
// begin if IsDrivenBy ( tmp ) then
43125: LD_VAR 0 13
43129: PPUSH
43130: CALL_OW 311
43134: IFFALSE 43138
// continue ;
43136: GO 42937
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43138: LD_VAR 0 6
43142: PPUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 60
43148: PUSH
43149: EMPTY
43150: LIST
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: LD_INT 55
43161: PUSH
43162: EMPTY
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PPUSH
43173: CALL_OW 72
43177: IFFALSE 43285
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43179: LD_ADDR_VAR 0 18
43183: PUSH
43184: LD_VAR 0 6
43188: PPUSH
43189: LD_INT 3
43191: PUSH
43192: LD_INT 60
43194: PUSH
43195: EMPTY
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: LD_INT 55
43207: PUSH
43208: EMPTY
43209: LIST
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PPUSH
43219: CALL_OW 72
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: ST_TO_ADDR
// if IsInUnit ( driver ) then
43228: LD_VAR 0 18
43232: PPUSH
43233: CALL_OW 310
43237: IFFALSE 43248
// ComExit ( driver ) ;
43239: LD_VAR 0 18
43243: PPUSH
43244: CALL 68037 0 1
// AddComEnterUnit ( driver , tmp ) ;
43248: LD_VAR 0 18
43252: PPUSH
43253: LD_VAR 0 13
43257: PPUSH
43258: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43262: LD_VAR 0 18
43266: PPUSH
43267: LD_VAR 0 7
43271: PPUSH
43272: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43276: LD_VAR 0 18
43280: PPUSH
43281: CALL_OW 181
// end ; continue ;
43285: GO 42937
// end ; if not cleaners or not tmp in cleaners then
43287: LD_VAR 0 6
43291: NOT
43292: PUSH
43293: LD_VAR 0 13
43297: PUSH
43298: LD_VAR 0 6
43302: IN
43303: NOT
43304: OR
43305: IFFALSE 43612
// begin if dep then
43307: LD_VAR 0 17
43311: IFFALSE 43447
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43313: LD_ADDR_VAR 0 16
43317: PUSH
43318: LD_VAR 0 17
43322: PUSH
43323: LD_INT 1
43325: ARRAY
43326: PPUSH
43327: CALL_OW 250
43331: PPUSH
43332: LD_VAR 0 17
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: PPUSH
43341: CALL_OW 254
43345: PPUSH
43346: LD_INT 5
43348: PPUSH
43349: CALL_OW 272
43353: PUSH
43354: LD_VAR 0 17
43358: PUSH
43359: LD_INT 1
43361: ARRAY
43362: PPUSH
43363: CALL_OW 251
43367: PPUSH
43368: LD_VAR 0 17
43372: PUSH
43373: LD_INT 1
43375: ARRAY
43376: PPUSH
43377: CALL_OW 254
43381: PPUSH
43382: LD_INT 5
43384: PPUSH
43385: CALL_OW 273
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43394: LD_VAR 0 16
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: PPUSH
43403: LD_VAR 0 16
43407: PUSH
43408: LD_INT 2
43410: ARRAY
43411: PPUSH
43412: CALL_OW 488
43416: IFFALSE 43447
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43418: LD_VAR 0 13
43422: PPUSH
43423: LD_VAR 0 16
43427: PUSH
43428: LD_INT 1
43430: ARRAY
43431: PPUSH
43432: LD_VAR 0 16
43436: PUSH
43437: LD_INT 2
43439: ARRAY
43440: PPUSH
43441: CALL_OW 111
// continue ;
43445: GO 42937
// end ; end ; r := GetDir ( tmp ) ;
43447: LD_ADDR_VAR 0 15
43451: PUSH
43452: LD_VAR 0 13
43456: PPUSH
43457: CALL_OW 254
43461: ST_TO_ADDR
// if r = 5 then
43462: LD_VAR 0 15
43466: PUSH
43467: LD_INT 5
43469: EQUAL
43470: IFFALSE 43480
// r := 0 ;
43472: LD_ADDR_VAR 0 15
43476: PUSH
43477: LD_INT 0
43479: ST_TO_ADDR
// for j = r to 5 do
43480: LD_ADDR_VAR 0 10
43484: PUSH
43485: DOUBLE
43486: LD_VAR 0 15
43490: DEC
43491: ST_TO_ADDR
43492: LD_INT 5
43494: PUSH
43495: FOR_TO
43496: IFFALSE 43610
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43498: LD_ADDR_VAR 0 11
43502: PUSH
43503: LD_VAR 0 13
43507: PPUSH
43508: CALL_OW 250
43512: PPUSH
43513: LD_VAR 0 10
43517: PPUSH
43518: LD_INT 2
43520: PPUSH
43521: CALL_OW 272
43525: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43526: LD_ADDR_VAR 0 12
43530: PUSH
43531: LD_VAR 0 13
43535: PPUSH
43536: CALL_OW 251
43540: PPUSH
43541: LD_VAR 0 10
43545: PPUSH
43546: LD_INT 2
43548: PPUSH
43549: CALL_OW 273
43553: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43554: LD_VAR 0 11
43558: PPUSH
43559: LD_VAR 0 12
43563: PPUSH
43564: CALL_OW 488
43568: PUSH
43569: LD_VAR 0 11
43573: PPUSH
43574: LD_VAR 0 12
43578: PPUSH
43579: CALL_OW 428
43583: NOT
43584: AND
43585: IFFALSE 43608
// begin ComMoveXY ( tmp , _x , _y ) ;
43587: LD_VAR 0 13
43591: PPUSH
43592: LD_VAR 0 11
43596: PPUSH
43597: LD_VAR 0 12
43601: PPUSH
43602: CALL_OW 111
// break ;
43606: GO 43610
// end ; end ;
43608: GO 43495
43610: POP
43611: POP
// end ; end ;
43612: GO 42937
43614: POP
43615: POP
// end ;
43616: LD_VAR 0 8
43620: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43621: LD_INT 0
43623: PPUSH
// result := true ;
43624: LD_ADDR_VAR 0 3
43628: PUSH
43629: LD_INT 1
43631: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43632: LD_VAR 0 2
43636: PUSH
43637: LD_INT 24
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43651
43643: LD_INT 33
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43651
43649: GO 43676
43651: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43652: LD_ADDR_VAR 0 3
43656: PUSH
43657: LD_INT 32
43659: PPUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: CALL_OW 321
43669: PUSH
43670: LD_INT 2
43672: EQUAL
43673: ST_TO_ADDR
43674: GO 43996
43676: LD_INT 20
43678: DOUBLE
43679: EQUAL
43680: IFTRUE 43684
43682: GO 43709
43684: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43685: LD_ADDR_VAR 0 3
43689: PUSH
43690: LD_INT 6
43692: PPUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: CALL_OW 321
43702: PUSH
43703: LD_INT 2
43705: EQUAL
43706: ST_TO_ADDR
43707: GO 43996
43709: LD_INT 22
43711: DOUBLE
43712: EQUAL
43713: IFTRUE 43723
43715: LD_INT 36
43717: DOUBLE
43718: EQUAL
43719: IFTRUE 43723
43721: GO 43748
43723: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43724: LD_ADDR_VAR 0 3
43728: PUSH
43729: LD_INT 15
43731: PPUSH
43732: LD_VAR 0 1
43736: PPUSH
43737: CALL_OW 321
43741: PUSH
43742: LD_INT 2
43744: EQUAL
43745: ST_TO_ADDR
43746: GO 43996
43748: LD_INT 30
43750: DOUBLE
43751: EQUAL
43752: IFTRUE 43756
43754: GO 43781
43756: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43757: LD_ADDR_VAR 0 3
43761: PUSH
43762: LD_INT 20
43764: PPUSH
43765: LD_VAR 0 1
43769: PPUSH
43770: CALL_OW 321
43774: PUSH
43775: LD_INT 2
43777: EQUAL
43778: ST_TO_ADDR
43779: GO 43996
43781: LD_INT 28
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43795
43787: LD_INT 21
43789: DOUBLE
43790: EQUAL
43791: IFTRUE 43795
43793: GO 43820
43795: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43796: LD_ADDR_VAR 0 3
43800: PUSH
43801: LD_INT 21
43803: PPUSH
43804: LD_VAR 0 1
43808: PPUSH
43809: CALL_OW 321
43813: PUSH
43814: LD_INT 2
43816: EQUAL
43817: ST_TO_ADDR
43818: GO 43996
43820: LD_INT 16
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 43855
43828: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43829: LD_ADDR_VAR 0 3
43833: PUSH
43834: LD_EXP 55
43838: PPUSH
43839: LD_VAR 0 1
43843: PPUSH
43844: CALL_OW 321
43848: PUSH
43849: LD_INT 2
43851: EQUAL
43852: ST_TO_ADDR
43853: GO 43996
43855: LD_INT 19
43857: DOUBLE
43858: EQUAL
43859: IFTRUE 43869
43861: LD_INT 23
43863: DOUBLE
43864: EQUAL
43865: IFTRUE 43869
43867: GO 43896
43869: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_EXP 54
43879: PPUSH
43880: LD_VAR 0 1
43884: PPUSH
43885: CALL_OW 321
43889: PUSH
43890: LD_INT 2
43892: EQUAL
43893: ST_TO_ADDR
43894: GO 43996
43896: LD_INT 17
43898: DOUBLE
43899: EQUAL
43900: IFTRUE 43904
43902: GO 43929
43904: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43905: LD_ADDR_VAR 0 3
43909: PUSH
43910: LD_INT 39
43912: PPUSH
43913: LD_VAR 0 1
43917: PPUSH
43918: CALL_OW 321
43922: PUSH
43923: LD_INT 2
43925: EQUAL
43926: ST_TO_ADDR
43927: GO 43996
43929: LD_INT 18
43931: DOUBLE
43932: EQUAL
43933: IFTRUE 43937
43935: GO 43962
43937: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: LD_INT 40
43945: PPUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 321
43955: PUSH
43956: LD_INT 2
43958: EQUAL
43959: ST_TO_ADDR
43960: GO 43996
43962: LD_INT 27
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 43995
43970: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_INT 35
43978: PPUSH
43979: LD_VAR 0 1
43983: PPUSH
43984: CALL_OW 321
43988: PUSH
43989: LD_INT 2
43991: EQUAL
43992: ST_TO_ADDR
43993: GO 43996
43995: POP
// end ;
43996: LD_VAR 0 3
44000: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44001: LD_INT 0
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
// result := false ;
44014: LD_ADDR_VAR 0 6
44018: PUSH
44019: LD_INT 0
44021: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44022: LD_VAR 0 1
44026: NOT
44027: PUSH
44028: LD_VAR 0 1
44032: PPUSH
44033: CALL_OW 266
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: IN
44048: NOT
44049: OR
44050: PUSH
44051: LD_VAR 0 2
44055: NOT
44056: OR
44057: PUSH
44058: LD_VAR 0 5
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 4
44077: PUSH
44078: LD_INT 5
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: IN
44089: NOT
44090: OR
44091: PUSH
44092: LD_VAR 0 3
44096: PPUSH
44097: LD_VAR 0 4
44101: PPUSH
44102: CALL_OW 488
44106: NOT
44107: OR
44108: IFFALSE 44112
// exit ;
44110: GO 44848
// side := GetSide ( depot ) ;
44112: LD_ADDR_VAR 0 9
44116: PUSH
44117: LD_VAR 0 1
44121: PPUSH
44122: CALL_OW 255
44126: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44127: LD_VAR 0 9
44131: PPUSH
44132: LD_VAR 0 2
44136: PPUSH
44137: CALL 43621 0 2
44141: NOT
44142: IFFALSE 44146
// exit ;
44144: GO 44848
// pom := GetBase ( depot ) ;
44146: LD_ADDR_VAR 0 10
44150: PUSH
44151: LD_VAR 0 1
44155: PPUSH
44156: CALL_OW 274
44160: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44161: LD_ADDR_VAR 0 11
44165: PUSH
44166: LD_VAR 0 2
44170: PPUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 248
44180: PPUSH
44181: CALL_OW 450
44185: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44186: LD_VAR 0 10
44190: PPUSH
44191: LD_INT 1
44193: PPUSH
44194: CALL_OW 275
44198: PUSH
44199: LD_VAR 0 11
44203: PUSH
44204: LD_INT 1
44206: ARRAY
44207: GREATEREQUAL
44208: PUSH
44209: LD_VAR 0 10
44213: PPUSH
44214: LD_INT 2
44216: PPUSH
44217: CALL_OW 275
44221: PUSH
44222: LD_VAR 0 11
44226: PUSH
44227: LD_INT 2
44229: ARRAY
44230: GREATEREQUAL
44231: AND
44232: PUSH
44233: LD_VAR 0 10
44237: PPUSH
44238: LD_INT 3
44240: PPUSH
44241: CALL_OW 275
44245: PUSH
44246: LD_VAR 0 11
44250: PUSH
44251: LD_INT 3
44253: ARRAY
44254: GREATEREQUAL
44255: AND
44256: NOT
44257: IFFALSE 44261
// exit ;
44259: GO 44848
// if GetBType ( depot ) = b_depot then
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 266
44270: PUSH
44271: LD_INT 0
44273: EQUAL
44274: IFFALSE 44286
// dist := 28 else
44276: LD_ADDR_VAR 0 14
44280: PUSH
44281: LD_INT 28
44283: ST_TO_ADDR
44284: GO 44294
// dist := 36 ;
44286: LD_ADDR_VAR 0 14
44290: PUSH
44291: LD_INT 36
44293: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44294: LD_VAR 0 1
44298: PPUSH
44299: LD_VAR 0 3
44303: PPUSH
44304: LD_VAR 0 4
44308: PPUSH
44309: CALL_OW 297
44313: PUSH
44314: LD_VAR 0 14
44318: GREATER
44319: IFFALSE 44323
// exit ;
44321: GO 44848
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44323: LD_ADDR_VAR 0 12
44327: PUSH
44328: LD_VAR 0 2
44332: PPUSH
44333: LD_VAR 0 3
44337: PPUSH
44338: LD_VAR 0 4
44342: PPUSH
44343: LD_VAR 0 5
44347: PPUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 248
44357: PPUSH
44358: LD_INT 0
44360: PPUSH
44361: CALL 44853 0 6
44365: ST_TO_ADDR
// if not hexes then
44366: LD_VAR 0 12
44370: NOT
44371: IFFALSE 44375
// exit ;
44373: GO 44848
// hex := GetHexInfo ( x , y ) ;
44375: LD_ADDR_VAR 0 15
44379: PUSH
44380: LD_VAR 0 3
44384: PPUSH
44385: LD_VAR 0 4
44389: PPUSH
44390: CALL_OW 546
44394: ST_TO_ADDR
// if hex [ 1 ] then
44395: LD_VAR 0 15
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: IFFALSE 44407
// exit ;
44405: GO 44848
// height := hex [ 2 ] ;
44407: LD_ADDR_VAR 0 13
44411: PUSH
44412: LD_VAR 0 15
44416: PUSH
44417: LD_INT 2
44419: ARRAY
44420: ST_TO_ADDR
// for i = 1 to hexes do
44421: LD_ADDR_VAR 0 7
44425: PUSH
44426: DOUBLE
44427: LD_INT 1
44429: DEC
44430: ST_TO_ADDR
44431: LD_VAR 0 12
44435: PUSH
44436: FOR_TO
44437: IFFALSE 44767
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44439: LD_VAR 0 12
44443: PUSH
44444: LD_VAR 0 7
44448: ARRAY
44449: PUSH
44450: LD_INT 1
44452: ARRAY
44453: PPUSH
44454: LD_VAR 0 12
44458: PUSH
44459: LD_VAR 0 7
44463: ARRAY
44464: PUSH
44465: LD_INT 2
44467: ARRAY
44468: PPUSH
44469: CALL_OW 488
44473: NOT
44474: PUSH
44475: LD_VAR 0 12
44479: PUSH
44480: LD_VAR 0 7
44484: ARRAY
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: PPUSH
44490: LD_VAR 0 12
44494: PUSH
44495: LD_VAR 0 7
44499: ARRAY
44500: PUSH
44501: LD_INT 2
44503: ARRAY
44504: PPUSH
44505: CALL_OW 428
44509: PUSH
44510: LD_INT 0
44512: GREATER
44513: OR
44514: PUSH
44515: LD_VAR 0 12
44519: PUSH
44520: LD_VAR 0 7
44524: ARRAY
44525: PUSH
44526: LD_INT 1
44528: ARRAY
44529: PPUSH
44530: LD_VAR 0 12
44534: PUSH
44535: LD_VAR 0 7
44539: ARRAY
44540: PUSH
44541: LD_INT 2
44543: ARRAY
44544: PPUSH
44545: CALL_OW 351
44549: OR
44550: IFFALSE 44556
// exit ;
44552: POP
44553: POP
44554: GO 44848
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44556: LD_ADDR_VAR 0 8
44560: PUSH
44561: LD_VAR 0 12
44565: PUSH
44566: LD_VAR 0 7
44570: ARRAY
44571: PUSH
44572: LD_INT 1
44574: ARRAY
44575: PPUSH
44576: LD_VAR 0 12
44580: PUSH
44581: LD_VAR 0 7
44585: ARRAY
44586: PUSH
44587: LD_INT 2
44589: ARRAY
44590: PPUSH
44591: CALL_OW 546
44595: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44596: LD_VAR 0 8
44600: PUSH
44601: LD_INT 1
44603: ARRAY
44604: PUSH
44605: LD_VAR 0 8
44609: PUSH
44610: LD_INT 2
44612: ARRAY
44613: PUSH
44614: LD_VAR 0 13
44618: PUSH
44619: LD_INT 2
44621: PLUS
44622: GREATER
44623: OR
44624: PUSH
44625: LD_VAR 0 8
44629: PUSH
44630: LD_INT 2
44632: ARRAY
44633: PUSH
44634: LD_VAR 0 13
44638: PUSH
44639: LD_INT 2
44641: MINUS
44642: LESS
44643: OR
44644: PUSH
44645: LD_VAR 0 8
44649: PUSH
44650: LD_INT 3
44652: ARRAY
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 8
44659: PUSH
44660: LD_INT 9
44662: PUSH
44663: LD_INT 10
44665: PUSH
44666: LD_INT 11
44668: PUSH
44669: LD_INT 12
44671: PUSH
44672: LD_INT 13
44674: PUSH
44675: LD_INT 16
44677: PUSH
44678: LD_INT 17
44680: PUSH
44681: LD_INT 18
44683: PUSH
44684: LD_INT 19
44686: PUSH
44687: LD_INT 20
44689: PUSH
44690: LD_INT 21
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: IN
44708: NOT
44709: OR
44710: PUSH
44711: LD_VAR 0 8
44715: PUSH
44716: LD_INT 5
44718: ARRAY
44719: NOT
44720: OR
44721: PUSH
44722: LD_VAR 0 8
44726: PUSH
44727: LD_INT 6
44729: ARRAY
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 7
44739: PUSH
44740: LD_INT 9
44742: PUSH
44743: LD_INT 10
44745: PUSH
44746: LD_INT 11
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: IN
44757: NOT
44758: OR
44759: IFFALSE 44765
// exit ;
44761: POP
44762: POP
44763: GO 44848
// end ;
44765: GO 44436
44767: POP
44768: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44769: LD_VAR 0 9
44773: PPUSH
44774: LD_VAR 0 3
44778: PPUSH
44779: LD_VAR 0 4
44783: PPUSH
44784: LD_INT 20
44786: PPUSH
44787: CALL 36794 0 4
44791: PUSH
44792: LD_INT 4
44794: ARRAY
44795: IFFALSE 44799
// exit ;
44797: GO 44848
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44799: LD_VAR 0 2
44803: PUSH
44804: LD_INT 29
44806: PUSH
44807: LD_INT 30
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: IN
44814: PUSH
44815: LD_VAR 0 3
44819: PPUSH
44820: LD_VAR 0 4
44824: PPUSH
44825: LD_VAR 0 9
44829: PPUSH
44830: CALL_OW 440
44834: NOT
44835: AND
44836: IFFALSE 44840
// exit ;
44838: GO 44848
// result := true ;
44840: LD_ADDR_VAR 0 6
44844: PUSH
44845: LD_INT 1
44847: ST_TO_ADDR
// end ;
44848: LD_VAR 0 6
44852: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44853: LD_INT 0
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
44898: PPUSH
44899: PPUSH
44900: PPUSH
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
// result = [ ] ;
44913: LD_ADDR_VAR 0 7
44917: PUSH
44918: EMPTY
44919: ST_TO_ADDR
// temp_list = [ ] ;
44920: LD_ADDR_VAR 0 9
44924: PUSH
44925: EMPTY
44926: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44927: LD_VAR 0 4
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: LD_INT 4
44946: PUSH
44947: LD_INT 5
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: IN
44958: NOT
44959: PUSH
44960: LD_VAR 0 1
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: IN
44975: PUSH
44976: LD_VAR 0 5
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: IN
44995: NOT
44996: AND
44997: OR
44998: IFFALSE 45002
// exit ;
45000: GO 63393
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45002: LD_VAR 0 1
45006: PUSH
45007: LD_INT 6
45009: PUSH
45010: LD_INT 7
45012: PUSH
45013: LD_INT 8
45015: PUSH
45016: LD_INT 13
45018: PUSH
45019: LD_INT 12
45021: PUSH
45022: LD_INT 15
45024: PUSH
45025: LD_INT 11
45027: PUSH
45028: LD_INT 14
45030: PUSH
45031: LD_INT 10
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: IN
45045: IFFALSE 45055
// btype = b_lab ;
45047: LD_ADDR_VAR 0 1
45051: PUSH
45052: LD_INT 6
45054: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45055: LD_VAR 0 6
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: IN
45074: NOT
45075: PUSH
45076: LD_VAR 0 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 3
45092: PUSH
45093: LD_INT 6
45095: PUSH
45096: LD_INT 36
45098: PUSH
45099: LD_INT 4
45101: PUSH
45102: LD_INT 5
45104: PUSH
45105: LD_INT 31
45107: PUSH
45108: LD_INT 32
45110: PUSH
45111: LD_INT 33
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: IN
45127: NOT
45128: PUSH
45129: LD_VAR 0 6
45133: PUSH
45134: LD_INT 1
45136: EQUAL
45137: AND
45138: OR
45139: PUSH
45140: LD_VAR 0 1
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: LD_INT 3
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: IN
45155: NOT
45156: PUSH
45157: LD_VAR 0 6
45161: PUSH
45162: LD_INT 2
45164: EQUAL
45165: AND
45166: OR
45167: IFFALSE 45177
// mode = 0 ;
45169: LD_ADDR_VAR 0 6
45173: PUSH
45174: LD_INT 0
45176: ST_TO_ADDR
// case mode of 0 :
45177: LD_VAR 0 6
45181: PUSH
45182: LD_INT 0
45184: DOUBLE
45185: EQUAL
45186: IFTRUE 45190
45188: GO 56643
45190: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45191: LD_ADDR_VAR 0 11
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45384: LD_ADDR_VAR 0 12
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 3
45541: NEG
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45580: LD_ADDR_VAR 0 13
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 3
45739: NEG
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: NEG
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45779: LD_ADDR_VAR 0 14
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45975: LD_ADDR_VAR 0 15
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46168: LD_ADDR_VAR 0 16
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46361: LD_ADDR_VAR 0 17
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46591: LD_ADDR_VAR 0 18
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46821: LD_ADDR_VAR 0 19
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47051: LD_ADDR_VAR 0 20
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47281: LD_ADDR_VAR 0 21
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47511: LD_ADDR_VAR 0 22
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47741: LD_ADDR_VAR 0 23
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 3
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48021: LD_ADDR_VAR 0 24
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48297: LD_ADDR_VAR 0 25
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48571: LD_ADDR_VAR 0 26
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 3
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48847: LD_ADDR_VAR 0 27
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 3
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49127: LD_ADDR_VAR 0 28
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 3
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49409: LD_ADDR_VAR 0 29
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49688: LD_ADDR_VAR 0 30
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49966: LD_ADDR_VAR 0 31
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 3
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50244: LD_ADDR_VAR 0 32
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50522: LD_ADDR_VAR 0 33
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50801: LD_ADDR_VAR 0 34
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51081: LD_ADDR_VAR 0 35
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51193: LD_ADDR_VAR 0 36
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51305: LD_ADDR_VAR 0 37
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51417: LD_ADDR_VAR 0 38
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51529: LD_ADDR_VAR 0 39
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51641: LD_ADDR_VAR 0 40
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51753: LD_ADDR_VAR 0 41
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52103: LD_ADDR_VAR 0 42
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 3
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52453: LD_ADDR_VAR 0 43
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 3
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52801: LD_ADDR_VAR 0 44
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53151: LD_ADDR_VAR 0 45
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53501: LD_ADDR_VAR 0 46
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 3
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53849: LD_ADDR_VAR 0 47
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54000: LD_ADDR_VAR 0 48
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54147: LD_ADDR_VAR 0 49
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54291: LD_ADDR_VAR 0 50
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54435: LD_ADDR_VAR 0 51
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54582: LD_ADDR_VAR 0 52
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54733: LD_ADDR_VAR 0 53
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54963: LD_ADDR_VAR 0 54
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55193: LD_ADDR_VAR 0 55
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55423: LD_ADDR_VAR 0 56
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55653: LD_ADDR_VAR 0 57
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55883: LD_ADDR_VAR 0 58
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56113: LD_ADDR_VAR 0 59
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56201: LD_ADDR_VAR 0 60
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56289: LD_ADDR_VAR 0 61
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56377: LD_ADDR_VAR 0 62
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56465: LD_ADDR_VAR 0 63
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56553: LD_ADDR_VAR 0 64
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// end ; 1 :
56641: GO 62538
56643: LD_INT 1
56645: DOUBLE
56646: EQUAL
56647: IFTRUE 56651
56649: GO 59274
56651: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56652: LD_ADDR_VAR 0 11
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 3
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56696: LD_ADDR_VAR 0 12
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56737: LD_ADDR_VAR 0 13
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56777: LD_ADDR_VAR 0 14
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56818: LD_ADDR_VAR 0 15
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56862: LD_ADDR_VAR 0 16
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: NEG
56894: PUSH
56895: LD_INT 3
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56908: LD_ADDR_VAR 0 17
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56952: LD_ADDR_VAR 0 18
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56993: LD_ADDR_VAR 0 19
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 3
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57033: LD_ADDR_VAR 0 20
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57074: LD_ADDR_VAR 0 21
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57118: LD_ADDR_VAR 0 22
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 3
57137: NEG
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57164: LD_ADDR_VAR 0 23
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 4
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57208: LD_ADDR_VAR 0 24
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57249: LD_ADDR_VAR 0 25
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 4
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57289: LD_ADDR_VAR 0 26
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57330: LD_ADDR_VAR 0 27
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57374: LD_ADDR_VAR 0 28
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 4
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57420: LD_ADDR_VAR 0 29
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 4
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 4
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 3
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 5
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 5
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 6
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 6
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 5
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57575: LD_ADDR_VAR 0 30
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 4
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 4
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 4
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 5
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 5
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 5
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 6
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 6
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57718: LD_ADDR_VAR 0 31
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 4
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: LD_INT 5
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 4
57805: PUSH
57806: LD_INT 5
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 6
57815: PUSH
57816: LD_INT 5
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 6
57825: PUSH
57826: LD_INT 6
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 5
57835: PUSH
57836: LD_INT 6
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57857: LD_ADDR_VAR 0 32
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 4
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 4
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 6
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 6
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 5
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58000: LD_ADDR_VAR 0 33
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 4
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 4
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 4
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 5
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 5
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 6
58120: NEG
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 6
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58155: LD_ADDR_VAR 0 34
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 3
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: LD_INT 4
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: NEG
58223: PUSH
58224: LD_INT 4
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: LD_INT 5
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 5
58246: NEG
58247: PUSH
58248: LD_INT 4
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 5
58258: NEG
58259: PUSH
58260: LD_INT 5
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 5
58270: NEG
58271: PUSH
58272: LD_INT 6
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 6
58282: NEG
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 6
58294: NEG
58295: PUSH
58296: LD_INT 6
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58318: LD_ADDR_VAR 0 41
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58362: LD_ADDR_VAR 0 42
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58403: LD_ADDR_VAR 0 43
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58443: LD_ADDR_VAR 0 44
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58484: LD_ADDR_VAR 0 45
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58528: LD_ADDR_VAR 0 46
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 3
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58574: LD_ADDR_VAR 0 47
58578: PUSH
58579: LD_INT 2
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58607: LD_ADDR_VAR 0 48
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58638: LD_ADDR_VAR 0 49
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58667: LD_ADDR_VAR 0 50
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58696: LD_ADDR_VAR 0 51
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58727: LD_ADDR_VAR 0 52
58731: PUSH
58732: LD_INT 3
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58760: LD_ADDR_VAR 0 53
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58804: LD_ADDR_VAR 0 54
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58845: LD_ADDR_VAR 0 55
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58885: LD_ADDR_VAR 0 56
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58926: LD_ADDR_VAR 0 57
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 3
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58970: LD_ADDR_VAR 0 58
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59016: LD_ADDR_VAR 0 59
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59060: LD_ADDR_VAR 0 60
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59101: LD_ADDR_VAR 0 61
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59141: LD_ADDR_VAR 0 62
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59182: LD_ADDR_VAR 0 63
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59226: LD_ADDR_VAR 0 64
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: ST_TO_ADDR
// end ; 2 :
59272: GO 62538
59274: LD_INT 2
59276: DOUBLE
59277: EQUAL
59278: IFTRUE 59282
59280: GO 62537
59282: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59283: LD_ADDR_VAR 0 29
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 5
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 5
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: LD_INT 4
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: LD_INT 4
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 5
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: LD_INT 5
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 4
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 4
59668: NEG
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: NEG
59681: PUSH
59682: LD_INT 5
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 4
59716: NEG
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 5
59728: NEG
59729: PUSH
59730: LD_INT 4
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: NEG
59741: PUSH
59742: LD_INT 5
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 5
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 5
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59821: LD_ADDR_VAR 0 30
59825: PUSH
59826: LD_INT 4
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 4
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 5
59848: PUSH
59849: LD_INT 4
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 5
59858: PUSH
59859: LD_INT 5
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: LD_INT 5
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 5
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: LD_INT 5
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 3
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 4
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 3
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 4
60022: NEG
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 4
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 5
60067: NEG
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: NEG
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 5
60090: NEG
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: LD_INT 4
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 4
60173: NEG
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 4
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 5
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 4
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 5
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: LD_INT 5
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60368: LD_ADDR_VAR 0 31
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 5
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 4
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: LD_INT 5
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: NEG
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: NEG
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 4
60570: NEG
60571: PUSH
60572: LD_INT 4
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 4
60582: NEG
60583: PUSH
60584: LD_INT 5
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: LD_INT 3
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 5
60630: NEG
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 5
60642: NEG
60643: PUSH
60644: LD_INT 5
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 5
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 5
60666: NEG
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 4
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: LD_INT 4
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 5
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 5
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 5
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60918: LD_ADDR_VAR 0 32
60922: PUSH
60923: LD_INT 4
60925: NEG
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 4
60936: NEG
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 4
60970: NEG
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 5
60981: NEG
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 5
60992: NEG
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 5
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: LD_INT 4
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 4
61087: NEG
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 4
61099: NEG
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 4
61123: NEG
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 5
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 4
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 4
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 5
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: LD_INT 5
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 4
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 4
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 3
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: PUSH
61331: LD_INT 4
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 5
61350: PUSH
61351: LD_INT 4
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 5
61360: PUSH
61361: LD_INT 5
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: LD_INT 5
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 5
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61465: LD_ADDR_VAR 0 33
61469: PUSH
61470: LD_INT 4
61472: NEG
61473: PUSH
61474: LD_INT 4
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 4
61484: NEG
61485: PUSH
61486: LD_INT 5
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: NEG
61497: PUSH
61498: LD_INT 4
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 5
61532: NEG
61533: PUSH
61534: LD_INT 4
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 5
61544: NEG
61545: PUSH
61546: LD_INT 5
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 5
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 5
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 4
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 4
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 4
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 4
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 4
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 5
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 4
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 5
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: LD_INT 3
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: PUSH
61796: LD_INT 3
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: LD_INT 3
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 4
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 4
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 5
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 5
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 5
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62003: LD_ADDR_VAR 0 34
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: LD_INT 4
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 5
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 4
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 3
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 5
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: LD_INT 5
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 4
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 4
62205: PUSH
62206: LD_INT 4
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 4
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 5
62225: PUSH
62226: LD_INT 4
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: LD_INT 5
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 4
62245: PUSH
62246: LD_INT 5
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: LD_INT 4
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 3
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: LD_INT 3
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: LD_INT 5
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 4
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 4
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: LD_INT 4
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 4
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 4
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 4
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 5
62444: NEG
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 5
62455: NEG
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 5
62467: NEG
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 3
62479: NEG
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// end ; end ;
62535: GO 62538
62537: POP
// case btype of b_depot , b_warehouse :
62538: LD_VAR 0 1
62542: PUSH
62543: LD_INT 0
62545: DOUBLE
62546: EQUAL
62547: IFTRUE 62557
62549: LD_INT 1
62551: DOUBLE
62552: EQUAL
62553: IFTRUE 62557
62555: GO 62758
62557: POP
// case nation of nation_american :
62558: LD_VAR 0 5
62562: PUSH
62563: LD_INT 1
62565: DOUBLE
62566: EQUAL
62567: IFTRUE 62571
62569: GO 62627
62571: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62572: LD_ADDR_VAR 0 9
62576: PUSH
62577: LD_VAR 0 11
62581: PUSH
62582: LD_VAR 0 12
62586: PUSH
62587: LD_VAR 0 13
62591: PUSH
62592: LD_VAR 0 14
62596: PUSH
62597: LD_VAR 0 15
62601: PUSH
62602: LD_VAR 0 16
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: PUSH
62615: LD_VAR 0 4
62619: PUSH
62620: LD_INT 1
62622: PLUS
62623: ARRAY
62624: ST_TO_ADDR
62625: GO 62756
62627: LD_INT 2
62629: DOUBLE
62630: EQUAL
62631: IFTRUE 62635
62633: GO 62691
62635: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62636: LD_ADDR_VAR 0 9
62640: PUSH
62641: LD_VAR 0 17
62645: PUSH
62646: LD_VAR 0 18
62650: PUSH
62651: LD_VAR 0 19
62655: PUSH
62656: LD_VAR 0 20
62660: PUSH
62661: LD_VAR 0 21
62665: PUSH
62666: LD_VAR 0 22
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: PUSH
62679: LD_VAR 0 4
62683: PUSH
62684: LD_INT 1
62686: PLUS
62687: ARRAY
62688: ST_TO_ADDR
62689: GO 62756
62691: LD_INT 3
62693: DOUBLE
62694: EQUAL
62695: IFTRUE 62699
62697: GO 62755
62699: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62700: LD_ADDR_VAR 0 9
62704: PUSH
62705: LD_VAR 0 23
62709: PUSH
62710: LD_VAR 0 24
62714: PUSH
62715: LD_VAR 0 25
62719: PUSH
62720: LD_VAR 0 26
62724: PUSH
62725: LD_VAR 0 27
62729: PUSH
62730: LD_VAR 0 28
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: PUSH
62743: LD_VAR 0 4
62747: PUSH
62748: LD_INT 1
62750: PLUS
62751: ARRAY
62752: ST_TO_ADDR
62753: GO 62756
62755: POP
62756: GO 63311
62758: LD_INT 2
62760: DOUBLE
62761: EQUAL
62762: IFTRUE 62772
62764: LD_INT 3
62766: DOUBLE
62767: EQUAL
62768: IFTRUE 62772
62770: GO 62828
62772: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62773: LD_ADDR_VAR 0 9
62777: PUSH
62778: LD_VAR 0 29
62782: PUSH
62783: LD_VAR 0 30
62787: PUSH
62788: LD_VAR 0 31
62792: PUSH
62793: LD_VAR 0 32
62797: PUSH
62798: LD_VAR 0 33
62802: PUSH
62803: LD_VAR 0 34
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: PUSH
62816: LD_VAR 0 4
62820: PUSH
62821: LD_INT 1
62823: PLUS
62824: ARRAY
62825: ST_TO_ADDR
62826: GO 63311
62828: LD_INT 16
62830: DOUBLE
62831: EQUAL
62832: IFTRUE 62890
62834: LD_INT 17
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62890
62840: LD_INT 18
62842: DOUBLE
62843: EQUAL
62844: IFTRUE 62890
62846: LD_INT 19
62848: DOUBLE
62849: EQUAL
62850: IFTRUE 62890
62852: LD_INT 22
62854: DOUBLE
62855: EQUAL
62856: IFTRUE 62890
62858: LD_INT 20
62860: DOUBLE
62861: EQUAL
62862: IFTRUE 62890
62864: LD_INT 21
62866: DOUBLE
62867: EQUAL
62868: IFTRUE 62890
62870: LD_INT 23
62872: DOUBLE
62873: EQUAL
62874: IFTRUE 62890
62876: LD_INT 24
62878: DOUBLE
62879: EQUAL
62880: IFTRUE 62890
62882: LD_INT 25
62884: DOUBLE
62885: EQUAL
62886: IFTRUE 62890
62888: GO 62946
62890: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62891: LD_ADDR_VAR 0 9
62895: PUSH
62896: LD_VAR 0 35
62900: PUSH
62901: LD_VAR 0 36
62905: PUSH
62906: LD_VAR 0 37
62910: PUSH
62911: LD_VAR 0 38
62915: PUSH
62916: LD_VAR 0 39
62920: PUSH
62921: LD_VAR 0 40
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: PUSH
62934: LD_VAR 0 4
62938: PUSH
62939: LD_INT 1
62941: PLUS
62942: ARRAY
62943: ST_TO_ADDR
62944: GO 63311
62946: LD_INT 6
62948: DOUBLE
62949: EQUAL
62950: IFTRUE 63002
62952: LD_INT 7
62954: DOUBLE
62955: EQUAL
62956: IFTRUE 63002
62958: LD_INT 8
62960: DOUBLE
62961: EQUAL
62962: IFTRUE 63002
62964: LD_INT 13
62966: DOUBLE
62967: EQUAL
62968: IFTRUE 63002
62970: LD_INT 12
62972: DOUBLE
62973: EQUAL
62974: IFTRUE 63002
62976: LD_INT 15
62978: DOUBLE
62979: EQUAL
62980: IFTRUE 63002
62982: LD_INT 11
62984: DOUBLE
62985: EQUAL
62986: IFTRUE 63002
62988: LD_INT 14
62990: DOUBLE
62991: EQUAL
62992: IFTRUE 63002
62994: LD_INT 10
62996: DOUBLE
62997: EQUAL
62998: IFTRUE 63002
63000: GO 63058
63002: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63003: LD_ADDR_VAR 0 9
63007: PUSH
63008: LD_VAR 0 41
63012: PUSH
63013: LD_VAR 0 42
63017: PUSH
63018: LD_VAR 0 43
63022: PUSH
63023: LD_VAR 0 44
63027: PUSH
63028: LD_VAR 0 45
63032: PUSH
63033: LD_VAR 0 46
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: PUSH
63046: LD_VAR 0 4
63050: PUSH
63051: LD_INT 1
63053: PLUS
63054: ARRAY
63055: ST_TO_ADDR
63056: GO 63311
63058: LD_INT 36
63060: DOUBLE
63061: EQUAL
63062: IFTRUE 63066
63064: GO 63122
63066: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63067: LD_ADDR_VAR 0 9
63071: PUSH
63072: LD_VAR 0 47
63076: PUSH
63077: LD_VAR 0 48
63081: PUSH
63082: LD_VAR 0 49
63086: PUSH
63087: LD_VAR 0 50
63091: PUSH
63092: LD_VAR 0 51
63096: PUSH
63097: LD_VAR 0 52
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: PUSH
63110: LD_VAR 0 4
63114: PUSH
63115: LD_INT 1
63117: PLUS
63118: ARRAY
63119: ST_TO_ADDR
63120: GO 63311
63122: LD_INT 4
63124: DOUBLE
63125: EQUAL
63126: IFTRUE 63148
63128: LD_INT 5
63130: DOUBLE
63131: EQUAL
63132: IFTRUE 63148
63134: LD_INT 34
63136: DOUBLE
63137: EQUAL
63138: IFTRUE 63148
63140: LD_INT 37
63142: DOUBLE
63143: EQUAL
63144: IFTRUE 63148
63146: GO 63204
63148: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63149: LD_ADDR_VAR 0 9
63153: PUSH
63154: LD_VAR 0 53
63158: PUSH
63159: LD_VAR 0 54
63163: PUSH
63164: LD_VAR 0 55
63168: PUSH
63169: LD_VAR 0 56
63173: PUSH
63174: LD_VAR 0 57
63178: PUSH
63179: LD_VAR 0 58
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: LD_VAR 0 4
63196: PUSH
63197: LD_INT 1
63199: PLUS
63200: ARRAY
63201: ST_TO_ADDR
63202: GO 63311
63204: LD_INT 31
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63254
63210: LD_INT 32
63212: DOUBLE
63213: EQUAL
63214: IFTRUE 63254
63216: LD_INT 33
63218: DOUBLE
63219: EQUAL
63220: IFTRUE 63254
63222: LD_INT 27
63224: DOUBLE
63225: EQUAL
63226: IFTRUE 63254
63228: LD_INT 26
63230: DOUBLE
63231: EQUAL
63232: IFTRUE 63254
63234: LD_INT 28
63236: DOUBLE
63237: EQUAL
63238: IFTRUE 63254
63240: LD_INT 29
63242: DOUBLE
63243: EQUAL
63244: IFTRUE 63254
63246: LD_INT 30
63248: DOUBLE
63249: EQUAL
63250: IFTRUE 63254
63252: GO 63310
63254: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63255: LD_ADDR_VAR 0 9
63259: PUSH
63260: LD_VAR 0 59
63264: PUSH
63265: LD_VAR 0 60
63269: PUSH
63270: LD_VAR 0 61
63274: PUSH
63275: LD_VAR 0 62
63279: PUSH
63280: LD_VAR 0 63
63284: PUSH
63285: LD_VAR 0 64
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: PUSH
63298: LD_VAR 0 4
63302: PUSH
63303: LD_INT 1
63305: PLUS
63306: ARRAY
63307: ST_TO_ADDR
63308: GO 63311
63310: POP
// temp_list2 = [ ] ;
63311: LD_ADDR_VAR 0 10
63315: PUSH
63316: EMPTY
63317: ST_TO_ADDR
// for i in temp_list do
63318: LD_ADDR_VAR 0 8
63322: PUSH
63323: LD_VAR 0 9
63327: PUSH
63328: FOR_IN
63329: IFFALSE 63381
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63331: LD_ADDR_VAR 0 10
63335: PUSH
63336: LD_VAR 0 10
63340: PUSH
63341: LD_VAR 0 8
63345: PUSH
63346: LD_INT 1
63348: ARRAY
63349: PUSH
63350: LD_VAR 0 2
63354: PLUS
63355: PUSH
63356: LD_VAR 0 8
63360: PUSH
63361: LD_INT 2
63363: ARRAY
63364: PUSH
63365: LD_VAR 0 3
63369: PLUS
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: EMPTY
63376: LIST
63377: ADD
63378: ST_TO_ADDR
63379: GO 63328
63381: POP
63382: POP
// result = temp_list2 ;
63383: LD_ADDR_VAR 0 7
63387: PUSH
63388: LD_VAR 0 10
63392: ST_TO_ADDR
// end ;
63393: LD_VAR 0 7
63397: RET
// export function EnemyInRange ( unit , dist ) ; begin
63398: LD_INT 0
63400: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63401: LD_ADDR_VAR 0 3
63405: PUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: CALL_OW 255
63415: PPUSH
63416: LD_VAR 0 1
63420: PPUSH
63421: CALL_OW 250
63425: PPUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 251
63435: PPUSH
63436: LD_VAR 0 2
63440: PPUSH
63441: CALL 36794 0 4
63445: PUSH
63446: LD_INT 4
63448: ARRAY
63449: ST_TO_ADDR
// end ;
63450: LD_VAR 0 3
63454: RET
// export function PlayerSeeMe ( unit ) ; begin
63455: LD_INT 0
63457: PPUSH
// result := See ( your_side , unit ) ;
63458: LD_ADDR_VAR 0 2
63462: PUSH
63463: LD_OWVAR 2
63467: PPUSH
63468: LD_VAR 0 1
63472: PPUSH
63473: CALL_OW 292
63477: ST_TO_ADDR
// end ;
63478: LD_VAR 0 2
63482: RET
// export function ReverseDir ( unit ) ; begin
63483: LD_INT 0
63485: PPUSH
// if not unit then
63486: LD_VAR 0 1
63490: NOT
63491: IFFALSE 63495
// exit ;
63493: GO 63518
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63495: LD_ADDR_VAR 0 2
63499: PUSH
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 254
63509: PUSH
63510: LD_INT 3
63512: PLUS
63513: PUSH
63514: LD_INT 6
63516: MOD
63517: ST_TO_ADDR
// end ;
63518: LD_VAR 0 2
63522: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63523: LD_INT 0
63525: PPUSH
63526: PPUSH
63527: PPUSH
63528: PPUSH
63529: PPUSH
// if not hexes then
63530: LD_VAR 0 2
63534: NOT
63535: IFFALSE 63539
// exit ;
63537: GO 63687
// dist := 9999 ;
63539: LD_ADDR_VAR 0 5
63543: PUSH
63544: LD_INT 9999
63546: ST_TO_ADDR
// for i = 1 to hexes do
63547: LD_ADDR_VAR 0 4
63551: PUSH
63552: DOUBLE
63553: LD_INT 1
63555: DEC
63556: ST_TO_ADDR
63557: LD_VAR 0 2
63561: PUSH
63562: FOR_TO
63563: IFFALSE 63675
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63565: LD_VAR 0 1
63569: PPUSH
63570: LD_VAR 0 2
63574: PUSH
63575: LD_VAR 0 4
63579: ARRAY
63580: PUSH
63581: LD_INT 1
63583: ARRAY
63584: PPUSH
63585: LD_VAR 0 2
63589: PUSH
63590: LD_VAR 0 4
63594: ARRAY
63595: PUSH
63596: LD_INT 2
63598: ARRAY
63599: PPUSH
63600: CALL_OW 297
63604: PUSH
63605: LD_VAR 0 5
63609: LESS
63610: IFFALSE 63673
// begin hex := hexes [ i ] ;
63612: LD_ADDR_VAR 0 7
63616: PUSH
63617: LD_VAR 0 2
63621: PUSH
63622: LD_VAR 0 4
63626: ARRAY
63627: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63628: LD_ADDR_VAR 0 5
63632: PUSH
63633: LD_VAR 0 1
63637: PPUSH
63638: LD_VAR 0 2
63642: PUSH
63643: LD_VAR 0 4
63647: ARRAY
63648: PUSH
63649: LD_INT 1
63651: ARRAY
63652: PPUSH
63653: LD_VAR 0 2
63657: PUSH
63658: LD_VAR 0 4
63662: ARRAY
63663: PUSH
63664: LD_INT 2
63666: ARRAY
63667: PPUSH
63668: CALL_OW 297
63672: ST_TO_ADDR
// end ; end ;
63673: GO 63562
63675: POP
63676: POP
// result := hex ;
63677: LD_ADDR_VAR 0 3
63681: PUSH
63682: LD_VAR 0 7
63686: ST_TO_ADDR
// end ;
63687: LD_VAR 0 3
63691: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63696: LD_VAR 0 1
63700: NOT
63701: PUSH
63702: LD_VAR 0 1
63706: PUSH
63707: LD_INT 21
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 23
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PPUSH
63731: CALL_OW 69
63735: IN
63736: NOT
63737: OR
63738: IFFALSE 63742
// exit ;
63740: GO 63789
// for i = 1 to 3 do
63742: LD_ADDR_VAR 0 3
63746: PUSH
63747: DOUBLE
63748: LD_INT 1
63750: DEC
63751: ST_TO_ADDR
63752: LD_INT 3
63754: PUSH
63755: FOR_TO
63756: IFFALSE 63787
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63758: LD_VAR 0 1
63762: PPUSH
63763: CALL_OW 250
63767: PPUSH
63768: LD_VAR 0 1
63772: PPUSH
63773: CALL_OW 251
63777: PPUSH
63778: LD_INT 1
63780: PPUSH
63781: CALL_OW 453
63785: GO 63755
63787: POP
63788: POP
// end ;
63789: LD_VAR 0 2
63793: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63794: LD_INT 0
63796: PPUSH
63797: PPUSH
63798: PPUSH
63799: PPUSH
63800: PPUSH
63801: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63802: LD_VAR 0 1
63806: NOT
63807: PUSH
63808: LD_VAR 0 2
63812: NOT
63813: OR
63814: PUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 314
63824: OR
63825: IFFALSE 63829
// exit ;
63827: GO 64270
// x := GetX ( enemy_unit ) ;
63829: LD_ADDR_VAR 0 7
63833: PUSH
63834: LD_VAR 0 2
63838: PPUSH
63839: CALL_OW 250
63843: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63844: LD_ADDR_VAR 0 8
63848: PUSH
63849: LD_VAR 0 2
63853: PPUSH
63854: CALL_OW 251
63858: ST_TO_ADDR
// if not x or not y then
63859: LD_VAR 0 7
63863: NOT
63864: PUSH
63865: LD_VAR 0 8
63869: NOT
63870: OR
63871: IFFALSE 63875
// exit ;
63873: GO 64270
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63875: LD_ADDR_VAR 0 6
63879: PUSH
63880: LD_VAR 0 7
63884: PPUSH
63885: LD_INT 0
63887: PPUSH
63888: LD_INT 4
63890: PPUSH
63891: CALL_OW 272
63895: PUSH
63896: LD_VAR 0 8
63900: PPUSH
63901: LD_INT 0
63903: PPUSH
63904: LD_INT 4
63906: PPUSH
63907: CALL_OW 273
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_VAR 0 7
63920: PPUSH
63921: LD_INT 1
63923: PPUSH
63924: LD_INT 4
63926: PPUSH
63927: CALL_OW 272
63931: PUSH
63932: LD_VAR 0 8
63936: PPUSH
63937: LD_INT 1
63939: PPUSH
63940: LD_INT 4
63942: PPUSH
63943: CALL_OW 273
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_VAR 0 7
63956: PPUSH
63957: LD_INT 2
63959: PPUSH
63960: LD_INT 4
63962: PPUSH
63963: CALL_OW 272
63967: PUSH
63968: LD_VAR 0 8
63972: PPUSH
63973: LD_INT 2
63975: PPUSH
63976: LD_INT 4
63978: PPUSH
63979: CALL_OW 273
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_VAR 0 7
63992: PPUSH
63993: LD_INT 3
63995: PPUSH
63996: LD_INT 4
63998: PPUSH
63999: CALL_OW 272
64003: PUSH
64004: LD_VAR 0 8
64008: PPUSH
64009: LD_INT 3
64011: PPUSH
64012: LD_INT 4
64014: PPUSH
64015: CALL_OW 273
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_VAR 0 7
64028: PPUSH
64029: LD_INT 4
64031: PPUSH
64032: LD_INT 4
64034: PPUSH
64035: CALL_OW 272
64039: PUSH
64040: LD_VAR 0 8
64044: PPUSH
64045: LD_INT 4
64047: PPUSH
64048: LD_INT 4
64050: PPUSH
64051: CALL_OW 273
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_VAR 0 7
64064: PPUSH
64065: LD_INT 5
64067: PPUSH
64068: LD_INT 4
64070: PPUSH
64071: CALL_OW 272
64075: PUSH
64076: LD_VAR 0 8
64080: PPUSH
64081: LD_INT 5
64083: PPUSH
64084: LD_INT 4
64086: PPUSH
64087: CALL_OW 273
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: ST_TO_ADDR
// for i = tmp downto 1 do
64104: LD_ADDR_VAR 0 4
64108: PUSH
64109: DOUBLE
64110: LD_VAR 0 6
64114: INC
64115: ST_TO_ADDR
64116: LD_INT 1
64118: PUSH
64119: FOR_DOWNTO
64120: IFFALSE 64221
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64122: LD_VAR 0 6
64126: PUSH
64127: LD_VAR 0 4
64131: ARRAY
64132: PUSH
64133: LD_INT 1
64135: ARRAY
64136: PPUSH
64137: LD_VAR 0 6
64141: PUSH
64142: LD_VAR 0 4
64146: ARRAY
64147: PUSH
64148: LD_INT 2
64150: ARRAY
64151: PPUSH
64152: CALL_OW 488
64156: NOT
64157: PUSH
64158: LD_VAR 0 6
64162: PUSH
64163: LD_VAR 0 4
64167: ARRAY
64168: PUSH
64169: LD_INT 1
64171: ARRAY
64172: PPUSH
64173: LD_VAR 0 6
64177: PUSH
64178: LD_VAR 0 4
64182: ARRAY
64183: PUSH
64184: LD_INT 2
64186: ARRAY
64187: PPUSH
64188: CALL_OW 428
64192: PUSH
64193: LD_INT 0
64195: NONEQUAL
64196: OR
64197: IFFALSE 64219
// tmp := Delete ( tmp , i ) ;
64199: LD_ADDR_VAR 0 6
64203: PUSH
64204: LD_VAR 0 6
64208: PPUSH
64209: LD_VAR 0 4
64213: PPUSH
64214: CALL_OW 3
64218: ST_TO_ADDR
64219: GO 64119
64221: POP
64222: POP
// j := GetClosestHex ( unit , tmp ) ;
64223: LD_ADDR_VAR 0 5
64227: PUSH
64228: LD_VAR 0 1
64232: PPUSH
64233: LD_VAR 0 6
64237: PPUSH
64238: CALL 63523 0 2
64242: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64243: LD_VAR 0 1
64247: PPUSH
64248: LD_VAR 0 5
64252: PUSH
64253: LD_INT 1
64255: ARRAY
64256: PPUSH
64257: LD_VAR 0 5
64261: PUSH
64262: LD_INT 2
64264: ARRAY
64265: PPUSH
64266: CALL_OW 111
// end ;
64270: LD_VAR 0 3
64274: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64275: LD_INT 0
64277: PPUSH
64278: PPUSH
64279: PPUSH
// uc_side = 0 ;
64280: LD_ADDR_OWVAR 20
64284: PUSH
64285: LD_INT 0
64287: ST_TO_ADDR
// uc_nation = 0 ;
64288: LD_ADDR_OWVAR 21
64292: PUSH
64293: LD_INT 0
64295: ST_TO_ADDR
// InitHc_All ( ) ;
64296: CALL_OW 584
// InitVc ;
64300: CALL_OW 20
// if mastodonts then
64304: LD_VAR 0 6
64308: IFFALSE 64375
// for i = 1 to mastodonts do
64310: LD_ADDR_VAR 0 11
64314: PUSH
64315: DOUBLE
64316: LD_INT 1
64318: DEC
64319: ST_TO_ADDR
64320: LD_VAR 0 6
64324: PUSH
64325: FOR_TO
64326: IFFALSE 64373
// begin vc_chassis := 31 ;
64328: LD_ADDR_OWVAR 37
64332: PUSH
64333: LD_INT 31
64335: ST_TO_ADDR
// vc_control := control_rider ;
64336: LD_ADDR_OWVAR 38
64340: PUSH
64341: LD_INT 4
64343: ST_TO_ADDR
// animal := CreateVehicle ;
64344: LD_ADDR_VAR 0 12
64348: PUSH
64349: CALL_OW 45
64353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64354: LD_VAR 0 12
64358: PPUSH
64359: LD_VAR 0 8
64363: PPUSH
64364: LD_INT 0
64366: PPUSH
64367: CALL 66563 0 3
// end ;
64371: GO 64325
64373: POP
64374: POP
// if horses then
64375: LD_VAR 0 5
64379: IFFALSE 64446
// for i = 1 to horses do
64381: LD_ADDR_VAR 0 11
64385: PUSH
64386: DOUBLE
64387: LD_INT 1
64389: DEC
64390: ST_TO_ADDR
64391: LD_VAR 0 5
64395: PUSH
64396: FOR_TO
64397: IFFALSE 64444
// begin hc_class := 21 ;
64399: LD_ADDR_OWVAR 28
64403: PUSH
64404: LD_INT 21
64406: ST_TO_ADDR
// hc_gallery :=  ;
64407: LD_ADDR_OWVAR 33
64411: PUSH
64412: LD_STRING 
64414: ST_TO_ADDR
// animal := CreateHuman ;
64415: LD_ADDR_VAR 0 12
64419: PUSH
64420: CALL_OW 44
64424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64425: LD_VAR 0 12
64429: PPUSH
64430: LD_VAR 0 8
64434: PPUSH
64435: LD_INT 0
64437: PPUSH
64438: CALL 66563 0 3
// end ;
64442: GO 64396
64444: POP
64445: POP
// if birds then
64446: LD_VAR 0 1
64450: IFFALSE 64517
// for i = 1 to birds do
64452: LD_ADDR_VAR 0 11
64456: PUSH
64457: DOUBLE
64458: LD_INT 1
64460: DEC
64461: ST_TO_ADDR
64462: LD_VAR 0 1
64466: PUSH
64467: FOR_TO
64468: IFFALSE 64515
// begin hc_class = 18 ;
64470: LD_ADDR_OWVAR 28
64474: PUSH
64475: LD_INT 18
64477: ST_TO_ADDR
// hc_gallery =  ;
64478: LD_ADDR_OWVAR 33
64482: PUSH
64483: LD_STRING 
64485: ST_TO_ADDR
// animal := CreateHuman ;
64486: LD_ADDR_VAR 0 12
64490: PUSH
64491: CALL_OW 44
64495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64496: LD_VAR 0 12
64500: PPUSH
64501: LD_VAR 0 8
64505: PPUSH
64506: LD_INT 0
64508: PPUSH
64509: CALL 66563 0 3
// end ;
64513: GO 64467
64515: POP
64516: POP
// if tigers then
64517: LD_VAR 0 2
64521: IFFALSE 64605
// for i = 1 to tigers do
64523: LD_ADDR_VAR 0 11
64527: PUSH
64528: DOUBLE
64529: LD_INT 1
64531: DEC
64532: ST_TO_ADDR
64533: LD_VAR 0 2
64537: PUSH
64538: FOR_TO
64539: IFFALSE 64603
// begin hc_class = class_tiger ;
64541: LD_ADDR_OWVAR 28
64545: PUSH
64546: LD_INT 14
64548: ST_TO_ADDR
// hc_gallery =  ;
64549: LD_ADDR_OWVAR 33
64553: PUSH
64554: LD_STRING 
64556: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64557: LD_ADDR_OWVAR 35
64561: PUSH
64562: LD_INT 7
64564: NEG
64565: PPUSH
64566: LD_INT 7
64568: PPUSH
64569: CALL_OW 12
64573: ST_TO_ADDR
// animal := CreateHuman ;
64574: LD_ADDR_VAR 0 12
64578: PUSH
64579: CALL_OW 44
64583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64584: LD_VAR 0 12
64588: PPUSH
64589: LD_VAR 0 8
64593: PPUSH
64594: LD_INT 0
64596: PPUSH
64597: CALL 66563 0 3
// end ;
64601: GO 64538
64603: POP
64604: POP
// if apemans then
64605: LD_VAR 0 3
64609: IFFALSE 64732
// for i = 1 to apemans do
64611: LD_ADDR_VAR 0 11
64615: PUSH
64616: DOUBLE
64617: LD_INT 1
64619: DEC
64620: ST_TO_ADDR
64621: LD_VAR 0 3
64625: PUSH
64626: FOR_TO
64627: IFFALSE 64730
// begin hc_class = class_apeman ;
64629: LD_ADDR_OWVAR 28
64633: PUSH
64634: LD_INT 12
64636: ST_TO_ADDR
// hc_gallery =  ;
64637: LD_ADDR_OWVAR 33
64641: PUSH
64642: LD_STRING 
64644: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64645: LD_ADDR_OWVAR 35
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PPUSH
64654: LD_INT 2
64656: PPUSH
64657: CALL_OW 12
64661: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64662: LD_ADDR_OWVAR 31
64666: PUSH
64667: LD_INT 1
64669: PPUSH
64670: LD_INT 3
64672: PPUSH
64673: CALL_OW 12
64677: PUSH
64678: LD_INT 1
64680: PPUSH
64681: LD_INT 3
64683: PPUSH
64684: CALL_OW 12
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// animal := CreateHuman ;
64701: LD_ADDR_VAR 0 12
64705: PUSH
64706: CALL_OW 44
64710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64711: LD_VAR 0 12
64715: PPUSH
64716: LD_VAR 0 8
64720: PPUSH
64721: LD_INT 0
64723: PPUSH
64724: CALL 66563 0 3
// end ;
64728: GO 64626
64730: POP
64731: POP
// if enchidnas then
64732: LD_VAR 0 4
64736: IFFALSE 64803
// for i = 1 to enchidnas do
64738: LD_ADDR_VAR 0 11
64742: PUSH
64743: DOUBLE
64744: LD_INT 1
64746: DEC
64747: ST_TO_ADDR
64748: LD_VAR 0 4
64752: PUSH
64753: FOR_TO
64754: IFFALSE 64801
// begin hc_class = 13 ;
64756: LD_ADDR_OWVAR 28
64760: PUSH
64761: LD_INT 13
64763: ST_TO_ADDR
// hc_gallery =  ;
64764: LD_ADDR_OWVAR 33
64768: PUSH
64769: LD_STRING 
64771: ST_TO_ADDR
// animal := CreateHuman ;
64772: LD_ADDR_VAR 0 12
64776: PUSH
64777: CALL_OW 44
64781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64782: LD_VAR 0 12
64786: PPUSH
64787: LD_VAR 0 8
64791: PPUSH
64792: LD_INT 0
64794: PPUSH
64795: CALL 66563 0 3
// end ;
64799: GO 64753
64801: POP
64802: POP
// if fishes then
64803: LD_VAR 0 7
64807: IFFALSE 64874
// for i = 1 to fishes do
64809: LD_ADDR_VAR 0 11
64813: PUSH
64814: DOUBLE
64815: LD_INT 1
64817: DEC
64818: ST_TO_ADDR
64819: LD_VAR 0 7
64823: PUSH
64824: FOR_TO
64825: IFFALSE 64872
// begin hc_class = 20 ;
64827: LD_ADDR_OWVAR 28
64831: PUSH
64832: LD_INT 20
64834: ST_TO_ADDR
// hc_gallery =  ;
64835: LD_ADDR_OWVAR 33
64839: PUSH
64840: LD_STRING 
64842: ST_TO_ADDR
// animal := CreateHuman ;
64843: LD_ADDR_VAR 0 12
64847: PUSH
64848: CALL_OW 44
64852: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64853: LD_VAR 0 12
64857: PPUSH
64858: LD_VAR 0 9
64862: PPUSH
64863: LD_INT 0
64865: PPUSH
64866: CALL 66563 0 3
// end ;
64870: GO 64824
64872: POP
64873: POP
// end ;
64874: LD_VAR 0 10
64878: RET
// export function WantHeal ( sci , unit ) ; begin
64879: LD_INT 0
64881: PPUSH
// if GetTaskList ( sci ) > 0 then
64882: LD_VAR 0 1
64886: PPUSH
64887: CALL_OW 437
64891: PUSH
64892: LD_INT 0
64894: GREATER
64895: IFFALSE 64965
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64897: LD_VAR 0 1
64901: PPUSH
64902: CALL_OW 437
64906: PUSH
64907: LD_INT 1
64909: ARRAY
64910: PUSH
64911: LD_INT 1
64913: ARRAY
64914: PUSH
64915: LD_STRING l
64917: EQUAL
64918: PUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: CALL_OW 437
64928: PUSH
64929: LD_INT 1
64931: ARRAY
64932: PUSH
64933: LD_INT 4
64935: ARRAY
64936: PUSH
64937: LD_VAR 0 2
64941: EQUAL
64942: AND
64943: IFFALSE 64955
// result := true else
64945: LD_ADDR_VAR 0 3
64949: PUSH
64950: LD_INT 1
64952: ST_TO_ADDR
64953: GO 64963
// result := false ;
64955: LD_ADDR_VAR 0 3
64959: PUSH
64960: LD_INT 0
64962: ST_TO_ADDR
// end else
64963: GO 64973
// result := false ;
64965: LD_ADDR_VAR 0 3
64969: PUSH
64970: LD_INT 0
64972: ST_TO_ADDR
// end ;
64973: LD_VAR 0 3
64977: RET
// export function HealTarget ( sci ) ; begin
64978: LD_INT 0
64980: PPUSH
// if not sci then
64981: LD_VAR 0 1
64985: NOT
64986: IFFALSE 64990
// exit ;
64988: GO 65055
// result := 0 ;
64990: LD_ADDR_VAR 0 2
64994: PUSH
64995: LD_INT 0
64997: ST_TO_ADDR
// if GetTaskList ( sci ) then
64998: LD_VAR 0 1
65002: PPUSH
65003: CALL_OW 437
65007: IFFALSE 65055
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 437
65018: PUSH
65019: LD_INT 1
65021: ARRAY
65022: PUSH
65023: LD_INT 1
65025: ARRAY
65026: PUSH
65027: LD_STRING l
65029: EQUAL
65030: IFFALSE 65055
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65032: LD_ADDR_VAR 0 2
65036: PUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: CALL_OW 437
65046: PUSH
65047: LD_INT 1
65049: ARRAY
65050: PUSH
65051: LD_INT 4
65053: ARRAY
65054: ST_TO_ADDR
// end ;
65055: LD_VAR 0 2
65059: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65060: LD_INT 0
65062: PPUSH
65063: PPUSH
65064: PPUSH
65065: PPUSH
// if not base_units then
65066: LD_VAR 0 1
65070: NOT
65071: IFFALSE 65075
// exit ;
65073: GO 65162
// result := false ;
65075: LD_ADDR_VAR 0 2
65079: PUSH
65080: LD_INT 0
65082: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65083: LD_ADDR_VAR 0 5
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: LD_INT 21
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PPUSH
65103: CALL_OW 72
65107: ST_TO_ADDR
// if not tmp then
65108: LD_VAR 0 5
65112: NOT
65113: IFFALSE 65117
// exit ;
65115: GO 65162
// for i in tmp do
65117: LD_ADDR_VAR 0 3
65121: PUSH
65122: LD_VAR 0 5
65126: PUSH
65127: FOR_IN
65128: IFFALSE 65160
// begin result := EnemyInRange ( i , 22 ) ;
65130: LD_ADDR_VAR 0 2
65134: PUSH
65135: LD_VAR 0 3
65139: PPUSH
65140: LD_INT 22
65142: PPUSH
65143: CALL 63398 0 2
65147: ST_TO_ADDR
// if result then
65148: LD_VAR 0 2
65152: IFFALSE 65158
// exit ;
65154: POP
65155: POP
65156: GO 65162
// end ;
65158: GO 65127
65160: POP
65161: POP
// end ;
65162: LD_VAR 0 2
65166: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65167: LD_INT 0
65169: PPUSH
65170: PPUSH
// if not units then
65171: LD_VAR 0 1
65175: NOT
65176: IFFALSE 65180
// exit ;
65178: GO 65250
// result := [ ] ;
65180: LD_ADDR_VAR 0 3
65184: PUSH
65185: EMPTY
65186: ST_TO_ADDR
// for i in units do
65187: LD_ADDR_VAR 0 4
65191: PUSH
65192: LD_VAR 0 1
65196: PUSH
65197: FOR_IN
65198: IFFALSE 65248
// if GetTag ( i ) = tag then
65200: LD_VAR 0 4
65204: PPUSH
65205: CALL_OW 110
65209: PUSH
65210: LD_VAR 0 2
65214: EQUAL
65215: IFFALSE 65246
// result := Replace ( result , result + 1 , i ) ;
65217: LD_ADDR_VAR 0 3
65221: PUSH
65222: LD_VAR 0 3
65226: PPUSH
65227: LD_VAR 0 3
65231: PUSH
65232: LD_INT 1
65234: PLUS
65235: PPUSH
65236: LD_VAR 0 4
65240: PPUSH
65241: CALL_OW 1
65245: ST_TO_ADDR
65246: GO 65197
65248: POP
65249: POP
// end ;
65250: LD_VAR 0 3
65254: RET
// export function IsDriver ( un ) ; begin
65255: LD_INT 0
65257: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65258: LD_ADDR_VAR 0 2
65262: PUSH
65263: LD_VAR 0 1
65267: PUSH
65268: LD_INT 55
65270: PUSH
65271: EMPTY
65272: LIST
65273: PPUSH
65274: CALL_OW 69
65278: IN
65279: ST_TO_ADDR
// end ;
65280: LD_VAR 0 2
65284: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65285: LD_INT 0
65287: PPUSH
65288: PPUSH
// list := [ ] ;
65289: LD_ADDR_VAR 0 5
65293: PUSH
65294: EMPTY
65295: ST_TO_ADDR
// case d of 0 :
65296: LD_VAR 0 3
65300: PUSH
65301: LD_INT 0
65303: DOUBLE
65304: EQUAL
65305: IFTRUE 65309
65307: GO 65442
65309: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65310: LD_ADDR_VAR 0 5
65314: PUSH
65315: LD_VAR 0 1
65319: PUSH
65320: LD_INT 4
65322: MINUS
65323: PUSH
65324: LD_VAR 0 2
65328: PUSH
65329: LD_INT 4
65331: MINUS
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: PUSH
65341: LD_VAR 0 1
65345: PUSH
65346: LD_INT 3
65348: MINUS
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: LD_VAR 0 1
65367: PUSH
65368: LD_INT 4
65370: PLUS
65371: PUSH
65372: LD_VAR 0 2
65376: PUSH
65377: LD_INT 4
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 3
65392: PLUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 3
65401: PLUS
65402: PUSH
65403: LD_INT 5
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: LD_INT 4
65423: PLUS
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// end ; 1 :
65440: GO 66140
65442: LD_INT 1
65444: DOUBLE
65445: EQUAL
65446: IFTRUE 65450
65448: GO 65583
65450: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65451: LD_ADDR_VAR 0 5
65455: PUSH
65456: LD_VAR 0 1
65460: PUSH
65461: LD_VAR 0 2
65465: PUSH
65466: LD_INT 4
65468: MINUS
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: PUSH
65478: LD_VAR 0 1
65482: PUSH
65483: LD_INT 3
65485: MINUS
65486: PUSH
65487: LD_VAR 0 2
65491: PUSH
65492: LD_INT 3
65494: MINUS
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_INT 4
65511: MINUS
65512: PUSH
65513: LD_VAR 0 2
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: LD_VAR 0 1
65530: PUSH
65531: LD_VAR 0 2
65535: PUSH
65536: LD_INT 3
65538: PLUS
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: PUSH
65548: LD_VAR 0 1
65552: PUSH
65553: LD_INT 4
65555: PLUS
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: LD_INT 4
65564: PLUS
65565: PUSH
65566: LD_INT 5
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// end ; 2 :
65581: GO 66140
65583: LD_INT 2
65585: DOUBLE
65586: EQUAL
65587: IFTRUE 65591
65589: GO 65720
65591: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65592: LD_ADDR_VAR 0 5
65596: PUSH
65597: LD_VAR 0 1
65601: PUSH
65602: LD_VAR 0 2
65606: PUSH
65607: LD_INT 3
65609: MINUS
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: PUSH
65619: LD_VAR 0 1
65623: PUSH
65624: LD_INT 4
65626: PLUS
65627: PUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_INT 4
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: PUSH
65641: LD_VAR 0 1
65645: PUSH
65646: LD_VAR 0 2
65650: PUSH
65651: LD_INT 4
65653: PLUS
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: PUSH
65663: LD_VAR 0 1
65667: PUSH
65668: LD_INT 3
65670: MINUS
65671: PUSH
65672: LD_VAR 0 2
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: PUSH
65685: LD_VAR 0 1
65689: PUSH
65690: LD_INT 4
65692: MINUS
65693: PUSH
65694: LD_VAR 0 2
65698: PUSH
65699: LD_INT 4
65701: MINUS
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: ST_TO_ADDR
// end ; 3 :
65718: GO 66140
65720: LD_INT 3
65722: DOUBLE
65723: EQUAL
65724: IFTRUE 65728
65726: GO 65861
65728: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65729: LD_ADDR_VAR 0 5
65733: PUSH
65734: LD_VAR 0 1
65738: PUSH
65739: LD_INT 3
65741: PLUS
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: LD_VAR 0 1
65760: PUSH
65761: LD_INT 4
65763: PLUS
65764: PUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_INT 4
65772: PLUS
65773: PUSH
65774: LD_INT 5
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: PUSH
65782: LD_VAR 0 1
65786: PUSH
65787: LD_INT 4
65789: MINUS
65790: PUSH
65791: LD_VAR 0 2
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: PUSH
65804: LD_VAR 0 1
65808: PUSH
65809: LD_VAR 0 2
65813: PUSH
65814: LD_INT 4
65816: MINUS
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: LD_VAR 0 1
65830: PUSH
65831: LD_INT 3
65833: MINUS
65834: PUSH
65835: LD_VAR 0 2
65839: PUSH
65840: LD_INT 3
65842: MINUS
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: ST_TO_ADDR
// end ; 4 :
65859: GO 66140
65861: LD_INT 4
65863: DOUBLE
65864: EQUAL
65865: IFTRUE 65869
65867: GO 66002
65869: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65870: LD_ADDR_VAR 0 5
65874: PUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_VAR 0 2
65884: PUSH
65885: LD_INT 4
65887: PLUS
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: PUSH
65897: LD_VAR 0 1
65901: PUSH
65902: LD_INT 3
65904: PLUS
65905: PUSH
65906: LD_VAR 0 2
65910: PUSH
65911: LD_INT 3
65913: PLUS
65914: PUSH
65915: LD_INT 5
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: LD_INT 4
65930: PLUS
65931: PUSH
65932: LD_VAR 0 2
65936: PUSH
65937: LD_INT 4
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: LD_VAR 0 1
65949: PUSH
65950: LD_VAR 0 2
65954: PUSH
65955: LD_INT 3
65957: MINUS
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: PUSH
65967: LD_VAR 0 1
65971: PUSH
65972: LD_INT 4
65974: MINUS
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: LD_INT 4
65983: MINUS
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: ST_TO_ADDR
// end ; 5 :
66000: GO 66140
66002: LD_INT 5
66004: DOUBLE
66005: EQUAL
66006: IFTRUE 66010
66008: GO 66139
66010: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66011: LD_ADDR_VAR 0 5
66015: PUSH
66016: LD_VAR 0 1
66020: PUSH
66021: LD_INT 4
66023: MINUS
66024: PUSH
66025: LD_VAR 0 2
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_VAR 0 2
66047: PUSH
66048: LD_INT 4
66050: MINUS
66051: PUSH
66052: LD_INT 3
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: PUSH
66060: LD_VAR 0 1
66064: PUSH
66065: LD_INT 4
66067: PLUS
66068: PUSH
66069: LD_VAR 0 2
66073: PUSH
66074: LD_INT 4
66076: PLUS
66077: PUSH
66078: LD_INT 5
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: PUSH
66086: LD_VAR 0 1
66090: PUSH
66091: LD_INT 3
66093: PLUS
66094: PUSH
66095: LD_VAR 0 2
66099: PUSH
66100: LD_INT 4
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: PUSH
66108: LD_VAR 0 1
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_INT 3
66120: PLUS
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// end ; end ;
66137: GO 66140
66139: POP
// result := list ;
66140: LD_ADDR_VAR 0 4
66144: PUSH
66145: LD_VAR 0 5
66149: ST_TO_ADDR
// end ;
66150: LD_VAR 0 4
66154: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66155: LD_INT 0
66157: PPUSH
66158: PPUSH
66159: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66160: LD_VAR 0 1
66164: NOT
66165: PUSH
66166: LD_VAR 0 2
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: LD_INT 2
66176: PUSH
66177: LD_INT 3
66179: PUSH
66180: LD_INT 4
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: IN
66189: NOT
66190: OR
66191: IFFALSE 66195
// exit ;
66193: GO 66287
// tmp := [ ] ;
66195: LD_ADDR_VAR 0 5
66199: PUSH
66200: EMPTY
66201: ST_TO_ADDR
// for i in units do
66202: LD_ADDR_VAR 0 4
66206: PUSH
66207: LD_VAR 0 1
66211: PUSH
66212: FOR_IN
66213: IFFALSE 66256
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66215: LD_ADDR_VAR 0 5
66219: PUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: LD_VAR 0 5
66229: PUSH
66230: LD_INT 1
66232: PLUS
66233: PPUSH
66234: LD_VAR 0 4
66238: PPUSH
66239: LD_VAR 0 2
66243: PPUSH
66244: CALL_OW 259
66248: PPUSH
66249: CALL_OW 2
66253: ST_TO_ADDR
66254: GO 66212
66256: POP
66257: POP
// if not tmp then
66258: LD_VAR 0 5
66262: NOT
66263: IFFALSE 66267
// exit ;
66265: GO 66287
// result := SortListByListDesc ( units , tmp ) ;
66267: LD_ADDR_VAR 0 3
66271: PUSH
66272: LD_VAR 0 1
66276: PPUSH
66277: LD_VAR 0 5
66281: PPUSH
66282: CALL_OW 77
66286: ST_TO_ADDR
// end ;
66287: LD_VAR 0 3
66291: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66292: LD_INT 0
66294: PPUSH
66295: PPUSH
66296: PPUSH
// result := false ;
66297: LD_ADDR_VAR 0 3
66301: PUSH
66302: LD_INT 0
66304: ST_TO_ADDR
// x := GetX ( building ) ;
66305: LD_ADDR_VAR 0 4
66309: PUSH
66310: LD_VAR 0 2
66314: PPUSH
66315: CALL_OW 250
66319: ST_TO_ADDR
// y := GetY ( building ) ;
66320: LD_ADDR_VAR 0 5
66324: PUSH
66325: LD_VAR 0 2
66329: PPUSH
66330: CALL_OW 251
66334: ST_TO_ADDR
// if not building or not x or not y then
66335: LD_VAR 0 2
66339: NOT
66340: PUSH
66341: LD_VAR 0 4
66345: NOT
66346: OR
66347: PUSH
66348: LD_VAR 0 5
66352: NOT
66353: OR
66354: IFFALSE 66358
// exit ;
66356: GO 66450
// if GetTaskList ( unit ) then
66358: LD_VAR 0 1
66362: PPUSH
66363: CALL_OW 437
66367: IFFALSE 66450
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66369: LD_STRING e
66371: PUSH
66372: LD_VAR 0 1
66376: PPUSH
66377: CALL_OW 437
66381: PUSH
66382: LD_INT 1
66384: ARRAY
66385: PUSH
66386: LD_INT 1
66388: ARRAY
66389: EQUAL
66390: PUSH
66391: LD_VAR 0 4
66395: PUSH
66396: LD_VAR 0 1
66400: PPUSH
66401: CALL_OW 437
66405: PUSH
66406: LD_INT 1
66408: ARRAY
66409: PUSH
66410: LD_INT 2
66412: ARRAY
66413: EQUAL
66414: AND
66415: PUSH
66416: LD_VAR 0 5
66420: PUSH
66421: LD_VAR 0 1
66425: PPUSH
66426: CALL_OW 437
66430: PUSH
66431: LD_INT 1
66433: ARRAY
66434: PUSH
66435: LD_INT 3
66437: ARRAY
66438: EQUAL
66439: AND
66440: IFFALSE 66450
// result := true end ;
66442: LD_ADDR_VAR 0 3
66446: PUSH
66447: LD_INT 1
66449: ST_TO_ADDR
// end ;
66450: LD_VAR 0 3
66454: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66455: LD_INT 0
66457: PPUSH
// result := false ;
66458: LD_ADDR_VAR 0 4
66462: PUSH
66463: LD_INT 0
66465: ST_TO_ADDR
// if GetTaskList ( unit ) then
66466: LD_VAR 0 1
66470: PPUSH
66471: CALL_OW 437
66475: IFFALSE 66558
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66477: LD_STRING M
66479: PUSH
66480: LD_VAR 0 1
66484: PPUSH
66485: CALL_OW 437
66489: PUSH
66490: LD_INT 1
66492: ARRAY
66493: PUSH
66494: LD_INT 1
66496: ARRAY
66497: EQUAL
66498: PUSH
66499: LD_VAR 0 2
66503: PUSH
66504: LD_VAR 0 1
66508: PPUSH
66509: CALL_OW 437
66513: PUSH
66514: LD_INT 1
66516: ARRAY
66517: PUSH
66518: LD_INT 2
66520: ARRAY
66521: EQUAL
66522: AND
66523: PUSH
66524: LD_VAR 0 3
66528: PUSH
66529: LD_VAR 0 1
66533: PPUSH
66534: CALL_OW 437
66538: PUSH
66539: LD_INT 1
66541: ARRAY
66542: PUSH
66543: LD_INT 3
66545: ARRAY
66546: EQUAL
66547: AND
66548: IFFALSE 66558
// result := true ;
66550: LD_ADDR_VAR 0 4
66554: PUSH
66555: LD_INT 1
66557: ST_TO_ADDR
// end ; end ;
66558: LD_VAR 0 4
66562: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66563: LD_INT 0
66565: PPUSH
66566: PPUSH
66567: PPUSH
66568: PPUSH
// if not unit or not area then
66569: LD_VAR 0 1
66573: NOT
66574: PUSH
66575: LD_VAR 0 2
66579: NOT
66580: OR
66581: IFFALSE 66585
// exit ;
66583: GO 66749
// tmp := AreaToList ( area , i ) ;
66585: LD_ADDR_VAR 0 6
66589: PUSH
66590: LD_VAR 0 2
66594: PPUSH
66595: LD_VAR 0 5
66599: PPUSH
66600: CALL_OW 517
66604: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66605: LD_ADDR_VAR 0 5
66609: PUSH
66610: DOUBLE
66611: LD_INT 1
66613: DEC
66614: ST_TO_ADDR
66615: LD_VAR 0 6
66619: PUSH
66620: LD_INT 1
66622: ARRAY
66623: PUSH
66624: FOR_TO
66625: IFFALSE 66747
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66627: LD_ADDR_VAR 0 7
66631: PUSH
66632: LD_VAR 0 6
66636: PUSH
66637: LD_INT 1
66639: ARRAY
66640: PUSH
66641: LD_VAR 0 5
66645: ARRAY
66646: PUSH
66647: LD_VAR 0 6
66651: PUSH
66652: LD_INT 2
66654: ARRAY
66655: PUSH
66656: LD_VAR 0 5
66660: ARRAY
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66666: LD_VAR 0 7
66670: PUSH
66671: LD_INT 1
66673: ARRAY
66674: PPUSH
66675: LD_VAR 0 7
66679: PUSH
66680: LD_INT 2
66682: ARRAY
66683: PPUSH
66684: CALL_OW 428
66688: PUSH
66689: LD_INT 0
66691: EQUAL
66692: IFFALSE 66745
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66694: LD_VAR 0 1
66698: PPUSH
66699: LD_VAR 0 7
66703: PUSH
66704: LD_INT 1
66706: ARRAY
66707: PPUSH
66708: LD_VAR 0 7
66712: PUSH
66713: LD_INT 2
66715: ARRAY
66716: PPUSH
66717: LD_VAR 0 3
66721: PPUSH
66722: CALL_OW 48
// result := IsPlaced ( unit ) ;
66726: LD_ADDR_VAR 0 4
66730: PUSH
66731: LD_VAR 0 1
66735: PPUSH
66736: CALL_OW 305
66740: ST_TO_ADDR
// exit ;
66741: POP
66742: POP
66743: GO 66749
// end ; end ;
66745: GO 66624
66747: POP
66748: POP
// end ;
66749: LD_VAR 0 4
66753: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66754: LD_INT 0
66756: PPUSH
66757: PPUSH
66758: PPUSH
// if not side or side > 8 then
66759: LD_VAR 0 1
66763: NOT
66764: PUSH
66765: LD_VAR 0 1
66769: PUSH
66770: LD_INT 8
66772: GREATER
66773: OR
66774: IFFALSE 66778
// exit ;
66776: GO 66965
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66778: LD_ADDR_VAR 0 4
66782: PUSH
66783: LD_INT 22
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 21
66797: PUSH
66798: LD_INT 3
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PPUSH
66809: CALL_OW 69
66813: ST_TO_ADDR
// if not tmp then
66814: LD_VAR 0 4
66818: NOT
66819: IFFALSE 66823
// exit ;
66821: GO 66965
// enable_addtolog := true ;
66823: LD_ADDR_OWVAR 81
66827: PUSH
66828: LD_INT 1
66830: ST_TO_ADDR
// AddToLog ( [ ) ;
66831: LD_STRING [
66833: PPUSH
66834: CALL_OW 561
// for i in tmp do
66838: LD_ADDR_VAR 0 3
66842: PUSH
66843: LD_VAR 0 4
66847: PUSH
66848: FOR_IN
66849: IFFALSE 66956
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66851: LD_STRING [
66853: PUSH
66854: LD_VAR 0 3
66858: PPUSH
66859: CALL_OW 266
66863: STR
66864: PUSH
66865: LD_STRING , 
66867: STR
66868: PUSH
66869: LD_VAR 0 3
66873: PPUSH
66874: CALL_OW 250
66878: STR
66879: PUSH
66880: LD_STRING , 
66882: STR
66883: PUSH
66884: LD_VAR 0 3
66888: PPUSH
66889: CALL_OW 251
66893: STR
66894: PUSH
66895: LD_STRING , 
66897: STR
66898: PUSH
66899: LD_VAR 0 3
66903: PPUSH
66904: CALL_OW 254
66908: STR
66909: PUSH
66910: LD_STRING , 
66912: STR
66913: PUSH
66914: LD_VAR 0 3
66918: PPUSH
66919: LD_INT 1
66921: PPUSH
66922: CALL_OW 268
66926: STR
66927: PUSH
66928: LD_STRING , 
66930: STR
66931: PUSH
66932: LD_VAR 0 3
66936: PPUSH
66937: LD_INT 2
66939: PPUSH
66940: CALL_OW 268
66944: STR
66945: PUSH
66946: LD_STRING ],
66948: STR
66949: PPUSH
66950: CALL_OW 561
// end ;
66954: GO 66848
66956: POP
66957: POP
// AddToLog ( ]; ) ;
66958: LD_STRING ];
66960: PPUSH
66961: CALL_OW 561
// end ;
66965: LD_VAR 0 2
66969: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66970: LD_INT 0
66972: PPUSH
66973: PPUSH
66974: PPUSH
66975: PPUSH
66976: PPUSH
// if not area or not rate or not max then
66977: LD_VAR 0 1
66981: NOT
66982: PUSH
66983: LD_VAR 0 2
66987: NOT
66988: OR
66989: PUSH
66990: LD_VAR 0 4
66994: NOT
66995: OR
66996: IFFALSE 67000
// exit ;
66998: GO 67192
// while 1 do
67000: LD_INT 1
67002: IFFALSE 67192
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67004: LD_ADDR_VAR 0 9
67008: PUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: LD_INT 1
67016: PPUSH
67017: CALL_OW 287
67021: PUSH
67022: LD_INT 10
67024: MUL
67025: ST_TO_ADDR
// r := rate / 10 ;
67026: LD_ADDR_VAR 0 7
67030: PUSH
67031: LD_VAR 0 2
67035: PUSH
67036: LD_INT 10
67038: DIVREAL
67039: ST_TO_ADDR
// time := 1 1$00 ;
67040: LD_ADDR_VAR 0 8
67044: PUSH
67045: LD_INT 2100
67047: ST_TO_ADDR
// if amount < min then
67048: LD_VAR 0 9
67052: PUSH
67053: LD_VAR 0 3
67057: LESS
67058: IFFALSE 67076
// r := r * 2 else
67060: LD_ADDR_VAR 0 7
67064: PUSH
67065: LD_VAR 0 7
67069: PUSH
67070: LD_INT 2
67072: MUL
67073: ST_TO_ADDR
67074: GO 67102
// if amount > max then
67076: LD_VAR 0 9
67080: PUSH
67081: LD_VAR 0 4
67085: GREATER
67086: IFFALSE 67102
// r := r / 2 ;
67088: LD_ADDR_VAR 0 7
67092: PUSH
67093: LD_VAR 0 7
67097: PUSH
67098: LD_INT 2
67100: DIVREAL
67101: ST_TO_ADDR
// time := time / r ;
67102: LD_ADDR_VAR 0 8
67106: PUSH
67107: LD_VAR 0 8
67111: PUSH
67112: LD_VAR 0 7
67116: DIVREAL
67117: ST_TO_ADDR
// if time < 0 then
67118: LD_VAR 0 8
67122: PUSH
67123: LD_INT 0
67125: LESS
67126: IFFALSE 67143
// time := time * - 1 ;
67128: LD_ADDR_VAR 0 8
67132: PUSH
67133: LD_VAR 0 8
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: MUL
67142: ST_TO_ADDR
// wait ( time ) ;
67143: LD_VAR 0 8
67147: PPUSH
67148: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67152: LD_INT 35
67154: PPUSH
67155: LD_INT 875
67157: PPUSH
67158: CALL_OW 12
67162: PPUSH
67163: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67167: LD_INT 1
67169: PPUSH
67170: LD_INT 5
67172: PPUSH
67173: CALL_OW 12
67177: PPUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: LD_INT 1
67185: PPUSH
67186: CALL_OW 55
// end ;
67190: GO 67000
// end ;
67192: LD_VAR 0 5
67196: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
67201: PPUSH
67202: PPUSH
67203: PPUSH
67204: PPUSH
67205: PPUSH
67206: PPUSH
// if not turrets or not factories then
67207: LD_VAR 0 1
67211: NOT
67212: PUSH
67213: LD_VAR 0 2
67217: NOT
67218: OR
67219: IFFALSE 67223
// exit ;
67221: GO 67530
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67223: LD_ADDR_VAR 0 10
67227: PUSH
67228: LD_INT 5
67230: PUSH
67231: LD_INT 6
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 2
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: LD_INT 5
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 24
67265: PUSH
67266: LD_INT 25
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 23
67275: PUSH
67276: LD_INT 27
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 42
67289: PUSH
67290: LD_INT 43
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 44
67299: PUSH
67300: LD_INT 46
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 45
67309: PUSH
67310: LD_INT 47
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: LIST
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: ST_TO_ADDR
// result := [ ] ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: EMPTY
67333: ST_TO_ADDR
// for i in turrets do
67334: LD_ADDR_VAR 0 4
67338: PUSH
67339: LD_VAR 0 1
67343: PUSH
67344: FOR_IN
67345: IFFALSE 67528
// begin nat := GetNation ( i ) ;
67347: LD_ADDR_VAR 0 7
67351: PUSH
67352: LD_VAR 0 4
67356: PPUSH
67357: CALL_OW 248
67361: ST_TO_ADDR
// weapon := 0 ;
67362: LD_ADDR_VAR 0 8
67366: PUSH
67367: LD_INT 0
67369: ST_TO_ADDR
// if not nat then
67370: LD_VAR 0 7
67374: NOT
67375: IFFALSE 67379
// continue ;
67377: GO 67344
// for j in list [ nat ] do
67379: LD_ADDR_VAR 0 5
67383: PUSH
67384: LD_VAR 0 10
67388: PUSH
67389: LD_VAR 0 7
67393: ARRAY
67394: PUSH
67395: FOR_IN
67396: IFFALSE 67437
// if GetBWeapon ( i ) = j [ 1 ] then
67398: LD_VAR 0 4
67402: PPUSH
67403: CALL_OW 269
67407: PUSH
67408: LD_VAR 0 5
67412: PUSH
67413: LD_INT 1
67415: ARRAY
67416: EQUAL
67417: IFFALSE 67435
// begin weapon := j [ 2 ] ;
67419: LD_ADDR_VAR 0 8
67423: PUSH
67424: LD_VAR 0 5
67428: PUSH
67429: LD_INT 2
67431: ARRAY
67432: ST_TO_ADDR
// break ;
67433: GO 67437
// end ;
67435: GO 67395
67437: POP
67438: POP
// if not weapon then
67439: LD_VAR 0 8
67443: NOT
67444: IFFALSE 67448
// continue ;
67446: GO 67344
// for k in factories do
67448: LD_ADDR_VAR 0 6
67452: PUSH
67453: LD_VAR 0 2
67457: PUSH
67458: FOR_IN
67459: IFFALSE 67524
// begin weapons := AvailableWeaponList ( k ) ;
67461: LD_ADDR_VAR 0 9
67465: PUSH
67466: LD_VAR 0 6
67470: PPUSH
67471: CALL_OW 478
67475: ST_TO_ADDR
// if not weapons then
67476: LD_VAR 0 9
67480: NOT
67481: IFFALSE 67485
// continue ;
67483: GO 67458
// if weapon in weapons then
67485: LD_VAR 0 8
67489: PUSH
67490: LD_VAR 0 9
67494: IN
67495: IFFALSE 67522
// begin result := [ i , weapon ] ;
67497: LD_ADDR_VAR 0 3
67501: PUSH
67502: LD_VAR 0 4
67506: PUSH
67507: LD_VAR 0 8
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: ST_TO_ADDR
// exit ;
67516: POP
67517: POP
67518: POP
67519: POP
67520: GO 67530
// end ; end ;
67522: GO 67458
67524: POP
67525: POP
// end ;
67526: GO 67344
67528: POP
67529: POP
// end ;
67530: LD_VAR 0 3
67534: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67535: LD_INT 0
67537: PPUSH
// if not side or side > 8 then
67538: LD_VAR 0 3
67542: NOT
67543: PUSH
67544: LD_VAR 0 3
67548: PUSH
67549: LD_INT 8
67551: GREATER
67552: OR
67553: IFFALSE 67557
// exit ;
67555: GO 67616
// if not range then
67557: LD_VAR 0 4
67561: NOT
67562: IFFALSE 67573
// range := - 12 ;
67564: LD_ADDR_VAR 0 4
67568: PUSH
67569: LD_INT 12
67571: NEG
67572: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67573: LD_VAR 0 1
67577: PPUSH
67578: LD_VAR 0 2
67582: PPUSH
67583: LD_VAR 0 3
67587: PPUSH
67588: LD_VAR 0 4
67592: PPUSH
67593: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67597: LD_VAR 0 1
67601: PPUSH
67602: LD_VAR 0 2
67606: PPUSH
67607: LD_VAR 0 3
67611: PPUSH
67612: CALL_OW 331
// end ;
67616: LD_VAR 0 5
67620: RET
// export function Video ( mode ) ; begin
67621: LD_INT 0
67623: PPUSH
// ingame_video = mode ;
67624: LD_ADDR_OWVAR 52
67628: PUSH
67629: LD_VAR 0 1
67633: ST_TO_ADDR
// interface_hidden = mode ;
67634: LD_ADDR_OWVAR 54
67638: PUSH
67639: LD_VAR 0 1
67643: ST_TO_ADDR
// end ;
67644: LD_VAR 0 2
67648: RET
// export function Join ( array , element ) ; begin
67649: LD_INT 0
67651: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67652: LD_ADDR_VAR 0 3
67656: PUSH
67657: LD_VAR 0 1
67661: PPUSH
67662: LD_VAR 0 1
67666: PUSH
67667: LD_INT 1
67669: PLUS
67670: PPUSH
67671: LD_VAR 0 2
67675: PPUSH
67676: CALL_OW 1
67680: ST_TO_ADDR
// end ;
67681: LD_VAR 0 3
67685: RET
// export function JoinUnion ( array , element ) ; begin
67686: LD_INT 0
67688: PPUSH
// result := array union element ;
67689: LD_ADDR_VAR 0 3
67693: PUSH
67694: LD_VAR 0 1
67698: PUSH
67699: LD_VAR 0 2
67703: UNION
67704: ST_TO_ADDR
// end ;
67705: LD_VAR 0 3
67709: RET
// export function GetBehemoths ( side ) ; begin
67710: LD_INT 0
67712: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67713: LD_ADDR_VAR 0 2
67717: PUSH
67718: LD_INT 22
67720: PUSH
67721: LD_VAR 0 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 31
67732: PUSH
67733: LD_INT 25
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PPUSH
67744: CALL_OW 69
67748: ST_TO_ADDR
// end ;
67749: LD_VAR 0 2
67753: RET
// export function Shuffle ( array ) ; var i , index ; begin
67754: LD_INT 0
67756: PPUSH
67757: PPUSH
67758: PPUSH
// result := [ ] ;
67759: LD_ADDR_VAR 0 2
67763: PUSH
67764: EMPTY
67765: ST_TO_ADDR
// if not array then
67766: LD_VAR 0 1
67770: NOT
67771: IFFALSE 67775
// exit ;
67773: GO 67874
// Randomize ;
67775: CALL_OW 10
// for i = array downto 1 do
67779: LD_ADDR_VAR 0 3
67783: PUSH
67784: DOUBLE
67785: LD_VAR 0 1
67789: INC
67790: ST_TO_ADDR
67791: LD_INT 1
67793: PUSH
67794: FOR_DOWNTO
67795: IFFALSE 67872
// begin index := rand ( 1 , array ) ;
67797: LD_ADDR_VAR 0 4
67801: PUSH
67802: LD_INT 1
67804: PPUSH
67805: LD_VAR 0 1
67809: PPUSH
67810: CALL_OW 12
67814: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67815: LD_ADDR_VAR 0 2
67819: PUSH
67820: LD_VAR 0 2
67824: PPUSH
67825: LD_VAR 0 2
67829: PUSH
67830: LD_INT 1
67832: PLUS
67833: PPUSH
67834: LD_VAR 0 1
67838: PUSH
67839: LD_VAR 0 4
67843: ARRAY
67844: PPUSH
67845: CALL_OW 2
67849: ST_TO_ADDR
// array := Delete ( array , index ) ;
67850: LD_ADDR_VAR 0 1
67854: PUSH
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_VAR 0 4
67864: PPUSH
67865: CALL_OW 3
67869: ST_TO_ADDR
// end ;
67870: GO 67794
67872: POP
67873: POP
// end ;
67874: LD_VAR 0 2
67878: RET
// export function GetBaseMaterials ( base ) ; begin
67879: LD_INT 0
67881: PPUSH
// result := [ 0 , 0 , 0 ] ;
67882: LD_ADDR_VAR 0 2
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: ST_TO_ADDR
// if not base then
67901: LD_VAR 0 1
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 67959
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67910: LD_ADDR_VAR 0 2
67914: PUSH
67915: LD_VAR 0 1
67919: PPUSH
67920: LD_INT 1
67922: PPUSH
67923: CALL_OW 275
67927: PUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: LD_INT 2
67935: PPUSH
67936: CALL_OW 275
67940: PUSH
67941: LD_VAR 0 1
67945: PPUSH
67946: LD_INT 3
67948: PPUSH
67949: CALL_OW 275
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: ST_TO_ADDR
// end ;
67959: LD_VAR 0 2
67963: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67964: LD_INT 0
67966: PPUSH
67967: PPUSH
// result := array ;
67968: LD_ADDR_VAR 0 3
67972: PUSH
67973: LD_VAR 0 1
67977: ST_TO_ADDR
// if size > 0 then
67978: LD_VAR 0 2
67982: PUSH
67983: LD_INT 0
67985: GREATER
67986: IFFALSE 68032
// for i := array downto size do
67988: LD_ADDR_VAR 0 4
67992: PUSH
67993: DOUBLE
67994: LD_VAR 0 1
67998: INC
67999: ST_TO_ADDR
68000: LD_VAR 0 2
68004: PUSH
68005: FOR_DOWNTO
68006: IFFALSE 68030
// result := Delete ( result , result ) ;
68008: LD_ADDR_VAR 0 3
68012: PUSH
68013: LD_VAR 0 3
68017: PPUSH
68018: LD_VAR 0 3
68022: PPUSH
68023: CALL_OW 3
68027: ST_TO_ADDR
68028: GO 68005
68030: POP
68031: POP
// end ;
68032: LD_VAR 0 3
68036: RET
// export function ComExit ( unit ) ; var tmp ; begin
68037: LD_INT 0
68039: PPUSH
68040: PPUSH
// if not IsInUnit ( unit ) then
68041: LD_VAR 0 1
68045: PPUSH
68046: CALL_OW 310
68050: NOT
68051: IFFALSE 68055
// exit ;
68053: GO 68115
// tmp := IsInUnit ( unit ) ;
68055: LD_ADDR_VAR 0 3
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: CALL_OW 310
68069: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68070: LD_VAR 0 3
68074: PPUSH
68075: CALL_OW 247
68079: PUSH
68080: LD_INT 2
68082: EQUAL
68083: IFFALSE 68096
// ComExitVehicle ( unit ) else
68085: LD_VAR 0 1
68089: PPUSH
68090: CALL_OW 121
68094: GO 68105
// ComExitBuilding ( unit ) ;
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 122
// result := tmp ;
68105: LD_ADDR_VAR 0 2
68109: PUSH
68110: LD_VAR 0 3
68114: ST_TO_ADDR
// end ;
68115: LD_VAR 0 2
68119: RET
// export function ComExitAll ( units ) ; var i ; begin
68120: LD_INT 0
68122: PPUSH
68123: PPUSH
// if not units then
68124: LD_VAR 0 1
68128: NOT
68129: IFFALSE 68133
// exit ;
68131: GO 68159
// for i in units do
68133: LD_ADDR_VAR 0 3
68137: PUSH
68138: LD_VAR 0 1
68142: PUSH
68143: FOR_IN
68144: IFFALSE 68157
// ComExit ( i ) ;
68146: LD_VAR 0 3
68150: PPUSH
68151: CALL 68037 0 1
68155: GO 68143
68157: POP
68158: POP
// end ;
68159: LD_VAR 0 2
68163: RET
// export function ResetHc ; begin
68164: LD_INT 0
68166: PPUSH
// InitHc ;
68167: CALL_OW 19
// hc_importance := 0 ;
68171: LD_ADDR_OWVAR 32
68175: PUSH
68176: LD_INT 0
68178: ST_TO_ADDR
// end ;
68179: LD_VAR 0 1
68183: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68184: LD_INT 0
68186: PPUSH
68187: PPUSH
68188: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68189: LD_ADDR_VAR 0 6
68193: PUSH
68194: LD_VAR 0 1
68198: PUSH
68199: LD_VAR 0 3
68203: PLUS
68204: PUSH
68205: LD_INT 2
68207: DIV
68208: ST_TO_ADDR
// if _x < 0 then
68209: LD_VAR 0 6
68213: PUSH
68214: LD_INT 0
68216: LESS
68217: IFFALSE 68234
// _x := _x * - 1 ;
68219: LD_ADDR_VAR 0 6
68223: PUSH
68224: LD_VAR 0 6
68228: PUSH
68229: LD_INT 1
68231: NEG
68232: MUL
68233: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68234: LD_ADDR_VAR 0 7
68238: PUSH
68239: LD_VAR 0 2
68243: PUSH
68244: LD_VAR 0 4
68248: PLUS
68249: PUSH
68250: LD_INT 2
68252: DIV
68253: ST_TO_ADDR
// if _y < 0 then
68254: LD_VAR 0 7
68258: PUSH
68259: LD_INT 0
68261: LESS
68262: IFFALSE 68279
// _y := _y * - 1 ;
68264: LD_ADDR_VAR 0 7
68268: PUSH
68269: LD_VAR 0 7
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: MUL
68278: ST_TO_ADDR
// result := [ _x , _y ] ;
68279: LD_ADDR_VAR 0 5
68283: PUSH
68284: LD_VAR 0 6
68288: PUSH
68289: LD_VAR 0 7
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: ST_TO_ADDR
// end ;
68298: LD_VAR 0 5
68302: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68303: LD_INT 0
68305: PPUSH
68306: PPUSH
68307: PPUSH
68308: PPUSH
// task := GetTaskList ( unit ) ;
68309: LD_ADDR_VAR 0 7
68313: PUSH
68314: LD_VAR 0 1
68318: PPUSH
68319: CALL_OW 437
68323: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68324: LD_VAR 0 7
68328: NOT
68329: PUSH
68330: LD_VAR 0 1
68334: PPUSH
68335: LD_VAR 0 2
68339: PPUSH
68340: CALL_OW 308
68344: NOT
68345: AND
68346: IFFALSE 68350
// exit ;
68348: GO 68468
// if IsInArea ( unit , area ) then
68350: LD_VAR 0 1
68354: PPUSH
68355: LD_VAR 0 2
68359: PPUSH
68360: CALL_OW 308
68364: IFFALSE 68382
// begin ComMoveToArea ( unit , goAway ) ;
68366: LD_VAR 0 1
68370: PPUSH
68371: LD_VAR 0 3
68375: PPUSH
68376: CALL_OW 113
// exit ;
68380: GO 68468
// end ; if task [ 1 ] [ 1 ] <> M then
68382: LD_VAR 0 7
68386: PUSH
68387: LD_INT 1
68389: ARRAY
68390: PUSH
68391: LD_INT 1
68393: ARRAY
68394: PUSH
68395: LD_STRING M
68397: NONEQUAL
68398: IFFALSE 68402
// exit ;
68400: GO 68468
// x := task [ 1 ] [ 2 ] ;
68402: LD_ADDR_VAR 0 5
68406: PUSH
68407: LD_VAR 0 7
68411: PUSH
68412: LD_INT 1
68414: ARRAY
68415: PUSH
68416: LD_INT 2
68418: ARRAY
68419: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68420: LD_ADDR_VAR 0 6
68424: PUSH
68425: LD_VAR 0 7
68429: PUSH
68430: LD_INT 1
68432: ARRAY
68433: PUSH
68434: LD_INT 3
68436: ARRAY
68437: ST_TO_ADDR
// if InArea ( x , y , area ) then
68438: LD_VAR 0 5
68442: PPUSH
68443: LD_VAR 0 6
68447: PPUSH
68448: LD_VAR 0 2
68452: PPUSH
68453: CALL_OW 309
68457: IFFALSE 68468
// ComStop ( unit ) ;
68459: LD_VAR 0 1
68463: PPUSH
68464: CALL_OW 141
// end ;
68468: LD_VAR 0 4
68472: RET
// export function Abs ( value ) ; begin
68473: LD_INT 0
68475: PPUSH
// result := value ;
68476: LD_ADDR_VAR 0 2
68480: PUSH
68481: LD_VAR 0 1
68485: ST_TO_ADDR
// if value < 0 then
68486: LD_VAR 0 1
68490: PUSH
68491: LD_INT 0
68493: LESS
68494: IFFALSE 68511
// result := value * - 1 ;
68496: LD_ADDR_VAR 0 2
68500: PUSH
68501: LD_VAR 0 1
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: MUL
68510: ST_TO_ADDR
// end ;
68511: LD_VAR 0 2
68515: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68516: LD_INT 0
68518: PPUSH
68519: PPUSH
68520: PPUSH
68521: PPUSH
68522: PPUSH
68523: PPUSH
68524: PPUSH
68525: PPUSH
// if not unit or not building then
68526: LD_VAR 0 1
68530: NOT
68531: PUSH
68532: LD_VAR 0 2
68536: NOT
68537: OR
68538: IFFALSE 68542
// exit ;
68540: GO 68768
// x := GetX ( building ) ;
68542: LD_ADDR_VAR 0 4
68546: PUSH
68547: LD_VAR 0 2
68551: PPUSH
68552: CALL_OW 250
68556: ST_TO_ADDR
// y := GetY ( building ) ;
68557: LD_ADDR_VAR 0 6
68561: PUSH
68562: LD_VAR 0 2
68566: PPUSH
68567: CALL_OW 251
68571: ST_TO_ADDR
// d := GetDir ( building ) ;
68572: LD_ADDR_VAR 0 8
68576: PUSH
68577: LD_VAR 0 2
68581: PPUSH
68582: CALL_OW 254
68586: ST_TO_ADDR
// r := 4 ;
68587: LD_ADDR_VAR 0 9
68591: PUSH
68592: LD_INT 4
68594: ST_TO_ADDR
// for i := 1 to 5 do
68595: LD_ADDR_VAR 0 10
68599: PUSH
68600: DOUBLE
68601: LD_INT 1
68603: DEC
68604: ST_TO_ADDR
68605: LD_INT 5
68607: PUSH
68608: FOR_TO
68609: IFFALSE 68766
// begin _x := ShiftX ( x , d , r + i ) ;
68611: LD_ADDR_VAR 0 5
68615: PUSH
68616: LD_VAR 0 4
68620: PPUSH
68621: LD_VAR 0 8
68625: PPUSH
68626: LD_VAR 0 9
68630: PUSH
68631: LD_VAR 0 10
68635: PLUS
68636: PPUSH
68637: CALL_OW 272
68641: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68642: LD_ADDR_VAR 0 7
68646: PUSH
68647: LD_VAR 0 6
68651: PPUSH
68652: LD_VAR 0 8
68656: PPUSH
68657: LD_VAR 0 9
68661: PUSH
68662: LD_VAR 0 10
68666: PLUS
68667: PPUSH
68668: CALL_OW 273
68672: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68673: LD_VAR 0 5
68677: PPUSH
68678: LD_VAR 0 7
68682: PPUSH
68683: CALL_OW 488
68687: PUSH
68688: LD_VAR 0 5
68692: PPUSH
68693: LD_VAR 0 7
68697: PPUSH
68698: CALL_OW 428
68702: PPUSH
68703: CALL_OW 247
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: IN
68718: NOT
68719: AND
68720: IFFALSE 68764
// begin ComMoveXY ( unit , _x , _y ) ;
68722: LD_VAR 0 1
68726: PPUSH
68727: LD_VAR 0 5
68731: PPUSH
68732: LD_VAR 0 7
68736: PPUSH
68737: CALL_OW 111
// result := [ _x , _y ] ;
68741: LD_ADDR_VAR 0 3
68745: PUSH
68746: LD_VAR 0 5
68750: PUSH
68751: LD_VAR 0 7
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// exit ;
68760: POP
68761: POP
68762: GO 68768
// end ; end ;
68764: GO 68608
68766: POP
68767: POP
// end ;
68768: LD_VAR 0 3
68772: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68773: LD_INT 0
68775: PPUSH
68776: PPUSH
68777: PPUSH
// result := 0 ;
68778: LD_ADDR_VAR 0 3
68782: PUSH
68783: LD_INT 0
68785: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68786: LD_VAR 0 1
68790: PUSH
68791: LD_INT 0
68793: LESS
68794: PUSH
68795: LD_VAR 0 1
68799: PUSH
68800: LD_INT 8
68802: GREATER
68803: OR
68804: PUSH
68805: LD_VAR 0 2
68809: PUSH
68810: LD_INT 0
68812: LESS
68813: OR
68814: PUSH
68815: LD_VAR 0 2
68819: PUSH
68820: LD_INT 8
68822: GREATER
68823: OR
68824: IFFALSE 68828
// exit ;
68826: GO 68903
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68828: LD_ADDR_VAR 0 4
68832: PUSH
68833: LD_INT 22
68835: PUSH
68836: LD_VAR 0 2
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PPUSH
68845: CALL_OW 69
68849: PUSH
68850: FOR_IN
68851: IFFALSE 68901
// begin un := UnitShoot ( i ) ;
68853: LD_ADDR_VAR 0 5
68857: PUSH
68858: LD_VAR 0 4
68862: PPUSH
68863: CALL_OW 504
68867: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68868: LD_VAR 0 5
68872: PPUSH
68873: CALL_OW 255
68877: PUSH
68878: LD_VAR 0 1
68882: EQUAL
68883: IFFALSE 68899
// begin result := un ;
68885: LD_ADDR_VAR 0 3
68889: PUSH
68890: LD_VAR 0 5
68894: ST_TO_ADDR
// exit ;
68895: POP
68896: POP
68897: GO 68903
// end ; end ;
68899: GO 68850
68901: POP
68902: POP
// end ;
68903: LD_VAR 0 3
68907: RET
// export function GetCargoBay ( units ) ; begin
68908: LD_INT 0
68910: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68911: LD_ADDR_VAR 0 2
68915: PUSH
68916: LD_VAR 0 1
68920: PPUSH
68921: LD_INT 2
68923: PUSH
68924: LD_INT 34
68926: PUSH
68927: LD_INT 12
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 34
68936: PUSH
68937: LD_INT 51
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 34
68946: PUSH
68947: LD_INT 32
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 34
68956: PUSH
68957: LD_EXP 44
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: PPUSH
68973: CALL_OW 72
68977: ST_TO_ADDR
// end ;
68978: LD_VAR 0 2
68982: RET
// export function Negate ( value ) ; begin
68983: LD_INT 0
68985: PPUSH
// result := not value ;
68986: LD_ADDR_VAR 0 2
68990: PUSH
68991: LD_VAR 0 1
68995: NOT
68996: ST_TO_ADDR
// end ;
68997: LD_VAR 0 2
69001: RET
// export function Inc ( value ) ; begin
69002: LD_INT 0
69004: PPUSH
// result := value + 1 ;
69005: LD_ADDR_VAR 0 2
69009: PUSH
69010: LD_VAR 0 1
69014: PUSH
69015: LD_INT 1
69017: PLUS
69018: ST_TO_ADDR
// end ;
69019: LD_VAR 0 2
69023: RET
// export function Dec ( value ) ; begin
69024: LD_INT 0
69026: PPUSH
// result := value - 1 ;
69027: LD_ADDR_VAR 0 2
69031: PUSH
69032: LD_VAR 0 1
69036: PUSH
69037: LD_INT 1
69039: MINUS
69040: ST_TO_ADDR
// end ;
69041: LD_VAR 0 2
69045: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69046: LD_INT 0
69048: PPUSH
69049: PPUSH
69050: PPUSH
69051: PPUSH
69052: PPUSH
69053: PPUSH
69054: PPUSH
69055: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69056: LD_VAR 0 1
69060: PPUSH
69061: LD_VAR 0 2
69065: PPUSH
69066: CALL_OW 488
69070: NOT
69071: PUSH
69072: LD_VAR 0 3
69076: PPUSH
69077: LD_VAR 0 4
69081: PPUSH
69082: CALL_OW 488
69086: NOT
69087: OR
69088: IFFALSE 69101
// begin result := - 1 ;
69090: LD_ADDR_VAR 0 5
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: ST_TO_ADDR
// exit ;
69099: GO 69336
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69101: LD_ADDR_VAR 0 12
69105: PUSH
69106: LD_VAR 0 1
69110: PPUSH
69111: LD_VAR 0 2
69115: PPUSH
69116: LD_VAR 0 3
69120: PPUSH
69121: LD_VAR 0 4
69125: PPUSH
69126: CALL 68184 0 4
69130: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69131: LD_ADDR_VAR 0 11
69135: PUSH
69136: LD_VAR 0 1
69140: PPUSH
69141: LD_VAR 0 2
69145: PPUSH
69146: LD_VAR 0 12
69150: PUSH
69151: LD_INT 1
69153: ARRAY
69154: PPUSH
69155: LD_VAR 0 12
69159: PUSH
69160: LD_INT 2
69162: ARRAY
69163: PPUSH
69164: CALL_OW 298
69168: ST_TO_ADDR
// distance := 9999 ;
69169: LD_ADDR_VAR 0 10
69173: PUSH
69174: LD_INT 9999
69176: ST_TO_ADDR
// for i := 0 to 5 do
69177: LD_ADDR_VAR 0 6
69181: PUSH
69182: DOUBLE
69183: LD_INT 0
69185: DEC
69186: ST_TO_ADDR
69187: LD_INT 5
69189: PUSH
69190: FOR_TO
69191: IFFALSE 69334
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69193: LD_ADDR_VAR 0 7
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: LD_VAR 0 6
69207: PPUSH
69208: LD_VAR 0 11
69212: PPUSH
69213: CALL_OW 272
69217: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69218: LD_ADDR_VAR 0 8
69222: PUSH
69223: LD_VAR 0 2
69227: PPUSH
69228: LD_VAR 0 6
69232: PPUSH
69233: LD_VAR 0 11
69237: PPUSH
69238: CALL_OW 273
69242: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69243: LD_VAR 0 7
69247: PPUSH
69248: LD_VAR 0 8
69252: PPUSH
69253: CALL_OW 488
69257: NOT
69258: IFFALSE 69262
// continue ;
69260: GO 69190
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69262: LD_ADDR_VAR 0 9
69266: PUSH
69267: LD_VAR 0 12
69271: PUSH
69272: LD_INT 1
69274: ARRAY
69275: PPUSH
69276: LD_VAR 0 12
69280: PUSH
69281: LD_INT 2
69283: ARRAY
69284: PPUSH
69285: LD_VAR 0 7
69289: PPUSH
69290: LD_VAR 0 8
69294: PPUSH
69295: CALL_OW 298
69299: ST_TO_ADDR
// if tmp < distance then
69300: LD_VAR 0 9
69304: PUSH
69305: LD_VAR 0 10
69309: LESS
69310: IFFALSE 69332
// begin result := i ;
69312: LD_ADDR_VAR 0 5
69316: PUSH
69317: LD_VAR 0 6
69321: ST_TO_ADDR
// distance := tmp ;
69322: LD_ADDR_VAR 0 10
69326: PUSH
69327: LD_VAR 0 9
69331: ST_TO_ADDR
// end ; end ;
69332: GO 69190
69334: POP
69335: POP
// end ;
69336: LD_VAR 0 5
69340: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69341: LD_INT 0
69343: PPUSH
69344: PPUSH
// if not driver or not IsInUnit ( driver ) then
69345: LD_VAR 0 1
69349: NOT
69350: PUSH
69351: LD_VAR 0 1
69355: PPUSH
69356: CALL_OW 310
69360: NOT
69361: OR
69362: IFFALSE 69366
// exit ;
69364: GO 69456
// vehicle := IsInUnit ( driver ) ;
69366: LD_ADDR_VAR 0 3
69370: PUSH
69371: LD_VAR 0 1
69375: PPUSH
69376: CALL_OW 310
69380: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69381: LD_VAR 0 1
69385: PPUSH
69386: LD_STRING \
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: LD_INT 0
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: PUSH
69416: LD_STRING E
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: LD_INT 0
69424: PUSH
69425: LD_VAR 0 3
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PPUSH
69452: CALL_OW 446
// end ;
69456: LD_VAR 0 2
69460: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69461: LD_INT 0
69463: PPUSH
69464: PPUSH
// if not driver or not IsInUnit ( driver ) then
69465: LD_VAR 0 1
69469: NOT
69470: PUSH
69471: LD_VAR 0 1
69475: PPUSH
69476: CALL_OW 310
69480: NOT
69481: OR
69482: IFFALSE 69486
// exit ;
69484: GO 69576
// vehicle := IsInUnit ( driver ) ;
69486: LD_ADDR_VAR 0 3
69490: PUSH
69491: LD_VAR 0 1
69495: PPUSH
69496: CALL_OW 310
69500: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69501: LD_VAR 0 1
69505: PPUSH
69506: LD_STRING \
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: LD_INT 0
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: PUSH
69536: LD_STRING E
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: LD_VAR 0 3
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PPUSH
69572: CALL_OW 447
// end ;
69576: LD_VAR 0 2
69580: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69581: LD_INT 0
69583: PPUSH
69584: PPUSH
69585: PPUSH
// tmp := [ ] ;
69586: LD_ADDR_VAR 0 5
69590: PUSH
69591: EMPTY
69592: ST_TO_ADDR
// for i in units do
69593: LD_ADDR_VAR 0 4
69597: PUSH
69598: LD_VAR 0 1
69602: PUSH
69603: FOR_IN
69604: IFFALSE 69642
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69606: LD_ADDR_VAR 0 5
69610: PUSH
69611: LD_VAR 0 5
69615: PPUSH
69616: LD_VAR 0 5
69620: PUSH
69621: LD_INT 1
69623: PLUS
69624: PPUSH
69625: LD_VAR 0 4
69629: PPUSH
69630: CALL_OW 256
69634: PPUSH
69635: CALL_OW 2
69639: ST_TO_ADDR
69640: GO 69603
69642: POP
69643: POP
// if not tmp then
69644: LD_VAR 0 5
69648: NOT
69649: IFFALSE 69653
// exit ;
69651: GO 69701
// if asc then
69653: LD_VAR 0 2
69657: IFFALSE 69681
// result := SortListByListAsc ( units , tmp ) else
69659: LD_ADDR_VAR 0 3
69663: PUSH
69664: LD_VAR 0 1
69668: PPUSH
69669: LD_VAR 0 5
69673: PPUSH
69674: CALL_OW 76
69678: ST_TO_ADDR
69679: GO 69701
// result := SortListByListDesc ( units , tmp ) ;
69681: LD_ADDR_VAR 0 3
69685: PUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: LD_VAR 0 5
69695: PPUSH
69696: CALL_OW 77
69700: ST_TO_ADDR
// end ;
69701: LD_VAR 0 3
69705: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
// task := GetTaskList ( mech ) ;
69710: LD_ADDR_VAR 0 4
69714: PUSH
69715: LD_VAR 0 1
69719: PPUSH
69720: CALL_OW 437
69724: ST_TO_ADDR
// if not task then
69725: LD_VAR 0 4
69729: NOT
69730: IFFALSE 69734
// exit ;
69732: GO 69776
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69734: LD_ADDR_VAR 0 3
69738: PUSH
69739: LD_VAR 0 4
69743: PUSH
69744: LD_INT 1
69746: ARRAY
69747: PUSH
69748: LD_INT 1
69750: ARRAY
69751: PUSH
69752: LD_STRING r
69754: EQUAL
69755: PUSH
69756: LD_VAR 0 4
69760: PUSH
69761: LD_INT 1
69763: ARRAY
69764: PUSH
69765: LD_INT 4
69767: ARRAY
69768: PUSH
69769: LD_VAR 0 2
69773: EQUAL
69774: AND
69775: ST_TO_ADDR
// end ;
69776: LD_VAR 0 3
69780: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69781: LD_INT 0
69783: PPUSH
// SetDir ( unit , d ) ;
69784: LD_VAR 0 1
69788: PPUSH
69789: LD_VAR 0 4
69793: PPUSH
69794: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69798: LD_VAR 0 1
69802: PPUSH
69803: LD_VAR 0 2
69807: PPUSH
69808: LD_VAR 0 3
69812: PPUSH
69813: LD_VAR 0 5
69817: PPUSH
69818: CALL_OW 48
// end ;
69822: LD_VAR 0 6
69826: RET
// export function ToNaturalNumber ( number ) ; begin
69827: LD_INT 0
69829: PPUSH
// result := number div 1 ;
69830: LD_ADDR_VAR 0 2
69834: PUSH
69835: LD_VAR 0 1
69839: PUSH
69840: LD_INT 1
69842: DIV
69843: ST_TO_ADDR
// if number < 0 then
69844: LD_VAR 0 1
69848: PUSH
69849: LD_INT 0
69851: LESS
69852: IFFALSE 69862
// result := 0 ;
69854: LD_ADDR_VAR 0 2
69858: PUSH
69859: LD_INT 0
69861: ST_TO_ADDR
// end ;
69862: LD_VAR 0 2
69866: RET
// export function SortByClass ( units , class ) ; var un ; begin
69867: LD_INT 0
69869: PPUSH
69870: PPUSH
// if not units or not class then
69871: LD_VAR 0 1
69875: NOT
69876: PUSH
69877: LD_VAR 0 2
69881: NOT
69882: OR
69883: IFFALSE 69887
// exit ;
69885: GO 69982
// result := [ ] ;
69887: LD_ADDR_VAR 0 3
69891: PUSH
69892: EMPTY
69893: ST_TO_ADDR
// for un in units do
69894: LD_ADDR_VAR 0 4
69898: PUSH
69899: LD_VAR 0 1
69903: PUSH
69904: FOR_IN
69905: IFFALSE 69980
// if GetClass ( un ) = class then
69907: LD_VAR 0 4
69911: PPUSH
69912: CALL_OW 257
69916: PUSH
69917: LD_VAR 0 2
69921: EQUAL
69922: IFFALSE 69949
// result := Insert ( result , 1 , un ) else
69924: LD_ADDR_VAR 0 3
69928: PUSH
69929: LD_VAR 0 3
69933: PPUSH
69934: LD_INT 1
69936: PPUSH
69937: LD_VAR 0 4
69941: PPUSH
69942: CALL_OW 2
69946: ST_TO_ADDR
69947: GO 69978
// result := Replace ( result , result + 1 , un ) ;
69949: LD_ADDR_VAR 0 3
69953: PUSH
69954: LD_VAR 0 3
69958: PPUSH
69959: LD_VAR 0 3
69963: PUSH
69964: LD_INT 1
69966: PLUS
69967: PPUSH
69968: LD_VAR 0 4
69972: PPUSH
69973: CALL_OW 1
69977: ST_TO_ADDR
69978: GO 69904
69980: POP
69981: POP
// end ;
69982: LD_VAR 0 3
69986: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69987: LD_INT 0
69989: PPUSH
69990: PPUSH
69991: PPUSH
69992: PPUSH
69993: PPUSH
69994: PPUSH
69995: PPUSH
// result := [ ] ;
69996: LD_ADDR_VAR 0 4
70000: PUSH
70001: EMPTY
70002: ST_TO_ADDR
// if x - r < 0 then
70003: LD_VAR 0 1
70007: PUSH
70008: LD_VAR 0 3
70012: MINUS
70013: PUSH
70014: LD_INT 0
70016: LESS
70017: IFFALSE 70029
// min_x := 0 else
70019: LD_ADDR_VAR 0 8
70023: PUSH
70024: LD_INT 0
70026: ST_TO_ADDR
70027: GO 70045
// min_x := x - r ;
70029: LD_ADDR_VAR 0 8
70033: PUSH
70034: LD_VAR 0 1
70038: PUSH
70039: LD_VAR 0 3
70043: MINUS
70044: ST_TO_ADDR
// if y - r < 0 then
70045: LD_VAR 0 2
70049: PUSH
70050: LD_VAR 0 3
70054: MINUS
70055: PUSH
70056: LD_INT 0
70058: LESS
70059: IFFALSE 70071
// min_y := 0 else
70061: LD_ADDR_VAR 0 7
70065: PUSH
70066: LD_INT 0
70068: ST_TO_ADDR
70069: GO 70087
// min_y := y - r ;
70071: LD_ADDR_VAR 0 7
70075: PUSH
70076: LD_VAR 0 2
70080: PUSH
70081: LD_VAR 0 3
70085: MINUS
70086: ST_TO_ADDR
// max_x := x + r ;
70087: LD_ADDR_VAR 0 9
70091: PUSH
70092: LD_VAR 0 1
70096: PUSH
70097: LD_VAR 0 3
70101: PLUS
70102: ST_TO_ADDR
// max_y := y + r ;
70103: LD_ADDR_VAR 0 10
70107: PUSH
70108: LD_VAR 0 2
70112: PUSH
70113: LD_VAR 0 3
70117: PLUS
70118: ST_TO_ADDR
// for _x = min_x to max_x do
70119: LD_ADDR_VAR 0 5
70123: PUSH
70124: DOUBLE
70125: LD_VAR 0 8
70129: DEC
70130: ST_TO_ADDR
70131: LD_VAR 0 9
70135: PUSH
70136: FOR_TO
70137: IFFALSE 70238
// for _y = min_y to max_y do
70139: LD_ADDR_VAR 0 6
70143: PUSH
70144: DOUBLE
70145: LD_VAR 0 7
70149: DEC
70150: ST_TO_ADDR
70151: LD_VAR 0 10
70155: PUSH
70156: FOR_TO
70157: IFFALSE 70234
// begin if not ValidHex ( _x , _y ) then
70159: LD_VAR 0 5
70163: PPUSH
70164: LD_VAR 0 6
70168: PPUSH
70169: CALL_OW 488
70173: NOT
70174: IFFALSE 70178
// continue ;
70176: GO 70156
// if GetResourceTypeXY ( _x , _y ) then
70178: LD_VAR 0 5
70182: PPUSH
70183: LD_VAR 0 6
70187: PPUSH
70188: CALL_OW 283
70192: IFFALSE 70232
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70194: LD_ADDR_VAR 0 4
70198: PUSH
70199: LD_VAR 0 4
70203: PPUSH
70204: LD_VAR 0 4
70208: PUSH
70209: LD_INT 1
70211: PLUS
70212: PPUSH
70213: LD_VAR 0 5
70217: PUSH
70218: LD_VAR 0 6
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PPUSH
70227: CALL_OW 1
70231: ST_TO_ADDR
// end ;
70232: GO 70156
70234: POP
70235: POP
70236: GO 70136
70238: POP
70239: POP
// end ;
70240: LD_VAR 0 4
70244: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70245: LD_INT 0
70247: PPUSH
70248: PPUSH
70249: PPUSH
70250: PPUSH
70251: PPUSH
70252: PPUSH
70253: PPUSH
70254: PPUSH
// if not units then
70255: LD_VAR 0 1
70259: NOT
70260: IFFALSE 70264
// exit ;
70262: GO 70689
// result := UnitFilter ( units , [ f_ok ] ) ;
70264: LD_ADDR_VAR 0 3
70268: PUSH
70269: LD_VAR 0 1
70273: PPUSH
70274: LD_INT 50
70276: PUSH
70277: EMPTY
70278: LIST
70279: PPUSH
70280: CALL_OW 72
70284: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70285: LD_ADDR_VAR 0 8
70289: PUSH
70290: LD_VAR 0 1
70294: PUSH
70295: LD_INT 1
70297: ARRAY
70298: PPUSH
70299: CALL_OW 255
70303: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
70304: LD_ADDR_VAR 0 10
70308: PUSH
70309: LD_INT 29
70311: PUSH
70312: LD_EXP 47
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: ST_TO_ADDR
// if not result then
70321: LD_VAR 0 3
70325: NOT
70326: IFFALSE 70330
// exit ;
70328: GO 70689
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70330: LD_ADDR_VAR 0 5
70334: PUSH
70335: LD_INT 81
70337: PUSH
70338: LD_VAR 0 8
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PPUSH
70347: CALL_OW 69
70351: ST_TO_ADDR
// for i in result do
70352: LD_ADDR_VAR 0 4
70356: PUSH
70357: LD_VAR 0 3
70361: PUSH
70362: FOR_IN
70363: IFFALSE 70687
// begin tag := GetTag ( i ) + 1 ;
70365: LD_ADDR_VAR 0 9
70369: PUSH
70370: LD_VAR 0 4
70374: PPUSH
70375: CALL_OW 110
70379: PUSH
70380: LD_INT 1
70382: PLUS
70383: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70384: LD_ADDR_VAR 0 7
70388: PUSH
70389: LD_VAR 0 4
70393: PPUSH
70394: CALL_OW 250
70398: PPUSH
70399: LD_VAR 0 4
70403: PPUSH
70404: CALL_OW 251
70408: PPUSH
70409: LD_INT 6
70411: PPUSH
70412: CALL 69987 0 3
70416: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70417: LD_VAR 0 7
70421: PUSH
70422: LD_VAR 0 4
70426: PPUSH
70427: CALL_OW 264
70431: PUSH
70432: LD_VAR 0 10
70436: IN
70437: NOT
70438: AND
70439: IFFALSE 70478
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70441: LD_VAR 0 4
70445: PPUSH
70446: LD_VAR 0 7
70450: PUSH
70451: LD_INT 1
70453: ARRAY
70454: PUSH
70455: LD_INT 1
70457: ARRAY
70458: PPUSH
70459: LD_VAR 0 7
70463: PUSH
70464: LD_INT 1
70466: ARRAY
70467: PUSH
70468: LD_INT 2
70470: ARRAY
70471: PPUSH
70472: CALL_OW 116
70476: GO 70685
// if path > tag then
70478: LD_VAR 0 2
70482: PUSH
70483: LD_VAR 0 9
70487: GREATER
70488: IFFALSE 70655
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70490: LD_ADDR_VAR 0 6
70494: PUSH
70495: LD_VAR 0 5
70499: PPUSH
70500: LD_INT 91
70502: PUSH
70503: LD_VAR 0 4
70507: PUSH
70508: LD_INT 12
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: PPUSH
70516: CALL_OW 72
70520: ST_TO_ADDR
// if nearEnemy then
70521: LD_VAR 0 6
70525: IFFALSE 70553
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70527: LD_VAR 0 4
70531: PPUSH
70532: LD_VAR 0 6
70536: PPUSH
70537: LD_VAR 0 4
70541: PPUSH
70542: CALL_OW 74
70546: PPUSH
70547: CALL_OW 115
70551: GO 70653
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70553: LD_VAR 0 4
70557: PPUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_VAR 0 9
70567: ARRAY
70568: PUSH
70569: LD_INT 1
70571: ARRAY
70572: PPUSH
70573: LD_VAR 0 2
70577: PUSH
70578: LD_VAR 0 9
70582: ARRAY
70583: PUSH
70584: LD_INT 2
70586: ARRAY
70587: PPUSH
70588: CALL_OW 297
70592: PUSH
70593: LD_INT 6
70595: GREATER
70596: IFFALSE 70639
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70598: LD_VAR 0 4
70602: PPUSH
70603: LD_VAR 0 2
70607: PUSH
70608: LD_VAR 0 9
70612: ARRAY
70613: PUSH
70614: LD_INT 1
70616: ARRAY
70617: PPUSH
70618: LD_VAR 0 2
70622: PUSH
70623: LD_VAR 0 9
70627: ARRAY
70628: PUSH
70629: LD_INT 2
70631: ARRAY
70632: PPUSH
70633: CALL_OW 114
70637: GO 70653
// SetTag ( i , tag ) ;
70639: LD_VAR 0 4
70643: PPUSH
70644: LD_VAR 0 9
70648: PPUSH
70649: CALL_OW 109
// end else
70653: GO 70685
// if enemy then
70655: LD_VAR 0 5
70659: IFFALSE 70685
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70661: LD_VAR 0 4
70665: PPUSH
70666: LD_VAR 0 5
70670: PPUSH
70671: LD_VAR 0 4
70675: PPUSH
70676: CALL_OW 74
70680: PPUSH
70681: CALL_OW 115
// end ;
70685: GO 70362
70687: POP
70688: POP
// end ;
70689: LD_VAR 0 3
70693: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70694: LD_INT 0
70696: PPUSH
70697: PPUSH
70698: PPUSH
// if not unit or IsInUnit ( unit ) then
70699: LD_VAR 0 1
70703: NOT
70704: PUSH
70705: LD_VAR 0 1
70709: PPUSH
70710: CALL_OW 310
70714: OR
70715: IFFALSE 70719
// exit ;
70717: GO 70810
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70719: LD_ADDR_VAR 0 4
70723: PUSH
70724: LD_VAR 0 1
70728: PPUSH
70729: CALL_OW 250
70733: PPUSH
70734: LD_VAR 0 2
70738: PPUSH
70739: LD_INT 1
70741: PPUSH
70742: CALL_OW 272
70746: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70747: LD_ADDR_VAR 0 5
70751: PUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: CALL_OW 251
70761: PPUSH
70762: LD_VAR 0 2
70766: PPUSH
70767: LD_INT 1
70769: PPUSH
70770: CALL_OW 273
70774: ST_TO_ADDR
// if ValidHex ( x , y ) then
70775: LD_VAR 0 4
70779: PPUSH
70780: LD_VAR 0 5
70784: PPUSH
70785: CALL_OW 488
70789: IFFALSE 70810
// ComTurnXY ( unit , x , y ) ;
70791: LD_VAR 0 1
70795: PPUSH
70796: LD_VAR 0 4
70800: PPUSH
70801: LD_VAR 0 5
70805: PPUSH
70806: CALL_OW 118
// end ;
70810: LD_VAR 0 3
70814: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70815: LD_INT 0
70817: PPUSH
70818: PPUSH
// result := false ;
70819: LD_ADDR_VAR 0 3
70823: PUSH
70824: LD_INT 0
70826: ST_TO_ADDR
// if not units then
70827: LD_VAR 0 2
70831: NOT
70832: IFFALSE 70836
// exit ;
70834: GO 70881
// for i in units do
70836: LD_ADDR_VAR 0 4
70840: PUSH
70841: LD_VAR 0 2
70845: PUSH
70846: FOR_IN
70847: IFFALSE 70879
// if See ( side , i ) then
70849: LD_VAR 0 1
70853: PPUSH
70854: LD_VAR 0 4
70858: PPUSH
70859: CALL_OW 292
70863: IFFALSE 70877
// begin result := true ;
70865: LD_ADDR_VAR 0 3
70869: PUSH
70870: LD_INT 1
70872: ST_TO_ADDR
// exit ;
70873: POP
70874: POP
70875: GO 70881
// end ;
70877: GO 70846
70879: POP
70880: POP
// end ;
70881: LD_VAR 0 3
70885: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70886: LD_INT 0
70888: PPUSH
70889: PPUSH
70890: PPUSH
70891: PPUSH
// if not unit or not points then
70892: LD_VAR 0 1
70896: NOT
70897: PUSH
70898: LD_VAR 0 2
70902: NOT
70903: OR
70904: IFFALSE 70908
// exit ;
70906: GO 70998
// dist := 99999 ;
70908: LD_ADDR_VAR 0 5
70912: PUSH
70913: LD_INT 99999
70915: ST_TO_ADDR
// for i in points do
70916: LD_ADDR_VAR 0 4
70920: PUSH
70921: LD_VAR 0 2
70925: PUSH
70926: FOR_IN
70927: IFFALSE 70996
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70929: LD_ADDR_VAR 0 6
70933: PUSH
70934: LD_VAR 0 1
70938: PPUSH
70939: LD_VAR 0 4
70943: PUSH
70944: LD_INT 1
70946: ARRAY
70947: PPUSH
70948: LD_VAR 0 4
70952: PUSH
70953: LD_INT 2
70955: ARRAY
70956: PPUSH
70957: CALL_OW 297
70961: ST_TO_ADDR
// if tmpDist < dist then
70962: LD_VAR 0 6
70966: PUSH
70967: LD_VAR 0 5
70971: LESS
70972: IFFALSE 70994
// begin result := i ;
70974: LD_ADDR_VAR 0 3
70978: PUSH
70979: LD_VAR 0 4
70983: ST_TO_ADDR
// dist := tmpDist ;
70984: LD_ADDR_VAR 0 5
70988: PUSH
70989: LD_VAR 0 6
70993: ST_TO_ADDR
// end ; end ;
70994: GO 70926
70996: POP
70997: POP
// end ; end_of_file
70998: LD_VAR 0 3
71002: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71003: LD_VAR 0 1
71007: PUSH
71008: LD_INT 200
71010: DOUBLE
71011: GREATEREQUAL
71012: IFFALSE 71020
71014: LD_INT 299
71016: DOUBLE
71017: LESSEQUAL
71018: IFTRUE 71022
71020: GO 71054
71022: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71023: LD_VAR 0 1
71027: PPUSH
71028: LD_VAR 0 2
71032: PPUSH
71033: LD_VAR 0 3
71037: PPUSH
71038: LD_VAR 0 4
71042: PPUSH
71043: LD_VAR 0 5
71047: PPUSH
71048: CALL 27029 0 5
71052: GO 71131
71054: LD_INT 300
71056: DOUBLE
71057: GREATEREQUAL
71058: IFFALSE 71066
71060: LD_INT 399
71062: DOUBLE
71063: LESSEQUAL
71064: IFTRUE 71068
71066: GO 71130
71068: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: LD_VAR 0 3
71083: PPUSH
71084: LD_VAR 0 4
71088: PPUSH
71089: LD_VAR 0 5
71093: PPUSH
71094: LD_VAR 0 6
71098: PPUSH
71099: LD_VAR 0 7
71103: PPUSH
71104: LD_VAR 0 8
71108: PPUSH
71109: LD_VAR 0 9
71113: PPUSH
71114: LD_VAR 0 10
71118: PPUSH
71119: LD_VAR 0 11
71123: PPUSH
71124: CALL 24927 0 11
71128: GO 71131
71130: POP
// end ;
71131: PPOPN 11
71133: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71134: LD_VAR 0 1
71138: PPUSH
71139: LD_VAR 0 2
71143: PPUSH
71144: LD_VAR 0 3
71148: PPUSH
71149: LD_VAR 0 4
71153: PPUSH
71154: LD_VAR 0 5
71158: PPUSH
71159: CALL 27021 0 5
// end ; end_of_file
71163: PPOPN 5
71165: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71166: LD_VAR 0 1
71170: PPUSH
71171: LD_VAR 0 2
71175: PPUSH
71176: LD_VAR 0 3
71180: PPUSH
71181: LD_VAR 0 4
71185: PPUSH
71186: LD_VAR 0 5
71190: PPUSH
71191: LD_VAR 0 6
71195: PPUSH
71196: CALL 13122 0 6
// end ;
71200: PPOPN 6
71202: END
