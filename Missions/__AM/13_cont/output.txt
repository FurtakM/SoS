// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1247 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1151 0 0
// PrepareDifficulty ;
 248: CALL 8613 0 0
// Action ;
 252: CALL 5425 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 41
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 42
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 43
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 41
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 33837 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 41
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 33837 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 41
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 33837 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 41
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 33837 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 41
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 33837 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 41
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 33837 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 41
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 33837 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 41
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 33837 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 33837 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 33837 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 33837 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 33837 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 33837 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 33837 0 3
 780: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING DeltaDoctor
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 13c_
 794: PPUSH
 795: CALL 33837 0 3
 799: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 16
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 33837 0 3
 818: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: LD_EXP 1
 828: PUSH
 829: LD_EXP 2
 833: PUSH
 834: LD_EXP 3
 838: PUSH
 839: LD_EXP 4
 843: PUSH
 844: LD_EXP 5
 848: PUSH
 849: LD_EXP 6
 853: PUSH
 854: LD_EXP 7
 858: PUSH
 859: LD_EXP 8
 863: PUSH
 864: LD_EXP 9
 868: PUSH
 869: LD_EXP 10
 873: PUSH
 874: LD_EXP 11
 878: PUSH
 879: LD_EXP 12
 883: PUSH
 884: LD_EXP 13
 888: PUSH
 889: LD_EXP 14
 893: PUSH
 894: LD_EXP 15
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1132
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 34
1111: PUSH
1112: LD_INT 13
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PPUSH
1123: CALL_OW 69
1127: PUSH
1128: LD_INT 0
1130: EQUAL
1131: AND
1132: IFFALSE 1146
// SetClass ( JMM , 2 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 336
// end ;
1146: LD_VAR 0 1
1150: RET
// export function PrepareAmericansRandom ; var i ; begin
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
// uc_side = 1 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1163: LD_ADDR_EXP 17
1167: PUSH
1168: LD_STRING 13c_others
1170: PPUSH
1171: CALL_OW 31
1175: ST_TO_ADDR
// for i in others13 do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_EXP 17
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1240
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1189: LD_VAR 0 2
1193: PPUSH
1194: LD_INT 22
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 21
1206: PUSH
1207: LD_INT 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 58
1216: PUSH
1217: EMPTY
1218: LIST
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 52
1238: GO 1186
1240: POP
1241: POP
// end ;
1242: LD_VAR 0 1
1246: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1247: LD_INT 0
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1255: LD_ADDR_VAR 0 5
1259: PUSH
1260: LD_STRING 13_VehiclesIn13_1
1262: PPUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 1
1421: PUSH
1422: LD_INT 5
1424: PUSH
1425: LD_INT 3
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 6
1433: PUSH
1434: LD_INT 100
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 5
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 6
1459: PUSH
1460: LD_INT 100
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PPUSH
1481: CALL_OW 30
1485: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1486: LD_ADDR_EXP 25
1490: PUSH
1491: LD_STRING 13_ResourcesInCargo13_1
1493: PPUSH
1494: EMPTY
1495: PPUSH
1496: CALL_OW 30
1500: ST_TO_ADDR
// cargoList = [ ] ;
1501: LD_ADDR_VAR 0 6
1505: PUSH
1506: EMPTY
1507: ST_TO_ADDR
// uc_side = 1 ;
1508: LD_ADDR_OWVAR 20
1512: PUSH
1513: LD_INT 1
1515: ST_TO_ADDR
// if vehicles then
1516: LD_VAR 0 5
1520: IFFALSE 1867
// begin for i := 1 to vehicles do
1522: LD_ADDR_VAR 0 2
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_VAR 0 5
1536: PUSH
1537: FOR_TO
1538: IFFALSE 1687
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1540: LD_ADDR_OWVAR 21
1544: PUSH
1545: LD_VAR 0 5
1549: PUSH
1550: LD_VAR 0 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1560: LD_ADDR_OWVAR 37
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_VAR 0 2
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: ARRAY
1579: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1580: LD_ADDR_OWVAR 39
1584: PUSH
1585: LD_VAR 0 5
1589: PUSH
1590: LD_VAR 0 2
1594: ARRAY
1595: PUSH
1596: LD_INT 3
1598: ARRAY
1599: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1600: LD_ADDR_OWVAR 38
1604: PUSH
1605: LD_VAR 0 5
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 4
1618: ARRAY
1619: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1620: LD_ADDR_OWVAR 40
1624: PUSH
1625: LD_VAR 0 5
1629: PUSH
1630: LD_VAR 0 2
1634: ARRAY
1635: PUSH
1636: LD_INT 5
1638: ARRAY
1639: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1640: LD_ADDR_OWVAR 41
1644: PUSH
1645: LD_INT 40
1647: ST_TO_ADDR
// veh = CreateVehicle ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: CALL_OW 45
1657: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1658: LD_VAR 0 4
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 49
// end ;
1685: GO 1537
1687: POP
1688: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1689: LD_ADDR_VAR 0 6
1693: PUSH
1694: LD_INT 22
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 34
1716: PUSH
1717: LD_INT 12
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PPUSH
1729: CALL_OW 69
1733: ST_TO_ADDR
// if cargoList then
1734: LD_VAR 0 6
1738: IFFALSE 1867
// for i = 1 to cargoList do
1740: LD_ADDR_VAR 0 2
1744: PUSH
1745: DOUBLE
1746: LD_INT 1
1748: DEC
1749: ST_TO_ADDR
1750: LD_VAR 0 6
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1865
// begin if resources then
1758: LD_EXP 25
1762: IFFALSE 1863
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1764: LD_VAR 0 6
1768: PUSH
1769: LD_VAR 0 2
1773: ARRAY
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_EXP 25
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1797: LD_VAR 0 6
1801: PUSH
1802: LD_VAR 0 2
1806: ARRAY
1807: PPUSH
1808: LD_INT 2
1810: PPUSH
1811: LD_EXP 25
1815: PUSH
1816: LD_VAR 0 2
1820: ARRAY
1821: PUSH
1822: LD_INT 2
1824: ARRAY
1825: PPUSH
1826: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1830: LD_VAR 0 6
1834: PUSH
1835: LD_VAR 0 2
1839: ARRAY
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_EXP 25
1848: PUSH
1849: LD_VAR 0 2
1853: ARRAY
1854: PUSH
1855: LD_INT 3
1857: ARRAY
1858: PPUSH
1859: CALL_OW 291
// end ; end ;
1863: GO 1755
1865: POP
1866: POP
// end ; end ;
1867: LD_VAR 0 1
1871: RET
// export function PowellSupport ; var i , veh , un ; begin
1872: LD_INT 0
1874: PPUSH
1875: PPUSH
1876: PPUSH
1877: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1878: LD_ADDR_VAR 0 2
1882: PUSH
1883: DOUBLE
1884: LD_INT 1
1886: DEC
1887: ST_TO_ADDR
1888: LD_INT 4
1890: PUSH
1891: LD_INT 3
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_OWVAR 67
1910: ARRAY
1911: PUSH
1912: FOR_TO
1913: IFFALSE 2186
// begin uc_nation := 1 ;
1915: LD_ADDR_OWVAR 21
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// uc_side := 1 ;
1923: LD_ADDR_OWVAR 20
1927: PUSH
1928: LD_INT 1
1930: ST_TO_ADDR
// vc_engine := engine_siberite ;
1931: LD_ADDR_OWVAR 39
1935: PUSH
1936: LD_INT 3
1938: ST_TO_ADDR
// vc_control := control_manual ;
1939: LD_ADDR_OWVAR 38
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 9
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: LD_INT 9
1960: PUSH
1961: LD_INT 5
1963: PUSH
1964: LD_INT 5
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_OWVAR 67
1978: PUSH
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 12
1989: PLUS
1990: ARRAY
1991: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1992: LD_OWVAR 40
1996: PUSH
1997: LD_INT 6
1999: EQUAL
2000: IFFALSE 2029
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_OWVAR 67
2025: ARRAY
2026: ST_TO_ADDR
2027: GO 2064
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2029: LD_ADDR_OWVAR 37
2033: PUSH
2034: LD_INT 5
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: LD_INT 3
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 4
2057: PPUSH
2058: CALL_OW 12
2062: ARRAY
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2074: LD_INT 35
2076: PPUSH
2077: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn2 , false ) ;
2081: LD_VAR 0 3
2085: PPUSH
2086: LD_INT 24
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: IFFALSE 2074
// SetDir ( veh , 1 ) ;
2098: LD_VAR 0 3
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 233
// hc_gallery :=  ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING 
2117: ST_TO_ADDR
// hc_name :=  ;
2118: LD_ADDR_OWVAR 26
2122: PUSH
2123: LD_STRING 
2125: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2126: LD_INT 0
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: LD_INT 9
2134: PUSH
2135: LD_INT 8
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: LD_INT 7
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_OWVAR 67
2154: ARRAY
2155: PPUSH
2156: CALL_OW 380
// un := CreateHuman ;
2160: LD_ADDR_VAR 0 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2170: LD_VAR 0 4
2174: PPUSH
2175: LD_VAR 0 3
2179: PPUSH
2180: CALL_OW 52
// end ;
2184: GO 1912
2186: POP
2187: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2188: LD_ADDR_VAR 0 2
2192: PUSH
2193: DOUBLE
2194: LD_INT 1
2196: DEC
2197: ST_TO_ADDR
2198: LD_INT 2
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: LD_INT 2
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_OWVAR 67
2220: ARRAY
2221: PUSH
2222: FOR_TO
2223: IFFALSE 2307
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2225: LD_INT 0
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 9
2233: PUSH
2234: LD_INT 8
2236: PUSH
2237: LD_INT 8
2239: PUSH
2240: LD_INT 7
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: PUSH
2249: LD_OWVAR 67
2253: ARRAY
2254: PPUSH
2255: CALL_OW 380
// un := CreateHuman ;
2259: LD_ADDR_VAR 0 4
2263: PUSH
2264: CALL_OW 44
2268: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2269: LD_VAR 0 4
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until PlaceUnitArea ( un , PlayerSpawn2 , false ) ;
2288: LD_VAR 0 4
2292: PPUSH
2293: LD_INT 24
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
2303: IFFALSE 2281
// end ;
2305: GO 2222
2307: POP
2308: POP
// end ; end_of_file
2309: LD_VAR 0 1
2313: RET
// export function PrepareBurlak ; begin
2314: LD_INT 0
2316: PPUSH
// uc_side := 7 ;
2317: LD_ADDR_OWVAR 20
2321: PUSH
2322: LD_INT 7
2324: ST_TO_ADDR
// uc_nation := 3 ;
2325: LD_ADDR_OWVAR 21
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// vc_engine := engine_siberite ;
2333: LD_ADDR_OWVAR 39
2337: PUSH
2338: LD_INT 3
2340: ST_TO_ADDR
// vc_control := control_manual ;
2341: LD_ADDR_OWVAR 38
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2349: LD_ADDR_OWVAR 40
2353: PUSH
2354: LD_INT 44
2356: PUSH
2357: LD_INT 45
2359: PUSH
2360: LD_INT 46
2362: PUSH
2363: LD_INT 46
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: PUSH
2372: LD_OWVAR 67
2376: ARRAY
2377: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2378: LD_ADDR_OWVAR 37
2382: PUSH
2383: LD_INT 24
2385: ST_TO_ADDR
// Masha := CreateVehicle ;
2386: LD_ADDR_EXP 19
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2396: LD_EXP 19
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2408: LD_EXP 19
2412: PPUSH
2413: LD_INT 3
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2423: LD_EXP 19
2427: PPUSH
2428: LD_INT 1
2430: PPUSH
2431: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2435: LD_ADDR_EXP 18
2439: PUSH
2440: LD_STRING Burlak
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: LD_STRING 
2448: PPUSH
2449: CALL 33837 0 3
2453: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2454: LD_EXP 18
2458: PPUSH
2459: LD_EXP 19
2463: PPUSH
2464: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2468: LD_EXP 19
2472: PPUSH
2473: LD_INT 107
2475: PPUSH
2476: LD_INT 118
2478: PPUSH
2479: CALL_OW 114
// spawnBurlak := 1 ;
2483: LD_ADDR_EXP 28
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// end ;
2491: LD_VAR 0 1
2495: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
// uc_side := 7 ;
2503: LD_ADDR_OWVAR 20
2507: PUSH
2508: LD_INT 7
2510: ST_TO_ADDR
// uc_nation := 3 ;
2511: LD_ADDR_OWVAR 21
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2519: LD_ADDR_EXP 20
2523: PUSH
2524: LD_STRING Gnyevko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 33837 0 3
2537: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2538: LD_ADDR_EXP 21
2542: PUSH
2543: LD_STRING Titov
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: LD_STRING 
2551: PPUSH
2552: CALL 33837 0 3
2556: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2557: LD_ADDR_EXP 22
2561: PUSH
2562: LD_STRING Xavier2
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_STRING 
2570: PPUSH
2571: CALL 33837 0 3
2575: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2576: LD_ADDR_EXP 23
2580: PUSH
2581: LD_STRING Belkov
2583: PPUSH
2584: LD_INT 0
2586: PPUSH
2587: LD_STRING 
2589: PPUSH
2590: CALL 33837 0 3
2594: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2595: LD_ADDR_EXP 24
2599: PUSH
2600: LD_STRING Lipshchin
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: LD_STRING 
2608: PPUSH
2609: CALL 33837 0 3
2613: ST_TO_ADDR
// for i = 1 to 5 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 5
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2753
// begin vc_engine := engine_siberite ;
2630: LD_ADDR_OWVAR 39
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// vc_control := control_manual ;
2638: LD_ADDR_OWVAR 38
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2646: LD_ADDR_OWVAR 40
2650: PUSH
2651: LD_INT 43
2653: PUSH
2654: LD_INT 45
2656: PUSH
2657: LD_INT 45
2659: PUSH
2660: LD_INT 44
2662: PUSH
2663: LD_INT 49
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 5
2678: PPUSH
2679: CALL_OW 12
2683: ARRAY
2684: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2685: LD_ADDR_OWVAR 37
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 24
2698: PUSH
2699: LD_INT 24
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: PUSH
2708: LD_OWVAR 67
2712: ARRAY
2713: ST_TO_ADDR
// veh = CreateVehicle ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: CALL_OW 45
2723: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2724: LD_VAR 0 3
2728: PPUSH
2729: LD_INT 2
2731: PPUSH
2732: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2736: LD_VAR 0 3
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// end ;
2751: GO 2627
2753: POP
2754: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2755: LD_ADDR_VAR 0 4
2759: PUSH
2760: LD_INT 22
2762: PUSH
2763: LD_INT 7
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 21
2772: PUSH
2773: LD_INT 2
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 58
2782: PUSH
2783: EMPTY
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: PPUSH
2791: CALL_OW 69
2795: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_VAR 0 4
2805: PUSH
2806: LD_INT 1
2808: ARRAY
2809: PPUSH
2810: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2814: LD_EXP 21
2818: PPUSH
2819: LD_VAR 0 4
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2832: LD_EXP 22
2836: PPUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2850: LD_EXP 23
2854: PPUSH
2855: LD_VAR 0 4
2859: PUSH
2860: LD_INT 4
2862: ARRAY
2863: PPUSH
2864: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2868: LD_EXP 24
2872: PPUSH
2873: LD_VAR 0 4
2877: PUSH
2878: LD_INT 5
2880: ARRAY
2881: PPUSH
2882: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2886: LD_EXP 20
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2898: LD_EXP 21
2902: PUSH
2903: LD_EXP 24
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: LD_INT 9
2914: PPUSH
2915: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2919: LD_ADDR_VAR 0 4
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 7
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 69
2938: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2939: LD_VAR 0 4
2943: PPUSH
2944: LD_INT 107
2946: PPUSH
2947: LD_INT 118
2949: PPUSH
2950: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2954: LD_INT 35
2956: PPUSH
2957: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2961: LD_VAR 0 4
2965: PPUSH
2966: LD_INT 34
2968: PUSH
2969: LD_INT 49
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 72
2980: PPUSH
2981: LD_EXP 19
2985: PPUSH
2986: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2990: LD_VAR 0 4
2994: PPUSH
2995: LD_INT 3
2997: PUSH
2998: LD_INT 34
3000: PUSH
3001: LD_INT 49
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PPUSH
3017: LD_INT 107
3019: PPUSH
3020: LD_INT 118
3022: PPUSH
3023: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_EXP 21
3036: PUSH
3037: LD_EXP 24
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 54
3057: PUSH
3058: EMPTY
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 72
3073: ST_TO_ADDR
// if bazooka then
3074: LD_VAR 0 5
3078: IFFALSE 3120
// begin for i in bazooka do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_VAR 0 5
3089: PUSH
3090: FOR_IN
3091: IFFALSE 3118
// if See ( 1 , i ) then
3093: LD_INT 1
3095: PPUSH
3096: LD_VAR 0 2
3100: PPUSH
3101: CALL_OW 292
3105: IFFALSE 3116
// ComSpaceTimeShoot ( i ) ;
3107: LD_VAR 0 2
3111: PPUSH
3112: CALL 34896 0 1
3116: GO 3090
3118: POP
3119: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3120: LD_VAR 0 4
3124: PPUSH
3125: LD_INT 34
3127: PUSH
3128: LD_INT 49
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: PUSH
3140: LD_INT 0
3142: EQUAL
3143: IFTRUE 3156
3145: PUSH
3146: LD_EXP 19
3150: PPUSH
3151: CALL_OW 303
3155: OR
3156: IFFALSE 2954
// repeat wait ( 0 0$1 ) ;
3158: LD_INT 35
3160: PPUSH
3161: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: LD_INT 22
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 69
3184: PUSH
3185: LD_EXP 18
3189: DIFF
3190: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_INT 107
3198: PPUSH
3199: LD_INT 118
3201: PPUSH
3202: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3206: LD_ADDR_VAR 0 5
3210: PUSH
3211: LD_EXP 21
3215: PUSH
3216: LD_EXP 24
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 50
3227: PUSH
3228: EMPTY
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 54
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 72
3252: ST_TO_ADDR
// if bazooka then
3253: LD_VAR 0 5
3257: IFFALSE 3299
// begin for i in bazooka do
3259: LD_ADDR_VAR 0 2
3263: PUSH
3264: LD_VAR 0 5
3268: PUSH
3269: FOR_IN
3270: IFFALSE 3297
// if See ( 1 , i ) then
3272: LD_INT 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: CALL_OW 292
3284: IFFALSE 3295
// ComSpaceTimeShoot ( i ) ;
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL 34896 0 1
3295: GO 3269
3297: POP
3298: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3299: LD_EXP 18
3303: PPUSH
3304: CALL_OW 302
3308: IFFALSE 3322
3310: PUSH
3311: LD_EXP 18
3315: PPUSH
3316: CALL_OW 310
3320: NOT
3321: AND
3322: IFFALSE 3339
// ComMoveXY ( Burlak , 107 , 118 ) ;
3324: LD_EXP 18
3328: PPUSH
3329: LD_INT 107
3331: PPUSH
3332: LD_INT 118
3334: PPUSH
3335: CALL_OW 111
// until not tmp ;
3339: LD_VAR 0 4
3343: NOT
3344: IFFALSE 3158
// end ;
3346: LD_VAR 0 1
3350: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
// result := [ ] ;
3359: LD_ADDR_VAR 0 1
3363: PUSH
3364: EMPTY
3365: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3366: LD_ADDR_VAR 0 6
3370: PUSH
3371: LD_INT 1
3373: PPUSH
3374: LD_INT 2
3376: PPUSH
3377: CALL_OW 12
3381: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3382: LD_ADDR_VAR 0 5
3386: PUSH
3387: LD_INT 8
3389: PUSH
3390: LD_INT 9
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: LD_VAR 0 6
3401: ARRAY
3402: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3403: LD_ADDR_VAR 0 2
3407: PUSH
3408: DOUBLE
3409: LD_INT 1
3411: DEC
3412: ST_TO_ADDR
3413: LD_INT 6
3415: PUSH
3416: LD_INT 8
3418: PUSH
3419: LD_INT 10
3421: PUSH
3422: LD_INT 11
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_OWVAR 67
3435: ARRAY
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3676
// begin uc_side := 3 ;
3440: LD_ADDR_OWVAR 20
3444: PUSH
3445: LD_INT 3
3447: ST_TO_ADDR
// uc_nation := 3 ;
3448: LD_ADDR_OWVAR 21
3452: PUSH
3453: LD_INT 3
3455: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3456: LD_INT 24
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: LD_INT 1
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 12
3482: ARRAY
3483: PPUSH
3484: LD_INT 46
3486: PUSH
3487: LD_INT 46
3489: PUSH
3490: LD_INT 45
3492: PUSH
3493: LD_INT 47
3495: PUSH
3496: LD_INT 49
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 5
3511: PPUSH
3512: CALL_OW 12
3516: ARRAY
3517: PPUSH
3518: LD_INT 100
3520: PPUSH
3521: CALL 38857 0 5
// veh := CreateVehicle ;
3525: LD_ADDR_VAR 0 4
3529: PUSH
3530: CALL_OW 45
3534: ST_TO_ADDR
// result := Join ( result , veh ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_VAR 0 4
3549: PPUSH
3550: CALL 72037 0 2
3554: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3555: LD_VAR 0 4
3559: PPUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 5
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_VAR 0 6
3574: ARRAY
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3580: LD_VAR 0 4
3584: PPUSH
3585: LD_VAR 0 5
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL_OW 49
// if vc_control = control_manual then
3597: LD_OWVAR 38
3601: PUSH
3602: LD_INT 1
3604: EQUAL
3605: IFFALSE 3652
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 7
3612: PUSH
3613: LD_INT 8
3615: PUSH
3616: LD_INT 9
3618: PUSH
3619: LD_INT 10
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: PUSH
3628: LD_OWVAR 67
3632: ARRAY
3633: PPUSH
3634: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3638: CALL_OW 44
3642: PPUSH
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3652: LD_INT 18
3654: PPUSH
3655: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_INT 100
3666: PPUSH
3667: LD_INT 55
3669: PPUSH
3670: CALL_OW 114
// end ;
3674: GO 3437
3676: POP
3677: POP
// for i in result do
3678: LD_ADDR_VAR 0 2
3682: PUSH
3683: LD_VAR 0 1
3687: PUSH
3688: FOR_IN
3689: IFFALSE 3705
// SetTag ( i , 10 ) ;
3691: LD_VAR 0 2
3695: PPUSH
3696: LD_INT 10
3698: PPUSH
3699: CALL_OW 109
3703: GO 3688
3705: POP
3706: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3707: LD_EXP 45
3711: PPUSH
3712: CALL_OW 427
// end ; end_of_file
3716: LD_VAR 0 1
3720: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
3725: PPUSH
// rnd := 0 ;
3726: LD_ADDR_VAR 0 3
3730: PUSH
3731: LD_INT 0
3733: ST_TO_ADDR
// uc_side := 8 ;
3734: LD_ADDR_OWVAR 20
3738: PUSH
3739: LD_INT 8
3741: ST_TO_ADDR
// uc_nation := 2 ;
3742: LD_ADDR_OWVAR 21
3746: PUSH
3747: LD_INT 2
3749: ST_TO_ADDR
// hc_name :=  ;
3750: LD_ADDR_OWVAR 26
3754: PUSH
3755: LD_STRING 
3757: ST_TO_ADDR
// hc_gallery :=  ;
3758: LD_ADDR_OWVAR 33
3762: PUSH
3763: LD_STRING 
3765: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3766: LD_ADDR_OWVAR 29
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: LD_INT 10
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 12
3803: PUSH
3804: LD_INT 12
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_OWVAR 67
3817: ARRAY
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3823: LD_INT 0
3825: PPUSH
3826: LD_INT 4
3828: PPUSH
3829: LD_INT 7
3831: PUSH
3832: LD_INT 8
3834: PUSH
3835: LD_INT 9
3837: PUSH
3838: LD_INT 10
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: LD_OWVAR 67
3851: ARRAY
3852: PPUSH
3853: CALL_OW 380
// un := CreateHuman ;
3857: LD_ADDR_VAR 0 2
3861: PUSH
3862: CALL_OW 44
3866: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 8
3874: PUSH
3875: LD_INT 9
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// SetTag ( un , 1 ) ;
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_INT 1
3920: PPUSH
3921: LD_EXP 32
3925: PPUSH
3926: CALL_OW 12
3930: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3931: LD_EXP 46
3935: PPUSH
3936: LD_VAR 0 2
3940: PPUSH
3941: LD_EXP 32
3945: PUSH
3946: LD_VAR 0 3
3950: ARRAY
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_EXP 32
3960: PUSH
3961: LD_VAR 0 3
3965: ARRAY
3966: PUSH
3967: LD_INT 2
3969: ARRAY
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: LD_INT 0
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: CALL_OW 595
// end ;
3984: LD_VAR 0 1
3988: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3989: LD_INT 22
3991: PUSH
3992: LD_INT 8
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 3
4001: PUSH
4002: LD_INT 61
4004: PUSH
4005: EMPTY
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 50
4014: PUSH
4015: EMPTY
4016: LIST
4017: PUSH
4018: LD_INT 33
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: IFFALSE 4125
4040: GO 4042
4042: DISABLE
4043: LD_INT 0
4045: PPUSH
// begin enable ;
4046: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4047: LD_ADDR_VAR 0 1
4051: PUSH
4052: LD_INT 22
4054: PUSH
4055: LD_INT 8
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: LD_INT 61
4067: PUSH
4068: EMPTY
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 50
4077: PUSH
4078: EMPTY
4079: LIST
4080: PUSH
4081: LD_INT 33
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: FOR_IN
4103: IFFALSE 4123
// begin wait ( 0 0$0.3 ) ;
4105: LD_INT 10
4107: PPUSH
4108: CALL_OW 67
// Connect ( i ) ;
4112: LD_VAR 0 1
4116: PPUSH
4117: CALL 42339 0 1
// end ;
4121: GO 4102
4123: POP
4124: POP
// end ;
4125: PPOPN 1
4127: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
// result := [ ] ;
4139: LD_ADDR_VAR 0 1
4143: PUSH
4144: EMPTY
4145: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PUSH
4156: LD_INT 1
4158: PLUS
4159: ST_TO_ADDR
// xy := [ ctArea1 , ctArea2 , ctArea3 , ctArea4 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_INT 19
4167: PUSH
4168: LD_INT 20
4170: PUSH
4171: LD_INT 21
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 2
4228: LESS
4229: IFFALSE 4534
// begin uc_side := 8 ;
4231: LD_ADDR_OWVAR 20
4235: PUSH
4236: LD_INT 8
4238: ST_TO_ADDR
// uc_nation := 2 ;
4239: LD_ADDR_OWVAR 21
4243: PUSH
4244: LD_INT 2
4246: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4247: LD_INT 14
4249: PPUSH
4250: LD_INT 3
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 31
4258: PPUSH
4259: LD_INT 100
4261: PPUSH
4262: CALL 38857 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4266: LD_ADDR_VAR 0 2
4270: PUSH
4271: DOUBLE
4272: LD_INT 22
4274: PUSH
4275: LD_INT 8
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 3
4284: PUSH
4285: LD_INT 58
4287: PUSH
4288: EMPTY
4289: LIST
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 34
4297: PUSH
4298: LD_INT 31
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: PUSH
4315: LD_INT 1
4317: PLUS
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 2
4322: PUSH
4323: FOR_TO
4324: IFFALSE 4532
// begin veh := CreateVehicle ;
4326: LD_ADDR_VAR 0 3
4330: PUSH
4331: CALL_OW 45
4335: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
4336: LD_VAR 0 3
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: LD_INT 5
4346: PPUSH
4347: CALL_OW 12
4351: PPUSH
4352: CALL_OW 233
// xy := Delete ( xy , rand ( 1 , Count ( xy ) ) ) ;
4356: LD_ADDR_VAR 0 4
4360: PUSH
4361: LD_VAR 0 4
4365: PPUSH
4366: LD_INT 1
4368: PPUSH
4369: LD_VAR 0 4
4373: PPUSH
4374: CALL 36061 0 1
4378: PPUSH
4379: CALL_OW 12
4383: PPUSH
4384: CALL_OW 3
4388: ST_TO_ADDR
// area := xy [ rand ( 1 , Count ( xy ) ) ] ;
4389: LD_ADDR_VAR 0 6
4393: PUSH
4394: LD_VAR 0 4
4398: PUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_VAR 0 4
4406: PPUSH
4407: CALL 36061 0 1
4411: PPUSH
4412: CALL_OW 12
4416: ARRAY
4417: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_ok ] ) then
4418: LD_VAR 0 6
4422: PPUSH
4423: LD_INT 50
4425: PUSH
4426: EMPTY
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: IFFALSE 4443
// area := ctAreaExtra ;
4435: LD_ADDR_VAR 0 6
4439: PUSH
4440: LD_INT 23
4442: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_VAR 0 6
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 7
4465: PUSH
4466: LD_INT 9
4468: PUSH
4469: LD_INT 10
4471: PUSH
4472: LD_INT 10
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: LD_OWVAR 67
4485: ARRAY
4486: PPUSH
4487: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4491: CALL_OW 44
4495: PPUSH
4496: LD_VAR 0 3
4500: PPUSH
4501: CALL_OW 52
// if area = ctAreaExtra then
4505: LD_VAR 0 6
4509: PUSH
4510: LD_INT 23
4512: EQUAL
4513: IFFALSE 4530
// ComMoveXY ( veh , 73 , 21 ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 73
4522: PPUSH
4523: LD_INT 21
4525: PPUSH
4526: CALL_OW 111
// end ;
4530: GO 4323
4532: POP
4533: POP
// end ; dir := rand ( 1 , 2 ) ;
4534: LD_ADDR_VAR 0 9
4538: PUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 2
4544: PPUSH
4545: CALL_OW 12
4549: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4550: LD_ADDR_VAR 0 6
4554: PUSH
4555: LD_INT 8
4557: PUSH
4558: LD_INT 9
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: LD_VAR 0 9
4569: ARRAY
4570: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4571: LD_ADDR_VAR 0 7
4575: PUSH
4576: LD_INT 6
4578: PUSH
4579: LD_INT 8
4581: PUSH
4582: LD_INT 10
4584: PUSH
4585: LD_INT 11
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: LD_OWVAR 67
4598: ARRAY
4599: PUSH
4600: LD_EXP 34
4604: PLUS
4605: ST_TO_ADDR
// if counter > 20 then
4606: LD_VAR 0 7
4610: PUSH
4611: LD_INT 20
4613: GREATER
4614: IFFALSE 4624
// counter := 20 ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 20
4623: ST_TO_ADDR
// for i := 1 to counter do
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: DOUBLE
4630: LD_INT 1
4632: DEC
4633: ST_TO_ADDR
4634: LD_VAR 0 7
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4975
// begin uc_side := 8 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 8
4649: ST_TO_ADDR
// uc_nation := 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4658: LD_INT 13
4660: PUSH
4661: LD_INT 14
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_INT 2
4673: PPUSH
4674: CALL_OW 12
4678: ARRAY
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: LD_INT 1
4685: PUSH
4686: LD_INT 2
4688: PUSH
4689: LD_INT 5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 3
4702: PPUSH
4703: CALL_OW 12
4707: ARRAY
4708: PPUSH
4709: LD_INT 27
4711: PUSH
4712: LD_INT 28
4714: PUSH
4715: LD_INT 27
4717: PUSH
4718: LD_INT 92
4720: PUSH
4721: LD_INT 29
4723: PUSH
4724: LD_INT 25
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 1
4737: PPUSH
4738: LD_INT 6
4740: PPUSH
4741: CALL_OW 12
4745: ARRAY
4746: PPUSH
4747: LD_INT 100
4749: PPUSH
4750: CALL 38857 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4754: LD_OWVAR 40
4758: PUSH
4759: LD_INT 29
4761: EQUAL
4762: IFFALSE 4772
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// veh := CreateVehicle ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: CALL_OW 45
4781: ST_TO_ADDR
// result := Join ( result , veh ) ;
4782: LD_ADDR_VAR 0 1
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: LD_VAR 0 3
4796: PPUSH
4797: CALL 72037 0 2
4801: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 5
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_VAR 0 9
4821: ARRAY
4822: PPUSH
4823: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_VAR 0 6
4836: PPUSH
4837: LD_INT 0
4839: PPUSH
4840: CALL_OW 49
// if vc_control = control_manual then
4844: LD_OWVAR 38
4848: PUSH
4849: LD_INT 1
4851: EQUAL
4852: IFFALSE 4899
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4854: LD_INT 0
4856: PPUSH
4857: LD_INT 7
4859: PUSH
4860: LD_INT 8
4862: PUSH
4863: LD_INT 9
4865: PUSH
4866: LD_INT 10
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: LD_OWVAR 67
4879: ARRAY
4880: PPUSH
4881: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4885: CALL_OW 44
4889: PPUSH
4890: LD_VAR 0 3
4894: PPUSH
4895: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL_OW 263
4915: PUSH
4916: LD_INT 2
4918: EQUAL
4919: IFFALSE 4933
4921: PUSH
4922: LD_VAR 0 3
4926: PPUSH
4927: CALL_OW 312
4931: NOT
4932: AND
4933: IFFALSE 4951
// begin Connect ( veh ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: CALL 42339 0 1
// wait ( 0 0$0.3 ) ;
4944: LD_INT 10
4946: PPUSH
4947: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 100
4958: PPUSH
4959: LD_INT 55
4961: PPUSH
4962: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4966: LD_INT 18
4968: PPUSH
4969: CALL_OW 67
// end ;
4973: GO 4639
4975: POP
4976: POP
// if arabianAttacksCounter = 1 then
4977: LD_EXP 34
4981: PUSH
4982: LD_INT 1
4984: EQUAL
4985: IFFALSE 4991
// DestroySibDeposit ;
4987: CALL 3721 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4991: LD_EXP 34
4995: PUSH
4996: LD_INT 4
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: PUSH
5014: LD_OWVAR 67
5018: ARRAY
5019: MOD
5020: PUSH
5021: LD_INT 0
5023: EQUAL
5024: IFFALSE 5382
// begin tmp := rand ( 0 , 2 ) ;
5026: LD_ADDR_VAR 0 8
5030: PUSH
5031: LD_INT 0
5033: PPUSH
5034: LD_INT 2
5036: PPUSH
5037: CALL_OW 12
5041: ST_TO_ADDR
// if not tmp then
5042: LD_VAR 0 8
5046: NOT
5047: IFFALSE 5208
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: DOUBLE
5055: LD_INT 1
5057: DEC
5058: ST_TO_ADDR
5059: LD_INT 3
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 4
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: PUSH
5077: LD_OWVAR 67
5081: ARRAY
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5204
// begin uc_side := 8 ;
5086: LD_ADDR_OWVAR 20
5090: PUSH
5091: LD_INT 8
5093: ST_TO_ADDR
// uc_nation := 2 ;
5094: LD_ADDR_OWVAR 21
5098: PUSH
5099: LD_INT 2
5101: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5102: LD_INT 0
5104: PPUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_INT 7
5110: PUSH
5111: LD_INT 8
5113: PUSH
5114: LD_INT 9
5116: PUSH
5117: LD_INT 10
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: PUSH
5126: LD_OWVAR 67
5130: ARRAY
5131: PPUSH
5132: CALL_OW 380
// un := CreateHuman ;
5136: LD_ADDR_VAR 0 5
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// result := Join ( result , un ) ;
5146: LD_ADDR_VAR 0 1
5150: PUSH
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_VAR 0 5
5160: PPUSH
5161: CALL 72037 0 2
5165: ST_TO_ADDR
// if Prob ( 60 ) then
5166: LD_INT 60
5168: PPUSH
5169: CALL_OW 13
5173: IFFALSE 5187
// SetClass ( un , class_mortar ) ;
5175: LD_VAR 0 5
5179: PPUSH
5180: LD_INT 8
5182: PPUSH
5183: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5187: LD_VAR 0 5
5191: PPUSH
5192: LD_INT 16
5194: PPUSH
5195: LD_INT 0
5197: PPUSH
5198: CALL_OW 49
// end ;
5202: GO 5083
5204: POP
5205: POP
// end else
5206: GO 5372
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5208: LD_ADDR_VAR 0 2
5212: PUSH
5213: DOUBLE
5214: LD_INT 1
5216: DEC
5217: ST_TO_ADDR
5218: LD_INT 2
5220: PUSH
5221: LD_INT 3
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PUSH
5236: LD_OWVAR 67
5240: ARRAY
5241: PUSH
5242: FOR_TO
5243: IFFALSE 5370
// begin uc_side := 8 ;
5245: LD_ADDR_OWVAR 20
5249: PUSH
5250: LD_INT 8
5252: ST_TO_ADDR
// uc_nation := 0 ;
5253: LD_ADDR_OWVAR 21
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5261: LD_ADDR_OWVAR 28
5265: PUSH
5266: LD_INT 17
5268: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5269: LD_ADDR_OWVAR 31
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 0
5279: PUSH
5280: LD_INT 0
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5292: LD_ADDR_OWVAR 29
5296: PUSH
5297: LD_INT 10
5299: PUSH
5300: LD_INT 10
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// hc_gallery :=  ;
5307: LD_ADDR_OWVAR 33
5311: PUSH
5312: LD_STRING 
5314: ST_TO_ADDR
// hc_name :=  ;
5315: LD_ADDR_OWVAR 26
5319: PUSH
5320: LD_STRING 
5322: ST_TO_ADDR
// un := CreateHuman ;
5323: LD_ADDR_VAR 0 5
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// result := Join ( result , un ) ;
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_VAR 0 1
5342: PPUSH
5343: LD_VAR 0 5
5347: PPUSH
5348: CALL 72037 0 2
5352: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5353: LD_VAR 0 5
5357: PPUSH
5358: LD_INT 16
5360: PPUSH
5361: LD_INT 0
5363: PPUSH
5364: CALL_OW 49
// end ;
5368: GO 5242
5370: POP
5371: POP
// end ; if sibDeposits then
5372: LD_EXP 32
5376: IFFALSE 5382
// DestroySibDeposit ;
5378: CALL 3721 0 0
// end ; for i in result do
5382: LD_ADDR_VAR 0 2
5386: PUSH
5387: LD_VAR 0 1
5391: PUSH
5392: FOR_IN
5393: IFFALSE 5409
// SetTag ( i , 10 ) ;
5395: LD_VAR 0 2
5399: PPUSH
5400: LD_INT 10
5402: PPUSH
5403: CALL_OW 109
5407: GO 5392
5409: POP
5410: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5411: LD_EXP 44
5415: PPUSH
5416: CALL_OW 427
// end ; end_of_file
5420: LD_VAR 0 1
5424: RET
// export function Action ; var tmp ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5429: LD_ADDR_VAR 0 2
5433: PUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// InGameOn ;
5463: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5476: LD_INT 22
5478: PUSH
5479: LD_INT 1
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 21
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: PPUSH
5505: LD_INT 69
5507: PPUSH
5508: LD_INT 94
5510: PPUSH
5511: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5515: LD_EXP 1
5519: PPUSH
5520: LD_STRING D2-JMM-1
5522: PPUSH
5523: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5527: LD_VAR 0 2
5531: PPUSH
5532: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5536: LD_EXP 2
5540: PPUSH
5541: LD_STRING D2-Huck-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_STRING D2-JMM-2
5564: PPUSH
5565: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 87
// InGameOff ;
5578: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5582: LD_STRING M1
5584: PPUSH
5585: CALL_OW 337
// SaveForQuickRestart ;
5589: CALL_OW 22
// wait ( 10 10$00 ) ;
5593: LD_INT 21000
5595: PPUSH
5596: CALL_OW 67
// DialogueOn ;
5600: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D3-Pow-1
5611: PPUSH
5612: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5616: LD_EXP 1
5620: PPUSH
5621: LD_STRING D3-JMM-1
5623: PPUSH
5624: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5628: LD_EXP 16
5632: PPUSH
5633: LD_STRING D3-Pow-2
5635: PPUSH
5636: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5640: LD_EXP 1
5644: PPUSH
5645: LD_STRING D3-JMM-2
5647: PPUSH
5648: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5652: LD_EXP 16
5656: PPUSH
5657: LD_STRING D3-Pow-3
5659: PPUSH
5660: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5664: LD_EXP 1
5668: PPUSH
5669: LD_STRING D3-JMM-3
5671: PPUSH
5672: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5676: LD_EXP 16
5680: PPUSH
5681: LD_STRING D3-Pow-4
5683: PPUSH
5684: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5688: LD_EXP 1
5692: PPUSH
5693: LD_STRING D3-JMM-4
5695: PPUSH
5696: CALL_OW 88
// DialogueOff ;
5700: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5704: LD_STRING M2
5706: PPUSH
5707: CALL_OW 337
// wait ( 2 2$30 ) ;
5711: LD_INT 5250
5713: PPUSH
5714: CALL_OW 67
// PrepareBurlak ;
5718: CALL 2314 0 0
// BurlakArmy ;
5722: CALL 2496 0 0
// end ;
5726: LD_VAR 0 1
5730: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5731: LD_INT 1
5733: PPUSH
5734: LD_EXP 19
5738: PPUSH
5739: CALL_OW 292
5743: IFFALSE 5902
5745: GO 5747
5747: DISABLE
// begin DialogueOn ;
5748: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5752: LD_EXP 19
5756: PPUSH
5757: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5761: LD_INT 22
5763: PUSH
5764: LD_INT 1
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: LD_INT 26
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: LD_INT 25
5786: PUSH
5787: LD_INT 1
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 25
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 25
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 25
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 25
5826: PUSH
5827: LD_INT 5
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: PPUSH
5852: LD_STRING D5-Sol1-1
5854: PPUSH
5855: LD_STRING D5-FSol1-1
5857: PPUSH
5858: CALL 8412 0 3
// Say ( JMM , D5-JMM-1 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D5-JMM-1
5869: PPUSH
5870: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5874: LD_EXP 18
5878: PPUSH
5879: LD_STRING DAmer-Bur-1
5881: PPUSH
5882: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5886: LD_EXP 1
5890: PPUSH
5891: LD_STRING DAmer-JMM-1
5893: PPUSH
5894: CALL_OW 88
// DialogueOff ;
5898: CALL_OW 7
// end ;
5902: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5903: LD_INT 4
5905: PPUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 7
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 70
5920: IFFALSE 6323
5922: GO 5924
5924: DISABLE
5925: LD_INT 0
5927: PPUSH
// begin enable ;
5928: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 4
5936: PPUSH
5937: LD_INT 22
5939: PUSH
5940: LD_INT 7
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 70
5951: PUSH
5952: FOR_IN
5953: IFFALSE 6321
// begin if i = Burlak or i = Masha then
5955: LD_VAR 0 1
5959: PUSH
5960: LD_EXP 18
5964: EQUAL
5965: IFTRUE 5979
5967: PUSH
5968: LD_VAR 0 1
5972: PUSH
5973: LD_EXP 19
5977: EQUAL
5978: OR
5979: IFFALSE 6126
// begin RemoveUnit ( i ) ;
5981: LD_VAR 0 1
5985: PPUSH
5986: CALL_OW 64
// DialogueOn ;
5990: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5994: LD_EXP 1
5998: PPUSH
5999: LD_STRING D5a-JMM-1
6001: PPUSH
6002: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
6006: LD_INT 22
6008: PUSH
6009: LD_INT 1
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 26
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: LD_INT 1
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 25
6041: PUSH
6042: LD_INT 2
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 25
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 69
6096: PPUSH
6097: LD_STRING D5a-Sol1-1
6099: PPUSH
6100: LD_STRING D5-FSol1-1
6102: PPUSH
6103: CALL 8412 0 3
// DialogueOff ;
6107: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
6111: LD_STRING M2b
6113: PPUSH
6114: CALL_OW 337
// spawnBurlak = 0 ;
6118: LD_ADDR_EXP 28
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6126: LD_VAR 0 1
6130: PPUSH
6131: CALL_OW 247
6135: PUSH
6136: LD_INT 2
6138: EQUAL
6139: IFFALSE 6156
6141: PUSH
6142: LD_VAR 0 1
6146: PPUSH
6147: CALL_OW 263
6151: PUSH
6152: LD_INT 1
6154: EQUAL
6155: AND
6156: IFFALSE 6284
// begin case IsDrivenBy ( i ) of Gnyevko :
6158: LD_VAR 0 1
6162: PPUSH
6163: CALL_OW 311
6167: PUSH
6168: LD_EXP 20
6172: DOUBLE
6173: EQUAL
6174: IFTRUE 6178
6176: GO 6191
6178: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6179: LD_INT 1
6181: PPUSH
6182: LD_STRING 13_Gnyevko_1
6184: PPUSH
6185: CALL_OW 39
6189: GO 6284
6191: LD_EXP 21
6195: DOUBLE
6196: EQUAL
6197: IFTRUE 6201
6199: GO 6214
6201: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6202: LD_INT 1
6204: PPUSH
6205: LD_STRING 13_Titov_1
6207: PPUSH
6208: CALL_OW 39
6212: GO 6284
6214: LD_EXP 22
6218: DOUBLE
6219: EQUAL
6220: IFTRUE 6224
6222: GO 6237
6224: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6225: LD_INT 1
6227: PPUSH
6228: LD_STRING 13_Xavier_1
6230: PPUSH
6231: CALL_OW 39
6235: GO 6284
6237: LD_EXP 23
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6260
6247: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6248: LD_INT 1
6250: PPUSH
6251: LD_STRING 13_Belkov_1
6253: PPUSH
6254: CALL_OW 39
6258: GO 6284
6260: LD_EXP 24
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6283
6270: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6271: LD_INT 1
6273: PPUSH
6274: LD_STRING 13_Lipshchin_1
6276: PPUSH
6277: CALL_OW 39
6281: GO 6284
6283: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 264
6293: PUSH
6294: LD_INT 49
6296: EQUAL
6297: IFFALSE 6310
// DestroyUnit ( i ) else
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 65
6308: GO 6319
// RemoveUnit ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 64
// end ;
6319: GO 5952
6321: POP
6322: POP
// end ;
6323: PPOPN 1
6325: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6326: LD_EXP 18
6330: PPUSH
6331: CALL_OW 302
6335: IFFALSE 6352
6337: PUSH
6338: LD_EXP 19
6342: PPUSH
6343: CALL_OW 256
6347: PUSH
6348: LD_INT 500
6350: LESS
6351: AND
6352: IFFALSE 6369
6354: PUSH
6355: LD_EXP 19
6359: PPUSH
6360: CALL_OW 255
6364: PUSH
6365: LD_INT 7
6367: EQUAL
6368: AND
6369: IFFALSE 6389
6371: GO 6373
6373: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_INT 107
6381: PPUSH
6382: LD_INT 118
6384: PPUSH
6385: CALL_OW 111
6389: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6390: LD_EXP 18
6394: PPUSH
6395: CALL_OW 301
6399: IFFALSE 6411
6401: PUSH
6402: LD_EXP 28
6406: PUSH
6407: LD_INT 1
6409: EQUAL
6410: AND
6411: IFFALSE 6544
6413: GO 6415
6415: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6416: LD_EXP 1
6420: PPUSH
6421: LD_STRING D5b-JMM-1
6423: PPUSH
6424: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6428: LD_INT 22
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 26
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 25
6483: PUSH
6484: LD_INT 4
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: CALL_OW 69
6518: PPUSH
6519: LD_STRING D5b-Sol1-1
6521: PPUSH
6522: LD_STRING 
6524: PPUSH
6525: CALL 8412 0 3
// ChangeMissionObjectives ( M2a ) ;
6529: LD_STRING M2a
6531: PPUSH
6532: CALL_OW 337
// burlakStatus := 1 ;
6536: LD_ADDR_EXP 29
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ;
6544: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6545: LD_EXP 2
6549: PPUSH
6550: CALL_OW 301
6554: IFFALSE 6691
6556: GO 6558
6558: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6559: LD_EXP 1
6563: PPUSH
6564: LD_STRING D6-JMM-1
6566: PPUSH
6567: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6571: LD_INT 22
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 26
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 3
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 4
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 69
6661: PPUSH
6662: LD_STRING D6-Sol1-1
6664: PPUSH
6665: LD_STRING 
6667: PPUSH
6668: CALL 8412 0 3
// Say ( JMM , D6-JMM-2 ) ;
6672: LD_EXP 1
6676: PPUSH
6677: LD_STRING D6-JMM-2
6679: PPUSH
6680: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6684: LD_STRING M1a
6686: PPUSH
6687: CALL_OW 337
// end ;
6691: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6692: LD_INT 25
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: CALL_OW 321
6702: PUSH
6703: LD_INT 2
6705: EQUAL
6706: IFFALSE 6723
6708: GO 6710
6710: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6711: LD_EXP 2
6715: PPUSH
6716: LD_STRING D6-Huck-2
6718: PPUSH
6719: CALL_OW 88
6723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6724: LD_INT 22
6726: PUSH
6727: LD_INT 1
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 34
6739: PUSH
6740: LD_INT 8
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 35
6749: PUSH
6750: LD_INT 8
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: IFFALSE 6830
6772: PUSH
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 57
6811: PUSH
6812: EMPTY
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PPUSH
6825: CALL_OW 70
6829: AND
6830: IFFALSE 6890
6832: PUSH
6833: LD_INT 5
6835: PPUSH
6836: LD_INT 22
6838: PUSH
6839: LD_INT 1
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 21
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 5
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 3
6868: PUSH
6869: LD_INT 57
6871: PUSH
6872: EMPTY
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 70
6889: AND
6890: IFFALSE 6932
6892: GO 6894
6894: DISABLE
// begin DialogueOn ;
6895: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6899: LD_EXP 1
6903: PPUSH
6904: LD_STRING D7-JMM-1
6906: PPUSH
6907: CALL_OW 88
// DialogueOff ;
6911: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6915: LD_STRING M4
6917: PPUSH
6918: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6922: LD_INT 5
6924: PPUSH
6925: LD_INT 0
6927: PPUSH
6928: CALL_OW 424
// end ;
6932: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6933: LD_INT 6
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PPUSH
6960: CALL_OW 70
6964: IFFALSE 6976
6966: PUSH
6967: LD_EXP 38
6971: PUSH
6972: LD_INT 1
6974: EQUAL
6975: AND
6976: IFFALSE 6988
6978: PUSH
6979: LD_EXP 30
6983: PUSH
6984: LD_INT 0
6986: EQUAL
6987: AND
6988: IFFALSE 7053
6990: GO 6992
6992: DISABLE
// begin enable ;
6993: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6994: LD_ADDR_EXP 27
6998: PUSH
6999: LD_INT 6
7001: PPUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 25
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 70
7030: PUSH
7031: LD_INT 1
7033: ARRAY
7034: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
7035: LD_INT 6
7037: PPUSH
7038: LD_INT 0
7040: PPUSH
7041: CALL_OW 424
// radationResearched := 1 ;
7045: LD_ADDR_EXP 30
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// end ;
7053: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
7054: LD_EXP 27
7058: PPUSH
7059: CALL_OW 301
7063: IFFALSE 7075
7065: PUSH
7066: LD_EXP 30
7070: PUSH
7071: LD_INT 1
7073: EQUAL
7074: AND
7075: IFFALSE 7111
7077: GO 7079
7079: DISABLE
// begin enable ;
7080: ENABLE
// radationResearched = 0 ;
7081: LD_ADDR_EXP 30
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7089: LD_INT 6
7091: PPUSH
7092: LD_INT 1
7094: PPUSH
7095: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
7099: LD_EXP 1
7103: PPUSH
7104: LD_STRING D9a-JMM-1
7106: PPUSH
7107: CALL_OW 88
// end ; end_of_file
7111: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
7112: LD_VAR 0 5
7116: PUSH
7117: LD_INT 8
7119: EQUAL
7120: IFFALSE 7132
7122: PUSH
7123: LD_EXP 36
7127: PUSH
7128: LD_INT 0
7130: EQUAL
7131: AND
7132: IFFALSE 7185
// begin eventVar1 := 1 ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// DialogueOn ;
7142: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6a-JMM-1
7153: PPUSH
7154: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7158: LD_EXP 16
7162: PPUSH
7163: LD_STRING D6a-Pow-1
7165: PPUSH
7166: CALL_OW 94
// DialogueOff ;
7170: CALL_OW 7
// wait ( 3 3$0 ) ;
7174: LD_INT 6300
7176: PPUSH
7177: CALL_OW 67
// PowellSupport ;
7181: CALL 1872 0 0
// end ; end ;
7185: PPOPN 5
7187: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL 27363 0 1
// if un = JMM then
7197: LD_VAR 0 1
7201: PUSH
7202: LD_EXP 1
7206: EQUAL
7207: IFFALSE 7216
// YouLost ( JMM ) ;
7209: LD_STRING JMM
7211: PPUSH
7212: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 264
7225: PUSH
7226: LD_INT 31
7228: EQUAL
7229: IFFALSE 7245
// achivCounter := achivCounter + 1 ;
7231: LD_ADDR_EXP 42
7235: PUSH
7236: LD_EXP 42
7240: PUSH
7241: LD_INT 1
7243: PLUS
7244: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 255
7254: PUSH
7255: LD_INT 1
7257: NONEQUAL
7258: IFFALSE 7275
7260: PUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 247
7270: PUSH
7271: LD_INT 2
7273: EQUAL
7274: AND
7275: IFFALSE 7291
// destroyCounter := destroyCounter + 1 ;
7277: LD_ADDR_EXP 43
7281: PUSH
7282: LD_EXP 43
7286: PUSH
7287: LD_INT 1
7289: PLUS
7290: ST_TO_ADDR
// end ;
7291: PPOPN 1
7293: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7294: LD_VAR 0 2
7298: PUSH
7299: LD_EXP 19
7303: EQUAL
7304: IFFALSE 7313
// SetAchievement ( ACH_MASHA ) ;
7306: LD_STRING ACH_MASHA
7308: PPUSH
7309: CALL_OW 543
// end ;
7313: PPOPN 4
7315: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_VAR 0 2
7325: PPUSH
7326: CALL 27421 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 264
7339: PUSH
7340: LD_INT 8
7342: EQUAL
7343: IFFALSE 7355
7345: PUSH
7346: LD_EXP 37
7350: PUSH
7351: LD_INT 0
7353: EQUAL
7354: AND
7355: IFFALSE 7424
// begin eventVar2 := 1 ;
7357: LD_ADDR_EXP 37
7361: PUSH
7362: LD_INT 1
7364: ST_TO_ADDR
// DialogueOn ;
7365: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7369: LD_EXP 1
7373: PPUSH
7374: LD_STRING D6b-JMM-1
7376: PPUSH
7377: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7381: LD_EXP 16
7385: PPUSH
7386: LD_STRING D6b-Pow-1
7388: PPUSH
7389: CALL_OW 94
// DialogueOff ;
7393: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7397: LD_INT 5
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7407: LD_INT 7
7409: PPUSH
7410: LD_INT 1
7412: PPUSH
7413: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7417: LD_STRING M3
7419: PPUSH
7420: CALL_OW 337
// end ; end ;
7424: PPOPN 2
7426: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7427: LD_VAR 0 2
7431: PPUSH
7432: LD_VAR 0 3
7436: PPUSH
7437: LD_INT 5
7439: PPUSH
7440: CALL_OW 309
7444: IFFALSE 7456
7446: PUSH
7447: LD_EXP 38
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: AND
7456: IFFALSE 7681
// begin eventVar3 := 1 ;
7458: LD_ADDR_EXP 38
7462: PUSH
7463: LD_INT 1
7465: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7466: LD_INT 175
7468: PPUSH
7469: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7473: LD_INT 7
7475: PPUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 34
7498: PUSH
7499: LD_INT 11
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 70
7515: IFFALSE 7534
// begin radarOnSpot := 1 ;
7517: LD_ADDR_EXP 31
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7525: LD_STRING M3a
7527: PPUSH
7528: CALL_OW 337
// end else
7532: GO 7541
// ChangeMissionObjectives ( M3b ) ;
7534: LD_STRING M3b
7536: PPUSH
7537: CALL_OW 337
// DialogueOn ;
7541: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7545: LD_EXP 2
7549: PPUSH
7550: LD_STRING D8-Huck-1
7552: PPUSH
7553: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7557: LD_EXP 1
7561: PPUSH
7562: LD_STRING D8-JMM-1
7564: PPUSH
7565: CALL_OW 88
// if IsOk ( Stevens ) then
7569: LD_EXP 2
7573: PPUSH
7574: CALL_OW 302
7578: IFFALSE 7640
// begin Say ( Stevens , D8-Huck-2 ) ;
7580: LD_EXP 2
7584: PPUSH
7585: LD_STRING D8-Huck-2
7587: PPUSH
7588: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7592: LD_EXP 1
7596: PPUSH
7597: LD_STRING D8-JMM-2
7599: PPUSH
7600: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7604: LD_EXP 2
7608: PPUSH
7609: LD_STRING D8-Huck-3
7611: PPUSH
7612: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7616: LD_EXP 1
7620: PPUSH
7621: LD_STRING D8-JMM-3
7623: PPUSH
7624: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7628: LD_EXP 2
7632: PPUSH
7633: LD_STRING D8-Huck-4
7635: PPUSH
7636: CALL_OW 88
// end ; DialogueOff ;
7640: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7644: LD_INT 5
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7654: LD_INT 7
7656: PPUSH
7657: LD_INT 0
7659: PPUSH
7660: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7664: LD_INT 6
7666: PPUSH
7667: LD_INT 1
7669: PPUSH
7670: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7674: LD_STRING M5
7676: PPUSH
7677: CALL_OW 337
// end ; end ;
7681: PPOPN 3
7683: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7684: LD_EXP 27
7688: PPUSH
7689: CALL_OW 302
7693: IFFALSE 7707
7695: PUSH
7696: LD_VAR 0 2
7700: PUSH
7701: LD_EXP 27
7705: EQUAL
7706: AND
7707: IFFALSE 7719
7709: PUSH
7710: LD_EXP 39
7714: PUSH
7715: LD_INT 0
7717: EQUAL
7718: AND
7719: IFFALSE 7731
7721: PUSH
7722: LD_EXP 38
7726: PUSH
7727: LD_INT 1
7729: EQUAL
7730: AND
7731: IFFALSE 7771
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 268
7746: PUSH
7747: LD_INT 11
7749: EQUAL
7750: IFTRUE 7770
7752: PUSH
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_INT 2
7760: PPUSH
7761: CALL_OW 268
7765: PUSH
7766: LD_INT 11
7768: EQUAL
7769: OR
7770: AND
7771: IFFALSE 7781
// eventVar4 := 1 ;
7773: LD_ADDR_EXP 39
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// end ;
7781: PPOPN 2
7783: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7784: LD_INT 0
7786: PPUSH
7787: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 248
7797: PUSH
7798: LD_INT 2
7800: EQUAL
7801: IFFALSE 8037
// begin for i := sibDeposits downto 1 do
7803: LD_ADDR_VAR 0 4
7807: PUSH
7808: DOUBLE
7809: LD_EXP 32
7813: INC
7814: ST_TO_ADDR
7815: LD_INT 1
7817: PUSH
7818: FOR_DOWNTO
7819: IFFALSE 7891
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7821: LD_EXP 32
7825: PUSH
7826: LD_VAR 0 4
7830: ARRAY
7831: PUSH
7832: LD_INT 1
7834: ARRAY
7835: PUSH
7836: LD_VAR 0 2
7840: EQUAL
7841: IFFALSE 7865
7843: PUSH
7844: LD_EXP 32
7848: PUSH
7849: LD_VAR 0 4
7853: ARRAY
7854: PUSH
7855: LD_INT 2
7857: ARRAY
7858: PUSH
7859: LD_VAR 0 3
7863: EQUAL
7864: AND
7865: IFFALSE 7889
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7867: LD_ADDR_EXP 32
7871: PUSH
7872: LD_EXP 32
7876: PPUSH
7877: LD_VAR 0 4
7881: PPUSH
7882: CALL_OW 3
7886: ST_TO_ADDR
// break ;
7887: GO 7891
// end ;
7889: GO 7818
7891: POP
7892: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7893: LD_EXP 40
7897: PUSH
7898: LD_INT 0
7900: EQUAL
7901: IFFALSE 7935
7903: PUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_VAR 0 3
7913: PPUSH
7914: CALL_OW 428
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PPUSH
7929: CALL_OW 69
7933: IN
7934: AND
7935: IFFALSE 8037
// begin eventVar5 := 1 ;
7937: LD_ADDR_EXP 40
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// DialogueOn ;
7945: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7949: LD_EXP 2
7953: PPUSH
7954: LD_STRING D4-Sci1-1
7956: PPUSH
7957: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7961: LD_EXP 1
7965: PPUSH
7966: LD_STRING D4-JMM-1
7968: PPUSH
7969: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7973: LD_EXP 2
7977: PPUSH
7978: LD_STRING D4-Sci1-2
7980: PPUSH
7981: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7985: LD_EXP 1
7989: PPUSH
7990: LD_STRING D4-JMM-2
7992: PPUSH
7993: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7997: LD_EXP 2
8001: PPUSH
8002: LD_STRING D4-Sci1-3
8004: PPUSH
8005: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8009: LD_EXP 1
8013: PPUSH
8014: LD_STRING D4-JMM-3
8016: PPUSH
8017: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
8021: LD_EXP 1
8025: PPUSH
8026: LD_STRING D4-JMM-3a
8028: PPUSH
8029: CALL_OW 88
// DialogueOff ;
8033: CALL_OW 7
// end ; end ; end ;
8037: PPOPN 5
8039: END
// on SiberiteDepositDestroyed ( x , y ) do begin sibDestroyedCounter := Inc ( sibDestroyedCounter ) ;
8040: LD_ADDR_EXP 33
8044: PUSH
8045: LD_EXP 33
8049: PPUSH
8050: CALL 73410 0 1
8054: ST_TO_ADDR
// end ;
8055: PPOPN 2
8057: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 255
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: IFFALSE 8088
8073: PUSH
8074: LD_VAR 0 1
8078: PPUSH
8079: CALL_OW 266
8083: PUSH
8084: LD_INT 0
8086: EQUAL
8087: AND
8088: IFFALSE 8153
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 21
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 30
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: AND
8153: IFFALSE 8167
// SetBName ( building , omega ) ;
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_STRING omega
8162: PPUSH
8163: CALL_OW 500
// end ;
8167: PPOPN 2
8169: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL 27405 0 1
// end ;
8179: PPOPN 1
8181: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8182: LD_VAR 0 1
8186: PUSH
8187: LD_EXP 44
8191: EQUAL
8192: IFFALSE 8198
// ArabianAttack ;
8194: CALL 10352 0 0
// if event = eventRussianAttack then
8198: LD_VAR 0 1
8202: PUSH
8203: LD_EXP 45
8207: EQUAL
8208: IFFALSE 8214
// RussianAttack ;
8210: CALL 10717 0 0
// end ;
8214: PPOPN 1
8216: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 46
8226: EQUAL
8227: IFFALSE 8323
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8229: LD_VAR 0 2
8233: PPUSH
8234: CALL_OW 302
8238: IFFALSE 8256
8240: PUSH
8241: LD_VAR 0 3
8245: PPUSH
8246: LD_VAR 0 4
8250: PPUSH
8251: CALL_OW 488
8255: AND
8256: IFFALSE 8323
// begin repeat wait ( 0 0$1 ) ;
8258: LD_INT 35
8260: PPUSH
8261: CALL_OW 67
// if not HasTask ( p1 ) then
8265: LD_VAR 0 2
8269: PPUSH
8270: CALL_OW 314
8274: NOT
8275: IFFALSE 8311
// begin ComContaminate ( p1 , p2 , p3 ) ;
8277: LD_VAR 0 2
8281: PPUSH
8282: LD_VAR 0 3
8286: PPUSH
8287: LD_VAR 0 4
8291: PPUSH
8292: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8296: LD_VAR 0 2
8300: PPUSH
8301: LD_INT 42
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8311: LD_VAR 0 2
8315: PPUSH
8316: CALL_OW 302
8320: NOT
8321: IFFALSE 8258
// end ; end ; end ;
8323: PPOPN 7
8325: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 255
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 8
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8409
// begin ComMoveXY ( driver , 41 , 2 ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_INT 41
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8363: LD_INT 35
8365: PPUSH
8366: CALL_OW 67
// if IsDead ( driver ) then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 301
8379: IFFALSE 8383
// exit ;
8381: GO 8409
// until IsAt ( driver , 41 , 2 ) ;
8383: LD_VAR 0 1
8387: PPUSH
8388: LD_INT 41
8390: PPUSH
8391: LD_INT 2
8393: PPUSH
8394: CALL_OW 307
8398: IFFALSE 8363
// RemoveUnit ( driver ) ;
8400: LD_VAR 0 1
8404: PPUSH
8405: CALL_OW 64
// end ; end ; end_of_file
8409: PPOPN 4
8411: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8412: LD_INT 0
8414: PPUSH
8415: PPUSH
8416: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_VAR 0 1
8426: PUSH
8427: LD_EXP 1
8431: PUSH
8432: LD_EXP 2
8436: PUSH
8437: LD_EXP 3
8441: PUSH
8442: LD_EXP 4
8446: PUSH
8447: LD_EXP 5
8451: PUSH
8452: LD_EXP 6
8456: PUSH
8457: LD_EXP 7
8461: PUSH
8462: LD_EXP 8
8466: PUSH
8467: LD_EXP 9
8471: PUSH
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 11
8481: PUSH
8482: LD_EXP 12
8486: PUSH
8487: LD_EXP 13
8491: PUSH
8492: LD_EXP 14
8496: PUSH
8497: LD_EXP 16
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: DIFF
8519: ST_TO_ADDR
// if not characters then
8520: LD_VAR 0 1
8524: NOT
8525: IFFALSE 8529
// exit ;
8527: GO 8608
// speaker := characters [ rand ( 1 , characters ) ] ;
8529: LD_ADDR_VAR 0 6
8533: PUSH
8534: LD_VAR 0 1
8538: PUSH
8539: LD_INT 1
8541: PPUSH
8542: LD_VAR 0 1
8546: PPUSH
8547: CALL_OW 12
8551: ARRAY
8552: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8553: LD_VAR 0 6
8557: PPUSH
8558: CALL_OW 258
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: IFFALSE 8584
// Say ( speaker , dialogMID ) else
8568: LD_VAR 0 6
8572: PPUSH
8573: LD_VAR 0 2
8577: PPUSH
8578: CALL_OW 88
8582: GO 8598
// Say ( speaker , dialogFID ) ;
8584: LD_VAR 0 6
8588: PPUSH
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 88
// result := speaker ;
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: LD_VAR 0 6
8607: ST_TO_ADDR
// end ;
8608: LD_VAR 0 4
8612: RET
// export function PrepareDifficulty ; begin
8613: LD_INT 0
8615: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8616: LD_INT 5
8618: PPUSH
8619: LD_INT 8
8621: PPUSH
8622: LD_INT 2
8624: PPUSH
8625: CALL_OW 322
// if Difficulty = 1 then
8629: LD_OWVAR 67
8633: PUSH
8634: LD_INT 1
8636: EQUAL
8637: IFFALSE 8756
// begin SetTech ( 66 , 8 , state_researched ) ;
8639: LD_INT 66
8641: PPUSH
8642: LD_INT 8
8644: PPUSH
8645: LD_INT 2
8647: PPUSH
8648: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8652: LD_INT 67
8654: PPUSH
8655: LD_INT 8
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8665: LD_INT 68
8667: PPUSH
8668: LD_INT 8
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8678: LD_INT 51
8680: PPUSH
8681: LD_INT 8
8683: PPUSH
8684: LD_INT 2
8686: PPUSH
8687: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8691: LD_INT 52
8693: PPUSH
8694: LD_INT 8
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8704: LD_INT 53
8706: PPUSH
8707: LD_INT 8
8709: PPUSH
8710: LD_INT 0
8712: PPUSH
8713: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8717: LD_INT 60
8719: PPUSH
8720: LD_INT 8
8722: PPUSH
8723: LD_INT 2
8725: PPUSH
8726: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8730: LD_INT 61
8732: PPUSH
8733: LD_INT 8
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8743: LD_INT 62
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 0
8751: PPUSH
8752: CALL_OW 322
// end ; if Difficulty = 2 then
8756: LD_OWVAR 67
8760: PUSH
8761: LD_INT 2
8763: EQUAL
8764: IFFALSE 8883
// begin SetTech ( 66 , 8 , state_researched ) ;
8766: LD_INT 66
8768: PPUSH
8769: LD_INT 8
8771: PPUSH
8772: LD_INT 2
8774: PPUSH
8775: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8779: LD_INT 67
8781: PPUSH
8782: LD_INT 8
8784: PPUSH
8785: LD_INT 2
8787: PPUSH
8788: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8792: LD_INT 68
8794: PPUSH
8795: LD_INT 8
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8805: LD_INT 51
8807: PPUSH
8808: LD_INT 8
8810: PPUSH
8811: LD_INT 2
8813: PPUSH
8814: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8818: LD_INT 52
8820: PPUSH
8821: LD_INT 8
8823: PPUSH
8824: LD_INT 2
8826: PPUSH
8827: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8831: LD_INT 53
8833: PPUSH
8834: LD_INT 8
8836: PPUSH
8837: LD_INT 2
8839: PPUSH
8840: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8844: LD_INT 60
8846: PPUSH
8847: LD_INT 8
8849: PPUSH
8850: LD_INT 2
8852: PPUSH
8853: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8857: LD_INT 61
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: LD_INT 2
8865: PPUSH
8866: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8870: LD_INT 62
8872: PPUSH
8873: LD_INT 8
8875: PPUSH
8876: LD_INT 0
8878: PPUSH
8879: CALL_OW 322
// end ; if Difficulty >= 3 then
8883: LD_OWVAR 67
8887: PUSH
8888: LD_INT 3
8890: GREATEREQUAL
8891: IFFALSE 9010
// begin SetTech ( 66 , 8 , state_researched ) ;
8893: LD_INT 66
8895: PPUSH
8896: LD_INT 8
8898: PPUSH
8899: LD_INT 2
8901: PPUSH
8902: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8906: LD_INT 67
8908: PPUSH
8909: LD_INT 8
8911: PPUSH
8912: LD_INT 2
8914: PPUSH
8915: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8919: LD_INT 68
8921: PPUSH
8922: LD_INT 8
8924: PPUSH
8925: LD_INT 0
8927: PPUSH
8928: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8932: LD_INT 51
8934: PPUSH
8935: LD_INT 8
8937: PPUSH
8938: LD_INT 2
8940: PPUSH
8941: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8945: LD_INT 52
8947: PPUSH
8948: LD_INT 8
8950: PPUSH
8951: LD_INT 2
8953: PPUSH
8954: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8958: LD_INT 53
8960: PPUSH
8961: LD_INT 8
8963: PPUSH
8964: LD_INT 2
8966: PPUSH
8967: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8971: LD_INT 60
8973: PPUSH
8974: LD_INT 8
8976: PPUSH
8977: LD_INT 2
8979: PPUSH
8980: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8984: LD_INT 61
8986: PPUSH
8987: LD_INT 8
8989: PPUSH
8990: LD_INT 2
8992: PPUSH
8993: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8997: LD_INT 62
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 322
// end ; end ;
9010: LD_VAR 0 1
9014: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
// for i in charactersList do
9019: LD_ADDR_VAR 0 4
9023: PUSH
9024: LD_VAR 0 1
9028: PUSH
9029: FOR_IN
9030: IFFALSE 9048
// SaveCharacters ( i , ident ) ;
9032: LD_VAR 0 4
9036: PPUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: CALL_OW 38
9046: GO 9029
9048: POP
9049: POP
// end ; end_of_file
9050: LD_VAR 0 3
9054: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
9055: LD_EXP 39
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: IFFALSE 10041
9065: GO 9067
9067: DISABLE
9068: LD_INT 0
9070: PPUSH
9071: PPUSH
9072: PPUSH
// begin m1 := false ;
9073: LD_ADDR_VAR 0 1
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// m2 := false ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// m3 := false ;
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
9097: LD_INT 22
9099: PUSH
9100: LD_INT 1
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 21
9109: PUSH
9110: LD_INT 1
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 50
9129: PUSH
9130: EMPTY
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 69
9143: PPUSH
9144: CALL 36061 0 1
9148: PUSH
9149: LD_INT 5
9151: LESS
9152: IFFALSE 9163
// begin YouLost ( Troops ) ;
9154: LD_STRING Troops
9156: PPUSH
9157: CALL_OW 104
// exit ;
9161: GO 10041
// end ; DialogueOn ;
9163: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D9b-JMM-1
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9179: LD_EXP 16
9183: PPUSH
9184: LD_STRING D9b-Pow-1
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D9b-JMM-2
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9203: LD_EXP 16
9207: PPUSH
9208: LD_STRING D9b-Pow-2
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D9b-JMM-3
9222: PPUSH
9223: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9227: LD_EXP 16
9231: PPUSH
9232: LD_STRING D9b-Pow-3
9234: PPUSH
9235: CALL_OW 94
// if tick <= 60 60$00 then
9239: LD_OWVAR 1
9243: PUSH
9244: LD_INT 126000
9246: LESSEQUAL
9247: IFFALSE 9256
// SetAchievement ( ACH_ASPEED_13 ) ;
9249: LD_STRING ACH_ASPEED_13
9251: PPUSH
9252: CALL_OW 543
// if burlakStatus = 1 then
9256: LD_EXP 29
9260: PUSH
9261: LD_INT 1
9263: EQUAL
9264: IFFALSE 9286
// begin m1 := true ;
9266: LD_ADDR_VAR 0 1
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9274: LD_STRING Burlak
9276: PPUSH
9277: LD_INT 1
9279: PPUSH
9280: CALL_OW 101
// end else
9284: GO 9297
// begin AddMedal ( Burlak , - 1 ) ;
9286: LD_STRING Burlak
9288: PPUSH
9289: LD_INT 1
9291: NEG
9292: PPUSH
9293: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9297: LD_EXP 2
9301: PPUSH
9302: CALL_OW 302
9306: IFFALSE 9328
// begin m2 := true ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9316: LD_STRING Stevens
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 101
// end else
9326: GO 9339
// begin AddMedal ( Stevens , - 1 ) ;
9328: LD_STRING Stevens
9330: PPUSH
9331: LD_INT 1
9333: NEG
9334: PPUSH
9335: CALL_OW 101
// end ; if radarOnSpot = 1 then
9339: LD_EXP 31
9343: PUSH
9344: LD_INT 1
9346: EQUAL
9347: IFFALSE 9369
// begin m3 := true ;
9349: LD_ADDR_VAR 0 3
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9357: LD_STRING Observation
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: CALL_OW 101
// end else
9367: GO 9380
// begin AddMedal ( Observation , - 1 ) ;
9369: LD_STRING Observation
9371: PPUSH
9372: LD_INT 1
9374: NEG
9375: PPUSH
9376: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9380: LD_VAR 0 1
9384: IFFALSE 9392
9386: PUSH
9387: LD_VAR 0 2
9391: AND
9392: IFFALSE 9400
9394: PUSH
9395: LD_VAR 0 3
9399: AND
9400: IFFALSE 9412
9402: PUSH
9403: LD_OWVAR 67
9407: PUSH
9408: LD_INT 3
9410: GREATEREQUAL
9411: AND
9412: IFFALSE 9424
// SetAchievementEX ( ACH_AMER , 13 ) ;
9414: LD_STRING ACH_AMER
9416: PPUSH
9417: LD_INT 13
9419: PPUSH
9420: CALL_OW 564
// GiveMedals ( MAIN ) ;
9424: LD_STRING MAIN
9426: PPUSH
9427: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9431: LD_EXP 29
9435: PPUSH
9436: LD_STRING 13_BurlakStatus_1
9438: PPUSH
9439: CALL_OW 39
// if IsLive ( Stevens ) then
9443: LD_EXP 2
9447: PPUSH
9448: CALL_OW 300
9452: IFFALSE 9466
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9454: LD_INT 1
9456: PPUSH
9457: LD_STRING 13_StevensStatus_1
9459: PPUSH
9460: CALL_OW 39
9464: GO 9476
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9466: LD_INT 0
9468: PPUSH
9469: LD_STRING 13_StevensStatus_1
9471: PPUSH
9472: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9476: LD_INT 22
9478: PUSH
9479: LD_INT 1
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 21
9488: PUSH
9489: LD_INT 1
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 2
9498: PUSH
9499: LD_INT 25
9501: PUSH
9502: LD_INT 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 25
9511: PUSH
9512: LD_INT 2
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 25
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 25
9531: PUSH
9532: LD_INT 4
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 25
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_EXP 35
9591: PUSH
9592: LD_STRING JMM
9594: STR
9595: PPUSH
9596: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9600: LD_EXP 8
9604: PPUSH
9605: LD_EXP 35
9609: PUSH
9610: LD_STRING Brown
9612: STR
9613: PPUSH
9614: CALL 9015 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9618: LD_EXP 4
9622: PPUSH
9623: LD_EXP 35
9627: PUSH
9628: LD_STRING Donaldson
9630: STR
9631: PPUSH
9632: CALL 9015 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9636: LD_EXP 5
9640: PPUSH
9641: LD_EXP 35
9645: PUSH
9646: LD_STRING Bobby
9648: STR
9649: PPUSH
9650: CALL 9015 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9654: LD_EXP 6
9658: PPUSH
9659: LD_EXP 35
9663: PUSH
9664: LD_STRING Cyrus
9666: STR
9667: PPUSH
9668: CALL 9015 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9672: LD_EXP 3
9676: PPUSH
9677: LD_EXP 35
9681: PUSH
9682: LD_STRING Lisa
9684: STR
9685: PPUSH
9686: CALL 9015 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9690: LD_EXP 13
9694: PPUSH
9695: LD_EXP 35
9699: PUSH
9700: LD_STRING Frank
9702: STR
9703: PPUSH
9704: CALL 9015 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_EXP 35
9717: PUSH
9718: LD_STRING Kikuchi
9720: STR
9721: PPUSH
9722: CALL 9015 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9726: LD_EXP 10
9730: PPUSH
9731: LD_EXP 35
9735: PUSH
9736: LD_STRING Houten
9738: STR
9739: PPUSH
9740: CALL 9015 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9744: LD_EXP 12
9748: PPUSH
9749: LD_EXP 35
9753: PUSH
9754: LD_STRING Gary
9756: STR
9757: PPUSH
9758: CALL 9015 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9762: LD_EXP 11
9766: PPUSH
9767: LD_EXP 35
9771: PUSH
9772: LD_STRING Cornell
9774: STR
9775: PPUSH
9776: CALL 9015 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9780: LD_EXP 7
9784: PPUSH
9785: LD_EXP 35
9789: PUSH
9790: LD_STRING Denis
9792: STR
9793: PPUSH
9794: CALL 9015 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9798: LD_EXP 9
9802: PPUSH
9803: LD_EXP 35
9807: PUSH
9808: LD_STRING Gladstone
9810: STR
9811: PPUSH
9812: CALL 9015 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9816: LD_EXP 2
9820: PPUSH
9821: LD_EXP 35
9825: PUSH
9826: LD_STRING Stevens
9828: STR
9829: PPUSH
9830: CALL 9015 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9834: LD_INT 50
9836: PUSH
9837: EMPTY
9838: LIST
9839: PUSH
9840: LD_INT 22
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: LD_INT 25
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 25
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 4
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 25
9905: PUSH
9906: LD_INT 5
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 8
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: PUSH
9943: LD_EXP 1
9947: PUSH
9948: LD_EXP 8
9952: PUSH
9953: LD_EXP 4
9957: PUSH
9958: LD_EXP 5
9962: PUSH
9963: LD_EXP 6
9967: PUSH
9968: LD_EXP 3
9972: PUSH
9973: LD_EXP 13
9977: PUSH
9978: LD_EXP 9
9982: PUSH
9983: LD_EXP 14
9987: PUSH
9988: LD_EXP 7
9992: PUSH
9993: LD_EXP 10
9997: PUSH
9998: LD_EXP 12
10002: PUSH
10003: LD_EXP 11
10007: PUSH
10008: LD_EXP 2
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: DIFF
10029: PPUSH
10030: LD_STRING 13_other_survivors
10032: PPUSH
10033: CALL_OW 38
// YouWin ;
10037: CALL_OW 103
// end ; end_of_file
10041: PPOPN 3
10043: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
10044: LD_EXP 33
10048: PUSH
10049: LD_INT 2
10051: EQUAL
10052: IFFALSE 10071
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PPUSH
10065: CALL_OW 69
10069: NOT
10070: AND
10071: IFFALSE 10089
10073: PUSH
10074: LD_INT 25
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 321
10084: PUSH
10085: LD_INT 1
10087: EQUAL
10088: AND
10089: IFFALSE 10234
10091: GO 10093
10093: DISABLE
10094: LD_INT 0
10096: PPUSH
10097: PPUSH
10098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10099: LD_ADDR_VAR 0 2
10103: PUSH
10104: LD_INT 22
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 3
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 30
10129: PUSH
10130: LD_INT 0
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 30
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: PPUSH
10157: CALL_OW 69
10161: ST_TO_ADDR
// for i in tmp do
10162: LD_ADDR_VAR 0 1
10166: PUSH
10167: LD_VAR 0 2
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10206
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10175: LD_ADDR_VAR 0 3
10179: PUSH
10180: LD_VAR 0 3
10184: PUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 275
10202: PLUS
10203: ST_TO_ADDR
10204: GO 10172
10206: POP
10207: POP
// if yourSiberite < CostOfWeapon ( us_siberium_rocket ) [ 3 ] then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 8
10215: PPUSH
10216: CALL_OW 451
10220: PUSH
10221: LD_INT 3
10223: ARRAY
10224: LESS
10225: IFFALSE 10234
// YouLost ( siberite ) ;
10227: LD_STRING siberite
10229: PPUSH
10230: CALL_OW 104
// end ; end_of_file
10234: PPOPN 3
10236: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10237: LD_INT 22
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: PUSH
10266: LD_INT 6
10268: LESS
10269: IFFALSE 10279
10271: GO 10273
10273: DISABLE
// begin enable ;
10274: ENABLE
// PrepareArabianAttack ;
10275: CALL 4128 0 0
// end ;
10279: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10280: LD_EXP 36
10284: PUSH
10285: LD_INT 1
10287: EQUAL
10288: IFFALSE 10324
10290: PUSH
10291: LD_INT 22
10293: PUSH
10294: LD_INT 8
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: PUSH
10320: LD_INT 6
10322: LESS
10323: AND
10324: IFFALSE 10351
10326: GO 10328
10328: DISABLE
// begin wait ( 4 4$00 ) ;
10329: LD_INT 8400
10331: PPUSH
10332: CALL_OW 67
// PrepareRussianAttack ;
10336: CALL 3351 0 0
// wait ( 12 12$00 ) ;
10340: LD_INT 25200
10342: PPUSH
10343: CALL_OW 67
// PrepareRussianAttack ;
10347: CALL 3351 0 0
// end ;
10351: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
10358: PPUSH
10359: PPUSH
10360: PPUSH
10361: PPUSH
10362: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10363: LD_ADDR_VAR 0 8
10367: PUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 120
10380: PUSH
10381: LD_INT 10
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 69
10396: ST_TO_ADDR
// if not units then
10397: LD_VAR 0 8
10401: NOT
10402: IFFALSE 10406
// exit ;
10404: GO 10712
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10406: LD_ADDR_VAR 0 4
10410: PUSH
10411: LD_INT 80
10413: PUSH
10414: LD_INT 60
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 54
10423: PUSH
10424: LD_INT 57
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 55
10433: PUSH
10434: LD_INT 74
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 61
10443: PUSH
10444: LD_INT 85
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10457: LD_ADDR_VAR 0 5
10461: PUSH
10462: LD_INT 93
10464: PUSH
10465: LD_INT 99
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 85
10474: PUSH
10475: LD_INT 99
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10486: LD_INT 35
10488: PPUSH
10489: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10493: LD_ADDR_VAR 0 6
10497: PUSH
10498: LD_VAR 0 8
10502: PPUSH
10503: LD_INT 21
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 72
10517: ST_TO_ADDR
// if vehicles then
10518: LD_VAR 0 6
10522: IFFALSE 10538
// AgressiveMove ( vehicles , path ) ;
10524: LD_VAR 0 6
10528: PPUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: CALL 74803 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10538: LD_ADDR_VAR 0 7
10542: PUSH
10543: LD_VAR 0 8
10547: PPUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 21
10560: PUSH
10561: LD_INT 1
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if infantry then
10577: LD_VAR 0 7
10581: IFFALSE 10597
// AgressiveMove ( infantry , path2 ) ;
10583: LD_VAR 0 7
10587: PPUSH
10588: LD_VAR 0 5
10592: PPUSH
10593: CALL 74803 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10597: LD_ADDR_VAR 0 9
10601: PUSH
10602: LD_VAR 0 8
10606: PPUSH
10607: LD_INT 23
10609: PUSH
10610: LD_INT 0
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 72
10635: ST_TO_ADDR
// if apes then
10636: LD_VAR 0 9
10640: IFFALSE 10684
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10642: LD_VAR 0 9
10646: PUSH
10647: LD_INT 1
10649: ARRAY
10650: PPUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 69
10665: PPUSH
10666: LD_VAR 0 9
10670: PUSH
10671: LD_INT 1
10673: ARRAY
10674: PPUSH
10675: CALL_OW 74
10679: PPUSH
10680: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10684: LD_ADDR_VAR 0 8
10688: PUSH
10689: LD_VAR 0 8
10693: PPUSH
10694: LD_INT 50
10696: PUSH
10697: EMPTY
10698: LIST
10699: PPUSH
10700: CALL_OW 72
10704: ST_TO_ADDR
// until not units ;
10705: LD_VAR 0 8
10709: NOT
10710: IFFALSE 10486
// end ;
10712: LD_VAR 0 1
10716: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10725: LD_ADDR_VAR 0 6
10729: PUSH
10730: LD_INT 22
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 120
10742: PUSH
10743: LD_INT 10
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not units then
10759: LD_VAR 0 6
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10899
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10768: LD_ADDR_VAR 0 4
10772: PUSH
10773: LD_INT 80
10775: PUSH
10776: LD_INT 60
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 54
10785: PUSH
10786: LD_INT 57
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 55
10795: PUSH
10796: LD_INT 74
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 61
10805: PUSH
10806: LD_INT 85
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10819: LD_INT 35
10821: PPUSH
10822: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_VAR 0 6
10835: PPUSH
10836: LD_INT 21
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 72
10850: ST_TO_ADDR
// if vehicles then
10851: LD_VAR 0 5
10855: IFFALSE 10871
// AgressiveMove ( vehicles , path ) ;
10857: LD_VAR 0 5
10861: PPUSH
10862: LD_VAR 0 4
10866: PPUSH
10867: CALL 74803 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: LD_INT 50
10883: PUSH
10884: EMPTY
10885: LIST
10886: PPUSH
10887: CALL_OW 72
10891: ST_TO_ADDR
// until not units ;
10892: LD_VAR 0 6
10896: NOT
10897: IFFALSE 10819
// end ; end_of_file
10899: LD_VAR 0 1
10903: RET
// every 0 0$01 do var i , cratesSpawned ;
10904: GO 10906
10906: DISABLE
10907: LD_INT 0
10909: PPUSH
10910: PPUSH
// begin cratesSpawned := 0 ;
10911: LD_ADDR_VAR 0 2
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// for i := 1 to 6 do
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: DOUBLE
10925: LD_INT 1
10927: DEC
10928: ST_TO_ADDR
10929: LD_INT 6
10931: PUSH
10932: FOR_TO
10933: IFFALSE 10958
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10935: LD_INT 2
10937: PPUSH
10938: LD_INT 5
10940: PPUSH
10941: CALL_OW 12
10945: PPUSH
10946: LD_INT 17
10948: PPUSH
10949: LD_INT 0
10951: PPUSH
10952: CALL_OW 55
10956: GO 10932
10958: POP
10959: POP
// wait ( 0 0$20 ) ;
10960: LD_INT 700
10962: PPUSH
10963: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10967: LD_INT 280
10969: PPUSH
10970: CALL_OW 67
// if cratesSpawned < 12 then
10974: LD_VAR 0 2
10978: PUSH
10979: LD_INT 12
10981: LESS
10982: IFFALSE 11034
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10984: LD_INT 105
10986: PPUSH
10987: LD_INT 350
10989: PPUSH
10990: CALL_OW 12
10994: PPUSH
10995: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 5
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: LD_INT 13
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_VAR 0 2
11029: PUSH
11030: LD_INT 1
11032: PLUS
11033: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
11034: LD_VAR 0 2
11038: PUSH
11039: LD_INT 12
11041: GREATEREQUAL
11042: IFFALSE 11054
11044: PUSH
11045: LD_VAR 0 2
11049: PUSH
11050: LD_INT 32
11052: LESS
11053: AND
11054: IFFALSE 11106
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
11056: LD_INT 420
11058: PPUSH
11059: LD_INT 700
11061: PPUSH
11062: CALL_OW 12
11066: PPUSH
11067: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11071: LD_INT 3
11073: PPUSH
11074: LD_INT 5
11076: PPUSH
11077: CALL_OW 12
11081: PPUSH
11082: LD_INT 13
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: LD_VAR 0 2
11101: PUSH
11102: LD_INT 1
11104: PLUS
11105: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 32
11113: GREATEREQUAL
11114: IFFALSE 11188
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11116: LD_INT 13
11118: PPUSH
11119: CALL_OW 435
11123: PUSH
11124: LD_INT 14
11126: LESS
11127: IFFALSE 11138
// wait ( 0 0$20 ) else
11129: LD_INT 700
11131: PPUSH
11132: CALL_OW 67
11136: GO 11153
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
11138: LD_INT 1750
11140: PPUSH
11141: LD_INT 3150
11143: PPUSH
11144: CALL_OW 12
11148: PPUSH
11149: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
11153: LD_INT 2
11155: PPUSH
11156: LD_INT 5
11158: PPUSH
11159: CALL_OW 12
11163: PPUSH
11164: LD_INT 13
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11174: LD_ADDR_VAR 0 2
11178: PUSH
11179: LD_VAR 0 2
11183: PUSH
11184: LD_INT 1
11186: PLUS
11187: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11188: LD_VAR 0 2
11192: PUSH
11193: LD_INT 120
11195: GREATEREQUAL
11196: IFFALSE 11270
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11198: LD_INT 13
11200: PPUSH
11201: CALL_OW 435
11205: PUSH
11206: LD_INT 14
11208: LESS
11209: IFFALSE 11220
// wait ( 0 0$40 ) else
11211: LD_INT 1400
11213: PPUSH
11214: CALL_OW 67
11218: GO 11235
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11220: LD_INT 2450
11222: PPUSH
11223: LD_INT 3850
11225: PPUSH
11226: CALL_OW 12
11230: PPUSH
11231: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11235: LD_INT 1
11237: PPUSH
11238: LD_INT 5
11240: PPUSH
11241: CALL_OW 12
11245: PPUSH
11246: LD_INT 13
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 1
11268: PLUS
11269: ST_TO_ADDR
// end ; until false ;
11270: LD_INT 0
11272: IFFALSE 10967
// end ; end_of_file end_of_file
11274: PPOPN 2
11276: END
// export globalGameSaveCounter ; every 0 0$1 do
11277: GO 11279
11279: DISABLE
// begin enable ;
11280: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11281: LD_STRING updateTimer(
11283: PUSH
11284: LD_OWVAR 1
11288: STR
11289: PUSH
11290: LD_STRING );
11292: STR
11293: PPUSH
11294: CALL_OW 559
// end ;
11298: END
// every 0 0$1 do
11299: GO 11301
11301: DISABLE
// begin globalGameSaveCounter := 0 ;
11302: LD_ADDR_EXP 47
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11310: LD_STRING setGameSaveCounter(0)
11312: PPUSH
11313: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11317: LD_STRING initStreamRollete();
11319: PPUSH
11320: CALL_OW 559
// InitStreamMode ;
11324: CALL 12676 0 0
// DefineStreamItems ( false ) ;
11328: LD_INT 0
11330: PPUSH
11331: CALL 13140 0 1
// end ;
11335: END
// export function SOS_MapStart ( ) ; begin
11336: LD_INT 0
11338: PPUSH
// if streamModeActive then
11339: LD_EXP 48
11343: IFFALSE 11352
// DefineStreamItems ( true ) ;
11345: LD_INT 1
11347: PPUSH
11348: CALL 13140 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
11352: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
11354: PPUSH
11355: CALL_OW 559
// UpdateLuaVariables ( ) ;
11359: CALL 11376 0 0
// UpdateFactoryWaypoints ( ) ;
11363: CALL 26262 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11367: CALL 26514 0 0
// end ;
11371: LD_VAR 0 1
11375: RET
// function UpdateLuaVariables ( ) ; begin
11376: LD_INT 0
11378: PPUSH
// if globalGameSaveCounter then
11379: LD_EXP 47
11383: IFFALSE 11417
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11385: LD_ADDR_EXP 47
11389: PUSH
11390: LD_EXP 47
11394: PPUSH
11395: CALL 73410 0 1
11399: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11400: LD_STRING setGameSaveCounter(
11402: PUSH
11403: LD_EXP 47
11407: STR
11408: PUSH
11409: LD_STRING )
11411: STR
11412: PPUSH
11413: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11417: LD_STRING setGameDifficulty(
11419: PUSH
11420: LD_OWVAR 67
11424: STR
11425: PUSH
11426: LD_STRING )
11428: STR
11429: PPUSH
11430: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11434: LD_STRING displayDifficulty(
11436: PUSH
11437: LD_OWVAR 67
11441: STR
11442: PUSH
11443: LD_STRING )
11445: STR
11446: PPUSH
11447: CALL_OW 559
// end ;
11451: LD_VAR 0 1
11455: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11456: LD_INT 0
11458: PPUSH
// if p2 = stream_mode then
11459: LD_VAR 0 2
11463: PUSH
11464: LD_INT 100
11466: EQUAL
11467: IFFALSE 12470
// begin if not StreamModeActive then
11469: LD_EXP 48
11473: NOT
11474: IFFALSE 11484
// StreamModeActive := true ;
11476: LD_ADDR_EXP 48
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// if p3 = 0 then
11484: LD_VAR 0 3
11488: PUSH
11489: LD_INT 0
11491: EQUAL
11492: IFFALSE 11498
// InitStreamMode ;
11494: CALL 12676 0 0
// if p3 = 1 then
11498: LD_VAR 0 3
11502: PUSH
11503: LD_INT 1
11505: EQUAL
11506: IFFALSE 11516
// sRocket := true ;
11508: LD_ADDR_EXP 53
11512: PUSH
11513: LD_INT 1
11515: ST_TO_ADDR
// if p3 = 2 then
11516: LD_VAR 0 3
11520: PUSH
11521: LD_INT 2
11523: EQUAL
11524: IFFALSE 11534
// sSpeed := true ;
11526: LD_ADDR_EXP 52
11530: PUSH
11531: LD_INT 1
11533: ST_TO_ADDR
// if p3 = 3 then
11534: LD_VAR 0 3
11538: PUSH
11539: LD_INT 3
11541: EQUAL
11542: IFFALSE 11552
// sEngine := true ;
11544: LD_ADDR_EXP 54
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// if p3 = 4 then
11552: LD_VAR 0 3
11556: PUSH
11557: LD_INT 4
11559: EQUAL
11560: IFFALSE 11570
// sSpec := true ;
11562: LD_ADDR_EXP 51
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
// if p3 = 5 then
11570: LD_VAR 0 3
11574: PUSH
11575: LD_INT 5
11577: EQUAL
11578: IFFALSE 11588
// sLevel := true ;
11580: LD_ADDR_EXP 55
11584: PUSH
11585: LD_INT 1
11587: ST_TO_ADDR
// if p3 = 6 then
11588: LD_VAR 0 3
11592: PUSH
11593: LD_INT 6
11595: EQUAL
11596: IFFALSE 11606
// sArmoury := true ;
11598: LD_ADDR_EXP 56
11602: PUSH
11603: LD_INT 1
11605: ST_TO_ADDR
// if p3 = 7 then
11606: LD_VAR 0 3
11610: PUSH
11611: LD_INT 7
11613: EQUAL
11614: IFFALSE 11624
// sRadar := true ;
11616: LD_ADDR_EXP 57
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// if p3 = 8 then
11624: LD_VAR 0 3
11628: PUSH
11629: LD_INT 8
11631: EQUAL
11632: IFFALSE 11642
// sBunker := true ;
11634: LD_ADDR_EXP 58
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// if p3 = 9 then
11642: LD_VAR 0 3
11646: PUSH
11647: LD_INT 9
11649: EQUAL
11650: IFFALSE 11660
// sHack := true ;
11652: LD_ADDR_EXP 59
11656: PUSH
11657: LD_INT 1
11659: ST_TO_ADDR
// if p3 = 10 then
11660: LD_VAR 0 3
11664: PUSH
11665: LD_INT 10
11667: EQUAL
11668: IFFALSE 11678
// sFire := true ;
11670: LD_ADDR_EXP 60
11674: PUSH
11675: LD_INT 1
11677: ST_TO_ADDR
// if p3 = 11 then
11678: LD_VAR 0 3
11682: PUSH
11683: LD_INT 11
11685: EQUAL
11686: IFFALSE 11696
// sRefresh := true ;
11688: LD_ADDR_EXP 61
11692: PUSH
11693: LD_INT 1
11695: ST_TO_ADDR
// if p3 = 12 then
11696: LD_VAR 0 3
11700: PUSH
11701: LD_INT 12
11703: EQUAL
11704: IFFALSE 11714
// sExp := true ;
11706: LD_ADDR_EXP 62
11710: PUSH
11711: LD_INT 1
11713: ST_TO_ADDR
// if p3 = 13 then
11714: LD_VAR 0 3
11718: PUSH
11719: LD_INT 13
11721: EQUAL
11722: IFFALSE 11732
// sDepot := true ;
11724: LD_ADDR_EXP 63
11728: PUSH
11729: LD_INT 1
11731: ST_TO_ADDR
// if p3 = 14 then
11732: LD_VAR 0 3
11736: PUSH
11737: LD_INT 14
11739: EQUAL
11740: IFFALSE 11750
// sFlag := true ;
11742: LD_ADDR_EXP 64
11746: PUSH
11747: LD_INT 1
11749: ST_TO_ADDR
// if p3 = 15 then
11750: LD_VAR 0 3
11754: PUSH
11755: LD_INT 15
11757: EQUAL
11758: IFFALSE 11768
// sKamikadze := true ;
11760: LD_ADDR_EXP 72
11764: PUSH
11765: LD_INT 1
11767: ST_TO_ADDR
// if p3 = 16 then
11768: LD_VAR 0 3
11772: PUSH
11773: LD_INT 16
11775: EQUAL
11776: IFFALSE 11786
// sTroll := true ;
11778: LD_ADDR_EXP 73
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// if p3 = 17 then
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 17
11793: EQUAL
11794: IFFALSE 11804
// sSlow := true ;
11796: LD_ADDR_EXP 74
11800: PUSH
11801: LD_INT 1
11803: ST_TO_ADDR
// if p3 = 18 then
11804: LD_VAR 0 3
11808: PUSH
11809: LD_INT 18
11811: EQUAL
11812: IFFALSE 11822
// sLack := true ;
11814: LD_ADDR_EXP 75
11818: PUSH
11819: LD_INT 1
11821: ST_TO_ADDR
// if p3 = 19 then
11822: LD_VAR 0 3
11826: PUSH
11827: LD_INT 19
11829: EQUAL
11830: IFFALSE 11840
// sTank := true ;
11832: LD_ADDR_EXP 77
11836: PUSH
11837: LD_INT 1
11839: ST_TO_ADDR
// if p3 = 20 then
11840: LD_VAR 0 3
11844: PUSH
11845: LD_INT 20
11847: EQUAL
11848: IFFALSE 11858
// sRemote := true ;
11850: LD_ADDR_EXP 78
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// if p3 = 21 then
11858: LD_VAR 0 3
11862: PUSH
11863: LD_INT 21
11865: EQUAL
11866: IFFALSE 11876
// sPowell := true ;
11868: LD_ADDR_EXP 79
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// if p3 = 22 then
11876: LD_VAR 0 3
11880: PUSH
11881: LD_INT 22
11883: EQUAL
11884: IFFALSE 11894
// sTeleport := true ;
11886: LD_ADDR_EXP 82
11890: PUSH
11891: LD_INT 1
11893: ST_TO_ADDR
// if p3 = 23 then
11894: LD_VAR 0 3
11898: PUSH
11899: LD_INT 23
11901: EQUAL
11902: IFFALSE 11912
// sOilTower := true ;
11904: LD_ADDR_EXP 84
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// if p3 = 24 then
11912: LD_VAR 0 3
11916: PUSH
11917: LD_INT 24
11919: EQUAL
11920: IFFALSE 11930
// sShovel := true ;
11922: LD_ADDR_EXP 85
11926: PUSH
11927: LD_INT 1
11929: ST_TO_ADDR
// if p3 = 25 then
11930: LD_VAR 0 3
11934: PUSH
11935: LD_INT 25
11937: EQUAL
11938: IFFALSE 11948
// sSheik := true ;
11940: LD_ADDR_EXP 86
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// if p3 = 26 then
11948: LD_VAR 0 3
11952: PUSH
11953: LD_INT 26
11955: EQUAL
11956: IFFALSE 11966
// sEarthquake := true ;
11958: LD_ADDR_EXP 88
11962: PUSH
11963: LD_INT 1
11965: ST_TO_ADDR
// if p3 = 27 then
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 27
11973: EQUAL
11974: IFFALSE 11984
// sAI := true ;
11976: LD_ADDR_EXP 89
11980: PUSH
11981: LD_INT 1
11983: ST_TO_ADDR
// if p3 = 28 then
11984: LD_VAR 0 3
11988: PUSH
11989: LD_INT 28
11991: EQUAL
11992: IFFALSE 12002
// sCargo := true ;
11994: LD_ADDR_EXP 92
11998: PUSH
11999: LD_INT 1
12001: ST_TO_ADDR
// if p3 = 29 then
12002: LD_VAR 0 3
12006: PUSH
12007: LD_INT 29
12009: EQUAL
12010: IFFALSE 12020
// sDLaser := true ;
12012: LD_ADDR_EXP 93
12016: PUSH
12017: LD_INT 1
12019: ST_TO_ADDR
// if p3 = 30 then
12020: LD_VAR 0 3
12024: PUSH
12025: LD_INT 30
12027: EQUAL
12028: IFFALSE 12038
// sExchange := true ;
12030: LD_ADDR_EXP 94
12034: PUSH
12035: LD_INT 1
12037: ST_TO_ADDR
// if p3 = 31 then
12038: LD_VAR 0 3
12042: PUSH
12043: LD_INT 31
12045: EQUAL
12046: IFFALSE 12056
// sFac := true ;
12048: LD_ADDR_EXP 95
12052: PUSH
12053: LD_INT 1
12055: ST_TO_ADDR
// if p3 = 32 then
12056: LD_VAR 0 3
12060: PUSH
12061: LD_INT 32
12063: EQUAL
12064: IFFALSE 12074
// sPower := true ;
12066: LD_ADDR_EXP 96
12070: PUSH
12071: LD_INT 1
12073: ST_TO_ADDR
// if p3 = 33 then
12074: LD_VAR 0 3
12078: PUSH
12079: LD_INT 33
12081: EQUAL
12082: IFFALSE 12092
// sRandom := true ;
12084: LD_ADDR_EXP 97
12088: PUSH
12089: LD_INT 1
12091: ST_TO_ADDR
// if p3 = 34 then
12092: LD_VAR 0 3
12096: PUSH
12097: LD_INT 34
12099: EQUAL
12100: IFFALSE 12110
// sShield := true ;
12102: LD_ADDR_EXP 98
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// if p3 = 35 then
12110: LD_VAR 0 3
12114: PUSH
12115: LD_INT 35
12117: EQUAL
12118: IFFALSE 12128
// sTime := true ;
12120: LD_ADDR_EXP 99
12124: PUSH
12125: LD_INT 1
12127: ST_TO_ADDR
// if p3 = 36 then
12128: LD_VAR 0 3
12132: PUSH
12133: LD_INT 36
12135: EQUAL
12136: IFFALSE 12146
// sTools := true ;
12138: LD_ADDR_EXP 100
12142: PUSH
12143: LD_INT 1
12145: ST_TO_ADDR
// if p3 = 101 then
12146: LD_VAR 0 3
12150: PUSH
12151: LD_INT 101
12153: EQUAL
12154: IFFALSE 12164
// sSold := true ;
12156: LD_ADDR_EXP 65
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// if p3 = 102 then
12164: LD_VAR 0 3
12168: PUSH
12169: LD_INT 102
12171: EQUAL
12172: IFFALSE 12182
// sDiff := true ;
12174: LD_ADDR_EXP 66
12178: PUSH
12179: LD_INT 1
12181: ST_TO_ADDR
// if p3 = 103 then
12182: LD_VAR 0 3
12186: PUSH
12187: LD_INT 103
12189: EQUAL
12190: IFFALSE 12200
// sFog := true ;
12192: LD_ADDR_EXP 69
12196: PUSH
12197: LD_INT 1
12199: ST_TO_ADDR
// if p3 = 104 then
12200: LD_VAR 0 3
12204: PUSH
12205: LD_INT 104
12207: EQUAL
12208: IFFALSE 12218
// sReset := true ;
12210: LD_ADDR_EXP 70
12214: PUSH
12215: LD_INT 1
12217: ST_TO_ADDR
// if p3 = 105 then
12218: LD_VAR 0 3
12222: PUSH
12223: LD_INT 105
12225: EQUAL
12226: IFFALSE 12236
// sSun := true ;
12228: LD_ADDR_EXP 71
12232: PUSH
12233: LD_INT 1
12235: ST_TO_ADDR
// if p3 = 106 then
12236: LD_VAR 0 3
12240: PUSH
12241: LD_INT 106
12243: EQUAL
12244: IFFALSE 12254
// sTiger := true ;
12246: LD_ADDR_EXP 67
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// if p3 = 107 then
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 107
12261: EQUAL
12262: IFFALSE 12272
// sBomb := true ;
12264: LD_ADDR_EXP 68
12268: PUSH
12269: LD_INT 1
12271: ST_TO_ADDR
// if p3 = 108 then
12272: LD_VAR 0 3
12276: PUSH
12277: LD_INT 108
12279: EQUAL
12280: IFFALSE 12290
// sWound := true ;
12282: LD_ADDR_EXP 76
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// if p3 = 109 then
12290: LD_VAR 0 3
12294: PUSH
12295: LD_INT 109
12297: EQUAL
12298: IFFALSE 12308
// sBetray := true ;
12300: LD_ADDR_EXP 80
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// if p3 = 110 then
12308: LD_VAR 0 3
12312: PUSH
12313: LD_INT 110
12315: EQUAL
12316: IFFALSE 12326
// sContamin := true ;
12318: LD_ADDR_EXP 81
12322: PUSH
12323: LD_INT 1
12325: ST_TO_ADDR
// if p3 = 111 then
12326: LD_VAR 0 3
12330: PUSH
12331: LD_INT 111
12333: EQUAL
12334: IFFALSE 12344
// sOil := true ;
12336: LD_ADDR_EXP 83
12340: PUSH
12341: LD_INT 1
12343: ST_TO_ADDR
// if p3 = 112 then
12344: LD_VAR 0 3
12348: PUSH
12349: LD_INT 112
12351: EQUAL
12352: IFFALSE 12362
// sStu := true ;
12354: LD_ADDR_EXP 87
12358: PUSH
12359: LD_INT 1
12361: ST_TO_ADDR
// if p3 = 113 then
12362: LD_VAR 0 3
12366: PUSH
12367: LD_INT 113
12369: EQUAL
12370: IFFALSE 12380
// sBazooka := true ;
12372: LD_ADDR_EXP 90
12376: PUSH
12377: LD_INT 1
12379: ST_TO_ADDR
// if p3 = 114 then
12380: LD_VAR 0 3
12384: PUSH
12385: LD_INT 114
12387: EQUAL
12388: IFFALSE 12398
// sMortar := true ;
12390: LD_ADDR_EXP 91
12394: PUSH
12395: LD_INT 1
12397: ST_TO_ADDR
// if p3 = 115 then
12398: LD_VAR 0 3
12402: PUSH
12403: LD_INT 115
12405: EQUAL
12406: IFFALSE 12416
// sRanger := true ;
12408: LD_ADDR_EXP 101
12412: PUSH
12413: LD_INT 1
12415: ST_TO_ADDR
// if p3 = 116 then
12416: LD_VAR 0 3
12420: PUSH
12421: LD_INT 116
12423: EQUAL
12424: IFFALSE 12434
// sComputer := true ;
12426: LD_ADDR_EXP 102
12430: PUSH
12431: LD_INT 1
12433: ST_TO_ADDR
// if p3 = 117 then
12434: LD_VAR 0 3
12438: PUSH
12439: LD_INT 117
12441: EQUAL
12442: IFFALSE 12452
// s30 := true ;
12444: LD_ADDR_EXP 103
12448: PUSH
12449: LD_INT 1
12451: ST_TO_ADDR
// if p3 = 118 then
12452: LD_VAR 0 3
12456: PUSH
12457: LD_INT 118
12459: EQUAL
12460: IFFALSE 12470
// s60 := true ;
12462: LD_ADDR_EXP 104
12466: PUSH
12467: LD_INT 1
12469: ST_TO_ADDR
// end ; if p2 = hack_mode then
12470: LD_VAR 0 2
12474: PUSH
12475: LD_INT 101
12477: EQUAL
12478: IFFALSE 12606
// begin case p3 of 1 :
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 1
12487: DOUBLE
12488: EQUAL
12489: IFTRUE 12493
12491: GO 12500
12493: POP
// hHackUnlimitedResources ; 2 :
12494: CALL 24869 0 0
12498: GO 12606
12500: LD_INT 2
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12515
12508: POP
// hHackSetLevel10 ; 3 :
12509: CALL 25002 0 0
12513: GO 12606
12515: LD_INT 3
12517: DOUBLE
12518: EQUAL
12519: IFTRUE 12523
12521: GO 12530
12523: POP
// hHackSetLevel10YourUnits ; 4 :
12524: CALL 25087 0 0
12528: GO 12606
12530: LD_INT 4
12532: DOUBLE
12533: EQUAL
12534: IFTRUE 12538
12536: GO 12545
12538: POP
// hHackInvincible ; 5 :
12539: CALL 25535 0 0
12543: GO 12606
12545: LD_INT 5
12547: DOUBLE
12548: EQUAL
12549: IFTRUE 12553
12551: GO 12560
12553: POP
// hHackInvisible ; 6 :
12554: CALL 25646 0 0
12558: GO 12606
12560: LD_INT 6
12562: DOUBLE
12563: EQUAL
12564: IFTRUE 12568
12566: GO 12575
12568: POP
// hHackChangeYourSide ; 7 :
12569: CALL 25703 0 0
12573: GO 12606
12575: LD_INT 7
12577: DOUBLE
12578: EQUAL
12579: IFTRUE 12583
12581: GO 12590
12583: POP
// hHackChangeUnitSide ; 8 :
12584: CALL 25745 0 0
12588: GO 12606
12590: LD_INT 8
12592: DOUBLE
12593: EQUAL
12594: IFTRUE 12598
12596: GO 12605
12598: POP
// hHackFog ; end ;
12599: CALL 25846 0 0
12603: GO 12606
12605: POP
// end ; if p2 = game_save_mode then
12606: LD_VAR 0 2
12610: PUSH
12611: LD_INT 102
12613: EQUAL
12614: IFFALSE 12671
// begin if p3 = 1 then
12616: LD_VAR 0 3
12620: PUSH
12621: LD_INT 1
12623: EQUAL
12624: IFFALSE 12636
// globalGameSaveCounter := p4 ;
12626: LD_ADDR_EXP 47
12630: PUSH
12631: LD_VAR 0 4
12635: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12636: LD_VAR 0 3
12640: PUSH
12641: LD_INT 2
12643: EQUAL
12644: IFFALSE 12652
12646: PUSH
12647: LD_EXP 47
12651: AND
12652: IFFALSE 12671
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12654: LD_STRING setGameSaveCounter(
12656: PUSH
12657: LD_EXP 47
12661: STR
12662: PUSH
12663: LD_STRING )
12665: STR
12666: PPUSH
12667: CALL_OW 559
// end ; end ;
12671: LD_VAR 0 7
12675: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12676: LD_INT 0
12678: PPUSH
// streamModeActive := false ;
12679: LD_ADDR_EXP 48
12683: PUSH
12684: LD_INT 0
12686: ST_TO_ADDR
// normalCounter := 36 ;
12687: LD_ADDR_EXP 49
12691: PUSH
12692: LD_INT 36
12694: ST_TO_ADDR
// hardcoreCounter := 18 ;
12695: LD_ADDR_EXP 50
12699: PUSH
12700: LD_INT 18
12702: ST_TO_ADDR
// sRocket := false ;
12703: LD_ADDR_EXP 53
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// sSpeed := false ;
12711: LD_ADDR_EXP 52
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// sEngine := false ;
12719: LD_ADDR_EXP 54
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// sSpec := false ;
12727: LD_ADDR_EXP 51
12731: PUSH
12732: LD_INT 0
12734: ST_TO_ADDR
// sLevel := false ;
12735: LD_ADDR_EXP 55
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// sArmoury := false ;
12743: LD_ADDR_EXP 56
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// sRadar := false ;
12751: LD_ADDR_EXP 57
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// sBunker := false ;
12759: LD_ADDR_EXP 58
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// sHack := false ;
12767: LD_ADDR_EXP 59
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// sFire := false ;
12775: LD_ADDR_EXP 60
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sRefresh := false ;
12783: LD_ADDR_EXP 61
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sExp := false ;
12791: LD_ADDR_EXP 62
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sDepot := false ;
12799: LD_ADDR_EXP 63
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sFlag := false ;
12807: LD_ADDR_EXP 64
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sKamikadze := false ;
12815: LD_ADDR_EXP 72
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sTroll := false ;
12823: LD_ADDR_EXP 73
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sSlow := false ;
12831: LD_ADDR_EXP 74
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sLack := false ;
12839: LD_ADDR_EXP 75
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// sTank := false ;
12847: LD_ADDR_EXP 77
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sRemote := false ;
12855: LD_ADDR_EXP 78
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sPowell := false ;
12863: LD_ADDR_EXP 79
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// sTeleport := false ;
12871: LD_ADDR_EXP 82
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// sOilTower := false ;
12879: LD_ADDR_EXP 84
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// sShovel := false ;
12887: LD_ADDR_EXP 85
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// sSheik := false ;
12895: LD_ADDR_EXP 86
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// sEarthquake := false ;
12903: LD_ADDR_EXP 88
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// sAI := false ;
12911: LD_ADDR_EXP 89
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// sCargo := false ;
12919: LD_ADDR_EXP 92
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// sDLaser := false ;
12927: LD_ADDR_EXP 93
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// sExchange := false ;
12935: LD_ADDR_EXP 94
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// sFac := false ;
12943: LD_ADDR_EXP 95
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// sPower := false ;
12951: LD_ADDR_EXP 96
12955: PUSH
12956: LD_INT 0
12958: ST_TO_ADDR
// sRandom := false ;
12959: LD_ADDR_EXP 97
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// sShield := false ;
12967: LD_ADDR_EXP 98
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// sTime := false ;
12975: LD_ADDR_EXP 99
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// sTools := false ;
12983: LD_ADDR_EXP 100
12987: PUSH
12988: LD_INT 0
12990: ST_TO_ADDR
// sSold := false ;
12991: LD_ADDR_EXP 65
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sDiff := false ;
12999: LD_ADDR_EXP 66
13003: PUSH
13004: LD_INT 0
13006: ST_TO_ADDR
// sFog := false ;
13007: LD_ADDR_EXP 69
13011: PUSH
13012: LD_INT 0
13014: ST_TO_ADDR
// sReset := false ;
13015: LD_ADDR_EXP 70
13019: PUSH
13020: LD_INT 0
13022: ST_TO_ADDR
// sSun := false ;
13023: LD_ADDR_EXP 71
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// sTiger := false ;
13031: LD_ADDR_EXP 67
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// sBomb := false ;
13039: LD_ADDR_EXP 68
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// sWound := false ;
13047: LD_ADDR_EXP 76
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// sBetray := false ;
13055: LD_ADDR_EXP 80
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// sContamin := false ;
13063: LD_ADDR_EXP 81
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// sOil := false ;
13071: LD_ADDR_EXP 83
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// sStu := false ;
13079: LD_ADDR_EXP 87
13083: PUSH
13084: LD_INT 0
13086: ST_TO_ADDR
// sBazooka := false ;
13087: LD_ADDR_EXP 90
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// sMortar := false ;
13095: LD_ADDR_EXP 91
13099: PUSH
13100: LD_INT 0
13102: ST_TO_ADDR
// sRanger := false ;
13103: LD_ADDR_EXP 101
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// sComputer := false ;
13111: LD_ADDR_EXP 102
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// s30 := false ;
13119: LD_ADDR_EXP 103
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// s60 := false ;
13127: LD_ADDR_EXP 104
13131: PUSH
13132: LD_INT 0
13134: ST_TO_ADDR
// end ;
13135: LD_VAR 0 1
13139: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13140: LD_INT 0
13142: PPUSH
13143: PPUSH
13144: PPUSH
13145: PPUSH
13146: PPUSH
13147: PPUSH
13148: PPUSH
// result := [ ] ;
13149: LD_ADDR_VAR 0 2
13153: PUSH
13154: EMPTY
13155: ST_TO_ADDR
// if campaign_id = 1 then
13156: LD_OWVAR 69
13160: PUSH
13161: LD_INT 1
13163: EQUAL
13164: IFFALSE 16330
// begin case mission_number of 1 :
13166: LD_OWVAR 70
13170: PUSH
13171: LD_INT 1
13173: DOUBLE
13174: EQUAL
13175: IFTRUE 13179
13177: GO 13255
13179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13180: LD_ADDR_VAR 0 2
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: LD_INT 4
13190: PUSH
13191: LD_INT 11
13193: PUSH
13194: LD_INT 12
13196: PUSH
13197: LD_INT 15
13199: PUSH
13200: LD_INT 16
13202: PUSH
13203: LD_INT 22
13205: PUSH
13206: LD_INT 23
13208: PUSH
13209: LD_INT 26
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 101
13225: PUSH
13226: LD_INT 102
13228: PUSH
13229: LD_INT 106
13231: PUSH
13232: LD_INT 116
13234: PUSH
13235: LD_INT 117
13237: PUSH
13238: LD_INT 118
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
13253: GO 16328
13255: LD_INT 2
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13347
13263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13264: LD_ADDR_VAR 0 2
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: LD_INT 4
13274: PUSH
13275: LD_INT 11
13277: PUSH
13278: LD_INT 12
13280: PUSH
13281: LD_INT 15
13283: PUSH
13284: LD_INT 16
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_INT 23
13292: PUSH
13293: LD_INT 26
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 101
13309: PUSH
13310: LD_INT 102
13312: PUSH
13313: LD_INT 105
13315: PUSH
13316: LD_INT 106
13318: PUSH
13319: LD_INT 108
13321: PUSH
13322: LD_INT 116
13324: PUSH
13325: LD_INT 117
13327: PUSH
13328: LD_INT 118
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: ST_TO_ADDR
13345: GO 16328
13347: LD_INT 3
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13443
13355: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13356: LD_ADDR_VAR 0 2
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: LD_INT 4
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: LD_INT 11
13372: PUSH
13373: LD_INT 12
13375: PUSH
13376: LD_INT 15
13378: PUSH
13379: LD_INT 16
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 26
13387: PUSH
13388: LD_INT 36
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 101
13405: PUSH
13406: LD_INT 102
13408: PUSH
13409: LD_INT 105
13411: PUSH
13412: LD_INT 106
13414: PUSH
13415: LD_INT 108
13417: PUSH
13418: LD_INT 116
13420: PUSH
13421: LD_INT 117
13423: PUSH
13424: LD_INT 118
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: ST_TO_ADDR
13441: GO 16328
13443: LD_INT 4
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13547
13451: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: LD_INT 4
13462: PUSH
13463: LD_INT 5
13465: PUSH
13466: LD_INT 8
13468: PUSH
13469: LD_INT 11
13471: PUSH
13472: LD_INT 12
13474: PUSH
13475: LD_INT 15
13477: PUSH
13478: LD_INT 16
13480: PUSH
13481: LD_INT 22
13483: PUSH
13484: LD_INT 23
13486: PUSH
13487: LD_INT 26
13489: PUSH
13490: LD_INT 36
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 101
13509: PUSH
13510: LD_INT 102
13512: PUSH
13513: LD_INT 105
13515: PUSH
13516: LD_INT 106
13518: PUSH
13519: LD_INT 108
13521: PUSH
13522: LD_INT 116
13524: PUSH
13525: LD_INT 117
13527: PUSH
13528: LD_INT 118
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: ST_TO_ADDR
13545: GO 16328
13547: LD_INT 5
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13667
13555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 2
13563: PUSH
13564: LD_INT 4
13566: PUSH
13567: LD_INT 5
13569: PUSH
13570: LD_INT 6
13572: PUSH
13573: LD_INT 8
13575: PUSH
13576: LD_INT 11
13578: PUSH
13579: LD_INT 12
13581: PUSH
13582: LD_INT 15
13584: PUSH
13585: LD_INT 16
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 23
13593: PUSH
13594: LD_INT 25
13596: PUSH
13597: LD_INT 26
13599: PUSH
13600: LD_INT 36
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 101
13621: PUSH
13622: LD_INT 102
13624: PUSH
13625: LD_INT 105
13627: PUSH
13628: LD_INT 106
13630: PUSH
13631: LD_INT 108
13633: PUSH
13634: LD_INT 109
13636: PUSH
13637: LD_INT 112
13639: PUSH
13640: LD_INT 116
13642: PUSH
13643: LD_INT 117
13645: PUSH
13646: LD_INT 118
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: ST_TO_ADDR
13665: GO 16328
13667: LD_INT 6
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13807
13675: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_INT 2
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: LD_INT 5
13689: PUSH
13690: LD_INT 6
13692: PUSH
13693: LD_INT 8
13695: PUSH
13696: LD_INT 11
13698: PUSH
13699: LD_INT 12
13701: PUSH
13702: LD_INT 15
13704: PUSH
13705: LD_INT 16
13707: PUSH
13708: LD_INT 20
13710: PUSH
13711: LD_INT 21
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 23
13719: PUSH
13720: LD_INT 25
13722: PUSH
13723: LD_INT 26
13725: PUSH
13726: LD_INT 30
13728: PUSH
13729: LD_INT 31
13731: PUSH
13732: LD_INT 32
13734: PUSH
13735: LD_INT 36
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 101
13761: PUSH
13762: LD_INT 102
13764: PUSH
13765: LD_INT 105
13767: PUSH
13768: LD_INT 106
13770: PUSH
13771: LD_INT 108
13773: PUSH
13774: LD_INT 109
13776: PUSH
13777: LD_INT 112
13779: PUSH
13780: LD_INT 116
13782: PUSH
13783: LD_INT 117
13785: PUSH
13786: LD_INT 118
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: ST_TO_ADDR
13805: GO 16328
13807: LD_INT 7
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 13927
13815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13816: LD_ADDR_VAR 0 2
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: LD_INT 4
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 7
13832: PUSH
13833: LD_INT 11
13835: PUSH
13836: LD_INT 12
13838: PUSH
13839: LD_INT 15
13841: PUSH
13842: LD_INT 16
13844: PUSH
13845: LD_INT 20
13847: PUSH
13848: LD_INT 21
13850: PUSH
13851: LD_INT 22
13853: PUSH
13854: LD_INT 23
13856: PUSH
13857: LD_INT 25
13859: PUSH
13860: LD_INT 26
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 101
13881: PUSH
13882: LD_INT 102
13884: PUSH
13885: LD_INT 103
13887: PUSH
13888: LD_INT 105
13890: PUSH
13891: LD_INT 106
13893: PUSH
13894: LD_INT 108
13896: PUSH
13897: LD_INT 112
13899: PUSH
13900: LD_INT 116
13902: PUSH
13903: LD_INT 117
13905: PUSH
13906: LD_INT 118
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: ST_TO_ADDR
13925: GO 16328
13927: LD_INT 8
13929: DOUBLE
13930: EQUAL
13931: IFTRUE 13935
13933: GO 14075
13935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: LD_INT 4
13946: PUSH
13947: LD_INT 5
13949: PUSH
13950: LD_INT 6
13952: PUSH
13953: LD_INT 7
13955: PUSH
13956: LD_INT 8
13958: PUSH
13959: LD_INT 11
13961: PUSH
13962: LD_INT 12
13964: PUSH
13965: LD_INT 15
13967: PUSH
13968: LD_INT 16
13970: PUSH
13971: LD_INT 20
13973: PUSH
13974: LD_INT 21
13976: PUSH
13977: LD_INT 22
13979: PUSH
13980: LD_INT 23
13982: PUSH
13983: LD_INT 25
13985: PUSH
13986: LD_INT 26
13988: PUSH
13989: LD_INT 30
13991: PUSH
13992: LD_INT 31
13994: PUSH
13995: LD_INT 32
13997: PUSH
13998: LD_INT 36
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 101
14025: PUSH
14026: LD_INT 102
14028: PUSH
14029: LD_INT 103
14031: PUSH
14032: LD_INT 105
14034: PUSH
14035: LD_INT 106
14037: PUSH
14038: LD_INT 108
14040: PUSH
14041: LD_INT 109
14043: PUSH
14044: LD_INT 112
14046: PUSH
14047: LD_INT 116
14049: PUSH
14050: LD_INT 117
14052: PUSH
14053: LD_INT 118
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: ST_TO_ADDR
14073: GO 16328
14075: LD_INT 9
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14231
14083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 6
14100: PUSH
14101: LD_INT 7
14103: PUSH
14104: LD_INT 8
14106: PUSH
14107: LD_INT 11
14109: PUSH
14110: LD_INT 12
14112: PUSH
14113: LD_INT 15
14115: PUSH
14116: LD_INT 16
14118: PUSH
14119: LD_INT 20
14121: PUSH
14122: LD_INT 21
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_INT 23
14130: PUSH
14131: LD_INT 25
14133: PUSH
14134: LD_INT 26
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 30
14142: PUSH
14143: LD_INT 31
14145: PUSH
14146: LD_INT 32
14148: PUSH
14149: LD_INT 36
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 101
14177: PUSH
14178: LD_INT 102
14180: PUSH
14181: LD_INT 103
14183: PUSH
14184: LD_INT 105
14186: PUSH
14187: LD_INT 106
14189: PUSH
14190: LD_INT 108
14192: PUSH
14193: LD_INT 109
14195: PUSH
14196: LD_INT 112
14198: PUSH
14199: LD_INT 114
14201: PUSH
14202: LD_INT 116
14204: PUSH
14205: LD_INT 117
14207: PUSH
14208: LD_INT 118
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: ST_TO_ADDR
14229: GO 16328
14231: LD_INT 10
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14435
14239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14240: LD_ADDR_VAR 0 2
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: LD_INT 4
14250: PUSH
14251: LD_INT 5
14253: PUSH
14254: LD_INT 6
14256: PUSH
14257: LD_INT 7
14259: PUSH
14260: LD_INT 8
14262: PUSH
14263: LD_INT 9
14265: PUSH
14266: LD_INT 10
14268: PUSH
14269: LD_INT 11
14271: PUSH
14272: LD_INT 12
14274: PUSH
14275: LD_INT 13
14277: PUSH
14278: LD_INT 14
14280: PUSH
14281: LD_INT 15
14283: PUSH
14284: LD_INT 16
14286: PUSH
14287: LD_INT 17
14289: PUSH
14290: LD_INT 18
14292: PUSH
14293: LD_INT 19
14295: PUSH
14296: LD_INT 20
14298: PUSH
14299: LD_INT 21
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_INT 23
14307: PUSH
14308: LD_INT 24
14310: PUSH
14311: LD_INT 25
14313: PUSH
14314: LD_INT 26
14316: PUSH
14317: LD_INT 28
14319: PUSH
14320: LD_INT 30
14322: PUSH
14323: LD_INT 31
14325: PUSH
14326: LD_INT 32
14328: PUSH
14329: LD_INT 36
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 101
14365: PUSH
14366: LD_INT 102
14368: PUSH
14369: LD_INT 103
14371: PUSH
14372: LD_INT 104
14374: PUSH
14375: LD_INT 105
14377: PUSH
14378: LD_INT 106
14380: PUSH
14381: LD_INT 107
14383: PUSH
14384: LD_INT 108
14386: PUSH
14387: LD_INT 109
14389: PUSH
14390: LD_INT 110
14392: PUSH
14393: LD_INT 111
14395: PUSH
14396: LD_INT 112
14398: PUSH
14399: LD_INT 114
14401: PUSH
14402: LD_INT 116
14404: PUSH
14405: LD_INT 117
14407: PUSH
14408: LD_INT 118
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: ST_TO_ADDR
14433: GO 16328
14435: LD_INT 11
14437: DOUBLE
14438: EQUAL
14439: IFTRUE 14443
14441: GO 14647
14443: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: LD_INT 4
14457: PUSH
14458: LD_INT 5
14460: PUSH
14461: LD_INT 6
14463: PUSH
14464: LD_INT 7
14466: PUSH
14467: LD_INT 8
14469: PUSH
14470: LD_INT 9
14472: PUSH
14473: LD_INT 10
14475: PUSH
14476: LD_INT 11
14478: PUSH
14479: LD_INT 12
14481: PUSH
14482: LD_INT 13
14484: PUSH
14485: LD_INT 14
14487: PUSH
14488: LD_INT 15
14490: PUSH
14491: LD_INT 16
14493: PUSH
14494: LD_INT 17
14496: PUSH
14497: LD_INT 18
14499: PUSH
14500: LD_INT 19
14502: PUSH
14503: LD_INT 20
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 22
14511: PUSH
14512: LD_INT 23
14514: PUSH
14515: LD_INT 24
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 26
14523: PUSH
14524: LD_INT 28
14526: PUSH
14527: LD_INT 30
14529: PUSH
14530: LD_INT 31
14532: PUSH
14533: LD_INT 32
14535: PUSH
14536: LD_INT 34
14538: PUSH
14539: LD_INT 36
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 101
14577: PUSH
14578: LD_INT 102
14580: PUSH
14581: LD_INT 103
14583: PUSH
14584: LD_INT 104
14586: PUSH
14587: LD_INT 105
14589: PUSH
14590: LD_INT 106
14592: PUSH
14593: LD_INT 107
14595: PUSH
14596: LD_INT 108
14598: PUSH
14599: LD_INT 109
14601: PUSH
14602: LD_INT 110
14604: PUSH
14605: LD_INT 111
14607: PUSH
14608: LD_INT 112
14610: PUSH
14611: LD_INT 114
14613: PUSH
14614: LD_INT 116
14616: PUSH
14617: LD_INT 117
14619: PUSH
14620: LD_INT 118
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: ST_TO_ADDR
14645: GO 16328
14647: LD_INT 12
14649: DOUBLE
14650: EQUAL
14651: IFTRUE 14655
14653: GO 14875
14655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14656: LD_ADDR_VAR 0 2
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 4
14672: PUSH
14673: LD_INT 5
14675: PUSH
14676: LD_INT 6
14678: PUSH
14679: LD_INT 7
14681: PUSH
14682: LD_INT 8
14684: PUSH
14685: LD_INT 9
14687: PUSH
14688: LD_INT 10
14690: PUSH
14691: LD_INT 11
14693: PUSH
14694: LD_INT 12
14696: PUSH
14697: LD_INT 13
14699: PUSH
14700: LD_INT 14
14702: PUSH
14703: LD_INT 15
14705: PUSH
14706: LD_INT 16
14708: PUSH
14709: LD_INT 17
14711: PUSH
14712: LD_INT 18
14714: PUSH
14715: LD_INT 19
14717: PUSH
14718: LD_INT 20
14720: PUSH
14721: LD_INT 21
14723: PUSH
14724: LD_INT 22
14726: PUSH
14727: LD_INT 23
14729: PUSH
14730: LD_INT 24
14732: PUSH
14733: LD_INT 25
14735: PUSH
14736: LD_INT 26
14738: PUSH
14739: LD_INT 27
14741: PUSH
14742: LD_INT 28
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 31
14750: PUSH
14751: LD_INT 32
14753: PUSH
14754: LD_INT 33
14756: PUSH
14757: LD_INT 34
14759: PUSH
14760: LD_INT 36
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 101
14801: PUSH
14802: LD_INT 102
14804: PUSH
14805: LD_INT 103
14807: PUSH
14808: LD_INT 104
14810: PUSH
14811: LD_INT 105
14813: PUSH
14814: LD_INT 106
14816: PUSH
14817: LD_INT 107
14819: PUSH
14820: LD_INT 108
14822: PUSH
14823: LD_INT 109
14825: PUSH
14826: LD_INT 110
14828: PUSH
14829: LD_INT 111
14831: PUSH
14832: LD_INT 112
14834: PUSH
14835: LD_INT 113
14837: PUSH
14838: LD_INT 114
14840: PUSH
14841: LD_INT 116
14843: PUSH
14844: LD_INT 117
14846: PUSH
14847: LD_INT 118
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: ST_TO_ADDR
14873: GO 16328
14875: LD_INT 13
14877: DOUBLE
14878: EQUAL
14879: IFTRUE 14883
14881: GO 15091
14883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14884: LD_ADDR_VAR 0 2
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: LD_INT 4
14900: PUSH
14901: LD_INT 5
14903: PUSH
14904: LD_INT 8
14906: PUSH
14907: LD_INT 9
14909: PUSH
14910: LD_INT 10
14912: PUSH
14913: LD_INT 11
14915: PUSH
14916: LD_INT 12
14918: PUSH
14919: LD_INT 14
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 17
14930: PUSH
14931: LD_INT 18
14933: PUSH
14934: LD_INT 19
14936: PUSH
14937: LD_INT 20
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 23
14948: PUSH
14949: LD_INT 24
14951: PUSH
14952: LD_INT 25
14954: PUSH
14955: LD_INT 26
14957: PUSH
14958: LD_INT 27
14960: PUSH
14961: LD_INT 28
14963: PUSH
14964: LD_INT 30
14966: PUSH
14967: LD_INT 31
14969: PUSH
14970: LD_INT 32
14972: PUSH
14973: LD_INT 33
14975: PUSH
14976: LD_INT 34
14978: PUSH
14979: LD_INT 36
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 101
15017: PUSH
15018: LD_INT 102
15020: PUSH
15021: LD_INT 103
15023: PUSH
15024: LD_INT 104
15026: PUSH
15027: LD_INT 105
15029: PUSH
15030: LD_INT 106
15032: PUSH
15033: LD_INT 107
15035: PUSH
15036: LD_INT 108
15038: PUSH
15039: LD_INT 109
15041: PUSH
15042: LD_INT 110
15044: PUSH
15045: LD_INT 111
15047: PUSH
15048: LD_INT 112
15050: PUSH
15051: LD_INT 113
15053: PUSH
15054: LD_INT 114
15056: PUSH
15057: LD_INT 116
15059: PUSH
15060: LD_INT 117
15062: PUSH
15063: LD_INT 118
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: ST_TO_ADDR
15089: GO 16328
15091: LD_INT 14
15093: DOUBLE
15094: EQUAL
15095: IFTRUE 15099
15097: GO 15323
15099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: LD_INT 1
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: LD_INT 3
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 7
15125: PUSH
15126: LD_INT 8
15128: PUSH
15129: LD_INT 9
15131: PUSH
15132: LD_INT 10
15134: PUSH
15135: LD_INT 11
15137: PUSH
15138: LD_INT 12
15140: PUSH
15141: LD_INT 13
15143: PUSH
15144: LD_INT 14
15146: PUSH
15147: LD_INT 15
15149: PUSH
15150: LD_INT 16
15152: PUSH
15153: LD_INT 17
15155: PUSH
15156: LD_INT 18
15158: PUSH
15159: LD_INT 19
15161: PUSH
15162: LD_INT 20
15164: PUSH
15165: LD_INT 21
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_INT 23
15173: PUSH
15174: LD_INT 24
15176: PUSH
15177: LD_INT 25
15179: PUSH
15180: LD_INT 26
15182: PUSH
15183: LD_INT 27
15185: PUSH
15186: LD_INT 28
15188: PUSH
15189: LD_INT 29
15191: PUSH
15192: LD_INT 30
15194: PUSH
15195: LD_INT 31
15197: PUSH
15198: LD_INT 32
15200: PUSH
15201: LD_INT 33
15203: PUSH
15204: LD_INT 34
15206: PUSH
15207: LD_INT 36
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 101
15249: PUSH
15250: LD_INT 102
15252: PUSH
15253: LD_INT 103
15255: PUSH
15256: LD_INT 104
15258: PUSH
15259: LD_INT 105
15261: PUSH
15262: LD_INT 106
15264: PUSH
15265: LD_INT 107
15267: PUSH
15268: LD_INT 108
15270: PUSH
15271: LD_INT 109
15273: PUSH
15274: LD_INT 110
15276: PUSH
15277: LD_INT 111
15279: PUSH
15280: LD_INT 112
15282: PUSH
15283: LD_INT 113
15285: PUSH
15286: LD_INT 114
15288: PUSH
15289: LD_INT 116
15291: PUSH
15292: LD_INT 117
15294: PUSH
15295: LD_INT 118
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: ST_TO_ADDR
15321: GO 16328
15323: LD_INT 15
15325: DOUBLE
15326: EQUAL
15327: IFTRUE 15331
15329: GO 15555
15331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15332: LD_ADDR_VAR 0 2
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: LD_INT 2
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: LD_INT 4
15348: PUSH
15349: LD_INT 5
15351: PUSH
15352: LD_INT 6
15354: PUSH
15355: LD_INT 7
15357: PUSH
15358: LD_INT 8
15360: PUSH
15361: LD_INT 9
15363: PUSH
15364: LD_INT 10
15366: PUSH
15367: LD_INT 11
15369: PUSH
15370: LD_INT 12
15372: PUSH
15373: LD_INT 13
15375: PUSH
15376: LD_INT 14
15378: PUSH
15379: LD_INT 15
15381: PUSH
15382: LD_INT 16
15384: PUSH
15385: LD_INT 17
15387: PUSH
15388: LD_INT 18
15390: PUSH
15391: LD_INT 19
15393: PUSH
15394: LD_INT 20
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 22
15402: PUSH
15403: LD_INT 23
15405: PUSH
15406: LD_INT 24
15408: PUSH
15409: LD_INT 25
15411: PUSH
15412: LD_INT 26
15414: PUSH
15415: LD_INT 27
15417: PUSH
15418: LD_INT 28
15420: PUSH
15421: LD_INT 29
15423: PUSH
15424: LD_INT 30
15426: PUSH
15427: LD_INT 31
15429: PUSH
15430: LD_INT 32
15432: PUSH
15433: LD_INT 33
15435: PUSH
15436: LD_INT 34
15438: PUSH
15439: LD_INT 36
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 101
15481: PUSH
15482: LD_INT 102
15484: PUSH
15485: LD_INT 103
15487: PUSH
15488: LD_INT 104
15490: PUSH
15491: LD_INT 105
15493: PUSH
15494: LD_INT 106
15496: PUSH
15497: LD_INT 107
15499: PUSH
15500: LD_INT 108
15502: PUSH
15503: LD_INT 109
15505: PUSH
15506: LD_INT 110
15508: PUSH
15509: LD_INT 111
15511: PUSH
15512: LD_INT 112
15514: PUSH
15515: LD_INT 113
15517: PUSH
15518: LD_INT 114
15520: PUSH
15521: LD_INT 116
15523: PUSH
15524: LD_INT 117
15526: PUSH
15527: LD_INT 118
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: ST_TO_ADDR
15553: GO 16328
15555: LD_INT 16
15557: DOUBLE
15558: EQUAL
15559: IFTRUE 15563
15561: GO 15699
15563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15564: LD_ADDR_VAR 0 2
15568: PUSH
15569: LD_INT 2
15571: PUSH
15572: LD_INT 4
15574: PUSH
15575: LD_INT 5
15577: PUSH
15578: LD_INT 7
15580: PUSH
15581: LD_INT 11
15583: PUSH
15584: LD_INT 12
15586: PUSH
15587: LD_INT 15
15589: PUSH
15590: LD_INT 16
15592: PUSH
15593: LD_INT 20
15595: PUSH
15596: LD_INT 21
15598: PUSH
15599: LD_INT 22
15601: PUSH
15602: LD_INT 23
15604: PUSH
15605: LD_INT 25
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 31
15616: PUSH
15617: LD_INT 32
15619: PUSH
15620: LD_INT 33
15622: PUSH
15623: LD_INT 34
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 101
15649: PUSH
15650: LD_INT 102
15652: PUSH
15653: LD_INT 103
15655: PUSH
15656: LD_INT 106
15658: PUSH
15659: LD_INT 108
15661: PUSH
15662: LD_INT 112
15664: PUSH
15665: LD_INT 113
15667: PUSH
15668: LD_INT 114
15670: PUSH
15671: LD_INT 116
15673: PUSH
15674: LD_INT 117
15676: PUSH
15677: LD_INT 118
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: ST_TO_ADDR
15697: GO 16328
15699: LD_INT 17
15701: DOUBLE
15702: EQUAL
15703: IFTRUE 15707
15705: GO 15931
15707: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: LD_INT 1
15715: PUSH
15716: LD_INT 2
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: LD_INT 4
15724: PUSH
15725: LD_INT 5
15727: PUSH
15728: LD_INT 6
15730: PUSH
15731: LD_INT 7
15733: PUSH
15734: LD_INT 8
15736: PUSH
15737: LD_INT 9
15739: PUSH
15740: LD_INT 10
15742: PUSH
15743: LD_INT 11
15745: PUSH
15746: LD_INT 12
15748: PUSH
15749: LD_INT 13
15751: PUSH
15752: LD_INT 14
15754: PUSH
15755: LD_INT 15
15757: PUSH
15758: LD_INT 16
15760: PUSH
15761: LD_INT 17
15763: PUSH
15764: LD_INT 18
15766: PUSH
15767: LD_INT 19
15769: PUSH
15770: LD_INT 20
15772: PUSH
15773: LD_INT 21
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 23
15781: PUSH
15782: LD_INT 24
15784: PUSH
15785: LD_INT 25
15787: PUSH
15788: LD_INT 26
15790: PUSH
15791: LD_INT 27
15793: PUSH
15794: LD_INT 28
15796: PUSH
15797: LD_INT 29
15799: PUSH
15800: LD_INT 30
15802: PUSH
15803: LD_INT 31
15805: PUSH
15806: LD_INT 32
15808: PUSH
15809: LD_INT 33
15811: PUSH
15812: LD_INT 34
15814: PUSH
15815: LD_INT 36
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 101
15857: PUSH
15858: LD_INT 102
15860: PUSH
15861: LD_INT 103
15863: PUSH
15864: LD_INT 104
15866: PUSH
15867: LD_INT 105
15869: PUSH
15870: LD_INT 106
15872: PUSH
15873: LD_INT 107
15875: PUSH
15876: LD_INT 108
15878: PUSH
15879: LD_INT 109
15881: PUSH
15882: LD_INT 110
15884: PUSH
15885: LD_INT 111
15887: PUSH
15888: LD_INT 112
15890: PUSH
15891: LD_INT 113
15893: PUSH
15894: LD_INT 114
15896: PUSH
15897: LD_INT 116
15899: PUSH
15900: LD_INT 117
15902: PUSH
15903: LD_INT 118
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: ST_TO_ADDR
15929: GO 16328
15931: LD_INT 18
15933: DOUBLE
15934: EQUAL
15935: IFTRUE 15939
15937: GO 16087
15939: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15940: LD_ADDR_VAR 0 2
15944: PUSH
15945: LD_INT 2
15947: PUSH
15948: LD_INT 4
15950: PUSH
15951: LD_INT 5
15953: PUSH
15954: LD_INT 7
15956: PUSH
15957: LD_INT 11
15959: PUSH
15960: LD_INT 12
15962: PUSH
15963: LD_INT 15
15965: PUSH
15966: LD_INT 16
15968: PUSH
15969: LD_INT 20
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_INT 23
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 26
15986: PUSH
15987: LD_INT 30
15989: PUSH
15990: LD_INT 31
15992: PUSH
15993: LD_INT 32
15995: PUSH
15996: LD_INT 33
15998: PUSH
15999: LD_INT 34
16001: PUSH
16002: LD_INT 35
16004: PUSH
16005: LD_INT 36
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 101
16033: PUSH
16034: LD_INT 102
16036: PUSH
16037: LD_INT 103
16039: PUSH
16040: LD_INT 106
16042: PUSH
16043: LD_INT 108
16045: PUSH
16046: LD_INT 112
16048: PUSH
16049: LD_INT 113
16051: PUSH
16052: LD_INT 114
16054: PUSH
16055: LD_INT 115
16057: PUSH
16058: LD_INT 116
16060: PUSH
16061: LD_INT 117
16063: PUSH
16064: LD_INT 118
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: ST_TO_ADDR
16085: GO 16328
16087: LD_INT 19
16089: DOUBLE
16090: EQUAL
16091: IFTRUE 16095
16093: GO 16327
16095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16096: LD_ADDR_VAR 0 2
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 2
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: LD_INT 4
16112: PUSH
16113: LD_INT 5
16115: PUSH
16116: LD_INT 6
16118: PUSH
16119: LD_INT 7
16121: PUSH
16122: LD_INT 8
16124: PUSH
16125: LD_INT 9
16127: PUSH
16128: LD_INT 10
16130: PUSH
16131: LD_INT 11
16133: PUSH
16134: LD_INT 12
16136: PUSH
16137: LD_INT 13
16139: PUSH
16140: LD_INT 14
16142: PUSH
16143: LD_INT 15
16145: PUSH
16146: LD_INT 16
16148: PUSH
16149: LD_INT 17
16151: PUSH
16152: LD_INT 18
16154: PUSH
16155: LD_INT 19
16157: PUSH
16158: LD_INT 20
16160: PUSH
16161: LD_INT 21
16163: PUSH
16164: LD_INT 22
16166: PUSH
16167: LD_INT 23
16169: PUSH
16170: LD_INT 24
16172: PUSH
16173: LD_INT 25
16175: PUSH
16176: LD_INT 26
16178: PUSH
16179: LD_INT 27
16181: PUSH
16182: LD_INT 28
16184: PUSH
16185: LD_INT 29
16187: PUSH
16188: LD_INT 30
16190: PUSH
16191: LD_INT 31
16193: PUSH
16194: LD_INT 32
16196: PUSH
16197: LD_INT 33
16199: PUSH
16200: LD_INT 34
16202: PUSH
16203: LD_INT 35
16205: PUSH
16206: LD_INT 36
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 101
16249: PUSH
16250: LD_INT 102
16252: PUSH
16253: LD_INT 103
16255: PUSH
16256: LD_INT 104
16258: PUSH
16259: LD_INT 105
16261: PUSH
16262: LD_INT 106
16264: PUSH
16265: LD_INT 107
16267: PUSH
16268: LD_INT 108
16270: PUSH
16271: LD_INT 109
16273: PUSH
16274: LD_INT 110
16276: PUSH
16277: LD_INT 111
16279: PUSH
16280: LD_INT 112
16282: PUSH
16283: LD_INT 113
16285: PUSH
16286: LD_INT 114
16288: PUSH
16289: LD_INT 115
16291: PUSH
16292: LD_INT 116
16294: PUSH
16295: LD_INT 117
16297: PUSH
16298: LD_INT 118
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: ST_TO_ADDR
16325: GO 16328
16327: POP
// end else
16328: GO 16559
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16330: LD_ADDR_VAR 0 2
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: LD_INT 4
16346: PUSH
16347: LD_INT 5
16349: PUSH
16350: LD_INT 6
16352: PUSH
16353: LD_INT 7
16355: PUSH
16356: LD_INT 8
16358: PUSH
16359: LD_INT 9
16361: PUSH
16362: LD_INT 10
16364: PUSH
16365: LD_INT 11
16367: PUSH
16368: LD_INT 12
16370: PUSH
16371: LD_INT 13
16373: PUSH
16374: LD_INT 14
16376: PUSH
16377: LD_INT 15
16379: PUSH
16380: LD_INT 16
16382: PUSH
16383: LD_INT 17
16385: PUSH
16386: LD_INT 18
16388: PUSH
16389: LD_INT 19
16391: PUSH
16392: LD_INT 20
16394: PUSH
16395: LD_INT 21
16397: PUSH
16398: LD_INT 22
16400: PUSH
16401: LD_INT 23
16403: PUSH
16404: LD_INT 24
16406: PUSH
16407: LD_INT 25
16409: PUSH
16410: LD_INT 26
16412: PUSH
16413: LD_INT 27
16415: PUSH
16416: LD_INT 28
16418: PUSH
16419: LD_INT 29
16421: PUSH
16422: LD_INT 30
16424: PUSH
16425: LD_INT 31
16427: PUSH
16428: LD_INT 32
16430: PUSH
16431: LD_INT 33
16433: PUSH
16434: LD_INT 34
16436: PUSH
16437: LD_INT 35
16439: PUSH
16440: LD_INT 36
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 101
16483: PUSH
16484: LD_INT 102
16486: PUSH
16487: LD_INT 103
16489: PUSH
16490: LD_INT 104
16492: PUSH
16493: LD_INT 105
16495: PUSH
16496: LD_INT 106
16498: PUSH
16499: LD_INT 107
16501: PUSH
16502: LD_INT 108
16504: PUSH
16505: LD_INT 109
16507: PUSH
16508: LD_INT 110
16510: PUSH
16511: LD_INT 111
16513: PUSH
16514: LD_INT 112
16516: PUSH
16517: LD_INT 113
16519: PUSH
16520: LD_INT 114
16522: PUSH
16523: LD_INT 115
16525: PUSH
16526: LD_INT 116
16528: PUSH
16529: LD_INT 117
16531: PUSH
16532: LD_INT 118
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: ST_TO_ADDR
// if result then
16559: LD_VAR 0 2
16563: IFFALSE 17349
// begin normal :=  ;
16565: LD_ADDR_VAR 0 5
16569: PUSH
16570: LD_STRING 
16572: ST_TO_ADDR
// hardcore :=  ;
16573: LD_ADDR_VAR 0 6
16577: PUSH
16578: LD_STRING 
16580: ST_TO_ADDR
// active :=  ;
16581: LD_ADDR_VAR 0 7
16585: PUSH
16586: LD_STRING 
16588: ST_TO_ADDR
// for i = 1 to normalCounter do
16589: LD_ADDR_VAR 0 8
16593: PUSH
16594: DOUBLE
16595: LD_INT 1
16597: DEC
16598: ST_TO_ADDR
16599: LD_EXP 49
16603: PUSH
16604: FOR_TO
16605: IFFALSE 16706
// begin tmp := 0 ;
16607: LD_ADDR_VAR 0 3
16611: PUSH
16612: LD_STRING 0
16614: ST_TO_ADDR
// if result [ 1 ] then
16615: LD_VAR 0 2
16619: PUSH
16620: LD_INT 1
16622: ARRAY
16623: IFFALSE 16688
// if result [ 1 ] [ 1 ] = i then
16625: LD_VAR 0 2
16629: PUSH
16630: LD_INT 1
16632: ARRAY
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PUSH
16638: LD_VAR 0 8
16642: EQUAL
16643: IFFALSE 16688
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16645: LD_ADDR_VAR 0 2
16649: PUSH
16650: LD_VAR 0 2
16654: PPUSH
16655: LD_INT 1
16657: PPUSH
16658: LD_VAR 0 2
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: PPUSH
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 3
16674: PPUSH
16675: CALL_OW 1
16679: ST_TO_ADDR
// tmp := 1 ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_STRING 1
16687: ST_TO_ADDR
// end ; normal := normal & tmp ;
16688: LD_ADDR_VAR 0 5
16692: PUSH
16693: LD_VAR 0 5
16697: PUSH
16698: LD_VAR 0 3
16702: STR
16703: ST_TO_ADDR
// end ;
16704: GO 16604
16706: POP
16707: POP
// for i = 1 to hardcoreCounter do
16708: LD_ADDR_VAR 0 8
16712: PUSH
16713: DOUBLE
16714: LD_INT 1
16716: DEC
16717: ST_TO_ADDR
16718: LD_EXP 50
16722: PUSH
16723: FOR_TO
16724: IFFALSE 16829
// begin tmp := 0 ;
16726: LD_ADDR_VAR 0 3
16730: PUSH
16731: LD_STRING 0
16733: ST_TO_ADDR
// if result [ 2 ] then
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 2
16741: ARRAY
16742: IFFALSE 16811
// if result [ 2 ] [ 1 ] = 100 + i then
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 2
16751: ARRAY
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: PUSH
16757: LD_INT 100
16759: PUSH
16760: LD_VAR 0 8
16764: PLUS
16765: EQUAL
16766: IFFALSE 16811
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_VAR 0 2
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: LD_VAR 0 2
16785: PUSH
16786: LD_INT 2
16788: ARRAY
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 3
16797: PPUSH
16798: CALL_OW 1
16802: ST_TO_ADDR
// tmp := 1 ;
16803: LD_ADDR_VAR 0 3
16807: PUSH
16808: LD_STRING 1
16810: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16811: LD_ADDR_VAR 0 6
16815: PUSH
16816: LD_VAR 0 6
16820: PUSH
16821: LD_VAR 0 3
16825: STR
16826: ST_TO_ADDR
// end ;
16827: GO 16723
16829: POP
16830: POP
// if isGameLoad then
16831: LD_VAR 0 1
16835: IFFALSE 17310
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16837: LD_ADDR_VAR 0 4
16841: PUSH
16842: LD_EXP 53
16846: PUSH
16847: LD_EXP 52
16851: PUSH
16852: LD_EXP 54
16856: PUSH
16857: LD_EXP 51
16861: PUSH
16862: LD_EXP 55
16866: PUSH
16867: LD_EXP 56
16871: PUSH
16872: LD_EXP 57
16876: PUSH
16877: LD_EXP 58
16881: PUSH
16882: LD_EXP 59
16886: PUSH
16887: LD_EXP 60
16891: PUSH
16892: LD_EXP 61
16896: PUSH
16897: LD_EXP 62
16901: PUSH
16902: LD_EXP 63
16906: PUSH
16907: LD_EXP 64
16911: PUSH
16912: LD_EXP 72
16916: PUSH
16917: LD_EXP 73
16921: PUSH
16922: LD_EXP 74
16926: PUSH
16927: LD_EXP 75
16931: PUSH
16932: LD_EXP 77
16936: PUSH
16937: LD_EXP 78
16941: PUSH
16942: LD_EXP 79
16946: PUSH
16947: LD_EXP 82
16951: PUSH
16952: LD_EXP 84
16956: PUSH
16957: LD_EXP 85
16961: PUSH
16962: LD_EXP 86
16966: PUSH
16967: LD_EXP 88
16971: PUSH
16972: LD_EXP 89
16976: PUSH
16977: LD_EXP 92
16981: PUSH
16982: LD_EXP 93
16986: PUSH
16987: LD_EXP 94
16991: PUSH
16992: LD_EXP 95
16996: PUSH
16997: LD_EXP 96
17001: PUSH
17002: LD_EXP 97
17006: PUSH
17007: LD_EXP 98
17011: PUSH
17012: LD_EXP 99
17016: PUSH
17017: LD_EXP 100
17021: PUSH
17022: LD_EXP 65
17026: PUSH
17027: LD_EXP 66
17031: PUSH
17032: LD_EXP 69
17036: PUSH
17037: LD_EXP 70
17041: PUSH
17042: LD_EXP 71
17046: PUSH
17047: LD_EXP 67
17051: PUSH
17052: LD_EXP 68
17056: PUSH
17057: LD_EXP 76
17061: PUSH
17062: LD_EXP 80
17066: PUSH
17067: LD_EXP 81
17071: PUSH
17072: LD_EXP 83
17076: PUSH
17077: LD_EXP 87
17081: PUSH
17082: LD_EXP 90
17086: PUSH
17087: LD_EXP 91
17091: PUSH
17092: LD_EXP 101
17096: PUSH
17097: LD_EXP 102
17101: PUSH
17102: LD_EXP 103
17106: PUSH
17107: LD_EXP 104
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: ST_TO_ADDR
// tmp :=  ;
17168: LD_ADDR_VAR 0 3
17172: PUSH
17173: LD_STRING 
17175: ST_TO_ADDR
// for i = 1 to normalCounter do
17176: LD_ADDR_VAR 0 8
17180: PUSH
17181: DOUBLE
17182: LD_INT 1
17184: DEC
17185: ST_TO_ADDR
17186: LD_EXP 49
17190: PUSH
17191: FOR_TO
17192: IFFALSE 17228
// begin if flags [ i ] then
17194: LD_VAR 0 4
17198: PUSH
17199: LD_VAR 0 8
17203: ARRAY
17204: IFFALSE 17226
// tmp := tmp & i & ; ;
17206: LD_ADDR_VAR 0 3
17210: PUSH
17211: LD_VAR 0 3
17215: PUSH
17216: LD_VAR 0 8
17220: STR
17221: PUSH
17222: LD_STRING ;
17224: STR
17225: ST_TO_ADDR
// end ;
17226: GO 17191
17228: POP
17229: POP
// for i = 1 to hardcoreCounter do
17230: LD_ADDR_VAR 0 8
17234: PUSH
17235: DOUBLE
17236: LD_INT 1
17238: DEC
17239: ST_TO_ADDR
17240: LD_EXP 50
17244: PUSH
17245: FOR_TO
17246: IFFALSE 17292
// begin if flags [ normalCounter + i ] then
17248: LD_VAR 0 4
17252: PUSH
17253: LD_EXP 49
17257: PUSH
17258: LD_VAR 0 8
17262: PLUS
17263: ARRAY
17264: IFFALSE 17290
// tmp := tmp & ( 100 + i ) & ; ;
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_VAR 0 3
17275: PUSH
17276: LD_INT 100
17278: PUSH
17279: LD_VAR 0 8
17283: PLUS
17284: STR
17285: PUSH
17286: LD_STRING ;
17288: STR
17289: ST_TO_ADDR
// end ;
17290: GO 17245
17292: POP
17293: POP
// if tmp then
17294: LD_VAR 0 3
17298: IFFALSE 17310
// active := tmp ;
17300: LD_ADDR_VAR 0 7
17304: PUSH
17305: LD_VAR 0 3
17309: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17310: LD_STRING getStreamItemsFromMission("
17312: PUSH
17313: LD_VAR 0 5
17317: STR
17318: PUSH
17319: LD_STRING ","
17321: STR
17322: PUSH
17323: LD_VAR 0 6
17327: STR
17328: PUSH
17329: LD_STRING ","
17331: STR
17332: PUSH
17333: LD_VAR 0 7
17337: STR
17338: PUSH
17339: LD_STRING ")
17341: STR
17342: PPUSH
17343: CALL_OW 559
// end else
17347: GO 17356
// ToLua ( getStreamItemsFromMission("","","") ) ;
17349: LD_STRING getStreamItemsFromMission("","","")
17351: PPUSH
17352: CALL_OW 559
// end ;
17356: LD_VAR 0 2
17360: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17361: LD_EXP 48
17365: IFFALSE 17373
17367: PUSH
17368: LD_EXP 53
17372: AND
17373: IFFALSE 17497
17375: GO 17377
17377: DISABLE
17378: LD_INT 0
17380: PPUSH
17381: PPUSH
// begin enable ;
17382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17383: LD_ADDR_VAR 0 2
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_OWVAR 2
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 34
17405: PUSH
17406: LD_INT 7
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 34
17415: PUSH
17416: LD_INT 45
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 34
17425: PUSH
17426: LD_INT 28
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 34
17435: PUSH
17436: LD_INT 47
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PPUSH
17454: CALL_OW 69
17458: ST_TO_ADDR
// if not tmp then
17459: LD_VAR 0 2
17463: NOT
17464: IFFALSE 17468
// exit ;
17466: GO 17497
// for i in tmp do
17468: LD_ADDR_VAR 0 1
17472: PUSH
17473: LD_VAR 0 2
17477: PUSH
17478: FOR_IN
17479: IFFALSE 17495
// begin SetLives ( i , 0 ) ;
17481: LD_VAR 0 1
17485: PPUSH
17486: LD_INT 0
17488: PPUSH
17489: CALL_OW 234
// end ;
17493: GO 17478
17495: POP
17496: POP
// end ;
17497: PPOPN 2
17499: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17500: LD_EXP 48
17504: IFFALSE 17512
17506: PUSH
17507: LD_EXP 54
17511: AND
17512: IFFALSE 17596
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
17520: PPUSH
// begin enable ;
17521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17522: LD_ADDR_VAR 0 2
17526: PUSH
17527: LD_INT 22
17529: PUSH
17530: LD_OWVAR 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 32
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: ST_TO_ADDR
// if not tmp then
17558: LD_VAR 0 2
17562: NOT
17563: IFFALSE 17567
// exit ;
17565: GO 17596
// for i in tmp do
17567: LD_ADDR_VAR 0 1
17571: PUSH
17572: LD_VAR 0 2
17576: PUSH
17577: FOR_IN
17578: IFFALSE 17594
// begin SetLives ( i , 0 ) ;
17580: LD_VAR 0 1
17584: PPUSH
17585: LD_INT 0
17587: PPUSH
17588: CALL_OW 234
// end ;
17592: GO 17577
17594: POP
17595: POP
// end ;
17596: PPOPN 2
17598: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17599: LD_EXP 48
17603: IFFALSE 17611
17605: PUSH
17606: LD_EXP 51
17610: AND
17611: IFFALSE 17704
17613: GO 17615
17615: DISABLE
17616: LD_INT 0
17618: PPUSH
// begin enable ;
17619: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17620: LD_ADDR_VAR 0 1
17624: PUSH
17625: LD_INT 22
17627: PUSH
17628: LD_OWVAR 2
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: LD_INT 25
17642: PUSH
17643: LD_INT 5
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 25
17652: PUSH
17653: LD_INT 9
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 25
17662: PUSH
17663: LD_INT 8
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 69
17684: PUSH
17685: FOR_IN
17686: IFFALSE 17702
// begin SetClass ( i , 1 ) ;
17688: LD_VAR 0 1
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: CALL_OW 336
// end ;
17700: GO 17685
17702: POP
17703: POP
// end ;
17704: PPOPN 1
17706: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17707: LD_EXP 48
17711: IFFALSE 17719
17713: PUSH
17714: LD_EXP 52
17718: AND
17719: IFFALSE 17731
17721: PUSH
17722: LD_OWVAR 65
17726: PUSH
17727: LD_INT 7
17729: LESS
17730: AND
17731: IFFALSE 17745
17733: GO 17735
17735: DISABLE
// begin enable ;
17736: ENABLE
// game_speed := 7 ;
17737: LD_ADDR_OWVAR 65
17741: PUSH
17742: LD_INT 7
17744: ST_TO_ADDR
// end ;
17745: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17746: LD_EXP 48
17750: IFFALSE 17758
17752: PUSH
17753: LD_EXP 55
17757: AND
17758: IFFALSE 17960
17760: GO 17762
17762: DISABLE
17763: LD_INT 0
17765: PPUSH
17766: PPUSH
17767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17768: LD_ADDR_VAR 0 3
17772: PUSH
17773: LD_INT 81
17775: PUSH
17776: LD_OWVAR 2
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 21
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: ST_TO_ADDR
// if not tmp then
17804: LD_VAR 0 3
17808: NOT
17809: IFFALSE 17813
// exit ;
17811: GO 17960
// if tmp > 5 then
17813: LD_VAR 0 3
17817: PUSH
17818: LD_INT 5
17820: GREATER
17821: IFFALSE 17833
// k := 5 else
17823: LD_ADDR_VAR 0 2
17827: PUSH
17828: LD_INT 5
17830: ST_TO_ADDR
17831: GO 17843
// k := tmp ;
17833: LD_ADDR_VAR 0 2
17837: PUSH
17838: LD_VAR 0 3
17842: ST_TO_ADDR
// for i := 1 to k do
17843: LD_ADDR_VAR 0 1
17847: PUSH
17848: DOUBLE
17849: LD_INT 1
17851: DEC
17852: ST_TO_ADDR
17853: LD_VAR 0 2
17857: PUSH
17858: FOR_TO
17859: IFFALSE 17958
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17861: LD_VAR 0 3
17865: PUSH
17866: LD_VAR 0 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 1
17876: PUSH
17877: LD_INT 4
17879: MOD
17880: PUSH
17881: LD_INT 1
17883: PLUS
17884: PPUSH
17885: CALL_OW 259
17889: PUSH
17890: LD_INT 10
17892: LESS
17893: IFFALSE 17956
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17895: LD_VAR 0 3
17899: PUSH
17900: LD_VAR 0 1
17904: ARRAY
17905: PPUSH
17906: LD_VAR 0 1
17910: PUSH
17911: LD_INT 4
17913: MOD
17914: PUSH
17915: LD_INT 1
17917: PLUS
17918: PPUSH
17919: LD_VAR 0 3
17923: PUSH
17924: LD_VAR 0 1
17928: ARRAY
17929: PPUSH
17930: LD_VAR 0 1
17934: PUSH
17935: LD_INT 4
17937: MOD
17938: PUSH
17939: LD_INT 1
17941: PLUS
17942: PPUSH
17943: CALL_OW 259
17947: PUSH
17948: LD_INT 1
17950: PLUS
17951: PPUSH
17952: CALL_OW 237
17956: GO 17858
17958: POP
17959: POP
// end ;
17960: PPOPN 3
17962: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17963: LD_EXP 48
17967: IFFALSE 17975
17969: PUSH
17970: LD_EXP 56
17974: AND
17975: IFFALSE 17995
17977: GO 17979
17979: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17980: LD_INT 4
17982: PPUSH
17983: LD_OWVAR 2
17987: PPUSH
17988: LD_INT 0
17990: PPUSH
17991: CALL_OW 324
17995: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17996: LD_EXP 48
18000: IFFALSE 18008
18002: PUSH
18003: LD_EXP 85
18007: AND
18008: IFFALSE 18028
18010: GO 18012
18012: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18013: LD_INT 19
18015: PPUSH
18016: LD_OWVAR 2
18020: PPUSH
18021: LD_INT 0
18023: PPUSH
18024: CALL_OW 324
18028: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18029: LD_EXP 48
18033: IFFALSE 18041
18035: PUSH
18036: LD_EXP 57
18040: AND
18041: IFFALSE 18143
18043: GO 18045
18045: DISABLE
18046: LD_INT 0
18048: PPUSH
18049: PPUSH
// begin enable ;
18050: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18051: LD_ADDR_VAR 0 2
18055: PUSH
18056: LD_INT 22
18058: PUSH
18059: LD_OWVAR 2
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 34
18073: PUSH
18074: LD_INT 11
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 34
18083: PUSH
18084: LD_INT 30
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PPUSH
18100: CALL_OW 69
18104: ST_TO_ADDR
// if not tmp then
18105: LD_VAR 0 2
18109: NOT
18110: IFFALSE 18114
// exit ;
18112: GO 18143
// for i in tmp do
18114: LD_ADDR_VAR 0 1
18118: PUSH
18119: LD_VAR 0 2
18123: PUSH
18124: FOR_IN
18125: IFFALSE 18141
// begin SetLives ( i , 0 ) ;
18127: LD_VAR 0 1
18131: PPUSH
18132: LD_INT 0
18134: PPUSH
18135: CALL_OW 234
// end ;
18139: GO 18124
18141: POP
18142: POP
// end ;
18143: PPOPN 2
18145: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18146: LD_EXP 48
18150: IFFALSE 18158
18152: PUSH
18153: LD_EXP 58
18157: AND
18158: IFFALSE 18178
18160: GO 18162
18162: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18163: LD_INT 32
18165: PPUSH
18166: LD_OWVAR 2
18170: PPUSH
18171: LD_INT 0
18173: PPUSH
18174: CALL_OW 324
18178: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18179: LD_EXP 48
18183: IFFALSE 18191
18185: PUSH
18186: LD_EXP 59
18190: AND
18191: IFFALSE 18374
18193: GO 18195
18195: DISABLE
18196: LD_INT 0
18198: PPUSH
18199: PPUSH
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18201: LD_ADDR_VAR 0 2
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 33
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 2
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18374
// side := 0 ;
18246: LD_ADDR_VAR 0 3
18250: PUSH
18251: LD_INT 0
18253: ST_TO_ADDR
// for i := 1 to 8 do
18254: LD_ADDR_VAR 0 1
18258: PUSH
18259: DOUBLE
18260: LD_INT 1
18262: DEC
18263: ST_TO_ADDR
18264: LD_INT 8
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18318
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18270: LD_OWVAR 2
18274: PUSH
18275: LD_VAR 0 1
18279: NONEQUAL
18280: IFFALSE 18302
18282: PUSH
18283: LD_OWVAR 2
18287: PPUSH
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 81
18297: PUSH
18298: LD_INT 2
18300: EQUAL
18301: AND
18302: IFFALSE 18316
// begin side := i ;
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: LD_VAR 0 1
18313: ST_TO_ADDR
// break ;
18314: GO 18318
// end ;
18316: GO 18267
18318: POP
18319: POP
// if not side then
18320: LD_VAR 0 3
18324: NOT
18325: IFFALSE 18329
// exit ;
18327: GO 18374
// for i := 1 to tmp do
18329: LD_ADDR_VAR 0 1
18333: PUSH
18334: DOUBLE
18335: LD_INT 1
18337: DEC
18338: ST_TO_ADDR
18339: LD_VAR 0 2
18343: PUSH
18344: FOR_TO
18345: IFFALSE 18372
// if Prob ( 60 ) then
18347: LD_INT 60
18349: PPUSH
18350: CALL_OW 13
18354: IFFALSE 18370
// SetSide ( i , side ) ;
18356: LD_VAR 0 1
18360: PPUSH
18361: LD_VAR 0 3
18365: PPUSH
18366: CALL_OW 235
18370: GO 18344
18372: POP
18373: POP
// end ;
18374: PPOPN 3
18376: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18377: LD_EXP 48
18381: IFFALSE 18389
18383: PUSH
18384: LD_EXP 61
18388: AND
18389: IFFALSE 18508
18391: GO 18393
18393: DISABLE
18394: LD_INT 0
18396: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_OWVAR 2
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 3
18426: PUSH
18427: LD_INT 23
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: PPUSH
18446: CALL_OW 69
18450: PUSH
18451: FOR_IN
18452: IFFALSE 18506
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 257
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: LD_INT 3
18472: PUSH
18473: LD_INT 4
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: IN
18482: IFFALSE 18504
// SetClass ( un , rand ( 1 , 4 ) ) ;
18484: LD_VAR 0 1
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: LD_INT 4
18494: PPUSH
18495: CALL_OW 12
18499: PPUSH
18500: CALL_OW 336
18504: GO 18451
18506: POP
18507: POP
// end ;
18508: PPOPN 1
18510: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18511: LD_EXP 48
18515: IFFALSE 18523
18517: PUSH
18518: LD_EXP 60
18522: AND
18523: IFFALSE 18602
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18531: LD_ADDR_VAR 0 1
18535: PUSH
18536: LD_INT 22
18538: PUSH
18539: LD_OWVAR 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 21
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PPUSH
18562: CALL_OW 69
18566: ST_TO_ADDR
// if not tmp then
18567: LD_VAR 0 1
18571: NOT
18572: IFFALSE 18576
// exit ;
18574: GO 18602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18576: LD_VAR 0 1
18580: PUSH
18581: LD_INT 1
18583: PPUSH
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 12
18593: ARRAY
18594: PPUSH
18595: LD_INT 100
18597: PPUSH
18598: CALL_OW 234
// end ;
18602: PPOPN 1
18604: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18605: LD_EXP 48
18609: IFFALSE 18617
18611: PUSH
18612: LD_EXP 62
18616: AND
18617: IFFALSE 18715
18619: GO 18621
18621: DISABLE
18622: LD_INT 0
18624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18625: LD_ADDR_VAR 0 1
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_OWVAR 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 21
18644: PUSH
18645: LD_INT 1
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 69
18660: ST_TO_ADDR
// if not tmp then
18661: LD_VAR 0 1
18665: NOT
18666: IFFALSE 18670
// exit ;
18668: GO 18715
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18670: LD_VAR 0 1
18674: PUSH
18675: LD_INT 1
18677: PPUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 12
18687: ARRAY
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: LD_INT 4
18694: PPUSH
18695: CALL_OW 12
18699: PPUSH
18700: LD_INT 3000
18702: PPUSH
18703: LD_INT 9000
18705: PPUSH
18706: CALL_OW 12
18710: PPUSH
18711: CALL_OW 492
// end ;
18715: PPOPN 1
18717: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18718: LD_EXP 48
18722: IFFALSE 18730
18724: PUSH
18725: LD_EXP 63
18729: AND
18730: IFFALSE 18750
18732: GO 18734
18734: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18735: LD_INT 1
18737: PPUSH
18738: LD_OWVAR 2
18742: PPUSH
18743: LD_INT 0
18745: PPUSH
18746: CALL_OW 324
18750: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18751: LD_EXP 48
18755: IFFALSE 18763
18757: PUSH
18758: LD_EXP 64
18762: AND
18763: IFFALSE 18846
18765: GO 18767
18767: DISABLE
18768: LD_INT 0
18770: PPUSH
18771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_INT 22
18779: PUSH
18780: LD_OWVAR 2
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PPUSH
18803: CALL_OW 69
18807: ST_TO_ADDR
// if not tmp then
18808: LD_VAR 0 2
18812: NOT
18813: IFFALSE 18817
// exit ;
18815: GO 18846
// for i in tmp do
18817: LD_ADDR_VAR 0 1
18821: PUSH
18822: LD_VAR 0 2
18826: PUSH
18827: FOR_IN
18828: IFFALSE 18844
// SetBLevel ( i , 10 ) ;
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_INT 10
18837: PPUSH
18838: CALL_OW 241
18842: GO 18827
18844: POP
18845: POP
// end ;
18846: PPOPN 2
18848: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18849: LD_EXP 48
18853: IFFALSE 18861
18855: PUSH
18856: LD_EXP 65
18860: AND
18861: IFFALSE 18972
18863: GO 18865
18865: DISABLE
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
18870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18871: LD_ADDR_VAR 0 3
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 25
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: ST_TO_ADDR
// if not tmp then
18907: LD_VAR 0 3
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18972
// un := tmp [ rand ( 1 , tmp ) ] ;
18916: LD_ADDR_VAR 0 2
18920: PUSH
18921: LD_VAR 0 3
18925: PUSH
18926: LD_INT 1
18928: PPUSH
18929: LD_VAR 0 3
18933: PPUSH
18934: CALL_OW 12
18938: ARRAY
18939: ST_TO_ADDR
// if Crawls ( un ) then
18940: LD_VAR 0 2
18944: PPUSH
18945: CALL_OW 318
18949: IFFALSE 18960
// ComWalk ( un ) ;
18951: LD_VAR 0 2
18955: PPUSH
18956: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18960: LD_VAR 0 2
18964: PPUSH
18965: LD_INT 5
18967: PPUSH
18968: CALL_OW 336
// end ;
18972: PPOPN 3
18974: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18975: LD_EXP 48
18979: IFFALSE 18987
18981: PUSH
18982: LD_EXP 66
18986: AND
18987: IFFALSE 18999
18989: PUSH
18990: LD_OWVAR 67
18994: PUSH
18995: LD_INT 4
18997: LESS
18998: AND
18999: IFFALSE 19018
19001: GO 19003
19003: DISABLE
// begin Difficulty := Difficulty + 1 ;
19004: LD_ADDR_OWVAR 67
19008: PUSH
19009: LD_OWVAR 67
19013: PUSH
19014: LD_INT 1
19016: PLUS
19017: ST_TO_ADDR
// end ;
19018: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19019: LD_EXP 48
19023: IFFALSE 19031
19025: PUSH
19026: LD_EXP 67
19030: AND
19031: IFFALSE 19134
19033: GO 19035
19035: DISABLE
19036: LD_INT 0
19038: PPUSH
// begin for i := 1 to 5 do
19039: LD_ADDR_VAR 0 1
19043: PUSH
19044: DOUBLE
19045: LD_INT 1
19047: DEC
19048: ST_TO_ADDR
19049: LD_INT 5
19051: PUSH
19052: FOR_TO
19053: IFFALSE 19132
// begin uc_nation := nation_nature ;
19055: LD_ADDR_OWVAR 21
19059: PUSH
19060: LD_INT 0
19062: ST_TO_ADDR
// uc_side := 0 ;
19063: LD_ADDR_OWVAR 20
19067: PUSH
19068: LD_INT 0
19070: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19071: LD_ADDR_OWVAR 29
19075: PUSH
19076: LD_INT 12
19078: PUSH
19079: LD_INT 12
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: ST_TO_ADDR
// hc_agressivity := 20 ;
19086: LD_ADDR_OWVAR 35
19090: PUSH
19091: LD_INT 20
19093: ST_TO_ADDR
// hc_class := class_tiger ;
19094: LD_ADDR_OWVAR 28
19098: PUSH
19099: LD_INT 14
19101: ST_TO_ADDR
// hc_gallery :=  ;
19102: LD_ADDR_OWVAR 33
19106: PUSH
19107: LD_STRING 
19109: ST_TO_ADDR
// hc_name :=  ;
19110: LD_ADDR_OWVAR 26
19114: PUSH
19115: LD_STRING 
19117: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19118: CALL_OW 44
19122: PPUSH
19123: LD_INT 0
19125: PPUSH
19126: CALL_OW 51
// end ;
19130: GO 19052
19132: POP
19133: POP
// end ;
19134: PPOPN 1
19136: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19137: LD_EXP 48
19141: IFFALSE 19149
19143: PUSH
19144: LD_EXP 68
19148: AND
19149: IFFALSE 19158
19151: GO 19153
19153: DISABLE
// StreamSibBomb ;
19154: CALL 19159 0 0
19158: END
// export function StreamSibBomb ; var i , x , y ; begin
19159: LD_INT 0
19161: PPUSH
19162: PPUSH
19163: PPUSH
19164: PPUSH
// result := false ;
19165: LD_ADDR_VAR 0 1
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// for i := 1 to 16 do
19173: LD_ADDR_VAR 0 2
19177: PUSH
19178: DOUBLE
19179: LD_INT 1
19181: DEC
19182: ST_TO_ADDR
19183: LD_INT 16
19185: PUSH
19186: FOR_TO
19187: IFFALSE 19386
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_INT 10
19196: PUSH
19197: LD_INT 20
19199: PUSH
19200: LD_INT 30
19202: PUSH
19203: LD_INT 40
19205: PUSH
19206: LD_INT 50
19208: PUSH
19209: LD_INT 60
19211: PUSH
19212: LD_INT 70
19214: PUSH
19215: LD_INT 80
19217: PUSH
19218: LD_INT 90
19220: PUSH
19221: LD_INT 100
19223: PUSH
19224: LD_INT 110
19226: PUSH
19227: LD_INT 120
19229: PUSH
19230: LD_INT 130
19232: PUSH
19233: LD_INT 140
19235: PUSH
19236: LD_INT 150
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PPUSH
19259: LD_INT 15
19261: PPUSH
19262: CALL_OW 12
19266: ARRAY
19267: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19268: LD_ADDR_VAR 0 4
19272: PUSH
19273: LD_INT 10
19275: PUSH
19276: LD_INT 20
19278: PUSH
19279: LD_INT 30
19281: PUSH
19282: LD_INT 40
19284: PUSH
19285: LD_INT 50
19287: PUSH
19288: LD_INT 60
19290: PUSH
19291: LD_INT 70
19293: PUSH
19294: LD_INT 80
19296: PUSH
19297: LD_INT 90
19299: PUSH
19300: LD_INT 100
19302: PUSH
19303: LD_INT 110
19305: PUSH
19306: LD_INT 120
19308: PUSH
19309: LD_INT 130
19311: PUSH
19312: LD_INT 140
19314: PUSH
19315: LD_INT 150
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 1
19337: PPUSH
19338: LD_INT 15
19340: PPUSH
19341: CALL_OW 12
19345: ARRAY
19346: ST_TO_ADDR
// if ValidHex ( x , y ) then
19347: LD_VAR 0 3
19351: PPUSH
19352: LD_VAR 0 4
19356: PPUSH
19357: CALL_OW 488
19361: IFFALSE 19384
// begin result := [ x , y ] ;
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_VAR 0 3
19372: PUSH
19373: LD_VAR 0 4
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: ST_TO_ADDR
// break ;
19382: GO 19386
// end ; end ;
19384: GO 19186
19386: POP
19387: POP
// if result then
19388: LD_VAR 0 1
19392: IFFALSE 19452
// begin ToLua ( playSibBomb() ) ;
19394: LD_STRING playSibBomb()
19396: PPUSH
19397: CALL_OW 559
// wait ( 0 0$14 ) ;
19401: LD_INT 490
19403: PPUSH
19404: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19408: LD_VAR 0 1
19412: PUSH
19413: LD_INT 1
19415: ARRAY
19416: PPUSH
19417: LD_VAR 0 1
19421: PUSH
19422: LD_INT 2
19424: ARRAY
19425: PPUSH
19426: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19430: LD_VAR 0 1
19434: PUSH
19435: LD_INT 1
19437: ARRAY
19438: PPUSH
19439: LD_VAR 0 1
19443: PUSH
19444: LD_INT 2
19446: ARRAY
19447: PPUSH
19448: CALL_OW 429
// end ; end ;
19452: LD_VAR 0 1
19456: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19457: LD_EXP 48
19461: IFFALSE 19469
19463: PUSH
19464: LD_EXP 70
19468: AND
19469: IFFALSE 19481
19471: GO 19473
19473: DISABLE
// YouLost (  ) ;
19474: LD_STRING 
19476: PPUSH
19477: CALL_OW 104
19481: END
// every 0 0$1 trigger StreamModeActive and sFog do
19482: LD_EXP 48
19486: IFFALSE 19494
19488: PUSH
19489: LD_EXP 69
19493: AND
19494: IFFALSE 19508
19496: GO 19498
19498: DISABLE
// FogOff ( your_side ) ;
19499: LD_OWVAR 2
19503: PPUSH
19504: CALL_OW 344
19508: END
// every 0 0$1 trigger StreamModeActive and sSun do
19509: LD_EXP 48
19513: IFFALSE 19521
19515: PUSH
19516: LD_EXP 71
19520: AND
19521: IFFALSE 19549
19523: GO 19525
19525: DISABLE
// begin solar_recharge_percent := 0 ;
19526: LD_ADDR_OWVAR 79
19530: PUSH
19531: LD_INT 0
19533: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19534: LD_INT 10500
19536: PPUSH
19537: CALL_OW 67
// solar_recharge_percent := 100 ;
19541: LD_ADDR_OWVAR 79
19545: PUSH
19546: LD_INT 100
19548: ST_TO_ADDR
// end ;
19549: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19550: LD_EXP 48
19554: IFFALSE 19562
19556: PUSH
19557: LD_EXP 72
19561: AND
19562: IFFALSE 19801
19564: GO 19566
19566: DISABLE
19567: LD_INT 0
19569: PPUSH
19570: PPUSH
19571: PPUSH
// begin tmp := [ ] ;
19572: LD_ADDR_VAR 0 3
19576: PUSH
19577: EMPTY
19578: ST_TO_ADDR
// for i := 1 to 6 do
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: DOUBLE
19585: LD_INT 1
19587: DEC
19588: ST_TO_ADDR
19589: LD_INT 6
19591: PUSH
19592: FOR_TO
19593: IFFALSE 19698
// begin uc_nation := nation_nature ;
19595: LD_ADDR_OWVAR 21
19599: PUSH
19600: LD_INT 0
19602: ST_TO_ADDR
// uc_side := 0 ;
19603: LD_ADDR_OWVAR 20
19607: PUSH
19608: LD_INT 0
19610: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19611: LD_ADDR_OWVAR 29
19615: PUSH
19616: LD_INT 12
19618: PUSH
19619: LD_INT 12
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: ST_TO_ADDR
// hc_agressivity := 20 ;
19626: LD_ADDR_OWVAR 35
19630: PUSH
19631: LD_INT 20
19633: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19634: LD_ADDR_OWVAR 28
19638: PUSH
19639: LD_INT 17
19641: ST_TO_ADDR
// hc_gallery :=  ;
19642: LD_ADDR_OWVAR 33
19646: PUSH
19647: LD_STRING 
19649: ST_TO_ADDR
// hc_name :=  ;
19650: LD_ADDR_OWVAR 26
19654: PUSH
19655: LD_STRING 
19657: ST_TO_ADDR
// un := CreateHuman ;
19658: LD_ADDR_VAR 0 2
19662: PUSH
19663: CALL_OW 44
19667: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19668: LD_VAR 0 2
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 51
// tmp := tmp ^ un ;
19680: LD_ADDR_VAR 0 3
19684: PUSH
19685: LD_VAR 0 3
19689: PUSH
19690: LD_VAR 0 2
19694: ADD
19695: ST_TO_ADDR
// end ;
19696: GO 19592
19698: POP
19699: POP
// repeat wait ( 0 0$1 ) ;
19700: LD_INT 35
19702: PPUSH
19703: CALL_OW 67
// for un in tmp do
19707: LD_ADDR_VAR 0 2
19711: PUSH
19712: LD_VAR 0 3
19716: PUSH
19717: FOR_IN
19718: IFFALSE 19792
// begin if IsDead ( un ) then
19720: LD_VAR 0 2
19724: PPUSH
19725: CALL_OW 301
19729: IFFALSE 19749
// begin tmp := tmp diff un ;
19731: LD_ADDR_VAR 0 3
19735: PUSH
19736: LD_VAR 0 3
19740: PUSH
19741: LD_VAR 0 2
19745: DIFF
19746: ST_TO_ADDR
// continue ;
19747: GO 19717
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_INT 3
19756: PUSH
19757: LD_INT 22
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: PPUSH
19776: LD_VAR 0 2
19780: PPUSH
19781: CALL_OW 74
19785: PPUSH
19786: CALL_OW 115
// end ;
19790: GO 19717
19792: POP
19793: POP
// until not tmp ;
19794: LD_VAR 0 3
19798: NOT
19799: IFFALSE 19700
// end ;
19801: PPOPN 3
19803: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19804: LD_EXP 48
19808: IFFALSE 19816
19810: PUSH
19811: LD_EXP 73
19815: AND
19816: IFFALSE 19870
19818: GO 19820
19820: DISABLE
// begin ToLua ( displayTroll(); ) ;
19821: LD_STRING displayTroll();
19823: PPUSH
19824: CALL_OW 559
// wait ( 3 3$00 ) ;
19828: LD_INT 6300
19830: PPUSH
19831: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19835: LD_STRING hideTroll();
19837: PPUSH
19838: CALL_OW 559
// wait ( 1 1$00 ) ;
19842: LD_INT 2100
19844: PPUSH
19845: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19849: LD_STRING displayTroll();
19851: PPUSH
19852: CALL_OW 559
// wait ( 1 1$00 ) ;
19856: LD_INT 2100
19858: PPUSH
19859: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19863: LD_STRING hideTroll();
19865: PPUSH
19866: CALL_OW 559
// end ;
19870: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19871: LD_EXP 48
19875: IFFALSE 19883
19877: PUSH
19878: LD_EXP 74
19882: AND
19883: IFFALSE 19946
19885: GO 19887
19887: DISABLE
19888: LD_INT 0
19890: PPUSH
// begin p := 0 ;
19891: LD_ADDR_VAR 0 1
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// repeat game_speed := 1 ;
19899: LD_ADDR_OWVAR 65
19903: PUSH
19904: LD_INT 1
19906: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19907: LD_INT 35
19909: PPUSH
19910: CALL_OW 67
// p := p + 1 ;
19914: LD_ADDR_VAR 0 1
19918: PUSH
19919: LD_VAR 0 1
19923: PUSH
19924: LD_INT 1
19926: PLUS
19927: ST_TO_ADDR
// until p >= 60 ;
19928: LD_VAR 0 1
19932: PUSH
19933: LD_INT 60
19935: GREATEREQUAL
19936: IFFALSE 19899
// game_speed := 4 ;
19938: LD_ADDR_OWVAR 65
19942: PUSH
19943: LD_INT 4
19945: ST_TO_ADDR
// end ;
19946: PPOPN 1
19948: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19949: LD_EXP 48
19953: IFFALSE 19961
19955: PUSH
19956: LD_EXP 75
19960: AND
19961: IFFALSE 20107
19963: GO 19965
19965: DISABLE
19966: LD_INT 0
19968: PPUSH
19969: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19970: LD_ADDR_VAR 0 1
19974: PUSH
19975: LD_INT 22
19977: PUSH
19978: LD_OWVAR 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: LD_INT 30
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 30
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PPUSH
20019: CALL_OW 69
20023: ST_TO_ADDR
// if not depot then
20024: LD_VAR 0 1
20028: NOT
20029: IFFALSE 20033
// exit ;
20031: GO 20107
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20033: LD_ADDR_VAR 0 2
20037: PUSH
20038: LD_VAR 0 1
20042: PUSH
20043: LD_INT 1
20045: PPUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 12
20055: ARRAY
20056: PPUSH
20057: CALL_OW 274
20061: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20062: LD_VAR 0 2
20066: PPUSH
20067: LD_INT 1
20069: PPUSH
20070: LD_INT 0
20072: PPUSH
20073: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20077: LD_VAR 0 2
20081: PPUSH
20082: LD_INT 2
20084: PPUSH
20085: LD_INT 0
20087: PPUSH
20088: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20092: LD_VAR 0 2
20096: PPUSH
20097: LD_INT 3
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 277
// end ;
20107: PPOPN 2
20109: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20110: LD_EXP 48
20114: IFFALSE 20122
20116: PUSH
20117: LD_EXP 76
20121: AND
20122: IFFALSE 20219
20124: GO 20126
20126: DISABLE
20127: LD_INT 0
20129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20130: LD_ADDR_VAR 0 1
20134: PUSH
20135: LD_INT 22
20137: PUSH
20138: LD_OWVAR 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 21
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 3
20159: PUSH
20160: LD_INT 23
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: PPUSH
20179: CALL_OW 69
20183: ST_TO_ADDR
// if not tmp then
20184: LD_VAR 0 1
20188: NOT
20189: IFFALSE 20193
// exit ;
20191: GO 20219
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20193: LD_VAR 0 1
20197: PUSH
20198: LD_INT 1
20200: PPUSH
20201: LD_VAR 0 1
20205: PPUSH
20206: CALL_OW 12
20210: ARRAY
20211: PPUSH
20212: LD_INT 200
20214: PPUSH
20215: CALL_OW 234
// end ;
20219: PPOPN 1
20221: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20222: LD_EXP 48
20226: IFFALSE 20234
20228: PUSH
20229: LD_EXP 77
20233: AND
20234: IFFALSE 20313
20236: GO 20238
20238: DISABLE
20239: LD_INT 0
20241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: LD_INT 22
20249: PUSH
20250: LD_OWVAR 2
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 21
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PPUSH
20273: CALL_OW 69
20277: ST_TO_ADDR
// if not tmp then
20278: LD_VAR 0 1
20282: NOT
20283: IFFALSE 20287
// exit ;
20285: GO 20313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20287: LD_VAR 0 1
20291: PUSH
20292: LD_INT 1
20294: PPUSH
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 12
20304: ARRAY
20305: PPUSH
20306: LD_INT 60
20308: PPUSH
20309: CALL_OW 234
// end ;
20313: PPOPN 1
20315: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20316: LD_EXP 48
20320: IFFALSE 20328
20322: PUSH
20323: LD_EXP 78
20327: AND
20328: IFFALSE 20427
20330: GO 20332
20332: DISABLE
20333: LD_INT 0
20335: PPUSH
20336: PPUSH
// begin enable ;
20337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20338: LD_ADDR_VAR 0 1
20342: PUSH
20343: LD_INT 22
20345: PUSH
20346: LD_OWVAR 2
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 61
20357: PUSH
20358: EMPTY
20359: LIST
20360: PUSH
20361: LD_INT 33
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// if not tmp then
20381: LD_VAR 0 1
20385: NOT
20386: IFFALSE 20390
// exit ;
20388: GO 20427
// for i in tmp do
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: LD_VAR 0 1
20399: PUSH
20400: FOR_IN
20401: IFFALSE 20425
// if IsControledBy ( i ) then
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 312
20412: IFFALSE 20423
// ComUnlink ( i ) ;
20414: LD_VAR 0 2
20418: PPUSH
20419: CALL_OW 136
20423: GO 20400
20425: POP
20426: POP
// end ;
20427: PPOPN 2
20429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20430: LD_EXP 48
20434: IFFALSE 20442
20436: PUSH
20437: LD_EXP 79
20441: AND
20442: IFFALSE 20582
20444: GO 20446
20446: DISABLE
20447: LD_INT 0
20449: PPUSH
20450: PPUSH
// begin ToLua ( displayPowell(); ) ;
20451: LD_STRING displayPowell();
20453: PPUSH
20454: CALL_OW 559
// uc_side := 0 ;
20458: LD_ADDR_OWVAR 20
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// uc_nation := 2 ;
20466: LD_ADDR_OWVAR 21
20470: PUSH
20471: LD_INT 2
20473: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20474: LD_ADDR_OWVAR 37
20478: PUSH
20479: LD_INT 14
20481: ST_TO_ADDR
// vc_engine := engine_siberite ;
20482: LD_ADDR_OWVAR 39
20486: PUSH
20487: LD_INT 3
20489: ST_TO_ADDR
// vc_control := control_apeman ;
20490: LD_ADDR_OWVAR 38
20494: PUSH
20495: LD_INT 5
20497: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20498: LD_ADDR_OWVAR 40
20502: PUSH
20503: LD_INT 29
20505: ST_TO_ADDR
// un := CreateVehicle ;
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: CALL_OW 45
20515: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20516: LD_VAR 0 2
20520: PPUSH
20521: LD_INT 1
20523: PPUSH
20524: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20528: LD_INT 35
20530: PPUSH
20531: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20535: LD_VAR 0 2
20539: PPUSH
20540: LD_INT 22
20542: PUSH
20543: LD_OWVAR 2
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PPUSH
20552: CALL_OW 69
20556: PPUSH
20557: LD_VAR 0 2
20561: PPUSH
20562: CALL_OW 74
20566: PPUSH
20567: CALL_OW 115
// until IsDead ( un ) ;
20571: LD_VAR 0 2
20575: PPUSH
20576: CALL_OW 301
20580: IFFALSE 20528
// end ;
20582: PPOPN 2
20584: END
// every 0 0$1 trigger StreamModeActive and sStu do
20585: LD_EXP 48
20589: IFFALSE 20597
20591: PUSH
20592: LD_EXP 87
20596: AND
20597: IFFALSE 20613
20599: GO 20601
20601: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20602: LD_STRING displayStucuk();
20604: PPUSH
20605: CALL_OW 559
// ResetFog ;
20609: CALL_OW 335
// end ;
20613: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20614: LD_EXP 48
20618: IFFALSE 20626
20620: PUSH
20621: LD_EXP 80
20625: AND
20626: IFFALSE 20767
20628: GO 20630
20630: DISABLE
20631: LD_INT 0
20633: PPUSH
20634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_OWVAR 2
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 21
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PPUSH
20666: CALL_OW 69
20670: ST_TO_ADDR
// if not tmp then
20671: LD_VAR 0 2
20675: NOT
20676: IFFALSE 20680
// exit ;
20678: GO 20767
// un := tmp [ rand ( 1 , tmp ) ] ;
20680: LD_ADDR_VAR 0 1
20684: PUSH
20685: LD_VAR 0 2
20689: PUSH
20690: LD_INT 1
20692: PPUSH
20693: LD_VAR 0 2
20697: PPUSH
20698: CALL_OW 12
20702: ARRAY
20703: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20704: LD_VAR 0 1
20708: PPUSH
20709: LD_INT 0
20711: PPUSH
20712: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20716: LD_VAR 0 1
20720: PPUSH
20721: LD_OWVAR 3
20725: PUSH
20726: LD_VAR 0 1
20730: DIFF
20731: PPUSH
20732: LD_VAR 0 1
20736: PPUSH
20737: CALL_OW 74
20741: PPUSH
20742: CALL_OW 115
// wait ( 0 0$20 ) ;
20746: LD_INT 700
20748: PPUSH
20749: CALL_OW 67
// SetSide ( un , your_side ) ;
20753: LD_VAR 0 1
20757: PPUSH
20758: LD_OWVAR 2
20762: PPUSH
20763: CALL_OW 235
// end ;
20767: PPOPN 2
20769: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20770: LD_EXP 48
20774: IFFALSE 20782
20776: PUSH
20777: LD_EXP 81
20781: AND
20782: IFFALSE 20888
20784: GO 20786
20786: DISABLE
20787: LD_INT 0
20789: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20790: LD_ADDR_VAR 0 1
20794: PUSH
20795: LD_INT 22
20797: PUSH
20798: LD_OWVAR 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 30
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 30
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PPUSH
20839: CALL_OW 69
20843: ST_TO_ADDR
// if not depot then
20844: LD_VAR 0 1
20848: NOT
20849: IFFALSE 20853
// exit ;
20851: GO 20888
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20853: LD_VAR 0 1
20857: PUSH
20858: LD_INT 1
20860: ARRAY
20861: PPUSH
20862: CALL_OW 250
20866: PPUSH
20867: LD_VAR 0 1
20871: PUSH
20872: LD_INT 1
20874: ARRAY
20875: PPUSH
20876: CALL_OW 251
20880: PPUSH
20881: LD_INT 70
20883: PPUSH
20884: CALL_OW 495
// end ;
20888: PPOPN 1
20890: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20891: LD_EXP 48
20895: IFFALSE 20903
20897: PUSH
20898: LD_EXP 82
20902: AND
20903: IFFALSE 21114
20905: GO 20907
20907: DISABLE
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20915: LD_ADDR_VAR 0 5
20919: PUSH
20920: LD_INT 22
20922: PUSH
20923: LD_OWVAR 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 21
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 5
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21114
// for i in tmp do
20960: LD_ADDR_VAR 0 1
20964: PUSH
20965: LD_VAR 0 5
20969: PUSH
20970: FOR_IN
20971: IFFALSE 21112
// begin d := rand ( 0 , 5 ) ;
20973: LD_ADDR_VAR 0 4
20977: PUSH
20978: LD_INT 0
20980: PPUSH
20981: LD_INT 5
20983: PPUSH
20984: CALL_OW 12
20988: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL_OW 250
21003: PPUSH
21004: LD_VAR 0 4
21008: PPUSH
21009: LD_INT 3
21011: PPUSH
21012: LD_INT 12
21014: PPUSH
21015: CALL_OW 12
21019: PPUSH
21020: CALL_OW 272
21024: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21025: LD_ADDR_VAR 0 3
21029: PUSH
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 251
21039: PPUSH
21040: LD_VAR 0 4
21044: PPUSH
21045: LD_INT 3
21047: PPUSH
21048: LD_INT 12
21050: PPUSH
21051: CALL_OW 12
21055: PPUSH
21056: CALL_OW 273
21060: ST_TO_ADDR
// if ValidHex ( x , y ) then
21061: LD_VAR 0 2
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: CALL_OW 488
21075: IFFALSE 21110
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21077: LD_VAR 0 1
21081: PPUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 3
21094: PPUSH
21095: LD_INT 6
21097: PPUSH
21098: CALL_OW 12
21102: PPUSH
21103: LD_INT 1
21105: PPUSH
21106: CALL_OW 483
// end ;
21110: GO 20970
21112: POP
21113: POP
// end ;
21114: PPOPN 5
21116: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21117: LD_EXP 48
21121: IFFALSE 21129
21123: PUSH
21124: LD_EXP 83
21128: AND
21129: IFFALSE 21223
21131: GO 21133
21133: DISABLE
21134: LD_INT 0
21136: PPUSH
21137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21138: LD_ADDR_VAR 0 2
21142: PUSH
21143: LD_INT 22
21145: PUSH
21146: LD_OWVAR 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 32
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 21
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: PPUSH
21180: CALL_OW 69
21184: ST_TO_ADDR
// if not tmp then
21185: LD_VAR 0 2
21189: NOT
21190: IFFALSE 21194
// exit ;
21192: GO 21223
// for i in tmp do
21194: LD_ADDR_VAR 0 1
21198: PUSH
21199: LD_VAR 0 2
21203: PUSH
21204: FOR_IN
21205: IFFALSE 21221
// SetFuel ( i , 0 ) ;
21207: LD_VAR 0 1
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 240
21219: GO 21204
21221: POP
21222: POP
// end ;
21223: PPOPN 2
21225: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21226: LD_EXP 48
21230: IFFALSE 21238
21232: PUSH
21233: LD_EXP 84
21237: AND
21238: IFFALSE 21304
21240: GO 21242
21242: DISABLE
21243: LD_INT 0
21245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21246: LD_ADDR_VAR 0 1
21250: PUSH
21251: LD_INT 22
21253: PUSH
21254: LD_OWVAR 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 30
21265: PUSH
21266: LD_INT 29
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PPUSH
21277: CALL_OW 69
21281: ST_TO_ADDR
// if not tmp then
21282: LD_VAR 0 1
21286: NOT
21287: IFFALSE 21291
// exit ;
21289: GO 21304
// DestroyUnit ( tmp [ 1 ] ) ;
21291: LD_VAR 0 1
21295: PUSH
21296: LD_INT 1
21298: ARRAY
21299: PPUSH
21300: CALL_OW 65
// end ;
21304: PPOPN 1
21306: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21307: LD_EXP 48
21311: IFFALSE 21319
21313: PUSH
21314: LD_EXP 86
21318: AND
21319: IFFALSE 21448
21321: GO 21323
21323: DISABLE
21324: LD_INT 0
21326: PPUSH
// begin uc_side := 0 ;
21327: LD_ADDR_OWVAR 20
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// uc_nation := nation_arabian ;
21335: LD_ADDR_OWVAR 21
21339: PUSH
21340: LD_INT 2
21342: ST_TO_ADDR
// hc_gallery :=  ;
21343: LD_ADDR_OWVAR 33
21347: PUSH
21348: LD_STRING 
21350: ST_TO_ADDR
// hc_name :=  ;
21351: LD_ADDR_OWVAR 26
21355: PUSH
21356: LD_STRING 
21358: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21359: LD_INT 1
21361: PPUSH
21362: LD_INT 11
21364: PPUSH
21365: LD_INT 10
21367: PPUSH
21368: CALL_OW 380
// un := CreateHuman ;
21372: LD_ADDR_VAR 0 1
21376: PUSH
21377: CALL_OW 44
21381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21394: LD_INT 35
21396: PPUSH
21397: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21401: LD_VAR 0 1
21405: PPUSH
21406: LD_INT 22
21408: PUSH
21409: LD_OWVAR 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: PPUSH
21423: LD_VAR 0 1
21427: PPUSH
21428: CALL_OW 74
21432: PPUSH
21433: CALL_OW 115
// until IsDead ( un ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 301
21446: IFFALSE 21394
// end ;
21448: PPOPN 1
21450: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21451: LD_EXP 48
21455: IFFALSE 21463
21457: PUSH
21458: LD_EXP 88
21462: AND
21463: IFFALSE 21475
21465: GO 21467
21467: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21468: LD_STRING earthquake(getX(game), 0, 32)
21470: PPUSH
21471: CALL_OW 559
21475: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21476: LD_EXP 48
21480: IFFALSE 21488
21482: PUSH
21483: LD_EXP 89
21487: AND
21488: IFFALSE 21579
21490: GO 21492
21492: DISABLE
21493: LD_INT 0
21495: PPUSH
// begin enable ;
21496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21497: LD_ADDR_VAR 0 1
21501: PUSH
21502: LD_INT 22
21504: PUSH
21505: LD_OWVAR 2
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 21
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 33
21526: PUSH
21527: LD_INT 3
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: LIST
21538: PPUSH
21539: CALL_OW 69
21543: ST_TO_ADDR
// if not tmp then
21544: LD_VAR 0 1
21548: NOT
21549: IFFALSE 21553
// exit ;
21551: GO 21579
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21553: LD_VAR 0 1
21557: PUSH
21558: LD_INT 1
21560: PPUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 12
21570: ARRAY
21571: PPUSH
21572: LD_INT 1
21574: PPUSH
21575: CALL_OW 234
// end ;
21579: PPOPN 1
21581: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21582: LD_EXP 48
21586: IFFALSE 21594
21588: PUSH
21589: LD_EXP 90
21593: AND
21594: IFFALSE 21735
21596: GO 21598
21598: DISABLE
21599: LD_INT 0
21601: PPUSH
21602: PPUSH
21603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_OWVAR 2
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 25
21623: PUSH
21624: LD_INT 1
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PPUSH
21635: CALL_OW 69
21639: ST_TO_ADDR
// if not tmp then
21640: LD_VAR 0 3
21644: NOT
21645: IFFALSE 21649
// exit ;
21647: GO 21735
// un := tmp [ rand ( 1 , tmp ) ] ;
21649: LD_ADDR_VAR 0 2
21653: PUSH
21654: LD_VAR 0 3
21658: PUSH
21659: LD_INT 1
21661: PPUSH
21662: LD_VAR 0 3
21666: PPUSH
21667: CALL_OW 12
21671: ARRAY
21672: ST_TO_ADDR
// if Crawls ( un ) then
21673: LD_VAR 0 2
21677: PPUSH
21678: CALL_OW 318
21682: IFFALSE 21693
// ComWalk ( un ) ;
21684: LD_VAR 0 2
21688: PPUSH
21689: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21693: LD_VAR 0 2
21697: PPUSH
21698: LD_INT 9
21700: PPUSH
21701: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21705: LD_INT 28
21707: PPUSH
21708: LD_OWVAR 2
21712: PPUSH
21713: LD_INT 2
21715: PPUSH
21716: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21720: LD_INT 29
21722: PPUSH
21723: LD_OWVAR 2
21727: PPUSH
21728: LD_INT 2
21730: PPUSH
21731: CALL_OW 322
// end ;
21735: PPOPN 3
21737: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21738: LD_EXP 48
21742: IFFALSE 21750
21744: PUSH
21745: LD_EXP 91
21749: AND
21750: IFFALSE 21861
21752: GO 21754
21754: DISABLE
21755: LD_INT 0
21757: PPUSH
21758: PPUSH
21759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21760: LD_ADDR_VAR 0 3
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_OWVAR 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 25
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PPUSH
21791: CALL_OW 69
21795: ST_TO_ADDR
// if not tmp then
21796: LD_VAR 0 3
21800: NOT
21801: IFFALSE 21805
// exit ;
21803: GO 21861
// un := tmp [ rand ( 1 , tmp ) ] ;
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: LD_VAR 0 3
21814: PUSH
21815: LD_INT 1
21817: PPUSH
21818: LD_VAR 0 3
21822: PPUSH
21823: CALL_OW 12
21827: ARRAY
21828: ST_TO_ADDR
// if Crawls ( un ) then
21829: LD_VAR 0 2
21833: PPUSH
21834: CALL_OW 318
21838: IFFALSE 21849
// ComWalk ( un ) ;
21840: LD_VAR 0 2
21844: PPUSH
21845: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21849: LD_VAR 0 2
21853: PPUSH
21854: LD_INT 8
21856: PPUSH
21857: CALL_OW 336
// end ;
21861: PPOPN 3
21863: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21864: LD_EXP 48
21868: IFFALSE 21876
21870: PUSH
21871: LD_EXP 92
21875: AND
21876: IFFALSE 22020
21878: GO 21880
21880: DISABLE
21881: LD_INT 0
21883: PPUSH
21884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_OWVAR 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 21
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: LD_INT 34
21917: PUSH
21918: LD_INT 12
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 34
21927: PUSH
21928: LD_INT 51
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 34
21937: PUSH
21938: LD_INT 32
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: PPUSH
21956: CALL_OW 69
21960: ST_TO_ADDR
// if not tmp then
21961: LD_VAR 0 2
21965: NOT
21966: IFFALSE 21970
// exit ;
21968: GO 22020
// for i in tmp do
21970: LD_ADDR_VAR 0 1
21974: PUSH
21975: LD_VAR 0 2
21979: PUSH
21980: FOR_IN
21981: IFFALSE 22018
// if GetCargo ( i , mat_artifact ) = 0 then
21983: LD_VAR 0 1
21987: PPUSH
21988: LD_INT 4
21990: PPUSH
21991: CALL_OW 289
21995: PUSH
21996: LD_INT 0
21998: EQUAL
21999: IFFALSE 22016
// SetCargo ( i , mat_siberit , 100 ) ;
22001: LD_VAR 0 1
22005: PPUSH
22006: LD_INT 3
22008: PPUSH
22009: LD_INT 100
22011: PPUSH
22012: CALL_OW 290
22016: GO 21980
22018: POP
22019: POP
// end ;
22020: PPOPN 2
22022: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22023: LD_EXP 48
22027: IFFALSE 22035
22029: PUSH
22030: LD_EXP 93
22034: AND
22035: IFFALSE 22218
22037: GO 22039
22039: DISABLE
22040: LD_INT 0
22042: PPUSH
22043: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22044: LD_ADDR_VAR 0 2
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_OWVAR 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PPUSH
22061: CALL_OW 69
22065: ST_TO_ADDR
// if not tmp then
22066: LD_VAR 0 2
22070: NOT
22071: IFFALSE 22075
// exit ;
22073: GO 22218
// for i := 1 to 2 do
22075: LD_ADDR_VAR 0 1
22079: PUSH
22080: DOUBLE
22081: LD_INT 1
22083: DEC
22084: ST_TO_ADDR
22085: LD_INT 2
22087: PUSH
22088: FOR_TO
22089: IFFALSE 22216
// begin uc_side := your_side ;
22091: LD_ADDR_OWVAR 20
22095: PUSH
22096: LD_OWVAR 2
22100: ST_TO_ADDR
// uc_nation := nation_american ;
22101: LD_ADDR_OWVAR 21
22105: PUSH
22106: LD_INT 1
22108: ST_TO_ADDR
// vc_chassis := us_morphling ;
22109: LD_ADDR_OWVAR 37
22113: PUSH
22114: LD_INT 5
22116: ST_TO_ADDR
// vc_engine := engine_siberite ;
22117: LD_ADDR_OWVAR 39
22121: PUSH
22122: LD_INT 3
22124: ST_TO_ADDR
// vc_control := control_computer ;
22125: LD_ADDR_OWVAR 38
22129: PUSH
22130: LD_INT 3
22132: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22133: LD_ADDR_OWVAR 40
22137: PUSH
22138: LD_INT 10
22140: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22141: LD_VAR 0 2
22145: PUSH
22146: LD_INT 1
22148: ARRAY
22149: PPUSH
22150: CALL_OW 310
22154: NOT
22155: IFFALSE 22202
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22157: CALL_OW 45
22161: PPUSH
22162: LD_VAR 0 2
22166: PUSH
22167: LD_INT 1
22169: ARRAY
22170: PPUSH
22171: CALL_OW 250
22175: PPUSH
22176: LD_VAR 0 2
22180: PUSH
22181: LD_INT 1
22183: ARRAY
22184: PPUSH
22185: CALL_OW 251
22189: PPUSH
22190: LD_INT 12
22192: PPUSH
22193: LD_INT 1
22195: PPUSH
22196: CALL_OW 50
22200: GO 22214
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22202: CALL_OW 45
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 51
// end ;
22214: GO 22088
22216: POP
22217: POP
// end ;
22218: PPOPN 2
22220: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22221: LD_EXP 48
22225: IFFALSE 22233
22227: PUSH
22228: LD_EXP 94
22232: AND
22233: IFFALSE 22455
22235: GO 22237
22237: DISABLE
22238: LD_INT 0
22240: PPUSH
22241: PPUSH
22242: PPUSH
22243: PPUSH
22244: PPUSH
22245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22246: LD_ADDR_VAR 0 6
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_OWVAR 2
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 21
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: LD_INT 23
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: PPUSH
22295: CALL_OW 69
22299: ST_TO_ADDR
// if not tmp then
22300: LD_VAR 0 6
22304: NOT
22305: IFFALSE 22309
// exit ;
22307: GO 22455
// s1 := rand ( 1 , 4 ) ;
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 1
22316: PPUSH
22317: LD_INT 4
22319: PPUSH
22320: CALL_OW 12
22324: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22325: LD_ADDR_VAR 0 4
22329: PUSH
22330: LD_VAR 0 6
22334: PUSH
22335: LD_INT 1
22337: ARRAY
22338: PPUSH
22339: LD_VAR 0 2
22343: PPUSH
22344: CALL_OW 259
22348: ST_TO_ADDR
// if s1 = 1 then
22349: LD_VAR 0 2
22353: PUSH
22354: LD_INT 1
22356: EQUAL
22357: IFFALSE 22377
// s2 := rand ( 2 , 4 ) else
22359: LD_ADDR_VAR 0 3
22363: PUSH
22364: LD_INT 2
22366: PPUSH
22367: LD_INT 4
22369: PPUSH
22370: CALL_OW 12
22374: ST_TO_ADDR
22375: GO 22385
// s2 := 1 ;
22377: LD_ADDR_VAR 0 3
22381: PUSH
22382: LD_INT 1
22384: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22385: LD_ADDR_VAR 0 5
22389: PUSH
22390: LD_VAR 0 6
22394: PUSH
22395: LD_INT 1
22397: ARRAY
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: CALL_OW 259
22408: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22409: LD_VAR 0 6
22413: PUSH
22414: LD_INT 1
22416: ARRAY
22417: PPUSH
22418: LD_VAR 0 2
22422: PPUSH
22423: LD_VAR 0 5
22427: PPUSH
22428: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22432: LD_VAR 0 6
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: LD_VAR 0 3
22445: PPUSH
22446: LD_VAR 0 4
22450: PPUSH
22451: CALL_OW 237
// end ;
22455: PPOPN 6
22457: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22458: LD_EXP 48
22462: IFFALSE 22470
22464: PUSH
22465: LD_EXP 95
22469: AND
22470: IFFALSE 22549
22472: GO 22474
22474: DISABLE
22475: LD_INT 0
22477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22478: LD_ADDR_VAR 0 1
22482: PUSH
22483: LD_INT 22
22485: PUSH
22486: LD_OWVAR 2
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PPUSH
22509: CALL_OW 69
22513: ST_TO_ADDR
// if not tmp then
22514: LD_VAR 0 1
22518: NOT
22519: IFFALSE 22523
// exit ;
22521: GO 22549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22523: LD_VAR 0 1
22527: PUSH
22528: LD_INT 1
22530: PPUSH
22531: LD_VAR 0 1
22535: PPUSH
22536: CALL_OW 12
22540: ARRAY
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL_OW 234
// end ;
22549: PPOPN 1
22551: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22552: LD_EXP 48
22556: IFFALSE 22564
22558: PUSH
22559: LD_EXP 96
22563: AND
22564: IFFALSE 22676
22566: GO 22568
22568: DISABLE
22569: LD_INT 0
22571: PPUSH
22572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22573: LD_ADDR_VAR 0 2
22577: PUSH
22578: LD_INT 22
22580: PUSH
22581: LD_OWVAR 2
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 30
22595: PUSH
22596: LD_INT 27
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 26
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 30
22615: PUSH
22616: LD_INT 28
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PPUSH
22633: CALL_OW 69
22637: ST_TO_ADDR
// if not tmp then
22638: LD_VAR 0 2
22642: NOT
22643: IFFALSE 22647
// exit ;
22645: GO 22676
// for i in tmp do
22647: LD_ADDR_VAR 0 1
22651: PUSH
22652: LD_VAR 0 2
22656: PUSH
22657: FOR_IN
22658: IFFALSE 22674
// SetLives ( i , 1 ) ;
22660: LD_VAR 0 1
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 234
22672: GO 22657
22674: POP
22675: POP
// end ;
22676: PPOPN 2
22678: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22679: LD_EXP 48
22683: IFFALSE 22691
22685: PUSH
22686: LD_EXP 97
22690: AND
22691: IFFALSE 22978
22693: GO 22695
22695: DISABLE
22696: LD_INT 0
22698: PPUSH
22699: PPUSH
22700: PPUSH
// begin i := rand ( 1 , 7 ) ;
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_INT 1
22708: PPUSH
22709: LD_INT 7
22711: PPUSH
22712: CALL_OW 12
22716: ST_TO_ADDR
// case i of 1 :
22717: LD_VAR 0 1
22721: PUSH
22722: LD_INT 1
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 22740
22730: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22731: LD_STRING earthquake(getX(game), 0, 32)
22733: PPUSH
22734: CALL_OW 559
22738: GO 22978
22740: LD_INT 2
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22762
22748: POP
// begin ToLua ( displayStucuk(); ) ;
22749: LD_STRING displayStucuk();
22751: PPUSH
22752: CALL_OW 559
// ResetFog ;
22756: CALL_OW 335
// end ; 3 :
22760: GO 22978
22762: LD_INT 3
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 22874
22770: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22771: LD_ADDR_VAR 0 2
22775: PUSH
22776: LD_INT 22
22778: PUSH
22779: LD_OWVAR 2
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 25
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PPUSH
22802: CALL_OW 69
22806: ST_TO_ADDR
// if not tmp then
22807: LD_VAR 0 2
22811: NOT
22812: IFFALSE 22816
// exit ;
22814: GO 22978
// un := tmp [ rand ( 1 , tmp ) ] ;
22816: LD_ADDR_VAR 0 3
22820: PUSH
22821: LD_VAR 0 2
22825: PUSH
22826: LD_INT 1
22828: PPUSH
22829: LD_VAR 0 2
22833: PPUSH
22834: CALL_OW 12
22838: ARRAY
22839: ST_TO_ADDR
// if Crawls ( un ) then
22840: LD_VAR 0 3
22844: PPUSH
22845: CALL_OW 318
22849: IFFALSE 22860
// ComWalk ( un ) ;
22851: LD_VAR 0 3
22855: PPUSH
22856: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22860: LD_VAR 0 3
22864: PPUSH
22865: LD_INT 8
22867: PPUSH
22868: CALL_OW 336
// end ; 4 :
22872: GO 22978
22874: LD_INT 4
22876: DOUBLE
22877: EQUAL
22878: IFTRUE 22882
22880: GO 22956
22882: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22883: LD_ADDR_VAR 0 2
22887: PUSH
22888: LD_INT 22
22890: PUSH
22891: LD_OWVAR 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 30
22902: PUSH
22903: LD_INT 29
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 69
22918: ST_TO_ADDR
// if not tmp then
22919: LD_VAR 0 2
22923: NOT
22924: IFFALSE 22928
// exit ;
22926: GO 22978
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22928: LD_VAR 0 2
22932: PUSH
22933: LD_INT 1
22935: ARRAY
22936: PPUSH
22937: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22941: LD_VAR 0 2
22945: PUSH
22946: LD_INT 1
22948: ARRAY
22949: PPUSH
22950: CALL_OW 65
// end ; 5 .. 7 :
22954: GO 22978
22956: LD_INT 5
22958: DOUBLE
22959: GREATEREQUAL
22960: IFFALSE 22968
22962: LD_INT 7
22964: DOUBLE
22965: LESSEQUAL
22966: IFTRUE 22970
22968: GO 22977
22970: POP
// StreamSibBomb ; end ;
22971: CALL 19159 0 0
22975: GO 22978
22977: POP
// end ;
22978: PPOPN 3
22980: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22981: LD_EXP 48
22985: IFFALSE 22993
22987: PUSH
22988: LD_EXP 98
22992: AND
22993: IFFALSE 23149
22995: GO 22997
22997: DISABLE
22998: LD_INT 0
23000: PPUSH
23001: PPUSH
23002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23003: LD_ADDR_VAR 0 2
23007: PUSH
23008: LD_INT 81
23010: PUSH
23011: LD_OWVAR 2
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: LD_INT 21
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 21
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: ST_TO_ADDR
// if not tmp then
23057: LD_VAR 0 2
23061: NOT
23062: IFFALSE 23066
// exit ;
23064: GO 23149
// p := 0 ;
23066: LD_ADDR_VAR 0 3
23070: PUSH
23071: LD_INT 0
23073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23074: LD_INT 35
23076: PPUSH
23077: CALL_OW 67
// p := p + 1 ;
23081: LD_ADDR_VAR 0 3
23085: PUSH
23086: LD_VAR 0 3
23090: PUSH
23091: LD_INT 1
23093: PLUS
23094: ST_TO_ADDR
// for i in tmp do
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_VAR 0 2
23104: PUSH
23105: FOR_IN
23106: IFFALSE 23137
// if GetLives ( i ) < 1000 then
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 256
23117: PUSH
23118: LD_INT 1000
23120: LESS
23121: IFFALSE 23135
// SetLives ( i , 1000 ) ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_INT 1000
23130: PPUSH
23131: CALL_OW 234
23135: GO 23105
23137: POP
23138: POP
// until p > 20 ;
23139: LD_VAR 0 3
23143: PUSH
23144: LD_INT 20
23146: GREATER
23147: IFFALSE 23074
// end ;
23149: PPOPN 3
23151: END
// every 0 0$1 trigger StreamModeActive and sTime do
23152: LD_EXP 48
23156: IFFALSE 23164
23158: PUSH
23159: LD_EXP 99
23163: AND
23164: IFFALSE 23199
23166: GO 23168
23168: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23169: LD_INT 28
23171: PPUSH
23172: LD_OWVAR 2
23176: PPUSH
23177: LD_INT 2
23179: PPUSH
23180: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23184: LD_INT 30
23186: PPUSH
23187: LD_OWVAR 2
23191: PPUSH
23192: LD_INT 2
23194: PPUSH
23195: CALL_OW 322
// end ;
23199: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23200: LD_EXP 48
23204: IFFALSE 23212
23206: PUSH
23207: LD_EXP 100
23211: AND
23212: IFFALSE 23333
23214: GO 23216
23216: DISABLE
23217: LD_INT 0
23219: PPUSH
23220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: LD_OWVAR 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 21
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 3
23250: PUSH
23251: LD_INT 23
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: ST_TO_ADDR
// if not tmp then
23275: LD_VAR 0 2
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23333
// for i in tmp do
23284: LD_ADDR_VAR 0 1
23288: PUSH
23289: LD_VAR 0 2
23293: PUSH
23294: FOR_IN
23295: IFFALSE 23331
// begin if Crawls ( i ) then
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 318
23306: IFFALSE 23317
// ComWalk ( i ) ;
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 138
// SetClass ( i , 2 ) ;
23317: LD_VAR 0 1
23321: PPUSH
23322: LD_INT 2
23324: PPUSH
23325: CALL_OW 336
// end ;
23329: GO 23294
23331: POP
23332: POP
// end ;
23333: PPOPN 2
23335: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23336: LD_EXP 48
23340: IFFALSE 23348
23342: PUSH
23343: LD_EXP 101
23347: AND
23348: IFFALSE 23638
23350: GO 23352
23352: DISABLE
23353: LD_INT 0
23355: PPUSH
23356: PPUSH
23357: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23358: LD_OWVAR 2
23362: PPUSH
23363: LD_INT 9
23365: PPUSH
23366: LD_INT 1
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23376: LD_INT 9
23378: PPUSH
23379: LD_OWVAR 2
23383: PPUSH
23384: CALL_OW 343
// uc_side := 9 ;
23388: LD_ADDR_OWVAR 20
23392: PUSH
23393: LD_INT 9
23395: ST_TO_ADDR
// uc_nation := 2 ;
23396: LD_ADDR_OWVAR 21
23400: PUSH
23401: LD_INT 2
23403: ST_TO_ADDR
// hc_name := Dark Warrior ;
23404: LD_ADDR_OWVAR 26
23408: PUSH
23409: LD_STRING Dark Warrior
23411: ST_TO_ADDR
// hc_gallery :=  ;
23412: LD_ADDR_OWVAR 33
23416: PUSH
23417: LD_STRING 
23419: ST_TO_ADDR
// hc_noskilllimit := true ;
23420: LD_ADDR_OWVAR 76
23424: PUSH
23425: LD_INT 1
23427: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23428: LD_ADDR_OWVAR 31
23432: PUSH
23433: LD_INT 30
23435: PUSH
23436: LD_INT 30
23438: PUSH
23439: LD_INT 30
23441: PUSH
23442: LD_INT 30
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: ST_TO_ADDR
// un := CreateHuman ;
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: CALL_OW 44
23460: ST_TO_ADDR
// hc_noskilllimit := false ;
23461: LD_ADDR_OWVAR 76
23465: PUSH
23466: LD_INT 0
23468: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 51
// ToLua ( playRanger() ) ;
23481: LD_STRING playRanger()
23483: PPUSH
23484: CALL_OW 559
// p := 0 ;
23488: LD_ADDR_VAR 0 2
23492: PUSH
23493: LD_INT 0
23495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23496: LD_INT 35
23498: PPUSH
23499: CALL_OW 67
// p := p + 1 ;
23503: LD_ADDR_VAR 0 2
23507: PUSH
23508: LD_VAR 0 2
23512: PUSH
23513: LD_INT 1
23515: PLUS
23516: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23517: LD_VAR 0 3
23521: PPUSH
23522: CALL_OW 256
23526: PUSH
23527: LD_INT 1000
23529: LESS
23530: IFFALSE 23544
// SetLives ( un , 1000 ) ;
23532: LD_VAR 0 3
23536: PPUSH
23537: LD_INT 1000
23539: PPUSH
23540: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23544: LD_VAR 0 3
23548: PPUSH
23549: LD_INT 81
23551: PUSH
23552: LD_OWVAR 2
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 91
23563: PUSH
23564: LD_VAR 0 3
23568: PUSH
23569: LD_INT 30
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: PPUSH
23586: LD_VAR 0 3
23590: PPUSH
23591: CALL_OW 74
23595: PPUSH
23596: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23600: LD_VAR 0 2
23604: PUSH
23605: LD_INT 80
23607: GREATER
23608: IFTRUE 23621
23610: PUSH
23611: LD_VAR 0 3
23615: PPUSH
23616: CALL_OW 301
23620: OR
23621: IFFALSE 23496
// if un then
23623: LD_VAR 0 3
23627: IFFALSE 23638
// RemoveUnit ( un ) ;
23629: LD_VAR 0 3
23633: PPUSH
23634: CALL_OW 64
// end ;
23638: PPOPN 3
23640: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23641: LD_EXP 102
23645: IFFALSE 23761
23647: GO 23649
23649: DISABLE
23650: LD_INT 0
23652: PPUSH
23653: PPUSH
23654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23655: LD_ADDR_VAR 0 2
23659: PUSH
23660: LD_INT 81
23662: PUSH
23663: LD_OWVAR 2
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 21
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23691: LD_STRING playComputer()
23693: PPUSH
23694: CALL_OW 559
// if not tmp then
23698: LD_VAR 0 2
23702: NOT
23703: IFFALSE 23707
// exit ;
23705: GO 23761
// for i in tmp do
23707: LD_ADDR_VAR 0 1
23711: PUSH
23712: LD_VAR 0 2
23716: PUSH
23717: FOR_IN
23718: IFFALSE 23759
// for j := 1 to 4 do
23720: LD_ADDR_VAR 0 3
23724: PUSH
23725: DOUBLE
23726: LD_INT 1
23728: DEC
23729: ST_TO_ADDR
23730: LD_INT 4
23732: PUSH
23733: FOR_TO
23734: IFFALSE 23755
// SetSkill ( i , j , 10 ) ;
23736: LD_VAR 0 1
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: LD_INT 10
23748: PPUSH
23749: CALL_OW 237
23753: GO 23733
23755: POP
23756: POP
23757: GO 23717
23759: POP
23760: POP
// end ;
23761: PPOPN 3
23763: END
// every 0 0$1 trigger s30 do var i , tmp ;
23764: LD_EXP 103
23768: IFFALSE 23837
23770: GO 23772
23772: DISABLE
23773: LD_INT 0
23775: PPUSH
23776: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23777: LD_ADDR_VAR 0 2
23781: PUSH
23782: LD_INT 22
23784: PUSH
23785: LD_OWVAR 2
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PPUSH
23794: CALL_OW 69
23798: ST_TO_ADDR
// if not tmp then
23799: LD_VAR 0 2
23803: NOT
23804: IFFALSE 23808
// exit ;
23806: GO 23837
// for i in tmp do
23808: LD_ADDR_VAR 0 1
23812: PUSH
23813: LD_VAR 0 2
23817: PUSH
23818: FOR_IN
23819: IFFALSE 23835
// SetLives ( i , 300 ) ;
23821: LD_VAR 0 1
23825: PPUSH
23826: LD_INT 300
23828: PPUSH
23829: CALL_OW 234
23833: GO 23818
23835: POP
23836: POP
// end ;
23837: PPOPN 2
23839: END
// every 0 0$1 trigger s60 do var i , tmp ;
23840: LD_EXP 104
23844: IFFALSE 23913
23846: GO 23848
23848: DISABLE
23849: LD_INT 0
23851: PPUSH
23852: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23853: LD_ADDR_VAR 0 2
23857: PUSH
23858: LD_INT 22
23860: PUSH
23861: LD_OWVAR 2
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PPUSH
23870: CALL_OW 69
23874: ST_TO_ADDR
// if not tmp then
23875: LD_VAR 0 2
23879: NOT
23880: IFFALSE 23884
// exit ;
23882: GO 23913
// for i in tmp do
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_VAR 0 2
23893: PUSH
23894: FOR_IN
23895: IFFALSE 23911
// SetLives ( i , 600 ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: LD_INT 600
23904: PPUSH
23905: CALL_OW 234
23909: GO 23894
23911: POP
23912: POP
// end ;
23913: PPOPN 2
23915: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23916: LD_INT 0
23918: PPUSH
// case cmd of 301 :
23919: LD_VAR 0 1
23923: PUSH
23924: LD_INT 301
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23964
23932: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23933: LD_VAR 0 6
23937: PPUSH
23938: LD_VAR 0 7
23942: PPUSH
23943: LD_VAR 0 8
23947: PPUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: LD_VAR 0 5
23957: PPUSH
23958: CALL 25177 0 5
23962: GO 24085
23964: LD_INT 302
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 24009
23972: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23973: LD_VAR 0 6
23977: PPUSH
23978: LD_VAR 0 7
23982: PPUSH
23983: LD_VAR 0 8
23987: PPUSH
23988: LD_VAR 0 9
23992: PPUSH
23993: LD_VAR 0 4
23997: PPUSH
23998: LD_VAR 0 5
24002: PPUSH
24003: CALL 25268 0 6
24007: GO 24085
24009: LD_INT 303
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24054
24017: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24018: LD_VAR 0 6
24022: PPUSH
24023: LD_VAR 0 7
24027: PPUSH
24028: LD_VAR 0 8
24032: PPUSH
24033: LD_VAR 0 9
24037: PPUSH
24038: LD_VAR 0 4
24042: PPUSH
24043: LD_VAR 0 5
24047: PPUSH
24048: CALL 24090 0 6
24052: GO 24085
24054: LD_INT 304
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24084
24062: POP
// hHackTeleport ( unit , x , y ) ; end ;
24063: LD_VAR 0 2
24067: PPUSH
24068: LD_VAR 0 4
24072: PPUSH
24073: LD_VAR 0 5
24077: PPUSH
24078: CALL 25861 0 3
24082: GO 24085
24084: POP
// end ;
24085: LD_VAR 0 12
24089: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24090: LD_INT 0
24092: PPUSH
24093: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24094: LD_VAR 0 1
24098: PUSH
24099: LD_INT 1
24101: LESS
24102: IFTRUE 24114
24104: PUSH
24105: LD_VAR 0 1
24109: PUSH
24110: LD_INT 3
24112: GREATER
24113: OR
24114: IFTRUE 24132
24116: PUSH
24117: LD_VAR 0 5
24121: PPUSH
24122: LD_VAR 0 6
24126: PPUSH
24127: CALL_OW 428
24131: OR
24132: IFFALSE 24136
// exit ;
24134: GO 24864
// uc_side := your_side ;
24136: LD_ADDR_OWVAR 20
24140: PUSH
24141: LD_OWVAR 2
24145: ST_TO_ADDR
// uc_nation := nation ;
24146: LD_ADDR_OWVAR 21
24150: PUSH
24151: LD_VAR 0 1
24155: ST_TO_ADDR
// bc_level = 1 ;
24156: LD_ADDR_OWVAR 43
24160: PUSH
24161: LD_INT 1
24163: ST_TO_ADDR
// case btype of 1 :
24164: LD_VAR 0 2
24168: PUSH
24169: LD_INT 1
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24188
24177: POP
// bc_type := b_depot ; 2 :
24178: LD_ADDR_OWVAR 42
24182: PUSH
24183: LD_INT 0
24185: ST_TO_ADDR
24186: GO 24808
24188: LD_INT 2
24190: DOUBLE
24191: EQUAL
24192: IFTRUE 24196
24194: GO 24207
24196: POP
// bc_type := b_warehouse ; 3 :
24197: LD_ADDR_OWVAR 42
24201: PUSH
24202: LD_INT 1
24204: ST_TO_ADDR
24205: GO 24808
24207: LD_INT 3
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24226
24215: POP
// bc_type := b_lab ; 4 .. 9 :
24216: LD_ADDR_OWVAR 42
24220: PUSH
24221: LD_INT 6
24223: ST_TO_ADDR
24224: GO 24808
24226: LD_INT 4
24228: DOUBLE
24229: GREATEREQUAL
24230: IFFALSE 24238
24232: LD_INT 9
24234: DOUBLE
24235: LESSEQUAL
24236: IFTRUE 24240
24238: GO 24300
24240: POP
// begin bc_type := b_lab_half ;
24241: LD_ADDR_OWVAR 42
24245: PUSH
24246: LD_INT 7
24248: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24249: LD_ADDR_OWVAR 44
24253: PUSH
24254: LD_INT 10
24256: PUSH
24257: LD_INT 11
24259: PUSH
24260: LD_INT 12
24262: PUSH
24263: LD_INT 15
24265: PUSH
24266: LD_INT 14
24268: PUSH
24269: LD_INT 13
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: PUSH
24280: LD_VAR 0 2
24284: PUSH
24285: LD_INT 3
24287: MINUS
24288: ARRAY
24289: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24290: LD_ADDR_OWVAR 45
24294: PUSH
24295: LD_INT 9
24297: ST_TO_ADDR
// end ; 10 .. 13 :
24298: GO 24808
24300: LD_INT 10
24302: DOUBLE
24303: GREATEREQUAL
24304: IFFALSE 24312
24306: LD_INT 13
24308: DOUBLE
24309: LESSEQUAL
24310: IFTRUE 24314
24312: GO 24391
24314: POP
// begin bc_type := b_lab_full ;
24315: LD_ADDR_OWVAR 42
24319: PUSH
24320: LD_INT 8
24322: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24323: LD_ADDR_OWVAR 44
24327: PUSH
24328: LD_INT 10
24330: PUSH
24331: LD_INT 12
24333: PUSH
24334: LD_INT 14
24336: PUSH
24337: LD_INT 13
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 9
24353: MINUS
24354: ARRAY
24355: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24356: LD_ADDR_OWVAR 45
24360: PUSH
24361: LD_INT 11
24363: PUSH
24364: LD_INT 15
24366: PUSH
24367: LD_INT 12
24369: PUSH
24370: LD_INT 15
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: PUSH
24379: LD_VAR 0 2
24383: PUSH
24384: LD_INT 9
24386: MINUS
24387: ARRAY
24388: ST_TO_ADDR
// end ; 14 :
24389: GO 24808
24391: LD_INT 14
24393: DOUBLE
24394: EQUAL
24395: IFTRUE 24399
24397: GO 24410
24399: POP
// bc_type := b_workshop ; 15 :
24400: LD_ADDR_OWVAR 42
24404: PUSH
24405: LD_INT 2
24407: ST_TO_ADDR
24408: GO 24808
24410: LD_INT 15
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24429
24418: POP
// bc_type := b_factory ; 16 :
24419: LD_ADDR_OWVAR 42
24423: PUSH
24424: LD_INT 3
24426: ST_TO_ADDR
24427: GO 24808
24429: LD_INT 16
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24448
24437: POP
// bc_type := b_ext_gun ; 17 :
24438: LD_ADDR_OWVAR 42
24442: PUSH
24443: LD_INT 17
24445: ST_TO_ADDR
24446: GO 24808
24448: LD_INT 17
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24484
24456: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24457: LD_ADDR_OWVAR 42
24461: PUSH
24462: LD_INT 19
24464: PUSH
24465: LD_INT 23
24467: PUSH
24468: LD_INT 19
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: PUSH
24476: LD_VAR 0 1
24480: ARRAY
24481: ST_TO_ADDR
24482: GO 24808
24484: LD_INT 18
24486: DOUBLE
24487: EQUAL
24488: IFTRUE 24492
24490: GO 24503
24492: POP
// bc_type := b_ext_radar ; 19 :
24493: LD_ADDR_OWVAR 42
24497: PUSH
24498: LD_INT 20
24500: ST_TO_ADDR
24501: GO 24808
24503: LD_INT 19
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24522
24511: POP
// bc_type := b_ext_radio ; 20 :
24512: LD_ADDR_OWVAR 42
24516: PUSH
24517: LD_INT 22
24519: ST_TO_ADDR
24520: GO 24808
24522: LD_INT 20
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24541
24530: POP
// bc_type := b_ext_siberium ; 21 :
24531: LD_ADDR_OWVAR 42
24535: PUSH
24536: LD_INT 21
24538: ST_TO_ADDR
24539: GO 24808
24541: LD_INT 21
24543: DOUBLE
24544: EQUAL
24545: IFTRUE 24549
24547: GO 24560
24549: POP
// bc_type := b_ext_computer ; 22 :
24550: LD_ADDR_OWVAR 42
24554: PUSH
24555: LD_INT 24
24557: ST_TO_ADDR
24558: GO 24808
24560: LD_INT 22
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24579
24568: POP
// bc_type := b_ext_track ; 23 :
24569: LD_ADDR_OWVAR 42
24573: PUSH
24574: LD_INT 16
24576: ST_TO_ADDR
24577: GO 24808
24579: LD_INT 23
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24598
24587: POP
// bc_type := b_ext_laser ; 24 :
24588: LD_ADDR_OWVAR 42
24592: PUSH
24593: LD_INT 25
24595: ST_TO_ADDR
24596: GO 24808
24598: LD_INT 24
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24617
24606: POP
// bc_type := b_control_tower ; 25 :
24607: LD_ADDR_OWVAR 42
24611: PUSH
24612: LD_INT 36
24614: ST_TO_ADDR
24615: GO 24808
24617: LD_INT 25
24619: DOUBLE
24620: EQUAL
24621: IFTRUE 24625
24623: GO 24636
24625: POP
// bc_type := b_breastwork ; 26 :
24626: LD_ADDR_OWVAR 42
24630: PUSH
24631: LD_INT 31
24633: ST_TO_ADDR
24634: GO 24808
24636: LD_INT 26
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24655
24644: POP
// bc_type := b_bunker ; 27 :
24645: LD_ADDR_OWVAR 42
24649: PUSH
24650: LD_INT 32
24652: ST_TO_ADDR
24653: GO 24808
24655: LD_INT 27
24657: DOUBLE
24658: EQUAL
24659: IFTRUE 24663
24661: GO 24674
24663: POP
// bc_type := b_turret ; 28 :
24664: LD_ADDR_OWVAR 42
24668: PUSH
24669: LD_INT 33
24671: ST_TO_ADDR
24672: GO 24808
24674: LD_INT 28
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24693
24682: POP
// bc_type := b_armoury ; 29 :
24683: LD_ADDR_OWVAR 42
24687: PUSH
24688: LD_INT 4
24690: ST_TO_ADDR
24691: GO 24808
24693: LD_INT 29
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24712
24701: POP
// bc_type := b_barracks ; 30 :
24702: LD_ADDR_OWVAR 42
24706: PUSH
24707: LD_INT 5
24709: ST_TO_ADDR
24710: GO 24808
24712: LD_INT 30
24714: DOUBLE
24715: EQUAL
24716: IFTRUE 24720
24718: GO 24731
24720: POP
// bc_type := b_solar_power ; 31 :
24721: LD_ADDR_OWVAR 42
24725: PUSH
24726: LD_INT 27
24728: ST_TO_ADDR
24729: GO 24808
24731: LD_INT 31
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24750
24739: POP
// bc_type := b_oil_power ; 32 :
24740: LD_ADDR_OWVAR 42
24744: PUSH
24745: LD_INT 26
24747: ST_TO_ADDR
24748: GO 24808
24750: LD_INT 32
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24769
24758: POP
// bc_type := b_siberite_power ; 33 :
24759: LD_ADDR_OWVAR 42
24763: PUSH
24764: LD_INT 28
24766: ST_TO_ADDR
24767: GO 24808
24769: LD_INT 33
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24788
24777: POP
// bc_type := b_oil_mine ; 34 :
24778: LD_ADDR_OWVAR 42
24782: PUSH
24783: LD_INT 29
24785: ST_TO_ADDR
24786: GO 24808
24788: LD_INT 34
24790: DOUBLE
24791: EQUAL
24792: IFTRUE 24796
24794: GO 24807
24796: POP
// bc_type := b_siberite_mine ; end ;
24797: LD_ADDR_OWVAR 42
24801: PUSH
24802: LD_INT 30
24804: ST_TO_ADDR
24805: GO 24808
24807: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24808: LD_ADDR_VAR 0 8
24812: PUSH
24813: LD_VAR 0 5
24817: PPUSH
24818: LD_VAR 0 6
24822: PPUSH
24823: LD_VAR 0 3
24827: PPUSH
24828: CALL_OW 47
24832: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24833: LD_OWVAR 42
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 33
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: IN
24848: IFFALSE 24864
// PlaceWeaponTurret ( b , weapon ) ;
24850: LD_VAR 0 8
24854: PPUSH
24855: LD_VAR 0 4
24859: PPUSH
24860: CALL_OW 431
// end ;
24864: LD_VAR 0 7
24868: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24869: LD_INT 0
24871: PPUSH
24872: PPUSH
24873: PPUSH
24874: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24875: LD_ADDR_VAR 0 4
24879: PUSH
24880: LD_INT 22
24882: PUSH
24883: LD_OWVAR 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 30
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 30
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PPUSH
24924: CALL_OW 69
24928: ST_TO_ADDR
// if not tmp then
24929: LD_VAR 0 4
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 24997
// for i in tmp do
24938: LD_ADDR_VAR 0 2
24942: PUSH
24943: LD_VAR 0 4
24947: PUSH
24948: FOR_IN
24949: IFFALSE 24995
// for j = 1 to 3 do
24951: LD_ADDR_VAR 0 3
24955: PUSH
24956: DOUBLE
24957: LD_INT 1
24959: DEC
24960: ST_TO_ADDR
24961: LD_INT 3
24963: PUSH
24964: FOR_TO
24965: IFFALSE 24991
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24967: LD_VAR 0 2
24971: PPUSH
24972: CALL_OW 274
24976: PPUSH
24977: LD_VAR 0 3
24981: PPUSH
24982: LD_INT 99999
24984: PPUSH
24985: CALL_OW 277
24989: GO 24964
24991: POP
24992: POP
24993: GO 24948
24995: POP
24996: POP
// end ;
24997: LD_VAR 0 1
25001: RET
// export function hHackSetLevel10 ; var i , j ; begin
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
25006: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25007: LD_ADDR_VAR 0 2
25011: PUSH
25012: LD_INT 21
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PPUSH
25022: CALL_OW 69
25026: PUSH
25027: FOR_IN
25028: IFFALSE 25080
// if IsSelected ( i ) then
25030: LD_VAR 0 2
25034: PPUSH
25035: CALL_OW 306
25039: IFFALSE 25078
// begin for j := 1 to 4 do
25041: LD_ADDR_VAR 0 3
25045: PUSH
25046: DOUBLE
25047: LD_INT 1
25049: DEC
25050: ST_TO_ADDR
25051: LD_INT 4
25053: PUSH
25054: FOR_TO
25055: IFFALSE 25076
// SetSkill ( i , j , 10 ) ;
25057: LD_VAR 0 2
25061: PPUSH
25062: LD_VAR 0 3
25066: PPUSH
25067: LD_INT 10
25069: PPUSH
25070: CALL_OW 237
25074: GO 25054
25076: POP
25077: POP
// end ;
25078: GO 25027
25080: POP
25081: POP
// end ;
25082: LD_VAR 0 1
25086: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25087: LD_INT 0
25089: PPUSH
25090: PPUSH
25091: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_INT 22
25099: PUSH
25100: LD_OWVAR 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 21
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 69
25127: PUSH
25128: FOR_IN
25129: IFFALSE 25170
// begin for j := 1 to 4 do
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: DOUBLE
25137: LD_INT 1
25139: DEC
25140: ST_TO_ADDR
25141: LD_INT 4
25143: PUSH
25144: FOR_TO
25145: IFFALSE 25166
// SetSkill ( i , j , 10 ) ;
25147: LD_VAR 0 2
25151: PPUSH
25152: LD_VAR 0 3
25156: PPUSH
25157: LD_INT 10
25159: PPUSH
25160: CALL_OW 237
25164: GO 25144
25166: POP
25167: POP
// end ;
25168: GO 25128
25170: POP
25171: POP
// end ;
25172: LD_VAR 0 1
25176: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25177: LD_INT 0
25179: PPUSH
// uc_side := your_side ;
25180: LD_ADDR_OWVAR 20
25184: PUSH
25185: LD_OWVAR 2
25189: ST_TO_ADDR
// uc_nation := nation ;
25190: LD_ADDR_OWVAR 21
25194: PUSH
25195: LD_VAR 0 1
25199: ST_TO_ADDR
// InitHc ;
25200: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25204: LD_INT 0
25206: PPUSH
25207: LD_VAR 0 2
25211: PPUSH
25212: LD_VAR 0 3
25216: PPUSH
25217: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25221: LD_VAR 0 4
25225: PPUSH
25226: LD_VAR 0 5
25230: PPUSH
25231: CALL_OW 428
25235: PUSH
25236: LD_INT 0
25238: EQUAL
25239: IFFALSE 25263
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25241: CALL_OW 44
25245: PPUSH
25246: LD_VAR 0 4
25250: PPUSH
25251: LD_VAR 0 5
25255: PPUSH
25256: LD_INT 1
25258: PPUSH
25259: CALL_OW 48
// end ;
25263: LD_VAR 0 6
25267: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
// uc_side := your_side ;
25272: LD_ADDR_OWVAR 20
25276: PUSH
25277: LD_OWVAR 2
25281: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25282: LD_VAR 0 1
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: LD_INT 3
25295: PUSH
25296: LD_INT 4
25298: PUSH
25299: LD_INT 5
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: IN
25309: IFFALSE 25321
// uc_nation := nation_american else
25311: LD_ADDR_OWVAR 21
25315: PUSH
25316: LD_INT 1
25318: ST_TO_ADDR
25319: GO 25364
// if chassis in [ 11 , 12 , 13 , 14 ] then
25321: LD_VAR 0 1
25325: PUSH
25326: LD_INT 11
25328: PUSH
25329: LD_INT 12
25331: PUSH
25332: LD_INT 13
25334: PUSH
25335: LD_INT 14
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: IN
25344: IFFALSE 25356
// uc_nation := nation_arabian else
25346: LD_ADDR_OWVAR 21
25350: PUSH
25351: LD_INT 2
25353: ST_TO_ADDR
25354: GO 25364
// uc_nation := nation_russian ;
25356: LD_ADDR_OWVAR 21
25360: PUSH
25361: LD_INT 3
25363: ST_TO_ADDR
// vc_chassis := chassis ;
25364: LD_ADDR_OWVAR 37
25368: PUSH
25369: LD_VAR 0 1
25373: ST_TO_ADDR
// vc_engine := engine ;
25374: LD_ADDR_OWVAR 39
25378: PUSH
25379: LD_VAR 0 2
25383: ST_TO_ADDR
// vc_control := control ;
25384: LD_ADDR_OWVAR 38
25388: PUSH
25389: LD_VAR 0 3
25393: ST_TO_ADDR
// vc_weapon := weapon ;
25394: LD_ADDR_OWVAR 40
25398: PUSH
25399: LD_VAR 0 4
25403: ST_TO_ADDR
// un := CreateVehicle ;
25404: LD_ADDR_VAR 0 8
25408: PUSH
25409: CALL_OW 45
25413: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25414: LD_VAR 0 8
25418: PPUSH
25419: LD_INT 0
25421: PPUSH
25422: LD_INT 5
25424: PPUSH
25425: CALL_OW 12
25429: PPUSH
25430: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25434: LD_VAR 0 8
25438: PPUSH
25439: LD_VAR 0 5
25443: PPUSH
25444: LD_VAR 0 6
25448: PPUSH
25449: LD_INT 1
25451: PPUSH
25452: CALL_OW 48
// end ;
25456: LD_VAR 0 7
25460: RET
// export hInvincible ; every 1 do
25461: GO 25463
25463: DISABLE
// hInvincible := [ ] ;
25464: LD_ADDR_EXP 105
25468: PUSH
25469: EMPTY
25470: ST_TO_ADDR
25471: END
// every 10 do var i ;
25472: GO 25474
25474: DISABLE
25475: LD_INT 0
25477: PPUSH
// begin enable ;
25478: ENABLE
// if not hInvincible then
25479: LD_EXP 105
25483: NOT
25484: IFFALSE 25488
// exit ;
25486: GO 25532
// for i in hInvincible do
25488: LD_ADDR_VAR 0 1
25492: PUSH
25493: LD_EXP 105
25497: PUSH
25498: FOR_IN
25499: IFFALSE 25530
// if GetLives ( i ) < 1000 then
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 256
25510: PUSH
25511: LD_INT 1000
25513: LESS
25514: IFFALSE 25528
// SetLives ( i , 1000 ) ;
25516: LD_VAR 0 1
25520: PPUSH
25521: LD_INT 1000
25523: PPUSH
25524: CALL_OW 234
25528: GO 25498
25530: POP
25531: POP
// end ;
25532: PPOPN 1
25534: END
// export function hHackInvincible ; var i ; begin
25535: LD_INT 0
25537: PPUSH
25538: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25539: LD_ADDR_VAR 0 2
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 21
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 21
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: PPUSH
25572: CALL_OW 69
25576: PUSH
25577: FOR_IN
25578: IFFALSE 25639
// if IsSelected ( i ) then
25580: LD_VAR 0 2
25584: PPUSH
25585: CALL_OW 306
25589: IFFALSE 25637
// begin if i in hInvincible then
25591: LD_VAR 0 2
25595: PUSH
25596: LD_EXP 105
25600: IN
25601: IFFALSE 25621
// hInvincible := hInvincible diff i else
25603: LD_ADDR_EXP 105
25607: PUSH
25608: LD_EXP 105
25612: PUSH
25613: LD_VAR 0 2
25617: DIFF
25618: ST_TO_ADDR
25619: GO 25637
// hInvincible := hInvincible union i ;
25621: LD_ADDR_EXP 105
25625: PUSH
25626: LD_EXP 105
25630: PUSH
25631: LD_VAR 0 2
25635: UNION
25636: ST_TO_ADDR
// end ;
25637: GO 25577
25639: POP
25640: POP
// end ;
25641: LD_VAR 0 1
25645: RET
// export function hHackInvisible ; var i , j ; begin
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
25650: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25651: LD_ADDR_VAR 0 2
25655: PUSH
25656: LD_INT 21
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: PUSH
25671: FOR_IN
25672: IFFALSE 25696
// if IsSelected ( i ) then
25674: LD_VAR 0 2
25678: PPUSH
25679: CALL_OW 306
25683: IFFALSE 25694
// ComForceInvisible ( i ) ;
25685: LD_VAR 0 2
25689: PPUSH
25690: CALL_OW 496
25694: GO 25671
25696: POP
25697: POP
// end ;
25698: LD_VAR 0 1
25702: RET
// export function hHackChangeYourSide ; begin
25703: LD_INT 0
25705: PPUSH
// if your_side = 8 then
25706: LD_OWVAR 2
25710: PUSH
25711: LD_INT 8
25713: EQUAL
25714: IFFALSE 25726
// your_side := 0 else
25716: LD_ADDR_OWVAR 2
25720: PUSH
25721: LD_INT 0
25723: ST_TO_ADDR
25724: GO 25740
// your_side := your_side + 1 ;
25726: LD_ADDR_OWVAR 2
25730: PUSH
25731: LD_OWVAR 2
25735: PUSH
25736: LD_INT 1
25738: PLUS
25739: ST_TO_ADDR
// end ;
25740: LD_VAR 0 1
25744: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25745: LD_INT 0
25747: PPUSH
25748: PPUSH
25749: PPUSH
// for i in all_units do
25750: LD_ADDR_VAR 0 2
25754: PUSH
25755: LD_OWVAR 3
25759: PUSH
25760: FOR_IN
25761: IFFALSE 25839
// if IsSelected ( i ) then
25763: LD_VAR 0 2
25767: PPUSH
25768: CALL_OW 306
25772: IFFALSE 25837
// begin j := GetSide ( i ) ;
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_VAR 0 2
25783: PPUSH
25784: CALL_OW 255
25788: ST_TO_ADDR
// if j = 8 then
25789: LD_VAR 0 3
25793: PUSH
25794: LD_INT 8
25796: EQUAL
25797: IFFALSE 25809
// j := 0 else
25799: LD_ADDR_VAR 0 3
25803: PUSH
25804: LD_INT 0
25806: ST_TO_ADDR
25807: GO 25823
// j := j + 1 ;
25809: LD_ADDR_VAR 0 3
25813: PUSH
25814: LD_VAR 0 3
25818: PUSH
25819: LD_INT 1
25821: PLUS
25822: ST_TO_ADDR
// SetSide ( i , j ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: CALL_OW 235
// end ;
25837: GO 25760
25839: POP
25840: POP
// end ;
25841: LD_VAR 0 1
25845: RET
// export function hHackFog ; begin
25846: LD_INT 0
25848: PPUSH
// FogOff ( true ) ;
25849: LD_INT 1
25851: PPUSH
25852: CALL_OW 344
// end ;
25856: LD_VAR 0 1
25860: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25861: LD_INT 0
25863: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25864: LD_VAR 0 1
25868: PPUSH
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_VAR 0 3
25878: PPUSH
25879: LD_INT 1
25881: PPUSH
25882: LD_INT 1
25884: PPUSH
25885: CALL_OW 483
// CenterOnXY ( x , y ) ;
25889: LD_VAR 0 2
25893: PPUSH
25894: LD_VAR 0 3
25898: PPUSH
25899: CALL_OW 84
// end ;
25903: LD_VAR 0 4
25907: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25912: LD_VAR 0 1
25916: NOT
25917: IFTRUE 25936
25919: PUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: CALL_OW 488
25934: NOT
25935: OR
25936: IFTRUE 25971
25938: PUSH
25939: LD_VAR 0 1
25943: PPUSH
25944: CALL_OW 266
25948: PUSH
25949: LD_INT 3
25951: NONEQUAL
25952: IFFALSE 25970
25954: PUSH
25955: LD_VAR 0 1
25959: PPUSH
25960: CALL_OW 247
25964: PUSH
25965: LD_INT 1
25967: EQUAL
25968: NOT
25969: AND
25970: OR
25971: IFFALSE 25975
// exit ;
25973: GO 26257
// if GetType ( factory ) = unit_human then
25975: LD_VAR 0 1
25979: PPUSH
25980: CALL_OW 247
25984: PUSH
25985: LD_INT 1
25987: EQUAL
25988: IFFALSE 26005
// factory := IsInUnit ( factory ) ;
25990: LD_ADDR_VAR 0 1
25994: PUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: CALL_OW 310
26004: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26005: LD_VAR 0 1
26009: PPUSH
26010: CALL_OW 266
26014: PUSH
26015: LD_INT 3
26017: NONEQUAL
26018: IFFALSE 26022
// exit ;
26020: GO 26257
// for i := 1 to Count ( factoryWaypoints ) do
26022: LD_ADDR_VAR 0 5
26026: PUSH
26027: DOUBLE
26028: LD_INT 1
26030: DEC
26031: ST_TO_ADDR
26032: LD_EXP 106
26036: PPUSH
26037: CALL 36061 0 1
26041: PUSH
26042: FOR_TO
26043: IFFALSE 26205
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26045: LD_VAR 0 2
26049: PPUSH
26050: LD_VAR 0 3
26054: PPUSH
26055: CALL_OW 428
26059: PUSH
26060: LD_EXP 106
26064: PUSH
26065: LD_VAR 0 5
26069: ARRAY
26070: PUSH
26071: LD_INT 2
26073: ARRAY
26074: EQUAL
26075: IFFALSE 26107
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26077: LD_ADDR_EXP 106
26081: PUSH
26082: LD_EXP 106
26086: PPUSH
26087: LD_VAR 0 5
26091: PPUSH
26092: CALL_OW 3
26096: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26097: CALL 26262 0 0
// exit ;
26101: POP
26102: POP
26103: GO 26257
// end else
26105: GO 26203
// if factory = factoryWaypoints [ i ] [ 2 ] then
26107: LD_VAR 0 1
26111: PUSH
26112: LD_EXP 106
26116: PUSH
26117: LD_VAR 0 5
26121: ARRAY
26122: PUSH
26123: LD_INT 2
26125: ARRAY
26126: EQUAL
26127: IFFALSE 26203
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26129: LD_ADDR_EXP 106
26133: PUSH
26134: LD_EXP 106
26138: PPUSH
26139: LD_VAR 0 5
26143: PPUSH
26144: CALL_OW 3
26148: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26149: LD_ADDR_EXP 106
26153: PUSH
26154: LD_EXP 106
26158: PPUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 255
26168: PUSH
26169: LD_VAR 0 1
26173: PUSH
26174: LD_VAR 0 2
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: PPUSH
26190: CALL 72037 0 2
26194: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26195: CALL 26262 0 0
// exit ;
26199: POP
26200: POP
26201: GO 26257
// end ; end ;
26203: GO 26042
26205: POP
26206: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26207: LD_ADDR_EXP 106
26211: PUSH
26212: LD_EXP 106
26216: PPUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 255
26226: PUSH
26227: LD_VAR 0 1
26231: PUSH
26232: LD_VAR 0 2
26236: PUSH
26237: LD_VAR 0 3
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: PPUSH
26248: CALL 72037 0 2
26252: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26253: CALL 26262 0 0
// end ;
26257: LD_VAR 0 4
26261: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26262: LD_INT 0
26264: PPUSH
26265: PPUSH
26266: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26267: LD_STRING resetFactoryWaypoint();
26269: PPUSH
26270: CALL_OW 559
// if factoryWaypoints then
26274: LD_EXP 106
26278: IFFALSE 26399
// begin list := factoryWaypoints ;
26280: LD_ADDR_VAR 0 3
26284: PUSH
26285: LD_EXP 106
26289: ST_TO_ADDR
// for i := 1 to list do
26290: LD_ADDR_VAR 0 2
26294: PUSH
26295: DOUBLE
26296: LD_INT 1
26298: DEC
26299: ST_TO_ADDR
26300: LD_VAR 0 3
26304: PUSH
26305: FOR_TO
26306: IFFALSE 26397
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26308: LD_STRING setFactoryWaypointXY(
26310: PUSH
26311: LD_VAR 0 3
26315: PUSH
26316: LD_VAR 0 2
26320: ARRAY
26321: PUSH
26322: LD_INT 1
26324: ARRAY
26325: STR
26326: PUSH
26327: LD_STRING ,
26329: STR
26330: PUSH
26331: LD_VAR 0 3
26335: PUSH
26336: LD_VAR 0 2
26340: ARRAY
26341: PUSH
26342: LD_INT 2
26344: ARRAY
26345: STR
26346: PUSH
26347: LD_STRING ,
26349: STR
26350: PUSH
26351: LD_VAR 0 3
26355: PUSH
26356: LD_VAR 0 2
26360: ARRAY
26361: PUSH
26362: LD_INT 3
26364: ARRAY
26365: STR
26366: PUSH
26367: LD_STRING ,
26369: STR
26370: PUSH
26371: LD_VAR 0 3
26375: PUSH
26376: LD_VAR 0 2
26380: ARRAY
26381: PUSH
26382: LD_INT 4
26384: ARRAY
26385: STR
26386: PUSH
26387: LD_STRING )
26389: STR
26390: PPUSH
26391: CALL_OW 559
26395: GO 26305
26397: POP
26398: POP
// end ; end ;
26399: LD_VAR 0 1
26403: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26404: LD_INT 0
26406: PPUSH
// if HexInfo ( x , y ) = warehouse then
26407: LD_VAR 0 2
26411: PPUSH
26412: LD_VAR 0 3
26416: PPUSH
26417: CALL_OW 428
26421: PUSH
26422: LD_VAR 0 1
26426: EQUAL
26427: IFFALSE 26454
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26429: LD_ADDR_EXP 108
26433: PUSH
26434: LD_EXP 108
26438: PPUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: LD_INT 0
26446: PPUSH
26447: CALL_OW 1
26451: ST_TO_ADDR
26452: GO 26505
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26454: LD_ADDR_EXP 108
26458: PUSH
26459: LD_EXP 108
26463: PPUSH
26464: LD_VAR 0 1
26468: PPUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 255
26478: PUSH
26479: LD_VAR 0 1
26483: PUSH
26484: LD_VAR 0 2
26488: PUSH
26489: LD_VAR 0 3
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: PPUSH
26500: CALL_OW 1
26504: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26505: CALL 26514 0 0
// end ;
26509: LD_VAR 0 4
26513: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26514: LD_INT 0
26516: PPUSH
26517: PPUSH
26518: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26519: LD_STRING resetWarehouseGatheringPoints();
26521: PPUSH
26522: CALL_OW 559
// if warehouseGatheringPoints then
26526: LD_EXP 108
26530: IFFALSE 26656
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: LD_EXP 108
26541: PPUSH
26542: CALL 75971 0 1
26546: ST_TO_ADDR
// for i := 1 to list do
26547: LD_ADDR_VAR 0 2
26551: PUSH
26552: DOUBLE
26553: LD_INT 1
26555: DEC
26556: ST_TO_ADDR
26557: LD_VAR 0 3
26561: PUSH
26562: FOR_TO
26563: IFFALSE 26654
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26565: LD_STRING setWarehouseGatheringPointXY(
26567: PUSH
26568: LD_VAR 0 3
26572: PUSH
26573: LD_VAR 0 2
26577: ARRAY
26578: PUSH
26579: LD_INT 1
26581: ARRAY
26582: STR
26583: PUSH
26584: LD_STRING ,
26586: STR
26587: PUSH
26588: LD_VAR 0 3
26592: PUSH
26593: LD_VAR 0 2
26597: ARRAY
26598: PUSH
26599: LD_INT 2
26601: ARRAY
26602: STR
26603: PUSH
26604: LD_STRING ,
26606: STR
26607: PUSH
26608: LD_VAR 0 3
26612: PUSH
26613: LD_VAR 0 2
26617: ARRAY
26618: PUSH
26619: LD_INT 3
26621: ARRAY
26622: STR
26623: PUSH
26624: LD_STRING ,
26626: STR
26627: PUSH
26628: LD_VAR 0 3
26632: PUSH
26633: LD_VAR 0 2
26637: ARRAY
26638: PUSH
26639: LD_INT 4
26641: ARRAY
26642: STR
26643: PUSH
26644: LD_STRING )
26646: STR
26647: PPUSH
26648: CALL_OW 559
26652: GO 26562
26654: POP
26655: POP
// end ; end ;
26656: LD_VAR 0 1
26660: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26661: LD_EXP 108
26665: IFFALSE 27360
26667: GO 26669
26669: DISABLE
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
// begin enable ;
26681: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_EXP 108
26691: PPUSH
26692: CALL 75971 0 1
26696: ST_TO_ADDR
// if not list then
26697: LD_VAR 0 3
26701: NOT
26702: IFFALSE 26706
// exit ;
26704: GO 27360
// for i := 1 to list do
26706: LD_ADDR_VAR 0 1
26710: PUSH
26711: DOUBLE
26712: LD_INT 1
26714: DEC
26715: ST_TO_ADDR
26716: LD_VAR 0 3
26720: PUSH
26721: FOR_TO
26722: IFFALSE 27358
// begin depot := list [ i ] [ 2 ] ;
26724: LD_ADDR_VAR 0 8
26728: PUSH
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PUSH
26740: LD_INT 2
26742: ARRAY
26743: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26744: LD_ADDR_VAR 0 5
26748: PUSH
26749: LD_VAR 0 3
26753: PUSH
26754: LD_VAR 0 1
26758: ARRAY
26759: PUSH
26760: LD_INT 1
26762: ARRAY
26763: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26764: LD_VAR 0 8
26768: PPUSH
26769: CALL_OW 301
26773: IFTRUE 26792
26775: PUSH
26776: LD_VAR 0 5
26780: PUSH
26781: LD_VAR 0 8
26785: PPUSH
26786: CALL_OW 255
26790: NONEQUAL
26791: OR
26792: IFFALSE 26821
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26794: LD_ADDR_EXP 108
26798: PUSH
26799: LD_EXP 108
26803: PPUSH
26804: LD_VAR 0 8
26808: PPUSH
26809: LD_INT 0
26811: PPUSH
26812: CALL_OW 1
26816: ST_TO_ADDR
// exit ;
26817: POP
26818: POP
26819: GO 27360
// end ; x := list [ i ] [ 3 ] ;
26821: LD_ADDR_VAR 0 6
26825: PUSH
26826: LD_VAR 0 3
26830: PUSH
26831: LD_VAR 0 1
26835: ARRAY
26836: PUSH
26837: LD_INT 3
26839: ARRAY
26840: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26841: LD_ADDR_VAR 0 7
26845: PUSH
26846: LD_VAR 0 3
26850: PUSH
26851: LD_VAR 0 1
26855: ARRAY
26856: PUSH
26857: LD_INT 4
26859: ARRAY
26860: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26861: LD_ADDR_VAR 0 9
26865: PUSH
26866: LD_VAR 0 6
26870: PPUSH
26871: LD_VAR 0 7
26875: PPUSH
26876: LD_INT 16
26878: PPUSH
26879: CALL 74545 0 3
26883: ST_TO_ADDR
// if not cratesNearbyPoint then
26884: LD_VAR 0 9
26888: NOT
26889: IFFALSE 26895
// exit ;
26891: POP
26892: POP
26893: GO 27360
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26895: LD_ADDR_VAR 0 4
26899: PUSH
26900: LD_INT 22
26902: PUSH
26903: LD_VAR 0 5
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 3
26914: PUSH
26915: LD_INT 60
26917: PUSH
26918: EMPTY
26919: LIST
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 91
26927: PUSH
26928: LD_VAR 0 8
26932: PUSH
26933: LD_INT 6
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 25
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 25
26956: PUSH
26957: LD_INT 16
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: PPUSH
26975: CALL_OW 69
26979: PUSH
26980: LD_VAR 0 8
26984: PPUSH
26985: CALL_OW 313
26989: PPUSH
26990: LD_INT 3
26992: PUSH
26993: LD_INT 60
26995: PUSH
26996: EMPTY
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 25
27008: PUSH
27009: LD_INT 2
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 25
27018: PUSH
27019: LD_INT 16
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PPUSH
27035: CALL_OW 72
27039: UNION
27040: ST_TO_ADDR
// if tmp then
27041: LD_VAR 0 4
27045: IFFALSE 27125
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27047: LD_ADDR_VAR 0 4
27051: PUSH
27052: LD_VAR 0 4
27056: PPUSH
27057: LD_INT 3
27059: PPUSH
27060: CALL 72352 0 2
27064: ST_TO_ADDR
// for j in tmp do
27065: LD_ADDR_VAR 0 2
27069: PUSH
27070: LD_VAR 0 4
27074: PUSH
27075: FOR_IN
27076: IFFALSE 27119
// begin if IsInUnit ( j ) then
27078: LD_VAR 0 2
27082: PPUSH
27083: CALL_OW 310
27087: IFFALSE 27098
// ComExit ( j ) ;
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL 72435 0 1
// AddComCollect ( j , x , y ) ;
27098: LD_VAR 0 2
27102: PPUSH
27103: LD_VAR 0 6
27107: PPUSH
27108: LD_VAR 0 7
27112: PPUSH
27113: CALL_OW 177
// end ;
27117: GO 27075
27119: POP
27120: POP
// exit ;
27121: POP
27122: POP
27123: GO 27360
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27125: LD_ADDR_VAR 0 4
27129: PUSH
27130: LD_INT 22
27132: PUSH
27133: LD_VAR 0 5
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 91
27144: PUSH
27145: LD_VAR 0 8
27149: PUSH
27150: LD_INT 8
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: LD_INT 34
27163: PUSH
27164: LD_INT 12
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 34
27173: PUSH
27174: LD_INT 51
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 34
27183: PUSH
27184: LD_INT 32
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 34
27193: PUSH
27194: LD_INT 89
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 69
27217: ST_TO_ADDR
// if tmp then
27218: LD_VAR 0 4
27222: IFFALSE 27356
// begin for j in tmp do
27224: LD_ADDR_VAR 0 2
27228: PUSH
27229: LD_VAR 0 4
27233: PUSH
27234: FOR_IN
27235: IFFALSE 27354
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27237: LD_VAR 0 2
27241: PPUSH
27242: CALL_OW 262
27246: PUSH
27247: LD_INT 3
27249: EQUAL
27250: IFTRUE 27267
27252: PUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: CALL_OW 261
27262: PUSH
27263: LD_INT 20
27265: GREATER
27266: OR
27267: IFFALSE 27281
27269: PUSH
27270: LD_VAR 0 2
27274: PPUSH
27275: CALL_OW 314
27279: NOT
27280: AND
27281: IFFALSE 27311
27283: PUSH
27284: LD_VAR 0 2
27288: PPUSH
27289: CALL_OW 263
27293: PUSH
27294: LD_INT 1
27296: NONEQUAL
27297: IFTRUE 27310
27299: PUSH
27300: LD_VAR 0 2
27304: PPUSH
27305: CALL_OW 311
27309: OR
27310: AND
27311: IFFALSE 27352
// begin ComCollect ( j , x , y ) ;
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_VAR 0 6
27322: PPUSH
27323: LD_VAR 0 7
27327: PPUSH
27328: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27332: LD_VAR 0 2
27336: PPUSH
27337: LD_VAR 0 8
27341: PPUSH
27342: CALL_OW 172
// exit ;
27346: POP
27347: POP
27348: POP
27349: POP
27350: GO 27360
// end ;
27352: GO 27234
27354: POP
27355: POP
// end ; end ;
27356: GO 26721
27358: POP
27359: POP
// end ; end_of_file
27360: PPOPN 9
27362: END
// export function SOS_UnitDestroyed ( un ) ; begin
27363: LD_INT 0
27365: PPUSH
// ComRadiation ( un ) ;
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL 28533 0 1
// end ;
27375: LD_VAR 0 2
27379: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27380: LD_INT 0
27382: PPUSH
// ComRadiation ( un ) ;
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL 28533 0 1
// end ;
27392: LD_VAR 0 2
27396: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27397: LD_INT 0
27399: PPUSH
// end ;
27400: LD_VAR 0 4
27404: RET
// export function SOS_Command ( cmd ) ; begin
27405: LD_INT 0
27407: PPUSH
// end ;
27408: LD_VAR 0 2
27412: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27413: LD_INT 0
27415: PPUSH
// end ;
27416: LD_VAR 0 6
27420: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
27421: LD_INT 0
27423: PPUSH
27424: PPUSH
27425: PPUSH
27426: PPUSH
27427: PPUSH
// if not vehicle or not factory then
27428: LD_VAR 0 1
27432: NOT
27433: IFTRUE 27442
27435: PUSH
27436: LD_VAR 0 2
27440: NOT
27441: OR
27442: IFFALSE 27446
// exit ;
27444: GO 28108
// weapon := GetWeapon ( vehicle ) ;
27446: LD_ADDR_VAR 0 7
27450: PUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 264
27460: ST_TO_ADDR
// if weapon = ar_miner then
27461: LD_VAR 0 7
27465: PUSH
27466: LD_INT 81
27468: EQUAL
27469: IFFALSE 27526
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27471: LD_ADDR_EXP 117
27475: PUSH
27476: LD_EXP 117
27480: PPUSH
27481: LD_EXP 117
27485: PUSH
27486: LD_INT 1
27488: PLUS
27489: PPUSH
27490: LD_VAR 0 1
27494: PPUSH
27495: CALL_OW 1
27499: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27500: LD_ADDR_EXP 118
27504: PUSH
27505: LD_EXP 118
27509: PPUSH
27510: LD_EXP 118
27514: PUSH
27515: LD_INT 1
27517: PLUS
27518: PPUSH
27519: EMPTY
27520: PPUSH
27521: CALL_OW 1
27525: ST_TO_ADDR
// end ; if not factoryWaypoints then
27526: LD_EXP 106
27530: NOT
27531: IFFALSE 27535
// exit ;
27533: GO 28108
// for i := 1 to Count ( factoryWaypoints ) do
27535: LD_ADDR_VAR 0 4
27539: PUSH
27540: DOUBLE
27541: LD_INT 1
27543: DEC
27544: ST_TO_ADDR
27545: LD_EXP 106
27549: PPUSH
27550: CALL 36061 0 1
27554: PUSH
27555: FOR_TO
27556: IFFALSE 28106
// if factoryWaypoints [ i ] [ 2 ] = factory then
27558: LD_EXP 106
27562: PUSH
27563: LD_VAR 0 4
27567: ARRAY
27568: PUSH
27569: LD_INT 2
27571: ARRAY
27572: PUSH
27573: LD_VAR 0 2
27577: EQUAL
27578: IFFALSE 28104
// begin if GetControl ( vehicle ) = control_manual then
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL_OW 263
27589: PUSH
27590: LD_INT 1
27592: EQUAL
27593: IFFALSE 27957
// begin driver := IsDrivenBy ( vehicle ) ;
27595: LD_ADDR_VAR 0 5
27599: PUSH
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL_OW 311
27609: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27610: LD_VAR 0 5
27614: PUSH
27615: LD_EXP 107
27619: IN
27620: IFTRUE 27634
27622: PUSH
27623: LD_VAR 0 1
27627: PUSH
27628: LD_EXP 107
27632: IN
27633: OR
27634: IFFALSE 27640
// exit ;
27636: POP
27637: POP
27638: GO 28108
// if not HasTask ( driver ) then
27640: LD_VAR 0 5
27644: PPUSH
27645: CALL_OW 314
27649: NOT
27650: IFFALSE 27955
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27652: LD_ADDR_EXP 107
27656: PUSH
27657: LD_EXP 107
27661: PPUSH
27662: LD_VAR 0 5
27666: PPUSH
27667: CALL 72037 0 2
27671: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27672: LD_ADDR_EXP 107
27676: PUSH
27677: LD_EXP 107
27681: PPUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL 72037 0 2
27691: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27692: LD_ADDR_VAR 0 6
27696: PUSH
27697: LD_EXP 106
27701: PUSH
27702: LD_VAR 0 4
27706: ARRAY
27707: PUSH
27708: LD_INT 3
27710: ARRAY
27711: PPUSH
27712: LD_EXP 106
27716: PUSH
27717: LD_VAR 0 4
27721: ARRAY
27722: PUSH
27723: LD_INT 4
27725: ARRAY
27726: PPUSH
27727: CALL_OW 428
27731: ST_TO_ADDR
// if hex then
27732: LD_VAR 0 6
27736: IFFALSE 27754
// ComMoveUnit ( driver , hex ) else
27738: LD_VAR 0 5
27742: PPUSH
27743: LD_VAR 0 6
27747: PPUSH
27748: CALL_OW 112
27752: GO 27838
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27754: LD_VAR 0 1
27758: PPUSH
27759: LD_EXP 106
27763: PUSH
27764: LD_VAR 0 4
27768: ARRAY
27769: PUSH
27770: LD_INT 3
27772: ARRAY
27773: PPUSH
27774: LD_EXP 106
27778: PUSH
27779: LD_VAR 0 4
27783: ARRAY
27784: PUSH
27785: LD_INT 4
27787: ARRAY
27788: PPUSH
27789: CALL_OW 297
27793: PUSH
27794: LD_INT 0
27796: GREATER
27797: IFFALSE 27838
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27799: LD_VAR 0 5
27803: PPUSH
27804: LD_EXP 106
27808: PUSH
27809: LD_VAR 0 4
27813: ARRAY
27814: PUSH
27815: LD_INT 3
27817: ARRAY
27818: PPUSH
27819: LD_EXP 106
27823: PUSH
27824: LD_VAR 0 4
27828: ARRAY
27829: PUSH
27830: LD_INT 4
27832: ARRAY
27833: PPUSH
27834: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27838: LD_VAR 0 5
27842: PPUSH
27843: CALL_OW 181
// if Multiplayer then
27847: LD_OWVAR 4
27851: IFFALSE 27900
// begin repeat wait ( 10 ) ;
27853: LD_INT 10
27855: PPUSH
27856: CALL_OW 67
// until not IsInUnit ( driver ) ;
27860: LD_VAR 0 5
27864: PPUSH
27865: CALL_OW 310
27869: NOT
27870: IFFALSE 27853
// if not HasTask ( driver ) then
27872: LD_VAR 0 5
27876: PPUSH
27877: CALL_OW 314
27881: NOT
27882: IFFALSE 27898
// ComEnterUnit ( driver , factory ) ;
27884: LD_VAR 0 5
27888: PPUSH
27889: LD_VAR 0 2
27893: PPUSH
27894: CALL_OW 120
// end else
27898: GO 27914
// AddComEnterUnit ( driver , factory ) ;
27900: LD_VAR 0 5
27904: PPUSH
27905: LD_VAR 0 2
27909: PPUSH
27910: CALL_OW 180
// wait ( 0 0$1 ) ;
27914: LD_INT 35
27916: PPUSH
27917: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27921: LD_ADDR_EXP 107
27925: PUSH
27926: LD_EXP 107
27930: PUSH
27931: LD_VAR 0 5
27935: DIFF
27936: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27937: LD_ADDR_EXP 107
27941: PUSH
27942: LD_EXP 107
27946: PUSH
27947: LD_VAR 0 1
27951: DIFF
27952: ST_TO_ADDR
// break ;
27953: GO 28106
// end ; end else
27955: GO 28104
// if GetControl ( vehicle ) = control_remote then
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 263
27966: PUSH
27967: LD_INT 2
27969: EQUAL
27970: IFFALSE 28056
// begin wait ( 0 0$2 ) ;
27972: LD_INT 70
27974: PPUSH
27975: CALL_OW 67
// repeat wait ( 10 ) ;
27979: LD_INT 10
27981: PPUSH
27982: CALL_OW 67
// Connect ( vehicle ) ;
27986: LD_VAR 0 1
27990: PPUSH
27991: CALL 42339 0 1
// until IsControledBy ( vehicle ) ;
27995: LD_VAR 0 1
27999: PPUSH
28000: CALL_OW 312
28004: IFFALSE 27979
// wait ( 10 ) ;
28006: LD_INT 10
28008: PPUSH
28009: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28013: LD_VAR 0 1
28017: PPUSH
28018: LD_EXP 106
28022: PUSH
28023: LD_VAR 0 4
28027: ARRAY
28028: PUSH
28029: LD_INT 3
28031: ARRAY
28032: PPUSH
28033: LD_EXP 106
28037: PUSH
28038: LD_VAR 0 4
28042: ARRAY
28043: PUSH
28044: LD_INT 4
28046: ARRAY
28047: PPUSH
28048: CALL_OW 111
// break ;
28052: GO 28106
// end else
28054: GO 28104
// begin wait ( 0 0$3 ) ;
28056: LD_INT 105
28058: PPUSH
28059: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28063: LD_VAR 0 1
28067: PPUSH
28068: LD_EXP 106
28072: PUSH
28073: LD_VAR 0 4
28077: ARRAY
28078: PUSH
28079: LD_INT 3
28081: ARRAY
28082: PPUSH
28083: LD_EXP 106
28087: PUSH
28088: LD_VAR 0 4
28092: ARRAY
28093: PUSH
28094: LD_INT 4
28096: ARRAY
28097: PPUSH
28098: CALL_OW 111
// break ;
28102: GO 28106
// end ; end ;
28104: GO 27555
28106: POP
28107: POP
// end ;
28108: LD_VAR 0 3
28112: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28113: LD_INT 0
28115: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28116: LD_VAR 0 1
28120: PUSH
28121: LD_INT 250
28123: EQUAL
28124: IFFALSE 28141
28126: PUSH
28127: LD_VAR 0 2
28131: PPUSH
28132: CALL_OW 264
28136: PUSH
28137: LD_INT 81
28139: EQUAL
28140: AND
28141: IFFALSE 28162
// MinerPlaceMine ( unit , x , y ) ;
28143: LD_VAR 0 2
28147: PPUSH
28148: LD_VAR 0 4
28152: PPUSH
28153: LD_VAR 0 5
28157: PPUSH
28158: CALL 31508 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28162: LD_VAR 0 1
28166: PUSH
28167: LD_INT 251
28169: EQUAL
28170: IFFALSE 28187
28172: PUSH
28173: LD_VAR 0 2
28177: PPUSH
28178: CALL_OW 264
28182: PUSH
28183: LD_INT 81
28185: EQUAL
28186: AND
28187: IFFALSE 28208
// MinerDetonateMine ( unit , x , y ) ;
28189: LD_VAR 0 2
28193: PPUSH
28194: LD_VAR 0 4
28198: PPUSH
28199: LD_VAR 0 5
28203: PPUSH
28204: CALL 31915 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28208: LD_VAR 0 1
28212: PUSH
28213: LD_INT 252
28215: EQUAL
28216: IFFALSE 28233
28218: PUSH
28219: LD_VAR 0 2
28223: PPUSH
28224: CALL_OW 264
28228: PUSH
28229: LD_INT 81
28231: EQUAL
28232: AND
28233: IFFALSE 28254
// MinerCreateMinefield ( unit , x , y ) ;
28235: LD_VAR 0 2
28239: PPUSH
28240: LD_VAR 0 4
28244: PPUSH
28245: LD_VAR 0 5
28249: PPUSH
28250: CALL 32147 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28254: LD_VAR 0 1
28258: PUSH
28259: LD_INT 253
28261: EQUAL
28262: IFFALSE 28279
28264: PUSH
28265: LD_VAR 0 2
28269: PPUSH
28270: CALL_OW 257
28274: PUSH
28275: LD_INT 5
28277: EQUAL
28278: AND
28279: IFFALSE 28300
// ComBinocular ( unit , x , y ) ;
28281: LD_VAR 0 2
28285: PPUSH
28286: LD_VAR 0 4
28290: PPUSH
28291: LD_VAR 0 5
28295: PPUSH
28296: CALL 32522 0 3
// if selectedUnit then
28300: LD_VAR 0 3
28304: IFFALSE 28364
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28306: LD_VAR 0 1
28310: PUSH
28311: LD_INT 254
28313: EQUAL
28314: IFFALSE 28331
28316: PUSH
28317: LD_VAR 0 2
28321: PPUSH
28322: CALL_OW 264
28326: PUSH
28327: LD_INT 99
28329: EQUAL
28330: AND
28331: IFFALSE 28348
28333: PUSH
28334: LD_VAR 0 3
28338: PPUSH
28339: CALL_OW 263
28343: PUSH
28344: LD_INT 3
28346: EQUAL
28347: AND
28348: IFFALSE 28364
// HackDestroyVehicle ( unit , selectedUnit ) ;
28350: LD_VAR 0 2
28354: PPUSH
28355: LD_VAR 0 3
28359: PPUSH
28360: CALL 30698 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28364: LD_VAR 0 1
28368: PUSH
28369: LD_INT 255
28371: EQUAL
28372: IFFALSE 28396
28374: PUSH
28375: LD_VAR 0 2
28379: PPUSH
28380: CALL_OW 264
28384: PUSH
28385: LD_INT 14
28387: PUSH
28388: LD_INT 53
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: IN
28395: AND
28396: IFFALSE 28414
28398: PUSH
28399: LD_VAR 0 4
28403: PPUSH
28404: LD_VAR 0 5
28408: PPUSH
28409: CALL_OW 488
28413: AND
28414: IFFALSE 28438
// CutTreeXYR ( unit , x , y , 12 ) ;
28416: LD_VAR 0 2
28420: PPUSH
28421: LD_VAR 0 4
28425: PPUSH
28426: LD_VAR 0 5
28430: PPUSH
28431: LD_INT 12
28433: PPUSH
28434: CALL 28629 0 4
// if cmd = 256 then
28438: LD_VAR 0 1
28442: PUSH
28443: LD_INT 256
28445: EQUAL
28446: IFFALSE 28467
// SetFactoryWaypoint ( unit , x , y ) ;
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_VAR 0 4
28457: PPUSH
28458: LD_VAR 0 5
28462: PPUSH
28463: CALL 25908 0 3
// if cmd = 257 then
28467: LD_VAR 0 1
28471: PUSH
28472: LD_INT 257
28474: EQUAL
28475: IFFALSE 28496
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 4
28486: PPUSH
28487: LD_VAR 0 5
28491: PPUSH
28492: CALL 26404 0 3
// if cmd = 258 then
28496: LD_VAR 0 1
28500: PUSH
28501: LD_INT 258
28503: EQUAL
28504: IFFALSE 28528
// BurnTreeXYR ( unit , x , y , 8 ) ;
28506: LD_VAR 0 2
28510: PPUSH
28511: LD_VAR 0 4
28515: PPUSH
28516: LD_VAR 0 5
28520: PPUSH
28521: LD_INT 8
28523: PPUSH
28524: CALL 29051 0 4
// end ;
28528: LD_VAR 0 6
28532: RET
// export function ComRadiation ( un ) ; var eff ; begin
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28537: LD_VAR 0 1
28541: PPUSH
28542: CALL_OW 264
28546: PUSH
28547: LD_INT 91
28549: NONEQUAL
28550: IFFALSE 28554
// exit ;
28552: GO 28624
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28554: LD_INT 68
28556: PPUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 255
28566: PPUSH
28567: CALL_OW 321
28571: PUSH
28572: LD_INT 2
28574: EQUAL
28575: IFFALSE 28587
// eff := 50 else
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_INT 50
28584: ST_TO_ADDR
28585: GO 28595
// eff := 25 ;
28587: LD_ADDR_VAR 0 3
28591: PUSH
28592: LD_INT 25
28594: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 250
28604: PPUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 251
28614: PPUSH
28615: LD_VAR 0 3
28619: PPUSH
28620: CALL_OW 495
// end ;
28624: LD_VAR 0 2
28628: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28629: LD_INT 0
28631: PPUSH
28632: PPUSH
28633: PPUSH
28634: PPUSH
28635: PPUSH
28636: PPUSH
28637: PPUSH
28638: PPUSH
28639: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28640: LD_VAR 0 1
28644: PPUSH
28645: CALL_OW 302
28649: NOT
28650: IFTRUE 28669
28652: PUSH
28653: LD_VAR 0 2
28657: PPUSH
28658: LD_VAR 0 3
28662: PPUSH
28663: CALL_OW 488
28667: NOT
28668: OR
28669: IFTRUE 28678
28671: PUSH
28672: LD_VAR 0 4
28676: NOT
28677: OR
28678: IFFALSE 28682
// exit ;
28680: GO 29046
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 437
28691: PPUSH
28692: CALL 36061 0 1
28696: PUSH
28697: LD_INT 10
28699: GREATER
28700: IFFALSE 28704
// exit ;
28702: GO 29046
// list := [ ] ;
28704: LD_ADDR_VAR 0 13
28708: PUSH
28709: EMPTY
28710: ST_TO_ADDR
// if x - r < 0 then
28711: LD_VAR 0 2
28715: PUSH
28716: LD_VAR 0 4
28720: MINUS
28721: PUSH
28722: LD_INT 0
28724: LESS
28725: IFFALSE 28737
// min_x := 0 else
28727: LD_ADDR_VAR 0 7
28731: PUSH
28732: LD_INT 0
28734: ST_TO_ADDR
28735: GO 28753
// min_x := x - r ;
28737: LD_ADDR_VAR 0 7
28741: PUSH
28742: LD_VAR 0 2
28746: PUSH
28747: LD_VAR 0 4
28751: MINUS
28752: ST_TO_ADDR
// if y - r < 0 then
28753: LD_VAR 0 3
28757: PUSH
28758: LD_VAR 0 4
28762: MINUS
28763: PUSH
28764: LD_INT 0
28766: LESS
28767: IFFALSE 28779
// min_y := 0 else
28769: LD_ADDR_VAR 0 8
28773: PUSH
28774: LD_INT 0
28776: ST_TO_ADDR
28777: GO 28795
// min_y := y - r ;
28779: LD_ADDR_VAR 0 8
28783: PUSH
28784: LD_VAR 0 3
28788: PUSH
28789: LD_VAR 0 4
28793: MINUS
28794: ST_TO_ADDR
// max_x := x + r ;
28795: LD_ADDR_VAR 0 9
28799: PUSH
28800: LD_VAR 0 2
28804: PUSH
28805: LD_VAR 0 4
28809: PLUS
28810: ST_TO_ADDR
// max_y := y + r ;
28811: LD_ADDR_VAR 0 10
28815: PUSH
28816: LD_VAR 0 3
28820: PUSH
28821: LD_VAR 0 4
28825: PLUS
28826: ST_TO_ADDR
// for _x = min_x to max_x do
28827: LD_ADDR_VAR 0 11
28831: PUSH
28832: DOUBLE
28833: LD_VAR 0 7
28837: DEC
28838: ST_TO_ADDR
28839: LD_VAR 0 9
28843: PUSH
28844: FOR_TO
28845: IFFALSE 28964
// for _y = min_y to max_y do
28847: LD_ADDR_VAR 0 12
28851: PUSH
28852: DOUBLE
28853: LD_VAR 0 8
28857: DEC
28858: ST_TO_ADDR
28859: LD_VAR 0 10
28863: PUSH
28864: FOR_TO
28865: IFFALSE 28960
// begin if not ValidHex ( _x , _y ) then
28867: LD_VAR 0 11
28871: PPUSH
28872: LD_VAR 0 12
28876: PPUSH
28877: CALL_OW 488
28881: NOT
28882: IFFALSE 28886
// continue ;
28884: GO 28864
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28886: LD_VAR 0 11
28890: PPUSH
28891: LD_VAR 0 12
28895: PPUSH
28896: CALL_OW 351
28900: IFFALSE 28918
28902: PUSH
28903: LD_VAR 0 11
28907: PPUSH
28908: LD_VAR 0 12
28912: PPUSH
28913: CALL_OW 554
28917: AND
28918: IFFALSE 28958
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28920: LD_ADDR_VAR 0 13
28924: PUSH
28925: LD_VAR 0 13
28929: PPUSH
28930: LD_VAR 0 13
28934: PUSH
28935: LD_INT 1
28937: PLUS
28938: PPUSH
28939: LD_VAR 0 11
28943: PUSH
28944: LD_VAR 0 12
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PPUSH
28953: CALL_OW 2
28957: ST_TO_ADDR
// end ;
28958: GO 28864
28960: POP
28961: POP
28962: GO 28844
28964: POP
28965: POP
// if not list then
28966: LD_VAR 0 13
28970: NOT
28971: IFFALSE 28975
// exit ;
28973: GO 29046
// for i in list do
28975: LD_ADDR_VAR 0 6
28979: PUSH
28980: LD_VAR 0 13
28984: PUSH
28985: FOR_IN
28986: IFFALSE 29044
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28988: LD_VAR 0 1
28992: PPUSH
28993: LD_STRING M
28995: PUSH
28996: LD_VAR 0 6
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: PUSH
29005: LD_VAR 0 6
29009: PUSH
29010: LD_INT 2
29012: ARRAY
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: PPUSH
29038: CALL_OW 447
29042: GO 28985
29044: POP
29045: POP
// end ;
29046: LD_VAR 0 5
29050: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29051: LD_INT 0
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
29058: PPUSH
29059: PPUSH
29060: PPUSH
29061: PPUSH
29062: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29063: LD_VAR 0 1
29067: PPUSH
29068: CALL_OW 302
29072: NOT
29073: IFTRUE 29092
29075: PUSH
29076: LD_VAR 0 2
29080: PPUSH
29081: LD_VAR 0 3
29085: PPUSH
29086: CALL_OW 488
29090: NOT
29091: OR
29092: IFTRUE 29101
29094: PUSH
29095: LD_VAR 0 4
29099: NOT
29100: OR
29101: IFFALSE 29105
// exit ;
29103: GO 29644
// if Count ( GetTaskList ( flame ) ) > 10 then
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 437
29114: PPUSH
29115: CALL 36061 0 1
29119: PUSH
29120: LD_INT 10
29122: GREATER
29123: IFFALSE 29127
// exit ;
29125: GO 29644
// list := [ ] ;
29127: LD_ADDR_VAR 0 13
29131: PUSH
29132: EMPTY
29133: ST_TO_ADDR
// if x - r < 0 then
29134: LD_VAR 0 2
29138: PUSH
29139: LD_VAR 0 4
29143: MINUS
29144: PUSH
29145: LD_INT 0
29147: LESS
29148: IFFALSE 29160
// min_x := 0 else
29150: LD_ADDR_VAR 0 7
29154: PUSH
29155: LD_INT 0
29157: ST_TO_ADDR
29158: GO 29176
// min_x := x - r ;
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: LD_VAR 0 2
29169: PUSH
29170: LD_VAR 0 4
29174: MINUS
29175: ST_TO_ADDR
// if y - r < 0 then
29176: LD_VAR 0 3
29180: PUSH
29181: LD_VAR 0 4
29185: MINUS
29186: PUSH
29187: LD_INT 0
29189: LESS
29190: IFFALSE 29202
// min_y := 0 else
29192: LD_ADDR_VAR 0 8
29196: PUSH
29197: LD_INT 0
29199: ST_TO_ADDR
29200: GO 29218
// min_y := y - r ;
29202: LD_ADDR_VAR 0 8
29206: PUSH
29207: LD_VAR 0 3
29211: PUSH
29212: LD_VAR 0 4
29216: MINUS
29217: ST_TO_ADDR
// max_x := x + r ;
29218: LD_ADDR_VAR 0 9
29222: PUSH
29223: LD_VAR 0 2
29227: PUSH
29228: LD_VAR 0 4
29232: PLUS
29233: ST_TO_ADDR
// max_y := y + r ;
29234: LD_ADDR_VAR 0 10
29238: PUSH
29239: LD_VAR 0 3
29243: PUSH
29244: LD_VAR 0 4
29248: PLUS
29249: ST_TO_ADDR
// for _x = min_x to max_x do
29250: LD_ADDR_VAR 0 11
29254: PUSH
29255: DOUBLE
29256: LD_VAR 0 7
29260: DEC
29261: ST_TO_ADDR
29262: LD_VAR 0 9
29266: PUSH
29267: FOR_TO
29268: IFFALSE 29387
// for _y = min_y to max_y do
29270: LD_ADDR_VAR 0 12
29274: PUSH
29275: DOUBLE
29276: LD_VAR 0 8
29280: DEC
29281: ST_TO_ADDR
29282: LD_VAR 0 10
29286: PUSH
29287: FOR_TO
29288: IFFALSE 29383
// begin if not ValidHex ( _x , _y ) then
29290: LD_VAR 0 11
29294: PPUSH
29295: LD_VAR 0 12
29299: PPUSH
29300: CALL_OW 488
29304: NOT
29305: IFFALSE 29309
// continue ;
29307: GO 29287
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29309: LD_VAR 0 11
29313: PPUSH
29314: LD_VAR 0 12
29318: PPUSH
29319: CALL_OW 351
29323: IFFALSE 29341
29325: PUSH
29326: LD_VAR 0 11
29330: PPUSH
29331: LD_VAR 0 12
29335: PPUSH
29336: CALL_OW 554
29340: AND
29341: IFFALSE 29381
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29343: LD_ADDR_VAR 0 13
29347: PUSH
29348: LD_VAR 0 13
29352: PPUSH
29353: LD_VAR 0 13
29357: PUSH
29358: LD_INT 1
29360: PLUS
29361: PPUSH
29362: LD_VAR 0 11
29366: PUSH
29367: LD_VAR 0 12
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PPUSH
29376: CALL_OW 2
29380: ST_TO_ADDR
// end ;
29381: GO 29287
29383: POP
29384: POP
29385: GO 29267
29387: POP
29388: POP
// if not list then
29389: LD_VAR 0 13
29393: NOT
29394: IFFALSE 29398
// exit ;
29396: GO 29644
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29398: LD_ADDR_VAR 0 13
29402: PUSH
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_VAR 0 13
29412: PPUSH
29413: LD_INT 1
29415: PPUSH
29416: LD_INT 1
29418: PPUSH
29419: CALL 39467 0 4
29423: ST_TO_ADDR
// ComStop ( flame ) ;
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 141
// for i in list do
29433: LD_ADDR_VAR 0 6
29437: PUSH
29438: LD_VAR 0 13
29442: PUSH
29443: FOR_IN
29444: IFFALSE 29475
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29446: LD_VAR 0 1
29450: PPUSH
29451: LD_VAR 0 6
29455: PUSH
29456: LD_INT 1
29458: ARRAY
29459: PPUSH
29460: LD_VAR 0 6
29464: PUSH
29465: LD_INT 2
29467: ARRAY
29468: PPUSH
29469: CALL_OW 176
29473: GO 29443
29475: POP
29476: POP
// repeat wait ( 0 0$1 ) ;
29477: LD_INT 35
29479: PPUSH
29480: CALL_OW 67
// task := GetTaskList ( flame ) ;
29484: LD_ADDR_VAR 0 14
29488: PUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 437
29498: ST_TO_ADDR
// if not task then
29499: LD_VAR 0 14
29503: NOT
29504: IFFALSE 29508
// exit ;
29506: GO 29644
// if task [ 1 ] [ 1 ] <> | then
29508: LD_VAR 0 14
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PUSH
29521: LD_STRING |
29523: NONEQUAL
29524: IFFALSE 29528
// exit ;
29526: GO 29644
// _x := task [ 1 ] [ 2 ] ;
29528: LD_ADDR_VAR 0 11
29532: PUSH
29533: LD_VAR 0 14
29537: PUSH
29538: LD_INT 1
29540: ARRAY
29541: PUSH
29542: LD_INT 2
29544: ARRAY
29545: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29546: LD_ADDR_VAR 0 12
29550: PUSH
29551: LD_VAR 0 14
29555: PUSH
29556: LD_INT 1
29558: ARRAY
29559: PUSH
29560: LD_INT 3
29562: ARRAY
29563: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29564: LD_VAR 0 11
29568: PPUSH
29569: LD_VAR 0 12
29573: PPUSH
29574: CALL_OW 351
29578: NOT
29579: IFTRUE 29598
29581: PUSH
29582: LD_VAR 0 11
29586: PPUSH
29587: LD_VAR 0 12
29591: PPUSH
29592: CALL_OW 554
29596: NOT
29597: OR
29598: IFFALSE 29632
// begin task := Delete ( task , 1 ) ;
29600: LD_ADDR_VAR 0 14
29604: PUSH
29605: LD_VAR 0 14
29609: PPUSH
29610: LD_INT 1
29612: PPUSH
29613: CALL_OW 3
29617: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29618: LD_VAR 0 1
29622: PPUSH
29623: LD_VAR 0 14
29627: PPUSH
29628: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 314
29641: NOT
29642: IFFALSE 29477
// end ;
29644: LD_VAR 0 5
29648: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29649: LD_EXP 110
29653: NOT
29654: IFFALSE 29704
29656: GO 29658
29658: DISABLE
// begin initHack := true ;
29659: LD_ADDR_EXP 110
29663: PUSH
29664: LD_INT 1
29666: ST_TO_ADDR
// hackTanks := [ ] ;
29667: LD_ADDR_EXP 111
29671: PUSH
29672: EMPTY
29673: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29674: LD_ADDR_EXP 112
29678: PUSH
29679: EMPTY
29680: ST_TO_ADDR
// hackLimit := 3 ;
29681: LD_ADDR_EXP 113
29685: PUSH
29686: LD_INT 3
29688: ST_TO_ADDR
// hackDist := 12 ;
29689: LD_ADDR_EXP 114
29693: PUSH
29694: LD_INT 12
29696: ST_TO_ADDR
// hackCounter := [ ] ;
29697: LD_ADDR_EXP 115
29701: PUSH
29702: EMPTY
29703: ST_TO_ADDR
// end ;
29704: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29705: LD_EXP 110
29709: IFFALSE 29727
29711: PUSH
29712: LD_INT 34
29714: PUSH
29715: LD_INT 99
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PPUSH
29722: CALL_OW 69
29726: AND
29727: IFFALSE 29980
29729: GO 29731
29731: DISABLE
29732: LD_INT 0
29734: PPUSH
29735: PPUSH
// begin enable ;
29736: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29737: LD_ADDR_VAR 0 1
29741: PUSH
29742: LD_INT 34
29744: PUSH
29745: LD_INT 99
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: PUSH
29757: FOR_IN
29758: IFFALSE 29978
// begin if not i in hackTanks then
29760: LD_VAR 0 1
29764: PUSH
29765: LD_EXP 111
29769: IN
29770: NOT
29771: IFFALSE 29854
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29773: LD_ADDR_EXP 111
29777: PUSH
29778: LD_EXP 111
29782: PPUSH
29783: LD_EXP 111
29787: PUSH
29788: LD_INT 1
29790: PLUS
29791: PPUSH
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL_OW 1
29801: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29802: LD_ADDR_EXP 112
29806: PUSH
29807: LD_EXP 112
29811: PPUSH
29812: LD_EXP 112
29816: PUSH
29817: LD_INT 1
29819: PLUS
29820: PPUSH
29821: EMPTY
29822: PPUSH
29823: CALL_OW 1
29827: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29828: LD_ADDR_EXP 115
29832: PUSH
29833: LD_EXP 115
29837: PPUSH
29838: LD_EXP 115
29842: PUSH
29843: LD_INT 1
29845: PLUS
29846: PPUSH
29847: EMPTY
29848: PPUSH
29849: CALL_OW 1
29853: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 302
29863: NOT
29864: IFFALSE 29877
// begin HackUnlinkAll ( i ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL 29983 0 1
// continue ;
29875: GO 29757
// end ; HackCheckCapturedStatus ( i ) ;
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL 30428 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29886: LD_ADDR_VAR 0 2
29890: PUSH
29891: LD_INT 81
29893: PUSH
29894: LD_VAR 0 1
29898: PPUSH
29899: CALL_OW 255
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 33
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 91
29920: PUSH
29921: LD_VAR 0 1
29925: PUSH
29926: LD_EXP 114
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 50
29938: PUSH
29939: EMPTY
29940: LIST
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: PPUSH
29948: CALL_OW 69
29952: ST_TO_ADDR
// if not tmp then
29953: LD_VAR 0 2
29957: NOT
29958: IFFALSE 29962
// continue ;
29960: GO 29757
// HackLink ( i , tmp ) ;
29962: LD_VAR 0 1
29966: PPUSH
29967: LD_VAR 0 2
29971: PPUSH
29972: CALL 30119 0 2
// end ;
29976: GO 29757
29978: POP
29979: POP
// end ;
29980: PPOPN 2
29982: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29983: LD_INT 0
29985: PPUSH
29986: PPUSH
29987: PPUSH
// if not hack in hackTanks then
29988: LD_VAR 0 1
29992: PUSH
29993: LD_EXP 111
29997: IN
29998: NOT
29999: IFFALSE 30003
// exit ;
30001: GO 30114
// index := GetElementIndex ( hackTanks , hack ) ;
30003: LD_ADDR_VAR 0 4
30007: PUSH
30008: LD_EXP 111
30012: PPUSH
30013: LD_VAR 0 1
30017: PPUSH
30018: CALL 38762 0 2
30022: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30023: LD_EXP 112
30027: PUSH
30028: LD_VAR 0 4
30032: ARRAY
30033: IFFALSE 30114
// begin for i in hackTanksCaptured [ index ] do
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_EXP 112
30044: PUSH
30045: LD_VAR 0 4
30049: ARRAY
30050: PUSH
30051: FOR_IN
30052: IFFALSE 30078
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30054: LD_VAR 0 3
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: LD_VAR 0 3
30067: PUSH
30068: LD_INT 2
30070: ARRAY
30071: PPUSH
30072: CALL_OW 235
30076: GO 30051
30078: POP
30079: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30080: LD_ADDR_EXP 112
30084: PUSH
30085: LD_EXP 112
30089: PPUSH
30090: LD_VAR 0 4
30094: PPUSH
30095: EMPTY
30096: PPUSH
30097: CALL_OW 1
30101: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30102: LD_VAR 0 1
30106: PPUSH
30107: LD_INT 0
30109: PPUSH
30110: CALL_OW 505
// end ; end ;
30114: LD_VAR 0 2
30118: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30119: LD_INT 0
30121: PPUSH
30122: PPUSH
30123: PPUSH
// if not hack in hackTanks or not vehicles then
30124: LD_VAR 0 1
30128: PUSH
30129: LD_EXP 111
30133: IN
30134: NOT
30135: IFTRUE 30144
30137: PUSH
30138: LD_VAR 0 2
30142: NOT
30143: OR
30144: IFFALSE 30148
// exit ;
30146: GO 30423
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30148: LD_ADDR_VAR 0 2
30152: PUSH
30153: LD_VAR 0 1
30157: PPUSH
30158: LD_VAR 0 2
30162: PPUSH
30163: LD_INT 1
30165: PPUSH
30166: LD_INT 1
30168: PPUSH
30169: CALL 39414 0 4
30173: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30174: LD_ADDR_VAR 0 5
30178: PUSH
30179: LD_EXP 111
30183: PPUSH
30184: LD_VAR 0 1
30188: PPUSH
30189: CALL 38762 0 2
30193: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30194: LD_EXP 112
30198: PUSH
30199: LD_VAR 0 5
30203: ARRAY
30204: PUSH
30205: LD_EXP 113
30209: LESS
30210: IFFALSE 30399
// begin for i := 1 to vehicles do
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: DOUBLE
30218: LD_INT 1
30220: DEC
30221: ST_TO_ADDR
30222: LD_VAR 0 2
30226: PUSH
30227: FOR_TO
30228: IFFALSE 30397
// begin if hackTanksCaptured [ index ] = hackLimit then
30230: LD_EXP 112
30234: PUSH
30235: LD_VAR 0 5
30239: ARRAY
30240: PUSH
30241: LD_EXP 113
30245: EQUAL
30246: IFFALSE 30250
// break ;
30248: GO 30397
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30250: LD_ADDR_EXP 115
30254: PUSH
30255: LD_EXP 115
30259: PPUSH
30260: LD_VAR 0 5
30264: PPUSH
30265: LD_EXP 115
30269: PUSH
30270: LD_VAR 0 5
30274: ARRAY
30275: PUSH
30276: LD_INT 1
30278: PLUS
30279: PPUSH
30280: CALL_OW 1
30284: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30285: LD_ADDR_EXP 112
30289: PUSH
30290: LD_EXP 112
30294: PPUSH
30295: LD_VAR 0 5
30299: PUSH
30300: LD_EXP 112
30304: PUSH
30305: LD_VAR 0 5
30309: ARRAY
30310: PUSH
30311: LD_INT 1
30313: PLUS
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: LD_VAR 0 2
30323: PUSH
30324: LD_VAR 0 4
30328: ARRAY
30329: PUSH
30330: LD_VAR 0 2
30334: PUSH
30335: LD_VAR 0 4
30339: ARRAY
30340: PPUSH
30341: CALL_OW 255
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PPUSH
30350: CALL 38979 0 3
30354: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30355: LD_VAR 0 2
30359: PUSH
30360: LD_VAR 0 4
30364: ARRAY
30365: PPUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 255
30375: PPUSH
30376: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30380: LD_VAR 0 2
30384: PUSH
30385: LD_VAR 0 4
30389: ARRAY
30390: PPUSH
30391: CALL_OW 141
// end ;
30395: GO 30227
30397: POP
30398: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30399: LD_VAR 0 1
30403: PPUSH
30404: LD_EXP 112
30408: PUSH
30409: LD_VAR 0 5
30413: ARRAY
30414: PUSH
30415: LD_INT 0
30417: PLUS
30418: PPUSH
30419: CALL_OW 505
// end ;
30423: LD_VAR 0 3
30427: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30428: LD_INT 0
30430: PPUSH
30431: PPUSH
30432: PPUSH
30433: PPUSH
// if not hack in hackTanks then
30434: LD_VAR 0 1
30438: PUSH
30439: LD_EXP 111
30443: IN
30444: NOT
30445: IFFALSE 30449
// exit ;
30447: GO 30693
// index := GetElementIndex ( hackTanks , hack ) ;
30449: LD_ADDR_VAR 0 4
30453: PUSH
30454: LD_EXP 111
30458: PPUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL 38762 0 2
30468: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: DOUBLE
30475: LD_EXP 112
30479: PUSH
30480: LD_VAR 0 4
30484: ARRAY
30485: INC
30486: ST_TO_ADDR
30487: LD_INT 1
30489: PUSH
30490: FOR_DOWNTO
30491: IFFALSE 30667
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30493: LD_ADDR_VAR 0 5
30497: PUSH
30498: LD_EXP 112
30502: PUSH
30503: LD_VAR 0 4
30507: ARRAY
30508: PUSH
30509: LD_VAR 0 3
30513: ARRAY
30514: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30515: LD_VAR 0 5
30519: PUSH
30520: LD_INT 1
30522: ARRAY
30523: PPUSH
30524: CALL_OW 302
30528: NOT
30529: IFTRUE 30557
30531: PUSH
30532: LD_VAR 0 5
30536: PUSH
30537: LD_INT 1
30539: ARRAY
30540: PPUSH
30541: CALL_OW 255
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 255
30555: NONEQUAL
30556: OR
30557: IFFALSE 30665
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30559: LD_VAR 0 5
30563: PUSH
30564: LD_INT 1
30566: ARRAY
30567: PPUSH
30568: CALL_OW 305
30572: IFFALSE 30600
30574: PUSH
30575: LD_VAR 0 5
30579: PUSH
30580: LD_INT 1
30582: ARRAY
30583: PPUSH
30584: CALL_OW 255
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 255
30598: EQUAL
30599: AND
30600: IFFALSE 30624
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30602: LD_VAR 0 5
30606: PUSH
30607: LD_INT 1
30609: ARRAY
30610: PPUSH
30611: LD_VAR 0 5
30615: PUSH
30616: LD_INT 2
30618: ARRAY
30619: PPUSH
30620: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30624: LD_ADDR_EXP 112
30628: PUSH
30629: LD_EXP 112
30633: PPUSH
30634: LD_VAR 0 4
30638: PPUSH
30639: LD_EXP 112
30643: PUSH
30644: LD_VAR 0 4
30648: ARRAY
30649: PPUSH
30650: LD_VAR 0 3
30654: PPUSH
30655: CALL_OW 3
30659: PPUSH
30660: CALL_OW 1
30664: ST_TO_ADDR
// end ; end ;
30665: GO 30490
30667: POP
30668: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_EXP 112
30678: PUSH
30679: LD_VAR 0 4
30683: ARRAY
30684: PUSH
30685: LD_INT 0
30687: PLUS
30688: PPUSH
30689: CALL_OW 505
// end ;
30693: LD_VAR 0 2
30697: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
// if not hack in hackTanks then
30704: LD_VAR 0 1
30708: PUSH
30709: LD_EXP 111
30713: IN
30714: NOT
30715: IFFALSE 30719
// exit ;
30717: GO 30804
// index := GetElementIndex ( hackTanks , hack ) ;
30719: LD_ADDR_VAR 0 5
30723: PUSH
30724: LD_EXP 111
30728: PPUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL 38762 0 2
30738: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30739: LD_ADDR_VAR 0 4
30743: PUSH
30744: DOUBLE
30745: LD_INT 1
30747: DEC
30748: ST_TO_ADDR
30749: LD_EXP 112
30753: PUSH
30754: LD_VAR 0 5
30758: ARRAY
30759: PUSH
30760: FOR_TO
30761: IFFALSE 30802
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30763: LD_EXP 112
30767: PUSH
30768: LD_VAR 0 5
30772: ARRAY
30773: PUSH
30774: LD_VAR 0 4
30778: ARRAY
30779: PUSH
30780: LD_INT 1
30782: ARRAY
30783: PUSH
30784: LD_VAR 0 2
30788: EQUAL
30789: IFFALSE 30800
// KillUnit ( vehicle ) ;
30791: LD_VAR 0 2
30795: PPUSH
30796: CALL_OW 66
30800: GO 30760
30802: POP
30803: POP
// end ;
30804: LD_VAR 0 3
30808: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30809: LD_EXP 116
30813: NOT
30814: IFFALSE 30947
30816: GO 30818
30818: DISABLE
30819: LD_INT 0
30821: PPUSH
// begin initMiner := true ;
30822: LD_ADDR_EXP 116
30826: PUSH
30827: LD_INT 1
30829: ST_TO_ADDR
// minersList := [ ] ;
30830: LD_ADDR_EXP 117
30834: PUSH
30835: EMPTY
30836: ST_TO_ADDR
// minerMinesList := [ ] ;
30837: LD_ADDR_EXP 118
30841: PUSH
30842: EMPTY
30843: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
30844: LD_ADDR_EXP 119
30848: PUSH
30849: LD_INT 10
30851: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30852: LD_ADDR_VAR 0 1
30856: PUSH
30857: LD_INT 34
30859: PUSH
30860: LD_INT 81
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PPUSH
30867: CALL_OW 69
30871: PUSH
30872: FOR_IN
30873: IFFALSE 30945
// begin if not i in minersList then
30875: LD_VAR 0 1
30879: PUSH
30880: LD_EXP 117
30884: IN
30885: NOT
30886: IFFALSE 30943
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30888: LD_ADDR_EXP 117
30892: PUSH
30893: LD_EXP 117
30897: PPUSH
30898: LD_EXP 117
30902: PUSH
30903: LD_INT 1
30905: PLUS
30906: PPUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 1
30916: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30917: LD_ADDR_EXP 118
30921: PUSH
30922: LD_EXP 118
30926: PPUSH
30927: LD_EXP 118
30931: PUSH
30932: LD_INT 1
30934: PLUS
30935: PPUSH
30936: EMPTY
30937: PPUSH
30938: CALL_OW 1
30942: ST_TO_ADDR
// end end ;
30943: GO 30872
30945: POP
30946: POP
// end ;
30947: PPOPN 1
30949: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30950: LD_EXP 116
30954: IFFALSE 30985
30956: PUSH
30957: LD_EXP 118
30961: PPUSH
30962: CALL 36061 0 1
30966: IFTRUE 30984
30968: PUSH
30969: LD_INT 34
30971: PUSH
30972: LD_INT 81
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PPUSH
30979: CALL_OW 69
30983: OR
30984: AND
30985: IFFALSE 31505
30987: GO 30989
30989: DISABLE
30990: LD_INT 0
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
// begin enable ;
30996: ENABLE
// for i := minerMinesList downto 1 do
30997: LD_ADDR_VAR 0 1
31001: PUSH
31002: DOUBLE
31003: LD_EXP 118
31007: INC
31008: ST_TO_ADDR
31009: LD_INT 1
31011: PUSH
31012: FOR_DOWNTO
31013: IFFALSE 31503
// begin side := GetSide ( minersList [ i ] ) ;
31015: LD_ADDR_VAR 0 3
31019: PUSH
31020: LD_EXP 117
31024: PUSH
31025: LD_VAR 0 1
31029: ARRAY
31030: PPUSH
31031: CALL_OW 255
31035: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
31036: LD_EXP 117
31040: PUSH
31041: LD_VAR 0 1
31045: ARRAY
31046: PPUSH
31047: CALL_OW 300
31051: IFFALSE 31072
31053: PUSH
31054: LD_VAR 0 3
31058: PUSH
31059: LD_OWVAR 2
31063: PUSH
31064: LD_INT 9
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: IN
31071: AND
31072: IFFALSE 31105
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
31074: LD_EXP 117
31078: PUSH
31079: LD_VAR 0 1
31083: ARRAY
31084: PPUSH
31085: LD_EXP 118
31089: PUSH
31090: LD_VAR 0 1
31094: ARRAY
31095: PPUSH
31096: CALL 36061 0 1
31100: PPUSH
31101: CALL_OW 505
// if not minerMinesList [ i ] then
31105: LD_EXP 118
31109: PUSH
31110: LD_VAR 0 1
31114: ARRAY
31115: NOT
31116: IFFALSE 31120
// continue ;
31118: GO 31012
// for j := minerMinesList [ i ] downto 1 do
31120: LD_ADDR_VAR 0 2
31124: PUSH
31125: DOUBLE
31126: LD_EXP 118
31130: PUSH
31131: LD_VAR 0 1
31135: ARRAY
31136: INC
31137: ST_TO_ADDR
31138: LD_INT 1
31140: PUSH
31141: FOR_DOWNTO
31142: IFFALSE 31499
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
31144: LD_EXP 117
31148: PUSH
31149: LD_VAR 0 1
31153: ARRAY
31154: PPUSH
31155: CALL_OW 301
31159: IFTRUE 31179
31161: PUSH
31162: LD_EXP 117
31166: PUSH
31167: LD_VAR 0 1
31171: ARRAY
31172: PPUSH
31173: CALL_OW 305
31177: NOT
31178: OR
31179: IFFALSE 31270
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31181: LD_EXP 118
31185: PUSH
31186: LD_VAR 0 1
31190: ARRAY
31191: PUSH
31192: LD_VAR 0 2
31196: ARRAY
31197: PUSH
31198: LD_INT 1
31200: ARRAY
31201: PPUSH
31202: LD_EXP 118
31206: PUSH
31207: LD_VAR 0 1
31211: ARRAY
31212: PUSH
31213: LD_VAR 0 2
31217: ARRAY
31218: PUSH
31219: LD_INT 2
31221: ARRAY
31222: PPUSH
31223: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31227: LD_ADDR_EXP 118
31231: PUSH
31232: LD_EXP 118
31236: PPUSH
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_EXP 118
31246: PUSH
31247: LD_VAR 0 1
31251: ARRAY
31252: PPUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: CALL_OW 3
31262: PPUSH
31263: CALL_OW 1
31267: ST_TO_ADDR
// continue ;
31268: GO 31141
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31270: LD_ADDR_VAR 0 4
31274: PUSH
31275: LD_EXP 118
31279: PUSH
31280: LD_VAR 0 1
31284: ARRAY
31285: PUSH
31286: LD_VAR 0 2
31290: ARRAY
31291: PUSH
31292: LD_INT 1
31294: ARRAY
31295: PPUSH
31296: LD_EXP 118
31300: PUSH
31301: LD_VAR 0 1
31305: ARRAY
31306: PUSH
31307: LD_VAR 0 2
31311: ARRAY
31312: PUSH
31313: LD_INT 2
31315: ARRAY
31316: PPUSH
31317: CALL_OW 428
31321: ST_TO_ADDR
// if not tmp then
31322: LD_VAR 0 4
31326: NOT
31327: IFFALSE 31331
// continue ;
31329: GO 31141
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31331: LD_VAR 0 4
31335: PUSH
31336: LD_INT 81
31338: PUSH
31339: LD_VAR 0 3
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 69
31352: IN
31353: IFFALSE 31403
31355: PUSH
31356: LD_EXP 118
31360: PUSH
31361: LD_VAR 0 1
31365: ARRAY
31366: PUSH
31367: LD_VAR 0 2
31371: ARRAY
31372: PUSH
31373: LD_INT 1
31375: ARRAY
31376: PPUSH
31377: LD_EXP 118
31381: PUSH
31382: LD_VAR 0 1
31386: ARRAY
31387: PUSH
31388: LD_VAR 0 2
31392: ARRAY
31393: PUSH
31394: LD_INT 2
31396: ARRAY
31397: PPUSH
31398: CALL_OW 458
31402: AND
31403: IFFALSE 31497
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31405: LD_EXP 118
31409: PUSH
31410: LD_VAR 0 1
31414: ARRAY
31415: PUSH
31416: LD_VAR 0 2
31420: ARRAY
31421: PUSH
31422: LD_INT 1
31424: ARRAY
31425: PPUSH
31426: LD_EXP 118
31430: PUSH
31431: LD_VAR 0 1
31435: ARRAY
31436: PUSH
31437: LD_VAR 0 2
31441: ARRAY
31442: PUSH
31443: LD_INT 2
31445: ARRAY
31446: PPUSH
31447: LD_VAR 0 3
31451: PPUSH
31452: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31456: LD_ADDR_EXP 118
31460: PUSH
31461: LD_EXP 118
31465: PPUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: LD_EXP 118
31475: PUSH
31476: LD_VAR 0 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 2
31486: PPUSH
31487: CALL_OW 3
31491: PPUSH
31492: CALL_OW 1
31496: ST_TO_ADDR
// end ; end ;
31497: GO 31141
31499: POP
31500: POP
// end ;
31501: GO 31012
31503: POP
31504: POP
// end ;
31505: PPOPN 4
31507: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31508: LD_INT 0
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
// result := false ;
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: LD_INT 0
31521: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31522: LD_VAR 0 1
31526: PPUSH
31527: CALL_OW 264
31531: PUSH
31532: LD_INT 81
31534: EQUAL
31535: NOT
31536: IFFALSE 31540
// exit ;
31538: GO 31910
// side := GetSide ( unit ) ;
31540: LD_ADDR_VAR 0 6
31544: PUSH
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 255
31554: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31555: LD_ADDR_VAR 0 5
31559: PUSH
31560: LD_EXP 117
31564: PPUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL 38762 0 2
31574: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31575: LD_EXP 118
31579: PUSH
31580: LD_VAR 0 5
31584: ARRAY
31585: PUSH
31586: LD_EXP 119
31590: GREATEREQUAL
31591: IFFALSE 31595
// exit ;
31593: GO 31910
// ComMoveXY ( unit , x , y ) ;
31595: LD_VAR 0 1
31599: PPUSH
31600: LD_VAR 0 2
31604: PPUSH
31605: LD_VAR 0 3
31609: PPUSH
31610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31614: LD_INT 35
31616: PPUSH
31617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_VAR 0 2
31630: PPUSH
31631: LD_VAR 0 3
31635: PPUSH
31636: CALL 70818 0 3
31640: NOT
31641: IFFALSE 31654
31643: PUSH
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 314
31653: AND
31654: IFFALSE 31658
// exit ;
31656: GO 31910
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31658: LD_VAR 0 2
31662: PPUSH
31663: LD_VAR 0 3
31667: PPUSH
31668: CALL_OW 428
31672: PUSH
31673: LD_VAR 0 1
31677: EQUAL
31678: IFFALSE 31692
31680: PUSH
31681: LD_VAR 0 1
31685: PPUSH
31686: CALL_OW 314
31690: NOT
31691: AND
31692: IFFALSE 31614
// if MineAtPos ( x , y ) then
31694: LD_VAR 0 2
31698: PPUSH
31699: LD_VAR 0 3
31703: PPUSH
31704: CALL_OW 458
31708: IFFALSE 31712
// exit ;
31710: GO 31910
// if your_side = side then
31712: LD_OWVAR 2
31716: PUSH
31717: LD_VAR 0 6
31721: EQUAL
31722: IFFALSE 31741
// PlaySoundXY ( x , y , PlantMine ) ;
31724: LD_VAR 0 2
31728: PPUSH
31729: LD_VAR 0 3
31733: PPUSH
31734: LD_STRING PlantMine
31736: PPUSH
31737: CALL_OW 366
// repeat wait ( 1 ) ;
31741: LD_INT 1
31743: PPUSH
31744: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31748: LD_VAR 0 2
31752: PPUSH
31753: LD_VAR 0 3
31757: PPUSH
31758: LD_VAR 0 6
31762: PPUSH
31763: LD_INT 0
31765: PPUSH
31766: CALL_OW 454
31770: IFFALSE 31741
// if MineAtPos ( x , y ) then
31772: LD_VAR 0 2
31776: PPUSH
31777: LD_VAR 0 3
31781: PPUSH
31782: CALL_OW 458
31786: IFFALSE 31902
// begin for i in minerMinesList [ index ] do
31788: LD_ADDR_VAR 0 7
31792: PUSH
31793: LD_EXP 118
31797: PUSH
31798: LD_VAR 0 5
31802: ARRAY
31803: PUSH
31804: FOR_IN
31805: IFFALSE 31847
// if i [ 1 ] = x and i [ 2 ] = y then
31807: LD_VAR 0 7
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: PUSH
31816: LD_VAR 0 2
31820: EQUAL
31821: IFFALSE 31839
31823: PUSH
31824: LD_VAR 0 7
31828: PUSH
31829: LD_INT 2
31831: ARRAY
31832: PUSH
31833: LD_VAR 0 3
31837: EQUAL
31838: AND
31839: IFFALSE 31845
// exit ;
31841: POP
31842: POP
31843: GO 31910
31845: GO 31804
31847: POP
31848: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31849: LD_ADDR_EXP 118
31853: PUSH
31854: LD_EXP 118
31858: PPUSH
31859: LD_VAR 0 5
31863: PUSH
31864: LD_EXP 118
31868: PUSH
31869: LD_VAR 0 5
31873: ARRAY
31874: PUSH
31875: LD_INT 1
31877: PLUS
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: LD_VAR 0 2
31887: PUSH
31888: LD_VAR 0 3
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PPUSH
31897: CALL 38979 0 3
31901: ST_TO_ADDR
// end ; result := true ;
31902: LD_ADDR_VAR 0 4
31906: PUSH
31907: LD_INT 1
31909: ST_TO_ADDR
// end ;
31910: LD_VAR 0 4
31914: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
31919: PPUSH
// if not unit in minersList then
31920: LD_VAR 0 1
31924: PUSH
31925: LD_EXP 117
31929: IN
31930: NOT
31931: IFFALSE 31935
// exit ;
31933: GO 32142
// index := GetElementIndex ( minersList , unit ) ;
31935: LD_ADDR_VAR 0 6
31939: PUSH
31940: LD_EXP 117
31944: PPUSH
31945: LD_VAR 0 1
31949: PPUSH
31950: CALL 38762 0 2
31954: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31955: LD_ADDR_VAR 0 5
31959: PUSH
31960: DOUBLE
31961: LD_EXP 118
31965: PUSH
31966: LD_VAR 0 6
31970: ARRAY
31971: INC
31972: ST_TO_ADDR
31973: LD_INT 1
31975: PUSH
31976: FOR_DOWNTO
31977: IFFALSE 32140
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31979: LD_EXP 118
31983: PUSH
31984: LD_VAR 0 6
31988: ARRAY
31989: PUSH
31990: LD_VAR 0 5
31994: ARRAY
31995: PUSH
31996: LD_INT 1
31998: ARRAY
31999: PPUSH
32000: LD_EXP 118
32004: PUSH
32005: LD_VAR 0 6
32009: ARRAY
32010: PUSH
32011: LD_VAR 0 5
32015: ARRAY
32016: PUSH
32017: LD_INT 2
32019: ARRAY
32020: PPUSH
32021: LD_VAR 0 2
32025: PPUSH
32026: LD_VAR 0 3
32030: PPUSH
32031: CALL_OW 298
32035: PUSH
32036: LD_INT 6
32038: LESS
32039: IFFALSE 32138
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32041: LD_EXP 118
32045: PUSH
32046: LD_VAR 0 6
32050: ARRAY
32051: PUSH
32052: LD_VAR 0 5
32056: ARRAY
32057: PUSH
32058: LD_INT 1
32060: ARRAY
32061: PPUSH
32062: LD_EXP 118
32066: PUSH
32067: LD_VAR 0 6
32071: ARRAY
32072: PUSH
32073: LD_VAR 0 5
32077: ARRAY
32078: PUSH
32079: LD_INT 2
32081: ARRAY
32082: PPUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 255
32092: PPUSH
32093: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32097: LD_ADDR_EXP 118
32101: PUSH
32102: LD_EXP 118
32106: PPUSH
32107: LD_VAR 0 6
32111: PPUSH
32112: LD_EXP 118
32116: PUSH
32117: LD_VAR 0 6
32121: ARRAY
32122: PPUSH
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL_OW 3
32132: PPUSH
32133: CALL_OW 1
32137: ST_TO_ADDR
// end ; end ;
32138: GO 31976
32140: POP
32141: POP
// end ;
32142: LD_VAR 0 4
32146: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32147: LD_INT 0
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
32155: PPUSH
32156: PPUSH
32157: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32158: LD_VAR 0 1
32162: PPUSH
32163: CALL_OW 264
32167: PUSH
32168: LD_INT 81
32170: EQUAL
32171: NOT
32172: IFTRUE 32187
32174: PUSH
32175: LD_VAR 0 1
32179: PUSH
32180: LD_EXP 117
32184: IN
32185: NOT
32186: OR
32187: IFFALSE 32191
// exit ;
32189: GO 32517
// index := GetElementIndex ( minersList , unit ) ;
32191: LD_ADDR_VAR 0 6
32195: PUSH
32196: LD_EXP 117
32200: PPUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL 38762 0 2
32210: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32211: LD_ADDR_VAR 0 8
32215: PUSH
32216: LD_EXP 119
32220: PUSH
32221: LD_EXP 118
32225: PUSH
32226: LD_VAR 0 6
32230: ARRAY
32231: MINUS
32232: ST_TO_ADDR
// if not minesFreeAmount then
32233: LD_VAR 0 8
32237: NOT
32238: IFFALSE 32242
// exit ;
32240: GO 32517
// tmp := [ ] ;
32242: LD_ADDR_VAR 0 7
32246: PUSH
32247: EMPTY
32248: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32249: LD_ADDR_VAR 0 5
32253: PUSH
32254: DOUBLE
32255: LD_INT 1
32257: DEC
32258: ST_TO_ADDR
32259: LD_VAR 0 8
32263: PUSH
32264: FOR_TO
32265: IFFALSE 32464
// begin _d := rand ( 0 , 5 ) ;
32267: LD_ADDR_VAR 0 11
32271: PUSH
32272: LD_INT 0
32274: PPUSH
32275: LD_INT 5
32277: PPUSH
32278: CALL_OW 12
32282: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32283: LD_ADDR_VAR 0 12
32287: PUSH
32288: LD_INT 2
32290: PPUSH
32291: LD_INT 6
32293: PPUSH
32294: CALL_OW 12
32298: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32299: LD_ADDR_VAR 0 9
32303: PUSH
32304: LD_VAR 0 2
32308: PPUSH
32309: LD_VAR 0 11
32313: PPUSH
32314: LD_VAR 0 12
32318: PPUSH
32319: CALL_OW 272
32323: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32324: LD_ADDR_VAR 0 10
32328: PUSH
32329: LD_VAR 0 3
32333: PPUSH
32334: LD_VAR 0 11
32338: PPUSH
32339: LD_VAR 0 12
32343: PPUSH
32344: CALL_OW 273
32348: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32349: LD_VAR 0 9
32353: PPUSH
32354: LD_VAR 0 10
32358: PPUSH
32359: CALL_OW 488
32363: IFFALSE 32387
32365: PUSH
32366: LD_VAR 0 9
32370: PUSH
32371: LD_VAR 0 10
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_VAR 0 7
32384: IN
32385: NOT
32386: AND
32387: IFFALSE 32406
32389: PUSH
32390: LD_VAR 0 9
32394: PPUSH
32395: LD_VAR 0 10
32399: PPUSH
32400: CALL_OW 458
32404: NOT
32405: AND
32406: IFFALSE 32448
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32408: LD_ADDR_VAR 0 7
32412: PUSH
32413: LD_VAR 0 7
32417: PPUSH
32418: LD_VAR 0 7
32422: PUSH
32423: LD_INT 1
32425: PLUS
32426: PPUSH
32427: LD_VAR 0 9
32431: PUSH
32432: LD_VAR 0 10
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PPUSH
32441: CALL_OW 1
32445: ST_TO_ADDR
32446: GO 32462
// i := i - 1 ;
32448: LD_ADDR_VAR 0 5
32452: PUSH
32453: LD_VAR 0 5
32457: PUSH
32458: LD_INT 1
32460: MINUS
32461: ST_TO_ADDR
// end ;
32462: GO 32264
32464: POP
32465: POP
// for i in tmp do
32466: LD_ADDR_VAR 0 5
32470: PUSH
32471: LD_VAR 0 7
32475: PUSH
32476: FOR_IN
32477: IFFALSE 32515
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32479: LD_VAR 0 1
32483: PPUSH
32484: LD_VAR 0 5
32488: PUSH
32489: LD_INT 1
32491: ARRAY
32492: PPUSH
32493: LD_VAR 0 5
32497: PUSH
32498: LD_INT 2
32500: ARRAY
32501: PPUSH
32502: CALL 31508 0 3
32506: NOT
32507: IFFALSE 32513
// exit ;
32509: POP
32510: POP
32511: GO 32517
32513: GO 32476
32515: POP
32516: POP
// end ;
32517: LD_VAR 0 4
32521: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32522: LD_INT 0
32524: PPUSH
32525: PPUSH
32526: PPUSH
32527: PPUSH
32528: PPUSH
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
// if GetClass ( unit ) <> class_sniper then
32533: LD_VAR 0 1
32537: PPUSH
32538: CALL_OW 257
32542: PUSH
32543: LD_INT 5
32545: NONEQUAL
32546: IFFALSE 32550
// exit ;
32548: GO 33020
// dist := 8 ;
32550: LD_ADDR_VAR 0 5
32554: PUSH
32555: LD_INT 8
32557: ST_TO_ADDR
// viewRange := 12 ;
32558: LD_ADDR_VAR 0 8
32562: PUSH
32563: LD_INT 12
32565: ST_TO_ADDR
// side := GetSide ( unit ) ;
32566: LD_ADDR_VAR 0 6
32570: PUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 255
32580: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32581: LD_INT 61
32583: PPUSH
32584: LD_VAR 0 6
32588: PPUSH
32589: CALL_OW 321
32593: PUSH
32594: LD_INT 2
32596: EQUAL
32597: IFFALSE 32607
// viewRange := 16 ;
32599: LD_ADDR_VAR 0 8
32603: PUSH
32604: LD_INT 16
32606: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_VAR 0 2
32616: PPUSH
32617: LD_VAR 0 3
32621: PPUSH
32622: CALL_OW 297
32626: PUSH
32627: LD_VAR 0 5
32631: GREATER
32632: IFFALSE 32711
// begin ComMoveXY ( unit , x , y ) ;
32634: LD_VAR 0 1
32638: PPUSH
32639: LD_VAR 0 2
32643: PPUSH
32644: LD_VAR 0 3
32648: PPUSH
32649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32653: LD_INT 35
32655: PPUSH
32656: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32660: LD_VAR 0 1
32664: PPUSH
32665: LD_VAR 0 2
32669: PPUSH
32670: LD_VAR 0 3
32674: PPUSH
32675: CALL 70818 0 3
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 33020
// until GetDistUnitXY ( unit , x , y ) < dist ;
32684: LD_VAR 0 1
32688: PPUSH
32689: LD_VAR 0 2
32693: PPUSH
32694: LD_VAR 0 3
32698: PPUSH
32699: CALL_OW 297
32703: PUSH
32704: LD_VAR 0 5
32708: LESS
32709: IFFALSE 32653
// end ; ComTurnXY ( unit , x , y ) ;
32711: LD_VAR 0 1
32715: PPUSH
32716: LD_VAR 0 2
32720: PPUSH
32721: LD_VAR 0 3
32725: PPUSH
32726: CALL_OW 118
// repeat if Multiplayer then
32730: LD_OWVAR 4
32734: IFFALSE 32745
// wait ( 35 ) else
32736: LD_INT 35
32738: PPUSH
32739: CALL_OW 67
32743: GO 32752
// wait ( 5 ) ;
32745: LD_INT 5
32747: PPUSH
32748: CALL_OW 67
// _d := GetDir ( unit ) ;
32752: LD_ADDR_VAR 0 11
32756: PUSH
32757: LD_VAR 0 1
32761: PPUSH
32762: CALL_OW 254
32766: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32767: LD_ADDR_VAR 0 7
32771: PUSH
32772: LD_VAR 0 1
32776: PPUSH
32777: CALL_OW 250
32781: PPUSH
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 251
32791: PPUSH
32792: LD_VAR 0 2
32796: PPUSH
32797: LD_VAR 0 3
32801: PPUSH
32802: CALL 73454 0 4
32806: ST_TO_ADDR
// until dir = _d ;
32807: LD_VAR 0 7
32811: PUSH
32812: LD_VAR 0 11
32816: EQUAL
32817: IFFALSE 32730
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32819: LD_ADDR_VAR 0 9
32823: PUSH
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 250
32833: PPUSH
32834: LD_VAR 0 7
32838: PPUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: CALL_OW 272
32848: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32849: LD_ADDR_VAR 0 10
32853: PUSH
32854: LD_VAR 0 1
32858: PPUSH
32859: CALL_OW 251
32863: PPUSH
32864: LD_VAR 0 7
32868: PPUSH
32869: LD_VAR 0 5
32873: PPUSH
32874: CALL_OW 273
32878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32879: LD_VAR 0 9
32883: PPUSH
32884: LD_VAR 0 10
32888: PPUSH
32889: CALL_OW 488
32893: NOT
32894: IFFALSE 32898
// exit ;
32896: GO 33020
// ComAnimCustom ( unit , 1 ) ;
32898: LD_VAR 0 1
32902: PPUSH
32903: LD_INT 1
32905: PPUSH
32906: CALL_OW 592
// p := 0 ;
32910: LD_ADDR_VAR 0 12
32914: PUSH
32915: LD_INT 0
32917: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32918: LD_VAR 0 9
32922: PPUSH
32923: LD_VAR 0 10
32927: PPUSH
32928: LD_VAR 0 6
32932: PPUSH
32933: LD_VAR 0 8
32937: PPUSH
32938: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32942: LD_INT 35
32944: PPUSH
32945: CALL_OW 67
// p := Inc ( p ) ;
32949: LD_ADDR_VAR 0 12
32953: PUSH
32954: LD_VAR 0 12
32958: PPUSH
32959: CALL 73410 0 1
32963: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32964: LD_VAR 0 12
32968: PUSH
32969: LD_INT 3
32971: EQUAL
32972: IFTRUE 32986
32974: PUSH
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 302
32984: NOT
32985: OR
32986: IFTRUE 32999
32988: PUSH
32989: LD_VAR 0 1
32993: PPUSH
32994: CALL_OW 301
32998: OR
32999: IFFALSE 32942
// RemoveSeeing ( _x , _y , side ) ;
33001: LD_VAR 0 9
33005: PPUSH
33006: LD_VAR 0 10
33010: PPUSH
33011: LD_VAR 0 6
33015: PPUSH
33016: CALL_OW 331
// end ;
33020: LD_VAR 0 4
33024: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
33025: LD_INT 0
33027: PPUSH
33028: PPUSH
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
// if not unit then
33038: LD_VAR 0 1
33042: NOT
33043: IFFALSE 33047
// exit ;
33045: GO 33318
// side := GetSide ( unit ) ;
33047: LD_ADDR_VAR 0 3
33051: PUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 255
33061: ST_TO_ADDR
// x := GetX ( unit ) ;
33062: LD_ADDR_VAR 0 5
33066: PUSH
33067: LD_VAR 0 1
33071: PPUSH
33072: CALL_OW 250
33076: ST_TO_ADDR
// y := GetY ( unit ) ;
33077: LD_ADDR_VAR 0 6
33081: PUSH
33082: LD_VAR 0 1
33086: PPUSH
33087: CALL_OW 251
33091: ST_TO_ADDR
// r := 8 ;
33092: LD_ADDR_VAR 0 4
33096: PUSH
33097: LD_INT 8
33099: ST_TO_ADDR
// if x - r < 0 then
33100: LD_VAR 0 5
33104: PUSH
33105: LD_VAR 0 4
33109: MINUS
33110: PUSH
33111: LD_INT 0
33113: LESS
33114: IFFALSE 33126
// min_x := 0 else
33116: LD_ADDR_VAR 0 7
33120: PUSH
33121: LD_INT 0
33123: ST_TO_ADDR
33124: GO 33142
// min_x := x - r ;
33126: LD_ADDR_VAR 0 7
33130: PUSH
33131: LD_VAR 0 5
33135: PUSH
33136: LD_VAR 0 4
33140: MINUS
33141: ST_TO_ADDR
// if y - r < 0 then
33142: LD_VAR 0 6
33146: PUSH
33147: LD_VAR 0 4
33151: MINUS
33152: PUSH
33153: LD_INT 0
33155: LESS
33156: IFFALSE 33168
// min_y := 0 else
33158: LD_ADDR_VAR 0 8
33162: PUSH
33163: LD_INT 0
33165: ST_TO_ADDR
33166: GO 33184
// min_y := y - r ;
33168: LD_ADDR_VAR 0 8
33172: PUSH
33173: LD_VAR 0 6
33177: PUSH
33178: LD_VAR 0 4
33182: MINUS
33183: ST_TO_ADDR
// max_x := x + r ;
33184: LD_ADDR_VAR 0 9
33188: PUSH
33189: LD_VAR 0 5
33193: PUSH
33194: LD_VAR 0 4
33198: PLUS
33199: ST_TO_ADDR
// max_y := y + r ;
33200: LD_ADDR_VAR 0 10
33204: PUSH
33205: LD_VAR 0 6
33209: PUSH
33210: LD_VAR 0 4
33214: PLUS
33215: ST_TO_ADDR
// for _x = min_x to max_x do
33216: LD_ADDR_VAR 0 11
33220: PUSH
33221: DOUBLE
33222: LD_VAR 0 7
33226: DEC
33227: ST_TO_ADDR
33228: LD_VAR 0 9
33232: PUSH
33233: FOR_TO
33234: IFFALSE 33316
// for _y = min_y to max_y do
33236: LD_ADDR_VAR 0 12
33240: PUSH
33241: DOUBLE
33242: LD_VAR 0 8
33246: DEC
33247: ST_TO_ADDR
33248: LD_VAR 0 10
33252: PUSH
33253: FOR_TO
33254: IFFALSE 33312
// begin if not ValidHex ( _x , _y ) then
33256: LD_VAR 0 11
33260: PPUSH
33261: LD_VAR 0 12
33265: PPUSH
33266: CALL_OW 488
33270: NOT
33271: IFFALSE 33275
// continue ;
33273: GO 33253
// if MineAtPos ( _x , _y ) then
33275: LD_VAR 0 11
33279: PPUSH
33280: LD_VAR 0 12
33284: PPUSH
33285: CALL_OW 458
33289: IFFALSE 33310
// ViewMineAtPos ( _x , _y , side ) ;
33291: LD_VAR 0 11
33295: PPUSH
33296: LD_VAR 0 12
33300: PPUSH
33301: LD_VAR 0 3
33305: PPUSH
33306: CALL_OW 457
// end ;
33310: GO 33253
33312: POP
33313: POP
33314: GO 33233
33316: POP
33317: POP
// end ;
33318: LD_VAR 0 2
33322: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
33323: LD_INT 0
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
// if not units then
33332: LD_VAR 0 1
33336: NOT
33337: IFFALSE 33341
// exit ;
33339: GO 33805
// scaners := [ ] ;
33341: LD_ADDR_VAR 0 6
33345: PUSH
33346: EMPTY
33347: ST_TO_ADDR
// for i in units do
33348: LD_ADDR_VAR 0 3
33352: PUSH
33353: LD_VAR 0 1
33357: PUSH
33358: FOR_IN
33359: IFFALSE 33516
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33361: LD_VAR 0 3
33365: PPUSH
33366: CALL_OW 264
33370: PUSH
33371: LD_INT 11
33373: NONEQUAL
33374: IFTRUE 33388
33376: PUSH
33377: LD_VAR 0 3
33381: PPUSH
33382: CALL_OW 302
33386: NOT
33387: OR
33388: IFTRUE 33405
33390: PUSH
33391: LD_VAR 0 3
33395: PPUSH
33396: CALL_OW 110
33400: PUSH
33401: LD_INT 502
33403: EQUAL
33404: OR
33405: IFFALSE 33409
// continue ;
33407: GO 33358
// ComStop ( i ) ;
33409: LD_VAR 0 3
33413: PPUSH
33414: CALL_OW 141
// x := GetX ( i ) ;
33418: LD_ADDR_VAR 0 4
33422: PUSH
33423: LD_VAR 0 3
33427: PPUSH
33428: CALL_OW 250
33432: ST_TO_ADDR
// y := GetY ( i ) ;
33433: LD_ADDR_VAR 0 5
33437: PUSH
33438: LD_VAR 0 3
33442: PPUSH
33443: CALL_OW 251
33447: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33448: LD_VAR 0 3
33452: PPUSH
33453: CALL_OW 255
33457: PUSH
33458: LD_OWVAR 2
33462: EQUAL
33463: IFFALSE 33482
// PlaySoundXY ( x , y , mineDetector ) ;
33465: LD_VAR 0 4
33469: PPUSH
33470: LD_VAR 0 5
33474: PPUSH
33475: LD_STRING mineDetector
33477: PPUSH
33478: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33482: LD_ADDR_VAR 0 6
33486: PUSH
33487: LD_VAR 0 6
33491: PPUSH
33492: LD_VAR 0 3
33496: PPUSH
33497: CALL 72037 0 2
33501: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33502: LD_VAR 0 3
33506: PPUSH
33507: LD_INT 502
33509: PPUSH
33510: CALL_OW 109
// end ;
33514: GO 33358
33516: POP
33517: POP
// if not scaners then
33518: LD_VAR 0 6
33522: NOT
33523: IFFALSE 33527
// exit ;
33525: GO 33805
// wait ( 3 ) ;
33527: LD_INT 3
33529: PPUSH
33530: CALL_OW 67
// timer := 6 ;
33534: LD_ADDR_VAR 0 7
33538: PUSH
33539: LD_INT 6
33541: ST_TO_ADDR
// repeat for i in scaners do
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_VAR 0 6
33551: PUSH
33552: FOR_IN
33553: IFFALSE 33703
// begin side := GetSide ( i ) ;
33555: LD_ADDR_VAR 0 8
33559: PUSH
33560: LD_VAR 0 3
33564: PPUSH
33565: CALL_OW 255
33569: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33570: LD_VAR 0 3
33574: PPUSH
33575: CALL_OW 302
33579: NOT
33580: IFTRUE 33593
33582: PUSH
33583: LD_VAR 0 3
33587: PPUSH
33588: CALL_OW 314
33592: OR
33593: IFTRUE 33624
33595: PUSH
33596: LD_VAR 0 3
33600: PPUSH
33601: CALL_OW 263
33605: PUSH
33606: LD_INT 1
33608: EQUAL
33609: IFFALSE 33623
33611: PUSH
33612: LD_VAR 0 3
33616: PPUSH
33617: CALL_OW 311
33621: NOT
33622: AND
33623: OR
33624: IFFALSE 33668
// begin SetUnitDisplayNumber ( i , 0 ) ;
33626: LD_VAR 0 3
33630: PPUSH
33631: LD_INT 0
33633: PPUSH
33634: CALL_OW 505
// SetTag ( i , 0 ) ;
33638: LD_VAR 0 3
33642: PPUSH
33643: LD_INT 0
33645: PPUSH
33646: CALL_OW 109
// scaners := scaners diff i ;
33650: LD_ADDR_VAR 0 6
33654: PUSH
33655: LD_VAR 0 6
33659: PUSH
33660: LD_VAR 0 3
33664: DIFF
33665: ST_TO_ADDR
// continue ;
33666: GO 33552
// end ; if side in [ your_side , 9 ] then
33668: LD_VAR 0 8
33672: PUSH
33673: LD_OWVAR 2
33677: PUSH
33678: LD_INT 9
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: IN
33685: IFFALSE 33701
// SetUnitDisplayNumber ( i , timer ) ;
33687: LD_VAR 0 3
33691: PPUSH
33692: LD_VAR 0 7
33696: PPUSH
33697: CALL_OW 505
// end ;
33701: GO 33552
33703: POP
33704: POP
// if not scaners then
33705: LD_VAR 0 6
33709: NOT
33710: IFFALSE 33714
// exit ;
33712: GO 33805
// timer := Dec ( timer ) ;
33714: LD_ADDR_VAR 0 7
33718: PUSH
33719: LD_VAR 0 7
33723: PPUSH
33724: CALL 73432 0 1
33728: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33729: LD_INT 35
33731: PPUSH
33732: CALL_OW 67
// until timer = 0 ;
33736: LD_VAR 0 7
33740: PUSH
33741: LD_INT 0
33743: EQUAL
33744: IFFALSE 33542
// if not scaners then
33746: LD_VAR 0 6
33750: NOT
33751: IFFALSE 33755
// exit ;
33753: GO 33805
// for i in scaners do
33755: LD_ADDR_VAR 0 3
33759: PUSH
33760: LD_VAR 0 6
33764: PUSH
33765: FOR_IN
33766: IFFALSE 33803
// begin SetUnitDisplayNumber ( i , 0 ) ;
33768: LD_VAR 0 3
33772: PPUSH
33773: LD_INT 0
33775: PPUSH
33776: CALL_OW 505
// SetTag ( i , 0 ) ;
33780: LD_VAR 0 3
33784: PPUSH
33785: LD_INT 0
33787: PPUSH
33788: CALL_OW 109
// RevealDetectorMine ( i ) ;
33792: LD_VAR 0 3
33796: PPUSH
33797: CALL 33025 0 1
// end ;
33801: GO 33765
33803: POP
33804: POP
// end ;
33805: LD_VAR 0 2
33809: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33810: LD_INT 0
33812: PPUSH
// if p1 = mine_detector_mode then
33813: LD_VAR 0 2
33817: PUSH
33818: LD_INT 103
33820: EQUAL
33821: IFFALSE 33832
// DetectMine ( units ) ;
33823: LD_VAR 0 1
33827: PPUSH
33828: CALL 33323 0 1
// end ; end_of_file
33832: LD_VAR 0 7
33836: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33837: LD_INT 0
33839: PPUSH
33840: PPUSH
// if exist_mode then
33841: LD_VAR 0 2
33845: IFFALSE 33891
// begin unit := CreateCharacter ( prefix & ident ) ;
33847: LD_ADDR_VAR 0 5
33851: PUSH
33852: LD_VAR 0 3
33856: PUSH
33857: LD_VAR 0 1
33861: STR
33862: PPUSH
33863: CALL_OW 34
33867: ST_TO_ADDR
// if unit then
33868: LD_VAR 0 5
33872: IFFALSE 33889
// DeleteCharacters ( prefix & ident ) ;
33874: LD_VAR 0 3
33878: PUSH
33879: LD_VAR 0 1
33883: STR
33884: PPUSH
33885: CALL_OW 40
// end else
33889: GO 33906
// unit := NewCharacter ( ident ) ;
33891: LD_ADDR_VAR 0 5
33895: PUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: CALL_OW 25
33905: ST_TO_ADDR
// result := unit ;
33906: LD_ADDR_VAR 0 4
33910: PUSH
33911: LD_VAR 0 5
33915: ST_TO_ADDR
// end ;
33916: LD_VAR 0 4
33920: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33921: LD_INT 0
33923: PPUSH
33924: PPUSH
// if exist_mode then
33925: LD_VAR 0 2
33929: IFFALSE 33954
// unit := CreateCharacter ( prefix & ident ) else
33931: LD_ADDR_VAR 0 5
33935: PUSH
33936: LD_VAR 0 3
33940: PUSH
33941: LD_VAR 0 1
33945: STR
33946: PPUSH
33947: CALL_OW 34
33951: ST_TO_ADDR
33952: GO 33969
// unit := NewCharacter ( ident ) ;
33954: LD_ADDR_VAR 0 5
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 25
33968: ST_TO_ADDR
// result := unit ;
33969: LD_ADDR_VAR 0 4
33973: PUSH
33974: LD_VAR 0 5
33978: ST_TO_ADDR
// end ;
33979: LD_VAR 0 4
33983: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33984: LD_INT 0
33986: PPUSH
33987: PPUSH
// if not side or not nation then
33988: LD_VAR 0 1
33992: NOT
33993: IFTRUE 34002
33995: PUSH
33996: LD_VAR 0 2
34000: NOT
34001: OR
34002: IFFALSE 34006
// exit ;
34004: GO 34800
// case nation of nation_american :
34006: LD_VAR 0 2
34010: PUSH
34011: LD_INT 1
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34241
34019: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
34020: LD_ADDR_VAR 0 4
34024: PUSH
34025: LD_INT 35
34027: PUSH
34028: LD_INT 45
34030: PUSH
34031: LD_INT 46
34033: PUSH
34034: LD_INT 47
34036: PUSH
34037: LD_INT 82
34039: PUSH
34040: LD_INT 83
34042: PUSH
34043: LD_INT 84
34045: PUSH
34046: LD_INT 85
34048: PUSH
34049: LD_INT 86
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: LD_INT 6
34060: PUSH
34061: LD_INT 15
34063: PUSH
34064: LD_INT 16
34066: PUSH
34067: LD_INT 7
34069: PUSH
34070: LD_INT 12
34072: PUSH
34073: LD_INT 13
34075: PUSH
34076: LD_INT 10
34078: PUSH
34079: LD_INT 14
34081: PUSH
34082: LD_INT 20
34084: PUSH
34085: LD_INT 21
34087: PUSH
34088: LD_INT 22
34090: PUSH
34091: LD_INT 25
34093: PUSH
34094: LD_INT 32
34096: PUSH
34097: LD_INT 27
34099: PUSH
34100: LD_INT 36
34102: PUSH
34103: LD_INT 69
34105: PUSH
34106: LD_INT 39
34108: PUSH
34109: LD_INT 34
34111: PUSH
34112: LD_INT 40
34114: PUSH
34115: LD_INT 48
34117: PUSH
34118: LD_INT 49
34120: PUSH
34121: LD_INT 50
34123: PUSH
34124: LD_INT 51
34126: PUSH
34127: LD_INT 52
34129: PUSH
34130: LD_INT 53
34132: PUSH
34133: LD_INT 54
34135: PUSH
34136: LD_INT 55
34138: PUSH
34139: LD_INT 56
34141: PUSH
34142: LD_INT 57
34144: PUSH
34145: LD_INT 58
34147: PUSH
34148: LD_INT 59
34150: PUSH
34151: LD_INT 60
34153: PUSH
34154: LD_INT 61
34156: PUSH
34157: LD_INT 62
34159: PUSH
34160: LD_INT 80
34162: PUSH
34163: LD_INT 82
34165: PUSH
34166: LD_INT 83
34168: PUSH
34169: LD_INT 84
34171: PUSH
34172: LD_INT 85
34174: PUSH
34175: LD_INT 86
34177: PUSH
34178: LD_INT 90
34180: PUSH
34181: LD_INT 93
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
34239: GO 34722
34241: LD_INT 2
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34483
34249: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
34250: LD_ADDR_VAR 0 4
34254: PUSH
34255: LD_INT 35
34257: PUSH
34258: LD_INT 45
34260: PUSH
34261: LD_INT 46
34263: PUSH
34264: LD_INT 47
34266: PUSH
34267: LD_INT 82
34269: PUSH
34270: LD_INT 83
34272: PUSH
34273: LD_INT 84
34275: PUSH
34276: LD_INT 85
34278: PUSH
34279: LD_INT 87
34281: PUSH
34282: LD_INT 70
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 11
34290: PUSH
34291: LD_INT 3
34293: PUSH
34294: LD_INT 4
34296: PUSH
34297: LD_INT 5
34299: PUSH
34300: LD_INT 6
34302: PUSH
34303: LD_INT 15
34305: PUSH
34306: LD_INT 18
34308: PUSH
34309: LD_INT 7
34311: PUSH
34312: LD_INT 17
34314: PUSH
34315: LD_INT 8
34317: PUSH
34318: LD_INT 20
34320: PUSH
34321: LD_INT 21
34323: PUSH
34324: LD_INT 22
34326: PUSH
34327: LD_INT 72
34329: PUSH
34330: LD_INT 26
34332: PUSH
34333: LD_INT 69
34335: PUSH
34336: LD_INT 39
34338: PUSH
34339: LD_INT 40
34341: PUSH
34342: LD_INT 41
34344: PUSH
34345: LD_INT 42
34347: PUSH
34348: LD_INT 43
34350: PUSH
34351: LD_INT 48
34353: PUSH
34354: LD_INT 49
34356: PUSH
34357: LD_INT 50
34359: PUSH
34360: LD_INT 51
34362: PUSH
34363: LD_INT 52
34365: PUSH
34366: LD_INT 53
34368: PUSH
34369: LD_INT 54
34371: PUSH
34372: LD_INT 55
34374: PUSH
34375: LD_INT 56
34377: PUSH
34378: LD_INT 60
34380: PUSH
34381: LD_INT 61
34383: PUSH
34384: LD_INT 62
34386: PUSH
34387: LD_INT 66
34389: PUSH
34390: LD_INT 67
34392: PUSH
34393: LD_INT 68
34395: PUSH
34396: LD_INT 81
34398: PUSH
34399: LD_INT 82
34401: PUSH
34402: LD_INT 83
34404: PUSH
34405: LD_INT 84
34407: PUSH
34408: LD_INT 85
34410: PUSH
34411: LD_INT 87
34413: PUSH
34414: LD_INT 88
34416: PUSH
34417: LD_INT 92
34419: PUSH
34420: LD_INT 94
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
34481: GO 34722
34483: LD_INT 3
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34721
34491: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34492: LD_ADDR_VAR 0 4
34496: PUSH
34497: LD_INT 46
34499: PUSH
34500: LD_INT 47
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: LD_INT 82
34511: PUSH
34512: LD_INT 83
34514: PUSH
34515: LD_INT 84
34517: PUSH
34518: LD_INT 85
34520: PUSH
34521: LD_INT 86
34523: PUSH
34524: LD_INT 11
34526: PUSH
34527: LD_INT 9
34529: PUSH
34530: LD_INT 20
34532: PUSH
34533: LD_INT 19
34535: PUSH
34536: LD_INT 21
34538: PUSH
34539: LD_INT 24
34541: PUSH
34542: LD_INT 22
34544: PUSH
34545: LD_INT 25
34547: PUSH
34548: LD_INT 28
34550: PUSH
34551: LD_INT 29
34553: PUSH
34554: LD_INT 30
34556: PUSH
34557: LD_INT 31
34559: PUSH
34560: LD_INT 37
34562: PUSH
34563: LD_INT 38
34565: PUSH
34566: LD_INT 32
34568: PUSH
34569: LD_INT 27
34571: PUSH
34572: LD_INT 33
34574: PUSH
34575: LD_INT 69
34577: PUSH
34578: LD_INT 39
34580: PUSH
34581: LD_INT 34
34583: PUSH
34584: LD_INT 40
34586: PUSH
34587: LD_INT 71
34589: PUSH
34590: LD_INT 23
34592: PUSH
34593: LD_INT 44
34595: PUSH
34596: LD_INT 48
34598: PUSH
34599: LD_INT 49
34601: PUSH
34602: LD_INT 50
34604: PUSH
34605: LD_INT 51
34607: PUSH
34608: LD_INT 52
34610: PUSH
34611: LD_INT 53
34613: PUSH
34614: LD_INT 54
34616: PUSH
34617: LD_INT 55
34619: PUSH
34620: LD_INT 56
34622: PUSH
34623: LD_INT 57
34625: PUSH
34626: LD_INT 58
34628: PUSH
34629: LD_INT 59
34631: PUSH
34632: LD_INT 63
34634: PUSH
34635: LD_INT 64
34637: PUSH
34638: LD_INT 65
34640: PUSH
34641: LD_INT 82
34643: PUSH
34644: LD_INT 83
34646: PUSH
34647: LD_INT 84
34649: PUSH
34650: LD_INT 85
34652: PUSH
34653: LD_INT 86
34655: PUSH
34656: LD_INT 89
34658: PUSH
34659: LD_INT 91
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: ST_TO_ADDR
34719: GO 34722
34721: POP
// if state > - 1 and state < 3 then
34722: LD_VAR 0 3
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: GREATER
34731: IFFALSE 34743
34733: PUSH
34734: LD_VAR 0 3
34738: PUSH
34739: LD_INT 3
34741: LESS
34742: AND
34743: IFFALSE 34800
// for i in result do
34745: LD_ADDR_VAR 0 5
34749: PUSH
34750: LD_VAR 0 4
34754: PUSH
34755: FOR_IN
34756: IFFALSE 34798
// if GetTech ( i , side ) <> state then
34758: LD_VAR 0 5
34762: PPUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: CALL_OW 321
34772: PUSH
34773: LD_VAR 0 3
34777: NONEQUAL
34778: IFFALSE 34796
// result := result diff i ;
34780: LD_ADDR_VAR 0 4
34784: PUSH
34785: LD_VAR 0 4
34789: PUSH
34790: LD_VAR 0 5
34794: DIFF
34795: ST_TO_ADDR
34796: GO 34755
34798: POP
34799: POP
// end ;
34800: LD_VAR 0 4
34804: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34805: LD_INT 0
34807: PPUSH
34808: PPUSH
34809: PPUSH
// result := true ;
34810: LD_ADDR_VAR 0 3
34814: PUSH
34815: LD_INT 1
34817: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_VAR 0 2
34827: PPUSH
34828: CALL_OW 480
34832: ST_TO_ADDR
// if not tmp then
34833: LD_VAR 0 5
34837: NOT
34838: IFFALSE 34842
// exit ;
34840: GO 34891
// for i in tmp do
34842: LD_ADDR_VAR 0 4
34846: PUSH
34847: LD_VAR 0 5
34851: PUSH
34852: FOR_IN
34853: IFFALSE 34889
// if GetTech ( i , side ) <> state_researched then
34855: LD_VAR 0 4
34859: PPUSH
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 321
34869: PUSH
34870: LD_INT 2
34872: NONEQUAL
34873: IFFALSE 34887
// begin result := false ;
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_INT 0
34882: ST_TO_ADDR
// exit ;
34883: POP
34884: POP
34885: GO 34891
// end ;
34887: GO 34852
34889: POP
34890: POP
// end ;
34891: LD_VAR 0 3
34895: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34896: LD_INT 0
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
34910: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34911: LD_VAR 0 1
34915: NOT
34916: IFTRUE 34933
34918: PUSH
34919: LD_VAR 0 1
34923: PPUSH
34924: CALL_OW 257
34928: PUSH
34929: LD_INT 9
34931: NONEQUAL
34932: OR
34933: IFFALSE 34937
// exit ;
34935: GO 35516
// side := GetSide ( unit ) ;
34937: LD_ADDR_VAR 0 9
34941: PUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 255
34951: ST_TO_ADDR
// tech_space := tech_spacanom ;
34952: LD_ADDR_VAR 0 12
34956: PUSH
34957: LD_INT 29
34959: ST_TO_ADDR
// tech_time := tech_taurad ;
34960: LD_ADDR_VAR 0 13
34964: PUSH
34965: LD_INT 28
34967: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34968: LD_ADDR_VAR 0 11
34972: PUSH
34973: LD_VAR 0 1
34977: PPUSH
34978: CALL_OW 310
34982: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34983: LD_VAR 0 11
34987: PPUSH
34988: CALL_OW 247
34992: PUSH
34993: LD_INT 2
34995: EQUAL
34996: IFFALSE 35000
// exit ;
34998: GO 35516
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35000: LD_ADDR_VAR 0 8
35004: PUSH
35005: LD_INT 81
35007: PUSH
35008: LD_VAR 0 9
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 3
35019: PUSH
35020: LD_INT 21
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PPUSH
35038: CALL_OW 69
35042: ST_TO_ADDR
// if not tmp then
35043: LD_VAR 0 8
35047: NOT
35048: IFFALSE 35052
// exit ;
35050: GO 35516
// if in_unit then
35052: LD_VAR 0 11
35056: IFFALSE 35080
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35058: LD_ADDR_VAR 0 10
35062: PUSH
35063: LD_VAR 0 8
35067: PPUSH
35068: LD_VAR 0 11
35072: PPUSH
35073: CALL_OW 74
35077: ST_TO_ADDR
35078: GO 35100
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35080: LD_ADDR_VAR 0 10
35084: PUSH
35085: LD_VAR 0 8
35089: PPUSH
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 74
35099: ST_TO_ADDR
// if not enemy then
35100: LD_VAR 0 10
35104: NOT
35105: IFFALSE 35109
// exit ;
35107: GO 35516
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35109: LD_VAR 0 11
35113: IFFALSE 35135
35115: PUSH
35116: LD_VAR 0 11
35120: PPUSH
35121: LD_VAR 0 10
35125: PPUSH
35126: CALL_OW 296
35130: PUSH
35131: LD_INT 13
35133: GREATER
35134: AND
35135: IFTRUE 35157
35137: PUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: LD_VAR 0 10
35147: PPUSH
35148: CALL_OW 296
35152: PUSH
35153: LD_INT 12
35155: GREATER
35156: OR
35157: IFFALSE 35161
// exit ;
35159: GO 35516
// missile := [ 1 ] ;
35161: LD_ADDR_VAR 0 14
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35172: LD_VAR 0 9
35176: PPUSH
35177: LD_VAR 0 12
35181: PPUSH
35182: CALL_OW 325
35186: IFFALSE 35215
// missile := Replace ( missile , missile + 1 , 2 ) ;
35188: LD_ADDR_VAR 0 14
35192: PUSH
35193: LD_VAR 0 14
35197: PPUSH
35198: LD_VAR 0 14
35202: PUSH
35203: LD_INT 1
35205: PLUS
35206: PPUSH
35207: LD_INT 2
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35215: LD_VAR 0 9
35219: PPUSH
35220: LD_VAR 0 13
35224: PPUSH
35225: CALL_OW 325
35229: IFFALSE 35253
35231: PUSH
35232: LD_VAR 0 10
35236: PPUSH
35237: CALL_OW 255
35241: PPUSH
35242: LD_VAR 0 13
35246: PPUSH
35247: CALL_OW 325
35251: NOT
35252: AND
35253: IFFALSE 35282
// missile := Replace ( missile , missile + 1 , 3 ) ;
35255: LD_ADDR_VAR 0 14
35259: PUSH
35260: LD_VAR 0 14
35264: PPUSH
35265: LD_VAR 0 14
35269: PUSH
35270: LD_INT 1
35272: PLUS
35273: PPUSH
35274: LD_INT 3
35276: PPUSH
35277: CALL_OW 1
35281: ST_TO_ADDR
// if missile < 2 then
35282: LD_VAR 0 14
35286: PUSH
35287: LD_INT 2
35289: LESS
35290: IFFALSE 35294
// exit ;
35292: GO 35516
// x := GetX ( enemy ) ;
35294: LD_ADDR_VAR 0 4
35298: PUSH
35299: LD_VAR 0 10
35303: PPUSH
35304: CALL_OW 250
35308: ST_TO_ADDR
// y := GetY ( enemy ) ;
35309: LD_ADDR_VAR 0 5
35313: PUSH
35314: LD_VAR 0 10
35318: PPUSH
35319: CALL_OW 251
35323: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35324: LD_ADDR_VAR 0 6
35328: PUSH
35329: LD_VAR 0 4
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PPUSH
35338: LD_INT 1
35340: PPUSH
35341: CALL_OW 12
35345: PLUS
35346: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35347: LD_ADDR_VAR 0 7
35351: PUSH
35352: LD_VAR 0 5
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PPUSH
35361: LD_INT 1
35363: PPUSH
35364: CALL_OW 12
35368: PLUS
35369: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35370: LD_VAR 0 6
35374: PPUSH
35375: LD_VAR 0 7
35379: PPUSH
35380: CALL_OW 488
35384: NOT
35385: IFFALSE 35407
// begin _x := x ;
35387: LD_ADDR_VAR 0 6
35391: PUSH
35392: LD_VAR 0 4
35396: ST_TO_ADDR
// _y := y ;
35397: LD_ADDR_VAR 0 7
35401: PUSH
35402: LD_VAR 0 5
35406: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_INT 1
35414: PPUSH
35415: LD_VAR 0 14
35419: PPUSH
35420: CALL_OW 12
35424: ST_TO_ADDR
// case i of 1 :
35425: LD_VAR 0 3
35429: PUSH
35430: LD_INT 1
35432: DOUBLE
35433: EQUAL
35434: IFTRUE 35438
35436: GO 35455
35438: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35439: LD_VAR 0 1
35443: PPUSH
35444: LD_VAR 0 10
35448: PPUSH
35449: CALL_OW 115
35453: GO 35516
35455: LD_INT 2
35457: DOUBLE
35458: EQUAL
35459: IFTRUE 35463
35461: GO 35485
35463: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_VAR 0 6
35473: PPUSH
35474: LD_VAR 0 7
35478: PPUSH
35479: CALL_OW 153
35483: GO 35516
35485: LD_INT 3
35487: DOUBLE
35488: EQUAL
35489: IFTRUE 35493
35491: GO 35515
35493: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35494: LD_VAR 0 1
35498: PPUSH
35499: LD_VAR 0 6
35503: PPUSH
35504: LD_VAR 0 7
35508: PPUSH
35509: CALL_OW 154
35513: GO 35516
35515: POP
// end ;
35516: LD_VAR 0 2
35520: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35521: LD_INT 0
35523: PPUSH
35524: PPUSH
35525: PPUSH
35526: PPUSH
35527: PPUSH
35528: PPUSH
// if not unit or not building then
35529: LD_VAR 0 1
35533: NOT
35534: IFTRUE 35543
35536: PUSH
35537: LD_VAR 0 2
35541: NOT
35542: OR
35543: IFFALSE 35547
// exit ;
35545: GO 35705
// x := GetX ( building ) ;
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_VAR 0 2
35556: PPUSH
35557: CALL_OW 250
35561: ST_TO_ADDR
// y := GetY ( building ) ;
35562: LD_ADDR_VAR 0 6
35566: PUSH
35567: LD_VAR 0 2
35571: PPUSH
35572: CALL_OW 251
35576: ST_TO_ADDR
// for i := 0 to 5 do
35577: LD_ADDR_VAR 0 4
35581: PUSH
35582: DOUBLE
35583: LD_INT 0
35585: DEC
35586: ST_TO_ADDR
35587: LD_INT 5
35589: PUSH
35590: FOR_TO
35591: IFFALSE 35703
// begin _x := ShiftX ( x , i , 3 ) ;
35593: LD_ADDR_VAR 0 7
35597: PUSH
35598: LD_VAR 0 5
35602: PPUSH
35603: LD_VAR 0 4
35607: PPUSH
35608: LD_INT 3
35610: PPUSH
35611: CALL_OW 272
35615: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35616: LD_ADDR_VAR 0 8
35620: PUSH
35621: LD_VAR 0 6
35625: PPUSH
35626: LD_VAR 0 4
35630: PPUSH
35631: LD_INT 3
35633: PPUSH
35634: CALL_OW 273
35638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35639: LD_VAR 0 7
35643: PPUSH
35644: LD_VAR 0 8
35648: PPUSH
35649: CALL_OW 488
35653: NOT
35654: IFFALSE 35658
// continue ;
35656: GO 35590
// if HexInfo ( _x , _y ) = 0 then
35658: LD_VAR 0 7
35662: PPUSH
35663: LD_VAR 0 8
35667: PPUSH
35668: CALL_OW 428
35672: PUSH
35673: LD_INT 0
35675: EQUAL
35676: IFFALSE 35701
// begin ComMoveXY ( unit , _x , _y ) ;
35678: LD_VAR 0 1
35682: PPUSH
35683: LD_VAR 0 7
35687: PPUSH
35688: LD_VAR 0 8
35692: PPUSH
35693: CALL_OW 111
// exit ;
35697: POP
35698: POP
35699: GO 35705
// end ; end ;
35701: GO 35590
35703: POP
35704: POP
// end ;
35705: LD_VAR 0 3
35709: RET
// export function ScanBase ( side , base_area ) ; begin
35710: LD_INT 0
35712: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_VAR 0 2
35722: PPUSH
35723: LD_INT 81
35725: PUSH
35726: LD_VAR 0 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PPUSH
35735: CALL_OW 70
35739: ST_TO_ADDR
// end ;
35740: LD_VAR 0 3
35744: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35745: LD_INT 0
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
// result := false ;
35751: LD_ADDR_VAR 0 2
35755: PUSH
35756: LD_INT 0
35758: ST_TO_ADDR
// side := GetSide ( unit ) ;
35759: LD_ADDR_VAR 0 3
35763: PUSH
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 255
35773: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35774: LD_ADDR_VAR 0 4
35778: PUSH
35779: LD_VAR 0 1
35783: PPUSH
35784: CALL_OW 248
35788: ST_TO_ADDR
// case nat of 1 :
35789: LD_VAR 0 4
35793: PUSH
35794: LD_INT 1
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35813
35802: POP
// tech := tech_lassight ; 2 :
35803: LD_ADDR_VAR 0 5
35807: PUSH
35808: LD_INT 12
35810: ST_TO_ADDR
35811: GO 35852
35813: LD_INT 2
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35821
35819: GO 35832
35821: POP
// tech := tech_mortar ; 3 :
35822: LD_ADDR_VAR 0 5
35826: PUSH
35827: LD_INT 41
35829: ST_TO_ADDR
35830: GO 35852
35832: LD_INT 3
35834: DOUBLE
35835: EQUAL
35836: IFTRUE 35840
35838: GO 35851
35840: POP
// tech := tech_bazooka ; end ;
35841: LD_ADDR_VAR 0 5
35845: PUSH
35846: LD_INT 44
35848: ST_TO_ADDR
35849: GO 35852
35851: POP
// if Researched ( side , tech ) then
35852: LD_VAR 0 3
35856: PPUSH
35857: LD_VAR 0 5
35861: PPUSH
35862: CALL_OW 325
35866: IFFALSE 35893
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35868: LD_ADDR_VAR 0 2
35872: PUSH
35873: LD_INT 5
35875: PUSH
35876: LD_INT 8
35878: PUSH
35879: LD_INT 9
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: PUSH
35887: LD_VAR 0 4
35891: ARRAY
35892: ST_TO_ADDR
// end ;
35893: LD_VAR 0 2
35897: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35898: LD_INT 0
35900: PPUSH
35901: PPUSH
35902: PPUSH
// if not mines then
35903: LD_VAR 0 2
35907: NOT
35908: IFFALSE 35912
// exit ;
35910: GO 36056
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35912: LD_ADDR_VAR 0 5
35916: PUSH
35917: LD_INT 81
35919: PUSH
35920: LD_VAR 0 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: LD_INT 21
35934: PUSH
35935: LD_INT 3
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PPUSH
35950: CALL_OW 69
35954: ST_TO_ADDR
// for i in mines do
35955: LD_ADDR_VAR 0 4
35959: PUSH
35960: LD_VAR 0 2
35964: PUSH
35965: FOR_IN
35966: IFFALSE 36054
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35968: LD_VAR 0 4
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: PPUSH
35977: LD_VAR 0 4
35981: PUSH
35982: LD_INT 2
35984: ARRAY
35985: PPUSH
35986: CALL_OW 458
35990: NOT
35991: IFFALSE 35995
// continue ;
35993: GO 35965
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35995: LD_VAR 0 4
35999: PUSH
36000: LD_INT 1
36002: ARRAY
36003: PPUSH
36004: LD_VAR 0 4
36008: PUSH
36009: LD_INT 2
36011: ARRAY
36012: PPUSH
36013: CALL_OW 428
36017: PUSH
36018: LD_VAR 0 5
36022: IN
36023: IFFALSE 36052
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36025: LD_VAR 0 4
36029: PUSH
36030: LD_INT 1
36032: ARRAY
36033: PPUSH
36034: LD_VAR 0 4
36038: PUSH
36039: LD_INT 2
36041: ARRAY
36042: PPUSH
36043: LD_VAR 0 1
36047: PPUSH
36048: CALL_OW 456
// end ;
36052: GO 35965
36054: POP
36055: POP
// end ;
36056: LD_VAR 0 3
36060: RET
// export function Count ( array ) ; begin
36061: LD_INT 0
36063: PPUSH
// result := array + 0 ;
36064: LD_ADDR_VAR 0 2
36068: PUSH
36069: LD_VAR 0 1
36073: PUSH
36074: LD_INT 0
36076: PLUS
36077: ST_TO_ADDR
// end ;
36078: LD_VAR 0 2
36082: RET
// export function IsEmpty ( building ) ; begin
36083: LD_INT 0
36085: PPUSH
// if not building then
36086: LD_VAR 0 1
36090: NOT
36091: IFFALSE 36095
// exit ;
36093: GO 36138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36095: LD_ADDR_VAR 0 2
36099: PUSH
36100: LD_VAR 0 1
36104: PUSH
36105: LD_INT 22
36107: PUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: CALL_OW 255
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 58
36124: PUSH
36125: EMPTY
36126: LIST
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PPUSH
36132: CALL_OW 69
36136: IN
36137: ST_TO_ADDR
// end ;
36138: LD_VAR 0 2
36142: RET
// export function IsNotFull ( building ) ; var places ; begin
36143: LD_INT 0
36145: PPUSH
36146: PPUSH
// if not building then
36147: LD_VAR 0 1
36151: NOT
36152: IFFALSE 36156
// exit ;
36154: GO 36184
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36156: LD_ADDR_VAR 0 2
36160: PUSH
36161: LD_VAR 0 1
36165: PPUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 62
36171: PUSH
36172: EMPTY
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PPUSH
36179: CALL_OW 72
36183: ST_TO_ADDR
// end ;
36184: LD_VAR 0 2
36188: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
// tmp := [ ] ;
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: EMPTY
36201: ST_TO_ADDR
// list := [ ] ;
36202: LD_ADDR_VAR 0 5
36206: PUSH
36207: EMPTY
36208: ST_TO_ADDR
// for i = 16 to 25 do
36209: LD_ADDR_VAR 0 4
36213: PUSH
36214: DOUBLE
36215: LD_INT 16
36217: DEC
36218: ST_TO_ADDR
36219: LD_INT 25
36221: PUSH
36222: FOR_TO
36223: IFFALSE 36296
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36225: LD_ADDR_VAR 0 3
36229: PUSH
36230: LD_VAR 0 3
36234: PUSH
36235: LD_INT 22
36237: PUSH
36238: LD_VAR 0 1
36242: PPUSH
36243: CALL_OW 255
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 91
36254: PUSH
36255: LD_VAR 0 1
36259: PUSH
36260: LD_INT 6
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 30
36270: PUSH
36271: LD_VAR 0 4
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: PPUSH
36288: CALL_OW 69
36292: ADD
36293: ST_TO_ADDR
36294: GO 36222
36296: POP
36297: POP
// for i = 1 to tmp do
36298: LD_ADDR_VAR 0 4
36302: PUSH
36303: DOUBLE
36304: LD_INT 1
36306: DEC
36307: ST_TO_ADDR
36308: LD_VAR 0 3
36312: PUSH
36313: FOR_TO
36314: IFFALSE 36402
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36316: LD_ADDR_VAR 0 5
36320: PUSH
36321: LD_VAR 0 5
36325: PUSH
36326: LD_VAR 0 3
36330: PUSH
36331: LD_VAR 0 4
36335: ARRAY
36336: PPUSH
36337: CALL_OW 266
36341: PUSH
36342: LD_VAR 0 3
36346: PUSH
36347: LD_VAR 0 4
36351: ARRAY
36352: PPUSH
36353: CALL_OW 250
36357: PUSH
36358: LD_VAR 0 3
36362: PUSH
36363: LD_VAR 0 4
36367: ARRAY
36368: PPUSH
36369: CALL_OW 251
36373: PUSH
36374: LD_VAR 0 3
36378: PUSH
36379: LD_VAR 0 4
36383: ARRAY
36384: PPUSH
36385: CALL_OW 254
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: ADD
36399: ST_TO_ADDR
36400: GO 36313
36402: POP
36403: POP
// result := list ;
36404: LD_ADDR_VAR 0 2
36408: PUSH
36409: LD_VAR 0 5
36413: ST_TO_ADDR
// end ;
36414: LD_VAR 0 2
36418: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36419: LD_INT 0
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
// if not factory then
36428: LD_VAR 0 1
36432: NOT
36433: IFFALSE 36437
// exit ;
36435: GO 37040
// if control = control_apeman then
36437: LD_VAR 0 4
36441: PUSH
36442: LD_INT 5
36444: EQUAL
36445: IFFALSE 36554
// begin tmp := UnitsInside ( factory ) ;
36447: LD_ADDR_VAR 0 8
36451: PUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 313
36461: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36462: LD_VAR 0 8
36466: PPUSH
36467: LD_INT 25
36469: PUSH
36470: LD_INT 12
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PPUSH
36477: CALL_OW 72
36481: NOT
36482: IFFALSE 36492
// control := control_manual ;
36484: LD_ADDR_VAR 0 4
36488: PUSH
36489: LD_INT 1
36491: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36492: LD_ADDR_VAR 0 8
36496: PUSH
36497: LD_VAR 0 1
36501: PPUSH
36502: CALL 36189 0 1
36506: ST_TO_ADDR
// if tmp then
36507: LD_VAR 0 8
36511: IFFALSE 36554
// begin for i in tmp do
36513: LD_ADDR_VAR 0 7
36517: PUSH
36518: LD_VAR 0 8
36522: PUSH
36523: FOR_IN
36524: IFFALSE 36552
// if i [ 1 ] = b_ext_radio then
36526: LD_VAR 0 7
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: PUSH
36535: LD_INT 22
36537: EQUAL
36538: IFFALSE 36550
// begin control := control_remote ;
36540: LD_ADDR_VAR 0 4
36544: PUSH
36545: LD_INT 2
36547: ST_TO_ADDR
// break ;
36548: GO 36552
// end ;
36550: GO 36523
36552: POP
36553: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36554: LD_VAR 0 1
36558: PPUSH
36559: LD_VAR 0 2
36563: PPUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: LD_VAR 0 4
36573: PPUSH
36574: LD_VAR 0 5
36578: PPUSH
36579: CALL_OW 448
36583: IFFALSE 36618
// begin result := [ chassis , engine , control , weapon ] ;
36585: LD_ADDR_VAR 0 6
36589: PUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_VAR 0 3
36599: PUSH
36600: LD_VAR 0 4
36604: PUSH
36605: LD_VAR 0 5
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// exit ;
36616: GO 37040
// end ; _chassis := AvailableChassisList ( factory ) ;
36618: LD_ADDR_VAR 0 9
36622: PUSH
36623: LD_VAR 0 1
36627: PPUSH
36628: CALL_OW 475
36632: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36633: LD_ADDR_VAR 0 11
36637: PUSH
36638: LD_VAR 0 1
36642: PPUSH
36643: CALL_OW 476
36647: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36648: LD_ADDR_VAR 0 12
36652: PUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL_OW 477
36662: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36663: LD_ADDR_VAR 0 10
36667: PUSH
36668: LD_VAR 0 1
36672: PPUSH
36673: CALL_OW 478
36677: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36678: LD_VAR 0 9
36682: NOT
36683: IFTRUE 36692
36685: PUSH
36686: LD_VAR 0 11
36690: NOT
36691: OR
36692: IFTRUE 36701
36694: PUSH
36695: LD_VAR 0 12
36699: NOT
36700: OR
36701: IFTRUE 36710
36703: PUSH
36704: LD_VAR 0 10
36708: NOT
36709: OR
36710: IFFALSE 36745
// begin result := [ chassis , engine , control , weapon ] ;
36712: LD_ADDR_VAR 0 6
36716: PUSH
36717: LD_VAR 0 2
36721: PUSH
36722: LD_VAR 0 3
36726: PUSH
36727: LD_VAR 0 4
36731: PUSH
36732: LD_VAR 0 5
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: ST_TO_ADDR
// exit ;
36743: GO 37040
// end ; if not chassis in _chassis then
36745: LD_VAR 0 2
36749: PUSH
36750: LD_VAR 0 9
36754: IN
36755: NOT
36756: IFFALSE 36782
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36758: LD_ADDR_VAR 0 2
36762: PUSH
36763: LD_VAR 0 9
36767: PUSH
36768: LD_INT 1
36770: PPUSH
36771: LD_VAR 0 9
36775: PPUSH
36776: CALL_OW 12
36780: ARRAY
36781: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36782: LD_VAR 0 2
36786: PPUSH
36787: LD_VAR 0 3
36791: PPUSH
36792: CALL 37045 0 2
36796: NOT
36797: IFFALSE 36858
// repeat engine := _engine [ 1 ] ;
36799: LD_ADDR_VAR 0 3
36803: PUSH
36804: LD_VAR 0 11
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36813: LD_ADDR_VAR 0 11
36817: PUSH
36818: LD_VAR 0 11
36822: PPUSH
36823: LD_INT 1
36825: PPUSH
36826: CALL_OW 3
36830: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36831: LD_VAR 0 2
36835: PPUSH
36836: LD_VAR 0 3
36840: PPUSH
36841: CALL 37045 0 2
36845: IFTRUE 36856
36847: PUSH
36848: LD_VAR 0 11
36852: PUSH
36853: EMPTY
36854: EQUAL
36855: OR
36856: IFFALSE 36799
// if not control in _control then
36858: LD_VAR 0 4
36862: PUSH
36863: LD_VAR 0 12
36867: IN
36868: NOT
36869: IFFALSE 36895
// control := _control [ rand ( 1 , _control ) ] ;
36871: LD_ADDR_VAR 0 4
36875: PUSH
36876: LD_VAR 0 12
36880: PUSH
36881: LD_INT 1
36883: PPUSH
36884: LD_VAR 0 12
36888: PPUSH
36889: CALL_OW 12
36893: ARRAY
36894: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36895: LD_VAR 0 2
36899: PPUSH
36900: LD_VAR 0 5
36904: PPUSH
36905: CALL 37267 0 2
36909: NOT
36910: IFFALSE 36971
// repeat weapon := _weapon [ 1 ] ;
36912: LD_ADDR_VAR 0 5
36916: PUSH
36917: LD_VAR 0 10
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36926: LD_ADDR_VAR 0 10
36930: PUSH
36931: LD_VAR 0 10
36935: PPUSH
36936: LD_INT 1
36938: PPUSH
36939: CALL_OW 3
36943: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36944: LD_VAR 0 2
36948: PPUSH
36949: LD_VAR 0 5
36953: PPUSH
36954: CALL 37267 0 2
36958: IFTRUE 36969
36960: PUSH
36961: LD_VAR 0 10
36965: PUSH
36966: EMPTY
36967: EQUAL
36968: OR
36969: IFFALSE 36912
// result := [ ] ;
36971: LD_ADDR_VAR 0 6
36975: PUSH
36976: EMPTY
36977: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36978: LD_VAR 0 1
36982: PPUSH
36983: LD_VAR 0 2
36987: PPUSH
36988: LD_VAR 0 3
36992: PPUSH
36993: LD_VAR 0 4
36997: PPUSH
36998: LD_VAR 0 5
37002: PPUSH
37003: CALL_OW 448
37007: IFFALSE 37040
// result := [ chassis , engine , control , weapon ] ;
37009: LD_ADDR_VAR 0 6
37013: PUSH
37014: LD_VAR 0 2
37018: PUSH
37019: LD_VAR 0 3
37023: PUSH
37024: LD_VAR 0 4
37028: PUSH
37029: LD_VAR 0 5
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: ST_TO_ADDR
// end ;
37040: LD_VAR 0 6
37044: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37045: LD_INT 0
37047: PPUSH
// if not chassis or not engine then
37048: LD_VAR 0 1
37052: NOT
37053: IFTRUE 37062
37055: PUSH
37056: LD_VAR 0 2
37060: NOT
37061: OR
37062: IFFALSE 37066
// exit ;
37064: GO 37262
// case engine of engine_solar :
37066: LD_VAR 0 2
37070: PUSH
37071: LD_INT 2
37073: DOUBLE
37074: EQUAL
37075: IFTRUE 37079
37077: GO 37117
37079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37080: LD_ADDR_VAR 0 3
37084: PUSH
37085: LD_INT 11
37087: PUSH
37088: LD_INT 12
37090: PUSH
37091: LD_INT 13
37093: PUSH
37094: LD_INT 14
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: ST_TO_ADDR
37115: GO 37246
37117: LD_INT 1
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37187
37125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 11
37133: PUSH
37134: LD_INT 12
37136: PUSH
37137: LD_INT 13
37139: PUSH
37140: LD_INT 14
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: LD_INT 4
37154: PUSH
37155: LD_INT 5
37157: PUSH
37158: LD_INT 21
37160: PUSH
37161: LD_INT 23
37163: PUSH
37164: LD_INT 22
37166: PUSH
37167: LD_INT 24
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: ST_TO_ADDR
37185: GO 37246
37187: LD_INT 3
37189: DOUBLE
37190: EQUAL
37191: IFTRUE 37195
37193: GO 37245
37195: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37196: LD_ADDR_VAR 0 3
37200: PUSH
37201: LD_INT 13
37203: PUSH
37204: LD_INT 14
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: LD_INT 3
37212: PUSH
37213: LD_INT 4
37215: PUSH
37216: LD_INT 5
37218: PUSH
37219: LD_INT 21
37221: PUSH
37222: LD_INT 22
37224: PUSH
37225: LD_INT 23
37227: PUSH
37228: LD_INT 24
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: ST_TO_ADDR
37243: GO 37246
37245: POP
// result := ( chassis in result ) ;
37246: LD_ADDR_VAR 0 3
37250: PUSH
37251: LD_VAR 0 1
37255: PUSH
37256: LD_VAR 0 3
37260: IN
37261: ST_TO_ADDR
// end ;
37262: LD_VAR 0 3
37266: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37267: LD_INT 0
37269: PPUSH
// if not chassis or not weapon then
37270: LD_VAR 0 1
37274: NOT
37275: IFTRUE 37284
37277: PUSH
37278: LD_VAR 0 2
37282: NOT
37283: OR
37284: IFFALSE 37288
// exit ;
37286: GO 38382
// case weapon of us_machine_gun :
37288: LD_VAR 0 2
37292: PUSH
37293: LD_INT 2
37295: DOUBLE
37296: EQUAL
37297: IFTRUE 37301
37299: GO 37331
37301: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: LD_INT 4
37318: PUSH
37319: LD_INT 5
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: ST_TO_ADDR
37329: GO 38366
37331: LD_INT 3
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 37369
37339: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37340: LD_ADDR_VAR 0 3
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 3
37353: PUSH
37354: LD_INT 4
37356: PUSH
37357: LD_INT 5
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
37367: GO 38366
37369: LD_INT 11
37371: DOUBLE
37372: EQUAL
37373: IFTRUE 37377
37375: GO 37407
37377: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: LD_INT 4
37394: PUSH
37395: LD_INT 5
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
37405: GO 38366
37407: LD_INT 4
37409: DOUBLE
37410: EQUAL
37411: IFTRUE 37415
37413: GO 37441
37415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37416: LD_ADDR_VAR 0 3
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: LD_INT 4
37429: PUSH
37430: LD_INT 5
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: ST_TO_ADDR
37439: GO 38366
37441: LD_INT 5
37443: DOUBLE
37444: EQUAL
37445: IFTRUE 37449
37447: GO 37475
37449: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37450: LD_ADDR_VAR 0 3
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: LD_INT 4
37463: PUSH
37464: LD_INT 5
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
37473: GO 38366
37475: LD_INT 9
37477: DOUBLE
37478: EQUAL
37479: IFTRUE 37483
37481: GO 37509
37483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: LD_INT 5
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
37507: GO 38366
37509: LD_INT 7
37511: DOUBLE
37512: EQUAL
37513: IFTRUE 37517
37515: GO 37543
37517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: LD_INT 4
37531: PUSH
37532: LD_INT 5
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: ST_TO_ADDR
37541: GO 38366
37543: LD_INT 12
37545: DOUBLE
37546: EQUAL
37547: IFTRUE 37551
37549: GO 37577
37551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37552: LD_ADDR_VAR 0 3
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: LD_INT 4
37565: PUSH
37566: LD_INT 5
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
37575: GO 38366
37577: LD_INT 13
37579: DOUBLE
37580: EQUAL
37581: IFTRUE 37585
37583: GO 37611
37585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37586: LD_ADDR_VAR 0 3
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: LD_INT 4
37599: PUSH
37600: LD_INT 5
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: ST_TO_ADDR
37609: GO 38366
37611: LD_INT 14
37613: DOUBLE
37614: EQUAL
37615: IFTRUE 37619
37617: GO 37637
37619: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37620: LD_ADDR_VAR 0 3
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: LD_INT 5
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: ST_TO_ADDR
37635: GO 38366
37637: LD_INT 6
37639: DOUBLE
37640: EQUAL
37641: IFTRUE 37645
37643: GO 37663
37645: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37646: LD_ADDR_VAR 0 3
37650: PUSH
37651: LD_INT 4
37653: PUSH
37654: LD_INT 5
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: ST_TO_ADDR
37661: GO 38366
37663: LD_INT 10
37665: DOUBLE
37666: EQUAL
37667: IFTRUE 37671
37669: GO 37689
37671: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37672: LD_ADDR_VAR 0 3
37676: PUSH
37677: LD_INT 4
37679: PUSH
37680: LD_INT 5
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: ST_TO_ADDR
37687: GO 38366
37689: LD_INT 22
37691: DOUBLE
37692: EQUAL
37693: IFTRUE 37697
37695: GO 37723
37697: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37698: LD_ADDR_VAR 0 3
37702: PUSH
37703: LD_INT 11
37705: PUSH
37706: LD_INT 12
37708: PUSH
37709: LD_INT 13
37711: PUSH
37712: LD_INT 14
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
37721: GO 38366
37723: LD_INT 23
37725: DOUBLE
37726: EQUAL
37727: IFTRUE 37731
37729: GO 37757
37731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37732: LD_ADDR_VAR 0 3
37736: PUSH
37737: LD_INT 11
37739: PUSH
37740: LD_INT 12
37742: PUSH
37743: LD_INT 13
37745: PUSH
37746: LD_INT 14
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: ST_TO_ADDR
37755: GO 38366
37757: LD_INT 24
37759: DOUBLE
37760: EQUAL
37761: IFTRUE 37765
37763: GO 37791
37765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37766: LD_ADDR_VAR 0 3
37770: PUSH
37771: LD_INT 11
37773: PUSH
37774: LD_INT 12
37776: PUSH
37777: LD_INT 13
37779: PUSH
37780: LD_INT 14
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
37789: GO 38366
37791: LD_INT 30
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37825
37799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 11
37807: PUSH
37808: LD_INT 12
37810: PUSH
37811: LD_INT 13
37813: PUSH
37814: LD_INT 14
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
37823: GO 38366
37825: LD_INT 25
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37851
37833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_INT 13
37841: PUSH
37842: LD_INT 14
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: ST_TO_ADDR
37849: GO 38366
37851: LD_INT 27
37853: DOUBLE
37854: EQUAL
37855: IFTRUE 37859
37857: GO 37877
37859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_INT 13
37867: PUSH
37868: LD_INT 14
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: ST_TO_ADDR
37875: GO 38366
37877: LD_INT 92
37879: DOUBLE
37880: EQUAL
37881: IFTRUE 37885
37883: GO 37911
37885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_INT 11
37893: PUSH
37894: LD_INT 12
37896: PUSH
37897: LD_INT 13
37899: PUSH
37900: LD_INT 14
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
37909: GO 38366
37911: LD_INT 28
37913: DOUBLE
37914: EQUAL
37915: IFTRUE 37919
37917: GO 37937
37919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37920: LD_ADDR_VAR 0 3
37924: PUSH
37925: LD_INT 13
37927: PUSH
37928: LD_INT 14
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: ST_TO_ADDR
37935: GO 38366
37937: LD_INT 29
37939: DOUBLE
37940: EQUAL
37941: IFTRUE 37945
37943: GO 37963
37945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37946: LD_ADDR_VAR 0 3
37950: PUSH
37951: LD_INT 13
37953: PUSH
37954: LD_INT 14
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: ST_TO_ADDR
37961: GO 38366
37963: LD_INT 31
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37971
37969: GO 37989
37971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37972: LD_ADDR_VAR 0 3
37976: PUSH
37977: LD_INT 13
37979: PUSH
37980: LD_INT 14
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: ST_TO_ADDR
37987: GO 38366
37989: LD_INT 26
37991: DOUBLE
37992: EQUAL
37993: IFTRUE 37997
37995: GO 38015
37997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37998: LD_ADDR_VAR 0 3
38002: PUSH
38003: LD_INT 13
38005: PUSH
38006: LD_INT 14
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: ST_TO_ADDR
38013: GO 38366
38015: LD_INT 42
38017: DOUBLE
38018: EQUAL
38019: IFTRUE 38023
38021: GO 38049
38023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38024: LD_ADDR_VAR 0 3
38028: PUSH
38029: LD_INT 21
38031: PUSH
38032: LD_INT 22
38034: PUSH
38035: LD_INT 23
38037: PUSH
38038: LD_INT 24
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
38047: GO 38366
38049: LD_INT 43
38051: DOUBLE
38052: EQUAL
38053: IFTRUE 38057
38055: GO 38083
38057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_INT 21
38065: PUSH
38066: LD_INT 22
38068: PUSH
38069: LD_INT 23
38071: PUSH
38072: LD_INT 24
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: ST_TO_ADDR
38081: GO 38366
38083: LD_INT 44
38085: DOUBLE
38086: EQUAL
38087: IFTRUE 38091
38089: GO 38117
38091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_INT 21
38099: PUSH
38100: LD_INT 22
38102: PUSH
38103: LD_INT 23
38105: PUSH
38106: LD_INT 24
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
38115: GO 38366
38117: LD_INT 45
38119: DOUBLE
38120: EQUAL
38121: IFTRUE 38125
38123: GO 38151
38125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_INT 21
38133: PUSH
38134: LD_INT 22
38136: PUSH
38137: LD_INT 23
38139: PUSH
38140: LD_INT 24
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
38149: GO 38366
38151: LD_INT 49
38153: DOUBLE
38154: EQUAL
38155: IFTRUE 38159
38157: GO 38185
38159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_INT 21
38167: PUSH
38168: LD_INT 22
38170: PUSH
38171: LD_INT 23
38173: PUSH
38174: LD_INT 24
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
38183: GO 38366
38185: LD_INT 51
38187: DOUBLE
38188: EQUAL
38189: IFTRUE 38193
38191: GO 38219
38193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38194: LD_ADDR_VAR 0 3
38198: PUSH
38199: LD_INT 21
38201: PUSH
38202: LD_INT 22
38204: PUSH
38205: LD_INT 23
38207: PUSH
38208: LD_INT 24
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
38217: GO 38366
38219: LD_INT 52
38221: DOUBLE
38222: EQUAL
38223: IFTRUE 38227
38225: GO 38253
38227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38228: LD_ADDR_VAR 0 3
38232: PUSH
38233: LD_INT 21
38235: PUSH
38236: LD_INT 22
38238: PUSH
38239: LD_INT 23
38241: PUSH
38242: LD_INT 24
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
38251: GO 38366
38253: LD_INT 53
38255: DOUBLE
38256: EQUAL
38257: IFTRUE 38261
38259: GO 38279
38261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38262: LD_ADDR_VAR 0 3
38266: PUSH
38267: LD_INT 23
38269: PUSH
38270: LD_INT 24
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: ST_TO_ADDR
38277: GO 38366
38279: LD_INT 46
38281: DOUBLE
38282: EQUAL
38283: IFTRUE 38287
38285: GO 38305
38287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_INT 23
38295: PUSH
38296: LD_INT 24
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: ST_TO_ADDR
38303: GO 38366
38305: LD_INT 47
38307: DOUBLE
38308: EQUAL
38309: IFTRUE 38313
38311: GO 38331
38313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
38314: LD_ADDR_VAR 0 3
38318: PUSH
38319: LD_INT 23
38321: PUSH
38322: LD_INT 24
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: ST_TO_ADDR
38329: GO 38366
38331: LD_INT 98
38333: DOUBLE
38334: EQUAL
38335: IFTRUE 38339
38337: GO 38365
38339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38340: LD_ADDR_VAR 0 3
38344: PUSH
38345: LD_INT 21
38347: PUSH
38348: LD_INT 22
38350: PUSH
38351: LD_INT 23
38353: PUSH
38354: LD_INT 24
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
38363: GO 38366
38365: POP
// result := ( chassis in result ) ;
38366: LD_ADDR_VAR 0 3
38370: PUSH
38371: LD_VAR 0 1
38375: PUSH
38376: LD_VAR 0 3
38380: IN
38381: ST_TO_ADDR
// end ;
38382: LD_VAR 0 3
38386: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38387: LD_INT 0
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
// result := array ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: LD_VAR 0 1
38405: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38406: LD_VAR 0 1
38410: NOT
38411: IFTRUE 38420
38413: PUSH
38414: LD_VAR 0 2
38418: NOT
38419: OR
38420: IFTRUE 38429
38422: PUSH
38423: LD_VAR 0 3
38427: NOT
38428: OR
38429: IFTRUE 38443
38431: PUSH
38432: LD_VAR 0 2
38436: PUSH
38437: LD_VAR 0 1
38441: GREATER
38442: OR
38443: IFTRUE 38457
38445: PUSH
38446: LD_VAR 0 3
38450: PUSH
38451: LD_VAR 0 1
38455: GREATER
38456: OR
38457: IFFALSE 38461
// exit ;
38459: GO 38757
// if direction then
38461: LD_VAR 0 4
38465: IFFALSE 38529
// begin d := 1 ;
38467: LD_ADDR_VAR 0 9
38471: PUSH
38472: LD_INT 1
38474: ST_TO_ADDR
// if i_from > i_to then
38475: LD_VAR 0 2
38479: PUSH
38480: LD_VAR 0 3
38484: GREATER
38485: IFFALSE 38511
// length := ( array - i_from ) + i_to else
38487: LD_ADDR_VAR 0 11
38491: PUSH
38492: LD_VAR 0 1
38496: PUSH
38497: LD_VAR 0 2
38501: MINUS
38502: PUSH
38503: LD_VAR 0 3
38507: PLUS
38508: ST_TO_ADDR
38509: GO 38527
// length := i_to - i_from ;
38511: LD_ADDR_VAR 0 11
38515: PUSH
38516: LD_VAR 0 3
38520: PUSH
38521: LD_VAR 0 2
38525: MINUS
38526: ST_TO_ADDR
// end else
38527: GO 38590
// begin d := - 1 ;
38529: LD_ADDR_VAR 0 9
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: ST_TO_ADDR
// if i_from > i_to then
38538: LD_VAR 0 2
38542: PUSH
38543: LD_VAR 0 3
38547: GREATER
38548: IFFALSE 38568
// length := i_from - i_to else
38550: LD_ADDR_VAR 0 11
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_VAR 0 3
38564: MINUS
38565: ST_TO_ADDR
38566: GO 38590
// length := ( array - i_to ) + i_from ;
38568: LD_ADDR_VAR 0 11
38572: PUSH
38573: LD_VAR 0 1
38577: PUSH
38578: LD_VAR 0 3
38582: MINUS
38583: PUSH
38584: LD_VAR 0 2
38588: PLUS
38589: ST_TO_ADDR
// end ; if not length then
38590: LD_VAR 0 11
38594: NOT
38595: IFFALSE 38599
// exit ;
38597: GO 38757
// tmp := array ;
38599: LD_ADDR_VAR 0 10
38603: PUSH
38604: LD_VAR 0 1
38608: ST_TO_ADDR
// for i = 1 to length do
38609: LD_ADDR_VAR 0 6
38613: PUSH
38614: DOUBLE
38615: LD_INT 1
38617: DEC
38618: ST_TO_ADDR
38619: LD_VAR 0 11
38623: PUSH
38624: FOR_TO
38625: IFFALSE 38745
// begin for j = 1 to array do
38627: LD_ADDR_VAR 0 7
38631: PUSH
38632: DOUBLE
38633: LD_INT 1
38635: DEC
38636: ST_TO_ADDR
38637: LD_VAR 0 1
38641: PUSH
38642: FOR_TO
38643: IFFALSE 38731
// begin k := j + d ;
38645: LD_ADDR_VAR 0 8
38649: PUSH
38650: LD_VAR 0 7
38654: PUSH
38655: LD_VAR 0 9
38659: PLUS
38660: ST_TO_ADDR
// if k > array then
38661: LD_VAR 0 8
38665: PUSH
38666: LD_VAR 0 1
38670: GREATER
38671: IFFALSE 38681
// k := 1 ;
38673: LD_ADDR_VAR 0 8
38677: PUSH
38678: LD_INT 1
38680: ST_TO_ADDR
// if not k then
38681: LD_VAR 0 8
38685: NOT
38686: IFFALSE 38698
// k := array ;
38688: LD_ADDR_VAR 0 8
38692: PUSH
38693: LD_VAR 0 1
38697: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38698: LD_ADDR_VAR 0 10
38702: PUSH
38703: LD_VAR 0 10
38707: PPUSH
38708: LD_VAR 0 8
38712: PPUSH
38713: LD_VAR 0 1
38717: PUSH
38718: LD_VAR 0 7
38722: ARRAY
38723: PPUSH
38724: CALL_OW 1
38728: ST_TO_ADDR
// end ;
38729: GO 38642
38731: POP
38732: POP
// array := tmp ;
38733: LD_ADDR_VAR 0 1
38737: PUSH
38738: LD_VAR 0 10
38742: ST_TO_ADDR
// end ;
38743: GO 38624
38745: POP
38746: POP
// result := array ;
38747: LD_ADDR_VAR 0 5
38751: PUSH
38752: LD_VAR 0 1
38756: ST_TO_ADDR
// end ;
38757: LD_VAR 0 5
38761: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38762: LD_INT 0
38764: PPUSH
38765: PPUSH
// result := 0 ;
38766: LD_ADDR_VAR 0 3
38770: PUSH
38771: LD_INT 0
38773: ST_TO_ADDR
// if not array or not value in array then
38774: LD_VAR 0 1
38778: NOT
38779: IFTRUE 38794
38781: PUSH
38782: LD_VAR 0 2
38786: PUSH
38787: LD_VAR 0 1
38791: IN
38792: NOT
38793: OR
38794: IFFALSE 38798
// exit ;
38796: GO 38852
// for i = 1 to array do
38798: LD_ADDR_VAR 0 4
38802: PUSH
38803: DOUBLE
38804: LD_INT 1
38806: DEC
38807: ST_TO_ADDR
38808: LD_VAR 0 1
38812: PUSH
38813: FOR_TO
38814: IFFALSE 38850
// if value = array [ i ] then
38816: LD_VAR 0 2
38820: PUSH
38821: LD_VAR 0 1
38825: PUSH
38826: LD_VAR 0 4
38830: ARRAY
38831: EQUAL
38832: IFFALSE 38848
// begin result := i ;
38834: LD_ADDR_VAR 0 3
38838: PUSH
38839: LD_VAR 0 4
38843: ST_TO_ADDR
// exit ;
38844: POP
38845: POP
38846: GO 38852
// end ;
38848: GO 38813
38850: POP
38851: POP
// end ;
38852: LD_VAR 0 3
38856: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38857: LD_INT 0
38859: PPUSH
// vc_chassis := chassis ;
38860: LD_ADDR_OWVAR 37
38864: PUSH
38865: LD_VAR 0 1
38869: ST_TO_ADDR
// vc_engine := engine ;
38870: LD_ADDR_OWVAR 39
38874: PUSH
38875: LD_VAR 0 2
38879: ST_TO_ADDR
// vc_control := control ;
38880: LD_ADDR_OWVAR 38
38884: PUSH
38885: LD_VAR 0 3
38889: ST_TO_ADDR
// vc_weapon := weapon ;
38890: LD_ADDR_OWVAR 40
38894: PUSH
38895: LD_VAR 0 4
38899: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38900: LD_ADDR_OWVAR 41
38904: PUSH
38905: LD_VAR 0 5
38909: ST_TO_ADDR
// end ;
38910: LD_VAR 0 6
38914: RET
// export function WantPlant ( unit ) ; var task ; begin
38915: LD_INT 0
38917: PPUSH
38918: PPUSH
// result := false ;
38919: LD_ADDR_VAR 0 2
38923: PUSH
38924: LD_INT 0
38926: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: CALL_OW 437
38941: ST_TO_ADDR
// if task then
38942: LD_VAR 0 3
38946: IFFALSE 38974
// if task [ 1 ] [ 1 ] = p then
38948: LD_VAR 0 3
38952: PUSH
38953: LD_INT 1
38955: ARRAY
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PUSH
38961: LD_STRING p
38963: EQUAL
38964: IFFALSE 38974
// result := true ;
38966: LD_ADDR_VAR 0 2
38970: PUSH
38971: LD_INT 1
38973: ST_TO_ADDR
// end ;
38974: LD_VAR 0 2
38978: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38979: LD_INT 0
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
// if pos < 1 then
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 1
38992: LESS
38993: IFFALSE 38997
// exit ;
38995: GO 39300
// if pos = 1 then
38997: LD_VAR 0 2
39001: PUSH
39002: LD_INT 1
39004: EQUAL
39005: IFFALSE 39038
// result := Replace ( arr , pos [ 1 ] , value ) else
39007: LD_ADDR_VAR 0 4
39011: PUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: LD_VAR 0 2
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: PPUSH
39026: LD_VAR 0 3
39030: PPUSH
39031: CALL_OW 1
39035: ST_TO_ADDR
39036: GO 39300
// begin tmp := arr ;
39038: LD_ADDR_VAR 0 6
39042: PUSH
39043: LD_VAR 0 1
39047: ST_TO_ADDR
// s_arr := [ tmp ] ;
39048: LD_ADDR_VAR 0 7
39052: PUSH
39053: LD_VAR 0 6
39057: PUSH
39058: EMPTY
39059: LIST
39060: ST_TO_ADDR
// for i = 1 to pos - 1 do
39061: LD_ADDR_VAR 0 5
39065: PUSH
39066: DOUBLE
39067: LD_INT 1
39069: DEC
39070: ST_TO_ADDR
39071: LD_VAR 0 2
39075: PUSH
39076: LD_INT 1
39078: MINUS
39079: PUSH
39080: FOR_TO
39081: IFFALSE 39126
// begin tmp := tmp [ pos [ i ] ] ;
39083: LD_ADDR_VAR 0 6
39087: PUSH
39088: LD_VAR 0 6
39092: PUSH
39093: LD_VAR 0 2
39097: PUSH
39098: LD_VAR 0 5
39102: ARRAY
39103: ARRAY
39104: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39105: LD_ADDR_VAR 0 7
39109: PUSH
39110: LD_VAR 0 7
39114: PUSH
39115: LD_VAR 0 6
39119: PUSH
39120: EMPTY
39121: LIST
39122: ADD
39123: ST_TO_ADDR
// end ;
39124: GO 39080
39126: POP
39127: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39128: LD_ADDR_VAR 0 6
39132: PUSH
39133: LD_VAR 0 6
39137: PPUSH
39138: LD_VAR 0 2
39142: PUSH
39143: LD_VAR 0 2
39147: ARRAY
39148: PPUSH
39149: LD_VAR 0 3
39153: PPUSH
39154: CALL_OW 1
39158: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39159: LD_ADDR_VAR 0 7
39163: PUSH
39164: LD_VAR 0 7
39168: PPUSH
39169: LD_VAR 0 7
39173: PPUSH
39174: LD_VAR 0 6
39178: PPUSH
39179: CALL_OW 1
39183: ST_TO_ADDR
// for i = s_arr downto 2 do
39184: LD_ADDR_VAR 0 5
39188: PUSH
39189: DOUBLE
39190: LD_VAR 0 7
39194: INC
39195: ST_TO_ADDR
39196: LD_INT 2
39198: PUSH
39199: FOR_DOWNTO
39200: IFFALSE 39284
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39202: LD_ADDR_VAR 0 6
39206: PUSH
39207: LD_VAR 0 7
39211: PUSH
39212: LD_VAR 0 5
39216: PUSH
39217: LD_INT 1
39219: MINUS
39220: ARRAY
39221: PPUSH
39222: LD_VAR 0 2
39226: PUSH
39227: LD_VAR 0 5
39231: PUSH
39232: LD_INT 1
39234: MINUS
39235: ARRAY
39236: PPUSH
39237: LD_VAR 0 7
39241: PUSH
39242: LD_VAR 0 5
39246: ARRAY
39247: PPUSH
39248: CALL_OW 1
39252: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39253: LD_ADDR_VAR 0 7
39257: PUSH
39258: LD_VAR 0 7
39262: PPUSH
39263: LD_VAR 0 5
39267: PUSH
39268: LD_INT 1
39270: MINUS
39271: PPUSH
39272: LD_VAR 0 6
39276: PPUSH
39277: CALL_OW 1
39281: ST_TO_ADDR
// end ;
39282: GO 39199
39284: POP
39285: POP
// result := s_arr [ 1 ] ;
39286: LD_ADDR_VAR 0 4
39290: PUSH
39291: LD_VAR 0 7
39295: PUSH
39296: LD_INT 1
39298: ARRAY
39299: ST_TO_ADDR
// end ; end ;
39300: LD_VAR 0 4
39304: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39305: LD_INT 0
39307: PPUSH
39308: PPUSH
// if not list then
39309: LD_VAR 0 1
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 39409
// i := list [ pos1 ] ;
39318: LD_ADDR_VAR 0 5
39322: PUSH
39323: LD_VAR 0 1
39327: PUSH
39328: LD_VAR 0 2
39332: ARRAY
39333: ST_TO_ADDR
// if not i then
39334: LD_VAR 0 5
39338: NOT
39339: IFFALSE 39343
// exit ;
39341: GO 39409
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39343: LD_ADDR_VAR 0 1
39347: PUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: LD_VAR 0 2
39357: PPUSH
39358: LD_VAR 0 1
39362: PUSH
39363: LD_VAR 0 3
39367: ARRAY
39368: PPUSH
39369: CALL_OW 1
39373: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39374: LD_ADDR_VAR 0 1
39378: PUSH
39379: LD_VAR 0 1
39383: PPUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: LD_VAR 0 5
39393: PPUSH
39394: CALL_OW 1
39398: ST_TO_ADDR
// result := list ;
39399: LD_ADDR_VAR 0 4
39403: PUSH
39404: LD_VAR 0 1
39408: ST_TO_ADDR
// end ;
39409: LD_VAR 0 4
39413: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39414: LD_INT 0
39416: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39417: LD_ADDR_VAR 0 5
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 250
39431: PPUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 251
39441: PPUSH
39442: LD_VAR 0 2
39446: PPUSH
39447: LD_VAR 0 3
39451: PPUSH
39452: LD_VAR 0 4
39456: PPUSH
39457: CALL 39839 0 5
39461: ST_TO_ADDR
// end ;
39462: LD_VAR 0 5
39466: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39467: LD_INT 0
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
// if not list or not unit then
39473: LD_VAR 0 2
39477: NOT
39478: IFTRUE 39487
39480: PUSH
39481: LD_VAR 0 1
39485: NOT
39486: OR
39487: IFFALSE 39491
// exit ;
39489: GO 39834
// result := [ ] ;
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: EMPTY
39497: ST_TO_ADDR
// for i in list do
39498: LD_ADDR_VAR 0 6
39502: PUSH
39503: LD_VAR 0 2
39507: PUSH
39508: FOR_IN
39509: IFFALSE 39727
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39511: LD_ADDR_VAR 0 8
39515: PUSH
39516: LD_VAR 0 1
39520: PPUSH
39521: LD_VAR 0 6
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PPUSH
39530: LD_VAR 0 6
39534: PUSH
39535: LD_INT 2
39537: ARRAY
39538: PPUSH
39539: CALL_OW 297
39543: ST_TO_ADDR
// if not Count ( result ) then
39544: LD_VAR 0 5
39548: PPUSH
39549: CALL 36061 0 1
39553: NOT
39554: IFFALSE 39587
// begin result := Join ( result , [ i , tmp ] ) ;
39556: LD_ADDR_VAR 0 5
39560: PUSH
39561: LD_VAR 0 5
39565: PPUSH
39566: LD_VAR 0 6
39570: PUSH
39571: LD_VAR 0 8
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PPUSH
39580: CALL 72037 0 2
39584: ST_TO_ADDR
// continue ;
39585: GO 39508
// end ; if result [ result ] [ 2 ] <= tmp then
39587: LD_VAR 0 5
39591: PUSH
39592: LD_VAR 0 5
39596: ARRAY
39597: PUSH
39598: LD_INT 2
39600: ARRAY
39601: PUSH
39602: LD_VAR 0 8
39606: LESSEQUAL
39607: IFFALSE 39640
// result := Join ( result , [ i , tmp ] ) else
39609: LD_ADDR_VAR 0 5
39613: PUSH
39614: LD_VAR 0 5
39618: PPUSH
39619: LD_VAR 0 6
39623: PUSH
39624: LD_VAR 0 8
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PPUSH
39633: CALL 72037 0 2
39637: ST_TO_ADDR
39638: GO 39725
// begin for j := 1 to Count ( result ) do
39640: LD_ADDR_VAR 0 7
39644: PUSH
39645: DOUBLE
39646: LD_INT 1
39648: DEC
39649: ST_TO_ADDR
39650: LD_VAR 0 5
39654: PPUSH
39655: CALL 36061 0 1
39659: PUSH
39660: FOR_TO
39661: IFFALSE 39723
// begin if tmp < result [ j ] [ 2 ] then
39663: LD_VAR 0 8
39667: PUSH
39668: LD_VAR 0 5
39672: PUSH
39673: LD_VAR 0 7
39677: ARRAY
39678: PUSH
39679: LD_INT 2
39681: ARRAY
39682: LESS
39683: IFFALSE 39721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39685: LD_ADDR_VAR 0 5
39689: PUSH
39690: LD_VAR 0 5
39694: PPUSH
39695: LD_VAR 0 7
39699: PPUSH
39700: LD_VAR 0 6
39704: PUSH
39705: LD_VAR 0 8
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PPUSH
39714: CALL_OW 2
39718: ST_TO_ADDR
// break ;
39719: GO 39723
// end ; end ;
39721: GO 39660
39723: POP
39724: POP
// end ; end ;
39725: GO 39508
39727: POP
39728: POP
// if result and not asc then
39729: LD_VAR 0 5
39733: IFFALSE 39742
39735: PUSH
39736: LD_VAR 0 3
39740: NOT
39741: AND
39742: IFFALSE 39759
// result := ReverseArray ( result ) ;
39744: LD_ADDR_VAR 0 5
39748: PUSH
39749: LD_VAR 0 5
39753: PPUSH
39754: CALL 67117 0 1
39758: ST_TO_ADDR
// tmp := [ ] ;
39759: LD_ADDR_VAR 0 8
39763: PUSH
39764: EMPTY
39765: ST_TO_ADDR
// if mode then
39766: LD_VAR 0 4
39770: IFFALSE 39834
// begin for i := 1 to result do
39772: LD_ADDR_VAR 0 6
39776: PUSH
39777: DOUBLE
39778: LD_INT 1
39780: DEC
39781: ST_TO_ADDR
39782: LD_VAR 0 5
39786: PUSH
39787: FOR_TO
39788: IFFALSE 39822
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39790: LD_ADDR_VAR 0 8
39794: PUSH
39795: LD_VAR 0 8
39799: PPUSH
39800: LD_VAR 0 5
39804: PUSH
39805: LD_VAR 0 6
39809: ARRAY
39810: PUSH
39811: LD_INT 1
39813: ARRAY
39814: PPUSH
39815: CALL 72037 0 2
39819: ST_TO_ADDR
39820: GO 39787
39822: POP
39823: POP
// result := tmp ;
39824: LD_ADDR_VAR 0 5
39828: PUSH
39829: LD_VAR 0 8
39833: ST_TO_ADDR
// end ; end ;
39834: LD_VAR 0 5
39838: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39839: LD_INT 0
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
// if not list then
39845: LD_VAR 0 3
39849: NOT
39850: IFFALSE 39854
// exit ;
39852: GO 40244
// result := [ ] ;
39854: LD_ADDR_VAR 0 6
39858: PUSH
39859: EMPTY
39860: ST_TO_ADDR
// for i in list do
39861: LD_ADDR_VAR 0 7
39865: PUSH
39866: LD_VAR 0 3
39870: PUSH
39871: FOR_IN
39872: IFFALSE 40074
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39874: LD_ADDR_VAR 0 9
39878: PUSH
39879: LD_VAR 0 7
39883: PPUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: LD_VAR 0 2
39893: PPUSH
39894: CALL_OW 297
39898: ST_TO_ADDR
// if not result then
39899: LD_VAR 0 6
39903: NOT
39904: IFFALSE 39930
// result := [ [ i , tmp ] ] else
39906: LD_ADDR_VAR 0 6
39910: PUSH
39911: LD_VAR 0 7
39915: PUSH
39916: LD_VAR 0 9
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: EMPTY
39926: LIST
39927: ST_TO_ADDR
39928: GO 40072
// begin if result [ result ] [ 2 ] <= tmp then
39930: LD_VAR 0 6
39934: PUSH
39935: LD_VAR 0 6
39939: ARRAY
39940: PUSH
39941: LD_INT 2
39943: ARRAY
39944: PUSH
39945: LD_VAR 0 9
39949: LESSEQUAL
39950: IFFALSE 39992
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39952: LD_ADDR_VAR 0 6
39956: PUSH
39957: LD_VAR 0 6
39961: PPUSH
39962: LD_VAR 0 6
39966: PUSH
39967: LD_INT 1
39969: PLUS
39970: PPUSH
39971: LD_VAR 0 7
39975: PUSH
39976: LD_VAR 0 9
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PPUSH
39985: CALL_OW 2
39989: ST_TO_ADDR
39990: GO 40072
// for j := 1 to result do
39992: LD_ADDR_VAR 0 8
39996: PUSH
39997: DOUBLE
39998: LD_INT 1
40000: DEC
40001: ST_TO_ADDR
40002: LD_VAR 0 6
40006: PUSH
40007: FOR_TO
40008: IFFALSE 40070
// begin if tmp < result [ j ] [ 2 ] then
40010: LD_VAR 0 9
40014: PUSH
40015: LD_VAR 0 6
40019: PUSH
40020: LD_VAR 0 8
40024: ARRAY
40025: PUSH
40026: LD_INT 2
40028: ARRAY
40029: LESS
40030: IFFALSE 40068
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40032: LD_ADDR_VAR 0 6
40036: PUSH
40037: LD_VAR 0 6
40041: PPUSH
40042: LD_VAR 0 8
40046: PPUSH
40047: LD_VAR 0 7
40051: PUSH
40052: LD_VAR 0 9
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PPUSH
40061: CALL_OW 2
40065: ST_TO_ADDR
// break ;
40066: GO 40070
// end ; end ;
40068: GO 40007
40070: POP
40071: POP
// end ; end ;
40072: GO 39871
40074: POP
40075: POP
// if result and not asc then
40076: LD_VAR 0 6
40080: IFFALSE 40089
40082: PUSH
40083: LD_VAR 0 4
40087: NOT
40088: AND
40089: IFFALSE 40164
// begin tmp := result ;
40091: LD_ADDR_VAR 0 9
40095: PUSH
40096: LD_VAR 0 6
40100: ST_TO_ADDR
// for i = tmp downto 1 do
40101: LD_ADDR_VAR 0 7
40105: PUSH
40106: DOUBLE
40107: LD_VAR 0 9
40111: INC
40112: ST_TO_ADDR
40113: LD_INT 1
40115: PUSH
40116: FOR_DOWNTO
40117: IFFALSE 40162
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_VAR 0 6
40128: PPUSH
40129: LD_VAR 0 9
40133: PUSH
40134: LD_VAR 0 7
40138: MINUS
40139: PUSH
40140: LD_INT 1
40142: PLUS
40143: PPUSH
40144: LD_VAR 0 9
40148: PUSH
40149: LD_VAR 0 7
40153: ARRAY
40154: PPUSH
40155: CALL_OW 1
40159: ST_TO_ADDR
40160: GO 40116
40162: POP
40163: POP
// end ; tmp := [ ] ;
40164: LD_ADDR_VAR 0 9
40168: PUSH
40169: EMPTY
40170: ST_TO_ADDR
// if mode then
40171: LD_VAR 0 5
40175: IFFALSE 40244
// begin for i = 1 to result do
40177: LD_ADDR_VAR 0 7
40181: PUSH
40182: DOUBLE
40183: LD_INT 1
40185: DEC
40186: ST_TO_ADDR
40187: LD_VAR 0 6
40191: PUSH
40192: FOR_TO
40193: IFFALSE 40232
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40195: LD_ADDR_VAR 0 9
40199: PUSH
40200: LD_VAR 0 9
40204: PPUSH
40205: LD_VAR 0 7
40209: PPUSH
40210: LD_VAR 0 6
40214: PUSH
40215: LD_VAR 0 7
40219: ARRAY
40220: PUSH
40221: LD_INT 1
40223: ARRAY
40224: PPUSH
40225: CALL_OW 1
40229: ST_TO_ADDR
40230: GO 40192
40232: POP
40233: POP
// result := tmp ;
40234: LD_ADDR_VAR 0 6
40238: PUSH
40239: LD_VAR 0 9
40243: ST_TO_ADDR
// end ; end ;
40244: LD_VAR 0 6
40248: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40249: LD_INT 0
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40257: LD_ADDR_VAR 0 5
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
// if not x or not y then
40279: LD_VAR 0 2
40283: NOT
40284: IFTRUE 40293
40286: PUSH
40287: LD_VAR 0 3
40291: NOT
40292: OR
40293: IFFALSE 40297
// exit ;
40295: GO 41953
// if not range then
40297: LD_VAR 0 4
40301: NOT
40302: IFFALSE 40312
// range := 10 ;
40304: LD_ADDR_VAR 0 4
40308: PUSH
40309: LD_INT 10
40311: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40312: LD_ADDR_VAR 0 8
40316: PUSH
40317: LD_INT 81
40319: PUSH
40320: LD_VAR 0 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 92
40331: PUSH
40332: LD_VAR 0 2
40336: PUSH
40337: LD_VAR 0 3
40341: PUSH
40342: LD_VAR 0 4
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 21
40358: PUSH
40359: LD_INT 3
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 69
40379: ST_TO_ADDR
// if not tmp then
40380: LD_VAR 0 8
40384: NOT
40385: IFFALSE 40389
// exit ;
40387: GO 41953
// for i in tmp do
40389: LD_ADDR_VAR 0 6
40393: PUSH
40394: LD_VAR 0 8
40398: PUSH
40399: FOR_IN
40400: IFFALSE 41928
// begin points := [ 0 , 0 , 0 ] ;
40402: LD_ADDR_VAR 0 9
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// bpoints := 1 ;
40421: LD_ADDR_VAR 0 10
40425: PUSH
40426: LD_INT 1
40428: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40429: LD_VAR 0 6
40433: PPUSH
40434: CALL_OW 247
40438: PUSH
40439: LD_INT 1
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40447
40445: GO 41029
40447: POP
// begin if GetClass ( i ) = 1 then
40448: LD_VAR 0 6
40452: PPUSH
40453: CALL_OW 257
40457: PUSH
40458: LD_INT 1
40460: EQUAL
40461: IFFALSE 40482
// points := [ 10 , 5 , 3 ] ;
40463: LD_ADDR_VAR 0 9
40467: PUSH
40468: LD_INT 10
40470: PUSH
40471: LD_INT 5
40473: PUSH
40474: LD_INT 3
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40482: LD_VAR 0 6
40486: PPUSH
40487: CALL_OW 257
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: LD_INT 4
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: IN
40506: IFFALSE 40527
// points := [ 3 , 2 , 1 ] ;
40508: LD_ADDR_VAR 0 9
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40527: LD_VAR 0 6
40531: PPUSH
40532: CALL_OW 257
40536: PUSH
40537: LD_INT 5
40539: EQUAL
40540: IFFALSE 40561
// points := [ 130 , 5 , 2 ] ;
40542: LD_ADDR_VAR 0 9
40546: PUSH
40547: LD_INT 130
40549: PUSH
40550: LD_INT 5
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40561: LD_VAR 0 6
40565: PPUSH
40566: CALL_OW 257
40570: PUSH
40571: LD_INT 8
40573: EQUAL
40574: IFFALSE 40595
// points := [ 35 , 35 , 30 ] ;
40576: LD_ADDR_VAR 0 9
40580: PUSH
40581: LD_INT 35
40583: PUSH
40584: LD_INT 35
40586: PUSH
40587: LD_INT 30
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40595: LD_VAR 0 6
40599: PPUSH
40600: CALL_OW 257
40604: PUSH
40605: LD_INT 9
40607: EQUAL
40608: IFFALSE 40629
// points := [ 20 , 55 , 40 ] ;
40610: LD_ADDR_VAR 0 9
40614: PUSH
40615: LD_INT 20
40617: PUSH
40618: LD_INT 55
40620: PUSH
40621: LD_INT 40
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40629: LD_VAR 0 6
40633: PPUSH
40634: CALL_OW 257
40638: PUSH
40639: LD_INT 12
40641: PUSH
40642: LD_INT 16
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: IN
40649: IFFALSE 40670
// points := [ 5 , 3 , 2 ] ;
40651: LD_ADDR_VAR 0 9
40655: PUSH
40656: LD_INT 5
40658: PUSH
40659: LD_INT 3
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40670: LD_VAR 0 6
40674: PPUSH
40675: CALL_OW 257
40679: PUSH
40680: LD_INT 17
40682: EQUAL
40683: IFFALSE 40704
// points := [ 100 , 50 , 75 ] ;
40685: LD_ADDR_VAR 0 9
40689: PUSH
40690: LD_INT 100
40692: PUSH
40693: LD_INT 50
40695: PUSH
40696: LD_INT 75
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40704: LD_VAR 0 6
40708: PPUSH
40709: CALL_OW 257
40713: PUSH
40714: LD_INT 15
40716: EQUAL
40717: IFFALSE 40738
// points := [ 10 , 5 , 3 ] ;
40719: LD_ADDR_VAR 0 9
40723: PUSH
40724: LD_INT 10
40726: PUSH
40727: LD_INT 5
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40738: LD_VAR 0 6
40742: PPUSH
40743: CALL_OW 257
40747: PUSH
40748: LD_INT 14
40750: EQUAL
40751: IFFALSE 40772
// points := [ 10 , 0 , 0 ] ;
40753: LD_ADDR_VAR 0 9
40757: PUSH
40758: LD_INT 10
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40772: LD_VAR 0 6
40776: PPUSH
40777: CALL_OW 257
40781: PUSH
40782: LD_INT 11
40784: EQUAL
40785: IFFALSE 40806
// points := [ 30 , 10 , 5 ] ;
40787: LD_ADDR_VAR 0 9
40791: PUSH
40792: LD_INT 30
40794: PUSH
40795: LD_INT 10
40797: PUSH
40798: LD_INT 5
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: LIST
40805: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40806: LD_VAR 0 1
40810: PPUSH
40811: LD_INT 5
40813: PPUSH
40814: CALL_OW 321
40818: PUSH
40819: LD_INT 2
40821: EQUAL
40822: IFFALSE 40839
// bpoints := bpoints * 1.8 ;
40824: LD_ADDR_VAR 0 10
40828: PUSH
40829: LD_VAR 0 10
40833: PUSH
40834: LD_REAL  1.80000000000000E+0000
40837: MUL
40838: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40839: LD_VAR 0 6
40843: PPUSH
40844: CALL_OW 257
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: LD_INT 3
40857: PUSH
40858: LD_INT 4
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: IN
40867: IFFALSE 40887
40869: PUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: LD_INT 51
40877: PPUSH
40878: CALL_OW 321
40882: PUSH
40883: LD_INT 2
40885: EQUAL
40886: AND
40887: IFFALSE 40904
// bpoints := bpoints * 1.2 ;
40889: LD_ADDR_VAR 0 10
40893: PUSH
40894: LD_VAR 0 10
40898: PUSH
40899: LD_REAL  1.20000000000000E+0000
40902: MUL
40903: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40904: LD_VAR 0 6
40908: PPUSH
40909: CALL_OW 257
40913: PUSH
40914: LD_INT 5
40916: PUSH
40917: LD_INT 7
40919: PUSH
40920: LD_INT 9
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: IN
40928: IFFALSE 40948
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: LD_INT 52
40938: PPUSH
40939: CALL_OW 321
40943: PUSH
40944: LD_INT 2
40946: EQUAL
40947: AND
40948: IFFALSE 40965
// bpoints := bpoints * 1.5 ;
40950: LD_ADDR_VAR 0 10
40954: PUSH
40955: LD_VAR 0 10
40959: PUSH
40960: LD_REAL  1.50000000000000E+0000
40963: MUL
40964: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_INT 66
40972: PPUSH
40973: CALL_OW 321
40977: PUSH
40978: LD_INT 2
40980: EQUAL
40981: IFFALSE 40998
// bpoints := bpoints * 1.1 ;
40983: LD_ADDR_VAR 0 10
40987: PUSH
40988: LD_VAR 0 10
40992: PUSH
40993: LD_REAL  1.10000000000000E+0000
40996: MUL
40997: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40998: LD_ADDR_VAR 0 10
41002: PUSH
41003: LD_VAR 0 10
41007: PUSH
41008: LD_VAR 0 6
41012: PPUSH
41013: LD_INT 1
41015: PPUSH
41016: CALL_OW 259
41020: PUSH
41021: LD_REAL  1.15000000000000E+0000
41024: MUL
41025: MUL
41026: ST_TO_ADDR
// end ; unit_vehicle :
41027: GO 41857
41029: LD_INT 2
41031: DOUBLE
41032: EQUAL
41033: IFTRUE 41037
41035: GO 41845
41037: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41038: LD_VAR 0 6
41042: PPUSH
41043: CALL_OW 264
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 42
41053: PUSH
41054: LD_INT 24
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: IN
41062: IFFALSE 41083
// points := [ 25 , 5 , 3 ] ;
41064: LD_ADDR_VAR 0 9
41068: PUSH
41069: LD_INT 25
41071: PUSH
41072: LD_INT 5
41074: PUSH
41075: LD_INT 3
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41083: LD_VAR 0 6
41087: PPUSH
41088: CALL_OW 264
41092: PUSH
41093: LD_INT 4
41095: PUSH
41096: LD_INT 43
41098: PUSH
41099: LD_INT 25
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: IN
41107: IFFALSE 41128
// points := [ 40 , 15 , 5 ] ;
41109: LD_ADDR_VAR 0 9
41113: PUSH
41114: LD_INT 40
41116: PUSH
41117: LD_INT 15
41119: PUSH
41120: LD_INT 5
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: LIST
41127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41128: LD_VAR 0 6
41132: PPUSH
41133: CALL_OW 264
41137: PUSH
41138: LD_INT 3
41140: PUSH
41141: LD_INT 23
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: IN
41148: IFFALSE 41169
// points := [ 7 , 25 , 8 ] ;
41150: LD_ADDR_VAR 0 9
41154: PUSH
41155: LD_INT 7
41157: PUSH
41158: LD_INT 25
41160: PUSH
41161: LD_INT 8
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41169: LD_VAR 0 6
41173: PPUSH
41174: CALL_OW 264
41178: PUSH
41179: LD_INT 5
41181: PUSH
41182: LD_INT 27
41184: PUSH
41185: LD_INT 44
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: IN
41193: IFFALSE 41214
// points := [ 14 , 50 , 16 ] ;
41195: LD_ADDR_VAR 0 9
41199: PUSH
41200: LD_INT 14
41202: PUSH
41203: LD_INT 50
41205: PUSH
41206: LD_INT 16
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41214: LD_VAR 0 6
41218: PPUSH
41219: CALL_OW 264
41223: PUSH
41224: LD_INT 6
41226: PUSH
41227: LD_INT 46
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: IN
41234: IFFALSE 41255
// points := [ 32 , 120 , 70 ] ;
41236: LD_ADDR_VAR 0 9
41240: PUSH
41241: LD_INT 32
41243: PUSH
41244: LD_INT 120
41246: PUSH
41247: LD_INT 70
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41255: LD_VAR 0 6
41259: PPUSH
41260: CALL_OW 264
41264: PUSH
41265: LD_INT 7
41267: PUSH
41268: LD_INT 28
41270: PUSH
41271: LD_INT 45
41273: PUSH
41274: LD_INT 92
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: IN
41283: IFFALSE 41304
// points := [ 35 , 20 , 45 ] ;
41285: LD_ADDR_VAR 0 9
41289: PUSH
41290: LD_INT 35
41292: PUSH
41293: LD_INT 20
41295: PUSH
41296: LD_INT 45
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: LIST
41303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41304: LD_VAR 0 6
41308: PPUSH
41309: CALL_OW 264
41313: PUSH
41314: LD_INT 47
41316: PUSH
41317: EMPTY
41318: LIST
41319: IN
41320: IFFALSE 41341
// points := [ 67 , 45 , 75 ] ;
41322: LD_ADDR_VAR 0 9
41326: PUSH
41327: LD_INT 67
41329: PUSH
41330: LD_INT 45
41332: PUSH
41333: LD_INT 75
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41341: LD_VAR 0 6
41345: PPUSH
41346: CALL_OW 264
41350: PUSH
41351: LD_INT 26
41353: PUSH
41354: EMPTY
41355: LIST
41356: IN
41357: IFFALSE 41378
// points := [ 120 , 30 , 80 ] ;
41359: LD_ADDR_VAR 0 9
41363: PUSH
41364: LD_INT 120
41366: PUSH
41367: LD_INT 30
41369: PUSH
41370: LD_INT 80
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41378: LD_VAR 0 6
41382: PPUSH
41383: CALL_OW 264
41387: PUSH
41388: LD_INT 22
41390: PUSH
41391: EMPTY
41392: LIST
41393: IN
41394: IFFALSE 41415
// points := [ 40 , 1 , 1 ] ;
41396: LD_ADDR_VAR 0 9
41400: PUSH
41401: LD_INT 40
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41415: LD_VAR 0 6
41419: PPUSH
41420: CALL_OW 264
41424: PUSH
41425: LD_INT 29
41427: PUSH
41428: EMPTY
41429: LIST
41430: IN
41431: IFFALSE 41452
// points := [ 70 , 200 , 400 ] ;
41433: LD_ADDR_VAR 0 9
41437: PUSH
41438: LD_INT 70
41440: PUSH
41441: LD_INT 200
41443: PUSH
41444: LD_INT 400
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41452: LD_VAR 0 6
41456: PPUSH
41457: CALL_OW 264
41461: PUSH
41462: LD_INT 14
41464: PUSH
41465: LD_INT 53
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: IN
41472: IFFALSE 41493
// points := [ 40 , 10 , 20 ] ;
41474: LD_ADDR_VAR 0 9
41478: PUSH
41479: LD_INT 40
41481: PUSH
41482: LD_INT 10
41484: PUSH
41485: LD_INT 20
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41493: LD_VAR 0 6
41497: PPUSH
41498: CALL_OW 264
41502: PUSH
41503: LD_INT 9
41505: PUSH
41506: EMPTY
41507: LIST
41508: IN
41509: IFFALSE 41530
// points := [ 5 , 70 , 20 ] ;
41511: LD_ADDR_VAR 0 9
41515: PUSH
41516: LD_INT 5
41518: PUSH
41519: LD_INT 70
41521: PUSH
41522: LD_INT 20
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41530: LD_VAR 0 6
41534: PPUSH
41535: CALL_OW 264
41539: PUSH
41540: LD_INT 10
41542: PUSH
41543: EMPTY
41544: LIST
41545: IN
41546: IFFALSE 41567
// points := [ 35 , 110 , 70 ] ;
41548: LD_ADDR_VAR 0 9
41552: PUSH
41553: LD_INT 35
41555: PUSH
41556: LD_INT 110
41558: PUSH
41559: LD_INT 70
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41567: LD_VAR 0 6
41571: PPUSH
41572: CALL_OW 265
41576: PUSH
41577: LD_INT 25
41579: EQUAL
41580: IFFALSE 41601
// points := [ 80 , 65 , 100 ] ;
41582: LD_ADDR_VAR 0 9
41586: PUSH
41587: LD_INT 80
41589: PUSH
41590: LD_INT 65
41592: PUSH
41593: LD_INT 100
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41601: LD_VAR 0 6
41605: PPUSH
41606: CALL_OW 263
41610: PUSH
41611: LD_INT 1
41613: EQUAL
41614: IFFALSE 41649
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41616: LD_ADDR_VAR 0 10
41620: PUSH
41621: LD_VAR 0 10
41625: PUSH
41626: LD_VAR 0 6
41630: PPUSH
41631: CALL_OW 311
41635: PPUSH
41636: LD_INT 3
41638: PPUSH
41639: CALL_OW 259
41643: PUSH
41644: LD_INT 4
41646: MUL
41647: MUL
41648: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41649: LD_VAR 0 6
41653: PPUSH
41654: CALL_OW 263
41658: PUSH
41659: LD_INT 2
41661: EQUAL
41662: IFFALSE 41713
// begin j := IsControledBy ( i ) ;
41664: LD_ADDR_VAR 0 7
41668: PUSH
41669: LD_VAR 0 6
41673: PPUSH
41674: CALL_OW 312
41678: ST_TO_ADDR
// if j then
41679: LD_VAR 0 7
41683: IFFALSE 41713
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41685: LD_ADDR_VAR 0 10
41689: PUSH
41690: LD_VAR 0 10
41694: PUSH
41695: LD_VAR 0 7
41699: PPUSH
41700: LD_INT 3
41702: PPUSH
41703: CALL_OW 259
41707: PUSH
41708: LD_INT 3
41710: MUL
41711: MUL
41712: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41713: LD_VAR 0 6
41717: PPUSH
41718: CALL_OW 264
41722: PUSH
41723: LD_INT 5
41725: PUSH
41726: LD_INT 6
41728: PUSH
41729: LD_INT 46
41731: PUSH
41732: LD_INT 44
41734: PUSH
41735: LD_INT 47
41737: PUSH
41738: LD_INT 45
41740: PUSH
41741: LD_INT 28
41743: PUSH
41744: LD_INT 7
41746: PUSH
41747: LD_INT 27
41749: PUSH
41750: LD_INT 29
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: IN
41765: IFFALSE 41785
41767: PUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: LD_INT 52
41775: PPUSH
41776: CALL_OW 321
41780: PUSH
41781: LD_INT 2
41783: EQUAL
41784: AND
41785: IFFALSE 41802
// bpoints := bpoints * 1.2 ;
41787: LD_ADDR_VAR 0 10
41791: PUSH
41792: LD_VAR 0 10
41796: PUSH
41797: LD_REAL  1.20000000000000E+0000
41800: MUL
41801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41802: LD_VAR 0 6
41806: PPUSH
41807: CALL_OW 264
41811: PUSH
41812: LD_INT 6
41814: PUSH
41815: LD_INT 46
41817: PUSH
41818: LD_INT 47
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: IN
41826: IFFALSE 41843
// bpoints := bpoints * 1.2 ;
41828: LD_ADDR_VAR 0 10
41832: PUSH
41833: LD_VAR 0 10
41837: PUSH
41838: LD_REAL  1.20000000000000E+0000
41841: MUL
41842: ST_TO_ADDR
// end ; unit_building :
41843: GO 41857
41845: LD_INT 3
41847: DOUBLE
41848: EQUAL
41849: IFTRUE 41853
41851: GO 41856
41853: POP
// ; end ;
41854: GO 41857
41856: POP
// for j = 1 to 3 do
41857: LD_ADDR_VAR 0 7
41861: PUSH
41862: DOUBLE
41863: LD_INT 1
41865: DEC
41866: ST_TO_ADDR
41867: LD_INT 3
41869: PUSH
41870: FOR_TO
41871: IFFALSE 41924
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41873: LD_ADDR_VAR 0 5
41877: PUSH
41878: LD_VAR 0 5
41882: PPUSH
41883: LD_VAR 0 7
41887: PPUSH
41888: LD_VAR 0 5
41892: PUSH
41893: LD_VAR 0 7
41897: ARRAY
41898: PUSH
41899: LD_VAR 0 9
41903: PUSH
41904: LD_VAR 0 7
41908: ARRAY
41909: PUSH
41910: LD_VAR 0 10
41914: MUL
41915: PLUS
41916: PPUSH
41917: CALL_OW 1
41921: ST_TO_ADDR
41922: GO 41870
41924: POP
41925: POP
// end ;
41926: GO 40399
41928: POP
41929: POP
// result := Replace ( result , 4 , tmp ) ;
41930: LD_ADDR_VAR 0 5
41934: PUSH
41935: LD_VAR 0 5
41939: PPUSH
41940: LD_INT 4
41942: PPUSH
41943: LD_VAR 0 8
41947: PPUSH
41948: CALL_OW 1
41952: ST_TO_ADDR
// end ;
41953: LD_VAR 0 5
41957: RET
// export function DangerAtRange ( unit , range ) ; begin
41958: LD_INT 0
41960: PPUSH
// if not unit then
41961: LD_VAR 0 1
41965: NOT
41966: IFFALSE 41970
// exit ;
41968: GO 42015
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41970: LD_ADDR_VAR 0 3
41974: PUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 255
41984: PPUSH
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL_OW 250
41994: PPUSH
41995: LD_VAR 0 1
41999: PPUSH
42000: CALL_OW 251
42004: PPUSH
42005: LD_VAR 0 2
42009: PPUSH
42010: CALL 40249 0 4
42014: ST_TO_ADDR
// end ;
42015: LD_VAR 0 3
42019: RET
// export function DangerInArea ( side , area ) ; begin
42020: LD_INT 0
42022: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42023: LD_ADDR_VAR 0 3
42027: PUSH
42028: LD_VAR 0 2
42032: PPUSH
42033: LD_INT 81
42035: PUSH
42036: LD_VAR 0 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PPUSH
42045: CALL_OW 70
42049: ST_TO_ADDR
// end ;
42050: LD_VAR 0 3
42054: RET
// export function IsExtension ( b ) ; begin
42055: LD_INT 0
42057: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42058: LD_ADDR_VAR 0 2
42062: PUSH
42063: LD_VAR 0 1
42067: PUSH
42068: LD_INT 23
42070: PUSH
42071: LD_INT 20
42073: PUSH
42074: LD_INT 22
42076: PUSH
42077: LD_INT 17
42079: PUSH
42080: LD_INT 24
42082: PUSH
42083: LD_INT 21
42085: PUSH
42086: LD_INT 19
42088: PUSH
42089: LD_INT 16
42091: PUSH
42092: LD_INT 25
42094: PUSH
42095: LD_INT 18
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: IN
42110: ST_TO_ADDR
// end ;
42111: LD_VAR 0 2
42115: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42116: LD_INT 0
42118: PPUSH
42119: PPUSH
42120: PPUSH
// result := [ ] ;
42121: LD_ADDR_VAR 0 4
42125: PUSH
42126: EMPTY
42127: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42128: LD_ADDR_VAR 0 5
42132: PUSH
42133: LD_VAR 0 2
42137: PPUSH
42138: LD_INT 21
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PPUSH
42148: CALL_OW 70
42152: ST_TO_ADDR
// if not tmp then
42153: LD_VAR 0 5
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42226
// if checkLink then
42162: LD_VAR 0 3
42166: IFFALSE 42216
// begin for i in tmp do
42168: LD_ADDR_VAR 0 6
42172: PUSH
42173: LD_VAR 0 5
42177: PUSH
42178: FOR_IN
42179: IFFALSE 42214
// if GetBase ( i ) <> base then
42181: LD_VAR 0 6
42185: PPUSH
42186: CALL_OW 274
42190: PUSH
42191: LD_VAR 0 1
42195: NONEQUAL
42196: IFFALSE 42212
// ComLinkToBase ( base , i ) ;
42198: LD_VAR 0 1
42202: PPUSH
42203: LD_VAR 0 6
42207: PPUSH
42208: CALL_OW 169
42212: GO 42178
42214: POP
42215: POP
// end ; result := tmp ;
42216: LD_ADDR_VAR 0 4
42220: PUSH
42221: LD_VAR 0 5
42225: ST_TO_ADDR
// end ;
42226: LD_VAR 0 4
42230: RET
// export function ComComplete ( units , b ) ; var i ; begin
42231: LD_INT 0
42233: PPUSH
42234: PPUSH
// if not units then
42235: LD_VAR 0 1
42239: NOT
42240: IFFALSE 42244
// exit ;
42242: GO 42334
// for i in units do
42244: LD_ADDR_VAR 0 4
42248: PUSH
42249: LD_VAR 0 1
42253: PUSH
42254: FOR_IN
42255: IFFALSE 42332
// if BuildingStatus ( b ) = bs_build then
42257: LD_VAR 0 2
42261: PPUSH
42262: CALL_OW 461
42266: PUSH
42267: LD_INT 1
42269: EQUAL
42270: IFFALSE 42330
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42272: LD_VAR 0 4
42276: PPUSH
42277: LD_STRING h
42279: PUSH
42280: LD_VAR 0 2
42284: PPUSH
42285: CALL_OW 250
42289: PUSH
42290: LD_VAR 0 2
42294: PPUSH
42295: CALL_OW 251
42299: PUSH
42300: LD_VAR 0 2
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: PPUSH
42326: CALL_OW 446
42330: GO 42254
42332: POP
42333: POP
// end ;
42334: LD_VAR 0 3
42338: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42339: LD_INT 0
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42347: LD_VAR 0 1
42351: NOT
42352: IFTRUE 42369
42354: PUSH
42355: LD_VAR 0 1
42359: PPUSH
42360: CALL_OW 263
42364: PUSH
42365: LD_INT 2
42367: NONEQUAL
42368: OR
42369: IFFALSE 42373
// exit ;
42371: GO 42689
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42373: LD_ADDR_VAR 0 6
42377: PUSH
42378: LD_INT 22
42380: PUSH
42381: LD_VAR 0 1
42385: PPUSH
42386: CALL_OW 255
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 30
42400: PUSH
42401: LD_INT 36
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 34
42410: PUSH
42411: LD_INT 31
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PPUSH
42427: CALL_OW 69
42431: ST_TO_ADDR
// if not tmp then
42432: LD_VAR 0 6
42436: NOT
42437: IFFALSE 42441
// exit ;
42439: GO 42689
// result := [ ] ;
42441: LD_ADDR_VAR 0 2
42445: PUSH
42446: EMPTY
42447: ST_TO_ADDR
// for i in tmp do
42448: LD_ADDR_VAR 0 3
42452: PUSH
42453: LD_VAR 0 6
42457: PUSH
42458: FOR_IN
42459: IFFALSE 42530
// begin t := UnitsInside ( i ) ;
42461: LD_ADDR_VAR 0 4
42465: PUSH
42466: LD_VAR 0 3
42470: PPUSH
42471: CALL_OW 313
42475: ST_TO_ADDR
// if t then
42476: LD_VAR 0 4
42480: IFFALSE 42528
// for j in t do
42482: LD_ADDR_VAR 0 7
42486: PUSH
42487: LD_VAR 0 4
42491: PUSH
42492: FOR_IN
42493: IFFALSE 42526
// result := Replace ( result , result + 1 , j ) ;
42495: LD_ADDR_VAR 0 2
42499: PUSH
42500: LD_VAR 0 2
42504: PPUSH
42505: LD_VAR 0 2
42509: PUSH
42510: LD_INT 1
42512: PLUS
42513: PPUSH
42514: LD_VAR 0 7
42518: PPUSH
42519: CALL_OW 1
42523: ST_TO_ADDR
42524: GO 42492
42526: POP
42527: POP
// end ;
42528: GO 42458
42530: POP
42531: POP
// if not result then
42532: LD_VAR 0 2
42536: NOT
42537: IFFALSE 42541
// exit ;
42539: GO 42689
// mech := result [ 1 ] ;
42541: LD_ADDR_VAR 0 5
42545: PUSH
42546: LD_VAR 0 2
42550: PUSH
42551: LD_INT 1
42553: ARRAY
42554: ST_TO_ADDR
// if result > 1 then
42555: LD_VAR 0 2
42559: PUSH
42560: LD_INT 1
42562: GREATER
42563: IFFALSE 42675
// begin for i = 2 to result do
42565: LD_ADDR_VAR 0 3
42569: PUSH
42570: DOUBLE
42571: LD_INT 2
42573: DEC
42574: ST_TO_ADDR
42575: LD_VAR 0 2
42579: PUSH
42580: FOR_TO
42581: IFFALSE 42673
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42583: LD_ADDR_VAR 0 4
42587: PUSH
42588: LD_VAR 0 2
42592: PUSH
42593: LD_VAR 0 3
42597: ARRAY
42598: PPUSH
42599: LD_INT 3
42601: PPUSH
42602: CALL_OW 259
42606: PUSH
42607: LD_VAR 0 2
42611: PUSH
42612: LD_VAR 0 3
42616: ARRAY
42617: PPUSH
42618: CALL_OW 432
42622: MINUS
42623: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42624: LD_VAR 0 4
42628: PUSH
42629: LD_VAR 0 5
42633: PPUSH
42634: LD_INT 3
42636: PPUSH
42637: CALL_OW 259
42641: PUSH
42642: LD_VAR 0 5
42646: PPUSH
42647: CALL_OW 432
42651: MINUS
42652: GREATEREQUAL
42653: IFFALSE 42671
// mech := result [ i ] ;
42655: LD_ADDR_VAR 0 5
42659: PUSH
42660: LD_VAR 0 2
42664: PUSH
42665: LD_VAR 0 3
42669: ARRAY
42670: ST_TO_ADDR
// end ;
42671: GO 42580
42673: POP
42674: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42675: LD_VAR 0 1
42679: PPUSH
42680: LD_VAR 0 5
42684: PPUSH
42685: CALL_OW 135
// end ;
42689: LD_VAR 0 2
42693: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42694: LD_INT 0
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
42703: PPUSH
42704: PPUSH
42705: PPUSH
42706: PPUSH
42707: PPUSH
42708: PPUSH
// result := [ ] ;
42709: LD_ADDR_VAR 0 7
42713: PUSH
42714: EMPTY
42715: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 266
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: IN
42736: NOT
42737: IFFALSE 42741
// exit ;
42739: GO 44381
// if name then
42741: LD_VAR 0 3
42745: IFFALSE 42761
// SetBName ( base_dep , name ) ;
42747: LD_VAR 0 1
42751: PPUSH
42752: LD_VAR 0 3
42756: PPUSH
42757: CALL_OW 500
// base := GetBase ( base_dep ) ;
42761: LD_ADDR_VAR 0 15
42765: PUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: CALL_OW 274
42775: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42776: LD_ADDR_VAR 0 16
42780: PUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: CALL_OW 255
42790: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42791: LD_ADDR_VAR 0 17
42795: PUSH
42796: LD_VAR 0 1
42800: PPUSH
42801: CALL_OW 248
42805: ST_TO_ADDR
// if sources then
42806: LD_VAR 0 5
42810: IFFALSE 42857
// for i = 1 to 3 do
42812: LD_ADDR_VAR 0 8
42816: PUSH
42817: DOUBLE
42818: LD_INT 1
42820: DEC
42821: ST_TO_ADDR
42822: LD_INT 3
42824: PUSH
42825: FOR_TO
42826: IFFALSE 42855
// AddResourceType ( base , i , sources [ i ] ) ;
42828: LD_VAR 0 15
42832: PPUSH
42833: LD_VAR 0 8
42837: PPUSH
42838: LD_VAR 0 5
42842: PUSH
42843: LD_VAR 0 8
42847: ARRAY
42848: PPUSH
42849: CALL_OW 276
42853: GO 42825
42855: POP
42856: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42857: LD_ADDR_VAR 0 18
42861: PUSH
42862: LD_VAR 0 15
42866: PPUSH
42867: LD_VAR 0 2
42871: PPUSH
42872: LD_INT 1
42874: PPUSH
42875: CALL 42116 0 3
42879: ST_TO_ADDR
// InitHc ;
42880: CALL_OW 19
// InitUc ;
42884: CALL_OW 18
// uc_side := side ;
42888: LD_ADDR_OWVAR 20
42892: PUSH
42893: LD_VAR 0 16
42897: ST_TO_ADDR
// uc_nation := nation ;
42898: LD_ADDR_OWVAR 21
42902: PUSH
42903: LD_VAR 0 17
42907: ST_TO_ADDR
// if buildings then
42908: LD_VAR 0 18
42912: IFFALSE 44240
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42914: LD_ADDR_VAR 0 19
42918: PUSH
42919: LD_VAR 0 18
42923: PPUSH
42924: LD_INT 2
42926: PUSH
42927: LD_INT 30
42929: PUSH
42930: LD_INT 29
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 30
42939: PUSH
42940: LD_INT 30
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: PPUSH
42952: CALL_OW 72
42956: ST_TO_ADDR
// if tmp then
42957: LD_VAR 0 19
42961: IFFALSE 43009
// for i in tmp do
42963: LD_ADDR_VAR 0 8
42967: PUSH
42968: LD_VAR 0 19
42972: PUSH
42973: FOR_IN
42974: IFFALSE 43007
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42976: LD_VAR 0 8
42980: PPUSH
42981: CALL_OW 250
42985: PPUSH
42986: LD_VAR 0 8
42990: PPUSH
42991: CALL_OW 251
42995: PPUSH
42996: LD_VAR 0 16
43000: PPUSH
43001: CALL_OW 441
43005: GO 42973
43007: POP
43008: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43009: LD_VAR 0 18
43013: PPUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 30
43019: PUSH
43020: LD_INT 32
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 30
43029: PUSH
43030: LD_INT 33
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: PPUSH
43042: CALL_OW 72
43046: IFFALSE 43134
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43048: LD_ADDR_VAR 0 8
43052: PUSH
43053: LD_VAR 0 18
43057: PPUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 30
43063: PUSH
43064: LD_INT 32
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 30
43073: PUSH
43074: LD_INT 33
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: PPUSH
43086: CALL_OW 72
43090: PUSH
43091: FOR_IN
43092: IFFALSE 43132
// begin if not GetBWeapon ( i ) then
43094: LD_VAR 0 8
43098: PPUSH
43099: CALL_OW 269
43103: NOT
43104: IFFALSE 43130
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43106: LD_VAR 0 8
43110: PPUSH
43111: LD_VAR 0 8
43115: PPUSH
43116: LD_VAR 0 2
43120: PPUSH
43121: CALL 44386 0 2
43125: PPUSH
43126: CALL_OW 431
// end ;
43130: GO 43091
43132: POP
43133: POP
// end ; for i = 1 to personel do
43134: LD_ADDR_VAR 0 8
43138: PUSH
43139: DOUBLE
43140: LD_INT 1
43142: DEC
43143: ST_TO_ADDR
43144: LD_VAR 0 6
43148: PUSH
43149: FOR_TO
43150: IFFALSE 44220
// begin if i > 4 then
43152: LD_VAR 0 8
43156: PUSH
43157: LD_INT 4
43159: GREATER
43160: IFFALSE 43164
// break ;
43162: GO 44220
// case i of 1 :
43164: LD_VAR 0 8
43168: PUSH
43169: LD_INT 1
43171: DOUBLE
43172: EQUAL
43173: IFTRUE 43177
43175: GO 43257
43177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43178: LD_ADDR_VAR 0 12
43182: PUSH
43183: LD_VAR 0 18
43187: PPUSH
43188: LD_INT 22
43190: PUSH
43191: LD_VAR 0 16
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 58
43202: PUSH
43203: EMPTY
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 30
43211: PUSH
43212: LD_INT 32
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 30
43221: PUSH
43222: LD_INT 4
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 30
43231: PUSH
43232: LD_INT 5
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: PPUSH
43250: CALL_OW 72
43254: ST_TO_ADDR
43255: GO 43479
43257: LD_INT 2
43259: DOUBLE
43260: EQUAL
43261: IFTRUE 43265
43263: GO 43327
43265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43266: LD_ADDR_VAR 0 12
43270: PUSH
43271: LD_VAR 0 18
43275: PPUSH
43276: LD_INT 22
43278: PUSH
43279: LD_VAR 0 16
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 30
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 30
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PPUSH
43320: CALL_OW 72
43324: ST_TO_ADDR
43325: GO 43479
43327: LD_INT 3
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43335
43333: GO 43397
43335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43336: LD_ADDR_VAR 0 12
43340: PUSH
43341: LD_VAR 0 18
43345: PPUSH
43346: LD_INT 22
43348: PUSH
43349: LD_VAR 0 16
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 30
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 30
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PPUSH
43390: CALL_OW 72
43394: ST_TO_ADDR
43395: GO 43479
43397: LD_INT 4
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43405
43403: GO 43478
43405: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43406: LD_ADDR_VAR 0 12
43410: PUSH
43411: LD_VAR 0 18
43415: PPUSH
43416: LD_INT 22
43418: PUSH
43419: LD_VAR 0 16
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 30
43433: PUSH
43434: LD_INT 6
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 30
43443: PUSH
43444: LD_INT 7
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 30
43453: PUSH
43454: LD_INT 8
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PPUSH
43471: CALL_OW 72
43475: ST_TO_ADDR
43476: GO 43479
43478: POP
// if i = 1 then
43479: LD_VAR 0 8
43483: PUSH
43484: LD_INT 1
43486: EQUAL
43487: IFFALSE 43598
// begin tmp := [ ] ;
43489: LD_ADDR_VAR 0 19
43493: PUSH
43494: EMPTY
43495: ST_TO_ADDR
// for j in f do
43496: LD_ADDR_VAR 0 9
43500: PUSH
43501: LD_VAR 0 12
43505: PUSH
43506: FOR_IN
43507: IFFALSE 43580
// if GetBType ( j ) = b_bunker then
43509: LD_VAR 0 9
43513: PPUSH
43514: CALL_OW 266
43518: PUSH
43519: LD_INT 32
43521: EQUAL
43522: IFFALSE 43549
// tmp := Insert ( tmp , 1 , j ) else
43524: LD_ADDR_VAR 0 19
43528: PUSH
43529: LD_VAR 0 19
43533: PPUSH
43534: LD_INT 1
43536: PPUSH
43537: LD_VAR 0 9
43541: PPUSH
43542: CALL_OW 2
43546: ST_TO_ADDR
43547: GO 43578
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43549: LD_ADDR_VAR 0 19
43553: PUSH
43554: LD_VAR 0 19
43558: PPUSH
43559: LD_VAR 0 19
43563: PUSH
43564: LD_INT 1
43566: PLUS
43567: PPUSH
43568: LD_VAR 0 9
43572: PPUSH
43573: CALL_OW 2
43577: ST_TO_ADDR
43578: GO 43506
43580: POP
43581: POP
// if tmp then
43582: LD_VAR 0 19
43586: IFFALSE 43598
// f := tmp ;
43588: LD_ADDR_VAR 0 12
43592: PUSH
43593: LD_VAR 0 19
43597: ST_TO_ADDR
// end ; x := personel [ i ] ;
43598: LD_ADDR_VAR 0 13
43602: PUSH
43603: LD_VAR 0 6
43607: PUSH
43608: LD_VAR 0 8
43612: ARRAY
43613: ST_TO_ADDR
// if x = - 1 then
43614: LD_VAR 0 13
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: EQUAL
43623: IFFALSE 43834
// begin for j in f do
43625: LD_ADDR_VAR 0 9
43629: PUSH
43630: LD_VAR 0 12
43634: PUSH
43635: FOR_IN
43636: IFFALSE 43830
// repeat InitHc ;
43638: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43642: LD_VAR 0 9
43646: PPUSH
43647: CALL_OW 266
43651: PUSH
43652: LD_INT 5
43654: EQUAL
43655: IFFALSE 43725
// begin if UnitsInside ( j ) < 3 then
43657: LD_VAR 0 9
43661: PPUSH
43662: CALL_OW 313
43666: PUSH
43667: LD_INT 3
43669: LESS
43670: IFFALSE 43706
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43672: LD_INT 0
43674: PPUSH
43675: LD_INT 5
43677: PUSH
43678: LD_INT 8
43680: PUSH
43681: LD_INT 9
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: PUSH
43689: LD_VAR 0 17
43693: ARRAY
43694: PPUSH
43695: LD_VAR 0 4
43699: PPUSH
43700: CALL_OW 380
43704: GO 43723
// PrepareHuman ( false , i , skill ) ;
43706: LD_INT 0
43708: PPUSH
43709: LD_VAR 0 8
43713: PPUSH
43714: LD_VAR 0 4
43718: PPUSH
43719: CALL_OW 380
// end else
43723: GO 43742
// PrepareHuman ( false , i , skill ) ;
43725: LD_INT 0
43727: PPUSH
43728: LD_VAR 0 8
43732: PPUSH
43733: LD_VAR 0 4
43737: PPUSH
43738: CALL_OW 380
// un := CreateHuman ;
43742: LD_ADDR_VAR 0 14
43746: PUSH
43747: CALL_OW 44
43751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43752: LD_ADDR_VAR 0 7
43756: PUSH
43757: LD_VAR 0 7
43761: PPUSH
43762: LD_INT 1
43764: PPUSH
43765: LD_VAR 0 14
43769: PPUSH
43770: CALL_OW 2
43774: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43775: LD_VAR 0 14
43779: PPUSH
43780: LD_VAR 0 9
43784: PPUSH
43785: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43789: LD_VAR 0 9
43793: PPUSH
43794: CALL_OW 313
43798: PUSH
43799: LD_INT 6
43801: EQUAL
43802: IFTRUE 43826
43804: PUSH
43805: LD_VAR 0 9
43809: PPUSH
43810: CALL_OW 266
43814: PUSH
43815: LD_INT 32
43817: PUSH
43818: LD_INT 31
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: IN
43825: OR
43826: IFFALSE 43638
43828: GO 43635
43830: POP
43831: POP
// end else
43832: GO 44218
// for j = 1 to x do
43834: LD_ADDR_VAR 0 9
43838: PUSH
43839: DOUBLE
43840: LD_INT 1
43842: DEC
43843: ST_TO_ADDR
43844: LD_VAR 0 13
43848: PUSH
43849: FOR_TO
43850: IFFALSE 44216
// begin InitHc ;
43852: CALL_OW 19
// if not f then
43856: LD_VAR 0 12
43860: NOT
43861: IFFALSE 43950
// begin PrepareHuman ( false , i , skill ) ;
43863: LD_INT 0
43865: PPUSH
43866: LD_VAR 0 8
43870: PPUSH
43871: LD_VAR 0 4
43875: PPUSH
43876: CALL_OW 380
// un := CreateHuman ;
43880: LD_ADDR_VAR 0 14
43884: PUSH
43885: CALL_OW 44
43889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43890: LD_ADDR_VAR 0 7
43894: PUSH
43895: LD_VAR 0 7
43899: PPUSH
43900: LD_INT 1
43902: PPUSH
43903: LD_VAR 0 14
43907: PPUSH
43908: CALL_OW 2
43912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43913: LD_VAR 0 14
43917: PPUSH
43918: LD_VAR 0 1
43922: PPUSH
43923: CALL_OW 250
43927: PPUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 251
43937: PPUSH
43938: LD_INT 10
43940: PPUSH
43941: LD_INT 0
43943: PPUSH
43944: CALL_OW 50
// continue ;
43948: GO 43849
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43950: LD_VAR 0 12
43954: PUSH
43955: LD_INT 1
43957: ARRAY
43958: PPUSH
43959: CALL_OW 313
43963: IFFALSE 43991
43965: PUSH
43966: LD_VAR 0 12
43970: PUSH
43971: LD_INT 1
43973: ARRAY
43974: PPUSH
43975: CALL_OW 266
43979: PUSH
43980: LD_INT 32
43982: PUSH
43983: LD_INT 31
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: IN
43990: AND
43991: IFTRUE 44012
43993: PUSH
43994: LD_VAR 0 12
43998: PUSH
43999: LD_INT 1
44001: ARRAY
44002: PPUSH
44003: CALL_OW 313
44007: PUSH
44008: LD_INT 6
44010: EQUAL
44011: OR
44012: IFFALSE 44032
// f := Delete ( f , 1 ) ;
44014: LD_ADDR_VAR 0 12
44018: PUSH
44019: LD_VAR 0 12
44023: PPUSH
44024: LD_INT 1
44026: PPUSH
44027: CALL_OW 3
44031: ST_TO_ADDR
// if not f then
44032: LD_VAR 0 12
44036: NOT
44037: IFFALSE 44055
// begin x := x + 2 ;
44039: LD_ADDR_VAR 0 13
44043: PUSH
44044: LD_VAR 0 13
44048: PUSH
44049: LD_INT 2
44051: PLUS
44052: ST_TO_ADDR
// continue ;
44053: GO 43849
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44055: LD_VAR 0 12
44059: PUSH
44060: LD_INT 1
44062: ARRAY
44063: PPUSH
44064: CALL_OW 266
44068: PUSH
44069: LD_INT 5
44071: EQUAL
44072: IFFALSE 44146
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44074: LD_VAR 0 12
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PPUSH
44083: CALL_OW 313
44087: PUSH
44088: LD_INT 3
44090: LESS
44091: IFFALSE 44127
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44093: LD_INT 0
44095: PPUSH
44096: LD_INT 5
44098: PUSH
44099: LD_INT 8
44101: PUSH
44102: LD_INT 9
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: PUSH
44110: LD_VAR 0 17
44114: ARRAY
44115: PPUSH
44116: LD_VAR 0 4
44120: PPUSH
44121: CALL_OW 380
44125: GO 44144
// PrepareHuman ( false , i , skill ) ;
44127: LD_INT 0
44129: PPUSH
44130: LD_VAR 0 8
44134: PPUSH
44135: LD_VAR 0 4
44139: PPUSH
44140: CALL_OW 380
// end else
44144: GO 44163
// PrepareHuman ( false , i , skill ) ;
44146: LD_INT 0
44148: PPUSH
44149: LD_VAR 0 8
44153: PPUSH
44154: LD_VAR 0 4
44158: PPUSH
44159: CALL_OW 380
// un := CreateHuman ;
44163: LD_ADDR_VAR 0 14
44167: PUSH
44168: CALL_OW 44
44172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44173: LD_ADDR_VAR 0 7
44177: PUSH
44178: LD_VAR 0 7
44182: PPUSH
44183: LD_INT 1
44185: PPUSH
44186: LD_VAR 0 14
44190: PPUSH
44191: CALL_OW 2
44195: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44196: LD_VAR 0 14
44200: PPUSH
44201: LD_VAR 0 12
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: PPUSH
44210: CALL_OW 52
// end ;
44214: GO 43849
44216: POP
44217: POP
// end ;
44218: GO 43149
44220: POP
44221: POP
// result := result ^ buildings ;
44222: LD_ADDR_VAR 0 7
44226: PUSH
44227: LD_VAR 0 7
44231: PUSH
44232: LD_VAR 0 18
44236: ADD
44237: ST_TO_ADDR
// end else
44238: GO 44381
// begin for i = 1 to personel do
44240: LD_ADDR_VAR 0 8
44244: PUSH
44245: DOUBLE
44246: LD_INT 1
44248: DEC
44249: ST_TO_ADDR
44250: LD_VAR 0 6
44254: PUSH
44255: FOR_TO
44256: IFFALSE 44379
// begin if i > 4 then
44258: LD_VAR 0 8
44262: PUSH
44263: LD_INT 4
44265: GREATER
44266: IFFALSE 44270
// break ;
44268: GO 44379
// x := personel [ i ] ;
44270: LD_ADDR_VAR 0 13
44274: PUSH
44275: LD_VAR 0 6
44279: PUSH
44280: LD_VAR 0 8
44284: ARRAY
44285: ST_TO_ADDR
// if x = - 1 then
44286: LD_VAR 0 13
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: EQUAL
44295: IFFALSE 44299
// continue ;
44297: GO 44255
// PrepareHuman ( false , i , skill ) ;
44299: LD_INT 0
44301: PPUSH
44302: LD_VAR 0 8
44306: PPUSH
44307: LD_VAR 0 4
44311: PPUSH
44312: CALL_OW 380
// un := CreateHuman ;
44316: LD_ADDR_VAR 0 14
44320: PUSH
44321: CALL_OW 44
44325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44326: LD_VAR 0 14
44330: PPUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 250
44340: PPUSH
44341: LD_VAR 0 1
44345: PPUSH
44346: CALL_OW 251
44350: PPUSH
44351: LD_INT 10
44353: PPUSH
44354: LD_INT 0
44356: PPUSH
44357: CALL_OW 50
// result := result ^ un ;
44361: LD_ADDR_VAR 0 7
44365: PUSH
44366: LD_VAR 0 7
44370: PUSH
44371: LD_VAR 0 14
44375: ADD
44376: ST_TO_ADDR
// end ;
44377: GO 44255
44379: POP
44380: POP
// end ; end ;
44381: LD_VAR 0 7
44385: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44386: LD_INT 0
44388: PPUSH
44389: PPUSH
44390: PPUSH
44391: PPUSH
44392: PPUSH
44393: PPUSH
44394: PPUSH
44395: PPUSH
44396: PPUSH
44397: PPUSH
44398: PPUSH
44399: PPUSH
44400: PPUSH
44401: PPUSH
44402: PPUSH
44403: PPUSH
// result := false ;
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: LD_INT 0
44411: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44412: LD_VAR 0 1
44416: NOT
44417: IFTRUE 44442
44419: PUSH
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 266
44429: PUSH
44430: LD_INT 32
44432: PUSH
44433: LD_INT 33
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: IN
44440: NOT
44441: OR
44442: IFFALSE 44446
// exit ;
44444: GO 45581
// nat := GetNation ( tower ) ;
44446: LD_ADDR_VAR 0 12
44450: PUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 248
44460: ST_TO_ADDR
// side := GetSide ( tower ) ;
44461: LD_ADDR_VAR 0 16
44465: PUSH
44466: LD_VAR 0 1
44470: PPUSH
44471: CALL_OW 255
44475: ST_TO_ADDR
// x := GetX ( tower ) ;
44476: LD_ADDR_VAR 0 10
44480: PUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: CALL_OW 250
44490: ST_TO_ADDR
// y := GetY ( tower ) ;
44491: LD_ADDR_VAR 0 11
44495: PUSH
44496: LD_VAR 0 1
44500: PPUSH
44501: CALL_OW 251
44505: ST_TO_ADDR
// if not x or not y then
44506: LD_VAR 0 10
44510: NOT
44511: IFTRUE 44520
44513: PUSH
44514: LD_VAR 0 11
44518: NOT
44519: OR
44520: IFFALSE 44524
// exit ;
44522: GO 45581
// weapon := 0 ;
44524: LD_ADDR_VAR 0 18
44528: PUSH
44529: LD_INT 0
44531: ST_TO_ADDR
// fac_list := [ ] ;
44532: LD_ADDR_VAR 0 17
44536: PUSH
44537: EMPTY
44538: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44539: LD_ADDR_VAR 0 6
44543: PUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 274
44553: PPUSH
44554: LD_VAR 0 2
44558: PPUSH
44559: LD_INT 0
44561: PPUSH
44562: CALL 42116 0 3
44566: PPUSH
44567: LD_INT 30
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PPUSH
44577: CALL_OW 72
44581: ST_TO_ADDR
// if not factories then
44582: LD_VAR 0 6
44586: NOT
44587: IFFALSE 44591
// exit ;
44589: GO 45581
// for i in factories do
44591: LD_ADDR_VAR 0 8
44595: PUSH
44596: LD_VAR 0 6
44600: PUSH
44601: FOR_IN
44602: IFFALSE 44627
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44604: LD_ADDR_VAR 0 17
44608: PUSH
44609: LD_VAR 0 17
44613: PUSH
44614: LD_VAR 0 8
44618: PPUSH
44619: CALL_OW 478
44623: UNION
44624: ST_TO_ADDR
44625: GO 44601
44627: POP
44628: POP
// if not fac_list then
44629: LD_VAR 0 17
44633: NOT
44634: IFFALSE 44638
// exit ;
44636: GO 45581
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44638: LD_ADDR_VAR 0 5
44642: PUSH
44643: LD_INT 4
44645: PUSH
44646: LD_INT 5
44648: PUSH
44649: LD_INT 9
44651: PUSH
44652: LD_INT 10
44654: PUSH
44655: LD_INT 6
44657: PUSH
44658: LD_INT 7
44660: PUSH
44661: LD_INT 11
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 27
44675: PUSH
44676: LD_INT 28
44678: PUSH
44679: LD_INT 26
44681: PUSH
44682: LD_INT 30
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 43
44693: PUSH
44694: LD_INT 44
44696: PUSH
44697: LD_INT 46
44699: PUSH
44700: LD_INT 45
44702: PUSH
44703: LD_INT 47
44705: PUSH
44706: LD_INT 49
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: PUSH
44722: LD_VAR 0 12
44726: ARRAY
44727: ST_TO_ADDR
// list := list isect fac_list ;
44728: LD_ADDR_VAR 0 5
44732: PUSH
44733: LD_VAR 0 5
44737: PUSH
44738: LD_VAR 0 17
44742: ISECT
44743: ST_TO_ADDR
// if not list then
44744: LD_VAR 0 5
44748: NOT
44749: IFFALSE 44753
// exit ;
44751: GO 45581
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44753: LD_VAR 0 12
44757: PUSH
44758: LD_INT 3
44760: EQUAL
44761: IFFALSE 44773
44763: PUSH
44764: LD_INT 49
44766: PUSH
44767: LD_VAR 0 5
44771: IN
44772: AND
44773: IFFALSE 44793
44775: PUSH
44776: LD_INT 31
44778: PPUSH
44779: LD_VAR 0 16
44783: PPUSH
44784: CALL_OW 321
44788: PUSH
44789: LD_INT 2
44791: EQUAL
44792: AND
44793: IFFALSE 44853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44795: LD_INT 22
44797: PUSH
44798: LD_VAR 0 16
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 35
44809: PUSH
44810: LD_INT 49
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 91
44819: PUSH
44820: LD_VAR 0 1
44824: PUSH
44825: LD_INT 10
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: PPUSH
44838: CALL_OW 69
44842: NOT
44843: IFFALSE 44853
// weapon := ru_time_lapser ;
44845: LD_ADDR_VAR 0 18
44849: PUSH
44850: LD_INT 49
44852: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44853: LD_VAR 0 12
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: IN
44868: IFFALSE 44892
44870: PUSH
44871: LD_INT 11
44873: PUSH
44874: LD_VAR 0 5
44878: IN
44879: IFTRUE 44891
44881: PUSH
44882: LD_INT 30
44884: PUSH
44885: LD_VAR 0 5
44889: IN
44890: OR
44891: AND
44892: IFFALSE 44912
44894: PUSH
44895: LD_INT 6
44897: PPUSH
44898: LD_VAR 0 16
44902: PPUSH
44903: CALL_OW 321
44907: PUSH
44908: LD_INT 2
44910: EQUAL
44911: AND
44912: IFFALSE 45079
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44914: LD_INT 22
44916: PUSH
44917: LD_VAR 0 16
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 35
44931: PUSH
44932: LD_INT 11
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 35
44941: PUSH
44942: LD_INT 30
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 91
44956: PUSH
44957: LD_VAR 0 1
44961: PUSH
44962: LD_INT 18
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: PPUSH
44975: CALL_OW 69
44979: NOT
44980: IFFALSE 45056
44982: PUSH
44983: LD_INT 22
44985: PUSH
44986: LD_VAR 0 16
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 30
45000: PUSH
45001: LD_INT 32
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 30
45010: PUSH
45011: LD_INT 33
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 91
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_INT 12
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: PPUSH
45047: CALL_OW 69
45051: PUSH
45052: LD_INT 2
45054: GREATER
45055: AND
45056: IFFALSE 45079
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45058: LD_ADDR_VAR 0 18
45062: PUSH
45063: LD_INT 11
45065: PUSH
45066: LD_INT 30
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_VAR 0 12
45077: ARRAY
45078: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45079: LD_VAR 0 18
45083: NOT
45084: IFFALSE 45104
45086: PUSH
45087: LD_INT 40
45089: PPUSH
45090: LD_VAR 0 16
45094: PPUSH
45095: CALL_OW 321
45099: PUSH
45100: LD_INT 2
45102: EQUAL
45103: AND
45104: IFFALSE 45140
45106: PUSH
45107: LD_INT 7
45109: PUSH
45110: LD_VAR 0 5
45114: IN
45115: IFTRUE 45127
45117: PUSH
45118: LD_INT 28
45120: PUSH
45121: LD_VAR 0 5
45125: IN
45126: OR
45127: IFTRUE 45139
45129: PUSH
45130: LD_INT 45
45132: PUSH
45133: LD_VAR 0 5
45137: IN
45138: OR
45139: AND
45140: IFFALSE 45394
// begin hex := GetHexInfo ( x , y ) ;
45142: LD_ADDR_VAR 0 4
45146: PUSH
45147: LD_VAR 0 10
45151: PPUSH
45152: LD_VAR 0 11
45156: PPUSH
45157: CALL_OW 546
45161: ST_TO_ADDR
// if hex [ 1 ] then
45162: LD_VAR 0 4
45166: PUSH
45167: LD_INT 1
45169: ARRAY
45170: IFFALSE 45174
// exit ;
45172: GO 45581
// height := hex [ 2 ] ;
45174: LD_ADDR_VAR 0 15
45178: PUSH
45179: LD_VAR 0 4
45183: PUSH
45184: LD_INT 2
45186: ARRAY
45187: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45188: LD_ADDR_VAR 0 14
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 5
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
// for i in tmp do
45211: LD_ADDR_VAR 0 8
45215: PUSH
45216: LD_VAR 0 14
45220: PUSH
45221: FOR_IN
45222: IFFALSE 45392
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45224: LD_ADDR_VAR 0 9
45228: PUSH
45229: LD_VAR 0 10
45233: PPUSH
45234: LD_VAR 0 8
45238: PPUSH
45239: LD_INT 5
45241: PPUSH
45242: CALL_OW 272
45246: PUSH
45247: LD_VAR 0 11
45251: PPUSH
45252: LD_VAR 0 8
45256: PPUSH
45257: LD_INT 5
45259: PPUSH
45260: CALL_OW 273
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45269: LD_VAR 0 9
45273: PUSH
45274: LD_INT 1
45276: ARRAY
45277: PPUSH
45278: LD_VAR 0 9
45282: PUSH
45283: LD_INT 2
45285: ARRAY
45286: PPUSH
45287: CALL_OW 488
45291: IFFALSE 45390
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45293: LD_ADDR_VAR 0 4
45297: PUSH
45298: LD_VAR 0 9
45302: PUSH
45303: LD_INT 1
45305: ARRAY
45306: PPUSH
45307: LD_VAR 0 9
45311: PUSH
45312: LD_INT 2
45314: ARRAY
45315: PPUSH
45316: CALL_OW 546
45320: ST_TO_ADDR
// if hex [ 1 ] then
45321: LD_VAR 0 4
45325: PUSH
45326: LD_INT 1
45328: ARRAY
45329: IFFALSE 45333
// continue ;
45331: GO 45221
// h := hex [ 2 ] ;
45333: LD_ADDR_VAR 0 13
45337: PUSH
45338: LD_VAR 0 4
45342: PUSH
45343: LD_INT 2
45345: ARRAY
45346: ST_TO_ADDR
// if h + 7 < height then
45347: LD_VAR 0 13
45351: PUSH
45352: LD_INT 7
45354: PLUS
45355: PUSH
45356: LD_VAR 0 15
45360: LESS
45361: IFFALSE 45390
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45363: LD_ADDR_VAR 0 18
45367: PUSH
45368: LD_INT 7
45370: PUSH
45371: LD_INT 28
45373: PUSH
45374: LD_INT 45
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: LIST
45381: PUSH
45382: LD_VAR 0 12
45386: ARRAY
45387: ST_TO_ADDR
// break ;
45388: GO 45392
// end ; end ; end ;
45390: GO 45221
45392: POP
45393: POP
// end ; if not weapon then
45394: LD_VAR 0 18
45398: NOT
45399: IFFALSE 45459
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45401: LD_ADDR_VAR 0 5
45405: PUSH
45406: LD_VAR 0 5
45410: PUSH
45411: LD_INT 11
45413: PUSH
45414: LD_INT 30
45416: PUSH
45417: LD_INT 49
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: DIFF
45425: ST_TO_ADDR
// if not list then
45426: LD_VAR 0 5
45430: NOT
45431: IFFALSE 45435
// exit ;
45433: GO 45581
// weapon := list [ rand ( 1 , list ) ] ;
45435: LD_ADDR_VAR 0 18
45439: PUSH
45440: LD_VAR 0 5
45444: PUSH
45445: LD_INT 1
45447: PPUSH
45448: LD_VAR 0 5
45452: PPUSH
45453: CALL_OW 12
45457: ARRAY
45458: ST_TO_ADDR
// end ; if weapon then
45459: LD_VAR 0 18
45463: IFFALSE 45581
// begin tmp := CostOfWeapon ( weapon ) ;
45465: LD_ADDR_VAR 0 14
45469: PUSH
45470: LD_VAR 0 18
45474: PPUSH
45475: CALL_OW 451
45479: ST_TO_ADDR
// j := GetBase ( tower ) ;
45480: LD_ADDR_VAR 0 9
45484: PUSH
45485: LD_VAR 0 1
45489: PPUSH
45490: CALL_OW 274
45494: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45495: LD_VAR 0 9
45499: PPUSH
45500: LD_INT 1
45502: PPUSH
45503: CALL_OW 275
45507: PUSH
45508: LD_VAR 0 14
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: GREATEREQUAL
45517: IFFALSE 45543
45519: PUSH
45520: LD_VAR 0 9
45524: PPUSH
45525: LD_INT 2
45527: PPUSH
45528: CALL_OW 275
45532: PUSH
45533: LD_VAR 0 14
45537: PUSH
45538: LD_INT 2
45540: ARRAY
45541: GREATEREQUAL
45542: AND
45543: IFFALSE 45569
45545: PUSH
45546: LD_VAR 0 9
45550: PPUSH
45551: LD_INT 3
45553: PPUSH
45554: CALL_OW 275
45558: PUSH
45559: LD_VAR 0 14
45563: PUSH
45564: LD_INT 3
45566: ARRAY
45567: GREATEREQUAL
45568: AND
45569: IFFALSE 45581
// result := weapon ;
45571: LD_ADDR_VAR 0 3
45575: PUSH
45576: LD_VAR 0 18
45580: ST_TO_ADDR
// end ; end ;
45581: LD_VAR 0 3
45585: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45586: LD_INT 0
45588: PPUSH
45589: PPUSH
// result := true ;
45590: LD_ADDR_VAR 0 3
45594: PUSH
45595: LD_INT 1
45597: ST_TO_ADDR
// if array1 = array2 then
45598: LD_VAR 0 1
45602: PUSH
45603: LD_VAR 0 2
45607: EQUAL
45608: IFFALSE 45668
// begin for i = 1 to array1 do
45610: LD_ADDR_VAR 0 4
45614: PUSH
45615: DOUBLE
45616: LD_INT 1
45618: DEC
45619: ST_TO_ADDR
45620: LD_VAR 0 1
45624: PUSH
45625: FOR_TO
45626: IFFALSE 45664
// if array1 [ i ] <> array2 [ i ] then
45628: LD_VAR 0 1
45632: PUSH
45633: LD_VAR 0 4
45637: ARRAY
45638: PUSH
45639: LD_VAR 0 2
45643: PUSH
45644: LD_VAR 0 4
45648: ARRAY
45649: NONEQUAL
45650: IFFALSE 45662
// begin result := false ;
45652: LD_ADDR_VAR 0 3
45656: PUSH
45657: LD_INT 0
45659: ST_TO_ADDR
// break ;
45660: GO 45664
// end ;
45662: GO 45625
45664: POP
45665: POP
// end else
45666: GO 45676
// result := false ;
45668: LD_ADDR_VAR 0 3
45672: PUSH
45673: LD_INT 0
45675: ST_TO_ADDR
// end ;
45676: LD_VAR 0 3
45680: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45681: LD_INT 0
45683: PPUSH
45684: PPUSH
// if not array1 or not array2 then
45685: LD_VAR 0 1
45689: NOT
45690: IFTRUE 45699
45692: PUSH
45693: LD_VAR 0 2
45697: NOT
45698: OR
45699: IFFALSE 45703
// exit ;
45701: GO 45767
// result := true ;
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_INT 1
45710: ST_TO_ADDR
// for i = 1 to array1 do
45711: LD_ADDR_VAR 0 4
45715: PUSH
45716: DOUBLE
45717: LD_INT 1
45719: DEC
45720: ST_TO_ADDR
45721: LD_VAR 0 1
45725: PUSH
45726: FOR_TO
45727: IFFALSE 45765
// if array1 [ i ] <> array2 [ i ] then
45729: LD_VAR 0 1
45733: PUSH
45734: LD_VAR 0 4
45738: ARRAY
45739: PUSH
45740: LD_VAR 0 2
45744: PUSH
45745: LD_VAR 0 4
45749: ARRAY
45750: NONEQUAL
45751: IFFALSE 45763
// begin result := false ;
45753: LD_ADDR_VAR 0 3
45757: PUSH
45758: LD_INT 0
45760: ST_TO_ADDR
// break ;
45761: GO 45765
// end ;
45763: GO 45726
45765: POP
45766: POP
// end ;
45767: LD_VAR 0 3
45771: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45772: LD_INT 0
45774: PPUSH
45775: PPUSH
45776: PPUSH
// pom := GetBase ( fac ) ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_VAR 0 1
45786: PPUSH
45787: CALL_OW 274
45791: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45792: LD_ADDR_VAR 0 4
45796: PUSH
45797: LD_VAR 0 2
45801: PUSH
45802: LD_INT 1
45804: ARRAY
45805: PPUSH
45806: LD_VAR 0 2
45810: PUSH
45811: LD_INT 2
45813: ARRAY
45814: PPUSH
45815: LD_VAR 0 2
45819: PUSH
45820: LD_INT 3
45822: ARRAY
45823: PPUSH
45824: LD_VAR 0 2
45828: PUSH
45829: LD_INT 4
45831: ARRAY
45832: PPUSH
45833: CALL_OW 449
45837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45838: LD_ADDR_VAR 0 3
45842: PUSH
45843: LD_VAR 0 5
45847: PPUSH
45848: LD_INT 1
45850: PPUSH
45851: CALL_OW 275
45855: PUSH
45856: LD_VAR 0 4
45860: PUSH
45861: LD_INT 1
45863: ARRAY
45864: GREATEREQUAL
45865: IFFALSE 45891
45867: PUSH
45868: LD_VAR 0 5
45872: PPUSH
45873: LD_INT 2
45875: PPUSH
45876: CALL_OW 275
45880: PUSH
45881: LD_VAR 0 4
45885: PUSH
45886: LD_INT 2
45888: ARRAY
45889: GREATEREQUAL
45890: AND
45891: IFFALSE 45917
45893: PUSH
45894: LD_VAR 0 5
45898: PPUSH
45899: LD_INT 3
45901: PPUSH
45902: CALL_OW 275
45906: PUSH
45907: LD_VAR 0 4
45911: PUSH
45912: LD_INT 3
45914: ARRAY
45915: GREATEREQUAL
45916: AND
45917: ST_TO_ADDR
// end ;
45918: LD_VAR 0 3
45922: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45923: LD_INT 0
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
// pom := GetBase ( building ) ;
45929: LD_ADDR_VAR 0 3
45933: PUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: CALL_OW 274
45943: ST_TO_ADDR
// if not pom then
45944: LD_VAR 0 3
45948: NOT
45949: IFFALSE 45953
// exit ;
45951: GO 46127
// btype := GetBType ( building ) ;
45953: LD_ADDR_VAR 0 5
45957: PUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: CALL_OW 266
45967: ST_TO_ADDR
// if btype = b_armoury then
45968: LD_VAR 0 5
45972: PUSH
45973: LD_INT 4
45975: EQUAL
45976: IFFALSE 45986
// btype := b_barracks ;
45978: LD_ADDR_VAR 0 5
45982: PUSH
45983: LD_INT 5
45985: ST_TO_ADDR
// if btype = b_depot then
45986: LD_VAR 0 5
45990: PUSH
45991: LD_INT 0
45993: EQUAL
45994: IFFALSE 46004
// btype := b_warehouse ;
45996: LD_ADDR_VAR 0 5
46000: PUSH
46001: LD_INT 1
46003: ST_TO_ADDR
// if btype = b_workshop then
46004: LD_VAR 0 5
46008: PUSH
46009: LD_INT 2
46011: EQUAL
46012: IFFALSE 46022
// btype := b_factory ;
46014: LD_ADDR_VAR 0 5
46018: PUSH
46019: LD_INT 3
46021: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46022: LD_ADDR_VAR 0 4
46026: PUSH
46027: LD_VAR 0 5
46031: PPUSH
46032: LD_VAR 0 1
46036: PPUSH
46037: CALL_OW 248
46041: PPUSH
46042: CALL_OW 450
46046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46047: LD_ADDR_VAR 0 2
46051: PUSH
46052: LD_VAR 0 3
46056: PPUSH
46057: LD_INT 1
46059: PPUSH
46060: CALL_OW 275
46064: PUSH
46065: LD_VAR 0 4
46069: PUSH
46070: LD_INT 1
46072: ARRAY
46073: GREATEREQUAL
46074: IFFALSE 46100
46076: PUSH
46077: LD_VAR 0 3
46081: PPUSH
46082: LD_INT 2
46084: PPUSH
46085: CALL_OW 275
46089: PUSH
46090: LD_VAR 0 4
46094: PUSH
46095: LD_INT 2
46097: ARRAY
46098: GREATEREQUAL
46099: AND
46100: IFFALSE 46126
46102: PUSH
46103: LD_VAR 0 3
46107: PPUSH
46108: LD_INT 3
46110: PPUSH
46111: CALL_OW 275
46115: PUSH
46116: LD_VAR 0 4
46120: PUSH
46121: LD_INT 3
46123: ARRAY
46124: GREATEREQUAL
46125: AND
46126: ST_TO_ADDR
// end ;
46127: LD_VAR 0 2
46131: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46132: LD_INT 0
46134: PPUSH
46135: PPUSH
46136: PPUSH
// pom := GetBase ( building ) ;
46137: LD_ADDR_VAR 0 4
46141: PUSH
46142: LD_VAR 0 1
46146: PPUSH
46147: CALL_OW 274
46151: ST_TO_ADDR
// if not pom then
46152: LD_VAR 0 4
46156: NOT
46157: IFFALSE 46161
// exit ;
46159: GO 46266
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46161: LD_ADDR_VAR 0 5
46165: PUSH
46166: LD_VAR 0 2
46170: PPUSH
46171: LD_VAR 0 1
46175: PPUSH
46176: CALL_OW 248
46180: PPUSH
46181: CALL_OW 450
46185: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46186: LD_ADDR_VAR 0 3
46190: PUSH
46191: LD_VAR 0 4
46195: PPUSH
46196: LD_INT 1
46198: PPUSH
46199: CALL_OW 275
46203: PUSH
46204: LD_VAR 0 5
46208: PUSH
46209: LD_INT 1
46211: ARRAY
46212: GREATEREQUAL
46213: IFFALSE 46239
46215: PUSH
46216: LD_VAR 0 4
46220: PPUSH
46221: LD_INT 2
46223: PPUSH
46224: CALL_OW 275
46228: PUSH
46229: LD_VAR 0 5
46233: PUSH
46234: LD_INT 2
46236: ARRAY
46237: GREATEREQUAL
46238: AND
46239: IFFALSE 46265
46241: PUSH
46242: LD_VAR 0 4
46246: PPUSH
46247: LD_INT 3
46249: PPUSH
46250: CALL_OW 275
46254: PUSH
46255: LD_VAR 0 5
46259: PUSH
46260: LD_INT 3
46262: ARRAY
46263: GREATEREQUAL
46264: AND
46265: ST_TO_ADDR
// end ;
46266: LD_VAR 0 3
46270: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46271: LD_INT 0
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
// result := false ;
46284: LD_ADDR_VAR 0 8
46288: PUSH
46289: LD_INT 0
46291: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46292: LD_VAR 0 5
46296: NOT
46297: IFTRUE 46306
46299: PUSH
46300: LD_VAR 0 1
46304: NOT
46305: OR
46306: IFTRUE 46315
46308: PUSH
46309: LD_VAR 0 2
46313: NOT
46314: OR
46315: IFTRUE 46324
46317: PUSH
46318: LD_VAR 0 3
46322: NOT
46323: OR
46324: IFFALSE 46328
// exit ;
46326: GO 47154
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46328: LD_ADDR_VAR 0 14
46332: PUSH
46333: LD_VAR 0 1
46337: PPUSH
46338: LD_VAR 0 2
46342: PPUSH
46343: LD_VAR 0 3
46347: PPUSH
46348: LD_VAR 0 4
46352: PPUSH
46353: LD_VAR 0 5
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: CALL_OW 248
46366: PPUSH
46367: LD_INT 0
46369: PPUSH
46370: CALL 48435 0 6
46374: ST_TO_ADDR
// if not hexes then
46375: LD_VAR 0 14
46379: NOT
46380: IFFALSE 46384
// exit ;
46382: GO 47154
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46384: LD_ADDR_VAR 0 17
46388: PUSH
46389: LD_VAR 0 5
46393: PPUSH
46394: LD_INT 22
46396: PUSH
46397: LD_VAR 0 13
46401: PPUSH
46402: CALL_OW 255
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 30
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 30
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PPUSH
46443: CALL_OW 72
46447: ST_TO_ADDR
// for i = 1 to hexes do
46448: LD_ADDR_VAR 0 9
46452: PUSH
46453: DOUBLE
46454: LD_INT 1
46456: DEC
46457: ST_TO_ADDR
46458: LD_VAR 0 14
46462: PUSH
46463: FOR_TO
46464: IFFALSE 47152
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46466: LD_ADDR_VAR 0 13
46470: PUSH
46471: LD_VAR 0 14
46475: PUSH
46476: LD_VAR 0 9
46480: ARRAY
46481: PUSH
46482: LD_INT 1
46484: ARRAY
46485: PPUSH
46486: LD_VAR 0 14
46490: PUSH
46491: LD_VAR 0 9
46495: ARRAY
46496: PUSH
46497: LD_INT 2
46499: ARRAY
46500: PPUSH
46501: CALL_OW 428
46505: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46506: LD_VAR 0 14
46510: PUSH
46511: LD_VAR 0 9
46515: ARRAY
46516: PUSH
46517: LD_INT 1
46519: ARRAY
46520: PPUSH
46521: LD_VAR 0 14
46525: PUSH
46526: LD_VAR 0 9
46530: ARRAY
46531: PUSH
46532: LD_INT 2
46534: ARRAY
46535: PPUSH
46536: CALL_OW 351
46540: IFTRUE 46579
46542: PUSH
46543: LD_VAR 0 14
46547: PUSH
46548: LD_VAR 0 9
46552: ARRAY
46553: PUSH
46554: LD_INT 1
46556: ARRAY
46557: PPUSH
46558: LD_VAR 0 14
46562: PUSH
46563: LD_VAR 0 9
46567: ARRAY
46568: PUSH
46569: LD_INT 2
46571: ARRAY
46572: PPUSH
46573: CALL_OW 488
46577: NOT
46578: OR
46579: IFTRUE 46596
46581: PUSH
46582: LD_VAR 0 13
46586: PPUSH
46587: CALL_OW 247
46591: PUSH
46592: LD_INT 3
46594: EQUAL
46595: OR
46596: IFFALSE 46602
// exit ;
46598: POP
46599: POP
46600: GO 47154
// if not tmp then
46602: LD_VAR 0 13
46606: NOT
46607: IFFALSE 46611
// continue ;
46609: GO 46463
// result := true ;
46611: LD_ADDR_VAR 0 8
46615: PUSH
46616: LD_INT 1
46618: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46619: LD_VAR 0 6
46623: IFFALSE 46640
46625: PUSH
46626: LD_VAR 0 13
46630: PPUSH
46631: CALL_OW 247
46635: PUSH
46636: LD_INT 2
46638: EQUAL
46639: AND
46640: IFFALSE 46657
46642: PUSH
46643: LD_VAR 0 13
46647: PPUSH
46648: CALL_OW 263
46652: PUSH
46653: LD_INT 1
46655: EQUAL
46656: AND
46657: IFFALSE 46821
// begin if IsDrivenBy ( tmp ) then
46659: LD_VAR 0 13
46663: PPUSH
46664: CALL_OW 311
46668: IFFALSE 46672
// continue ;
46670: GO 46463
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46672: LD_VAR 0 6
46676: PPUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 60
46682: PUSH
46683: EMPTY
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 55
46695: PUSH
46696: EMPTY
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PPUSH
46707: CALL_OW 72
46711: IFFALSE 46819
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46713: LD_ADDR_VAR 0 18
46717: PUSH
46718: LD_VAR 0 6
46722: PPUSH
46723: LD_INT 3
46725: PUSH
46726: LD_INT 60
46728: PUSH
46729: EMPTY
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: LD_INT 55
46741: PUSH
46742: EMPTY
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PPUSH
46753: CALL_OW 72
46757: PUSH
46758: LD_INT 1
46760: ARRAY
46761: ST_TO_ADDR
// if IsInUnit ( driver ) then
46762: LD_VAR 0 18
46766: PPUSH
46767: CALL_OW 310
46771: IFFALSE 46782
// ComExit ( driver ) ;
46773: LD_VAR 0 18
46777: PPUSH
46778: CALL 72435 0 1
// AddComEnterUnit ( driver , tmp ) ;
46782: LD_VAR 0 18
46786: PPUSH
46787: LD_VAR 0 13
46791: PPUSH
46792: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46796: LD_VAR 0 18
46800: PPUSH
46801: LD_VAR 0 7
46805: PPUSH
46806: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46810: LD_VAR 0 18
46814: PPUSH
46815: CALL_OW 181
// end ; continue ;
46819: GO 46463
// end ; if not cleaners or not tmp in cleaners then
46821: LD_VAR 0 6
46825: NOT
46826: IFTRUE 46841
46828: PUSH
46829: LD_VAR 0 13
46833: PUSH
46834: LD_VAR 0 6
46838: IN
46839: NOT
46840: OR
46841: IFFALSE 47150
// begin if dep then
46843: LD_VAR 0 17
46847: IFFALSE 46983
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46849: LD_ADDR_VAR 0 16
46853: PUSH
46854: LD_VAR 0 17
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: PPUSH
46863: CALL_OW 250
46867: PPUSH
46868: LD_VAR 0 17
46872: PUSH
46873: LD_INT 1
46875: ARRAY
46876: PPUSH
46877: CALL_OW 254
46881: PPUSH
46882: LD_INT 5
46884: PPUSH
46885: CALL_OW 272
46889: PUSH
46890: LD_VAR 0 17
46894: PUSH
46895: LD_INT 1
46897: ARRAY
46898: PPUSH
46899: CALL_OW 251
46903: PPUSH
46904: LD_VAR 0 17
46908: PUSH
46909: LD_INT 1
46911: ARRAY
46912: PPUSH
46913: CALL_OW 254
46917: PPUSH
46918: LD_INT 5
46920: PPUSH
46921: CALL_OW 273
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46930: LD_VAR 0 16
46934: PUSH
46935: LD_INT 1
46937: ARRAY
46938: PPUSH
46939: LD_VAR 0 16
46943: PUSH
46944: LD_INT 2
46946: ARRAY
46947: PPUSH
46948: CALL_OW 488
46952: IFFALSE 46983
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46954: LD_VAR 0 13
46958: PPUSH
46959: LD_VAR 0 16
46963: PUSH
46964: LD_INT 1
46966: ARRAY
46967: PPUSH
46968: LD_VAR 0 16
46972: PUSH
46973: LD_INT 2
46975: ARRAY
46976: PPUSH
46977: CALL_OW 111
// continue ;
46981: GO 46463
// end ; end ; r := GetDir ( tmp ) ;
46983: LD_ADDR_VAR 0 15
46987: PUSH
46988: LD_VAR 0 13
46992: PPUSH
46993: CALL_OW 254
46997: ST_TO_ADDR
// if r = 5 then
46998: LD_VAR 0 15
47002: PUSH
47003: LD_INT 5
47005: EQUAL
47006: IFFALSE 47016
// r := 0 ;
47008: LD_ADDR_VAR 0 15
47012: PUSH
47013: LD_INT 0
47015: ST_TO_ADDR
// for j = r to 5 do
47016: LD_ADDR_VAR 0 10
47020: PUSH
47021: DOUBLE
47022: LD_VAR 0 15
47026: DEC
47027: ST_TO_ADDR
47028: LD_INT 5
47030: PUSH
47031: FOR_TO
47032: IFFALSE 47148
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47034: LD_ADDR_VAR 0 11
47038: PUSH
47039: LD_VAR 0 13
47043: PPUSH
47044: CALL_OW 250
47048: PPUSH
47049: LD_VAR 0 10
47053: PPUSH
47054: LD_INT 2
47056: PPUSH
47057: CALL_OW 272
47061: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47062: LD_ADDR_VAR 0 12
47066: PUSH
47067: LD_VAR 0 13
47071: PPUSH
47072: CALL_OW 251
47076: PPUSH
47077: LD_VAR 0 10
47081: PPUSH
47082: LD_INT 2
47084: PPUSH
47085: CALL_OW 273
47089: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47090: LD_VAR 0 11
47094: PPUSH
47095: LD_VAR 0 12
47099: PPUSH
47100: CALL_OW 488
47104: IFFALSE 47123
47106: PUSH
47107: LD_VAR 0 11
47111: PPUSH
47112: LD_VAR 0 12
47116: PPUSH
47117: CALL_OW 428
47121: NOT
47122: AND
47123: IFFALSE 47146
// begin ComMoveXY ( tmp , _x , _y ) ;
47125: LD_VAR 0 13
47129: PPUSH
47130: LD_VAR 0 11
47134: PPUSH
47135: LD_VAR 0 12
47139: PPUSH
47140: CALL_OW 111
// break ;
47144: GO 47148
// end ; end ;
47146: GO 47031
47148: POP
47149: POP
// end ; end ;
47150: GO 46463
47152: POP
47153: POP
// end ;
47154: LD_VAR 0 8
47158: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47159: LD_INT 0
47161: PPUSH
// result := true ;
47162: LD_ADDR_VAR 0 3
47166: PUSH
47167: LD_INT 1
47169: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47170: LD_VAR 0 2
47174: PUSH
47175: LD_INT 24
47177: DOUBLE
47178: EQUAL
47179: IFTRUE 47189
47181: LD_INT 33
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47214
47189: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47190: LD_ADDR_VAR 0 3
47194: PUSH
47195: LD_INT 32
47197: PPUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 321
47207: PUSH
47208: LD_INT 2
47210: EQUAL
47211: ST_TO_ADDR
47212: GO 47530
47214: LD_INT 20
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 47247
47222: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47223: LD_ADDR_VAR 0 3
47227: PUSH
47228: LD_INT 6
47230: PPUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 321
47240: PUSH
47241: LD_INT 2
47243: EQUAL
47244: ST_TO_ADDR
47245: GO 47530
47247: LD_INT 22
47249: DOUBLE
47250: EQUAL
47251: IFTRUE 47261
47253: LD_INT 36
47255: DOUBLE
47256: EQUAL
47257: IFTRUE 47261
47259: GO 47286
47261: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47262: LD_ADDR_VAR 0 3
47266: PUSH
47267: LD_INT 15
47269: PPUSH
47270: LD_VAR 0 1
47274: PPUSH
47275: CALL_OW 321
47279: PUSH
47280: LD_INT 2
47282: EQUAL
47283: ST_TO_ADDR
47284: GO 47530
47286: LD_INT 30
47288: DOUBLE
47289: EQUAL
47290: IFTRUE 47294
47292: GO 47319
47294: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47295: LD_ADDR_VAR 0 3
47299: PUSH
47300: LD_INT 20
47302: PPUSH
47303: LD_VAR 0 1
47307: PPUSH
47308: CALL_OW 321
47312: PUSH
47313: LD_INT 2
47315: EQUAL
47316: ST_TO_ADDR
47317: GO 47530
47319: LD_INT 28
47321: DOUBLE
47322: EQUAL
47323: IFTRUE 47333
47325: LD_INT 21
47327: DOUBLE
47328: EQUAL
47329: IFTRUE 47333
47331: GO 47358
47333: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47334: LD_ADDR_VAR 0 3
47338: PUSH
47339: LD_INT 21
47341: PPUSH
47342: LD_VAR 0 1
47346: PPUSH
47347: CALL_OW 321
47351: PUSH
47352: LD_INT 2
47354: EQUAL
47355: ST_TO_ADDR
47356: GO 47530
47358: LD_INT 16
47360: DOUBLE
47361: EQUAL
47362: IFTRUE 47366
47364: GO 47391
47366: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47367: LD_ADDR_VAR 0 3
47371: PUSH
47372: LD_INT 84
47374: PPUSH
47375: LD_VAR 0 1
47379: PPUSH
47380: CALL_OW 321
47384: PUSH
47385: LD_INT 2
47387: EQUAL
47388: ST_TO_ADDR
47389: GO 47530
47391: LD_INT 19
47393: DOUBLE
47394: EQUAL
47395: IFTRUE 47405
47397: LD_INT 23
47399: DOUBLE
47400: EQUAL
47401: IFTRUE 47405
47403: GO 47430
47405: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47406: LD_ADDR_VAR 0 3
47410: PUSH
47411: LD_INT 83
47413: PPUSH
47414: LD_VAR 0 1
47418: PPUSH
47419: CALL_OW 321
47423: PUSH
47424: LD_INT 2
47426: EQUAL
47427: ST_TO_ADDR
47428: GO 47530
47430: LD_INT 17
47432: DOUBLE
47433: EQUAL
47434: IFTRUE 47438
47436: GO 47463
47438: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47439: LD_ADDR_VAR 0 3
47443: PUSH
47444: LD_INT 39
47446: PPUSH
47447: LD_VAR 0 1
47451: PPUSH
47452: CALL_OW 321
47456: PUSH
47457: LD_INT 2
47459: EQUAL
47460: ST_TO_ADDR
47461: GO 47530
47463: LD_INT 18
47465: DOUBLE
47466: EQUAL
47467: IFTRUE 47471
47469: GO 47496
47471: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47472: LD_ADDR_VAR 0 3
47476: PUSH
47477: LD_INT 40
47479: PPUSH
47480: LD_VAR 0 1
47484: PPUSH
47485: CALL_OW 321
47489: PUSH
47490: LD_INT 2
47492: EQUAL
47493: ST_TO_ADDR
47494: GO 47530
47496: LD_INT 27
47498: DOUBLE
47499: EQUAL
47500: IFTRUE 47504
47502: GO 47529
47504: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47505: LD_ADDR_VAR 0 3
47509: PUSH
47510: LD_INT 35
47512: PPUSH
47513: LD_VAR 0 1
47517: PPUSH
47518: CALL_OW 321
47522: PUSH
47523: LD_INT 2
47525: EQUAL
47526: ST_TO_ADDR
47527: GO 47530
47529: POP
// end ;
47530: LD_VAR 0 3
47534: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47535: LD_INT 0
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
// result := false ;
47548: LD_ADDR_VAR 0 6
47552: PUSH
47553: LD_INT 0
47555: ST_TO_ADDR
// if btype = b_depot then
47556: LD_VAR 0 2
47560: PUSH
47561: LD_INT 0
47563: EQUAL
47564: IFFALSE 47576
// begin result := true ;
47566: LD_ADDR_VAR 0 6
47570: PUSH
47571: LD_INT 1
47573: ST_TO_ADDR
// exit ;
47574: GO 48430
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47576: LD_VAR 0 1
47580: NOT
47581: IFTRUE 47606
47583: PUSH
47584: LD_VAR 0 1
47588: PPUSH
47589: CALL_OW 266
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: IN
47604: NOT
47605: OR
47606: IFTRUE 47615
47608: PUSH
47609: LD_VAR 0 2
47613: NOT
47614: OR
47615: IFTRUE 47651
47617: PUSH
47618: LD_VAR 0 5
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 4
47637: PUSH
47638: LD_INT 5
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: IN
47649: NOT
47650: OR
47651: IFTRUE 47670
47653: PUSH
47654: LD_VAR 0 3
47658: PPUSH
47659: LD_VAR 0 4
47663: PPUSH
47664: CALL_OW 488
47668: NOT
47669: OR
47670: IFFALSE 47674
// exit ;
47672: GO 48430
// side := GetSide ( depot ) ;
47674: LD_ADDR_VAR 0 9
47678: PUSH
47679: LD_VAR 0 1
47683: PPUSH
47684: CALL_OW 255
47688: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47689: LD_VAR 0 9
47693: PPUSH
47694: LD_VAR 0 2
47698: PPUSH
47699: CALL 47159 0 2
47703: NOT
47704: IFFALSE 47708
// exit ;
47706: GO 48430
// pom := GetBase ( depot ) ;
47708: LD_ADDR_VAR 0 10
47712: PUSH
47713: LD_VAR 0 1
47717: PPUSH
47718: CALL_OW 274
47722: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47723: LD_ADDR_VAR 0 11
47727: PUSH
47728: LD_VAR 0 2
47732: PPUSH
47733: LD_VAR 0 1
47737: PPUSH
47738: CALL_OW 248
47742: PPUSH
47743: CALL_OW 450
47747: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47748: LD_VAR 0 10
47752: PPUSH
47753: LD_INT 1
47755: PPUSH
47756: CALL_OW 275
47760: PUSH
47761: LD_VAR 0 11
47765: PUSH
47766: LD_INT 1
47768: ARRAY
47769: GREATEREQUAL
47770: IFFALSE 47796
47772: PUSH
47773: LD_VAR 0 10
47777: PPUSH
47778: LD_INT 2
47780: PPUSH
47781: CALL_OW 275
47785: PUSH
47786: LD_VAR 0 11
47790: PUSH
47791: LD_INT 2
47793: ARRAY
47794: GREATEREQUAL
47795: AND
47796: IFFALSE 47822
47798: PUSH
47799: LD_VAR 0 10
47803: PPUSH
47804: LD_INT 3
47806: PPUSH
47807: CALL_OW 275
47811: PUSH
47812: LD_VAR 0 11
47816: PUSH
47817: LD_INT 3
47819: ARRAY
47820: GREATEREQUAL
47821: AND
47822: NOT
47823: IFFALSE 47827
// exit ;
47825: GO 48430
// if GetBType ( depot ) = b_depot then
47827: LD_VAR 0 1
47831: PPUSH
47832: CALL_OW 266
47836: PUSH
47837: LD_INT 0
47839: EQUAL
47840: IFFALSE 47852
// dist := 28 else
47842: LD_ADDR_VAR 0 14
47846: PUSH
47847: LD_INT 28
47849: ST_TO_ADDR
47850: GO 47860
// dist := 36 ;
47852: LD_ADDR_VAR 0 14
47856: PUSH
47857: LD_INT 36
47859: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47860: LD_VAR 0 1
47864: PPUSH
47865: LD_VAR 0 3
47869: PPUSH
47870: LD_VAR 0 4
47874: PPUSH
47875: CALL_OW 297
47879: PUSH
47880: LD_VAR 0 14
47884: GREATER
47885: IFFALSE 47889
// exit ;
47887: GO 48430
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47889: LD_ADDR_VAR 0 12
47893: PUSH
47894: LD_VAR 0 2
47898: PPUSH
47899: LD_VAR 0 3
47903: PPUSH
47904: LD_VAR 0 4
47908: PPUSH
47909: LD_VAR 0 5
47913: PPUSH
47914: LD_VAR 0 1
47918: PPUSH
47919: CALL_OW 248
47923: PPUSH
47924: LD_INT 0
47926: PPUSH
47927: CALL 48435 0 6
47931: ST_TO_ADDR
// if not hexes then
47932: LD_VAR 0 12
47936: NOT
47937: IFFALSE 47941
// exit ;
47939: GO 48430
// hex := GetHexInfo ( x , y ) ;
47941: LD_ADDR_VAR 0 15
47945: PUSH
47946: LD_VAR 0 3
47950: PPUSH
47951: LD_VAR 0 4
47955: PPUSH
47956: CALL_OW 546
47960: ST_TO_ADDR
// if hex [ 1 ] then
47961: LD_VAR 0 15
47965: PUSH
47966: LD_INT 1
47968: ARRAY
47969: IFFALSE 47973
// exit ;
47971: GO 48430
// height := hex [ 2 ] ;
47973: LD_ADDR_VAR 0 13
47977: PUSH
47978: LD_VAR 0 15
47982: PUSH
47983: LD_INT 2
47985: ARRAY
47986: ST_TO_ADDR
// for i = 1 to hexes do
47987: LD_ADDR_VAR 0 7
47991: PUSH
47992: DOUBLE
47993: LD_INT 1
47995: DEC
47996: ST_TO_ADDR
47997: LD_VAR 0 12
48001: PUSH
48002: FOR_TO
48003: IFFALSE 48347
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48005: LD_VAR 0 12
48009: PUSH
48010: LD_VAR 0 7
48014: ARRAY
48015: PUSH
48016: LD_INT 1
48018: ARRAY
48019: PPUSH
48020: LD_VAR 0 12
48024: PUSH
48025: LD_VAR 0 7
48029: ARRAY
48030: PUSH
48031: LD_INT 2
48033: ARRAY
48034: PPUSH
48035: CALL_OW 488
48039: NOT
48040: IFTRUE 48082
48042: PUSH
48043: LD_VAR 0 12
48047: PUSH
48048: LD_VAR 0 7
48052: ARRAY
48053: PUSH
48054: LD_INT 1
48056: ARRAY
48057: PPUSH
48058: LD_VAR 0 12
48062: PUSH
48063: LD_VAR 0 7
48067: ARRAY
48068: PUSH
48069: LD_INT 2
48071: ARRAY
48072: PPUSH
48073: CALL_OW 428
48077: PUSH
48078: LD_INT 0
48080: GREATER
48081: OR
48082: IFTRUE 48120
48084: PUSH
48085: LD_VAR 0 12
48089: PUSH
48090: LD_VAR 0 7
48094: ARRAY
48095: PUSH
48096: LD_INT 1
48098: ARRAY
48099: PPUSH
48100: LD_VAR 0 12
48104: PUSH
48105: LD_VAR 0 7
48109: ARRAY
48110: PUSH
48111: LD_INT 2
48113: ARRAY
48114: PPUSH
48115: CALL_OW 351
48119: OR
48120: IFFALSE 48126
// exit ;
48122: POP
48123: POP
48124: GO 48430
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48126: LD_ADDR_VAR 0 8
48130: PUSH
48131: LD_VAR 0 12
48135: PUSH
48136: LD_VAR 0 7
48140: ARRAY
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: PPUSH
48146: LD_VAR 0 12
48150: PUSH
48151: LD_VAR 0 7
48155: ARRAY
48156: PUSH
48157: LD_INT 2
48159: ARRAY
48160: PPUSH
48161: CALL_OW 546
48165: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48166: LD_VAR 0 8
48170: PUSH
48171: LD_INT 1
48173: ARRAY
48174: IFTRUE 48196
48176: PUSH
48177: LD_VAR 0 8
48181: PUSH
48182: LD_INT 2
48184: ARRAY
48185: PUSH
48186: LD_VAR 0 13
48190: PUSH
48191: LD_INT 2
48193: PLUS
48194: GREATER
48195: OR
48196: IFTRUE 48218
48198: PUSH
48199: LD_VAR 0 8
48203: PUSH
48204: LD_INT 2
48206: ARRAY
48207: PUSH
48208: LD_VAR 0 13
48212: PUSH
48213: LD_INT 2
48215: MINUS
48216: LESS
48217: OR
48218: IFTRUE 48286
48220: PUSH
48221: LD_VAR 0 8
48225: PUSH
48226: LD_INT 3
48228: ARRAY
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 8
48235: PUSH
48236: LD_INT 9
48238: PUSH
48239: LD_INT 10
48241: PUSH
48242: LD_INT 11
48244: PUSH
48245: LD_INT 12
48247: PUSH
48248: LD_INT 13
48250: PUSH
48251: LD_INT 16
48253: PUSH
48254: LD_INT 17
48256: PUSH
48257: LD_INT 18
48259: PUSH
48260: LD_INT 19
48262: PUSH
48263: LD_INT 20
48265: PUSH
48266: LD_INT 21
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: IN
48284: NOT
48285: OR
48286: IFTRUE 48299
48288: PUSH
48289: LD_VAR 0 8
48293: PUSH
48294: LD_INT 5
48296: ARRAY
48297: NOT
48298: OR
48299: IFTRUE 48339
48301: PUSH
48302: LD_VAR 0 8
48306: PUSH
48307: LD_INT 6
48309: ARRAY
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 7
48319: PUSH
48320: LD_INT 9
48322: PUSH
48323: LD_INT 10
48325: PUSH
48326: LD_INT 11
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: IN
48337: NOT
48338: OR
48339: IFFALSE 48345
// exit ;
48341: POP
48342: POP
48343: GO 48430
// end ;
48345: GO 48002
48347: POP
48348: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48349: LD_VAR 0 9
48353: PPUSH
48354: LD_VAR 0 3
48358: PPUSH
48359: LD_VAR 0 4
48363: PPUSH
48364: LD_INT 20
48366: PPUSH
48367: CALL 40249 0 4
48371: PUSH
48372: LD_INT 4
48374: ARRAY
48375: IFFALSE 48379
// exit ;
48377: GO 48430
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48379: LD_VAR 0 2
48383: PUSH
48384: LD_INT 29
48386: PUSH
48387: LD_INT 30
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: IN
48394: IFFALSE 48418
48396: PUSH
48397: LD_VAR 0 3
48401: PPUSH
48402: LD_VAR 0 4
48406: PPUSH
48407: LD_VAR 0 9
48411: PPUSH
48412: CALL_OW 440
48416: NOT
48417: AND
48418: IFFALSE 48422
// exit ;
48420: GO 48430
// result := true ;
48422: LD_ADDR_VAR 0 6
48426: PUSH
48427: LD_INT 1
48429: ST_TO_ADDR
// end ;
48430: LD_VAR 0 6
48434: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48435: LD_INT 0
48437: PPUSH
48438: PPUSH
48439: PPUSH
48440: PPUSH
48441: PPUSH
48442: PPUSH
48443: PPUSH
48444: PPUSH
48445: PPUSH
48446: PPUSH
48447: PPUSH
48448: PPUSH
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
48457: PPUSH
48458: PPUSH
48459: PPUSH
48460: PPUSH
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
48465: PPUSH
48466: PPUSH
48467: PPUSH
48468: PPUSH
48469: PPUSH
48470: PPUSH
48471: PPUSH
48472: PPUSH
48473: PPUSH
48474: PPUSH
48475: PPUSH
48476: PPUSH
48477: PPUSH
48478: PPUSH
48479: PPUSH
48480: PPUSH
48481: PPUSH
48482: PPUSH
48483: PPUSH
48484: PPUSH
48485: PPUSH
48486: PPUSH
48487: PPUSH
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
// result = [ ] ;
48495: LD_ADDR_VAR 0 7
48499: PUSH
48500: EMPTY
48501: ST_TO_ADDR
// temp_list = [ ] ;
48502: LD_ADDR_VAR 0 9
48506: PUSH
48507: EMPTY
48508: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48509: LD_VAR 0 4
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 4
48528: PUSH
48529: LD_INT 5
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: IN
48540: NOT
48541: IFTRUE 48584
48543: PUSH
48544: LD_VAR 0 1
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: IN
48559: IFFALSE 48583
48561: PUSH
48562: LD_VAR 0 5
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: IN
48581: NOT
48582: AND
48583: OR
48584: IFFALSE 48588
// exit ;
48586: GO 66987
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48588: LD_VAR 0 1
48592: PUSH
48593: LD_INT 6
48595: PUSH
48596: LD_INT 7
48598: PUSH
48599: LD_INT 8
48601: PUSH
48602: LD_INT 13
48604: PUSH
48605: LD_INT 12
48607: PUSH
48608: LD_INT 15
48610: PUSH
48611: LD_INT 11
48613: PUSH
48614: LD_INT 14
48616: PUSH
48617: LD_INT 10
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: IN
48631: IFFALSE 48641
// btype = b_lab ;
48633: LD_ADDR_VAR 0 1
48637: PUSH
48638: LD_INT 6
48640: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48641: LD_VAR 0 6
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: IN
48660: NOT
48661: IFTRUE 48729
48663: PUSH
48664: LD_VAR 0 1
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: LD_INT 6
48683: PUSH
48684: LD_INT 36
48686: PUSH
48687: LD_INT 4
48689: PUSH
48690: LD_INT 5
48692: PUSH
48693: LD_INT 31
48695: PUSH
48696: LD_INT 32
48698: PUSH
48699: LD_INT 33
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: IN
48715: NOT
48716: IFFALSE 48728
48718: PUSH
48719: LD_VAR 0 6
48723: PUSH
48724: LD_INT 1
48726: EQUAL
48727: AND
48728: OR
48729: IFTRUE 48761
48731: PUSH
48732: LD_VAR 0 1
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: IN
48747: NOT
48748: IFFALSE 48760
48750: PUSH
48751: LD_VAR 0 6
48755: PUSH
48756: LD_INT 2
48758: EQUAL
48759: AND
48760: OR
48761: IFFALSE 48771
// mode = 0 ;
48763: LD_ADDR_VAR 0 6
48767: PUSH
48768: LD_INT 0
48770: ST_TO_ADDR
// case mode of 0 :
48771: LD_VAR 0 6
48775: PUSH
48776: LD_INT 0
48778: DOUBLE
48779: EQUAL
48780: IFTRUE 48784
48782: GO 60237
48784: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48785: LD_ADDR_VAR 0 11
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48978: LD_ADDR_VAR 0 12
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49174: LD_ADDR_VAR 0 13
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49373: LD_ADDR_VAR 0 14
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49569: LD_ADDR_VAR 0 15
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49762: LD_ADDR_VAR 0 16
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49955: LD_ADDR_VAR 0 17
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50185: LD_ADDR_VAR 0 18
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50415: LD_ADDR_VAR 0 19
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50645: LD_ADDR_VAR 0 20
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50875: LD_ADDR_VAR 0 21
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51105: LD_ADDR_VAR 0 22
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51335: LD_ADDR_VAR 0 23
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51615: LD_ADDR_VAR 0 24
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51891: LD_ADDR_VAR 0 25
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52165: LD_ADDR_VAR 0 26
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52441: LD_ADDR_VAR 0 27
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52721: LD_ADDR_VAR 0 28
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53003: LD_ADDR_VAR 0 29
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53282: LD_ADDR_VAR 0 30
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53560: LD_ADDR_VAR 0 31
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53838: LD_ADDR_VAR 0 32
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54116: LD_ADDR_VAR 0 33
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 3
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54395: LD_ADDR_VAR 0 34
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54675: LD_ADDR_VAR 0 35
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54787: LD_ADDR_VAR 0 36
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54899: LD_ADDR_VAR 0 37
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55011: LD_ADDR_VAR 0 38
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55123: LD_ADDR_VAR 0 39
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55235: LD_ADDR_VAR 0 40
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55347: LD_ADDR_VAR 0 41
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 3
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 3
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55697: LD_ADDR_VAR 0 42
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: LD_INT 3
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: LD_INT 3
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 3
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56047: LD_ADDR_VAR 0 43
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56395: LD_ADDR_VAR 0 44
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 3
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56745: LD_ADDR_VAR 0 45
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57095: LD_ADDR_VAR 0 46
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57443: LD_ADDR_VAR 0 47
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57594: LD_ADDR_VAR 0 48
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57741: LD_ADDR_VAR 0 49
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57885: LD_ADDR_VAR 0 50
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58029: LD_ADDR_VAR 0 51
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58176: LD_ADDR_VAR 0 52
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58327: LD_ADDR_VAR 0 53
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58557: LD_ADDR_VAR 0 54
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58787: LD_ADDR_VAR 0 55
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59017: LD_ADDR_VAR 0 56
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 2
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59247: LD_ADDR_VAR 0 57
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59477: LD_ADDR_VAR 0 58
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59707: LD_ADDR_VAR 0 59
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59795: LD_ADDR_VAR 0 60
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59883: LD_ADDR_VAR 0 61
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59971: LD_ADDR_VAR 0 62
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60059: LD_ADDR_VAR 0 63
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60147: LD_ADDR_VAR 0 64
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: ST_TO_ADDR
// end ; 1 :
60235: GO 66132
60237: LD_INT 1
60239: DOUBLE
60240: EQUAL
60241: IFTRUE 60245
60243: GO 62868
60245: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60246: LD_ADDR_VAR 0 11
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60290: LD_ADDR_VAR 0 12
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60331: LD_ADDR_VAR 0 13
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60371: LD_ADDR_VAR 0 14
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60412: LD_ADDR_VAR 0 15
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 3
60441: NEG
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60456: LD_ADDR_VAR 0 16
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: LD_INT 2
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60502: LD_ADDR_VAR 0 17
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60546: LD_ADDR_VAR 0 18
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60587: LD_ADDR_VAR 0 19
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60627: LD_ADDR_VAR 0 20
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60668: LD_ADDR_VAR 0 21
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60712: LD_ADDR_VAR 0 22
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: LD_INT 3
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: NEG
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 3
60743: NEG
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60758: LD_ADDR_VAR 0 23
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 4
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60802: LD_ADDR_VAR 0 24
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 4
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60843: LD_ADDR_VAR 0 25
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: LD_INT 3
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 4
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: PUSH
60871: LD_INT 4
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60883: LD_ADDR_VAR 0 26
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 4
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60924: LD_ADDR_VAR 0 27
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 4
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60968: LD_ADDR_VAR 0 28
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: NEG
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61014: LD_ADDR_VAR 0 29
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 4
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 4
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 5
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 5
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 6
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: LD_INT 6
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 5
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61169: LD_ADDR_VAR 0 30
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 4
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 4
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 4
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 5
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 5
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 5
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 6
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 6
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61312: LD_ADDR_VAR 0 31
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 4
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 3
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 5
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 5
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 6
61409: PUSH
61410: LD_INT 5
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 6
61419: PUSH
61420: LD_INT 6
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 5
61429: PUSH
61430: LD_INT 6
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61451: LD_ADDR_VAR 0 32
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 4
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 4
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 3
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 5
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 5
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 4
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 6
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 6
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61594: LD_ADDR_VAR 0 33
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 4
61646: NEG
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 4
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 4
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 5
61680: NEG
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 5
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 5
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 6
61714: NEG
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 6
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61749: LD_ADDR_VAR 0 34
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 3
61792: NEG
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 4
61804: NEG
61805: PUSH
61806: LD_INT 3
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 4
61816: NEG
61817: PUSH
61818: LD_INT 4
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 4
61828: NEG
61829: PUSH
61830: LD_INT 5
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 5
61840: NEG
61841: PUSH
61842: LD_INT 4
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 5
61852: NEG
61853: PUSH
61854: LD_INT 5
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 5
61864: NEG
61865: PUSH
61866: LD_INT 6
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 6
61876: NEG
61877: PUSH
61878: LD_INT 5
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 6
61888: NEG
61889: PUSH
61890: LD_INT 6
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61912: LD_ADDR_VAR 0 41
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61956: LD_ADDR_VAR 0 42
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 3
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61997: LD_ADDR_VAR 0 43
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62037: LD_ADDR_VAR 0 44
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62078: LD_ADDR_VAR 0 45
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62122: LD_ADDR_VAR 0 46
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 3
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62168: LD_ADDR_VAR 0 47
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: LD_INT 3
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62201: LD_ADDR_VAR 0 48
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 2
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62232: LD_ADDR_VAR 0 49
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62261: LD_ADDR_VAR 0 50
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62290: LD_ADDR_VAR 0 51
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62321: LD_ADDR_VAR 0 52
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: NEG
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62354: LD_ADDR_VAR 0 53
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: LD_INT 3
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 3
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62398: LD_ADDR_VAR 0 54
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62439: LD_ADDR_VAR 0 55
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 3
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62479: LD_ADDR_VAR 0 56
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62520: LD_ADDR_VAR 0 57
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62564: LD_ADDR_VAR 0 58
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: LD_INT 3
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: LD_INT 2
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62610: LD_ADDR_VAR 0 59
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62654: LD_ADDR_VAR 0 60
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62695: LD_ADDR_VAR 0 61
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62735: LD_ADDR_VAR 0 62
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62776: LD_ADDR_VAR 0 63
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62820: LD_ADDR_VAR 0 64
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: ST_TO_ADDR
// end ; 2 :
62866: GO 66132
62868: LD_INT 2
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62876
62874: GO 66131
62876: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62877: LD_ADDR_VAR 0 29
62881: PUSH
62882: LD_INT 4
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 4
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 5
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 5
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 4
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 3
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 3
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 5
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: PUSH
62978: LD_INT 3
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 4
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 4
63007: PUSH
63008: LD_INT 4
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 3
63017: PUSH
63018: LD_INT 4
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 4
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 4
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 4
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 4
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 5
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 5
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: LD_INT 5
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 3
63160: NEG
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: NEG
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: NEG
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: NEG
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 2
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 4
63262: NEG
63263: PUSH
63264: LD_INT 4
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 4
63274: NEG
63275: PUSH
63276: LD_INT 5
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 3
63286: NEG
63287: PUSH
63288: LD_INT 4
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 3
63298: NEG
63299: PUSH
63300: LD_INT 3
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 4
63310: NEG
63311: PUSH
63312: LD_INT 3
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 5
63322: NEG
63323: PUSH
63324: LD_INT 4
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 5
63334: NEG
63335: PUSH
63336: LD_INT 5
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 3
63346: NEG
63347: PUSH
63348: LD_INT 5
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 5
63358: NEG
63359: PUSH
63360: LD_INT 3
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63415: LD_ADDR_VAR 0 30
63419: PUSH
63420: LD_INT 4
63422: PUSH
63423: LD_INT 4
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 4
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 5
63442: PUSH
63443: LD_INT 4
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 5
63452: PUSH
63453: LD_INT 5
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 4
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 3
63472: PUSH
63473: LD_INT 4
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: LD_INT 3
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 5
63492: PUSH
63493: LD_INT 3
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: LD_INT 5
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: LD_INT 4
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 4
63605: NEG
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: NEG
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 3
63639: NEG
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 4
63650: NEG
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 5
63661: NEG
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 5
63672: NEG
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 5
63684: NEG
63685: PUSH
63686: LD_INT 2
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: LD_INT 3
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: NEG
63720: PUSH
63721: LD_INT 4
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: LD_INT 2
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: NEG
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 4
63767: NEG
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 4
63779: NEG
63780: PUSH
63781: LD_INT 4
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: LD_INT 4
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 4
63803: NEG
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 4
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: LD_INT 5
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 4
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 3
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: LD_INT 4
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: LD_INT 5
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: LD_INT 3
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: LD_INT 5
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63962: LD_ADDR_VAR 0 31
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 4
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: LD_INT 4
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: LD_INT 5
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 5
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 4
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: LD_INT 5
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: LD_INT 3
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 3
64107: NEG
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 4
64129: NEG
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 4
64141: NEG
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 4
64164: NEG
64165: PUSH
64166: LD_INT 4
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 4
64176: NEG
64177: PUSH
64178: LD_INT 5
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 3
64188: NEG
64189: PUSH
64190: LD_INT 4
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: LD_INT 3
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 4
64212: NEG
64213: PUSH
64214: LD_INT 3
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 5
64224: NEG
64225: PUSH
64226: LD_INT 4
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 5
64236: NEG
64237: PUSH
64238: LD_INT 5
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: LD_INT 5
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 5
64260: NEG
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 4
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 2
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 3
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: LD_INT 4
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 4
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 4
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 4
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 5
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 5
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 4
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 3
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 5
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64512: LD_ADDR_VAR 0 32
64516: PUSH
64517: LD_INT 4
64519: NEG
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 4
64530: NEG
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 3
64542: NEG
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 3
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 4
64564: NEG
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 5
64575: NEG
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 5
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 5
64598: NEG
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 3
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 3
64633: NEG
64634: PUSH
64635: LD_INT 4
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: LD_INT 3
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: NEG
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 3
64669: NEG
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 4
64681: NEG
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 4
64693: NEG
64694: PUSH
64695: LD_INT 4
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 4
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 4
64717: NEG
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 4
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 5
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 4
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: LD_INT 3
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 4
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 5
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 3
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: LD_INT 5
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 4
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 4
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 4
64924: PUSH
64925: LD_INT 4
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 5
64944: PUSH
64945: LD_INT 4
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: LD_INT 5
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: LD_INT 5
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 4
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 5
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: LD_INT 5
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65059: LD_ADDR_VAR 0 33
65063: PUSH
65064: LD_INT 4
65066: NEG
65067: PUSH
65068: LD_INT 4
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 4
65078: NEG
65079: PUSH
65080: LD_INT 5
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: LD_INT 4
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 3
65102: NEG
65103: PUSH
65104: LD_INT 3
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 4
65114: NEG
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 5
65126: NEG
65127: PUSH
65128: LD_INT 4
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 5
65138: NEG
65139: PUSH
65140: LD_INT 5
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: NEG
65151: PUSH
65152: LD_INT 5
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 5
65162: NEG
65163: PUSH
65164: LD_INT 3
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 3
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 4
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 4
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: LD_INT 2
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 5
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 5
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 4
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 3
65348: PUSH
65349: LD_INT 2
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 5
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 3
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 4
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 4
65399: PUSH
65400: LD_INT 4
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 3
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 2
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: LD_INT 2
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 4
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 4
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 4
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 5
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 5
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65597: LD_ADDR_VAR 0 34
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 4
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 4
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: LD_INT 3
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 3
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: LD_INT 4
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 5
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 5
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 4
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 4
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 4
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: LD_INT 4
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 4
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 5
65819: PUSH
65820: LD_INT 4
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 5
65829: PUSH
65830: LD_INT 5
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 4
65839: PUSH
65840: LD_INT 5
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: PUSH
65850: LD_INT 4
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: PUSH
65860: LD_INT 3
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 5
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: LD_INT 5
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: LD_INT 4
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 4
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 4
65982: NEG
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 4
65993: NEG
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 3
66005: NEG
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 5
66038: NEG
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 5
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 5
66061: NEG
66062: PUSH
66063: LD_INT 2
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 3
66073: NEG
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// end ; end ;
66129: GO 66132
66131: POP
// case btype of b_depot , b_warehouse :
66132: LD_VAR 0 1
66136: PUSH
66137: LD_INT 0
66139: DOUBLE
66140: EQUAL
66141: IFTRUE 66151
66143: LD_INT 1
66145: DOUBLE
66146: EQUAL
66147: IFTRUE 66151
66149: GO 66352
66151: POP
// case nation of nation_american :
66152: LD_VAR 0 5
66156: PUSH
66157: LD_INT 1
66159: DOUBLE
66160: EQUAL
66161: IFTRUE 66165
66163: GO 66221
66165: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66166: LD_ADDR_VAR 0 9
66170: PUSH
66171: LD_VAR 0 11
66175: PUSH
66176: LD_VAR 0 12
66180: PUSH
66181: LD_VAR 0 13
66185: PUSH
66186: LD_VAR 0 14
66190: PUSH
66191: LD_VAR 0 15
66195: PUSH
66196: LD_VAR 0 16
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: PUSH
66209: LD_VAR 0 4
66213: PUSH
66214: LD_INT 1
66216: PLUS
66217: ARRAY
66218: ST_TO_ADDR
66219: GO 66350
66221: LD_INT 2
66223: DOUBLE
66224: EQUAL
66225: IFTRUE 66229
66227: GO 66285
66229: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66230: LD_ADDR_VAR 0 9
66234: PUSH
66235: LD_VAR 0 17
66239: PUSH
66240: LD_VAR 0 18
66244: PUSH
66245: LD_VAR 0 19
66249: PUSH
66250: LD_VAR 0 20
66254: PUSH
66255: LD_VAR 0 21
66259: PUSH
66260: LD_VAR 0 22
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: PUSH
66273: LD_VAR 0 4
66277: PUSH
66278: LD_INT 1
66280: PLUS
66281: ARRAY
66282: ST_TO_ADDR
66283: GO 66350
66285: LD_INT 3
66287: DOUBLE
66288: EQUAL
66289: IFTRUE 66293
66291: GO 66349
66293: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66294: LD_ADDR_VAR 0 9
66298: PUSH
66299: LD_VAR 0 23
66303: PUSH
66304: LD_VAR 0 24
66308: PUSH
66309: LD_VAR 0 25
66313: PUSH
66314: LD_VAR 0 26
66318: PUSH
66319: LD_VAR 0 27
66323: PUSH
66324: LD_VAR 0 28
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: PUSH
66337: LD_VAR 0 4
66341: PUSH
66342: LD_INT 1
66344: PLUS
66345: ARRAY
66346: ST_TO_ADDR
66347: GO 66350
66349: POP
66350: GO 66905
66352: LD_INT 2
66354: DOUBLE
66355: EQUAL
66356: IFTRUE 66366
66358: LD_INT 3
66360: DOUBLE
66361: EQUAL
66362: IFTRUE 66366
66364: GO 66422
66366: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66367: LD_ADDR_VAR 0 9
66371: PUSH
66372: LD_VAR 0 29
66376: PUSH
66377: LD_VAR 0 30
66381: PUSH
66382: LD_VAR 0 31
66386: PUSH
66387: LD_VAR 0 32
66391: PUSH
66392: LD_VAR 0 33
66396: PUSH
66397: LD_VAR 0 34
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: PUSH
66410: LD_VAR 0 4
66414: PUSH
66415: LD_INT 1
66417: PLUS
66418: ARRAY
66419: ST_TO_ADDR
66420: GO 66905
66422: LD_INT 16
66424: DOUBLE
66425: EQUAL
66426: IFTRUE 66484
66428: LD_INT 17
66430: DOUBLE
66431: EQUAL
66432: IFTRUE 66484
66434: LD_INT 18
66436: DOUBLE
66437: EQUAL
66438: IFTRUE 66484
66440: LD_INT 19
66442: DOUBLE
66443: EQUAL
66444: IFTRUE 66484
66446: LD_INT 22
66448: DOUBLE
66449: EQUAL
66450: IFTRUE 66484
66452: LD_INT 20
66454: DOUBLE
66455: EQUAL
66456: IFTRUE 66484
66458: LD_INT 21
66460: DOUBLE
66461: EQUAL
66462: IFTRUE 66484
66464: LD_INT 23
66466: DOUBLE
66467: EQUAL
66468: IFTRUE 66484
66470: LD_INT 24
66472: DOUBLE
66473: EQUAL
66474: IFTRUE 66484
66476: LD_INT 25
66478: DOUBLE
66479: EQUAL
66480: IFTRUE 66484
66482: GO 66540
66484: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66485: LD_ADDR_VAR 0 9
66489: PUSH
66490: LD_VAR 0 35
66494: PUSH
66495: LD_VAR 0 36
66499: PUSH
66500: LD_VAR 0 37
66504: PUSH
66505: LD_VAR 0 38
66509: PUSH
66510: LD_VAR 0 39
66514: PUSH
66515: LD_VAR 0 40
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: PUSH
66528: LD_VAR 0 4
66532: PUSH
66533: LD_INT 1
66535: PLUS
66536: ARRAY
66537: ST_TO_ADDR
66538: GO 66905
66540: LD_INT 6
66542: DOUBLE
66543: EQUAL
66544: IFTRUE 66596
66546: LD_INT 7
66548: DOUBLE
66549: EQUAL
66550: IFTRUE 66596
66552: LD_INT 8
66554: DOUBLE
66555: EQUAL
66556: IFTRUE 66596
66558: LD_INT 13
66560: DOUBLE
66561: EQUAL
66562: IFTRUE 66596
66564: LD_INT 12
66566: DOUBLE
66567: EQUAL
66568: IFTRUE 66596
66570: LD_INT 15
66572: DOUBLE
66573: EQUAL
66574: IFTRUE 66596
66576: LD_INT 11
66578: DOUBLE
66579: EQUAL
66580: IFTRUE 66596
66582: LD_INT 14
66584: DOUBLE
66585: EQUAL
66586: IFTRUE 66596
66588: LD_INT 10
66590: DOUBLE
66591: EQUAL
66592: IFTRUE 66596
66594: GO 66652
66596: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66597: LD_ADDR_VAR 0 9
66601: PUSH
66602: LD_VAR 0 41
66606: PUSH
66607: LD_VAR 0 42
66611: PUSH
66612: LD_VAR 0 43
66616: PUSH
66617: LD_VAR 0 44
66621: PUSH
66622: LD_VAR 0 45
66626: PUSH
66627: LD_VAR 0 46
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: PUSH
66640: LD_VAR 0 4
66644: PUSH
66645: LD_INT 1
66647: PLUS
66648: ARRAY
66649: ST_TO_ADDR
66650: GO 66905
66652: LD_INT 36
66654: DOUBLE
66655: EQUAL
66656: IFTRUE 66660
66658: GO 66716
66660: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66661: LD_ADDR_VAR 0 9
66665: PUSH
66666: LD_VAR 0 47
66670: PUSH
66671: LD_VAR 0 48
66675: PUSH
66676: LD_VAR 0 49
66680: PUSH
66681: LD_VAR 0 50
66685: PUSH
66686: LD_VAR 0 51
66690: PUSH
66691: LD_VAR 0 52
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: PUSH
66704: LD_VAR 0 4
66708: PUSH
66709: LD_INT 1
66711: PLUS
66712: ARRAY
66713: ST_TO_ADDR
66714: GO 66905
66716: LD_INT 4
66718: DOUBLE
66719: EQUAL
66720: IFTRUE 66742
66722: LD_INT 5
66724: DOUBLE
66725: EQUAL
66726: IFTRUE 66742
66728: LD_INT 34
66730: DOUBLE
66731: EQUAL
66732: IFTRUE 66742
66734: LD_INT 37
66736: DOUBLE
66737: EQUAL
66738: IFTRUE 66742
66740: GO 66798
66742: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66743: LD_ADDR_VAR 0 9
66747: PUSH
66748: LD_VAR 0 53
66752: PUSH
66753: LD_VAR 0 54
66757: PUSH
66758: LD_VAR 0 55
66762: PUSH
66763: LD_VAR 0 56
66767: PUSH
66768: LD_VAR 0 57
66772: PUSH
66773: LD_VAR 0 58
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: LD_VAR 0 4
66790: PUSH
66791: LD_INT 1
66793: PLUS
66794: ARRAY
66795: ST_TO_ADDR
66796: GO 66905
66798: LD_INT 31
66800: DOUBLE
66801: EQUAL
66802: IFTRUE 66848
66804: LD_INT 32
66806: DOUBLE
66807: EQUAL
66808: IFTRUE 66848
66810: LD_INT 33
66812: DOUBLE
66813: EQUAL
66814: IFTRUE 66848
66816: LD_INT 27
66818: DOUBLE
66819: EQUAL
66820: IFTRUE 66848
66822: LD_INT 26
66824: DOUBLE
66825: EQUAL
66826: IFTRUE 66848
66828: LD_INT 28
66830: DOUBLE
66831: EQUAL
66832: IFTRUE 66848
66834: LD_INT 29
66836: DOUBLE
66837: EQUAL
66838: IFTRUE 66848
66840: LD_INT 30
66842: DOUBLE
66843: EQUAL
66844: IFTRUE 66848
66846: GO 66904
66848: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66849: LD_ADDR_VAR 0 9
66853: PUSH
66854: LD_VAR 0 59
66858: PUSH
66859: LD_VAR 0 60
66863: PUSH
66864: LD_VAR 0 61
66868: PUSH
66869: LD_VAR 0 62
66873: PUSH
66874: LD_VAR 0 63
66878: PUSH
66879: LD_VAR 0 64
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: PUSH
66892: LD_VAR 0 4
66896: PUSH
66897: LD_INT 1
66899: PLUS
66900: ARRAY
66901: ST_TO_ADDR
66902: GO 66905
66904: POP
// temp_list2 = [ ] ;
66905: LD_ADDR_VAR 0 10
66909: PUSH
66910: EMPTY
66911: ST_TO_ADDR
// for i in temp_list do
66912: LD_ADDR_VAR 0 8
66916: PUSH
66917: LD_VAR 0 9
66921: PUSH
66922: FOR_IN
66923: IFFALSE 66975
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66925: LD_ADDR_VAR 0 10
66929: PUSH
66930: LD_VAR 0 10
66934: PUSH
66935: LD_VAR 0 8
66939: PUSH
66940: LD_INT 1
66942: ARRAY
66943: PUSH
66944: LD_VAR 0 2
66948: PLUS
66949: PUSH
66950: LD_VAR 0 8
66954: PUSH
66955: LD_INT 2
66957: ARRAY
66958: PUSH
66959: LD_VAR 0 3
66963: PLUS
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: ADD
66972: ST_TO_ADDR
66973: GO 66922
66975: POP
66976: POP
// result = temp_list2 ;
66977: LD_ADDR_VAR 0 7
66981: PUSH
66982: LD_VAR 0 10
66986: ST_TO_ADDR
// end ;
66987: LD_VAR 0 7
66991: RET
// export function EnemyInRange ( unit , dist ) ; begin
66992: LD_INT 0
66994: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66995: LD_ADDR_VAR 0 3
66999: PUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: CALL_OW 255
67009: PPUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 250
67019: PPUSH
67020: LD_VAR 0 1
67024: PPUSH
67025: CALL_OW 251
67029: PPUSH
67030: LD_VAR 0 2
67034: PPUSH
67035: CALL 40249 0 4
67039: PUSH
67040: LD_INT 4
67042: ARRAY
67043: ST_TO_ADDR
// end ;
67044: LD_VAR 0 3
67048: RET
// export function PlayerSeeMe ( unit ) ; begin
67049: LD_INT 0
67051: PPUSH
// result := See ( your_side , unit ) ;
67052: LD_ADDR_VAR 0 2
67056: PUSH
67057: LD_OWVAR 2
67061: PPUSH
67062: LD_VAR 0 1
67066: PPUSH
67067: CALL_OW 292
67071: ST_TO_ADDR
// end ;
67072: LD_VAR 0 2
67076: RET
// export function ReverseDir ( unit ) ; begin
67077: LD_INT 0
67079: PPUSH
// if not unit then
67080: LD_VAR 0 1
67084: NOT
67085: IFFALSE 67089
// exit ;
67087: GO 67112
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67089: LD_ADDR_VAR 0 2
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 254
67103: PUSH
67104: LD_INT 3
67106: PLUS
67107: PUSH
67108: LD_INT 6
67110: MOD
67111: ST_TO_ADDR
// end ;
67112: LD_VAR 0 2
67116: RET
// export function ReverseArray ( array ) ; var i ; begin
67117: LD_INT 0
67119: PPUSH
67120: PPUSH
// if not array then
67121: LD_VAR 0 1
67125: NOT
67126: IFFALSE 67130
// exit ;
67128: GO 67185
// result := [ ] ;
67130: LD_ADDR_VAR 0 2
67134: PUSH
67135: EMPTY
67136: ST_TO_ADDR
// for i := array downto 1 do
67137: LD_ADDR_VAR 0 3
67141: PUSH
67142: DOUBLE
67143: LD_VAR 0 1
67147: INC
67148: ST_TO_ADDR
67149: LD_INT 1
67151: PUSH
67152: FOR_DOWNTO
67153: IFFALSE 67183
// result := Join ( result , array [ i ] ) ;
67155: LD_ADDR_VAR 0 2
67159: PUSH
67160: LD_VAR 0 2
67164: PPUSH
67165: LD_VAR 0 1
67169: PUSH
67170: LD_VAR 0 3
67174: ARRAY
67175: PPUSH
67176: CALL 72037 0 2
67180: ST_TO_ADDR
67181: GO 67152
67183: POP
67184: POP
// end ;
67185: LD_VAR 0 2
67189: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67190: LD_INT 0
67192: PPUSH
67193: PPUSH
67194: PPUSH
67195: PPUSH
67196: PPUSH
67197: PPUSH
// if not unit or not hexes then
67198: LD_VAR 0 1
67202: NOT
67203: IFTRUE 67212
67205: PUSH
67206: LD_VAR 0 2
67210: NOT
67211: OR
67212: IFFALSE 67216
// exit ;
67214: GO 67339
// dist := 9999 ;
67216: LD_ADDR_VAR 0 5
67220: PUSH
67221: LD_INT 9999
67223: ST_TO_ADDR
// for i = 1 to hexes do
67224: LD_ADDR_VAR 0 4
67228: PUSH
67229: DOUBLE
67230: LD_INT 1
67232: DEC
67233: ST_TO_ADDR
67234: LD_VAR 0 2
67238: PUSH
67239: FOR_TO
67240: IFFALSE 67327
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67242: LD_ADDR_VAR 0 6
67246: PUSH
67247: LD_VAR 0 1
67251: PPUSH
67252: LD_VAR 0 2
67256: PUSH
67257: LD_VAR 0 4
67261: ARRAY
67262: PUSH
67263: LD_INT 1
67265: ARRAY
67266: PPUSH
67267: LD_VAR 0 2
67271: PUSH
67272: LD_VAR 0 4
67276: ARRAY
67277: PUSH
67278: LD_INT 2
67280: ARRAY
67281: PPUSH
67282: CALL_OW 297
67286: ST_TO_ADDR
// if tdist < dist then
67287: LD_VAR 0 6
67291: PUSH
67292: LD_VAR 0 5
67296: LESS
67297: IFFALSE 67325
// begin hex := hexes [ i ] ;
67299: LD_ADDR_VAR 0 8
67303: PUSH
67304: LD_VAR 0 2
67308: PUSH
67309: LD_VAR 0 4
67313: ARRAY
67314: ST_TO_ADDR
// dist := tdist ;
67315: LD_ADDR_VAR 0 5
67319: PUSH
67320: LD_VAR 0 6
67324: ST_TO_ADDR
// end ; end ;
67325: GO 67239
67327: POP
67328: POP
// result := hex ;
67329: LD_ADDR_VAR 0 3
67333: PUSH
67334: LD_VAR 0 8
67338: ST_TO_ADDR
// end ;
67339: LD_VAR 0 3
67343: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67348: LD_VAR 0 1
67352: NOT
67353: IFTRUE 67392
67355: PUSH
67356: LD_VAR 0 1
67360: PUSH
67361: LD_INT 21
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 23
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PPUSH
67385: CALL_OW 69
67389: IN
67390: NOT
67391: OR
67392: IFFALSE 67396
// exit ;
67394: GO 67443
// for i = 1 to 3 do
67396: LD_ADDR_VAR 0 3
67400: PUSH
67401: DOUBLE
67402: LD_INT 1
67404: DEC
67405: ST_TO_ADDR
67406: LD_INT 3
67408: PUSH
67409: FOR_TO
67410: IFFALSE 67441
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67412: LD_VAR 0 1
67416: PPUSH
67417: CALL_OW 250
67421: PPUSH
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 251
67431: PPUSH
67432: LD_INT 1
67434: PPUSH
67435: CALL_OW 453
67439: GO 67409
67441: POP
67442: POP
// end ;
67443: LD_VAR 0 2
67447: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67448: LD_INT 0
67450: PPUSH
67451: PPUSH
67452: PPUSH
67453: PPUSH
67454: PPUSH
67455: PPUSH
// if not unit or not enemy_unit then
67456: LD_VAR 0 1
67460: NOT
67461: IFTRUE 67470
67463: PUSH
67464: LD_VAR 0 2
67468: NOT
67469: OR
67470: IFFALSE 67474
// exit ;
67472: GO 67955
// if GetLives ( i ) < 250 then
67474: LD_VAR 0 4
67478: PPUSH
67479: CALL_OW 256
67483: PUSH
67484: LD_INT 250
67486: LESS
67487: IFFALSE 67500
// begin ComAutodestruct ( i ) ;
67489: LD_VAR 0 4
67493: PPUSH
67494: CALL 67344 0 1
// exit ;
67498: GO 67955
// end ; x := GetX ( enemy_unit ) ;
67500: LD_ADDR_VAR 0 7
67504: PUSH
67505: LD_VAR 0 2
67509: PPUSH
67510: CALL_OW 250
67514: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67515: LD_ADDR_VAR 0 8
67519: PUSH
67520: LD_VAR 0 2
67524: PPUSH
67525: CALL_OW 251
67529: ST_TO_ADDR
// if not x or not y then
67530: LD_VAR 0 7
67534: NOT
67535: IFTRUE 67544
67537: PUSH
67538: LD_VAR 0 8
67542: NOT
67543: OR
67544: IFFALSE 67548
// exit ;
67546: GO 67955
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67548: LD_ADDR_VAR 0 6
67552: PUSH
67553: LD_VAR 0 7
67557: PPUSH
67558: LD_INT 0
67560: PPUSH
67561: LD_INT 4
67563: PPUSH
67564: CALL_OW 272
67568: PUSH
67569: LD_VAR 0 8
67573: PPUSH
67574: LD_INT 0
67576: PPUSH
67577: LD_INT 4
67579: PPUSH
67580: CALL_OW 273
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_VAR 0 7
67593: PPUSH
67594: LD_INT 1
67596: PPUSH
67597: LD_INT 4
67599: PPUSH
67600: CALL_OW 272
67604: PUSH
67605: LD_VAR 0 8
67609: PPUSH
67610: LD_INT 1
67612: PPUSH
67613: LD_INT 4
67615: PPUSH
67616: CALL_OW 273
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_VAR 0 7
67629: PPUSH
67630: LD_INT 2
67632: PPUSH
67633: LD_INT 4
67635: PPUSH
67636: CALL_OW 272
67640: PUSH
67641: LD_VAR 0 8
67645: PPUSH
67646: LD_INT 2
67648: PPUSH
67649: LD_INT 4
67651: PPUSH
67652: CALL_OW 273
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_VAR 0 7
67665: PPUSH
67666: LD_INT 3
67668: PPUSH
67669: LD_INT 4
67671: PPUSH
67672: CALL_OW 272
67676: PUSH
67677: LD_VAR 0 8
67681: PPUSH
67682: LD_INT 3
67684: PPUSH
67685: LD_INT 4
67687: PPUSH
67688: CALL_OW 273
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_VAR 0 7
67701: PPUSH
67702: LD_INT 4
67704: PPUSH
67705: LD_INT 4
67707: PPUSH
67708: CALL_OW 272
67712: PUSH
67713: LD_VAR 0 8
67717: PPUSH
67718: LD_INT 4
67720: PPUSH
67721: LD_INT 4
67723: PPUSH
67724: CALL_OW 273
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_VAR 0 7
67737: PPUSH
67738: LD_INT 5
67740: PPUSH
67741: LD_INT 4
67743: PPUSH
67744: CALL_OW 272
67748: PUSH
67749: LD_VAR 0 8
67753: PPUSH
67754: LD_INT 5
67756: PPUSH
67757: LD_INT 4
67759: PPUSH
67760: CALL_OW 273
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: ST_TO_ADDR
// for i = tmp downto 1 do
67777: LD_ADDR_VAR 0 4
67781: PUSH
67782: DOUBLE
67783: LD_VAR 0 6
67787: INC
67788: ST_TO_ADDR
67789: LD_INT 1
67791: PUSH
67792: FOR_DOWNTO
67793: IFFALSE 67896
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67795: LD_VAR 0 6
67799: PUSH
67800: LD_VAR 0 4
67804: ARRAY
67805: PUSH
67806: LD_INT 1
67808: ARRAY
67809: PPUSH
67810: LD_VAR 0 6
67814: PUSH
67815: LD_VAR 0 4
67819: ARRAY
67820: PUSH
67821: LD_INT 2
67823: ARRAY
67824: PPUSH
67825: CALL_OW 488
67829: NOT
67830: IFTRUE 67872
67832: PUSH
67833: LD_VAR 0 6
67837: PUSH
67838: LD_VAR 0 4
67842: ARRAY
67843: PUSH
67844: LD_INT 1
67846: ARRAY
67847: PPUSH
67848: LD_VAR 0 6
67852: PUSH
67853: LD_VAR 0 4
67857: ARRAY
67858: PUSH
67859: LD_INT 2
67861: ARRAY
67862: PPUSH
67863: CALL_OW 428
67867: PUSH
67868: LD_INT 0
67870: NONEQUAL
67871: OR
67872: IFFALSE 67894
// tmp := Delete ( tmp , i ) ;
67874: LD_ADDR_VAR 0 6
67878: PUSH
67879: LD_VAR 0 6
67883: PPUSH
67884: LD_VAR 0 4
67888: PPUSH
67889: CALL_OW 3
67893: ST_TO_ADDR
67894: GO 67792
67896: POP
67897: POP
// j := GetClosestHex ( unit , tmp ) ;
67898: LD_ADDR_VAR 0 5
67902: PUSH
67903: LD_VAR 0 1
67907: PPUSH
67908: LD_VAR 0 6
67912: PPUSH
67913: CALL 67190 0 2
67917: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67918: LD_VAR 0 1
67922: PPUSH
67923: LD_VAR 0 5
67927: PUSH
67928: LD_INT 1
67930: ARRAY
67931: PPUSH
67932: LD_VAR 0 5
67936: PUSH
67937: LD_INT 2
67939: ARRAY
67940: PPUSH
67941: CALL_OW 111
// result := j ;
67945: LD_ADDR_VAR 0 3
67949: PUSH
67950: LD_VAR 0 5
67954: ST_TO_ADDR
// end ;
67955: LD_VAR 0 3
67959: RET
// export function PrepareApemanSoldier ( ) ; begin
67960: LD_INT 0
67962: PPUSH
// uc_nation := 0 ;
67963: LD_ADDR_OWVAR 21
67967: PUSH
67968: LD_INT 0
67970: ST_TO_ADDR
// hc_sex := sex_male ;
67971: LD_ADDR_OWVAR 27
67975: PUSH
67976: LD_INT 1
67978: ST_TO_ADDR
// hc_name :=  ;
67979: LD_ADDR_OWVAR 26
67983: PUSH
67984: LD_STRING 
67986: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67987: LD_ADDR_OWVAR 28
67991: PUSH
67992: LD_INT 15
67994: ST_TO_ADDR
// hc_gallery :=  ;
67995: LD_ADDR_OWVAR 33
67999: PUSH
68000: LD_STRING 
68002: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68003: LD_ADDR_OWVAR 31
68007: PUSH
68008: LD_INT 0
68010: PPUSH
68011: LD_INT 3
68013: PPUSH
68014: CALL_OW 12
68018: PUSH
68019: LD_INT 0
68021: PPUSH
68022: LD_INT 3
68024: PPUSH
68025: CALL_OW 12
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68042: LD_ADDR_OWVAR 29
68046: PUSH
68047: LD_INT 10
68049: PUSH
68050: LD_INT 12
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: ST_TO_ADDR
// end ;
68057: LD_VAR 0 1
68061: RET
// export function PrepareApemanEngineer ( ) ; begin
68062: LD_INT 0
68064: PPUSH
// uc_nation := 0 ;
68065: LD_ADDR_OWVAR 21
68069: PUSH
68070: LD_INT 0
68072: ST_TO_ADDR
// hc_sex := sex_male ;
68073: LD_ADDR_OWVAR 27
68077: PUSH
68078: LD_INT 1
68080: ST_TO_ADDR
// hc_name :=  ;
68081: LD_ADDR_OWVAR 26
68085: PUSH
68086: LD_STRING 
68088: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68089: LD_ADDR_OWVAR 28
68093: PUSH
68094: LD_INT 16
68096: ST_TO_ADDR
// hc_gallery :=  ;
68097: LD_ADDR_OWVAR 33
68101: PUSH
68102: LD_STRING 
68104: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68105: LD_ADDR_OWVAR 31
68109: PUSH
68110: LD_INT 0
68112: PPUSH
68113: LD_INT 3
68115: PPUSH
68116: CALL_OW 12
68120: PUSH
68121: LD_INT 0
68123: PPUSH
68124: LD_INT 3
68126: PPUSH
68127: CALL_OW 12
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68144: LD_ADDR_OWVAR 29
68148: PUSH
68149: LD_INT 10
68151: PUSH
68152: LD_INT 12
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: ST_TO_ADDR
// end ;
68159: LD_VAR 0 1
68163: RET
// export function PrepareApeman ( agressivity ) ; begin
68164: LD_INT 0
68166: PPUSH
// uc_side := 0 ;
68167: LD_ADDR_OWVAR 20
68171: PUSH
68172: LD_INT 0
68174: ST_TO_ADDR
// uc_nation := 0 ;
68175: LD_ADDR_OWVAR 21
68179: PUSH
68180: LD_INT 0
68182: ST_TO_ADDR
// hc_sex := sex_male ;
68183: LD_ADDR_OWVAR 27
68187: PUSH
68188: LD_INT 1
68190: ST_TO_ADDR
// hc_class := class_apeman ;
68191: LD_ADDR_OWVAR 28
68195: PUSH
68196: LD_INT 12
68198: ST_TO_ADDR
// hc_gallery :=  ;
68199: LD_ADDR_OWVAR 33
68203: PUSH
68204: LD_STRING 
68206: ST_TO_ADDR
// hc_name :=  ;
68207: LD_ADDR_OWVAR 26
68211: PUSH
68212: LD_STRING 
68214: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68215: LD_ADDR_OWVAR 29
68219: PUSH
68220: LD_INT 10
68222: PUSH
68223: LD_INT 12
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: ST_TO_ADDR
// if agressivity = 0 then
68230: LD_VAR 0 1
68234: PUSH
68235: LD_INT 0
68237: EQUAL
68238: IFFALSE 68250
// hc_agressivity := 0 else
68240: LD_ADDR_OWVAR 35
68244: PUSH
68245: LD_INT 0
68247: ST_TO_ADDR
68248: GO 68271
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68250: LD_ADDR_OWVAR 35
68254: PUSH
68255: LD_VAR 0 1
68259: NEG
68260: PPUSH
68261: LD_VAR 0 1
68265: PPUSH
68266: CALL_OW 12
68270: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68271: LD_ADDR_OWVAR 31
68275: PUSH
68276: LD_INT 0
68278: PPUSH
68279: LD_INT 3
68281: PPUSH
68282: CALL_OW 12
68286: PUSH
68287: LD_INT 0
68289: PPUSH
68290: LD_INT 3
68292: PPUSH
68293: CALL_OW 12
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: ST_TO_ADDR
// end ;
68310: LD_VAR 0 2
68314: RET
// export function PrepareTiger ( agressivity ) ; begin
68315: LD_INT 0
68317: PPUSH
// uc_side := 0 ;
68318: LD_ADDR_OWVAR 20
68322: PUSH
68323: LD_INT 0
68325: ST_TO_ADDR
// uc_nation := 0 ;
68326: LD_ADDR_OWVAR 21
68330: PUSH
68331: LD_INT 0
68333: ST_TO_ADDR
// InitHc ;
68334: CALL_OW 19
// hc_class := class_tiger ;
68338: LD_ADDR_OWVAR 28
68342: PUSH
68343: LD_INT 14
68345: ST_TO_ADDR
// hc_gallery :=  ;
68346: LD_ADDR_OWVAR 33
68350: PUSH
68351: LD_STRING 
68353: ST_TO_ADDR
// hc_name :=  ;
68354: LD_ADDR_OWVAR 26
68358: PUSH
68359: LD_STRING 
68361: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68362: LD_ADDR_OWVAR 35
68366: PUSH
68367: LD_VAR 0 1
68371: NEG
68372: PPUSH
68373: LD_VAR 0 1
68377: PPUSH
68378: CALL_OW 12
68382: ST_TO_ADDR
// end ;
68383: LD_VAR 0 2
68387: RET
// export function PrepareEnchidna ( ) ; begin
68388: LD_INT 0
68390: PPUSH
// uc_side := 0 ;
68391: LD_ADDR_OWVAR 20
68395: PUSH
68396: LD_INT 0
68398: ST_TO_ADDR
// uc_nation := 0 ;
68399: LD_ADDR_OWVAR 21
68403: PUSH
68404: LD_INT 0
68406: ST_TO_ADDR
// InitHc ;
68407: CALL_OW 19
// hc_class := class_baggie ;
68411: LD_ADDR_OWVAR 28
68415: PUSH
68416: LD_INT 13
68418: ST_TO_ADDR
// hc_gallery :=  ;
68419: LD_ADDR_OWVAR 33
68423: PUSH
68424: LD_STRING 
68426: ST_TO_ADDR
// hc_name :=  ;
68427: LD_ADDR_OWVAR 26
68431: PUSH
68432: LD_STRING 
68434: ST_TO_ADDR
// end ;
68435: LD_VAR 0 1
68439: RET
// export function PrepareFrog ( ) ; begin
68440: LD_INT 0
68442: PPUSH
// uc_side := 0 ;
68443: LD_ADDR_OWVAR 20
68447: PUSH
68448: LD_INT 0
68450: ST_TO_ADDR
// uc_nation := 0 ;
68451: LD_ADDR_OWVAR 21
68455: PUSH
68456: LD_INT 0
68458: ST_TO_ADDR
// InitHc ;
68459: CALL_OW 19
// hc_class := class_frog ;
68463: LD_ADDR_OWVAR 28
68467: PUSH
68468: LD_INT 19
68470: ST_TO_ADDR
// hc_gallery :=  ;
68471: LD_ADDR_OWVAR 33
68475: PUSH
68476: LD_STRING 
68478: ST_TO_ADDR
// hc_name :=  ;
68479: LD_ADDR_OWVAR 26
68483: PUSH
68484: LD_STRING 
68486: ST_TO_ADDR
// end ;
68487: LD_VAR 0 1
68491: RET
// export function PrepareFish ( ) ; begin
68492: LD_INT 0
68494: PPUSH
// uc_side := 0 ;
68495: LD_ADDR_OWVAR 20
68499: PUSH
68500: LD_INT 0
68502: ST_TO_ADDR
// uc_nation := 0 ;
68503: LD_ADDR_OWVAR 21
68507: PUSH
68508: LD_INT 0
68510: ST_TO_ADDR
// InitHc ;
68511: CALL_OW 19
// hc_class := class_fish ;
68515: LD_ADDR_OWVAR 28
68519: PUSH
68520: LD_INT 20
68522: ST_TO_ADDR
// hc_gallery :=  ;
68523: LD_ADDR_OWVAR 33
68527: PUSH
68528: LD_STRING 
68530: ST_TO_ADDR
// hc_name :=  ;
68531: LD_ADDR_OWVAR 26
68535: PUSH
68536: LD_STRING 
68538: ST_TO_ADDR
// end ;
68539: LD_VAR 0 1
68543: RET
// export function PrepareBird ( ) ; begin
68544: LD_INT 0
68546: PPUSH
// uc_side := 0 ;
68547: LD_ADDR_OWVAR 20
68551: PUSH
68552: LD_INT 0
68554: ST_TO_ADDR
// uc_nation := 0 ;
68555: LD_ADDR_OWVAR 21
68559: PUSH
68560: LD_INT 0
68562: ST_TO_ADDR
// InitHc ;
68563: CALL_OW 19
// hc_class := class_phororhacos ;
68567: LD_ADDR_OWVAR 28
68571: PUSH
68572: LD_INT 18
68574: ST_TO_ADDR
// hc_gallery :=  ;
68575: LD_ADDR_OWVAR 33
68579: PUSH
68580: LD_STRING 
68582: ST_TO_ADDR
// hc_name :=  ;
68583: LD_ADDR_OWVAR 26
68587: PUSH
68588: LD_STRING 
68590: ST_TO_ADDR
// end ;
68591: LD_VAR 0 1
68595: RET
// export function PrepareHorse ( ) ; begin
68596: LD_INT 0
68598: PPUSH
// uc_side := 0 ;
68599: LD_ADDR_OWVAR 20
68603: PUSH
68604: LD_INT 0
68606: ST_TO_ADDR
// uc_nation := 0 ;
68607: LD_ADDR_OWVAR 21
68611: PUSH
68612: LD_INT 0
68614: ST_TO_ADDR
// InitHc ;
68615: CALL_OW 19
// hc_class := class_horse ;
68619: LD_ADDR_OWVAR 28
68623: PUSH
68624: LD_INT 21
68626: ST_TO_ADDR
// hc_gallery :=  ;
68627: LD_ADDR_OWVAR 33
68631: PUSH
68632: LD_STRING 
68634: ST_TO_ADDR
// hc_name :=  ;
68635: LD_ADDR_OWVAR 26
68639: PUSH
68640: LD_STRING 
68642: ST_TO_ADDR
// end ;
68643: LD_VAR 0 1
68647: RET
// export function PrepareMastodont ( ) ; begin
68648: LD_INT 0
68650: PPUSH
// uc_side := 0 ;
68651: LD_ADDR_OWVAR 20
68655: PUSH
68656: LD_INT 0
68658: ST_TO_ADDR
// uc_nation := 0 ;
68659: LD_ADDR_OWVAR 21
68663: PUSH
68664: LD_INT 0
68666: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68667: LD_ADDR_OWVAR 37
68671: PUSH
68672: LD_INT 31
68674: ST_TO_ADDR
// vc_control := control_rider ;
68675: LD_ADDR_OWVAR 38
68679: PUSH
68680: LD_INT 4
68682: ST_TO_ADDR
// end ;
68683: LD_VAR 0 1
68687: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68688: LD_INT 0
68690: PPUSH
68691: PPUSH
68692: PPUSH
// uc_side = 0 ;
68693: LD_ADDR_OWVAR 20
68697: PUSH
68698: LD_INT 0
68700: ST_TO_ADDR
// uc_nation = 0 ;
68701: LD_ADDR_OWVAR 21
68705: PUSH
68706: LD_INT 0
68708: ST_TO_ADDR
// InitHc_All ( ) ;
68709: CALL_OW 584
// InitVc ;
68713: CALL_OW 20
// if mastodonts then
68717: LD_VAR 0 6
68721: IFFALSE 68788
// for i = 1 to mastodonts do
68723: LD_ADDR_VAR 0 11
68727: PUSH
68728: DOUBLE
68729: LD_INT 1
68731: DEC
68732: ST_TO_ADDR
68733: LD_VAR 0 6
68737: PUSH
68738: FOR_TO
68739: IFFALSE 68786
// begin vc_chassis := 31 ;
68741: LD_ADDR_OWVAR 37
68745: PUSH
68746: LD_INT 31
68748: ST_TO_ADDR
// vc_control := control_rider ;
68749: LD_ADDR_OWVAR 38
68753: PUSH
68754: LD_INT 4
68756: ST_TO_ADDR
// animal := CreateVehicle ;
68757: LD_ADDR_VAR 0 12
68761: PUSH
68762: CALL_OW 45
68766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68767: LD_VAR 0 12
68771: PPUSH
68772: LD_VAR 0 8
68776: PPUSH
68777: LD_INT 0
68779: PPUSH
68780: CALL 70930 0 3
// end ;
68784: GO 68738
68786: POP
68787: POP
// if horses then
68788: LD_VAR 0 5
68792: IFFALSE 68859
// for i = 1 to horses do
68794: LD_ADDR_VAR 0 11
68798: PUSH
68799: DOUBLE
68800: LD_INT 1
68802: DEC
68803: ST_TO_ADDR
68804: LD_VAR 0 5
68808: PUSH
68809: FOR_TO
68810: IFFALSE 68857
// begin hc_class := 21 ;
68812: LD_ADDR_OWVAR 28
68816: PUSH
68817: LD_INT 21
68819: ST_TO_ADDR
// hc_gallery :=  ;
68820: LD_ADDR_OWVAR 33
68824: PUSH
68825: LD_STRING 
68827: ST_TO_ADDR
// animal := CreateHuman ;
68828: LD_ADDR_VAR 0 12
68832: PUSH
68833: CALL_OW 44
68837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68838: LD_VAR 0 12
68842: PPUSH
68843: LD_VAR 0 8
68847: PPUSH
68848: LD_INT 0
68850: PPUSH
68851: CALL 70930 0 3
// end ;
68855: GO 68809
68857: POP
68858: POP
// if birds then
68859: LD_VAR 0 1
68863: IFFALSE 68930
// for i = 1 to birds do
68865: LD_ADDR_VAR 0 11
68869: PUSH
68870: DOUBLE
68871: LD_INT 1
68873: DEC
68874: ST_TO_ADDR
68875: LD_VAR 0 1
68879: PUSH
68880: FOR_TO
68881: IFFALSE 68928
// begin hc_class := 18 ;
68883: LD_ADDR_OWVAR 28
68887: PUSH
68888: LD_INT 18
68890: ST_TO_ADDR
// hc_gallery =  ;
68891: LD_ADDR_OWVAR 33
68895: PUSH
68896: LD_STRING 
68898: ST_TO_ADDR
// animal := CreateHuman ;
68899: LD_ADDR_VAR 0 12
68903: PUSH
68904: CALL_OW 44
68908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68909: LD_VAR 0 12
68913: PPUSH
68914: LD_VAR 0 8
68918: PPUSH
68919: LD_INT 0
68921: PPUSH
68922: CALL 70930 0 3
// end ;
68926: GO 68880
68928: POP
68929: POP
// if tigers then
68930: LD_VAR 0 2
68934: IFFALSE 69018
// for i = 1 to tigers do
68936: LD_ADDR_VAR 0 11
68940: PUSH
68941: DOUBLE
68942: LD_INT 1
68944: DEC
68945: ST_TO_ADDR
68946: LD_VAR 0 2
68950: PUSH
68951: FOR_TO
68952: IFFALSE 69016
// begin hc_class = class_tiger ;
68954: LD_ADDR_OWVAR 28
68958: PUSH
68959: LD_INT 14
68961: ST_TO_ADDR
// hc_gallery =  ;
68962: LD_ADDR_OWVAR 33
68966: PUSH
68967: LD_STRING 
68969: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68970: LD_ADDR_OWVAR 35
68974: PUSH
68975: LD_INT 7
68977: NEG
68978: PPUSH
68979: LD_INT 7
68981: PPUSH
68982: CALL_OW 12
68986: ST_TO_ADDR
// animal := CreateHuman ;
68987: LD_ADDR_VAR 0 12
68991: PUSH
68992: CALL_OW 44
68996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68997: LD_VAR 0 12
69001: PPUSH
69002: LD_VAR 0 8
69006: PPUSH
69007: LD_INT 0
69009: PPUSH
69010: CALL 70930 0 3
// end ;
69014: GO 68951
69016: POP
69017: POP
// if apemans then
69018: LD_VAR 0 3
69022: IFFALSE 69145
// for i = 1 to apemans do
69024: LD_ADDR_VAR 0 11
69028: PUSH
69029: DOUBLE
69030: LD_INT 1
69032: DEC
69033: ST_TO_ADDR
69034: LD_VAR 0 3
69038: PUSH
69039: FOR_TO
69040: IFFALSE 69143
// begin hc_class = class_apeman ;
69042: LD_ADDR_OWVAR 28
69046: PUSH
69047: LD_INT 12
69049: ST_TO_ADDR
// hc_gallery =  ;
69050: LD_ADDR_OWVAR 33
69054: PUSH
69055: LD_STRING 
69057: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69058: LD_ADDR_OWVAR 35
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PPUSH
69067: LD_INT 2
69069: PPUSH
69070: CALL_OW 12
69074: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69075: LD_ADDR_OWVAR 31
69079: PUSH
69080: LD_INT 1
69082: PPUSH
69083: LD_INT 3
69085: PPUSH
69086: CALL_OW 12
69090: PUSH
69091: LD_INT 1
69093: PPUSH
69094: LD_INT 3
69096: PPUSH
69097: CALL_OW 12
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: ST_TO_ADDR
// animal := CreateHuman ;
69114: LD_ADDR_VAR 0 12
69118: PUSH
69119: CALL_OW 44
69123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69124: LD_VAR 0 12
69128: PPUSH
69129: LD_VAR 0 8
69133: PPUSH
69134: LD_INT 0
69136: PPUSH
69137: CALL 70930 0 3
// end ;
69141: GO 69039
69143: POP
69144: POP
// if enchidnas then
69145: LD_VAR 0 4
69149: IFFALSE 69216
// for i = 1 to enchidnas do
69151: LD_ADDR_VAR 0 11
69155: PUSH
69156: DOUBLE
69157: LD_INT 1
69159: DEC
69160: ST_TO_ADDR
69161: LD_VAR 0 4
69165: PUSH
69166: FOR_TO
69167: IFFALSE 69214
// begin hc_class = 13 ;
69169: LD_ADDR_OWVAR 28
69173: PUSH
69174: LD_INT 13
69176: ST_TO_ADDR
// hc_gallery =  ;
69177: LD_ADDR_OWVAR 33
69181: PUSH
69182: LD_STRING 
69184: ST_TO_ADDR
// animal := CreateHuman ;
69185: LD_ADDR_VAR 0 12
69189: PUSH
69190: CALL_OW 44
69194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69195: LD_VAR 0 12
69199: PPUSH
69200: LD_VAR 0 8
69204: PPUSH
69205: LD_INT 0
69207: PPUSH
69208: CALL 70930 0 3
// end ;
69212: GO 69166
69214: POP
69215: POP
// if fishes then
69216: LD_VAR 0 7
69220: IFFALSE 69287
// for i = 1 to fishes do
69222: LD_ADDR_VAR 0 11
69226: PUSH
69227: DOUBLE
69228: LD_INT 1
69230: DEC
69231: ST_TO_ADDR
69232: LD_VAR 0 7
69236: PUSH
69237: FOR_TO
69238: IFFALSE 69285
// begin hc_class = 20 ;
69240: LD_ADDR_OWVAR 28
69244: PUSH
69245: LD_INT 20
69247: ST_TO_ADDR
// hc_gallery =  ;
69248: LD_ADDR_OWVAR 33
69252: PUSH
69253: LD_STRING 
69255: ST_TO_ADDR
// animal := CreateHuman ;
69256: LD_ADDR_VAR 0 12
69260: PUSH
69261: CALL_OW 44
69265: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69266: LD_VAR 0 12
69270: PPUSH
69271: LD_VAR 0 9
69275: PPUSH
69276: LD_INT 0
69278: PPUSH
69279: CALL 70930 0 3
// end ;
69283: GO 69237
69285: POP
69286: POP
// end ;
69287: LD_VAR 0 10
69291: RET
// export function WantHeal ( sci , unit ) ; begin
69292: LD_INT 0
69294: PPUSH
// if GetTaskList ( sci ) > 0 then
69295: LD_VAR 0 1
69299: PPUSH
69300: CALL_OW 437
69304: PUSH
69305: LD_INT 0
69307: GREATER
69308: IFFALSE 69380
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69310: LD_VAR 0 1
69314: PPUSH
69315: CALL_OW 437
69319: PUSH
69320: LD_INT 1
69322: ARRAY
69323: PUSH
69324: LD_INT 1
69326: ARRAY
69327: PUSH
69328: LD_STRING l
69330: EQUAL
69331: IFFALSE 69358
69333: PUSH
69334: LD_VAR 0 1
69338: PPUSH
69339: CALL_OW 437
69343: PUSH
69344: LD_INT 1
69346: ARRAY
69347: PUSH
69348: LD_INT 4
69350: ARRAY
69351: PUSH
69352: LD_VAR 0 2
69356: EQUAL
69357: AND
69358: IFFALSE 69370
// result := true else
69360: LD_ADDR_VAR 0 3
69364: PUSH
69365: LD_INT 1
69367: ST_TO_ADDR
69368: GO 69378
// result := false ;
69370: LD_ADDR_VAR 0 3
69374: PUSH
69375: LD_INT 0
69377: ST_TO_ADDR
// end else
69378: GO 69388
// result := false ;
69380: LD_ADDR_VAR 0 3
69384: PUSH
69385: LD_INT 0
69387: ST_TO_ADDR
// end ;
69388: LD_VAR 0 3
69392: RET
// export function HealTarget ( sci ) ; begin
69393: LD_INT 0
69395: PPUSH
// if not sci then
69396: LD_VAR 0 1
69400: NOT
69401: IFFALSE 69405
// exit ;
69403: GO 69470
// result := 0 ;
69405: LD_ADDR_VAR 0 2
69409: PUSH
69410: LD_INT 0
69412: ST_TO_ADDR
// if GetTaskList ( sci ) then
69413: LD_VAR 0 1
69417: PPUSH
69418: CALL_OW 437
69422: IFFALSE 69470
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69424: LD_VAR 0 1
69428: PPUSH
69429: CALL_OW 437
69433: PUSH
69434: LD_INT 1
69436: ARRAY
69437: PUSH
69438: LD_INT 1
69440: ARRAY
69441: PUSH
69442: LD_STRING l
69444: EQUAL
69445: IFFALSE 69470
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69447: LD_ADDR_VAR 0 2
69451: PUSH
69452: LD_VAR 0 1
69456: PPUSH
69457: CALL_OW 437
69461: PUSH
69462: LD_INT 1
69464: ARRAY
69465: PUSH
69466: LD_INT 4
69468: ARRAY
69469: ST_TO_ADDR
// end ;
69470: LD_VAR 0 2
69474: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69475: LD_INT 0
69477: PPUSH
69478: PPUSH
69479: PPUSH
69480: PPUSH
// if not base_units then
69481: LD_VAR 0 1
69485: NOT
69486: IFFALSE 69490
// exit ;
69488: GO 69577
// result := false ;
69490: LD_ADDR_VAR 0 2
69494: PUSH
69495: LD_INT 0
69497: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69498: LD_ADDR_VAR 0 5
69502: PUSH
69503: LD_VAR 0 1
69507: PPUSH
69508: LD_INT 21
69510: PUSH
69511: LD_INT 3
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PPUSH
69518: CALL_OW 72
69522: ST_TO_ADDR
// if not tmp then
69523: LD_VAR 0 5
69527: NOT
69528: IFFALSE 69532
// exit ;
69530: GO 69577
// for i in tmp do
69532: LD_ADDR_VAR 0 3
69536: PUSH
69537: LD_VAR 0 5
69541: PUSH
69542: FOR_IN
69543: IFFALSE 69575
// begin result := EnemyInRange ( i , 22 ) ;
69545: LD_ADDR_VAR 0 2
69549: PUSH
69550: LD_VAR 0 3
69554: PPUSH
69555: LD_INT 22
69557: PPUSH
69558: CALL 66992 0 2
69562: ST_TO_ADDR
// if result then
69563: LD_VAR 0 2
69567: IFFALSE 69573
// exit ;
69569: POP
69570: POP
69571: GO 69577
// end ;
69573: GO 69542
69575: POP
69576: POP
// end ;
69577: LD_VAR 0 2
69581: RET
// export function FilterByTag ( units , tag ) ; begin
69582: LD_INT 0
69584: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69585: LD_ADDR_VAR 0 3
69589: PUSH
69590: LD_VAR 0 1
69594: PPUSH
69595: LD_INT 120
69597: PUSH
69598: LD_VAR 0 2
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PPUSH
69607: CALL_OW 72
69611: ST_TO_ADDR
// end ;
69612: LD_VAR 0 3
69616: RET
// export function IsDriver ( un ) ; begin
69617: LD_INT 0
69619: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69620: LD_ADDR_VAR 0 2
69624: PUSH
69625: LD_VAR 0 1
69629: PUSH
69630: LD_INT 55
69632: PUSH
69633: EMPTY
69634: LIST
69635: PPUSH
69636: CALL_OW 69
69640: IN
69641: ST_TO_ADDR
// end ;
69642: LD_VAR 0 2
69646: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69647: LD_INT 0
69649: PPUSH
69650: PPUSH
// list := [ ] ;
69651: LD_ADDR_VAR 0 5
69655: PUSH
69656: EMPTY
69657: ST_TO_ADDR
// case d of 0 :
69658: LD_VAR 0 3
69662: PUSH
69663: LD_INT 0
69665: DOUBLE
69666: EQUAL
69667: IFTRUE 69671
69669: GO 69804
69671: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69672: LD_ADDR_VAR 0 5
69676: PUSH
69677: LD_VAR 0 1
69681: PUSH
69682: LD_INT 4
69684: MINUS
69685: PUSH
69686: LD_VAR 0 2
69690: PUSH
69691: LD_INT 4
69693: MINUS
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: LIST
69702: PUSH
69703: LD_VAR 0 1
69707: PUSH
69708: LD_INT 3
69710: MINUS
69711: PUSH
69712: LD_VAR 0 2
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: PUSH
69725: LD_VAR 0 1
69729: PUSH
69730: LD_INT 4
69732: PLUS
69733: PUSH
69734: LD_VAR 0 2
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: PUSH
69747: LD_VAR 0 1
69751: PUSH
69752: LD_INT 3
69754: PLUS
69755: PUSH
69756: LD_VAR 0 2
69760: PUSH
69761: LD_INT 3
69763: PLUS
69764: PUSH
69765: LD_INT 5
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: PUSH
69773: LD_VAR 0 1
69777: PUSH
69778: LD_VAR 0 2
69782: PUSH
69783: LD_INT 4
69785: PLUS
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: LIST
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: ST_TO_ADDR
// end ; 1 :
69802: GO 70502
69804: LD_INT 1
69806: DOUBLE
69807: EQUAL
69808: IFTRUE 69812
69810: GO 69945
69812: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69813: LD_ADDR_VAR 0 5
69817: PUSH
69818: LD_VAR 0 1
69822: PUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_INT 4
69830: MINUS
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: PUSH
69840: LD_VAR 0 1
69844: PUSH
69845: LD_INT 3
69847: MINUS
69848: PUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 3
69856: MINUS
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: PUSH
69866: LD_VAR 0 1
69870: PUSH
69871: LD_INT 4
69873: MINUS
69874: PUSH
69875: LD_VAR 0 2
69879: PUSH
69880: LD_INT 1
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: PUSH
69888: LD_VAR 0 1
69892: PUSH
69893: LD_VAR 0 2
69897: PUSH
69898: LD_INT 3
69900: PLUS
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: PUSH
69910: LD_VAR 0 1
69914: PUSH
69915: LD_INT 4
69917: PLUS
69918: PUSH
69919: LD_VAR 0 2
69923: PUSH
69924: LD_INT 4
69926: PLUS
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: ST_TO_ADDR
// end ; 2 :
69943: GO 70502
69945: LD_INT 2
69947: DOUBLE
69948: EQUAL
69949: IFTRUE 69953
69951: GO 70082
69953: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69954: LD_ADDR_VAR 0 5
69958: PUSH
69959: LD_VAR 0 1
69963: PUSH
69964: LD_VAR 0 2
69968: PUSH
69969: LD_INT 3
69971: MINUS
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: LIST
69980: PUSH
69981: LD_VAR 0 1
69985: PUSH
69986: LD_INT 4
69988: PLUS
69989: PUSH
69990: LD_VAR 0 2
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: LIST
70002: PUSH
70003: LD_VAR 0 1
70007: PUSH
70008: LD_VAR 0 2
70012: PUSH
70013: LD_INT 4
70015: PLUS
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: LIST
70024: PUSH
70025: LD_VAR 0 1
70029: PUSH
70030: LD_INT 3
70032: MINUS
70033: PUSH
70034: LD_VAR 0 2
70038: PUSH
70039: LD_INT 1
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: LIST
70046: PUSH
70047: LD_VAR 0 1
70051: PUSH
70052: LD_INT 4
70054: MINUS
70055: PUSH
70056: LD_VAR 0 2
70060: PUSH
70061: LD_INT 4
70063: MINUS
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: ST_TO_ADDR
// end ; 3 :
70080: GO 70502
70082: LD_INT 3
70084: DOUBLE
70085: EQUAL
70086: IFTRUE 70090
70088: GO 70223
70090: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: LD_VAR 0 1
70100: PUSH
70101: LD_INT 3
70103: PLUS
70104: PUSH
70105: LD_VAR 0 2
70109: PUSH
70110: LD_INT 4
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: PUSH
70118: LD_VAR 0 1
70122: PUSH
70123: LD_INT 4
70125: PLUS
70126: PUSH
70127: LD_VAR 0 2
70131: PUSH
70132: LD_INT 4
70134: PLUS
70135: PUSH
70136: LD_INT 5
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: PUSH
70144: LD_VAR 0 1
70148: PUSH
70149: LD_INT 4
70151: MINUS
70152: PUSH
70153: LD_VAR 0 2
70157: PUSH
70158: LD_INT 1
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PUSH
70166: LD_VAR 0 1
70170: PUSH
70171: LD_VAR 0 2
70175: PUSH
70176: LD_INT 4
70178: MINUS
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: PUSH
70188: LD_VAR 0 1
70192: PUSH
70193: LD_INT 3
70195: MINUS
70196: PUSH
70197: LD_VAR 0 2
70201: PUSH
70202: LD_INT 3
70204: MINUS
70205: PUSH
70206: LD_INT 2
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: LIST
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: ST_TO_ADDR
// end ; 4 :
70221: GO 70502
70223: LD_INT 4
70225: DOUBLE
70226: EQUAL
70227: IFTRUE 70231
70229: GO 70364
70231: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70232: LD_ADDR_VAR 0 5
70236: PUSH
70237: LD_VAR 0 1
70241: PUSH
70242: LD_VAR 0 2
70246: PUSH
70247: LD_INT 4
70249: PLUS
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: LIST
70258: PUSH
70259: LD_VAR 0 1
70263: PUSH
70264: LD_INT 3
70266: PLUS
70267: PUSH
70268: LD_VAR 0 2
70272: PUSH
70273: LD_INT 3
70275: PLUS
70276: PUSH
70277: LD_INT 5
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: LIST
70284: PUSH
70285: LD_VAR 0 1
70289: PUSH
70290: LD_INT 4
70292: PLUS
70293: PUSH
70294: LD_VAR 0 2
70298: PUSH
70299: LD_INT 4
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: PUSH
70307: LD_VAR 0 1
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: LD_INT 3
70319: MINUS
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: PUSH
70329: LD_VAR 0 1
70333: PUSH
70334: LD_INT 4
70336: MINUS
70337: PUSH
70338: LD_VAR 0 2
70342: PUSH
70343: LD_INT 4
70345: MINUS
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: ST_TO_ADDR
// end ; 5 :
70362: GO 70502
70364: LD_INT 5
70366: DOUBLE
70367: EQUAL
70368: IFTRUE 70372
70370: GO 70501
70372: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70373: LD_ADDR_VAR 0 5
70377: PUSH
70378: LD_VAR 0 1
70382: PUSH
70383: LD_INT 4
70385: MINUS
70386: PUSH
70387: LD_VAR 0 2
70391: PUSH
70392: LD_INT 1
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: LIST
70399: PUSH
70400: LD_VAR 0 1
70404: PUSH
70405: LD_VAR 0 2
70409: PUSH
70410: LD_INT 4
70412: MINUS
70413: PUSH
70414: LD_INT 3
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: LIST
70421: PUSH
70422: LD_VAR 0 1
70426: PUSH
70427: LD_INT 4
70429: PLUS
70430: PUSH
70431: LD_VAR 0 2
70435: PUSH
70436: LD_INT 4
70438: PLUS
70439: PUSH
70440: LD_INT 5
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: LIST
70447: PUSH
70448: LD_VAR 0 1
70452: PUSH
70453: LD_INT 3
70455: PLUS
70456: PUSH
70457: LD_VAR 0 2
70461: PUSH
70462: LD_INT 4
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: PUSH
70470: LD_VAR 0 1
70474: PUSH
70475: LD_VAR 0 2
70479: PUSH
70480: LD_INT 3
70482: PLUS
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: ST_TO_ADDR
// end ; end ;
70499: GO 70502
70501: POP
// result := list ;
70502: LD_ADDR_VAR 0 4
70506: PUSH
70507: LD_VAR 0 5
70511: ST_TO_ADDR
// end ;
70512: LD_VAR 0 4
70516: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70517: LD_INT 0
70519: PPUSH
70520: PPUSH
70521: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70522: LD_VAR 0 1
70526: NOT
70527: IFTRUE 70555
70529: PUSH
70530: LD_VAR 0 2
70534: PUSH
70535: LD_INT 1
70537: PUSH
70538: LD_INT 2
70540: PUSH
70541: LD_INT 3
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: IN
70553: NOT
70554: OR
70555: IFFALSE 70559
// exit ;
70557: GO 70642
// tmp := [ ] ;
70559: LD_ADDR_VAR 0 5
70563: PUSH
70564: EMPTY
70565: ST_TO_ADDR
// for i in units do
70566: LD_ADDR_VAR 0 4
70570: PUSH
70571: LD_VAR 0 1
70575: PUSH
70576: FOR_IN
70577: IFFALSE 70611
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70579: LD_ADDR_VAR 0 5
70583: PUSH
70584: LD_VAR 0 5
70588: PPUSH
70589: LD_VAR 0 4
70593: PPUSH
70594: LD_VAR 0 2
70598: PPUSH
70599: CALL_OW 259
70603: PPUSH
70604: CALL 72037 0 2
70608: ST_TO_ADDR
70609: GO 70576
70611: POP
70612: POP
// if not tmp then
70613: LD_VAR 0 5
70617: NOT
70618: IFFALSE 70622
// exit ;
70620: GO 70642
// result := SortListByListDesc ( units , tmp ) ;
70622: LD_ADDR_VAR 0 3
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_VAR 0 5
70636: PPUSH
70637: CALL_OW 77
70641: ST_TO_ADDR
// end ;
70642: LD_VAR 0 3
70646: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70647: LD_INT 0
70649: PPUSH
70650: PPUSH
70651: PPUSH
// result := false ;
70652: LD_ADDR_VAR 0 3
70656: PUSH
70657: LD_INT 0
70659: ST_TO_ADDR
// if not building then
70660: LD_VAR 0 2
70664: NOT
70665: IFFALSE 70669
// exit ;
70667: GO 70813
// x := GetX ( building ) ;
70669: LD_ADDR_VAR 0 4
70673: PUSH
70674: LD_VAR 0 2
70678: PPUSH
70679: CALL_OW 250
70683: ST_TO_ADDR
// y := GetY ( building ) ;
70684: LD_ADDR_VAR 0 5
70688: PUSH
70689: LD_VAR 0 2
70693: PPUSH
70694: CALL_OW 251
70698: ST_TO_ADDR
// if not x or not y then
70699: LD_VAR 0 4
70703: NOT
70704: IFTRUE 70713
70706: PUSH
70707: LD_VAR 0 5
70711: NOT
70712: OR
70713: IFFALSE 70717
// exit ;
70715: GO 70813
// if GetTaskList ( unit ) then
70717: LD_VAR 0 1
70721: PPUSH
70722: CALL_OW 437
70726: IFFALSE 70813
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70728: LD_STRING e
70730: PUSH
70731: LD_VAR 0 1
70735: PPUSH
70736: CALL_OW 437
70740: PUSH
70741: LD_INT 1
70743: ARRAY
70744: PUSH
70745: LD_INT 1
70747: ARRAY
70748: EQUAL
70749: IFFALSE 70776
70751: PUSH
70752: LD_VAR 0 4
70756: PUSH
70757: LD_VAR 0 1
70761: PPUSH
70762: CALL_OW 437
70766: PUSH
70767: LD_INT 1
70769: ARRAY
70770: PUSH
70771: LD_INT 2
70773: ARRAY
70774: EQUAL
70775: AND
70776: IFFALSE 70803
70778: PUSH
70779: LD_VAR 0 5
70783: PUSH
70784: LD_VAR 0 1
70788: PPUSH
70789: CALL_OW 437
70793: PUSH
70794: LD_INT 1
70796: ARRAY
70797: PUSH
70798: LD_INT 3
70800: ARRAY
70801: EQUAL
70802: AND
70803: IFFALSE 70813
// result := true end ;
70805: LD_ADDR_VAR 0 3
70809: PUSH
70810: LD_INT 1
70812: ST_TO_ADDR
// end ;
70813: LD_VAR 0 3
70817: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70818: LD_INT 0
70820: PPUSH
// result := false ;
70821: LD_ADDR_VAR 0 4
70825: PUSH
70826: LD_INT 0
70828: ST_TO_ADDR
// if GetTaskList ( unit ) then
70829: LD_VAR 0 1
70833: PPUSH
70834: CALL_OW 437
70838: IFFALSE 70925
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70840: LD_STRING M
70842: PUSH
70843: LD_VAR 0 1
70847: PPUSH
70848: CALL_OW 437
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PUSH
70857: LD_INT 1
70859: ARRAY
70860: EQUAL
70861: IFFALSE 70888
70863: PUSH
70864: LD_VAR 0 2
70868: PUSH
70869: LD_VAR 0 1
70873: PPUSH
70874: CALL_OW 437
70878: PUSH
70879: LD_INT 1
70881: ARRAY
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: EQUAL
70887: AND
70888: IFFALSE 70915
70890: PUSH
70891: LD_VAR 0 3
70895: PUSH
70896: LD_VAR 0 1
70900: PPUSH
70901: CALL_OW 437
70905: PUSH
70906: LD_INT 1
70908: ARRAY
70909: PUSH
70910: LD_INT 3
70912: ARRAY
70913: EQUAL
70914: AND
70915: IFFALSE 70925
// result := true ;
70917: LD_ADDR_VAR 0 4
70921: PUSH
70922: LD_INT 1
70924: ST_TO_ADDR
// end ; end ;
70925: LD_VAR 0 4
70929: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70930: LD_INT 0
70932: PPUSH
70933: PPUSH
70934: PPUSH
70935: PPUSH
// if not unit or not area then
70936: LD_VAR 0 1
70940: NOT
70941: IFTRUE 70950
70943: PUSH
70944: LD_VAR 0 2
70948: NOT
70949: OR
70950: IFFALSE 70954
// exit ;
70952: GO 71130
// tmp := AreaToList ( area , i ) ;
70954: LD_ADDR_VAR 0 6
70958: PUSH
70959: LD_VAR 0 2
70963: PPUSH
70964: LD_VAR 0 5
70968: PPUSH
70969: CALL_OW 517
70973: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70974: LD_ADDR_VAR 0 5
70978: PUSH
70979: DOUBLE
70980: LD_INT 1
70982: DEC
70983: ST_TO_ADDR
70984: LD_VAR 0 6
70988: PUSH
70989: LD_INT 1
70991: ARRAY
70992: PUSH
70993: FOR_TO
70994: IFFALSE 71128
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70996: LD_ADDR_VAR 0 7
71000: PUSH
71001: LD_VAR 0 6
71005: PUSH
71006: LD_INT 1
71008: ARRAY
71009: PUSH
71010: LD_VAR 0 5
71014: ARRAY
71015: PUSH
71016: LD_VAR 0 6
71020: PUSH
71021: LD_INT 2
71023: ARRAY
71024: PUSH
71025: LD_VAR 0 5
71029: ARRAY
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
71035: LD_INT 92
71037: PUSH
71038: LD_VAR 0 7
71042: PUSH
71043: LD_INT 1
71045: ARRAY
71046: PUSH
71047: LD_VAR 0 7
71051: PUSH
71052: LD_INT 2
71054: ARRAY
71055: PUSH
71056: LD_INT 2
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: PPUSH
71065: CALL_OW 69
71069: PUSH
71070: LD_INT 0
71072: EQUAL
71073: IFFALSE 71126
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71075: LD_VAR 0 1
71079: PPUSH
71080: LD_VAR 0 7
71084: PUSH
71085: LD_INT 1
71087: ARRAY
71088: PPUSH
71089: LD_VAR 0 7
71093: PUSH
71094: LD_INT 2
71096: ARRAY
71097: PPUSH
71098: LD_VAR 0 3
71102: PPUSH
71103: CALL_OW 48
// result := IsPlaced ( unit ) ;
71107: LD_ADDR_VAR 0 4
71111: PUSH
71112: LD_VAR 0 1
71116: PPUSH
71117: CALL_OW 305
71121: ST_TO_ADDR
// exit ;
71122: POP
71123: POP
71124: GO 71130
// end ; end ;
71126: GO 70993
71128: POP
71129: POP
// end ;
71130: LD_VAR 0 4
71134: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71135: LD_INT 0
71137: PPUSH
71138: PPUSH
71139: PPUSH
// if not side or side > 8 then
71140: LD_VAR 0 1
71144: NOT
71145: IFTRUE 71157
71147: PUSH
71148: LD_VAR 0 1
71152: PUSH
71153: LD_INT 8
71155: GREATER
71156: OR
71157: IFFALSE 71161
// exit ;
71159: GO 71348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71161: LD_ADDR_VAR 0 4
71165: PUSH
71166: LD_INT 22
71168: PUSH
71169: LD_VAR 0 1
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 21
71180: PUSH
71181: LD_INT 3
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PPUSH
71192: CALL_OW 69
71196: ST_TO_ADDR
// if not tmp then
71197: LD_VAR 0 4
71201: NOT
71202: IFFALSE 71206
// exit ;
71204: GO 71348
// enable_addtolog := true ;
71206: LD_ADDR_OWVAR 81
71210: PUSH
71211: LD_INT 1
71213: ST_TO_ADDR
// AddToLog ( [ ) ;
71214: LD_STRING [
71216: PPUSH
71217: CALL_OW 561
// for i in tmp do
71221: LD_ADDR_VAR 0 3
71225: PUSH
71226: LD_VAR 0 4
71230: PUSH
71231: FOR_IN
71232: IFFALSE 71339
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71234: LD_STRING [
71236: PUSH
71237: LD_VAR 0 3
71241: PPUSH
71242: CALL_OW 266
71246: STR
71247: PUSH
71248: LD_STRING , 
71250: STR
71251: PUSH
71252: LD_VAR 0 3
71256: PPUSH
71257: CALL_OW 250
71261: STR
71262: PUSH
71263: LD_STRING , 
71265: STR
71266: PUSH
71267: LD_VAR 0 3
71271: PPUSH
71272: CALL_OW 251
71276: STR
71277: PUSH
71278: LD_STRING , 
71280: STR
71281: PUSH
71282: LD_VAR 0 3
71286: PPUSH
71287: CALL_OW 254
71291: STR
71292: PUSH
71293: LD_STRING , 
71295: STR
71296: PUSH
71297: LD_VAR 0 3
71301: PPUSH
71302: LD_INT 1
71304: PPUSH
71305: CALL_OW 268
71309: STR
71310: PUSH
71311: LD_STRING , 
71313: STR
71314: PUSH
71315: LD_VAR 0 3
71319: PPUSH
71320: LD_INT 2
71322: PPUSH
71323: CALL_OW 268
71327: STR
71328: PUSH
71329: LD_STRING ],
71331: STR
71332: PPUSH
71333: CALL_OW 561
// end ;
71337: GO 71231
71339: POP
71340: POP
// AddToLog ( ]; ) ;
71341: LD_STRING ];
71343: PPUSH
71344: CALL_OW 561
// end ;
71348: LD_VAR 0 2
71352: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71353: LD_INT 0
71355: PPUSH
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
// if not area or not rate or not max then
71360: LD_VAR 0 1
71364: NOT
71365: IFTRUE 71374
71367: PUSH
71368: LD_VAR 0 2
71372: NOT
71373: OR
71374: IFTRUE 71383
71376: PUSH
71377: LD_VAR 0 4
71381: NOT
71382: OR
71383: IFFALSE 71387
// exit ;
71385: GO 71576
// while 1 do
71387: LD_INT 1
71389: IFFALSE 71576
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71391: LD_ADDR_VAR 0 9
71395: PUSH
71396: LD_VAR 0 1
71400: PPUSH
71401: LD_INT 1
71403: PPUSH
71404: CALL_OW 287
71408: PUSH
71409: LD_INT 10
71411: MUL
71412: ST_TO_ADDR
// r := rate / 10 ;
71413: LD_ADDR_VAR 0 7
71417: PUSH
71418: LD_VAR 0 2
71422: PUSH
71423: LD_INT 10
71425: DIVREAL
71426: ST_TO_ADDR
// time := 1 1$00 ;
71427: LD_ADDR_VAR 0 8
71431: PUSH
71432: LD_INT 2100
71434: ST_TO_ADDR
// if amount < min then
71435: LD_VAR 0 9
71439: PUSH
71440: LD_VAR 0 3
71444: LESS
71445: IFFALSE 71463
// r := r * 2 else
71447: LD_ADDR_VAR 0 7
71451: PUSH
71452: LD_VAR 0 7
71456: PUSH
71457: LD_INT 2
71459: MUL
71460: ST_TO_ADDR
71461: GO 71489
// if amount > max then
71463: LD_VAR 0 9
71467: PUSH
71468: LD_VAR 0 4
71472: GREATER
71473: IFFALSE 71489
// r := r / 2 ;
71475: LD_ADDR_VAR 0 7
71479: PUSH
71480: LD_VAR 0 7
71484: PUSH
71485: LD_INT 2
71487: DIVREAL
71488: ST_TO_ADDR
// time := time / r ;
71489: LD_ADDR_VAR 0 8
71493: PUSH
71494: LD_VAR 0 8
71498: PUSH
71499: LD_VAR 0 7
71503: DIVREAL
71504: ST_TO_ADDR
// if time < 0 then
71505: LD_VAR 0 8
71509: PUSH
71510: LD_INT 0
71512: LESS
71513: IFFALSE 71530
// time := time * - 1 ;
71515: LD_ADDR_VAR 0 8
71519: PUSH
71520: LD_VAR 0 8
71524: PUSH
71525: LD_INT 1
71527: NEG
71528: MUL
71529: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71530: LD_VAR 0 8
71534: PUSH
71535: LD_INT 35
71537: PPUSH
71538: LD_INT 875
71540: PPUSH
71541: CALL_OW 12
71545: PLUS
71546: PPUSH
71547: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71551: LD_INT 1
71553: PPUSH
71554: LD_INT 5
71556: PPUSH
71557: CALL_OW 12
71561: PPUSH
71562: LD_VAR 0 1
71566: PPUSH
71567: LD_INT 1
71569: PPUSH
71570: CALL_OW 55
// end ;
71574: GO 71387
// end ;
71576: LD_VAR 0 5
71580: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71581: LD_INT 0
71583: PPUSH
71584: PPUSH
71585: PPUSH
71586: PPUSH
71587: PPUSH
71588: PPUSH
71589: PPUSH
71590: PPUSH
// if not turrets or not factories then
71591: LD_VAR 0 1
71595: NOT
71596: IFTRUE 71605
71598: PUSH
71599: LD_VAR 0 2
71603: NOT
71604: OR
71605: IFFALSE 71609
// exit ;
71607: GO 71916
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71609: LD_ADDR_VAR 0 10
71613: PUSH
71614: LD_INT 5
71616: PUSH
71617: LD_INT 6
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 2
71626: PUSH
71627: LD_INT 4
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 3
71636: PUSH
71637: LD_INT 5
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 24
71651: PUSH
71652: LD_INT 25
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 23
71661: PUSH
71662: LD_INT 27
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 42
71675: PUSH
71676: LD_INT 43
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 44
71685: PUSH
71686: LD_INT 46
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 45
71695: PUSH
71696: LD_INT 47
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: LIST
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: LIST
71712: ST_TO_ADDR
// result := [ ] ;
71713: LD_ADDR_VAR 0 3
71717: PUSH
71718: EMPTY
71719: ST_TO_ADDR
// for i in turrets do
71720: LD_ADDR_VAR 0 4
71724: PUSH
71725: LD_VAR 0 1
71729: PUSH
71730: FOR_IN
71731: IFFALSE 71914
// begin nat := GetNation ( i ) ;
71733: LD_ADDR_VAR 0 7
71737: PUSH
71738: LD_VAR 0 4
71742: PPUSH
71743: CALL_OW 248
71747: ST_TO_ADDR
// weapon := 0 ;
71748: LD_ADDR_VAR 0 8
71752: PUSH
71753: LD_INT 0
71755: ST_TO_ADDR
// if not nat then
71756: LD_VAR 0 7
71760: NOT
71761: IFFALSE 71765
// continue ;
71763: GO 71730
// for j in list [ nat ] do
71765: LD_ADDR_VAR 0 5
71769: PUSH
71770: LD_VAR 0 10
71774: PUSH
71775: LD_VAR 0 7
71779: ARRAY
71780: PUSH
71781: FOR_IN
71782: IFFALSE 71823
// if GetBWeapon ( i ) = j [ 1 ] then
71784: LD_VAR 0 4
71788: PPUSH
71789: CALL_OW 269
71793: PUSH
71794: LD_VAR 0 5
71798: PUSH
71799: LD_INT 1
71801: ARRAY
71802: EQUAL
71803: IFFALSE 71821
// begin weapon := j [ 2 ] ;
71805: LD_ADDR_VAR 0 8
71809: PUSH
71810: LD_VAR 0 5
71814: PUSH
71815: LD_INT 2
71817: ARRAY
71818: ST_TO_ADDR
// break ;
71819: GO 71823
// end ;
71821: GO 71781
71823: POP
71824: POP
// if not weapon then
71825: LD_VAR 0 8
71829: NOT
71830: IFFALSE 71834
// continue ;
71832: GO 71730
// for k in factories do
71834: LD_ADDR_VAR 0 6
71838: PUSH
71839: LD_VAR 0 2
71843: PUSH
71844: FOR_IN
71845: IFFALSE 71910
// begin weapons := AvailableWeaponList ( k ) ;
71847: LD_ADDR_VAR 0 9
71851: PUSH
71852: LD_VAR 0 6
71856: PPUSH
71857: CALL_OW 478
71861: ST_TO_ADDR
// if not weapons then
71862: LD_VAR 0 9
71866: NOT
71867: IFFALSE 71871
// continue ;
71869: GO 71844
// if weapon in weapons then
71871: LD_VAR 0 8
71875: PUSH
71876: LD_VAR 0 9
71880: IN
71881: IFFALSE 71908
// begin result := [ i , weapon ] ;
71883: LD_ADDR_VAR 0 3
71887: PUSH
71888: LD_VAR 0 4
71892: PUSH
71893: LD_VAR 0 8
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: ST_TO_ADDR
// exit ;
71902: POP
71903: POP
71904: POP
71905: POP
71906: GO 71916
// end ; end ;
71908: GO 71844
71910: POP
71911: POP
// end ;
71912: GO 71730
71914: POP
71915: POP
// end ;
71916: LD_VAR 0 3
71920: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71921: LD_INT 0
71923: PPUSH
// if not side or side > 8 then
71924: LD_VAR 0 3
71928: NOT
71929: IFTRUE 71941
71931: PUSH
71932: LD_VAR 0 3
71936: PUSH
71937: LD_INT 8
71939: GREATER
71940: OR
71941: IFFALSE 71945
// exit ;
71943: GO 72004
// if not range then
71945: LD_VAR 0 4
71949: NOT
71950: IFFALSE 71961
// range := - 12 ;
71952: LD_ADDR_VAR 0 4
71956: PUSH
71957: LD_INT 12
71959: NEG
71960: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71961: LD_VAR 0 1
71965: PPUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_VAR 0 3
71975: PPUSH
71976: LD_VAR 0 4
71980: PPUSH
71981: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71985: LD_VAR 0 1
71989: PPUSH
71990: LD_VAR 0 2
71994: PPUSH
71995: LD_VAR 0 3
71999: PPUSH
72000: CALL_OW 331
// end ;
72004: LD_VAR 0 5
72008: RET
// export function Video ( mode ) ; begin
72009: LD_INT 0
72011: PPUSH
// ingame_video = mode ;
72012: LD_ADDR_OWVAR 52
72016: PUSH
72017: LD_VAR 0 1
72021: ST_TO_ADDR
// interface_hidden = mode ;
72022: LD_ADDR_OWVAR 54
72026: PUSH
72027: LD_VAR 0 1
72031: ST_TO_ADDR
// end ;
72032: LD_VAR 0 2
72036: RET
// export function Join ( array , element ) ; begin
72037: LD_INT 0
72039: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72040: LD_ADDR_VAR 0 3
72044: PUSH
72045: LD_VAR 0 1
72049: PPUSH
72050: LD_VAR 0 1
72054: PUSH
72055: LD_INT 1
72057: PLUS
72058: PPUSH
72059: LD_VAR 0 2
72063: PPUSH
72064: CALL_OW 1
72068: ST_TO_ADDR
// end ;
72069: LD_VAR 0 3
72073: RET
// export function JoinUnion ( array , element ) ; begin
72074: LD_INT 0
72076: PPUSH
// result := array union element ;
72077: LD_ADDR_VAR 0 3
72081: PUSH
72082: LD_VAR 0 1
72086: PUSH
72087: LD_VAR 0 2
72091: UNION
72092: ST_TO_ADDR
// end ;
72093: LD_VAR 0 3
72097: RET
// export function GetBehemoths ( side ) ; begin
72098: LD_INT 0
72100: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72101: LD_ADDR_VAR 0 2
72105: PUSH
72106: LD_INT 22
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 31
72120: PUSH
72121: LD_INT 25
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PPUSH
72132: CALL_OW 69
72136: ST_TO_ADDR
// end ;
72137: LD_VAR 0 2
72141: RET
// export function Shuffle ( array ) ; var i , index ; begin
72142: LD_INT 0
72144: PPUSH
72145: PPUSH
72146: PPUSH
// result := [ ] ;
72147: LD_ADDR_VAR 0 2
72151: PUSH
72152: EMPTY
72153: ST_TO_ADDR
// if not array then
72154: LD_VAR 0 1
72158: NOT
72159: IFFALSE 72163
// exit ;
72161: GO 72262
// Randomize ;
72163: CALL_OW 10
// for i = array downto 1 do
72167: LD_ADDR_VAR 0 3
72171: PUSH
72172: DOUBLE
72173: LD_VAR 0 1
72177: INC
72178: ST_TO_ADDR
72179: LD_INT 1
72181: PUSH
72182: FOR_DOWNTO
72183: IFFALSE 72260
// begin index := rand ( 1 , array ) ;
72185: LD_ADDR_VAR 0 4
72189: PUSH
72190: LD_INT 1
72192: PPUSH
72193: LD_VAR 0 1
72197: PPUSH
72198: CALL_OW 12
72202: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72203: LD_ADDR_VAR 0 2
72207: PUSH
72208: LD_VAR 0 2
72212: PPUSH
72213: LD_VAR 0 2
72217: PUSH
72218: LD_INT 1
72220: PLUS
72221: PPUSH
72222: LD_VAR 0 1
72226: PUSH
72227: LD_VAR 0 4
72231: ARRAY
72232: PPUSH
72233: CALL_OW 2
72237: ST_TO_ADDR
// array := Delete ( array , index ) ;
72238: LD_ADDR_VAR 0 1
72242: PUSH
72243: LD_VAR 0 1
72247: PPUSH
72248: LD_VAR 0 4
72252: PPUSH
72253: CALL_OW 3
72257: ST_TO_ADDR
// end ;
72258: GO 72182
72260: POP
72261: POP
// end ;
72262: LD_VAR 0 2
72266: RET
// export function GetBaseMaterials ( base ) ; begin
72267: LD_INT 0
72269: PPUSH
// result := [ 0 , 0 , 0 ] ;
72270: LD_ADDR_VAR 0 2
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: LD_INT 0
72280: PUSH
72281: LD_INT 0
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: ST_TO_ADDR
// if not base then
72289: LD_VAR 0 1
72293: NOT
72294: IFFALSE 72298
// exit ;
72296: GO 72347
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72298: LD_ADDR_VAR 0 2
72302: PUSH
72303: LD_VAR 0 1
72307: PPUSH
72308: LD_INT 1
72310: PPUSH
72311: CALL_OW 275
72315: PUSH
72316: LD_VAR 0 1
72320: PPUSH
72321: LD_INT 2
72323: PPUSH
72324: CALL_OW 275
72328: PUSH
72329: LD_VAR 0 1
72333: PPUSH
72334: LD_INT 3
72336: PPUSH
72337: CALL_OW 275
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: ST_TO_ADDR
// end ;
72347: LD_VAR 0 2
72351: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72352: LD_INT 0
72354: PPUSH
72355: PPUSH
// result := array ;
72356: LD_ADDR_VAR 0 3
72360: PUSH
72361: LD_VAR 0 1
72365: ST_TO_ADDR
// if size >= result then
72366: LD_VAR 0 2
72370: PUSH
72371: LD_VAR 0 3
72375: GREATEREQUAL
72376: IFFALSE 72380
// exit ;
72378: GO 72430
// if size then
72380: LD_VAR 0 2
72384: IFFALSE 72430
// for i := array downto size do
72386: LD_ADDR_VAR 0 4
72390: PUSH
72391: DOUBLE
72392: LD_VAR 0 1
72396: INC
72397: ST_TO_ADDR
72398: LD_VAR 0 2
72402: PUSH
72403: FOR_DOWNTO
72404: IFFALSE 72428
// result := Delete ( result , result ) ;
72406: LD_ADDR_VAR 0 3
72410: PUSH
72411: LD_VAR 0 3
72415: PPUSH
72416: LD_VAR 0 3
72420: PPUSH
72421: CALL_OW 3
72425: ST_TO_ADDR
72426: GO 72403
72428: POP
72429: POP
// end ;
72430: LD_VAR 0 3
72434: RET
// export function ComExit ( unit ) ; var tmp ; begin
72435: LD_INT 0
72437: PPUSH
72438: PPUSH
// if not IsInUnit ( unit ) then
72439: LD_VAR 0 1
72443: PPUSH
72444: CALL_OW 310
72448: NOT
72449: IFFALSE 72453
// exit ;
72451: GO 72513
// tmp := IsInUnit ( unit ) ;
72453: LD_ADDR_VAR 0 3
72457: PUSH
72458: LD_VAR 0 1
72462: PPUSH
72463: CALL_OW 310
72467: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72468: LD_VAR 0 3
72472: PPUSH
72473: CALL_OW 247
72477: PUSH
72478: LD_INT 2
72480: EQUAL
72481: IFFALSE 72494
// ComExitVehicle ( unit ) else
72483: LD_VAR 0 1
72487: PPUSH
72488: CALL_OW 121
72492: GO 72503
// ComExitBuilding ( unit ) ;
72494: LD_VAR 0 1
72498: PPUSH
72499: CALL_OW 122
// result := tmp ;
72503: LD_ADDR_VAR 0 2
72507: PUSH
72508: LD_VAR 0 3
72512: ST_TO_ADDR
// end ;
72513: LD_VAR 0 2
72517: RET
// export function ComExitAll ( units ) ; var i ; begin
72518: LD_INT 0
72520: PPUSH
72521: PPUSH
// if not units then
72522: LD_VAR 0 1
72526: NOT
72527: IFFALSE 72531
// exit ;
72529: GO 72557
// for i in units do
72531: LD_ADDR_VAR 0 3
72535: PUSH
72536: LD_VAR 0 1
72540: PUSH
72541: FOR_IN
72542: IFFALSE 72555
// ComExit ( i ) ;
72544: LD_VAR 0 3
72548: PPUSH
72549: CALL 72435 0 1
72553: GO 72541
72555: POP
72556: POP
// end ;
72557: LD_VAR 0 2
72561: RET
// export function ResetHc ; begin
72562: LD_INT 0
72564: PPUSH
// InitHc ;
72565: CALL_OW 19
// hc_importance := 0 ;
72569: LD_ADDR_OWVAR 32
72573: PUSH
72574: LD_INT 0
72576: ST_TO_ADDR
// end ;
72577: LD_VAR 0 1
72581: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72582: LD_INT 0
72584: PPUSH
72585: PPUSH
72586: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72587: LD_ADDR_VAR 0 6
72591: PUSH
72592: LD_VAR 0 1
72596: PUSH
72597: LD_VAR 0 3
72601: PLUS
72602: PUSH
72603: LD_INT 2
72605: DIV
72606: ST_TO_ADDR
// if _x < 0 then
72607: LD_VAR 0 6
72611: PUSH
72612: LD_INT 0
72614: LESS
72615: IFFALSE 72632
// _x := _x * - 1 ;
72617: LD_ADDR_VAR 0 6
72621: PUSH
72622: LD_VAR 0 6
72626: PUSH
72627: LD_INT 1
72629: NEG
72630: MUL
72631: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72632: LD_ADDR_VAR 0 7
72636: PUSH
72637: LD_VAR 0 2
72641: PUSH
72642: LD_VAR 0 4
72646: PLUS
72647: PUSH
72648: LD_INT 2
72650: DIV
72651: ST_TO_ADDR
// if _y < 0 then
72652: LD_VAR 0 7
72656: PUSH
72657: LD_INT 0
72659: LESS
72660: IFFALSE 72677
// _y := _y * - 1 ;
72662: LD_ADDR_VAR 0 7
72666: PUSH
72667: LD_VAR 0 7
72671: PUSH
72672: LD_INT 1
72674: NEG
72675: MUL
72676: ST_TO_ADDR
// result := [ _x , _y ] ;
72677: LD_ADDR_VAR 0 5
72681: PUSH
72682: LD_VAR 0 6
72686: PUSH
72687: LD_VAR 0 7
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: ST_TO_ADDR
// end ;
72696: LD_VAR 0 5
72700: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72701: LD_INT 0
72703: PPUSH
72704: PPUSH
72705: PPUSH
72706: PPUSH
// task := GetTaskList ( unit ) ;
72707: LD_ADDR_VAR 0 7
72711: PUSH
72712: LD_VAR 0 1
72716: PPUSH
72717: CALL_OW 437
72721: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72722: LD_VAR 0 7
72726: NOT
72727: IFFALSE 72746
72729: PUSH
72730: LD_VAR 0 1
72734: PPUSH
72735: LD_VAR 0 2
72739: PPUSH
72740: CALL_OW 308
72744: NOT
72745: AND
72746: IFFALSE 72750
// exit ;
72748: GO 72868
// if IsInArea ( unit , area ) then
72750: LD_VAR 0 1
72754: PPUSH
72755: LD_VAR 0 2
72759: PPUSH
72760: CALL_OW 308
72764: IFFALSE 72782
// begin ComMoveToArea ( unit , goAway ) ;
72766: LD_VAR 0 1
72770: PPUSH
72771: LD_VAR 0 3
72775: PPUSH
72776: CALL_OW 113
// exit ;
72780: GO 72868
// end ; if task [ 1 ] [ 1 ] <> M then
72782: LD_VAR 0 7
72786: PUSH
72787: LD_INT 1
72789: ARRAY
72790: PUSH
72791: LD_INT 1
72793: ARRAY
72794: PUSH
72795: LD_STRING M
72797: NONEQUAL
72798: IFFALSE 72802
// exit ;
72800: GO 72868
// x := task [ 1 ] [ 2 ] ;
72802: LD_ADDR_VAR 0 5
72806: PUSH
72807: LD_VAR 0 7
72811: PUSH
72812: LD_INT 1
72814: ARRAY
72815: PUSH
72816: LD_INT 2
72818: ARRAY
72819: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72820: LD_ADDR_VAR 0 6
72824: PUSH
72825: LD_VAR 0 7
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PUSH
72834: LD_INT 3
72836: ARRAY
72837: ST_TO_ADDR
// if InArea ( x , y , area ) then
72838: LD_VAR 0 5
72842: PPUSH
72843: LD_VAR 0 6
72847: PPUSH
72848: LD_VAR 0 2
72852: PPUSH
72853: CALL_OW 309
72857: IFFALSE 72868
// ComStop ( unit ) ;
72859: LD_VAR 0 1
72863: PPUSH
72864: CALL_OW 141
// end ;
72868: LD_VAR 0 4
72872: RET
// export function Abs ( value ) ; begin
72873: LD_INT 0
72875: PPUSH
// result := value ;
72876: LD_ADDR_VAR 0 2
72880: PUSH
72881: LD_VAR 0 1
72885: ST_TO_ADDR
// if value < 0 then
72886: LD_VAR 0 1
72890: PUSH
72891: LD_INT 0
72893: LESS
72894: IFFALSE 72911
// result := value * - 1 ;
72896: LD_ADDR_VAR 0 2
72900: PUSH
72901: LD_VAR 0 1
72905: PUSH
72906: LD_INT 1
72908: NEG
72909: MUL
72910: ST_TO_ADDR
// end ;
72911: LD_VAR 0 2
72915: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72916: LD_INT 0
72918: PPUSH
72919: PPUSH
72920: PPUSH
72921: PPUSH
72922: PPUSH
72923: PPUSH
72924: PPUSH
72925: PPUSH
// if not unit or not building then
72926: LD_VAR 0 1
72930: NOT
72931: IFTRUE 72940
72933: PUSH
72934: LD_VAR 0 2
72938: NOT
72939: OR
72940: IFFALSE 72944
// exit ;
72942: GO 73172
// x := GetX ( building ) ;
72944: LD_ADDR_VAR 0 4
72948: PUSH
72949: LD_VAR 0 2
72953: PPUSH
72954: CALL_OW 250
72958: ST_TO_ADDR
// y := GetY ( building ) ;
72959: LD_ADDR_VAR 0 6
72963: PUSH
72964: LD_VAR 0 2
72968: PPUSH
72969: CALL_OW 251
72973: ST_TO_ADDR
// d := GetDir ( building ) ;
72974: LD_ADDR_VAR 0 8
72978: PUSH
72979: LD_VAR 0 2
72983: PPUSH
72984: CALL_OW 254
72988: ST_TO_ADDR
// r := 4 ;
72989: LD_ADDR_VAR 0 9
72993: PUSH
72994: LD_INT 4
72996: ST_TO_ADDR
// for i := 1 to 5 do
72997: LD_ADDR_VAR 0 10
73001: PUSH
73002: DOUBLE
73003: LD_INT 1
73005: DEC
73006: ST_TO_ADDR
73007: LD_INT 5
73009: PUSH
73010: FOR_TO
73011: IFFALSE 73170
// begin _x := ShiftX ( x , d , r + i ) ;
73013: LD_ADDR_VAR 0 5
73017: PUSH
73018: LD_VAR 0 4
73022: PPUSH
73023: LD_VAR 0 8
73027: PPUSH
73028: LD_VAR 0 9
73032: PUSH
73033: LD_VAR 0 10
73037: PLUS
73038: PPUSH
73039: CALL_OW 272
73043: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73044: LD_ADDR_VAR 0 7
73048: PUSH
73049: LD_VAR 0 6
73053: PPUSH
73054: LD_VAR 0 8
73058: PPUSH
73059: LD_VAR 0 9
73063: PUSH
73064: LD_VAR 0 10
73068: PLUS
73069: PPUSH
73070: CALL_OW 273
73074: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73075: LD_VAR 0 5
73079: PPUSH
73080: LD_VAR 0 7
73084: PPUSH
73085: CALL_OW 488
73089: IFFALSE 73124
73091: PUSH
73092: LD_VAR 0 5
73096: PPUSH
73097: LD_VAR 0 7
73101: PPUSH
73102: CALL_OW 428
73106: PPUSH
73107: CALL_OW 247
73111: PUSH
73112: LD_INT 3
73114: PUSH
73115: LD_INT 2
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: IN
73122: NOT
73123: AND
73124: IFFALSE 73168
// begin ComMoveXY ( unit , _x , _y ) ;
73126: LD_VAR 0 1
73130: PPUSH
73131: LD_VAR 0 5
73135: PPUSH
73136: LD_VAR 0 7
73140: PPUSH
73141: CALL_OW 111
// result := [ _x , _y ] ;
73145: LD_ADDR_VAR 0 3
73149: PUSH
73150: LD_VAR 0 5
73154: PUSH
73155: LD_VAR 0 7
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: ST_TO_ADDR
// exit ;
73164: POP
73165: POP
73166: GO 73172
// end ; end ;
73168: GO 73010
73170: POP
73171: POP
// end ;
73172: LD_VAR 0 3
73176: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73177: LD_INT 0
73179: PPUSH
73180: PPUSH
73181: PPUSH
// result := 0 ;
73182: LD_ADDR_VAR 0 3
73186: PUSH
73187: LD_INT 0
73189: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73190: LD_VAR 0 1
73194: PUSH
73195: LD_INT 0
73197: LESS
73198: IFTRUE 73210
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: LD_INT 8
73208: GREATER
73209: OR
73210: IFTRUE 73222
73212: PUSH
73213: LD_VAR 0 2
73217: PUSH
73218: LD_INT 0
73220: LESS
73221: OR
73222: IFTRUE 73234
73224: PUSH
73225: LD_VAR 0 2
73229: PUSH
73230: LD_INT 8
73232: GREATER
73233: OR
73234: IFFALSE 73238
// exit ;
73236: GO 73313
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73238: LD_ADDR_VAR 0 4
73242: PUSH
73243: LD_INT 22
73245: PUSH
73246: LD_VAR 0 2
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PPUSH
73255: CALL_OW 69
73259: PUSH
73260: FOR_IN
73261: IFFALSE 73311
// begin un := UnitShoot ( i ) ;
73263: LD_ADDR_VAR 0 5
73267: PUSH
73268: LD_VAR 0 4
73272: PPUSH
73273: CALL_OW 504
73277: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73278: LD_VAR 0 5
73282: PPUSH
73283: CALL_OW 255
73287: PUSH
73288: LD_VAR 0 1
73292: EQUAL
73293: IFFALSE 73309
// begin result := un ;
73295: LD_ADDR_VAR 0 3
73299: PUSH
73300: LD_VAR 0 5
73304: ST_TO_ADDR
// exit ;
73305: POP
73306: POP
73307: GO 73313
// end ; end ;
73309: GO 73260
73311: POP
73312: POP
// end ;
73313: LD_VAR 0 3
73317: RET
// export function GetCargoBay ( units ) ; begin
73318: LD_INT 0
73320: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73321: LD_ADDR_VAR 0 2
73325: PUSH
73326: LD_VAR 0 1
73330: PPUSH
73331: LD_INT 2
73333: PUSH
73334: LD_INT 34
73336: PUSH
73337: LD_INT 12
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 34
73346: PUSH
73347: LD_INT 51
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 34
73356: PUSH
73357: LD_INT 32
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 34
73366: PUSH
73367: LD_INT 89
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: PPUSH
73381: CALL_OW 72
73385: ST_TO_ADDR
// end ;
73386: LD_VAR 0 2
73390: RET
// export function Negate ( value ) ; begin
73391: LD_INT 0
73393: PPUSH
// result := not value ;
73394: LD_ADDR_VAR 0 2
73398: PUSH
73399: LD_VAR 0 1
73403: NOT
73404: ST_TO_ADDR
// end ;
73405: LD_VAR 0 2
73409: RET
// export function Inc ( value ) ; begin
73410: LD_INT 0
73412: PPUSH
// result := value + 1 ;
73413: LD_ADDR_VAR 0 2
73417: PUSH
73418: LD_VAR 0 1
73422: PUSH
73423: LD_INT 1
73425: PLUS
73426: ST_TO_ADDR
// end ;
73427: LD_VAR 0 2
73431: RET
// export function Dec ( value ) ; begin
73432: LD_INT 0
73434: PPUSH
// result := value - 1 ;
73435: LD_ADDR_VAR 0 2
73439: PUSH
73440: LD_VAR 0 1
73444: PUSH
73445: LD_INT 1
73447: MINUS
73448: ST_TO_ADDR
// end ;
73449: LD_VAR 0 2
73453: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73454: LD_INT 0
73456: PPUSH
73457: PPUSH
73458: PPUSH
73459: PPUSH
73460: PPUSH
73461: PPUSH
73462: PPUSH
73463: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73464: LD_VAR 0 1
73468: PPUSH
73469: LD_VAR 0 2
73473: PPUSH
73474: CALL_OW 488
73478: NOT
73479: IFTRUE 73498
73481: PUSH
73482: LD_VAR 0 3
73486: PPUSH
73487: LD_VAR 0 4
73491: PPUSH
73492: CALL_OW 488
73496: NOT
73497: OR
73498: IFFALSE 73511
// begin result := - 1 ;
73500: LD_ADDR_VAR 0 5
73504: PUSH
73505: LD_INT 1
73507: NEG
73508: ST_TO_ADDR
// exit ;
73509: GO 73746
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73511: LD_ADDR_VAR 0 12
73515: PUSH
73516: LD_VAR 0 1
73520: PPUSH
73521: LD_VAR 0 2
73525: PPUSH
73526: LD_VAR 0 3
73530: PPUSH
73531: LD_VAR 0 4
73535: PPUSH
73536: CALL 72582 0 4
73540: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73541: LD_ADDR_VAR 0 11
73545: PUSH
73546: LD_VAR 0 1
73550: PPUSH
73551: LD_VAR 0 2
73555: PPUSH
73556: LD_VAR 0 12
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PPUSH
73565: LD_VAR 0 12
73569: PUSH
73570: LD_INT 2
73572: ARRAY
73573: PPUSH
73574: CALL_OW 298
73578: ST_TO_ADDR
// distance := 9999 ;
73579: LD_ADDR_VAR 0 10
73583: PUSH
73584: LD_INT 9999
73586: ST_TO_ADDR
// for i := 0 to 5 do
73587: LD_ADDR_VAR 0 6
73591: PUSH
73592: DOUBLE
73593: LD_INT 0
73595: DEC
73596: ST_TO_ADDR
73597: LD_INT 5
73599: PUSH
73600: FOR_TO
73601: IFFALSE 73744
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73603: LD_ADDR_VAR 0 7
73607: PUSH
73608: LD_VAR 0 1
73612: PPUSH
73613: LD_VAR 0 6
73617: PPUSH
73618: LD_VAR 0 11
73622: PPUSH
73623: CALL_OW 272
73627: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73628: LD_ADDR_VAR 0 8
73632: PUSH
73633: LD_VAR 0 2
73637: PPUSH
73638: LD_VAR 0 6
73642: PPUSH
73643: LD_VAR 0 11
73647: PPUSH
73648: CALL_OW 273
73652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73653: LD_VAR 0 7
73657: PPUSH
73658: LD_VAR 0 8
73662: PPUSH
73663: CALL_OW 488
73667: NOT
73668: IFFALSE 73672
// continue ;
73670: GO 73600
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73672: LD_ADDR_VAR 0 9
73676: PUSH
73677: LD_VAR 0 12
73681: PUSH
73682: LD_INT 1
73684: ARRAY
73685: PPUSH
73686: LD_VAR 0 12
73690: PUSH
73691: LD_INT 2
73693: ARRAY
73694: PPUSH
73695: LD_VAR 0 7
73699: PPUSH
73700: LD_VAR 0 8
73704: PPUSH
73705: CALL_OW 298
73709: ST_TO_ADDR
// if tmp < distance then
73710: LD_VAR 0 9
73714: PUSH
73715: LD_VAR 0 10
73719: LESS
73720: IFFALSE 73742
// begin result := i ;
73722: LD_ADDR_VAR 0 5
73726: PUSH
73727: LD_VAR 0 6
73731: ST_TO_ADDR
// distance := tmp ;
73732: LD_ADDR_VAR 0 10
73736: PUSH
73737: LD_VAR 0 9
73741: ST_TO_ADDR
// end ; end ;
73742: GO 73600
73744: POP
73745: POP
// end ;
73746: LD_VAR 0 5
73750: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73751: LD_INT 0
73753: PPUSH
73754: PPUSH
// if not driver or not IsInUnit ( driver ) then
73755: LD_VAR 0 1
73759: NOT
73760: IFTRUE 73774
73762: PUSH
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 310
73772: NOT
73773: OR
73774: IFFALSE 73778
// exit ;
73776: GO 73868
// vehicle := IsInUnit ( driver ) ;
73778: LD_ADDR_VAR 0 3
73782: PUSH
73783: LD_VAR 0 1
73787: PPUSH
73788: CALL_OW 310
73792: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73793: LD_VAR 0 1
73797: PPUSH
73798: LD_STRING \
73800: PUSH
73801: LD_INT 0
73803: PUSH
73804: LD_INT 0
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: LD_INT 0
73812: PUSH
73813: LD_INT 0
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: PUSH
73828: LD_STRING E
73830: PUSH
73831: LD_INT 0
73833: PUSH
73834: LD_INT 0
73836: PUSH
73837: LD_VAR 0 3
73841: PUSH
73842: LD_INT 0
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: LD_INT 0
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PPUSH
73864: CALL_OW 446
// end ;
73868: LD_VAR 0 2
73872: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73873: LD_INT 0
73875: PPUSH
73876: PPUSH
// if not driver or not IsInUnit ( driver ) then
73877: LD_VAR 0 1
73881: NOT
73882: IFTRUE 73896
73884: PUSH
73885: LD_VAR 0 1
73889: PPUSH
73890: CALL_OW 310
73894: NOT
73895: OR
73896: IFFALSE 73900
// exit ;
73898: GO 73990
// vehicle := IsInUnit ( driver ) ;
73900: LD_ADDR_VAR 0 3
73904: PUSH
73905: LD_VAR 0 1
73909: PPUSH
73910: CALL_OW 310
73914: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73915: LD_VAR 0 1
73919: PPUSH
73920: LD_STRING \
73922: PUSH
73923: LD_INT 0
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: LD_INT 0
73931: PUSH
73932: LD_INT 0
73934: PUSH
73935: LD_INT 0
73937: PUSH
73938: LD_INT 0
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: PUSH
73950: LD_STRING E
73952: PUSH
73953: LD_INT 0
73955: PUSH
73956: LD_INT 0
73958: PUSH
73959: LD_VAR 0 3
73963: PUSH
73964: LD_INT 0
73966: PUSH
73967: LD_INT 0
73969: PUSH
73970: LD_INT 0
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PPUSH
73986: CALL_OW 447
// end ;
73990: LD_VAR 0 2
73994: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73995: LD_INT 0
73997: PPUSH
73998: PPUSH
73999: PPUSH
// tmp := [ ] ;
74000: LD_ADDR_VAR 0 5
74004: PUSH
74005: EMPTY
74006: ST_TO_ADDR
// for i in units do
74007: LD_ADDR_VAR 0 4
74011: PUSH
74012: LD_VAR 0 1
74016: PUSH
74017: FOR_IN
74018: IFFALSE 74056
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74020: LD_ADDR_VAR 0 5
74024: PUSH
74025: LD_VAR 0 5
74029: PPUSH
74030: LD_VAR 0 5
74034: PUSH
74035: LD_INT 1
74037: PLUS
74038: PPUSH
74039: LD_VAR 0 4
74043: PPUSH
74044: CALL_OW 256
74048: PPUSH
74049: CALL_OW 2
74053: ST_TO_ADDR
74054: GO 74017
74056: POP
74057: POP
// if not tmp then
74058: LD_VAR 0 5
74062: NOT
74063: IFFALSE 74067
// exit ;
74065: GO 74115
// if asc then
74067: LD_VAR 0 2
74071: IFFALSE 74095
// result := SortListByListAsc ( units , tmp ) else
74073: LD_ADDR_VAR 0 3
74077: PUSH
74078: LD_VAR 0 1
74082: PPUSH
74083: LD_VAR 0 5
74087: PPUSH
74088: CALL_OW 76
74092: ST_TO_ADDR
74093: GO 74115
// result := SortListByListDesc ( units , tmp ) ;
74095: LD_ADDR_VAR 0 3
74099: PUSH
74100: LD_VAR 0 1
74104: PPUSH
74105: LD_VAR 0 5
74109: PPUSH
74110: CALL_OW 77
74114: ST_TO_ADDR
// end ;
74115: LD_VAR 0 3
74119: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74120: LD_INT 0
74122: PPUSH
74123: PPUSH
// task := GetTaskList ( mech ) ;
74124: LD_ADDR_VAR 0 4
74128: PUSH
74129: LD_VAR 0 1
74133: PPUSH
74134: CALL_OW 437
74138: ST_TO_ADDR
// if not task then
74139: LD_VAR 0 4
74143: NOT
74144: IFFALSE 74148
// exit ;
74146: GO 74192
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74148: LD_ADDR_VAR 0 3
74152: PUSH
74153: LD_VAR 0 4
74157: PUSH
74158: LD_INT 1
74160: ARRAY
74161: PUSH
74162: LD_INT 1
74164: ARRAY
74165: PUSH
74166: LD_STRING r
74168: EQUAL
74169: IFFALSE 74191
74171: PUSH
74172: LD_VAR 0 4
74176: PUSH
74177: LD_INT 1
74179: ARRAY
74180: PUSH
74181: LD_INT 4
74183: ARRAY
74184: PUSH
74185: LD_VAR 0 2
74189: EQUAL
74190: AND
74191: ST_TO_ADDR
// end ;
74192: LD_VAR 0 3
74196: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74197: LD_INT 0
74199: PPUSH
// SetDir ( unit , d ) ;
74200: LD_VAR 0 1
74204: PPUSH
74205: LD_VAR 0 4
74209: PPUSH
74210: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
74214: LD_ADDR_VAR 0 6
74218: PUSH
74219: LD_VAR 0 1
74223: PPUSH
74224: LD_VAR 0 2
74228: PPUSH
74229: LD_VAR 0 3
74233: PPUSH
74234: LD_VAR 0 5
74238: PPUSH
74239: CALL_OW 48
74243: ST_TO_ADDR
// end ;
74244: LD_VAR 0 6
74248: RET
// export function ToNaturalNumber ( number ) ; begin
74249: LD_INT 0
74251: PPUSH
// result := number div 1 ;
74252: LD_ADDR_VAR 0 2
74256: PUSH
74257: LD_VAR 0 1
74261: PUSH
74262: LD_INT 1
74264: DIV
74265: ST_TO_ADDR
// if number < 0 then
74266: LD_VAR 0 1
74270: PUSH
74271: LD_INT 0
74273: LESS
74274: IFFALSE 74284
// result := 0 ;
74276: LD_ADDR_VAR 0 2
74280: PUSH
74281: LD_INT 0
74283: ST_TO_ADDR
// end ;
74284: LD_VAR 0 2
74288: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
74289: LD_INT 0
74291: PPUSH
74292: PPUSH
74293: PPUSH
// if not buildings then
74294: LD_VAR 0 1
74298: NOT
74299: IFFALSE 74303
// exit ;
74301: GO 74418
// tmp := [ ] ;
74303: LD_ADDR_VAR 0 5
74307: PUSH
74308: EMPTY
74309: ST_TO_ADDR
// for b in buildings do
74310: LD_ADDR_VAR 0 4
74314: PUSH
74315: LD_VAR 0 1
74319: PUSH
74320: FOR_IN
74321: IFFALSE 74359
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74323: LD_ADDR_VAR 0 5
74327: PUSH
74328: LD_VAR 0 5
74332: PPUSH
74333: LD_VAR 0 5
74337: PUSH
74338: LD_INT 1
74340: PLUS
74341: PPUSH
74342: LD_VAR 0 4
74346: PPUSH
74347: CALL_OW 266
74351: PPUSH
74352: CALL_OW 1
74356: ST_TO_ADDR
74357: GO 74320
74359: POP
74360: POP
// if not tmp then
74361: LD_VAR 0 5
74365: NOT
74366: IFFALSE 74370
// exit ;
74368: GO 74418
// if asc then
74370: LD_VAR 0 2
74374: IFFALSE 74398
// result := SortListByListAsc ( buildings , tmp ) else
74376: LD_ADDR_VAR 0 3
74380: PUSH
74381: LD_VAR 0 1
74385: PPUSH
74386: LD_VAR 0 5
74390: PPUSH
74391: CALL_OW 76
74395: ST_TO_ADDR
74396: GO 74418
// result := SortListByListDesc ( buildings , tmp ) ;
74398: LD_ADDR_VAR 0 3
74402: PUSH
74403: LD_VAR 0 1
74407: PPUSH
74408: LD_VAR 0 5
74412: PPUSH
74413: CALL_OW 77
74417: ST_TO_ADDR
// end ;
74418: LD_VAR 0 3
74422: RET
// export function SortByClass ( units , class ) ; var un ; begin
74423: LD_INT 0
74425: PPUSH
74426: PPUSH
// if not units or not class then
74427: LD_VAR 0 1
74431: NOT
74432: IFTRUE 74441
74434: PUSH
74435: LD_VAR 0 2
74439: NOT
74440: OR
74441: IFFALSE 74445
// exit ;
74443: GO 74540
// result := [ ] ;
74445: LD_ADDR_VAR 0 3
74449: PUSH
74450: EMPTY
74451: ST_TO_ADDR
// for un in units do
74452: LD_ADDR_VAR 0 4
74456: PUSH
74457: LD_VAR 0 1
74461: PUSH
74462: FOR_IN
74463: IFFALSE 74538
// if GetClass ( un ) = class then
74465: LD_VAR 0 4
74469: PPUSH
74470: CALL_OW 257
74474: PUSH
74475: LD_VAR 0 2
74479: EQUAL
74480: IFFALSE 74507
// result := Insert ( result , 1 , un ) else
74482: LD_ADDR_VAR 0 3
74486: PUSH
74487: LD_VAR 0 3
74491: PPUSH
74492: LD_INT 1
74494: PPUSH
74495: LD_VAR 0 4
74499: PPUSH
74500: CALL_OW 2
74504: ST_TO_ADDR
74505: GO 74536
// result := Replace ( result , result + 1 , un ) ;
74507: LD_ADDR_VAR 0 3
74511: PUSH
74512: LD_VAR 0 3
74516: PPUSH
74517: LD_VAR 0 3
74521: PUSH
74522: LD_INT 1
74524: PLUS
74525: PPUSH
74526: LD_VAR 0 4
74530: PPUSH
74531: CALL_OW 1
74535: ST_TO_ADDR
74536: GO 74462
74538: POP
74539: POP
// end ;
74540: LD_VAR 0 3
74544: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74545: LD_INT 0
74547: PPUSH
74548: PPUSH
74549: PPUSH
74550: PPUSH
74551: PPUSH
74552: PPUSH
74553: PPUSH
// result := [ ] ;
74554: LD_ADDR_VAR 0 4
74558: PUSH
74559: EMPTY
74560: ST_TO_ADDR
// if x - r < 0 then
74561: LD_VAR 0 1
74565: PUSH
74566: LD_VAR 0 3
74570: MINUS
74571: PUSH
74572: LD_INT 0
74574: LESS
74575: IFFALSE 74587
// min_x := 0 else
74577: LD_ADDR_VAR 0 8
74581: PUSH
74582: LD_INT 0
74584: ST_TO_ADDR
74585: GO 74603
// min_x := x - r ;
74587: LD_ADDR_VAR 0 8
74591: PUSH
74592: LD_VAR 0 1
74596: PUSH
74597: LD_VAR 0 3
74601: MINUS
74602: ST_TO_ADDR
// if y - r < 0 then
74603: LD_VAR 0 2
74607: PUSH
74608: LD_VAR 0 3
74612: MINUS
74613: PUSH
74614: LD_INT 0
74616: LESS
74617: IFFALSE 74629
// min_y := 0 else
74619: LD_ADDR_VAR 0 7
74623: PUSH
74624: LD_INT 0
74626: ST_TO_ADDR
74627: GO 74645
// min_y := y - r ;
74629: LD_ADDR_VAR 0 7
74633: PUSH
74634: LD_VAR 0 2
74638: PUSH
74639: LD_VAR 0 3
74643: MINUS
74644: ST_TO_ADDR
// max_x := x + r ;
74645: LD_ADDR_VAR 0 9
74649: PUSH
74650: LD_VAR 0 1
74654: PUSH
74655: LD_VAR 0 3
74659: PLUS
74660: ST_TO_ADDR
// max_y := y + r ;
74661: LD_ADDR_VAR 0 10
74665: PUSH
74666: LD_VAR 0 2
74670: PUSH
74671: LD_VAR 0 3
74675: PLUS
74676: ST_TO_ADDR
// for _x = min_x to max_x do
74677: LD_ADDR_VAR 0 5
74681: PUSH
74682: DOUBLE
74683: LD_VAR 0 8
74687: DEC
74688: ST_TO_ADDR
74689: LD_VAR 0 9
74693: PUSH
74694: FOR_TO
74695: IFFALSE 74796
// for _y = min_y to max_y do
74697: LD_ADDR_VAR 0 6
74701: PUSH
74702: DOUBLE
74703: LD_VAR 0 7
74707: DEC
74708: ST_TO_ADDR
74709: LD_VAR 0 10
74713: PUSH
74714: FOR_TO
74715: IFFALSE 74792
// begin if not ValidHex ( _x , _y ) then
74717: LD_VAR 0 5
74721: PPUSH
74722: LD_VAR 0 6
74726: PPUSH
74727: CALL_OW 488
74731: NOT
74732: IFFALSE 74736
// continue ;
74734: GO 74714
// if GetResourceTypeXY ( _x , _y ) then
74736: LD_VAR 0 5
74740: PPUSH
74741: LD_VAR 0 6
74745: PPUSH
74746: CALL_OW 283
74750: IFFALSE 74790
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74752: LD_ADDR_VAR 0 4
74756: PUSH
74757: LD_VAR 0 4
74761: PPUSH
74762: LD_VAR 0 4
74766: PUSH
74767: LD_INT 1
74769: PLUS
74770: PPUSH
74771: LD_VAR 0 5
74775: PUSH
74776: LD_VAR 0 6
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PPUSH
74785: CALL_OW 1
74789: ST_TO_ADDR
// end ;
74790: GO 74714
74792: POP
74793: POP
74794: GO 74694
74796: POP
74797: POP
// end ;
74798: LD_VAR 0 4
74802: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74803: LD_INT 0
74805: PPUSH
74806: PPUSH
74807: PPUSH
74808: PPUSH
74809: PPUSH
74810: PPUSH
74811: PPUSH
74812: PPUSH
// if not units then
74813: LD_VAR 0 1
74817: NOT
74818: IFFALSE 74822
// exit ;
74820: GO 75354
// result := UnitFilter ( units , [ f_ok ] ) ;
74822: LD_ADDR_VAR 0 3
74826: PUSH
74827: LD_VAR 0 1
74831: PPUSH
74832: LD_INT 50
74834: PUSH
74835: EMPTY
74836: LIST
74837: PPUSH
74838: CALL_OW 72
74842: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74843: LD_ADDR_VAR 0 8
74847: PUSH
74848: LD_VAR 0 1
74852: PUSH
74853: LD_INT 1
74855: ARRAY
74856: PPUSH
74857: CALL_OW 255
74861: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74862: LD_ADDR_VAR 0 10
74866: PUSH
74867: LD_INT 29
74869: PUSH
74870: LD_INT 91
74872: PUSH
74873: LD_INT 49
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: LIST
74880: ST_TO_ADDR
// if not result then
74881: LD_VAR 0 3
74885: NOT
74886: IFFALSE 74890
// exit ;
74888: GO 75354
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74890: LD_ADDR_VAR 0 5
74894: PUSH
74895: LD_INT 81
74897: PUSH
74898: LD_VAR 0 8
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PPUSH
74907: CALL_OW 69
74911: ST_TO_ADDR
// for i in result do
74912: LD_ADDR_VAR 0 4
74916: PUSH
74917: LD_VAR 0 3
74921: PUSH
74922: FOR_IN
74923: IFFALSE 75352
// begin tag := GetTag ( i ) + 1 ;
74925: LD_ADDR_VAR 0 9
74929: PUSH
74930: LD_VAR 0 4
74934: PPUSH
74935: CALL_OW 110
74939: PUSH
74940: LD_INT 1
74942: PLUS
74943: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74944: LD_ADDR_VAR 0 7
74948: PUSH
74949: LD_VAR 0 4
74953: PPUSH
74954: CALL_OW 250
74958: PPUSH
74959: LD_VAR 0 4
74963: PPUSH
74964: CALL_OW 251
74968: PPUSH
74969: LD_INT 4
74971: PPUSH
74972: CALL 74545 0 3
74976: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74977: LD_VAR 0 4
74981: PPUSH
74982: CALL_OW 247
74986: PUSH
74987: LD_INT 2
74989: EQUAL
74990: IFFALSE 75002
74992: PUSH
74993: LD_VAR 0 7
74997: PUSH
74998: LD_INT 2
75000: GREATER
75001: AND
75002: IFFALSE 75022
75004: PUSH
75005: LD_VAR 0 4
75009: PPUSH
75010: CALL_OW 264
75014: PUSH
75015: LD_VAR 0 10
75019: IN
75020: NOT
75021: AND
75022: IFFALSE 75061
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75024: LD_VAR 0 4
75028: PPUSH
75029: LD_VAR 0 7
75033: PUSH
75034: LD_INT 1
75036: ARRAY
75037: PUSH
75038: LD_INT 1
75040: ARRAY
75041: PPUSH
75042: LD_VAR 0 7
75046: PUSH
75047: LD_INT 1
75049: ARRAY
75050: PUSH
75051: LD_INT 2
75053: ARRAY
75054: PPUSH
75055: CALL_OW 116
75059: GO 75350
// if path > tag then
75061: LD_VAR 0 2
75065: PUSH
75066: LD_VAR 0 9
75070: GREATER
75071: IFFALSE 75279
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75073: LD_ADDR_VAR 0 6
75077: PUSH
75078: LD_VAR 0 5
75082: PPUSH
75083: LD_INT 91
75085: PUSH
75086: LD_VAR 0 4
75090: PUSH
75091: LD_INT 8
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: LIST
75098: PPUSH
75099: CALL_OW 72
75103: ST_TO_ADDR
// if nearEnemy then
75104: LD_VAR 0 6
75108: IFFALSE 75177
// begin if GetWeapon ( i ) = ru_time_lapser then
75110: LD_VAR 0 4
75114: PPUSH
75115: CALL_OW 264
75119: PUSH
75120: LD_INT 49
75122: EQUAL
75123: IFFALSE 75151
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75125: LD_VAR 0 4
75129: PPUSH
75130: LD_VAR 0 6
75134: PPUSH
75135: LD_VAR 0 4
75139: PPUSH
75140: CALL_OW 74
75144: PPUSH
75145: CALL_OW 112
75149: GO 75175
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75151: LD_VAR 0 4
75155: PPUSH
75156: LD_VAR 0 6
75160: PPUSH
75161: LD_VAR 0 4
75165: PPUSH
75166: CALL_OW 74
75170: PPUSH
75171: CALL 76435 0 2
// end else
75175: GO 75277
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75177: LD_VAR 0 4
75181: PPUSH
75182: LD_VAR 0 2
75186: PUSH
75187: LD_VAR 0 9
75191: ARRAY
75192: PUSH
75193: LD_INT 1
75195: ARRAY
75196: PPUSH
75197: LD_VAR 0 2
75201: PUSH
75202: LD_VAR 0 9
75206: ARRAY
75207: PUSH
75208: LD_INT 2
75210: ARRAY
75211: PPUSH
75212: CALL_OW 297
75216: PUSH
75217: LD_INT 6
75219: GREATER
75220: IFFALSE 75263
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75222: LD_VAR 0 4
75226: PPUSH
75227: LD_VAR 0 2
75231: PUSH
75232: LD_VAR 0 9
75236: ARRAY
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PPUSH
75242: LD_VAR 0 2
75246: PUSH
75247: LD_VAR 0 9
75251: ARRAY
75252: PUSH
75253: LD_INT 2
75255: ARRAY
75256: PPUSH
75257: CALL_OW 114
75261: GO 75277
// SetTag ( i , tag ) ;
75263: LD_VAR 0 4
75267: PPUSH
75268: LD_VAR 0 9
75272: PPUSH
75273: CALL_OW 109
// end else
75277: GO 75350
// if enemy then
75279: LD_VAR 0 5
75283: IFFALSE 75350
// begin if GetWeapon ( i ) = ru_time_lapser then
75285: LD_VAR 0 4
75289: PPUSH
75290: CALL_OW 264
75294: PUSH
75295: LD_INT 49
75297: EQUAL
75298: IFFALSE 75326
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75300: LD_VAR 0 4
75304: PPUSH
75305: LD_VAR 0 5
75309: PPUSH
75310: LD_VAR 0 4
75314: PPUSH
75315: CALL_OW 74
75319: PPUSH
75320: CALL_OW 112
75324: GO 75350
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75326: LD_VAR 0 4
75330: PPUSH
75331: LD_VAR 0 5
75335: PPUSH
75336: LD_VAR 0 4
75340: PPUSH
75341: CALL_OW 74
75345: PPUSH
75346: CALL 76435 0 2
// end ; end ;
75350: GO 74922
75352: POP
75353: POP
// end ;
75354: LD_VAR 0 3
75358: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75359: LD_INT 0
75361: PPUSH
75362: PPUSH
75363: PPUSH
// if not unit or IsInUnit ( unit ) then
75364: LD_VAR 0 1
75368: NOT
75369: IFTRUE 75382
75371: PUSH
75372: LD_VAR 0 1
75376: PPUSH
75377: CALL_OW 310
75381: OR
75382: IFFALSE 75386
// exit ;
75384: GO 75477
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75386: LD_ADDR_VAR 0 4
75390: PUSH
75391: LD_VAR 0 1
75395: PPUSH
75396: CALL_OW 250
75400: PPUSH
75401: LD_VAR 0 2
75405: PPUSH
75406: LD_INT 1
75408: PPUSH
75409: CALL_OW 272
75413: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75414: LD_ADDR_VAR 0 5
75418: PUSH
75419: LD_VAR 0 1
75423: PPUSH
75424: CALL_OW 251
75428: PPUSH
75429: LD_VAR 0 2
75433: PPUSH
75434: LD_INT 1
75436: PPUSH
75437: CALL_OW 273
75441: ST_TO_ADDR
// if ValidHex ( x , y ) then
75442: LD_VAR 0 4
75446: PPUSH
75447: LD_VAR 0 5
75451: PPUSH
75452: CALL_OW 488
75456: IFFALSE 75477
// ComTurnXY ( unit , x , y ) ;
75458: LD_VAR 0 1
75462: PPUSH
75463: LD_VAR 0 4
75467: PPUSH
75468: LD_VAR 0 5
75472: PPUSH
75473: CALL_OW 118
// end ;
75477: LD_VAR 0 3
75481: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75482: LD_INT 0
75484: PPUSH
75485: PPUSH
// result := false ;
75486: LD_ADDR_VAR 0 3
75490: PUSH
75491: LD_INT 0
75493: ST_TO_ADDR
// if not units then
75494: LD_VAR 0 2
75498: NOT
75499: IFFALSE 75503
// exit ;
75501: GO 75548
// for i in units do
75503: LD_ADDR_VAR 0 4
75507: PUSH
75508: LD_VAR 0 2
75512: PUSH
75513: FOR_IN
75514: IFFALSE 75546
// if See ( side , i ) then
75516: LD_VAR 0 1
75520: PPUSH
75521: LD_VAR 0 4
75525: PPUSH
75526: CALL_OW 292
75530: IFFALSE 75544
// begin result := true ;
75532: LD_ADDR_VAR 0 3
75536: PUSH
75537: LD_INT 1
75539: ST_TO_ADDR
// exit ;
75540: POP
75541: POP
75542: GO 75548
// end ;
75544: GO 75513
75546: POP
75547: POP
// end ;
75548: LD_VAR 0 3
75552: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75553: LD_INT 0
75555: PPUSH
75556: PPUSH
75557: PPUSH
75558: PPUSH
// if not unit or not points then
75559: LD_VAR 0 1
75563: NOT
75564: IFTRUE 75573
75566: PUSH
75567: LD_VAR 0 2
75571: NOT
75572: OR
75573: IFFALSE 75577
// exit ;
75575: GO 75667
// dist := 99999 ;
75577: LD_ADDR_VAR 0 5
75581: PUSH
75582: LD_INT 99999
75584: ST_TO_ADDR
// for i in points do
75585: LD_ADDR_VAR 0 4
75589: PUSH
75590: LD_VAR 0 2
75594: PUSH
75595: FOR_IN
75596: IFFALSE 75665
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75598: LD_ADDR_VAR 0 6
75602: PUSH
75603: LD_VAR 0 1
75607: PPUSH
75608: LD_VAR 0 4
75612: PUSH
75613: LD_INT 1
75615: ARRAY
75616: PPUSH
75617: LD_VAR 0 4
75621: PUSH
75622: LD_INT 2
75624: ARRAY
75625: PPUSH
75626: CALL_OW 297
75630: ST_TO_ADDR
// if tmpDist < dist then
75631: LD_VAR 0 6
75635: PUSH
75636: LD_VAR 0 5
75640: LESS
75641: IFFALSE 75663
// begin result := i ;
75643: LD_ADDR_VAR 0 3
75647: PUSH
75648: LD_VAR 0 4
75652: ST_TO_ADDR
// dist := tmpDist ;
75653: LD_ADDR_VAR 0 5
75657: PUSH
75658: LD_VAR 0 6
75662: ST_TO_ADDR
// end ; end ;
75663: GO 75595
75665: POP
75666: POP
// end ;
75667: LD_VAR 0 3
75671: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75672: LD_INT 0
75674: PPUSH
// uc_side := side ;
75675: LD_ADDR_OWVAR 20
75679: PUSH
75680: LD_VAR 0 1
75684: ST_TO_ADDR
// uc_nation := 3 ;
75685: LD_ADDR_OWVAR 21
75689: PUSH
75690: LD_INT 3
75692: ST_TO_ADDR
// vc_chassis := 25 ;
75693: LD_ADDR_OWVAR 37
75697: PUSH
75698: LD_INT 25
75700: ST_TO_ADDR
// vc_engine := engine_siberite ;
75701: LD_ADDR_OWVAR 39
75705: PUSH
75706: LD_INT 3
75708: ST_TO_ADDR
// vc_control := control_computer ;
75709: LD_ADDR_OWVAR 38
75713: PUSH
75714: LD_INT 3
75716: ST_TO_ADDR
// vc_weapon := 59 ;
75717: LD_ADDR_OWVAR 40
75721: PUSH
75722: LD_INT 59
75724: ST_TO_ADDR
// result := CreateVehicle ;
75725: LD_ADDR_VAR 0 5
75729: PUSH
75730: CALL_OW 45
75734: ST_TO_ADDR
// SetDir ( result , d ) ;
75735: LD_VAR 0 5
75739: PPUSH
75740: LD_VAR 0 4
75744: PPUSH
75745: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75749: LD_VAR 0 5
75753: PPUSH
75754: LD_VAR 0 2
75758: PPUSH
75759: LD_VAR 0 3
75763: PPUSH
75764: LD_INT 0
75766: PPUSH
75767: CALL_OW 48
// end ;
75771: LD_VAR 0 5
75775: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75776: LD_INT 0
75778: PPUSH
75779: PPUSH
75780: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75781: LD_ADDR_VAR 0 2
75785: PUSH
75786: LD_INT 0
75788: PUSH
75789: LD_INT 0
75791: PUSH
75792: LD_INT 0
75794: PUSH
75795: LD_INT 0
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75804: LD_VAR 0 1
75808: NOT
75809: IFTRUE 75842
75811: PUSH
75812: LD_VAR 0 1
75816: PPUSH
75817: CALL_OW 264
75821: PUSH
75822: LD_INT 12
75824: PUSH
75825: LD_INT 51
75827: PUSH
75828: LD_INT 32
75830: PUSH
75831: LD_INT 89
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: IN
75840: NOT
75841: OR
75842: IFFALSE 75846
// exit ;
75844: GO 75944
// for i := 1 to 3 do
75846: LD_ADDR_VAR 0 3
75850: PUSH
75851: DOUBLE
75852: LD_INT 1
75854: DEC
75855: ST_TO_ADDR
75856: LD_INT 3
75858: PUSH
75859: FOR_TO
75860: IFFALSE 75942
// begin tmp := GetCargo ( cargo , i ) ;
75862: LD_ADDR_VAR 0 4
75866: PUSH
75867: LD_VAR 0 1
75871: PPUSH
75872: LD_VAR 0 3
75876: PPUSH
75877: CALL_OW 289
75881: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75882: LD_ADDR_VAR 0 2
75886: PUSH
75887: LD_VAR 0 2
75891: PPUSH
75892: LD_VAR 0 3
75896: PPUSH
75897: LD_VAR 0 4
75901: PPUSH
75902: CALL_OW 1
75906: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75907: LD_ADDR_VAR 0 2
75911: PUSH
75912: LD_VAR 0 2
75916: PPUSH
75917: LD_INT 4
75919: PPUSH
75920: LD_VAR 0 2
75924: PUSH
75925: LD_INT 4
75927: ARRAY
75928: PUSH
75929: LD_VAR 0 4
75933: PLUS
75934: PPUSH
75935: CALL_OW 1
75939: ST_TO_ADDR
// end ;
75940: GO 75859
75942: POP
75943: POP
// end ;
75944: LD_VAR 0 2
75948: RET
// export function Length ( array ) ; begin
75949: LD_INT 0
75951: PPUSH
// result := array + 0 ;
75952: LD_ADDR_VAR 0 2
75956: PUSH
75957: LD_VAR 0 1
75961: PUSH
75962: LD_INT 0
75964: PLUS
75965: ST_TO_ADDR
// end ;
75966: LD_VAR 0 2
75970: RET
// export function PrepareArray ( array ) ; begin
75971: LD_INT 0
75973: PPUSH
// result := array diff 0 ;
75974: LD_ADDR_VAR 0 2
75978: PUSH
75979: LD_VAR 0 1
75983: PUSH
75984: LD_INT 0
75986: DIFF
75987: ST_TO_ADDR
// if not result [ 1 ] then
75988: LD_VAR 0 2
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: NOT
75997: IFFALSE 76017
// result := Delete ( result , 1 ) ;
75999: LD_ADDR_VAR 0 2
76003: PUSH
76004: LD_VAR 0 2
76008: PPUSH
76009: LD_INT 1
76011: PPUSH
76012: CALL_OW 3
76016: ST_TO_ADDR
// end ;
76017: LD_VAR 0 2
76021: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76022: LD_INT 0
76024: PPUSH
76025: PPUSH
76026: PPUSH
76027: PPUSH
// sibRocketRange := 25 ;
76028: LD_ADDR_VAR 0 6
76032: PUSH
76033: LD_INT 25
76035: ST_TO_ADDR
// result := false ;
76036: LD_ADDR_VAR 0 4
76040: PUSH
76041: LD_INT 0
76043: ST_TO_ADDR
// for i := 0 to 5 do
76044: LD_ADDR_VAR 0 5
76048: PUSH
76049: DOUBLE
76050: LD_INT 0
76052: DEC
76053: ST_TO_ADDR
76054: LD_INT 5
76056: PUSH
76057: FOR_TO
76058: IFFALSE 76125
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76060: LD_VAR 0 1
76064: PPUSH
76065: LD_VAR 0 5
76069: PPUSH
76070: LD_VAR 0 6
76074: PPUSH
76075: CALL_OW 272
76079: PPUSH
76080: LD_VAR 0 2
76084: PPUSH
76085: LD_VAR 0 5
76089: PPUSH
76090: LD_VAR 0 6
76094: PPUSH
76095: CALL_OW 273
76099: PPUSH
76100: LD_VAR 0 3
76104: PPUSH
76105: CALL_OW 309
76109: IFFALSE 76123
// begin result := true ;
76111: LD_ADDR_VAR 0 4
76115: PUSH
76116: LD_INT 1
76118: ST_TO_ADDR
// exit ;
76119: POP
76120: POP
76121: GO 76127
// end ;
76123: GO 76057
76125: POP
76126: POP
// end ;
76127: LD_VAR 0 4
76131: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76132: LD_INT 0
76134: PPUSH
76135: PPUSH
76136: PPUSH
// if btype = b_depot then
76137: LD_VAR 0 2
76141: PUSH
76142: LD_INT 0
76144: EQUAL
76145: IFFALSE 76157
// begin result := true ;
76147: LD_ADDR_VAR 0 3
76151: PUSH
76152: LD_INT 1
76154: ST_TO_ADDR
// exit ;
76155: GO 76277
// end ; pom := GetBase ( depot ) ;
76157: LD_ADDR_VAR 0 4
76161: PUSH
76162: LD_VAR 0 1
76166: PPUSH
76167: CALL_OW 274
76171: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76172: LD_ADDR_VAR 0 5
76176: PUSH
76177: LD_VAR 0 2
76181: PPUSH
76182: LD_VAR 0 1
76186: PPUSH
76187: CALL_OW 248
76191: PPUSH
76192: CALL_OW 450
76196: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
76197: LD_ADDR_VAR 0 3
76201: PUSH
76202: LD_VAR 0 4
76206: PPUSH
76207: LD_INT 1
76209: PPUSH
76210: CALL_OW 275
76214: PUSH
76215: LD_VAR 0 5
76219: PUSH
76220: LD_INT 1
76222: ARRAY
76223: GREATEREQUAL
76224: IFFALSE 76250
76226: PUSH
76227: LD_VAR 0 4
76231: PPUSH
76232: LD_INT 2
76234: PPUSH
76235: CALL_OW 275
76239: PUSH
76240: LD_VAR 0 5
76244: PUSH
76245: LD_INT 2
76247: ARRAY
76248: GREATEREQUAL
76249: AND
76250: IFFALSE 76276
76252: PUSH
76253: LD_VAR 0 4
76257: PPUSH
76258: LD_INT 3
76260: PPUSH
76261: CALL_OW 275
76265: PUSH
76266: LD_VAR 0 5
76270: PUSH
76271: LD_INT 3
76273: ARRAY
76274: GREATEREQUAL
76275: AND
76276: ST_TO_ADDR
// end ;
76277: LD_VAR 0 3
76281: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76282: LD_INT 0
76284: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76285: LD_VAR 0 1
76289: PPUSH
76290: LD_VAR 0 2
76294: PPUSH
76295: LD_INT 0
76297: PPUSH
76298: LD_INT 0
76300: PPUSH
76301: LD_INT 1
76303: PPUSH
76304: LD_INT 0
76306: PPUSH
76307: CALL_OW 587
// end ;
76311: LD_VAR 0 3
76315: RET
// export function CenterOnNow ( unit ) ; begin
76316: LD_INT 0
76318: PPUSH
// result := IsInUnit ( unit ) ;
76319: LD_ADDR_VAR 0 2
76323: PUSH
76324: LD_VAR 0 1
76328: PPUSH
76329: CALL_OW 310
76333: ST_TO_ADDR
// if not result then
76334: LD_VAR 0 2
76338: NOT
76339: IFFALSE 76351
// result := unit ;
76341: LD_ADDR_VAR 0 2
76345: PUSH
76346: LD_VAR 0 1
76350: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76351: LD_VAR 0 1
76355: PPUSH
76356: CALL_OW 87
// end ;
76360: LD_VAR 0 2
76364: RET
// export function ComMoveHex ( unit , hex ) ; begin
76365: LD_INT 0
76367: PPUSH
// if not hex then
76368: LD_VAR 0 2
76372: NOT
76373: IFFALSE 76377
// exit ;
76375: GO 76430
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76377: LD_VAR 0 2
76381: PUSH
76382: LD_INT 1
76384: ARRAY
76385: PPUSH
76386: LD_VAR 0 2
76390: PUSH
76391: LD_INT 2
76393: ARRAY
76394: PPUSH
76395: CALL_OW 428
76399: IFFALSE 76403
// exit ;
76401: GO 76430
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76403: LD_VAR 0 1
76407: PPUSH
76408: LD_VAR 0 2
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PPUSH
76417: LD_VAR 0 2
76421: PUSH
76422: LD_INT 2
76424: ARRAY
76425: PPUSH
76426: CALL_OW 111
// end ;
76430: LD_VAR 0 3
76434: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76435: LD_INT 0
76437: PPUSH
76438: PPUSH
76439: PPUSH
// if not unit or not enemy then
76440: LD_VAR 0 1
76444: NOT
76445: IFTRUE 76454
76447: PUSH
76448: LD_VAR 0 2
76452: NOT
76453: OR
76454: IFFALSE 76458
// exit ;
76456: GO 76584
// x := GetX ( enemy ) ;
76458: LD_ADDR_VAR 0 4
76462: PUSH
76463: LD_VAR 0 2
76467: PPUSH
76468: CALL_OW 250
76472: ST_TO_ADDR
// y := GetY ( enemy ) ;
76473: LD_ADDR_VAR 0 5
76477: PUSH
76478: LD_VAR 0 2
76482: PPUSH
76483: CALL_OW 251
76487: ST_TO_ADDR
// if ValidHex ( x , y ) then
76488: LD_VAR 0 4
76492: PPUSH
76493: LD_VAR 0 5
76497: PPUSH
76498: CALL_OW 488
76502: IFFALSE 76584
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76504: LD_VAR 0 2
76508: PPUSH
76509: CALL_OW 247
76513: PUSH
76514: LD_INT 3
76516: PUSH
76517: LD_INT 2
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: IN
76524: IFTRUE 76547
76526: PUSH
76527: LD_VAR 0 1
76531: PPUSH
76532: CALL_OW 255
76536: PPUSH
76537: LD_VAR 0 2
76541: PPUSH
76542: CALL_OW 292
76546: OR
76547: IFFALSE 76565
// ComAttackUnit ( unit , enemy ) else
76549: LD_VAR 0 1
76553: PPUSH
76554: LD_VAR 0 2
76558: PPUSH
76559: CALL_OW 115
76563: GO 76584
// ComAgressiveMove ( unit , x , y ) ;
76565: LD_VAR 0 1
76569: PPUSH
76570: LD_VAR 0 4
76574: PPUSH
76575: LD_VAR 0 5
76579: PPUSH
76580: CALL_OW 114
// end ;
76584: LD_VAR 0 3
76588: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76589: LD_INT 0
76591: PPUSH
76592: PPUSH
76593: PPUSH
// list := AreaToList ( area , 0 ) ;
76594: LD_ADDR_VAR 0 5
76598: PUSH
76599: LD_VAR 0 1
76603: PPUSH
76604: LD_INT 0
76606: PPUSH
76607: CALL_OW 517
76611: ST_TO_ADDR
// if not list then
76612: LD_VAR 0 5
76616: NOT
76617: IFFALSE 76621
// exit ;
76619: GO 76751
// if all then
76621: LD_VAR 0 2
76625: IFFALSE 76713
// begin for i := 1 to list [ 1 ] do
76627: LD_ADDR_VAR 0 4
76631: PUSH
76632: DOUBLE
76633: LD_INT 1
76635: DEC
76636: ST_TO_ADDR
76637: LD_VAR 0 5
76641: PUSH
76642: LD_INT 1
76644: ARRAY
76645: PUSH
76646: FOR_TO
76647: IFFALSE 76709
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76649: LD_ADDR_VAR 0 3
76653: PUSH
76654: LD_VAR 0 3
76658: PPUSH
76659: LD_VAR 0 3
76663: PUSH
76664: LD_INT 1
76666: PLUS
76667: PPUSH
76668: LD_VAR 0 5
76672: PUSH
76673: LD_INT 1
76675: ARRAY
76676: PUSH
76677: LD_VAR 0 4
76681: ARRAY
76682: PUSH
76683: LD_VAR 0 5
76687: PUSH
76688: LD_INT 2
76690: ARRAY
76691: PUSH
76692: LD_VAR 0 4
76696: ARRAY
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PPUSH
76702: CALL_OW 1
76706: ST_TO_ADDR
76707: GO 76646
76709: POP
76710: POP
// exit ;
76711: GO 76751
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76713: LD_ADDR_VAR 0 3
76717: PUSH
76718: LD_VAR 0 5
76722: PUSH
76723: LD_INT 1
76725: ARRAY
76726: PUSH
76727: LD_INT 1
76729: ARRAY
76730: PUSH
76731: LD_VAR 0 5
76735: PUSH
76736: LD_INT 2
76738: ARRAY
76739: PUSH
76740: LD_INT 1
76742: ARRAY
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: EMPTY
76749: LIST
76750: ST_TO_ADDR
// end ;
76751: LD_VAR 0 3
76755: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76756: LD_INT 0
76758: PPUSH
76759: PPUSH
// list := AreaToList ( area , 0 ) ;
76760: LD_ADDR_VAR 0 4
76764: PUSH
76765: LD_VAR 0 1
76769: PPUSH
76770: LD_INT 0
76772: PPUSH
76773: CALL_OW 517
76777: ST_TO_ADDR
// if not list then
76778: LD_VAR 0 4
76782: NOT
76783: IFFALSE 76787
// exit ;
76785: GO 76828
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76787: LD_ADDR_VAR 0 3
76791: PUSH
76792: LD_VAR 0 4
76796: PUSH
76797: LD_INT 1
76799: ARRAY
76800: PUSH
76801: LD_INT 1
76803: ARRAY
76804: PUSH
76805: LD_VAR 0 4
76809: PUSH
76810: LD_INT 2
76812: ARRAY
76813: PUSH
76814: LD_INT 1
76816: ARRAY
76817: PUSH
76818: LD_VAR 0 2
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: LIST
76827: ST_TO_ADDR
// end ;
76828: LD_VAR 0 3
76832: RET
// export function First ( array ) ; begin
76833: LD_INT 0
76835: PPUSH
// if not array then
76836: LD_VAR 0 1
76840: NOT
76841: IFFALSE 76845
// exit ;
76843: GO 76859
// result := array [ 1 ] ;
76845: LD_ADDR_VAR 0 2
76849: PUSH
76850: LD_VAR 0 1
76854: PUSH
76855: LD_INT 1
76857: ARRAY
76858: ST_TO_ADDR
// end ;
76859: LD_VAR 0 2
76863: RET
// export function Last ( array ) ; begin
76864: LD_INT 0
76866: PPUSH
// if not array then
76867: LD_VAR 0 1
76871: NOT
76872: IFFALSE 76876
// exit ;
76874: GO 76892
// result := array [ array ] ;
76876: LD_ADDR_VAR 0 2
76880: PUSH
76881: LD_VAR 0 1
76885: PUSH
76886: LD_VAR 0 1
76890: ARRAY
76891: ST_TO_ADDR
// end ;
76892: LD_VAR 0 2
76896: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76897: LD_INT 0
76899: PPUSH
76900: PPUSH
// result := [ ] ;
76901: LD_ADDR_VAR 0 5
76905: PUSH
76906: EMPTY
76907: ST_TO_ADDR
// if not array then
76908: LD_VAR 0 1
76912: NOT
76913: IFFALSE 76917
// exit ;
76915: GO 77029
// for i := 1 to array do
76917: LD_ADDR_VAR 0 6
76921: PUSH
76922: DOUBLE
76923: LD_INT 1
76925: DEC
76926: ST_TO_ADDR
76927: LD_VAR 0 1
76931: PUSH
76932: FOR_TO
76933: IFFALSE 77027
// if array [ i ] [ index ] = value then
76935: LD_VAR 0 1
76939: PUSH
76940: LD_VAR 0 6
76944: ARRAY
76945: PUSH
76946: LD_VAR 0 2
76950: ARRAY
76951: PUSH
76952: LD_VAR 0 3
76956: EQUAL
76957: IFFALSE 77025
// begin if indexColumn then
76959: LD_VAR 0 4
76963: IFFALSE 76999
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76965: LD_ADDR_VAR 0 5
76969: PUSH
76970: LD_VAR 0 5
76974: PPUSH
76975: LD_VAR 0 1
76979: PUSH
76980: LD_VAR 0 6
76984: ARRAY
76985: PUSH
76986: LD_VAR 0 4
76990: ARRAY
76991: PPUSH
76992: CALL 72037 0 2
76996: ST_TO_ADDR
76997: GO 77025
// result := Join ( result , array [ i ] ) ;
76999: LD_ADDR_VAR 0 5
77003: PUSH
77004: LD_VAR 0 5
77008: PPUSH
77009: LD_VAR 0 1
77013: PUSH
77014: LD_VAR 0 6
77018: ARRAY
77019: PPUSH
77020: CALL 72037 0 2
77024: ST_TO_ADDR
// end ;
77025: GO 76932
77027: POP
77028: POP
// end ;
77029: LD_VAR 0 5
77033: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
77034: LD_INT 0
77036: PPUSH
// if not vehicles or not parkingPoint then
77037: LD_VAR 0 1
77041: NOT
77042: IFTRUE 77051
77044: PUSH
77045: LD_VAR 0 2
77049: NOT
77050: OR
77051: IFFALSE 77055
// exit ;
77053: GO 77153
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
77055: LD_ADDR_VAR 0 1
77059: PUSH
77060: LD_VAR 0 1
77064: PPUSH
77065: LD_INT 50
77067: PUSH
77068: EMPTY
77069: LIST
77070: PUSH
77071: LD_INT 3
77073: PUSH
77074: LD_INT 92
77076: PUSH
77077: LD_VAR 0 2
77081: PUSH
77082: LD_INT 1
77084: ARRAY
77085: PUSH
77086: LD_VAR 0 2
77090: PUSH
77091: LD_INT 2
77093: ARRAY
77094: PUSH
77095: LD_INT 8
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PPUSH
77112: CALL_OW 72
77116: ST_TO_ADDR
// if not vehicles then
77117: LD_VAR 0 1
77121: NOT
77122: IFFALSE 77126
// exit ;
77124: GO 77153
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
77126: LD_VAR 0 1
77130: PPUSH
77131: LD_VAR 0 2
77135: PUSH
77136: LD_INT 1
77138: ARRAY
77139: PPUSH
77140: LD_VAR 0 2
77144: PUSH
77145: LD_INT 2
77147: ARRAY
77148: PPUSH
77149: CALL_OW 111
// end ;
77153: LD_VAR 0 3
77157: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
77158: LD_INT 0
77160: PPUSH
77161: PPUSH
77162: PPUSH
// if not side or not area then
77163: LD_VAR 0 1
77167: NOT
77168: IFTRUE 77177
77170: PUSH
77171: LD_VAR 0 2
77175: NOT
77176: OR
77177: IFFALSE 77181
// exit ;
77179: GO 77300
// tmp := AreaToList ( area , 0 ) ;
77181: LD_ADDR_VAR 0 5
77185: PUSH
77186: LD_VAR 0 2
77190: PPUSH
77191: LD_INT 0
77193: PPUSH
77194: CALL_OW 517
77198: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
77199: LD_ADDR_VAR 0 4
77203: PUSH
77204: DOUBLE
77205: LD_INT 1
77207: DEC
77208: ST_TO_ADDR
77209: LD_VAR 0 5
77213: PUSH
77214: LD_INT 1
77216: ARRAY
77217: PUSH
77218: FOR_TO
77219: IFFALSE 77298
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
77221: LD_VAR 0 5
77225: PUSH
77226: LD_INT 1
77228: ARRAY
77229: PUSH
77230: LD_VAR 0 4
77234: ARRAY
77235: PPUSH
77236: LD_VAR 0 5
77240: PUSH
77241: LD_INT 2
77243: ARRAY
77244: PUSH
77245: LD_VAR 0 4
77249: ARRAY
77250: PPUSH
77251: CALL_OW 351
77255: IFFALSE 77296
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
77257: LD_VAR 0 5
77261: PUSH
77262: LD_INT 1
77264: ARRAY
77265: PUSH
77266: LD_VAR 0 4
77270: ARRAY
77271: PPUSH
77272: LD_VAR 0 5
77276: PUSH
77277: LD_INT 2
77279: ARRAY
77280: PUSH
77281: LD_VAR 0 4
77285: ARRAY
77286: PPUSH
77287: LD_VAR 0 1
77291: PPUSH
77292: CALL_OW 244
// end ;
77296: GO 77218
77298: POP
77299: POP
// end ;
77300: LD_VAR 0 3
77304: RET
// export function UniqueArray ( array ) ; var i ; begin
77305: LD_INT 0
77307: PPUSH
77308: PPUSH
// result := [ ] ;
77309: LD_ADDR_VAR 0 2
77313: PUSH
77314: EMPTY
77315: ST_TO_ADDR
// if not array then
77316: LD_VAR 0 1
77320: NOT
77321: IFFALSE 77325
// exit ;
77323: GO 77386
// for i := 1 to array do
77325: LD_ADDR_VAR 0 3
77329: PUSH
77330: DOUBLE
77331: LD_INT 1
77333: DEC
77334: ST_TO_ADDR
77335: LD_VAR 0 1
77339: PUSH
77340: FOR_TO
77341: IFFALSE 77384
// if not array [ i ] in result then
77343: LD_VAR 0 1
77347: PUSH
77348: LD_VAR 0 3
77352: ARRAY
77353: PUSH
77354: LD_VAR 0 2
77358: IN
77359: NOT
77360: IFFALSE 77382
// result := Join ( result , i ) ;
77362: LD_ADDR_VAR 0 2
77366: PUSH
77367: LD_VAR 0 2
77371: PPUSH
77372: LD_VAR 0 3
77376: PPUSH
77377: CALL 72037 0 2
77381: ST_TO_ADDR
77382: GO 77340
77384: POP
77385: POP
// end ; end_of_file
77386: LD_VAR 0 2
77390: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77391: LD_VAR 0 1
77395: PUSH
77396: LD_INT 200
77398: DOUBLE
77399: GREATEREQUAL
77400: IFFALSE 77408
77402: LD_INT 299
77404: DOUBLE
77405: LESSEQUAL
77406: IFTRUE 77410
77408: GO 77442
77410: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77411: LD_VAR 0 1
77415: PPUSH
77416: LD_VAR 0 2
77420: PPUSH
77421: LD_VAR 0 3
77425: PPUSH
77426: LD_VAR 0 4
77430: PPUSH
77431: LD_VAR 0 5
77435: PPUSH
77436: CALL 28113 0 5
77440: GO 77519
77442: LD_INT 300
77444: DOUBLE
77445: GREATEREQUAL
77446: IFFALSE 77454
77448: LD_INT 399
77450: DOUBLE
77451: LESSEQUAL
77452: IFTRUE 77456
77454: GO 77518
77456: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77457: LD_VAR 0 1
77461: PPUSH
77462: LD_VAR 0 2
77466: PPUSH
77467: LD_VAR 0 3
77471: PPUSH
77472: LD_VAR 0 4
77476: PPUSH
77477: LD_VAR 0 5
77481: PPUSH
77482: LD_VAR 0 6
77486: PPUSH
77487: LD_VAR 0 7
77491: PPUSH
77492: LD_VAR 0 8
77496: PPUSH
77497: LD_VAR 0 9
77501: PPUSH
77502: LD_VAR 0 10
77506: PPUSH
77507: LD_VAR 0 11
77511: PPUSH
77512: CALL 23916 0 11
77516: GO 77519
77518: POP
// end ;
77519: PPOPN 11
77521: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77522: LD_VAR 0 1
77526: PPUSH
77527: LD_VAR 0 2
77531: PPUSH
77532: LD_VAR 0 3
77536: PPUSH
77537: LD_VAR 0 4
77541: PPUSH
77542: LD_VAR 0 5
77546: PPUSH
77547: CALL 27413 0 5
// end ; end_of_file
77551: PPOPN 5
77553: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77554: LD_VAR 0 1
77558: PPUSH
77559: LD_VAR 0 2
77563: PPUSH
77564: LD_VAR 0 3
77568: PPUSH
77569: LD_VAR 0 4
77573: PPUSH
77574: LD_VAR 0 5
77578: PPUSH
77579: LD_VAR 0 6
77583: PPUSH
77584: CALL 11456 0 6
// end ;
77588: PPOPN 6
77590: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77591: LD_INT 0
77593: PPUSH
// begin if not units then
77594: LD_VAR 0 1
77598: NOT
77599: IFFALSE 77603
// exit ;
77601: GO 77637
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77603: LD_VAR 0 1
77607: PPUSH
77608: LD_VAR 0 2
77612: PPUSH
77613: LD_VAR 0 3
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: LD_VAR 0 5
77627: PPUSH
77628: LD_VAR 0 6
77632: PPUSH
77633: CALL 33810 0 6
// end ;
77637: PPOPN 7
77639: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77640: CALL 11336 0 0
// end ;
77644: PPOPN 1
77646: END
