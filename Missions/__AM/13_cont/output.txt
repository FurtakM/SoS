// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1220 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1124 0 0
// PrepareDifficulty ;
 248: CALL 8426 0 0
// Action ;
 252: CALL 5290 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 40
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 41
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 42
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 40
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31084 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 40
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31084 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 40
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31084 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 40
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31084 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 40
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31084 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 40
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31084 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 40
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31084 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 40
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31084 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31084 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31084 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31084 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31084 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31084 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31084 0 3
 780: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING Powell
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 31084 0 3
 799: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 800: LD_ADDR_VAR 0 2
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_EXP 2
 814: PUSH
 815: LD_EXP 3
 819: PUSH
 820: LD_EXP 4
 824: PUSH
 825: LD_EXP 5
 829: PUSH
 830: LD_EXP 6
 834: PUSH
 835: LD_EXP 7
 839: PUSH
 840: LD_EXP 8
 844: PUSH
 845: LD_EXP 9
 849: PUSH
 850: LD_EXP 10
 854: PUSH
 855: LD_EXP 11
 859: PUSH
 860: LD_EXP 12
 864: PUSH
 865: LD_EXP 13
 869: PUSH
 870: LD_EXP 14
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 891: LD_ADDR_VAR 0 3
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 33
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PPUSH
 931: CALL_OW 69
 935: ST_TO_ADDR
// for i = tmp downto 1 do
 936: LD_ADDR_VAR 0 4
 940: PUSH
 941: DOUBLE
 942: LD_VAR 0 2
 946: INC
 947: ST_TO_ADDR
 948: LD_INT 1
 950: PUSH
 951: FOR_DOWNTO
 952: IFFALSE 989
// if not tmp [ i ] then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_VAR 0 4
 963: ARRAY
 964: NOT
 965: IFFALSE 987
// tmp := Delete ( tmp , i ) ;
 967: LD_ADDR_VAR 0 2
 971: PUSH
 972: LD_VAR 0 2
 976: PPUSH
 977: LD_VAR 0 4
 981: PPUSH
 982: CALL_OW 3
 986: ST_TO_ADDR
 987: GO 951
 989: POP
 990: POP
// for i = 1 to tmp do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1037
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1009: LD_VAR 0 2
1013: PUSH
1014: LD_VAR 0 4
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 3
1024: PUSH
1025: LD_VAR 0 4
1029: ARRAY
1030: PPUSH
1031: CALL_OW 52
1035: GO 1006
1037: POP
1038: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 25
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 34
1084: PUSH
1085: LD_INT 13
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: PUSH
1101: LD_INT 0
1103: EQUAL
1104: AND
1105: IFFALSE 1119
// SetClass ( JMM , 2 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 336
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareAmericansRandom ; var i ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1136: LD_ADDR_EXP 16
1140: PUSH
1141: LD_STRING 13c_others
1143: PPUSH
1144: CALL_OW 31
1148: ST_TO_ADDR
// for i in others13 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: LD_EXP 16
1158: PUSH
1159: FOR_IN
1160: IFFALSE 1213
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_INT 22
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 58
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 69
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 52
1211: GO 1159
1213: POP
1214: POP
// end ;
1215: LD_VAR 0 1
1219: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1228: LD_ADDR_VAR 0 5
1232: PUSH
1233: LD_STRING 13_VehiclesIn13_1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_INT 100
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 3
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 6
1276: PUSH
1277: LD_INT 100
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 5
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 6
1302: PUSH
1303: LD_INT 100
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 6
1328: PUSH
1329: LD_INT 100
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 100
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 6
1380: PUSH
1381: LD_INT 100
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 5
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 6
1406: PUSH
1407: LD_INT 100
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 5
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 6
1432: PUSH
1433: LD_INT 100
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1459: LD_ADDR_EXP 24
1463: PUSH
1464: LD_STRING 13_ResourcesInCargo13_1
1466: PPUSH
1467: EMPTY
1468: PPUSH
1469: CALL_OW 30
1473: ST_TO_ADDR
// cargoList = [ ] ;
1474: LD_ADDR_VAR 0 6
1478: PUSH
1479: EMPTY
1480: ST_TO_ADDR
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// if vehicles then
1489: LD_VAR 0 5
1493: IFFALSE 1840
// begin for i := 1 to vehicles do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_VAR 0 5
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: ARRAY
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1533: LD_ADDR_OWVAR 37
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: PUSH
1549: LD_INT 2
1551: ARRAY
1552: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1553: LD_ADDR_OWVAR 39
1557: PUSH
1558: LD_VAR 0 5
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_VAR 0 5
1582: PUSH
1583: LD_VAR 0 2
1587: ARRAY
1588: PUSH
1589: LD_INT 4
1591: ARRAY
1592: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1593: LD_ADDR_OWVAR 40
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 5
1611: ARRAY
1612: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1613: LD_ADDR_OWVAR 41
1617: PUSH
1618: LD_INT 40
1620: ST_TO_ADDR
// veh = CreateVehicle ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: CALL_OW 45
1630: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1631: LD_VAR 0 4
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// end ;
1658: GO 1510
1660: POP
1661: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1662: LD_ADDR_VAR 0 6
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: ST_TO_ADDR
// if cargoList then
1707: LD_VAR 0 6
1711: IFFALSE 1840
// for i = 1 to cargoList do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_VAR 0 6
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1838
// begin if resources then
1731: LD_EXP 24
1735: IFFALSE 1836
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1737: LD_VAR 0 6
1741: PUSH
1742: LD_VAR 0 2
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_EXP 24
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: PPUSH
1766: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_EXP 24
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_EXP 24
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 3
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// end ; end ;
1836: GO 1728
1838: POP
1839: POP
// end ; end ;
1840: LD_VAR 0 1
1844: RET
// export function PowellSupport ; var i , veh , un ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
1850: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 4
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_OWVAR 67
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2150
// begin uc_nation := 1 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// uc_side := 1 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// vc_engine := engine_siberite ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control := control_manual ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: LD_INT 6
1930: PUSH
1931: LD_INT 9
1933: PUSH
1934: LD_INT 5
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_OWVAR 67
1951: PUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: CALL_OW 12
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1965: LD_OWVAR 40
1969: PUSH
1970: LD_INT 6
1972: EQUAL
1973: IFFALSE 2002
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1975: LD_ADDR_OWVAR 37
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: ST_TO_ADDR
2000: GO 2037
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: ST_TO_ADDR
// veh = CreateVehicle ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: CALL_OW 45
2046: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetDir ( veh , 1 ) ;
2062: LD_VAR 0 3
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 233
// hc_gallery :=  ;
2074: LD_ADDR_OWVAR 33
2078: PUSH
2079: LD_STRING 
2081: ST_TO_ADDR
// hc_name :=  ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 8
2101: PUSH
2102: LD_INT 8
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_OWVAR 67
2118: ARRAY
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2134: LD_VAR 0 4
2138: PPUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1885
2150: POP
2151: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 2
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_OWVAR 67
2184: ARRAY
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2262
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 9
2197: PUSH
2198: LD_INT 8
2200: PUSH
2201: LD_INT 8
2203: PUSH
2204: LD_INT 7
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_OWVAR 67
2217: ARRAY
2218: PPUSH
2219: CALL_OW 380
// un := CreateHuman ;
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: CALL_OW 44
2232: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2233: LD_VAR 0 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2245: LD_VAR 0 4
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: GO 2186
2262: POP
2263: POP
// end ; end_of_file
2264: LD_VAR 0 1
2268: RET
// export function PrepareBurlak ; begin
2269: LD_INT 0
2271: PPUSH
// uc_side := 7 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 7
2279: ST_TO_ADDR
// uc_nation := 3 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// vc_engine := engine_siberite ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 3
2295: ST_TO_ADDR
// vc_control := control_manual ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: LD_INT 45
2314: PUSH
2315: LD_INT 46
2317: PUSH
2318: LD_INT 46
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_OWVAR 67
2331: ARRAY
2332: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2333: LD_ADDR_OWVAR 37
2337: PUSH
2338: LD_INT 24
2340: ST_TO_ADDR
// Masha := CreateVehicle ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: CALL_OW 45
2350: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2351: LD_EXP 18
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2363: LD_EXP 18
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2378: LD_EXP 18
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2390: LD_ADDR_EXP 17
2394: PUSH
2395: LD_STRING Burlak
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_STRING 
2403: PPUSH
2404: CALL 31084 0 3
2408: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_EXP 18
2418: PPUSH
2419: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2423: LD_EXP 18
2427: PPUSH
2428: LD_INT 107
2430: PPUSH
2431: LD_INT 118
2433: PPUSH
2434: CALL_OW 114
// spawnBurlak := 1 ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 1
2450: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// uc_side := 7 ;
2458: LD_ADDR_OWVAR 20
2462: PUSH
2463: LD_INT 7
2465: ST_TO_ADDR
// uc_nation := 3 ;
2466: LD_ADDR_OWVAR 21
2470: PUSH
2471: LD_INT 3
2473: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2474: LD_ADDR_EXP 19
2478: PUSH
2479: LD_STRING Gnyevko
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_STRING 
2487: PPUSH
2488: CALL 31084 0 3
2492: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2493: LD_ADDR_EXP 20
2497: PUSH
2498: LD_STRING Titov
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 31084 0 3
2511: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2512: LD_ADDR_EXP 21
2516: PUSH
2517: LD_STRING Xavier2
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_STRING 
2525: PPUSH
2526: CALL 31084 0 3
2530: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2531: LD_ADDR_EXP 22
2535: PUSH
2536: LD_STRING Belkov
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: LD_STRING 
2544: PPUSH
2545: CALL 31084 0 3
2549: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2550: LD_ADDR_EXP 23
2554: PUSH
2555: LD_STRING Lipshchin
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: LD_STRING 
2563: PPUSH
2564: CALL 31084 0 3
2568: ST_TO_ADDR
// for i = 1 to 5 do
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: DOUBLE
2575: LD_INT 1
2577: DEC
2578: ST_TO_ADDR
2579: LD_INT 5
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2708
// begin vc_engine := engine_siberite ;
2585: LD_ADDR_OWVAR 39
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// vc_control := control_manual ;
2593: LD_ADDR_OWVAR 38
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2601: LD_ADDR_OWVAR 40
2605: PUSH
2606: LD_INT 43
2608: PUSH
2609: LD_INT 45
2611: PUSH
2612: LD_INT 45
2614: PUSH
2615: LD_INT 44
2617: PUSH
2618: LD_INT 49
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2640: LD_ADDR_OWVAR 37
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 24
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: ST_TO_ADDR
// veh = CreateVehicle ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// end ;
2706: GO 2582
2708: POP
2709: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 7
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 58
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2787: LD_EXP 21
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2805: LD_EXP 22
2809: PPUSH
2810: LD_VAR 0 4
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2823: LD_EXP 23
2827: PPUSH
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 5
2835: ARRAY
2836: PPUSH
2837: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2841: LD_EXP 19
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2853: LD_EXP 20
2857: PUSH
2858: LD_EXP 23
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: LD_INT 9
2869: PPUSH
2870: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2894: LD_VAR 0 4
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 118
2904: PPUSH
2905: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2909: LD_INT 35
2911: PPUSH
2912: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_INT 34
2923: PUSH
2924: LD_INT 49
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 72
2935: PPUSH
2936: LD_EXP 18
2940: PPUSH
2941: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 34
2955: PUSH
2956: LD_INT 49
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PPUSH
2972: LD_INT 107
2974: PPUSH
2975: LD_INT 118
2977: PPUSH
2978: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_EXP 20
2991: PUSH
2992: LD_EXP 23
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: LD_INT 50
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 54
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 72
3028: ST_TO_ADDR
// if bazooka then
3029: LD_VAR 0 5
3033: IFFALSE 3075
// begin for i in bazooka do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3073
// if See ( 1 , i ) then
3048: LD_INT 1
3050: PPUSH
3051: LD_VAR 0 2
3055: PPUSH
3056: CALL_OW 292
3060: IFFALSE 3071
// ComSpaceTimeShoot ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL 32031 0 1
3071: GO 3045
3073: POP
3074: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 49
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: PUSH
3095: LD_INT 0
3097: EQUAL
3098: PUSH
3099: LD_EXP 18
3103: PPUSH
3104: CALL_OW 303
3108: OR
3109: IFFALSE 2909
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: LD_EXP 17
3142: DIFF
3143: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3144: LD_VAR 0 4
3148: PPUSH
3149: LD_INT 107
3151: PPUSH
3152: LD_INT 118
3154: PPUSH
3155: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_EXP 20
3168: PUSH
3169: LD_EXP 23
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: LD_INT 50
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 54
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: ST_TO_ADDR
// if bazooka then
3206: LD_VAR 0 5
3210: IFFALSE 3252
// begin for i in bazooka do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: LD_VAR 0 5
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3250
// if See ( 1 , i ) then
3225: LD_INT 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 292
3237: IFFALSE 3248
// ComSpaceTimeShoot ( i ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: CALL 32031 0 1
3248: GO 3222
3250: POP
3251: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3252: LD_EXP 17
3256: PPUSH
3257: CALL_OW 302
3261: PUSH
3262: LD_EXP 17
3266: PPUSH
3267: CALL_OW 310
3271: NOT
3272: AND
3273: IFFALSE 3290
// ComMoveXY ( Burlak , 107 , 118 ) ;
3275: LD_EXP 17
3279: PPUSH
3280: LD_INT 107
3282: PPUSH
3283: LD_INT 118
3285: PPUSH
3286: CALL_OW 111
// until not tmp ;
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3111
// end ;
3297: LD_VAR 0 1
3301: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
// result := [ ] ;
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_INT 8
3340: PUSH
3341: LD_INT 9
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_VAR 0 6
3352: ARRAY
3353: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: DOUBLE
3360: LD_INT 1
3362: DEC
3363: ST_TO_ADDR
3364: LD_INT 6
3366: PUSH
3367: LD_INT 8
3369: PUSH
3370: LD_INT 10
3372: PUSH
3373: LD_INT 11
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3627
// begin uc_side := 3 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 3
3398: ST_TO_ADDR
// uc_nation := 3 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 3
3406: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3407: LD_INT 24
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 1
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: CALL_OW 12
3433: ARRAY
3434: PPUSH
3435: LD_INT 46
3437: PUSH
3438: LD_INT 46
3440: PUSH
3441: LD_INT 45
3443: PUSH
3444: LD_INT 47
3446: PUSH
3447: LD_INT 49
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 5
3462: PPUSH
3463: CALL_OW 12
3467: ARRAY
3468: PPUSH
3469: LD_INT 100
3471: PPUSH
3472: CALL 35924 0 5
// veh := CreateVehicle ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: CALL_OW 45
3485: ST_TO_ADDR
// result := Join ( result , veh ) ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_VAR 0 4
3500: PPUSH
3501: CALL 68376 0 2
3505: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 5
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 6
3525: ARRAY
3526: PPUSH
3527: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// if vc_control = control_manual then
3548: LD_OWVAR 38
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3603
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 7
3563: PUSH
3564: LD_INT 8
3566: PUSH
3567: LD_INT 9
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_OWVAR 67
3583: ARRAY
3584: PPUSH
3585: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3589: CALL_OW 44
3593: PPUSH
3594: LD_VAR 0 4
3598: PPUSH
3599: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3603: LD_INT 18
3605: PPUSH
3606: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_INT 100
3617: PPUSH
3618: LD_INT 55
3620: PPUSH
3621: CALL_OW 114
// end ;
3625: GO 3388
3627: POP
3628: POP
// for i in result do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3656
// SetTag ( i , 10 ) ;
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_INT 10
3649: PPUSH
3650: CALL_OW 109
3654: GO 3639
3656: POP
3657: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3658: LD_EXP 44
3662: PPUSH
3663: CALL_OW 427
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// rnd := 0 ;
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// uc_side := 8 ;
3685: LD_ADDR_OWVAR 20
3689: PUSH
3690: LD_INT 8
3692: ST_TO_ADDR
// uc_nation := 2 ;
3693: LD_ADDR_OWVAR 21
3697: PUSH
3698: LD_INT 2
3700: ST_TO_ADDR
// hc_name :=  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// hc_gallery :=  ;
3709: LD_ADDR_OWVAR 33
3713: PUSH
3714: LD_STRING 
3716: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3717: LD_ADDR_OWVAR 29
3721: PUSH
3722: LD_INT 10
3724: PUSH
3725: LD_INT 11
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_OWVAR 67
3768: ARRAY
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 7
3782: PUSH
3783: LD_INT 8
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: PPUSH
3804: CALL_OW 380
// un := CreateHuman ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 9
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// SetTag ( un , 1 ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_EXP 31
3876: PPUSH
3877: CALL_OW 12
3881: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3882: LD_EXP 45
3886: PPUSH
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_EXP 31
3896: PUSH
3897: LD_VAR 0 3
3901: ARRAY
3902: PUSH
3903: LD_INT 1
3905: ARRAY
3906: PPUSH
3907: LD_EXP 31
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 595
// end ;
3935: LD_VAR 0 1
3939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3940: LD_INT 22
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: LD_INT 61
3955: PUSH
3956: EMPTY
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 50
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: LD_INT 33
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: IFFALSE 4076
3991: GO 3993
3993: DISABLE
3994: LD_INT 0
3996: PPUSH
// begin enable ;
3997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 22
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 61
4018: PUSH
4019: EMPTY
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: LD_INT 33
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4074
// begin wait ( 0 0$0.3 ) ;
4056: LD_INT 10
4058: PPUSH
4059: CALL_OW 67
// Connect ( i ) ;
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL 39015 0 1
// end ;
4072: GO 4053
4074: POP
4075: POP
// end ;
4076: PPOPN 1
4078: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// result := [ ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4097: LD_ADDR_EXP 33
4101: PUSH
4102: LD_EXP 33
4106: PUSH
4107: LD_INT 1
4109: PLUS
4110: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4111: LD_INT 22
4113: PUSH
4114: LD_INT 8
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 58
4126: PUSH
4127: EMPTY
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 34
4136: PUSH
4137: LD_INT 31
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_INT 2
4156: LESS
4157: IFFALSE 4401
// begin uc_side := 8 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 8
4166: ST_TO_ADDR
// uc_nation := 2 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 2
4174: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4175: LD_INT 14
4177: PPUSH
4178: LD_INT 3
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 31
4186: PPUSH
4187: LD_INT 100
4189: PPUSH
4190: CALL 35924 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 22
4202: PUSH
4203: LD_INT 8
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: LD_INT 58
4215: PUSH
4216: EMPTY
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 34
4225: PUSH
4226: LD_INT 31
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: PLUS
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 2
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4399
// begin veh := CreateVehicle ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 181
4283: PUSH
4284: LD_INT 105
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 137
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_INT 2
4312: MOD
4313: PUSH
4314: LD_INT 1
4316: PLUS
4317: ARRAY
4318: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: LD_INT 12
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 7
4357: PUSH
4358: LD_INT 9
4360: PUSH
4361: LD_INT 10
4363: PUSH
4364: LD_INT 10
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4383: CALL_OW 44
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 52
// end ;
4397: GO 4251
4399: POP
4400: POP
// end ; dir := rand ( 1 , 2 ) ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: LD_INT 1
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 12
4416: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_VAR 0 9
4436: ARRAY
4437: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_INT 6
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PUSH
4467: LD_EXP 33
4471: PLUS
4472: ST_TO_ADDR
// if counter > 20 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 20
4480: GREATER
4481: IFFALSE 4491
// counter := 20 ;
4483: LD_ADDR_VAR 0 7
4487: PUSH
4488: LD_INT 20
4490: ST_TO_ADDR
// for i := 1 to counter do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 7
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4840
// begin uc_side := 8 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 8
4516: ST_TO_ADDR
// uc_nation := 2 ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 2
4524: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 12
4545: ARRAY
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 12
4574: ARRAY
4575: PPUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 92
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: PPUSH
4614: LD_INT 100
4616: PPUSH
4617: CALL 35924 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4621: LD_OWVAR 40
4625: PUSH
4626: LD_INT 29
4628: EQUAL
4629: IFFALSE 4639
// vc_control := control_remote ;
4631: LD_ADDR_OWVAR 38
4635: PUSH
4636: LD_INT 2
4638: ST_TO_ADDR
// veh := CreateVehicle ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: CALL_OW 45
4648: ST_TO_ADDR
// result := Join ( result , veh ) ;
4649: LD_ADDR_VAR 0 1
4653: PUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL 68376 0 2
4668: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_VAR 0 9
4688: ARRAY
4689: PPUSH
4690: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 6
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if vc_control = control_manual then
4711: LD_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4766
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 7
4726: PUSH
4727: LD_INT 8
4729: PUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_OWVAR 67
4746: ARRAY
4747: PPUSH
4748: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4752: CALL_OW 44
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4766: LD_INT 10
4768: PPUSH
4769: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 263
4782: PUSH
4783: LD_INT 2
4785: EQUAL
4786: PUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 312
4796: NOT
4797: AND
4798: IFFALSE 4816
// begin Connect ( veh ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL 39015 0 1
// wait ( 0 0$0.3 ) ;
4809: LD_INT 10
4811: PPUSH
4812: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4831: LD_INT 18
4833: PPUSH
4834: CALL_OW 67
// end ;
4838: GO 4506
4840: POP
4841: POP
// if arabianAttacksCounter = 1 then
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4856
// DestroySibDeposit ;
4852: CALL 3672 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4856: LD_EXP 33
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: MOD
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 5247
// begin tmp := rand ( 0 , 2 ) ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 2
4901: PPUSH
4902: CALL_OW 12
4906: ST_TO_ADDR
// if not tmp then
4907: LD_VAR 0 8
4911: NOT
4912: IFFALSE 5073
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4914: LD_ADDR_VAR 0 2
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_INT 3
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5069
// begin uc_side := 8 ;
4951: LD_ADDR_OWVAR 20
4955: PUSH
4956: LD_INT 8
4958: ST_TO_ADDR
// uc_nation := 2 ;
4959: LD_ADDR_OWVAR 21
4963: PUSH
4964: LD_INT 2
4966: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 7
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: LD_INT 10
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PPUSH
4997: CALL_OW 380
// un := CreateHuman ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// result := Join ( result , un ) ;
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL 68376 0 2
5030: ST_TO_ADDR
// if Prob ( 60 ) then
5031: LD_INT 60
5033: PPUSH
5034: CALL_OW 13
5038: IFFALSE 5052
// SetClass ( un , class_mortar ) ;
5040: LD_VAR 0 5
5044: PPUSH
5045: LD_INT 8
5047: PPUSH
5048: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5052: LD_VAR 0 5
5056: PPUSH
5057: LD_INT 16
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4948
5069: POP
5070: POP
// end else
5071: GO 5237
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 2
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5235
// begin uc_side := 8 ;
5110: LD_ADDR_OWVAR 20
5114: PUSH
5115: LD_INT 8
5117: ST_TO_ADDR
// uc_nation := 0 ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5126: LD_ADDR_OWVAR 28
5130: PUSH
5131: LD_INT 17
5133: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5134: LD_ADDR_OWVAR 31
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 0
5144: PUSH
5145: LD_INT 0
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5157: LD_ADDR_OWVAR 29
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: LD_INT 10
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// hc_gallery :=  ;
5172: LD_ADDR_OWVAR 33
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_name :=  ;
5180: LD_ADDR_OWVAR 26
5184: PUSH
5185: LD_STRING 
5187: ST_TO_ADDR
// un := CreateHuman ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: CALL_OW 44
5197: ST_TO_ADDR
// result := Join ( result , un ) ;
5198: LD_ADDR_VAR 0 1
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 5
5212: PPUSH
5213: CALL 68376 0 2
5217: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5218: LD_VAR 0 5
5222: PPUSH
5223: LD_INT 16
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5107
5235: POP
5236: POP
// end ; if sibDeposits then
5237: LD_EXP 31
5241: IFFALSE 5247
// DestroySibDeposit ;
5243: CALL 3672 0 0
// end ; for i in result do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_VAR 0 1
5256: PUSH
5257: FOR_IN
5258: IFFALSE 5274
// SetTag ( i , 10 ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_INT 10
5267: PPUSH
5268: CALL_OW 109
5272: GO 5257
5274: POP
5275: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5276: LD_EXP 43
5280: PPUSH
5281: CALL_OW 427
// end ; end_of_file
5285: LD_VAR 0 1
5289: RET
// export function Action ; var tmp ; begin
5290: LD_INT 0
5292: PPUSH
5293: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: ST_TO_ADDR
// InGameOn ;
5328: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5341: LD_INT 22
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_INT 69
5372: PPUSH
5373: LD_INT 94
5375: PPUSH
5376: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2-JMM-1
5387: PPUSH
5388: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D2-Huck-1
5408: PPUSH
5409: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D2-JMM-2
5429: PPUSH
5430: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 87
// InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5447: LD_STRING M1
5449: PPUSH
5450: CALL_OW 337
// SaveForQuickRestart ;
5454: CALL_OW 22
// wait ( 10 10$00 ) ;
5458: LD_INT 21000
5460: PPUSH
5461: CALL_OW 67
// DialogueOn ;
5465: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING D3-Pow-1
5476: PPUSH
5477: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D3-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5493: LD_EXP 15
5497: PPUSH
5498: LD_STRING D3-Pow-2
5500: PPUSH
5501: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-2
5512: PPUSH
5513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5517: LD_EXP 15
5521: PPUSH
5522: LD_STRING D3-Pow-3
5524: PPUSH
5525: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_STRING D3-JMM-3
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5541: LD_EXP 15
5545: PPUSH
5546: LD_STRING D3-Pow-4
5548: PPUSH
5549: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5553: LD_EXP 1
5557: PPUSH
5558: LD_STRING D3-JMM-4
5560: PPUSH
5561: CALL_OW 88
// DialogueOff ;
5565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5569: LD_STRING M2
5571: PPUSH
5572: CALL_OW 337
// wait ( 2 2$30 ) ;
5576: LD_INT 5250
5578: PPUSH
5579: CALL_OW 67
// PrepareBurlak ;
5583: CALL 2269 0 0
// BurlakArmy ;
5587: CALL 2451 0 0
// end ;
5591: LD_VAR 0 1
5595: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5596: LD_INT 1
5598: PPUSH
5599: LD_EXP 18
5603: PPUSH
5604: CALL_OW 292
5608: IFFALSE 5767
5610: GO 5612
5612: DISABLE
// begin DialogueOn ;
5613: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5617: LD_EXP 18
5621: PPUSH
5622: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5626: LD_INT 22
5628: PUSH
5629: LD_INT 1
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: LD_INT 26
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 25
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 25
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_STRING D5-Sol1-1
5719: PPUSH
5720: LD_STRING D5-FSol1-1
5722: PPUSH
5723: CALL 8225 0 3
// Say ( JMM , D5-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D5-JMM-1
5734: PPUSH
5735: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_STRING DAmer-Bur-1
5746: PPUSH
5747: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING DAmer-JMM-1
5758: PPUSH
5759: CALL_OW 88
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 7
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 70
5785: IFFALSE 6184
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
// begin enable ;
5793: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 70
5816: PUSH
5817: FOR_IN
5818: IFFALSE 6182
// begin if i = Burlak or i = Masha then
5820: LD_VAR 0 1
5824: PUSH
5825: LD_EXP 17
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_EXP 18
5840: EQUAL
5841: OR
5842: IFFALSE 5989
// begin RemoveUnit ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 64
// DialogueOn ;
5853: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D5a-JMM-1
5864: PPUSH
5865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: CALL_OW 69
5959: PPUSH
5960: LD_STRING D5a-Sol1-1
5962: PPUSH
5963: LD_STRING D5-FSol1-1
5965: PPUSH
5966: CALL 8225 0 3
// DialogueOff ;
5970: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5974: LD_STRING M2b
5976: PPUSH
5977: CALL_OW 337
// spawnBurlak = 0 ;
5981: LD_ADDR_EXP 27
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 247
5998: PUSH
5999: LD_INT 2
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 263
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6145
// begin case IsDrivenBy ( i ) of Gnyevko :
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 311
6028: PUSH
6029: LD_EXP 19
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6052
6039: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6040: LD_INT 1
6042: PPUSH
6043: LD_STRING 13_Gnyevko_1
6045: PPUSH
6046: CALL_OW 39
6050: GO 6145
6052: LD_EXP 20
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6075
6062: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6063: LD_INT 1
6065: PPUSH
6066: LD_STRING 13_Titov_1
6068: PPUSH
6069: CALL_OW 39
6073: GO 6145
6075: LD_EXP 21
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6098
6085: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6086: LD_INT 1
6088: PPUSH
6089: LD_STRING 13_Xavier_1
6091: PPUSH
6092: CALL_OW 39
6096: GO 6145
6098: LD_EXP 22
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6121
6108: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6109: LD_INT 1
6111: PPUSH
6112: LD_STRING 13_Belkov_1
6114: PPUSH
6115: CALL_OW 39
6119: GO 6145
6121: LD_EXP 23
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6144
6131: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6132: LD_INT 1
6134: PPUSH
6135: LD_STRING 13_Lipshchin_1
6137: PPUSH
6138: CALL_OW 39
6142: GO 6145
6144: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 49
6157: EQUAL
6158: IFFALSE 6171
// DestroyUnit ( i ) else
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 65
6169: GO 6180
// RemoveUnit ( i ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 64
// end ;
6180: GO 5817
6182: POP
6183: POP
// end ;
6184: PPOPN 1
6186: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 500
6209: LESS
6210: AND
6211: PUSH
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 255
6221: PUSH
6222: LD_INT 7
6224: EQUAL
6225: AND
6226: IFFALSE 6246
6228: GO 6230
6230: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6231: LD_EXP 17
6235: PPUSH
6236: LD_INT 107
6238: PPUSH
6239: LD_INT 118
6241: PPUSH
6242: CALL_OW 111
6246: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6247: LD_EXP 17
6251: PPUSH
6252: CALL_OW 301
6256: PUSH
6257: LD_EXP 27
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: IFFALSE 6399
6268: GO 6270
6270: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6271: LD_EXP 1
6275: PPUSH
6276: LD_STRING D5b-JMM-1
6278: PPUSH
6279: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 25
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 25
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: PPUSH
6374: LD_STRING D5b-Sol1-1
6376: PPUSH
6377: LD_STRING 
6379: PPUSH
6380: CALL 8225 0 3
// ChangeMissionObjectives ( M2a ) ;
6384: LD_STRING M2a
6386: PPUSH
6387: CALL_OW 337
// burlakStatus := 1 ;
6391: LD_ADDR_EXP 28
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// end ;
6399: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6400: LD_EXP 2
6404: PPUSH
6405: CALL_OW 301
6409: IFFALSE 6546
6411: GO 6413
6413: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D6-JMM-1
6421: PPUSH
6422: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6426: LD_INT 22
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 2
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 25
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: LD_STRING D6-Sol1-1
6519: PPUSH
6520: LD_STRING 
6522: PPUSH
6523: CALL 8225 0 3
// Say ( JMM , D6-JMM-2 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D6-JMM-2
6534: PPUSH
6535: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6539: LD_STRING M1a
6541: PPUSH
6542: CALL_OW 337
// end ;
6546: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6547: LD_INT 25
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 321
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6578
6563: GO 6565
6565: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6566: LD_EXP 2
6570: PPUSH
6571: LD_STRING D6-Huck-2
6573: PPUSH
6574: CALL_OW 88
6578: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6579: LD_INT 22
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 34
6594: PUSH
6595: LD_INT 8
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 35
6604: PUSH
6605: LD_INT 8
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PUSH
6626: LD_INT 5
6628: PPUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 57
6664: PUSH
6665: EMPTY
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 70
6682: AND
6683: PUSH
6684: LD_INT 5
6686: PPUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 21
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 57
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 70
6740: AND
6741: IFFALSE 6783
6743: GO 6745
6745: DISABLE
// begin DialogueOn ;
6746: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D7-JMM-1
6757: PPUSH
6758: CALL_OW 88
// DialogueOff ;
6762: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6766: LD_STRING M4
6768: PPUSH
6769: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 424
// end ;
6783: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6784: LD_INT 6
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 70
6815: PUSH
6816: LD_EXP 37
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 29
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: AND
6835: IFFALSE 6900
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6841: LD_ADDR_EXP 26
6845: PUSH
6846: LD_INT 6
6848: PPUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6882: LD_INT 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// radationResearched := 1 ;
6892: LD_ADDR_EXP 29
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 301
6910: PUSH
6911: LD_EXP 29
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: IFFALSE 6956
6922: GO 6924
6924: DISABLE
// begin enable ;
6925: ENABLE
// radationResearched = 0 ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6934: LD_INT 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6944: LD_EXP 1
6948: PPUSH
6949: LD_STRING D9a-JMM-1
6951: PPUSH
6952: CALL_OW 88
// end ; end_of_file
6956: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 8
6964: EQUAL
6965: PUSH
6966: LD_EXP 35
6970: PUSH
6971: LD_INT 0
6973: EQUAL
6974: AND
6975: IFFALSE 7028
// begin eventVar1 := 1 ;
6977: LD_ADDR_EXP 35
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// DialogueOn ;
6985: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D6a-JMM-1
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7001: LD_EXP 15
7005: PPUSH
7006: LD_STRING D6a-Pow-1
7008: PPUSH
7009: CALL_OW 94
// DialogueOff ;
7013: CALL_OW 7
// wait ( 3 3$0 ) ;
7017: LD_INT 6300
7019: PPUSH
7020: CALL_OW 67
// PowellSupport ;
7024: CALL 1845 0 0
// end ; end ;
7028: PPOPN 5
7030: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL 26795 0 1
// if un = JMM then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_EXP 1
7049: EQUAL
7050: IFFALSE 7059
// YouLost ( JMM ) ;
7052: LD_STRING JMM
7054: PPUSH
7055: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7059: LD_VAR 0 1
7063: PPUSH
7064: CALL_OW 264
7068: PUSH
7069: LD_INT 31
7071: EQUAL
7072: IFFALSE 7088
// achivCounter := achivCounter + 1 ;
7074: LD_ADDR_EXP 41
7078: PUSH
7079: LD_EXP 41
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 255
7097: PUSH
7098: LD_INT 1
7100: NONEQUAL
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 247
7111: PUSH
7112: LD_INT 2
7114: EQUAL
7115: AND
7116: IFFALSE 7132
// destroyCounter := destroyCounter + 1 ;
7118: LD_ADDR_EXP 42
7122: PUSH
7123: LD_EXP 42
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ST_TO_ADDR
// end ;
7132: PPOPN 1
7134: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7135: LD_VAR 0 2
7139: PUSH
7140: LD_EXP 18
7144: EQUAL
7145: IFFALSE 7154
// SetAchievement ( ACH_MASHA ) ;
7147: LD_STRING ACH_MASHA
7149: PPUSH
7150: CALL_OW 543
// end ;
7154: PPOPN 4
7156: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 26915 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 264
7180: PUSH
7181: LD_INT 8
7183: EQUAL
7184: PUSH
7185: LD_EXP 36
7189: PUSH
7190: LD_INT 0
7192: EQUAL
7193: AND
7194: IFFALSE 7263
// begin eventVar2 := 1 ;
7196: LD_ADDR_EXP 36
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// DialogueOn ;
7204: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D6b-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7220: LD_EXP 15
7224: PPUSH
7225: LD_STRING D6b-Pow-1
7227: PPUSH
7228: CALL_OW 94
// DialogueOff ;
7232: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7236: LD_INT 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7256: LD_STRING M3
7258: PPUSH
7259: CALL_OW 337
// end ; end ;
7263: PPOPN 2
7265: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 309
7283: PUSH
7284: LD_EXP 37
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: AND
7293: IFFALSE 7518
// begin eventVar3 := 1 ;
7295: LD_ADDR_EXP 37
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7303: LD_INT 175
7305: PPUSH
7306: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7310: LD_INT 7
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: IFFALSE 7371
// begin radarOnSpot := 1 ;
7354: LD_ADDR_EXP 30
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7362: LD_STRING M3a
7364: PPUSH
7365: CALL_OW 337
// end else
7369: GO 7378
// ChangeMissionObjectives ( M3b ) ;
7371: LD_STRING M3b
7373: PPUSH
7374: CALL_OW 337
// DialogueOn ;
7378: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-1
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-1
7401: PPUSH
7402: CALL_OW 88
// if IsOk ( Stevens ) then
7406: LD_EXP 2
7410: PPUSH
7411: CALL_OW 302
7415: IFFALSE 7477
// begin Say ( Stevens , D8-Huck-2 ) ;
7417: LD_EXP 2
7421: PPUSH
7422: LD_STRING D8-Huck-2
7424: PPUSH
7425: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D8-JMM-2
7436: PPUSH
7437: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7441: LD_EXP 2
7445: PPUSH
7446: LD_STRING D8-Huck-3
7448: PPUSH
7449: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D8-JMM-3
7460: PPUSH
7461: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7465: LD_EXP 2
7469: PPUSH
7470: LD_STRING D8-Huck-4
7472: PPUSH
7473: CALL_OW 88
// end ; DialogueOff ;
7477: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 0
7496: PPUSH
7497: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7511: LD_STRING M5
7513: PPUSH
7514: CALL_OW 337
// end ; end ;
7518: PPOPN 3
7520: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7521: LD_EXP 26
7525: PPUSH
7526: CALL_OW 302
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 26
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_EXP 38
7547: PUSH
7548: LD_INT 0
7550: EQUAL
7551: AND
7552: PUSH
7553: LD_EXP 37
7557: PUSH
7558: LD_INT 1
7560: EQUAL
7561: AND
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 268
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: OR
7597: AND
7598: IFFALSE 7608
// eventVar4 := 1 ;
7600: LD_ADDR_EXP 38
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// end ;
7608: PPOPN 2
7610: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 248
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7874
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_EXP 32
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: DOUBLE
7650: LD_EXP 31
7654: INC
7655: ST_TO_ADDR
7656: LD_INT 1
7658: PUSH
7659: FOR_DOWNTO
7660: IFFALSE 7730
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7662: LD_EXP 31
7666: PUSH
7667: LD_VAR 0 4
7671: ARRAY
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PUSH
7677: LD_VAR 0 2
7681: EQUAL
7682: PUSH
7683: LD_EXP 31
7687: PUSH
7688: LD_VAR 0 4
7692: ARRAY
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PUSH
7698: LD_VAR 0 3
7702: EQUAL
7703: AND
7704: IFFALSE 7728
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7706: LD_ADDR_EXP 31
7710: PUSH
7711: LD_EXP 31
7715: PPUSH
7716: LD_VAR 0 4
7720: PPUSH
7721: CALL_OW 3
7725: ST_TO_ADDR
// break ;
7726: GO 7730
// end ;
7728: GO 7659
7730: POP
7731: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7732: LD_EXP 39
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 3
7750: PPUSH
7751: CALL_OW 428
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: IN
7771: AND
7772: IFFALSE 7874
// begin eventVar5 := 1 ;
7774: LD_ADDR_EXP 39
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// DialogueOn ;
7782: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7786: LD_EXP 2
7790: PPUSH
7791: LD_STRING D4-Sci1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D4-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7810: LD_EXP 2
7814: PPUSH
7815: LD_STRING D4-Sci1-2
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D4-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_STRING D4-Sci1-3
7841: PPUSH
7842: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7846: LD_EXP 1
7850: PPUSH
7851: LD_STRING D4-JMM-3
7853: PPUSH
7854: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7858: LD_EXP 1
7862: PPUSH
7863: LD_STRING D4-JMM-3a
7865: PPUSH
7866: CALL_OW 88
// DialogueOff ;
7870: CALL_OW 7
// end ; end ; end ;
7874: PPOPN 5
7876: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: AND
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: AND
7968: IFFALSE 7982
// SetBName ( building , omega ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING omega
7977: PPUSH
7978: CALL_OW 500
// end ;
7982: PPOPN 2
7984: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL 26899 0 1
// end ;
7994: PPOPN 1
7996: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 43
8006: EQUAL
8007: IFFALSE 8013
// ArabianAttack ;
8009: CALL 10078 0 0
// if event = eventRussianAttack then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 44
8022: EQUAL
8023: IFFALSE 8029
// RussianAttack ;
8025: CALL 10443 0 0
// end ;
8029: PPOPN 1
8031: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8032: LD_VAR 0 1
8036: PUSH
8037: LD_EXP 45
8041: EQUAL
8042: IFFALSE 8136
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 302
8053: PUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 488
8068: AND
8069: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// if not HasTask ( p1 ) then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 314
8087: NOT
8088: IFFALSE 8124
// begin ComContaminate ( p1 , p2 , p3 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 42
8116: PPUSH
8117: LD_INT 3
8119: PPUSH
8120: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8071
// end ; end ; end ;
8136: PPOPN 7
8138: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8222
// begin ComMoveXY ( driver , 41 , 2 ) ;
8161: LD_VAR 0 1
8165: PPUSH
8166: LD_INT 41
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8176: LD_INT 35
8178: PPUSH
8179: CALL_OW 67
// if IsDead ( driver ) then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 301
8192: IFFALSE 8196
// exit ;
8194: GO 8222
// until IsAt ( driver , 41 , 2 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 41
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 307
8211: IFFALSE 8176
// RemoveUnit ( driver ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 64
// end ; end ; end_of_file
8222: PPOPN 4
8224: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_EXP 3
8254: PUSH
8255: LD_EXP 4
8259: PUSH
8260: LD_EXP 5
8264: PUSH
8265: LD_EXP 6
8269: PUSH
8270: LD_EXP 7
8274: PUSH
8275: LD_EXP 8
8279: PUSH
8280: LD_EXP 9
8284: PUSH
8285: LD_EXP 10
8289: PUSH
8290: LD_EXP 11
8294: PUSH
8295: LD_EXP 12
8299: PUSH
8300: LD_EXP 13
8304: PUSH
8305: LD_EXP 14
8309: PUSH
8310: LD_EXP 15
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// if not characters then
8333: LD_VAR 0 1
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8421
// speaker := characters [ rand ( 1 , characters ) ] ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 12
8364: ARRAY
8365: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8397
// Say ( speaker , dialogMID ) else
8381: LD_VAR 0 6
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 88
8395: GO 8411
// Say ( speaker , dialogFID ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: CALL_OW 88
// result := speaker ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 6
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 4
8425: RET
// export function PrepareDifficulty ; begin
8426: LD_INT 0
8428: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8429: LD_INT 5
8431: PPUSH
8432: LD_INT 8
8434: PPUSH
8435: LD_INT 2
8437: PPUSH
8438: CALL_OW 322
// if Difficulty = 1 then
8442: LD_OWVAR 67
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: IFFALSE 8569
// begin SetTech ( 66 , 8 , state_researched ) ;
8452: LD_INT 66
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8465: LD_INT 67
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 0
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8478: LD_INT 68
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8491: LD_INT 51
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8504: LD_INT 52
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 0
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8517: LD_INT 53
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8530: LD_INT 60
8532: PPUSH
8533: LD_INT 8
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8543: LD_INT 61
8545: PPUSH
8546: LD_INT 8
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8556: LD_INT 62
8558: PPUSH
8559: LD_INT 8
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 322
// end ; if Difficulty = 2 then
8569: LD_OWVAR 67
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8696
// begin SetTech ( 66 , 8 , state_researched ) ;
8579: LD_INT 66
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8592: LD_INT 67
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8605: LD_INT 68
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8618: LD_INT 51
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8644: LD_INT 53
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 2
8652: PPUSH
8653: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8657: LD_INT 60
8659: PPUSH
8660: LD_INT 8
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8670: LD_INT 61
8672: PPUSH
8673: LD_INT 8
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8683: LD_INT 62
8685: PPUSH
8686: LD_INT 8
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 322
// end ; if Difficulty >= 3 then
8696: LD_OWVAR 67
8700: PUSH
8701: LD_INT 3
8703: GREATEREQUAL
8704: IFFALSE 8823
// begin SetTech ( 66 , 8 , state_researched ) ;
8706: LD_INT 66
8708: PPUSH
8709: LD_INT 8
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8719: LD_INT 67
8721: PPUSH
8722: LD_INT 8
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8732: LD_INT 68
8734: PPUSH
8735: LD_INT 8
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8745: LD_INT 51
8747: PPUSH
8748: LD_INT 8
8750: PPUSH
8751: LD_INT 2
8753: PPUSH
8754: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8758: LD_INT 52
8760: PPUSH
8761: LD_INT 8
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8771: LD_INT 53
8773: PPUSH
8774: LD_INT 8
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8784: LD_INT 60
8786: PPUSH
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8797: LD_INT 61
8799: PPUSH
8800: LD_INT 8
8802: PPUSH
8803: LD_INT 2
8805: PPUSH
8806: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8810: LD_INT 62
8812: PPUSH
8813: LD_INT 8
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 322
// end ; end ;
8823: LD_VAR 0 1
8827: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
// for i in charactersList do
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// SaveCharacters ( i , ident ) ;
8845: LD_VAR 0 4
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 38
8859: GO 8842
8861: POP
8862: POP
// end ; end_of_file
8863: LD_VAR 0 3
8867: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8868: LD_EXP 38
8872: PUSH
8873: LD_INT 1
8875: EQUAL
8876: IFFALSE 9782
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin m1 := false ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// m2 := false ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// m3 := false ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// DialogueOn ;
8910: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8914: LD_EXP 1
8918: PPUSH
8919: LD_STRING D9b-JMM-1
8921: PPUSH
8922: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8926: LD_EXP 15
8930: PPUSH
8931: LD_STRING D9b-Pow-1
8933: PPUSH
8934: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8938: LD_EXP 1
8942: PPUSH
8943: LD_STRING D9b-JMM-2
8945: PPUSH
8946: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8950: LD_EXP 15
8954: PPUSH
8955: LD_STRING D9b-Pow-2
8957: PPUSH
8958: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8962: LD_EXP 1
8966: PPUSH
8967: LD_STRING D9b-JMM-3
8969: PPUSH
8970: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8974: LD_EXP 15
8978: PPUSH
8979: LD_STRING D9b-Pow-3
8981: PPUSH
8982: CALL_OW 94
// if tick <= 60 60$00 then
8986: LD_OWVAR 1
8990: PUSH
8991: LD_INT 126000
8993: LESSEQUAL
8994: IFFALSE 9003
// SetAchievement ( ACH_ASPEED_13 ) ;
8996: LD_STRING ACH_ASPEED_13
8998: PPUSH
8999: CALL_OW 543
// if burlakStatus = 1 then
9003: LD_EXP 28
9007: PUSH
9008: LD_INT 1
9010: EQUAL
9011: IFFALSE 9033
// begin m1 := true ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9021: LD_STRING Burlak
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: CALL_OW 101
// end else
9031: GO 9044
// begin AddMedal ( Burlak , - 1 ) ;
9033: LD_STRING Burlak
9035: PPUSH
9036: LD_INT 1
9038: NEG
9039: PPUSH
9040: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9044: LD_EXP 2
9048: PPUSH
9049: CALL_OW 302
9053: IFFALSE 9075
// begin m2 := true ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9063: LD_STRING Stevens
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 101
// end else
9073: GO 9086
// begin AddMedal ( Stevens , - 1 ) ;
9075: LD_STRING Stevens
9077: PPUSH
9078: LD_INT 1
9080: NEG
9081: PPUSH
9082: CALL_OW 101
// end ; if radarOnSpot = 1 then
9086: LD_EXP 30
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: IFFALSE 9116
// begin m3 := true ;
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9104: LD_STRING Observation
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 101
// end else
9114: GO 9127
// begin AddMedal ( Observation , - 1 ) ;
9116: LD_STRING Observation
9118: PPUSH
9119: LD_INT 1
9121: NEG
9122: PPUSH
9123: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9127: LD_VAR 0 1
9131: PUSH
9132: LD_VAR 0 2
9136: AND
9137: PUSH
9138: LD_VAR 0 3
9142: AND
9143: PUSH
9144: LD_OWVAR 67
9148: PUSH
9149: LD_INT 3
9151: GREATEREQUAL
9152: AND
9153: IFFALSE 9165
// SetAchievementEX ( ACH_AMER , 13 ) ;
9155: LD_STRING ACH_AMER
9157: PPUSH
9158: LD_INT 13
9160: PPUSH
9161: CALL_OW 564
// GiveMedals ( MAIN ) ;
9165: LD_STRING MAIN
9167: PPUSH
9168: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9172: LD_EXP 28
9176: PPUSH
9177: LD_STRING 13_BurlakStatus_1
9179: PPUSH
9180: CALL_OW 39
// if IsLive ( Stevens ) then
9184: LD_EXP 2
9188: PPUSH
9189: CALL_OW 300
9193: IFFALSE 9207
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9195: LD_INT 1
9197: PPUSH
9198: LD_STRING 13_StevensStatus_1
9200: PPUSH
9201: CALL_OW 39
9205: GO 9217
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9207: LD_INT 0
9209: PPUSH
9210: LD_STRING 13_StevensStatus_1
9212: PPUSH
9213: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9217: LD_INT 22
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: LD_INT 25
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 25
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 25
9272: PUSH
9273: LD_INT 4
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 5
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 8
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 69
9318: PPUSH
9319: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9323: LD_EXP 1
9327: PPUSH
9328: LD_EXP 34
9332: PUSH
9333: LD_STRING JMM
9335: STR
9336: PPUSH
9337: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9341: LD_EXP 8
9345: PPUSH
9346: LD_EXP 34
9350: PUSH
9351: LD_STRING Brown
9353: STR
9354: PPUSH
9355: CALL 8828 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9359: LD_EXP 4
9363: PPUSH
9364: LD_EXP 34
9368: PUSH
9369: LD_STRING Donaldson
9371: STR
9372: PPUSH
9373: CALL 8828 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9377: LD_EXP 5
9381: PPUSH
9382: LD_EXP 34
9386: PUSH
9387: LD_STRING Bobby
9389: STR
9390: PPUSH
9391: CALL 8828 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9395: LD_EXP 6
9399: PPUSH
9400: LD_EXP 34
9404: PUSH
9405: LD_STRING Cyrus
9407: STR
9408: PPUSH
9409: CALL 8828 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9413: LD_EXP 3
9417: PPUSH
9418: LD_EXP 34
9422: PUSH
9423: LD_STRING Lisa
9425: STR
9426: PPUSH
9427: CALL 8828 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9431: LD_EXP 13
9435: PPUSH
9436: LD_EXP 34
9440: PUSH
9441: LD_STRING Frank
9443: STR
9444: PPUSH
9445: CALL 8828 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_EXP 34
9458: PUSH
9459: LD_STRING Kikuchi
9461: STR
9462: PPUSH
9463: CALL 8828 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9467: LD_EXP 10
9471: PPUSH
9472: LD_EXP 34
9476: PUSH
9477: LD_STRING Houten
9479: STR
9480: PPUSH
9481: CALL 8828 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9485: LD_EXP 12
9489: PPUSH
9490: LD_EXP 34
9494: PUSH
9495: LD_STRING Gary
9497: STR
9498: PPUSH
9499: CALL 8828 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9503: LD_EXP 11
9507: PPUSH
9508: LD_EXP 34
9512: PUSH
9513: LD_STRING Cornell
9515: STR
9516: PPUSH
9517: CALL 8828 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9521: LD_EXP 7
9525: PPUSH
9526: LD_EXP 34
9530: PUSH
9531: LD_STRING Denis
9533: STR
9534: PPUSH
9535: CALL 8828 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9539: LD_EXP 9
9543: PPUSH
9544: LD_EXP 34
9548: PUSH
9549: LD_STRING Gladstone
9551: STR
9552: PPUSH
9553: CALL 8828 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9557: LD_EXP 2
9561: PPUSH
9562: LD_EXP 34
9566: PUSH
9567: LD_STRING Stevens
9569: STR
9570: PPUSH
9571: CALL 8828 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9575: LD_INT 50
9577: PUSH
9578: EMPTY
9579: LIST
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 25
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 25
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 25
9646: PUSH
9647: LD_INT 5
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 25
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 69
9683: PUSH
9684: LD_EXP 1
9688: PUSH
9689: LD_EXP 8
9693: PUSH
9694: LD_EXP 4
9698: PUSH
9699: LD_EXP 5
9703: PUSH
9704: LD_EXP 6
9708: PUSH
9709: LD_EXP 3
9713: PUSH
9714: LD_EXP 13
9718: PUSH
9719: LD_EXP 9
9723: PUSH
9724: LD_EXP 14
9728: PUSH
9729: LD_EXP 7
9733: PUSH
9734: LD_EXP 10
9738: PUSH
9739: LD_EXP 12
9743: PUSH
9744: LD_EXP 11
9748: PUSH
9749: LD_EXP 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: DIFF
9770: PPUSH
9771: LD_STRING 13_other_survivors
9773: PPUSH
9774: CALL_OW 38
// YouWin ;
9778: CALL_OW 103
// end ; end_of_file
9782: PPOPN 3
9784: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9785: LD_EXP 32
9789: PUSH
9790: LD_INT 2
9792: EQUAL
9793: PUSH
9794: LD_INT 34
9796: PUSH
9797: LD_INT 8
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: NOT
9809: AND
9810: PUSH
9811: LD_INT 25
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 321
9821: PUSH
9822: LD_INT 1
9824: EQUAL
9825: AND
9826: IFFALSE 9962
9828: GO 9830
9830: DISABLE
9831: LD_INT 0
9833: PPUSH
9834: PPUSH
9835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 30
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// for i in tmp do
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_VAR 0 2
9908: PUSH
9909: FOR_IN
9910: IFFALSE 9943
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9912: LD_ADDR_VAR 0 3
9916: PUSH
9917: LD_VAR 0 3
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 274
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: CALL_OW 275
9939: PLUS
9940: ST_TO_ADDR
9941: GO 9909
9943: POP
9944: POP
// if yourSiberite < 60 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 60
9952: LESS
9953: IFFALSE 9962
// YouLost ( siberite ) ;
9955: LD_STRING siberite
9957: PPUSH
9958: CALL_OW 104
// end ; end_of_file
9962: PPOPN 3
9964: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9965: LD_INT 22
9967: PUSH
9968: LD_INT 8
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 10007
9999: GO 10001
10001: DISABLE
// begin enable ;
10002: ENABLE
// PrepareArabianAttack ;
10003: CALL 4079 0 0
// end ;
10007: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10008: LD_EXP 35
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: PUSH
10017: LD_INT 22
10019: PUSH
10020: LD_INT 8
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 21
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PUSH
10046: LD_INT 6
10048: LESS
10049: AND
10050: IFFALSE 10077
10052: GO 10054
10054: DISABLE
// begin wait ( 4 4$00 ) ;
10055: LD_INT 8400
10057: PPUSH
10058: CALL_OW 67
// PrepareRussianAttack ;
10062: CALL 3302 0 0
// wait ( 12 12$00 ) ;
10066: LD_INT 25200
10068: PPUSH
10069: CALL_OW 67
// PrepareRussianAttack ;
10073: CALL 3302 0 0
// end ;
10077: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
10088: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10089: LD_ADDR_VAR 0 8
10093: PUSH
10094: LD_INT 22
10096: PUSH
10097: LD_INT 8
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 120
10106: PUSH
10107: LD_INT 10
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 69
10122: ST_TO_ADDR
// if not units then
10123: LD_VAR 0 8
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10438
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10132: LD_ADDR_VAR 0 4
10136: PUSH
10137: LD_INT 80
10139: PUSH
10140: LD_INT 60
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 54
10149: PUSH
10150: LD_INT 57
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 55
10159: PUSH
10160: LD_INT 74
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 61
10169: PUSH
10170: LD_INT 85
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10183: LD_ADDR_VAR 0 5
10187: PUSH
10188: LD_INT 93
10190: PUSH
10191: LD_INT 99
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 85
10200: PUSH
10201: LD_INT 99
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10219: LD_ADDR_VAR 0 6
10223: PUSH
10224: LD_VAR 0 8
10228: PPUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 72
10243: ST_TO_ADDR
// if vehicles then
10244: LD_VAR 0 6
10248: IFFALSE 10264
// AgressiveMove ( vehicles , path ) ;
10250: LD_VAR 0 6
10254: PPUSH
10255: LD_VAR 0 4
10259: PPUSH
10260: CALL 70980 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10264: LD_ADDR_VAR 0 7
10268: PUSH
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 21
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: ST_TO_ADDR
// if infantry then
10303: LD_VAR 0 7
10307: IFFALSE 10323
// AgressiveMove ( infantry , path2 ) ;
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 5
10318: PPUSH
10319: CALL 70980 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_VAR 0 8
10332: PPUSH
10333: LD_INT 23
10335: PUSH
10336: LD_INT 0
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: ST_TO_ADDR
// if apes then
10362: LD_VAR 0 9
10366: IFFALSE 10410
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10368: LD_VAR 0 9
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: LD_VAR 0 9
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: CALL_OW 74
10405: PPUSH
10406: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10410: LD_ADDR_VAR 0 8
10414: PUSH
10415: LD_VAR 0 8
10419: PPUSH
10420: LD_INT 50
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 72
10430: ST_TO_ADDR
// until not units ;
10431: LD_VAR 0 8
10435: NOT
10436: IFFALSE 10212
// end ;
10438: LD_VAR 0 1
10442: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10451: LD_ADDR_VAR 0 6
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: LD_INT 10
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: ST_TO_ADDR
// if not units then
10485: LD_VAR 0 6
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10625
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10494: LD_ADDR_VAR 0 4
10498: PUSH
10499: LD_INT 80
10501: PUSH
10502: LD_INT 60
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 54
10511: PUSH
10512: LD_INT 57
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 55
10521: PUSH
10522: LD_INT 74
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 61
10531: PUSH
10532: LD_INT 85
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10545: LD_INT 35
10547: PPUSH
10548: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10552: LD_ADDR_VAR 0 5
10556: PUSH
10557: LD_VAR 0 6
10561: PPUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if vehicles then
10577: LD_VAR 0 5
10581: IFFALSE 10597
// AgressiveMove ( vehicles , path ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 4
10592: PPUSH
10593: CALL 70980 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10597: LD_ADDR_VAR 0 6
10601: PUSH
10602: LD_VAR 0 6
10606: PPUSH
10607: LD_INT 50
10609: PUSH
10610: EMPTY
10611: LIST
10612: PPUSH
10613: CALL_OW 72
10617: ST_TO_ADDR
// until not units ;
10618: LD_VAR 0 6
10622: NOT
10623: IFFALSE 10545
// end ; end_of_file
10625: LD_VAR 0 1
10629: RET
// every 0 0$01 do var i , cratesSpawned ;
10630: GO 10632
10632: DISABLE
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
// begin cratesSpawned := 0 ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// for i := 1 to 6 do
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_INT 6
10657: PUSH
10658: FOR_TO
10659: IFFALSE 10684
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10661: LD_INT 2
10663: PPUSH
10664: LD_INT 5
10666: PPUSH
10667: CALL_OW 12
10671: PPUSH
10672: LD_INT 17
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 55
10682: GO 10658
10684: POP
10685: POP
// wait ( 0 0$20 ) ;
10686: LD_INT 700
10688: PPUSH
10689: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10693: LD_INT 280
10695: PPUSH
10696: CALL_OW 67
// if cratesSpawned < 12 then
10700: LD_VAR 0 2
10704: PUSH
10705: LD_INT 12
10707: LESS
10708: IFFALSE 10760
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10710: LD_INT 105
10712: PPUSH
10713: LD_INT 350
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10725: LD_INT 3
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 13
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10746: LD_ADDR_VAR 0 2
10750: PUSH
10751: LD_VAR 0 2
10755: PUSH
10756: LD_INT 1
10758: PLUS
10759: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10760: LD_VAR 0 2
10764: PUSH
10765: LD_INT 12
10767: GREATEREQUAL
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_INT 32
10776: LESS
10777: AND
10778: IFFALSE 10830
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10780: LD_INT 420
10782: PPUSH
10783: LD_INT 700
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10795: LD_INT 3
10797: PPUSH
10798: LD_INT 5
10800: PPUSH
10801: CALL_OW 12
10805: PPUSH
10806: LD_INT 13
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_VAR 0 2
10825: PUSH
10826: LD_INT 1
10828: PLUS
10829: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10830: LD_VAR 0 2
10834: PUSH
10835: LD_INT 32
10837: GREATEREQUAL
10838: IFFALSE 10912
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10840: LD_INT 13
10842: PPUSH
10843: CALL_OW 435
10847: PUSH
10848: LD_INT 14
10850: LESS
10851: IFFALSE 10862
// wait ( 0 0$20 ) else
10853: LD_INT 700
10855: PPUSH
10856: CALL_OW 67
10860: GO 10877
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10862: LD_INT 1750
10864: PPUSH
10865: LD_INT 3150
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10877: LD_INT 2
10879: PPUSH
10880: LD_INT 5
10882: PPUSH
10883: CALL_OW 12
10887: PPUSH
10888: LD_INT 13
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_INT 1
10910: PLUS
10911: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10912: LD_VAR 0 2
10916: PUSH
10917: LD_INT 120
10919: GREATEREQUAL
10920: IFFALSE 10994
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10922: LD_INT 13
10924: PPUSH
10925: CALL_OW 435
10929: PUSH
10930: LD_INT 14
10932: LESS
10933: IFFALSE 10944
// wait ( 0 0$40 ) else
10935: LD_INT 1400
10937: PPUSH
10938: CALL_OW 67
10942: GO 10959
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10944: LD_INT 2450
10946: PPUSH
10947: LD_INT 3850
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10959: LD_INT 1
10961: PPUSH
10962: LD_INT 5
10964: PPUSH
10965: CALL_OW 12
10969: PPUSH
10970: LD_INT 13
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end ; until false ;
10994: LD_INT 0
10996: IFFALSE 10693
// end ; end_of_file end_of_file
10998: PPOPN 2
11000: END
// export globalGameSaveCounter ; every 0 0$1 do
11001: GO 11003
11003: DISABLE
// begin enable ;
11004: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11005: LD_STRING updateTimer(
11007: PUSH
11008: LD_OWVAR 1
11012: STR
11013: PUSH
11014: LD_STRING );
11016: STR
11017: PPUSH
11018: CALL_OW 559
// end ;
11022: END
// every 0 0$1 do
11023: GO 11025
11025: DISABLE
// begin globalGameSaveCounter := 0 ;
11026: LD_ADDR_EXP 46
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11034: LD_STRING setGameSaveCounter(0)
11036: PPUSH
11037: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11041: LD_STRING initStreamRollete();
11043: PPUSH
11044: CALL_OW 559
// InitStreamMode ;
11048: CALL 12374 0 0
// DefineStreamItems ( false ) ;
11052: LD_INT 0
11054: PPUSH
11055: CALL 12838 0 1
// end ;
11059: END
// export function SOS_MapStart ( ) ; begin
11060: LD_INT 0
11062: PPUSH
// if streamModeActive then
11063: LD_EXP 47
11067: IFFALSE 11076
// DefineStreamItems ( true ) ;
11069: LD_INT 1
11071: PPUSH
11072: CALL 12838 0 1
// UpdateLuaVariables ( ) ;
11076: CALL 11093 0 0
// UpdateFactoryWaypoints ( ) ;
11080: CALL 25699 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11084: CALL 25956 0 0
// end ;
11088: LD_VAR 0 1
11092: RET
// function UpdateLuaVariables ( ) ; begin
11093: LD_INT 0
11095: PPUSH
// if globalGameSaveCounter then
11096: LD_EXP 46
11100: IFFALSE 11134
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11102: LD_ADDR_EXP 46
11106: PUSH
11107: LD_EXP 46
11111: PPUSH
11112: CALL 69737 0 1
11116: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11117: LD_STRING setGameSaveCounter(
11119: PUSH
11120: LD_EXP 46
11124: STR
11125: PUSH
11126: LD_STRING )
11128: STR
11129: PPUSH
11130: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11134: LD_STRING setGameDifficulty(
11136: PUSH
11137: LD_OWVAR 67
11141: STR
11142: PUSH
11143: LD_STRING )
11145: STR
11146: PPUSH
11147: CALL_OW 559
// end ;
11151: LD_VAR 0 1
11155: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11156: LD_INT 0
11158: PPUSH
// if p2 = stream_mode then
11159: LD_VAR 0 2
11163: PUSH
11164: LD_INT 100
11166: EQUAL
11167: IFFALSE 12170
// begin if not StreamModeActive then
11169: LD_EXP 47
11173: NOT
11174: IFFALSE 11184
// StreamModeActive := true ;
11176: LD_ADDR_EXP 47
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// if p3 = 0 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_INT 0
11191: EQUAL
11192: IFFALSE 11198
// InitStreamMode ;
11194: CALL 12374 0 0
// if p3 = 1 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 1
11205: EQUAL
11206: IFFALSE 11216
// sRocket := true ;
11208: LD_ADDR_EXP 52
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 2 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 2
11223: EQUAL
11224: IFFALSE 11234
// sSpeed := true ;
11226: LD_ADDR_EXP 51
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 3 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 3
11241: EQUAL
11242: IFFALSE 11252
// sEngine := true ;
11244: LD_ADDR_EXP 53
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 4 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 4
11259: EQUAL
11260: IFFALSE 11270
// sSpec := true ;
11262: LD_ADDR_EXP 50
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 5 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 5
11277: EQUAL
11278: IFFALSE 11288
// sLevel := true ;
11280: LD_ADDR_EXP 54
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 6 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 6
11295: EQUAL
11296: IFFALSE 11306
// sArmoury := true ;
11298: LD_ADDR_EXP 55
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 7 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 7
11313: EQUAL
11314: IFFALSE 11324
// sRadar := true ;
11316: LD_ADDR_EXP 56
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 8 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 8
11331: EQUAL
11332: IFFALSE 11342
// sBunker := true ;
11334: LD_ADDR_EXP 57
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 9 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 9
11349: EQUAL
11350: IFFALSE 11360
// sHack := true ;
11352: LD_ADDR_EXP 58
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 10 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 10
11367: EQUAL
11368: IFFALSE 11378
// sFire := true ;
11370: LD_ADDR_EXP 59
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 11 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 11
11385: EQUAL
11386: IFFALSE 11396
// sRefresh := true ;
11388: LD_ADDR_EXP 60
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 12 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 12
11403: EQUAL
11404: IFFALSE 11414
// sExp := true ;
11406: LD_ADDR_EXP 61
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 13 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 13
11421: EQUAL
11422: IFFALSE 11432
// sDepot := true ;
11424: LD_ADDR_EXP 62
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 14 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 14
11439: EQUAL
11440: IFFALSE 11450
// sFlag := true ;
11442: LD_ADDR_EXP 63
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 15 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 15
11457: EQUAL
11458: IFFALSE 11468
// sKamikadze := true ;
11460: LD_ADDR_EXP 71
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 16 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 16
11475: EQUAL
11476: IFFALSE 11486
// sTroll := true ;
11478: LD_ADDR_EXP 72
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 17 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 17
11493: EQUAL
11494: IFFALSE 11504
// sSlow := true ;
11496: LD_ADDR_EXP 73
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 18 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 18
11511: EQUAL
11512: IFFALSE 11522
// sLack := true ;
11514: LD_ADDR_EXP 74
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 19 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 19
11529: EQUAL
11530: IFFALSE 11540
// sTank := true ;
11532: LD_ADDR_EXP 76
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 20 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 20
11547: EQUAL
11548: IFFALSE 11558
// sRemote := true ;
11550: LD_ADDR_EXP 77
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 21 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 21
11565: EQUAL
11566: IFFALSE 11576
// sPowell := true ;
11568: LD_ADDR_EXP 78
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 22 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 22
11583: EQUAL
11584: IFFALSE 11594
// sTeleport := true ;
11586: LD_ADDR_EXP 81
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 23 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 23
11601: EQUAL
11602: IFFALSE 11612
// sOilTower := true ;
11604: LD_ADDR_EXP 83
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 24 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 24
11619: EQUAL
11620: IFFALSE 11630
// sShovel := true ;
11622: LD_ADDR_EXP 84
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 25 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 25
11637: EQUAL
11638: IFFALSE 11648
// sSheik := true ;
11640: LD_ADDR_EXP 85
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 26 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 26
11655: EQUAL
11656: IFFALSE 11666
// sEarthquake := true ;
11658: LD_ADDR_EXP 87
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 27 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 27
11673: EQUAL
11674: IFFALSE 11684
// sAI := true ;
11676: LD_ADDR_EXP 88
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 28 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 28
11691: EQUAL
11692: IFFALSE 11702
// sCargo := true ;
11694: LD_ADDR_EXP 91
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 29 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 29
11709: EQUAL
11710: IFFALSE 11720
// sDLaser := true ;
11712: LD_ADDR_EXP 92
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 30 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 30
11727: EQUAL
11728: IFFALSE 11738
// sExchange := true ;
11730: LD_ADDR_EXP 93
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 31 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 31
11745: EQUAL
11746: IFFALSE 11756
// sFac := true ;
11748: LD_ADDR_EXP 94
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 32 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 32
11763: EQUAL
11764: IFFALSE 11774
// sPower := true ;
11766: LD_ADDR_EXP 95
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 33 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 33
11781: EQUAL
11782: IFFALSE 11792
// sRandom := true ;
11784: LD_ADDR_EXP 96
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 34 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 34
11799: EQUAL
11800: IFFALSE 11810
// sShield := true ;
11802: LD_ADDR_EXP 97
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 35 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 35
11817: EQUAL
11818: IFFALSE 11828
// sTime := true ;
11820: LD_ADDR_EXP 98
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 36 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 36
11835: EQUAL
11836: IFFALSE 11846
// sTools := true ;
11838: LD_ADDR_EXP 99
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 101 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 101
11853: EQUAL
11854: IFFALSE 11864
// sSold := true ;
11856: LD_ADDR_EXP 64
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 102 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 102
11871: EQUAL
11872: IFFALSE 11882
// sDiff := true ;
11874: LD_ADDR_EXP 65
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 103 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 103
11889: EQUAL
11890: IFFALSE 11900
// sFog := true ;
11892: LD_ADDR_EXP 68
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 104 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 104
11907: EQUAL
11908: IFFALSE 11918
// sReset := true ;
11910: LD_ADDR_EXP 69
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 105 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 105
11925: EQUAL
11926: IFFALSE 11936
// sSun := true ;
11928: LD_ADDR_EXP 70
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 106 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 106
11943: EQUAL
11944: IFFALSE 11954
// sTiger := true ;
11946: LD_ADDR_EXP 66
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 107 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 107
11961: EQUAL
11962: IFFALSE 11972
// sBomb := true ;
11964: LD_ADDR_EXP 67
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 108 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 108
11979: EQUAL
11980: IFFALSE 11990
// sWound := true ;
11982: LD_ADDR_EXP 75
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 109 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 109
11997: EQUAL
11998: IFFALSE 12008
// sBetray := true ;
12000: LD_ADDR_EXP 79
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 110 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 110
12015: EQUAL
12016: IFFALSE 12026
// sContamin := true ;
12018: LD_ADDR_EXP 80
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 111 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 111
12033: EQUAL
12034: IFFALSE 12044
// sOil := true ;
12036: LD_ADDR_EXP 82
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 112 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 112
12051: EQUAL
12052: IFFALSE 12062
// sStu := true ;
12054: LD_ADDR_EXP 86
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 113 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 113
12069: EQUAL
12070: IFFALSE 12080
// sBazooka := true ;
12072: LD_ADDR_EXP 89
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 114 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 114
12087: EQUAL
12088: IFFALSE 12098
// sMortar := true ;
12090: LD_ADDR_EXP 90
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 115 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 115
12105: EQUAL
12106: IFFALSE 12116
// sRanger := true ;
12108: LD_ADDR_EXP 100
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 116 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 116
12123: EQUAL
12124: IFFALSE 12134
// sComputer := true ;
12126: LD_ADDR_EXP 101
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 117 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 117
12141: EQUAL
12142: IFFALSE 12152
// s30 := true ;
12144: LD_ADDR_EXP 102
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 118 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 118
12159: EQUAL
12160: IFFALSE 12170
// s60 := true ;
12162: LD_ADDR_EXP 103
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// end ; if p2 = hack_mode then
12170: LD_VAR 0 2
12174: PUSH
12175: LD_INT 101
12177: EQUAL
12178: IFFALSE 12306
// begin case p3 of 1 :
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 1
12187: DOUBLE
12188: EQUAL
12189: IFTRUE 12193
12191: GO 12200
12193: POP
// hHackUnlimitedResources ; 2 :
12194: CALL 24445 0 0
12198: GO 12306
12200: LD_INT 2
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12215
12208: POP
// hHackSetLevel10 ; 3 :
12209: CALL 24578 0 0
12213: GO 12306
12215: LD_INT 3
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12230
12223: POP
// hHackSetLevel10YourUnits ; 4 :
12224: CALL 24663 0 0
12228: GO 12306
12230: LD_INT 4
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12245
12238: POP
// hHackInvincible ; 5 :
12239: CALL 25111 0 0
12243: GO 12306
12245: LD_INT 5
12247: DOUBLE
12248: EQUAL
12249: IFTRUE 12253
12251: GO 12260
12253: POP
// hHackInvisible ; 6 :
12254: CALL 25222 0 0
12258: GO 12306
12260: LD_INT 6
12262: DOUBLE
12263: EQUAL
12264: IFTRUE 12268
12266: GO 12275
12268: POP
// hHackChangeYourSide ; 7 :
12269: CALL 25279 0 0
12273: GO 12306
12275: LD_INT 7
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12290
12283: POP
// hHackChangeUnitSide ; 8 :
12284: CALL 25321 0 0
12288: GO 12306
12290: LD_INT 8
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12305
12298: POP
// hHackFog ; end ;
12299: CALL 25422 0 0
12303: GO 12306
12305: POP
// end ; if p2 = game_save_mode then
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 102
12313: EQUAL
12314: IFFALSE 12369
// begin if p3 = 1 then
12316: LD_VAR 0 3
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12336
// globalGameSaveCounter := p4 ;
12326: LD_ADDR_EXP 46
12330: PUSH
12331: LD_VAR 0 4
12335: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 2
12343: EQUAL
12344: PUSH
12345: LD_EXP 46
12349: AND
12350: IFFALSE 12369
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12352: LD_STRING setGameSaveCounter(
12354: PUSH
12355: LD_EXP 46
12359: STR
12360: PUSH
12361: LD_STRING )
12363: STR
12364: PPUSH
12365: CALL_OW 559
// end ; end ;
12369: LD_VAR 0 7
12373: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12374: LD_INT 0
12376: PPUSH
// streamModeActive := false ;
12377: LD_ADDR_EXP 47
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// normalCounter := 36 ;
12385: LD_ADDR_EXP 48
12389: PUSH
12390: LD_INT 36
12392: ST_TO_ADDR
// hardcoreCounter := 18 ;
12393: LD_ADDR_EXP 49
12397: PUSH
12398: LD_INT 18
12400: ST_TO_ADDR
// sRocket := false ;
12401: LD_ADDR_EXP 52
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sSpeed := false ;
12409: LD_ADDR_EXP 51
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sEngine := false ;
12417: LD_ADDR_EXP 53
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sSpec := false ;
12425: LD_ADDR_EXP 50
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sLevel := false ;
12433: LD_ADDR_EXP 54
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sArmoury := false ;
12441: LD_ADDR_EXP 55
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sRadar := false ;
12449: LD_ADDR_EXP 56
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sBunker := false ;
12457: LD_ADDR_EXP 57
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sHack := false ;
12465: LD_ADDR_EXP 58
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sFire := false ;
12473: LD_ADDR_EXP 59
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sRefresh := false ;
12481: LD_ADDR_EXP 60
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sExp := false ;
12489: LD_ADDR_EXP 61
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sDepot := false ;
12497: LD_ADDR_EXP 62
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sFlag := false ;
12505: LD_ADDR_EXP 63
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sKamikadze := false ;
12513: LD_ADDR_EXP 71
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTroll := false ;
12521: LD_ADDR_EXP 72
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sSlow := false ;
12529: LD_ADDR_EXP 73
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sLack := false ;
12537: LD_ADDR_EXP 74
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sTank := false ;
12545: LD_ADDR_EXP 76
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sRemote := false ;
12553: LD_ADDR_EXP 77
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sPowell := false ;
12561: LD_ADDR_EXP 78
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sTeleport := false ;
12569: LD_ADDR_EXP 81
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sOilTower := false ;
12577: LD_ADDR_EXP 83
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sShovel := false ;
12585: LD_ADDR_EXP 84
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sSheik := false ;
12593: LD_ADDR_EXP 85
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sEarthquake := false ;
12601: LD_ADDR_EXP 87
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sAI := false ;
12609: LD_ADDR_EXP 88
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sCargo := false ;
12617: LD_ADDR_EXP 91
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sDLaser := false ;
12625: LD_ADDR_EXP 92
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sExchange := false ;
12633: LD_ADDR_EXP 93
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sFac := false ;
12641: LD_ADDR_EXP 94
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sPower := false ;
12649: LD_ADDR_EXP 95
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sRandom := false ;
12657: LD_ADDR_EXP 96
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sShield := false ;
12665: LD_ADDR_EXP 97
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sTime := false ;
12673: LD_ADDR_EXP 98
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTools := false ;
12681: LD_ADDR_EXP 99
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sSold := false ;
12689: LD_ADDR_EXP 64
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sDiff := false ;
12697: LD_ADDR_EXP 65
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sFog := false ;
12705: LD_ADDR_EXP 68
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sReset := false ;
12713: LD_ADDR_EXP 69
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sSun := false ;
12721: LD_ADDR_EXP 70
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sTiger := false ;
12729: LD_ADDR_EXP 66
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBomb := false ;
12737: LD_ADDR_EXP 67
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sWound := false ;
12745: LD_ADDR_EXP 75
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sBetray := false ;
12753: LD_ADDR_EXP 79
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sContamin := false ;
12761: LD_ADDR_EXP 80
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sOil := false ;
12769: LD_ADDR_EXP 82
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sStu := false ;
12777: LD_ADDR_EXP 86
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sBazooka := false ;
12785: LD_ADDR_EXP 89
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sMortar := false ;
12793: LD_ADDR_EXP 90
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sRanger := false ;
12801: LD_ADDR_EXP 100
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sComputer := false ;
12809: LD_ADDR_EXP 101
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// s30 := false ;
12817: LD_ADDR_EXP 102
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s60 := false ;
12825: LD_ADDR_EXP 103
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// end ;
12833: LD_VAR 0 1
12837: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12838: LD_INT 0
12840: PPUSH
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
// result := [ ] ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: EMPTY
12853: ST_TO_ADDR
// if campaign_id = 1 then
12854: LD_OWVAR 69
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: IFFALSE 16028
// begin case mission_number of 1 :
12864: LD_OWVAR 70
12868: PUSH
12869: LD_INT 1
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12953
12877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12878: LD_ADDR_VAR 0 2
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 4
12888: PUSH
12889: LD_INT 11
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 15
12897: PUSH
12898: LD_INT 16
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 101
12923: PUSH
12924: LD_INT 102
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 116
12932: PUSH
12933: LD_INT 117
12935: PUSH
12936: LD_INT 118
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 16026
12953: LD_INT 2
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13045
12961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 11
12975: PUSH
12976: LD_INT 12
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 16
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 101
13007: PUSH
13008: LD_INT 102
13010: PUSH
13011: LD_INT 105
13013: PUSH
13014: LD_INT 106
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: LD_INT 116
13022: PUSH
13023: LD_INT 117
13025: PUSH
13026: LD_INT 118
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 16026
13045: LD_INT 3
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13141
13053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 4
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 11
13070: PUSH
13071: LD_INT 12
13073: PUSH
13074: LD_INT 15
13076: PUSH
13077: LD_INT 16
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 26
13085: PUSH
13086: LD_INT 36
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 101
13103: PUSH
13104: LD_INT 102
13106: PUSH
13107: LD_INT 105
13109: PUSH
13110: LD_INT 106
13112: PUSH
13113: LD_INT 108
13115: PUSH
13116: LD_INT 116
13118: PUSH
13119: LD_INT 117
13121: PUSH
13122: LD_INT 118
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 16026
13141: LD_INT 4
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13245
13149: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 4
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: LD_INT 8
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 15
13175: PUSH
13176: LD_INT 16
13178: PUSH
13179: LD_INT 22
13181: PUSH
13182: LD_INT 23
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 36
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 101
13207: PUSH
13208: LD_INT 102
13210: PUSH
13211: LD_INT 105
13213: PUSH
13214: LD_INT 106
13216: PUSH
13217: LD_INT 108
13219: PUSH
13220: LD_INT 116
13222: PUSH
13223: LD_INT 117
13225: PUSH
13226: LD_INT 118
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 16026
13245: LD_INT 5
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13365
13253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 15
13282: PUSH
13283: LD_INT 16
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 23
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 26
13297: PUSH
13298: LD_INT 36
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 105
13325: PUSH
13326: LD_INT 106
13328: PUSH
13329: LD_INT 108
13331: PUSH
13332: LD_INT 109
13334: PUSH
13335: LD_INT 112
13337: PUSH
13338: LD_INT 116
13340: PUSH
13341: LD_INT 117
13343: PUSH
13344: LD_INT 118
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: ST_TO_ADDR
13363: GO 16026
13365: LD_INT 6
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13505
13373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: LD_INT 5
13387: PUSH
13388: LD_INT 6
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: LD_INT 11
13396: PUSH
13397: LD_INT 12
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 30
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 36
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 101
13459: PUSH
13460: LD_INT 102
13462: PUSH
13463: LD_INT 105
13465: PUSH
13466: LD_INT 106
13468: PUSH
13469: LD_INT 108
13471: PUSH
13472: LD_INT 109
13474: PUSH
13475: LD_INT 112
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: ST_TO_ADDR
13503: GO 16026
13505: LD_INT 7
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13625
13513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: LD_INT 7
13530: PUSH
13531: LD_INT 11
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: LD_INT 15
13539: PUSH
13540: LD_INT 16
13542: PUSH
13543: LD_INT 20
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_INT 23
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 26
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 103
13585: PUSH
13586: LD_INT 105
13588: PUSH
13589: LD_INT 106
13591: PUSH
13592: LD_INT 108
13594: PUSH
13595: LD_INT 112
13597: PUSH
13598: LD_INT 116
13600: PUSH
13601: LD_INT 117
13603: PUSH
13604: LD_INT 118
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 16026
13625: LD_INT 8
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13773
13633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: LD_INT 7
13653: PUSH
13654: LD_INT 8
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: LD_INT 16
13668: PUSH
13669: LD_INT 20
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 103
13729: PUSH
13730: LD_INT 105
13732: PUSH
13733: LD_INT 106
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 112
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 16026
13773: LD_INT 9
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13929
13781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 6
13798: PUSH
13799: LD_INT 7
13801: PUSH
13802: LD_INT 8
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: LD_INT 12
13810: PUSH
13811: LD_INT 15
13813: PUSH
13814: LD_INT 16
13816: PUSH
13817: LD_INT 20
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 23
13828: PUSH
13829: LD_INT 25
13831: PUSH
13832: LD_INT 26
13834: PUSH
13835: LD_INT 28
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: LD_INT 31
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: LD_INT 36
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 101
13875: PUSH
13876: LD_INT 102
13878: PUSH
13879: LD_INT 103
13881: PUSH
13882: LD_INT 105
13884: PUSH
13885: LD_INT 106
13887: PUSH
13888: LD_INT 108
13890: PUSH
13891: LD_INT 109
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 114
13899: PUSH
13900: LD_INT 116
13902: PUSH
13903: LD_INT 117
13905: PUSH
13906: LD_INT 118
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: ST_TO_ADDR
13927: GO 16026
13929: LD_INT 10
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 14133
13937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: LD_INT 4
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: LD_INT 6
13954: PUSH
13955: LD_INT 7
13957: PUSH
13958: LD_INT 8
13960: PUSH
13961: LD_INT 9
13963: PUSH
13964: LD_INT 10
13966: PUSH
13967: LD_INT 11
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: LD_INT 13
13975: PUSH
13976: LD_INT 14
13978: PUSH
13979: LD_INT 15
13981: PUSH
13982: LD_INT 16
13984: PUSH
13985: LD_INT 17
13987: PUSH
13988: LD_INT 18
13990: PUSH
13991: LD_INT 19
13993: PUSH
13994: LD_INT 20
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 23
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 26
14014: PUSH
14015: LD_INT 28
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 31
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: LD_INT 36
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 103
14069: PUSH
14070: LD_INT 104
14072: PUSH
14073: LD_INT 105
14075: PUSH
14076: LD_INT 106
14078: PUSH
14079: LD_INT 107
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 110
14090: PUSH
14091: LD_INT 111
14093: PUSH
14094: LD_INT 112
14096: PUSH
14097: LD_INT 114
14099: PUSH
14100: LD_INT 116
14102: PUSH
14103: LD_INT 117
14105: PUSH
14106: LD_INT 118
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 16026
14133: LD_INT 11
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14345
14141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 5
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_INT 8
14167: PUSH
14168: LD_INT 9
14170: PUSH
14171: LD_INT 10
14173: PUSH
14174: LD_INT 11
14176: PUSH
14177: LD_INT 12
14179: PUSH
14180: LD_INT 13
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: LD_INT 15
14188: PUSH
14189: LD_INT 16
14191: PUSH
14192: LD_INT 17
14194: PUSH
14195: LD_INT 18
14197: PUSH
14198: LD_INT 19
14200: PUSH
14201: LD_INT 20
14203: PUSH
14204: LD_INT 21
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 24
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 26
14221: PUSH
14222: LD_INT 28
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 31
14230: PUSH
14231: LD_INT 32
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 36
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 104
14284: PUSH
14285: LD_INT 105
14287: PUSH
14288: LD_INT 106
14290: PUSH
14291: LD_INT 107
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: LD_INT 109
14299: PUSH
14300: LD_INT 110
14302: PUSH
14303: LD_INT 111
14305: PUSH
14306: LD_INT 112
14308: PUSH
14309: LD_INT 114
14311: PUSH
14312: LD_INT 116
14314: PUSH
14315: LD_INT 117
14317: PUSH
14318: LD_INT 118
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16026
14345: LD_INT 12
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14573
14353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 3
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: LD_INT 9
14385: PUSH
14386: LD_INT 10
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 13
14397: PUSH
14398: LD_INT 14
14400: PUSH
14401: LD_INT 15
14403: PUSH
14404: LD_INT 16
14406: PUSH
14407: LD_INT 17
14409: PUSH
14410: LD_INT 18
14412: PUSH
14413: LD_INT 19
14415: PUSH
14416: LD_INT 20
14418: PUSH
14419: LD_INT 21
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 23
14427: PUSH
14428: LD_INT 24
14430: PUSH
14431: LD_INT 25
14433: PUSH
14434: LD_INT 26
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: LD_INT 28
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 101
14499: PUSH
14500: LD_INT 102
14502: PUSH
14503: LD_INT 103
14505: PUSH
14506: LD_INT 104
14508: PUSH
14509: LD_INT 105
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: LD_INT 107
14517: PUSH
14518: LD_INT 108
14520: PUSH
14521: LD_INT 109
14523: PUSH
14524: LD_INT 110
14526: PUSH
14527: LD_INT 111
14529: PUSH
14530: LD_INT 112
14532: PUSH
14533: LD_INT 113
14535: PUSH
14536: LD_INT 114
14538: PUSH
14539: LD_INT 116
14541: PUSH
14542: LD_INT 117
14544: PUSH
14545: LD_INT 118
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: ST_TO_ADDR
14571: GO 16026
14573: LD_INT 13
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14789
14581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 4
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: LD_INT 10
14610: PUSH
14611: LD_INT 11
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: LD_INT 14
14619: PUSH
14620: LD_INT 15
14622: PUSH
14623: LD_INT 16
14625: PUSH
14626: LD_INT 17
14628: PUSH
14629: LD_INT 18
14631: PUSH
14632: LD_INT 19
14634: PUSH
14635: LD_INT 20
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 23
14646: PUSH
14647: LD_INT 24
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: LD_INT 27
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 31
14667: PUSH
14668: LD_INT 32
14670: PUSH
14671: LD_INT 33
14673: PUSH
14674: LD_INT 34
14676: PUSH
14677: LD_INT 36
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 103
14721: PUSH
14722: LD_INT 104
14724: PUSH
14725: LD_INT 105
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 107
14733: PUSH
14734: LD_INT 108
14736: PUSH
14737: LD_INT 109
14739: PUSH
14740: LD_INT 110
14742: PUSH
14743: LD_INT 111
14745: PUSH
14746: LD_INT 112
14748: PUSH
14749: LD_INT 113
14751: PUSH
14752: LD_INT 114
14754: PUSH
14755: LD_INT 116
14757: PUSH
14758: LD_INT 117
14760: PUSH
14761: LD_INT 118
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: ST_TO_ADDR
14787: GO 16026
14789: LD_INT 14
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 15021
14797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 36
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 113
14983: PUSH
14984: LD_INT 114
14986: PUSH
14987: LD_INT 116
14989: PUSH
14990: LD_INT 117
14992: PUSH
14993: LD_INT 118
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: ST_TO_ADDR
15019: GO 16026
15021: LD_INT 15
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15253
15029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: LD_INT 5
15049: PUSH
15050: LD_INT 6
15052: PUSH
15053: LD_INT 7
15055: PUSH
15056: LD_INT 8
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: LD_INT 10
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 13
15073: PUSH
15074: LD_INT 14
15076: PUSH
15077: LD_INT 15
15079: PUSH
15080: LD_INT 16
15082: PUSH
15083: LD_INT 17
15085: PUSH
15086: LD_INT 18
15088: PUSH
15089: LD_INT 19
15091: PUSH
15092: LD_INT 20
15094: PUSH
15095: LD_INT 21
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_INT 23
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 26
15112: PUSH
15113: LD_INT 27
15115: PUSH
15116: LD_INT 28
15118: PUSH
15119: LD_INT 29
15121: PUSH
15122: LD_INT 30
15124: PUSH
15125: LD_INT 31
15127: PUSH
15128: LD_INT 32
15130: PUSH
15131: LD_INT 33
15133: PUSH
15134: LD_INT 34
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 113
15215: PUSH
15216: LD_INT 114
15218: PUSH
15219: LD_INT 116
15221: PUSH
15222: LD_INT 117
15224: PUSH
15225: LD_INT 118
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 16026
15253: LD_INT 16
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15397
15261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 7
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 16
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 31
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 101
15347: PUSH
15348: LD_INT 102
15350: PUSH
15351: LD_INT 103
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: LD_INT 108
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: LD_INT 116
15371: PUSH
15372: LD_INT 117
15374: PUSH
15375: LD_INT 118
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: ST_TO_ADDR
15395: GO 16026
15397: LD_INT 17
15399: DOUBLE
15400: EQUAL
15401: IFTRUE 15405
15403: GO 15629
15405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15406: LD_ADDR_VAR 0 2
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 4
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 6
15428: PUSH
15429: LD_INT 7
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 9
15437: PUSH
15438: LD_INT 10
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 16
15458: PUSH
15459: LD_INT 17
15461: PUSH
15462: LD_INT 18
15464: PUSH
15465: LD_INT 19
15467: PUSH
15468: LD_INT 20
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 23
15479: PUSH
15480: LD_INT 24
15482: PUSH
15483: LD_INT 25
15485: PUSH
15486: LD_INT 26
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: LD_INT 29
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 31
15503: PUSH
15504: LD_INT 32
15506: PUSH
15507: LD_INT 33
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 36
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 101
15555: PUSH
15556: LD_INT 102
15558: PUSH
15559: LD_INT 103
15561: PUSH
15562: LD_INT 104
15564: PUSH
15565: LD_INT 105
15567: PUSH
15568: LD_INT 106
15570: PUSH
15571: LD_INT 107
15573: PUSH
15574: LD_INT 108
15576: PUSH
15577: LD_INT 109
15579: PUSH
15580: LD_INT 110
15582: PUSH
15583: LD_INT 111
15585: PUSH
15586: LD_INT 112
15588: PUSH
15589: LD_INT 113
15591: PUSH
15592: LD_INT 114
15594: PUSH
15595: LD_INT 116
15597: PUSH
15598: LD_INT 117
15600: PUSH
15601: LD_INT 118
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: ST_TO_ADDR
15627: GO 16026
15629: LD_INT 18
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15785
15637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: LD_INT 12
15660: PUSH
15661: LD_INT 15
15663: PUSH
15664: LD_INT 16
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 30
15687: PUSH
15688: LD_INT 31
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 33
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 35
15702: PUSH
15703: LD_INT 36
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 101
15731: PUSH
15732: LD_INT 102
15734: PUSH
15735: LD_INT 103
15737: PUSH
15738: LD_INT 106
15740: PUSH
15741: LD_INT 108
15743: PUSH
15744: LD_INT 112
15746: PUSH
15747: LD_INT 113
15749: PUSH
15750: LD_INT 114
15752: PUSH
15753: LD_INT 115
15755: PUSH
15756: LD_INT 116
15758: PUSH
15759: LD_INT 117
15761: PUSH
15762: LD_INT 118
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 16026
15785: LD_INT 19
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 16025
15793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15794: LD_ADDR_VAR 0 2
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: LD_INT 6
15816: PUSH
15817: LD_INT 7
15819: PUSH
15820: LD_INT 8
15822: PUSH
15823: LD_INT 9
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: LD_INT 11
15831: PUSH
15832: LD_INT 12
15834: PUSH
15835: LD_INT 13
15837: PUSH
15838: LD_INT 14
15840: PUSH
15841: LD_INT 15
15843: PUSH
15844: LD_INT 16
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: LD_INT 18
15852: PUSH
15853: LD_INT 19
15855: PUSH
15856: LD_INT 20
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 24
15870: PUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 26
15876: PUSH
15877: LD_INT 27
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: LD_INT 29
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 31
15891: PUSH
15892: LD_INT 32
15894: PUSH
15895: LD_INT 33
15897: PUSH
15898: LD_INT 34
15900: PUSH
15901: LD_INT 35
15903: PUSH
15904: LD_INT 36
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 104
15956: PUSH
15957: LD_INT 105
15959: PUSH
15960: LD_INT 106
15962: PUSH
15963: LD_INT 107
15965: PUSH
15966: LD_INT 108
15968: PUSH
15969: LD_INT 109
15971: PUSH
15972: LD_INT 110
15974: PUSH
15975: LD_INT 111
15977: PUSH
15978: LD_INT 112
15980: PUSH
15981: LD_INT 113
15983: PUSH
15984: LD_INT 114
15986: PUSH
15987: LD_INT 115
15989: PUSH
15990: LD_INT 116
15992: PUSH
15993: LD_INT 117
15995: PUSH
15996: LD_INT 118
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ST_TO_ADDR
16023: GO 16026
16025: POP
// end else
16026: GO 16257
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16028: LD_ADDR_VAR 0 2
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: LD_INT 4
16044: PUSH
16045: LD_INT 5
16047: PUSH
16048: LD_INT 6
16050: PUSH
16051: LD_INT 7
16053: PUSH
16054: LD_INT 8
16056: PUSH
16057: LD_INT 9
16059: PUSH
16060: LD_INT 10
16062: PUSH
16063: LD_INT 11
16065: PUSH
16066: LD_INT 12
16068: PUSH
16069: LD_INT 13
16071: PUSH
16072: LD_INT 14
16074: PUSH
16075: LD_INT 15
16077: PUSH
16078: LD_INT 16
16080: PUSH
16081: LD_INT 17
16083: PUSH
16084: LD_INT 18
16086: PUSH
16087: LD_INT 19
16089: PUSH
16090: LD_INT 20
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 22
16098: PUSH
16099: LD_INT 23
16101: PUSH
16102: LD_INT 24
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 26
16110: PUSH
16111: LD_INT 27
16113: PUSH
16114: LD_INT 28
16116: PUSH
16117: LD_INT 29
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 101
16181: PUSH
16182: LD_INT 102
16184: PUSH
16185: LD_INT 103
16187: PUSH
16188: LD_INT 104
16190: PUSH
16191: LD_INT 105
16193: PUSH
16194: LD_INT 106
16196: PUSH
16197: LD_INT 107
16199: PUSH
16200: LD_INT 108
16202: PUSH
16203: LD_INT 109
16205: PUSH
16206: LD_INT 110
16208: PUSH
16209: LD_INT 111
16211: PUSH
16212: LD_INT 112
16214: PUSH
16215: LD_INT 113
16217: PUSH
16218: LD_INT 114
16220: PUSH
16221: LD_INT 115
16223: PUSH
16224: LD_INT 116
16226: PUSH
16227: LD_INT 117
16229: PUSH
16230: LD_INT 118
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if result then
16257: LD_VAR 0 2
16261: IFFALSE 17047
// begin normal :=  ;
16263: LD_ADDR_VAR 0 5
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hardcore :=  ;
16271: LD_ADDR_VAR 0 6
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// active :=  ;
16279: LD_ADDR_VAR 0 7
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// for i = 1 to normalCounter do
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_EXP 48
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16404
// begin tmp := 0 ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_STRING 0
16312: ST_TO_ADDR
// if result [ 1 ] then
16313: LD_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: IFFALSE 16386
// if result [ 1 ] [ 1 ] = i then
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 8
16340: EQUAL
16341: IFFALSE 16386
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: CALL_OW 3
16372: PPUSH
16373: CALL_OW 1
16377: ST_TO_ADDR
// tmp := 1 ;
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_STRING 1
16385: ST_TO_ADDR
// end ; normal := normal & tmp ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_VAR 0 5
16395: PUSH
16396: LD_VAR 0 3
16400: STR
16401: ST_TO_ADDR
// end ;
16402: GO 16302
16404: POP
16405: POP
// for i = 1 to hardcoreCounter do
16406: LD_ADDR_VAR 0 8
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_EXP 49
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16527
// begin tmp := 0 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_STRING 0
16431: ST_TO_ADDR
// if result [ 2 ] then
16432: LD_VAR 0 2
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: IFFALSE 16509
// if result [ 2 ] [ 1 ] = 100 + i then
16442: LD_VAR 0 2
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PUSH
16455: LD_INT 100
16457: PUSH
16458: LD_VAR 0 8
16462: PLUS
16463: EQUAL
16464: IFFALSE 16509
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 2
16478: PPUSH
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 2
16486: ARRAY
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 3
16495: PPUSH
16496: CALL_OW 1
16500: ST_TO_ADDR
// tmp := 1 ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_STRING 1
16508: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16509: LD_ADDR_VAR 0 6
16513: PUSH
16514: LD_VAR 0 6
16518: PUSH
16519: LD_VAR 0 3
16523: STR
16524: ST_TO_ADDR
// end ;
16525: GO 16421
16527: POP
16528: POP
// if isGameLoad then
16529: LD_VAR 0 1
16533: IFFALSE 17008
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_EXP 52
16544: PUSH
16545: LD_EXP 51
16549: PUSH
16550: LD_EXP 53
16554: PUSH
16555: LD_EXP 50
16559: PUSH
16560: LD_EXP 54
16564: PUSH
16565: LD_EXP 55
16569: PUSH
16570: LD_EXP 56
16574: PUSH
16575: LD_EXP 57
16579: PUSH
16580: LD_EXP 58
16584: PUSH
16585: LD_EXP 59
16589: PUSH
16590: LD_EXP 60
16594: PUSH
16595: LD_EXP 61
16599: PUSH
16600: LD_EXP 62
16604: PUSH
16605: LD_EXP 63
16609: PUSH
16610: LD_EXP 71
16614: PUSH
16615: LD_EXP 72
16619: PUSH
16620: LD_EXP 73
16624: PUSH
16625: LD_EXP 74
16629: PUSH
16630: LD_EXP 76
16634: PUSH
16635: LD_EXP 77
16639: PUSH
16640: LD_EXP 78
16644: PUSH
16645: LD_EXP 81
16649: PUSH
16650: LD_EXP 83
16654: PUSH
16655: LD_EXP 84
16659: PUSH
16660: LD_EXP 85
16664: PUSH
16665: LD_EXP 87
16669: PUSH
16670: LD_EXP 88
16674: PUSH
16675: LD_EXP 91
16679: PUSH
16680: LD_EXP 92
16684: PUSH
16685: LD_EXP 93
16689: PUSH
16690: LD_EXP 94
16694: PUSH
16695: LD_EXP 95
16699: PUSH
16700: LD_EXP 96
16704: PUSH
16705: LD_EXP 97
16709: PUSH
16710: LD_EXP 98
16714: PUSH
16715: LD_EXP 99
16719: PUSH
16720: LD_EXP 64
16724: PUSH
16725: LD_EXP 65
16729: PUSH
16730: LD_EXP 68
16734: PUSH
16735: LD_EXP 69
16739: PUSH
16740: LD_EXP 70
16744: PUSH
16745: LD_EXP 66
16749: PUSH
16750: LD_EXP 67
16754: PUSH
16755: LD_EXP 75
16759: PUSH
16760: LD_EXP 79
16764: PUSH
16765: LD_EXP 80
16769: PUSH
16770: LD_EXP 82
16774: PUSH
16775: LD_EXP 86
16779: PUSH
16780: LD_EXP 89
16784: PUSH
16785: LD_EXP 90
16789: PUSH
16790: LD_EXP 100
16794: PUSH
16795: LD_EXP 101
16799: PUSH
16800: LD_EXP 102
16804: PUSH
16805: LD_EXP 103
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// tmp :=  ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_STRING 
16873: ST_TO_ADDR
// for i = 1 to normalCounter do
16874: LD_ADDR_VAR 0 8
16878: PUSH
16879: DOUBLE
16880: LD_INT 1
16882: DEC
16883: ST_TO_ADDR
16884: LD_EXP 48
16888: PUSH
16889: FOR_TO
16890: IFFALSE 16926
// begin if flags [ i ] then
16892: LD_VAR 0 4
16896: PUSH
16897: LD_VAR 0 8
16901: ARRAY
16902: IFFALSE 16924
// tmp := tmp & i & ; ;
16904: LD_ADDR_VAR 0 3
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 8
16918: STR
16919: PUSH
16920: LD_STRING ;
16922: STR
16923: ST_TO_ADDR
// end ;
16924: GO 16889
16926: POP
16927: POP
// for i = 1 to hardcoreCounter do
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_EXP 49
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16990
// begin if flags [ normalCounter + i ] then
16946: LD_VAR 0 4
16950: PUSH
16951: LD_EXP 48
16955: PUSH
16956: LD_VAR 0 8
16960: PLUS
16961: ARRAY
16962: IFFALSE 16988
// tmp := tmp & ( 100 + i ) & ; ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 100
16976: PUSH
16977: LD_VAR 0 8
16981: PLUS
16982: STR
16983: PUSH
16984: LD_STRING ;
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16943
16990: POP
16991: POP
// if tmp then
16992: LD_VAR 0 3
16996: IFFALSE 17008
// active := tmp ;
16998: LD_ADDR_VAR 0 7
17002: PUSH
17003: LD_VAR 0 3
17007: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17008: LD_STRING getStreamItemsFromMission("
17010: PUSH
17011: LD_VAR 0 5
17015: STR
17016: PUSH
17017: LD_STRING ","
17019: STR
17020: PUSH
17021: LD_VAR 0 6
17025: STR
17026: PUSH
17027: LD_STRING ","
17029: STR
17030: PUSH
17031: LD_VAR 0 7
17035: STR
17036: PUSH
17037: LD_STRING ")
17039: STR
17040: PPUSH
17041: CALL_OW 559
// end else
17045: GO 17054
// ToLua ( getStreamItemsFromMission("","","") ) ;
17047: LD_STRING getStreamItemsFromMission("","","")
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: LD_VAR 0 2
17058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17059: LD_EXP 47
17063: PUSH
17064: LD_EXP 52
17068: AND
17069: IFFALSE 17193
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
// begin enable ;
17078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_OWVAR 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 45
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 34
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 34
17131: PUSH
17132: LD_INT 47
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: ST_TO_ADDR
// if not tmp then
17155: LD_VAR 0 2
17159: NOT
17160: IFFALSE 17164
// exit ;
17162: GO 17193
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17191
// begin SetLives ( i , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 234
// end ;
17189: GO 17174
17191: POP
17192: POP
// end ;
17193: PPOPN 2
17195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17196: LD_EXP 47
17200: PUSH
17201: LD_EXP 53
17205: AND
17206: IFFALSE 17290
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
// begin enable ;
17215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 32
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: ST_TO_ADDR
// if not tmp then
17252: LD_VAR 0 2
17256: NOT
17257: IFFALSE 17261
// exit ;
17259: GO 17290
// for i in tmp do
17261: LD_ADDR_VAR 0 1
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: FOR_IN
17272: IFFALSE 17288
// begin SetLives ( i , 0 ) ;
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: CALL_OW 234
// end ;
17286: GO 17271
17288: POP
17289: POP
// end ;
17290: PPOPN 2
17292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17293: LD_EXP 47
17297: PUSH
17298: LD_EXP 50
17302: AND
17303: IFFALSE 17396
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin enable ;
17311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_OWVAR 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: LD_INT 5
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 25
17344: PUSH
17345: LD_INT 9
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 25
17354: PUSH
17355: LD_INT 8
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 69
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17394
// begin SetClass ( i , 1 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: GO 17377
17394: POP
17395: POP
// end ;
17396: PPOPN 1
17398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17399: LD_EXP 47
17403: PUSH
17404: LD_EXP 51
17408: AND
17409: PUSH
17410: LD_OWVAR 65
17414: PUSH
17415: LD_INT 7
17417: LESS
17418: AND
17419: IFFALSE 17433
17421: GO 17423
17423: DISABLE
// begin enable ;
17424: ENABLE
// game_speed := 7 ;
17425: LD_ADDR_OWVAR 65
17429: PUSH
17430: LD_INT 7
17432: ST_TO_ADDR
// end ;
17433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17434: LD_EXP 47
17438: PUSH
17439: LD_EXP 54
17443: AND
17444: IFFALSE 17646
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 81
17461: PUSH
17462: LD_OWVAR 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 21
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 3
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17646
// if tmp > 5 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 5
17506: GREATER
17507: IFFALSE 17519
// k := 5 else
17509: LD_ADDR_VAR 0 2
17513: PUSH
17514: LD_INT 5
17516: ST_TO_ADDR
17517: GO 17529
// k := tmp ;
17519: LD_ADDR_VAR 0 2
17523: PUSH
17524: LD_VAR 0 3
17528: ST_TO_ADDR
// for i := 1 to k do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_VAR 0 2
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_VAR 0 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 4
17565: MOD
17566: PUSH
17567: LD_INT 1
17569: PLUS
17570: PPUSH
17571: CALL_OW 259
17575: PUSH
17576: LD_INT 10
17578: LESS
17579: IFFALSE 17642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 1
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 4
17599: MOD
17600: PUSH
17601: LD_INT 1
17603: PLUS
17604: PPUSH
17605: LD_VAR 0 3
17609: PUSH
17610: LD_VAR 0 1
17614: ARRAY
17615: PPUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 4
17623: MOD
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: PPUSH
17629: CALL_OW 259
17633: PUSH
17634: LD_INT 1
17636: PLUS
17637: PPUSH
17638: CALL_OW 237
17642: GO 17544
17644: POP
17645: POP
// end ;
17646: PPOPN 3
17648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17649: LD_EXP 47
17653: PUSH
17654: LD_EXP 55
17658: AND
17659: IFFALSE 17679
17661: GO 17663
17663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17664: LD_INT 4
17666: PPUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 324
17679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17680: LD_EXP 47
17684: PUSH
17685: LD_EXP 84
17689: AND
17690: IFFALSE 17710
17692: GO 17694
17694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17695: LD_INT 19
17697: PPUSH
17698: LD_OWVAR 2
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL_OW 324
17710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17711: LD_EXP 47
17715: PUSH
17716: LD_EXP 56
17720: AND
17721: IFFALSE 17823
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
17729: PPUSH
// begin enable ;
17730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17731: LD_ADDR_VAR 0 2
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_OWVAR 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 34
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 34
17763: PUSH
17764: LD_INT 30
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PPUSH
17780: CALL_OW 69
17784: ST_TO_ADDR
// if not tmp then
17785: LD_VAR 0 2
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 17823
// for i in tmp do
17794: LD_ADDR_VAR 0 1
17798: PUSH
17799: LD_VAR 0 2
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17821
// begin SetLives ( i , 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_INT 0
17814: PPUSH
17815: CALL_OW 234
// end ;
17819: GO 17804
17821: POP
17822: POP
// end ;
17823: PPOPN 2
17825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17826: LD_EXP 47
17830: PUSH
17831: LD_EXP 57
17835: AND
17836: IFFALSE 17856
17838: GO 17840
17840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17841: LD_INT 32
17843: PPUSH
17844: LD_OWVAR 2
17848: PPUSH
17849: LD_INT 0
17851: PPUSH
17852: CALL_OW 324
17856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17857: LD_EXP 47
17861: PUSH
17862: LD_EXP 58
17866: AND
17867: IFFALSE 18048
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 33
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 2
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 18048
// side := 0 ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 0
17929: ST_TO_ADDR
// for i := 1 to 8 do
17930: LD_ADDR_VAR 0 1
17934: PUSH
17935: DOUBLE
17936: LD_INT 1
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 8
17942: PUSH
17943: FOR_TO
17944: IFFALSE 17992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17946: LD_OWVAR 2
17950: PUSH
17951: LD_VAR 0 1
17955: NONEQUAL
17956: PUSH
17957: LD_OWVAR 2
17961: PPUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 81
17971: PUSH
17972: LD_INT 2
17974: EQUAL
17975: AND
17976: IFFALSE 17990
// begin side := i ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: ST_TO_ADDR
// break ;
17988: GO 17992
// end ;
17990: GO 17943
17992: POP
17993: POP
// if not side then
17994: LD_VAR 0 3
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18048
// for i := 1 to tmp do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: DOUBLE
18009: LD_INT 1
18011: DEC
18012: ST_TO_ADDR
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18046
// if Prob ( 60 ) then
18021: LD_INT 60
18023: PPUSH
18024: CALL_OW 13
18028: IFFALSE 18044
// SetSide ( i , side ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_VAR 0 3
18039: PPUSH
18040: CALL_OW 235
18044: GO 18018
18046: POP
18047: POP
// end ;
18048: PPOPN 3
18050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18051: LD_EXP 47
18055: PUSH
18056: LD_EXP 60
18060: AND
18061: IFFALSE 18180
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18069: LD_ADDR_VAR 0 1
18073: PUSH
18074: LD_INT 22
18076: PUSH
18077: LD_OWVAR 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 23
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PUSH
18123: FOR_IN
18124: IFFALSE 18178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 257
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: LD_INT 4
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: IN
18154: IFFALSE 18176
// SetClass ( un , rand ( 1 , 4 ) ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 12
18171: PPUSH
18172: CALL_OW 336
18176: GO 18123
18178: POP
18179: POP
// end ;
18180: PPOPN 1
18182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18183: LD_EXP 47
18187: PUSH
18188: LD_EXP 59
18192: AND
18193: IFFALSE 18272
18195: GO 18197
18197: DISABLE
18198: LD_INT 0
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 21
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 1
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: PPUSH
18265: LD_INT 100
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18275: LD_EXP 47
18279: PUSH
18280: LD_EXP 61
18284: AND
18285: IFFALSE 18383
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18293: LD_ADDR_VAR 0 1
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_OWVAR 2
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 21
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 69
18328: ST_TO_ADDR
// if not tmp then
18329: LD_VAR 0 1
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 1
18345: PPUSH
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_INT 4
18362: PPUSH
18363: CALL_OW 12
18367: PPUSH
18368: LD_INT 3000
18370: PPUSH
18371: LD_INT 9000
18373: PPUSH
18374: CALL_OW 12
18378: PPUSH
18379: CALL_OW 492
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18386: LD_EXP 47
18390: PUSH
18391: LD_EXP 62
18395: AND
18396: IFFALSE 18416
18398: GO 18400
18400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18401: LD_INT 1
18403: PPUSH
18404: LD_OWVAR 2
18408: PPUSH
18409: LD_INT 0
18411: PPUSH
18412: CALL_OW 324
18416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18417: LD_EXP 47
18421: PUSH
18422: LD_EXP 63
18426: AND
18427: IFFALSE 18510
18429: GO 18431
18431: DISABLE
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 2
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18510
// for i in tmp do
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18508
// SetBLevel ( i , 10 ) ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_INT 10
18501: PPUSH
18502: CALL_OW 241
18506: GO 18491
18508: POP
18509: POP
// end ;
18510: PPOPN 2
18512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18513: LD_EXP 47
18517: PUSH
18518: LD_EXP 64
18522: AND
18523: IFFALSE 18634
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 25
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 3
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18634
// un := tmp [ rand ( 1 , tmp ) ] ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: CALL_OW 12
18600: ARRAY
18601: ST_TO_ADDR
// if Crawls ( un ) then
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 318
18611: IFFALSE 18622
// ComWalk ( un ) ;
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_INT 5
18629: PPUSH
18630: CALL_OW 336
// end ;
18634: PPOPN 3
18636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18637: LD_EXP 47
18641: PUSH
18642: LD_EXP 65
18646: AND
18647: PUSH
18648: LD_OWVAR 67
18652: PUSH
18653: LD_INT 4
18655: LESS
18656: AND
18657: IFFALSE 18676
18659: GO 18661
18661: DISABLE
// begin Difficulty := Difficulty + 1 ;
18662: LD_ADDR_OWVAR 67
18666: PUSH
18667: LD_OWVAR 67
18671: PUSH
18672: LD_INT 1
18674: PLUS
18675: ST_TO_ADDR
// end ;
18676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18677: LD_EXP 47
18681: PUSH
18682: LD_EXP 66
18686: AND
18687: IFFALSE 18790
18689: GO 18691
18691: DISABLE
18692: LD_INT 0
18694: PPUSH
// begin for i := 1 to 5 do
18695: LD_ADDR_VAR 0 1
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_INT 5
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18788
// begin uc_nation := nation_nature ;
18711: LD_ADDR_OWVAR 21
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// uc_side := 0 ;
18719: LD_ADDR_OWVAR 20
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18727: LD_ADDR_OWVAR 29
18731: PUSH
18732: LD_INT 12
18734: PUSH
18735: LD_INT 12
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// hc_agressivity := 20 ;
18742: LD_ADDR_OWVAR 35
18746: PUSH
18747: LD_INT 20
18749: ST_TO_ADDR
// hc_class := class_tiger ;
18750: LD_ADDR_OWVAR 28
18754: PUSH
18755: LD_INT 14
18757: ST_TO_ADDR
// hc_gallery :=  ;
18758: LD_ADDR_OWVAR 33
18762: PUSH
18763: LD_STRING 
18765: ST_TO_ADDR
// hc_name :=  ;
18766: LD_ADDR_OWVAR 26
18770: PUSH
18771: LD_STRING 
18773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18774: CALL_OW 44
18778: PPUSH
18779: LD_INT 0
18781: PPUSH
18782: CALL_OW 51
// end ;
18786: GO 18708
18788: POP
18789: POP
// end ;
18790: PPOPN 1
18792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18793: LD_EXP 47
18797: PUSH
18798: LD_EXP 67
18802: AND
18803: IFFALSE 18812
18805: GO 18807
18807: DISABLE
// StreamSibBomb ;
18808: CALL 18813 0 0
18812: END
// export function StreamSibBomb ; var i , x , y ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
// result := false ;
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// for i := 1 to 16 do
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: DOUBLE
18833: LD_INT 1
18835: DEC
18836: ST_TO_ADDR
18837: LD_INT 16
18839: PUSH
18840: FOR_TO
18841: IFFALSE 19040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 10
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 40
18859: PUSH
18860: LD_INT 50
18862: PUSH
18863: LD_INT 60
18865: PUSH
18866: LD_INT 70
18868: PUSH
18869: LD_INT 80
18871: PUSH
18872: LD_INT 90
18874: PUSH
18875: LD_INT 100
18877: PUSH
18878: LD_INT 110
18880: PUSH
18881: LD_INT 120
18883: PUSH
18884: LD_INT 130
18886: PUSH
18887: LD_INT 140
18889: PUSH
18890: LD_INT 150
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_INT 15
18915: PPUSH
18916: CALL_OW 12
18920: ARRAY
18921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18922: LD_ADDR_VAR 0 4
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 20
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 40
18938: PUSH
18939: LD_INT 50
18941: PUSH
18942: LD_INT 60
18944: PUSH
18945: LD_INT 70
18947: PUSH
18948: LD_INT 80
18950: PUSH
18951: LD_INT 90
18953: PUSH
18954: LD_INT 100
18956: PUSH
18957: LD_INT 110
18959: PUSH
18960: LD_INT 120
18962: PUSH
18963: LD_INT 130
18965: PUSH
18966: LD_INT 140
18968: PUSH
18969: LD_INT 150
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 15
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: ST_TO_ADDR
// if ValidHex ( x , y ) then
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 488
19015: IFFALSE 19038
// begin result := [ x , y ] ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 3
19026: PUSH
19027: LD_VAR 0 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// break ;
19036: GO 19040
// end ; end ;
19038: GO 18840
19040: POP
19041: POP
// if result then
19042: LD_VAR 0 1
19046: IFFALSE 19106
// begin ToLua ( playSibBomb() ) ;
19048: LD_STRING playSibBomb()
19050: PPUSH
19051: CALL_OW 559
// wait ( 0 0$14 ) ;
19055: LD_INT 490
19057: PPUSH
19058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 2
19078: ARRAY
19079: PPUSH
19080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: ARRAY
19092: PPUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PPUSH
19102: CALL_OW 429
// end ; end ;
19106: LD_VAR 0 1
19110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19111: LD_EXP 47
19115: PUSH
19116: LD_EXP 69
19120: AND
19121: IFFALSE 19133
19123: GO 19125
19125: DISABLE
// YouLost (  ) ;
19126: LD_STRING 
19128: PPUSH
19129: CALL_OW 104
19133: END
// every 0 0$1 trigger StreamModeActive and sFog do
19134: LD_EXP 47
19138: PUSH
19139: LD_EXP 68
19143: AND
19144: IFFALSE 19158
19146: GO 19148
19148: DISABLE
// FogOff ( your_side ) ;
19149: LD_OWVAR 2
19153: PPUSH
19154: CALL_OW 344
19158: END
// every 0 0$1 trigger StreamModeActive and sSun do
19159: LD_EXP 47
19163: PUSH
19164: LD_EXP 70
19168: AND
19169: IFFALSE 19197
19171: GO 19173
19173: DISABLE
// begin solar_recharge_percent := 0 ;
19174: LD_ADDR_OWVAR 79
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19182: LD_INT 10500
19184: PPUSH
19185: CALL_OW 67
// solar_recharge_percent := 100 ;
19189: LD_ADDR_OWVAR 79
19193: PUSH
19194: LD_INT 100
19196: ST_TO_ADDR
// end ;
19197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19198: LD_EXP 47
19202: PUSH
19203: LD_EXP 71
19207: AND
19208: IFFALSE 19447
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin tmp := [ ] ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: EMPTY
19224: ST_TO_ADDR
// for i := 1 to 6 do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 6
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19344
// begin uc_nation := nation_nature ;
19241: LD_ADDR_OWVAR 21
19245: PUSH
19246: LD_INT 0
19248: ST_TO_ADDR
// uc_side := 0 ;
19249: LD_ADDR_OWVAR 20
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19257: LD_ADDR_OWVAR 29
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: ST_TO_ADDR
// hc_agressivity := 20 ;
19272: LD_ADDR_OWVAR 35
19276: PUSH
19277: LD_INT 20
19279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19280: LD_ADDR_OWVAR 28
19284: PUSH
19285: LD_INT 17
19287: ST_TO_ADDR
// hc_gallery :=  ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING 
19295: ST_TO_ADDR
// hc_name :=  ;
19296: LD_ADDR_OWVAR 26
19300: PUSH
19301: LD_STRING 
19303: ST_TO_ADDR
// un := CreateHuman ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: CALL_OW 44
19313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 51
// tmp := tmp ^ un ;
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ADD
19341: ST_TO_ADDR
// end ;
19342: GO 19238
19344: POP
19345: POP
// repeat wait ( 0 0$1 ) ;
19346: LD_INT 35
19348: PPUSH
19349: CALL_OW 67
// for un in tmp do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19438
// begin if IsDead ( un ) then
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 301
19375: IFFALSE 19395
// begin tmp := tmp diff un ;
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 2
19391: DIFF
19392: ST_TO_ADDR
// continue ;
19393: GO 19363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 3
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 74
19431: PPUSH
19432: CALL_OW 115
// end ;
19436: GO 19363
19438: POP
19439: POP
// until not tmp ;
19440: LD_VAR 0 3
19444: NOT
19445: IFFALSE 19346
// end ;
19447: PPOPN 3
19449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19450: LD_EXP 47
19454: PUSH
19455: LD_EXP 72
19459: AND
19460: IFFALSE 19514
19462: GO 19464
19464: DISABLE
// begin ToLua ( displayTroll(); ) ;
19465: LD_STRING displayTroll();
19467: PPUSH
19468: CALL_OW 559
// wait ( 3 3$00 ) ;
19472: LD_INT 6300
19474: PPUSH
19475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19479: LD_STRING hideTroll();
19481: PPUSH
19482: CALL_OW 559
// wait ( 1 1$00 ) ;
19486: LD_INT 2100
19488: PPUSH
19489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19493: LD_STRING displayTroll();
19495: PPUSH
19496: CALL_OW 559
// wait ( 1 1$00 ) ;
19500: LD_INT 2100
19502: PPUSH
19503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19507: LD_STRING hideTroll();
19509: PPUSH
19510: CALL_OW 559
// end ;
19514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19515: LD_EXP 47
19519: PUSH
19520: LD_EXP 73
19524: AND
19525: IFFALSE 19588
19527: GO 19529
19529: DISABLE
19530: LD_INT 0
19532: PPUSH
// begin p := 0 ;
19533: LD_ADDR_VAR 0 1
19537: PUSH
19538: LD_INT 0
19540: ST_TO_ADDR
// repeat game_speed := 1 ;
19541: LD_ADDR_OWVAR 65
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19549: LD_INT 35
19551: PPUSH
19552: CALL_OW 67
// p := p + 1 ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 1
19568: PLUS
19569: ST_TO_ADDR
// until p >= 60 ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 60
19577: GREATEREQUAL
19578: IFFALSE 19541
// game_speed := 4 ;
19580: LD_ADDR_OWVAR 65
19584: PUSH
19585: LD_INT 4
19587: ST_TO_ADDR
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19591: LD_EXP 47
19595: PUSH
19596: LD_EXP 74
19600: AND
19601: IFFALSE 19747
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 30
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not depot then
19664: LD_VAR 0 1
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 12
19695: ARRAY
19696: PPUSH
19697: CALL_OW 274
19701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_INT 0
19712: PPUSH
19713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 2
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 3
19739: PPUSH
19740: LD_INT 0
19742: PPUSH
19743: CALL_OW 277
// end ;
19747: PPOPN 2
19749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19750: LD_EXP 47
19754: PUSH
19755: LD_EXP 75
19759: AND
19760: IFFALSE 19857
19762: GO 19764
19764: DISABLE
19765: LD_INT 0
19767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_OWVAR 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19831: LD_VAR 0 1
19835: PUSH
19836: LD_INT 1
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 12
19848: ARRAY
19849: PPUSH
19850: LD_INT 200
19852: PPUSH
19853: CALL_OW 234
// end ;
19857: PPOPN 1
19859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19860: LD_EXP 47
19864: PUSH
19865: LD_EXP 76
19869: AND
19870: IFFALSE 19949
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19878: LD_ADDR_VAR 0 1
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_OWVAR 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 21
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 69
19913: ST_TO_ADDR
// if not tmp then
19914: LD_VAR 0 1
19918: NOT
19919: IFFALSE 19923
// exit ;
19921: GO 19949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 1
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 12
19940: ARRAY
19941: PPUSH
19942: LD_INT 60
19944: PPUSH
19945: CALL_OW 234
// end ;
19949: PPOPN 1
19951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19952: LD_EXP 47
19956: PUSH
19957: LD_EXP 77
19961: AND
19962: IFFALSE 20061
19964: GO 19966
19966: DISABLE
19967: LD_INT 0
19969: PPUSH
19970: PPUSH
// begin enable ;
19971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_OWVAR 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 61
19991: PUSH
19992: EMPTY
19993: LIST
19994: PUSH
19995: LD_INT 33
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 1
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20061
// for i in tmp do
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20059
// if IsControledBy ( i ) then
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 312
20046: IFFALSE 20057
// ComUnlink ( i ) ;
20048: LD_VAR 0 2
20052: PPUSH
20053: CALL_OW 136
20057: GO 20034
20059: POP
20060: POP
// end ;
20061: PPOPN 2
20063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20064: LD_EXP 47
20068: PUSH
20069: LD_EXP 78
20073: AND
20074: IFFALSE 20214
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
// begin ToLua ( displayPowell(); ) ;
20083: LD_STRING displayPowell();
20085: PPUSH
20086: CALL_OW 559
// uc_side := 0 ;
20090: LD_ADDR_OWVAR 20
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// uc_nation := 2 ;
20098: LD_ADDR_OWVAR 21
20102: PUSH
20103: LD_INT 2
20105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20106: LD_ADDR_OWVAR 37
20110: PUSH
20111: LD_INT 14
20113: ST_TO_ADDR
// vc_engine := engine_siberite ;
20114: LD_ADDR_OWVAR 39
20118: PUSH
20119: LD_INT 3
20121: ST_TO_ADDR
// vc_control := control_apeman ;
20122: LD_ADDR_OWVAR 38
20126: PUSH
20127: LD_INT 5
20129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20130: LD_ADDR_OWVAR 40
20134: PUSH
20135: LD_INT 29
20137: ST_TO_ADDR
// un := CreateVehicle ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: CALL_OW 45
20147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 74
20198: PPUSH
20199: CALL_OW 115
// until IsDead ( un ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 301
20212: IFFALSE 20160
// end ;
20214: PPOPN 2
20216: END
// every 0 0$1 trigger StreamModeActive and sStu do
20217: LD_EXP 47
20221: PUSH
20222: LD_EXP 86
20226: AND
20227: IFFALSE 20243
20229: GO 20231
20231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ;
20243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20244: LD_EXP 47
20248: PUSH
20249: LD_EXP 79
20253: AND
20254: IFFALSE 20395
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_OWVAR 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PPUSH
20294: CALL_OW 69
20298: ST_TO_ADDR
// if not tmp then
20299: LD_VAR 0 2
20303: NOT
20304: IFFALSE 20308
// exit ;
20306: GO 20395
// un := tmp [ rand ( 1 , tmp ) ] ;
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 12
20330: ARRAY
20331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_OWVAR 3
20353: PUSH
20354: LD_VAR 0 1
20358: DIFF
20359: PPUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 74
20369: PPUSH
20370: CALL_OW 115
// wait ( 0 0$20 ) ;
20374: LD_INT 700
20376: PPUSH
20377: CALL_OW 67
// SetSide ( un , your_side ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: CALL_OW 235
// end ;
20395: PPOPN 2
20397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20398: LD_EXP 47
20402: PUSH
20403: LD_EXP 80
20407: AND
20408: IFFALSE 20514
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_OWVAR 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 30
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: ST_TO_ADDR
// if not depot then
20470: LD_VAR 0 1
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20479: LD_VAR 0 1
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 250
20492: PPUSH
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL_OW 251
20506: PPUSH
20507: LD_INT 70
20509: PPUSH
20510: CALL_OW 495
// end ;
20514: PPOPN 1
20516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20517: LD_EXP 47
20521: PUSH
20522: LD_EXP 81
20526: AND
20527: IFFALSE 20738
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_OWVAR 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PPUSH
20570: CALL_OW 69
20574: ST_TO_ADDR
// if not tmp then
20575: LD_VAR 0 5
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 20738
// for i in tmp do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20736
// begin d := rand ( 0 , 5 ) ;
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: LD_INT 0
20604: PPUSH
20605: LD_INT 5
20607: PPUSH
20608: CALL_OW 12
20612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20613: LD_ADDR_VAR 0 2
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 250
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_INT 3
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 12
20643: PPUSH
20644: CALL_OW 272
20648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 251
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_INT 3
20671: PPUSH
20672: LD_INT 12
20674: PPUSH
20675: CALL_OW 12
20679: PPUSH
20680: CALL_OW 273
20684: ST_TO_ADDR
// if ValidHex ( x , y ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: LD_VAR 0 3
20694: PPUSH
20695: CALL_OW 488
20699: IFFALSE 20734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 2
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: LD_INT 6
20721: PPUSH
20722: CALL_OW 12
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 483
// end ;
20734: GO 20594
20736: POP
20737: POP
// end ;
20738: PPOPN 5
20740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20741: LD_EXP 47
20745: PUSH
20746: LD_EXP 82
20750: AND
20751: IFFALSE 20845
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 32
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: ST_TO_ADDR
// if not tmp then
20807: LD_VAR 0 2
20811: NOT
20812: IFFALSE 20816
// exit ;
20814: GO 20845
// for i in tmp do
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: LD_VAR 0 2
20825: PUSH
20826: FOR_IN
20827: IFFALSE 20843
// SetFuel ( i , 0 ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_INT 0
20836: PPUSH
20837: CALL_OW 240
20841: GO 20826
20843: POP
20844: POP
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20848: LD_EXP 47
20852: PUSH
20853: LD_EXP 83
20857: AND
20858: IFFALSE 20924
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 29
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 1
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 20924
// DestroyUnit ( tmp [ 1 ] ) ;
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 65
// end ;
20924: PPOPN 1
20926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20927: LD_EXP 47
20931: PUSH
20932: LD_EXP 85
20936: AND
20937: IFFALSE 21066
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin uc_side := 0 ;
20945: LD_ADDR_OWVAR 20
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// uc_nation := nation_arabian ;
20953: LD_ADDR_OWVAR 21
20957: PUSH
20958: LD_INT 2
20960: ST_TO_ADDR
// hc_gallery :=  ;
20961: LD_ADDR_OWVAR 33
20965: PUSH
20966: LD_STRING 
20968: ST_TO_ADDR
// hc_name :=  ;
20969: LD_ADDR_OWVAR 26
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20977: LD_INT 1
20979: PPUSH
20980: LD_INT 11
20982: PPUSH
20983: LD_INT 10
20985: PPUSH
20986: CALL_OW 380
// un := CreateHuman ;
20990: LD_ADDR_VAR 0 1
20994: PUSH
20995: CALL_OW 44
20999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21012: LD_INT 35
21014: PPUSH
21015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until IsDead ( un ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 301
21064: IFFALSE 21012
// end ;
21066: PPOPN 1
21068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21069: LD_EXP 47
21073: PUSH
21074: LD_EXP 87
21078: AND
21079: IFFALSE 21091
21081: GO 21083
21083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21084: LD_STRING earthquake(getX(game), 0, 32)
21086: PPUSH
21087: CALL_OW 559
21091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21092: LD_EXP 47
21096: PUSH
21097: LD_EXP 88
21101: AND
21102: IFFALSE 21193
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
// begin enable ;
21110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21111: LD_ADDR_VAR 0 1
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 33
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 1
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 1
21174: PPUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: CALL_OW 12
21184: ARRAY
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 234
// end ;
21193: PPOPN 1
21195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 89
21205: AND
21206: IFFALSE 21347
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_OWVAR 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 3
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21347
// un := tmp [ rand ( 1 , tmp ) ] ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 3
21270: PUSH
21271: LD_INT 1
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: CALL_OW 12
21283: ARRAY
21284: ST_TO_ADDR
// if Crawls ( un ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 318
21294: IFFALSE 21305
// ComWalk ( un ) ;
21296: LD_VAR 0 2
21300: PPUSH
21301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21305: LD_VAR 0 2
21309: PPUSH
21310: LD_INT 9
21312: PPUSH
21313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21317: LD_INT 28
21319: PPUSH
21320: LD_OWVAR 2
21324: PPUSH
21325: LD_INT 2
21327: PPUSH
21328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21332: LD_INT 29
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 322
// end ;
21347: PPOPN 3
21349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21350: LD_EXP 47
21354: PUSH
21355: LD_EXP 90
21359: AND
21360: IFFALSE 21471
21362: GO 21364
21364: DISABLE
21365: LD_INT 0
21367: PPUSH
21368: PPUSH
21369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 69
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 21471
// un := tmp [ rand ( 1 , tmp ) ] ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 1
21427: PPUSH
21428: LD_VAR 0 3
21432: PPUSH
21433: CALL_OW 12
21437: ARRAY
21438: ST_TO_ADDR
// if Crawls ( un ) then
21439: LD_VAR 0 2
21443: PPUSH
21444: CALL_OW 318
21448: IFFALSE 21459
// ComWalk ( un ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_INT 8
21466: PPUSH
21467: CALL_OW 336
// end ;
21471: PPOPN 3
21473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21474: LD_EXP 47
21478: PUSH
21479: LD_EXP 91
21483: AND
21484: IFFALSE 21628
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_OWVAR 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 12
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 34
21535: PUSH
21536: LD_INT 51
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 34
21545: PUSH
21546: LD_INT 32
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21628
// for i in tmp do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21626
// if GetCargo ( i , mat_artifact ) = 0 then
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_INT 4
21598: PPUSH
21599: CALL_OW 289
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: IFFALSE 21624
// SetCargo ( i , mat_siberit , 100 ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 3
21616: PPUSH
21617: LD_INT 100
21619: PPUSH
21620: CALL_OW 290
21624: GO 21588
21626: POP
21627: POP
// end ;
21628: PPOPN 2
21630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21631: LD_EXP 47
21635: PUSH
21636: LD_EXP 92
21640: AND
21641: IFFALSE 21824
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_OWVAR 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not tmp then
21672: LD_VAR 0 2
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21824
// for i := 1 to 2 do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: DOUBLE
21687: LD_INT 1
21689: DEC
21690: ST_TO_ADDR
21691: LD_INT 2
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21822
// begin uc_side := your_side ;
21697: LD_ADDR_OWVAR 20
21701: PUSH
21702: LD_OWVAR 2
21706: ST_TO_ADDR
// uc_nation := nation_american ;
21707: LD_ADDR_OWVAR 21
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// vc_chassis := us_morphling ;
21715: LD_ADDR_OWVAR 37
21719: PUSH
21720: LD_INT 5
21722: ST_TO_ADDR
// vc_engine := engine_siberite ;
21723: LD_ADDR_OWVAR 39
21727: PUSH
21728: LD_INT 3
21730: ST_TO_ADDR
// vc_control := control_computer ;
21731: LD_ADDR_OWVAR 38
21735: PUSH
21736: LD_INT 3
21738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21739: LD_ADDR_OWVAR 40
21743: PUSH
21744: LD_INT 10
21746: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21747: LD_VAR 0 2
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: CALL_OW 310
21760: NOT
21761: IFFALSE 21808
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21763: CALL_OW 45
21767: PPUSH
21768: LD_VAR 0 2
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PPUSH
21777: CALL_OW 250
21781: PPUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: CALL_OW 251
21795: PPUSH
21796: LD_INT 12
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 50
21806: GO 21820
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21808: CALL_OW 45
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 51
// end ;
21820: GO 21694
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21827: LD_EXP 47
21831: PUSH
21832: LD_EXP 93
21836: AND
21837: IFFALSE 22059
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21850: LD_ADDR_VAR 0 6
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// if not tmp then
21904: LD_VAR 0 6
21908: NOT
21909: IFFALSE 21913
// exit ;
21911: GO 22059
// s1 := rand ( 1 , 4 ) ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_INT 4
21923: PPUSH
21924: CALL_OW 12
21928: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 6
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 259
21952: ST_TO_ADDR
// if s1 = 1 then
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: EQUAL
21961: IFFALSE 21981
// s2 := rand ( 2 , 4 ) else
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_INT 2
21970: PPUSH
21971: LD_INT 4
21973: PPUSH
21974: CALL_OW 12
21978: ST_TO_ADDR
21979: GO 21989
// s2 := 1 ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21989: LD_ADDR_VAR 0 5
21993: PUSH
21994: LD_VAR 0 6
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 259
22012: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22013: LD_VAR 0 6
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22036: LD_VAR 0 6
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: CALL_OW 237
// end ;
22059: PPOPN 6
22061: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22062: LD_EXP 47
22066: PUSH
22067: LD_EXP 94
22071: AND
22072: IFFALSE 22151
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22080: LD_ADDR_VAR 0 1
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_OWVAR 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 1
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 1
22132: PPUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 12
22142: ARRAY
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 234
// end ;
22151: PPOPN 1
22153: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22154: LD_EXP 47
22158: PUSH
22159: LD_EXP 95
22163: AND
22164: IFFALSE 22276
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_OWVAR 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 27
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 26
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 28
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PPUSH
22233: CALL_OW 69
22237: ST_TO_ADDR
// if not tmp then
22238: LD_VAR 0 2
22242: NOT
22243: IFFALSE 22247
// exit ;
22245: GO 22276
// for i in tmp do
22247: LD_ADDR_VAR 0 1
22251: PUSH
22252: LD_VAR 0 2
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22274
// SetLives ( i , 1 ) ;
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 234
22272: GO 22257
22274: POP
22275: POP
// end ;
22276: PPOPN 2
22278: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22279: LD_EXP 47
22283: PUSH
22284: LD_EXP 96
22288: AND
22289: IFFALSE 22576
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
22298: PPUSH
// begin i := rand ( 1 , 7 ) ;
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_INT 7
22309: PPUSH
22310: CALL_OW 12
22314: ST_TO_ADDR
// case i of 1 :
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22338
22328: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22329: LD_STRING earthquake(getX(game), 0, 32)
22331: PPUSH
22332: CALL_OW 559
22336: GO 22576
22338: LD_INT 2
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22360
22346: POP
// begin ToLua ( displayStucuk(); ) ;
22347: LD_STRING displayStucuk();
22349: PPUSH
22350: CALL_OW 559
// ResetFog ;
22354: CALL_OW 335
// end ; 3 :
22358: GO 22576
22360: LD_INT 3
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22368
22366: GO 22472
22368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_OWVAR 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 2
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22576
// un := tmp [ rand ( 1 , tmp ) ] ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_VAR 0 2
22423: PUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 12
22436: ARRAY
22437: ST_TO_ADDR
// if Crawls ( un ) then
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 318
22447: IFFALSE 22458
// ComWalk ( un ) ;
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22458: LD_VAR 0 3
22462: PPUSH
22463: LD_INT 8
22465: PPUSH
22466: CALL_OW 336
// end ; 4 :
22470: GO 22576
22472: LD_INT 4
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22554
22480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_OWVAR 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: LD_INT 29
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: ST_TO_ADDR
// if not tmp then
22517: LD_VAR 0 2
22521: NOT
22522: IFFALSE 22526
// exit ;
22524: GO 22576
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22526: LD_VAR 0 2
22530: PUSH
22531: LD_INT 1
22533: ARRAY
22534: PPUSH
22535: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: CALL_OW 65
// end ; 5 .. 7 :
22552: GO 22576
22554: LD_INT 5
22556: DOUBLE
22557: GREATEREQUAL
22558: IFFALSE 22566
22560: LD_INT 7
22562: DOUBLE
22563: LESSEQUAL
22564: IFTRUE 22568
22566: GO 22575
22568: POP
// StreamSibBomb ; end ;
22569: CALL 18813 0 0
22573: GO 22576
22575: POP
// end ;
22576: PPOPN 3
22578: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22579: LD_EXP 47
22583: PUSH
22584: LD_EXP 97
22588: AND
22589: IFFALSE 22745
22591: GO 22593
22593: DISABLE
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 81
22606: PUSH
22607: LD_OWVAR 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 2
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22745
// p := 0 ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_INT 0
22669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// p := p + 1 ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: ST_TO_ADDR
// for i in tmp do
22691: LD_ADDR_VAR 0 1
22695: PUSH
22696: LD_VAR 0 2
22700: PUSH
22701: FOR_IN
22702: IFFALSE 22733
// if GetLives ( i ) < 1000 then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 256
22713: PUSH
22714: LD_INT 1000
22716: LESS
22717: IFFALSE 22731
// SetLives ( i , 1000 ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 1000
22726: PPUSH
22727: CALL_OW 234
22731: GO 22701
22733: POP
22734: POP
// until p > 20 ;
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 20
22742: GREATER
22743: IFFALSE 22670
// end ;
22745: PPOPN 3
22747: END
// every 0 0$1 trigger StreamModeActive and sTime do
22748: LD_EXP 47
22752: PUSH
22753: LD_EXP 98
22757: AND
22758: IFFALSE 22793
22760: GO 22762
22762: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22763: LD_INT 28
22765: PPUSH
22766: LD_OWVAR 2
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22778: LD_INT 30
22780: PPUSH
22781: LD_OWVAR 2
22785: PPUSH
22786: LD_INT 2
22788: PPUSH
22789: CALL_OW 322
// end ;
22793: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22794: LD_EXP 47
22798: PUSH
22799: LD_EXP 99
22803: AND
22804: IFFALSE 22925
22806: GO 22808
22808: DISABLE
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_OWVAR 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 21
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 23
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: ST_TO_ADDR
// if not tmp then
22867: LD_VAR 0 2
22871: NOT
22872: IFFALSE 22876
// exit ;
22874: GO 22925
// for i in tmp do
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_VAR 0 2
22885: PUSH
22886: FOR_IN
22887: IFFALSE 22923
// begin if Crawls ( i ) then
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 318
22898: IFFALSE 22909
// ComWalk ( i ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 138
// SetClass ( i , 2 ) ;
22909: LD_VAR 0 1
22913: PPUSH
22914: LD_INT 2
22916: PPUSH
22917: CALL_OW 336
// end ;
22921: GO 22886
22923: POP
22924: POP
// end ;
22925: PPOPN 2
22927: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22928: LD_EXP 47
22932: PUSH
22933: LD_EXP 100
22937: AND
22938: IFFALSE 23226
22940: GO 22942
22942: DISABLE
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22948: LD_OWVAR 2
22952: PPUSH
22953: LD_INT 9
22955: PPUSH
22956: LD_INT 1
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22966: LD_INT 9
22968: PPUSH
22969: LD_OWVAR 2
22973: PPUSH
22974: CALL_OW 343
// uc_side := 9 ;
22978: LD_ADDR_OWVAR 20
22982: PUSH
22983: LD_INT 9
22985: ST_TO_ADDR
// uc_nation := 2 ;
22986: LD_ADDR_OWVAR 21
22990: PUSH
22991: LD_INT 2
22993: ST_TO_ADDR
// hc_name := Dark Warrior ;
22994: LD_ADDR_OWVAR 26
22998: PUSH
22999: LD_STRING Dark Warrior
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_noskilllimit := true ;
23010: LD_ADDR_OWVAR 76
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23018: LD_ADDR_OWVAR 31
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// un := CreateHuman ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: CALL_OW 44
23050: ST_TO_ADDR
// hc_noskilllimit := false ;
23051: LD_ADDR_OWVAR 76
23055: PUSH
23056: LD_INT 0
23058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 51
// ToLua ( playRanger() ) ;
23071: LD_STRING playRanger()
23073: PPUSH
23074: CALL_OW 559
// p := 0 ;
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23086: LD_INT 35
23088: PPUSH
23089: CALL_OW 67
// p := p + 1 ;
23093: LD_ADDR_VAR 0 2
23097: PUSH
23098: LD_VAR 0 2
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23107: LD_VAR 0 3
23111: PPUSH
23112: CALL_OW 256
23116: PUSH
23117: LD_INT 1000
23119: LESS
23120: IFFALSE 23134
// SetLives ( un , 1000 ) ;
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 1000
23129: PPUSH
23130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 81
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 91
23153: PUSH
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 74
23185: PPUSH
23186: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23190: LD_VAR 0 2
23194: PUSH
23195: LD_INT 80
23197: GREATER
23198: PUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: CALL_OW 301
23208: OR
23209: IFFALSE 23086
// if un then
23211: LD_VAR 0 3
23215: IFFALSE 23226
// RemoveUnit ( un ) ;
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 64
// end ;
23226: PPOPN 3
23228: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23229: LD_EXP 101
23233: IFFALSE 23349
23235: GO 23237
23237: DISABLE
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 81
23250: PUSH
23251: LD_OWVAR 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PPUSH
23274: CALL_OW 69
23278: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23279: LD_STRING playComputer()
23281: PPUSH
23282: CALL_OW 559
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23349
// for i in tmp do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23347
// for j := 1 to 4 do
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: DOUBLE
23314: LD_INT 1
23316: DEC
23317: ST_TO_ADDR
23318: LD_INT 4
23320: PUSH
23321: FOR_TO
23322: IFFALSE 23343
// SetSkill ( i , j , 10 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 237
23341: GO 23321
23343: POP
23344: POP
23345: GO 23305
23347: POP
23348: POP
// end ;
23349: PPOPN 3
23351: END
// every 0 0$1 trigger s30 do var i , tmp ;
23352: LD_EXP 102
23356: IFFALSE 23425
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PPUSH
23382: CALL_OW 69
23386: ST_TO_ADDR
// if not tmp then
23387: LD_VAR 0 2
23391: NOT
23392: IFFALSE 23396
// exit ;
23394: GO 23425
// for i in tmp do
23396: LD_ADDR_VAR 0 1
23400: PUSH
23401: LD_VAR 0 2
23405: PUSH
23406: FOR_IN
23407: IFFALSE 23423
// SetLives ( i , 300 ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: LD_INT 300
23416: PPUSH
23417: CALL_OW 234
23421: GO 23406
23423: POP
23424: POP
// end ;
23425: PPOPN 2
23427: END
// every 0 0$1 trigger s60 do var i , tmp ;
23428: LD_EXP 103
23432: IFFALSE 23501
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23441: LD_ADDR_VAR 0 2
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_OWVAR 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 69
23462: ST_TO_ADDR
// if not tmp then
23463: LD_VAR 0 2
23467: NOT
23468: IFFALSE 23472
// exit ;
23470: GO 23501
// for i in tmp do
23472: LD_ADDR_VAR 0 1
23476: PUSH
23477: LD_VAR 0 2
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// SetLives ( i , 600 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 600
23492: PPUSH
23493: CALL_OW 234
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 2
23503: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23504: LD_INT 0
23506: PPUSH
// case cmd of 301 :
23507: LD_VAR 0 1
23511: PUSH
23512: LD_INT 301
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23552
23520: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: LD_VAR 0 8
23535: PPUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: CALL 24753 0 5
23550: GO 23673
23552: LD_INT 302
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23597
23560: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: LD_VAR 0 8
23575: PPUSH
23576: LD_VAR 0 9
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: LD_VAR 0 5
23590: PPUSH
23591: CALL 24844 0 6
23595: GO 23673
23597: LD_INT 303
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23642
23605: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23606: LD_VAR 0 6
23610: PPUSH
23611: LD_VAR 0 7
23615: PPUSH
23616: LD_VAR 0 8
23620: PPUSH
23621: LD_VAR 0 9
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_VAR 0 5
23635: PPUSH
23636: CALL 23678 0 6
23640: GO 23673
23642: LD_INT 304
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23672
23650: POP
// hHackTeleport ( unit , x , y ) ; end ;
23651: LD_VAR 0 2
23655: PPUSH
23656: LD_VAR 0 4
23660: PPUSH
23661: LD_VAR 0 5
23665: PPUSH
23666: CALL 25437 0 3
23670: GO 23673
23672: POP
// end ;
23673: LD_VAR 0 12
23677: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23682: LD_VAR 0 1
23686: PUSH
23687: LD_INT 1
23689: LESS
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 3
23698: GREATER
23699: OR
23700: PUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: CALL_OW 428
23715: OR
23716: IFFALSE 23720
// exit ;
23718: GO 24440
// uc_side := your_side ;
23720: LD_ADDR_OWVAR 20
23724: PUSH
23725: LD_OWVAR 2
23729: ST_TO_ADDR
// uc_nation := nation ;
23730: LD_ADDR_OWVAR 21
23734: PUSH
23735: LD_VAR 0 1
23739: ST_TO_ADDR
// bc_level = 1 ;
23740: LD_ADDR_OWVAR 43
23744: PUSH
23745: LD_INT 1
23747: ST_TO_ADDR
// case btype of 1 :
23748: LD_VAR 0 2
23752: PUSH
23753: LD_INT 1
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23772
23761: POP
// bc_type := b_depot ; 2 :
23762: LD_ADDR_OWVAR 42
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
23770: GO 24384
23772: LD_INT 2
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23791
23780: POP
// bc_type := b_warehouse ; 3 :
23781: LD_ADDR_OWVAR 42
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
23789: GO 24384
23791: LD_INT 3
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23810
23799: POP
// bc_type := b_lab ; 4 .. 9 :
23800: LD_ADDR_OWVAR 42
23804: PUSH
23805: LD_INT 6
23807: ST_TO_ADDR
23808: GO 24384
23810: LD_INT 4
23812: DOUBLE
23813: GREATEREQUAL
23814: IFFALSE 23822
23816: LD_INT 9
23818: DOUBLE
23819: LESSEQUAL
23820: IFTRUE 23824
23822: GO 23876
23824: POP
// begin bc_type := b_lab_half ;
23825: LD_ADDR_OWVAR 42
23829: PUSH
23830: LD_INT 7
23832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23833: LD_ADDR_OWVAR 44
23837: PUSH
23838: LD_INT 10
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 12
23846: PUSH
23847: LD_INT 15
23849: PUSH
23850: LD_INT 14
23852: PUSH
23853: LD_INT 13
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_VAR 0 2
23868: PUSH
23869: LD_INT 3
23871: MINUS
23872: ARRAY
23873: ST_TO_ADDR
// end ; 10 .. 13 :
23874: GO 24384
23876: LD_INT 10
23878: DOUBLE
23879: GREATEREQUAL
23880: IFFALSE 23888
23882: LD_INT 13
23884: DOUBLE
23885: LESSEQUAL
23886: IFTRUE 23890
23888: GO 23967
23890: POP
// begin bc_type := b_lab_full ;
23891: LD_ADDR_OWVAR 42
23895: PUSH
23896: LD_INT 8
23898: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23899: LD_ADDR_OWVAR 44
23903: PUSH
23904: LD_INT 10
23906: PUSH
23907: LD_INT 12
23909: PUSH
23910: LD_INT 14
23912: PUSH
23913: LD_INT 13
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: LD_VAR 0 2
23926: PUSH
23927: LD_INT 9
23929: MINUS
23930: ARRAY
23931: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23932: LD_ADDR_OWVAR 45
23936: PUSH
23937: LD_INT 11
23939: PUSH
23940: LD_INT 15
23942: PUSH
23943: LD_INT 12
23945: PUSH
23946: LD_INT 15
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: PUSH
23955: LD_VAR 0 2
23959: PUSH
23960: LD_INT 9
23962: MINUS
23963: ARRAY
23964: ST_TO_ADDR
// end ; 14 :
23965: GO 24384
23967: LD_INT 14
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 23986
23975: POP
// bc_type := b_workshop ; 15 :
23976: LD_ADDR_OWVAR 42
23980: PUSH
23981: LD_INT 2
23983: ST_TO_ADDR
23984: GO 24384
23986: LD_INT 15
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24005
23994: POP
// bc_type := b_factory ; 16 :
23995: LD_ADDR_OWVAR 42
23999: PUSH
24000: LD_INT 3
24002: ST_TO_ADDR
24003: GO 24384
24005: LD_INT 16
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24013
24011: GO 24024
24013: POP
// bc_type := b_ext_gun ; 17 :
24014: LD_ADDR_OWVAR 42
24018: PUSH
24019: LD_INT 17
24021: ST_TO_ADDR
24022: GO 24384
24024: LD_INT 17
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24060
24032: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24033: LD_ADDR_OWVAR 42
24037: PUSH
24038: LD_INT 19
24040: PUSH
24041: LD_INT 23
24043: PUSH
24044: LD_INT 19
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_VAR 0 1
24056: ARRAY
24057: ST_TO_ADDR
24058: GO 24384
24060: LD_INT 18
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24079
24068: POP
// bc_type := b_ext_radar ; 19 :
24069: LD_ADDR_OWVAR 42
24073: PUSH
24074: LD_INT 20
24076: ST_TO_ADDR
24077: GO 24384
24079: LD_INT 19
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24098
24087: POP
// bc_type := b_ext_radio ; 20 :
24088: LD_ADDR_OWVAR 42
24092: PUSH
24093: LD_INT 22
24095: ST_TO_ADDR
24096: GO 24384
24098: LD_INT 20
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24117
24106: POP
// bc_type := b_ext_siberium ; 21 :
24107: LD_ADDR_OWVAR 42
24111: PUSH
24112: LD_INT 21
24114: ST_TO_ADDR
24115: GO 24384
24117: LD_INT 21
24119: DOUBLE
24120: EQUAL
24121: IFTRUE 24125
24123: GO 24136
24125: POP
// bc_type := b_ext_computer ; 22 :
24126: LD_ADDR_OWVAR 42
24130: PUSH
24131: LD_INT 24
24133: ST_TO_ADDR
24134: GO 24384
24136: LD_INT 22
24138: DOUBLE
24139: EQUAL
24140: IFTRUE 24144
24142: GO 24155
24144: POP
// bc_type := b_ext_track ; 23 :
24145: LD_ADDR_OWVAR 42
24149: PUSH
24150: LD_INT 16
24152: ST_TO_ADDR
24153: GO 24384
24155: LD_INT 23
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24174
24163: POP
// bc_type := b_ext_laser ; 24 :
24164: LD_ADDR_OWVAR 42
24168: PUSH
24169: LD_INT 25
24171: ST_TO_ADDR
24172: GO 24384
24174: LD_INT 24
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24193
24182: POP
// bc_type := b_control_tower ; 25 :
24183: LD_ADDR_OWVAR 42
24187: PUSH
24188: LD_INT 36
24190: ST_TO_ADDR
24191: GO 24384
24193: LD_INT 25
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24212
24201: POP
// bc_type := b_breastwork ; 26 :
24202: LD_ADDR_OWVAR 42
24206: PUSH
24207: LD_INT 31
24209: ST_TO_ADDR
24210: GO 24384
24212: LD_INT 26
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_bunker ; 27 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 32
24228: ST_TO_ADDR
24229: GO 24384
24231: LD_INT 27
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24250
24239: POP
// bc_type := b_turret ; 28 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 33
24247: ST_TO_ADDR
24248: GO 24384
24250: LD_INT 28
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24269
24258: POP
// bc_type := b_armoury ; 29 :
24259: LD_ADDR_OWVAR 42
24263: PUSH
24264: LD_INT 4
24266: ST_TO_ADDR
24267: GO 24384
24269: LD_INT 29
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24288
24277: POP
// bc_type := b_barracks ; 30 :
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 5
24285: ST_TO_ADDR
24286: GO 24384
24288: LD_INT 30
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24307
24296: POP
// bc_type := b_solar_power ; 31 :
24297: LD_ADDR_OWVAR 42
24301: PUSH
24302: LD_INT 27
24304: ST_TO_ADDR
24305: GO 24384
24307: LD_INT 31
24309: DOUBLE
24310: EQUAL
24311: IFTRUE 24315
24313: GO 24326
24315: POP
// bc_type := b_oil_power ; 32 :
24316: LD_ADDR_OWVAR 42
24320: PUSH
24321: LD_INT 26
24323: ST_TO_ADDR
24324: GO 24384
24326: LD_INT 32
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24345
24334: POP
// bc_type := b_siberite_power ; 33 :
24335: LD_ADDR_OWVAR 42
24339: PUSH
24340: LD_INT 28
24342: ST_TO_ADDR
24343: GO 24384
24345: LD_INT 33
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24364
24353: POP
// bc_type := b_oil_mine ; 34 :
24354: LD_ADDR_OWVAR 42
24358: PUSH
24359: LD_INT 29
24361: ST_TO_ADDR
24362: GO 24384
24364: LD_INT 34
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24383
24372: POP
// bc_type := b_siberite_mine ; end ;
24373: LD_ADDR_OWVAR 42
24377: PUSH
24378: LD_INT 30
24380: ST_TO_ADDR
24381: GO 24384
24383: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24384: LD_ADDR_VAR 0 8
24388: PUSH
24389: LD_VAR 0 5
24393: PPUSH
24394: LD_VAR 0 6
24398: PPUSH
24399: LD_VAR 0 3
24403: PPUSH
24404: CALL_OW 47
24408: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24409: LD_OWVAR 42
24413: PUSH
24414: LD_INT 32
24416: PUSH
24417: LD_INT 33
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: IN
24424: IFFALSE 24440
// PlaceWeaponTurret ( b , weapon ) ;
24426: LD_VAR 0 8
24430: PPUSH
24431: LD_VAR 0 4
24435: PPUSH
24436: CALL_OW 431
// end ;
24440: LD_VAR 0 7
24444: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24445: LD_INT 0
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: LD_INT 22
24458: PUSH
24459: LD_OWVAR 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 30
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: ST_TO_ADDR
// if not tmp then
24505: LD_VAR 0 4
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24573
// for i in tmp do
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: FOR_IN
24525: IFFALSE 24571
// for j = 1 to 3 do
24527: LD_ADDR_VAR 0 3
24531: PUSH
24532: DOUBLE
24533: LD_INT 1
24535: DEC
24536: ST_TO_ADDR
24537: LD_INT 3
24539: PUSH
24540: FOR_TO
24541: IFFALSE 24567
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL_OW 274
24552: PPUSH
24553: LD_VAR 0 3
24557: PPUSH
24558: LD_INT 99999
24560: PPUSH
24561: CALL_OW 277
24565: GO 24540
24567: POP
24568: POP
24569: GO 24524
24571: POP
24572: POP
// end ;
24573: LD_VAR 0 1
24577: RET
// export function hHackSetLevel10 ; var i , j ; begin
24578: LD_INT 0
24580: PPUSH
24581: PPUSH
24582: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24583: LD_ADDR_VAR 0 2
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: PUSH
24603: FOR_IN
24604: IFFALSE 24656
// if IsSelected ( i ) then
24606: LD_VAR 0 2
24610: PPUSH
24611: CALL_OW 306
24615: IFFALSE 24654
// begin for j := 1 to 4 do
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: DOUBLE
24623: LD_INT 1
24625: DEC
24626: ST_TO_ADDR
24627: LD_INT 4
24629: PUSH
24630: FOR_TO
24631: IFFALSE 24652
// SetSkill ( i , j , 10 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_VAR 0 3
24642: PPUSH
24643: LD_INT 10
24645: PPUSH
24646: CALL_OW 237
24650: GO 24630
24652: POP
24653: POP
// end ;
24654: GO 24603
24656: POP
24657: POP
// end ;
24658: LD_VAR 0 1
24662: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
24667: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_OWVAR 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 21
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24746
// begin for j := 1 to 4 do
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: DOUBLE
24713: LD_INT 1
24715: DEC
24716: ST_TO_ADDR
24717: LD_INT 4
24719: PUSH
24720: FOR_TO
24721: IFFALSE 24742
// SetSkill ( i , j , 10 ) ;
24723: LD_VAR 0 2
24727: PPUSH
24728: LD_VAR 0 3
24732: PPUSH
24733: LD_INT 10
24735: PPUSH
24736: CALL_OW 237
24740: GO 24720
24742: POP
24743: POP
// end ;
24744: GO 24704
24746: POP
24747: POP
// end ;
24748: LD_VAR 0 1
24752: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24753: LD_INT 0
24755: PPUSH
// uc_side := your_side ;
24756: LD_ADDR_OWVAR 20
24760: PUSH
24761: LD_OWVAR 2
24765: ST_TO_ADDR
// uc_nation := nation ;
24766: LD_ADDR_OWVAR 21
24770: PUSH
24771: LD_VAR 0 1
24775: ST_TO_ADDR
// InitHc ;
24776: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24780: LD_INT 0
24782: PPUSH
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24797: LD_VAR 0 4
24801: PPUSH
24802: LD_VAR 0 5
24806: PPUSH
24807: CALL_OW 428
24811: PUSH
24812: LD_INT 0
24814: EQUAL
24815: IFFALSE 24839
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24817: CALL_OW 44
24821: PPUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: LD_VAR 0 5
24831: PPUSH
24832: LD_INT 1
24834: PPUSH
24835: CALL_OW 48
// end ;
24839: LD_VAR 0 6
24843: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24844: LD_INT 0
24846: PPUSH
24847: PPUSH
// uc_side := your_side ;
24848: LD_ADDR_OWVAR 20
24852: PUSH
24853: LD_OWVAR 2
24857: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24858: LD_VAR 0 1
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: LD_INT 5
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: IN
24885: IFFALSE 24897
// uc_nation := nation_american else
24887: LD_ADDR_OWVAR 21
24891: PUSH
24892: LD_INT 1
24894: ST_TO_ADDR
24895: GO 24940
// if chassis in [ 11 , 12 , 13 , 14 ] then
24897: LD_VAR 0 1
24901: PUSH
24902: LD_INT 11
24904: PUSH
24905: LD_INT 12
24907: PUSH
24908: LD_INT 13
24910: PUSH
24911: LD_INT 14
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: IN
24920: IFFALSE 24932
// uc_nation := nation_arabian else
24922: LD_ADDR_OWVAR 21
24926: PUSH
24927: LD_INT 2
24929: ST_TO_ADDR
24930: GO 24940
// uc_nation := nation_russian ;
24932: LD_ADDR_OWVAR 21
24936: PUSH
24937: LD_INT 3
24939: ST_TO_ADDR
// vc_chassis := chassis ;
24940: LD_ADDR_OWVAR 37
24944: PUSH
24945: LD_VAR 0 1
24949: ST_TO_ADDR
// vc_engine := engine ;
24950: LD_ADDR_OWVAR 39
24954: PUSH
24955: LD_VAR 0 2
24959: ST_TO_ADDR
// vc_control := control ;
24960: LD_ADDR_OWVAR 38
24964: PUSH
24965: LD_VAR 0 3
24969: ST_TO_ADDR
// vc_weapon := weapon ;
24970: LD_ADDR_OWVAR 40
24974: PUSH
24975: LD_VAR 0 4
24979: ST_TO_ADDR
// un := CreateVehicle ;
24980: LD_ADDR_VAR 0 8
24984: PUSH
24985: CALL_OW 45
24989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24990: LD_VAR 0 8
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: LD_INT 5
25000: PPUSH
25001: CALL_OW 12
25005: PPUSH
25006: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25010: LD_VAR 0 8
25014: PPUSH
25015: LD_VAR 0 5
25019: PPUSH
25020: LD_VAR 0 6
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 48
// end ;
25032: LD_VAR 0 7
25036: RET
// export hInvincible ; every 1 do
25037: GO 25039
25039: DISABLE
// hInvincible := [ ] ;
25040: LD_ADDR_EXP 104
25044: PUSH
25045: EMPTY
25046: ST_TO_ADDR
25047: END
// every 10 do var i ;
25048: GO 25050
25050: DISABLE
25051: LD_INT 0
25053: PPUSH
// begin enable ;
25054: ENABLE
// if not hInvincible then
25055: LD_EXP 104
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25108
// for i in hInvincible do
25064: LD_ADDR_VAR 0 1
25068: PUSH
25069: LD_EXP 104
25073: PUSH
25074: FOR_IN
25075: IFFALSE 25106
// if GetLives ( i ) < 1000 then
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 256
25086: PUSH
25087: LD_INT 1000
25089: LESS
25090: IFFALSE 25104
// SetLives ( i , 1000 ) ;
25092: LD_VAR 0 1
25096: PPUSH
25097: LD_INT 1000
25099: PPUSH
25100: CALL_OW 234
25104: GO 25074
25106: POP
25107: POP
// end ;
25108: PPOPN 1
25110: END
// export function hHackInvincible ; var i ; begin
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 21
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 21
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: PUSH
25153: FOR_IN
25154: IFFALSE 25215
// if IsSelected ( i ) then
25156: LD_VAR 0 2
25160: PPUSH
25161: CALL_OW 306
25165: IFFALSE 25213
// begin if i in hInvincible then
25167: LD_VAR 0 2
25171: PUSH
25172: LD_EXP 104
25176: IN
25177: IFFALSE 25197
// hInvincible := hInvincible diff i else
25179: LD_ADDR_EXP 104
25183: PUSH
25184: LD_EXP 104
25188: PUSH
25189: LD_VAR 0 2
25193: DIFF
25194: ST_TO_ADDR
25195: GO 25213
// hInvincible := hInvincible union i ;
25197: LD_ADDR_EXP 104
25201: PUSH
25202: LD_EXP 104
25206: PUSH
25207: LD_VAR 0 2
25211: UNION
25212: ST_TO_ADDR
// end ;
25213: GO 25153
25215: POP
25216: POP
// end ;
25217: LD_VAR 0 1
25221: RET
// export function hHackInvisible ; var i , j ; begin
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
25226: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25227: LD_ADDR_VAR 0 2
25231: PUSH
25232: LD_INT 21
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: PUSH
25247: FOR_IN
25248: IFFALSE 25272
// if IsSelected ( i ) then
25250: LD_VAR 0 2
25254: PPUSH
25255: CALL_OW 306
25259: IFFALSE 25270
// ComForceInvisible ( i ) ;
25261: LD_VAR 0 2
25265: PPUSH
25266: CALL_OW 496
25270: GO 25247
25272: POP
25273: POP
// end ;
25274: LD_VAR 0 1
25278: RET
// export function hHackChangeYourSide ; begin
25279: LD_INT 0
25281: PPUSH
// if your_side = 8 then
25282: LD_OWVAR 2
25286: PUSH
25287: LD_INT 8
25289: EQUAL
25290: IFFALSE 25302
// your_side := 0 else
25292: LD_ADDR_OWVAR 2
25296: PUSH
25297: LD_INT 0
25299: ST_TO_ADDR
25300: GO 25316
// your_side := your_side + 1 ;
25302: LD_ADDR_OWVAR 2
25306: PUSH
25307: LD_OWVAR 2
25311: PUSH
25312: LD_INT 1
25314: PLUS
25315: ST_TO_ADDR
// end ;
25316: LD_VAR 0 1
25320: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25321: LD_INT 0
25323: PPUSH
25324: PPUSH
25325: PPUSH
// for i in all_units do
25326: LD_ADDR_VAR 0 2
25330: PUSH
25331: LD_OWVAR 3
25335: PUSH
25336: FOR_IN
25337: IFFALSE 25415
// if IsSelected ( i ) then
25339: LD_VAR 0 2
25343: PPUSH
25344: CALL_OW 306
25348: IFFALSE 25413
// begin j := GetSide ( i ) ;
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_VAR 0 2
25359: PPUSH
25360: CALL_OW 255
25364: ST_TO_ADDR
// if j = 8 then
25365: LD_VAR 0 3
25369: PUSH
25370: LD_INT 8
25372: EQUAL
25373: IFFALSE 25385
// j := 0 else
25375: LD_ADDR_VAR 0 3
25379: PUSH
25380: LD_INT 0
25382: ST_TO_ADDR
25383: GO 25399
// j := j + 1 ;
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_VAR 0 3
25394: PUSH
25395: LD_INT 1
25397: PLUS
25398: ST_TO_ADDR
// SetSide ( i , j ) ;
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL_OW 235
// end ;
25413: GO 25336
25415: POP
25416: POP
// end ;
25417: LD_VAR 0 1
25421: RET
// export function hHackFog ; begin
25422: LD_INT 0
25424: PPUSH
// FogOff ( true ) ;
25425: LD_INT 1
25427: PPUSH
25428: CALL_OW 344
// end ;
25432: LD_VAR 0 1
25436: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25437: LD_INT 0
25439: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_VAR 0 3
25454: PPUSH
25455: LD_INT 1
25457: PPUSH
25458: LD_INT 1
25460: PPUSH
25461: CALL_OW 483
// CenterOnXY ( x , y ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 84
// end ;
25479: LD_VAR 0 4
25483: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25484: LD_INT 0
25486: PPUSH
25487: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25488: LD_VAR 0 1
25492: NOT
25493: PUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 488
25508: NOT
25509: OR
25510: PUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 266
25520: PUSH
25521: LD_INT 3
25523: NONEQUAL
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 247
25534: PUSH
25535: LD_INT 1
25537: EQUAL
25538: NOT
25539: AND
25540: OR
25541: IFFALSE 25545
// exit ;
25543: GO 25694
// if GetType ( factory ) = unit_human then
25545: LD_VAR 0 1
25549: PPUSH
25550: CALL_OW 247
25554: PUSH
25555: LD_INT 1
25557: EQUAL
25558: IFFALSE 25575
// factory := IsInUnit ( factory ) ;
25560: LD_ADDR_VAR 0 1
25564: PUSH
25565: LD_VAR 0 1
25569: PPUSH
25570: CALL_OW 310
25574: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 266
25584: PUSH
25585: LD_INT 3
25587: NONEQUAL
25588: IFFALSE 25592
// exit ;
25590: GO 25694
// if HexInfo ( x , y ) = factory then
25592: LD_VAR 0 2
25596: PPUSH
25597: LD_VAR 0 3
25601: PPUSH
25602: CALL_OW 428
25606: PUSH
25607: LD_VAR 0 1
25611: EQUAL
25612: IFFALSE 25639
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25614: LD_ADDR_EXP 105
25618: PUSH
25619: LD_EXP 105
25623: PPUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 0
25631: PPUSH
25632: CALL_OW 1
25636: ST_TO_ADDR
25637: GO 25690
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25639: LD_ADDR_EXP 105
25643: PUSH
25644: LD_EXP 105
25648: PPUSH
25649: LD_VAR 0 1
25653: PPUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 255
25663: PUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_VAR 0 2
25673: PUSH
25674: LD_VAR 0 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 1
25689: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25690: CALL 25699 0 0
// end ;
25694: LD_VAR 0 4
25698: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25699: LD_INT 0
25701: PPUSH
25702: PPUSH
25703: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25704: LD_STRING resetFactoryWaypoint();
25706: PPUSH
25707: CALL_OW 559
// if factoryWaypoints then
25711: LD_EXP 105
25715: IFFALSE 25841
// begin list := PrepareArray ( factoryWaypoints ) ;
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: LD_EXP 105
25726: PPUSH
25727: CALL 72134 0 1
25731: ST_TO_ADDR
// for i := 1 to list do
25732: LD_ADDR_VAR 0 2
25736: PUSH
25737: DOUBLE
25738: LD_INT 1
25740: DEC
25741: ST_TO_ADDR
25742: LD_VAR 0 3
25746: PUSH
25747: FOR_TO
25748: IFFALSE 25839
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25750: LD_STRING setFactoryWaypointXY(
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_VAR 0 2
25762: ARRAY
25763: PUSH
25764: LD_INT 1
25766: ARRAY
25767: STR
25768: PUSH
25769: LD_STRING ,
25771: STR
25772: PUSH
25773: LD_VAR 0 3
25777: PUSH
25778: LD_VAR 0 2
25782: ARRAY
25783: PUSH
25784: LD_INT 2
25786: ARRAY
25787: STR
25788: PUSH
25789: LD_STRING ,
25791: STR
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: PUSH
25804: LD_INT 3
25806: ARRAY
25807: STR
25808: PUSH
25809: LD_STRING ,
25811: STR
25812: PUSH
25813: LD_VAR 0 3
25817: PUSH
25818: LD_VAR 0 2
25822: ARRAY
25823: PUSH
25824: LD_INT 4
25826: ARRAY
25827: STR
25828: PUSH
25829: LD_STRING )
25831: STR
25832: PPUSH
25833: CALL_OW 559
25837: GO 25747
25839: POP
25840: POP
// end ; end ;
25841: LD_VAR 0 1
25845: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25846: LD_INT 0
25848: PPUSH
// if HexInfo ( x , y ) = warehouse then
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_VAR 0 3
25858: PPUSH
25859: CALL_OW 428
25863: PUSH
25864: LD_VAR 0 1
25868: EQUAL
25869: IFFALSE 25896
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25871: LD_ADDR_EXP 106
25875: PUSH
25876: LD_EXP 106
25880: PPUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
25894: GO 25947
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25896: LD_ADDR_EXP 106
25900: PUSH
25901: LD_EXP 106
25905: PPUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 255
25920: PUSH
25921: LD_VAR 0 1
25925: PUSH
25926: LD_VAR 0 2
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 1
25946: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25947: CALL 25956 0 0
// end ;
25951: LD_VAR 0 4
25955: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25961: LD_STRING resetWarehouseGatheringPoints();
25963: PPUSH
25964: CALL_OW 559
// if warehouseGatheringPoints then
25968: LD_EXP 106
25972: IFFALSE 26098
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_EXP 106
25983: PPUSH
25984: CALL 72134 0 1
25988: ST_TO_ADDR
// for i := 1 to list do
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: DOUBLE
25995: LD_INT 1
25997: DEC
25998: ST_TO_ADDR
25999: LD_VAR 0 3
26003: PUSH
26004: FOR_TO
26005: IFFALSE 26096
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26007: LD_STRING setWarehouseGatheringPointXY(
26009: PUSH
26010: LD_VAR 0 3
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 2
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING ,
26048: STR
26049: PUSH
26050: LD_VAR 0 3
26054: PUSH
26055: LD_VAR 0 2
26059: ARRAY
26060: PUSH
26061: LD_INT 3
26063: ARRAY
26064: STR
26065: PUSH
26066: LD_STRING ,
26068: STR
26069: PUSH
26070: LD_VAR 0 3
26074: PUSH
26075: LD_VAR 0 2
26079: ARRAY
26080: PUSH
26081: LD_INT 4
26083: ARRAY
26084: STR
26085: PUSH
26086: LD_STRING )
26088: STR
26089: PPUSH
26090: CALL_OW 559
26094: GO 26004
26096: POP
26097: POP
// end ; end ;
26098: LD_VAR 0 1
26102: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26103: LD_EXP 106
26107: IFFALSE 26792
26109: GO 26111
26111: DISABLE
26112: LD_INT 0
26114: PPUSH
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
// begin enable ;
26123: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_EXP 106
26133: PPUSH
26134: CALL 72134 0 1
26138: ST_TO_ADDR
// if not list then
26139: LD_VAR 0 3
26143: NOT
26144: IFFALSE 26148
// exit ;
26146: GO 26792
// for i := 1 to list do
26148: LD_ADDR_VAR 0 1
26152: PUSH
26153: DOUBLE
26154: LD_INT 1
26156: DEC
26157: ST_TO_ADDR
26158: LD_VAR 0 3
26162: PUSH
26163: FOR_TO
26164: IFFALSE 26790
// begin depot := list [ i ] [ 2 ] ;
26166: LD_ADDR_VAR 0 8
26170: PUSH
26171: LD_VAR 0 3
26175: PUSH
26176: LD_VAR 0 1
26180: ARRAY
26181: PUSH
26182: LD_INT 2
26184: ARRAY
26185: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26186: LD_ADDR_VAR 0 5
26190: PUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 1
26200: ARRAY
26201: PUSH
26202: LD_INT 1
26204: ARRAY
26205: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26206: LD_VAR 0 8
26210: PPUSH
26211: CALL_OW 301
26215: PUSH
26216: LD_VAR 0 5
26220: PUSH
26221: LD_VAR 0 8
26225: PPUSH
26226: CALL_OW 255
26230: NONEQUAL
26231: OR
26232: IFFALSE 26261
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26234: LD_ADDR_EXP 106
26238: PUSH
26239: LD_EXP 106
26243: PPUSH
26244: LD_VAR 0 8
26248: PPUSH
26249: LD_INT 0
26251: PPUSH
26252: CALL_OW 1
26256: ST_TO_ADDR
// exit ;
26257: POP
26258: POP
26259: GO 26792
// end ; x := list [ i ] [ 3 ] ;
26261: LD_ADDR_VAR 0 6
26265: PUSH
26266: LD_VAR 0 3
26270: PUSH
26271: LD_VAR 0 1
26275: ARRAY
26276: PUSH
26277: LD_INT 3
26279: ARRAY
26280: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26281: LD_ADDR_VAR 0 7
26285: PUSH
26286: LD_VAR 0 3
26290: PUSH
26291: LD_VAR 0 1
26295: ARRAY
26296: PUSH
26297: LD_INT 4
26299: ARRAY
26300: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26301: LD_ADDR_VAR 0 9
26305: PUSH
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_VAR 0 7
26315: PPUSH
26316: LD_INT 16
26318: PPUSH
26319: CALL 70722 0 3
26323: ST_TO_ADDR
// if not cratesNearbyPoint then
26324: LD_VAR 0 9
26328: NOT
26329: IFFALSE 26335
// exit ;
26331: POP
26332: POP
26333: GO 26792
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26335: LD_ADDR_VAR 0 4
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_VAR 0 5
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 60
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 91
26367: PUSH
26368: LD_VAR 0 8
26372: PUSH
26373: LD_INT 6
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 16
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: PPUSH
26415: CALL_OW 69
26419: PUSH
26420: LD_VAR 0 8
26424: PPUSH
26425: CALL_OW 313
26429: PPUSH
26430: LD_INT 3
26432: PUSH
26433: LD_INT 60
26435: PUSH
26436: EMPTY
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 25
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 25
26458: PUSH
26459: LD_INT 16
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 72
26479: UNION
26480: ST_TO_ADDR
// if tmp then
26481: LD_VAR 0 4
26485: IFFALSE 26565
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_VAR 0 4
26496: PPUSH
26497: LD_INT 3
26499: PPUSH
26500: CALL 68691 0 2
26504: ST_TO_ADDR
// for j in tmp do
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: LD_VAR 0 4
26514: PUSH
26515: FOR_IN
26516: IFFALSE 26559
// begin if IsInUnit ( j ) then
26518: LD_VAR 0 2
26522: PPUSH
26523: CALL_OW 310
26527: IFFALSE 26538
// ComExit ( j ) ;
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL 68774 0 1
// AddComCollect ( j , x , y ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: LD_VAR 0 6
26547: PPUSH
26548: LD_VAR 0 7
26552: PPUSH
26553: CALL_OW 177
// end ;
26557: GO 26515
26559: POP
26560: POP
// exit ;
26561: POP
26562: POP
26563: GO 26792
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26565: LD_ADDR_VAR 0 4
26569: PUSH
26570: LD_INT 22
26572: PUSH
26573: LD_VAR 0 5
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 91
26584: PUSH
26585: LD_VAR 0 8
26589: PUSH
26590: LD_INT 8
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: LD_INT 34
26603: PUSH
26604: LD_INT 12
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 34
26613: PUSH
26614: LD_INT 51
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 34
26623: PUSH
26624: LD_INT 32
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 34
26633: PUSH
26634: LD_INT 89
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: ST_TO_ADDR
// if tmp then
26658: LD_VAR 0 4
26662: IFFALSE 26788
// begin for j in tmp do
26664: LD_ADDR_VAR 0 2
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: FOR_IN
26675: IFFALSE 26786
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26677: LD_VAR 0 2
26681: PPUSH
26682: CALL_OW 262
26686: PUSH
26687: LD_INT 3
26689: EQUAL
26690: PUSH
26691: LD_VAR 0 2
26695: PPUSH
26696: CALL_OW 261
26700: PUSH
26701: LD_INT 20
26703: GREATER
26704: OR
26705: PUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 314
26715: NOT
26716: AND
26717: PUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: CALL_OW 263
26727: PUSH
26728: LD_INT 1
26730: NONEQUAL
26731: PUSH
26732: LD_VAR 0 2
26736: PPUSH
26737: CALL_OW 311
26741: OR
26742: AND
26743: IFFALSE 26784
// begin ComCollect ( j , x , y ) ;
26745: LD_VAR 0 2
26749: PPUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_VAR 0 7
26759: PPUSH
26760: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26764: LD_VAR 0 2
26768: PPUSH
26769: LD_VAR 0 8
26773: PPUSH
26774: CALL_OW 172
// exit ;
26778: POP
26779: POP
26780: POP
26781: POP
26782: GO 26792
// end ;
26784: GO 26674
26786: POP
26787: POP
// end ; end ;
26788: GO 26163
26790: POP
26791: POP
// end ; end_of_file
26792: PPOPN 9
26794: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26795: LD_INT 0
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 264
26810: PUSH
26811: LD_INT 91
26813: EQUAL
26814: IFFALSE 26886
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26816: LD_INT 68
26818: PPUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 255
26828: PPUSH
26829: CALL_OW 321
26833: PUSH
26834: LD_INT 2
26836: EQUAL
26837: IFFALSE 26849
// eff := 70 else
26839: LD_ADDR_VAR 0 4
26843: PUSH
26844: LD_INT 70
26846: ST_TO_ADDR
26847: GO 26857
// eff := 30 ;
26849: LD_ADDR_VAR 0 4
26853: PUSH
26854: LD_INT 30
26856: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 250
26866: PPUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 251
26876: PPUSH
26877: LD_VAR 0 4
26881: PPUSH
26882: CALL_OW 495
// end ; end ;
26886: LD_VAR 0 2
26890: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26891: LD_INT 0
26893: PPUSH
// end ;
26894: LD_VAR 0 4
26898: RET
// export function SOS_Command ( cmd ) ; begin
26899: LD_INT 0
26901: PPUSH
// end ;
26902: LD_VAR 0 2
26906: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26907: LD_INT 0
26909: PPUSH
// end ;
26910: LD_VAR 0 6
26914: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26915: LD_INT 0
26917: PPUSH
26918: PPUSH
// if not vehicle or not factory then
26919: LD_VAR 0 1
26923: NOT
26924: PUSH
26925: LD_VAR 0 2
26929: NOT
26930: OR
26931: IFFALSE 26935
// exit ;
26933: GO 27166
// if factoryWaypoints >= factory then
26935: LD_EXP 105
26939: PUSH
26940: LD_VAR 0 2
26944: GREATEREQUAL
26945: IFFALSE 27166
// if factoryWaypoints [ factory ] then
26947: LD_EXP 105
26951: PUSH
26952: LD_VAR 0 2
26956: ARRAY
26957: IFFALSE 27166
// begin if GetControl ( vehicle ) = control_manual then
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL_OW 263
26968: PUSH
26969: LD_INT 1
26971: EQUAL
26972: IFFALSE 27053
// begin driver := IsDrivenBy ( vehicle ) ;
26974: LD_ADDR_VAR 0 4
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 311
26988: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26989: LD_VAR 0 4
26993: PPUSH
26994: LD_EXP 105
26998: PUSH
26999: LD_VAR 0 2
27003: ARRAY
27004: PUSH
27005: LD_INT 3
27007: ARRAY
27008: PPUSH
27009: LD_EXP 105
27013: PUSH
27014: LD_VAR 0 2
27018: ARRAY
27019: PUSH
27020: LD_INT 4
27022: ARRAY
27023: PPUSH
27024: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27028: LD_VAR 0 4
27032: PPUSH
27033: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27037: LD_VAR 0 4
27041: PPUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: CALL_OW 180
// end else
27051: GO 27166
// if GetControl ( vehicle ) = control_remote then
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 263
27062: PUSH
27063: LD_INT 2
27065: EQUAL
27066: IFFALSE 27127
// begin wait ( 0 0$2 ) ;
27068: LD_INT 70
27070: PPUSH
27071: CALL_OW 67
// if Connect ( vehicle ) then
27075: LD_VAR 0 1
27079: PPUSH
27080: CALL 39015 0 1
27084: IFFALSE 27125
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27086: LD_VAR 0 1
27090: PPUSH
27091: LD_EXP 105
27095: PUSH
27096: LD_VAR 0 2
27100: ARRAY
27101: PUSH
27102: LD_INT 3
27104: ARRAY
27105: PPUSH
27106: LD_EXP 105
27110: PUSH
27111: LD_VAR 0 2
27115: ARRAY
27116: PUSH
27117: LD_INT 4
27119: ARRAY
27120: PPUSH
27121: CALL_OW 171
// end else
27125: GO 27166
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_EXP 105
27136: PUSH
27137: LD_VAR 0 2
27141: ARRAY
27142: PUSH
27143: LD_INT 3
27145: ARRAY
27146: PPUSH
27147: LD_EXP 105
27151: PUSH
27152: LD_VAR 0 2
27156: ARRAY
27157: PUSH
27158: LD_INT 4
27160: ARRAY
27161: PPUSH
27162: CALL_OW 171
// end ; end ;
27166: LD_VAR 0 3
27170: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27171: LD_INT 0
27173: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27174: LD_VAR 0 1
27178: PUSH
27179: LD_INT 250
27181: EQUAL
27182: PUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 264
27192: PUSH
27193: LD_INT 81
27195: EQUAL
27196: AND
27197: IFFALSE 27218
// MinerPlaceMine ( unit , x , y ) ;
27199: LD_VAR 0 2
27203: PPUSH
27204: LD_VAR 0 4
27208: PPUSH
27209: LD_VAR 0 5
27213: PPUSH
27214: CALL 29603 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27218: LD_VAR 0 1
27222: PUSH
27223: LD_INT 251
27225: EQUAL
27226: PUSH
27227: LD_VAR 0 2
27231: PPUSH
27232: CALL_OW 264
27236: PUSH
27237: LD_INT 81
27239: EQUAL
27240: AND
27241: IFFALSE 27262
// MinerDetonateMine ( unit , x , y ) ;
27243: LD_VAR 0 2
27247: PPUSH
27248: LD_VAR 0 4
27252: PPUSH
27253: LD_VAR 0 5
27257: PPUSH
27258: CALL 29878 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27262: LD_VAR 0 1
27266: PUSH
27267: LD_INT 252
27269: EQUAL
27270: PUSH
27271: LD_VAR 0 2
27275: PPUSH
27276: CALL_OW 264
27280: PUSH
27281: LD_INT 81
27283: EQUAL
27284: AND
27285: IFFALSE 27306
// MinerCreateMinefield ( unit , x , y ) ;
27287: LD_VAR 0 2
27291: PPUSH
27292: LD_VAR 0 4
27296: PPUSH
27297: LD_VAR 0 5
27301: PPUSH
27302: CALL 30295 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27306: LD_VAR 0 1
27310: PUSH
27311: LD_INT 253
27313: EQUAL
27314: PUSH
27315: LD_VAR 0 2
27319: PPUSH
27320: CALL_OW 257
27324: PUSH
27325: LD_INT 5
27327: EQUAL
27328: AND
27329: IFFALSE 27350
// ComBinocular ( unit , x , y ) ;
27331: LD_VAR 0 2
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_VAR 0 5
27345: PPUSH
27346: CALL 30664 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27350: LD_VAR 0 1
27354: PUSH
27355: LD_INT 254
27357: EQUAL
27358: PUSH
27359: LD_VAR 0 2
27363: PPUSH
27364: CALL_OW 264
27368: PUSH
27369: LD_INT 99
27371: EQUAL
27372: AND
27373: PUSH
27374: LD_VAR 0 3
27378: PPUSH
27379: CALL_OW 263
27383: PUSH
27384: LD_INT 3
27386: EQUAL
27387: AND
27388: IFFALSE 27404
// HackDestroyVehicle ( unit , selectedUnit ) ;
27390: LD_VAR 0 2
27394: PPUSH
27395: LD_VAR 0 3
27399: PPUSH
27400: CALL 28967 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_INT 255
27411: EQUAL
27412: PUSH
27413: LD_VAR 0 2
27417: PPUSH
27418: CALL_OW 264
27422: PUSH
27423: LD_INT 14
27425: PUSH
27426: LD_INT 53
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: IN
27433: AND
27434: PUSH
27435: LD_VAR 0 4
27439: PPUSH
27440: LD_VAR 0 5
27444: PPUSH
27445: CALL_OW 488
27449: AND
27450: IFFALSE 27474
// CutTreeXYR ( unit , x , y , 12 ) ;
27452: LD_VAR 0 2
27456: PPUSH
27457: LD_VAR 0 4
27461: PPUSH
27462: LD_VAR 0 5
27466: PPUSH
27467: LD_INT 12
27469: PPUSH
27470: CALL 27537 0 4
// if cmd = 256 then
27474: LD_VAR 0 1
27478: PUSH
27479: LD_INT 256
27481: EQUAL
27482: IFFALSE 27503
// SetFactoryWaypoint ( unit , x , y ) ;
27484: LD_VAR 0 2
27488: PPUSH
27489: LD_VAR 0 4
27493: PPUSH
27494: LD_VAR 0 5
27498: PPUSH
27499: CALL 25484 0 3
// if cmd = 257 then
27503: LD_VAR 0 1
27507: PUSH
27508: LD_INT 257
27510: EQUAL
27511: IFFALSE 27532
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_VAR 0 4
27522: PPUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: CALL 25846 0 3
// end ;
27532: LD_VAR 0 6
27536: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
27547: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27548: LD_VAR 0 1
27552: NOT
27553: PUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: LD_VAR 0 3
27563: PPUSH
27564: CALL_OW 488
27568: NOT
27569: OR
27570: PUSH
27571: LD_VAR 0 4
27575: NOT
27576: OR
27577: IFFALSE 27581
// exit ;
27579: GO 27921
// list := [ ] ;
27581: LD_ADDR_VAR 0 13
27585: PUSH
27586: EMPTY
27587: ST_TO_ADDR
// if x - r < 0 then
27588: LD_VAR 0 2
27592: PUSH
27593: LD_VAR 0 4
27597: MINUS
27598: PUSH
27599: LD_INT 0
27601: LESS
27602: IFFALSE 27614
// min_x := 0 else
27604: LD_ADDR_VAR 0 7
27608: PUSH
27609: LD_INT 0
27611: ST_TO_ADDR
27612: GO 27630
// min_x := x - r ;
27614: LD_ADDR_VAR 0 7
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 4
27628: MINUS
27629: ST_TO_ADDR
// if y - r < 0 then
27630: LD_VAR 0 3
27634: PUSH
27635: LD_VAR 0 4
27639: MINUS
27640: PUSH
27641: LD_INT 0
27643: LESS
27644: IFFALSE 27656
// min_y := 0 else
27646: LD_ADDR_VAR 0 8
27650: PUSH
27651: LD_INT 0
27653: ST_TO_ADDR
27654: GO 27672
// min_y := y - r ;
27656: LD_ADDR_VAR 0 8
27660: PUSH
27661: LD_VAR 0 3
27665: PUSH
27666: LD_VAR 0 4
27670: MINUS
27671: ST_TO_ADDR
// max_x := x + r ;
27672: LD_ADDR_VAR 0 9
27676: PUSH
27677: LD_VAR 0 2
27681: PUSH
27682: LD_VAR 0 4
27686: PLUS
27687: ST_TO_ADDR
// max_y := y + r ;
27688: LD_ADDR_VAR 0 10
27692: PUSH
27693: LD_VAR 0 3
27697: PUSH
27698: LD_VAR 0 4
27702: PLUS
27703: ST_TO_ADDR
// for _x = min_x to max_x do
27704: LD_ADDR_VAR 0 11
27708: PUSH
27709: DOUBLE
27710: LD_VAR 0 7
27714: DEC
27715: ST_TO_ADDR
27716: LD_VAR 0 9
27720: PUSH
27721: FOR_TO
27722: IFFALSE 27839
// for _y = min_y to max_y do
27724: LD_ADDR_VAR 0 12
27728: PUSH
27729: DOUBLE
27730: LD_VAR 0 8
27734: DEC
27735: ST_TO_ADDR
27736: LD_VAR 0 10
27740: PUSH
27741: FOR_TO
27742: IFFALSE 27835
// begin if not ValidHex ( _x , _y ) then
27744: LD_VAR 0 11
27748: PPUSH
27749: LD_VAR 0 12
27753: PPUSH
27754: CALL_OW 488
27758: NOT
27759: IFFALSE 27763
// continue ;
27761: GO 27741
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27763: LD_VAR 0 11
27767: PPUSH
27768: LD_VAR 0 12
27772: PPUSH
27773: CALL_OW 351
27777: PUSH
27778: LD_VAR 0 11
27782: PPUSH
27783: LD_VAR 0 12
27787: PPUSH
27788: CALL_OW 554
27792: AND
27793: IFFALSE 27833
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27795: LD_ADDR_VAR 0 13
27799: PUSH
27800: LD_VAR 0 13
27804: PPUSH
27805: LD_VAR 0 13
27809: PUSH
27810: LD_INT 1
27812: PLUS
27813: PPUSH
27814: LD_VAR 0 11
27818: PUSH
27819: LD_VAR 0 12
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 2
27832: ST_TO_ADDR
// end ;
27833: GO 27741
27835: POP
27836: POP
27837: GO 27721
27839: POP
27840: POP
// if not list then
27841: LD_VAR 0 13
27845: NOT
27846: IFFALSE 27850
// exit ;
27848: GO 27921
// for i in list do
27850: LD_ADDR_VAR 0 6
27854: PUSH
27855: LD_VAR 0 13
27859: PUSH
27860: FOR_IN
27861: IFFALSE 27919
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_STRING M
27870: PUSH
27871: LD_VAR 0 6
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PUSH
27880: LD_VAR 0 6
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: PPUSH
27913: CALL_OW 447
27917: GO 27860
27919: POP
27920: POP
// end ;
27921: LD_VAR 0 5
27925: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27926: LD_EXP 108
27930: NOT
27931: IFFALSE 27981
27933: GO 27935
27935: DISABLE
// begin initHack := true ;
27936: LD_ADDR_EXP 108
27940: PUSH
27941: LD_INT 1
27943: ST_TO_ADDR
// hackTanks := [ ] ;
27944: LD_ADDR_EXP 109
27948: PUSH
27949: EMPTY
27950: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27951: LD_ADDR_EXP 110
27955: PUSH
27956: EMPTY
27957: ST_TO_ADDR
// hackLimit := 3 ;
27958: LD_ADDR_EXP 111
27962: PUSH
27963: LD_INT 3
27965: ST_TO_ADDR
// hackDist := 12 ;
27966: LD_ADDR_EXP 112
27970: PUSH
27971: LD_INT 12
27973: ST_TO_ADDR
// hackCounter := [ ] ;
27974: LD_ADDR_EXP 113
27978: PUSH
27979: EMPTY
27980: ST_TO_ADDR
// end ;
27981: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27982: LD_EXP 108
27986: PUSH
27987: LD_INT 34
27989: PUSH
27990: LD_INT 99
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: AND
28002: IFFALSE 28255
28004: GO 28006
28006: DISABLE
28007: LD_INT 0
28009: PPUSH
28010: PPUSH
// begin enable ;
28011: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: LD_INT 34
28019: PUSH
28020: LD_INT 99
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 69
28031: PUSH
28032: FOR_IN
28033: IFFALSE 28253
// begin if not i in hackTanks then
28035: LD_VAR 0 1
28039: PUSH
28040: LD_EXP 109
28044: IN
28045: NOT
28046: IFFALSE 28129
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28048: LD_ADDR_EXP 109
28052: PUSH
28053: LD_EXP 109
28057: PPUSH
28058: LD_EXP 109
28062: PUSH
28063: LD_INT 1
28065: PLUS
28066: PPUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 1
28076: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28077: LD_ADDR_EXP 110
28081: PUSH
28082: LD_EXP 110
28086: PPUSH
28087: LD_EXP 110
28091: PUSH
28092: LD_INT 1
28094: PLUS
28095: PPUSH
28096: EMPTY
28097: PPUSH
28098: CALL_OW 1
28102: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28103: LD_ADDR_EXP 113
28107: PUSH
28108: LD_EXP 113
28112: PPUSH
28113: LD_EXP 113
28117: PUSH
28118: LD_INT 1
28120: PLUS
28121: PPUSH
28122: EMPTY
28123: PPUSH
28124: CALL_OW 1
28128: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 302
28138: NOT
28139: IFFALSE 28152
// begin HackUnlinkAll ( i ) ;
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL 28258 0 1
// continue ;
28150: GO 28032
// end ; HackCheckCapturedStatus ( i ) ;
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL 28701 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28161: LD_ADDR_VAR 0 2
28165: PUSH
28166: LD_INT 81
28168: PUSH
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL_OW 255
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 33
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 91
28195: PUSH
28196: LD_VAR 0 1
28200: PUSH
28201: LD_EXP 112
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 50
28213: PUSH
28214: EMPTY
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: PPUSH
28223: CALL_OW 69
28227: ST_TO_ADDR
// if not tmp then
28228: LD_VAR 0 2
28232: NOT
28233: IFFALSE 28237
// continue ;
28235: GO 28032
// HackLink ( i , tmp ) ;
28237: LD_VAR 0 1
28241: PPUSH
28242: LD_VAR 0 2
28246: PPUSH
28247: CALL 28394 0 2
// end ;
28251: GO 28032
28253: POP
28254: POP
// end ;
28255: PPOPN 2
28257: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28258: LD_INT 0
28260: PPUSH
28261: PPUSH
28262: PPUSH
// if not hack in hackTanks then
28263: LD_VAR 0 1
28267: PUSH
28268: LD_EXP 109
28272: IN
28273: NOT
28274: IFFALSE 28278
// exit ;
28276: GO 28389
// index := GetElementIndex ( hackTanks , hack ) ;
28278: LD_ADDR_VAR 0 4
28282: PUSH
28283: LD_EXP 109
28287: PPUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL 35831 0 2
28297: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28298: LD_EXP 110
28302: PUSH
28303: LD_VAR 0 4
28307: ARRAY
28308: IFFALSE 28389
// begin for i in hackTanksCaptured [ index ] do
28310: LD_ADDR_VAR 0 3
28314: PUSH
28315: LD_EXP 110
28319: PUSH
28320: LD_VAR 0 4
28324: ARRAY
28325: PUSH
28326: FOR_IN
28327: IFFALSE 28353
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28329: LD_VAR 0 3
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PPUSH
28338: LD_VAR 0 3
28342: PUSH
28343: LD_INT 2
28345: ARRAY
28346: PPUSH
28347: CALL_OW 235
28351: GO 28326
28353: POP
28354: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28355: LD_ADDR_EXP 110
28359: PUSH
28360: LD_EXP 110
28364: PPUSH
28365: LD_VAR 0 4
28369: PPUSH
28370: EMPTY
28371: PPUSH
28372: CALL_OW 1
28376: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28377: LD_VAR 0 1
28381: PPUSH
28382: LD_INT 0
28384: PPUSH
28385: CALL_OW 505
// end ; end ;
28389: LD_VAR 0 2
28393: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28394: LD_INT 0
28396: PPUSH
28397: PPUSH
28398: PPUSH
// if not hack in hackTanks or not vehicles then
28399: LD_VAR 0 1
28403: PUSH
28404: LD_EXP 109
28408: IN
28409: NOT
28410: PUSH
28411: LD_VAR 0 2
28415: NOT
28416: OR
28417: IFFALSE 28421
// exit ;
28419: GO 28696
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: LD_INT 1
28441: PPUSH
28442: CALL 36481 0 4
28446: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28447: LD_ADDR_VAR 0 5
28451: PUSH
28452: LD_EXP 109
28456: PPUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL 35831 0 2
28466: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28467: LD_EXP 110
28471: PUSH
28472: LD_VAR 0 5
28476: ARRAY
28477: PUSH
28478: LD_EXP 111
28482: LESS
28483: IFFALSE 28672
// begin for i := 1 to vehicles do
28485: LD_ADDR_VAR 0 4
28489: PUSH
28490: DOUBLE
28491: LD_INT 1
28493: DEC
28494: ST_TO_ADDR
28495: LD_VAR 0 2
28499: PUSH
28500: FOR_TO
28501: IFFALSE 28670
// begin if hackTanksCaptured [ index ] = hackLimit then
28503: LD_EXP 110
28507: PUSH
28508: LD_VAR 0 5
28512: ARRAY
28513: PUSH
28514: LD_EXP 111
28518: EQUAL
28519: IFFALSE 28523
// break ;
28521: GO 28670
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28523: LD_ADDR_EXP 113
28527: PUSH
28528: LD_EXP 113
28532: PPUSH
28533: LD_VAR 0 5
28537: PPUSH
28538: LD_EXP 113
28542: PUSH
28543: LD_VAR 0 5
28547: ARRAY
28548: PUSH
28549: LD_INT 1
28551: PLUS
28552: PPUSH
28553: CALL_OW 1
28557: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28558: LD_ADDR_EXP 110
28562: PUSH
28563: LD_EXP 110
28567: PPUSH
28568: LD_VAR 0 5
28572: PUSH
28573: LD_EXP 110
28577: PUSH
28578: LD_VAR 0 5
28582: ARRAY
28583: PUSH
28584: LD_INT 1
28586: PLUS
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PPUSH
28592: LD_VAR 0 2
28596: PUSH
28597: LD_VAR 0 4
28601: ARRAY
28602: PUSH
28603: LD_VAR 0 2
28607: PUSH
28608: LD_VAR 0 4
28612: ARRAY
28613: PPUSH
28614: CALL_OW 255
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PPUSH
28623: CALL 36046 0 3
28627: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28628: LD_VAR 0 2
28632: PUSH
28633: LD_VAR 0 4
28637: ARRAY
28638: PPUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 255
28648: PPUSH
28649: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28653: LD_VAR 0 2
28657: PUSH
28658: LD_VAR 0 4
28662: ARRAY
28663: PPUSH
28664: CALL_OW 141
// end ;
28668: GO 28500
28670: POP
28671: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28672: LD_VAR 0 1
28676: PPUSH
28677: LD_EXP 110
28681: PUSH
28682: LD_VAR 0 5
28686: ARRAY
28687: PUSH
28688: LD_INT 0
28690: PLUS
28691: PPUSH
28692: CALL_OW 505
// end ;
28696: LD_VAR 0 3
28700: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
28705: PPUSH
28706: PPUSH
// if not hack in hackTanks then
28707: LD_VAR 0 1
28711: PUSH
28712: LD_EXP 109
28716: IN
28717: NOT
28718: IFFALSE 28722
// exit ;
28720: GO 28962
// index := GetElementIndex ( hackTanks , hack ) ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_EXP 109
28731: PPUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL 35831 0 2
28741: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: DOUBLE
28748: LD_EXP 110
28752: PUSH
28753: LD_VAR 0 4
28757: ARRAY
28758: INC
28759: ST_TO_ADDR
28760: LD_INT 1
28762: PUSH
28763: FOR_DOWNTO
28764: IFFALSE 28936
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28766: LD_ADDR_VAR 0 5
28770: PUSH
28771: LD_EXP 110
28775: PUSH
28776: LD_VAR 0 4
28780: ARRAY
28781: PUSH
28782: LD_VAR 0 3
28786: ARRAY
28787: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: PPUSH
28797: CALL_OW 302
28801: NOT
28802: PUSH
28803: LD_VAR 0 5
28807: PUSH
28808: LD_INT 1
28810: ARRAY
28811: PPUSH
28812: CALL_OW 255
28816: PUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 255
28826: NONEQUAL
28827: OR
28828: IFFALSE 28934
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28830: LD_VAR 0 5
28834: PUSH
28835: LD_INT 1
28837: ARRAY
28838: PPUSH
28839: CALL_OW 305
28843: PUSH
28844: LD_VAR 0 5
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PPUSH
28853: CALL_OW 255
28857: PUSH
28858: LD_VAR 0 1
28862: PPUSH
28863: CALL_OW 255
28867: EQUAL
28868: AND
28869: IFFALSE 28893
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28871: LD_VAR 0 5
28875: PUSH
28876: LD_INT 1
28878: ARRAY
28879: PPUSH
28880: LD_VAR 0 5
28884: PUSH
28885: LD_INT 2
28887: ARRAY
28888: PPUSH
28889: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28893: LD_ADDR_EXP 110
28897: PUSH
28898: LD_EXP 110
28902: PPUSH
28903: LD_VAR 0 4
28907: PPUSH
28908: LD_EXP 110
28912: PUSH
28913: LD_VAR 0 4
28917: ARRAY
28918: PPUSH
28919: LD_VAR 0 3
28923: PPUSH
28924: CALL_OW 3
28928: PPUSH
28929: CALL_OW 1
28933: ST_TO_ADDR
// end ; end ;
28934: GO 28763
28936: POP
28937: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28938: LD_VAR 0 1
28942: PPUSH
28943: LD_EXP 110
28947: PUSH
28948: LD_VAR 0 4
28952: ARRAY
28953: PUSH
28954: LD_INT 0
28956: PLUS
28957: PPUSH
28958: CALL_OW 505
// end ;
28962: LD_VAR 0 2
28966: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28967: LD_INT 0
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
// if not hack in hackTanks then
28973: LD_VAR 0 1
28977: PUSH
28978: LD_EXP 109
28982: IN
28983: NOT
28984: IFFALSE 28988
// exit ;
28986: GO 29073
// index := GetElementIndex ( hackTanks , hack ) ;
28988: LD_ADDR_VAR 0 5
28992: PUSH
28993: LD_EXP 109
28997: PPUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL 35831 0 2
29007: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29008: LD_ADDR_VAR 0 4
29012: PUSH
29013: DOUBLE
29014: LD_INT 1
29016: DEC
29017: ST_TO_ADDR
29018: LD_EXP 110
29022: PUSH
29023: LD_VAR 0 5
29027: ARRAY
29028: PUSH
29029: FOR_TO
29030: IFFALSE 29071
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29032: LD_EXP 110
29036: PUSH
29037: LD_VAR 0 5
29041: ARRAY
29042: PUSH
29043: LD_VAR 0 4
29047: ARRAY
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PUSH
29053: LD_VAR 0 2
29057: EQUAL
29058: IFFALSE 29069
// KillUnit ( vehicle ) ;
29060: LD_VAR 0 2
29064: PPUSH
29065: CALL_OW 66
29069: GO 29029
29071: POP
29072: POP
// end ;
29073: LD_VAR 0 3
29077: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29078: LD_EXP 114
29082: NOT
29083: IFFALSE 29118
29085: GO 29087
29087: DISABLE
// begin initMiner := true ;
29088: LD_ADDR_EXP 114
29092: PUSH
29093: LD_INT 1
29095: ST_TO_ADDR
// minersList := [ ] ;
29096: LD_ADDR_EXP 115
29100: PUSH
29101: EMPTY
29102: ST_TO_ADDR
// minerMinesList := [ ] ;
29103: LD_ADDR_EXP 116
29107: PUSH
29108: EMPTY
29109: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29110: LD_ADDR_EXP 117
29114: PUSH
29115: LD_INT 5
29117: ST_TO_ADDR
// end ;
29118: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29119: LD_EXP 114
29123: PUSH
29124: LD_INT 34
29126: PUSH
29127: LD_INT 81
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 69
29138: AND
29139: IFFALSE 29600
29141: GO 29143
29143: DISABLE
29144: LD_INT 0
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
// begin enable ;
29150: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29151: LD_ADDR_VAR 0 1
29155: PUSH
29156: LD_INT 34
29158: PUSH
29159: LD_INT 81
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: CALL_OW 69
29170: PUSH
29171: FOR_IN
29172: IFFALSE 29244
// begin if not i in minersList then
29174: LD_VAR 0 1
29178: PUSH
29179: LD_EXP 115
29183: IN
29184: NOT
29185: IFFALSE 29242
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29187: LD_ADDR_EXP 115
29191: PUSH
29192: LD_EXP 115
29196: PPUSH
29197: LD_EXP 115
29201: PUSH
29202: LD_INT 1
29204: PLUS
29205: PPUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 1
29215: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29216: LD_ADDR_EXP 116
29220: PUSH
29221: LD_EXP 116
29225: PPUSH
29226: LD_EXP 116
29230: PUSH
29231: LD_INT 1
29233: PLUS
29234: PPUSH
29235: EMPTY
29236: PPUSH
29237: CALL_OW 1
29241: ST_TO_ADDR
// end end ;
29242: GO 29171
29244: POP
29245: POP
// for i := minerMinesList downto 1 do
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: DOUBLE
29252: LD_EXP 116
29256: INC
29257: ST_TO_ADDR
29258: LD_INT 1
29260: PUSH
29261: FOR_DOWNTO
29262: IFFALSE 29598
// begin if IsLive ( minersList [ i ] ) then
29264: LD_EXP 115
29268: PUSH
29269: LD_VAR 0 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 300
29279: IFFALSE 29307
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29281: LD_EXP 115
29285: PUSH
29286: LD_VAR 0 1
29290: ARRAY
29291: PPUSH
29292: LD_EXP 116
29296: PUSH
29297: LD_VAR 0 1
29301: ARRAY
29302: PPUSH
29303: CALL_OW 505
// if not minerMinesList [ i ] then
29307: LD_EXP 116
29311: PUSH
29312: LD_VAR 0 1
29316: ARRAY
29317: NOT
29318: IFFALSE 29322
// continue ;
29320: GO 29261
// for j := minerMinesList [ i ] downto 1 do
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: DOUBLE
29328: LD_EXP 116
29332: PUSH
29333: LD_VAR 0 1
29337: ARRAY
29338: INC
29339: ST_TO_ADDR
29340: LD_INT 1
29342: PUSH
29343: FOR_DOWNTO
29344: IFFALSE 29594
// begin side := GetSide ( minersList [ i ] ) ;
29346: LD_ADDR_VAR 0 3
29350: PUSH
29351: LD_EXP 115
29355: PUSH
29356: LD_VAR 0 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 255
29366: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29367: LD_ADDR_VAR 0 4
29371: PUSH
29372: LD_EXP 116
29376: PUSH
29377: LD_VAR 0 1
29381: ARRAY
29382: PUSH
29383: LD_VAR 0 2
29387: ARRAY
29388: PUSH
29389: LD_INT 1
29391: ARRAY
29392: PPUSH
29393: LD_EXP 116
29397: PUSH
29398: LD_VAR 0 1
29402: ARRAY
29403: PUSH
29404: LD_VAR 0 2
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: PPUSH
29414: CALL_OW 428
29418: ST_TO_ADDR
// if not tmp then
29419: LD_VAR 0 4
29423: NOT
29424: IFFALSE 29428
// continue ;
29426: GO 29343
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29428: LD_VAR 0 4
29432: PUSH
29433: LD_INT 81
29435: PUSH
29436: LD_VAR 0 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PPUSH
29445: CALL_OW 69
29449: IN
29450: PUSH
29451: LD_EXP 116
29455: PUSH
29456: LD_VAR 0 1
29460: ARRAY
29461: PUSH
29462: LD_VAR 0 2
29466: ARRAY
29467: PUSH
29468: LD_INT 1
29470: ARRAY
29471: PPUSH
29472: LD_EXP 116
29476: PUSH
29477: LD_VAR 0 1
29481: ARRAY
29482: PUSH
29483: LD_VAR 0 2
29487: ARRAY
29488: PUSH
29489: LD_INT 2
29491: ARRAY
29492: PPUSH
29493: CALL_OW 458
29497: AND
29498: IFFALSE 29592
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29500: LD_EXP 116
29504: PUSH
29505: LD_VAR 0 1
29509: ARRAY
29510: PUSH
29511: LD_VAR 0 2
29515: ARRAY
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: LD_EXP 116
29525: PUSH
29526: LD_VAR 0 1
29530: ARRAY
29531: PUSH
29532: LD_VAR 0 2
29536: ARRAY
29537: PUSH
29538: LD_INT 2
29540: ARRAY
29541: PPUSH
29542: LD_VAR 0 3
29546: PPUSH
29547: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29551: LD_ADDR_EXP 116
29555: PUSH
29556: LD_EXP 116
29560: PPUSH
29561: LD_VAR 0 1
29565: PPUSH
29566: LD_EXP 116
29570: PUSH
29571: LD_VAR 0 1
29575: ARRAY
29576: PPUSH
29577: LD_VAR 0 2
29581: PPUSH
29582: CALL_OW 3
29586: PPUSH
29587: CALL_OW 1
29591: ST_TO_ADDR
// end ; end ;
29592: GO 29343
29594: POP
29595: POP
// end ;
29596: GO 29261
29598: POP
29599: POP
// end ;
29600: PPOPN 4
29602: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29603: LD_INT 0
29605: PPUSH
29606: PPUSH
// result := false ;
29607: LD_ADDR_VAR 0 4
29611: PUSH
29612: LD_INT 0
29614: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 264
29624: PUSH
29625: LD_INT 81
29627: EQUAL
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 29873
// index := GetElementIndex ( minersList , unit ) ;
29633: LD_ADDR_VAR 0 5
29637: PUSH
29638: LD_EXP 115
29642: PPUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL 35831 0 2
29652: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29653: LD_EXP 116
29657: PUSH
29658: LD_VAR 0 5
29662: ARRAY
29663: PUSH
29664: LD_EXP 117
29668: GREATEREQUAL
29669: IFFALSE 29673
// exit ;
29671: GO 29873
// ComMoveXY ( unit , x , y ) ;
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_VAR 0 2
29682: PPUSH
29683: LD_VAR 0 3
29687: PPUSH
29688: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29692: LD_INT 35
29694: PPUSH
29695: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29699: LD_VAR 0 1
29703: PPUSH
29704: LD_VAR 0 2
29708: PPUSH
29709: LD_VAR 0 3
29713: PPUSH
29714: CALL 67186 0 3
29718: NOT
29719: PUSH
29720: LD_VAR 0 1
29724: PPUSH
29725: CALL_OW 314
29729: AND
29730: IFFALSE 29734
// exit ;
29732: GO 29873
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29734: LD_VAR 0 2
29738: PPUSH
29739: LD_VAR 0 3
29743: PPUSH
29744: CALL_OW 428
29748: PUSH
29749: LD_VAR 0 1
29753: EQUAL
29754: PUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 314
29764: NOT
29765: AND
29766: IFFALSE 29692
// PlaySoundXY ( x , y , PlantMine ) ;
29768: LD_VAR 0 2
29772: PPUSH
29773: LD_VAR 0 3
29777: PPUSH
29778: LD_STRING PlantMine
29780: PPUSH
29781: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29785: LD_VAR 0 2
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 255
29804: PPUSH
29805: LD_INT 0
29807: PPUSH
29808: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29812: LD_ADDR_EXP 116
29816: PUSH
29817: LD_EXP 116
29821: PPUSH
29822: LD_VAR 0 5
29826: PUSH
29827: LD_EXP 116
29831: PUSH
29832: LD_VAR 0 5
29836: ARRAY
29837: PUSH
29838: LD_INT 1
29840: PLUS
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PPUSH
29846: LD_VAR 0 2
29850: PUSH
29851: LD_VAR 0 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL 36046 0 3
29864: ST_TO_ADDR
// result := true ;
29865: LD_ADDR_VAR 0 4
29869: PUSH
29870: LD_INT 1
29872: ST_TO_ADDR
// end ;
29873: LD_VAR 0 4
29877: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
29882: PPUSH
// if not unit in minersList then
29883: LD_VAR 0 1
29887: PUSH
29888: LD_EXP 115
29892: IN
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 30290
// index := GetElementIndex ( minersList , unit ) ;
29898: LD_ADDR_VAR 0 6
29902: PUSH
29903: LD_EXP 115
29907: PPUSH
29908: LD_VAR 0 1
29912: PPUSH
29913: CALL 35831 0 2
29917: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29918: LD_ADDR_VAR 0 5
29922: PUSH
29923: DOUBLE
29924: LD_EXP 116
29928: PUSH
29929: LD_VAR 0 6
29933: ARRAY
29934: INC
29935: ST_TO_ADDR
29936: LD_INT 1
29938: PUSH
29939: FOR_DOWNTO
29940: IFFALSE 30101
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29942: LD_EXP 116
29946: PUSH
29947: LD_VAR 0 6
29951: ARRAY
29952: PUSH
29953: LD_VAR 0 5
29957: ARRAY
29958: PUSH
29959: LD_INT 1
29961: ARRAY
29962: PUSH
29963: LD_VAR 0 2
29967: EQUAL
29968: PUSH
29969: LD_EXP 116
29973: PUSH
29974: LD_VAR 0 6
29978: ARRAY
29979: PUSH
29980: LD_VAR 0 5
29984: ARRAY
29985: PUSH
29986: LD_INT 2
29988: ARRAY
29989: PUSH
29990: LD_VAR 0 3
29994: EQUAL
29995: AND
29996: IFFALSE 30099
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29998: LD_EXP 116
30002: PUSH
30003: LD_VAR 0 6
30007: ARRAY
30008: PUSH
30009: LD_VAR 0 5
30013: ARRAY
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: LD_EXP 116
30023: PUSH
30024: LD_VAR 0 6
30028: ARRAY
30029: PUSH
30030: LD_VAR 0 5
30034: ARRAY
30035: PUSH
30036: LD_INT 2
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: PPUSH
30050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30054: LD_ADDR_EXP 116
30058: PUSH
30059: LD_EXP 116
30063: PPUSH
30064: LD_VAR 0 6
30068: PPUSH
30069: LD_EXP 116
30073: PUSH
30074: LD_VAR 0 6
30078: ARRAY
30079: PPUSH
30080: LD_VAR 0 5
30084: PPUSH
30085: CALL_OW 3
30089: PPUSH
30090: CALL_OW 1
30094: ST_TO_ADDR
// exit ;
30095: POP
30096: POP
30097: GO 30290
// end ; end ;
30099: GO 29939
30101: POP
30102: POP
// for i := minerMinesList [ index ] downto 1 do
30103: LD_ADDR_VAR 0 5
30107: PUSH
30108: DOUBLE
30109: LD_EXP 116
30113: PUSH
30114: LD_VAR 0 6
30118: ARRAY
30119: INC
30120: ST_TO_ADDR
30121: LD_INT 1
30123: PUSH
30124: FOR_DOWNTO
30125: IFFALSE 30288
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30127: LD_EXP 116
30131: PUSH
30132: LD_VAR 0 6
30136: ARRAY
30137: PUSH
30138: LD_VAR 0 5
30142: ARRAY
30143: PUSH
30144: LD_INT 1
30146: ARRAY
30147: PPUSH
30148: LD_EXP 116
30152: PUSH
30153: LD_VAR 0 6
30157: ARRAY
30158: PUSH
30159: LD_VAR 0 5
30163: ARRAY
30164: PUSH
30165: LD_INT 2
30167: ARRAY
30168: PPUSH
30169: LD_VAR 0 2
30173: PPUSH
30174: LD_VAR 0 3
30178: PPUSH
30179: CALL_OW 298
30183: PUSH
30184: LD_INT 6
30186: LESS
30187: IFFALSE 30286
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30189: LD_EXP 116
30193: PUSH
30194: LD_VAR 0 6
30198: ARRAY
30199: PUSH
30200: LD_VAR 0 5
30204: ARRAY
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: PPUSH
30210: LD_EXP 116
30214: PUSH
30215: LD_VAR 0 6
30219: ARRAY
30220: PUSH
30221: LD_VAR 0 5
30225: ARRAY
30226: PUSH
30227: LD_INT 2
30229: ARRAY
30230: PPUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 255
30240: PPUSH
30241: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30245: LD_ADDR_EXP 116
30249: PUSH
30250: LD_EXP 116
30254: PPUSH
30255: LD_VAR 0 6
30259: PPUSH
30260: LD_EXP 116
30264: PUSH
30265: LD_VAR 0 6
30269: ARRAY
30270: PPUSH
30271: LD_VAR 0 5
30275: PPUSH
30276: CALL_OW 3
30280: PPUSH
30281: CALL_OW 1
30285: ST_TO_ADDR
// end ; end ;
30286: GO 30124
30288: POP
30289: POP
// end ;
30290: LD_VAR 0 4
30294: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30295: LD_INT 0
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 264
30315: PUSH
30316: LD_INT 81
30318: EQUAL
30319: NOT
30320: PUSH
30321: LD_VAR 0 1
30325: PUSH
30326: LD_EXP 115
30330: IN
30331: NOT
30332: OR
30333: IFFALSE 30337
// exit ;
30335: GO 30659
// index := GetElementIndex ( minersList , unit ) ;
30337: LD_ADDR_VAR 0 6
30341: PUSH
30342: LD_EXP 115
30346: PPUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL 35831 0 2
30356: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30357: LD_ADDR_VAR 0 8
30361: PUSH
30362: LD_EXP 117
30366: PUSH
30367: LD_EXP 116
30371: PUSH
30372: LD_VAR 0 6
30376: ARRAY
30377: MINUS
30378: ST_TO_ADDR
// if not minesFreeAmount then
30379: LD_VAR 0 8
30383: NOT
30384: IFFALSE 30388
// exit ;
30386: GO 30659
// tmp := [ ] ;
30388: LD_ADDR_VAR 0 7
30392: PUSH
30393: EMPTY
30394: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30395: LD_ADDR_VAR 0 5
30399: PUSH
30400: DOUBLE
30401: LD_INT 1
30403: DEC
30404: ST_TO_ADDR
30405: LD_VAR 0 8
30409: PUSH
30410: FOR_TO
30411: IFFALSE 30606
// begin _d := rand ( 0 , 5 ) ;
30413: LD_ADDR_VAR 0 11
30417: PUSH
30418: LD_INT 0
30420: PPUSH
30421: LD_INT 5
30423: PPUSH
30424: CALL_OW 12
30428: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30429: LD_ADDR_VAR 0 12
30433: PUSH
30434: LD_INT 2
30436: PPUSH
30437: LD_INT 6
30439: PPUSH
30440: CALL_OW 12
30444: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30445: LD_ADDR_VAR 0 9
30449: PUSH
30450: LD_VAR 0 2
30454: PPUSH
30455: LD_VAR 0 11
30459: PPUSH
30460: LD_VAR 0 12
30464: PPUSH
30465: CALL_OW 272
30469: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30470: LD_ADDR_VAR 0 10
30474: PUSH
30475: LD_VAR 0 3
30479: PPUSH
30480: LD_VAR 0 11
30484: PPUSH
30485: LD_VAR 0 12
30489: PPUSH
30490: CALL_OW 273
30494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30495: LD_VAR 0 9
30499: PPUSH
30500: LD_VAR 0 10
30504: PPUSH
30505: CALL_OW 488
30509: PUSH
30510: LD_VAR 0 9
30514: PUSH
30515: LD_VAR 0 10
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_VAR 0 7
30528: IN
30529: NOT
30530: AND
30531: PUSH
30532: LD_VAR 0 9
30536: PPUSH
30537: LD_VAR 0 10
30541: PPUSH
30542: CALL_OW 458
30546: NOT
30547: AND
30548: IFFALSE 30590
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30550: LD_ADDR_VAR 0 7
30554: PUSH
30555: LD_VAR 0 7
30559: PPUSH
30560: LD_VAR 0 7
30564: PUSH
30565: LD_INT 1
30567: PLUS
30568: PPUSH
30569: LD_VAR 0 9
30573: PUSH
30574: LD_VAR 0 10
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
30588: GO 30604
// i := i - 1 ;
30590: LD_ADDR_VAR 0 5
30594: PUSH
30595: LD_VAR 0 5
30599: PUSH
30600: LD_INT 1
30602: MINUS
30603: ST_TO_ADDR
// end ;
30604: GO 30410
30606: POP
30607: POP
// for i in tmp do
30608: LD_ADDR_VAR 0 5
30612: PUSH
30613: LD_VAR 0 7
30617: PUSH
30618: FOR_IN
30619: IFFALSE 30657
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30621: LD_VAR 0 1
30625: PPUSH
30626: LD_VAR 0 5
30630: PUSH
30631: LD_INT 1
30633: ARRAY
30634: PPUSH
30635: LD_VAR 0 5
30639: PUSH
30640: LD_INT 2
30642: ARRAY
30643: PPUSH
30644: CALL 29603 0 3
30648: NOT
30649: IFFALSE 30655
// exit ;
30651: POP
30652: POP
30653: GO 30659
30655: GO 30618
30657: POP
30658: POP
// end ;
30659: LD_VAR 0 4
30663: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30664: LD_INT 0
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
// if not GetClass ( unit ) = class_sniper then
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL_OW 257
30682: PUSH
30683: LD_INT 5
30685: EQUAL
30686: NOT
30687: IFFALSE 30691
// exit ;
30689: GO 31079
// dist := 8 ;
30691: LD_ADDR_VAR 0 5
30695: PUSH
30696: LD_INT 8
30698: ST_TO_ADDR
// viewRange := 12 ;
30699: LD_ADDR_VAR 0 7
30703: PUSH
30704: LD_INT 12
30706: ST_TO_ADDR
// side := GetSide ( unit ) ;
30707: LD_ADDR_VAR 0 6
30711: PUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: CALL_OW 255
30721: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30722: LD_INT 61
30724: PPUSH
30725: LD_VAR 0 6
30729: PPUSH
30730: CALL_OW 321
30734: PUSH
30735: LD_INT 2
30737: EQUAL
30738: IFFALSE 30748
// viewRange := 16 ;
30740: LD_ADDR_VAR 0 7
30744: PUSH
30745: LD_INT 16
30747: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_VAR 0 2
30757: PPUSH
30758: LD_VAR 0 3
30762: PPUSH
30763: CALL_OW 297
30767: PUSH
30768: LD_VAR 0 5
30772: GREATER
30773: IFFALSE 30852
// begin ComMoveXY ( unit , x , y ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_VAR 0 2
30784: PPUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30794: LD_INT 35
30796: PPUSH
30797: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30801: LD_VAR 0 1
30805: PPUSH
30806: LD_VAR 0 2
30810: PPUSH
30811: LD_VAR 0 3
30815: PPUSH
30816: CALL 67186 0 3
30820: NOT
30821: IFFALSE 30825
// exit ;
30823: GO 31079
// until GetDistUnitXY ( unit , x , y ) < dist ;
30825: LD_VAR 0 1
30829: PPUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: LD_VAR 0 3
30839: PPUSH
30840: CALL_OW 297
30844: PUSH
30845: LD_VAR 0 5
30849: LESS
30850: IFFALSE 30794
// end ; ComTurnXY ( unit , x , y ) ;
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_VAR 0 3
30866: PPUSH
30867: CALL_OW 118
// wait ( 5 ) ;
30871: LD_INT 5
30873: PPUSH
30874: CALL_OW 67
// _d := GetDir ( unit ) ;
30878: LD_ADDR_VAR 0 10
30882: PUSH
30883: LD_VAR 0 1
30887: PPUSH
30888: CALL_OW 254
30892: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 250
30907: PPUSH
30908: LD_VAR 0 10
30912: PPUSH
30913: LD_VAR 0 5
30917: PPUSH
30918: CALL_OW 272
30922: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30923: LD_ADDR_VAR 0 9
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 251
30937: PPUSH
30938: LD_VAR 0 10
30942: PPUSH
30943: LD_VAR 0 5
30947: PPUSH
30948: CALL_OW 273
30952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30953: LD_VAR 0 8
30957: PPUSH
30958: LD_VAR 0 9
30962: PPUSH
30963: CALL_OW 488
30967: NOT
30968: IFFALSE 30972
// exit ;
30970: GO 31079
// ComAnimCustom ( unit , 1 ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30984: LD_VAR 0 8
30988: PPUSH
30989: LD_VAR 0 9
30993: PPUSH
30994: LD_VAR 0 6
30998: PPUSH
30999: LD_VAR 0 7
31003: PPUSH
31004: CALL_OW 330
// repeat wait ( 1 ) ;
31008: LD_INT 1
31010: PPUSH
31011: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31015: LD_VAR 0 1
31019: PPUSH
31020: CALL_OW 316
31024: PUSH
31025: LD_VAR 0 1
31029: PPUSH
31030: CALL_OW 314
31034: OR
31035: PUSH
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 302
31045: NOT
31046: OR
31047: PUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: CALL_OW 301
31057: OR
31058: IFFALSE 31008
// RemoveSeeing ( _x , _y , side ) ;
31060: LD_VAR 0 8
31064: PPUSH
31065: LD_VAR 0 9
31069: PPUSH
31070: LD_VAR 0 6
31074: PPUSH
31075: CALL_OW 331
// end ; end_of_file
31079: LD_VAR 0 4
31083: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31084: LD_INT 0
31086: PPUSH
31087: PPUSH
// if exist_mode then
31088: LD_VAR 0 2
31092: IFFALSE 31117
// unit := CreateCharacter ( prefix & ident ) else
31094: LD_ADDR_VAR 0 5
31098: PUSH
31099: LD_VAR 0 3
31103: PUSH
31104: LD_VAR 0 1
31108: STR
31109: PPUSH
31110: CALL_OW 34
31114: ST_TO_ADDR
31115: GO 31132
// unit := NewCharacter ( ident ) ;
31117: LD_ADDR_VAR 0 5
31121: PUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 25
31131: ST_TO_ADDR
// result := unit ;
31132: LD_ADDR_VAR 0 4
31136: PUSH
31137: LD_VAR 0 5
31141: ST_TO_ADDR
// end ;
31142: LD_VAR 0 4
31146: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31147: LD_INT 0
31149: PPUSH
31150: PPUSH
// if not side or not nation then
31151: LD_VAR 0 1
31155: NOT
31156: PUSH
31157: LD_VAR 0 2
31161: NOT
31162: OR
31163: IFFALSE 31167
// exit ;
31165: GO 31935
// case nation of nation_american :
31167: LD_VAR 0 2
31171: PUSH
31172: LD_INT 1
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31394
31180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31181: LD_ADDR_VAR 0 4
31185: PUSH
31186: LD_INT 35
31188: PUSH
31189: LD_INT 45
31191: PUSH
31192: LD_INT 46
31194: PUSH
31195: LD_INT 47
31197: PUSH
31198: LD_INT 82
31200: PUSH
31201: LD_INT 83
31203: PUSH
31204: LD_INT 84
31206: PUSH
31207: LD_INT 85
31209: PUSH
31210: LD_INT 86
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 6
31221: PUSH
31222: LD_INT 15
31224: PUSH
31225: LD_INT 16
31227: PUSH
31228: LD_INT 7
31230: PUSH
31231: LD_INT 12
31233: PUSH
31234: LD_INT 13
31236: PUSH
31237: LD_INT 10
31239: PUSH
31240: LD_INT 14
31242: PUSH
31243: LD_INT 20
31245: PUSH
31246: LD_INT 21
31248: PUSH
31249: LD_INT 22
31251: PUSH
31252: LD_INT 25
31254: PUSH
31255: LD_INT 32
31257: PUSH
31258: LD_INT 27
31260: PUSH
31261: LD_INT 36
31263: PUSH
31264: LD_INT 69
31266: PUSH
31267: LD_INT 39
31269: PUSH
31270: LD_INT 34
31272: PUSH
31273: LD_INT 40
31275: PUSH
31276: LD_INT 48
31278: PUSH
31279: LD_INT 49
31281: PUSH
31282: LD_INT 50
31284: PUSH
31285: LD_INT 51
31287: PUSH
31288: LD_INT 52
31290: PUSH
31291: LD_INT 53
31293: PUSH
31294: LD_INT 54
31296: PUSH
31297: LD_INT 55
31299: PUSH
31300: LD_INT 56
31302: PUSH
31303: LD_INT 57
31305: PUSH
31306: LD_INT 58
31308: PUSH
31309: LD_INT 59
31311: PUSH
31312: LD_INT 60
31314: PUSH
31315: LD_INT 61
31317: PUSH
31318: LD_INT 62
31320: PUSH
31321: LD_INT 80
31323: PUSH
31324: LD_INT 82
31326: PUSH
31327: LD_INT 83
31329: PUSH
31330: LD_INT 84
31332: PUSH
31333: LD_INT 85
31335: PUSH
31336: LD_INT 86
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31859
31394: LD_INT 2
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31628
31402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31403: LD_ADDR_VAR 0 4
31407: PUSH
31408: LD_INT 35
31410: PUSH
31411: LD_INT 45
31413: PUSH
31414: LD_INT 46
31416: PUSH
31417: LD_INT 47
31419: PUSH
31420: LD_INT 82
31422: PUSH
31423: LD_INT 83
31425: PUSH
31426: LD_INT 84
31428: PUSH
31429: LD_INT 85
31431: PUSH
31432: LD_INT 87
31434: PUSH
31435: LD_INT 70
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 11
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: LD_INT 4
31449: PUSH
31450: LD_INT 5
31452: PUSH
31453: LD_INT 6
31455: PUSH
31456: LD_INT 15
31458: PUSH
31459: LD_INT 18
31461: PUSH
31462: LD_INT 7
31464: PUSH
31465: LD_INT 17
31467: PUSH
31468: LD_INT 8
31470: PUSH
31471: LD_INT 20
31473: PUSH
31474: LD_INT 21
31476: PUSH
31477: LD_INT 22
31479: PUSH
31480: LD_INT 72
31482: PUSH
31483: LD_INT 26
31485: PUSH
31486: LD_INT 69
31488: PUSH
31489: LD_INT 39
31491: PUSH
31492: LD_INT 40
31494: PUSH
31495: LD_INT 41
31497: PUSH
31498: LD_INT 42
31500: PUSH
31501: LD_INT 43
31503: PUSH
31504: LD_INT 48
31506: PUSH
31507: LD_INT 49
31509: PUSH
31510: LD_INT 50
31512: PUSH
31513: LD_INT 51
31515: PUSH
31516: LD_INT 52
31518: PUSH
31519: LD_INT 53
31521: PUSH
31522: LD_INT 54
31524: PUSH
31525: LD_INT 55
31527: PUSH
31528: LD_INT 56
31530: PUSH
31531: LD_INT 60
31533: PUSH
31534: LD_INT 61
31536: PUSH
31537: LD_INT 62
31539: PUSH
31540: LD_INT 66
31542: PUSH
31543: LD_INT 67
31545: PUSH
31546: LD_INT 68
31548: PUSH
31549: LD_INT 81
31551: PUSH
31552: LD_INT 82
31554: PUSH
31555: LD_INT 83
31557: PUSH
31558: LD_INT 84
31560: PUSH
31561: LD_INT 85
31563: PUSH
31564: LD_INT 87
31566: PUSH
31567: LD_INT 88
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
31626: GO 31859
31628: LD_INT 3
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31858
31636: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31637: LD_ADDR_VAR 0 4
31641: PUSH
31642: LD_INT 46
31644: PUSH
31645: LD_INT 47
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: LD_INT 82
31656: PUSH
31657: LD_INT 83
31659: PUSH
31660: LD_INT 84
31662: PUSH
31663: LD_INT 85
31665: PUSH
31666: LD_INT 86
31668: PUSH
31669: LD_INT 11
31671: PUSH
31672: LD_INT 9
31674: PUSH
31675: LD_INT 20
31677: PUSH
31678: LD_INT 19
31680: PUSH
31681: LD_INT 21
31683: PUSH
31684: LD_INT 24
31686: PUSH
31687: LD_INT 22
31689: PUSH
31690: LD_INT 25
31692: PUSH
31693: LD_INT 28
31695: PUSH
31696: LD_INT 29
31698: PUSH
31699: LD_INT 30
31701: PUSH
31702: LD_INT 31
31704: PUSH
31705: LD_INT 37
31707: PUSH
31708: LD_INT 38
31710: PUSH
31711: LD_INT 32
31713: PUSH
31714: LD_INT 27
31716: PUSH
31717: LD_INT 33
31719: PUSH
31720: LD_INT 69
31722: PUSH
31723: LD_INT 39
31725: PUSH
31726: LD_INT 34
31728: PUSH
31729: LD_INT 40
31731: PUSH
31732: LD_INT 71
31734: PUSH
31735: LD_INT 23
31737: PUSH
31738: LD_INT 44
31740: PUSH
31741: LD_INT 48
31743: PUSH
31744: LD_INT 49
31746: PUSH
31747: LD_INT 50
31749: PUSH
31750: LD_INT 51
31752: PUSH
31753: LD_INT 52
31755: PUSH
31756: LD_INT 53
31758: PUSH
31759: LD_INT 54
31761: PUSH
31762: LD_INT 55
31764: PUSH
31765: LD_INT 56
31767: PUSH
31768: LD_INT 57
31770: PUSH
31771: LD_INT 58
31773: PUSH
31774: LD_INT 59
31776: PUSH
31777: LD_INT 63
31779: PUSH
31780: LD_INT 64
31782: PUSH
31783: LD_INT 65
31785: PUSH
31786: LD_INT 82
31788: PUSH
31789: LD_INT 83
31791: PUSH
31792: LD_INT 84
31794: PUSH
31795: LD_INT 85
31797: PUSH
31798: LD_INT 86
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
31856: GO 31859
31858: POP
// if state > - 1 and state < 3 then
31859: LD_VAR 0 3
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: GREATER
31868: PUSH
31869: LD_VAR 0 3
31873: PUSH
31874: LD_INT 3
31876: LESS
31877: AND
31878: IFFALSE 31935
// for i in result do
31880: LD_ADDR_VAR 0 5
31884: PUSH
31885: LD_VAR 0 4
31889: PUSH
31890: FOR_IN
31891: IFFALSE 31933
// if GetTech ( i , side ) <> state then
31893: LD_VAR 0 5
31897: PPUSH
31898: LD_VAR 0 1
31902: PPUSH
31903: CALL_OW 321
31907: PUSH
31908: LD_VAR 0 3
31912: NONEQUAL
31913: IFFALSE 31931
// result := result diff i ;
31915: LD_ADDR_VAR 0 4
31919: PUSH
31920: LD_VAR 0 4
31924: PUSH
31925: LD_VAR 0 5
31929: DIFF
31930: ST_TO_ADDR
31931: GO 31890
31933: POP
31934: POP
// end ;
31935: LD_VAR 0 4
31939: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31940: LD_INT 0
31942: PPUSH
31943: PPUSH
31944: PPUSH
// result := true ;
31945: LD_ADDR_VAR 0 3
31949: PUSH
31950: LD_INT 1
31952: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31953: LD_ADDR_VAR 0 5
31957: PUSH
31958: LD_VAR 0 2
31962: PPUSH
31963: CALL_OW 480
31967: ST_TO_ADDR
// if not tmp then
31968: LD_VAR 0 5
31972: NOT
31973: IFFALSE 31977
// exit ;
31975: GO 32026
// for i in tmp do
31977: LD_ADDR_VAR 0 4
31981: PUSH
31982: LD_VAR 0 5
31986: PUSH
31987: FOR_IN
31988: IFFALSE 32024
// if GetTech ( i , side ) <> state_researched then
31990: LD_VAR 0 4
31994: PPUSH
31995: LD_VAR 0 1
31999: PPUSH
32000: CALL_OW 321
32004: PUSH
32005: LD_INT 2
32007: NONEQUAL
32008: IFFALSE 32022
// begin result := false ;
32010: LD_ADDR_VAR 0 3
32014: PUSH
32015: LD_INT 0
32017: ST_TO_ADDR
// exit ;
32018: POP
32019: POP
32020: GO 32026
// end ;
32022: GO 31987
32024: POP
32025: POP
// end ;
32026: LD_VAR 0 3
32030: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32031: LD_INT 0
32033: PPUSH
32034: PPUSH
32035: PPUSH
32036: PPUSH
32037: PPUSH
32038: PPUSH
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32046: LD_VAR 0 1
32050: NOT
32051: PUSH
32052: LD_VAR 0 1
32056: PPUSH
32057: CALL_OW 257
32061: PUSH
32062: LD_INT 9
32064: NONEQUAL
32065: OR
32066: IFFALSE 32070
// exit ;
32068: GO 32643
// side := GetSide ( unit ) ;
32070: LD_ADDR_VAR 0 9
32074: PUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: CALL_OW 255
32084: ST_TO_ADDR
// tech_space := tech_spacanom ;
32085: LD_ADDR_VAR 0 12
32089: PUSH
32090: LD_INT 29
32092: ST_TO_ADDR
// tech_time := tech_taurad ;
32093: LD_ADDR_VAR 0 13
32097: PUSH
32098: LD_INT 28
32100: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32101: LD_ADDR_VAR 0 11
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 310
32115: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32116: LD_VAR 0 11
32120: PPUSH
32121: CALL_OW 247
32125: PUSH
32126: LD_INT 2
32128: EQUAL
32129: IFFALSE 32133
// exit ;
32131: GO 32643
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32133: LD_ADDR_VAR 0 8
32137: PUSH
32138: LD_INT 81
32140: PUSH
32141: LD_VAR 0 9
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 21
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 69
32175: ST_TO_ADDR
// if not tmp then
32176: LD_VAR 0 8
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32643
// if in_unit then
32185: LD_VAR 0 11
32189: IFFALSE 32213
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32191: LD_ADDR_VAR 0 10
32195: PUSH
32196: LD_VAR 0 8
32200: PPUSH
32201: LD_VAR 0 11
32205: PPUSH
32206: CALL_OW 74
32210: ST_TO_ADDR
32211: GO 32233
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32213: LD_ADDR_VAR 0 10
32217: PUSH
32218: LD_VAR 0 8
32222: PPUSH
32223: LD_VAR 0 1
32227: PPUSH
32228: CALL_OW 74
32232: ST_TO_ADDR
// if not enemy then
32233: LD_VAR 0 10
32237: NOT
32238: IFFALSE 32242
// exit ;
32240: GO 32643
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32242: LD_VAR 0 11
32246: PUSH
32247: LD_VAR 0 11
32251: PPUSH
32252: LD_VAR 0 10
32256: PPUSH
32257: CALL_OW 296
32261: PUSH
32262: LD_INT 13
32264: GREATER
32265: AND
32266: PUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: LD_VAR 0 10
32276: PPUSH
32277: CALL_OW 296
32281: PUSH
32282: LD_INT 12
32284: GREATER
32285: OR
32286: IFFALSE 32290
// exit ;
32288: GO 32643
// missile := [ 1 ] ;
32290: LD_ADDR_VAR 0 14
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32301: LD_VAR 0 9
32305: PPUSH
32306: LD_VAR 0 12
32310: PPUSH
32311: CALL_OW 325
32315: IFFALSE 32344
// missile := Replace ( missile , missile + 1 , 2 ) ;
32317: LD_ADDR_VAR 0 14
32321: PUSH
32322: LD_VAR 0 14
32326: PPUSH
32327: LD_VAR 0 14
32331: PUSH
32332: LD_INT 1
32334: PLUS
32335: PPUSH
32336: LD_INT 2
32338: PPUSH
32339: CALL_OW 1
32343: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32344: LD_VAR 0 9
32348: PPUSH
32349: LD_VAR 0 13
32353: PPUSH
32354: CALL_OW 325
32358: PUSH
32359: LD_VAR 0 10
32363: PPUSH
32364: CALL_OW 255
32368: PPUSH
32369: LD_VAR 0 13
32373: PPUSH
32374: CALL_OW 325
32378: NOT
32379: AND
32380: IFFALSE 32409
// missile := Replace ( missile , missile + 1 , 3 ) ;
32382: LD_ADDR_VAR 0 14
32386: PUSH
32387: LD_VAR 0 14
32391: PPUSH
32392: LD_VAR 0 14
32396: PUSH
32397: LD_INT 1
32399: PLUS
32400: PPUSH
32401: LD_INT 3
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// if missile < 2 then
32409: LD_VAR 0 14
32413: PUSH
32414: LD_INT 2
32416: LESS
32417: IFFALSE 32421
// exit ;
32419: GO 32643
// x := GetX ( enemy ) ;
32421: LD_ADDR_VAR 0 4
32425: PUSH
32426: LD_VAR 0 10
32430: PPUSH
32431: CALL_OW 250
32435: ST_TO_ADDR
// y := GetY ( enemy ) ;
32436: LD_ADDR_VAR 0 5
32440: PUSH
32441: LD_VAR 0 10
32445: PPUSH
32446: CALL_OW 251
32450: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32451: LD_ADDR_VAR 0 6
32455: PUSH
32456: LD_VAR 0 4
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PPUSH
32465: LD_INT 1
32467: PPUSH
32468: CALL_OW 12
32472: PLUS
32473: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32474: LD_ADDR_VAR 0 7
32478: PUSH
32479: LD_VAR 0 5
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PPUSH
32488: LD_INT 1
32490: PPUSH
32491: CALL_OW 12
32495: PLUS
32496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32497: LD_VAR 0 6
32501: PPUSH
32502: LD_VAR 0 7
32506: PPUSH
32507: CALL_OW 488
32511: NOT
32512: IFFALSE 32534
// begin _x := x ;
32514: LD_ADDR_VAR 0 6
32518: PUSH
32519: LD_VAR 0 4
32523: ST_TO_ADDR
// _y := y ;
32524: LD_ADDR_VAR 0 7
32528: PUSH
32529: LD_VAR 0 5
32533: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32534: LD_ADDR_VAR 0 3
32538: PUSH
32539: LD_INT 1
32541: PPUSH
32542: LD_VAR 0 14
32546: PPUSH
32547: CALL_OW 12
32551: ST_TO_ADDR
// case i of 1 :
32552: LD_VAR 0 3
32556: PUSH
32557: LD_INT 1
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32582
32565: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32566: LD_VAR 0 1
32570: PPUSH
32571: LD_VAR 0 10
32575: PPUSH
32576: CALL_OW 115
32580: GO 32643
32582: LD_INT 2
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32612
32590: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_VAR 0 6
32600: PPUSH
32601: LD_VAR 0 7
32605: PPUSH
32606: CALL_OW 153
32610: GO 32643
32612: LD_INT 3
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32642
32620: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32621: LD_VAR 0 1
32625: PPUSH
32626: LD_VAR 0 6
32630: PPUSH
32631: LD_VAR 0 7
32635: PPUSH
32636: CALL_OW 154
32640: GO 32643
32642: POP
// end ;
32643: LD_VAR 0 2
32647: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32648: LD_INT 0
32650: PPUSH
32651: PPUSH
32652: PPUSH
32653: PPUSH
32654: PPUSH
32655: PPUSH
// if not unit or not building then
32656: LD_VAR 0 1
32660: NOT
32661: PUSH
32662: LD_VAR 0 2
32666: NOT
32667: OR
32668: IFFALSE 32672
// exit ;
32670: GO 32830
// x := GetX ( building ) ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_VAR 0 2
32681: PPUSH
32682: CALL_OW 250
32686: ST_TO_ADDR
// y := GetY ( building ) ;
32687: LD_ADDR_VAR 0 6
32691: PUSH
32692: LD_VAR 0 2
32696: PPUSH
32697: CALL_OW 251
32701: ST_TO_ADDR
// for i = 0 to 5 do
32702: LD_ADDR_VAR 0 4
32706: PUSH
32707: DOUBLE
32708: LD_INT 0
32710: DEC
32711: ST_TO_ADDR
32712: LD_INT 5
32714: PUSH
32715: FOR_TO
32716: IFFALSE 32828
// begin _x := ShiftX ( x , i , 3 ) ;
32718: LD_ADDR_VAR 0 7
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_INT 3
32735: PPUSH
32736: CALL_OW 272
32740: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32741: LD_ADDR_VAR 0 8
32745: PUSH
32746: LD_VAR 0 6
32750: PPUSH
32751: LD_VAR 0 4
32755: PPUSH
32756: LD_INT 3
32758: PPUSH
32759: CALL_OW 273
32763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32764: LD_VAR 0 7
32768: PPUSH
32769: LD_VAR 0 8
32773: PPUSH
32774: CALL_OW 488
32778: NOT
32779: IFFALSE 32783
// continue ;
32781: GO 32715
// if HexInfo ( _x , _y ) = 0 then
32783: LD_VAR 0 7
32787: PPUSH
32788: LD_VAR 0 8
32792: PPUSH
32793: CALL_OW 428
32797: PUSH
32798: LD_INT 0
32800: EQUAL
32801: IFFALSE 32826
// begin ComMoveXY ( unit , _x , _y ) ;
32803: LD_VAR 0 1
32807: PPUSH
32808: LD_VAR 0 7
32812: PPUSH
32813: LD_VAR 0 8
32817: PPUSH
32818: CALL_OW 111
// exit ;
32822: POP
32823: POP
32824: GO 32830
// end ; end ;
32826: GO 32715
32828: POP
32829: POP
// end ;
32830: LD_VAR 0 3
32834: RET
// export function ScanBase ( side , base_area ) ; begin
32835: LD_INT 0
32837: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_INT 81
32850: PUSH
32851: LD_VAR 0 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PPUSH
32860: CALL_OW 70
32864: ST_TO_ADDR
// end ;
32865: LD_VAR 0 3
32869: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
32874: PPUSH
32875: PPUSH
// result := false ;
32876: LD_ADDR_VAR 0 2
32880: PUSH
32881: LD_INT 0
32883: ST_TO_ADDR
// side := GetSide ( unit ) ;
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL_OW 255
32898: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: LD_VAR 0 1
32908: PPUSH
32909: CALL_OW 248
32913: ST_TO_ADDR
// case nat of 1 :
32914: LD_VAR 0 4
32918: PUSH
32919: LD_INT 1
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32938
32927: POP
// tech := tech_lassight ; 2 :
32928: LD_ADDR_VAR 0 5
32932: PUSH
32933: LD_INT 12
32935: ST_TO_ADDR
32936: GO 32977
32938: LD_INT 2
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32957
32946: POP
// tech := tech_mortar ; 3 :
32947: LD_ADDR_VAR 0 5
32951: PUSH
32952: LD_INT 41
32954: ST_TO_ADDR
32955: GO 32977
32957: LD_INT 3
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32976
32965: POP
// tech := tech_bazooka ; end ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_INT 44
32973: ST_TO_ADDR
32974: GO 32977
32976: POP
// if Researched ( side , tech ) then
32977: LD_VAR 0 3
32981: PPUSH
32982: LD_VAR 0 5
32986: PPUSH
32987: CALL_OW 325
32991: IFFALSE 33018
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: LD_INT 5
33000: PUSH
33001: LD_INT 8
33003: PUSH
33004: LD_INT 9
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: PUSH
33012: LD_VAR 0 4
33016: ARRAY
33017: ST_TO_ADDR
// end ;
33018: LD_VAR 0 2
33022: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33023: LD_INT 0
33025: PPUSH
33026: PPUSH
33027: PPUSH
// if not mines then
33028: LD_VAR 0 2
33032: NOT
33033: IFFALSE 33037
// exit ;
33035: GO 33181
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33037: LD_ADDR_VAR 0 5
33041: PUSH
33042: LD_INT 81
33044: PUSH
33045: LD_VAR 0 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: LD_INT 21
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PPUSH
33075: CALL_OW 69
33079: ST_TO_ADDR
// for i in mines do
33080: LD_ADDR_VAR 0 4
33084: PUSH
33085: LD_VAR 0 2
33089: PUSH
33090: FOR_IN
33091: IFFALSE 33179
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33093: LD_VAR 0 4
33097: PUSH
33098: LD_INT 1
33100: ARRAY
33101: PPUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 2
33109: ARRAY
33110: PPUSH
33111: CALL_OW 458
33115: NOT
33116: IFFALSE 33120
// continue ;
33118: GO 33090
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33120: LD_VAR 0 4
33124: PUSH
33125: LD_INT 1
33127: ARRAY
33128: PPUSH
33129: LD_VAR 0 4
33133: PUSH
33134: LD_INT 2
33136: ARRAY
33137: PPUSH
33138: CALL_OW 428
33142: PUSH
33143: LD_VAR 0 5
33147: IN
33148: IFFALSE 33177
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33150: LD_VAR 0 4
33154: PUSH
33155: LD_INT 1
33157: ARRAY
33158: PPUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: PPUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 456
// end ;
33177: GO 33090
33179: POP
33180: POP
// end ;
33181: LD_VAR 0 3
33185: RET
// export function Count ( array ) ; begin
33186: LD_INT 0
33188: PPUSH
// result := array + 0 ;
33189: LD_ADDR_VAR 0 2
33193: PUSH
33194: LD_VAR 0 1
33198: PUSH
33199: LD_INT 0
33201: PLUS
33202: ST_TO_ADDR
// end ;
33203: LD_VAR 0 2
33207: RET
// export function IsEmpty ( building ) ; begin
33208: LD_INT 0
33210: PPUSH
// if not building then
33211: LD_VAR 0 1
33215: NOT
33216: IFFALSE 33220
// exit ;
33218: GO 33263
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33220: LD_ADDR_VAR 0 2
33224: PUSH
33225: LD_VAR 0 1
33229: PUSH
33230: LD_INT 22
33232: PUSH
33233: LD_VAR 0 1
33237: PPUSH
33238: CALL_OW 255
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 58
33249: PUSH
33250: EMPTY
33251: LIST
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PPUSH
33257: CALL_OW 69
33261: IN
33262: ST_TO_ADDR
// end ;
33263: LD_VAR 0 2
33267: RET
// export function IsNotFull ( building ) ; var places ; begin
33268: LD_INT 0
33270: PPUSH
33271: PPUSH
// if not building then
33272: LD_VAR 0 1
33276: NOT
33277: IFFALSE 33281
// exit ;
33279: GO 33309
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33281: LD_ADDR_VAR 0 2
33285: PUSH
33286: LD_VAR 0 1
33290: PPUSH
33291: LD_INT 3
33293: PUSH
33294: LD_INT 62
33296: PUSH
33297: EMPTY
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PPUSH
33304: CALL_OW 72
33308: ST_TO_ADDR
// end ;
33309: LD_VAR 0 2
33313: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33314: LD_INT 0
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
// tmp := [ ] ;
33320: LD_ADDR_VAR 0 3
33324: PUSH
33325: EMPTY
33326: ST_TO_ADDR
// list := [ ] ;
33327: LD_ADDR_VAR 0 5
33331: PUSH
33332: EMPTY
33333: ST_TO_ADDR
// for i = 16 to 25 do
33334: LD_ADDR_VAR 0 4
33338: PUSH
33339: DOUBLE
33340: LD_INT 16
33342: DEC
33343: ST_TO_ADDR
33344: LD_INT 25
33346: PUSH
33347: FOR_TO
33348: IFFALSE 33421
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_VAR 0 3
33359: PUSH
33360: LD_INT 22
33362: PUSH
33363: LD_VAR 0 1
33367: PPUSH
33368: CALL_OW 255
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 91
33379: PUSH
33380: LD_VAR 0 1
33384: PUSH
33385: LD_INT 6
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 30
33395: PUSH
33396: LD_VAR 0 4
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: PPUSH
33413: CALL_OW 69
33417: ADD
33418: ST_TO_ADDR
33419: GO 33347
33421: POP
33422: POP
// for i = 1 to tmp do
33423: LD_ADDR_VAR 0 4
33427: PUSH
33428: DOUBLE
33429: LD_INT 1
33431: DEC
33432: ST_TO_ADDR
33433: LD_VAR 0 3
33437: PUSH
33438: FOR_TO
33439: IFFALSE 33527
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33441: LD_ADDR_VAR 0 5
33445: PUSH
33446: LD_VAR 0 5
33450: PUSH
33451: LD_VAR 0 3
33455: PUSH
33456: LD_VAR 0 4
33460: ARRAY
33461: PPUSH
33462: CALL_OW 266
33466: PUSH
33467: LD_VAR 0 3
33471: PUSH
33472: LD_VAR 0 4
33476: ARRAY
33477: PPUSH
33478: CALL_OW 250
33482: PUSH
33483: LD_VAR 0 3
33487: PUSH
33488: LD_VAR 0 4
33492: ARRAY
33493: PPUSH
33494: CALL_OW 251
33498: PUSH
33499: LD_VAR 0 3
33503: PUSH
33504: LD_VAR 0 4
33508: ARRAY
33509: PPUSH
33510: CALL_OW 254
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: ADD
33524: ST_TO_ADDR
33525: GO 33438
33527: POP
33528: POP
// result := list ;
33529: LD_ADDR_VAR 0 2
33533: PUSH
33534: LD_VAR 0 5
33538: ST_TO_ADDR
// end ;
33539: LD_VAR 0 2
33543: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
33548: PPUSH
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
// if not factory then
33553: LD_VAR 0 1
33557: NOT
33558: IFFALSE 33562
// exit ;
33560: GO 34155
// if control = control_apeman then
33562: LD_VAR 0 4
33566: PUSH
33567: LD_INT 5
33569: EQUAL
33570: IFFALSE 33679
// begin tmp := UnitsInside ( factory ) ;
33572: LD_ADDR_VAR 0 8
33576: PUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 313
33586: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33587: LD_VAR 0 8
33591: PPUSH
33592: LD_INT 25
33594: PUSH
33595: LD_INT 12
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PPUSH
33602: CALL_OW 72
33606: NOT
33607: IFFALSE 33617
// control := control_manual ;
33609: LD_ADDR_VAR 0 4
33613: PUSH
33614: LD_INT 1
33616: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33617: LD_ADDR_VAR 0 8
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL 33314 0 1
33631: ST_TO_ADDR
// if tmp then
33632: LD_VAR 0 8
33636: IFFALSE 33679
// begin for i in tmp do
33638: LD_ADDR_VAR 0 7
33642: PUSH
33643: LD_VAR 0 8
33647: PUSH
33648: FOR_IN
33649: IFFALSE 33677
// if i [ 1 ] = b_ext_radio then
33651: LD_VAR 0 7
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: PUSH
33660: LD_INT 22
33662: EQUAL
33663: IFFALSE 33675
// begin control := control_remote ;
33665: LD_ADDR_VAR 0 4
33669: PUSH
33670: LD_INT 2
33672: ST_TO_ADDR
// break ;
33673: GO 33677
// end ;
33675: GO 33648
33677: POP
33678: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33679: LD_VAR 0 1
33683: PPUSH
33684: LD_VAR 0 2
33688: PPUSH
33689: LD_VAR 0 3
33693: PPUSH
33694: LD_VAR 0 4
33698: PPUSH
33699: LD_VAR 0 5
33703: PPUSH
33704: CALL_OW 448
33708: IFFALSE 33743
// begin result := [ chassis , engine , control , weapon ] ;
33710: LD_ADDR_VAR 0 6
33714: PUSH
33715: LD_VAR 0 2
33719: PUSH
33720: LD_VAR 0 3
33724: PUSH
33725: LD_VAR 0 4
33729: PUSH
33730: LD_VAR 0 5
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
// exit ;
33741: GO 34155
// end ; _chassis := AvailableChassisList ( factory ) ;
33743: LD_ADDR_VAR 0 9
33747: PUSH
33748: LD_VAR 0 1
33752: PPUSH
33753: CALL_OW 475
33757: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33758: LD_ADDR_VAR 0 11
33762: PUSH
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 476
33772: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33773: LD_ADDR_VAR 0 12
33777: PUSH
33778: LD_VAR 0 1
33782: PPUSH
33783: CALL_OW 477
33787: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33788: LD_ADDR_VAR 0 10
33792: PUSH
33793: LD_VAR 0 1
33797: PPUSH
33798: CALL_OW 478
33802: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33803: LD_VAR 0 9
33807: NOT
33808: PUSH
33809: LD_VAR 0 11
33813: NOT
33814: OR
33815: PUSH
33816: LD_VAR 0 12
33820: NOT
33821: OR
33822: PUSH
33823: LD_VAR 0 10
33827: NOT
33828: OR
33829: IFFALSE 33864
// begin result := [ chassis , engine , control , weapon ] ;
33831: LD_ADDR_VAR 0 6
33835: PUSH
33836: LD_VAR 0 2
33840: PUSH
33841: LD_VAR 0 3
33845: PUSH
33846: LD_VAR 0 4
33850: PUSH
33851: LD_VAR 0 5
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
// exit ;
33862: GO 34155
// end ; if not chassis in _chassis then
33864: LD_VAR 0 2
33868: PUSH
33869: LD_VAR 0 9
33873: IN
33874: NOT
33875: IFFALSE 33901
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33877: LD_ADDR_VAR 0 2
33881: PUSH
33882: LD_VAR 0 9
33886: PUSH
33887: LD_INT 1
33889: PPUSH
33890: LD_VAR 0 9
33894: PPUSH
33895: CALL_OW 12
33899: ARRAY
33900: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33901: LD_VAR 0 2
33905: PPUSH
33906: LD_VAR 0 3
33910: PPUSH
33911: CALL 34160 0 2
33915: NOT
33916: IFFALSE 33975
// repeat engine := _engine [ 1 ] ;
33918: LD_ADDR_VAR 0 3
33922: PUSH
33923: LD_VAR 0 11
33927: PUSH
33928: LD_INT 1
33930: ARRAY
33931: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33932: LD_ADDR_VAR 0 11
33936: PUSH
33937: LD_VAR 0 11
33941: PPUSH
33942: LD_INT 1
33944: PPUSH
33945: CALL_OW 3
33949: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33950: LD_VAR 0 2
33954: PPUSH
33955: LD_VAR 0 3
33959: PPUSH
33960: CALL 34160 0 2
33964: PUSH
33965: LD_VAR 0 11
33969: PUSH
33970: EMPTY
33971: EQUAL
33972: OR
33973: IFFALSE 33918
// if not control in _control then
33975: LD_VAR 0 4
33979: PUSH
33980: LD_VAR 0 12
33984: IN
33985: NOT
33986: IFFALSE 34012
// control := _control [ rand ( 1 , _control ) ] ;
33988: LD_ADDR_VAR 0 4
33992: PUSH
33993: LD_VAR 0 12
33997: PUSH
33998: LD_INT 1
34000: PPUSH
34001: LD_VAR 0 12
34005: PPUSH
34006: CALL_OW 12
34010: ARRAY
34011: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34012: LD_VAR 0 2
34016: PPUSH
34017: LD_VAR 0 5
34021: PPUSH
34022: CALL 34380 0 2
34026: NOT
34027: IFFALSE 34086
// repeat weapon := _weapon [ 1 ] ;
34029: LD_ADDR_VAR 0 5
34033: PUSH
34034: LD_VAR 0 10
34038: PUSH
34039: LD_INT 1
34041: ARRAY
34042: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34043: LD_ADDR_VAR 0 10
34047: PUSH
34048: LD_VAR 0 10
34052: PPUSH
34053: LD_INT 1
34055: PPUSH
34056: CALL_OW 3
34060: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34061: LD_VAR 0 2
34065: PPUSH
34066: LD_VAR 0 5
34070: PPUSH
34071: CALL 34380 0 2
34075: PUSH
34076: LD_VAR 0 10
34080: PUSH
34081: EMPTY
34082: EQUAL
34083: OR
34084: IFFALSE 34029
// result := [ ] ;
34086: LD_ADDR_VAR 0 6
34090: PUSH
34091: EMPTY
34092: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34093: LD_VAR 0 1
34097: PPUSH
34098: LD_VAR 0 2
34102: PPUSH
34103: LD_VAR 0 3
34107: PPUSH
34108: LD_VAR 0 4
34112: PPUSH
34113: LD_VAR 0 5
34117: PPUSH
34118: CALL_OW 448
34122: IFFALSE 34155
// result := [ chassis , engine , control , weapon ] ;
34124: LD_ADDR_VAR 0 6
34128: PUSH
34129: LD_VAR 0 2
34133: PUSH
34134: LD_VAR 0 3
34138: PUSH
34139: LD_VAR 0 4
34143: PUSH
34144: LD_VAR 0 5
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
// end ;
34155: LD_VAR 0 6
34159: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34160: LD_INT 0
34162: PPUSH
// if not chassis or not engine then
34163: LD_VAR 0 1
34167: NOT
34168: PUSH
34169: LD_VAR 0 2
34173: NOT
34174: OR
34175: IFFALSE 34179
// exit ;
34177: GO 34375
// case engine of engine_solar :
34179: LD_VAR 0 2
34183: PUSH
34184: LD_INT 2
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34192
34190: GO 34230
34192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34193: LD_ADDR_VAR 0 3
34197: PUSH
34198: LD_INT 11
34200: PUSH
34201: LD_INT 12
34203: PUSH
34204: LD_INT 13
34206: PUSH
34207: LD_INT 14
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
34228: GO 34359
34230: LD_INT 1
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34300
34238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_INT 11
34246: PUSH
34247: LD_INT 12
34249: PUSH
34250: LD_INT 13
34252: PUSH
34253: LD_INT 14
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: LD_INT 4
34267: PUSH
34268: LD_INT 5
34270: PUSH
34271: LD_INT 21
34273: PUSH
34274: LD_INT 23
34276: PUSH
34277: LD_INT 22
34279: PUSH
34280: LD_INT 24
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
34298: GO 34359
34300: LD_INT 3
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34358
34308: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34309: LD_ADDR_VAR 0 3
34313: PUSH
34314: LD_INT 13
34316: PUSH
34317: LD_INT 14
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: LD_INT 3
34325: PUSH
34326: LD_INT 4
34328: PUSH
34329: LD_INT 5
34331: PUSH
34332: LD_INT 21
34334: PUSH
34335: LD_INT 22
34337: PUSH
34338: LD_INT 23
34340: PUSH
34341: LD_INT 24
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: ST_TO_ADDR
34356: GO 34359
34358: POP
// result := ( chassis in result ) ;
34359: LD_ADDR_VAR 0 3
34363: PUSH
34364: LD_VAR 0 1
34368: PUSH
34369: LD_VAR 0 3
34373: IN
34374: ST_TO_ADDR
// end ;
34375: LD_VAR 0 3
34379: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34380: LD_INT 0
34382: PPUSH
// if not chassis or not weapon then
34383: LD_VAR 0 1
34387: NOT
34388: PUSH
34389: LD_VAR 0 2
34393: NOT
34394: OR
34395: IFFALSE 34399
// exit ;
34397: GO 35459
// case weapon of us_machine_gun :
34399: LD_VAR 0 2
34403: PUSH
34404: LD_INT 2
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34412
34410: GO 34442
34412: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34413: LD_ADDR_VAR 0 3
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 4
34429: PUSH
34430: LD_INT 5
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
34440: GO 35443
34442: LD_INT 3
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34450
34448: GO 34480
34450: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: LD_INT 5
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
34478: GO 35443
34480: LD_INT 11
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34518
34488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34489: LD_ADDR_VAR 0 3
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: LD_INT 4
34505: PUSH
34506: LD_INT 5
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: ST_TO_ADDR
34516: GO 35443
34518: LD_INT 4
34520: DOUBLE
34521: EQUAL
34522: IFTRUE 34526
34524: GO 34552
34526: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34527: LD_ADDR_VAR 0 3
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 4
34540: PUSH
34541: LD_INT 5
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: ST_TO_ADDR
34550: GO 35443
34552: LD_INT 5
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34586
34560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34561: LD_ADDR_VAR 0 3
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: LD_INT 4
34574: PUSH
34575: LD_INT 5
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
34584: GO 35443
34586: LD_INT 9
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34594
34592: GO 34620
34594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 4
34608: PUSH
34609: LD_INT 5
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
34618: GO 35443
34620: LD_INT 7
34622: DOUBLE
34623: EQUAL
34624: IFTRUE 34628
34626: GO 34654
34628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
34652: GO 35443
34654: LD_INT 12
34656: DOUBLE
34657: EQUAL
34658: IFTRUE 34662
34660: GO 34688
34662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34663: LD_ADDR_VAR 0 3
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: LD_INT 3
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: LD_INT 5
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: ST_TO_ADDR
34686: GO 35443
34688: LD_INT 13
34690: DOUBLE
34691: EQUAL
34692: IFTRUE 34696
34694: GO 34722
34696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34697: LD_ADDR_VAR 0 3
34701: PUSH
34702: LD_INT 2
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: LD_INT 4
34710: PUSH
34711: LD_INT 5
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
34720: GO 35443
34722: LD_INT 14
34724: DOUBLE
34725: EQUAL
34726: IFTRUE 34730
34728: GO 34748
34730: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34731: LD_ADDR_VAR 0 3
34735: PUSH
34736: LD_INT 4
34738: PUSH
34739: LD_INT 5
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: ST_TO_ADDR
34746: GO 35443
34748: LD_INT 6
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34774
34756: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_INT 4
34764: PUSH
34765: LD_INT 5
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: ST_TO_ADDR
34772: GO 35443
34774: LD_INT 10
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34782
34780: GO 34800
34782: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 4
34790: PUSH
34791: LD_INT 5
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: ST_TO_ADDR
34798: GO 35443
34800: LD_INT 22
34802: DOUBLE
34803: EQUAL
34804: IFTRUE 34808
34806: GO 34834
34808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34809: LD_ADDR_VAR 0 3
34813: PUSH
34814: LD_INT 11
34816: PUSH
34817: LD_INT 12
34819: PUSH
34820: LD_INT 13
34822: PUSH
34823: LD_INT 14
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: ST_TO_ADDR
34832: GO 35443
34834: LD_INT 23
34836: DOUBLE
34837: EQUAL
34838: IFTRUE 34842
34840: GO 34868
34842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34843: LD_ADDR_VAR 0 3
34847: PUSH
34848: LD_INT 11
34850: PUSH
34851: LD_INT 12
34853: PUSH
34854: LD_INT 13
34856: PUSH
34857: LD_INT 14
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: ST_TO_ADDR
34866: GO 35443
34868: LD_INT 24
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34876
34874: GO 34902
34876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34877: LD_ADDR_VAR 0 3
34881: PUSH
34882: LD_INT 11
34884: PUSH
34885: LD_INT 12
34887: PUSH
34888: LD_INT 13
34890: PUSH
34891: LD_INT 14
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: ST_TO_ADDR
34900: GO 35443
34902: LD_INT 30
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34910
34908: GO 34936
34910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: LD_INT 11
34918: PUSH
34919: LD_INT 12
34921: PUSH
34922: LD_INT 13
34924: PUSH
34925: LD_INT 14
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: ST_TO_ADDR
34934: GO 35443
34936: LD_INT 25
34938: DOUBLE
34939: EQUAL
34940: IFTRUE 34944
34942: GO 34962
34944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34945: LD_ADDR_VAR 0 3
34949: PUSH
34950: LD_INT 13
34952: PUSH
34953: LD_INT 14
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: ST_TO_ADDR
34960: GO 35443
34962: LD_INT 27
34964: DOUBLE
34965: EQUAL
34966: IFTRUE 34970
34968: GO 34988
34970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: LD_INT 13
34978: PUSH
34979: LD_INT 14
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: ST_TO_ADDR
34986: GO 35443
34988: LD_INT 92
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35022
34996: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34997: LD_ADDR_VAR 0 3
35001: PUSH
35002: LD_INT 11
35004: PUSH
35005: LD_INT 12
35007: PUSH
35008: LD_INT 13
35010: PUSH
35011: LD_INT 14
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: ST_TO_ADDR
35020: GO 35443
35022: LD_INT 28
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35030
35028: GO 35048
35030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35031: LD_ADDR_VAR 0 3
35035: PUSH
35036: LD_INT 13
35038: PUSH
35039: LD_INT 14
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: ST_TO_ADDR
35046: GO 35443
35048: LD_INT 29
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35074
35056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35057: LD_ADDR_VAR 0 3
35061: PUSH
35062: LD_INT 13
35064: PUSH
35065: LD_INT 14
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: ST_TO_ADDR
35072: GO 35443
35074: LD_INT 31
35076: DOUBLE
35077: EQUAL
35078: IFTRUE 35082
35080: GO 35100
35082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35083: LD_ADDR_VAR 0 3
35087: PUSH
35088: LD_INT 13
35090: PUSH
35091: LD_INT 14
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: ST_TO_ADDR
35098: GO 35443
35100: LD_INT 26
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35126
35108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 13
35116: PUSH
35117: LD_INT 14
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: ST_TO_ADDR
35124: GO 35443
35126: LD_INT 42
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35160
35134: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35135: LD_ADDR_VAR 0 3
35139: PUSH
35140: LD_INT 21
35142: PUSH
35143: LD_INT 22
35145: PUSH
35146: LD_INT 23
35148: PUSH
35149: LD_INT 24
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
35158: GO 35443
35160: LD_INT 43
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35168
35166: GO 35194
35168: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_INT 21
35176: PUSH
35177: LD_INT 22
35179: PUSH
35180: LD_INT 23
35182: PUSH
35183: LD_INT 24
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
35192: GO 35443
35194: LD_INT 44
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 35228
35202: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35203: LD_ADDR_VAR 0 3
35207: PUSH
35208: LD_INT 21
35210: PUSH
35211: LD_INT 22
35213: PUSH
35214: LD_INT 23
35216: PUSH
35217: LD_INT 24
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: ST_TO_ADDR
35226: GO 35443
35228: LD_INT 45
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35236
35234: GO 35262
35236: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_INT 21
35244: PUSH
35245: LD_INT 22
35247: PUSH
35248: LD_INT 23
35250: PUSH
35251: LD_INT 24
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: ST_TO_ADDR
35260: GO 35443
35262: LD_INT 49
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35270
35268: GO 35296
35270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_INT 21
35278: PUSH
35279: LD_INT 22
35281: PUSH
35282: LD_INT 23
35284: PUSH
35285: LD_INT 24
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
35294: GO 35443
35296: LD_INT 51
35298: DOUBLE
35299: EQUAL
35300: IFTRUE 35304
35302: GO 35330
35304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_INT 21
35312: PUSH
35313: LD_INT 22
35315: PUSH
35316: LD_INT 23
35318: PUSH
35319: LD_INT 24
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: ST_TO_ADDR
35328: GO 35443
35330: LD_INT 52
35332: DOUBLE
35333: EQUAL
35334: IFTRUE 35338
35336: GO 35364
35338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_INT 21
35346: PUSH
35347: LD_INT 22
35349: PUSH
35350: LD_INT 23
35352: PUSH
35353: LD_INT 24
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: ST_TO_ADDR
35362: GO 35443
35364: LD_INT 53
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35372
35370: GO 35390
35372: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35373: LD_ADDR_VAR 0 3
35377: PUSH
35378: LD_INT 23
35380: PUSH
35381: LD_INT 24
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: ST_TO_ADDR
35388: GO 35443
35390: LD_INT 46
35392: DOUBLE
35393: EQUAL
35394: IFTRUE 35398
35396: GO 35416
35398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35399: LD_ADDR_VAR 0 3
35403: PUSH
35404: LD_INT 23
35406: PUSH
35407: LD_INT 24
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: ST_TO_ADDR
35414: GO 35443
35416: LD_INT 47
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35424
35422: GO 35442
35424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35425: LD_ADDR_VAR 0 3
35429: PUSH
35430: LD_INT 23
35432: PUSH
35433: LD_INT 24
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: ST_TO_ADDR
35440: GO 35443
35442: POP
// result := ( chassis in result ) ;
35443: LD_ADDR_VAR 0 3
35447: PUSH
35448: LD_VAR 0 1
35452: PUSH
35453: LD_VAR 0 3
35457: IN
35458: ST_TO_ADDR
// end ;
35459: LD_VAR 0 3
35463: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35464: LD_INT 0
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
// result := array ;
35473: LD_ADDR_VAR 0 5
35477: PUSH
35478: LD_VAR 0 1
35482: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35483: LD_VAR 0 1
35487: NOT
35488: PUSH
35489: LD_VAR 0 2
35493: NOT
35494: OR
35495: PUSH
35496: LD_VAR 0 3
35500: NOT
35501: OR
35502: PUSH
35503: LD_VAR 0 2
35507: PUSH
35508: LD_VAR 0 1
35512: GREATER
35513: OR
35514: PUSH
35515: LD_VAR 0 3
35519: PUSH
35520: LD_VAR 0 1
35524: GREATER
35525: OR
35526: IFFALSE 35530
// exit ;
35528: GO 35826
// if direction then
35530: LD_VAR 0 4
35534: IFFALSE 35598
// begin d := 1 ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_INT 1
35543: ST_TO_ADDR
// if i_from > i_to then
35544: LD_VAR 0 2
35548: PUSH
35549: LD_VAR 0 3
35553: GREATER
35554: IFFALSE 35580
// length := ( array - i_from ) + i_to else
35556: LD_ADDR_VAR 0 11
35560: PUSH
35561: LD_VAR 0 1
35565: PUSH
35566: LD_VAR 0 2
35570: MINUS
35571: PUSH
35572: LD_VAR 0 3
35576: PLUS
35577: ST_TO_ADDR
35578: GO 35596
// length := i_to - i_from ;
35580: LD_ADDR_VAR 0 11
35584: PUSH
35585: LD_VAR 0 3
35589: PUSH
35590: LD_VAR 0 2
35594: MINUS
35595: ST_TO_ADDR
// end else
35596: GO 35659
// begin d := - 1 ;
35598: LD_ADDR_VAR 0 9
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: ST_TO_ADDR
// if i_from > i_to then
35607: LD_VAR 0 2
35611: PUSH
35612: LD_VAR 0 3
35616: GREATER
35617: IFFALSE 35637
// length := i_from - i_to else
35619: LD_ADDR_VAR 0 11
35623: PUSH
35624: LD_VAR 0 2
35628: PUSH
35629: LD_VAR 0 3
35633: MINUS
35634: ST_TO_ADDR
35635: GO 35659
// length := ( array - i_to ) + i_from ;
35637: LD_ADDR_VAR 0 11
35641: PUSH
35642: LD_VAR 0 1
35646: PUSH
35647: LD_VAR 0 3
35651: MINUS
35652: PUSH
35653: LD_VAR 0 2
35657: PLUS
35658: ST_TO_ADDR
// end ; if not length then
35659: LD_VAR 0 11
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 35826
// tmp := array ;
35668: LD_ADDR_VAR 0 10
35672: PUSH
35673: LD_VAR 0 1
35677: ST_TO_ADDR
// for i = 1 to length do
35678: LD_ADDR_VAR 0 6
35682: PUSH
35683: DOUBLE
35684: LD_INT 1
35686: DEC
35687: ST_TO_ADDR
35688: LD_VAR 0 11
35692: PUSH
35693: FOR_TO
35694: IFFALSE 35814
// begin for j = 1 to array do
35696: LD_ADDR_VAR 0 7
35700: PUSH
35701: DOUBLE
35702: LD_INT 1
35704: DEC
35705: ST_TO_ADDR
35706: LD_VAR 0 1
35710: PUSH
35711: FOR_TO
35712: IFFALSE 35800
// begin k := j + d ;
35714: LD_ADDR_VAR 0 8
35718: PUSH
35719: LD_VAR 0 7
35723: PUSH
35724: LD_VAR 0 9
35728: PLUS
35729: ST_TO_ADDR
// if k > array then
35730: LD_VAR 0 8
35734: PUSH
35735: LD_VAR 0 1
35739: GREATER
35740: IFFALSE 35750
// k := 1 ;
35742: LD_ADDR_VAR 0 8
35746: PUSH
35747: LD_INT 1
35749: ST_TO_ADDR
// if not k then
35750: LD_VAR 0 8
35754: NOT
35755: IFFALSE 35767
// k := array ;
35757: LD_ADDR_VAR 0 8
35761: PUSH
35762: LD_VAR 0 1
35766: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35767: LD_ADDR_VAR 0 10
35771: PUSH
35772: LD_VAR 0 10
35776: PPUSH
35777: LD_VAR 0 8
35781: PPUSH
35782: LD_VAR 0 1
35786: PUSH
35787: LD_VAR 0 7
35791: ARRAY
35792: PPUSH
35793: CALL_OW 1
35797: ST_TO_ADDR
// end ;
35798: GO 35711
35800: POP
35801: POP
// array := tmp ;
35802: LD_ADDR_VAR 0 1
35806: PUSH
35807: LD_VAR 0 10
35811: ST_TO_ADDR
// end ;
35812: GO 35693
35814: POP
35815: POP
// result := array ;
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_VAR 0 1
35825: ST_TO_ADDR
// end ;
35826: LD_VAR 0 5
35830: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35831: LD_INT 0
35833: PPUSH
35834: PPUSH
// result := 0 ;
35835: LD_ADDR_VAR 0 3
35839: PUSH
35840: LD_INT 0
35842: ST_TO_ADDR
// if not array or not value in array then
35843: LD_VAR 0 1
35847: NOT
35848: PUSH
35849: LD_VAR 0 2
35853: PUSH
35854: LD_VAR 0 1
35858: IN
35859: NOT
35860: OR
35861: IFFALSE 35865
// exit ;
35863: GO 35919
// for i = 1 to array do
35865: LD_ADDR_VAR 0 4
35869: PUSH
35870: DOUBLE
35871: LD_INT 1
35873: DEC
35874: ST_TO_ADDR
35875: LD_VAR 0 1
35879: PUSH
35880: FOR_TO
35881: IFFALSE 35917
// if value = array [ i ] then
35883: LD_VAR 0 2
35887: PUSH
35888: LD_VAR 0 1
35892: PUSH
35893: LD_VAR 0 4
35897: ARRAY
35898: EQUAL
35899: IFFALSE 35915
// begin result := i ;
35901: LD_ADDR_VAR 0 3
35905: PUSH
35906: LD_VAR 0 4
35910: ST_TO_ADDR
// exit ;
35911: POP
35912: POP
35913: GO 35919
// end ;
35915: GO 35880
35917: POP
35918: POP
// end ;
35919: LD_VAR 0 3
35923: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35924: LD_INT 0
35926: PPUSH
// vc_chassis := chassis ;
35927: LD_ADDR_OWVAR 37
35931: PUSH
35932: LD_VAR 0 1
35936: ST_TO_ADDR
// vc_engine := engine ;
35937: LD_ADDR_OWVAR 39
35941: PUSH
35942: LD_VAR 0 2
35946: ST_TO_ADDR
// vc_control := control ;
35947: LD_ADDR_OWVAR 38
35951: PUSH
35952: LD_VAR 0 3
35956: ST_TO_ADDR
// vc_weapon := weapon ;
35957: LD_ADDR_OWVAR 40
35961: PUSH
35962: LD_VAR 0 4
35966: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35967: LD_ADDR_OWVAR 41
35971: PUSH
35972: LD_VAR 0 5
35976: ST_TO_ADDR
// end ;
35977: LD_VAR 0 6
35981: RET
// export function WantPlant ( unit ) ; var task ; begin
35982: LD_INT 0
35984: PPUSH
35985: PPUSH
// result := false ;
35986: LD_ADDR_VAR 0 2
35990: PUSH
35991: LD_INT 0
35993: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35994: LD_ADDR_VAR 0 3
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 437
36008: ST_TO_ADDR
// if task then
36009: LD_VAR 0 3
36013: IFFALSE 36041
// if task [ 1 ] [ 1 ] = p then
36015: LD_VAR 0 3
36019: PUSH
36020: LD_INT 1
36022: ARRAY
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: PUSH
36028: LD_STRING p
36030: EQUAL
36031: IFFALSE 36041
// result := true ;
36033: LD_ADDR_VAR 0 2
36037: PUSH
36038: LD_INT 1
36040: ST_TO_ADDR
// end ;
36041: LD_VAR 0 2
36045: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36046: LD_INT 0
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
// if pos < 1 then
36052: LD_VAR 0 2
36056: PUSH
36057: LD_INT 1
36059: LESS
36060: IFFALSE 36064
// exit ;
36062: GO 36367
// if pos = 1 then
36064: LD_VAR 0 2
36068: PUSH
36069: LD_INT 1
36071: EQUAL
36072: IFFALSE 36105
// result := Replace ( arr , pos [ 1 ] , value ) else
36074: LD_ADDR_VAR 0 4
36078: PUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: LD_VAR 0 2
36088: PUSH
36089: LD_INT 1
36091: ARRAY
36092: PPUSH
36093: LD_VAR 0 3
36097: PPUSH
36098: CALL_OW 1
36102: ST_TO_ADDR
36103: GO 36367
// begin tmp := arr ;
36105: LD_ADDR_VAR 0 6
36109: PUSH
36110: LD_VAR 0 1
36114: ST_TO_ADDR
// s_arr := [ tmp ] ;
36115: LD_ADDR_VAR 0 7
36119: PUSH
36120: LD_VAR 0 6
36124: PUSH
36125: EMPTY
36126: LIST
36127: ST_TO_ADDR
// for i = 1 to pos - 1 do
36128: LD_ADDR_VAR 0 5
36132: PUSH
36133: DOUBLE
36134: LD_INT 1
36136: DEC
36137: ST_TO_ADDR
36138: LD_VAR 0 2
36142: PUSH
36143: LD_INT 1
36145: MINUS
36146: PUSH
36147: FOR_TO
36148: IFFALSE 36193
// begin tmp := tmp [ pos [ i ] ] ;
36150: LD_ADDR_VAR 0 6
36154: PUSH
36155: LD_VAR 0 6
36159: PUSH
36160: LD_VAR 0 2
36164: PUSH
36165: LD_VAR 0 5
36169: ARRAY
36170: ARRAY
36171: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36172: LD_ADDR_VAR 0 7
36176: PUSH
36177: LD_VAR 0 7
36181: PUSH
36182: LD_VAR 0 6
36186: PUSH
36187: EMPTY
36188: LIST
36189: ADD
36190: ST_TO_ADDR
// end ;
36191: GO 36147
36193: POP
36194: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36195: LD_ADDR_VAR 0 6
36199: PUSH
36200: LD_VAR 0 6
36204: PPUSH
36205: LD_VAR 0 2
36209: PUSH
36210: LD_VAR 0 2
36214: ARRAY
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: CALL_OW 1
36225: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36226: LD_ADDR_VAR 0 7
36230: PUSH
36231: LD_VAR 0 7
36235: PPUSH
36236: LD_VAR 0 7
36240: PPUSH
36241: LD_VAR 0 6
36245: PPUSH
36246: CALL_OW 1
36250: ST_TO_ADDR
// for i = s_arr downto 2 do
36251: LD_ADDR_VAR 0 5
36255: PUSH
36256: DOUBLE
36257: LD_VAR 0 7
36261: INC
36262: ST_TO_ADDR
36263: LD_INT 2
36265: PUSH
36266: FOR_DOWNTO
36267: IFFALSE 36351
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36269: LD_ADDR_VAR 0 6
36273: PUSH
36274: LD_VAR 0 7
36278: PUSH
36279: LD_VAR 0 5
36283: PUSH
36284: LD_INT 1
36286: MINUS
36287: ARRAY
36288: PPUSH
36289: LD_VAR 0 2
36293: PUSH
36294: LD_VAR 0 5
36298: PUSH
36299: LD_INT 1
36301: MINUS
36302: ARRAY
36303: PPUSH
36304: LD_VAR 0 7
36308: PUSH
36309: LD_VAR 0 5
36313: ARRAY
36314: PPUSH
36315: CALL_OW 1
36319: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36320: LD_ADDR_VAR 0 7
36324: PUSH
36325: LD_VAR 0 7
36329: PPUSH
36330: LD_VAR 0 5
36334: PUSH
36335: LD_INT 1
36337: MINUS
36338: PPUSH
36339: LD_VAR 0 6
36343: PPUSH
36344: CALL_OW 1
36348: ST_TO_ADDR
// end ;
36349: GO 36266
36351: POP
36352: POP
// result := s_arr [ 1 ] ;
36353: LD_ADDR_VAR 0 4
36357: PUSH
36358: LD_VAR 0 7
36362: PUSH
36363: LD_INT 1
36365: ARRAY
36366: ST_TO_ADDR
// end ; end ;
36367: LD_VAR 0 4
36371: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36372: LD_INT 0
36374: PPUSH
36375: PPUSH
// if not list then
36376: LD_VAR 0 1
36380: NOT
36381: IFFALSE 36385
// exit ;
36383: GO 36476
// i := list [ pos1 ] ;
36385: LD_ADDR_VAR 0 5
36389: PUSH
36390: LD_VAR 0 1
36394: PUSH
36395: LD_VAR 0 2
36399: ARRAY
36400: ST_TO_ADDR
// if not i then
36401: LD_VAR 0 5
36405: NOT
36406: IFFALSE 36410
// exit ;
36408: GO 36476
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36410: LD_ADDR_VAR 0 1
36414: PUSH
36415: LD_VAR 0 1
36419: PPUSH
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 1
36429: PUSH
36430: LD_VAR 0 3
36434: ARRAY
36435: PPUSH
36436: CALL_OW 1
36440: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36441: LD_ADDR_VAR 0 1
36445: PUSH
36446: LD_VAR 0 1
36450: PPUSH
36451: LD_VAR 0 3
36455: PPUSH
36456: LD_VAR 0 5
36460: PPUSH
36461: CALL_OW 1
36465: ST_TO_ADDR
// result := list ;
36466: LD_ADDR_VAR 0 4
36470: PUSH
36471: LD_VAR 0 1
36475: ST_TO_ADDR
// end ;
36476: LD_VAR 0 4
36480: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36481: LD_INT 0
36483: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36484: LD_ADDR_VAR 0 5
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 250
36498: PPUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL_OW 251
36508: PPUSH
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_VAR 0 3
36518: PPUSH
36519: LD_VAR 0 4
36523: PPUSH
36524: CALL 36534 0 5
36528: ST_TO_ADDR
// end ;
36529: LD_VAR 0 5
36533: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36534: LD_INT 0
36536: PPUSH
36537: PPUSH
36538: PPUSH
36539: PPUSH
// if not list then
36540: LD_VAR 0 3
36544: NOT
36545: IFFALSE 36549
// exit ;
36547: GO 36937
// result := [ ] ;
36549: LD_ADDR_VAR 0 6
36553: PUSH
36554: EMPTY
36555: ST_TO_ADDR
// for i in list do
36556: LD_ADDR_VAR 0 7
36560: PUSH
36561: LD_VAR 0 3
36565: PUSH
36566: FOR_IN
36567: IFFALSE 36769
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_VAR 0 7
36578: PPUSH
36579: LD_VAR 0 1
36583: PPUSH
36584: LD_VAR 0 2
36588: PPUSH
36589: CALL_OW 297
36593: ST_TO_ADDR
// if not result then
36594: LD_VAR 0 6
36598: NOT
36599: IFFALSE 36625
// result := [ [ i , tmp ] ] else
36601: LD_ADDR_VAR 0 6
36605: PUSH
36606: LD_VAR 0 7
36610: PUSH
36611: LD_VAR 0 9
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: ST_TO_ADDR
36623: GO 36767
// begin if result [ result ] [ 2 ] < tmp then
36625: LD_VAR 0 6
36629: PUSH
36630: LD_VAR 0 6
36634: ARRAY
36635: PUSH
36636: LD_INT 2
36638: ARRAY
36639: PUSH
36640: LD_VAR 0 9
36644: LESS
36645: IFFALSE 36687
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36647: LD_ADDR_VAR 0 6
36651: PUSH
36652: LD_VAR 0 6
36656: PPUSH
36657: LD_VAR 0 6
36661: PUSH
36662: LD_INT 1
36664: PLUS
36665: PPUSH
36666: LD_VAR 0 7
36670: PUSH
36671: LD_VAR 0 9
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PPUSH
36680: CALL_OW 2
36684: ST_TO_ADDR
36685: GO 36767
// for j = 1 to result do
36687: LD_ADDR_VAR 0 8
36691: PUSH
36692: DOUBLE
36693: LD_INT 1
36695: DEC
36696: ST_TO_ADDR
36697: LD_VAR 0 6
36701: PUSH
36702: FOR_TO
36703: IFFALSE 36765
// begin if tmp < result [ j ] [ 2 ] then
36705: LD_VAR 0 9
36709: PUSH
36710: LD_VAR 0 6
36714: PUSH
36715: LD_VAR 0 8
36719: ARRAY
36720: PUSH
36721: LD_INT 2
36723: ARRAY
36724: LESS
36725: IFFALSE 36763
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36727: LD_ADDR_VAR 0 6
36731: PUSH
36732: LD_VAR 0 6
36736: PPUSH
36737: LD_VAR 0 8
36741: PPUSH
36742: LD_VAR 0 7
36746: PUSH
36747: LD_VAR 0 9
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PPUSH
36756: CALL_OW 2
36760: ST_TO_ADDR
// break ;
36761: GO 36765
// end ; end ;
36763: GO 36702
36765: POP
36766: POP
// end ; end ;
36767: GO 36566
36769: POP
36770: POP
// if result and not asc then
36771: LD_VAR 0 6
36775: PUSH
36776: LD_VAR 0 4
36780: NOT
36781: AND
36782: IFFALSE 36857
// begin tmp := result ;
36784: LD_ADDR_VAR 0 9
36788: PUSH
36789: LD_VAR 0 6
36793: ST_TO_ADDR
// for i = tmp downto 1 do
36794: LD_ADDR_VAR 0 7
36798: PUSH
36799: DOUBLE
36800: LD_VAR 0 9
36804: INC
36805: ST_TO_ADDR
36806: LD_INT 1
36808: PUSH
36809: FOR_DOWNTO
36810: IFFALSE 36855
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36812: LD_ADDR_VAR 0 6
36816: PUSH
36817: LD_VAR 0 6
36821: PPUSH
36822: LD_VAR 0 9
36826: PUSH
36827: LD_VAR 0 7
36831: MINUS
36832: PUSH
36833: LD_INT 1
36835: PLUS
36836: PPUSH
36837: LD_VAR 0 9
36841: PUSH
36842: LD_VAR 0 7
36846: ARRAY
36847: PPUSH
36848: CALL_OW 1
36852: ST_TO_ADDR
36853: GO 36809
36855: POP
36856: POP
// end ; tmp := [ ] ;
36857: LD_ADDR_VAR 0 9
36861: PUSH
36862: EMPTY
36863: ST_TO_ADDR
// if mode then
36864: LD_VAR 0 5
36868: IFFALSE 36937
// begin for i = 1 to result do
36870: LD_ADDR_VAR 0 7
36874: PUSH
36875: DOUBLE
36876: LD_INT 1
36878: DEC
36879: ST_TO_ADDR
36880: LD_VAR 0 6
36884: PUSH
36885: FOR_TO
36886: IFFALSE 36925
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36888: LD_ADDR_VAR 0 9
36892: PUSH
36893: LD_VAR 0 9
36897: PPUSH
36898: LD_VAR 0 7
36902: PPUSH
36903: LD_VAR 0 6
36907: PUSH
36908: LD_VAR 0 7
36912: ARRAY
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: PPUSH
36918: CALL_OW 1
36922: ST_TO_ADDR
36923: GO 36885
36925: POP
36926: POP
// result := tmp ;
36927: LD_ADDR_VAR 0 6
36931: PUSH
36932: LD_VAR 0 9
36936: ST_TO_ADDR
// end ; end ;
36937: LD_VAR 0 6
36941: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36942: LD_INT 0
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36950: LD_ADDR_VAR 0 5
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
// if not x or not y then
36972: LD_VAR 0 2
36976: NOT
36977: PUSH
36978: LD_VAR 0 3
36982: NOT
36983: OR
36984: IFFALSE 36988
// exit ;
36986: GO 38638
// if not range then
36988: LD_VAR 0 4
36992: NOT
36993: IFFALSE 37003
// range := 10 ;
36995: LD_ADDR_VAR 0 4
36999: PUSH
37000: LD_INT 10
37002: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37003: LD_ADDR_VAR 0 8
37007: PUSH
37008: LD_INT 81
37010: PUSH
37011: LD_VAR 0 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 92
37022: PUSH
37023: LD_VAR 0 2
37027: PUSH
37028: LD_VAR 0 3
37032: PUSH
37033: LD_VAR 0 4
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: LD_INT 21
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: PPUSH
37066: CALL_OW 69
37070: ST_TO_ADDR
// if not tmp then
37071: LD_VAR 0 8
37075: NOT
37076: IFFALSE 37080
// exit ;
37078: GO 38638
// for i in tmp do
37080: LD_ADDR_VAR 0 6
37084: PUSH
37085: LD_VAR 0 8
37089: PUSH
37090: FOR_IN
37091: IFFALSE 38613
// begin points := [ 0 , 0 , 0 ] ;
37093: LD_ADDR_VAR 0 9
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// bpoints := 1 ;
37112: LD_ADDR_VAR 0 10
37116: PUSH
37117: LD_INT 1
37119: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37120: LD_VAR 0 6
37124: PPUSH
37125: CALL_OW 247
37129: PUSH
37130: LD_INT 1
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37138
37136: GO 37716
37138: POP
// begin if GetClass ( i ) = 1 then
37139: LD_VAR 0 6
37143: PPUSH
37144: CALL_OW 257
37148: PUSH
37149: LD_INT 1
37151: EQUAL
37152: IFFALSE 37173
// points := [ 10 , 5 , 3 ] ;
37154: LD_ADDR_VAR 0 9
37158: PUSH
37159: LD_INT 10
37161: PUSH
37162: LD_INT 5
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37173: LD_VAR 0 6
37177: PPUSH
37178: CALL_OW 257
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: LD_INT 4
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: IN
37197: IFFALSE 37218
// points := [ 3 , 2 , 1 ] ;
37199: LD_ADDR_VAR 0 9
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37218: LD_VAR 0 6
37222: PPUSH
37223: CALL_OW 257
37227: PUSH
37228: LD_INT 5
37230: EQUAL
37231: IFFALSE 37252
// points := [ 130 , 5 , 2 ] ;
37233: LD_ADDR_VAR 0 9
37237: PUSH
37238: LD_INT 130
37240: PUSH
37241: LD_INT 5
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37252: LD_VAR 0 6
37256: PPUSH
37257: CALL_OW 257
37261: PUSH
37262: LD_INT 8
37264: EQUAL
37265: IFFALSE 37286
// points := [ 35 , 35 , 30 ] ;
37267: LD_ADDR_VAR 0 9
37271: PUSH
37272: LD_INT 35
37274: PUSH
37275: LD_INT 35
37277: PUSH
37278: LD_INT 30
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37286: LD_VAR 0 6
37290: PPUSH
37291: CALL_OW 257
37295: PUSH
37296: LD_INT 9
37298: EQUAL
37299: IFFALSE 37320
// points := [ 20 , 55 , 40 ] ;
37301: LD_ADDR_VAR 0 9
37305: PUSH
37306: LD_INT 20
37308: PUSH
37309: LD_INT 55
37311: PUSH
37312: LD_INT 40
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37320: LD_VAR 0 6
37324: PPUSH
37325: CALL_OW 257
37329: PUSH
37330: LD_INT 12
37332: PUSH
37333: LD_INT 16
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: IN
37340: IFFALSE 37361
// points := [ 5 , 3 , 2 ] ;
37342: LD_ADDR_VAR 0 9
37346: PUSH
37347: LD_INT 5
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37361: LD_VAR 0 6
37365: PPUSH
37366: CALL_OW 257
37370: PUSH
37371: LD_INT 17
37373: EQUAL
37374: IFFALSE 37395
// points := [ 100 , 50 , 75 ] ;
37376: LD_ADDR_VAR 0 9
37380: PUSH
37381: LD_INT 100
37383: PUSH
37384: LD_INT 50
37386: PUSH
37387: LD_INT 75
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37395: LD_VAR 0 6
37399: PPUSH
37400: CALL_OW 257
37404: PUSH
37405: LD_INT 15
37407: EQUAL
37408: IFFALSE 37429
// points := [ 10 , 5 , 3 ] ;
37410: LD_ADDR_VAR 0 9
37414: PUSH
37415: LD_INT 10
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37429: LD_VAR 0 6
37433: PPUSH
37434: CALL_OW 257
37438: PUSH
37439: LD_INT 14
37441: EQUAL
37442: IFFALSE 37463
// points := [ 10 , 0 , 0 ] ;
37444: LD_ADDR_VAR 0 9
37448: PUSH
37449: LD_INT 10
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37463: LD_VAR 0 6
37467: PPUSH
37468: CALL_OW 257
37472: PUSH
37473: LD_INT 11
37475: EQUAL
37476: IFFALSE 37497
// points := [ 30 , 10 , 5 ] ;
37478: LD_ADDR_VAR 0 9
37482: PUSH
37483: LD_INT 30
37485: PUSH
37486: LD_INT 10
37488: PUSH
37489: LD_INT 5
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37497: LD_VAR 0 1
37501: PPUSH
37502: LD_INT 5
37504: PPUSH
37505: CALL_OW 321
37509: PUSH
37510: LD_INT 2
37512: EQUAL
37513: IFFALSE 37530
// bpoints := bpoints * 1.8 ;
37515: LD_ADDR_VAR 0 10
37519: PUSH
37520: LD_VAR 0 10
37524: PUSH
37525: LD_REAL  1.80000000000000E+0000
37528: MUL
37529: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37530: LD_VAR 0 6
37534: PPUSH
37535: CALL_OW 257
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 3
37548: PUSH
37549: LD_INT 4
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: IN
37558: PUSH
37559: LD_VAR 0 1
37563: PPUSH
37564: LD_INT 51
37566: PPUSH
37567: CALL_OW 321
37571: PUSH
37572: LD_INT 2
37574: EQUAL
37575: AND
37576: IFFALSE 37593
// bpoints := bpoints * 1.2 ;
37578: LD_ADDR_VAR 0 10
37582: PUSH
37583: LD_VAR 0 10
37587: PUSH
37588: LD_REAL  1.20000000000000E+0000
37591: MUL
37592: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37593: LD_VAR 0 6
37597: PPUSH
37598: CALL_OW 257
37602: PUSH
37603: LD_INT 5
37605: PUSH
37606: LD_INT 7
37608: PUSH
37609: LD_INT 9
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: IN
37617: PUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: LD_INT 52
37625: PPUSH
37626: CALL_OW 321
37630: PUSH
37631: LD_INT 2
37633: EQUAL
37634: AND
37635: IFFALSE 37652
// bpoints := bpoints * 1.5 ;
37637: LD_ADDR_VAR 0 10
37641: PUSH
37642: LD_VAR 0 10
37646: PUSH
37647: LD_REAL  1.50000000000000E+0000
37650: MUL
37651: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37652: LD_VAR 0 1
37656: PPUSH
37657: LD_INT 66
37659: PPUSH
37660: CALL_OW 321
37664: PUSH
37665: LD_INT 2
37667: EQUAL
37668: IFFALSE 37685
// bpoints := bpoints * 1.1 ;
37670: LD_ADDR_VAR 0 10
37674: PUSH
37675: LD_VAR 0 10
37679: PUSH
37680: LD_REAL  1.10000000000000E+0000
37683: MUL
37684: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37685: LD_ADDR_VAR 0 10
37689: PUSH
37690: LD_VAR 0 10
37694: PUSH
37695: LD_VAR 0 6
37699: PPUSH
37700: LD_INT 1
37702: PPUSH
37703: CALL_OW 259
37707: PUSH
37708: LD_REAL  1.15000000000000E+0000
37711: MUL
37712: MUL
37713: ST_TO_ADDR
// end ; unit_vehicle :
37714: GO 38542
37716: LD_INT 2
37718: DOUBLE
37719: EQUAL
37720: IFTRUE 37724
37722: GO 38530
37724: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37725: LD_VAR 0 6
37729: PPUSH
37730: CALL_OW 264
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: LD_INT 42
37740: PUSH
37741: LD_INT 24
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: LIST
37748: IN
37749: IFFALSE 37770
// points := [ 25 , 5 , 3 ] ;
37751: LD_ADDR_VAR 0 9
37755: PUSH
37756: LD_INT 25
37758: PUSH
37759: LD_INT 5
37761: PUSH
37762: LD_INT 3
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37770: LD_VAR 0 6
37774: PPUSH
37775: CALL_OW 264
37779: PUSH
37780: LD_INT 4
37782: PUSH
37783: LD_INT 43
37785: PUSH
37786: LD_INT 25
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: IN
37794: IFFALSE 37815
// points := [ 40 , 15 , 5 ] ;
37796: LD_ADDR_VAR 0 9
37800: PUSH
37801: LD_INT 40
37803: PUSH
37804: LD_INT 15
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37815: LD_VAR 0 6
37819: PPUSH
37820: CALL_OW 264
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: LD_INT 23
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: IN
37835: IFFALSE 37856
// points := [ 7 , 25 , 8 ] ;
37837: LD_ADDR_VAR 0 9
37841: PUSH
37842: LD_INT 7
37844: PUSH
37845: LD_INT 25
37847: PUSH
37848: LD_INT 8
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37856: LD_VAR 0 6
37860: PPUSH
37861: CALL_OW 264
37865: PUSH
37866: LD_INT 5
37868: PUSH
37869: LD_INT 27
37871: PUSH
37872: LD_INT 44
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: IN
37880: IFFALSE 37901
// points := [ 14 , 50 , 16 ] ;
37882: LD_ADDR_VAR 0 9
37886: PUSH
37887: LD_INT 14
37889: PUSH
37890: LD_INT 50
37892: PUSH
37893: LD_INT 16
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37901: LD_VAR 0 6
37905: PPUSH
37906: CALL_OW 264
37910: PUSH
37911: LD_INT 6
37913: PUSH
37914: LD_INT 46
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: IN
37921: IFFALSE 37942
// points := [ 32 , 120 , 70 ] ;
37923: LD_ADDR_VAR 0 9
37927: PUSH
37928: LD_INT 32
37930: PUSH
37931: LD_INT 120
37933: PUSH
37934: LD_INT 70
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37942: LD_VAR 0 6
37946: PPUSH
37947: CALL_OW 264
37951: PUSH
37952: LD_INT 7
37954: PUSH
37955: LD_INT 28
37957: PUSH
37958: LD_INT 45
37960: PUSH
37961: LD_INT 92
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: IN
37970: IFFALSE 37991
// points := [ 35 , 20 , 45 ] ;
37972: LD_ADDR_VAR 0 9
37976: PUSH
37977: LD_INT 35
37979: PUSH
37980: LD_INT 20
37982: PUSH
37983: LD_INT 45
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37991: LD_VAR 0 6
37995: PPUSH
37996: CALL_OW 264
38000: PUSH
38001: LD_INT 47
38003: PUSH
38004: EMPTY
38005: LIST
38006: IN
38007: IFFALSE 38028
// points := [ 67 , 45 , 75 ] ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_INT 67
38016: PUSH
38017: LD_INT 45
38019: PUSH
38020: LD_INT 75
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38028: LD_VAR 0 6
38032: PPUSH
38033: CALL_OW 264
38037: PUSH
38038: LD_INT 26
38040: PUSH
38041: EMPTY
38042: LIST
38043: IN
38044: IFFALSE 38065
// points := [ 120 , 30 , 80 ] ;
38046: LD_ADDR_VAR 0 9
38050: PUSH
38051: LD_INT 120
38053: PUSH
38054: LD_INT 30
38056: PUSH
38057: LD_INT 80
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38065: LD_VAR 0 6
38069: PPUSH
38070: CALL_OW 264
38074: PUSH
38075: LD_INT 22
38077: PUSH
38078: EMPTY
38079: LIST
38080: IN
38081: IFFALSE 38102
// points := [ 40 , 1 , 1 ] ;
38083: LD_ADDR_VAR 0 9
38087: PUSH
38088: LD_INT 40
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38102: LD_VAR 0 6
38106: PPUSH
38107: CALL_OW 264
38111: PUSH
38112: LD_INT 29
38114: PUSH
38115: EMPTY
38116: LIST
38117: IN
38118: IFFALSE 38139
// points := [ 70 , 200 , 400 ] ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_INT 70
38127: PUSH
38128: LD_INT 200
38130: PUSH
38131: LD_INT 400
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38139: LD_VAR 0 6
38143: PPUSH
38144: CALL_OW 264
38148: PUSH
38149: LD_INT 14
38151: PUSH
38152: LD_INT 53
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: IN
38159: IFFALSE 38180
// points := [ 40 , 10 , 20 ] ;
38161: LD_ADDR_VAR 0 9
38165: PUSH
38166: LD_INT 40
38168: PUSH
38169: LD_INT 10
38171: PUSH
38172: LD_INT 20
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38180: LD_VAR 0 6
38184: PPUSH
38185: CALL_OW 264
38189: PUSH
38190: LD_INT 9
38192: PUSH
38193: EMPTY
38194: LIST
38195: IN
38196: IFFALSE 38217
// points := [ 5 , 70 , 20 ] ;
38198: LD_ADDR_VAR 0 9
38202: PUSH
38203: LD_INT 5
38205: PUSH
38206: LD_INT 70
38208: PUSH
38209: LD_INT 20
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38217: LD_VAR 0 6
38221: PPUSH
38222: CALL_OW 264
38226: PUSH
38227: LD_INT 10
38229: PUSH
38230: EMPTY
38231: LIST
38232: IN
38233: IFFALSE 38254
// points := [ 35 , 110 , 70 ] ;
38235: LD_ADDR_VAR 0 9
38239: PUSH
38240: LD_INT 35
38242: PUSH
38243: LD_INT 110
38245: PUSH
38246: LD_INT 70
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38254: LD_VAR 0 6
38258: PPUSH
38259: CALL_OW 265
38263: PUSH
38264: LD_INT 25
38266: EQUAL
38267: IFFALSE 38288
// points := [ 80 , 65 , 100 ] ;
38269: LD_ADDR_VAR 0 9
38273: PUSH
38274: LD_INT 80
38276: PUSH
38277: LD_INT 65
38279: PUSH
38280: LD_INT 100
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38288: LD_VAR 0 6
38292: PPUSH
38293: CALL_OW 263
38297: PUSH
38298: LD_INT 1
38300: EQUAL
38301: IFFALSE 38336
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38303: LD_ADDR_VAR 0 10
38307: PUSH
38308: LD_VAR 0 10
38312: PUSH
38313: LD_VAR 0 6
38317: PPUSH
38318: CALL_OW 311
38322: PPUSH
38323: LD_INT 3
38325: PPUSH
38326: CALL_OW 259
38330: PUSH
38331: LD_INT 4
38333: MUL
38334: MUL
38335: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38336: LD_VAR 0 6
38340: PPUSH
38341: CALL_OW 263
38345: PUSH
38346: LD_INT 2
38348: EQUAL
38349: IFFALSE 38400
// begin j := IsControledBy ( i ) ;
38351: LD_ADDR_VAR 0 7
38355: PUSH
38356: LD_VAR 0 6
38360: PPUSH
38361: CALL_OW 312
38365: ST_TO_ADDR
// if j then
38366: LD_VAR 0 7
38370: IFFALSE 38400
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38372: LD_ADDR_VAR 0 10
38376: PUSH
38377: LD_VAR 0 10
38381: PUSH
38382: LD_VAR 0 7
38386: PPUSH
38387: LD_INT 3
38389: PPUSH
38390: CALL_OW 259
38394: PUSH
38395: LD_INT 3
38397: MUL
38398: MUL
38399: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38400: LD_VAR 0 6
38404: PPUSH
38405: CALL_OW 264
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: LD_INT 6
38415: PUSH
38416: LD_INT 46
38418: PUSH
38419: LD_INT 44
38421: PUSH
38422: LD_INT 47
38424: PUSH
38425: LD_INT 45
38427: PUSH
38428: LD_INT 28
38430: PUSH
38431: LD_INT 7
38433: PUSH
38434: LD_INT 27
38436: PUSH
38437: LD_INT 29
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: IN
38452: PUSH
38453: LD_VAR 0 1
38457: PPUSH
38458: LD_INT 52
38460: PPUSH
38461: CALL_OW 321
38465: PUSH
38466: LD_INT 2
38468: EQUAL
38469: AND
38470: IFFALSE 38487
// bpoints := bpoints * 1.2 ;
38472: LD_ADDR_VAR 0 10
38476: PUSH
38477: LD_VAR 0 10
38481: PUSH
38482: LD_REAL  1.20000000000000E+0000
38485: MUL
38486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38487: LD_VAR 0 6
38491: PPUSH
38492: CALL_OW 264
38496: PUSH
38497: LD_INT 6
38499: PUSH
38500: LD_INT 46
38502: PUSH
38503: LD_INT 47
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: IN
38511: IFFALSE 38528
// bpoints := bpoints * 1.2 ;
38513: LD_ADDR_VAR 0 10
38517: PUSH
38518: LD_VAR 0 10
38522: PUSH
38523: LD_REAL  1.20000000000000E+0000
38526: MUL
38527: ST_TO_ADDR
// end ; unit_building :
38528: GO 38542
38530: LD_INT 3
38532: DOUBLE
38533: EQUAL
38534: IFTRUE 38538
38536: GO 38541
38538: POP
// ; end ;
38539: GO 38542
38541: POP
// for j = 1 to 3 do
38542: LD_ADDR_VAR 0 7
38546: PUSH
38547: DOUBLE
38548: LD_INT 1
38550: DEC
38551: ST_TO_ADDR
38552: LD_INT 3
38554: PUSH
38555: FOR_TO
38556: IFFALSE 38609
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38558: LD_ADDR_VAR 0 5
38562: PUSH
38563: LD_VAR 0 5
38567: PPUSH
38568: LD_VAR 0 7
38572: PPUSH
38573: LD_VAR 0 5
38577: PUSH
38578: LD_VAR 0 7
38582: ARRAY
38583: PUSH
38584: LD_VAR 0 9
38588: PUSH
38589: LD_VAR 0 7
38593: ARRAY
38594: PUSH
38595: LD_VAR 0 10
38599: MUL
38600: PLUS
38601: PPUSH
38602: CALL_OW 1
38606: ST_TO_ADDR
38607: GO 38555
38609: POP
38610: POP
// end ;
38611: GO 37090
38613: POP
38614: POP
// result := Replace ( result , 4 , tmp ) ;
38615: LD_ADDR_VAR 0 5
38619: PUSH
38620: LD_VAR 0 5
38624: PPUSH
38625: LD_INT 4
38627: PPUSH
38628: LD_VAR 0 8
38632: PPUSH
38633: CALL_OW 1
38637: ST_TO_ADDR
// end ;
38638: LD_VAR 0 5
38642: RET
// export function DangerAtRange ( unit , range ) ; begin
38643: LD_INT 0
38645: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38646: LD_ADDR_VAR 0 3
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 255
38660: PPUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 250
38670: PPUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 251
38680: PPUSH
38681: LD_VAR 0 2
38685: PPUSH
38686: CALL 36942 0 4
38690: ST_TO_ADDR
// end ;
38691: LD_VAR 0 3
38695: RET
// export function DangerInArea ( side , area ) ; begin
38696: LD_INT 0
38698: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38699: LD_ADDR_VAR 0 3
38703: PUSH
38704: LD_VAR 0 2
38708: PPUSH
38709: LD_INT 81
38711: PUSH
38712: LD_VAR 0 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PPUSH
38721: CALL_OW 70
38725: ST_TO_ADDR
// end ;
38726: LD_VAR 0 3
38730: RET
// export function IsExtension ( b ) ; begin
38731: LD_INT 0
38733: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38734: LD_ADDR_VAR 0 2
38738: PUSH
38739: LD_VAR 0 1
38743: PUSH
38744: LD_INT 23
38746: PUSH
38747: LD_INT 20
38749: PUSH
38750: LD_INT 22
38752: PUSH
38753: LD_INT 17
38755: PUSH
38756: LD_INT 24
38758: PUSH
38759: LD_INT 21
38761: PUSH
38762: LD_INT 19
38764: PUSH
38765: LD_INT 16
38767: PUSH
38768: LD_INT 25
38770: PUSH
38771: LD_INT 18
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: IN
38786: ST_TO_ADDR
// end ;
38787: LD_VAR 0 2
38791: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38792: LD_INT 0
38794: PPUSH
38795: PPUSH
38796: PPUSH
// result := [ ] ;
38797: LD_ADDR_VAR 0 4
38801: PUSH
38802: EMPTY
38803: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38804: LD_ADDR_VAR 0 5
38808: PUSH
38809: LD_VAR 0 2
38813: PPUSH
38814: LD_INT 21
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 70
38828: ST_TO_ADDR
// if not tmp then
38829: LD_VAR 0 5
38833: NOT
38834: IFFALSE 38838
// exit ;
38836: GO 38902
// if checkLink then
38838: LD_VAR 0 3
38842: IFFALSE 38892
// begin for i in tmp do
38844: LD_ADDR_VAR 0 6
38848: PUSH
38849: LD_VAR 0 5
38853: PUSH
38854: FOR_IN
38855: IFFALSE 38890
// if GetBase ( i ) <> base then
38857: LD_VAR 0 6
38861: PPUSH
38862: CALL_OW 274
38866: PUSH
38867: LD_VAR 0 1
38871: NONEQUAL
38872: IFFALSE 38888
// ComLinkToBase ( base , i ) ;
38874: LD_VAR 0 1
38878: PPUSH
38879: LD_VAR 0 6
38883: PPUSH
38884: CALL_OW 169
38888: GO 38854
38890: POP
38891: POP
// end ; result := tmp ;
38892: LD_ADDR_VAR 0 4
38896: PUSH
38897: LD_VAR 0 5
38901: ST_TO_ADDR
// end ;
38902: LD_VAR 0 4
38906: RET
// export function ComComplete ( units , b ) ; var i ; begin
38907: LD_INT 0
38909: PPUSH
38910: PPUSH
// if not units then
38911: LD_VAR 0 1
38915: NOT
38916: IFFALSE 38920
// exit ;
38918: GO 39010
// for i in units do
38920: LD_ADDR_VAR 0 4
38924: PUSH
38925: LD_VAR 0 1
38929: PUSH
38930: FOR_IN
38931: IFFALSE 39008
// if BuildingStatus ( b ) = bs_build then
38933: LD_VAR 0 2
38937: PPUSH
38938: CALL_OW 461
38942: PUSH
38943: LD_INT 1
38945: EQUAL
38946: IFFALSE 39006
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38948: LD_VAR 0 4
38952: PPUSH
38953: LD_STRING h
38955: PUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: CALL_OW 250
38965: PUSH
38966: LD_VAR 0 2
38970: PPUSH
38971: CALL_OW 251
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: PPUSH
39002: CALL_OW 446
39006: GO 38930
39008: POP
39009: POP
// end ;
39010: LD_VAR 0 3
39014: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39015: LD_INT 0
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39023: LD_VAR 0 1
39027: NOT
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: CALL_OW 263
39038: PUSH
39039: LD_INT 2
39041: NONEQUAL
39042: OR
39043: IFFALSE 39047
// exit ;
39045: GO 39363
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39047: LD_ADDR_VAR 0 6
39051: PUSH
39052: LD_INT 22
39054: PUSH
39055: LD_VAR 0 1
39059: PPUSH
39060: CALL_OW 255
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 30
39074: PUSH
39075: LD_INT 36
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 34
39084: PUSH
39085: LD_INT 31
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PPUSH
39101: CALL_OW 69
39105: ST_TO_ADDR
// if not tmp then
39106: LD_VAR 0 6
39110: NOT
39111: IFFALSE 39115
// exit ;
39113: GO 39363
// result := [ ] ;
39115: LD_ADDR_VAR 0 2
39119: PUSH
39120: EMPTY
39121: ST_TO_ADDR
// for i in tmp do
39122: LD_ADDR_VAR 0 3
39126: PUSH
39127: LD_VAR 0 6
39131: PUSH
39132: FOR_IN
39133: IFFALSE 39204
// begin t := UnitsInside ( i ) ;
39135: LD_ADDR_VAR 0 4
39139: PUSH
39140: LD_VAR 0 3
39144: PPUSH
39145: CALL_OW 313
39149: ST_TO_ADDR
// if t then
39150: LD_VAR 0 4
39154: IFFALSE 39202
// for j in t do
39156: LD_ADDR_VAR 0 7
39160: PUSH
39161: LD_VAR 0 4
39165: PUSH
39166: FOR_IN
39167: IFFALSE 39200
// result := Replace ( result , result + 1 , j ) ;
39169: LD_ADDR_VAR 0 2
39173: PUSH
39174: LD_VAR 0 2
39178: PPUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 1
39186: PLUS
39187: PPUSH
39188: LD_VAR 0 7
39192: PPUSH
39193: CALL_OW 1
39197: ST_TO_ADDR
39198: GO 39166
39200: POP
39201: POP
// end ;
39202: GO 39132
39204: POP
39205: POP
// if not result then
39206: LD_VAR 0 2
39210: NOT
39211: IFFALSE 39215
// exit ;
39213: GO 39363
// mech := result [ 1 ] ;
39215: LD_ADDR_VAR 0 5
39219: PUSH
39220: LD_VAR 0 2
39224: PUSH
39225: LD_INT 1
39227: ARRAY
39228: ST_TO_ADDR
// if result > 1 then
39229: LD_VAR 0 2
39233: PUSH
39234: LD_INT 1
39236: GREATER
39237: IFFALSE 39349
// begin for i = 2 to result do
39239: LD_ADDR_VAR 0 3
39243: PUSH
39244: DOUBLE
39245: LD_INT 2
39247: DEC
39248: ST_TO_ADDR
39249: LD_VAR 0 2
39253: PUSH
39254: FOR_TO
39255: IFFALSE 39347
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39257: LD_ADDR_VAR 0 4
39261: PUSH
39262: LD_VAR 0 2
39266: PUSH
39267: LD_VAR 0 3
39271: ARRAY
39272: PPUSH
39273: LD_INT 3
39275: PPUSH
39276: CALL_OW 259
39280: PUSH
39281: LD_VAR 0 2
39285: PUSH
39286: LD_VAR 0 3
39290: ARRAY
39291: PPUSH
39292: CALL_OW 432
39296: MINUS
39297: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39298: LD_VAR 0 4
39302: PUSH
39303: LD_VAR 0 5
39307: PPUSH
39308: LD_INT 3
39310: PPUSH
39311: CALL_OW 259
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: CALL_OW 432
39325: MINUS
39326: GREATEREQUAL
39327: IFFALSE 39345
// mech := result [ i ] ;
39329: LD_ADDR_VAR 0 5
39333: PUSH
39334: LD_VAR 0 2
39338: PUSH
39339: LD_VAR 0 3
39343: ARRAY
39344: ST_TO_ADDR
// end ;
39345: GO 39254
39347: POP
39348: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39349: LD_VAR 0 1
39353: PPUSH
39354: LD_VAR 0 5
39358: PPUSH
39359: CALL_OW 135
// end ;
39363: LD_VAR 0 2
39367: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39368: LD_INT 0
39370: PPUSH
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
// result := [ ] ;
39383: LD_ADDR_VAR 0 7
39387: PUSH
39388: EMPTY
39389: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 266
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: IN
39410: NOT
39411: IFFALSE 39415
// exit ;
39413: GO 41049
// if name then
39415: LD_VAR 0 3
39419: IFFALSE 39435
// SetBName ( base_dep , name ) ;
39421: LD_VAR 0 1
39425: PPUSH
39426: LD_VAR 0 3
39430: PPUSH
39431: CALL_OW 500
// base := GetBase ( base_dep ) ;
39435: LD_ADDR_VAR 0 15
39439: PUSH
39440: LD_VAR 0 1
39444: PPUSH
39445: CALL_OW 274
39449: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39450: LD_ADDR_VAR 0 16
39454: PUSH
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 255
39464: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39465: LD_ADDR_VAR 0 17
39469: PUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: CALL_OW 248
39479: ST_TO_ADDR
// if sources then
39480: LD_VAR 0 5
39484: IFFALSE 39531
// for i = 1 to 3 do
39486: LD_ADDR_VAR 0 8
39490: PUSH
39491: DOUBLE
39492: LD_INT 1
39494: DEC
39495: ST_TO_ADDR
39496: LD_INT 3
39498: PUSH
39499: FOR_TO
39500: IFFALSE 39529
// AddResourceType ( base , i , sources [ i ] ) ;
39502: LD_VAR 0 15
39506: PPUSH
39507: LD_VAR 0 8
39511: PPUSH
39512: LD_VAR 0 5
39516: PUSH
39517: LD_VAR 0 8
39521: ARRAY
39522: PPUSH
39523: CALL_OW 276
39527: GO 39499
39529: POP
39530: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39531: LD_ADDR_VAR 0 18
39535: PUSH
39536: LD_VAR 0 15
39540: PPUSH
39541: LD_VAR 0 2
39545: PPUSH
39546: LD_INT 1
39548: PPUSH
39549: CALL 38792 0 3
39553: ST_TO_ADDR
// InitHc ;
39554: CALL_OW 19
// InitUc ;
39558: CALL_OW 18
// uc_side := side ;
39562: LD_ADDR_OWVAR 20
39566: PUSH
39567: LD_VAR 0 16
39571: ST_TO_ADDR
// uc_nation := nation ;
39572: LD_ADDR_OWVAR 21
39576: PUSH
39577: LD_VAR 0 17
39581: ST_TO_ADDR
// if buildings then
39582: LD_VAR 0 18
39586: IFFALSE 40908
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39588: LD_ADDR_VAR 0 19
39592: PUSH
39593: LD_VAR 0 18
39597: PPUSH
39598: LD_INT 2
39600: PUSH
39601: LD_INT 30
39603: PUSH
39604: LD_INT 29
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 30
39613: PUSH
39614: LD_INT 30
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: PPUSH
39626: CALL_OW 72
39630: ST_TO_ADDR
// if tmp then
39631: LD_VAR 0 19
39635: IFFALSE 39683
// for i in tmp do
39637: LD_ADDR_VAR 0 8
39641: PUSH
39642: LD_VAR 0 19
39646: PUSH
39647: FOR_IN
39648: IFFALSE 39681
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39650: LD_VAR 0 8
39654: PPUSH
39655: CALL_OW 250
39659: PPUSH
39660: LD_VAR 0 8
39664: PPUSH
39665: CALL_OW 251
39669: PPUSH
39670: LD_VAR 0 16
39674: PPUSH
39675: CALL_OW 441
39679: GO 39647
39681: POP
39682: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39683: LD_VAR 0 18
39687: PPUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 30
39693: PUSH
39694: LD_INT 32
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 30
39703: PUSH
39704: LD_INT 33
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: PPUSH
39716: CALL_OW 72
39720: IFFALSE 39808
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39722: LD_ADDR_VAR 0 8
39726: PUSH
39727: LD_VAR 0 18
39731: PPUSH
39732: LD_INT 2
39734: PUSH
39735: LD_INT 30
39737: PUSH
39738: LD_INT 32
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 30
39747: PUSH
39748: LD_INT 33
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: PPUSH
39760: CALL_OW 72
39764: PUSH
39765: FOR_IN
39766: IFFALSE 39806
// begin if not GetBWeapon ( i ) then
39768: LD_VAR 0 8
39772: PPUSH
39773: CALL_OW 269
39777: NOT
39778: IFFALSE 39804
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39780: LD_VAR 0 8
39784: PPUSH
39785: LD_VAR 0 8
39789: PPUSH
39790: LD_VAR 0 2
39794: PPUSH
39795: CALL 41054 0 2
39799: PPUSH
39800: CALL_OW 431
// end ;
39804: GO 39765
39806: POP
39807: POP
// end ; for i = 1 to personel do
39808: LD_ADDR_VAR 0 8
39812: PUSH
39813: DOUBLE
39814: LD_INT 1
39816: DEC
39817: ST_TO_ADDR
39818: LD_VAR 0 6
39822: PUSH
39823: FOR_TO
39824: IFFALSE 40888
// begin if i > 4 then
39826: LD_VAR 0 8
39830: PUSH
39831: LD_INT 4
39833: GREATER
39834: IFFALSE 39838
// break ;
39836: GO 40888
// case i of 1 :
39838: LD_VAR 0 8
39842: PUSH
39843: LD_INT 1
39845: DOUBLE
39846: EQUAL
39847: IFTRUE 39851
39849: GO 39931
39851: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39852: LD_ADDR_VAR 0 12
39856: PUSH
39857: LD_VAR 0 18
39861: PPUSH
39862: LD_INT 22
39864: PUSH
39865: LD_VAR 0 16
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 58
39876: PUSH
39877: EMPTY
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 30
39885: PUSH
39886: LD_INT 32
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 30
39895: PUSH
39896: LD_INT 4
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 5
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: PPUSH
39924: CALL_OW 72
39928: ST_TO_ADDR
39929: GO 40153
39931: LD_INT 2
39933: DOUBLE
39934: EQUAL
39935: IFTRUE 39939
39937: GO 40001
39939: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39940: LD_ADDR_VAR 0 12
39944: PUSH
39945: LD_VAR 0 18
39949: PPUSH
39950: LD_INT 22
39952: PUSH
39953: LD_VAR 0 16
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 30
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 30
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PPUSH
39994: CALL_OW 72
39998: ST_TO_ADDR
39999: GO 40153
40001: LD_INT 3
40003: DOUBLE
40004: EQUAL
40005: IFTRUE 40009
40007: GO 40071
40009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40010: LD_ADDR_VAR 0 12
40014: PUSH
40015: LD_VAR 0 18
40019: PPUSH
40020: LD_INT 22
40022: PUSH
40023: LD_VAR 0 16
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 30
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 30
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PPUSH
40064: CALL_OW 72
40068: ST_TO_ADDR
40069: GO 40153
40071: LD_INT 4
40073: DOUBLE
40074: EQUAL
40075: IFTRUE 40079
40077: GO 40152
40079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40080: LD_ADDR_VAR 0 12
40084: PUSH
40085: LD_VAR 0 18
40089: PPUSH
40090: LD_INT 22
40092: PUSH
40093: LD_VAR 0 16
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 30
40107: PUSH
40108: LD_INT 6
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 30
40117: PUSH
40118: LD_INT 7
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 30
40127: PUSH
40128: LD_INT 8
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PPUSH
40145: CALL_OW 72
40149: ST_TO_ADDR
40150: GO 40153
40152: POP
// if i = 1 then
40153: LD_VAR 0 8
40157: PUSH
40158: LD_INT 1
40160: EQUAL
40161: IFFALSE 40272
// begin tmp := [ ] ;
40163: LD_ADDR_VAR 0 19
40167: PUSH
40168: EMPTY
40169: ST_TO_ADDR
// for j in f do
40170: LD_ADDR_VAR 0 9
40174: PUSH
40175: LD_VAR 0 12
40179: PUSH
40180: FOR_IN
40181: IFFALSE 40254
// if GetBType ( j ) = b_bunker then
40183: LD_VAR 0 9
40187: PPUSH
40188: CALL_OW 266
40192: PUSH
40193: LD_INT 32
40195: EQUAL
40196: IFFALSE 40223
// tmp := Insert ( tmp , 1 , j ) else
40198: LD_ADDR_VAR 0 19
40202: PUSH
40203: LD_VAR 0 19
40207: PPUSH
40208: LD_INT 1
40210: PPUSH
40211: LD_VAR 0 9
40215: PPUSH
40216: CALL_OW 2
40220: ST_TO_ADDR
40221: GO 40252
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40223: LD_ADDR_VAR 0 19
40227: PUSH
40228: LD_VAR 0 19
40232: PPUSH
40233: LD_VAR 0 19
40237: PUSH
40238: LD_INT 1
40240: PLUS
40241: PPUSH
40242: LD_VAR 0 9
40246: PPUSH
40247: CALL_OW 2
40251: ST_TO_ADDR
40252: GO 40180
40254: POP
40255: POP
// if tmp then
40256: LD_VAR 0 19
40260: IFFALSE 40272
// f := tmp ;
40262: LD_ADDR_VAR 0 12
40266: PUSH
40267: LD_VAR 0 19
40271: ST_TO_ADDR
// end ; x := personel [ i ] ;
40272: LD_ADDR_VAR 0 13
40276: PUSH
40277: LD_VAR 0 6
40281: PUSH
40282: LD_VAR 0 8
40286: ARRAY
40287: ST_TO_ADDR
// if x = - 1 then
40288: LD_VAR 0 13
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: EQUAL
40297: IFFALSE 40506
// begin for j in f do
40299: LD_ADDR_VAR 0 9
40303: PUSH
40304: LD_VAR 0 12
40308: PUSH
40309: FOR_IN
40310: IFFALSE 40502
// repeat InitHc ;
40312: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40316: LD_VAR 0 9
40320: PPUSH
40321: CALL_OW 266
40325: PUSH
40326: LD_INT 5
40328: EQUAL
40329: IFFALSE 40399
// begin if UnitsInside ( j ) < 3 then
40331: LD_VAR 0 9
40335: PPUSH
40336: CALL_OW 313
40340: PUSH
40341: LD_INT 3
40343: LESS
40344: IFFALSE 40380
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40346: LD_INT 0
40348: PPUSH
40349: LD_INT 5
40351: PUSH
40352: LD_INT 8
40354: PUSH
40355: LD_INT 9
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: PUSH
40363: LD_VAR 0 17
40367: ARRAY
40368: PPUSH
40369: LD_VAR 0 4
40373: PPUSH
40374: CALL_OW 380
40378: GO 40397
// PrepareHuman ( false , i , skill ) ;
40380: LD_INT 0
40382: PPUSH
40383: LD_VAR 0 8
40387: PPUSH
40388: LD_VAR 0 4
40392: PPUSH
40393: CALL_OW 380
// end else
40397: GO 40416
// PrepareHuman ( false , i , skill ) ;
40399: LD_INT 0
40401: PPUSH
40402: LD_VAR 0 8
40406: PPUSH
40407: LD_VAR 0 4
40411: PPUSH
40412: CALL_OW 380
// un := CreateHuman ;
40416: LD_ADDR_VAR 0 14
40420: PUSH
40421: CALL_OW 44
40425: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40426: LD_ADDR_VAR 0 7
40430: PUSH
40431: LD_VAR 0 7
40435: PPUSH
40436: LD_INT 1
40438: PPUSH
40439: LD_VAR 0 14
40443: PPUSH
40444: CALL_OW 2
40448: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40449: LD_VAR 0 14
40453: PPUSH
40454: LD_VAR 0 9
40458: PPUSH
40459: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40463: LD_VAR 0 9
40467: PPUSH
40468: CALL_OW 313
40472: PUSH
40473: LD_INT 6
40475: EQUAL
40476: PUSH
40477: LD_VAR 0 9
40481: PPUSH
40482: CALL_OW 266
40486: PUSH
40487: LD_INT 32
40489: PUSH
40490: LD_INT 31
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: IN
40497: OR
40498: IFFALSE 40312
40500: GO 40309
40502: POP
40503: POP
// end else
40504: GO 40886
// for j = 1 to x do
40506: LD_ADDR_VAR 0 9
40510: PUSH
40511: DOUBLE
40512: LD_INT 1
40514: DEC
40515: ST_TO_ADDR
40516: LD_VAR 0 13
40520: PUSH
40521: FOR_TO
40522: IFFALSE 40884
// begin InitHc ;
40524: CALL_OW 19
// if not f then
40528: LD_VAR 0 12
40532: NOT
40533: IFFALSE 40622
// begin PrepareHuman ( false , i , skill ) ;
40535: LD_INT 0
40537: PPUSH
40538: LD_VAR 0 8
40542: PPUSH
40543: LD_VAR 0 4
40547: PPUSH
40548: CALL_OW 380
// un := CreateHuman ;
40552: LD_ADDR_VAR 0 14
40556: PUSH
40557: CALL_OW 44
40561: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40562: LD_ADDR_VAR 0 7
40566: PUSH
40567: LD_VAR 0 7
40571: PPUSH
40572: LD_INT 1
40574: PPUSH
40575: LD_VAR 0 14
40579: PPUSH
40580: CALL_OW 2
40584: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40585: LD_VAR 0 14
40589: PPUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 250
40599: PPUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 251
40609: PPUSH
40610: LD_INT 10
40612: PPUSH
40613: LD_INT 0
40615: PPUSH
40616: CALL_OW 50
// continue ;
40620: GO 40521
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40622: LD_VAR 0 12
40626: PUSH
40627: LD_INT 1
40629: ARRAY
40630: PPUSH
40631: CALL_OW 313
40635: PUSH
40636: LD_VAR 0 12
40640: PUSH
40641: LD_INT 1
40643: ARRAY
40644: PPUSH
40645: CALL_OW 266
40649: PUSH
40650: LD_INT 32
40652: PUSH
40653: LD_INT 31
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: IN
40660: AND
40661: PUSH
40662: LD_VAR 0 12
40666: PUSH
40667: LD_INT 1
40669: ARRAY
40670: PPUSH
40671: CALL_OW 313
40675: PUSH
40676: LD_INT 6
40678: EQUAL
40679: OR
40680: IFFALSE 40700
// f := Delete ( f , 1 ) ;
40682: LD_ADDR_VAR 0 12
40686: PUSH
40687: LD_VAR 0 12
40691: PPUSH
40692: LD_INT 1
40694: PPUSH
40695: CALL_OW 3
40699: ST_TO_ADDR
// if not f then
40700: LD_VAR 0 12
40704: NOT
40705: IFFALSE 40723
// begin x := x + 2 ;
40707: LD_ADDR_VAR 0 13
40711: PUSH
40712: LD_VAR 0 13
40716: PUSH
40717: LD_INT 2
40719: PLUS
40720: ST_TO_ADDR
// continue ;
40721: GO 40521
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40723: LD_VAR 0 12
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: CALL_OW 266
40736: PUSH
40737: LD_INT 5
40739: EQUAL
40740: IFFALSE 40814
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40742: LD_VAR 0 12
40746: PUSH
40747: LD_INT 1
40749: ARRAY
40750: PPUSH
40751: CALL_OW 313
40755: PUSH
40756: LD_INT 3
40758: LESS
40759: IFFALSE 40795
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40761: LD_INT 0
40763: PPUSH
40764: LD_INT 5
40766: PUSH
40767: LD_INT 8
40769: PUSH
40770: LD_INT 9
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: PUSH
40778: LD_VAR 0 17
40782: ARRAY
40783: PPUSH
40784: LD_VAR 0 4
40788: PPUSH
40789: CALL_OW 380
40793: GO 40812
// PrepareHuman ( false , i , skill ) ;
40795: LD_INT 0
40797: PPUSH
40798: LD_VAR 0 8
40802: PPUSH
40803: LD_VAR 0 4
40807: PPUSH
40808: CALL_OW 380
// end else
40812: GO 40831
// PrepareHuman ( false , i , skill ) ;
40814: LD_INT 0
40816: PPUSH
40817: LD_VAR 0 8
40821: PPUSH
40822: LD_VAR 0 4
40826: PPUSH
40827: CALL_OW 380
// un := CreateHuman ;
40831: LD_ADDR_VAR 0 14
40835: PUSH
40836: CALL_OW 44
40840: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40841: LD_ADDR_VAR 0 7
40845: PUSH
40846: LD_VAR 0 7
40850: PPUSH
40851: LD_INT 1
40853: PPUSH
40854: LD_VAR 0 14
40858: PPUSH
40859: CALL_OW 2
40863: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40864: LD_VAR 0 14
40868: PPUSH
40869: LD_VAR 0 12
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: CALL_OW 52
// end ;
40882: GO 40521
40884: POP
40885: POP
// end ;
40886: GO 39823
40888: POP
40889: POP
// result := result ^ buildings ;
40890: LD_ADDR_VAR 0 7
40894: PUSH
40895: LD_VAR 0 7
40899: PUSH
40900: LD_VAR 0 18
40904: ADD
40905: ST_TO_ADDR
// end else
40906: GO 41049
// begin for i = 1 to personel do
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: DOUBLE
40914: LD_INT 1
40916: DEC
40917: ST_TO_ADDR
40918: LD_VAR 0 6
40922: PUSH
40923: FOR_TO
40924: IFFALSE 41047
// begin if i > 4 then
40926: LD_VAR 0 8
40930: PUSH
40931: LD_INT 4
40933: GREATER
40934: IFFALSE 40938
// break ;
40936: GO 41047
// x := personel [ i ] ;
40938: LD_ADDR_VAR 0 13
40942: PUSH
40943: LD_VAR 0 6
40947: PUSH
40948: LD_VAR 0 8
40952: ARRAY
40953: ST_TO_ADDR
// if x = - 1 then
40954: LD_VAR 0 13
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: EQUAL
40963: IFFALSE 40967
// continue ;
40965: GO 40923
// PrepareHuman ( false , i , skill ) ;
40967: LD_INT 0
40969: PPUSH
40970: LD_VAR 0 8
40974: PPUSH
40975: LD_VAR 0 4
40979: PPUSH
40980: CALL_OW 380
// un := CreateHuman ;
40984: LD_ADDR_VAR 0 14
40988: PUSH
40989: CALL_OW 44
40993: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40994: LD_VAR 0 14
40998: PPUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 250
41008: PPUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 251
41018: PPUSH
41019: LD_INT 10
41021: PPUSH
41022: LD_INT 0
41024: PPUSH
41025: CALL_OW 50
// result := result ^ un ;
41029: LD_ADDR_VAR 0 7
41033: PUSH
41034: LD_VAR 0 7
41038: PUSH
41039: LD_VAR 0 14
41043: ADD
41044: ST_TO_ADDR
// end ;
41045: GO 40923
41047: POP
41048: POP
// end ; end ;
41049: LD_VAR 0 7
41053: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
// result := false ;
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: LD_INT 0
41079: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41080: LD_VAR 0 1
41084: NOT
41085: PUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: CALL_OW 266
41095: PUSH
41096: LD_INT 32
41098: PUSH
41099: LD_INT 33
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: IN
41106: NOT
41107: OR
41108: IFFALSE 41112
// exit ;
41110: GO 42221
// nat := GetNation ( tower ) ;
41112: LD_ADDR_VAR 0 12
41116: PUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 248
41126: ST_TO_ADDR
// side := GetSide ( tower ) ;
41127: LD_ADDR_VAR 0 16
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 255
41141: ST_TO_ADDR
// x := GetX ( tower ) ;
41142: LD_ADDR_VAR 0 10
41146: PUSH
41147: LD_VAR 0 1
41151: PPUSH
41152: CALL_OW 250
41156: ST_TO_ADDR
// y := GetY ( tower ) ;
41157: LD_ADDR_VAR 0 11
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 251
41171: ST_TO_ADDR
// if not x or not y then
41172: LD_VAR 0 10
41176: NOT
41177: PUSH
41178: LD_VAR 0 11
41182: NOT
41183: OR
41184: IFFALSE 41188
// exit ;
41186: GO 42221
// weapon := 0 ;
41188: LD_ADDR_VAR 0 18
41192: PUSH
41193: LD_INT 0
41195: ST_TO_ADDR
// fac_list := [ ] ;
41196: LD_ADDR_VAR 0 17
41200: PUSH
41201: EMPTY
41202: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41203: LD_ADDR_VAR 0 6
41207: PUSH
41208: LD_VAR 0 1
41212: PPUSH
41213: CALL_OW 274
41217: PPUSH
41218: LD_VAR 0 2
41222: PPUSH
41223: LD_INT 0
41225: PPUSH
41226: CALL 38792 0 3
41230: PPUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PPUSH
41241: CALL_OW 72
41245: ST_TO_ADDR
// if not factories then
41246: LD_VAR 0 6
41250: NOT
41251: IFFALSE 41255
// exit ;
41253: GO 42221
// for i in factories do
41255: LD_ADDR_VAR 0 8
41259: PUSH
41260: LD_VAR 0 6
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41291
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41268: LD_ADDR_VAR 0 17
41272: PUSH
41273: LD_VAR 0 17
41277: PUSH
41278: LD_VAR 0 8
41282: PPUSH
41283: CALL_OW 478
41287: UNION
41288: ST_TO_ADDR
41289: GO 41265
41291: POP
41292: POP
// if not fac_list then
41293: LD_VAR 0 17
41297: NOT
41298: IFFALSE 41302
// exit ;
41300: GO 42221
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41302: LD_ADDR_VAR 0 5
41306: PUSH
41307: LD_INT 4
41309: PUSH
41310: LD_INT 5
41312: PUSH
41313: LD_INT 9
41315: PUSH
41316: LD_INT 10
41318: PUSH
41319: LD_INT 6
41321: PUSH
41322: LD_INT 7
41324: PUSH
41325: LD_INT 11
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 27
41339: PUSH
41340: LD_INT 28
41342: PUSH
41343: LD_INT 26
41345: PUSH
41346: LD_INT 30
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 43
41357: PUSH
41358: LD_INT 44
41360: PUSH
41361: LD_INT 46
41363: PUSH
41364: LD_INT 45
41366: PUSH
41367: LD_INT 47
41369: PUSH
41370: LD_INT 49
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: PUSH
41386: LD_VAR 0 12
41390: ARRAY
41391: ST_TO_ADDR
// list := list isect fac_list ;
41392: LD_ADDR_VAR 0 5
41396: PUSH
41397: LD_VAR 0 5
41401: PUSH
41402: LD_VAR 0 17
41406: ISECT
41407: ST_TO_ADDR
// if not list then
41408: LD_VAR 0 5
41412: NOT
41413: IFFALSE 41417
// exit ;
41415: GO 42221
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41417: LD_VAR 0 12
41421: PUSH
41422: LD_INT 3
41424: EQUAL
41425: PUSH
41426: LD_INT 49
41428: PUSH
41429: LD_VAR 0 5
41433: IN
41434: AND
41435: PUSH
41436: LD_INT 31
41438: PPUSH
41439: LD_VAR 0 16
41443: PPUSH
41444: CALL_OW 321
41448: PUSH
41449: LD_INT 2
41451: EQUAL
41452: AND
41453: IFFALSE 41513
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41455: LD_INT 22
41457: PUSH
41458: LD_VAR 0 16
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 35
41469: PUSH
41470: LD_INT 49
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 91
41479: PUSH
41480: LD_VAR 0 1
41484: PUSH
41485: LD_INT 10
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: PPUSH
41498: CALL_OW 69
41502: NOT
41503: IFFALSE 41513
// weapon := ru_time_lapser ;
41505: LD_ADDR_VAR 0 18
41509: PUSH
41510: LD_INT 49
41512: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41513: LD_VAR 0 12
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: IN
41528: PUSH
41529: LD_INT 11
41531: PUSH
41532: LD_VAR 0 5
41536: IN
41537: PUSH
41538: LD_INT 30
41540: PUSH
41541: LD_VAR 0 5
41545: IN
41546: OR
41547: AND
41548: PUSH
41549: LD_INT 6
41551: PPUSH
41552: LD_VAR 0 16
41556: PPUSH
41557: CALL_OW 321
41561: PUSH
41562: LD_INT 2
41564: EQUAL
41565: AND
41566: IFFALSE 41731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41568: LD_INT 22
41570: PUSH
41571: LD_VAR 0 16
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 35
41585: PUSH
41586: LD_INT 11
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 35
41595: PUSH
41596: LD_INT 30
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 91
41610: PUSH
41611: LD_VAR 0 1
41615: PUSH
41616: LD_INT 18
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: PPUSH
41629: CALL_OW 69
41633: NOT
41634: PUSH
41635: LD_INT 22
41637: PUSH
41638: LD_VAR 0 16
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 30
41652: PUSH
41653: LD_INT 32
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 30
41662: PUSH
41663: LD_INT 33
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 91
41677: PUSH
41678: LD_VAR 0 1
41682: PUSH
41683: LD_INT 12
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: PPUSH
41699: CALL_OW 69
41703: PUSH
41704: LD_INT 2
41706: GREATER
41707: AND
41708: IFFALSE 41731
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41710: LD_ADDR_VAR 0 18
41714: PUSH
41715: LD_INT 11
41717: PUSH
41718: LD_INT 30
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_VAR 0 12
41729: ARRAY
41730: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41731: LD_VAR 0 18
41735: NOT
41736: PUSH
41737: LD_INT 40
41739: PPUSH
41740: LD_VAR 0 16
41744: PPUSH
41745: CALL_OW 321
41749: PUSH
41750: LD_INT 2
41752: EQUAL
41753: AND
41754: PUSH
41755: LD_INT 7
41757: PUSH
41758: LD_VAR 0 5
41762: IN
41763: PUSH
41764: LD_INT 28
41766: PUSH
41767: LD_VAR 0 5
41771: IN
41772: OR
41773: PUSH
41774: LD_INT 45
41776: PUSH
41777: LD_VAR 0 5
41781: IN
41782: OR
41783: AND
41784: IFFALSE 42038
// begin hex := GetHexInfo ( x , y ) ;
41786: LD_ADDR_VAR 0 4
41790: PUSH
41791: LD_VAR 0 10
41795: PPUSH
41796: LD_VAR 0 11
41800: PPUSH
41801: CALL_OW 546
41805: ST_TO_ADDR
// if hex [ 1 ] then
41806: LD_VAR 0 4
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: IFFALSE 41818
// exit ;
41816: GO 42221
// height := hex [ 2 ] ;
41818: LD_ADDR_VAR 0 15
41822: PUSH
41823: LD_VAR 0 4
41827: PUSH
41828: LD_INT 2
41830: ARRAY
41831: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41832: LD_ADDR_VAR 0 14
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: LD_INT 5
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
// for i in tmp do
41855: LD_ADDR_VAR 0 8
41859: PUSH
41860: LD_VAR 0 14
41864: PUSH
41865: FOR_IN
41866: IFFALSE 42036
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41868: LD_ADDR_VAR 0 9
41872: PUSH
41873: LD_VAR 0 10
41877: PPUSH
41878: LD_VAR 0 8
41882: PPUSH
41883: LD_INT 5
41885: PPUSH
41886: CALL_OW 272
41890: PUSH
41891: LD_VAR 0 11
41895: PPUSH
41896: LD_VAR 0 8
41900: PPUSH
41901: LD_INT 5
41903: PPUSH
41904: CALL_OW 273
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41913: LD_VAR 0 9
41917: PUSH
41918: LD_INT 1
41920: ARRAY
41921: PPUSH
41922: LD_VAR 0 9
41926: PUSH
41927: LD_INT 2
41929: ARRAY
41930: PPUSH
41931: CALL_OW 488
41935: IFFALSE 42034
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41937: LD_ADDR_VAR 0 4
41941: PUSH
41942: LD_VAR 0 9
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: PPUSH
41951: LD_VAR 0 9
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: PPUSH
41960: CALL_OW 546
41964: ST_TO_ADDR
// if hex [ 1 ] then
41965: LD_VAR 0 4
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: IFFALSE 41977
// continue ;
41975: GO 41865
// h := hex [ 2 ] ;
41977: LD_ADDR_VAR 0 13
41981: PUSH
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: ST_TO_ADDR
// if h + 7 < height then
41991: LD_VAR 0 13
41995: PUSH
41996: LD_INT 7
41998: PLUS
41999: PUSH
42000: LD_VAR 0 15
42004: LESS
42005: IFFALSE 42034
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42007: LD_ADDR_VAR 0 18
42011: PUSH
42012: LD_INT 7
42014: PUSH
42015: LD_INT 28
42017: PUSH
42018: LD_INT 45
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: PUSH
42026: LD_VAR 0 12
42030: ARRAY
42031: ST_TO_ADDR
// break ;
42032: GO 42036
// end ; end ; end ;
42034: GO 41865
42036: POP
42037: POP
// end ; if not weapon then
42038: LD_VAR 0 18
42042: NOT
42043: IFFALSE 42103
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42045: LD_ADDR_VAR 0 5
42049: PUSH
42050: LD_VAR 0 5
42054: PUSH
42055: LD_INT 11
42057: PUSH
42058: LD_INT 30
42060: PUSH
42061: LD_INT 49
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: DIFF
42069: ST_TO_ADDR
// if not list then
42070: LD_VAR 0 5
42074: NOT
42075: IFFALSE 42079
// exit ;
42077: GO 42221
// weapon := list [ rand ( 1 , list ) ] ;
42079: LD_ADDR_VAR 0 18
42083: PUSH
42084: LD_VAR 0 5
42088: PUSH
42089: LD_INT 1
42091: PPUSH
42092: LD_VAR 0 5
42096: PPUSH
42097: CALL_OW 12
42101: ARRAY
42102: ST_TO_ADDR
// end ; if weapon then
42103: LD_VAR 0 18
42107: IFFALSE 42221
// begin tmp := CostOfWeapon ( weapon ) ;
42109: LD_ADDR_VAR 0 14
42113: PUSH
42114: LD_VAR 0 18
42118: PPUSH
42119: CALL_OW 451
42123: ST_TO_ADDR
// j := GetBase ( tower ) ;
42124: LD_ADDR_VAR 0 9
42128: PUSH
42129: LD_VAR 0 1
42133: PPUSH
42134: CALL_OW 274
42138: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42139: LD_VAR 0 9
42143: PPUSH
42144: LD_INT 1
42146: PPUSH
42147: CALL_OW 275
42151: PUSH
42152: LD_VAR 0 14
42156: PUSH
42157: LD_INT 1
42159: ARRAY
42160: GREATEREQUAL
42161: PUSH
42162: LD_VAR 0 9
42166: PPUSH
42167: LD_INT 2
42169: PPUSH
42170: CALL_OW 275
42174: PUSH
42175: LD_VAR 0 14
42179: PUSH
42180: LD_INT 2
42182: ARRAY
42183: GREATEREQUAL
42184: AND
42185: PUSH
42186: LD_VAR 0 9
42190: PPUSH
42191: LD_INT 3
42193: PPUSH
42194: CALL_OW 275
42198: PUSH
42199: LD_VAR 0 14
42203: PUSH
42204: LD_INT 3
42206: ARRAY
42207: GREATEREQUAL
42208: AND
42209: IFFALSE 42221
// result := weapon ;
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_VAR 0 18
42220: ST_TO_ADDR
// end ; end ;
42221: LD_VAR 0 3
42225: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42226: LD_INT 0
42228: PPUSH
42229: PPUSH
// result := true ;
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_INT 1
42237: ST_TO_ADDR
// if array1 = array2 then
42238: LD_VAR 0 1
42242: PUSH
42243: LD_VAR 0 2
42247: EQUAL
42248: IFFALSE 42308
// begin for i = 1 to array1 do
42250: LD_ADDR_VAR 0 4
42254: PUSH
42255: DOUBLE
42256: LD_INT 1
42258: DEC
42259: ST_TO_ADDR
42260: LD_VAR 0 1
42264: PUSH
42265: FOR_TO
42266: IFFALSE 42304
// if array1 [ i ] <> array2 [ i ] then
42268: LD_VAR 0 1
42272: PUSH
42273: LD_VAR 0 4
42277: ARRAY
42278: PUSH
42279: LD_VAR 0 2
42283: PUSH
42284: LD_VAR 0 4
42288: ARRAY
42289: NONEQUAL
42290: IFFALSE 42302
// begin result := false ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_INT 0
42299: ST_TO_ADDR
// break ;
42300: GO 42304
// end ;
42302: GO 42265
42304: POP
42305: POP
// end else
42306: GO 42316
// result := false ;
42308: LD_ADDR_VAR 0 3
42312: PUSH
42313: LD_INT 0
42315: ST_TO_ADDR
// end ;
42316: LD_VAR 0 3
42320: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42321: LD_INT 0
42323: PPUSH
42324: PPUSH
// if not array1 or not array2 then
42325: LD_VAR 0 1
42329: NOT
42330: PUSH
42331: LD_VAR 0 2
42335: NOT
42336: OR
42337: IFFALSE 42341
// exit ;
42339: GO 42405
// result := true ;
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: LD_INT 1
42348: ST_TO_ADDR
// for i = 1 to array1 do
42349: LD_ADDR_VAR 0 4
42353: PUSH
42354: DOUBLE
42355: LD_INT 1
42357: DEC
42358: ST_TO_ADDR
42359: LD_VAR 0 1
42363: PUSH
42364: FOR_TO
42365: IFFALSE 42403
// if array1 [ i ] <> array2 [ i ] then
42367: LD_VAR 0 1
42371: PUSH
42372: LD_VAR 0 4
42376: ARRAY
42377: PUSH
42378: LD_VAR 0 2
42382: PUSH
42383: LD_VAR 0 4
42387: ARRAY
42388: NONEQUAL
42389: IFFALSE 42401
// begin result := false ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 0
42398: ST_TO_ADDR
// break ;
42399: GO 42403
// end ;
42401: GO 42364
42403: POP
42404: POP
// end ;
42405: LD_VAR 0 3
42409: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42410: LD_INT 0
42412: PPUSH
42413: PPUSH
42414: PPUSH
// pom := GetBase ( fac ) ;
42415: LD_ADDR_VAR 0 5
42419: PUSH
42420: LD_VAR 0 1
42424: PPUSH
42425: CALL_OW 274
42429: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42430: LD_ADDR_VAR 0 4
42434: PUSH
42435: LD_VAR 0 2
42439: PUSH
42440: LD_INT 1
42442: ARRAY
42443: PPUSH
42444: LD_VAR 0 2
42448: PUSH
42449: LD_INT 2
42451: ARRAY
42452: PPUSH
42453: LD_VAR 0 2
42457: PUSH
42458: LD_INT 3
42460: ARRAY
42461: PPUSH
42462: LD_VAR 0 2
42466: PUSH
42467: LD_INT 4
42469: ARRAY
42470: PPUSH
42471: CALL_OW 449
42475: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42476: LD_ADDR_VAR 0 3
42480: PUSH
42481: LD_VAR 0 5
42485: PPUSH
42486: LD_INT 1
42488: PPUSH
42489: CALL_OW 275
42493: PUSH
42494: LD_VAR 0 4
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: GREATEREQUAL
42503: PUSH
42504: LD_VAR 0 5
42508: PPUSH
42509: LD_INT 2
42511: PPUSH
42512: CALL_OW 275
42516: PUSH
42517: LD_VAR 0 4
42521: PUSH
42522: LD_INT 2
42524: ARRAY
42525: GREATEREQUAL
42526: AND
42527: PUSH
42528: LD_VAR 0 5
42532: PPUSH
42533: LD_INT 3
42535: PPUSH
42536: CALL_OW 275
42540: PUSH
42541: LD_VAR 0 4
42545: PUSH
42546: LD_INT 3
42548: ARRAY
42549: GREATEREQUAL
42550: AND
42551: ST_TO_ADDR
// end ;
42552: LD_VAR 0 3
42556: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42557: LD_INT 0
42559: PPUSH
42560: PPUSH
42561: PPUSH
42562: PPUSH
// pom := GetBase ( building ) ;
42563: LD_ADDR_VAR 0 3
42567: PUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: CALL_OW 274
42577: ST_TO_ADDR
// if not pom then
42578: LD_VAR 0 3
42582: NOT
42583: IFFALSE 42587
// exit ;
42585: GO 42757
// btype := GetBType ( building ) ;
42587: LD_ADDR_VAR 0 5
42591: PUSH
42592: LD_VAR 0 1
42596: PPUSH
42597: CALL_OW 266
42601: ST_TO_ADDR
// if btype = b_armoury then
42602: LD_VAR 0 5
42606: PUSH
42607: LD_INT 4
42609: EQUAL
42610: IFFALSE 42620
// btype := b_barracks ;
42612: LD_ADDR_VAR 0 5
42616: PUSH
42617: LD_INT 5
42619: ST_TO_ADDR
// if btype = b_depot then
42620: LD_VAR 0 5
42624: PUSH
42625: LD_INT 0
42627: EQUAL
42628: IFFALSE 42638
// btype := b_warehouse ;
42630: LD_ADDR_VAR 0 5
42634: PUSH
42635: LD_INT 1
42637: ST_TO_ADDR
// if btype = b_workshop then
42638: LD_VAR 0 5
42642: PUSH
42643: LD_INT 2
42645: EQUAL
42646: IFFALSE 42656
// btype := b_factory ;
42648: LD_ADDR_VAR 0 5
42652: PUSH
42653: LD_INT 3
42655: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42656: LD_ADDR_VAR 0 4
42660: PUSH
42661: LD_VAR 0 5
42665: PPUSH
42666: LD_VAR 0 1
42670: PPUSH
42671: CALL_OW 248
42675: PPUSH
42676: CALL_OW 450
42680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42681: LD_ADDR_VAR 0 2
42685: PUSH
42686: LD_VAR 0 3
42690: PPUSH
42691: LD_INT 1
42693: PPUSH
42694: CALL_OW 275
42698: PUSH
42699: LD_VAR 0 4
42703: PUSH
42704: LD_INT 1
42706: ARRAY
42707: GREATEREQUAL
42708: PUSH
42709: LD_VAR 0 3
42713: PPUSH
42714: LD_INT 2
42716: PPUSH
42717: CALL_OW 275
42721: PUSH
42722: LD_VAR 0 4
42726: PUSH
42727: LD_INT 2
42729: ARRAY
42730: GREATEREQUAL
42731: AND
42732: PUSH
42733: LD_VAR 0 3
42737: PPUSH
42738: LD_INT 3
42740: PPUSH
42741: CALL_OW 275
42745: PUSH
42746: LD_VAR 0 4
42750: PUSH
42751: LD_INT 3
42753: ARRAY
42754: GREATEREQUAL
42755: AND
42756: ST_TO_ADDR
// end ;
42757: LD_VAR 0 2
42761: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42762: LD_INT 0
42764: PPUSH
42765: PPUSH
42766: PPUSH
// pom := GetBase ( building ) ;
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: LD_VAR 0 1
42776: PPUSH
42777: CALL_OW 274
42781: ST_TO_ADDR
// if not pom then
42782: LD_VAR 0 4
42786: NOT
42787: IFFALSE 42791
// exit ;
42789: GO 42892
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42791: LD_ADDR_VAR 0 5
42795: PUSH
42796: LD_VAR 0 2
42800: PPUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 248
42810: PPUSH
42811: CALL_OW 450
42815: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42816: LD_ADDR_VAR 0 3
42820: PUSH
42821: LD_VAR 0 4
42825: PPUSH
42826: LD_INT 1
42828: PPUSH
42829: CALL_OW 275
42833: PUSH
42834: LD_VAR 0 5
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: GREATEREQUAL
42843: PUSH
42844: LD_VAR 0 4
42848: PPUSH
42849: LD_INT 2
42851: PPUSH
42852: CALL_OW 275
42856: PUSH
42857: LD_VAR 0 5
42861: PUSH
42862: LD_INT 2
42864: ARRAY
42865: GREATEREQUAL
42866: AND
42867: PUSH
42868: LD_VAR 0 4
42872: PPUSH
42873: LD_INT 3
42875: PPUSH
42876: CALL_OW 275
42880: PUSH
42881: LD_VAR 0 5
42885: PUSH
42886: LD_INT 3
42888: ARRAY
42889: GREATEREQUAL
42890: AND
42891: ST_TO_ADDR
// end ;
42892: LD_VAR 0 3
42896: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42897: LD_INT 0
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
// result := false ;
42910: LD_ADDR_VAR 0 8
42914: PUSH
42915: LD_INT 0
42917: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42918: LD_VAR 0 5
42922: NOT
42923: PUSH
42924: LD_VAR 0 1
42928: NOT
42929: OR
42930: PUSH
42931: LD_VAR 0 2
42935: NOT
42936: OR
42937: PUSH
42938: LD_VAR 0 3
42942: NOT
42943: OR
42944: IFFALSE 42948
// exit ;
42946: GO 43762
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42948: LD_ADDR_VAR 0 14
42952: PUSH
42953: LD_VAR 0 1
42957: PPUSH
42958: LD_VAR 0 2
42962: PPUSH
42963: LD_VAR 0 3
42967: PPUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: LD_VAR 0 5
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: PPUSH
42982: CALL_OW 248
42986: PPUSH
42987: LD_INT 0
42989: PPUSH
42990: CALL 44995 0 6
42994: ST_TO_ADDR
// if not hexes then
42995: LD_VAR 0 14
42999: NOT
43000: IFFALSE 43004
// exit ;
43002: GO 43762
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43004: LD_ADDR_VAR 0 17
43008: PUSH
43009: LD_VAR 0 5
43013: PPUSH
43014: LD_INT 22
43016: PUSH
43017: LD_VAR 0 13
43021: PPUSH
43022: CALL_OW 255
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 30
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 30
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PPUSH
43063: CALL_OW 72
43067: ST_TO_ADDR
// for i = 1 to hexes do
43068: LD_ADDR_VAR 0 9
43072: PUSH
43073: DOUBLE
43074: LD_INT 1
43076: DEC
43077: ST_TO_ADDR
43078: LD_VAR 0 14
43082: PUSH
43083: FOR_TO
43084: IFFALSE 43760
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43086: LD_ADDR_VAR 0 13
43090: PUSH
43091: LD_VAR 0 14
43095: PUSH
43096: LD_VAR 0 9
43100: ARRAY
43101: PUSH
43102: LD_INT 1
43104: ARRAY
43105: PPUSH
43106: LD_VAR 0 14
43110: PUSH
43111: LD_VAR 0 9
43115: ARRAY
43116: PUSH
43117: LD_INT 2
43119: ARRAY
43120: PPUSH
43121: CALL_OW 428
43125: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43126: LD_VAR 0 14
43130: PUSH
43131: LD_VAR 0 9
43135: ARRAY
43136: PUSH
43137: LD_INT 1
43139: ARRAY
43140: PPUSH
43141: LD_VAR 0 14
43145: PUSH
43146: LD_VAR 0 9
43150: ARRAY
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: PPUSH
43156: CALL_OW 351
43160: PUSH
43161: LD_VAR 0 14
43165: PUSH
43166: LD_VAR 0 9
43170: ARRAY
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PPUSH
43176: LD_VAR 0 14
43180: PUSH
43181: LD_VAR 0 9
43185: ARRAY
43186: PUSH
43187: LD_INT 2
43189: ARRAY
43190: PPUSH
43191: CALL_OW 488
43195: NOT
43196: OR
43197: PUSH
43198: LD_VAR 0 13
43202: PPUSH
43203: CALL_OW 247
43207: PUSH
43208: LD_INT 3
43210: EQUAL
43211: OR
43212: IFFALSE 43218
// exit ;
43214: POP
43215: POP
43216: GO 43762
// if not tmp then
43218: LD_VAR 0 13
43222: NOT
43223: IFFALSE 43227
// continue ;
43225: GO 43083
// result := true ;
43227: LD_ADDR_VAR 0 8
43231: PUSH
43232: LD_INT 1
43234: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43235: LD_VAR 0 6
43239: PUSH
43240: LD_VAR 0 13
43244: PPUSH
43245: CALL_OW 247
43249: PUSH
43250: LD_INT 2
43252: EQUAL
43253: AND
43254: PUSH
43255: LD_VAR 0 13
43259: PPUSH
43260: CALL_OW 263
43264: PUSH
43265: LD_INT 1
43267: EQUAL
43268: AND
43269: IFFALSE 43433
// begin if IsDrivenBy ( tmp ) then
43271: LD_VAR 0 13
43275: PPUSH
43276: CALL_OW 311
43280: IFFALSE 43284
// continue ;
43282: GO 43083
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43284: LD_VAR 0 6
43288: PPUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 60
43294: PUSH
43295: EMPTY
43296: LIST
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: LD_INT 55
43307: PUSH
43308: EMPTY
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PPUSH
43319: CALL_OW 72
43323: IFFALSE 43431
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43325: LD_ADDR_VAR 0 18
43329: PUSH
43330: LD_VAR 0 6
43334: PPUSH
43335: LD_INT 3
43337: PUSH
43338: LD_INT 60
43340: PUSH
43341: EMPTY
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 55
43353: PUSH
43354: EMPTY
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PPUSH
43365: CALL_OW 72
43369: PUSH
43370: LD_INT 1
43372: ARRAY
43373: ST_TO_ADDR
// if IsInUnit ( driver ) then
43374: LD_VAR 0 18
43378: PPUSH
43379: CALL_OW 310
43383: IFFALSE 43394
// ComExit ( driver ) ;
43385: LD_VAR 0 18
43389: PPUSH
43390: CALL 68774 0 1
// AddComEnterUnit ( driver , tmp ) ;
43394: LD_VAR 0 18
43398: PPUSH
43399: LD_VAR 0 13
43403: PPUSH
43404: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43408: LD_VAR 0 18
43412: PPUSH
43413: LD_VAR 0 7
43417: PPUSH
43418: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43422: LD_VAR 0 18
43426: PPUSH
43427: CALL_OW 181
// end ; continue ;
43431: GO 43083
// end ; if not cleaners or not tmp in cleaners then
43433: LD_VAR 0 6
43437: NOT
43438: PUSH
43439: LD_VAR 0 13
43443: PUSH
43444: LD_VAR 0 6
43448: IN
43449: NOT
43450: OR
43451: IFFALSE 43758
// begin if dep then
43453: LD_VAR 0 17
43457: IFFALSE 43593
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43459: LD_ADDR_VAR 0 16
43463: PUSH
43464: LD_VAR 0 17
43468: PUSH
43469: LD_INT 1
43471: ARRAY
43472: PPUSH
43473: CALL_OW 250
43477: PPUSH
43478: LD_VAR 0 17
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: PPUSH
43487: CALL_OW 254
43491: PPUSH
43492: LD_INT 5
43494: PPUSH
43495: CALL_OW 272
43499: PUSH
43500: LD_VAR 0 17
43504: PUSH
43505: LD_INT 1
43507: ARRAY
43508: PPUSH
43509: CALL_OW 251
43513: PPUSH
43514: LD_VAR 0 17
43518: PUSH
43519: LD_INT 1
43521: ARRAY
43522: PPUSH
43523: CALL_OW 254
43527: PPUSH
43528: LD_INT 5
43530: PPUSH
43531: CALL_OW 273
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43540: LD_VAR 0 16
43544: PUSH
43545: LD_INT 1
43547: ARRAY
43548: PPUSH
43549: LD_VAR 0 16
43553: PUSH
43554: LD_INT 2
43556: ARRAY
43557: PPUSH
43558: CALL_OW 488
43562: IFFALSE 43593
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43564: LD_VAR 0 13
43568: PPUSH
43569: LD_VAR 0 16
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: PPUSH
43578: LD_VAR 0 16
43582: PUSH
43583: LD_INT 2
43585: ARRAY
43586: PPUSH
43587: CALL_OW 111
// continue ;
43591: GO 43083
// end ; end ; r := GetDir ( tmp ) ;
43593: LD_ADDR_VAR 0 15
43597: PUSH
43598: LD_VAR 0 13
43602: PPUSH
43603: CALL_OW 254
43607: ST_TO_ADDR
// if r = 5 then
43608: LD_VAR 0 15
43612: PUSH
43613: LD_INT 5
43615: EQUAL
43616: IFFALSE 43626
// r := 0 ;
43618: LD_ADDR_VAR 0 15
43622: PUSH
43623: LD_INT 0
43625: ST_TO_ADDR
// for j = r to 5 do
43626: LD_ADDR_VAR 0 10
43630: PUSH
43631: DOUBLE
43632: LD_VAR 0 15
43636: DEC
43637: ST_TO_ADDR
43638: LD_INT 5
43640: PUSH
43641: FOR_TO
43642: IFFALSE 43756
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43644: LD_ADDR_VAR 0 11
43648: PUSH
43649: LD_VAR 0 13
43653: PPUSH
43654: CALL_OW 250
43658: PPUSH
43659: LD_VAR 0 10
43663: PPUSH
43664: LD_INT 2
43666: PPUSH
43667: CALL_OW 272
43671: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43672: LD_ADDR_VAR 0 12
43676: PUSH
43677: LD_VAR 0 13
43681: PPUSH
43682: CALL_OW 251
43686: PPUSH
43687: LD_VAR 0 10
43691: PPUSH
43692: LD_INT 2
43694: PPUSH
43695: CALL_OW 273
43699: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43700: LD_VAR 0 11
43704: PPUSH
43705: LD_VAR 0 12
43709: PPUSH
43710: CALL_OW 488
43714: PUSH
43715: LD_VAR 0 11
43719: PPUSH
43720: LD_VAR 0 12
43724: PPUSH
43725: CALL_OW 428
43729: NOT
43730: AND
43731: IFFALSE 43754
// begin ComMoveXY ( tmp , _x , _y ) ;
43733: LD_VAR 0 13
43737: PPUSH
43738: LD_VAR 0 11
43742: PPUSH
43743: LD_VAR 0 12
43747: PPUSH
43748: CALL_OW 111
// break ;
43752: GO 43756
// end ; end ;
43754: GO 43641
43756: POP
43757: POP
// end ; end ;
43758: GO 43083
43760: POP
43761: POP
// end ;
43762: LD_VAR 0 8
43766: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43767: LD_INT 0
43769: PPUSH
// result := true ;
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 1
43777: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43778: LD_VAR 0 2
43782: PUSH
43783: LD_INT 24
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43797
43789: LD_INT 33
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43822
43797: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 32
43805: PPUSH
43806: LD_VAR 0 1
43810: PPUSH
43811: CALL_OW 321
43815: PUSH
43816: LD_INT 2
43818: EQUAL
43819: ST_TO_ADDR
43820: GO 44138
43822: LD_INT 20
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 43855
43830: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_INT 6
43838: PPUSH
43839: LD_VAR 0 1
43843: PPUSH
43844: CALL_OW 321
43848: PUSH
43849: LD_INT 2
43851: EQUAL
43852: ST_TO_ADDR
43853: GO 44138
43855: LD_INT 22
43857: DOUBLE
43858: EQUAL
43859: IFTRUE 43869
43861: LD_INT 36
43863: DOUBLE
43864: EQUAL
43865: IFTRUE 43869
43867: GO 43894
43869: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_INT 15
43877: PPUSH
43878: LD_VAR 0 1
43882: PPUSH
43883: CALL_OW 321
43887: PUSH
43888: LD_INT 2
43890: EQUAL
43891: ST_TO_ADDR
43892: GO 44138
43894: LD_INT 30
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43927
43902: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_INT 20
43910: PPUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: CALL_OW 321
43920: PUSH
43921: LD_INT 2
43923: EQUAL
43924: ST_TO_ADDR
43925: GO 44138
43927: LD_INT 28
43929: DOUBLE
43930: EQUAL
43931: IFTRUE 43941
43933: LD_INT 21
43935: DOUBLE
43936: EQUAL
43937: IFTRUE 43941
43939: GO 43966
43941: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43942: LD_ADDR_VAR 0 3
43946: PUSH
43947: LD_INT 21
43949: PPUSH
43950: LD_VAR 0 1
43954: PPUSH
43955: CALL_OW 321
43959: PUSH
43960: LD_INT 2
43962: EQUAL
43963: ST_TO_ADDR
43964: GO 44138
43966: LD_INT 16
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 43999
43974: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 84
43982: PPUSH
43983: LD_VAR 0 1
43987: PPUSH
43988: CALL_OW 321
43992: PUSH
43993: LD_INT 2
43995: EQUAL
43996: ST_TO_ADDR
43997: GO 44138
43999: LD_INT 19
44001: DOUBLE
44002: EQUAL
44003: IFTRUE 44013
44005: LD_INT 23
44007: DOUBLE
44008: EQUAL
44009: IFTRUE 44013
44011: GO 44038
44013: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_INT 83
44021: PPUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 321
44031: PUSH
44032: LD_INT 2
44034: EQUAL
44035: ST_TO_ADDR
44036: GO 44138
44038: LD_INT 17
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44046
44044: GO 44071
44046: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44047: LD_ADDR_VAR 0 3
44051: PUSH
44052: LD_INT 39
44054: PPUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 321
44064: PUSH
44065: LD_INT 2
44067: EQUAL
44068: ST_TO_ADDR
44069: GO 44138
44071: LD_INT 18
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44079
44077: GO 44104
44079: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_INT 40
44087: PPUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 321
44097: PUSH
44098: LD_INT 2
44100: EQUAL
44101: ST_TO_ADDR
44102: GO 44138
44104: LD_INT 27
44106: DOUBLE
44107: EQUAL
44108: IFTRUE 44112
44110: GO 44137
44112: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44113: LD_ADDR_VAR 0 3
44117: PUSH
44118: LD_INT 35
44120: PPUSH
44121: LD_VAR 0 1
44125: PPUSH
44126: CALL_OW 321
44130: PUSH
44131: LD_INT 2
44133: EQUAL
44134: ST_TO_ADDR
44135: GO 44138
44137: POP
// end ;
44138: LD_VAR 0 3
44142: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44143: LD_INT 0
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
// result := false ;
44156: LD_ADDR_VAR 0 6
44160: PUSH
44161: LD_INT 0
44163: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44164: LD_VAR 0 1
44168: NOT
44169: PUSH
44170: LD_VAR 0 1
44174: PPUSH
44175: CALL_OW 266
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: IN
44190: NOT
44191: OR
44192: PUSH
44193: LD_VAR 0 2
44197: NOT
44198: OR
44199: PUSH
44200: LD_VAR 0 5
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: LD_INT 4
44219: PUSH
44220: LD_INT 5
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: IN
44231: NOT
44232: OR
44233: PUSH
44234: LD_VAR 0 3
44238: PPUSH
44239: LD_VAR 0 4
44243: PPUSH
44244: CALL_OW 488
44248: NOT
44249: OR
44250: IFFALSE 44254
// exit ;
44252: GO 44990
// side := GetSide ( depot ) ;
44254: LD_ADDR_VAR 0 9
44258: PUSH
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 255
44268: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44269: LD_VAR 0 9
44273: PPUSH
44274: LD_VAR 0 2
44278: PPUSH
44279: CALL 43767 0 2
44283: NOT
44284: IFFALSE 44288
// exit ;
44286: GO 44990
// pom := GetBase ( depot ) ;
44288: LD_ADDR_VAR 0 10
44292: PUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 274
44302: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44303: LD_ADDR_VAR 0 11
44307: PUSH
44308: LD_VAR 0 2
44312: PPUSH
44313: LD_VAR 0 1
44317: PPUSH
44318: CALL_OW 248
44322: PPUSH
44323: CALL_OW 450
44327: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44328: LD_VAR 0 10
44332: PPUSH
44333: LD_INT 1
44335: PPUSH
44336: CALL_OW 275
44340: PUSH
44341: LD_VAR 0 11
44345: PUSH
44346: LD_INT 1
44348: ARRAY
44349: GREATEREQUAL
44350: PUSH
44351: LD_VAR 0 10
44355: PPUSH
44356: LD_INT 2
44358: PPUSH
44359: CALL_OW 275
44363: PUSH
44364: LD_VAR 0 11
44368: PUSH
44369: LD_INT 2
44371: ARRAY
44372: GREATEREQUAL
44373: AND
44374: PUSH
44375: LD_VAR 0 10
44379: PPUSH
44380: LD_INT 3
44382: PPUSH
44383: CALL_OW 275
44387: PUSH
44388: LD_VAR 0 11
44392: PUSH
44393: LD_INT 3
44395: ARRAY
44396: GREATEREQUAL
44397: AND
44398: NOT
44399: IFFALSE 44403
// exit ;
44401: GO 44990
// if GetBType ( depot ) = b_depot then
44403: LD_VAR 0 1
44407: PPUSH
44408: CALL_OW 266
44412: PUSH
44413: LD_INT 0
44415: EQUAL
44416: IFFALSE 44428
// dist := 28 else
44418: LD_ADDR_VAR 0 14
44422: PUSH
44423: LD_INT 28
44425: ST_TO_ADDR
44426: GO 44436
// dist := 36 ;
44428: LD_ADDR_VAR 0 14
44432: PUSH
44433: LD_INT 36
44435: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44436: LD_VAR 0 1
44440: PPUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: LD_VAR 0 4
44450: PPUSH
44451: CALL_OW 297
44455: PUSH
44456: LD_VAR 0 14
44460: GREATER
44461: IFFALSE 44465
// exit ;
44463: GO 44990
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44465: LD_ADDR_VAR 0 12
44469: PUSH
44470: LD_VAR 0 2
44474: PPUSH
44475: LD_VAR 0 3
44479: PPUSH
44480: LD_VAR 0 4
44484: PPUSH
44485: LD_VAR 0 5
44489: PPUSH
44490: LD_VAR 0 1
44494: PPUSH
44495: CALL_OW 248
44499: PPUSH
44500: LD_INT 0
44502: PPUSH
44503: CALL 44995 0 6
44507: ST_TO_ADDR
// if not hexes then
44508: LD_VAR 0 12
44512: NOT
44513: IFFALSE 44517
// exit ;
44515: GO 44990
// hex := GetHexInfo ( x , y ) ;
44517: LD_ADDR_VAR 0 15
44521: PUSH
44522: LD_VAR 0 3
44526: PPUSH
44527: LD_VAR 0 4
44531: PPUSH
44532: CALL_OW 546
44536: ST_TO_ADDR
// if hex [ 1 ] then
44537: LD_VAR 0 15
44541: PUSH
44542: LD_INT 1
44544: ARRAY
44545: IFFALSE 44549
// exit ;
44547: GO 44990
// height := hex [ 2 ] ;
44549: LD_ADDR_VAR 0 13
44553: PUSH
44554: LD_VAR 0 15
44558: PUSH
44559: LD_INT 2
44561: ARRAY
44562: ST_TO_ADDR
// for i = 1 to hexes do
44563: LD_ADDR_VAR 0 7
44567: PUSH
44568: DOUBLE
44569: LD_INT 1
44571: DEC
44572: ST_TO_ADDR
44573: LD_VAR 0 12
44577: PUSH
44578: FOR_TO
44579: IFFALSE 44909
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44581: LD_VAR 0 12
44585: PUSH
44586: LD_VAR 0 7
44590: ARRAY
44591: PUSH
44592: LD_INT 1
44594: ARRAY
44595: PPUSH
44596: LD_VAR 0 12
44600: PUSH
44601: LD_VAR 0 7
44605: ARRAY
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: PPUSH
44611: CALL_OW 488
44615: NOT
44616: PUSH
44617: LD_VAR 0 12
44621: PUSH
44622: LD_VAR 0 7
44626: ARRAY
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PPUSH
44632: LD_VAR 0 12
44636: PUSH
44637: LD_VAR 0 7
44641: ARRAY
44642: PUSH
44643: LD_INT 2
44645: ARRAY
44646: PPUSH
44647: CALL_OW 428
44651: PUSH
44652: LD_INT 0
44654: GREATER
44655: OR
44656: PUSH
44657: LD_VAR 0 12
44661: PUSH
44662: LD_VAR 0 7
44666: ARRAY
44667: PUSH
44668: LD_INT 1
44670: ARRAY
44671: PPUSH
44672: LD_VAR 0 12
44676: PUSH
44677: LD_VAR 0 7
44681: ARRAY
44682: PUSH
44683: LD_INT 2
44685: ARRAY
44686: PPUSH
44687: CALL_OW 351
44691: OR
44692: IFFALSE 44698
// exit ;
44694: POP
44695: POP
44696: GO 44990
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44698: LD_ADDR_VAR 0 8
44702: PUSH
44703: LD_VAR 0 12
44707: PUSH
44708: LD_VAR 0 7
44712: ARRAY
44713: PUSH
44714: LD_INT 1
44716: ARRAY
44717: PPUSH
44718: LD_VAR 0 12
44722: PUSH
44723: LD_VAR 0 7
44727: ARRAY
44728: PUSH
44729: LD_INT 2
44731: ARRAY
44732: PPUSH
44733: CALL_OW 546
44737: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44738: LD_VAR 0 8
44742: PUSH
44743: LD_INT 1
44745: ARRAY
44746: PUSH
44747: LD_VAR 0 8
44751: PUSH
44752: LD_INT 2
44754: ARRAY
44755: PUSH
44756: LD_VAR 0 13
44760: PUSH
44761: LD_INT 2
44763: PLUS
44764: GREATER
44765: OR
44766: PUSH
44767: LD_VAR 0 8
44771: PUSH
44772: LD_INT 2
44774: ARRAY
44775: PUSH
44776: LD_VAR 0 13
44780: PUSH
44781: LD_INT 2
44783: MINUS
44784: LESS
44785: OR
44786: PUSH
44787: LD_VAR 0 8
44791: PUSH
44792: LD_INT 3
44794: ARRAY
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 8
44801: PUSH
44802: LD_INT 9
44804: PUSH
44805: LD_INT 10
44807: PUSH
44808: LD_INT 11
44810: PUSH
44811: LD_INT 12
44813: PUSH
44814: LD_INT 13
44816: PUSH
44817: LD_INT 16
44819: PUSH
44820: LD_INT 17
44822: PUSH
44823: LD_INT 18
44825: PUSH
44826: LD_INT 19
44828: PUSH
44829: LD_INT 20
44831: PUSH
44832: LD_INT 21
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: IN
44850: NOT
44851: OR
44852: PUSH
44853: LD_VAR 0 8
44857: PUSH
44858: LD_INT 5
44860: ARRAY
44861: NOT
44862: OR
44863: PUSH
44864: LD_VAR 0 8
44868: PUSH
44869: LD_INT 6
44871: ARRAY
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 7
44881: PUSH
44882: LD_INT 9
44884: PUSH
44885: LD_INT 10
44887: PUSH
44888: LD_INT 11
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: IN
44899: NOT
44900: OR
44901: IFFALSE 44907
// exit ;
44903: POP
44904: POP
44905: GO 44990
// end ;
44907: GO 44578
44909: POP
44910: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44911: LD_VAR 0 9
44915: PPUSH
44916: LD_VAR 0 3
44920: PPUSH
44921: LD_VAR 0 4
44925: PPUSH
44926: LD_INT 20
44928: PPUSH
44929: CALL 36942 0 4
44933: PUSH
44934: LD_INT 4
44936: ARRAY
44937: IFFALSE 44941
// exit ;
44939: GO 44990
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44941: LD_VAR 0 2
44945: PUSH
44946: LD_INT 29
44948: PUSH
44949: LD_INT 30
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: IN
44956: PUSH
44957: LD_VAR 0 3
44961: PPUSH
44962: LD_VAR 0 4
44966: PPUSH
44967: LD_VAR 0 9
44971: PPUSH
44972: CALL_OW 440
44976: NOT
44977: AND
44978: IFFALSE 44982
// exit ;
44980: GO 44990
// result := true ;
44982: LD_ADDR_VAR 0 6
44986: PUSH
44987: LD_INT 1
44989: ST_TO_ADDR
// end ;
44990: LD_VAR 0 6
44994: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44995: LD_INT 0
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
45005: PPUSH
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
45051: PPUSH
45052: PPUSH
45053: PPUSH
45054: PPUSH
// result = [ ] ;
45055: LD_ADDR_VAR 0 7
45059: PUSH
45060: EMPTY
45061: ST_TO_ADDR
// temp_list = [ ] ;
45062: LD_ADDR_VAR 0 9
45066: PUSH
45067: EMPTY
45068: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45069: LD_VAR 0 4
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 3
45085: PUSH
45086: LD_INT 4
45088: PUSH
45089: LD_INT 5
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: IN
45100: NOT
45101: PUSH
45102: LD_VAR 0 1
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: IN
45117: PUSH
45118: LD_VAR 0 5
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: IN
45137: NOT
45138: AND
45139: OR
45140: IFFALSE 45144
// exit ;
45142: GO 63535
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45144: LD_VAR 0 1
45148: PUSH
45149: LD_INT 6
45151: PUSH
45152: LD_INT 7
45154: PUSH
45155: LD_INT 8
45157: PUSH
45158: LD_INT 13
45160: PUSH
45161: LD_INT 12
45163: PUSH
45164: LD_INT 15
45166: PUSH
45167: LD_INT 11
45169: PUSH
45170: LD_INT 14
45172: PUSH
45173: LD_INT 10
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: IN
45187: IFFALSE 45197
// btype = b_lab ;
45189: LD_ADDR_VAR 0 1
45193: PUSH
45194: LD_INT 6
45196: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45197: LD_VAR 0 6
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: IN
45216: NOT
45217: PUSH
45218: LD_VAR 0 1
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: LD_INT 6
45237: PUSH
45238: LD_INT 36
45240: PUSH
45241: LD_INT 4
45243: PUSH
45244: LD_INT 5
45246: PUSH
45247: LD_INT 31
45249: PUSH
45250: LD_INT 32
45252: PUSH
45253: LD_INT 33
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: IN
45269: NOT
45270: PUSH
45271: LD_VAR 0 6
45275: PUSH
45276: LD_INT 1
45278: EQUAL
45279: AND
45280: OR
45281: PUSH
45282: LD_VAR 0 1
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: IN
45297: NOT
45298: PUSH
45299: LD_VAR 0 6
45303: PUSH
45304: LD_INT 2
45306: EQUAL
45307: AND
45308: OR
45309: IFFALSE 45319
// mode = 0 ;
45311: LD_ADDR_VAR 0 6
45315: PUSH
45316: LD_INT 0
45318: ST_TO_ADDR
// case mode of 0 :
45319: LD_VAR 0 6
45323: PUSH
45324: LD_INT 0
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 56785
45332: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45333: LD_ADDR_VAR 0 11
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45526: LD_ADDR_VAR 0 12
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45722: LD_ADDR_VAR 0 13
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45921: LD_ADDR_VAR 0 14
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46117: LD_ADDR_VAR 0 15
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 3
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46310: LD_ADDR_VAR 0 16
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 3
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 3
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46503: LD_ADDR_VAR 0 17
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46733: LD_ADDR_VAR 0 18
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46963: LD_ADDR_VAR 0 19
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47193: LD_ADDR_VAR 0 20
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47423: LD_ADDR_VAR 0 21
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47653: LD_ADDR_VAR 0 22
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47883: LD_ADDR_VAR 0 23
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 3
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 3
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48163: LD_ADDR_VAR 0 24
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48439: LD_ADDR_VAR 0 25
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48713: LD_ADDR_VAR 0 26
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48989: LD_ADDR_VAR 0 27
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49269: LD_ADDR_VAR 0 28
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 3
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49551: LD_ADDR_VAR 0 29
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49830: LD_ADDR_VAR 0 30
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50108: LD_ADDR_VAR 0 31
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 3
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50386: LD_ADDR_VAR 0 32
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 3
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 3
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50664: LD_ADDR_VAR 0 33
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50943: LD_ADDR_VAR 0 34
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51223: LD_ADDR_VAR 0 35
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51335: LD_ADDR_VAR 0 36
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51447: LD_ADDR_VAR 0 37
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51559: LD_ADDR_VAR 0 38
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51671: LD_ADDR_VAR 0 39
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51783: LD_ADDR_VAR 0 40
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51895: LD_ADDR_VAR 0 41
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 3
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 3
52169: NEG
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52245: LD_ADDR_VAR 0 42
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 3
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 3
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52595: LD_ADDR_VAR 0 43
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52943: LD_ADDR_VAR 0 44
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: LD_INT 3
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53293: LD_ADDR_VAR 0 45
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53643: LD_ADDR_VAR 0 46
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53991: LD_ADDR_VAR 0 47
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54142: LD_ADDR_VAR 0 48
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54289: LD_ADDR_VAR 0 49
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54433: LD_ADDR_VAR 0 50
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54577: LD_ADDR_VAR 0 51
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54724: LD_ADDR_VAR 0 52
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54875: LD_ADDR_VAR 0 53
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55105: LD_ADDR_VAR 0 54
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55335: LD_ADDR_VAR 0 55
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55565: LD_ADDR_VAR 0 56
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55795: LD_ADDR_VAR 0 57
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56025: LD_ADDR_VAR 0 58
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56255: LD_ADDR_VAR 0 59
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56343: LD_ADDR_VAR 0 60
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56431: LD_ADDR_VAR 0 61
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56519: LD_ADDR_VAR 0 62
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56607: LD_ADDR_VAR 0 63
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56695: LD_ADDR_VAR 0 64
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// end ; 1 :
56783: GO 62680
56785: LD_INT 1
56787: DOUBLE
56788: EQUAL
56789: IFTRUE 56793
56791: GO 59416
56793: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56794: LD_ADDR_VAR 0 11
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56838: LD_ADDR_VAR 0 12
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: LIST
56878: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56879: LD_ADDR_VAR 0 13
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56919: LD_ADDR_VAR 0 14
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56960: LD_ADDR_VAR 0 15
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 3
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57004: LD_ADDR_VAR 0 16
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57050: LD_ADDR_VAR 0 17
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57094: LD_ADDR_VAR 0 18
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57135: LD_ADDR_VAR 0 19
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57175: LD_ADDR_VAR 0 20
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57216: LD_ADDR_VAR 0 21
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57260: LD_ADDR_VAR 0 22
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: NEG
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57306: LD_ADDR_VAR 0 23
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57350: LD_ADDR_VAR 0 24
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 4
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57391: LD_ADDR_VAR 0 25
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: LD_INT 3
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: LIST
57430: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57431: LD_ADDR_VAR 0 26
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57472: LD_ADDR_VAR 0 27
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57516: LD_ADDR_VAR 0 28
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: LD_INT 4
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57562: LD_ADDR_VAR 0 29
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 4
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 4
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 5
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 4
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 6
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 6
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 5
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57717: LD_ADDR_VAR 0 30
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 5
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 6
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 6
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57860: LD_ADDR_VAR 0 31
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 4
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 4
57907: PUSH
57908: LD_INT 4
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: LD_INT 4
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 5
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 5
57937: PUSH
57938: LD_INT 5
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 6
57957: PUSH
57958: LD_INT 5
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 6
57967: PUSH
57968: LD_INT 6
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 5
57977: PUSH
57978: LD_INT 6
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57999: LD_ADDR_VAR 0 32
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 4
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 4
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 5
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 5
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 4
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 6
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 6
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 5
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58142: LD_ADDR_VAR 0 33
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 4
58217: NEG
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 5
58228: NEG
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 5
58239: NEG
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 5
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 6
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 6
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58297: LD_ADDR_VAR 0 34
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 3
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: NEG
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 4
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 4
58352: NEG
58353: PUSH
58354: LD_INT 3
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: NEG
58365: PUSH
58366: LD_INT 4
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: NEG
58377: PUSH
58378: LD_INT 5
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 5
58388: NEG
58389: PUSH
58390: LD_INT 4
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: LD_INT 5
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 5
58412: NEG
58413: PUSH
58414: LD_INT 6
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 6
58424: NEG
58425: PUSH
58426: LD_INT 5
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 6
58436: NEG
58437: PUSH
58438: LD_INT 6
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58460: LD_ADDR_VAR 0 41
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58504: LD_ADDR_VAR 0 42
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58545: LD_ADDR_VAR 0 43
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58585: LD_ADDR_VAR 0 44
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58626: LD_ADDR_VAR 0 45
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58670: LD_ADDR_VAR 0 46
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58716: LD_ADDR_VAR 0 47
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 3
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58749: LD_ADDR_VAR 0 48
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58780: LD_ADDR_VAR 0 49
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58809: LD_ADDR_VAR 0 50
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58838: LD_ADDR_VAR 0 51
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58869: LD_ADDR_VAR 0 52
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58902: LD_ADDR_VAR 0 53
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58946: LD_ADDR_VAR 0 54
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58987: LD_ADDR_VAR 0 55
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59027: LD_ADDR_VAR 0 56
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 3
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59068: LD_ADDR_VAR 0 57
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59112: LD_ADDR_VAR 0 58
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59158: LD_ADDR_VAR 0 59
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59202: LD_ADDR_VAR 0 60
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59243: LD_ADDR_VAR 0 61
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59283: LD_ADDR_VAR 0 62
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59324: LD_ADDR_VAR 0 63
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59368: LD_ADDR_VAR 0 64
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// end ; 2 :
59414: GO 62680
59416: LD_INT 2
59418: DOUBLE
59419: EQUAL
59420: IFTRUE 59424
59422: GO 62679
59424: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59425: LD_ADDR_VAR 0 29
59429: PUSH
59430: LD_INT 4
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 5
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 5
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 4
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: LD_INT 4
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 4
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 5
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 5
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 4
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 5
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 4
59775: NEG
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 4
59787: NEG
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 4
59810: NEG
59811: PUSH
59812: LD_INT 4
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 4
59822: NEG
59823: PUSH
59824: LD_INT 5
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: LD_INT 4
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 4
59858: NEG
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 5
59870: NEG
59871: PUSH
59872: LD_INT 4
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 5
59882: NEG
59883: PUSH
59884: LD_INT 5
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: LD_INT 5
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 5
59906: NEG
59907: PUSH
59908: LD_INT 3
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59963: LD_ADDR_VAR 0 30
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: LD_INT 5
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 4
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 3
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 4
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 4
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 5
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: NEG
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: LD_INT 3
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 4
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: LD_INT 4
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 4
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 5
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 4
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 1
60430: NEG
60431: PUSH
60432: LD_INT 5
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: LD_INT 5
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60510: LD_ADDR_VAR 0 31
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 4
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 5
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 5
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: LD_INT 5
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 4
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 4
60712: NEG
60713: PUSH
60714: LD_INT 4
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 4
60724: NEG
60725: PUSH
60726: LD_INT 5
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 4
60760: NEG
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 5
60772: NEG
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 5
60784: NEG
60785: PUSH
60786: LD_INT 5
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 5
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 5
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 4
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 4
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 4
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 5
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 5
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 4
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 5
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61060: LD_ADDR_VAR 0 32
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 4
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: NEG
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 5
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 5
61146: NEG
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 3
61169: NEG
61170: PUSH
61171: LD_INT 3
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 4
61229: NEG
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: LD_INT 4
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 4
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 5
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 5
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 5
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 4
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 4
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 5
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: LD_INT 5
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 5
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 5
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61607: LD_ADDR_VAR 0 33
61611: PUSH
61612: LD_INT 4
61614: NEG
61615: PUSH
61616: LD_INT 4
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 4
61626: NEG
61627: PUSH
61628: LD_INT 5
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: NEG
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: LD_INT 3
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 4
61662: NEG
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 5
61674: NEG
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 5
61686: NEG
61687: PUSH
61688: LD_INT 5
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 5
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 5
61710: NEG
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 4
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 3
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 2
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 3
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: LD_INT 4
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 4
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 5
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 5
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 4
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 5
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 4
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 4
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: LD_INT 4
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 5
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 5
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 4
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: LD_INT 5
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62145: LD_ADDR_VAR 0 34
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 4
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 5
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 5
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 4
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 4
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 4
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 4
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: LD_INT 4
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 5
62377: PUSH
62378: LD_INT 5
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 4
62387: PUSH
62388: LD_INT 5
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: LD_INT 4
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 3
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 5
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: LD_INT 5
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 3
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: LD_INT 4
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 4
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 4
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 4
62541: NEG
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 4
62575: NEG
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 5
62586: NEG
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 5
62597: NEG
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 5
62609: NEG
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// end ; end ;
62677: GO 62680
62679: POP
// case btype of b_depot , b_warehouse :
62680: LD_VAR 0 1
62684: PUSH
62685: LD_INT 0
62687: DOUBLE
62688: EQUAL
62689: IFTRUE 62699
62691: LD_INT 1
62693: DOUBLE
62694: EQUAL
62695: IFTRUE 62699
62697: GO 62900
62699: POP
// case nation of nation_american :
62700: LD_VAR 0 5
62704: PUSH
62705: LD_INT 1
62707: DOUBLE
62708: EQUAL
62709: IFTRUE 62713
62711: GO 62769
62713: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62714: LD_ADDR_VAR 0 9
62718: PUSH
62719: LD_VAR 0 11
62723: PUSH
62724: LD_VAR 0 12
62728: PUSH
62729: LD_VAR 0 13
62733: PUSH
62734: LD_VAR 0 14
62738: PUSH
62739: LD_VAR 0 15
62743: PUSH
62744: LD_VAR 0 16
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: PUSH
62757: LD_VAR 0 4
62761: PUSH
62762: LD_INT 1
62764: PLUS
62765: ARRAY
62766: ST_TO_ADDR
62767: GO 62898
62769: LD_INT 2
62771: DOUBLE
62772: EQUAL
62773: IFTRUE 62777
62775: GO 62833
62777: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62778: LD_ADDR_VAR 0 9
62782: PUSH
62783: LD_VAR 0 17
62787: PUSH
62788: LD_VAR 0 18
62792: PUSH
62793: LD_VAR 0 19
62797: PUSH
62798: LD_VAR 0 20
62802: PUSH
62803: LD_VAR 0 21
62807: PUSH
62808: LD_VAR 0 22
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: PUSH
62821: LD_VAR 0 4
62825: PUSH
62826: LD_INT 1
62828: PLUS
62829: ARRAY
62830: ST_TO_ADDR
62831: GO 62898
62833: LD_INT 3
62835: DOUBLE
62836: EQUAL
62837: IFTRUE 62841
62839: GO 62897
62841: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62842: LD_ADDR_VAR 0 9
62846: PUSH
62847: LD_VAR 0 23
62851: PUSH
62852: LD_VAR 0 24
62856: PUSH
62857: LD_VAR 0 25
62861: PUSH
62862: LD_VAR 0 26
62866: PUSH
62867: LD_VAR 0 27
62871: PUSH
62872: LD_VAR 0 28
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: PUSH
62885: LD_VAR 0 4
62889: PUSH
62890: LD_INT 1
62892: PLUS
62893: ARRAY
62894: ST_TO_ADDR
62895: GO 62898
62897: POP
62898: GO 63453
62900: LD_INT 2
62902: DOUBLE
62903: EQUAL
62904: IFTRUE 62914
62906: LD_INT 3
62908: DOUBLE
62909: EQUAL
62910: IFTRUE 62914
62912: GO 62970
62914: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62915: LD_ADDR_VAR 0 9
62919: PUSH
62920: LD_VAR 0 29
62924: PUSH
62925: LD_VAR 0 30
62929: PUSH
62930: LD_VAR 0 31
62934: PUSH
62935: LD_VAR 0 32
62939: PUSH
62940: LD_VAR 0 33
62944: PUSH
62945: LD_VAR 0 34
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: PUSH
62958: LD_VAR 0 4
62962: PUSH
62963: LD_INT 1
62965: PLUS
62966: ARRAY
62967: ST_TO_ADDR
62968: GO 63453
62970: LD_INT 16
62972: DOUBLE
62973: EQUAL
62974: IFTRUE 63032
62976: LD_INT 17
62978: DOUBLE
62979: EQUAL
62980: IFTRUE 63032
62982: LD_INT 18
62984: DOUBLE
62985: EQUAL
62986: IFTRUE 63032
62988: LD_INT 19
62990: DOUBLE
62991: EQUAL
62992: IFTRUE 63032
62994: LD_INT 22
62996: DOUBLE
62997: EQUAL
62998: IFTRUE 63032
63000: LD_INT 20
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63032
63006: LD_INT 21
63008: DOUBLE
63009: EQUAL
63010: IFTRUE 63032
63012: LD_INT 23
63014: DOUBLE
63015: EQUAL
63016: IFTRUE 63032
63018: LD_INT 24
63020: DOUBLE
63021: EQUAL
63022: IFTRUE 63032
63024: LD_INT 25
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63032
63030: GO 63088
63032: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63033: LD_ADDR_VAR 0 9
63037: PUSH
63038: LD_VAR 0 35
63042: PUSH
63043: LD_VAR 0 36
63047: PUSH
63048: LD_VAR 0 37
63052: PUSH
63053: LD_VAR 0 38
63057: PUSH
63058: LD_VAR 0 39
63062: PUSH
63063: LD_VAR 0 40
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: PUSH
63076: LD_VAR 0 4
63080: PUSH
63081: LD_INT 1
63083: PLUS
63084: ARRAY
63085: ST_TO_ADDR
63086: GO 63453
63088: LD_INT 6
63090: DOUBLE
63091: EQUAL
63092: IFTRUE 63144
63094: LD_INT 7
63096: DOUBLE
63097: EQUAL
63098: IFTRUE 63144
63100: LD_INT 8
63102: DOUBLE
63103: EQUAL
63104: IFTRUE 63144
63106: LD_INT 13
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63144
63112: LD_INT 12
63114: DOUBLE
63115: EQUAL
63116: IFTRUE 63144
63118: LD_INT 15
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63144
63124: LD_INT 11
63126: DOUBLE
63127: EQUAL
63128: IFTRUE 63144
63130: LD_INT 14
63132: DOUBLE
63133: EQUAL
63134: IFTRUE 63144
63136: LD_INT 10
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63144
63142: GO 63200
63144: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63145: LD_ADDR_VAR 0 9
63149: PUSH
63150: LD_VAR 0 41
63154: PUSH
63155: LD_VAR 0 42
63159: PUSH
63160: LD_VAR 0 43
63164: PUSH
63165: LD_VAR 0 44
63169: PUSH
63170: LD_VAR 0 45
63174: PUSH
63175: LD_VAR 0 46
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: PUSH
63188: LD_VAR 0 4
63192: PUSH
63193: LD_INT 1
63195: PLUS
63196: ARRAY
63197: ST_TO_ADDR
63198: GO 63453
63200: LD_INT 36
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63208
63206: GO 63264
63208: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63209: LD_ADDR_VAR 0 9
63213: PUSH
63214: LD_VAR 0 47
63218: PUSH
63219: LD_VAR 0 48
63223: PUSH
63224: LD_VAR 0 49
63228: PUSH
63229: LD_VAR 0 50
63233: PUSH
63234: LD_VAR 0 51
63238: PUSH
63239: LD_VAR 0 52
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: PUSH
63252: LD_VAR 0 4
63256: PUSH
63257: LD_INT 1
63259: PLUS
63260: ARRAY
63261: ST_TO_ADDR
63262: GO 63453
63264: LD_INT 4
63266: DOUBLE
63267: EQUAL
63268: IFTRUE 63290
63270: LD_INT 5
63272: DOUBLE
63273: EQUAL
63274: IFTRUE 63290
63276: LD_INT 34
63278: DOUBLE
63279: EQUAL
63280: IFTRUE 63290
63282: LD_INT 37
63284: DOUBLE
63285: EQUAL
63286: IFTRUE 63290
63288: GO 63346
63290: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63291: LD_ADDR_VAR 0 9
63295: PUSH
63296: LD_VAR 0 53
63300: PUSH
63301: LD_VAR 0 54
63305: PUSH
63306: LD_VAR 0 55
63310: PUSH
63311: LD_VAR 0 56
63315: PUSH
63316: LD_VAR 0 57
63320: PUSH
63321: LD_VAR 0 58
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: PUSH
63334: LD_VAR 0 4
63338: PUSH
63339: LD_INT 1
63341: PLUS
63342: ARRAY
63343: ST_TO_ADDR
63344: GO 63453
63346: LD_INT 31
63348: DOUBLE
63349: EQUAL
63350: IFTRUE 63396
63352: LD_INT 32
63354: DOUBLE
63355: EQUAL
63356: IFTRUE 63396
63358: LD_INT 33
63360: DOUBLE
63361: EQUAL
63362: IFTRUE 63396
63364: LD_INT 27
63366: DOUBLE
63367: EQUAL
63368: IFTRUE 63396
63370: LD_INT 26
63372: DOUBLE
63373: EQUAL
63374: IFTRUE 63396
63376: LD_INT 28
63378: DOUBLE
63379: EQUAL
63380: IFTRUE 63396
63382: LD_INT 29
63384: DOUBLE
63385: EQUAL
63386: IFTRUE 63396
63388: LD_INT 30
63390: DOUBLE
63391: EQUAL
63392: IFTRUE 63396
63394: GO 63452
63396: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63397: LD_ADDR_VAR 0 9
63401: PUSH
63402: LD_VAR 0 59
63406: PUSH
63407: LD_VAR 0 60
63411: PUSH
63412: LD_VAR 0 61
63416: PUSH
63417: LD_VAR 0 62
63421: PUSH
63422: LD_VAR 0 63
63426: PUSH
63427: LD_VAR 0 64
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: PUSH
63440: LD_VAR 0 4
63444: PUSH
63445: LD_INT 1
63447: PLUS
63448: ARRAY
63449: ST_TO_ADDR
63450: GO 63453
63452: POP
// temp_list2 = [ ] ;
63453: LD_ADDR_VAR 0 10
63457: PUSH
63458: EMPTY
63459: ST_TO_ADDR
// for i in temp_list do
63460: LD_ADDR_VAR 0 8
63464: PUSH
63465: LD_VAR 0 9
63469: PUSH
63470: FOR_IN
63471: IFFALSE 63523
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63473: LD_ADDR_VAR 0 10
63477: PUSH
63478: LD_VAR 0 10
63482: PUSH
63483: LD_VAR 0 8
63487: PUSH
63488: LD_INT 1
63490: ARRAY
63491: PUSH
63492: LD_VAR 0 2
63496: PLUS
63497: PUSH
63498: LD_VAR 0 8
63502: PUSH
63503: LD_INT 2
63505: ARRAY
63506: PUSH
63507: LD_VAR 0 3
63511: PLUS
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: EMPTY
63518: LIST
63519: ADD
63520: ST_TO_ADDR
63521: GO 63470
63523: POP
63524: POP
// result = temp_list2 ;
63525: LD_ADDR_VAR 0 7
63529: PUSH
63530: LD_VAR 0 10
63534: ST_TO_ADDR
// end ;
63535: LD_VAR 0 7
63539: RET
// export function EnemyInRange ( unit , dist ) ; begin
63540: LD_INT 0
63542: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63543: LD_ADDR_VAR 0 3
63547: PUSH
63548: LD_VAR 0 1
63552: PPUSH
63553: CALL_OW 255
63557: PPUSH
63558: LD_VAR 0 1
63562: PPUSH
63563: CALL_OW 250
63567: PPUSH
63568: LD_VAR 0 1
63572: PPUSH
63573: CALL_OW 251
63577: PPUSH
63578: LD_VAR 0 2
63582: PPUSH
63583: CALL 36942 0 4
63587: PUSH
63588: LD_INT 4
63590: ARRAY
63591: ST_TO_ADDR
// end ;
63592: LD_VAR 0 3
63596: RET
// export function PlayerSeeMe ( unit ) ; begin
63597: LD_INT 0
63599: PPUSH
// result := See ( your_side , unit ) ;
63600: LD_ADDR_VAR 0 2
63604: PUSH
63605: LD_OWVAR 2
63609: PPUSH
63610: LD_VAR 0 1
63614: PPUSH
63615: CALL_OW 292
63619: ST_TO_ADDR
// end ;
63620: LD_VAR 0 2
63624: RET
// export function ReverseDir ( unit ) ; begin
63625: LD_INT 0
63627: PPUSH
// if not unit then
63628: LD_VAR 0 1
63632: NOT
63633: IFFALSE 63637
// exit ;
63635: GO 63660
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63637: LD_ADDR_VAR 0 2
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 254
63651: PUSH
63652: LD_INT 3
63654: PLUS
63655: PUSH
63656: LD_INT 6
63658: MOD
63659: ST_TO_ADDR
// end ;
63660: LD_VAR 0 2
63664: RET
// export function ReverseArray ( array ) ; var i ; begin
63665: LD_INT 0
63667: PPUSH
63668: PPUSH
// if not array then
63669: LD_VAR 0 1
63673: NOT
63674: IFFALSE 63678
// exit ;
63676: GO 63733
// result := [ ] ;
63678: LD_ADDR_VAR 0 2
63682: PUSH
63683: EMPTY
63684: ST_TO_ADDR
// for i := array downto 1 do
63685: LD_ADDR_VAR 0 3
63689: PUSH
63690: DOUBLE
63691: LD_VAR 0 1
63695: INC
63696: ST_TO_ADDR
63697: LD_INT 1
63699: PUSH
63700: FOR_DOWNTO
63701: IFFALSE 63731
// result := Join ( result , array [ i ] ) ;
63703: LD_ADDR_VAR 0 2
63707: PUSH
63708: LD_VAR 0 2
63712: PPUSH
63713: LD_VAR 0 1
63717: PUSH
63718: LD_VAR 0 3
63722: ARRAY
63723: PPUSH
63724: CALL 68376 0 2
63728: ST_TO_ADDR
63729: GO 63700
63731: POP
63732: POP
// end ;
63733: LD_VAR 0 2
63737: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63738: LD_INT 0
63740: PPUSH
63741: PPUSH
63742: PPUSH
63743: PPUSH
63744: PPUSH
63745: PPUSH
// if not unit or not hexes then
63746: LD_VAR 0 1
63750: NOT
63751: PUSH
63752: LD_VAR 0 2
63756: NOT
63757: OR
63758: IFFALSE 63762
// exit ;
63760: GO 63885
// dist := 9999 ;
63762: LD_ADDR_VAR 0 5
63766: PUSH
63767: LD_INT 9999
63769: ST_TO_ADDR
// for i = 1 to hexes do
63770: LD_ADDR_VAR 0 4
63774: PUSH
63775: DOUBLE
63776: LD_INT 1
63778: DEC
63779: ST_TO_ADDR
63780: LD_VAR 0 2
63784: PUSH
63785: FOR_TO
63786: IFFALSE 63873
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63788: LD_ADDR_VAR 0 6
63792: PUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: LD_VAR 0 2
63802: PUSH
63803: LD_VAR 0 4
63807: ARRAY
63808: PUSH
63809: LD_INT 1
63811: ARRAY
63812: PPUSH
63813: LD_VAR 0 2
63817: PUSH
63818: LD_VAR 0 4
63822: ARRAY
63823: PUSH
63824: LD_INT 2
63826: ARRAY
63827: PPUSH
63828: CALL_OW 297
63832: ST_TO_ADDR
// if tdist < dist then
63833: LD_VAR 0 6
63837: PUSH
63838: LD_VAR 0 5
63842: LESS
63843: IFFALSE 63871
// begin hex := hexes [ i ] ;
63845: LD_ADDR_VAR 0 8
63849: PUSH
63850: LD_VAR 0 2
63854: PUSH
63855: LD_VAR 0 4
63859: ARRAY
63860: ST_TO_ADDR
// dist := tdist ;
63861: LD_ADDR_VAR 0 5
63865: PUSH
63866: LD_VAR 0 6
63870: ST_TO_ADDR
// end ; end ;
63871: GO 63785
63873: POP
63874: POP
// result := hex ;
63875: LD_ADDR_VAR 0 3
63879: PUSH
63880: LD_VAR 0 8
63884: ST_TO_ADDR
// end ;
63885: LD_VAR 0 3
63889: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63890: LD_INT 0
63892: PPUSH
63893: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63894: LD_VAR 0 1
63898: NOT
63899: PUSH
63900: LD_VAR 0 1
63904: PUSH
63905: LD_INT 21
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 23
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PPUSH
63929: CALL_OW 69
63933: IN
63934: NOT
63935: OR
63936: IFFALSE 63940
// exit ;
63938: GO 63987
// for i = 1 to 3 do
63940: LD_ADDR_VAR 0 3
63944: PUSH
63945: DOUBLE
63946: LD_INT 1
63948: DEC
63949: ST_TO_ADDR
63950: LD_INT 3
63952: PUSH
63953: FOR_TO
63954: IFFALSE 63985
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63956: LD_VAR 0 1
63960: PPUSH
63961: CALL_OW 250
63965: PPUSH
63966: LD_VAR 0 1
63970: PPUSH
63971: CALL_OW 251
63975: PPUSH
63976: LD_INT 1
63978: PPUSH
63979: CALL_OW 453
63983: GO 63953
63985: POP
63986: POP
// end ;
63987: LD_VAR 0 2
63991: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63992: LD_INT 0
63994: PPUSH
63995: PPUSH
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64000: LD_VAR 0 1
64004: NOT
64005: PUSH
64006: LD_VAR 0 2
64010: NOT
64011: OR
64012: PUSH
64013: LD_VAR 0 1
64017: PPUSH
64018: CALL_OW 314
64022: OR
64023: IFFALSE 64027
// exit ;
64025: GO 64494
// if GetLives ( i ) < 250 then
64027: LD_VAR 0 4
64031: PPUSH
64032: CALL_OW 256
64036: PUSH
64037: LD_INT 250
64039: LESS
64040: IFFALSE 64053
// begin ComAutodestruct ( i ) ;
64042: LD_VAR 0 4
64046: PPUSH
64047: CALL 63890 0 1
// exit ;
64051: GO 64494
// end ; x := GetX ( enemy_unit ) ;
64053: LD_ADDR_VAR 0 7
64057: PUSH
64058: LD_VAR 0 2
64062: PPUSH
64063: CALL_OW 250
64067: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64068: LD_ADDR_VAR 0 8
64072: PUSH
64073: LD_VAR 0 2
64077: PPUSH
64078: CALL_OW 251
64082: ST_TO_ADDR
// if not x or not y then
64083: LD_VAR 0 7
64087: NOT
64088: PUSH
64089: LD_VAR 0 8
64093: NOT
64094: OR
64095: IFFALSE 64099
// exit ;
64097: GO 64494
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64099: LD_ADDR_VAR 0 6
64103: PUSH
64104: LD_VAR 0 7
64108: PPUSH
64109: LD_INT 0
64111: PPUSH
64112: LD_INT 4
64114: PPUSH
64115: CALL_OW 272
64119: PUSH
64120: LD_VAR 0 8
64124: PPUSH
64125: LD_INT 0
64127: PPUSH
64128: LD_INT 4
64130: PPUSH
64131: CALL_OW 273
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_VAR 0 7
64144: PPUSH
64145: LD_INT 1
64147: PPUSH
64148: LD_INT 4
64150: PPUSH
64151: CALL_OW 272
64155: PUSH
64156: LD_VAR 0 8
64160: PPUSH
64161: LD_INT 1
64163: PPUSH
64164: LD_INT 4
64166: PPUSH
64167: CALL_OW 273
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 7
64180: PPUSH
64181: LD_INT 2
64183: PPUSH
64184: LD_INT 4
64186: PPUSH
64187: CALL_OW 272
64191: PUSH
64192: LD_VAR 0 8
64196: PPUSH
64197: LD_INT 2
64199: PPUSH
64200: LD_INT 4
64202: PPUSH
64203: CALL_OW 273
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_VAR 0 7
64216: PPUSH
64217: LD_INT 3
64219: PPUSH
64220: LD_INT 4
64222: PPUSH
64223: CALL_OW 272
64227: PUSH
64228: LD_VAR 0 8
64232: PPUSH
64233: LD_INT 3
64235: PPUSH
64236: LD_INT 4
64238: PPUSH
64239: CALL_OW 273
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_VAR 0 7
64252: PPUSH
64253: LD_INT 4
64255: PPUSH
64256: LD_INT 4
64258: PPUSH
64259: CALL_OW 272
64263: PUSH
64264: LD_VAR 0 8
64268: PPUSH
64269: LD_INT 4
64271: PPUSH
64272: LD_INT 4
64274: PPUSH
64275: CALL_OW 273
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_VAR 0 7
64288: PPUSH
64289: LD_INT 5
64291: PPUSH
64292: LD_INT 4
64294: PPUSH
64295: CALL_OW 272
64299: PUSH
64300: LD_VAR 0 8
64304: PPUSH
64305: LD_INT 5
64307: PPUSH
64308: LD_INT 4
64310: PPUSH
64311: CALL_OW 273
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// for i = tmp downto 1 do
64328: LD_ADDR_VAR 0 4
64332: PUSH
64333: DOUBLE
64334: LD_VAR 0 6
64338: INC
64339: ST_TO_ADDR
64340: LD_INT 1
64342: PUSH
64343: FOR_DOWNTO
64344: IFFALSE 64445
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64346: LD_VAR 0 6
64350: PUSH
64351: LD_VAR 0 4
64355: ARRAY
64356: PUSH
64357: LD_INT 1
64359: ARRAY
64360: PPUSH
64361: LD_VAR 0 6
64365: PUSH
64366: LD_VAR 0 4
64370: ARRAY
64371: PUSH
64372: LD_INT 2
64374: ARRAY
64375: PPUSH
64376: CALL_OW 488
64380: NOT
64381: PUSH
64382: LD_VAR 0 6
64386: PUSH
64387: LD_VAR 0 4
64391: ARRAY
64392: PUSH
64393: LD_INT 1
64395: ARRAY
64396: PPUSH
64397: LD_VAR 0 6
64401: PUSH
64402: LD_VAR 0 4
64406: ARRAY
64407: PUSH
64408: LD_INT 2
64410: ARRAY
64411: PPUSH
64412: CALL_OW 428
64416: PUSH
64417: LD_INT 0
64419: NONEQUAL
64420: OR
64421: IFFALSE 64443
// tmp := Delete ( tmp , i ) ;
64423: LD_ADDR_VAR 0 6
64427: PUSH
64428: LD_VAR 0 6
64432: PPUSH
64433: LD_VAR 0 4
64437: PPUSH
64438: CALL_OW 3
64442: ST_TO_ADDR
64443: GO 64343
64445: POP
64446: POP
// j := GetClosestHex ( unit , tmp ) ;
64447: LD_ADDR_VAR 0 5
64451: PUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: LD_VAR 0 6
64461: PPUSH
64462: CALL 63738 0 2
64466: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64467: LD_VAR 0 1
64471: PPUSH
64472: LD_VAR 0 5
64476: PUSH
64477: LD_INT 1
64479: ARRAY
64480: PPUSH
64481: LD_VAR 0 5
64485: PUSH
64486: LD_INT 2
64488: ARRAY
64489: PPUSH
64490: CALL_OW 111
// end ;
64494: LD_VAR 0 3
64498: RET
// export function PrepareApemanSoldier ( ) ; begin
64499: LD_INT 0
64501: PPUSH
// uc_nation := 0 ;
64502: LD_ADDR_OWVAR 21
64506: PUSH
64507: LD_INT 0
64509: ST_TO_ADDR
// hc_sex := sex_male ;
64510: LD_ADDR_OWVAR 27
64514: PUSH
64515: LD_INT 1
64517: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64518: LD_ADDR_OWVAR 28
64522: PUSH
64523: LD_INT 15
64525: ST_TO_ADDR
// hc_gallery :=  ;
64526: LD_ADDR_OWVAR 33
64530: PUSH
64531: LD_STRING 
64533: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64534: LD_ADDR_OWVAR 31
64538: PUSH
64539: LD_INT 0
64541: PPUSH
64542: LD_INT 3
64544: PPUSH
64545: CALL_OW 12
64549: PUSH
64550: LD_INT 0
64552: PPUSH
64553: LD_INT 3
64555: PPUSH
64556: CALL_OW 12
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// end ;
64573: LD_VAR 0 1
64577: RET
// export function PrepareApemanEngineer ( ) ; begin
64578: LD_INT 0
64580: PPUSH
// uc_nation := 0 ;
64581: LD_ADDR_OWVAR 21
64585: PUSH
64586: LD_INT 0
64588: ST_TO_ADDR
// hc_sex := sex_male ;
64589: LD_ADDR_OWVAR 27
64593: PUSH
64594: LD_INT 1
64596: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64597: LD_ADDR_OWVAR 28
64601: PUSH
64602: LD_INT 16
64604: ST_TO_ADDR
// hc_gallery :=  ;
64605: LD_ADDR_OWVAR 33
64609: PUSH
64610: LD_STRING 
64612: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64613: LD_ADDR_OWVAR 31
64617: PUSH
64618: LD_INT 0
64620: PPUSH
64621: LD_INT 3
64623: PPUSH
64624: CALL_OW 12
64628: PUSH
64629: LD_INT 0
64631: PPUSH
64632: LD_INT 3
64634: PPUSH
64635: CALL_OW 12
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: ST_TO_ADDR
// end ;
64652: LD_VAR 0 1
64656: RET
// export function PrepareApeman ( agressivity ) ; begin
64657: LD_INT 0
64659: PPUSH
// uc_side := 0 ;
64660: LD_ADDR_OWVAR 20
64664: PUSH
64665: LD_INT 0
64667: ST_TO_ADDR
// uc_nation := 0 ;
64668: LD_ADDR_OWVAR 21
64672: PUSH
64673: LD_INT 0
64675: ST_TO_ADDR
// hc_sex := sex_male ;
64676: LD_ADDR_OWVAR 27
64680: PUSH
64681: LD_INT 1
64683: ST_TO_ADDR
// hc_class := class_apeman ;
64684: LD_ADDR_OWVAR 28
64688: PUSH
64689: LD_INT 12
64691: ST_TO_ADDR
// hc_gallery :=  ;
64692: LD_ADDR_OWVAR 33
64696: PUSH
64697: LD_STRING 
64699: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64700: LD_ADDR_OWVAR 35
64704: PUSH
64705: LD_VAR 0 1
64709: NEG
64710: PPUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: CALL_OW 12
64720: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64721: LD_ADDR_OWVAR 31
64725: PUSH
64726: LD_INT 0
64728: PPUSH
64729: LD_INT 3
64731: PPUSH
64732: CALL_OW 12
64736: PUSH
64737: LD_INT 0
64739: PPUSH
64740: LD_INT 3
64742: PPUSH
64743: CALL_OW 12
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: ST_TO_ADDR
// end ;
64760: LD_VAR 0 2
64764: RET
// export function PrepareTiger ( agressivity ) ; begin
64765: LD_INT 0
64767: PPUSH
// uc_side := 0 ;
64768: LD_ADDR_OWVAR 20
64772: PUSH
64773: LD_INT 0
64775: ST_TO_ADDR
// uc_nation := 0 ;
64776: LD_ADDR_OWVAR 21
64780: PUSH
64781: LD_INT 0
64783: ST_TO_ADDR
// hc_class := class_tiger ;
64784: LD_ADDR_OWVAR 28
64788: PUSH
64789: LD_INT 14
64791: ST_TO_ADDR
// hc_gallery :=  ;
64792: LD_ADDR_OWVAR 33
64796: PUSH
64797: LD_STRING 
64799: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64800: LD_ADDR_OWVAR 35
64804: PUSH
64805: LD_VAR 0 1
64809: NEG
64810: PPUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 12
64820: ST_TO_ADDR
// end ;
64821: LD_VAR 0 2
64825: RET
// export function PrepareEnchidna ( ) ; begin
64826: LD_INT 0
64828: PPUSH
// uc_side := 0 ;
64829: LD_ADDR_OWVAR 20
64833: PUSH
64834: LD_INT 0
64836: ST_TO_ADDR
// uc_nation := 0 ;
64837: LD_ADDR_OWVAR 21
64841: PUSH
64842: LD_INT 0
64844: ST_TO_ADDR
// hc_class := class_baggie ;
64845: LD_ADDR_OWVAR 28
64849: PUSH
64850: LD_INT 13
64852: ST_TO_ADDR
// hc_gallery :=  ;
64853: LD_ADDR_OWVAR 33
64857: PUSH
64858: LD_STRING 
64860: ST_TO_ADDR
// end ;
64861: LD_VAR 0 1
64865: RET
// export function PrepareFrog ( ) ; begin
64866: LD_INT 0
64868: PPUSH
// uc_side := 0 ;
64869: LD_ADDR_OWVAR 20
64873: PUSH
64874: LD_INT 0
64876: ST_TO_ADDR
// uc_nation := 0 ;
64877: LD_ADDR_OWVAR 21
64881: PUSH
64882: LD_INT 0
64884: ST_TO_ADDR
// hc_class := class_frog ;
64885: LD_ADDR_OWVAR 28
64889: PUSH
64890: LD_INT 19
64892: ST_TO_ADDR
// hc_gallery :=  ;
64893: LD_ADDR_OWVAR 33
64897: PUSH
64898: LD_STRING 
64900: ST_TO_ADDR
// end ;
64901: LD_VAR 0 1
64905: RET
// export function PrepareFish ( ) ; begin
64906: LD_INT 0
64908: PPUSH
// uc_side := 0 ;
64909: LD_ADDR_OWVAR 20
64913: PUSH
64914: LD_INT 0
64916: ST_TO_ADDR
// uc_nation := 0 ;
64917: LD_ADDR_OWVAR 21
64921: PUSH
64922: LD_INT 0
64924: ST_TO_ADDR
// hc_class := class_fish ;
64925: LD_ADDR_OWVAR 28
64929: PUSH
64930: LD_INT 20
64932: ST_TO_ADDR
// hc_gallery :=  ;
64933: LD_ADDR_OWVAR 33
64937: PUSH
64938: LD_STRING 
64940: ST_TO_ADDR
// end ;
64941: LD_VAR 0 1
64945: RET
// export function PrepareBird ( ) ; begin
64946: LD_INT 0
64948: PPUSH
// uc_side := 0 ;
64949: LD_ADDR_OWVAR 20
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// uc_nation := 0 ;
64957: LD_ADDR_OWVAR 21
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// hc_class := class_phororhacos ;
64965: LD_ADDR_OWVAR 28
64969: PUSH
64970: LD_INT 18
64972: ST_TO_ADDR
// hc_gallery :=  ;
64973: LD_ADDR_OWVAR 33
64977: PUSH
64978: LD_STRING 
64980: ST_TO_ADDR
// end ;
64981: LD_VAR 0 1
64985: RET
// export function PrepareHorse ( ) ; begin
64986: LD_INT 0
64988: PPUSH
// uc_side := 0 ;
64989: LD_ADDR_OWVAR 20
64993: PUSH
64994: LD_INT 0
64996: ST_TO_ADDR
// uc_nation := 0 ;
64997: LD_ADDR_OWVAR 21
65001: PUSH
65002: LD_INT 0
65004: ST_TO_ADDR
// hc_class := class_horse ;
65005: LD_ADDR_OWVAR 28
65009: PUSH
65010: LD_INT 21
65012: ST_TO_ADDR
// hc_gallery :=  ;
65013: LD_ADDR_OWVAR 33
65017: PUSH
65018: LD_STRING 
65020: ST_TO_ADDR
// end ;
65021: LD_VAR 0 1
65025: RET
// export function PrepareMastodont ( ) ; begin
65026: LD_INT 0
65028: PPUSH
// uc_side := 0 ;
65029: LD_ADDR_OWVAR 20
65033: PUSH
65034: LD_INT 0
65036: ST_TO_ADDR
// uc_nation := 0 ;
65037: LD_ADDR_OWVAR 21
65041: PUSH
65042: LD_INT 0
65044: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65045: LD_ADDR_OWVAR 37
65049: PUSH
65050: LD_INT 31
65052: ST_TO_ADDR
// vc_control := control_rider ;
65053: LD_ADDR_OWVAR 38
65057: PUSH
65058: LD_INT 4
65060: ST_TO_ADDR
// end ;
65061: LD_VAR 0 1
65065: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65066: LD_INT 0
65068: PPUSH
65069: PPUSH
65070: PPUSH
// uc_side = 0 ;
65071: LD_ADDR_OWVAR 20
65075: PUSH
65076: LD_INT 0
65078: ST_TO_ADDR
// uc_nation = 0 ;
65079: LD_ADDR_OWVAR 21
65083: PUSH
65084: LD_INT 0
65086: ST_TO_ADDR
// InitHc_All ( ) ;
65087: CALL_OW 584
// InitVc ;
65091: CALL_OW 20
// if mastodonts then
65095: LD_VAR 0 6
65099: IFFALSE 65166
// for i = 1 to mastodonts do
65101: LD_ADDR_VAR 0 11
65105: PUSH
65106: DOUBLE
65107: LD_INT 1
65109: DEC
65110: ST_TO_ADDR
65111: LD_VAR 0 6
65115: PUSH
65116: FOR_TO
65117: IFFALSE 65164
// begin vc_chassis := 31 ;
65119: LD_ADDR_OWVAR 37
65123: PUSH
65124: LD_INT 31
65126: ST_TO_ADDR
// vc_control := control_rider ;
65127: LD_ADDR_OWVAR 38
65131: PUSH
65132: LD_INT 4
65134: ST_TO_ADDR
// animal := CreateVehicle ;
65135: LD_ADDR_VAR 0 12
65139: PUSH
65140: CALL_OW 45
65144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65145: LD_VAR 0 12
65149: PPUSH
65150: LD_VAR 0 8
65154: PPUSH
65155: LD_INT 0
65157: PPUSH
65158: CALL 67294 0 3
// end ;
65162: GO 65116
65164: POP
65165: POP
// if horses then
65166: LD_VAR 0 5
65170: IFFALSE 65237
// for i = 1 to horses do
65172: LD_ADDR_VAR 0 11
65176: PUSH
65177: DOUBLE
65178: LD_INT 1
65180: DEC
65181: ST_TO_ADDR
65182: LD_VAR 0 5
65186: PUSH
65187: FOR_TO
65188: IFFALSE 65235
// begin hc_class := 21 ;
65190: LD_ADDR_OWVAR 28
65194: PUSH
65195: LD_INT 21
65197: ST_TO_ADDR
// hc_gallery :=  ;
65198: LD_ADDR_OWVAR 33
65202: PUSH
65203: LD_STRING 
65205: ST_TO_ADDR
// animal := CreateHuman ;
65206: LD_ADDR_VAR 0 12
65210: PUSH
65211: CALL_OW 44
65215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65216: LD_VAR 0 12
65220: PPUSH
65221: LD_VAR 0 8
65225: PPUSH
65226: LD_INT 0
65228: PPUSH
65229: CALL 67294 0 3
// end ;
65233: GO 65187
65235: POP
65236: POP
// if birds then
65237: LD_VAR 0 1
65241: IFFALSE 65308
// for i = 1 to birds do
65243: LD_ADDR_VAR 0 11
65247: PUSH
65248: DOUBLE
65249: LD_INT 1
65251: DEC
65252: ST_TO_ADDR
65253: LD_VAR 0 1
65257: PUSH
65258: FOR_TO
65259: IFFALSE 65306
// begin hc_class = 18 ;
65261: LD_ADDR_OWVAR 28
65265: PUSH
65266: LD_INT 18
65268: ST_TO_ADDR
// hc_gallery =  ;
65269: LD_ADDR_OWVAR 33
65273: PUSH
65274: LD_STRING 
65276: ST_TO_ADDR
// animal := CreateHuman ;
65277: LD_ADDR_VAR 0 12
65281: PUSH
65282: CALL_OW 44
65286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65287: LD_VAR 0 12
65291: PPUSH
65292: LD_VAR 0 8
65296: PPUSH
65297: LD_INT 0
65299: PPUSH
65300: CALL 67294 0 3
// end ;
65304: GO 65258
65306: POP
65307: POP
// if tigers then
65308: LD_VAR 0 2
65312: IFFALSE 65396
// for i = 1 to tigers do
65314: LD_ADDR_VAR 0 11
65318: PUSH
65319: DOUBLE
65320: LD_INT 1
65322: DEC
65323: ST_TO_ADDR
65324: LD_VAR 0 2
65328: PUSH
65329: FOR_TO
65330: IFFALSE 65394
// begin hc_class = class_tiger ;
65332: LD_ADDR_OWVAR 28
65336: PUSH
65337: LD_INT 14
65339: ST_TO_ADDR
// hc_gallery =  ;
65340: LD_ADDR_OWVAR 33
65344: PUSH
65345: LD_STRING 
65347: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65348: LD_ADDR_OWVAR 35
65352: PUSH
65353: LD_INT 7
65355: NEG
65356: PPUSH
65357: LD_INT 7
65359: PPUSH
65360: CALL_OW 12
65364: ST_TO_ADDR
// animal := CreateHuman ;
65365: LD_ADDR_VAR 0 12
65369: PUSH
65370: CALL_OW 44
65374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65375: LD_VAR 0 12
65379: PPUSH
65380: LD_VAR 0 8
65384: PPUSH
65385: LD_INT 0
65387: PPUSH
65388: CALL 67294 0 3
// end ;
65392: GO 65329
65394: POP
65395: POP
// if apemans then
65396: LD_VAR 0 3
65400: IFFALSE 65523
// for i = 1 to apemans do
65402: LD_ADDR_VAR 0 11
65406: PUSH
65407: DOUBLE
65408: LD_INT 1
65410: DEC
65411: ST_TO_ADDR
65412: LD_VAR 0 3
65416: PUSH
65417: FOR_TO
65418: IFFALSE 65521
// begin hc_class = class_apeman ;
65420: LD_ADDR_OWVAR 28
65424: PUSH
65425: LD_INT 12
65427: ST_TO_ADDR
// hc_gallery =  ;
65428: LD_ADDR_OWVAR 33
65432: PUSH
65433: LD_STRING 
65435: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65436: LD_ADDR_OWVAR 35
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PPUSH
65445: LD_INT 2
65447: PPUSH
65448: CALL_OW 12
65452: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65453: LD_ADDR_OWVAR 31
65457: PUSH
65458: LD_INT 1
65460: PPUSH
65461: LD_INT 3
65463: PPUSH
65464: CALL_OW 12
65468: PUSH
65469: LD_INT 1
65471: PPUSH
65472: LD_INT 3
65474: PPUSH
65475: CALL_OW 12
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: ST_TO_ADDR
// animal := CreateHuman ;
65492: LD_ADDR_VAR 0 12
65496: PUSH
65497: CALL_OW 44
65501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65502: LD_VAR 0 12
65506: PPUSH
65507: LD_VAR 0 8
65511: PPUSH
65512: LD_INT 0
65514: PPUSH
65515: CALL 67294 0 3
// end ;
65519: GO 65417
65521: POP
65522: POP
// if enchidnas then
65523: LD_VAR 0 4
65527: IFFALSE 65594
// for i = 1 to enchidnas do
65529: LD_ADDR_VAR 0 11
65533: PUSH
65534: DOUBLE
65535: LD_INT 1
65537: DEC
65538: ST_TO_ADDR
65539: LD_VAR 0 4
65543: PUSH
65544: FOR_TO
65545: IFFALSE 65592
// begin hc_class = 13 ;
65547: LD_ADDR_OWVAR 28
65551: PUSH
65552: LD_INT 13
65554: ST_TO_ADDR
// hc_gallery =  ;
65555: LD_ADDR_OWVAR 33
65559: PUSH
65560: LD_STRING 
65562: ST_TO_ADDR
// animal := CreateHuman ;
65563: LD_ADDR_VAR 0 12
65567: PUSH
65568: CALL_OW 44
65572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65573: LD_VAR 0 12
65577: PPUSH
65578: LD_VAR 0 8
65582: PPUSH
65583: LD_INT 0
65585: PPUSH
65586: CALL 67294 0 3
// end ;
65590: GO 65544
65592: POP
65593: POP
// if fishes then
65594: LD_VAR 0 7
65598: IFFALSE 65665
// for i = 1 to fishes do
65600: LD_ADDR_VAR 0 11
65604: PUSH
65605: DOUBLE
65606: LD_INT 1
65608: DEC
65609: ST_TO_ADDR
65610: LD_VAR 0 7
65614: PUSH
65615: FOR_TO
65616: IFFALSE 65663
// begin hc_class = 20 ;
65618: LD_ADDR_OWVAR 28
65622: PUSH
65623: LD_INT 20
65625: ST_TO_ADDR
// hc_gallery =  ;
65626: LD_ADDR_OWVAR 33
65630: PUSH
65631: LD_STRING 
65633: ST_TO_ADDR
// animal := CreateHuman ;
65634: LD_ADDR_VAR 0 12
65638: PUSH
65639: CALL_OW 44
65643: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65644: LD_VAR 0 12
65648: PPUSH
65649: LD_VAR 0 9
65653: PPUSH
65654: LD_INT 0
65656: PPUSH
65657: CALL 67294 0 3
// end ;
65661: GO 65615
65663: POP
65664: POP
// end ;
65665: LD_VAR 0 10
65669: RET
// export function WantHeal ( sci , unit ) ; begin
65670: LD_INT 0
65672: PPUSH
// if GetTaskList ( sci ) > 0 then
65673: LD_VAR 0 1
65677: PPUSH
65678: CALL_OW 437
65682: PUSH
65683: LD_INT 0
65685: GREATER
65686: IFFALSE 65756
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65688: LD_VAR 0 1
65692: PPUSH
65693: CALL_OW 437
65697: PUSH
65698: LD_INT 1
65700: ARRAY
65701: PUSH
65702: LD_INT 1
65704: ARRAY
65705: PUSH
65706: LD_STRING l
65708: EQUAL
65709: PUSH
65710: LD_VAR 0 1
65714: PPUSH
65715: CALL_OW 437
65719: PUSH
65720: LD_INT 1
65722: ARRAY
65723: PUSH
65724: LD_INT 4
65726: ARRAY
65727: PUSH
65728: LD_VAR 0 2
65732: EQUAL
65733: AND
65734: IFFALSE 65746
// result := true else
65736: LD_ADDR_VAR 0 3
65740: PUSH
65741: LD_INT 1
65743: ST_TO_ADDR
65744: GO 65754
// result := false ;
65746: LD_ADDR_VAR 0 3
65750: PUSH
65751: LD_INT 0
65753: ST_TO_ADDR
// end else
65754: GO 65764
// result := false ;
65756: LD_ADDR_VAR 0 3
65760: PUSH
65761: LD_INT 0
65763: ST_TO_ADDR
// end ;
65764: LD_VAR 0 3
65768: RET
// export function HealTarget ( sci ) ; begin
65769: LD_INT 0
65771: PPUSH
// if not sci then
65772: LD_VAR 0 1
65776: NOT
65777: IFFALSE 65781
// exit ;
65779: GO 65846
// result := 0 ;
65781: LD_ADDR_VAR 0 2
65785: PUSH
65786: LD_INT 0
65788: ST_TO_ADDR
// if GetTaskList ( sci ) then
65789: LD_VAR 0 1
65793: PPUSH
65794: CALL_OW 437
65798: IFFALSE 65846
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65800: LD_VAR 0 1
65804: PPUSH
65805: CALL_OW 437
65809: PUSH
65810: LD_INT 1
65812: ARRAY
65813: PUSH
65814: LD_INT 1
65816: ARRAY
65817: PUSH
65818: LD_STRING l
65820: EQUAL
65821: IFFALSE 65846
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 437
65837: PUSH
65838: LD_INT 1
65840: ARRAY
65841: PUSH
65842: LD_INT 4
65844: ARRAY
65845: ST_TO_ADDR
// end ;
65846: LD_VAR 0 2
65850: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65851: LD_INT 0
65853: PPUSH
65854: PPUSH
65855: PPUSH
65856: PPUSH
// if not base_units then
65857: LD_VAR 0 1
65861: NOT
65862: IFFALSE 65866
// exit ;
65864: GO 65953
// result := false ;
65866: LD_ADDR_VAR 0 2
65870: PUSH
65871: LD_INT 0
65873: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65874: LD_ADDR_VAR 0 5
65878: PUSH
65879: LD_VAR 0 1
65883: PPUSH
65884: LD_INT 21
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PPUSH
65894: CALL_OW 72
65898: ST_TO_ADDR
// if not tmp then
65899: LD_VAR 0 5
65903: NOT
65904: IFFALSE 65908
// exit ;
65906: GO 65953
// for i in tmp do
65908: LD_ADDR_VAR 0 3
65912: PUSH
65913: LD_VAR 0 5
65917: PUSH
65918: FOR_IN
65919: IFFALSE 65951
// begin result := EnemyInRange ( i , 22 ) ;
65921: LD_ADDR_VAR 0 2
65925: PUSH
65926: LD_VAR 0 3
65930: PPUSH
65931: LD_INT 22
65933: PPUSH
65934: CALL 63540 0 2
65938: ST_TO_ADDR
// if result then
65939: LD_VAR 0 2
65943: IFFALSE 65949
// exit ;
65945: POP
65946: POP
65947: GO 65953
// end ;
65949: GO 65918
65951: POP
65952: POP
// end ;
65953: LD_VAR 0 2
65957: RET
// export function FilterByTag ( units , tag ) ; begin
65958: LD_INT 0
65960: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65961: LD_ADDR_VAR 0 3
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_INT 120
65973: PUSH
65974: LD_VAR 0 2
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PPUSH
65983: CALL_OW 72
65987: ST_TO_ADDR
// end ;
65988: LD_VAR 0 3
65992: RET
// export function IsDriver ( un ) ; begin
65993: LD_INT 0
65995: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65996: LD_ADDR_VAR 0 2
66000: PUSH
66001: LD_VAR 0 1
66005: PUSH
66006: LD_INT 55
66008: PUSH
66009: EMPTY
66010: LIST
66011: PPUSH
66012: CALL_OW 69
66016: IN
66017: ST_TO_ADDR
// end ;
66018: LD_VAR 0 2
66022: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66023: LD_INT 0
66025: PPUSH
66026: PPUSH
// list := [ ] ;
66027: LD_ADDR_VAR 0 5
66031: PUSH
66032: EMPTY
66033: ST_TO_ADDR
// case d of 0 :
66034: LD_VAR 0 3
66038: PUSH
66039: LD_INT 0
66041: DOUBLE
66042: EQUAL
66043: IFTRUE 66047
66045: GO 66180
66047: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66048: LD_ADDR_VAR 0 5
66052: PUSH
66053: LD_VAR 0 1
66057: PUSH
66058: LD_INT 4
66060: MINUS
66061: PUSH
66062: LD_VAR 0 2
66066: PUSH
66067: LD_INT 4
66069: MINUS
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: PUSH
66079: LD_VAR 0 1
66083: PUSH
66084: LD_INT 3
66086: MINUS
66087: PUSH
66088: LD_VAR 0 2
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: PUSH
66101: LD_VAR 0 1
66105: PUSH
66106: LD_INT 4
66108: PLUS
66109: PUSH
66110: LD_VAR 0 2
66114: PUSH
66115: LD_INT 4
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: PUSH
66123: LD_VAR 0 1
66127: PUSH
66128: LD_INT 3
66130: PLUS
66131: PUSH
66132: LD_VAR 0 2
66136: PUSH
66137: LD_INT 3
66139: PLUS
66140: PUSH
66141: LD_INT 5
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_VAR 0 2
66158: PUSH
66159: LD_INT 4
66161: PLUS
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: ST_TO_ADDR
// end ; 1 :
66178: GO 66878
66180: LD_INT 1
66182: DOUBLE
66183: EQUAL
66184: IFTRUE 66188
66186: GO 66321
66188: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66189: LD_ADDR_VAR 0 5
66193: PUSH
66194: LD_VAR 0 1
66198: PUSH
66199: LD_VAR 0 2
66203: PUSH
66204: LD_INT 4
66206: MINUS
66207: PUSH
66208: LD_INT 3
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: LD_VAR 0 1
66220: PUSH
66221: LD_INT 3
66223: MINUS
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: LD_INT 3
66232: MINUS
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: PUSH
66242: LD_VAR 0 1
66246: PUSH
66247: LD_INT 4
66249: MINUS
66250: PUSH
66251: LD_VAR 0 2
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: PUSH
66264: LD_VAR 0 1
66268: PUSH
66269: LD_VAR 0 2
66273: PUSH
66274: LD_INT 3
66276: PLUS
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: LD_VAR 0 1
66290: PUSH
66291: LD_INT 4
66293: PLUS
66294: PUSH
66295: LD_VAR 0 2
66299: PUSH
66300: LD_INT 4
66302: PLUS
66303: PUSH
66304: LD_INT 5
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// end ; 2 :
66319: GO 66878
66321: LD_INT 2
66323: DOUBLE
66324: EQUAL
66325: IFTRUE 66329
66327: GO 66458
66329: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66330: LD_ADDR_VAR 0 5
66334: PUSH
66335: LD_VAR 0 1
66339: PUSH
66340: LD_VAR 0 2
66344: PUSH
66345: LD_INT 3
66347: MINUS
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: PUSH
66357: LD_VAR 0 1
66361: PUSH
66362: LD_INT 4
66364: PLUS
66365: PUSH
66366: LD_VAR 0 2
66370: PUSH
66371: LD_INT 4
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_VAR 0 2
66388: PUSH
66389: LD_INT 4
66391: PLUS
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: LIST
66400: PUSH
66401: LD_VAR 0 1
66405: PUSH
66406: LD_INT 3
66408: MINUS
66409: PUSH
66410: LD_VAR 0 2
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: PUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 4
66430: MINUS
66431: PUSH
66432: LD_VAR 0 2
66436: PUSH
66437: LD_INT 4
66439: MINUS
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: ST_TO_ADDR
// end ; 3 :
66456: GO 66878
66458: LD_INT 3
66460: DOUBLE
66461: EQUAL
66462: IFTRUE 66466
66464: GO 66599
66466: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66467: LD_ADDR_VAR 0 5
66471: PUSH
66472: LD_VAR 0 1
66476: PUSH
66477: LD_INT 3
66479: PLUS
66480: PUSH
66481: LD_VAR 0 2
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: PUSH
66494: LD_VAR 0 1
66498: PUSH
66499: LD_INT 4
66501: PLUS
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: LD_INT 4
66510: PLUS
66511: PUSH
66512: LD_INT 5
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: PUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 4
66527: MINUS
66528: PUSH
66529: LD_VAR 0 2
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: PUSH
66542: LD_VAR 0 1
66546: PUSH
66547: LD_VAR 0 2
66551: PUSH
66552: LD_INT 4
66554: MINUS
66555: PUSH
66556: LD_INT 3
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: LIST
66563: PUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 3
66571: MINUS
66572: PUSH
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 3
66580: MINUS
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// end ; 4 :
66597: GO 66878
66599: LD_INT 4
66601: DOUBLE
66602: EQUAL
66603: IFTRUE 66607
66605: GO 66740
66607: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66608: LD_ADDR_VAR 0 5
66612: PUSH
66613: LD_VAR 0 1
66617: PUSH
66618: LD_VAR 0 2
66622: PUSH
66623: LD_INT 4
66625: PLUS
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: PUSH
66635: LD_VAR 0 1
66639: PUSH
66640: LD_INT 3
66642: PLUS
66643: PUSH
66644: LD_VAR 0 2
66648: PUSH
66649: LD_INT 3
66651: PLUS
66652: PUSH
66653: LD_INT 5
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: PUSH
66661: LD_VAR 0 1
66665: PUSH
66666: LD_INT 4
66668: PLUS
66669: PUSH
66670: LD_VAR 0 2
66674: PUSH
66675: LD_INT 4
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: PUSH
66683: LD_VAR 0 1
66687: PUSH
66688: LD_VAR 0 2
66692: PUSH
66693: LD_INT 3
66695: MINUS
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: PUSH
66705: LD_VAR 0 1
66709: PUSH
66710: LD_INT 4
66712: MINUS
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: LD_INT 4
66721: MINUS
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: ST_TO_ADDR
// end ; 5 :
66738: GO 66878
66740: LD_INT 5
66742: DOUBLE
66743: EQUAL
66744: IFTRUE 66748
66746: GO 66877
66748: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66749: LD_ADDR_VAR 0 5
66753: PUSH
66754: LD_VAR 0 1
66758: PUSH
66759: LD_INT 4
66761: MINUS
66762: PUSH
66763: LD_VAR 0 2
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: PUSH
66776: LD_VAR 0 1
66780: PUSH
66781: LD_VAR 0 2
66785: PUSH
66786: LD_INT 4
66788: MINUS
66789: PUSH
66790: LD_INT 3
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: PUSH
66798: LD_VAR 0 1
66802: PUSH
66803: LD_INT 4
66805: PLUS
66806: PUSH
66807: LD_VAR 0 2
66811: PUSH
66812: LD_INT 4
66814: PLUS
66815: PUSH
66816: LD_INT 5
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: PUSH
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 3
66831: PLUS
66832: PUSH
66833: LD_VAR 0 2
66837: PUSH
66838: LD_INT 4
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: PUSH
66846: LD_VAR 0 1
66850: PUSH
66851: LD_VAR 0 2
66855: PUSH
66856: LD_INT 3
66858: PLUS
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: ST_TO_ADDR
// end ; end ;
66875: GO 66878
66877: POP
// result := list ;
66878: LD_ADDR_VAR 0 4
66882: PUSH
66883: LD_VAR 0 5
66887: ST_TO_ADDR
// end ;
66888: LD_VAR 0 4
66892: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66893: LD_INT 0
66895: PPUSH
66896: PPUSH
66897: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66898: LD_VAR 0 1
66902: NOT
66903: PUSH
66904: LD_VAR 0 2
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: LD_INT 4
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: IN
66927: NOT
66928: OR
66929: IFFALSE 66933
// exit ;
66931: GO 67016
// tmp := [ ] ;
66933: LD_ADDR_VAR 0 5
66937: PUSH
66938: EMPTY
66939: ST_TO_ADDR
// for i in units do
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: FOR_IN
66951: IFFALSE 66985
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66953: LD_ADDR_VAR 0 5
66957: PUSH
66958: LD_VAR 0 5
66962: PPUSH
66963: LD_VAR 0 4
66967: PPUSH
66968: LD_VAR 0 2
66972: PPUSH
66973: CALL_OW 259
66977: PPUSH
66978: CALL 68376 0 2
66982: ST_TO_ADDR
66983: GO 66950
66985: POP
66986: POP
// if not tmp then
66987: LD_VAR 0 5
66991: NOT
66992: IFFALSE 66996
// exit ;
66994: GO 67016
// result := SortListByListDesc ( units , tmp ) ;
66996: LD_ADDR_VAR 0 3
67000: PUSH
67001: LD_VAR 0 1
67005: PPUSH
67006: LD_VAR 0 5
67010: PPUSH
67011: CALL_OW 77
67015: ST_TO_ADDR
// end ;
67016: LD_VAR 0 3
67020: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67021: LD_INT 0
67023: PPUSH
67024: PPUSH
67025: PPUSH
// result := false ;
67026: LD_ADDR_VAR 0 3
67030: PUSH
67031: LD_INT 0
67033: ST_TO_ADDR
// if not building then
67034: LD_VAR 0 2
67038: NOT
67039: IFFALSE 67043
// exit ;
67041: GO 67181
// x := GetX ( building ) ;
67043: LD_ADDR_VAR 0 4
67047: PUSH
67048: LD_VAR 0 2
67052: PPUSH
67053: CALL_OW 250
67057: ST_TO_ADDR
// y := GetY ( building ) ;
67058: LD_ADDR_VAR 0 5
67062: PUSH
67063: LD_VAR 0 2
67067: PPUSH
67068: CALL_OW 251
67072: ST_TO_ADDR
// if not x or not y then
67073: LD_VAR 0 4
67077: NOT
67078: PUSH
67079: LD_VAR 0 5
67083: NOT
67084: OR
67085: IFFALSE 67089
// exit ;
67087: GO 67181
// if GetTaskList ( unit ) then
67089: LD_VAR 0 1
67093: PPUSH
67094: CALL_OW 437
67098: IFFALSE 67181
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67100: LD_STRING e
67102: PUSH
67103: LD_VAR 0 1
67107: PPUSH
67108: CALL_OW 437
67112: PUSH
67113: LD_INT 1
67115: ARRAY
67116: PUSH
67117: LD_INT 1
67119: ARRAY
67120: EQUAL
67121: PUSH
67122: LD_VAR 0 4
67126: PUSH
67127: LD_VAR 0 1
67131: PPUSH
67132: CALL_OW 437
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PUSH
67141: LD_INT 2
67143: ARRAY
67144: EQUAL
67145: AND
67146: PUSH
67147: LD_VAR 0 5
67151: PUSH
67152: LD_VAR 0 1
67156: PPUSH
67157: CALL_OW 437
67161: PUSH
67162: LD_INT 1
67164: ARRAY
67165: PUSH
67166: LD_INT 3
67168: ARRAY
67169: EQUAL
67170: AND
67171: IFFALSE 67181
// result := true end ;
67173: LD_ADDR_VAR 0 3
67177: PUSH
67178: LD_INT 1
67180: ST_TO_ADDR
// end ;
67181: LD_VAR 0 3
67185: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67186: LD_INT 0
67188: PPUSH
// result := false ;
67189: LD_ADDR_VAR 0 4
67193: PUSH
67194: LD_INT 0
67196: ST_TO_ADDR
// if GetTaskList ( unit ) then
67197: LD_VAR 0 1
67201: PPUSH
67202: CALL_OW 437
67206: IFFALSE 67289
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67208: LD_STRING M
67210: PUSH
67211: LD_VAR 0 1
67215: PPUSH
67216: CALL_OW 437
67220: PUSH
67221: LD_INT 1
67223: ARRAY
67224: PUSH
67225: LD_INT 1
67227: ARRAY
67228: EQUAL
67229: PUSH
67230: LD_VAR 0 2
67234: PUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL_OW 437
67244: PUSH
67245: LD_INT 1
67247: ARRAY
67248: PUSH
67249: LD_INT 2
67251: ARRAY
67252: EQUAL
67253: AND
67254: PUSH
67255: LD_VAR 0 3
67259: PUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: CALL_OW 437
67269: PUSH
67270: LD_INT 1
67272: ARRAY
67273: PUSH
67274: LD_INT 3
67276: ARRAY
67277: EQUAL
67278: AND
67279: IFFALSE 67289
// result := true ;
67281: LD_ADDR_VAR 0 4
67285: PUSH
67286: LD_INT 1
67288: ST_TO_ADDR
// end ; end ;
67289: LD_VAR 0 4
67293: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67294: LD_INT 0
67296: PPUSH
67297: PPUSH
67298: PPUSH
67299: PPUSH
// if not unit or not area then
67300: LD_VAR 0 1
67304: NOT
67305: PUSH
67306: LD_VAR 0 2
67310: NOT
67311: OR
67312: IFFALSE 67316
// exit ;
67314: GO 67479
// tmp := AreaToList ( area , i ) ;
67316: LD_ADDR_VAR 0 6
67320: PUSH
67321: LD_VAR 0 2
67325: PPUSH
67326: LD_VAR 0 5
67330: PPUSH
67331: CALL_OW 517
67335: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67336: LD_ADDR_VAR 0 5
67340: PUSH
67341: DOUBLE
67342: LD_INT 1
67344: DEC
67345: ST_TO_ADDR
67346: LD_VAR 0 6
67350: PUSH
67351: LD_INT 1
67353: ARRAY
67354: PUSH
67355: FOR_TO
67356: IFFALSE 67477
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67358: LD_ADDR_VAR 0 7
67362: PUSH
67363: LD_VAR 0 6
67367: PUSH
67368: LD_INT 1
67370: ARRAY
67371: PUSH
67372: LD_VAR 0 5
67376: ARRAY
67377: PUSH
67378: LD_VAR 0 6
67382: PUSH
67383: LD_INT 2
67385: ARRAY
67386: PUSH
67387: LD_VAR 0 5
67391: ARRAY
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67397: LD_INT 92
67399: PUSH
67400: LD_VAR 0 7
67404: PUSH
67405: LD_INT 1
67407: ARRAY
67408: PUSH
67409: LD_VAR 0 7
67413: PUSH
67414: LD_INT 2
67416: ARRAY
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: PPUSH
67427: CALL_OW 69
67431: PUSH
67432: LD_INT 0
67434: EQUAL
67435: IFFALSE 67475
// begin PlaceUnitArea ( unit , area , mode ) ;
67437: LD_VAR 0 1
67441: PPUSH
67442: LD_VAR 0 2
67446: PPUSH
67447: LD_VAR 0 3
67451: PPUSH
67452: CALL_OW 49
// result := IsPlaced ( unit ) ;
67456: LD_ADDR_VAR 0 4
67460: PUSH
67461: LD_VAR 0 1
67465: PPUSH
67466: CALL_OW 305
67470: ST_TO_ADDR
// exit ;
67471: POP
67472: POP
67473: GO 67479
// end ; end ;
67475: GO 67355
67477: POP
67478: POP
// end ;
67479: LD_VAR 0 4
67483: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67484: LD_INT 0
67486: PPUSH
67487: PPUSH
67488: PPUSH
// if not side or side > 8 then
67489: LD_VAR 0 1
67493: NOT
67494: PUSH
67495: LD_VAR 0 1
67499: PUSH
67500: LD_INT 8
67502: GREATER
67503: OR
67504: IFFALSE 67508
// exit ;
67506: GO 67695
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67508: LD_ADDR_VAR 0 4
67512: PUSH
67513: LD_INT 22
67515: PUSH
67516: LD_VAR 0 1
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 21
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PPUSH
67539: CALL_OW 69
67543: ST_TO_ADDR
// if not tmp then
67544: LD_VAR 0 4
67548: NOT
67549: IFFALSE 67553
// exit ;
67551: GO 67695
// enable_addtolog := true ;
67553: LD_ADDR_OWVAR 81
67557: PUSH
67558: LD_INT 1
67560: ST_TO_ADDR
// AddToLog ( [ ) ;
67561: LD_STRING [
67563: PPUSH
67564: CALL_OW 561
// for i in tmp do
67568: LD_ADDR_VAR 0 3
67572: PUSH
67573: LD_VAR 0 4
67577: PUSH
67578: FOR_IN
67579: IFFALSE 67686
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67581: LD_STRING [
67583: PUSH
67584: LD_VAR 0 3
67588: PPUSH
67589: CALL_OW 266
67593: STR
67594: PUSH
67595: LD_STRING , 
67597: STR
67598: PUSH
67599: LD_VAR 0 3
67603: PPUSH
67604: CALL_OW 250
67608: STR
67609: PUSH
67610: LD_STRING , 
67612: STR
67613: PUSH
67614: LD_VAR 0 3
67618: PPUSH
67619: CALL_OW 251
67623: STR
67624: PUSH
67625: LD_STRING , 
67627: STR
67628: PUSH
67629: LD_VAR 0 3
67633: PPUSH
67634: CALL_OW 254
67638: STR
67639: PUSH
67640: LD_STRING , 
67642: STR
67643: PUSH
67644: LD_VAR 0 3
67648: PPUSH
67649: LD_INT 1
67651: PPUSH
67652: CALL_OW 268
67656: STR
67657: PUSH
67658: LD_STRING , 
67660: STR
67661: PUSH
67662: LD_VAR 0 3
67666: PPUSH
67667: LD_INT 2
67669: PPUSH
67670: CALL_OW 268
67674: STR
67675: PUSH
67676: LD_STRING ],
67678: STR
67679: PPUSH
67680: CALL_OW 561
// end ;
67684: GO 67578
67686: POP
67687: POP
// AddToLog ( ]; ) ;
67688: LD_STRING ];
67690: PPUSH
67691: CALL_OW 561
// end ;
67695: LD_VAR 0 2
67699: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67700: LD_INT 0
67702: PPUSH
67703: PPUSH
67704: PPUSH
67705: PPUSH
67706: PPUSH
// if not area or not rate or not max then
67707: LD_VAR 0 1
67711: NOT
67712: PUSH
67713: LD_VAR 0 2
67717: NOT
67718: OR
67719: PUSH
67720: LD_VAR 0 4
67724: NOT
67725: OR
67726: IFFALSE 67730
// exit ;
67728: GO 67919
// while 1 do
67730: LD_INT 1
67732: IFFALSE 67919
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67734: LD_ADDR_VAR 0 9
67738: PUSH
67739: LD_VAR 0 1
67743: PPUSH
67744: LD_INT 1
67746: PPUSH
67747: CALL_OW 287
67751: PUSH
67752: LD_INT 10
67754: MUL
67755: ST_TO_ADDR
// r := rate / 10 ;
67756: LD_ADDR_VAR 0 7
67760: PUSH
67761: LD_VAR 0 2
67765: PUSH
67766: LD_INT 10
67768: DIVREAL
67769: ST_TO_ADDR
// time := 1 1$00 ;
67770: LD_ADDR_VAR 0 8
67774: PUSH
67775: LD_INT 2100
67777: ST_TO_ADDR
// if amount < min then
67778: LD_VAR 0 9
67782: PUSH
67783: LD_VAR 0 3
67787: LESS
67788: IFFALSE 67806
// r := r * 2 else
67790: LD_ADDR_VAR 0 7
67794: PUSH
67795: LD_VAR 0 7
67799: PUSH
67800: LD_INT 2
67802: MUL
67803: ST_TO_ADDR
67804: GO 67832
// if amount > max then
67806: LD_VAR 0 9
67810: PUSH
67811: LD_VAR 0 4
67815: GREATER
67816: IFFALSE 67832
// r := r / 2 ;
67818: LD_ADDR_VAR 0 7
67822: PUSH
67823: LD_VAR 0 7
67827: PUSH
67828: LD_INT 2
67830: DIVREAL
67831: ST_TO_ADDR
// time := time / r ;
67832: LD_ADDR_VAR 0 8
67836: PUSH
67837: LD_VAR 0 8
67841: PUSH
67842: LD_VAR 0 7
67846: DIVREAL
67847: ST_TO_ADDR
// if time < 0 then
67848: LD_VAR 0 8
67852: PUSH
67853: LD_INT 0
67855: LESS
67856: IFFALSE 67873
// time := time * - 1 ;
67858: LD_ADDR_VAR 0 8
67862: PUSH
67863: LD_VAR 0 8
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: MUL
67872: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67873: LD_VAR 0 8
67877: PUSH
67878: LD_INT 35
67880: PPUSH
67881: LD_INT 875
67883: PPUSH
67884: CALL_OW 12
67888: PLUS
67889: PPUSH
67890: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67894: LD_INT 1
67896: PPUSH
67897: LD_INT 5
67899: PPUSH
67900: CALL_OW 12
67904: PPUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_INT 1
67912: PPUSH
67913: CALL_OW 55
// end ;
67917: GO 67730
// end ;
67919: LD_VAR 0 5
67923: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67924: LD_INT 0
67926: PPUSH
67927: PPUSH
67928: PPUSH
67929: PPUSH
67930: PPUSH
67931: PPUSH
67932: PPUSH
67933: PPUSH
// if not turrets or not factories then
67934: LD_VAR 0 1
67938: NOT
67939: PUSH
67940: LD_VAR 0 2
67944: NOT
67945: OR
67946: IFFALSE 67950
// exit ;
67948: GO 68257
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67950: LD_ADDR_VAR 0 10
67954: PUSH
67955: LD_INT 5
67957: PUSH
67958: LD_INT 6
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 2
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 24
67992: PUSH
67993: LD_INT 25
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 23
68002: PUSH
68003: LD_INT 27
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 42
68016: PUSH
68017: LD_INT 43
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 44
68026: PUSH
68027: LD_INT 46
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 45
68036: PUSH
68037: LD_INT 47
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: ST_TO_ADDR
// result := [ ] ;
68054: LD_ADDR_VAR 0 3
68058: PUSH
68059: EMPTY
68060: ST_TO_ADDR
// for i in turrets do
68061: LD_ADDR_VAR 0 4
68065: PUSH
68066: LD_VAR 0 1
68070: PUSH
68071: FOR_IN
68072: IFFALSE 68255
// begin nat := GetNation ( i ) ;
68074: LD_ADDR_VAR 0 7
68078: PUSH
68079: LD_VAR 0 4
68083: PPUSH
68084: CALL_OW 248
68088: ST_TO_ADDR
// weapon := 0 ;
68089: LD_ADDR_VAR 0 8
68093: PUSH
68094: LD_INT 0
68096: ST_TO_ADDR
// if not nat then
68097: LD_VAR 0 7
68101: NOT
68102: IFFALSE 68106
// continue ;
68104: GO 68071
// for j in list [ nat ] do
68106: LD_ADDR_VAR 0 5
68110: PUSH
68111: LD_VAR 0 10
68115: PUSH
68116: LD_VAR 0 7
68120: ARRAY
68121: PUSH
68122: FOR_IN
68123: IFFALSE 68164
// if GetBWeapon ( i ) = j [ 1 ] then
68125: LD_VAR 0 4
68129: PPUSH
68130: CALL_OW 269
68134: PUSH
68135: LD_VAR 0 5
68139: PUSH
68140: LD_INT 1
68142: ARRAY
68143: EQUAL
68144: IFFALSE 68162
// begin weapon := j [ 2 ] ;
68146: LD_ADDR_VAR 0 8
68150: PUSH
68151: LD_VAR 0 5
68155: PUSH
68156: LD_INT 2
68158: ARRAY
68159: ST_TO_ADDR
// break ;
68160: GO 68164
// end ;
68162: GO 68122
68164: POP
68165: POP
// if not weapon then
68166: LD_VAR 0 8
68170: NOT
68171: IFFALSE 68175
// continue ;
68173: GO 68071
// for k in factories do
68175: LD_ADDR_VAR 0 6
68179: PUSH
68180: LD_VAR 0 2
68184: PUSH
68185: FOR_IN
68186: IFFALSE 68251
// begin weapons := AvailableWeaponList ( k ) ;
68188: LD_ADDR_VAR 0 9
68192: PUSH
68193: LD_VAR 0 6
68197: PPUSH
68198: CALL_OW 478
68202: ST_TO_ADDR
// if not weapons then
68203: LD_VAR 0 9
68207: NOT
68208: IFFALSE 68212
// continue ;
68210: GO 68185
// if weapon in weapons then
68212: LD_VAR 0 8
68216: PUSH
68217: LD_VAR 0 9
68221: IN
68222: IFFALSE 68249
// begin result := [ i , weapon ] ;
68224: LD_ADDR_VAR 0 3
68228: PUSH
68229: LD_VAR 0 4
68233: PUSH
68234: LD_VAR 0 8
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: ST_TO_ADDR
// exit ;
68243: POP
68244: POP
68245: POP
68246: POP
68247: GO 68257
// end ; end ;
68249: GO 68185
68251: POP
68252: POP
// end ;
68253: GO 68071
68255: POP
68256: POP
// end ;
68257: LD_VAR 0 3
68261: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68262: LD_INT 0
68264: PPUSH
// if not side or side > 8 then
68265: LD_VAR 0 3
68269: NOT
68270: PUSH
68271: LD_VAR 0 3
68275: PUSH
68276: LD_INT 8
68278: GREATER
68279: OR
68280: IFFALSE 68284
// exit ;
68282: GO 68343
// if not range then
68284: LD_VAR 0 4
68288: NOT
68289: IFFALSE 68300
// range := - 12 ;
68291: LD_ADDR_VAR 0 4
68295: PUSH
68296: LD_INT 12
68298: NEG
68299: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68300: LD_VAR 0 1
68304: PPUSH
68305: LD_VAR 0 2
68309: PPUSH
68310: LD_VAR 0 3
68314: PPUSH
68315: LD_VAR 0 4
68319: PPUSH
68320: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68324: LD_VAR 0 1
68328: PPUSH
68329: LD_VAR 0 2
68333: PPUSH
68334: LD_VAR 0 3
68338: PPUSH
68339: CALL_OW 331
// end ;
68343: LD_VAR 0 5
68347: RET
// export function Video ( mode ) ; begin
68348: LD_INT 0
68350: PPUSH
// ingame_video = mode ;
68351: LD_ADDR_OWVAR 52
68355: PUSH
68356: LD_VAR 0 1
68360: ST_TO_ADDR
// interface_hidden = mode ;
68361: LD_ADDR_OWVAR 54
68365: PUSH
68366: LD_VAR 0 1
68370: ST_TO_ADDR
// end ;
68371: LD_VAR 0 2
68375: RET
// export function Join ( array , element ) ; begin
68376: LD_INT 0
68378: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68379: LD_ADDR_VAR 0 3
68383: PUSH
68384: LD_VAR 0 1
68388: PPUSH
68389: LD_VAR 0 1
68393: PUSH
68394: LD_INT 1
68396: PLUS
68397: PPUSH
68398: LD_VAR 0 2
68402: PPUSH
68403: CALL_OW 1
68407: ST_TO_ADDR
// end ;
68408: LD_VAR 0 3
68412: RET
// export function JoinUnion ( array , element ) ; begin
68413: LD_INT 0
68415: PPUSH
// result := array union element ;
68416: LD_ADDR_VAR 0 3
68420: PUSH
68421: LD_VAR 0 1
68425: PUSH
68426: LD_VAR 0 2
68430: UNION
68431: ST_TO_ADDR
// end ;
68432: LD_VAR 0 3
68436: RET
// export function GetBehemoths ( side ) ; begin
68437: LD_INT 0
68439: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68440: LD_ADDR_VAR 0 2
68444: PUSH
68445: LD_INT 22
68447: PUSH
68448: LD_VAR 0 1
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 31
68459: PUSH
68460: LD_INT 25
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PPUSH
68471: CALL_OW 69
68475: ST_TO_ADDR
// end ;
68476: LD_VAR 0 2
68480: RET
// export function Shuffle ( array ) ; var i , index ; begin
68481: LD_INT 0
68483: PPUSH
68484: PPUSH
68485: PPUSH
// result := [ ] ;
68486: LD_ADDR_VAR 0 2
68490: PUSH
68491: EMPTY
68492: ST_TO_ADDR
// if not array then
68493: LD_VAR 0 1
68497: NOT
68498: IFFALSE 68502
// exit ;
68500: GO 68601
// Randomize ;
68502: CALL_OW 10
// for i = array downto 1 do
68506: LD_ADDR_VAR 0 3
68510: PUSH
68511: DOUBLE
68512: LD_VAR 0 1
68516: INC
68517: ST_TO_ADDR
68518: LD_INT 1
68520: PUSH
68521: FOR_DOWNTO
68522: IFFALSE 68599
// begin index := rand ( 1 , array ) ;
68524: LD_ADDR_VAR 0 4
68528: PUSH
68529: LD_INT 1
68531: PPUSH
68532: LD_VAR 0 1
68536: PPUSH
68537: CALL_OW 12
68541: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68542: LD_ADDR_VAR 0 2
68546: PUSH
68547: LD_VAR 0 2
68551: PPUSH
68552: LD_VAR 0 2
68556: PUSH
68557: LD_INT 1
68559: PLUS
68560: PPUSH
68561: LD_VAR 0 1
68565: PUSH
68566: LD_VAR 0 4
68570: ARRAY
68571: PPUSH
68572: CALL_OW 2
68576: ST_TO_ADDR
// array := Delete ( array , index ) ;
68577: LD_ADDR_VAR 0 1
68581: PUSH
68582: LD_VAR 0 1
68586: PPUSH
68587: LD_VAR 0 4
68591: PPUSH
68592: CALL_OW 3
68596: ST_TO_ADDR
// end ;
68597: GO 68521
68599: POP
68600: POP
// end ;
68601: LD_VAR 0 2
68605: RET
// export function GetBaseMaterials ( base ) ; begin
68606: LD_INT 0
68608: PPUSH
// result := [ 0 , 0 , 0 ] ;
68609: LD_ADDR_VAR 0 2
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: ST_TO_ADDR
// if not base then
68628: LD_VAR 0 1
68632: NOT
68633: IFFALSE 68637
// exit ;
68635: GO 68686
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68637: LD_ADDR_VAR 0 2
68641: PUSH
68642: LD_VAR 0 1
68646: PPUSH
68647: LD_INT 1
68649: PPUSH
68650: CALL_OW 275
68654: PUSH
68655: LD_VAR 0 1
68659: PPUSH
68660: LD_INT 2
68662: PPUSH
68663: CALL_OW 275
68667: PUSH
68668: LD_VAR 0 1
68672: PPUSH
68673: LD_INT 3
68675: PPUSH
68676: CALL_OW 275
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: LIST
68685: ST_TO_ADDR
// end ;
68686: LD_VAR 0 2
68690: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68691: LD_INT 0
68693: PPUSH
68694: PPUSH
// result := array ;
68695: LD_ADDR_VAR 0 3
68699: PUSH
68700: LD_VAR 0 1
68704: ST_TO_ADDR
// if size >= result then
68705: LD_VAR 0 2
68709: PUSH
68710: LD_VAR 0 3
68714: GREATEREQUAL
68715: IFFALSE 68719
// exit ;
68717: GO 68769
// if size then
68719: LD_VAR 0 2
68723: IFFALSE 68769
// for i := array downto size do
68725: LD_ADDR_VAR 0 4
68729: PUSH
68730: DOUBLE
68731: LD_VAR 0 1
68735: INC
68736: ST_TO_ADDR
68737: LD_VAR 0 2
68741: PUSH
68742: FOR_DOWNTO
68743: IFFALSE 68767
// result := Delete ( result , result ) ;
68745: LD_ADDR_VAR 0 3
68749: PUSH
68750: LD_VAR 0 3
68754: PPUSH
68755: LD_VAR 0 3
68759: PPUSH
68760: CALL_OW 3
68764: ST_TO_ADDR
68765: GO 68742
68767: POP
68768: POP
// end ;
68769: LD_VAR 0 3
68773: RET
// export function ComExit ( unit ) ; var tmp ; begin
68774: LD_INT 0
68776: PPUSH
68777: PPUSH
// if not IsInUnit ( unit ) then
68778: LD_VAR 0 1
68782: PPUSH
68783: CALL_OW 310
68787: NOT
68788: IFFALSE 68792
// exit ;
68790: GO 68852
// tmp := IsInUnit ( unit ) ;
68792: LD_ADDR_VAR 0 3
68796: PUSH
68797: LD_VAR 0 1
68801: PPUSH
68802: CALL_OW 310
68806: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68807: LD_VAR 0 3
68811: PPUSH
68812: CALL_OW 247
68816: PUSH
68817: LD_INT 2
68819: EQUAL
68820: IFFALSE 68833
// ComExitVehicle ( unit ) else
68822: LD_VAR 0 1
68826: PPUSH
68827: CALL_OW 121
68831: GO 68842
// ComExitBuilding ( unit ) ;
68833: LD_VAR 0 1
68837: PPUSH
68838: CALL_OW 122
// result := tmp ;
68842: LD_ADDR_VAR 0 2
68846: PUSH
68847: LD_VAR 0 3
68851: ST_TO_ADDR
// end ;
68852: LD_VAR 0 2
68856: RET
// export function ComExitAll ( units ) ; var i ; begin
68857: LD_INT 0
68859: PPUSH
68860: PPUSH
// if not units then
68861: LD_VAR 0 1
68865: NOT
68866: IFFALSE 68870
// exit ;
68868: GO 68896
// for i in units do
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: LD_VAR 0 1
68879: PUSH
68880: FOR_IN
68881: IFFALSE 68894
// ComExit ( i ) ;
68883: LD_VAR 0 3
68887: PPUSH
68888: CALL 68774 0 1
68892: GO 68880
68894: POP
68895: POP
// end ;
68896: LD_VAR 0 2
68900: RET
// export function ResetHc ; begin
68901: LD_INT 0
68903: PPUSH
// InitHc ;
68904: CALL_OW 19
// hc_importance := 0 ;
68908: LD_ADDR_OWVAR 32
68912: PUSH
68913: LD_INT 0
68915: ST_TO_ADDR
// end ;
68916: LD_VAR 0 1
68920: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68921: LD_INT 0
68923: PPUSH
68924: PPUSH
68925: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68926: LD_ADDR_VAR 0 6
68930: PUSH
68931: LD_VAR 0 1
68935: PUSH
68936: LD_VAR 0 3
68940: PLUS
68941: PUSH
68942: LD_INT 2
68944: DIV
68945: ST_TO_ADDR
// if _x < 0 then
68946: LD_VAR 0 6
68950: PUSH
68951: LD_INT 0
68953: LESS
68954: IFFALSE 68971
// _x := _x * - 1 ;
68956: LD_ADDR_VAR 0 6
68960: PUSH
68961: LD_VAR 0 6
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: MUL
68970: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68971: LD_ADDR_VAR 0 7
68975: PUSH
68976: LD_VAR 0 2
68980: PUSH
68981: LD_VAR 0 4
68985: PLUS
68986: PUSH
68987: LD_INT 2
68989: DIV
68990: ST_TO_ADDR
// if _y < 0 then
68991: LD_VAR 0 7
68995: PUSH
68996: LD_INT 0
68998: LESS
68999: IFFALSE 69016
// _y := _y * - 1 ;
69001: LD_ADDR_VAR 0 7
69005: PUSH
69006: LD_VAR 0 7
69010: PUSH
69011: LD_INT 1
69013: NEG
69014: MUL
69015: ST_TO_ADDR
// result := [ _x , _y ] ;
69016: LD_ADDR_VAR 0 5
69020: PUSH
69021: LD_VAR 0 6
69025: PUSH
69026: LD_VAR 0 7
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: ST_TO_ADDR
// end ;
69035: LD_VAR 0 5
69039: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69040: LD_INT 0
69042: PPUSH
69043: PPUSH
69044: PPUSH
69045: PPUSH
// task := GetTaskList ( unit ) ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 437
69060: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69061: LD_VAR 0 7
69065: NOT
69066: PUSH
69067: LD_VAR 0 1
69071: PPUSH
69072: LD_VAR 0 2
69076: PPUSH
69077: CALL_OW 308
69081: NOT
69082: AND
69083: IFFALSE 69087
// exit ;
69085: GO 69205
// if IsInArea ( unit , area ) then
69087: LD_VAR 0 1
69091: PPUSH
69092: LD_VAR 0 2
69096: PPUSH
69097: CALL_OW 308
69101: IFFALSE 69119
// begin ComMoveToArea ( unit , goAway ) ;
69103: LD_VAR 0 1
69107: PPUSH
69108: LD_VAR 0 3
69112: PPUSH
69113: CALL_OW 113
// exit ;
69117: GO 69205
// end ; if task [ 1 ] [ 1 ] <> M then
69119: LD_VAR 0 7
69123: PUSH
69124: LD_INT 1
69126: ARRAY
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PUSH
69132: LD_STRING M
69134: NONEQUAL
69135: IFFALSE 69139
// exit ;
69137: GO 69205
// x := task [ 1 ] [ 2 ] ;
69139: LD_ADDR_VAR 0 5
69143: PUSH
69144: LD_VAR 0 7
69148: PUSH
69149: LD_INT 1
69151: ARRAY
69152: PUSH
69153: LD_INT 2
69155: ARRAY
69156: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69157: LD_ADDR_VAR 0 6
69161: PUSH
69162: LD_VAR 0 7
69166: PUSH
69167: LD_INT 1
69169: ARRAY
69170: PUSH
69171: LD_INT 3
69173: ARRAY
69174: ST_TO_ADDR
// if InArea ( x , y , area ) then
69175: LD_VAR 0 5
69179: PPUSH
69180: LD_VAR 0 6
69184: PPUSH
69185: LD_VAR 0 2
69189: PPUSH
69190: CALL_OW 309
69194: IFFALSE 69205
// ComStop ( unit ) ;
69196: LD_VAR 0 1
69200: PPUSH
69201: CALL_OW 141
// end ;
69205: LD_VAR 0 4
69209: RET
// export function Abs ( value ) ; begin
69210: LD_INT 0
69212: PPUSH
// result := value ;
69213: LD_ADDR_VAR 0 2
69217: PUSH
69218: LD_VAR 0 1
69222: ST_TO_ADDR
// if value < 0 then
69223: LD_VAR 0 1
69227: PUSH
69228: LD_INT 0
69230: LESS
69231: IFFALSE 69248
// result := value * - 1 ;
69233: LD_ADDR_VAR 0 2
69237: PUSH
69238: LD_VAR 0 1
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: MUL
69247: ST_TO_ADDR
// end ;
69248: LD_VAR 0 2
69252: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69253: LD_INT 0
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
// if not unit or not building then
69263: LD_VAR 0 1
69267: NOT
69268: PUSH
69269: LD_VAR 0 2
69273: NOT
69274: OR
69275: IFFALSE 69279
// exit ;
69277: GO 69505
// x := GetX ( building ) ;
69279: LD_ADDR_VAR 0 4
69283: PUSH
69284: LD_VAR 0 2
69288: PPUSH
69289: CALL_OW 250
69293: ST_TO_ADDR
// y := GetY ( building ) ;
69294: LD_ADDR_VAR 0 6
69298: PUSH
69299: LD_VAR 0 2
69303: PPUSH
69304: CALL_OW 251
69308: ST_TO_ADDR
// d := GetDir ( building ) ;
69309: LD_ADDR_VAR 0 8
69313: PUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: CALL_OW 254
69323: ST_TO_ADDR
// r := 4 ;
69324: LD_ADDR_VAR 0 9
69328: PUSH
69329: LD_INT 4
69331: ST_TO_ADDR
// for i := 1 to 5 do
69332: LD_ADDR_VAR 0 10
69336: PUSH
69337: DOUBLE
69338: LD_INT 1
69340: DEC
69341: ST_TO_ADDR
69342: LD_INT 5
69344: PUSH
69345: FOR_TO
69346: IFFALSE 69503
// begin _x := ShiftX ( x , d , r + i ) ;
69348: LD_ADDR_VAR 0 5
69352: PUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: LD_VAR 0 8
69362: PPUSH
69363: LD_VAR 0 9
69367: PUSH
69368: LD_VAR 0 10
69372: PLUS
69373: PPUSH
69374: CALL_OW 272
69378: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69379: LD_ADDR_VAR 0 7
69383: PUSH
69384: LD_VAR 0 6
69388: PPUSH
69389: LD_VAR 0 8
69393: PPUSH
69394: LD_VAR 0 9
69398: PUSH
69399: LD_VAR 0 10
69403: PLUS
69404: PPUSH
69405: CALL_OW 273
69409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69410: LD_VAR 0 5
69414: PPUSH
69415: LD_VAR 0 7
69419: PPUSH
69420: CALL_OW 488
69424: PUSH
69425: LD_VAR 0 5
69429: PPUSH
69430: LD_VAR 0 7
69434: PPUSH
69435: CALL_OW 428
69439: PPUSH
69440: CALL_OW 247
69444: PUSH
69445: LD_INT 3
69447: PUSH
69448: LD_INT 2
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: IN
69455: NOT
69456: AND
69457: IFFALSE 69501
// begin ComMoveXY ( unit , _x , _y ) ;
69459: LD_VAR 0 1
69463: PPUSH
69464: LD_VAR 0 5
69468: PPUSH
69469: LD_VAR 0 7
69473: PPUSH
69474: CALL_OW 111
// result := [ _x , _y ] ;
69478: LD_ADDR_VAR 0 3
69482: PUSH
69483: LD_VAR 0 5
69487: PUSH
69488: LD_VAR 0 7
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: ST_TO_ADDR
// exit ;
69497: POP
69498: POP
69499: GO 69505
// end ; end ;
69501: GO 69345
69503: POP
69504: POP
// end ;
69505: LD_VAR 0 3
69509: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69510: LD_INT 0
69512: PPUSH
69513: PPUSH
69514: PPUSH
// result := 0 ;
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_INT 0
69522: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69523: LD_VAR 0 1
69527: PUSH
69528: LD_INT 0
69530: LESS
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: LD_INT 8
69539: GREATER
69540: OR
69541: PUSH
69542: LD_VAR 0 2
69546: PUSH
69547: LD_INT 0
69549: LESS
69550: OR
69551: PUSH
69552: LD_VAR 0 2
69556: PUSH
69557: LD_INT 8
69559: GREATER
69560: OR
69561: IFFALSE 69565
// exit ;
69563: GO 69640
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69565: LD_ADDR_VAR 0 4
69569: PUSH
69570: LD_INT 22
69572: PUSH
69573: LD_VAR 0 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PPUSH
69582: CALL_OW 69
69586: PUSH
69587: FOR_IN
69588: IFFALSE 69638
// begin un := UnitShoot ( i ) ;
69590: LD_ADDR_VAR 0 5
69594: PUSH
69595: LD_VAR 0 4
69599: PPUSH
69600: CALL_OW 504
69604: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69605: LD_VAR 0 5
69609: PPUSH
69610: CALL_OW 255
69614: PUSH
69615: LD_VAR 0 1
69619: EQUAL
69620: IFFALSE 69636
// begin result := un ;
69622: LD_ADDR_VAR 0 3
69626: PUSH
69627: LD_VAR 0 5
69631: ST_TO_ADDR
// exit ;
69632: POP
69633: POP
69634: GO 69640
// end ; end ;
69636: GO 69587
69638: POP
69639: POP
// end ;
69640: LD_VAR 0 3
69644: RET
// export function GetCargoBay ( units ) ; begin
69645: LD_INT 0
69647: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69648: LD_ADDR_VAR 0 2
69652: PUSH
69653: LD_VAR 0 1
69657: PPUSH
69658: LD_INT 2
69660: PUSH
69661: LD_INT 34
69663: PUSH
69664: LD_INT 12
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 34
69673: PUSH
69674: LD_INT 51
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 34
69683: PUSH
69684: LD_INT 32
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 34
69693: PUSH
69694: LD_INT 89
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: PPUSH
69708: CALL_OW 72
69712: ST_TO_ADDR
// end ;
69713: LD_VAR 0 2
69717: RET
// export function Negate ( value ) ; begin
69718: LD_INT 0
69720: PPUSH
// result := not value ;
69721: LD_ADDR_VAR 0 2
69725: PUSH
69726: LD_VAR 0 1
69730: NOT
69731: ST_TO_ADDR
// end ;
69732: LD_VAR 0 2
69736: RET
// export function Inc ( value ) ; begin
69737: LD_INT 0
69739: PPUSH
// result := value + 1 ;
69740: LD_ADDR_VAR 0 2
69744: PUSH
69745: LD_VAR 0 1
69749: PUSH
69750: LD_INT 1
69752: PLUS
69753: ST_TO_ADDR
// end ;
69754: LD_VAR 0 2
69758: RET
// export function Dec ( value ) ; begin
69759: LD_INT 0
69761: PPUSH
// result := value - 1 ;
69762: LD_ADDR_VAR 0 2
69766: PUSH
69767: LD_VAR 0 1
69771: PUSH
69772: LD_INT 1
69774: MINUS
69775: ST_TO_ADDR
// end ;
69776: LD_VAR 0 2
69780: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69781: LD_INT 0
69783: PPUSH
69784: PPUSH
69785: PPUSH
69786: PPUSH
69787: PPUSH
69788: PPUSH
69789: PPUSH
69790: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69791: LD_VAR 0 1
69795: PPUSH
69796: LD_VAR 0 2
69800: PPUSH
69801: CALL_OW 488
69805: NOT
69806: PUSH
69807: LD_VAR 0 3
69811: PPUSH
69812: LD_VAR 0 4
69816: PPUSH
69817: CALL_OW 488
69821: NOT
69822: OR
69823: IFFALSE 69836
// begin result := - 1 ;
69825: LD_ADDR_VAR 0 5
69829: PUSH
69830: LD_INT 1
69832: NEG
69833: ST_TO_ADDR
// exit ;
69834: GO 70071
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69836: LD_ADDR_VAR 0 12
69840: PUSH
69841: LD_VAR 0 1
69845: PPUSH
69846: LD_VAR 0 2
69850: PPUSH
69851: LD_VAR 0 3
69855: PPUSH
69856: LD_VAR 0 4
69860: PPUSH
69861: CALL 68921 0 4
69865: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69866: LD_ADDR_VAR 0 11
69870: PUSH
69871: LD_VAR 0 1
69875: PPUSH
69876: LD_VAR 0 2
69880: PPUSH
69881: LD_VAR 0 12
69885: PUSH
69886: LD_INT 1
69888: ARRAY
69889: PPUSH
69890: LD_VAR 0 12
69894: PUSH
69895: LD_INT 2
69897: ARRAY
69898: PPUSH
69899: CALL_OW 298
69903: ST_TO_ADDR
// distance := 9999 ;
69904: LD_ADDR_VAR 0 10
69908: PUSH
69909: LD_INT 9999
69911: ST_TO_ADDR
// for i := 0 to 5 do
69912: LD_ADDR_VAR 0 6
69916: PUSH
69917: DOUBLE
69918: LD_INT 0
69920: DEC
69921: ST_TO_ADDR
69922: LD_INT 5
69924: PUSH
69925: FOR_TO
69926: IFFALSE 70069
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69928: LD_ADDR_VAR 0 7
69932: PUSH
69933: LD_VAR 0 1
69937: PPUSH
69938: LD_VAR 0 6
69942: PPUSH
69943: LD_VAR 0 11
69947: PPUSH
69948: CALL_OW 272
69952: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69953: LD_ADDR_VAR 0 8
69957: PUSH
69958: LD_VAR 0 2
69962: PPUSH
69963: LD_VAR 0 6
69967: PPUSH
69968: LD_VAR 0 11
69972: PPUSH
69973: CALL_OW 273
69977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69978: LD_VAR 0 7
69982: PPUSH
69983: LD_VAR 0 8
69987: PPUSH
69988: CALL_OW 488
69992: NOT
69993: IFFALSE 69997
// continue ;
69995: GO 69925
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69997: LD_ADDR_VAR 0 9
70001: PUSH
70002: LD_VAR 0 12
70006: PUSH
70007: LD_INT 1
70009: ARRAY
70010: PPUSH
70011: LD_VAR 0 12
70015: PUSH
70016: LD_INT 2
70018: ARRAY
70019: PPUSH
70020: LD_VAR 0 7
70024: PPUSH
70025: LD_VAR 0 8
70029: PPUSH
70030: CALL_OW 298
70034: ST_TO_ADDR
// if tmp < distance then
70035: LD_VAR 0 9
70039: PUSH
70040: LD_VAR 0 10
70044: LESS
70045: IFFALSE 70067
// begin result := i ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: LD_VAR 0 6
70056: ST_TO_ADDR
// distance := tmp ;
70057: LD_ADDR_VAR 0 10
70061: PUSH
70062: LD_VAR 0 9
70066: ST_TO_ADDR
// end ; end ;
70067: GO 69925
70069: POP
70070: POP
// end ;
70071: LD_VAR 0 5
70075: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70076: LD_INT 0
70078: PPUSH
70079: PPUSH
// if not driver or not IsInUnit ( driver ) then
70080: LD_VAR 0 1
70084: NOT
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: CALL_OW 310
70095: NOT
70096: OR
70097: IFFALSE 70101
// exit ;
70099: GO 70191
// vehicle := IsInUnit ( driver ) ;
70101: LD_ADDR_VAR 0 3
70105: PUSH
70106: LD_VAR 0 1
70110: PPUSH
70111: CALL_OW 310
70115: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70116: LD_VAR 0 1
70120: PPUSH
70121: LD_STRING \
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_INT 0
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: PUSH
70151: LD_STRING E
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_VAR 0 3
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PPUSH
70187: CALL_OW 446
// end ;
70191: LD_VAR 0 2
70195: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70196: LD_INT 0
70198: PPUSH
70199: PPUSH
// if not driver or not IsInUnit ( driver ) then
70200: LD_VAR 0 1
70204: NOT
70205: PUSH
70206: LD_VAR 0 1
70210: PPUSH
70211: CALL_OW 310
70215: NOT
70216: OR
70217: IFFALSE 70221
// exit ;
70219: GO 70311
// vehicle := IsInUnit ( driver ) ;
70221: LD_ADDR_VAR 0 3
70225: PUSH
70226: LD_VAR 0 1
70230: PPUSH
70231: CALL_OW 310
70235: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70236: LD_VAR 0 1
70240: PPUSH
70241: LD_STRING \
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: LD_INT 0
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: LD_INT 0
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: PUSH
70271: LD_STRING E
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: LD_VAR 0 3
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PPUSH
70307: CALL_OW 447
// end ;
70311: LD_VAR 0 2
70315: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70316: LD_INT 0
70318: PPUSH
70319: PPUSH
70320: PPUSH
// tmp := [ ] ;
70321: LD_ADDR_VAR 0 5
70325: PUSH
70326: EMPTY
70327: ST_TO_ADDR
// for i in units do
70328: LD_ADDR_VAR 0 4
70332: PUSH
70333: LD_VAR 0 1
70337: PUSH
70338: FOR_IN
70339: IFFALSE 70377
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70341: LD_ADDR_VAR 0 5
70345: PUSH
70346: LD_VAR 0 5
70350: PPUSH
70351: LD_VAR 0 5
70355: PUSH
70356: LD_INT 1
70358: PLUS
70359: PPUSH
70360: LD_VAR 0 4
70364: PPUSH
70365: CALL_OW 256
70369: PPUSH
70370: CALL_OW 2
70374: ST_TO_ADDR
70375: GO 70338
70377: POP
70378: POP
// if not tmp then
70379: LD_VAR 0 5
70383: NOT
70384: IFFALSE 70388
// exit ;
70386: GO 70436
// if asc then
70388: LD_VAR 0 2
70392: IFFALSE 70416
// result := SortListByListAsc ( units , tmp ) else
70394: LD_ADDR_VAR 0 3
70398: PUSH
70399: LD_VAR 0 1
70403: PPUSH
70404: LD_VAR 0 5
70408: PPUSH
70409: CALL_OW 76
70413: ST_TO_ADDR
70414: GO 70436
// result := SortListByListDesc ( units , tmp ) ;
70416: LD_ADDR_VAR 0 3
70420: PUSH
70421: LD_VAR 0 1
70425: PPUSH
70426: LD_VAR 0 5
70430: PPUSH
70431: CALL_OW 77
70435: ST_TO_ADDR
// end ;
70436: LD_VAR 0 3
70440: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70441: LD_INT 0
70443: PPUSH
70444: PPUSH
// task := GetTaskList ( mech ) ;
70445: LD_ADDR_VAR 0 4
70449: PUSH
70450: LD_VAR 0 1
70454: PPUSH
70455: CALL_OW 437
70459: ST_TO_ADDR
// if not task then
70460: LD_VAR 0 4
70464: NOT
70465: IFFALSE 70469
// exit ;
70467: GO 70511
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70469: LD_ADDR_VAR 0 3
70473: PUSH
70474: LD_VAR 0 4
70478: PUSH
70479: LD_INT 1
70481: ARRAY
70482: PUSH
70483: LD_INT 1
70485: ARRAY
70486: PUSH
70487: LD_STRING r
70489: EQUAL
70490: PUSH
70491: LD_VAR 0 4
70495: PUSH
70496: LD_INT 1
70498: ARRAY
70499: PUSH
70500: LD_INT 4
70502: ARRAY
70503: PUSH
70504: LD_VAR 0 2
70508: EQUAL
70509: AND
70510: ST_TO_ADDR
// end ;
70511: LD_VAR 0 3
70515: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70516: LD_INT 0
70518: PPUSH
// SetDir ( unit , d ) ;
70519: LD_VAR 0 1
70523: PPUSH
70524: LD_VAR 0 4
70528: PPUSH
70529: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70533: LD_VAR 0 1
70537: PPUSH
70538: LD_VAR 0 2
70542: PPUSH
70543: LD_VAR 0 3
70547: PPUSH
70548: LD_VAR 0 5
70552: PPUSH
70553: CALL_OW 48
// end ;
70557: LD_VAR 0 6
70561: RET
// export function ToNaturalNumber ( number ) ; begin
70562: LD_INT 0
70564: PPUSH
// result := number div 1 ;
70565: LD_ADDR_VAR 0 2
70569: PUSH
70570: LD_VAR 0 1
70574: PUSH
70575: LD_INT 1
70577: DIV
70578: ST_TO_ADDR
// if number < 0 then
70579: LD_VAR 0 1
70583: PUSH
70584: LD_INT 0
70586: LESS
70587: IFFALSE 70597
// result := 0 ;
70589: LD_ADDR_VAR 0 2
70593: PUSH
70594: LD_INT 0
70596: ST_TO_ADDR
// end ;
70597: LD_VAR 0 2
70601: RET
// export function SortByClass ( units , class ) ; var un ; begin
70602: LD_INT 0
70604: PPUSH
70605: PPUSH
// if not units or not class then
70606: LD_VAR 0 1
70610: NOT
70611: PUSH
70612: LD_VAR 0 2
70616: NOT
70617: OR
70618: IFFALSE 70622
// exit ;
70620: GO 70717
// result := [ ] ;
70622: LD_ADDR_VAR 0 3
70626: PUSH
70627: EMPTY
70628: ST_TO_ADDR
// for un in units do
70629: LD_ADDR_VAR 0 4
70633: PUSH
70634: LD_VAR 0 1
70638: PUSH
70639: FOR_IN
70640: IFFALSE 70715
// if GetClass ( un ) = class then
70642: LD_VAR 0 4
70646: PPUSH
70647: CALL_OW 257
70651: PUSH
70652: LD_VAR 0 2
70656: EQUAL
70657: IFFALSE 70684
// result := Insert ( result , 1 , un ) else
70659: LD_ADDR_VAR 0 3
70663: PUSH
70664: LD_VAR 0 3
70668: PPUSH
70669: LD_INT 1
70671: PPUSH
70672: LD_VAR 0 4
70676: PPUSH
70677: CALL_OW 2
70681: ST_TO_ADDR
70682: GO 70713
// result := Replace ( result , result + 1 , un ) ;
70684: LD_ADDR_VAR 0 3
70688: PUSH
70689: LD_VAR 0 3
70693: PPUSH
70694: LD_VAR 0 3
70698: PUSH
70699: LD_INT 1
70701: PLUS
70702: PPUSH
70703: LD_VAR 0 4
70707: PPUSH
70708: CALL_OW 1
70712: ST_TO_ADDR
70713: GO 70639
70715: POP
70716: POP
// end ;
70717: LD_VAR 0 3
70721: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70722: LD_INT 0
70724: PPUSH
70725: PPUSH
70726: PPUSH
70727: PPUSH
70728: PPUSH
70729: PPUSH
70730: PPUSH
// result := [ ] ;
70731: LD_ADDR_VAR 0 4
70735: PUSH
70736: EMPTY
70737: ST_TO_ADDR
// if x - r < 0 then
70738: LD_VAR 0 1
70742: PUSH
70743: LD_VAR 0 3
70747: MINUS
70748: PUSH
70749: LD_INT 0
70751: LESS
70752: IFFALSE 70764
// min_x := 0 else
70754: LD_ADDR_VAR 0 8
70758: PUSH
70759: LD_INT 0
70761: ST_TO_ADDR
70762: GO 70780
// min_x := x - r ;
70764: LD_ADDR_VAR 0 8
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: LD_VAR 0 3
70778: MINUS
70779: ST_TO_ADDR
// if y - r < 0 then
70780: LD_VAR 0 2
70784: PUSH
70785: LD_VAR 0 3
70789: MINUS
70790: PUSH
70791: LD_INT 0
70793: LESS
70794: IFFALSE 70806
// min_y := 0 else
70796: LD_ADDR_VAR 0 7
70800: PUSH
70801: LD_INT 0
70803: ST_TO_ADDR
70804: GO 70822
// min_y := y - r ;
70806: LD_ADDR_VAR 0 7
70810: PUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_VAR 0 3
70820: MINUS
70821: ST_TO_ADDR
// max_x := x + r ;
70822: LD_ADDR_VAR 0 9
70826: PUSH
70827: LD_VAR 0 1
70831: PUSH
70832: LD_VAR 0 3
70836: PLUS
70837: ST_TO_ADDR
// max_y := y + r ;
70838: LD_ADDR_VAR 0 10
70842: PUSH
70843: LD_VAR 0 2
70847: PUSH
70848: LD_VAR 0 3
70852: PLUS
70853: ST_TO_ADDR
// for _x = min_x to max_x do
70854: LD_ADDR_VAR 0 5
70858: PUSH
70859: DOUBLE
70860: LD_VAR 0 8
70864: DEC
70865: ST_TO_ADDR
70866: LD_VAR 0 9
70870: PUSH
70871: FOR_TO
70872: IFFALSE 70973
// for _y = min_y to max_y do
70874: LD_ADDR_VAR 0 6
70878: PUSH
70879: DOUBLE
70880: LD_VAR 0 7
70884: DEC
70885: ST_TO_ADDR
70886: LD_VAR 0 10
70890: PUSH
70891: FOR_TO
70892: IFFALSE 70969
// begin if not ValidHex ( _x , _y ) then
70894: LD_VAR 0 5
70898: PPUSH
70899: LD_VAR 0 6
70903: PPUSH
70904: CALL_OW 488
70908: NOT
70909: IFFALSE 70913
// continue ;
70911: GO 70891
// if GetResourceTypeXY ( _x , _y ) then
70913: LD_VAR 0 5
70917: PPUSH
70918: LD_VAR 0 6
70922: PPUSH
70923: CALL_OW 283
70927: IFFALSE 70967
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70929: LD_ADDR_VAR 0 4
70933: PUSH
70934: LD_VAR 0 4
70938: PPUSH
70939: LD_VAR 0 4
70943: PUSH
70944: LD_INT 1
70946: PLUS
70947: PPUSH
70948: LD_VAR 0 5
70952: PUSH
70953: LD_VAR 0 6
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PPUSH
70962: CALL_OW 1
70966: ST_TO_ADDR
// end ;
70967: GO 70891
70969: POP
70970: POP
70971: GO 70871
70973: POP
70974: POP
// end ;
70975: LD_VAR 0 4
70979: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70980: LD_INT 0
70982: PPUSH
70983: PPUSH
70984: PPUSH
70985: PPUSH
70986: PPUSH
70987: PPUSH
70988: PPUSH
70989: PPUSH
// if not units then
70990: LD_VAR 0 1
70994: NOT
70995: IFFALSE 70999
// exit ;
70997: GO 71523
// result := UnitFilter ( units , [ f_ok ] ) ;
70999: LD_ADDR_VAR 0 3
71003: PUSH
71004: LD_VAR 0 1
71008: PPUSH
71009: LD_INT 50
71011: PUSH
71012: EMPTY
71013: LIST
71014: PPUSH
71015: CALL_OW 72
71019: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71020: LD_ADDR_VAR 0 8
71024: PUSH
71025: LD_VAR 0 1
71029: PUSH
71030: LD_INT 1
71032: ARRAY
71033: PPUSH
71034: CALL_OW 255
71038: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71039: LD_ADDR_VAR 0 10
71043: PUSH
71044: LD_INT 29
71046: PUSH
71047: LD_INT 91
71049: PUSH
71050: LD_INT 49
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: LIST
71057: ST_TO_ADDR
// if not result then
71058: LD_VAR 0 3
71062: NOT
71063: IFFALSE 71067
// exit ;
71065: GO 71523
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71067: LD_ADDR_VAR 0 5
71071: PUSH
71072: LD_INT 81
71074: PUSH
71075: LD_VAR 0 8
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PPUSH
71084: CALL_OW 69
71088: ST_TO_ADDR
// for i in result do
71089: LD_ADDR_VAR 0 4
71093: PUSH
71094: LD_VAR 0 3
71098: PUSH
71099: FOR_IN
71100: IFFALSE 71521
// begin tag := GetTag ( i ) + 1 ;
71102: LD_ADDR_VAR 0 9
71106: PUSH
71107: LD_VAR 0 4
71111: PPUSH
71112: CALL_OW 110
71116: PUSH
71117: LD_INT 1
71119: PLUS
71120: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71121: LD_ADDR_VAR 0 7
71125: PUSH
71126: LD_VAR 0 4
71130: PPUSH
71131: CALL_OW 250
71135: PPUSH
71136: LD_VAR 0 4
71140: PPUSH
71141: CALL_OW 251
71145: PPUSH
71146: LD_INT 6
71148: PPUSH
71149: CALL 70722 0 3
71153: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71154: LD_VAR 0 4
71158: PPUSH
71159: CALL_OW 247
71163: PUSH
71164: LD_INT 2
71166: EQUAL
71167: PUSH
71168: LD_VAR 0 7
71172: AND
71173: PUSH
71174: LD_VAR 0 4
71178: PPUSH
71179: CALL_OW 264
71183: PUSH
71184: LD_VAR 0 10
71188: IN
71189: NOT
71190: AND
71191: IFFALSE 71230
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71193: LD_VAR 0 4
71197: PPUSH
71198: LD_VAR 0 7
71202: PUSH
71203: LD_INT 1
71205: ARRAY
71206: PUSH
71207: LD_INT 1
71209: ARRAY
71210: PPUSH
71211: LD_VAR 0 7
71215: PUSH
71216: LD_INT 1
71218: ARRAY
71219: PUSH
71220: LD_INT 2
71222: ARRAY
71223: PPUSH
71224: CALL_OW 116
71228: GO 71519
// if path > tag then
71230: LD_VAR 0 2
71234: PUSH
71235: LD_VAR 0 9
71239: GREATER
71240: IFFALSE 71448
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71242: LD_ADDR_VAR 0 6
71246: PUSH
71247: LD_VAR 0 5
71251: PPUSH
71252: LD_INT 91
71254: PUSH
71255: LD_VAR 0 4
71259: PUSH
71260: LD_INT 8
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: LIST
71267: PPUSH
71268: CALL_OW 72
71272: ST_TO_ADDR
// if nearEnemy then
71273: LD_VAR 0 6
71277: IFFALSE 71346
// begin if GetWeapon ( i ) = ru_time_lapser then
71279: LD_VAR 0 4
71283: PPUSH
71284: CALL_OW 264
71288: PUSH
71289: LD_INT 49
71291: EQUAL
71292: IFFALSE 71320
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71294: LD_VAR 0 4
71298: PPUSH
71299: LD_VAR 0 6
71303: PPUSH
71304: LD_VAR 0 4
71308: PPUSH
71309: CALL_OW 74
71313: PPUSH
71314: CALL_OW 112
71318: GO 71344
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71320: LD_VAR 0 4
71324: PPUSH
71325: LD_VAR 0 6
71329: PPUSH
71330: LD_VAR 0 4
71334: PPUSH
71335: CALL_OW 74
71339: PPUSH
71340: CALL_OW 115
// end else
71344: GO 71446
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71346: LD_VAR 0 4
71350: PPUSH
71351: LD_VAR 0 2
71355: PUSH
71356: LD_VAR 0 9
71360: ARRAY
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PPUSH
71366: LD_VAR 0 2
71370: PUSH
71371: LD_VAR 0 9
71375: ARRAY
71376: PUSH
71377: LD_INT 2
71379: ARRAY
71380: PPUSH
71381: CALL_OW 297
71385: PUSH
71386: LD_INT 6
71388: GREATER
71389: IFFALSE 71432
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71391: LD_VAR 0 4
71395: PPUSH
71396: LD_VAR 0 2
71400: PUSH
71401: LD_VAR 0 9
71405: ARRAY
71406: PUSH
71407: LD_INT 1
71409: ARRAY
71410: PPUSH
71411: LD_VAR 0 2
71415: PUSH
71416: LD_VAR 0 9
71420: ARRAY
71421: PUSH
71422: LD_INT 2
71424: ARRAY
71425: PPUSH
71426: CALL_OW 114
71430: GO 71446
// SetTag ( i , tag ) ;
71432: LD_VAR 0 4
71436: PPUSH
71437: LD_VAR 0 9
71441: PPUSH
71442: CALL_OW 109
// end else
71446: GO 71519
// if enemy then
71448: LD_VAR 0 5
71452: IFFALSE 71519
// begin if GetWeapon ( i ) = ru_time_lapser then
71454: LD_VAR 0 4
71458: PPUSH
71459: CALL_OW 264
71463: PUSH
71464: LD_INT 49
71466: EQUAL
71467: IFFALSE 71495
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71469: LD_VAR 0 4
71473: PPUSH
71474: LD_VAR 0 5
71478: PPUSH
71479: LD_VAR 0 4
71483: PPUSH
71484: CALL_OW 74
71488: PPUSH
71489: CALL_OW 112
71493: GO 71519
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71495: LD_VAR 0 4
71499: PPUSH
71500: LD_VAR 0 5
71504: PPUSH
71505: LD_VAR 0 4
71509: PPUSH
71510: CALL_OW 74
71514: PPUSH
71515: CALL_OW 115
// end ; end ;
71519: GO 71099
71521: POP
71522: POP
// end ;
71523: LD_VAR 0 3
71527: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
71532: PPUSH
// if not unit or IsInUnit ( unit ) then
71533: LD_VAR 0 1
71537: NOT
71538: PUSH
71539: LD_VAR 0 1
71543: PPUSH
71544: CALL_OW 310
71548: OR
71549: IFFALSE 71553
// exit ;
71551: GO 71644
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71553: LD_ADDR_VAR 0 4
71557: PUSH
71558: LD_VAR 0 1
71562: PPUSH
71563: CALL_OW 250
71567: PPUSH
71568: LD_VAR 0 2
71572: PPUSH
71573: LD_INT 1
71575: PPUSH
71576: CALL_OW 272
71580: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71581: LD_ADDR_VAR 0 5
71585: PUSH
71586: LD_VAR 0 1
71590: PPUSH
71591: CALL_OW 251
71595: PPUSH
71596: LD_VAR 0 2
71600: PPUSH
71601: LD_INT 1
71603: PPUSH
71604: CALL_OW 273
71608: ST_TO_ADDR
// if ValidHex ( x , y ) then
71609: LD_VAR 0 4
71613: PPUSH
71614: LD_VAR 0 5
71618: PPUSH
71619: CALL_OW 488
71623: IFFALSE 71644
// ComTurnXY ( unit , x , y ) ;
71625: LD_VAR 0 1
71629: PPUSH
71630: LD_VAR 0 4
71634: PPUSH
71635: LD_VAR 0 5
71639: PPUSH
71640: CALL_OW 118
// end ;
71644: LD_VAR 0 3
71648: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71649: LD_INT 0
71651: PPUSH
71652: PPUSH
// result := false ;
71653: LD_ADDR_VAR 0 3
71657: PUSH
71658: LD_INT 0
71660: ST_TO_ADDR
// if not units then
71661: LD_VAR 0 2
71665: NOT
71666: IFFALSE 71670
// exit ;
71668: GO 71715
// for i in units do
71670: LD_ADDR_VAR 0 4
71674: PUSH
71675: LD_VAR 0 2
71679: PUSH
71680: FOR_IN
71681: IFFALSE 71713
// if See ( side , i ) then
71683: LD_VAR 0 1
71687: PPUSH
71688: LD_VAR 0 4
71692: PPUSH
71693: CALL_OW 292
71697: IFFALSE 71711
// begin result := true ;
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: LD_INT 1
71706: ST_TO_ADDR
// exit ;
71707: POP
71708: POP
71709: GO 71715
// end ;
71711: GO 71680
71713: POP
71714: POP
// end ;
71715: LD_VAR 0 3
71719: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71720: LD_INT 0
71722: PPUSH
71723: PPUSH
71724: PPUSH
71725: PPUSH
// if not unit or not points then
71726: LD_VAR 0 1
71730: NOT
71731: PUSH
71732: LD_VAR 0 2
71736: NOT
71737: OR
71738: IFFALSE 71742
// exit ;
71740: GO 71832
// dist := 99999 ;
71742: LD_ADDR_VAR 0 5
71746: PUSH
71747: LD_INT 99999
71749: ST_TO_ADDR
// for i in points do
71750: LD_ADDR_VAR 0 4
71754: PUSH
71755: LD_VAR 0 2
71759: PUSH
71760: FOR_IN
71761: IFFALSE 71830
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71763: LD_ADDR_VAR 0 6
71767: PUSH
71768: LD_VAR 0 1
71772: PPUSH
71773: LD_VAR 0 4
71777: PUSH
71778: LD_INT 1
71780: ARRAY
71781: PPUSH
71782: LD_VAR 0 4
71786: PUSH
71787: LD_INT 2
71789: ARRAY
71790: PPUSH
71791: CALL_OW 297
71795: ST_TO_ADDR
// if tmpDist < dist then
71796: LD_VAR 0 6
71800: PUSH
71801: LD_VAR 0 5
71805: LESS
71806: IFFALSE 71828
// begin result := i ;
71808: LD_ADDR_VAR 0 3
71812: PUSH
71813: LD_VAR 0 4
71817: ST_TO_ADDR
// dist := tmpDist ;
71818: LD_ADDR_VAR 0 5
71822: PUSH
71823: LD_VAR 0 6
71827: ST_TO_ADDR
// end ; end ;
71828: GO 71760
71830: POP
71831: POP
// end ;
71832: LD_VAR 0 3
71836: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71837: LD_INT 0
71839: PPUSH
// uc_side := side ;
71840: LD_ADDR_OWVAR 20
71844: PUSH
71845: LD_VAR 0 1
71849: ST_TO_ADDR
// uc_nation := 3 ;
71850: LD_ADDR_OWVAR 21
71854: PUSH
71855: LD_INT 3
71857: ST_TO_ADDR
// vc_chassis := 25 ;
71858: LD_ADDR_OWVAR 37
71862: PUSH
71863: LD_INT 25
71865: ST_TO_ADDR
// vc_engine := engine_siberite ;
71866: LD_ADDR_OWVAR 39
71870: PUSH
71871: LD_INT 3
71873: ST_TO_ADDR
// vc_control := control_computer ;
71874: LD_ADDR_OWVAR 38
71878: PUSH
71879: LD_INT 3
71881: ST_TO_ADDR
// vc_weapon := 59 ;
71882: LD_ADDR_OWVAR 40
71886: PUSH
71887: LD_INT 59
71889: ST_TO_ADDR
// result := CreateVehicle ;
71890: LD_ADDR_VAR 0 5
71894: PUSH
71895: CALL_OW 45
71899: ST_TO_ADDR
// SetDir ( result , d ) ;
71900: LD_VAR 0 5
71904: PPUSH
71905: LD_VAR 0 4
71909: PPUSH
71910: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71914: LD_VAR 0 5
71918: PPUSH
71919: LD_VAR 0 2
71923: PPUSH
71924: LD_VAR 0 3
71928: PPUSH
71929: LD_INT 0
71931: PPUSH
71932: CALL_OW 48
// end ;
71936: LD_VAR 0 5
71940: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71941: LD_INT 0
71943: PPUSH
71944: PPUSH
71945: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71946: LD_ADDR_VAR 0 2
71950: PUSH
71951: LD_INT 0
71953: PUSH
71954: LD_INT 0
71956: PUSH
71957: LD_INT 0
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71969: LD_VAR 0 1
71973: NOT
71974: PUSH
71975: LD_VAR 0 1
71979: PPUSH
71980: CALL_OW 264
71984: PUSH
71985: LD_INT 12
71987: PUSH
71988: LD_INT 51
71990: PUSH
71991: LD_INT 32
71993: PUSH
71994: LD_INT 89
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: IN
72003: NOT
72004: OR
72005: IFFALSE 72009
// exit ;
72007: GO 72107
// for i := 1 to 3 do
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: DOUBLE
72015: LD_INT 1
72017: DEC
72018: ST_TO_ADDR
72019: LD_INT 3
72021: PUSH
72022: FOR_TO
72023: IFFALSE 72105
// begin tmp := GetCargo ( cargo , i ) ;
72025: LD_ADDR_VAR 0 4
72029: PUSH
72030: LD_VAR 0 1
72034: PPUSH
72035: LD_VAR 0 3
72039: PPUSH
72040: CALL_OW 289
72044: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72045: LD_ADDR_VAR 0 2
72049: PUSH
72050: LD_VAR 0 2
72054: PPUSH
72055: LD_VAR 0 3
72059: PPUSH
72060: LD_VAR 0 4
72064: PPUSH
72065: CALL_OW 1
72069: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72070: LD_ADDR_VAR 0 2
72074: PUSH
72075: LD_VAR 0 2
72079: PPUSH
72080: LD_INT 4
72082: PPUSH
72083: LD_VAR 0 2
72087: PUSH
72088: LD_INT 4
72090: ARRAY
72091: PUSH
72092: LD_VAR 0 4
72096: PLUS
72097: PPUSH
72098: CALL_OW 1
72102: ST_TO_ADDR
// end ;
72103: GO 72022
72105: POP
72106: POP
// end ;
72107: LD_VAR 0 2
72111: RET
// export function Length ( array ) ; begin
72112: LD_INT 0
72114: PPUSH
// result := array + 0 ;
72115: LD_ADDR_VAR 0 2
72119: PUSH
72120: LD_VAR 0 1
72124: PUSH
72125: LD_INT 0
72127: PLUS
72128: ST_TO_ADDR
// end ;
72129: LD_VAR 0 2
72133: RET
// export function PrepareArray ( array ) ; begin
72134: LD_INT 0
72136: PPUSH
// result := array diff 0 ;
72137: LD_ADDR_VAR 0 2
72141: PUSH
72142: LD_VAR 0 1
72146: PUSH
72147: LD_INT 0
72149: DIFF
72150: ST_TO_ADDR
// if not result [ 1 ] then
72151: LD_VAR 0 2
72155: PUSH
72156: LD_INT 1
72158: ARRAY
72159: NOT
72160: IFFALSE 72180
// result := Delete ( result , 1 ) ;
72162: LD_ADDR_VAR 0 2
72166: PUSH
72167: LD_VAR 0 2
72171: PPUSH
72172: LD_INT 1
72174: PPUSH
72175: CALL_OW 3
72179: ST_TO_ADDR
// end ;
72180: LD_VAR 0 2
72184: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72185: LD_INT 0
72187: PPUSH
72188: PPUSH
72189: PPUSH
72190: PPUSH
// sibRocketRange := 25 ;
72191: LD_ADDR_VAR 0 6
72195: PUSH
72196: LD_INT 25
72198: ST_TO_ADDR
// result := false ;
72199: LD_ADDR_VAR 0 4
72203: PUSH
72204: LD_INT 0
72206: ST_TO_ADDR
// for i := 0 to 5 do
72207: LD_ADDR_VAR 0 5
72211: PUSH
72212: DOUBLE
72213: LD_INT 0
72215: DEC
72216: ST_TO_ADDR
72217: LD_INT 5
72219: PUSH
72220: FOR_TO
72221: IFFALSE 72288
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72223: LD_VAR 0 1
72227: PPUSH
72228: LD_VAR 0 5
72232: PPUSH
72233: LD_VAR 0 6
72237: PPUSH
72238: CALL_OW 272
72242: PPUSH
72243: LD_VAR 0 2
72247: PPUSH
72248: LD_VAR 0 5
72252: PPUSH
72253: LD_VAR 0 6
72257: PPUSH
72258: CALL_OW 273
72262: PPUSH
72263: LD_VAR 0 3
72267: PPUSH
72268: CALL_OW 309
72272: IFFALSE 72286
// begin result := true ;
72274: LD_ADDR_VAR 0 4
72278: PUSH
72279: LD_INT 1
72281: ST_TO_ADDR
// exit ;
72282: POP
72283: POP
72284: GO 72290
// end ;
72286: GO 72220
72288: POP
72289: POP
// end ;
72290: LD_VAR 0 4
72294: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72295: LD_INT 0
72297: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72298: LD_VAR 0 1
72302: PPUSH
72303: LD_VAR 0 2
72307: PPUSH
72308: LD_INT 0
72310: PPUSH
72311: LD_INT 0
72313: PPUSH
72314: LD_INT 1
72316: PPUSH
72317: LD_INT 0
72319: PPUSH
72320: CALL_OW 587
// end ;
72324: LD_VAR 0 3
72328: RET
// export function CenterOnNow ( unit ) ; begin
72329: LD_INT 0
72331: PPUSH
// result := IsInUnit ( unit ) ;
72332: LD_ADDR_VAR 0 2
72336: PUSH
72337: LD_VAR 0 1
72341: PPUSH
72342: CALL_OW 310
72346: ST_TO_ADDR
// if not result then
72347: LD_VAR 0 2
72351: NOT
72352: IFFALSE 72364
// result := unit ;
72354: LD_ADDR_VAR 0 2
72358: PUSH
72359: LD_VAR 0 1
72363: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72364: LD_VAR 0 1
72368: PPUSH
72369: CALL_OW 87
// end ; end_of_file
72373: LD_VAR 0 2
72377: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72378: LD_VAR 0 1
72382: PUSH
72383: LD_INT 200
72385: DOUBLE
72386: GREATEREQUAL
72387: IFFALSE 72395
72389: LD_INT 299
72391: DOUBLE
72392: LESSEQUAL
72393: IFTRUE 72397
72395: GO 72429
72397: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72398: LD_VAR 0 1
72402: PPUSH
72403: LD_VAR 0 2
72407: PPUSH
72408: LD_VAR 0 3
72412: PPUSH
72413: LD_VAR 0 4
72417: PPUSH
72418: LD_VAR 0 5
72422: PPUSH
72423: CALL 27171 0 5
72427: GO 72506
72429: LD_INT 300
72431: DOUBLE
72432: GREATEREQUAL
72433: IFFALSE 72441
72435: LD_INT 399
72437: DOUBLE
72438: LESSEQUAL
72439: IFTRUE 72443
72441: GO 72505
72443: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72444: LD_VAR 0 1
72448: PPUSH
72449: LD_VAR 0 2
72453: PPUSH
72454: LD_VAR 0 3
72458: PPUSH
72459: LD_VAR 0 4
72463: PPUSH
72464: LD_VAR 0 5
72468: PPUSH
72469: LD_VAR 0 6
72473: PPUSH
72474: LD_VAR 0 7
72478: PPUSH
72479: LD_VAR 0 8
72483: PPUSH
72484: LD_VAR 0 9
72488: PPUSH
72489: LD_VAR 0 10
72493: PPUSH
72494: LD_VAR 0 11
72498: PPUSH
72499: CALL 23504 0 11
72503: GO 72506
72505: POP
// end ;
72506: PPOPN 11
72508: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72509: LD_VAR 0 1
72513: PPUSH
72514: LD_VAR 0 2
72518: PPUSH
72519: LD_VAR 0 3
72523: PPUSH
72524: LD_VAR 0 4
72528: PPUSH
72529: LD_VAR 0 5
72533: PPUSH
72534: CALL 26907 0 5
// end ; end_of_file
72538: PPOPN 5
72540: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72541: LD_VAR 0 1
72545: PPUSH
72546: LD_VAR 0 2
72550: PPUSH
72551: LD_VAR 0 3
72555: PPUSH
72556: LD_VAR 0 4
72560: PPUSH
72561: LD_VAR 0 5
72565: PPUSH
72566: LD_VAR 0 6
72570: PPUSH
72571: CALL 11156 0 6
// end ;
72575: PPOPN 6
72577: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72578: LD_INT 0
72580: PPUSH
// begin if not units then
72581: LD_VAR 0 1
72585: NOT
72586: IFFALSE 72590
// exit ;
72588: GO 72590
// end ;
72590: PPOPN 7
72592: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72593: CALL 11060 0 0
// end ;
72597: PPOPN 1
72599: END
