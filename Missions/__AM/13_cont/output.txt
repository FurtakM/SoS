// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// PrepareVehicles ;
 219: CALL 1203 0 0
// PrepareHeroes ;
 223: CALL 460 0 0
// PrepareAmericansRandom ;
 227: CALL 1107 0 0
// PrepareDifficulty ;
 231: CALL 8411 0 0
// Action ;
 235: CALL 5275 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode do var i , j ;
 240: LD_EXP 40
 244: IFFALSE 415
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
// begin enable ;
 253: ENABLE
// FogOff ( true ) ;
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 22
 268: PUSH
 269: LD_INT 1
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 69
 294: PUSH
 295: FOR_IN
 296: IFFALSE 312
// SetLives ( i , 1000 ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_INT 1000
 305: PPUSH
 306: CALL_OW 234
 310: GO 295
 312: POP
 313: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 30
 334: PUSH
 335: LD_INT 0
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 413
// for j := 1 to 3 do
 369: LD_ADDR_VAR 0 2
 373: PUSH
 374: DOUBLE
 375: LD_INT 1
 377: DEC
 378: ST_TO_ADDR
 379: LD_INT 3
 381: PUSH
 382: FOR_TO
 383: IFFALSE 409
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: LD_INT 9999
 402: PPUSH
 403: CALL_OW 277
 407: GO 382
 409: POP
 410: POP
 411: GO 366
 413: POP
 414: POP
// end ;
 415: PPOPN 2
 417: END
// every 0 0$1 trigger achivCounter >= 2 do
 418: LD_EXP 41
 422: PUSH
 423: LD_INT 2
 425: GREATEREQUAL
 426: IFFALSE 438
 428: GO 430
 430: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 431: LD_STRING ACH_REMOTE
 433: PPUSH
 434: CALL_OW 543
 438: END
// every 0 0$1 trigger destroyCounter >= 30 do
 439: LD_EXP 42
 443: PUSH
 444: LD_INT 30
 446: GREATEREQUAL
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 452: LD_STRING ACH_DEFMASTER
 454: PPUSH
 455: CALL_OW 543
 459: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
 464: PPUSH
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING JMM
 481: PPUSH
 482: LD_EXP 40
 486: NOT
 487: PPUSH
 488: LD_STRING 13c_
 490: PPUSH
 491: CALL 31108 0 3
 495: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 496: LD_ADDR_EXP 2
 500: PUSH
 501: LD_STRING Stevens
 503: PPUSH
 504: LD_EXP 40
 508: NOT
 509: PPUSH
 510: LD_STRING 13c_
 512: PPUSH
 513: CALL 31108 0 3
 517: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 518: LD_ADDR_EXP 3
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 40
 530: NOT
 531: PPUSH
 532: LD_STRING 13c_
 534: PPUSH
 535: CALL 31108 0 3
 539: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 540: LD_ADDR_EXP 4
 544: PUSH
 545: LD_STRING Donaldson
 547: PPUSH
 548: LD_EXP 40
 552: NOT
 553: PPUSH
 554: LD_STRING 13c_
 556: PPUSH
 557: CALL 31108 0 3
 561: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_STRING Bobby
 569: PPUSH
 570: LD_EXP 40
 574: NOT
 575: PPUSH
 576: LD_STRING 13c_
 578: PPUSH
 579: CALL 31108 0 3
 583: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 584: LD_ADDR_EXP 6
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_EXP 40
 596: NOT
 597: PPUSH
 598: LD_STRING 13c_
 600: PPUSH
 601: CALL 31108 0 3
 605: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 606: LD_ADDR_EXP 7
 610: PUSH
 611: LD_STRING Denis
 613: PPUSH
 614: LD_EXP 40
 618: NOT
 619: PPUSH
 620: LD_STRING 13c_
 622: PPUSH
 623: CALL 31108 0 3
 627: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 628: LD_ADDR_EXP 8
 632: PUSH
 633: LD_STRING Brown
 635: PPUSH
 636: LD_EXP 40
 640: NOT
 641: PPUSH
 642: LD_STRING 13c_
 644: PPUSH
 645: CALL 31108 0 3
 649: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 650: LD_ADDR_EXP 9
 654: PUSH
 655: LD_STRING Gladstone
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: LD_STRING 13c_
 663: PPUSH
 664: CALL 31108 0 3
 668: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 669: LD_ADDR_EXP 10
 673: PUSH
 674: LD_STRING Houten
 676: PPUSH
 677: LD_INT 1
 679: PPUSH
 680: LD_STRING 13c_
 682: PPUSH
 683: CALL 31108 0 3
 687: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 688: LD_ADDR_EXP 11
 692: PUSH
 693: LD_STRING Cornel
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: LD_STRING 13c_
 701: PPUSH
 702: CALL 31108 0 3
 706: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 707: LD_ADDR_EXP 12
 711: PUSH
 712: LD_STRING Gary
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: LD_STRING 13c_
 720: PPUSH
 721: CALL 31108 0 3
 725: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING Frank
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_STRING 13c_
 739: PPUSH
 740: CALL 31108 0 3
 744: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 745: LD_ADDR_EXP 14
 749: PUSH
 750: LD_STRING Kikuchi
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_STRING 13c_
 758: PPUSH
 759: CALL 31108 0 3
 763: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 764: LD_ADDR_EXP 15
 768: PUSH
 769: LD_STRING Powell
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: LD_STRING 
 777: PPUSH
 778: CALL 31108 0 3
 782: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: LD_EXP 1
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_EXP 3
 802: PUSH
 803: LD_EXP 4
 807: PUSH
 808: LD_EXP 5
 812: PUSH
 813: LD_EXP 6
 817: PUSH
 818: LD_EXP 7
 822: PUSH
 823: LD_EXP 8
 827: PUSH
 828: LD_EXP 9
 832: PUSH
 833: LD_EXP 10
 837: PUSH
 838: LD_EXP 11
 842: PUSH
 843: LD_EXP 12
 847: PUSH
 848: LD_EXP 13
 852: PUSH
 853: LD_EXP 14
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 33
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// for i = tmp downto 1 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_VAR 0 2
 929: INC
 930: ST_TO_ADDR
 931: LD_INT 1
 933: PUSH
 934: FOR_DOWNTO
 935: IFFALSE 972
// if not tmp [ i ] then
 937: LD_VAR 0 2
 941: PUSH
 942: LD_VAR 0 4
 946: ARRAY
 947: NOT
 948: IFFALSE 970
// tmp := Delete ( tmp , i ) ;
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 3
 969: ST_TO_ADDR
 970: GO 934
 972: POP
 973: POP
// for i = 1 to tmp do
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_VAR 0 2
 988: PUSH
 989: FOR_TO
 990: IFFALSE 1020
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 992: LD_VAR 0 2
 996: PUSH
 997: LD_VAR 0 4
1001: ARRAY
1002: PPUSH
1003: LD_VAR 0 3
1007: PUSH
1008: LD_VAR 0 4
1012: ARRAY
1013: PPUSH
1014: CALL_OW 52
1018: GO 989
1020: POP
1021: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 25
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: PUSH
1055: LD_INT 22
1057: PUSH
1058: LD_INT 1
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 34
1067: PUSH
1068: LD_INT 13
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 69
1083: PUSH
1084: LD_INT 0
1086: EQUAL
1087: AND
1088: IFFALSE 1102
// SetClass ( JMM , 2 ) ;
1090: LD_EXP 1
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: CALL_OW 336
// end ;
1102: LD_VAR 0 1
1106: RET
// export function PrepareAmericansRandom ; var i ; begin
1107: LD_INT 0
1109: PPUSH
1110: PPUSH
// uc_side = 1 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 1
1118: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1119: LD_ADDR_EXP 16
1123: PUSH
1124: LD_STRING 13c_others
1126: PPUSH
1127: CALL_OW 31
1131: ST_TO_ADDR
// for i in others13 do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: LD_EXP 16
1141: PUSH
1142: FOR_IN
1143: IFFALSE 1196
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1145: LD_VAR 0 2
1149: PPUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 21
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 58
1172: PUSH
1173: EMPTY
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: CALL_OW 52
1194: GO 1142
1196: POP
1197: POP
// end ;
1198: LD_VAR 0 1
1202: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
1207: PPUSH
1208: PPUSH
1209: PPUSH
1210: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1211: LD_ADDR_VAR 0 5
1215: PUSH
1216: LD_STRING 13_VehiclesIn13_1
1218: PPUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 5
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: LD_INT 6
1233: PUSH
1234: LD_INT 100
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 5
1250: PUSH
1251: LD_INT 3
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 6
1259: PUSH
1260: LD_INT 100
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 1
1282: PUSH
1283: LD_INT 6
1285: PUSH
1286: LD_INT 100
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: LD_INT 6
1311: PUSH
1312: LD_INT 100
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 5
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 6
1337: PUSH
1338: LD_INT 100
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 5
1354: PUSH
1355: LD_INT 3
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 100
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 5
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 6
1389: PUSH
1390: LD_INT 100
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 5
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 6
1415: PUSH
1416: LD_INT 100
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1442: LD_ADDR_EXP 24
1446: PUSH
1447: LD_STRING 13_ResourcesInCargo13_1
1449: PPUSH
1450: EMPTY
1451: PPUSH
1452: CALL_OW 30
1456: ST_TO_ADDR
// cargoList = [ ] ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: EMPTY
1463: ST_TO_ADDR
// uc_side = 1 ;
1464: LD_ADDR_OWVAR 20
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// if vehicles then
1472: LD_VAR 0 5
1476: IFFALSE 1823
// begin for i := 1 to vehicles do
1478: LD_ADDR_VAR 0 2
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 5
1492: PUSH
1493: FOR_TO
1494: IFFALSE 1643
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1496: LD_ADDR_OWVAR 21
1500: PUSH
1501: LD_VAR 0 5
1505: PUSH
1506: LD_VAR 0 2
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: ARRAY
1515: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1516: LD_ADDR_OWVAR 37
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_VAR 0 2
1530: ARRAY
1531: PUSH
1532: LD_INT 2
1534: ARRAY
1535: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1536: LD_ADDR_OWVAR 39
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 3
1554: ARRAY
1555: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1556: LD_ADDR_OWVAR 38
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 4
1574: ARRAY
1575: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1576: LD_ADDR_OWVAR 40
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 5
1594: ARRAY
1595: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1596: LD_ADDR_OWVAR 41
1600: PUSH
1601: LD_INT 40
1603: ST_TO_ADDR
// veh = CreateVehicle ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1614: LD_VAR 0 4
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// end ;
1641: GO 1493
1643: POP
1644: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1645: LD_ADDR_VAR 0 6
1649: PUSH
1650: LD_INT 22
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 21
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 34
1672: PUSH
1673: LD_INT 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: ST_TO_ADDR
// if cargoList then
1690: LD_VAR 0 6
1694: IFFALSE 1823
// for i = 1 to cargoList do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_VAR 0 6
1710: PUSH
1711: FOR_TO
1712: IFFALSE 1821
// begin if resources then
1714: LD_EXP 24
1718: IFFALSE 1819
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1720: LD_VAR 0 6
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_EXP 24
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PPUSH
1749: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1753: LD_VAR 0 6
1757: PUSH
1758: LD_VAR 0 2
1762: ARRAY
1763: PPUSH
1764: LD_INT 2
1766: PPUSH
1767: LD_EXP 24
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: PUSH
1778: LD_INT 2
1780: ARRAY
1781: PPUSH
1782: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1786: LD_VAR 0 6
1790: PUSH
1791: LD_VAR 0 2
1795: ARRAY
1796: PPUSH
1797: LD_INT 3
1799: PPUSH
1800: LD_EXP 24
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: PUSH
1811: LD_INT 3
1813: ARRAY
1814: PPUSH
1815: CALL_OW 291
// end ; end ;
1819: GO 1711
1821: POP
1822: POP
// end ; end ;
1823: LD_VAR 0 1
1827: RET
// export function PowellSupport ; var i , veh , un ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
1833: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 4
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 2
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_OWVAR 67
1866: ARRAY
1867: PUSH
1868: FOR_TO
1869: IFFALSE 2133
// begin uc_nation := 1 ;
1871: LD_ADDR_OWVAR 21
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// uc_side := 1 ;
1879: LD_ADDR_OWVAR 20
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// vc_engine := engine_siberite ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// vc_control := control_manual ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: LD_INT 6
1913: PUSH
1914: LD_INT 9
1916: PUSH
1917: LD_INT 5
1919: PUSH
1920: LD_INT 5
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_OWVAR 67
1934: PUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL_OW 12
1945: PLUS
1946: ARRAY
1947: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1948: LD_OWVAR 40
1952: PUSH
1953: LD_INT 6
1955: EQUAL
1956: IFFALSE 1985
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 5
1965: PUSH
1966: LD_INT 4
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_OWVAR 67
1981: ARRAY
1982: ST_TO_ADDR
1983: GO 2020
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: CALL_OW 12
2018: ARRAY
2019: ST_TO_ADDR
// veh = CreateVehicle ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 45
2029: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 2
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// SetDir ( veh , 1 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 1
2052: PPUSH
2053: CALL_OW 233
// hc_gallery :=  ;
2057: LD_ADDR_OWVAR 33
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// hc_name :=  ;
2065: LD_ADDR_OWVAR 26
2069: PUSH
2070: LD_STRING 
2072: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 9
2081: PUSH
2082: LD_INT 8
2084: PUSH
2085: LD_INT 8
2087: PUSH
2088: LD_INT 7
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PPUSH
2103: CALL_OW 380
// un := CreateHuman ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: CALL_OW 44
2116: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2117: LD_VAR 0 4
2121: PPUSH
2122: LD_VAR 0 3
2126: PPUSH
2127: CALL_OW 52
// end ;
2131: GO 1868
2133: POP
2134: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2135: LD_ADDR_VAR 0 2
2139: PUSH
2140: DOUBLE
2141: LD_INT 1
2143: DEC
2144: ST_TO_ADDR
2145: LD_INT 2
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_OWVAR 67
2167: ARRAY
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2245
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 9
2180: PUSH
2181: LD_INT 8
2183: PUSH
2184: LD_INT 8
2186: PUSH
2187: LD_INT 7
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_OWVAR 67
2200: ARRAY
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 4
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2216: LD_VAR 0 4
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2228: LD_VAR 0 4
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// end ;
2243: GO 2169
2245: POP
2246: POP
// end ; end_of_file
2247: LD_VAR 0 1
2251: RET
// export function PrepareBurlak ; begin
2252: LD_INT 0
2254: PPUSH
// uc_side := 7 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 7
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_engine := engine_siberite ;
2271: LD_ADDR_OWVAR 39
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// vc_control := control_manual ;
2279: LD_ADDR_OWVAR 38
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2287: LD_ADDR_OWVAR 40
2291: PUSH
2292: LD_INT 44
2294: PUSH
2295: LD_INT 45
2297: PUSH
2298: LD_INT 46
2300: PUSH
2301: LD_INT 46
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_OWVAR 67
2314: ARRAY
2315: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2316: LD_ADDR_OWVAR 37
2320: PUSH
2321: LD_INT 24
2323: ST_TO_ADDR
// Masha := CreateVehicle ;
2324: LD_ADDR_EXP 18
2328: PUSH
2329: CALL_OW 45
2333: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2334: LD_EXP 18
2338: PPUSH
2339: LD_INT 2
2341: PPUSH
2342: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2346: LD_EXP 18
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2361: LD_EXP 18
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2373: LD_ADDR_EXP 17
2377: PUSH
2378: LD_STRING Burlak
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_STRING 
2386: PPUSH
2387: CALL 31108 0 3
2391: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2392: LD_EXP 17
2396: PPUSH
2397: LD_EXP 18
2401: PPUSH
2402: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2406: LD_EXP 18
2410: PPUSH
2411: LD_INT 107
2413: PPUSH
2414: LD_INT 118
2416: PPUSH
2417: CALL_OW 114
// spawnBurlak := 1 ;
2421: LD_ADDR_EXP 27
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// end ;
2429: LD_VAR 0 1
2433: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2434: LD_INT 0
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// uc_side := 7 ;
2441: LD_ADDR_OWVAR 20
2445: PUSH
2446: LD_INT 7
2448: ST_TO_ADDR
// uc_nation := 3 ;
2449: LD_ADDR_OWVAR 21
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2457: LD_ADDR_EXP 19
2461: PUSH
2462: LD_STRING Gnyevko
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 31108 0 3
2475: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2476: LD_ADDR_EXP 20
2480: PUSH
2481: LD_STRING Titov
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: LD_STRING 
2489: PPUSH
2490: CALL 31108 0 3
2494: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2495: LD_ADDR_EXP 21
2499: PUSH
2500: LD_STRING Xavier2
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_STRING 
2508: PPUSH
2509: CALL 31108 0 3
2513: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2514: LD_ADDR_EXP 22
2518: PUSH
2519: LD_STRING Belkov
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 31108 0 3
2532: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2533: LD_ADDR_EXP 23
2537: PUSH
2538: LD_STRING Lipshchin
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 31108 0 3
2551: ST_TO_ADDR
// for i = 1 to 5 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 5
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2691
// begin vc_engine := engine_siberite ;
2568: LD_ADDR_OWVAR 39
2572: PUSH
2573: LD_INT 3
2575: ST_TO_ADDR
// vc_control := control_manual ;
2576: LD_ADDR_OWVAR 38
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2584: LD_ADDR_OWVAR 40
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: LD_INT 45
2594: PUSH
2595: LD_INT 45
2597: PUSH
2598: LD_INT 44
2600: PUSH
2601: LD_INT 49
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 5
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2623: LD_ADDR_OWVAR 37
2627: PUSH
2628: LD_INT 22
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_INT 24
2636: PUSH
2637: LD_INT 24
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_OWVAR 67
2650: ARRAY
2651: ST_TO_ADDR
// veh = CreateVehicle ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: CALL_OW 45
2661: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2662: LD_VAR 0 3
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// end ;
2689: GO 2565
2691: POP
2692: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2693: LD_ADDR_VAR 0 4
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 7
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 58
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_INT 1
2746: ARRAY
2747: PPUSH
2748: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2752: LD_EXP 20
2756: PPUSH
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2770: LD_EXP 21
2774: PPUSH
2775: LD_VAR 0 4
2779: PUSH
2780: LD_INT 3
2782: ARRAY
2783: PPUSH
2784: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2788: LD_EXP 22
2792: PPUSH
2793: LD_VAR 0 4
2797: PUSH
2798: LD_INT 4
2800: ARRAY
2801: PPUSH
2802: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2806: LD_EXP 23
2810: PPUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 5
2818: ARRAY
2819: PPUSH
2820: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2824: LD_EXP 19
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2836: LD_EXP 20
2840: PUSH
2841: LD_EXP 23
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: LD_INT 9
2852: PPUSH
2853: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_INT 22
2864: PUSH
2865: LD_INT 7
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PPUSH
2872: CALL_OW 69
2876: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2877: LD_VAR 0 4
2881: PPUSH
2882: LD_INT 107
2884: PPUSH
2885: LD_INT 118
2887: PPUSH
2888: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2892: LD_INT 35
2894: PPUSH
2895: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2899: LD_VAR 0 4
2903: PPUSH
2904: LD_INT 34
2906: PUSH
2907: LD_INT 49
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 72
2918: PPUSH
2919: LD_EXP 18
2923: PPUSH
2924: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 34
2938: PUSH
2939: LD_INT 49
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PPUSH
2950: CALL_OW 72
2954: PPUSH
2955: LD_INT 107
2957: PPUSH
2958: LD_INT 118
2960: PPUSH
2961: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2965: LD_ADDR_VAR 0 5
2969: PUSH
2970: LD_EXP 20
2974: PUSH
2975: LD_EXP 23
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: LD_INT 50
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 54
2995: PUSH
2996: EMPTY
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 72
3011: ST_TO_ADDR
// if bazooka then
3012: LD_VAR 0 5
3016: IFFALSE 3058
// begin for i in bazooka do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 5
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3056
// if See ( 1 , i ) then
3031: LD_INT 1
3033: PPUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 292
3043: IFFALSE 3054
// ComSpaceTimeShoot ( i ) ;
3045: LD_VAR 0 2
3049: PPUSH
3050: CALL 32055 0 1
3054: GO 3028
3056: POP
3057: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_INT 34
3065: PUSH
3066: LD_INT 49
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 72
3077: PUSH
3078: LD_INT 0
3080: EQUAL
3081: PUSH
3082: LD_EXP 18
3086: PPUSH
3087: CALL_OW 303
3091: OR
3092: IFFALSE 2892
// repeat wait ( 0 0$1 ) ;
3094: LD_INT 35
3096: PPUSH
3097: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PUSH
3121: LD_EXP 17
3125: DIFF
3126: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 107
3134: PPUSH
3135: LD_INT 118
3137: PPUSH
3138: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_EXP 20
3151: PUSH
3152: LD_EXP 23
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: LD_INT 50
3163: PUSH
3164: EMPTY
3165: LIST
3166: PUSH
3167: LD_INT 3
3169: PUSH
3170: LD_INT 54
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: ST_TO_ADDR
// if bazooka then
3189: LD_VAR 0 5
3193: IFFALSE 3235
// begin for i in bazooka do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_VAR 0 5
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3233
// if See ( 1 , i ) then
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 292
3220: IFFALSE 3231
// ComSpaceTimeShoot ( i ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL 32055 0 1
3231: GO 3205
3233: POP
3234: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3235: LD_EXP 17
3239: PPUSH
3240: CALL_OW 302
3244: PUSH
3245: LD_EXP 17
3249: PPUSH
3250: CALL_OW 310
3254: NOT
3255: AND
3256: IFFALSE 3273
// ComMoveXY ( Burlak , 107 , 118 ) ;
3258: LD_EXP 17
3262: PPUSH
3263: LD_INT 107
3265: PPUSH
3266: LD_INT 118
3268: PPUSH
3269: CALL_OW 111
// until not tmp ;
3273: LD_VAR 0 4
3277: NOT
3278: IFFALSE 3094
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// result := [ ] ;
3293: LD_ADDR_VAR 0 1
3297: PUSH
3298: EMPTY
3299: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 2
3310: PPUSH
3311: CALL_OW 12
3315: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_INT 8
3323: PUSH
3324: LD_INT 9
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_VAR 0 6
3335: ARRAY
3336: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 6
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: LD_INT 10
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_OWVAR 67
3369: ARRAY
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3610
// begin uc_side := 3 ;
3374: LD_ADDR_OWVAR 20
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// uc_nation := 3 ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_INT 3
3389: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3390: LD_INT 24
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 1
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 1
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: CALL_OW 12
3416: ARRAY
3417: PPUSH
3418: LD_INT 46
3420: PUSH
3421: LD_INT 46
3423: PUSH
3424: LD_INT 45
3426: PUSH
3427: LD_INT 47
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 5
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: PPUSH
3452: LD_INT 100
3454: PPUSH
3455: CALL 36125 0 5
// veh := CreateVehicle ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: CALL_OW 45
3468: ST_TO_ADDR
// result := Join ( result , veh ) ;
3469: LD_ADDR_VAR 0 1
3473: PUSH
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_VAR 0 4
3483: PPUSH
3484: CALL 68509 0 2
3488: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 5
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_VAR 0 6
3508: ARRAY
3509: PPUSH
3510: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 49
// if vc_control = control_manual then
3531: LD_OWVAR 38
3535: PUSH
3536: LD_INT 1
3538: EQUAL
3539: IFFALSE 3586
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 10
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_OWVAR 67
3566: ARRAY
3567: PPUSH
3568: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3572: CALL_OW 44
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3586: LD_INT 18
3588: PPUSH
3589: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_INT 100
3600: PPUSH
3601: LD_INT 55
3603: PPUSH
3604: CALL_OW 114
// end ;
3608: GO 3371
3610: POP
3611: POP
// for i in result do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: PUSH
3622: FOR_IN
3623: IFFALSE 3639
// SetTag ( i , 10 ) ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_INT 10
3632: PPUSH
3633: CALL_OW 109
3637: GO 3622
3639: POP
3640: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3641: LD_EXP 44
3645: PPUSH
3646: CALL_OW 427
// end ; end_of_file
3650: LD_VAR 0 1
3654: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3655: LD_INT 0
3657: PPUSH
3658: PPUSH
3659: PPUSH
// rnd := 0 ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// uc_side := 8 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 8
3675: ST_TO_ADDR
// uc_nation := 2 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 2
3683: ST_TO_ADDR
// hc_name :=  ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_gallery :=  ;
3692: LD_ADDR_OWVAR 33
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3700: LD_ADDR_OWVAR 29
3704: PUSH
3705: LD_INT 10
3707: PUSH
3708: LD_INT 11
3710: PUSH
3711: LD_INT 12
3713: PUSH
3714: LD_INT 12
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_OWVAR 67
3727: ARRAY
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: LD_INT 11
3734: PUSH
3735: LD_INT 12
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3757: LD_INT 0
3759: PPUSH
3760: LD_INT 4
3762: PPUSH
3763: LD_INT 7
3765: PUSH
3766: LD_INT 8
3768: PUSH
3769: LD_INT 9
3771: PUSH
3772: LD_INT 10
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PPUSH
3787: CALL_OW 380
// un := CreateHuman ;
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: CALL_OW 44
3800: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3801: LD_VAR 0 2
3805: PPUSH
3806: LD_INT 8
3808: PUSH
3809: LD_INT 9
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// SetTag ( un , 1 ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_EXP 31
3859: PPUSH
3860: CALL_OW 12
3864: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3865: LD_EXP 45
3869: PPUSH
3870: LD_VAR 0 2
3874: PPUSH
3875: LD_EXP 31
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: LD_EXP 31
3894: PUSH
3895: LD_VAR 0 3
3899: ARRAY
3900: PUSH
3901: LD_INT 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 595
// end ;
3918: LD_VAR 0 1
3922: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3923: LD_INT 22
3925: PUSH
3926: LD_INT 8
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 61
3938: PUSH
3939: EMPTY
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 50
3948: PUSH
3949: EMPTY
3950: LIST
3951: PUSH
3952: LD_INT 33
3954: PUSH
3955: LD_INT 2
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PPUSH
3968: CALL_OW 69
3972: IFFALSE 4059
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
// begin enable ;
3980: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3981: LD_ADDR_VAR 0 1
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 8
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 61
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 50
4011: PUSH
4012: EMPTY
4013: LIST
4014: PUSH
4015: LD_INT 33
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PUSH
4036: FOR_IN
4037: IFFALSE 4057
// begin wait ( 0 0$0.3 ) ;
4039: LD_INT 10
4041: PPUSH
4042: CALL_OW 67
// Connect ( i ) ;
4046: LD_VAR 0 1
4050: PPUSH
4051: CALL 39218 0 1
// end ;
4055: GO 4036
4057: POP
4058: POP
// end ;
4059: PPOPN 1
4061: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
// result := [ ] ;
4073: LD_ADDR_VAR 0 1
4077: PUSH
4078: EMPTY
4079: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4080: LD_ADDR_EXP 33
4084: PUSH
4085: LD_EXP 33
4089: PUSH
4090: LD_INT 1
4092: PLUS
4093: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4094: LD_INT 22
4096: PUSH
4097: LD_INT 8
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 58
4109: PUSH
4110: EMPTY
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 34
4119: PUSH
4120: LD_INT 31
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: PPUSH
4132: CALL_OW 69
4136: PUSH
4137: LD_INT 2
4139: LESS
4140: IFFALSE 4384
// begin uc_side := 8 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 8
4149: ST_TO_ADDR
// uc_nation := 2 ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4158: LD_INT 14
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 31
4169: PPUSH
4170: LD_INT 100
4172: PPUSH
4173: CALL 36125 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4177: LD_ADDR_VAR 0 2
4181: PUSH
4182: DOUBLE
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 1
4228: PLUS
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 2
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4382
// begin veh := CreateVehicle ;
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4259: LD_ADDR_VAR 0 4
4263: PUSH
4264: LD_INT 181
4266: PUSH
4267: LD_INT 105
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 137
4276: PUSH
4277: LD_INT 6
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_INT 2
4295: MOD
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: ARRAY
4301: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 2
4323: ARRAY
4324: PPUSH
4325: LD_INT 12
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4335: LD_INT 0
4337: PPUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 9
4343: PUSH
4344: LD_INT 10
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_OWVAR 67
4360: ARRAY
4361: PPUSH
4362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4366: CALL_OW 44
4370: PPUSH
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 52
// end ;
4380: GO 4234
4382: POP
4383: POP
// end ; dir := rand ( 1 , 2 ) ;
4384: LD_ADDR_VAR 0 9
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 12
4399: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4400: LD_ADDR_VAR 0 6
4404: PUSH
4405: LD_INT 8
4407: PUSH
4408: LD_INT 9
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 9
4419: ARRAY
4420: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4421: LD_ADDR_VAR 0 7
4425: PUSH
4426: LD_INT 6
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: LD_INT 10
4434: PUSH
4435: LD_INT 11
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_OWVAR 67
4448: ARRAY
4449: PUSH
4450: LD_EXP 33
4454: PLUS
4455: ST_TO_ADDR
// if counter > 20 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 20
4463: GREATER
4464: IFFALSE 4474
// counter := 20 ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_INT 20
4473: ST_TO_ADDR
// for i := 1 to counter do
4474: LD_ADDR_VAR 0 2
4478: PUSH
4479: DOUBLE
4480: LD_INT 1
4482: DEC
4483: ST_TO_ADDR
4484: LD_VAR 0 7
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4825
// begin uc_side := 8 ;
4492: LD_ADDR_OWVAR 20
4496: PUSH
4497: LD_INT 8
4499: ST_TO_ADDR
// uc_nation := 2 ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_INT 2
4507: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4508: LD_INT 13
4510: PUSH
4511: LD_INT 14
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: CALL_OW 12
4528: ARRAY
4529: PPUSH
4530: LD_INT 3
4532: PPUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 3
4552: PPUSH
4553: CALL_OW 12
4557: ARRAY
4558: PPUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 28
4564: PUSH
4565: LD_INT 27
4567: PUSH
4568: LD_EXP 51
4572: PUSH
4573: LD_INT 29
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 1
4589: PPUSH
4590: LD_INT 6
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: PPUSH
4599: LD_INT 100
4601: PPUSH
4602: CALL 36125 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4606: LD_OWVAR 40
4610: PUSH
4611: LD_INT 29
4613: EQUAL
4614: IFFALSE 4624
// vc_control := control_remote ;
4616: LD_ADDR_OWVAR 38
4620: PUSH
4621: LD_INT 2
4623: ST_TO_ADDR
// veh := CreateVehicle ;
4624: LD_ADDR_VAR 0 3
4628: PUSH
4629: CALL_OW 45
4633: ST_TO_ADDR
// result := Join ( result , veh ) ;
4634: LD_ADDR_VAR 0 1
4638: PUSH
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_VAR 0 3
4648: PPUSH
4649: CALL 68509 0 2
4653: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4654: LD_VAR 0 3
4658: PPUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 9
4673: ARRAY
4674: PPUSH
4675: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4679: LD_VAR 0 3
4683: PPUSH
4684: LD_VAR 0 6
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL_OW 49
// if vc_control = control_manual then
4696: LD_OWVAR 38
4700: PUSH
4701: LD_INT 1
4703: EQUAL
4704: IFFALSE 4751
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4706: LD_INT 0
4708: PPUSH
4709: LD_INT 7
4711: PUSH
4712: LD_INT 8
4714: PUSH
4715: LD_INT 9
4717: PUSH
4718: LD_INT 10
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_OWVAR 67
4731: ARRAY
4732: PPUSH
4733: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4737: CALL_OW 44
4741: PPUSH
4742: LD_VAR 0 3
4746: PPUSH
4747: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4751: LD_INT 10
4753: PPUSH
4754: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4758: LD_VAR 0 3
4762: PPUSH
4763: CALL_OW 263
4767: PUSH
4768: LD_INT 2
4770: EQUAL
4771: PUSH
4772: LD_VAR 0 3
4776: PPUSH
4777: CALL_OW 312
4781: NOT
4782: AND
4783: IFFALSE 4801
// begin Connect ( veh ) ;
4785: LD_VAR 0 3
4789: PPUSH
4790: CALL 39218 0 1
// wait ( 0 0$0.3 ) ;
4794: LD_INT 10
4796: PPUSH
4797: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4801: LD_VAR 0 3
4805: PPUSH
4806: LD_INT 100
4808: PPUSH
4809: LD_INT 55
4811: PPUSH
4812: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4816: LD_INT 18
4818: PPUSH
4819: CALL_OW 67
// end ;
4823: GO 4489
4825: POP
4826: POP
// if arabianAttacksCounter = 1 then
4827: LD_EXP 33
4831: PUSH
4832: LD_INT 1
4834: EQUAL
4835: IFFALSE 4841
// DestroySibDeposit ;
4837: CALL 3655 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4841: LD_EXP 33
4845: PUSH
4846: LD_INT 4
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: MOD
4870: PUSH
4871: LD_INT 0
4873: EQUAL
4874: IFFALSE 5232
// begin tmp := rand ( 0 , 2 ) ;
4876: LD_ADDR_VAR 0 8
4880: PUSH
4881: LD_INT 0
4883: PPUSH
4884: LD_INT 2
4886: PPUSH
4887: CALL_OW 12
4891: ST_TO_ADDR
// if not tmp then
4892: LD_VAR 0 8
4896: NOT
4897: IFFALSE 5058
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 3
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: LD_INT 4
4917: PUSH
4918: LD_INT 5
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 5054
// begin uc_side := 8 ;
4936: LD_ADDR_OWVAR 20
4940: PUSH
4941: LD_INT 8
4943: ST_TO_ADDR
// uc_nation := 2 ;
4944: LD_ADDR_OWVAR 21
4948: PUSH
4949: LD_INT 2
4951: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4952: LD_INT 0
4954: PPUSH
4955: LD_INT 1
4957: PPUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: LD_INT 9
4966: PUSH
4967: LD_INT 10
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: LD_OWVAR 67
4980: ARRAY
4981: PPUSH
4982: CALL_OW 380
// un := CreateHuman ;
4986: LD_ADDR_VAR 0 5
4990: PUSH
4991: CALL_OW 44
4995: ST_TO_ADDR
// result := Join ( result , un ) ;
4996: LD_ADDR_VAR 0 1
5000: PUSH
5001: LD_VAR 0 1
5005: PPUSH
5006: LD_VAR 0 5
5010: PPUSH
5011: CALL 68509 0 2
5015: ST_TO_ADDR
// if Prob ( 60 ) then
5016: LD_INT 60
5018: PPUSH
5019: CALL_OW 13
5023: IFFALSE 5037
// SetClass ( un , class_mortar ) ;
5025: LD_VAR 0 5
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5037: LD_VAR 0 5
5041: PPUSH
5042: LD_INT 16
5044: PPUSH
5045: LD_INT 0
5047: PPUSH
5048: CALL_OW 49
// end ;
5052: GO 4933
5054: POP
5055: POP
// end else
5056: GO 5222
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: DOUBLE
5064: LD_INT 1
5066: DEC
5067: ST_TO_ADDR
5068: LD_INT 2
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: LD_INT 3
5076: PUSH
5077: LD_INT 4
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: PUSH
5092: FOR_TO
5093: IFFALSE 5220
// begin uc_side := 8 ;
5095: LD_ADDR_OWVAR 20
5099: PUSH
5100: LD_INT 8
5102: ST_TO_ADDR
// uc_nation := 0 ;
5103: LD_ADDR_OWVAR 21
5107: PUSH
5108: LD_INT 0
5110: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5111: LD_ADDR_OWVAR 28
5115: PUSH
5116: LD_INT 17
5118: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5119: LD_ADDR_OWVAR 31
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 0
5129: PUSH
5130: LD_INT 0
5132: PUSH
5133: LD_INT 0
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5142: LD_ADDR_OWVAR 29
5146: PUSH
5147: LD_INT 10
5149: PUSH
5150: LD_INT 10
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_gallery :=  ;
5157: LD_ADDR_OWVAR 33
5161: PUSH
5162: LD_STRING 
5164: ST_TO_ADDR
// hc_name :=  ;
5165: LD_ADDR_OWVAR 26
5169: PUSH
5170: LD_STRING 
5172: ST_TO_ADDR
// un := CreateHuman ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// result := Join ( result , un ) ;
5183: LD_ADDR_VAR 0 1
5187: PUSH
5188: LD_VAR 0 1
5192: PPUSH
5193: LD_VAR 0 5
5197: PPUSH
5198: CALL 68509 0 2
5202: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5203: LD_VAR 0 5
5207: PPUSH
5208: LD_INT 16
5210: PPUSH
5211: LD_INT 0
5213: PPUSH
5214: CALL_OW 49
// end ;
5218: GO 5092
5220: POP
5221: POP
// end ; if sibDeposits then
5222: LD_EXP 31
5226: IFFALSE 5232
// DestroySibDeposit ;
5228: CALL 3655 0 0
// end ; for i in result do
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: FOR_IN
5243: IFFALSE 5259
// SetTag ( i , 10 ) ;
5245: LD_VAR 0 2
5249: PPUSH
5250: LD_INT 10
5252: PPUSH
5253: CALL_OW 109
5257: GO 5242
5259: POP
5260: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5261: LD_EXP 43
5265: PPUSH
5266: CALL_OW 427
// end ; end_of_file
5270: LD_VAR 0 1
5274: RET
// export function Action ; var tmp ; begin
5275: LD_INT 0
5277: PPUSH
5278: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 21
5296: PUSH
5297: LD_INT 2
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PPUSH
5308: CALL_OW 69
5312: ST_TO_ADDR
// InGameOn ;
5313: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5317: LD_VAR 0 2
5321: PPUSH
5322: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5326: LD_INT 22
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 2
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PPUSH
5350: CALL_OW 69
5354: PPUSH
5355: LD_INT 69
5357: PPUSH
5358: LD_INT 94
5360: PPUSH
5361: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D2-JMM-1
5372: PPUSH
5373: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5377: LD_VAR 0 2
5381: PPUSH
5382: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5386: LD_EXP 2
5390: PPUSH
5391: LD_STRING D2-Huck-1
5393: PPUSH
5394: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5407: LD_EXP 1
5411: PPUSH
5412: LD_STRING D2-JMM-2
5414: PPUSH
5415: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5419: LD_VAR 0 2
5423: PPUSH
5424: CALL_OW 87
// InGameOff ;
5428: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5432: LD_STRING M1
5434: PPUSH
5435: CALL_OW 337
// SaveForQuickRestart ;
5439: CALL_OW 22
// wait ( 10 10$00 ) ;
5443: LD_INT 21000
5445: PPUSH
5446: CALL_OW 67
// DialogueOn ;
5450: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5454: LD_EXP 15
5458: PPUSH
5459: LD_STRING D3-Pow-1
5461: PPUSH
5462: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5466: LD_EXP 1
5470: PPUSH
5471: LD_STRING D3-JMM-1
5473: PPUSH
5474: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5478: LD_EXP 15
5482: PPUSH
5483: LD_STRING D3-Pow-2
5485: PPUSH
5486: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5490: LD_EXP 1
5494: PPUSH
5495: LD_STRING D3-JMM-2
5497: PPUSH
5498: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5502: LD_EXP 15
5506: PPUSH
5507: LD_STRING D3-Pow-3
5509: PPUSH
5510: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5514: LD_EXP 1
5518: PPUSH
5519: LD_STRING D3-JMM-3
5521: PPUSH
5522: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5526: LD_EXP 15
5530: PPUSH
5531: LD_STRING D3-Pow-4
5533: PPUSH
5534: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5538: LD_EXP 1
5542: PPUSH
5543: LD_STRING D3-JMM-4
5545: PPUSH
5546: CALL_OW 88
// DialogueOff ;
5550: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5554: LD_STRING M2
5556: PPUSH
5557: CALL_OW 337
// wait ( 2 2$30 ) ;
5561: LD_INT 5250
5563: PPUSH
5564: CALL_OW 67
// PrepareBurlak ;
5568: CALL 2252 0 0
// BurlakArmy ;
5572: CALL 2434 0 0
// end ;
5576: LD_VAR 0 1
5580: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5581: LD_INT 1
5583: PPUSH
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 292
5593: IFFALSE 5752
5595: GO 5597
5597: DISABLE
// begin DialogueOn ;
5598: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5602: LD_EXP 18
5606: PPUSH
5607: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 26
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 25
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 25
5656: PUSH
5657: LD_INT 3
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 25
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 25
5676: PUSH
5677: LD_INT 5
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 69
5701: PPUSH
5702: LD_STRING D5-Sol1-1
5704: PPUSH
5705: LD_STRING D5-FSol1-1
5707: PPUSH
5708: CALL 8210 0 3
// Say ( JMM , D5-JMM-1 ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_STRING D5-JMM-1
5719: PPUSH
5720: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5724: LD_EXP 17
5728: PPUSH
5729: LD_STRING DAmer-Bur-1
5731: PPUSH
5732: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5736: LD_EXP 1
5740: PPUSH
5741: LD_STRING DAmer-JMM-1
5743: PPUSH
5744: CALL_OW 88
// DialogueOff ;
5748: CALL_OW 7
// end ;
5752: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5753: LD_INT 4
5755: PPUSH
5756: LD_INT 22
5758: PUSH
5759: LD_INT 7
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 70
5770: IFFALSE 6169
5772: GO 5774
5774: DISABLE
5775: LD_INT 0
5777: PPUSH
// begin enable ;
5778: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_INT 4
5786: PPUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 7
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: CALL_OW 70
5801: PUSH
5802: FOR_IN
5803: IFFALSE 6167
// begin if i = Burlak or i = Masha then
5805: LD_VAR 0 1
5809: PUSH
5810: LD_EXP 17
5814: EQUAL
5815: PUSH
5816: LD_VAR 0 1
5820: PUSH
5821: LD_EXP 18
5825: EQUAL
5826: OR
5827: IFFALSE 5974
// begin RemoveUnit ( i ) ;
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 64
// DialogueOn ;
5838: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING D5a-JMM-1
5849: PPUSH
5850: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5854: LD_INT 22
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 26
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 2
5876: PUSH
5877: LD_INT 25
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: LD_INT 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 25
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: LD_INT 4
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 5
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PPUSH
5945: LD_STRING D5a-Sol1-1
5947: PPUSH
5948: LD_STRING D5-FSol1-1
5950: PPUSH
5951: CALL 8210 0 3
// DialogueOff ;
5955: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5959: LD_STRING M2b
5961: PPUSH
5962: CALL_OW 337
// spawnBurlak = 0 ;
5966: LD_ADDR_EXP 27
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5974: LD_VAR 0 1
5978: PPUSH
5979: CALL_OW 247
5983: PUSH
5984: LD_INT 2
5986: EQUAL
5987: PUSH
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL_OW 263
5997: PUSH
5998: LD_INT 1
6000: EQUAL
6001: AND
6002: IFFALSE 6130
// begin case IsDrivenBy ( i ) of Gnyevko :
6004: LD_VAR 0 1
6008: PPUSH
6009: CALL_OW 311
6013: PUSH
6014: LD_EXP 19
6018: DOUBLE
6019: EQUAL
6020: IFTRUE 6024
6022: GO 6037
6024: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6025: LD_INT 1
6027: PPUSH
6028: LD_STRING 13_Gnyevko_1
6030: PPUSH
6031: CALL_OW 39
6035: GO 6130
6037: LD_EXP 20
6041: DOUBLE
6042: EQUAL
6043: IFTRUE 6047
6045: GO 6060
6047: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6048: LD_INT 1
6050: PPUSH
6051: LD_STRING 13_Titov_1
6053: PPUSH
6054: CALL_OW 39
6058: GO 6130
6060: LD_EXP 21
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6083
6070: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6071: LD_INT 1
6073: PPUSH
6074: LD_STRING 13_Xavier_1
6076: PPUSH
6077: CALL_OW 39
6081: GO 6130
6083: LD_EXP 22
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6106
6093: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6094: LD_INT 1
6096: PPUSH
6097: LD_STRING 13_Belkov_1
6099: PPUSH
6100: CALL_OW 39
6104: GO 6130
6106: LD_EXP 23
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6129
6116: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6117: LD_INT 1
6119: PPUSH
6120: LD_STRING 13_Lipshchin_1
6122: PPUSH
6123: CALL_OW 39
6127: GO 6130
6129: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 264
6139: PUSH
6140: LD_INT 49
6142: EQUAL
6143: IFFALSE 6156
// DestroyUnit ( i ) else
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 65
6154: GO 6165
// RemoveUnit ( i ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 64
// end ;
6165: GO 5802
6167: POP
6168: POP
// end ;
6169: PPOPN 1
6171: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6172: LD_EXP 17
6176: PPUSH
6177: CALL_OW 302
6181: PUSH
6182: LD_EXP 18
6186: PPUSH
6187: CALL_OW 256
6191: PUSH
6192: LD_INT 500
6194: LESS
6195: AND
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 255
6206: PUSH
6207: LD_INT 7
6209: EQUAL
6210: AND
6211: IFFALSE 6231
6213: GO 6215
6215: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6216: LD_EXP 17
6220: PPUSH
6221: LD_INT 107
6223: PPUSH
6224: LD_INT 118
6226: PPUSH
6227: CALL_OW 111
6231: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6232: LD_EXP 17
6236: PPUSH
6237: CALL_OW 301
6241: PUSH
6242: LD_EXP 27
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: AND
6251: IFFALSE 6384
6253: GO 6255
6255: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6256: LD_EXP 1
6260: PPUSH
6261: LD_STRING D5b-JMM-1
6263: PPUSH
6264: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6268: LD_INT 22
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 26
6280: PUSH
6281: LD_INT 1
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 1
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 25
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 25
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: PPUSH
6359: LD_STRING D5b-Sol1-1
6361: PPUSH
6362: LD_STRING 
6364: PPUSH
6365: CALL 8210 0 3
// ChangeMissionObjectives ( M2a ) ;
6369: LD_STRING M2a
6371: PPUSH
6372: CALL_OW 337
// burlakStatus := 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// end ;
6384: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6385: LD_EXP 2
6389: PPUSH
6390: CALL_OW 301
6394: IFFALSE 6531
6396: GO 6398
6398: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6399: LD_EXP 1
6403: PPUSH
6404: LD_STRING D6-JMM-1
6406: PPUSH
6407: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 26
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 25
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 25
6466: PUSH
6467: LD_INT 4
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 69
6501: PPUSH
6502: LD_STRING D6-Sol1-1
6504: PPUSH
6505: LD_STRING 
6507: PPUSH
6508: CALL 8210 0 3
// Say ( JMM , D6-JMM-2 ) ;
6512: LD_EXP 1
6516: PPUSH
6517: LD_STRING D6-JMM-2
6519: PPUSH
6520: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6524: LD_STRING M1a
6526: PPUSH
6527: CALL_OW 337
// end ;
6531: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6532: LD_INT 25
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 321
6542: PUSH
6543: LD_INT 2
6545: EQUAL
6546: IFFALSE 6563
6548: GO 6550
6550: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6551: LD_EXP 2
6555: PPUSH
6556: LD_STRING D6-Huck-2
6558: PPUSH
6559: CALL_OW 88
6563: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6564: LD_INT 22
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 34
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 35
6589: PUSH
6590: LD_INT 8
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 69
6610: PUSH
6611: LD_INT 5
6613: PPUSH
6614: LD_INT 22
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 30
6636: PUSH
6637: LD_INT 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 57
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 70
6667: AND
6668: PUSH
6669: LD_INT 5
6671: PPUSH
6672: LD_INT 22
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 21
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 30
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 57
6707: PUSH
6708: EMPTY
6709: LIST
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 70
6725: AND
6726: IFFALSE 6768
6728: GO 6730
6730: DISABLE
// begin DialogueOn ;
6731: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6735: LD_EXP 1
6739: PPUSH
6740: LD_STRING D7-JMM-1
6742: PPUSH
6743: CALL_OW 88
// DialogueOff ;
6747: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6751: LD_STRING M4
6753: PPUSH
6754: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6758: LD_INT 5
6760: PPUSH
6761: LD_INT 0
6763: PPUSH
6764: CALL_OW 424
// end ;
6768: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6769: LD_INT 6
6771: PPUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 25
6784: PUSH
6785: LD_INT 4
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PPUSH
6796: CALL_OW 70
6800: PUSH
6801: LD_EXP 37
6805: PUSH
6806: LD_INT 1
6808: EQUAL
6809: AND
6810: PUSH
6811: LD_EXP 29
6815: PUSH
6816: LD_INT 0
6818: EQUAL
6819: AND
6820: IFFALSE 6885
6822: GO 6824
6824: DISABLE
// begin enable ;
6825: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6826: LD_ADDR_EXP 26
6830: PUSH
6831: LD_INT 6
6833: PPUSH
6834: LD_INT 22
6836: PUSH
6837: LD_INT 1
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 25
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 70
6862: PUSH
6863: LD_INT 1
6865: ARRAY
6866: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6867: LD_INT 6
6869: PPUSH
6870: LD_INT 0
6872: PPUSH
6873: CALL_OW 424
// radationResearched := 1 ;
6877: LD_ADDR_EXP 29
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// end ;
6885: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6886: LD_EXP 26
6890: PPUSH
6891: CALL_OW 301
6895: PUSH
6896: LD_EXP 29
6900: PUSH
6901: LD_INT 1
6903: EQUAL
6904: AND
6905: IFFALSE 6941
6907: GO 6909
6909: DISABLE
// begin enable ;
6910: ENABLE
// radationResearched = 0 ;
6911: LD_ADDR_EXP 29
6915: PUSH
6916: LD_INT 0
6918: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6919: LD_INT 6
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6929: LD_EXP 1
6933: PPUSH
6934: LD_STRING D9a-JMM-1
6936: PPUSH
6937: CALL_OW 88
// end ; end_of_file
6941: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6942: LD_VAR 0 5
6946: PUSH
6947: LD_INT 8
6949: EQUAL
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: LD_INT 0
6958: EQUAL
6959: AND
6960: IFFALSE 7013
// begin eventVar1 := 1 ;
6962: LD_ADDR_EXP 35
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// DialogueOn ;
6970: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6974: LD_EXP 1
6978: PPUSH
6979: LD_STRING D6a-JMM-1
6981: PPUSH
6982: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6986: LD_EXP 15
6990: PPUSH
6991: LD_STRING D6a-Pow-1
6993: PPUSH
6994: CALL_OW 94
// DialogueOff ;
6998: CALL_OW 7
// wait ( 3 3$0 ) ;
7002: LD_INT 6300
7004: PPUSH
7005: CALL_OW 67
// PowellSupport ;
7009: CALL 1828 0 0
// end ; end ;
7013: PPOPN 5
7015: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL 26797 0 1
// if un = JMM then
7025: LD_VAR 0 1
7029: PUSH
7030: LD_EXP 1
7034: EQUAL
7035: IFFALSE 7044
// YouLost ( JMM ) ;
7037: LD_STRING JMM
7039: PPUSH
7040: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 264
7053: PUSH
7054: LD_INT 31
7056: EQUAL
7057: IFFALSE 7073
// achivCounter := achivCounter + 1 ;
7059: LD_ADDR_EXP 41
7063: PUSH
7064: LD_EXP 41
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 1
7085: NONEQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7117
// destroyCounter := destroyCounter + 1 ;
7103: LD_ADDR_EXP 42
7107: PUSH
7108: LD_EXP 42
7112: PUSH
7113: LD_INT 1
7115: PLUS
7116: ST_TO_ADDR
// end ;
7117: PPOPN 1
7119: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7120: LD_VAR 0 2
7124: PUSH
7125: LD_EXP 18
7129: EQUAL
7130: IFFALSE 7139
// SetAchievement ( ACH_MASHA ) ;
7132: LD_STRING ACH_MASHA
7134: PPUSH
7135: CALL_OW 543
// end ;
7139: PPOPN 4
7141: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7142: LD_VAR 0 1
7146: PPUSH
7147: LD_VAR 0 2
7151: PPUSH
7152: CALL 26919 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 264
7165: PUSH
7166: LD_INT 8
7168: EQUAL
7169: PUSH
7170: LD_EXP 36
7174: PUSH
7175: LD_INT 0
7177: EQUAL
7178: AND
7179: IFFALSE 7248
// begin eventVar2 := 1 ;
7181: LD_ADDR_EXP 36
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
// DialogueOn ;
7189: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7193: LD_EXP 1
7197: PPUSH
7198: LD_STRING D6b-JMM-1
7200: PPUSH
7201: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7205: LD_EXP 15
7209: PPUSH
7210: LD_STRING D6b-Pow-1
7212: PPUSH
7213: CALL_OW 94
// DialogueOff ;
7217: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7221: LD_INT 5
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7231: LD_INT 7
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7241: LD_STRING M3
7243: PPUSH
7244: CALL_OW 337
// end ; end ;
7248: PPOPN 2
7250: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7251: LD_VAR 0 2
7255: PPUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 5
7263: PPUSH
7264: CALL_OW 309
7268: PUSH
7269: LD_EXP 37
7273: PUSH
7274: LD_INT 0
7276: EQUAL
7277: AND
7278: IFFALSE 7503
// begin eventVar3 := 1 ;
7280: LD_ADDR_EXP 37
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7288: LD_INT 175
7290: PPUSH
7291: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7295: LD_INT 7
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 1
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 21
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 34
7320: PUSH
7321: LD_INT 11
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 70
7337: IFFALSE 7356
// begin radarOnSpot := 1 ;
7339: LD_ADDR_EXP 30
7343: PUSH
7344: LD_INT 1
7346: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7347: LD_STRING M3a
7349: PPUSH
7350: CALL_OW 337
// end else
7354: GO 7363
// ChangeMissionObjectives ( M3b ) ;
7356: LD_STRING M3b
7358: PPUSH
7359: CALL_OW 337
// DialogueOn ;
7363: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7367: LD_EXP 2
7371: PPUSH
7372: LD_STRING D8-Huck-1
7374: PPUSH
7375: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7379: LD_EXP 1
7383: PPUSH
7384: LD_STRING D8-JMM-1
7386: PPUSH
7387: CALL_OW 88
// if IsOk ( Stevens ) then
7391: LD_EXP 2
7395: PPUSH
7396: CALL_OW 302
7400: IFFALSE 7462
// begin Say ( Stevens , D8-Huck-2 ) ;
7402: LD_EXP 2
7406: PPUSH
7407: LD_STRING D8-Huck-2
7409: PPUSH
7410: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7414: LD_EXP 1
7418: PPUSH
7419: LD_STRING D8-JMM-2
7421: PPUSH
7422: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7426: LD_EXP 2
7430: PPUSH
7431: LD_STRING D8-Huck-3
7433: PPUSH
7434: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7438: LD_EXP 1
7442: PPUSH
7443: LD_STRING D8-JMM-3
7445: PPUSH
7446: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7450: LD_EXP 2
7454: PPUSH
7455: LD_STRING D8-Huck-4
7457: PPUSH
7458: CALL_OW 88
// end ; DialogueOff ;
7462: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7466: LD_INT 5
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7476: LD_INT 7
7478: PPUSH
7479: LD_INT 0
7481: PPUSH
7482: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7486: LD_INT 6
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7496: LD_STRING M5
7498: PPUSH
7499: CALL_OW 337
// end ; end ;
7503: PPOPN 3
7505: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7506: LD_EXP 26
7510: PPUSH
7511: CALL_OW 302
7515: PUSH
7516: LD_VAR 0 2
7520: PUSH
7521: LD_EXP 26
7525: EQUAL
7526: AND
7527: PUSH
7528: LD_EXP 38
7532: PUSH
7533: LD_INT 0
7535: EQUAL
7536: AND
7537: PUSH
7538: LD_EXP 37
7542: PUSH
7543: LD_INT 1
7545: EQUAL
7546: AND
7547: PUSH
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 268
7560: PUSH
7561: LD_INT 11
7563: EQUAL
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: LD_INT 2
7572: PPUSH
7573: CALL_OW 268
7577: PUSH
7578: LD_INT 11
7580: EQUAL
7581: OR
7582: AND
7583: IFFALSE 7593
// eventVar4 := 1 ;
7585: LD_ADDR_EXP 38
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// end ;
7593: PPOPN 2
7595: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 248
7609: PUSH
7610: LD_INT 2
7612: EQUAL
7613: IFFALSE 7859
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7615: LD_ADDR_EXP 32
7619: PUSH
7620: LD_EXP 32
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7629: LD_ADDR_VAR 0 4
7633: PUSH
7634: DOUBLE
7635: LD_EXP 31
7639: INC
7640: ST_TO_ADDR
7641: LD_INT 1
7643: PUSH
7644: FOR_DOWNTO
7645: IFFALSE 7715
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7647: LD_EXP 31
7651: PUSH
7652: LD_VAR 0 4
7656: ARRAY
7657: PUSH
7658: LD_INT 1
7660: ARRAY
7661: PUSH
7662: LD_VAR 0 2
7666: EQUAL
7667: PUSH
7668: LD_EXP 31
7672: PUSH
7673: LD_VAR 0 4
7677: ARRAY
7678: PUSH
7679: LD_INT 2
7681: ARRAY
7682: PUSH
7683: LD_VAR 0 3
7687: EQUAL
7688: AND
7689: IFFALSE 7713
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7691: LD_ADDR_EXP 31
7695: PUSH
7696: LD_EXP 31
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 3
7710: ST_TO_ADDR
// break ;
7711: GO 7715
// end ;
7713: GO 7644
7715: POP
7716: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7717: LD_EXP 39
7721: PUSH
7722: LD_INT 0
7724: EQUAL
7725: PUSH
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_VAR 0 3
7735: PPUSH
7736: CALL_OW 428
7740: PUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: IN
7756: AND
7757: IFFALSE 7859
// begin eventVar5 := 1 ;
7759: LD_ADDR_EXP 39
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// DialogueOn ;
7767: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7771: LD_EXP 2
7775: PPUSH
7776: LD_STRING D4-Sci1-1
7778: PPUSH
7779: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7783: LD_EXP 1
7787: PPUSH
7788: LD_STRING D4-JMM-1
7790: PPUSH
7791: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7795: LD_EXP 2
7799: PPUSH
7800: LD_STRING D4-Sci1-2
7802: PPUSH
7803: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D4-JMM-2
7814: PPUSH
7815: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7819: LD_EXP 2
7823: PPUSH
7824: LD_STRING D4-Sci1-3
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D4-JMM-3
7838: PPUSH
7839: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7843: LD_EXP 1
7847: PPUSH
7848: LD_STRING D4-JMM-3a
7850: PPUSH
7851: CALL_OW 88
// DialogueOff ;
7855: CALL_OW 7
// end ; end ; end ;
7859: PPOPN 5
7861: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7862: LD_VAR 0 1
7866: PPUSH
7867: CALL_OW 255
7871: PUSH
7872: LD_INT 1
7874: EQUAL
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 266
7885: PUSH
7886: LD_INT 0
7888: EQUAL
7889: AND
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 21
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: LD_INT 30
7916: PUSH
7917: LD_INT 0
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 30
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 69
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: AND
7953: IFFALSE 7967
// SetBName ( building , omega ) ;
7955: LD_VAR 0 1
7959: PPUSH
7960: LD_STRING omega
7962: PPUSH
7963: CALL_OW 500
// end ;
7967: PPOPN 2
7969: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL 26903 0 1
// end ;
7979: PPOPN 1
7981: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7982: LD_VAR 0 1
7986: PUSH
7987: LD_EXP 43
7991: EQUAL
7992: IFFALSE 7998
// ArabianAttack ;
7994: CALL 10063 0 0
// if event = eventRussianAttack then
7998: LD_VAR 0 1
8002: PUSH
8003: LD_EXP 44
8007: EQUAL
8008: IFFALSE 8014
// RussianAttack ;
8010: CALL 10428 0 0
// end ;
8014: PPOPN 1
8016: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8017: LD_VAR 0 1
8021: PUSH
8022: LD_EXP 45
8026: EQUAL
8027: IFFALSE 8121
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8029: LD_VAR 0 2
8033: PPUSH
8034: CALL_OW 302
8038: PUSH
8039: LD_VAR 0 3
8043: PPUSH
8044: LD_VAR 0 4
8048: PPUSH
8049: CALL_OW 488
8053: AND
8054: IFFALSE 8121
// begin repeat wait ( 0 0$1 ) ;
8056: LD_INT 35
8058: PPUSH
8059: CALL_OW 67
// if not HasTask ( p1 ) then
8063: LD_VAR 0 2
8067: PPUSH
8068: CALL_OW 314
8072: NOT
8073: IFFALSE 8109
// begin ComContaminate ( p1 , p2 , p3 ) ;
8075: LD_VAR 0 2
8079: PPUSH
8080: LD_VAR 0 3
8084: PPUSH
8085: LD_VAR 0 4
8089: PPUSH
8090: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8094: LD_VAR 0 2
8098: PPUSH
8099: LD_INT 42
8101: PPUSH
8102: LD_INT 3
8104: PPUSH
8105: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: CALL_OW 302
8118: NOT
8119: IFFALSE 8056
// end ; end ; end ;
8121: PPOPN 7
8123: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 255
8133: PUSH
8134: LD_INT 3
8136: PUSH
8137: LD_INT 8
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: IFFALSE 8207
// begin ComMoveXY ( driver , 41 , 2 ) ;
8146: LD_VAR 0 1
8150: PPUSH
8151: LD_INT 41
8153: PPUSH
8154: LD_INT 2
8156: PPUSH
8157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8161: LD_INT 35
8163: PPUSH
8164: CALL_OW 67
// if IsDead ( driver ) then
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 301
8177: IFFALSE 8181
// exit ;
8179: GO 8207
// until IsAt ( driver , 41 , 2 ) ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_INT 41
8188: PPUSH
8189: LD_INT 2
8191: PPUSH
8192: CALL_OW 307
8196: IFFALSE 8161
// RemoveUnit ( driver ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 64
// end ; end ; end_of_file
8207: PPOPN 4
8209: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8210: LD_INT 0
8212: PPUSH
8213: PPUSH
8214: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 1
8224: PUSH
8225: LD_EXP 1
8229: PUSH
8230: LD_EXP 2
8234: PUSH
8235: LD_EXP 3
8239: PUSH
8240: LD_EXP 4
8244: PUSH
8245: LD_EXP 5
8249: PUSH
8250: LD_EXP 6
8254: PUSH
8255: LD_EXP 7
8259: PUSH
8260: LD_EXP 8
8264: PUSH
8265: LD_EXP 9
8269: PUSH
8270: LD_EXP 10
8274: PUSH
8275: LD_EXP 11
8279: PUSH
8280: LD_EXP 12
8284: PUSH
8285: LD_EXP 13
8289: PUSH
8290: LD_EXP 14
8294: PUSH
8295: LD_EXP 15
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: DIFF
8317: ST_TO_ADDR
// if not characters then
8318: LD_VAR 0 1
8322: NOT
8323: IFFALSE 8327
// exit ;
8325: GO 8406
// speaker := characters [ rand ( 1 , characters ) ] ;
8327: LD_ADDR_VAR 0 6
8331: PUSH
8332: LD_VAR 0 1
8336: PUSH
8337: LD_INT 1
8339: PPUSH
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 12
8349: ARRAY
8350: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8351: LD_VAR 0 6
8355: PPUSH
8356: CALL_OW 258
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: IFFALSE 8382
// Say ( speaker , dialogMID ) else
8366: LD_VAR 0 6
8370: PPUSH
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 88
8380: GO 8396
// Say ( speaker , dialogFID ) ;
8382: LD_VAR 0 6
8386: PPUSH
8387: LD_VAR 0 3
8391: PPUSH
8392: CALL_OW 88
// result := speaker ;
8396: LD_ADDR_VAR 0 4
8400: PUSH
8401: LD_VAR 0 6
8405: ST_TO_ADDR
// end ;
8406: LD_VAR 0 4
8410: RET
// export function PrepareDifficulty ; begin
8411: LD_INT 0
8413: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8414: LD_INT 5
8416: PPUSH
8417: LD_INT 8
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 322
// if Difficulty = 1 then
8427: LD_OWVAR 67
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8554
// begin SetTech ( 66 , 8 , state_researched ) ;
8437: LD_INT 66
8439: PPUSH
8440: LD_INT 8
8442: PPUSH
8443: LD_INT 2
8445: PPUSH
8446: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8450: LD_INT 67
8452: PPUSH
8453: LD_INT 8
8455: PPUSH
8456: LD_INT 0
8458: PPUSH
8459: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8463: LD_INT 68
8465: PPUSH
8466: LD_INT 8
8468: PPUSH
8469: LD_INT 0
8471: PPUSH
8472: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8476: LD_INT 51
8478: PPUSH
8479: LD_INT 8
8481: PPUSH
8482: LD_INT 2
8484: PPUSH
8485: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8489: LD_INT 52
8491: PPUSH
8492: LD_INT 8
8494: PPUSH
8495: LD_INT 0
8497: PPUSH
8498: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8502: LD_INT 53
8504: PPUSH
8505: LD_INT 8
8507: PPUSH
8508: LD_INT 0
8510: PPUSH
8511: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8515: LD_INT 60
8517: PPUSH
8518: LD_INT 8
8520: PPUSH
8521: LD_INT 2
8523: PPUSH
8524: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8528: LD_INT 61
8530: PPUSH
8531: LD_INT 8
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8541: LD_INT 62
8543: PPUSH
8544: LD_INT 8
8546: PPUSH
8547: LD_INT 0
8549: PPUSH
8550: CALL_OW 322
// end ; if Difficulty = 2 then
8554: LD_OWVAR 67
8558: PUSH
8559: LD_INT 2
8561: EQUAL
8562: IFFALSE 8681
// begin SetTech ( 66 , 8 , state_researched ) ;
8564: LD_INT 66
8566: PPUSH
8567: LD_INT 8
8569: PPUSH
8570: LD_INT 2
8572: PPUSH
8573: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8577: LD_INT 67
8579: PPUSH
8580: LD_INT 8
8582: PPUSH
8583: LD_INT 2
8585: PPUSH
8586: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8590: LD_INT 68
8592: PPUSH
8593: LD_INT 8
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8603: LD_INT 51
8605: PPUSH
8606: LD_INT 8
8608: PPUSH
8609: LD_INT 2
8611: PPUSH
8612: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8616: LD_INT 52
8618: PPUSH
8619: LD_INT 8
8621: PPUSH
8622: LD_INT 2
8624: PPUSH
8625: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8629: LD_INT 53
8631: PPUSH
8632: LD_INT 8
8634: PPUSH
8635: LD_INT 2
8637: PPUSH
8638: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8642: LD_INT 60
8644: PPUSH
8645: LD_INT 8
8647: PPUSH
8648: LD_INT 2
8650: PPUSH
8651: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8655: LD_INT 61
8657: PPUSH
8658: LD_INT 8
8660: PPUSH
8661: LD_INT 2
8663: PPUSH
8664: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8668: LD_INT 62
8670: PPUSH
8671: LD_INT 8
8673: PPUSH
8674: LD_INT 0
8676: PPUSH
8677: CALL_OW 322
// end ; if Difficulty >= 3 then
8681: LD_OWVAR 67
8685: PUSH
8686: LD_INT 3
8688: GREATEREQUAL
8689: IFFALSE 8808
// begin SetTech ( 66 , 8 , state_researched ) ;
8691: LD_INT 66
8693: PPUSH
8694: LD_INT 8
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8704: LD_INT 67
8706: PPUSH
8707: LD_INT 8
8709: PPUSH
8710: LD_INT 2
8712: PPUSH
8713: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8717: LD_INT 68
8719: PPUSH
8720: LD_INT 8
8722: PPUSH
8723: LD_INT 0
8725: PPUSH
8726: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8730: LD_INT 51
8732: PPUSH
8733: LD_INT 8
8735: PPUSH
8736: LD_INT 2
8738: PPUSH
8739: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8743: LD_INT 52
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8756: LD_INT 53
8758: PPUSH
8759: LD_INT 8
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8769: LD_INT 60
8771: PPUSH
8772: LD_INT 8
8774: PPUSH
8775: LD_INT 2
8777: PPUSH
8778: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8782: LD_INT 61
8784: PPUSH
8785: LD_INT 8
8787: PPUSH
8788: LD_INT 2
8790: PPUSH
8791: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8795: LD_INT 62
8797: PPUSH
8798: LD_INT 8
8800: PPUSH
8801: LD_INT 0
8803: PPUSH
8804: CALL_OW 322
// end ; end ;
8808: LD_VAR 0 1
8812: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
// for i in charactersList do
8817: LD_ADDR_VAR 0 4
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: FOR_IN
8828: IFFALSE 8846
// SaveCharacters ( i , ident ) ;
8830: LD_VAR 0 4
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: CALL_OW 38
8844: GO 8827
8846: POP
8847: POP
// end ; end_of_file
8848: LD_VAR 0 3
8852: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8853: LD_EXP 38
8857: PUSH
8858: LD_INT 1
8860: EQUAL
8861: IFFALSE 9767
8863: GO 8865
8865: DISABLE
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
// begin m1 := false ;
8871: LD_ADDR_VAR 0 1
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// m2 := false ;
8879: LD_ADDR_VAR 0 2
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// m3 := false ;
8887: LD_ADDR_VAR 0 3
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// DialogueOn ;
8895: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8899: LD_EXP 1
8903: PPUSH
8904: LD_STRING D9b-JMM-1
8906: PPUSH
8907: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8911: LD_EXP 15
8915: PPUSH
8916: LD_STRING D9b-Pow-1
8918: PPUSH
8919: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8923: LD_EXP 1
8927: PPUSH
8928: LD_STRING D9b-JMM-2
8930: PPUSH
8931: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8935: LD_EXP 15
8939: PPUSH
8940: LD_STRING D9b-Pow-2
8942: PPUSH
8943: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8947: LD_EXP 1
8951: PPUSH
8952: LD_STRING D9b-JMM-3
8954: PPUSH
8955: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8959: LD_EXP 15
8963: PPUSH
8964: LD_STRING D9b-Pow-3
8966: PPUSH
8967: CALL_OW 94
// if tick <= 60 60$00 then
8971: LD_OWVAR 1
8975: PUSH
8976: LD_INT 126000
8978: LESSEQUAL
8979: IFFALSE 8988
// SetAchievement ( ACH_ASPEED_13 ) ;
8981: LD_STRING ACH_ASPEED_13
8983: PPUSH
8984: CALL_OW 543
// if burlakStatus = 1 then
8988: LD_EXP 28
8992: PUSH
8993: LD_INT 1
8995: EQUAL
8996: IFFALSE 9018
// begin m1 := true ;
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9006: LD_STRING Burlak
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 101
// end else
9016: GO 9029
// begin AddMedal ( Burlak , - 1 ) ;
9018: LD_STRING Burlak
9020: PPUSH
9021: LD_INT 1
9023: NEG
9024: PPUSH
9025: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9029: LD_EXP 2
9033: PPUSH
9034: CALL_OW 302
9038: IFFALSE 9060
// begin m2 := true ;
9040: LD_ADDR_VAR 0 2
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9048: LD_STRING Stevens
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 101
// end else
9058: GO 9071
// begin AddMedal ( Stevens , - 1 ) ;
9060: LD_STRING Stevens
9062: PPUSH
9063: LD_INT 1
9065: NEG
9066: PPUSH
9067: CALL_OW 101
// end ; if radarOnSpot = 1 then
9071: LD_EXP 30
9075: PUSH
9076: LD_INT 1
9078: EQUAL
9079: IFFALSE 9101
// begin m3 := true ;
9081: LD_ADDR_VAR 0 3
9085: PUSH
9086: LD_INT 1
9088: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9089: LD_STRING Observation
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: CALL_OW 101
// end else
9099: GO 9112
// begin AddMedal ( Observation , - 1 ) ;
9101: LD_STRING Observation
9103: PPUSH
9104: LD_INT 1
9106: NEG
9107: PPUSH
9108: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9112: LD_VAR 0 1
9116: PUSH
9117: LD_VAR 0 2
9121: AND
9122: PUSH
9123: LD_VAR 0 3
9127: AND
9128: PUSH
9129: LD_OWVAR 67
9133: PUSH
9134: LD_INT 3
9136: GREATEREQUAL
9137: AND
9138: IFFALSE 9150
// SetAchievementEX ( ACH_AMER , 13 ) ;
9140: LD_STRING ACH_AMER
9142: PPUSH
9143: LD_INT 13
9145: PPUSH
9146: CALL_OW 564
// GiveMedals ( MAIN ) ;
9150: LD_STRING MAIN
9152: PPUSH
9153: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9157: LD_EXP 28
9161: PPUSH
9162: LD_STRING 13_BurlakStatus_1
9164: PPUSH
9165: CALL_OW 39
// if IsLive ( Stevens ) then
9169: LD_EXP 2
9173: PPUSH
9174: CALL_OW 300
9178: IFFALSE 9192
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9180: LD_INT 1
9182: PPUSH
9183: LD_STRING 13_StevensStatus_1
9185: PPUSH
9186: CALL_OW 39
9190: GO 9202
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9192: LD_INT 0
9194: PPUSH
9195: LD_STRING 13_StevensStatus_1
9197: PPUSH
9198: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9202: LD_INT 22
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 21
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 25
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 5
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 8
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PPUSH
9304: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9308: LD_EXP 1
9312: PPUSH
9313: LD_EXP 34
9317: PUSH
9318: LD_STRING JMM
9320: STR
9321: PPUSH
9322: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9326: LD_EXP 8
9330: PPUSH
9331: LD_EXP 34
9335: PUSH
9336: LD_STRING Brown
9338: STR
9339: PPUSH
9340: CALL 8813 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9344: LD_EXP 4
9348: PPUSH
9349: LD_EXP 34
9353: PUSH
9354: LD_STRING Donaldson
9356: STR
9357: PPUSH
9358: CALL 8813 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9362: LD_EXP 5
9366: PPUSH
9367: LD_EXP 34
9371: PUSH
9372: LD_STRING Bobby
9374: STR
9375: PPUSH
9376: CALL 8813 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9380: LD_EXP 6
9384: PPUSH
9385: LD_EXP 34
9389: PUSH
9390: LD_STRING Cyrus
9392: STR
9393: PPUSH
9394: CALL 8813 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9398: LD_EXP 3
9402: PPUSH
9403: LD_EXP 34
9407: PUSH
9408: LD_STRING Lisa
9410: STR
9411: PPUSH
9412: CALL 8813 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9416: LD_EXP 13
9420: PPUSH
9421: LD_EXP 34
9425: PUSH
9426: LD_STRING Frank
9428: STR
9429: PPUSH
9430: CALL 8813 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9434: LD_EXP 14
9438: PPUSH
9439: LD_EXP 34
9443: PUSH
9444: LD_STRING Kikuchi
9446: STR
9447: PPUSH
9448: CALL 8813 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9452: LD_EXP 10
9456: PPUSH
9457: LD_EXP 34
9461: PUSH
9462: LD_STRING Houten
9464: STR
9465: PPUSH
9466: CALL 8813 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9470: LD_EXP 12
9474: PPUSH
9475: LD_EXP 34
9479: PUSH
9480: LD_STRING Gary
9482: STR
9483: PPUSH
9484: CALL 8813 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9488: LD_EXP 11
9492: PPUSH
9493: LD_EXP 34
9497: PUSH
9498: LD_STRING Cornell
9500: STR
9501: PPUSH
9502: CALL 8813 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9506: LD_EXP 7
9510: PPUSH
9511: LD_EXP 34
9515: PUSH
9516: LD_STRING Denis
9518: STR
9519: PPUSH
9520: CALL 8813 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9524: LD_EXP 9
9528: PPUSH
9529: LD_EXP 34
9533: PUSH
9534: LD_STRING Gladstone
9536: STR
9537: PPUSH
9538: CALL 8813 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9542: LD_EXP 2
9546: PPUSH
9547: LD_EXP 34
9551: PUSH
9552: LD_STRING Stevens
9554: STR
9555: PPUSH
9556: CALL 8813 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9560: LD_INT 50
9562: PUSH
9563: EMPTY
9564: LIST
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 25
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 4
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PUSH
9669: LD_EXP 1
9673: PUSH
9674: LD_EXP 8
9678: PUSH
9679: LD_EXP 4
9683: PUSH
9684: LD_EXP 5
9688: PUSH
9689: LD_EXP 6
9693: PUSH
9694: LD_EXP 3
9698: PUSH
9699: LD_EXP 13
9703: PUSH
9704: LD_EXP 9
9708: PUSH
9709: LD_EXP 14
9713: PUSH
9714: LD_EXP 7
9718: PUSH
9719: LD_EXP 10
9723: PUSH
9724: LD_EXP 12
9728: PUSH
9729: LD_EXP 11
9733: PUSH
9734: LD_EXP 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: DIFF
9755: PPUSH
9756: LD_STRING 13_other_survivors
9758: PPUSH
9759: CALL_OW 38
// YouWin ;
9763: CALL_OW 103
// end ; end_of_file
9767: PPOPN 3
9769: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9770: LD_EXP 32
9774: PUSH
9775: LD_INT 2
9777: EQUAL
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: NOT
9794: AND
9795: PUSH
9796: LD_INT 25
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 321
9806: PUSH
9807: LD_INT 1
9809: EQUAL
9810: AND
9811: IFFALSE 9947
9813: GO 9815
9815: DISABLE
9816: LD_INT 0
9818: PPUSH
9819: PPUSH
9820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_INT 22
9828: PUSH
9829: LD_INT 1
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 3
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 2
9848: PUSH
9849: LD_INT 30
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 30
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: ST_TO_ADDR
// for i in tmp do
9884: LD_ADDR_VAR 0 1
9888: PUSH
9889: LD_VAR 0 2
9893: PUSH
9894: FOR_IN
9895: IFFALSE 9928
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9897: LD_ADDR_VAR 0 3
9901: PUSH
9902: LD_VAR 0 3
9906: PUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 274
9916: PPUSH
9917: LD_INT 3
9919: PPUSH
9920: CALL_OW 275
9924: PLUS
9925: ST_TO_ADDR
9926: GO 9894
9928: POP
9929: POP
// if yourSiberite < 60 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 60
9937: LESS
9938: IFFALSE 9947
// YouLost ( siberite ) ;
9940: LD_STRING siberite
9942: PPUSH
9943: CALL_OW 104
// end ; end_of_file
9947: PPOPN 3
9949: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9950: LD_INT 22
9952: PUSH
9953: LD_INT 8
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 69
9978: PUSH
9979: LD_INT 6
9981: LESS
9982: IFFALSE 9992
9984: GO 9986
9986: DISABLE
// begin enable ;
9987: ENABLE
// PrepareArabianAttack ;
9988: CALL 4062 0 0
// end ;
9992: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9993: LD_EXP 35
9997: PUSH
9998: LD_INT 1
10000: EQUAL
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 8
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 1
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 69
10030: PUSH
10031: LD_INT 6
10033: LESS
10034: AND
10035: IFFALSE 10062
10037: GO 10039
10039: DISABLE
// begin wait ( 4 4$00 ) ;
10040: LD_INT 8400
10042: PPUSH
10043: CALL_OW 67
// PrepareRussianAttack ;
10047: CALL 3285 0 0
// wait ( 12 12$00 ) ;
10051: LD_INT 25200
10053: PPUSH
10054: CALL_OW 67
// PrepareRussianAttack ;
10058: CALL 3285 0 0
// end ;
10062: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10063: LD_INT 0
10065: PPUSH
10066: PPUSH
10067: PPUSH
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10074: LD_ADDR_VAR 0 8
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 8
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 120
10091: PUSH
10092: LD_INT 10
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 69
10107: ST_TO_ADDR
// if not units then
10108: LD_VAR 0 8
10112: NOT
10113: IFFALSE 10117
// exit ;
10115: GO 10423
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10117: LD_ADDR_VAR 0 4
10121: PUSH
10122: LD_INT 80
10124: PUSH
10125: LD_INT 60
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 54
10134: PUSH
10135: LD_INT 57
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 55
10144: PUSH
10145: LD_INT 74
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 61
10154: PUSH
10155: LD_INT 85
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10168: LD_ADDR_VAR 0 5
10172: PUSH
10173: LD_INT 93
10175: PUSH
10176: LD_INT 99
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 85
10185: PUSH
10186: LD_INT 99
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10197: LD_INT 35
10199: PPUSH
10200: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10204: LD_ADDR_VAR 0 6
10208: PUSH
10209: LD_VAR 0 8
10213: PPUSH
10214: LD_INT 21
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 72
10228: ST_TO_ADDR
// if vehicles then
10229: LD_VAR 0 6
10233: IFFALSE 10249
// AgressiveMove ( vehicles , path ) ;
10235: LD_VAR 0 6
10239: PPUSH
10240: LD_VAR 0 4
10244: PPUSH
10245: CALL 71115 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10249: LD_ADDR_VAR 0 7
10253: PUSH
10254: LD_VAR 0 8
10258: PPUSH
10259: LD_INT 23
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 72
10287: ST_TO_ADDR
// if infantry then
10288: LD_VAR 0 7
10292: IFFALSE 10308
// AgressiveMove ( infantry , path2 ) ;
10294: LD_VAR 0 7
10298: PPUSH
10299: LD_VAR 0 5
10303: PPUSH
10304: CALL 71115 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10308: LD_ADDR_VAR 0 9
10312: PUSH
10313: LD_VAR 0 8
10317: PPUSH
10318: LD_INT 23
10320: PUSH
10321: LD_INT 0
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 1
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 72
10346: ST_TO_ADDR
// if apes then
10347: LD_VAR 0 9
10351: IFFALSE 10395
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10353: LD_VAR 0 9
10357: PUSH
10358: LD_INT 1
10360: ARRAY
10361: PPUSH
10362: LD_INT 22
10364: PUSH
10365: LD_INT 1
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: PPUSH
10377: LD_VAR 0 9
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: CALL_OW 74
10390: PPUSH
10391: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10395: LD_ADDR_VAR 0 8
10399: PUSH
10400: LD_VAR 0 8
10404: PPUSH
10405: LD_INT 50
10407: PUSH
10408: EMPTY
10409: LIST
10410: PPUSH
10411: CALL_OW 72
10415: ST_TO_ADDR
// until not units ;
10416: LD_VAR 0 8
10420: NOT
10421: IFFALSE 10197
// end ;
10423: LD_VAR 0 1
10427: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
10433: PPUSH
10434: PPUSH
10435: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10436: LD_ADDR_VAR 0 6
10440: PUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 120
10453: PUSH
10454: LD_INT 10
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: ST_TO_ADDR
// if not units then
10470: LD_VAR 0 6
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10610
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10479: LD_ADDR_VAR 0 4
10483: PUSH
10484: LD_INT 80
10486: PUSH
10487: LD_INT 60
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 54
10496: PUSH
10497: LD_INT 57
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 55
10506: PUSH
10507: LD_INT 74
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 61
10516: PUSH
10517: LD_INT 85
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10530: LD_INT 35
10532: PPUSH
10533: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10537: LD_ADDR_VAR 0 5
10541: PUSH
10542: LD_VAR 0 6
10546: PPUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 72
10561: ST_TO_ADDR
// if vehicles then
10562: LD_VAR 0 5
10566: IFFALSE 10582
// AgressiveMove ( vehicles , path ) ;
10568: LD_VAR 0 5
10572: PPUSH
10573: LD_VAR 0 4
10577: PPUSH
10578: CALL 71115 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10582: LD_ADDR_VAR 0 6
10586: PUSH
10587: LD_VAR 0 6
10591: PPUSH
10592: LD_INT 50
10594: PUSH
10595: EMPTY
10596: LIST
10597: PPUSH
10598: CALL_OW 72
10602: ST_TO_ADDR
// until not units ;
10603: LD_VAR 0 6
10607: NOT
10608: IFFALSE 10530
// end ; end_of_file
10610: LD_VAR 0 1
10614: RET
// every 0 0$01 do var i , cratesSpawned ;
10615: GO 10617
10617: DISABLE
10618: LD_INT 0
10620: PPUSH
10621: PPUSH
// begin cratesSpawned := 0 ;
10622: LD_ADDR_VAR 0 2
10626: PUSH
10627: LD_INT 0
10629: ST_TO_ADDR
// for i := 1 to 6 do
10630: LD_ADDR_VAR 0 1
10634: PUSH
10635: DOUBLE
10636: LD_INT 1
10638: DEC
10639: ST_TO_ADDR
10640: LD_INT 6
10642: PUSH
10643: FOR_TO
10644: IFFALSE 10669
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10646: LD_INT 2
10648: PPUSH
10649: LD_INT 5
10651: PPUSH
10652: CALL_OW 12
10656: PPUSH
10657: LD_INT 17
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: CALL_OW 55
10667: GO 10643
10669: POP
10670: POP
// wait ( 0 0$20 ) ;
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10678: LD_INT 280
10680: PPUSH
10681: CALL_OW 67
// if cratesSpawned < 12 then
10685: LD_VAR 0 2
10689: PUSH
10690: LD_INT 12
10692: LESS
10693: IFFALSE 10745
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10695: LD_INT 105
10697: PPUSH
10698: LD_INT 350
10700: PPUSH
10701: CALL_OW 12
10705: PPUSH
10706: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10710: LD_INT 3
10712: PPUSH
10713: LD_INT 5
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: LD_INT 13
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: PLUS
10744: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 12
10752: GREATEREQUAL
10753: PUSH
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 32
10761: LESS
10762: AND
10763: IFFALSE 10815
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10765: LD_INT 420
10767: PPUSH
10768: LD_INT 700
10770: PPUSH
10771: CALL_OW 12
10775: PPUSH
10776: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10780: LD_INT 3
10782: PPUSH
10783: LD_INT 5
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: LD_INT 13
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_VAR 0 2
10810: PUSH
10811: LD_INT 1
10813: PLUS
10814: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10815: LD_VAR 0 2
10819: PUSH
10820: LD_INT 32
10822: GREATEREQUAL
10823: IFFALSE 10897
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10825: LD_INT 13
10827: PPUSH
10828: CALL_OW 435
10832: PUSH
10833: LD_INT 14
10835: LESS
10836: IFFALSE 10847
// wait ( 0 0$20 ) else
10838: LD_INT 700
10840: PPUSH
10841: CALL_OW 67
10845: GO 10862
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10847: LD_INT 1750
10849: PPUSH
10850: LD_INT 3150
10852: PPUSH
10853: CALL_OW 12
10857: PPUSH
10858: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10862: LD_INT 2
10864: PPUSH
10865: LD_INT 5
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: LD_INT 13
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_VAR 0 2
10892: PUSH
10893: LD_INT 1
10895: PLUS
10896: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10897: LD_VAR 0 2
10901: PUSH
10902: LD_INT 120
10904: GREATEREQUAL
10905: IFFALSE 10979
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10907: LD_INT 13
10909: PPUSH
10910: CALL_OW 435
10914: PUSH
10915: LD_INT 14
10917: LESS
10918: IFFALSE 10929
// wait ( 0 0$40 ) else
10920: LD_INT 1400
10922: PPUSH
10923: CALL_OW 67
10927: GO 10944
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10929: LD_INT 2450
10931: PPUSH
10932: LD_INT 3850
10934: PPUSH
10935: CALL_OW 12
10939: PPUSH
10940: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10944: LD_INT 1
10946: PPUSH
10947: LD_INT 5
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: LD_INT 13
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10965: LD_ADDR_VAR 0 2
10969: PUSH
10970: LD_VAR 0 2
10974: PUSH
10975: LD_INT 1
10977: PLUS
10978: ST_TO_ADDR
// end ; until false ;
10979: LD_INT 0
10981: IFFALSE 10678
// end ; end_of_file
10983: PPOPN 2
10985: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
10986: LD_INT 0
10988: PPUSH
// ar_miner := 81 ;
10989: LD_ADDR_EXP 53
10993: PUSH
10994: LD_INT 81
10996: ST_TO_ADDR
// ar_crane := 88 ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 88
11004: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11005: LD_ADDR_EXP 47
11009: PUSH
11010: LD_INT 89
11012: ST_TO_ADDR
// us_hack := 99 ;
11013: LD_ADDR_EXP 48
11017: PUSH
11018: LD_INT 99
11020: ST_TO_ADDR
// us_artillery := 97 ;
11021: LD_ADDR_EXP 49
11025: PUSH
11026: LD_INT 97
11028: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11029: LD_ADDR_EXP 50
11033: PUSH
11034: LD_INT 91
11036: ST_TO_ADDR
// ar_mortar := 92 ;
11037: LD_ADDR_EXP 51
11041: PUSH
11042: LD_INT 92
11044: ST_TO_ADDR
// ru_flamethrower := 93 ;
11045: LD_ADDR_EXP 54
11049: PUSH
11050: LD_INT 93
11052: ST_TO_ADDR
// ru_radar := 98 ;
11053: LD_ADDR_EXP 46
11057: PUSH
11058: LD_INT 98
11060: ST_TO_ADDR
// tech_Artillery := 80 ;
11061: LD_ADDR_EXP 55
11065: PUSH
11066: LD_INT 80
11068: ST_TO_ADDR
// tech_RadMat := 81 ;
11069: LD_ADDR_EXP 56
11073: PUSH
11074: LD_INT 81
11076: ST_TO_ADDR
// tech_BasicTools := 82 ;
11077: LD_ADDR_EXP 57
11081: PUSH
11082: LD_INT 82
11084: ST_TO_ADDR
// tech_Cargo := 83 ;
11085: LD_ADDR_EXP 58
11089: PUSH
11090: LD_INT 83
11092: ST_TO_ADDR
// tech_Track := 84 ;
11093: LD_ADDR_EXP 59
11097: PUSH
11098: LD_INT 84
11100: ST_TO_ADDR
// tech_Crane := 85 ;
11101: LD_ADDR_EXP 60
11105: PUSH
11106: LD_INT 85
11108: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11109: LD_ADDR_EXP 61
11113: PUSH
11114: LD_INT 86
11116: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11117: LD_ADDR_EXP 62
11121: PUSH
11122: LD_INT 87
11124: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11125: LD_ADDR_EXP 63
11129: PUSH
11130: LD_INT 88
11132: ST_TO_ADDR
// end ;
11133: LD_VAR 0 1
11137: RET
// every 1 do
11138: GO 11140
11140: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11141: CALL 10986 0 0
11145: END
// every 0 0$1 do
11146: GO 11148
11148: DISABLE
// begin enable ;
11149: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11150: LD_STRING updateTimer(
11152: PUSH
11153: LD_OWVAR 1
11157: STR
11158: PUSH
11159: LD_STRING );
11161: STR
11162: PPUSH
11163: CALL_OW 559
// end ;
11167: END
// export function SOS_MapStart ( ) ; begin
11168: LD_INT 0
11170: PPUSH
// if streamModeActive then
11171: LD_EXP 64
11175: IFFALSE 11184
// DefineStreamItems ( true ) ;
11177: LD_INT 1
11179: PPUSH
11180: CALL 12838 0 1
// UpdateFactoryWaypoints ( ) ;
11184: CALL 25699 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11188: CALL 25956 0 0
// end ;
11192: LD_VAR 0 1
11196: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11197: LD_INT 0
11199: PPUSH
// if p2 = 100 then
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 100
11207: EQUAL
11208: IFFALSE 12211
// begin if not StreamModeActive then
11210: LD_EXP 64
11214: NOT
11215: IFFALSE 11225
// StreamModeActive := true ;
11217: LD_ADDR_EXP 64
11221: PUSH
11222: LD_INT 1
11224: ST_TO_ADDR
// if p3 = 0 then
11225: LD_VAR 0 3
11229: PUSH
11230: LD_INT 0
11232: EQUAL
11233: IFFALSE 11239
// InitStreamMode ;
11235: CALL 12374 0 0
// if p3 = 1 then
11239: LD_VAR 0 3
11243: PUSH
11244: LD_INT 1
11246: EQUAL
11247: IFFALSE 11257
// sRocket := true ;
11249: LD_ADDR_EXP 69
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// if p3 = 2 then
11257: LD_VAR 0 3
11261: PUSH
11262: LD_INT 2
11264: EQUAL
11265: IFFALSE 11275
// sSpeed := true ;
11267: LD_ADDR_EXP 68
11271: PUSH
11272: LD_INT 1
11274: ST_TO_ADDR
// if p3 = 3 then
11275: LD_VAR 0 3
11279: PUSH
11280: LD_INT 3
11282: EQUAL
11283: IFFALSE 11293
// sEngine := true ;
11285: LD_ADDR_EXP 70
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// if p3 = 4 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 4
11300: EQUAL
11301: IFFALSE 11311
// sSpec := true ;
11303: LD_ADDR_EXP 67
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 5 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 5
11318: EQUAL
11319: IFFALSE 11329
// sLevel := true ;
11321: LD_ADDR_EXP 71
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 6 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 6
11336: EQUAL
11337: IFFALSE 11347
// sArmoury := true ;
11339: LD_ADDR_EXP 72
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// if p3 = 7 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 7
11354: EQUAL
11355: IFFALSE 11365
// sRadar := true ;
11357: LD_ADDR_EXP 73
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// if p3 = 8 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 8
11372: EQUAL
11373: IFFALSE 11383
// sBunker := true ;
11375: LD_ADDR_EXP 74
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 9 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 9
11390: EQUAL
11391: IFFALSE 11401
// sHack := true ;
11393: LD_ADDR_EXP 75
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 10 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 10
11408: EQUAL
11409: IFFALSE 11419
// sFire := true ;
11411: LD_ADDR_EXP 76
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 11 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 11
11426: EQUAL
11427: IFFALSE 11437
// sRefresh := true ;
11429: LD_ADDR_EXP 77
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 12 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 12
11444: EQUAL
11445: IFFALSE 11455
// sExp := true ;
11447: LD_ADDR_EXP 78
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 13 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 13
11462: EQUAL
11463: IFFALSE 11473
// sDepot := true ;
11465: LD_ADDR_EXP 79
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 14 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 14
11480: EQUAL
11481: IFFALSE 11491
// sFlag := true ;
11483: LD_ADDR_EXP 80
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 15 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 15
11498: EQUAL
11499: IFFALSE 11509
// sKamikadze := true ;
11501: LD_ADDR_EXP 88
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 16 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 16
11516: EQUAL
11517: IFFALSE 11527
// sTroll := true ;
11519: LD_ADDR_EXP 89
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 17 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 17
11534: EQUAL
11535: IFFALSE 11545
// sSlow := true ;
11537: LD_ADDR_EXP 90
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 18 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 18
11552: EQUAL
11553: IFFALSE 11563
// sLack := true ;
11555: LD_ADDR_EXP 91
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 19 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 19
11570: EQUAL
11571: IFFALSE 11581
// sTank := true ;
11573: LD_ADDR_EXP 93
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 20 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 20
11588: EQUAL
11589: IFFALSE 11599
// sRemote := true ;
11591: LD_ADDR_EXP 94
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 21 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 21
11606: EQUAL
11607: IFFALSE 11617
// sPowell := true ;
11609: LD_ADDR_EXP 95
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 22 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 22
11624: EQUAL
11625: IFFALSE 11635
// sTeleport := true ;
11627: LD_ADDR_EXP 98
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 23 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 23
11642: EQUAL
11643: IFFALSE 11653
// sOilTower := true ;
11645: LD_ADDR_EXP 100
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 24 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 24
11660: EQUAL
11661: IFFALSE 11671
// sShovel := true ;
11663: LD_ADDR_EXP 101
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 25 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 25
11678: EQUAL
11679: IFFALSE 11689
// sSheik := true ;
11681: LD_ADDR_EXP 102
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 26 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 26
11696: EQUAL
11697: IFFALSE 11707
// sEarthquake := true ;
11699: LD_ADDR_EXP 104
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 27 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 27
11714: EQUAL
11715: IFFALSE 11725
// sAI := true ;
11717: LD_ADDR_EXP 105
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 28 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 28
11732: EQUAL
11733: IFFALSE 11743
// sCargo := true ;
11735: LD_ADDR_EXP 108
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 29 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 29
11750: EQUAL
11751: IFFALSE 11761
// sDLaser := true ;
11753: LD_ADDR_EXP 109
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 30 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 30
11768: EQUAL
11769: IFFALSE 11779
// sExchange := true ;
11771: LD_ADDR_EXP 110
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 31 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 31
11786: EQUAL
11787: IFFALSE 11797
// sFac := true ;
11789: LD_ADDR_EXP 111
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 32 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 32
11804: EQUAL
11805: IFFALSE 11815
// sPower := true ;
11807: LD_ADDR_EXP 112
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 33 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 33
11822: EQUAL
11823: IFFALSE 11833
// sRandom := true ;
11825: LD_ADDR_EXP 113
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 34 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 34
11840: EQUAL
11841: IFFALSE 11851
// sShield := true ;
11843: LD_ADDR_EXP 114
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 35 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 35
11858: EQUAL
11859: IFFALSE 11869
// sTime := true ;
11861: LD_ADDR_EXP 115
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 36 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 36
11876: EQUAL
11877: IFFALSE 11887
// sTools := true ;
11879: LD_ADDR_EXP 116
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 101 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 101
11894: EQUAL
11895: IFFALSE 11905
// sSold := true ;
11897: LD_ADDR_EXP 81
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 102 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 102
11912: EQUAL
11913: IFFALSE 11923
// sDiff := true ;
11915: LD_ADDR_EXP 82
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 103 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 103
11930: EQUAL
11931: IFFALSE 11941
// sFog := true ;
11933: LD_ADDR_EXP 85
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 104 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 104
11948: EQUAL
11949: IFFALSE 11959
// sReset := true ;
11951: LD_ADDR_EXP 86
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 105 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 105
11966: EQUAL
11967: IFFALSE 11977
// sSun := true ;
11969: LD_ADDR_EXP 87
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 106 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 106
11984: EQUAL
11985: IFFALSE 11995
// sTiger := true ;
11987: LD_ADDR_EXP 83
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 107 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 107
12002: EQUAL
12003: IFFALSE 12013
// sBomb := true ;
12005: LD_ADDR_EXP 84
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 108 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 108
12020: EQUAL
12021: IFFALSE 12031
// sWound := true ;
12023: LD_ADDR_EXP 92
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 109 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 109
12038: EQUAL
12039: IFFALSE 12049
// sBetray := true ;
12041: LD_ADDR_EXP 96
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 110 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 110
12056: EQUAL
12057: IFFALSE 12067
// sContamin := true ;
12059: LD_ADDR_EXP 97
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 111 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 111
12074: EQUAL
12075: IFFALSE 12085
// sOil := true ;
12077: LD_ADDR_EXP 99
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 112 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 112
12092: EQUAL
12093: IFFALSE 12103
// sStu := true ;
12095: LD_ADDR_EXP 103
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 113 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 113
12110: EQUAL
12111: IFFALSE 12121
// sBazooka := true ;
12113: LD_ADDR_EXP 106
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 114 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 114
12128: EQUAL
12129: IFFALSE 12139
// sMortar := true ;
12131: LD_ADDR_EXP 107
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 115 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 115
12146: EQUAL
12147: IFFALSE 12157
// sRanger := true ;
12149: LD_ADDR_EXP 117
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 116 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 116
12164: EQUAL
12165: IFFALSE 12175
// sComputer := true ;
12167: LD_ADDR_EXP 118
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 117 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 117
12182: EQUAL
12183: IFFALSE 12193
// s30 := true ;
12185: LD_ADDR_EXP 119
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 118 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 118
12200: EQUAL
12201: IFFALSE 12211
// s60 := true ;
12203: LD_ADDR_EXP 120
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// end ; if p2 = 101 then
12211: LD_VAR 0 2
12215: PUSH
12216: LD_INT 101
12218: EQUAL
12219: IFFALSE 12347
// begin case p3 of 1 :
12221: LD_VAR 0 3
12225: PUSH
12226: LD_INT 1
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12241
12234: POP
// hHackUnlimitedResources ; 2 :
12235: CALL 24445 0 0
12239: GO 12347
12241: LD_INT 2
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12256
12249: POP
// hHackSetLevel10 ; 3 :
12250: CALL 24578 0 0
12254: GO 12347
12256: LD_INT 3
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12271
12264: POP
// hHackSetLevel10YourUnits ; 4 :
12265: CALL 24663 0 0
12269: GO 12347
12271: LD_INT 4
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12286
12279: POP
// hHackInvincible ; 5 :
12280: CALL 25111 0 0
12284: GO 12347
12286: LD_INT 5
12288: DOUBLE
12289: EQUAL
12290: IFTRUE 12294
12292: GO 12301
12294: POP
// hHackInvisible ; 6 :
12295: CALL 25222 0 0
12299: GO 12347
12301: LD_INT 6
12303: DOUBLE
12304: EQUAL
12305: IFTRUE 12309
12307: GO 12316
12309: POP
// hHackChangeYourSide ; 7 :
12310: CALL 25279 0 0
12314: GO 12347
12316: LD_INT 7
12318: DOUBLE
12319: EQUAL
12320: IFTRUE 12324
12322: GO 12331
12324: POP
// hHackChangeUnitSide ; 8 :
12325: CALL 25321 0 0
12329: GO 12347
12331: LD_INT 8
12333: DOUBLE
12334: EQUAL
12335: IFTRUE 12339
12337: GO 12346
12339: POP
// hHackFog ; end ;
12340: CALL 25422 0 0
12344: GO 12347
12346: POP
// end ; end ;
12347: LD_VAR 0 7
12351: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12352: GO 12354
12354: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12355: LD_STRING initStreamRollete();
12357: PPUSH
12358: CALL_OW 559
// InitStreamMode ;
12362: CALL 12374 0 0
// DefineStreamItems ( false ) ;
12366: LD_INT 0
12368: PPUSH
12369: CALL 12838 0 1
// end ;
12373: END
// function InitStreamMode ; begin
12374: LD_INT 0
12376: PPUSH
// streamModeActive := false ;
12377: LD_ADDR_EXP 64
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// normalCounter := 36 ;
12385: LD_ADDR_EXP 65
12389: PUSH
12390: LD_INT 36
12392: ST_TO_ADDR
// hardcoreCounter := 18 ;
12393: LD_ADDR_EXP 66
12397: PUSH
12398: LD_INT 18
12400: ST_TO_ADDR
// sRocket := false ;
12401: LD_ADDR_EXP 69
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sSpeed := false ;
12409: LD_ADDR_EXP 68
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sEngine := false ;
12417: LD_ADDR_EXP 70
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sSpec := false ;
12425: LD_ADDR_EXP 67
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sLevel := false ;
12433: LD_ADDR_EXP 71
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sArmoury := false ;
12441: LD_ADDR_EXP 72
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sRadar := false ;
12449: LD_ADDR_EXP 73
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sBunker := false ;
12457: LD_ADDR_EXP 74
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sHack := false ;
12465: LD_ADDR_EXP 75
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sFire := false ;
12473: LD_ADDR_EXP 76
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sRefresh := false ;
12481: LD_ADDR_EXP 77
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sExp := false ;
12489: LD_ADDR_EXP 78
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sDepot := false ;
12497: LD_ADDR_EXP 79
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sFlag := false ;
12505: LD_ADDR_EXP 80
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sKamikadze := false ;
12513: LD_ADDR_EXP 88
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTroll := false ;
12521: LD_ADDR_EXP 89
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sSlow := false ;
12529: LD_ADDR_EXP 90
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sLack := false ;
12537: LD_ADDR_EXP 91
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sTank := false ;
12545: LD_ADDR_EXP 93
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sRemote := false ;
12553: LD_ADDR_EXP 94
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sPowell := false ;
12561: LD_ADDR_EXP 95
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sTeleport := false ;
12569: LD_ADDR_EXP 98
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sOilTower := false ;
12577: LD_ADDR_EXP 100
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sShovel := false ;
12585: LD_ADDR_EXP 101
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sSheik := false ;
12593: LD_ADDR_EXP 102
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sEarthquake := false ;
12601: LD_ADDR_EXP 104
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sAI := false ;
12609: LD_ADDR_EXP 105
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sCargo := false ;
12617: LD_ADDR_EXP 108
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sDLaser := false ;
12625: LD_ADDR_EXP 109
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sExchange := false ;
12633: LD_ADDR_EXP 110
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sFac := false ;
12641: LD_ADDR_EXP 111
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sPower := false ;
12649: LD_ADDR_EXP 112
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sRandom := false ;
12657: LD_ADDR_EXP 113
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sShield := false ;
12665: LD_ADDR_EXP 114
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sTime := false ;
12673: LD_ADDR_EXP 115
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTools := false ;
12681: LD_ADDR_EXP 116
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sSold := false ;
12689: LD_ADDR_EXP 81
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sDiff := false ;
12697: LD_ADDR_EXP 82
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sFog := false ;
12705: LD_ADDR_EXP 85
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sReset := false ;
12713: LD_ADDR_EXP 86
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sSun := false ;
12721: LD_ADDR_EXP 87
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sTiger := false ;
12729: LD_ADDR_EXP 83
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBomb := false ;
12737: LD_ADDR_EXP 84
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sWound := false ;
12745: LD_ADDR_EXP 92
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sBetray := false ;
12753: LD_ADDR_EXP 96
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sContamin := false ;
12761: LD_ADDR_EXP 97
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sOil := false ;
12769: LD_ADDR_EXP 99
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sStu := false ;
12777: LD_ADDR_EXP 103
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sBazooka := false ;
12785: LD_ADDR_EXP 106
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sMortar := false ;
12793: LD_ADDR_EXP 107
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sRanger := false ;
12801: LD_ADDR_EXP 117
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sComputer := false ;
12809: LD_ADDR_EXP 118
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// s30 := false ;
12817: LD_ADDR_EXP 119
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s60 := false ;
12825: LD_ADDR_EXP 120
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// end ;
12833: LD_VAR 0 1
12837: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12838: LD_INT 0
12840: PPUSH
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
// result := [ ] ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: EMPTY
12853: ST_TO_ADDR
// if campaign_id = 1 then
12854: LD_OWVAR 69
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: IFFALSE 16028
// begin case mission_number of 1 :
12864: LD_OWVAR 70
12868: PUSH
12869: LD_INT 1
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12953
12877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12878: LD_ADDR_VAR 0 2
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 4
12888: PUSH
12889: LD_INT 11
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 15
12897: PUSH
12898: LD_INT 16
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 101
12923: PUSH
12924: LD_INT 102
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 116
12932: PUSH
12933: LD_INT 117
12935: PUSH
12936: LD_INT 118
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 16026
12953: LD_INT 2
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13045
12961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 11
12975: PUSH
12976: LD_INT 12
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 16
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 101
13007: PUSH
13008: LD_INT 102
13010: PUSH
13011: LD_INT 105
13013: PUSH
13014: LD_INT 106
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: LD_INT 116
13022: PUSH
13023: LD_INT 117
13025: PUSH
13026: LD_INT 118
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 16026
13045: LD_INT 3
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13141
13053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 4
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 11
13070: PUSH
13071: LD_INT 12
13073: PUSH
13074: LD_INT 15
13076: PUSH
13077: LD_INT 16
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 26
13085: PUSH
13086: LD_INT 36
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 101
13103: PUSH
13104: LD_INT 102
13106: PUSH
13107: LD_INT 105
13109: PUSH
13110: LD_INT 106
13112: PUSH
13113: LD_INT 108
13115: PUSH
13116: LD_INT 116
13118: PUSH
13119: LD_INT 117
13121: PUSH
13122: LD_INT 118
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 16026
13141: LD_INT 4
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13245
13149: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 4
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: LD_INT 8
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 15
13175: PUSH
13176: LD_INT 16
13178: PUSH
13179: LD_INT 22
13181: PUSH
13182: LD_INT 23
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 36
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 101
13207: PUSH
13208: LD_INT 102
13210: PUSH
13211: LD_INT 105
13213: PUSH
13214: LD_INT 106
13216: PUSH
13217: LD_INT 108
13219: PUSH
13220: LD_INT 116
13222: PUSH
13223: LD_INT 117
13225: PUSH
13226: LD_INT 118
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 16026
13245: LD_INT 5
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13365
13253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 15
13282: PUSH
13283: LD_INT 16
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 23
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 26
13297: PUSH
13298: LD_INT 36
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 105
13325: PUSH
13326: LD_INT 106
13328: PUSH
13329: LD_INT 108
13331: PUSH
13332: LD_INT 109
13334: PUSH
13335: LD_INT 112
13337: PUSH
13338: LD_INT 116
13340: PUSH
13341: LD_INT 117
13343: PUSH
13344: LD_INT 118
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: ST_TO_ADDR
13363: GO 16026
13365: LD_INT 6
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13505
13373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: LD_INT 5
13387: PUSH
13388: LD_INT 6
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: LD_INT 11
13396: PUSH
13397: LD_INT 12
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 30
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 36
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 101
13459: PUSH
13460: LD_INT 102
13462: PUSH
13463: LD_INT 105
13465: PUSH
13466: LD_INT 106
13468: PUSH
13469: LD_INT 108
13471: PUSH
13472: LD_INT 109
13474: PUSH
13475: LD_INT 112
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: ST_TO_ADDR
13503: GO 16026
13505: LD_INT 7
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13625
13513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: LD_INT 7
13530: PUSH
13531: LD_INT 11
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: LD_INT 15
13539: PUSH
13540: LD_INT 16
13542: PUSH
13543: LD_INT 20
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_INT 23
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 26
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 103
13585: PUSH
13586: LD_INT 105
13588: PUSH
13589: LD_INT 106
13591: PUSH
13592: LD_INT 108
13594: PUSH
13595: LD_INT 112
13597: PUSH
13598: LD_INT 116
13600: PUSH
13601: LD_INT 117
13603: PUSH
13604: LD_INT 118
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 16026
13625: LD_INT 8
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13773
13633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: LD_INT 7
13653: PUSH
13654: LD_INT 8
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: LD_INT 16
13668: PUSH
13669: LD_INT 20
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 103
13729: PUSH
13730: LD_INT 105
13732: PUSH
13733: LD_INT 106
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 112
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 16026
13773: LD_INT 9
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13929
13781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 6
13798: PUSH
13799: LD_INT 7
13801: PUSH
13802: LD_INT 8
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: LD_INT 12
13810: PUSH
13811: LD_INT 15
13813: PUSH
13814: LD_INT 16
13816: PUSH
13817: LD_INT 20
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 23
13828: PUSH
13829: LD_INT 25
13831: PUSH
13832: LD_INT 26
13834: PUSH
13835: LD_INT 28
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: LD_INT 31
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: LD_INT 36
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 101
13875: PUSH
13876: LD_INT 102
13878: PUSH
13879: LD_INT 103
13881: PUSH
13882: LD_INT 105
13884: PUSH
13885: LD_INT 106
13887: PUSH
13888: LD_INT 108
13890: PUSH
13891: LD_INT 109
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 114
13899: PUSH
13900: LD_INT 116
13902: PUSH
13903: LD_INT 117
13905: PUSH
13906: LD_INT 118
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: ST_TO_ADDR
13927: GO 16026
13929: LD_INT 10
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 14133
13937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: LD_INT 4
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: LD_INT 6
13954: PUSH
13955: LD_INT 7
13957: PUSH
13958: LD_INT 8
13960: PUSH
13961: LD_INT 9
13963: PUSH
13964: LD_INT 10
13966: PUSH
13967: LD_INT 11
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: LD_INT 13
13975: PUSH
13976: LD_INT 14
13978: PUSH
13979: LD_INT 15
13981: PUSH
13982: LD_INT 16
13984: PUSH
13985: LD_INT 17
13987: PUSH
13988: LD_INT 18
13990: PUSH
13991: LD_INT 19
13993: PUSH
13994: LD_INT 20
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 23
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 26
14014: PUSH
14015: LD_INT 28
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 31
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: LD_INT 36
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 103
14069: PUSH
14070: LD_INT 104
14072: PUSH
14073: LD_INT 105
14075: PUSH
14076: LD_INT 106
14078: PUSH
14079: LD_INT 107
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 110
14090: PUSH
14091: LD_INT 111
14093: PUSH
14094: LD_INT 112
14096: PUSH
14097: LD_INT 114
14099: PUSH
14100: LD_INT 116
14102: PUSH
14103: LD_INT 117
14105: PUSH
14106: LD_INT 118
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 16026
14133: LD_INT 11
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14345
14141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 5
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_INT 8
14167: PUSH
14168: LD_INT 9
14170: PUSH
14171: LD_INT 10
14173: PUSH
14174: LD_INT 11
14176: PUSH
14177: LD_INT 12
14179: PUSH
14180: LD_INT 13
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: LD_INT 15
14188: PUSH
14189: LD_INT 16
14191: PUSH
14192: LD_INT 17
14194: PUSH
14195: LD_INT 18
14197: PUSH
14198: LD_INT 19
14200: PUSH
14201: LD_INT 20
14203: PUSH
14204: LD_INT 21
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 24
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 26
14221: PUSH
14222: LD_INT 28
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 31
14230: PUSH
14231: LD_INT 32
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 36
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 104
14284: PUSH
14285: LD_INT 105
14287: PUSH
14288: LD_INT 106
14290: PUSH
14291: LD_INT 107
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: LD_INT 109
14299: PUSH
14300: LD_INT 110
14302: PUSH
14303: LD_INT 111
14305: PUSH
14306: LD_INT 112
14308: PUSH
14309: LD_INT 114
14311: PUSH
14312: LD_INT 116
14314: PUSH
14315: LD_INT 117
14317: PUSH
14318: LD_INT 118
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16026
14345: LD_INT 12
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14573
14353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 3
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: LD_INT 9
14385: PUSH
14386: LD_INT 10
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 13
14397: PUSH
14398: LD_INT 14
14400: PUSH
14401: LD_INT 15
14403: PUSH
14404: LD_INT 16
14406: PUSH
14407: LD_INT 17
14409: PUSH
14410: LD_INT 18
14412: PUSH
14413: LD_INT 19
14415: PUSH
14416: LD_INT 20
14418: PUSH
14419: LD_INT 21
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 23
14427: PUSH
14428: LD_INT 24
14430: PUSH
14431: LD_INT 25
14433: PUSH
14434: LD_INT 26
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: LD_INT 28
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 101
14499: PUSH
14500: LD_INT 102
14502: PUSH
14503: LD_INT 103
14505: PUSH
14506: LD_INT 104
14508: PUSH
14509: LD_INT 105
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: LD_INT 107
14517: PUSH
14518: LD_INT 108
14520: PUSH
14521: LD_INT 109
14523: PUSH
14524: LD_INT 110
14526: PUSH
14527: LD_INT 111
14529: PUSH
14530: LD_INT 112
14532: PUSH
14533: LD_INT 113
14535: PUSH
14536: LD_INT 114
14538: PUSH
14539: LD_INT 116
14541: PUSH
14542: LD_INT 117
14544: PUSH
14545: LD_INT 118
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: ST_TO_ADDR
14571: GO 16026
14573: LD_INT 13
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14789
14581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 4
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: LD_INT 10
14610: PUSH
14611: LD_INT 11
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: LD_INT 14
14619: PUSH
14620: LD_INT 15
14622: PUSH
14623: LD_INT 16
14625: PUSH
14626: LD_INT 17
14628: PUSH
14629: LD_INT 18
14631: PUSH
14632: LD_INT 19
14634: PUSH
14635: LD_INT 20
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 23
14646: PUSH
14647: LD_INT 24
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: LD_INT 27
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 31
14667: PUSH
14668: LD_INT 32
14670: PUSH
14671: LD_INT 33
14673: PUSH
14674: LD_INT 34
14676: PUSH
14677: LD_INT 36
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 103
14721: PUSH
14722: LD_INT 104
14724: PUSH
14725: LD_INT 105
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 107
14733: PUSH
14734: LD_INT 108
14736: PUSH
14737: LD_INT 109
14739: PUSH
14740: LD_INT 110
14742: PUSH
14743: LD_INT 111
14745: PUSH
14746: LD_INT 112
14748: PUSH
14749: LD_INT 113
14751: PUSH
14752: LD_INT 114
14754: PUSH
14755: LD_INT 116
14757: PUSH
14758: LD_INT 117
14760: PUSH
14761: LD_INT 118
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: ST_TO_ADDR
14787: GO 16026
14789: LD_INT 14
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 15021
14797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 36
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 113
14983: PUSH
14984: LD_INT 114
14986: PUSH
14987: LD_INT 116
14989: PUSH
14990: LD_INT 117
14992: PUSH
14993: LD_INT 118
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: ST_TO_ADDR
15019: GO 16026
15021: LD_INT 15
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15253
15029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: LD_INT 5
15049: PUSH
15050: LD_INT 6
15052: PUSH
15053: LD_INT 7
15055: PUSH
15056: LD_INT 8
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: LD_INT 10
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 13
15073: PUSH
15074: LD_INT 14
15076: PUSH
15077: LD_INT 15
15079: PUSH
15080: LD_INT 16
15082: PUSH
15083: LD_INT 17
15085: PUSH
15086: LD_INT 18
15088: PUSH
15089: LD_INT 19
15091: PUSH
15092: LD_INT 20
15094: PUSH
15095: LD_INT 21
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_INT 23
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 26
15112: PUSH
15113: LD_INT 27
15115: PUSH
15116: LD_INT 28
15118: PUSH
15119: LD_INT 29
15121: PUSH
15122: LD_INT 30
15124: PUSH
15125: LD_INT 31
15127: PUSH
15128: LD_INT 32
15130: PUSH
15131: LD_INT 33
15133: PUSH
15134: LD_INT 34
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 113
15215: PUSH
15216: LD_INT 114
15218: PUSH
15219: LD_INT 116
15221: PUSH
15222: LD_INT 117
15224: PUSH
15225: LD_INT 118
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 16026
15253: LD_INT 16
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15397
15261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 7
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 16
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 31
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 101
15347: PUSH
15348: LD_INT 102
15350: PUSH
15351: LD_INT 103
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: LD_INT 108
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: LD_INT 116
15371: PUSH
15372: LD_INT 117
15374: PUSH
15375: LD_INT 118
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: ST_TO_ADDR
15395: GO 16026
15397: LD_INT 17
15399: DOUBLE
15400: EQUAL
15401: IFTRUE 15405
15403: GO 15629
15405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15406: LD_ADDR_VAR 0 2
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 4
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 6
15428: PUSH
15429: LD_INT 7
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 9
15437: PUSH
15438: LD_INT 10
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 16
15458: PUSH
15459: LD_INT 17
15461: PUSH
15462: LD_INT 18
15464: PUSH
15465: LD_INT 19
15467: PUSH
15468: LD_INT 20
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 23
15479: PUSH
15480: LD_INT 24
15482: PUSH
15483: LD_INT 25
15485: PUSH
15486: LD_INT 26
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: LD_INT 29
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 31
15503: PUSH
15504: LD_INT 32
15506: PUSH
15507: LD_INT 33
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 36
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 101
15555: PUSH
15556: LD_INT 102
15558: PUSH
15559: LD_INT 103
15561: PUSH
15562: LD_INT 104
15564: PUSH
15565: LD_INT 105
15567: PUSH
15568: LD_INT 106
15570: PUSH
15571: LD_INT 107
15573: PUSH
15574: LD_INT 108
15576: PUSH
15577: LD_INT 109
15579: PUSH
15580: LD_INT 110
15582: PUSH
15583: LD_INT 111
15585: PUSH
15586: LD_INT 112
15588: PUSH
15589: LD_INT 113
15591: PUSH
15592: LD_INT 114
15594: PUSH
15595: LD_INT 116
15597: PUSH
15598: LD_INT 117
15600: PUSH
15601: LD_INT 118
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: ST_TO_ADDR
15627: GO 16026
15629: LD_INT 18
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15785
15637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: LD_INT 12
15660: PUSH
15661: LD_INT 15
15663: PUSH
15664: LD_INT 16
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 30
15687: PUSH
15688: LD_INT 31
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 33
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 35
15702: PUSH
15703: LD_INT 36
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 101
15731: PUSH
15732: LD_INT 102
15734: PUSH
15735: LD_INT 103
15737: PUSH
15738: LD_INT 106
15740: PUSH
15741: LD_INT 108
15743: PUSH
15744: LD_INT 112
15746: PUSH
15747: LD_INT 113
15749: PUSH
15750: LD_INT 114
15752: PUSH
15753: LD_INT 115
15755: PUSH
15756: LD_INT 116
15758: PUSH
15759: LD_INT 117
15761: PUSH
15762: LD_INT 118
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 16026
15785: LD_INT 19
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 16025
15793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15794: LD_ADDR_VAR 0 2
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: LD_INT 6
15816: PUSH
15817: LD_INT 7
15819: PUSH
15820: LD_INT 8
15822: PUSH
15823: LD_INT 9
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: LD_INT 11
15831: PUSH
15832: LD_INT 12
15834: PUSH
15835: LD_INT 13
15837: PUSH
15838: LD_INT 14
15840: PUSH
15841: LD_INT 15
15843: PUSH
15844: LD_INT 16
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: LD_INT 18
15852: PUSH
15853: LD_INT 19
15855: PUSH
15856: LD_INT 20
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 24
15870: PUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 26
15876: PUSH
15877: LD_INT 27
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: LD_INT 29
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 31
15891: PUSH
15892: LD_INT 32
15894: PUSH
15895: LD_INT 33
15897: PUSH
15898: LD_INT 34
15900: PUSH
15901: LD_INT 35
15903: PUSH
15904: LD_INT 36
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 104
15956: PUSH
15957: LD_INT 105
15959: PUSH
15960: LD_INT 106
15962: PUSH
15963: LD_INT 107
15965: PUSH
15966: LD_INT 108
15968: PUSH
15969: LD_INT 109
15971: PUSH
15972: LD_INT 110
15974: PUSH
15975: LD_INT 111
15977: PUSH
15978: LD_INT 112
15980: PUSH
15981: LD_INT 113
15983: PUSH
15984: LD_INT 114
15986: PUSH
15987: LD_INT 115
15989: PUSH
15990: LD_INT 116
15992: PUSH
15993: LD_INT 117
15995: PUSH
15996: LD_INT 118
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ST_TO_ADDR
16023: GO 16026
16025: POP
// end else
16026: GO 16257
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16028: LD_ADDR_VAR 0 2
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: LD_INT 4
16044: PUSH
16045: LD_INT 5
16047: PUSH
16048: LD_INT 6
16050: PUSH
16051: LD_INT 7
16053: PUSH
16054: LD_INT 8
16056: PUSH
16057: LD_INT 9
16059: PUSH
16060: LD_INT 10
16062: PUSH
16063: LD_INT 11
16065: PUSH
16066: LD_INT 12
16068: PUSH
16069: LD_INT 13
16071: PUSH
16072: LD_INT 14
16074: PUSH
16075: LD_INT 15
16077: PUSH
16078: LD_INT 16
16080: PUSH
16081: LD_INT 17
16083: PUSH
16084: LD_INT 18
16086: PUSH
16087: LD_INT 19
16089: PUSH
16090: LD_INT 20
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 22
16098: PUSH
16099: LD_INT 23
16101: PUSH
16102: LD_INT 24
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 26
16110: PUSH
16111: LD_INT 27
16113: PUSH
16114: LD_INT 28
16116: PUSH
16117: LD_INT 29
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 101
16181: PUSH
16182: LD_INT 102
16184: PUSH
16185: LD_INT 103
16187: PUSH
16188: LD_INT 104
16190: PUSH
16191: LD_INT 105
16193: PUSH
16194: LD_INT 106
16196: PUSH
16197: LD_INT 107
16199: PUSH
16200: LD_INT 108
16202: PUSH
16203: LD_INT 109
16205: PUSH
16206: LD_INT 110
16208: PUSH
16209: LD_INT 111
16211: PUSH
16212: LD_INT 112
16214: PUSH
16215: LD_INT 113
16217: PUSH
16218: LD_INT 114
16220: PUSH
16221: LD_INT 115
16223: PUSH
16224: LD_INT 116
16226: PUSH
16227: LD_INT 117
16229: PUSH
16230: LD_INT 118
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if result then
16257: LD_VAR 0 2
16261: IFFALSE 17047
// begin normal :=  ;
16263: LD_ADDR_VAR 0 5
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hardcore :=  ;
16271: LD_ADDR_VAR 0 6
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// active :=  ;
16279: LD_ADDR_VAR 0 7
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// for i = 1 to normalCounter do
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_EXP 65
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16404
// begin tmp := 0 ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_STRING 0
16312: ST_TO_ADDR
// if result [ 1 ] then
16313: LD_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: IFFALSE 16386
// if result [ 1 ] [ 1 ] = i then
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 8
16340: EQUAL
16341: IFFALSE 16386
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: CALL_OW 3
16372: PPUSH
16373: CALL_OW 1
16377: ST_TO_ADDR
// tmp := 1 ;
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_STRING 1
16385: ST_TO_ADDR
// end ; normal := normal & tmp ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_VAR 0 5
16395: PUSH
16396: LD_VAR 0 3
16400: STR
16401: ST_TO_ADDR
// end ;
16402: GO 16302
16404: POP
16405: POP
// for i = 1 to hardcoreCounter do
16406: LD_ADDR_VAR 0 8
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_EXP 66
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16527
// begin tmp := 0 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_STRING 0
16431: ST_TO_ADDR
// if result [ 2 ] then
16432: LD_VAR 0 2
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: IFFALSE 16509
// if result [ 2 ] [ 1 ] = 100 + i then
16442: LD_VAR 0 2
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PUSH
16455: LD_INT 100
16457: PUSH
16458: LD_VAR 0 8
16462: PLUS
16463: EQUAL
16464: IFFALSE 16509
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 2
16478: PPUSH
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 2
16486: ARRAY
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 3
16495: PPUSH
16496: CALL_OW 1
16500: ST_TO_ADDR
// tmp := 1 ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_STRING 1
16508: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16509: LD_ADDR_VAR 0 6
16513: PUSH
16514: LD_VAR 0 6
16518: PUSH
16519: LD_VAR 0 3
16523: STR
16524: ST_TO_ADDR
// end ;
16525: GO 16421
16527: POP
16528: POP
// if isGameLoad then
16529: LD_VAR 0 1
16533: IFFALSE 17008
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_EXP 69
16544: PUSH
16545: LD_EXP 68
16549: PUSH
16550: LD_EXP 70
16554: PUSH
16555: LD_EXP 67
16559: PUSH
16560: LD_EXP 71
16564: PUSH
16565: LD_EXP 72
16569: PUSH
16570: LD_EXP 73
16574: PUSH
16575: LD_EXP 74
16579: PUSH
16580: LD_EXP 75
16584: PUSH
16585: LD_EXP 76
16589: PUSH
16590: LD_EXP 77
16594: PUSH
16595: LD_EXP 78
16599: PUSH
16600: LD_EXP 79
16604: PUSH
16605: LD_EXP 80
16609: PUSH
16610: LD_EXP 88
16614: PUSH
16615: LD_EXP 89
16619: PUSH
16620: LD_EXP 90
16624: PUSH
16625: LD_EXP 91
16629: PUSH
16630: LD_EXP 93
16634: PUSH
16635: LD_EXP 94
16639: PUSH
16640: LD_EXP 95
16644: PUSH
16645: LD_EXP 98
16649: PUSH
16650: LD_EXP 100
16654: PUSH
16655: LD_EXP 101
16659: PUSH
16660: LD_EXP 102
16664: PUSH
16665: LD_EXP 104
16669: PUSH
16670: LD_EXP 105
16674: PUSH
16675: LD_EXP 108
16679: PUSH
16680: LD_EXP 109
16684: PUSH
16685: LD_EXP 110
16689: PUSH
16690: LD_EXP 111
16694: PUSH
16695: LD_EXP 112
16699: PUSH
16700: LD_EXP 113
16704: PUSH
16705: LD_EXP 114
16709: PUSH
16710: LD_EXP 115
16714: PUSH
16715: LD_EXP 116
16719: PUSH
16720: LD_EXP 81
16724: PUSH
16725: LD_EXP 82
16729: PUSH
16730: LD_EXP 85
16734: PUSH
16735: LD_EXP 86
16739: PUSH
16740: LD_EXP 87
16744: PUSH
16745: LD_EXP 83
16749: PUSH
16750: LD_EXP 84
16754: PUSH
16755: LD_EXP 92
16759: PUSH
16760: LD_EXP 96
16764: PUSH
16765: LD_EXP 97
16769: PUSH
16770: LD_EXP 99
16774: PUSH
16775: LD_EXP 103
16779: PUSH
16780: LD_EXP 106
16784: PUSH
16785: LD_EXP 107
16789: PUSH
16790: LD_EXP 117
16794: PUSH
16795: LD_EXP 118
16799: PUSH
16800: LD_EXP 119
16804: PUSH
16805: LD_EXP 120
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// tmp :=  ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_STRING 
16873: ST_TO_ADDR
// for i = 1 to normalCounter do
16874: LD_ADDR_VAR 0 8
16878: PUSH
16879: DOUBLE
16880: LD_INT 1
16882: DEC
16883: ST_TO_ADDR
16884: LD_EXP 65
16888: PUSH
16889: FOR_TO
16890: IFFALSE 16926
// begin if flags [ i ] then
16892: LD_VAR 0 4
16896: PUSH
16897: LD_VAR 0 8
16901: ARRAY
16902: IFFALSE 16924
// tmp := tmp & i & ; ;
16904: LD_ADDR_VAR 0 3
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 8
16918: STR
16919: PUSH
16920: LD_STRING ;
16922: STR
16923: ST_TO_ADDR
// end ;
16924: GO 16889
16926: POP
16927: POP
// for i = 1 to hardcoreCounter do
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_EXP 66
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16990
// begin if flags [ normalCounter + i ] then
16946: LD_VAR 0 4
16950: PUSH
16951: LD_EXP 65
16955: PUSH
16956: LD_VAR 0 8
16960: PLUS
16961: ARRAY
16962: IFFALSE 16988
// tmp := tmp & ( 100 + i ) & ; ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 100
16976: PUSH
16977: LD_VAR 0 8
16981: PLUS
16982: STR
16983: PUSH
16984: LD_STRING ;
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16943
16990: POP
16991: POP
// if tmp then
16992: LD_VAR 0 3
16996: IFFALSE 17008
// active := tmp ;
16998: LD_ADDR_VAR 0 7
17002: PUSH
17003: LD_VAR 0 3
17007: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17008: LD_STRING getStreamItemsFromMission("
17010: PUSH
17011: LD_VAR 0 5
17015: STR
17016: PUSH
17017: LD_STRING ","
17019: STR
17020: PUSH
17021: LD_VAR 0 6
17025: STR
17026: PUSH
17027: LD_STRING ","
17029: STR
17030: PUSH
17031: LD_VAR 0 7
17035: STR
17036: PUSH
17037: LD_STRING ")
17039: STR
17040: PPUSH
17041: CALL_OW 559
// end else
17045: GO 17054
// ToLua ( getStreamItemsFromMission("","","") ) ;
17047: LD_STRING getStreamItemsFromMission("","","")
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: LD_VAR 0 2
17058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17059: LD_EXP 64
17063: PUSH
17064: LD_EXP 69
17068: AND
17069: IFFALSE 17193
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
// begin enable ;
17078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_OWVAR 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 45
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 34
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 34
17131: PUSH
17132: LD_INT 47
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: ST_TO_ADDR
// if not tmp then
17155: LD_VAR 0 2
17159: NOT
17160: IFFALSE 17164
// exit ;
17162: GO 17193
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17191
// begin SetLives ( i , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 234
// end ;
17189: GO 17174
17191: POP
17192: POP
// end ;
17193: PPOPN 2
17195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17196: LD_EXP 64
17200: PUSH
17201: LD_EXP 70
17205: AND
17206: IFFALSE 17290
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
// begin enable ;
17215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 32
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: ST_TO_ADDR
// if not tmp then
17252: LD_VAR 0 2
17256: NOT
17257: IFFALSE 17261
// exit ;
17259: GO 17290
// for i in tmp do
17261: LD_ADDR_VAR 0 1
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: FOR_IN
17272: IFFALSE 17288
// begin SetLives ( i , 0 ) ;
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: CALL_OW 234
// end ;
17286: GO 17271
17288: POP
17289: POP
// end ;
17290: PPOPN 2
17292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17293: LD_EXP 64
17297: PUSH
17298: LD_EXP 67
17302: AND
17303: IFFALSE 17396
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin enable ;
17311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_OWVAR 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: LD_INT 5
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 25
17344: PUSH
17345: LD_INT 9
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 25
17354: PUSH
17355: LD_INT 8
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 69
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17394
// begin SetClass ( i , 1 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: GO 17377
17394: POP
17395: POP
// end ;
17396: PPOPN 1
17398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17399: LD_EXP 64
17403: PUSH
17404: LD_EXP 68
17408: AND
17409: PUSH
17410: LD_OWVAR 65
17414: PUSH
17415: LD_INT 7
17417: LESS
17418: AND
17419: IFFALSE 17433
17421: GO 17423
17423: DISABLE
// begin enable ;
17424: ENABLE
// game_speed := 7 ;
17425: LD_ADDR_OWVAR 65
17429: PUSH
17430: LD_INT 7
17432: ST_TO_ADDR
// end ;
17433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17434: LD_EXP 64
17438: PUSH
17439: LD_EXP 71
17443: AND
17444: IFFALSE 17646
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 81
17461: PUSH
17462: LD_OWVAR 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 21
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 3
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17646
// if tmp > 5 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 5
17506: GREATER
17507: IFFALSE 17519
// k := 5 else
17509: LD_ADDR_VAR 0 2
17513: PUSH
17514: LD_INT 5
17516: ST_TO_ADDR
17517: GO 17529
// k := tmp ;
17519: LD_ADDR_VAR 0 2
17523: PUSH
17524: LD_VAR 0 3
17528: ST_TO_ADDR
// for i := 1 to k do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_VAR 0 2
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_VAR 0 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 4
17565: MOD
17566: PUSH
17567: LD_INT 1
17569: PLUS
17570: PPUSH
17571: CALL_OW 259
17575: PUSH
17576: LD_INT 10
17578: LESS
17579: IFFALSE 17642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 1
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 4
17599: MOD
17600: PUSH
17601: LD_INT 1
17603: PLUS
17604: PPUSH
17605: LD_VAR 0 3
17609: PUSH
17610: LD_VAR 0 1
17614: ARRAY
17615: PPUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 4
17623: MOD
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: PPUSH
17629: CALL_OW 259
17633: PUSH
17634: LD_INT 1
17636: PLUS
17637: PPUSH
17638: CALL_OW 237
17642: GO 17544
17644: POP
17645: POP
// end ;
17646: PPOPN 3
17648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17649: LD_EXP 64
17653: PUSH
17654: LD_EXP 72
17658: AND
17659: IFFALSE 17679
17661: GO 17663
17663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17664: LD_INT 4
17666: PPUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 324
17679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17680: LD_EXP 64
17684: PUSH
17685: LD_EXP 101
17689: AND
17690: IFFALSE 17710
17692: GO 17694
17694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17695: LD_INT 19
17697: PPUSH
17698: LD_OWVAR 2
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL_OW 324
17710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17711: LD_EXP 64
17715: PUSH
17716: LD_EXP 73
17720: AND
17721: IFFALSE 17823
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
17729: PPUSH
// begin enable ;
17730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17731: LD_ADDR_VAR 0 2
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_OWVAR 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 34
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 34
17763: PUSH
17764: LD_INT 30
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PPUSH
17780: CALL_OW 69
17784: ST_TO_ADDR
// if not tmp then
17785: LD_VAR 0 2
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 17823
// for i in tmp do
17794: LD_ADDR_VAR 0 1
17798: PUSH
17799: LD_VAR 0 2
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17821
// begin SetLives ( i , 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_INT 0
17814: PPUSH
17815: CALL_OW 234
// end ;
17819: GO 17804
17821: POP
17822: POP
// end ;
17823: PPOPN 2
17825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17826: LD_EXP 64
17830: PUSH
17831: LD_EXP 74
17835: AND
17836: IFFALSE 17856
17838: GO 17840
17840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17841: LD_INT 32
17843: PPUSH
17844: LD_OWVAR 2
17848: PPUSH
17849: LD_INT 0
17851: PPUSH
17852: CALL_OW 324
17856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17857: LD_EXP 64
17861: PUSH
17862: LD_EXP 75
17866: AND
17867: IFFALSE 18048
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 33
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 2
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 18048
// side := 0 ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 0
17929: ST_TO_ADDR
// for i := 1 to 8 do
17930: LD_ADDR_VAR 0 1
17934: PUSH
17935: DOUBLE
17936: LD_INT 1
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 8
17942: PUSH
17943: FOR_TO
17944: IFFALSE 17992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17946: LD_OWVAR 2
17950: PUSH
17951: LD_VAR 0 1
17955: NONEQUAL
17956: PUSH
17957: LD_OWVAR 2
17961: PPUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 81
17971: PUSH
17972: LD_INT 2
17974: EQUAL
17975: AND
17976: IFFALSE 17990
// begin side := i ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: ST_TO_ADDR
// break ;
17988: GO 17992
// end ;
17990: GO 17943
17992: POP
17993: POP
// if not side then
17994: LD_VAR 0 3
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18048
// for i := 1 to tmp do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: DOUBLE
18009: LD_INT 1
18011: DEC
18012: ST_TO_ADDR
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18046
// if Prob ( 60 ) then
18021: LD_INT 60
18023: PPUSH
18024: CALL_OW 13
18028: IFFALSE 18044
// SetSide ( i , side ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_VAR 0 3
18039: PPUSH
18040: CALL_OW 235
18044: GO 18018
18046: POP
18047: POP
// end ;
18048: PPOPN 3
18050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18051: LD_EXP 64
18055: PUSH
18056: LD_EXP 77
18060: AND
18061: IFFALSE 18180
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18069: LD_ADDR_VAR 0 1
18073: PUSH
18074: LD_INT 22
18076: PUSH
18077: LD_OWVAR 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 23
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PUSH
18123: FOR_IN
18124: IFFALSE 18178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 257
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: LD_INT 4
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: IN
18154: IFFALSE 18176
// SetClass ( un , rand ( 1 , 4 ) ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 12
18171: PPUSH
18172: CALL_OW 336
18176: GO 18123
18178: POP
18179: POP
// end ;
18180: PPOPN 1
18182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18183: LD_EXP 64
18187: PUSH
18188: LD_EXP 76
18192: AND
18193: IFFALSE 18272
18195: GO 18197
18197: DISABLE
18198: LD_INT 0
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 21
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 1
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: PPUSH
18265: LD_INT 100
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18275: LD_EXP 64
18279: PUSH
18280: LD_EXP 78
18284: AND
18285: IFFALSE 18383
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18293: LD_ADDR_VAR 0 1
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_OWVAR 2
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 21
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 69
18328: ST_TO_ADDR
// if not tmp then
18329: LD_VAR 0 1
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 1
18345: PPUSH
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_INT 4
18362: PPUSH
18363: CALL_OW 12
18367: PPUSH
18368: LD_INT 3000
18370: PPUSH
18371: LD_INT 9000
18373: PPUSH
18374: CALL_OW 12
18378: PPUSH
18379: CALL_OW 492
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18386: LD_EXP 64
18390: PUSH
18391: LD_EXP 79
18395: AND
18396: IFFALSE 18416
18398: GO 18400
18400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18401: LD_INT 1
18403: PPUSH
18404: LD_OWVAR 2
18408: PPUSH
18409: LD_INT 0
18411: PPUSH
18412: CALL_OW 324
18416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18417: LD_EXP 64
18421: PUSH
18422: LD_EXP 80
18426: AND
18427: IFFALSE 18510
18429: GO 18431
18431: DISABLE
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 2
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18510
// for i in tmp do
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18508
// SetBLevel ( i , 10 ) ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_INT 10
18501: PPUSH
18502: CALL_OW 241
18506: GO 18491
18508: POP
18509: POP
// end ;
18510: PPOPN 2
18512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18513: LD_EXP 64
18517: PUSH
18518: LD_EXP 81
18522: AND
18523: IFFALSE 18634
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 25
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 3
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18634
// un := tmp [ rand ( 1 , tmp ) ] ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: CALL_OW 12
18600: ARRAY
18601: ST_TO_ADDR
// if Crawls ( un ) then
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 318
18611: IFFALSE 18622
// ComWalk ( un ) ;
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_INT 5
18629: PPUSH
18630: CALL_OW 336
// end ;
18634: PPOPN 3
18636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18637: LD_EXP 64
18641: PUSH
18642: LD_EXP 82
18646: AND
18647: PUSH
18648: LD_OWVAR 67
18652: PUSH
18653: LD_INT 4
18655: LESS
18656: AND
18657: IFFALSE 18676
18659: GO 18661
18661: DISABLE
// begin Difficulty := Difficulty + 1 ;
18662: LD_ADDR_OWVAR 67
18666: PUSH
18667: LD_OWVAR 67
18671: PUSH
18672: LD_INT 1
18674: PLUS
18675: ST_TO_ADDR
// end ;
18676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18677: LD_EXP 64
18681: PUSH
18682: LD_EXP 83
18686: AND
18687: IFFALSE 18790
18689: GO 18691
18691: DISABLE
18692: LD_INT 0
18694: PPUSH
// begin for i := 1 to 5 do
18695: LD_ADDR_VAR 0 1
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_INT 5
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18788
// begin uc_nation := nation_nature ;
18711: LD_ADDR_OWVAR 21
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// uc_side := 0 ;
18719: LD_ADDR_OWVAR 20
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18727: LD_ADDR_OWVAR 29
18731: PUSH
18732: LD_INT 12
18734: PUSH
18735: LD_INT 12
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// hc_agressivity := 20 ;
18742: LD_ADDR_OWVAR 35
18746: PUSH
18747: LD_INT 20
18749: ST_TO_ADDR
// hc_class := class_tiger ;
18750: LD_ADDR_OWVAR 28
18754: PUSH
18755: LD_INT 14
18757: ST_TO_ADDR
// hc_gallery :=  ;
18758: LD_ADDR_OWVAR 33
18762: PUSH
18763: LD_STRING 
18765: ST_TO_ADDR
// hc_name :=  ;
18766: LD_ADDR_OWVAR 26
18770: PUSH
18771: LD_STRING 
18773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18774: CALL_OW 44
18778: PPUSH
18779: LD_INT 0
18781: PPUSH
18782: CALL_OW 51
// end ;
18786: GO 18708
18788: POP
18789: POP
// end ;
18790: PPOPN 1
18792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18793: LD_EXP 64
18797: PUSH
18798: LD_EXP 84
18802: AND
18803: IFFALSE 18812
18805: GO 18807
18807: DISABLE
// StreamSibBomb ;
18808: CALL 18813 0 0
18812: END
// export function StreamSibBomb ; var i , x , y ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
// result := false ;
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// for i := 1 to 16 do
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: DOUBLE
18833: LD_INT 1
18835: DEC
18836: ST_TO_ADDR
18837: LD_INT 16
18839: PUSH
18840: FOR_TO
18841: IFFALSE 19040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 10
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 40
18859: PUSH
18860: LD_INT 50
18862: PUSH
18863: LD_INT 60
18865: PUSH
18866: LD_INT 70
18868: PUSH
18869: LD_INT 80
18871: PUSH
18872: LD_INT 90
18874: PUSH
18875: LD_INT 100
18877: PUSH
18878: LD_INT 110
18880: PUSH
18881: LD_INT 120
18883: PUSH
18884: LD_INT 130
18886: PUSH
18887: LD_INT 140
18889: PUSH
18890: LD_INT 150
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_INT 15
18915: PPUSH
18916: CALL_OW 12
18920: ARRAY
18921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18922: LD_ADDR_VAR 0 4
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 20
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 40
18938: PUSH
18939: LD_INT 50
18941: PUSH
18942: LD_INT 60
18944: PUSH
18945: LD_INT 70
18947: PUSH
18948: LD_INT 80
18950: PUSH
18951: LD_INT 90
18953: PUSH
18954: LD_INT 100
18956: PUSH
18957: LD_INT 110
18959: PUSH
18960: LD_INT 120
18962: PUSH
18963: LD_INT 130
18965: PUSH
18966: LD_INT 140
18968: PUSH
18969: LD_INT 150
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 15
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: ST_TO_ADDR
// if ValidHex ( x , y ) then
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 488
19015: IFFALSE 19038
// begin result := [ x , y ] ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 3
19026: PUSH
19027: LD_VAR 0 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// break ;
19036: GO 19040
// end ; end ;
19038: GO 18840
19040: POP
19041: POP
// if result then
19042: LD_VAR 0 1
19046: IFFALSE 19106
// begin ToLua ( playSibBomb() ) ;
19048: LD_STRING playSibBomb()
19050: PPUSH
19051: CALL_OW 559
// wait ( 0 0$14 ) ;
19055: LD_INT 490
19057: PPUSH
19058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 2
19078: ARRAY
19079: PPUSH
19080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: ARRAY
19092: PPUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PPUSH
19102: CALL_OW 429
// end ; end ;
19106: LD_VAR 0 1
19110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19111: LD_EXP 64
19115: PUSH
19116: LD_EXP 86
19120: AND
19121: IFFALSE 19133
19123: GO 19125
19125: DISABLE
// YouLost (  ) ;
19126: LD_STRING 
19128: PPUSH
19129: CALL_OW 104
19133: END
// every 0 0$1 trigger StreamModeActive and sFog do
19134: LD_EXP 64
19138: PUSH
19139: LD_EXP 85
19143: AND
19144: IFFALSE 19158
19146: GO 19148
19148: DISABLE
// FogOff ( your_side ) ;
19149: LD_OWVAR 2
19153: PPUSH
19154: CALL_OW 344
19158: END
// every 0 0$1 trigger StreamModeActive and sSun do
19159: LD_EXP 64
19163: PUSH
19164: LD_EXP 87
19168: AND
19169: IFFALSE 19197
19171: GO 19173
19173: DISABLE
// begin solar_recharge_percent := 0 ;
19174: LD_ADDR_OWVAR 79
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19182: LD_INT 10500
19184: PPUSH
19185: CALL_OW 67
// solar_recharge_percent := 100 ;
19189: LD_ADDR_OWVAR 79
19193: PUSH
19194: LD_INT 100
19196: ST_TO_ADDR
// end ;
19197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19198: LD_EXP 64
19202: PUSH
19203: LD_EXP 88
19207: AND
19208: IFFALSE 19447
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin tmp := [ ] ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: EMPTY
19224: ST_TO_ADDR
// for i := 1 to 6 do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 6
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19344
// begin uc_nation := nation_nature ;
19241: LD_ADDR_OWVAR 21
19245: PUSH
19246: LD_INT 0
19248: ST_TO_ADDR
// uc_side := 0 ;
19249: LD_ADDR_OWVAR 20
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19257: LD_ADDR_OWVAR 29
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: ST_TO_ADDR
// hc_agressivity := 20 ;
19272: LD_ADDR_OWVAR 35
19276: PUSH
19277: LD_INT 20
19279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19280: LD_ADDR_OWVAR 28
19284: PUSH
19285: LD_INT 17
19287: ST_TO_ADDR
// hc_gallery :=  ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING 
19295: ST_TO_ADDR
// hc_name :=  ;
19296: LD_ADDR_OWVAR 26
19300: PUSH
19301: LD_STRING 
19303: ST_TO_ADDR
// un := CreateHuman ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: CALL_OW 44
19313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 51
// tmp := tmp ^ un ;
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ADD
19341: ST_TO_ADDR
// end ;
19342: GO 19238
19344: POP
19345: POP
// repeat wait ( 0 0$1 ) ;
19346: LD_INT 35
19348: PPUSH
19349: CALL_OW 67
// for un in tmp do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19438
// begin if IsDead ( un ) then
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 301
19375: IFFALSE 19395
// begin tmp := tmp diff un ;
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 2
19391: DIFF
19392: ST_TO_ADDR
// continue ;
19393: GO 19363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 3
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 74
19431: PPUSH
19432: CALL_OW 115
// end ;
19436: GO 19363
19438: POP
19439: POP
// until not tmp ;
19440: LD_VAR 0 3
19444: NOT
19445: IFFALSE 19346
// end ;
19447: PPOPN 3
19449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19450: LD_EXP 64
19454: PUSH
19455: LD_EXP 89
19459: AND
19460: IFFALSE 19514
19462: GO 19464
19464: DISABLE
// begin ToLua ( displayTroll(); ) ;
19465: LD_STRING displayTroll();
19467: PPUSH
19468: CALL_OW 559
// wait ( 3 3$00 ) ;
19472: LD_INT 6300
19474: PPUSH
19475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19479: LD_STRING hideTroll();
19481: PPUSH
19482: CALL_OW 559
// wait ( 1 1$00 ) ;
19486: LD_INT 2100
19488: PPUSH
19489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19493: LD_STRING displayTroll();
19495: PPUSH
19496: CALL_OW 559
// wait ( 1 1$00 ) ;
19500: LD_INT 2100
19502: PPUSH
19503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19507: LD_STRING hideTroll();
19509: PPUSH
19510: CALL_OW 559
// end ;
19514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19515: LD_EXP 64
19519: PUSH
19520: LD_EXP 90
19524: AND
19525: IFFALSE 19588
19527: GO 19529
19529: DISABLE
19530: LD_INT 0
19532: PPUSH
// begin p := 0 ;
19533: LD_ADDR_VAR 0 1
19537: PUSH
19538: LD_INT 0
19540: ST_TO_ADDR
// repeat game_speed := 1 ;
19541: LD_ADDR_OWVAR 65
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19549: LD_INT 35
19551: PPUSH
19552: CALL_OW 67
// p := p + 1 ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 1
19568: PLUS
19569: ST_TO_ADDR
// until p >= 60 ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 60
19577: GREATEREQUAL
19578: IFFALSE 19541
// game_speed := 4 ;
19580: LD_ADDR_OWVAR 65
19584: PUSH
19585: LD_INT 4
19587: ST_TO_ADDR
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19591: LD_EXP 64
19595: PUSH
19596: LD_EXP 91
19600: AND
19601: IFFALSE 19747
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 30
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not depot then
19664: LD_VAR 0 1
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 12
19695: ARRAY
19696: PPUSH
19697: CALL_OW 274
19701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_INT 0
19712: PPUSH
19713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 2
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 3
19739: PPUSH
19740: LD_INT 0
19742: PPUSH
19743: CALL_OW 277
// end ;
19747: PPOPN 2
19749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19750: LD_EXP 64
19754: PUSH
19755: LD_EXP 92
19759: AND
19760: IFFALSE 19857
19762: GO 19764
19764: DISABLE
19765: LD_INT 0
19767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_OWVAR 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19831: LD_VAR 0 1
19835: PUSH
19836: LD_INT 1
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 12
19848: ARRAY
19849: PPUSH
19850: LD_INT 200
19852: PPUSH
19853: CALL_OW 234
// end ;
19857: PPOPN 1
19859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19860: LD_EXP 64
19864: PUSH
19865: LD_EXP 93
19869: AND
19870: IFFALSE 19949
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19878: LD_ADDR_VAR 0 1
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_OWVAR 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 21
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 69
19913: ST_TO_ADDR
// if not tmp then
19914: LD_VAR 0 1
19918: NOT
19919: IFFALSE 19923
// exit ;
19921: GO 19949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 1
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 12
19940: ARRAY
19941: PPUSH
19942: LD_INT 60
19944: PPUSH
19945: CALL_OW 234
// end ;
19949: PPOPN 1
19951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19952: LD_EXP 64
19956: PUSH
19957: LD_EXP 94
19961: AND
19962: IFFALSE 20061
19964: GO 19966
19966: DISABLE
19967: LD_INT 0
19969: PPUSH
19970: PPUSH
// begin enable ;
19971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_OWVAR 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 61
19991: PUSH
19992: EMPTY
19993: LIST
19994: PUSH
19995: LD_INT 33
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 1
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20061
// for i in tmp do
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20059
// if IsControledBy ( i ) then
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 312
20046: IFFALSE 20057
// ComUnlink ( i ) ;
20048: LD_VAR 0 2
20052: PPUSH
20053: CALL_OW 136
20057: GO 20034
20059: POP
20060: POP
// end ;
20061: PPOPN 2
20063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20064: LD_EXP 64
20068: PUSH
20069: LD_EXP 95
20073: AND
20074: IFFALSE 20214
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
// begin ToLua ( displayPowell(); ) ;
20083: LD_STRING displayPowell();
20085: PPUSH
20086: CALL_OW 559
// uc_side := 0 ;
20090: LD_ADDR_OWVAR 20
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// uc_nation := 2 ;
20098: LD_ADDR_OWVAR 21
20102: PUSH
20103: LD_INT 2
20105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20106: LD_ADDR_OWVAR 37
20110: PUSH
20111: LD_INT 14
20113: ST_TO_ADDR
// vc_engine := engine_siberite ;
20114: LD_ADDR_OWVAR 39
20118: PUSH
20119: LD_INT 3
20121: ST_TO_ADDR
// vc_control := control_apeman ;
20122: LD_ADDR_OWVAR 38
20126: PUSH
20127: LD_INT 5
20129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20130: LD_ADDR_OWVAR 40
20134: PUSH
20135: LD_INT 29
20137: ST_TO_ADDR
// un := CreateVehicle ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: CALL_OW 45
20147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 74
20198: PPUSH
20199: CALL_OW 115
// until IsDead ( un ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 301
20212: IFFALSE 20160
// end ;
20214: PPOPN 2
20216: END
// every 0 0$1 trigger StreamModeActive and sStu do
20217: LD_EXP 64
20221: PUSH
20222: LD_EXP 103
20226: AND
20227: IFFALSE 20243
20229: GO 20231
20231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ;
20243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20244: LD_EXP 64
20248: PUSH
20249: LD_EXP 96
20253: AND
20254: IFFALSE 20395
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_OWVAR 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PPUSH
20294: CALL_OW 69
20298: ST_TO_ADDR
// if not tmp then
20299: LD_VAR 0 2
20303: NOT
20304: IFFALSE 20308
// exit ;
20306: GO 20395
// un := tmp [ rand ( 1 , tmp ) ] ;
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 12
20330: ARRAY
20331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_OWVAR 3
20353: PUSH
20354: LD_VAR 0 1
20358: DIFF
20359: PPUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 74
20369: PPUSH
20370: CALL_OW 115
// wait ( 0 0$20 ) ;
20374: LD_INT 700
20376: PPUSH
20377: CALL_OW 67
// SetSide ( un , your_side ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: CALL_OW 235
// end ;
20395: PPOPN 2
20397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20398: LD_EXP 64
20402: PUSH
20403: LD_EXP 97
20407: AND
20408: IFFALSE 20514
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_OWVAR 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 30
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: ST_TO_ADDR
// if not depot then
20470: LD_VAR 0 1
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20479: LD_VAR 0 1
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 250
20492: PPUSH
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL_OW 251
20506: PPUSH
20507: LD_INT 70
20509: PPUSH
20510: CALL_OW 495
// end ;
20514: PPOPN 1
20516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20517: LD_EXP 64
20521: PUSH
20522: LD_EXP 98
20526: AND
20527: IFFALSE 20738
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_OWVAR 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PPUSH
20570: CALL_OW 69
20574: ST_TO_ADDR
// if not tmp then
20575: LD_VAR 0 5
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 20738
// for i in tmp do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20736
// begin d := rand ( 0 , 5 ) ;
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: LD_INT 0
20604: PPUSH
20605: LD_INT 5
20607: PPUSH
20608: CALL_OW 12
20612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20613: LD_ADDR_VAR 0 2
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 250
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_INT 3
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 12
20643: PPUSH
20644: CALL_OW 272
20648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 251
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_INT 3
20671: PPUSH
20672: LD_INT 12
20674: PPUSH
20675: CALL_OW 12
20679: PPUSH
20680: CALL_OW 273
20684: ST_TO_ADDR
// if ValidHex ( x , y ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: LD_VAR 0 3
20694: PPUSH
20695: CALL_OW 488
20699: IFFALSE 20734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 2
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: LD_INT 6
20721: PPUSH
20722: CALL_OW 12
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 483
// end ;
20734: GO 20594
20736: POP
20737: POP
// end ;
20738: PPOPN 5
20740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20741: LD_EXP 64
20745: PUSH
20746: LD_EXP 99
20750: AND
20751: IFFALSE 20845
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 32
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: ST_TO_ADDR
// if not tmp then
20807: LD_VAR 0 2
20811: NOT
20812: IFFALSE 20816
// exit ;
20814: GO 20845
// for i in tmp do
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: LD_VAR 0 2
20825: PUSH
20826: FOR_IN
20827: IFFALSE 20843
// SetFuel ( i , 0 ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_INT 0
20836: PPUSH
20837: CALL_OW 240
20841: GO 20826
20843: POP
20844: POP
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20848: LD_EXP 64
20852: PUSH
20853: LD_EXP 100
20857: AND
20858: IFFALSE 20924
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 29
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 1
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 20924
// DestroyUnit ( tmp [ 1 ] ) ;
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 65
// end ;
20924: PPOPN 1
20926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20927: LD_EXP 64
20931: PUSH
20932: LD_EXP 102
20936: AND
20937: IFFALSE 21066
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin uc_side := 0 ;
20945: LD_ADDR_OWVAR 20
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// uc_nation := nation_arabian ;
20953: LD_ADDR_OWVAR 21
20957: PUSH
20958: LD_INT 2
20960: ST_TO_ADDR
// hc_gallery :=  ;
20961: LD_ADDR_OWVAR 33
20965: PUSH
20966: LD_STRING 
20968: ST_TO_ADDR
// hc_name :=  ;
20969: LD_ADDR_OWVAR 26
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20977: LD_INT 1
20979: PPUSH
20980: LD_INT 11
20982: PPUSH
20983: LD_INT 10
20985: PPUSH
20986: CALL_OW 380
// un := CreateHuman ;
20990: LD_ADDR_VAR 0 1
20994: PUSH
20995: CALL_OW 44
20999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21012: LD_INT 35
21014: PPUSH
21015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until IsDead ( un ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 301
21064: IFFALSE 21012
// end ;
21066: PPOPN 1
21068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21069: LD_EXP 64
21073: PUSH
21074: LD_EXP 104
21078: AND
21079: IFFALSE 21091
21081: GO 21083
21083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21084: LD_STRING earthquake(getX(game), 0, 32)
21086: PPUSH
21087: CALL_OW 559
21091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21092: LD_EXP 64
21096: PUSH
21097: LD_EXP 105
21101: AND
21102: IFFALSE 21193
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
// begin enable ;
21110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21111: LD_ADDR_VAR 0 1
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 33
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 1
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 1
21174: PPUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: CALL_OW 12
21184: ARRAY
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 234
// end ;
21193: PPOPN 1
21195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21196: LD_EXP 64
21200: PUSH
21201: LD_EXP 106
21205: AND
21206: IFFALSE 21347
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_OWVAR 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 3
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21347
// un := tmp [ rand ( 1 , tmp ) ] ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 3
21270: PUSH
21271: LD_INT 1
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: CALL_OW 12
21283: ARRAY
21284: ST_TO_ADDR
// if Crawls ( un ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 318
21294: IFFALSE 21305
// ComWalk ( un ) ;
21296: LD_VAR 0 2
21300: PPUSH
21301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21305: LD_VAR 0 2
21309: PPUSH
21310: LD_INT 9
21312: PPUSH
21313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21317: LD_INT 28
21319: PPUSH
21320: LD_OWVAR 2
21324: PPUSH
21325: LD_INT 2
21327: PPUSH
21328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21332: LD_INT 29
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 322
// end ;
21347: PPOPN 3
21349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21350: LD_EXP 64
21354: PUSH
21355: LD_EXP 107
21359: AND
21360: IFFALSE 21471
21362: GO 21364
21364: DISABLE
21365: LD_INT 0
21367: PPUSH
21368: PPUSH
21369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 69
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 21471
// un := tmp [ rand ( 1 , tmp ) ] ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 1
21427: PPUSH
21428: LD_VAR 0 3
21432: PPUSH
21433: CALL_OW 12
21437: ARRAY
21438: ST_TO_ADDR
// if Crawls ( un ) then
21439: LD_VAR 0 2
21443: PPUSH
21444: CALL_OW 318
21448: IFFALSE 21459
// ComWalk ( un ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_INT 8
21466: PPUSH
21467: CALL_OW 336
// end ;
21471: PPOPN 3
21473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21474: LD_EXP 64
21478: PUSH
21479: LD_EXP 108
21483: AND
21484: IFFALSE 21628
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_OWVAR 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 12
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 34
21535: PUSH
21536: LD_INT 51
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 34
21545: PUSH
21546: LD_INT 32
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21628
// for i in tmp do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21626
// if GetCargo ( i , mat_artifact ) = 0 then
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_INT 4
21598: PPUSH
21599: CALL_OW 289
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: IFFALSE 21624
// SetCargo ( i , mat_siberit , 100 ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 3
21616: PPUSH
21617: LD_INT 100
21619: PPUSH
21620: CALL_OW 290
21624: GO 21588
21626: POP
21627: POP
// end ;
21628: PPOPN 2
21630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21631: LD_EXP 64
21635: PUSH
21636: LD_EXP 109
21640: AND
21641: IFFALSE 21824
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_OWVAR 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not tmp then
21672: LD_VAR 0 2
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21824
// for i := 1 to 2 do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: DOUBLE
21687: LD_INT 1
21689: DEC
21690: ST_TO_ADDR
21691: LD_INT 2
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21822
// begin uc_side := your_side ;
21697: LD_ADDR_OWVAR 20
21701: PUSH
21702: LD_OWVAR 2
21706: ST_TO_ADDR
// uc_nation := nation_american ;
21707: LD_ADDR_OWVAR 21
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// vc_chassis := us_morphling ;
21715: LD_ADDR_OWVAR 37
21719: PUSH
21720: LD_INT 5
21722: ST_TO_ADDR
// vc_engine := engine_siberite ;
21723: LD_ADDR_OWVAR 39
21727: PUSH
21728: LD_INT 3
21730: ST_TO_ADDR
// vc_control := control_computer ;
21731: LD_ADDR_OWVAR 38
21735: PUSH
21736: LD_INT 3
21738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21739: LD_ADDR_OWVAR 40
21743: PUSH
21744: LD_INT 10
21746: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21747: LD_VAR 0 2
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: CALL_OW 310
21760: NOT
21761: IFFALSE 21808
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21763: CALL_OW 45
21767: PPUSH
21768: LD_VAR 0 2
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PPUSH
21777: CALL_OW 250
21781: PPUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: CALL_OW 251
21795: PPUSH
21796: LD_INT 12
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 50
21806: GO 21820
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21808: CALL_OW 45
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 51
// end ;
21820: GO 21694
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21827: LD_EXP 64
21831: PUSH
21832: LD_EXP 110
21836: AND
21837: IFFALSE 22059
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21850: LD_ADDR_VAR 0 6
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// if not tmp then
21904: LD_VAR 0 6
21908: NOT
21909: IFFALSE 21913
// exit ;
21911: GO 22059
// s1 := rand ( 1 , 4 ) ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_INT 4
21923: PPUSH
21924: CALL_OW 12
21928: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 6
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 259
21952: ST_TO_ADDR
// if s1 = 1 then
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: EQUAL
21961: IFFALSE 21981
// s2 := rand ( 2 , 4 ) else
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_INT 2
21970: PPUSH
21971: LD_INT 4
21973: PPUSH
21974: CALL_OW 12
21978: ST_TO_ADDR
21979: GO 21989
// s2 := 1 ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21989: LD_ADDR_VAR 0 5
21993: PUSH
21994: LD_VAR 0 6
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 259
22012: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22013: LD_VAR 0 6
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22036: LD_VAR 0 6
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: CALL_OW 237
// end ;
22059: PPOPN 6
22061: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22062: LD_EXP 64
22066: PUSH
22067: LD_EXP 111
22071: AND
22072: IFFALSE 22151
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22080: LD_ADDR_VAR 0 1
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_OWVAR 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 1
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 1
22132: PPUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 12
22142: ARRAY
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 234
// end ;
22151: PPOPN 1
22153: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22154: LD_EXP 64
22158: PUSH
22159: LD_EXP 112
22163: AND
22164: IFFALSE 22276
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_OWVAR 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 27
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 26
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 28
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PPUSH
22233: CALL_OW 69
22237: ST_TO_ADDR
// if not tmp then
22238: LD_VAR 0 2
22242: NOT
22243: IFFALSE 22247
// exit ;
22245: GO 22276
// for i in tmp do
22247: LD_ADDR_VAR 0 1
22251: PUSH
22252: LD_VAR 0 2
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22274
// SetLives ( i , 1 ) ;
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 234
22272: GO 22257
22274: POP
22275: POP
// end ;
22276: PPOPN 2
22278: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22279: LD_EXP 64
22283: PUSH
22284: LD_EXP 113
22288: AND
22289: IFFALSE 22576
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
22298: PPUSH
// begin i := rand ( 1 , 7 ) ;
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_INT 7
22309: PPUSH
22310: CALL_OW 12
22314: ST_TO_ADDR
// case i of 1 :
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22338
22328: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22329: LD_STRING earthquake(getX(game), 0, 32)
22331: PPUSH
22332: CALL_OW 559
22336: GO 22576
22338: LD_INT 2
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22360
22346: POP
// begin ToLua ( displayStucuk(); ) ;
22347: LD_STRING displayStucuk();
22349: PPUSH
22350: CALL_OW 559
// ResetFog ;
22354: CALL_OW 335
// end ; 3 :
22358: GO 22576
22360: LD_INT 3
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22368
22366: GO 22472
22368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_OWVAR 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 2
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22576
// un := tmp [ rand ( 1 , tmp ) ] ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_VAR 0 2
22423: PUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 12
22436: ARRAY
22437: ST_TO_ADDR
// if Crawls ( un ) then
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 318
22447: IFFALSE 22458
// ComWalk ( un ) ;
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22458: LD_VAR 0 3
22462: PPUSH
22463: LD_INT 8
22465: PPUSH
22466: CALL_OW 336
// end ; 4 :
22470: GO 22576
22472: LD_INT 4
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22554
22480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_OWVAR 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: LD_INT 29
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: ST_TO_ADDR
// if not tmp then
22517: LD_VAR 0 2
22521: NOT
22522: IFFALSE 22526
// exit ;
22524: GO 22576
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22526: LD_VAR 0 2
22530: PUSH
22531: LD_INT 1
22533: ARRAY
22534: PPUSH
22535: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: CALL_OW 65
// end ; 5 .. 7 :
22552: GO 22576
22554: LD_INT 5
22556: DOUBLE
22557: GREATEREQUAL
22558: IFFALSE 22566
22560: LD_INT 7
22562: DOUBLE
22563: LESSEQUAL
22564: IFTRUE 22568
22566: GO 22575
22568: POP
// StreamSibBomb ; end ;
22569: CALL 18813 0 0
22573: GO 22576
22575: POP
// end ;
22576: PPOPN 3
22578: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22579: LD_EXP 64
22583: PUSH
22584: LD_EXP 114
22588: AND
22589: IFFALSE 22745
22591: GO 22593
22593: DISABLE
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 81
22606: PUSH
22607: LD_OWVAR 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 2
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22745
// p := 0 ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_INT 0
22669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// p := p + 1 ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: ST_TO_ADDR
// for i in tmp do
22691: LD_ADDR_VAR 0 1
22695: PUSH
22696: LD_VAR 0 2
22700: PUSH
22701: FOR_IN
22702: IFFALSE 22733
// if GetLives ( i ) < 1000 then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 256
22713: PUSH
22714: LD_INT 1000
22716: LESS
22717: IFFALSE 22731
// SetLives ( i , 1000 ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 1000
22726: PPUSH
22727: CALL_OW 234
22731: GO 22701
22733: POP
22734: POP
// until p > 20 ;
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 20
22742: GREATER
22743: IFFALSE 22670
// end ;
22745: PPOPN 3
22747: END
// every 0 0$1 trigger StreamModeActive and sTime do
22748: LD_EXP 64
22752: PUSH
22753: LD_EXP 115
22757: AND
22758: IFFALSE 22793
22760: GO 22762
22762: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22763: LD_INT 28
22765: PPUSH
22766: LD_OWVAR 2
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22778: LD_INT 30
22780: PPUSH
22781: LD_OWVAR 2
22785: PPUSH
22786: LD_INT 2
22788: PPUSH
22789: CALL_OW 322
// end ;
22793: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22794: LD_EXP 64
22798: PUSH
22799: LD_EXP 116
22803: AND
22804: IFFALSE 22925
22806: GO 22808
22808: DISABLE
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_OWVAR 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 21
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 23
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: ST_TO_ADDR
// if not tmp then
22867: LD_VAR 0 2
22871: NOT
22872: IFFALSE 22876
// exit ;
22874: GO 22925
// for i in tmp do
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_VAR 0 2
22885: PUSH
22886: FOR_IN
22887: IFFALSE 22923
// begin if Crawls ( i ) then
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 318
22898: IFFALSE 22909
// ComWalk ( i ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 138
// SetClass ( i , 2 ) ;
22909: LD_VAR 0 1
22913: PPUSH
22914: LD_INT 2
22916: PPUSH
22917: CALL_OW 336
// end ;
22921: GO 22886
22923: POP
22924: POP
// end ;
22925: PPOPN 2
22927: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22928: LD_EXP 64
22932: PUSH
22933: LD_EXP 117
22937: AND
22938: IFFALSE 23226
22940: GO 22942
22942: DISABLE
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22948: LD_OWVAR 2
22952: PPUSH
22953: LD_INT 9
22955: PPUSH
22956: LD_INT 1
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22966: LD_INT 9
22968: PPUSH
22969: LD_OWVAR 2
22973: PPUSH
22974: CALL_OW 343
// uc_side := 9 ;
22978: LD_ADDR_OWVAR 20
22982: PUSH
22983: LD_INT 9
22985: ST_TO_ADDR
// uc_nation := 2 ;
22986: LD_ADDR_OWVAR 21
22990: PUSH
22991: LD_INT 2
22993: ST_TO_ADDR
// hc_name := Dark Warrior ;
22994: LD_ADDR_OWVAR 26
22998: PUSH
22999: LD_STRING Dark Warrior
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_noskilllimit := true ;
23010: LD_ADDR_OWVAR 76
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23018: LD_ADDR_OWVAR 31
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// un := CreateHuman ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: CALL_OW 44
23050: ST_TO_ADDR
// hc_noskilllimit := false ;
23051: LD_ADDR_OWVAR 76
23055: PUSH
23056: LD_INT 0
23058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 51
// ToLua ( playRanger() ) ;
23071: LD_STRING playRanger()
23073: PPUSH
23074: CALL_OW 559
// p := 0 ;
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23086: LD_INT 35
23088: PPUSH
23089: CALL_OW 67
// p := p + 1 ;
23093: LD_ADDR_VAR 0 2
23097: PUSH
23098: LD_VAR 0 2
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23107: LD_VAR 0 3
23111: PPUSH
23112: CALL_OW 256
23116: PUSH
23117: LD_INT 1000
23119: LESS
23120: IFFALSE 23134
// SetLives ( un , 1000 ) ;
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 1000
23129: PPUSH
23130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 81
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 91
23153: PUSH
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 74
23185: PPUSH
23186: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23190: LD_VAR 0 2
23194: PUSH
23195: LD_INT 80
23197: GREATER
23198: PUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: CALL_OW 301
23208: OR
23209: IFFALSE 23086
// if un then
23211: LD_VAR 0 3
23215: IFFALSE 23226
// RemoveUnit ( un ) ;
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 64
// end ;
23226: PPOPN 3
23228: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23229: LD_EXP 118
23233: IFFALSE 23349
23235: GO 23237
23237: DISABLE
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 81
23250: PUSH
23251: LD_OWVAR 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PPUSH
23274: CALL_OW 69
23278: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23279: LD_STRING playComputer()
23281: PPUSH
23282: CALL_OW 559
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23349
// for i in tmp do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23347
// for j := 1 to 4 do
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: DOUBLE
23314: LD_INT 1
23316: DEC
23317: ST_TO_ADDR
23318: LD_INT 4
23320: PUSH
23321: FOR_TO
23322: IFFALSE 23343
// SetSkill ( i , j , 10 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 237
23341: GO 23321
23343: POP
23344: POP
23345: GO 23305
23347: POP
23348: POP
// end ;
23349: PPOPN 3
23351: END
// every 0 0$1 trigger s30 do var i , tmp ;
23352: LD_EXP 119
23356: IFFALSE 23425
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PPUSH
23382: CALL_OW 69
23386: ST_TO_ADDR
// if not tmp then
23387: LD_VAR 0 2
23391: NOT
23392: IFFALSE 23396
// exit ;
23394: GO 23425
// for i in tmp do
23396: LD_ADDR_VAR 0 1
23400: PUSH
23401: LD_VAR 0 2
23405: PUSH
23406: FOR_IN
23407: IFFALSE 23423
// SetLives ( i , 300 ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: LD_INT 300
23416: PPUSH
23417: CALL_OW 234
23421: GO 23406
23423: POP
23424: POP
// end ;
23425: PPOPN 2
23427: END
// every 0 0$1 trigger s60 do var i , tmp ;
23428: LD_EXP 120
23432: IFFALSE 23501
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23441: LD_ADDR_VAR 0 2
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_OWVAR 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 69
23462: ST_TO_ADDR
// if not tmp then
23463: LD_VAR 0 2
23467: NOT
23468: IFFALSE 23472
// exit ;
23470: GO 23501
// for i in tmp do
23472: LD_ADDR_VAR 0 1
23476: PUSH
23477: LD_VAR 0 2
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// SetLives ( i , 600 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 600
23492: PPUSH
23493: CALL_OW 234
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 2
23503: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23504: LD_INT 0
23506: PPUSH
// case cmd of 301 :
23507: LD_VAR 0 1
23511: PUSH
23512: LD_INT 301
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23552
23520: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: LD_VAR 0 8
23535: PPUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: CALL 24753 0 5
23550: GO 23673
23552: LD_INT 302
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23597
23560: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: LD_VAR 0 8
23575: PPUSH
23576: LD_VAR 0 9
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: LD_VAR 0 5
23590: PPUSH
23591: CALL 24844 0 6
23595: GO 23673
23597: LD_INT 303
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23642
23605: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23606: LD_VAR 0 6
23610: PPUSH
23611: LD_VAR 0 7
23615: PPUSH
23616: LD_VAR 0 8
23620: PPUSH
23621: LD_VAR 0 9
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_VAR 0 5
23635: PPUSH
23636: CALL 23678 0 6
23640: GO 23673
23642: LD_INT 304
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23672
23650: POP
// hHackTeleport ( unit , x , y ) ; end ;
23651: LD_VAR 0 2
23655: PPUSH
23656: LD_VAR 0 4
23660: PPUSH
23661: LD_VAR 0 5
23665: PPUSH
23666: CALL 25437 0 3
23670: GO 23673
23672: POP
// end ;
23673: LD_VAR 0 12
23677: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23682: LD_VAR 0 1
23686: PUSH
23687: LD_INT 1
23689: LESS
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 3
23698: GREATER
23699: OR
23700: PUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: CALL_OW 428
23715: OR
23716: IFFALSE 23720
// exit ;
23718: GO 24440
// uc_side := your_side ;
23720: LD_ADDR_OWVAR 20
23724: PUSH
23725: LD_OWVAR 2
23729: ST_TO_ADDR
// uc_nation := nation ;
23730: LD_ADDR_OWVAR 21
23734: PUSH
23735: LD_VAR 0 1
23739: ST_TO_ADDR
// bc_level = 1 ;
23740: LD_ADDR_OWVAR 43
23744: PUSH
23745: LD_INT 1
23747: ST_TO_ADDR
// case btype of 1 :
23748: LD_VAR 0 2
23752: PUSH
23753: LD_INT 1
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23772
23761: POP
// bc_type := b_depot ; 2 :
23762: LD_ADDR_OWVAR 42
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
23770: GO 24384
23772: LD_INT 2
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23791
23780: POP
// bc_type := b_warehouse ; 3 :
23781: LD_ADDR_OWVAR 42
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
23789: GO 24384
23791: LD_INT 3
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23810
23799: POP
// bc_type := b_lab ; 4 .. 9 :
23800: LD_ADDR_OWVAR 42
23804: PUSH
23805: LD_INT 6
23807: ST_TO_ADDR
23808: GO 24384
23810: LD_INT 4
23812: DOUBLE
23813: GREATEREQUAL
23814: IFFALSE 23822
23816: LD_INT 9
23818: DOUBLE
23819: LESSEQUAL
23820: IFTRUE 23824
23822: GO 23876
23824: POP
// begin bc_type := b_lab_half ;
23825: LD_ADDR_OWVAR 42
23829: PUSH
23830: LD_INT 7
23832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23833: LD_ADDR_OWVAR 44
23837: PUSH
23838: LD_INT 10
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 12
23846: PUSH
23847: LD_INT 15
23849: PUSH
23850: LD_INT 14
23852: PUSH
23853: LD_INT 13
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_VAR 0 2
23868: PUSH
23869: LD_INT 3
23871: MINUS
23872: ARRAY
23873: ST_TO_ADDR
// end ; 10 .. 13 :
23874: GO 24384
23876: LD_INT 10
23878: DOUBLE
23879: GREATEREQUAL
23880: IFFALSE 23888
23882: LD_INT 13
23884: DOUBLE
23885: LESSEQUAL
23886: IFTRUE 23890
23888: GO 23967
23890: POP
// begin bc_type := b_lab_full ;
23891: LD_ADDR_OWVAR 42
23895: PUSH
23896: LD_INT 8
23898: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23899: LD_ADDR_OWVAR 44
23903: PUSH
23904: LD_INT 10
23906: PUSH
23907: LD_INT 12
23909: PUSH
23910: LD_INT 14
23912: PUSH
23913: LD_INT 13
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: LD_VAR 0 2
23926: PUSH
23927: LD_INT 9
23929: MINUS
23930: ARRAY
23931: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23932: LD_ADDR_OWVAR 45
23936: PUSH
23937: LD_INT 11
23939: PUSH
23940: LD_INT 15
23942: PUSH
23943: LD_INT 12
23945: PUSH
23946: LD_INT 15
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: PUSH
23955: LD_VAR 0 2
23959: PUSH
23960: LD_INT 9
23962: MINUS
23963: ARRAY
23964: ST_TO_ADDR
// end ; 14 :
23965: GO 24384
23967: LD_INT 14
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 23986
23975: POP
// bc_type := b_workshop ; 15 :
23976: LD_ADDR_OWVAR 42
23980: PUSH
23981: LD_INT 2
23983: ST_TO_ADDR
23984: GO 24384
23986: LD_INT 15
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24005
23994: POP
// bc_type := b_factory ; 16 :
23995: LD_ADDR_OWVAR 42
23999: PUSH
24000: LD_INT 3
24002: ST_TO_ADDR
24003: GO 24384
24005: LD_INT 16
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24013
24011: GO 24024
24013: POP
// bc_type := b_ext_gun ; 17 :
24014: LD_ADDR_OWVAR 42
24018: PUSH
24019: LD_INT 17
24021: ST_TO_ADDR
24022: GO 24384
24024: LD_INT 17
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24060
24032: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24033: LD_ADDR_OWVAR 42
24037: PUSH
24038: LD_INT 19
24040: PUSH
24041: LD_INT 23
24043: PUSH
24044: LD_INT 19
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_VAR 0 1
24056: ARRAY
24057: ST_TO_ADDR
24058: GO 24384
24060: LD_INT 18
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24079
24068: POP
// bc_type := b_ext_radar ; 19 :
24069: LD_ADDR_OWVAR 42
24073: PUSH
24074: LD_INT 20
24076: ST_TO_ADDR
24077: GO 24384
24079: LD_INT 19
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24098
24087: POP
// bc_type := b_ext_radio ; 20 :
24088: LD_ADDR_OWVAR 42
24092: PUSH
24093: LD_INT 22
24095: ST_TO_ADDR
24096: GO 24384
24098: LD_INT 20
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24117
24106: POP
// bc_type := b_ext_siberium ; 21 :
24107: LD_ADDR_OWVAR 42
24111: PUSH
24112: LD_INT 21
24114: ST_TO_ADDR
24115: GO 24384
24117: LD_INT 21
24119: DOUBLE
24120: EQUAL
24121: IFTRUE 24125
24123: GO 24136
24125: POP
// bc_type := b_ext_computer ; 22 :
24126: LD_ADDR_OWVAR 42
24130: PUSH
24131: LD_INT 24
24133: ST_TO_ADDR
24134: GO 24384
24136: LD_INT 22
24138: DOUBLE
24139: EQUAL
24140: IFTRUE 24144
24142: GO 24155
24144: POP
// bc_type := b_ext_track ; 23 :
24145: LD_ADDR_OWVAR 42
24149: PUSH
24150: LD_INT 16
24152: ST_TO_ADDR
24153: GO 24384
24155: LD_INT 23
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24174
24163: POP
// bc_type := b_ext_laser ; 24 :
24164: LD_ADDR_OWVAR 42
24168: PUSH
24169: LD_INT 25
24171: ST_TO_ADDR
24172: GO 24384
24174: LD_INT 24
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24193
24182: POP
// bc_type := b_control_tower ; 25 :
24183: LD_ADDR_OWVAR 42
24187: PUSH
24188: LD_INT 36
24190: ST_TO_ADDR
24191: GO 24384
24193: LD_INT 25
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24212
24201: POP
// bc_type := b_breastwork ; 26 :
24202: LD_ADDR_OWVAR 42
24206: PUSH
24207: LD_INT 31
24209: ST_TO_ADDR
24210: GO 24384
24212: LD_INT 26
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_bunker ; 27 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 32
24228: ST_TO_ADDR
24229: GO 24384
24231: LD_INT 27
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24250
24239: POP
// bc_type := b_turret ; 28 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 33
24247: ST_TO_ADDR
24248: GO 24384
24250: LD_INT 28
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24269
24258: POP
// bc_type := b_armoury ; 29 :
24259: LD_ADDR_OWVAR 42
24263: PUSH
24264: LD_INT 4
24266: ST_TO_ADDR
24267: GO 24384
24269: LD_INT 29
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24288
24277: POP
// bc_type := b_barracks ; 30 :
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 5
24285: ST_TO_ADDR
24286: GO 24384
24288: LD_INT 30
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24307
24296: POP
// bc_type := b_solar_power ; 31 :
24297: LD_ADDR_OWVAR 42
24301: PUSH
24302: LD_INT 27
24304: ST_TO_ADDR
24305: GO 24384
24307: LD_INT 31
24309: DOUBLE
24310: EQUAL
24311: IFTRUE 24315
24313: GO 24326
24315: POP
// bc_type := b_oil_power ; 32 :
24316: LD_ADDR_OWVAR 42
24320: PUSH
24321: LD_INT 26
24323: ST_TO_ADDR
24324: GO 24384
24326: LD_INT 32
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24345
24334: POP
// bc_type := b_siberite_power ; 33 :
24335: LD_ADDR_OWVAR 42
24339: PUSH
24340: LD_INT 28
24342: ST_TO_ADDR
24343: GO 24384
24345: LD_INT 33
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24364
24353: POP
// bc_type := b_oil_mine ; 34 :
24354: LD_ADDR_OWVAR 42
24358: PUSH
24359: LD_INT 29
24361: ST_TO_ADDR
24362: GO 24384
24364: LD_INT 34
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24383
24372: POP
// bc_type := b_siberite_mine ; end ;
24373: LD_ADDR_OWVAR 42
24377: PUSH
24378: LD_INT 30
24380: ST_TO_ADDR
24381: GO 24384
24383: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24384: LD_ADDR_VAR 0 8
24388: PUSH
24389: LD_VAR 0 5
24393: PPUSH
24394: LD_VAR 0 6
24398: PPUSH
24399: LD_VAR 0 3
24403: PPUSH
24404: CALL_OW 47
24408: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24409: LD_OWVAR 42
24413: PUSH
24414: LD_INT 32
24416: PUSH
24417: LD_INT 33
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: IN
24424: IFFALSE 24440
// PlaceWeaponTurret ( b , weapon ) ;
24426: LD_VAR 0 8
24430: PPUSH
24431: LD_VAR 0 4
24435: PPUSH
24436: CALL_OW 431
// end ;
24440: LD_VAR 0 7
24444: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24445: LD_INT 0
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: LD_INT 22
24458: PUSH
24459: LD_OWVAR 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 30
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: ST_TO_ADDR
// if not tmp then
24505: LD_VAR 0 4
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24573
// for i in tmp do
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: FOR_IN
24525: IFFALSE 24571
// for j = 1 to 3 do
24527: LD_ADDR_VAR 0 3
24531: PUSH
24532: DOUBLE
24533: LD_INT 1
24535: DEC
24536: ST_TO_ADDR
24537: LD_INT 3
24539: PUSH
24540: FOR_TO
24541: IFFALSE 24567
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL_OW 274
24552: PPUSH
24553: LD_VAR 0 3
24557: PPUSH
24558: LD_INT 99999
24560: PPUSH
24561: CALL_OW 277
24565: GO 24540
24567: POP
24568: POP
24569: GO 24524
24571: POP
24572: POP
// end ;
24573: LD_VAR 0 1
24577: RET
// export function hHackSetLevel10 ; var i , j ; begin
24578: LD_INT 0
24580: PPUSH
24581: PPUSH
24582: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24583: LD_ADDR_VAR 0 2
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: PUSH
24603: FOR_IN
24604: IFFALSE 24656
// if IsSelected ( i ) then
24606: LD_VAR 0 2
24610: PPUSH
24611: CALL_OW 306
24615: IFFALSE 24654
// begin for j := 1 to 4 do
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: DOUBLE
24623: LD_INT 1
24625: DEC
24626: ST_TO_ADDR
24627: LD_INT 4
24629: PUSH
24630: FOR_TO
24631: IFFALSE 24652
// SetSkill ( i , j , 10 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_VAR 0 3
24642: PPUSH
24643: LD_INT 10
24645: PPUSH
24646: CALL_OW 237
24650: GO 24630
24652: POP
24653: POP
// end ;
24654: GO 24603
24656: POP
24657: POP
// end ;
24658: LD_VAR 0 1
24662: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
24667: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_OWVAR 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 21
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24746
// begin for j := 1 to 4 do
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: DOUBLE
24713: LD_INT 1
24715: DEC
24716: ST_TO_ADDR
24717: LD_INT 4
24719: PUSH
24720: FOR_TO
24721: IFFALSE 24742
// SetSkill ( i , j , 10 ) ;
24723: LD_VAR 0 2
24727: PPUSH
24728: LD_VAR 0 3
24732: PPUSH
24733: LD_INT 10
24735: PPUSH
24736: CALL_OW 237
24740: GO 24720
24742: POP
24743: POP
// end ;
24744: GO 24704
24746: POP
24747: POP
// end ;
24748: LD_VAR 0 1
24752: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24753: LD_INT 0
24755: PPUSH
// uc_side := your_side ;
24756: LD_ADDR_OWVAR 20
24760: PUSH
24761: LD_OWVAR 2
24765: ST_TO_ADDR
// uc_nation := nation ;
24766: LD_ADDR_OWVAR 21
24770: PUSH
24771: LD_VAR 0 1
24775: ST_TO_ADDR
// InitHc ;
24776: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24780: LD_INT 0
24782: PPUSH
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24797: LD_VAR 0 4
24801: PPUSH
24802: LD_VAR 0 5
24806: PPUSH
24807: CALL_OW 428
24811: PUSH
24812: LD_INT 0
24814: EQUAL
24815: IFFALSE 24839
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24817: CALL_OW 44
24821: PPUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: LD_VAR 0 5
24831: PPUSH
24832: LD_INT 1
24834: PPUSH
24835: CALL_OW 48
// end ;
24839: LD_VAR 0 6
24843: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24844: LD_INT 0
24846: PPUSH
24847: PPUSH
// uc_side := your_side ;
24848: LD_ADDR_OWVAR 20
24852: PUSH
24853: LD_OWVAR 2
24857: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24858: LD_VAR 0 1
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: LD_INT 5
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: IN
24885: IFFALSE 24897
// uc_nation := nation_american else
24887: LD_ADDR_OWVAR 21
24891: PUSH
24892: LD_INT 1
24894: ST_TO_ADDR
24895: GO 24940
// if chassis in [ 11 , 12 , 13 , 14 ] then
24897: LD_VAR 0 1
24901: PUSH
24902: LD_INT 11
24904: PUSH
24905: LD_INT 12
24907: PUSH
24908: LD_INT 13
24910: PUSH
24911: LD_INT 14
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: IN
24920: IFFALSE 24932
// uc_nation := nation_arabian else
24922: LD_ADDR_OWVAR 21
24926: PUSH
24927: LD_INT 2
24929: ST_TO_ADDR
24930: GO 24940
// uc_nation := nation_russian ;
24932: LD_ADDR_OWVAR 21
24936: PUSH
24937: LD_INT 3
24939: ST_TO_ADDR
// vc_chassis := chassis ;
24940: LD_ADDR_OWVAR 37
24944: PUSH
24945: LD_VAR 0 1
24949: ST_TO_ADDR
// vc_engine := engine ;
24950: LD_ADDR_OWVAR 39
24954: PUSH
24955: LD_VAR 0 2
24959: ST_TO_ADDR
// vc_control := control ;
24960: LD_ADDR_OWVAR 38
24964: PUSH
24965: LD_VAR 0 3
24969: ST_TO_ADDR
// vc_weapon := weapon ;
24970: LD_ADDR_OWVAR 40
24974: PUSH
24975: LD_VAR 0 4
24979: ST_TO_ADDR
// un := CreateVehicle ;
24980: LD_ADDR_VAR 0 8
24984: PUSH
24985: CALL_OW 45
24989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24990: LD_VAR 0 8
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: LD_INT 5
25000: PPUSH
25001: CALL_OW 12
25005: PPUSH
25006: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25010: LD_VAR 0 8
25014: PPUSH
25015: LD_VAR 0 5
25019: PPUSH
25020: LD_VAR 0 6
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 48
// end ;
25032: LD_VAR 0 7
25036: RET
// export hInvincible ; every 1 do
25037: GO 25039
25039: DISABLE
// hInvincible := [ ] ;
25040: LD_ADDR_EXP 121
25044: PUSH
25045: EMPTY
25046: ST_TO_ADDR
25047: END
// every 10 do var i ;
25048: GO 25050
25050: DISABLE
25051: LD_INT 0
25053: PPUSH
// begin enable ;
25054: ENABLE
// if not hInvincible then
25055: LD_EXP 121
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25108
// for i in hInvincible do
25064: LD_ADDR_VAR 0 1
25068: PUSH
25069: LD_EXP 121
25073: PUSH
25074: FOR_IN
25075: IFFALSE 25106
// if GetLives ( i ) < 1000 then
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 256
25086: PUSH
25087: LD_INT 1000
25089: LESS
25090: IFFALSE 25104
// SetLives ( i , 1000 ) ;
25092: LD_VAR 0 1
25096: PPUSH
25097: LD_INT 1000
25099: PPUSH
25100: CALL_OW 234
25104: GO 25074
25106: POP
25107: POP
// end ;
25108: PPOPN 1
25110: END
// export function hHackInvincible ; var i ; begin
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 21
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 21
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: PUSH
25153: FOR_IN
25154: IFFALSE 25215
// if IsSelected ( i ) then
25156: LD_VAR 0 2
25160: PPUSH
25161: CALL_OW 306
25165: IFFALSE 25213
// begin if i in hInvincible then
25167: LD_VAR 0 2
25171: PUSH
25172: LD_EXP 121
25176: IN
25177: IFFALSE 25197
// hInvincible := hInvincible diff i else
25179: LD_ADDR_EXP 121
25183: PUSH
25184: LD_EXP 121
25188: PUSH
25189: LD_VAR 0 2
25193: DIFF
25194: ST_TO_ADDR
25195: GO 25213
// hInvincible := hInvincible union i ;
25197: LD_ADDR_EXP 121
25201: PUSH
25202: LD_EXP 121
25206: PUSH
25207: LD_VAR 0 2
25211: UNION
25212: ST_TO_ADDR
// end ;
25213: GO 25153
25215: POP
25216: POP
// end ;
25217: LD_VAR 0 1
25221: RET
// export function hHackInvisible ; var i , j ; begin
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
25226: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25227: LD_ADDR_VAR 0 2
25231: PUSH
25232: LD_INT 21
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: PUSH
25247: FOR_IN
25248: IFFALSE 25272
// if IsSelected ( i ) then
25250: LD_VAR 0 2
25254: PPUSH
25255: CALL_OW 306
25259: IFFALSE 25270
// ComForceInvisible ( i ) ;
25261: LD_VAR 0 2
25265: PPUSH
25266: CALL_OW 496
25270: GO 25247
25272: POP
25273: POP
// end ;
25274: LD_VAR 0 1
25278: RET
// export function hHackChangeYourSide ; begin
25279: LD_INT 0
25281: PPUSH
// if your_side = 8 then
25282: LD_OWVAR 2
25286: PUSH
25287: LD_INT 8
25289: EQUAL
25290: IFFALSE 25302
// your_side := 0 else
25292: LD_ADDR_OWVAR 2
25296: PUSH
25297: LD_INT 0
25299: ST_TO_ADDR
25300: GO 25316
// your_side := your_side + 1 ;
25302: LD_ADDR_OWVAR 2
25306: PUSH
25307: LD_OWVAR 2
25311: PUSH
25312: LD_INT 1
25314: PLUS
25315: ST_TO_ADDR
// end ;
25316: LD_VAR 0 1
25320: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25321: LD_INT 0
25323: PPUSH
25324: PPUSH
25325: PPUSH
// for i in all_units do
25326: LD_ADDR_VAR 0 2
25330: PUSH
25331: LD_OWVAR 3
25335: PUSH
25336: FOR_IN
25337: IFFALSE 25415
// if IsSelected ( i ) then
25339: LD_VAR 0 2
25343: PPUSH
25344: CALL_OW 306
25348: IFFALSE 25413
// begin j := GetSide ( i ) ;
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_VAR 0 2
25359: PPUSH
25360: CALL_OW 255
25364: ST_TO_ADDR
// if j = 8 then
25365: LD_VAR 0 3
25369: PUSH
25370: LD_INT 8
25372: EQUAL
25373: IFFALSE 25385
// j := 0 else
25375: LD_ADDR_VAR 0 3
25379: PUSH
25380: LD_INT 0
25382: ST_TO_ADDR
25383: GO 25399
// j := j + 1 ;
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_VAR 0 3
25394: PUSH
25395: LD_INT 1
25397: PLUS
25398: ST_TO_ADDR
// SetSide ( i , j ) ;
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL_OW 235
// end ;
25413: GO 25336
25415: POP
25416: POP
// end ;
25417: LD_VAR 0 1
25421: RET
// export function hHackFog ; begin
25422: LD_INT 0
25424: PPUSH
// FogOff ( true ) ;
25425: LD_INT 1
25427: PPUSH
25428: CALL_OW 344
// end ;
25432: LD_VAR 0 1
25436: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25437: LD_INT 0
25439: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_VAR 0 3
25454: PPUSH
25455: LD_INT 1
25457: PPUSH
25458: LD_INT 1
25460: PPUSH
25461: CALL_OW 483
// CenterOnXY ( x , y ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 84
// end ;
25479: LD_VAR 0 4
25483: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25484: LD_INT 0
25486: PPUSH
25487: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25488: LD_VAR 0 1
25492: NOT
25493: PUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 488
25508: NOT
25509: OR
25510: PUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 266
25520: PUSH
25521: LD_INT 3
25523: NONEQUAL
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 247
25534: PUSH
25535: LD_INT 1
25537: EQUAL
25538: NOT
25539: AND
25540: OR
25541: IFFALSE 25545
// exit ;
25543: GO 25694
// if GetType ( factory ) = unit_human then
25545: LD_VAR 0 1
25549: PPUSH
25550: CALL_OW 247
25554: PUSH
25555: LD_INT 1
25557: EQUAL
25558: IFFALSE 25575
// factory := IsInUnit ( factory ) ;
25560: LD_ADDR_VAR 0 1
25564: PUSH
25565: LD_VAR 0 1
25569: PPUSH
25570: CALL_OW 310
25574: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 266
25584: PUSH
25585: LD_INT 3
25587: NONEQUAL
25588: IFFALSE 25592
// exit ;
25590: GO 25694
// if HexInfo ( x , y ) = factory then
25592: LD_VAR 0 2
25596: PPUSH
25597: LD_VAR 0 3
25601: PPUSH
25602: CALL_OW 428
25606: PUSH
25607: LD_VAR 0 1
25611: EQUAL
25612: IFFALSE 25639
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25614: LD_ADDR_EXP 122
25618: PUSH
25619: LD_EXP 122
25623: PPUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 0
25631: PPUSH
25632: CALL_OW 1
25636: ST_TO_ADDR
25637: GO 25690
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25639: LD_ADDR_EXP 122
25643: PUSH
25644: LD_EXP 122
25648: PPUSH
25649: LD_VAR 0 1
25653: PPUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 255
25663: PUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_VAR 0 2
25673: PUSH
25674: LD_VAR 0 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 1
25689: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25690: CALL 25699 0 0
// end ;
25694: LD_VAR 0 4
25698: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25699: LD_INT 0
25701: PPUSH
25702: PPUSH
25703: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25704: LD_STRING resetFactoryWaypoint();
25706: PPUSH
25707: CALL_OW 559
// if factoryWaypoints then
25711: LD_EXP 122
25715: IFFALSE 25841
// begin list := PrepareArray ( factoryWaypoints ) ;
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: LD_EXP 122
25726: PPUSH
25727: CALL 72273 0 1
25731: ST_TO_ADDR
// for i := 1 to list do
25732: LD_ADDR_VAR 0 2
25736: PUSH
25737: DOUBLE
25738: LD_INT 1
25740: DEC
25741: ST_TO_ADDR
25742: LD_VAR 0 3
25746: PUSH
25747: FOR_TO
25748: IFFALSE 25839
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25750: LD_STRING setFactoryWaypointXY(
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_VAR 0 2
25762: ARRAY
25763: PUSH
25764: LD_INT 1
25766: ARRAY
25767: STR
25768: PUSH
25769: LD_STRING ,
25771: STR
25772: PUSH
25773: LD_VAR 0 3
25777: PUSH
25778: LD_VAR 0 2
25782: ARRAY
25783: PUSH
25784: LD_INT 2
25786: ARRAY
25787: STR
25788: PUSH
25789: LD_STRING ,
25791: STR
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: PUSH
25804: LD_INT 3
25806: ARRAY
25807: STR
25808: PUSH
25809: LD_STRING ,
25811: STR
25812: PUSH
25813: LD_VAR 0 3
25817: PUSH
25818: LD_VAR 0 2
25822: ARRAY
25823: PUSH
25824: LD_INT 4
25826: ARRAY
25827: STR
25828: PUSH
25829: LD_STRING )
25831: STR
25832: PPUSH
25833: CALL_OW 559
25837: GO 25747
25839: POP
25840: POP
// end ; end ;
25841: LD_VAR 0 1
25845: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25846: LD_INT 0
25848: PPUSH
// if HexInfo ( x , y ) = warehouse then
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_VAR 0 3
25858: PPUSH
25859: CALL_OW 428
25863: PUSH
25864: LD_VAR 0 1
25868: EQUAL
25869: IFFALSE 25896
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25871: LD_ADDR_EXP 123
25875: PUSH
25876: LD_EXP 123
25880: PPUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
25894: GO 25947
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25896: LD_ADDR_EXP 123
25900: PUSH
25901: LD_EXP 123
25905: PPUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 255
25920: PUSH
25921: LD_VAR 0 1
25925: PUSH
25926: LD_VAR 0 2
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 1
25946: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25947: CALL 25956 0 0
// end ;
25951: LD_VAR 0 4
25955: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25961: LD_STRING resetWarehouseGatheringPoints();
25963: PPUSH
25964: CALL_OW 559
// if warehouseGatheringPoints then
25968: LD_EXP 123
25972: IFFALSE 26098
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_EXP 123
25983: PPUSH
25984: CALL 72273 0 1
25988: ST_TO_ADDR
// for i := 1 to list do
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: DOUBLE
25995: LD_INT 1
25997: DEC
25998: ST_TO_ADDR
25999: LD_VAR 0 3
26003: PUSH
26004: FOR_TO
26005: IFFALSE 26096
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26007: LD_STRING setWarehouseGatheringPointXY(
26009: PUSH
26010: LD_VAR 0 3
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 2
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING ,
26048: STR
26049: PUSH
26050: LD_VAR 0 3
26054: PUSH
26055: LD_VAR 0 2
26059: ARRAY
26060: PUSH
26061: LD_INT 3
26063: ARRAY
26064: STR
26065: PUSH
26066: LD_STRING ,
26068: STR
26069: PUSH
26070: LD_VAR 0 3
26074: PUSH
26075: LD_VAR 0 2
26079: ARRAY
26080: PUSH
26081: LD_INT 4
26083: ARRAY
26084: STR
26085: PUSH
26086: LD_STRING )
26088: STR
26089: PPUSH
26090: CALL_OW 559
26094: GO 26004
26096: POP
26097: POP
// end ; end ;
26098: LD_VAR 0 1
26102: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26103: LD_EXP 123
26107: IFFALSE 26794
26109: GO 26111
26111: DISABLE
26112: LD_INT 0
26114: PPUSH
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
// begin enable ;
26123: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_EXP 123
26133: PPUSH
26134: CALL 72273 0 1
26138: ST_TO_ADDR
// if not list then
26139: LD_VAR 0 3
26143: NOT
26144: IFFALSE 26148
// exit ;
26146: GO 26794
// for i := 1 to list do
26148: LD_ADDR_VAR 0 1
26152: PUSH
26153: DOUBLE
26154: LD_INT 1
26156: DEC
26157: ST_TO_ADDR
26158: LD_VAR 0 3
26162: PUSH
26163: FOR_TO
26164: IFFALSE 26792
// begin depot := list [ i ] [ 2 ] ;
26166: LD_ADDR_VAR 0 8
26170: PUSH
26171: LD_VAR 0 3
26175: PUSH
26176: LD_VAR 0 1
26180: ARRAY
26181: PUSH
26182: LD_INT 2
26184: ARRAY
26185: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26186: LD_ADDR_VAR 0 5
26190: PUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 1
26200: ARRAY
26201: PUSH
26202: LD_INT 1
26204: ARRAY
26205: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26206: LD_VAR 0 8
26210: PPUSH
26211: CALL_OW 301
26215: PUSH
26216: LD_VAR 0 5
26220: PUSH
26221: LD_VAR 0 8
26225: PPUSH
26226: CALL_OW 255
26230: NONEQUAL
26231: OR
26232: IFFALSE 26261
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26234: LD_ADDR_EXP 123
26238: PUSH
26239: LD_EXP 123
26243: PPUSH
26244: LD_VAR 0 8
26248: PPUSH
26249: LD_INT 0
26251: PPUSH
26252: CALL_OW 1
26256: ST_TO_ADDR
// exit ;
26257: POP
26258: POP
26259: GO 26794
// end ; x := list [ i ] [ 3 ] ;
26261: LD_ADDR_VAR 0 6
26265: PUSH
26266: LD_VAR 0 3
26270: PUSH
26271: LD_VAR 0 1
26275: ARRAY
26276: PUSH
26277: LD_INT 3
26279: ARRAY
26280: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26281: LD_ADDR_VAR 0 7
26285: PUSH
26286: LD_VAR 0 3
26290: PUSH
26291: LD_VAR 0 1
26295: ARRAY
26296: PUSH
26297: LD_INT 4
26299: ARRAY
26300: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26301: LD_ADDR_VAR 0 9
26305: PUSH
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_VAR 0 7
26315: PPUSH
26316: LD_INT 16
26318: PPUSH
26319: CALL 70857 0 3
26323: ST_TO_ADDR
// if not cratesNearbyPoint then
26324: LD_VAR 0 9
26328: NOT
26329: IFFALSE 26335
// exit ;
26331: POP
26332: POP
26333: GO 26794
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26335: LD_ADDR_VAR 0 4
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_VAR 0 5
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 60
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 91
26367: PUSH
26368: LD_VAR 0 8
26372: PUSH
26373: LD_INT 6
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 16
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: PPUSH
26415: CALL_OW 69
26419: PUSH
26420: LD_VAR 0 8
26424: PPUSH
26425: CALL_OW 313
26429: PPUSH
26430: LD_INT 3
26432: PUSH
26433: LD_INT 60
26435: PUSH
26436: EMPTY
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 25
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 25
26458: PUSH
26459: LD_INT 16
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 72
26479: UNION
26480: ST_TO_ADDR
// if tmp then
26481: LD_VAR 0 4
26485: IFFALSE 26565
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_VAR 0 4
26496: PPUSH
26497: LD_INT 3
26499: PPUSH
26500: CALL 68824 0 2
26504: ST_TO_ADDR
// for j in tmp do
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: LD_VAR 0 4
26514: PUSH
26515: FOR_IN
26516: IFFALSE 26559
// begin if IsInUnit ( j ) then
26518: LD_VAR 0 2
26522: PPUSH
26523: CALL_OW 310
26527: IFFALSE 26538
// ComExit ( j ) ;
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL 68907 0 1
// AddComCollect ( j , x , y ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: LD_VAR 0 6
26547: PPUSH
26548: LD_VAR 0 7
26552: PPUSH
26553: CALL_OW 177
// end ;
26557: GO 26515
26559: POP
26560: POP
// exit ;
26561: POP
26562: POP
26563: GO 26794
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26565: LD_ADDR_VAR 0 4
26569: PUSH
26570: LD_INT 22
26572: PUSH
26573: LD_VAR 0 5
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 91
26584: PUSH
26585: LD_VAR 0 8
26589: PUSH
26590: LD_INT 8
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: LD_INT 34
26603: PUSH
26604: LD_INT 12
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 34
26613: PUSH
26614: LD_INT 51
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 34
26623: PUSH
26624: LD_INT 32
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 34
26633: PUSH
26634: LD_EXP 47
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: PPUSH
26655: CALL_OW 69
26659: ST_TO_ADDR
// if tmp then
26660: LD_VAR 0 4
26664: IFFALSE 26790
// begin for j in tmp do
26666: LD_ADDR_VAR 0 2
26670: PUSH
26671: LD_VAR 0 4
26675: PUSH
26676: FOR_IN
26677: IFFALSE 26788
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26679: LD_VAR 0 2
26683: PPUSH
26684: CALL_OW 262
26688: PUSH
26689: LD_INT 3
26691: EQUAL
26692: PUSH
26693: LD_VAR 0 2
26697: PPUSH
26698: CALL_OW 261
26702: PUSH
26703: LD_INT 20
26705: GREATER
26706: OR
26707: PUSH
26708: LD_VAR 0 2
26712: PPUSH
26713: CALL_OW 314
26717: NOT
26718: AND
26719: PUSH
26720: LD_VAR 0 2
26724: PPUSH
26725: CALL_OW 263
26729: PUSH
26730: LD_INT 1
26732: NONEQUAL
26733: PUSH
26734: LD_VAR 0 2
26738: PPUSH
26739: CALL_OW 311
26743: OR
26744: AND
26745: IFFALSE 26786
// begin ComCollect ( j , x , y ) ;
26747: LD_VAR 0 2
26751: PPUSH
26752: LD_VAR 0 6
26756: PPUSH
26757: LD_VAR 0 7
26761: PPUSH
26762: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26766: LD_VAR 0 2
26770: PPUSH
26771: LD_VAR 0 8
26775: PPUSH
26776: CALL_OW 172
// exit ;
26780: POP
26781: POP
26782: POP
26783: POP
26784: GO 26794
// end ;
26786: GO 26676
26788: POP
26789: POP
// end ; end ;
26790: GO 26163
26792: POP
26793: POP
// end ; end_of_file
26794: PPOPN 9
26796: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26797: LD_INT 0
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 264
26812: PUSH
26813: LD_EXP 50
26817: EQUAL
26818: IFFALSE 26890
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26820: LD_INT 68
26822: PPUSH
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL_OW 255
26832: PPUSH
26833: CALL_OW 321
26837: PUSH
26838: LD_INT 2
26840: EQUAL
26841: IFFALSE 26853
// eff := 70 else
26843: LD_ADDR_VAR 0 4
26847: PUSH
26848: LD_INT 70
26850: ST_TO_ADDR
26851: GO 26861
// eff := 30 ;
26853: LD_ADDR_VAR 0 4
26857: PUSH
26858: LD_INT 30
26860: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26861: LD_VAR 0 1
26865: PPUSH
26866: CALL_OW 250
26870: PPUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 251
26880: PPUSH
26881: LD_VAR 0 4
26885: PPUSH
26886: CALL_OW 495
// end ; end ;
26890: LD_VAR 0 2
26894: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26895: LD_INT 0
26897: PPUSH
// end ;
26898: LD_VAR 0 4
26902: RET
// export function SOS_Command ( cmd ) ; begin
26903: LD_INT 0
26905: PPUSH
// end ;
26906: LD_VAR 0 2
26910: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26911: LD_INT 0
26913: PPUSH
// end ;
26914: LD_VAR 0 6
26918: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26919: LD_INT 0
26921: PPUSH
26922: PPUSH
// if not vehicle or not factory then
26923: LD_VAR 0 1
26927: NOT
26928: PUSH
26929: LD_VAR 0 2
26933: NOT
26934: OR
26935: IFFALSE 26939
// exit ;
26937: GO 27170
// if factoryWaypoints >= factory then
26939: LD_EXP 122
26943: PUSH
26944: LD_VAR 0 2
26948: GREATEREQUAL
26949: IFFALSE 27170
// if factoryWaypoints [ factory ] then
26951: LD_EXP 122
26955: PUSH
26956: LD_VAR 0 2
26960: ARRAY
26961: IFFALSE 27170
// begin if GetControl ( vehicle ) = control_manual then
26963: LD_VAR 0 1
26967: PPUSH
26968: CALL_OW 263
26972: PUSH
26973: LD_INT 1
26975: EQUAL
26976: IFFALSE 27057
// begin driver := IsDrivenBy ( vehicle ) ;
26978: LD_ADDR_VAR 0 4
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 311
26992: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26993: LD_VAR 0 4
26997: PPUSH
26998: LD_EXP 122
27002: PUSH
27003: LD_VAR 0 2
27007: ARRAY
27008: PUSH
27009: LD_INT 3
27011: ARRAY
27012: PPUSH
27013: LD_EXP 122
27017: PUSH
27018: LD_VAR 0 2
27022: ARRAY
27023: PUSH
27024: LD_INT 4
27026: ARRAY
27027: PPUSH
27028: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27032: LD_VAR 0 4
27036: PPUSH
27037: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27041: LD_VAR 0 4
27045: PPUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: CALL_OW 180
// end else
27055: GO 27170
// if GetControl ( vehicle ) = control_remote then
27057: LD_VAR 0 1
27061: PPUSH
27062: CALL_OW 263
27066: PUSH
27067: LD_INT 2
27069: EQUAL
27070: IFFALSE 27131
// begin wait ( 0 0$2 ) ;
27072: LD_INT 70
27074: PPUSH
27075: CALL_OW 67
// if Connect ( vehicle ) then
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL 39218 0 1
27088: IFFALSE 27129
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27090: LD_VAR 0 1
27094: PPUSH
27095: LD_EXP 122
27099: PUSH
27100: LD_VAR 0 2
27104: ARRAY
27105: PUSH
27106: LD_INT 3
27108: ARRAY
27109: PPUSH
27110: LD_EXP 122
27114: PUSH
27115: LD_VAR 0 2
27119: ARRAY
27120: PUSH
27121: LD_INT 4
27123: ARRAY
27124: PPUSH
27125: CALL_OW 171
// end else
27129: GO 27170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27131: LD_VAR 0 1
27135: PPUSH
27136: LD_EXP 122
27140: PUSH
27141: LD_VAR 0 2
27145: ARRAY
27146: PUSH
27147: LD_INT 3
27149: ARRAY
27150: PPUSH
27151: LD_EXP 122
27155: PUSH
27156: LD_VAR 0 2
27160: ARRAY
27161: PUSH
27162: LD_INT 4
27164: ARRAY
27165: PPUSH
27166: CALL_OW 171
// end ; end ;
27170: LD_VAR 0 3
27174: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27175: LD_INT 0
27177: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27178: LD_VAR 0 1
27182: PUSH
27183: LD_INT 250
27185: EQUAL
27186: PUSH
27187: LD_VAR 0 2
27191: PPUSH
27192: CALL_OW 264
27196: PUSH
27197: LD_EXP 53
27201: EQUAL
27202: AND
27203: IFFALSE 27224
// MinerPlaceMine ( unit , x , y ) ;
27205: LD_VAR 0 2
27209: PPUSH
27210: LD_VAR 0 4
27214: PPUSH
27215: LD_VAR 0 5
27219: PPUSH
27220: CALL 29623 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27224: LD_VAR 0 1
27228: PUSH
27229: LD_INT 251
27231: EQUAL
27232: PUSH
27233: LD_VAR 0 2
27237: PPUSH
27238: CALL_OW 264
27242: PUSH
27243: LD_EXP 53
27247: EQUAL
27248: AND
27249: IFFALSE 27270
// MinerDetonateMine ( unit , x , y ) ;
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_VAR 0 4
27260: PPUSH
27261: LD_VAR 0 5
27265: PPUSH
27266: CALL 29900 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27270: LD_VAR 0 1
27274: PUSH
27275: LD_INT 252
27277: EQUAL
27278: PUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 264
27288: PUSH
27289: LD_EXP 53
27293: EQUAL
27294: AND
27295: IFFALSE 27316
// MinerCreateMinefield ( unit , x , y ) ;
27297: LD_VAR 0 2
27301: PPUSH
27302: LD_VAR 0 4
27306: PPUSH
27307: LD_VAR 0 5
27311: PPUSH
27312: CALL 30317 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27316: LD_VAR 0 1
27320: PUSH
27321: LD_INT 253
27323: EQUAL
27324: PUSH
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 257
27334: PUSH
27335: LD_INT 5
27337: EQUAL
27338: AND
27339: IFFALSE 27360
// ComBinocular ( unit , x , y ) ;
27341: LD_VAR 0 2
27345: PPUSH
27346: LD_VAR 0 4
27350: PPUSH
27351: LD_VAR 0 5
27355: PPUSH
27356: CALL 30688 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27360: LD_VAR 0 1
27364: PUSH
27365: LD_INT 254
27367: EQUAL
27368: PUSH
27369: LD_VAR 0 2
27373: PPUSH
27374: CALL_OW 264
27378: PUSH
27379: LD_EXP 48
27383: EQUAL
27384: AND
27385: PUSH
27386: LD_VAR 0 3
27390: PPUSH
27391: CALL_OW 263
27395: PUSH
27396: LD_INT 3
27398: EQUAL
27399: AND
27400: IFFALSE 27416
// HackDestroyVehicle ( unit , selectedUnit ) ;
27402: LD_VAR 0 2
27406: PPUSH
27407: LD_VAR 0 3
27411: PPUSH
27412: CALL 28983 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27416: LD_VAR 0 1
27420: PUSH
27421: LD_INT 255
27423: EQUAL
27424: PUSH
27425: LD_VAR 0 2
27429: PPUSH
27430: CALL_OW 264
27434: PUSH
27435: LD_INT 14
27437: PUSH
27438: LD_INT 53
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: IN
27445: AND
27446: PUSH
27447: LD_VAR 0 4
27451: PPUSH
27452: LD_VAR 0 5
27456: PPUSH
27457: CALL_OW 488
27461: AND
27462: IFFALSE 27486
// CutTreeXYR ( unit , x , y , 12 ) ;
27464: LD_VAR 0 2
27468: PPUSH
27469: LD_VAR 0 4
27473: PPUSH
27474: LD_VAR 0 5
27478: PPUSH
27479: LD_INT 12
27481: PPUSH
27482: CALL 27549 0 4
// if cmd = 256 then
27486: LD_VAR 0 1
27490: PUSH
27491: LD_INT 256
27493: EQUAL
27494: IFFALSE 27515
// SetFactoryWaypoint ( unit , x , y ) ;
27496: LD_VAR 0 2
27500: PPUSH
27501: LD_VAR 0 4
27505: PPUSH
27506: LD_VAR 0 5
27510: PPUSH
27511: CALL 25484 0 3
// if cmd = 257 then
27515: LD_VAR 0 1
27519: PUSH
27520: LD_INT 257
27522: EQUAL
27523: IFFALSE 27544
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27525: LD_VAR 0 2
27529: PPUSH
27530: LD_VAR 0 4
27534: PPUSH
27535: LD_VAR 0 5
27539: PPUSH
27540: CALL 25846 0 3
// end ;
27544: LD_VAR 0 6
27548: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27549: LD_INT 0
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27560: LD_VAR 0 1
27564: NOT
27565: PUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 3
27575: PPUSH
27576: CALL_OW 488
27580: NOT
27581: OR
27582: PUSH
27583: LD_VAR 0 4
27587: NOT
27588: OR
27589: IFFALSE 27593
// exit ;
27591: GO 27933
// list := [ ] ;
27593: LD_ADDR_VAR 0 13
27597: PUSH
27598: EMPTY
27599: ST_TO_ADDR
// if x - r < 0 then
27600: LD_VAR 0 2
27604: PUSH
27605: LD_VAR 0 4
27609: MINUS
27610: PUSH
27611: LD_INT 0
27613: LESS
27614: IFFALSE 27626
// min_x := 0 else
27616: LD_ADDR_VAR 0 7
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
27624: GO 27642
// min_x := x - r ;
27626: LD_ADDR_VAR 0 7
27630: PUSH
27631: LD_VAR 0 2
27635: PUSH
27636: LD_VAR 0 4
27640: MINUS
27641: ST_TO_ADDR
// if y - r < 0 then
27642: LD_VAR 0 3
27646: PUSH
27647: LD_VAR 0 4
27651: MINUS
27652: PUSH
27653: LD_INT 0
27655: LESS
27656: IFFALSE 27668
// min_y := 0 else
27658: LD_ADDR_VAR 0 8
27662: PUSH
27663: LD_INT 0
27665: ST_TO_ADDR
27666: GO 27684
// min_y := y - r ;
27668: LD_ADDR_VAR 0 8
27672: PUSH
27673: LD_VAR 0 3
27677: PUSH
27678: LD_VAR 0 4
27682: MINUS
27683: ST_TO_ADDR
// max_x := x + r ;
27684: LD_ADDR_VAR 0 9
27688: PUSH
27689: LD_VAR 0 2
27693: PUSH
27694: LD_VAR 0 4
27698: PLUS
27699: ST_TO_ADDR
// max_y := y + r ;
27700: LD_ADDR_VAR 0 10
27704: PUSH
27705: LD_VAR 0 3
27709: PUSH
27710: LD_VAR 0 4
27714: PLUS
27715: ST_TO_ADDR
// for _x = min_x to max_x do
27716: LD_ADDR_VAR 0 11
27720: PUSH
27721: DOUBLE
27722: LD_VAR 0 7
27726: DEC
27727: ST_TO_ADDR
27728: LD_VAR 0 9
27732: PUSH
27733: FOR_TO
27734: IFFALSE 27851
// for _y = min_y to max_y do
27736: LD_ADDR_VAR 0 12
27740: PUSH
27741: DOUBLE
27742: LD_VAR 0 8
27746: DEC
27747: ST_TO_ADDR
27748: LD_VAR 0 10
27752: PUSH
27753: FOR_TO
27754: IFFALSE 27847
// begin if not ValidHex ( _x , _y ) then
27756: LD_VAR 0 11
27760: PPUSH
27761: LD_VAR 0 12
27765: PPUSH
27766: CALL_OW 488
27770: NOT
27771: IFFALSE 27775
// continue ;
27773: GO 27753
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27775: LD_VAR 0 11
27779: PPUSH
27780: LD_VAR 0 12
27784: PPUSH
27785: CALL_OW 351
27789: PUSH
27790: LD_VAR 0 11
27794: PPUSH
27795: LD_VAR 0 12
27799: PPUSH
27800: CALL_OW 554
27804: AND
27805: IFFALSE 27845
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27807: LD_ADDR_VAR 0 13
27811: PUSH
27812: LD_VAR 0 13
27816: PPUSH
27817: LD_VAR 0 13
27821: PUSH
27822: LD_INT 1
27824: PLUS
27825: PPUSH
27826: LD_VAR 0 11
27830: PUSH
27831: LD_VAR 0 12
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PPUSH
27840: CALL_OW 2
27844: ST_TO_ADDR
// end ;
27845: GO 27753
27847: POP
27848: POP
27849: GO 27733
27851: POP
27852: POP
// if not list then
27853: LD_VAR 0 13
27857: NOT
27858: IFFALSE 27862
// exit ;
27860: GO 27933
// for i in list do
27862: LD_ADDR_VAR 0 6
27866: PUSH
27867: LD_VAR 0 13
27871: PUSH
27872: FOR_IN
27873: IFFALSE 27931
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27875: LD_VAR 0 1
27879: PPUSH
27880: LD_STRING M
27882: PUSH
27883: LD_VAR 0 6
27887: PUSH
27888: LD_INT 1
27890: ARRAY
27891: PUSH
27892: LD_VAR 0 6
27896: PUSH
27897: LD_INT 2
27899: ARRAY
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: PUSH
27922: EMPTY
27923: LIST
27924: PPUSH
27925: CALL_OW 447
27929: GO 27872
27931: POP
27932: POP
// end ;
27933: LD_VAR 0 5
27937: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27938: LD_EXP 125
27942: NOT
27943: IFFALSE 27993
27945: GO 27947
27947: DISABLE
// begin initHack := true ;
27948: LD_ADDR_EXP 125
27952: PUSH
27953: LD_INT 1
27955: ST_TO_ADDR
// hackTanks := [ ] ;
27956: LD_ADDR_EXP 126
27960: PUSH
27961: EMPTY
27962: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27963: LD_ADDR_EXP 127
27967: PUSH
27968: EMPTY
27969: ST_TO_ADDR
// hackLimit := 3 ;
27970: LD_ADDR_EXP 128
27974: PUSH
27975: LD_INT 3
27977: ST_TO_ADDR
// hackDist := 12 ;
27978: LD_ADDR_EXP 129
27982: PUSH
27983: LD_INT 12
27985: ST_TO_ADDR
// hackCounter := [ ] ;
27986: LD_ADDR_EXP 130
27990: PUSH
27991: EMPTY
27992: ST_TO_ADDR
// end ;
27993: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27994: LD_EXP 125
27998: PUSH
27999: LD_INT 34
28001: PUSH
28002: LD_EXP 48
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PPUSH
28011: CALL_OW 69
28015: AND
28016: IFFALSE 28271
28018: GO 28020
28020: DISABLE
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
// begin enable ;
28025: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28026: LD_ADDR_VAR 0 1
28030: PUSH
28031: LD_INT 34
28033: PUSH
28034: LD_EXP 48
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PPUSH
28043: CALL_OW 69
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28269
// begin if not i in hackTanks then
28051: LD_VAR 0 1
28055: PUSH
28056: LD_EXP 126
28060: IN
28061: NOT
28062: IFFALSE 28145
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28064: LD_ADDR_EXP 126
28068: PUSH
28069: LD_EXP 126
28073: PPUSH
28074: LD_EXP 126
28078: PUSH
28079: LD_INT 1
28081: PLUS
28082: PPUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: CALL_OW 1
28092: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28093: LD_ADDR_EXP 127
28097: PUSH
28098: LD_EXP 127
28102: PPUSH
28103: LD_EXP 127
28107: PUSH
28108: LD_INT 1
28110: PLUS
28111: PPUSH
28112: EMPTY
28113: PPUSH
28114: CALL_OW 1
28118: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28119: LD_ADDR_EXP 130
28123: PUSH
28124: LD_EXP 130
28128: PPUSH
28129: LD_EXP 130
28133: PUSH
28134: LD_INT 1
28136: PLUS
28137: PPUSH
28138: EMPTY
28139: PPUSH
28140: CALL_OW 1
28144: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28145: LD_VAR 0 1
28149: PPUSH
28150: CALL_OW 302
28154: NOT
28155: IFFALSE 28168
// begin HackUnlinkAll ( i ) ;
28157: LD_VAR 0 1
28161: PPUSH
28162: CALL 28274 0 1
// continue ;
28166: GO 28048
// end ; HackCheckCapturedStatus ( i ) ;
28168: LD_VAR 0 1
28172: PPUSH
28173: CALL 28717 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: LD_INT 81
28184: PUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL_OW 255
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 33
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 91
28211: PUSH
28212: LD_VAR 0 1
28216: PUSH
28217: LD_EXP 129
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 50
28229: PUSH
28230: EMPTY
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: PPUSH
28239: CALL_OW 69
28243: ST_TO_ADDR
// if not tmp then
28244: LD_VAR 0 2
28248: NOT
28249: IFFALSE 28253
// continue ;
28251: GO 28048
// HackLink ( i , tmp ) ;
28253: LD_VAR 0 1
28257: PPUSH
28258: LD_VAR 0 2
28262: PPUSH
28263: CALL 28410 0 2
// end ;
28267: GO 28048
28269: POP
28270: POP
// end ;
28271: PPOPN 2
28273: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28274: LD_INT 0
28276: PPUSH
28277: PPUSH
28278: PPUSH
// if not hack in hackTanks then
28279: LD_VAR 0 1
28283: PUSH
28284: LD_EXP 126
28288: IN
28289: NOT
28290: IFFALSE 28294
// exit ;
28292: GO 28405
// index := GetElementIndex ( hackTanks , hack ) ;
28294: LD_ADDR_VAR 0 4
28298: PUSH
28299: LD_EXP 126
28303: PPUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL 36032 0 2
28313: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28314: LD_EXP 127
28318: PUSH
28319: LD_VAR 0 4
28323: ARRAY
28324: IFFALSE 28405
// begin for i in hackTanksCaptured [ index ] do
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_EXP 127
28335: PUSH
28336: LD_VAR 0 4
28340: ARRAY
28341: PUSH
28342: FOR_IN
28343: IFFALSE 28369
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28345: LD_VAR 0 3
28349: PUSH
28350: LD_INT 1
28352: ARRAY
28353: PPUSH
28354: LD_VAR 0 3
28358: PUSH
28359: LD_INT 2
28361: ARRAY
28362: PPUSH
28363: CALL_OW 235
28367: GO 28342
28369: POP
28370: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28371: LD_ADDR_EXP 127
28375: PUSH
28376: LD_EXP 127
28380: PPUSH
28381: LD_VAR 0 4
28385: PPUSH
28386: EMPTY
28387: PPUSH
28388: CALL_OW 1
28392: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28393: LD_VAR 0 1
28397: PPUSH
28398: LD_INT 0
28400: PPUSH
28401: CALL_OW 505
// end ; end ;
28405: LD_VAR 0 2
28409: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28410: LD_INT 0
28412: PPUSH
28413: PPUSH
28414: PPUSH
// if not hack in hackTanks or not vehicles then
28415: LD_VAR 0 1
28419: PUSH
28420: LD_EXP 126
28424: IN
28425: NOT
28426: PUSH
28427: LD_VAR 0 2
28431: NOT
28432: OR
28433: IFFALSE 28437
// exit ;
28435: GO 28712
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28437: LD_ADDR_VAR 0 2
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: LD_VAR 0 2
28451: PPUSH
28452: LD_INT 1
28454: PPUSH
28455: LD_INT 1
28457: PPUSH
28458: CALL 36682 0 4
28462: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: LD_EXP 126
28472: PPUSH
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL 36032 0 2
28482: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28483: LD_EXP 127
28487: PUSH
28488: LD_VAR 0 5
28492: ARRAY
28493: PUSH
28494: LD_EXP 128
28498: LESS
28499: IFFALSE 28688
// begin for i := 1 to vehicles do
28501: LD_ADDR_VAR 0 4
28505: PUSH
28506: DOUBLE
28507: LD_INT 1
28509: DEC
28510: ST_TO_ADDR
28511: LD_VAR 0 2
28515: PUSH
28516: FOR_TO
28517: IFFALSE 28686
// begin if hackTanksCaptured [ index ] = hackLimit then
28519: LD_EXP 127
28523: PUSH
28524: LD_VAR 0 5
28528: ARRAY
28529: PUSH
28530: LD_EXP 128
28534: EQUAL
28535: IFFALSE 28539
// break ;
28537: GO 28686
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28539: LD_ADDR_EXP 130
28543: PUSH
28544: LD_EXP 130
28548: PPUSH
28549: LD_VAR 0 5
28553: PPUSH
28554: LD_EXP 130
28558: PUSH
28559: LD_VAR 0 5
28563: ARRAY
28564: PUSH
28565: LD_INT 1
28567: PLUS
28568: PPUSH
28569: CALL_OW 1
28573: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28574: LD_ADDR_EXP 127
28578: PUSH
28579: LD_EXP 127
28583: PPUSH
28584: LD_VAR 0 5
28588: PUSH
28589: LD_EXP 127
28593: PUSH
28594: LD_VAR 0 5
28598: ARRAY
28599: PUSH
28600: LD_INT 1
28602: PLUS
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PPUSH
28608: LD_VAR 0 2
28612: PUSH
28613: LD_VAR 0 4
28617: ARRAY
28618: PUSH
28619: LD_VAR 0 2
28623: PUSH
28624: LD_VAR 0 4
28628: ARRAY
28629: PPUSH
28630: CALL_OW 255
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PPUSH
28639: CALL 36247 0 3
28643: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28644: LD_VAR 0 2
28648: PUSH
28649: LD_VAR 0 4
28653: ARRAY
28654: PPUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 255
28664: PPUSH
28665: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28669: LD_VAR 0 2
28673: PUSH
28674: LD_VAR 0 4
28678: ARRAY
28679: PPUSH
28680: CALL_OW 141
// end ;
28684: GO 28516
28686: POP
28687: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28688: LD_VAR 0 1
28692: PPUSH
28693: LD_EXP 127
28697: PUSH
28698: LD_VAR 0 5
28702: ARRAY
28703: PUSH
28704: LD_INT 0
28706: PLUS
28707: PPUSH
28708: CALL_OW 505
// end ;
28712: LD_VAR 0 3
28716: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28717: LD_INT 0
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
// if not hack in hackTanks then
28723: LD_VAR 0 1
28727: PUSH
28728: LD_EXP 126
28732: IN
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 28978
// index := GetElementIndex ( hackTanks , hack ) ;
28738: LD_ADDR_VAR 0 4
28742: PUSH
28743: LD_EXP 126
28747: PPUSH
28748: LD_VAR 0 1
28752: PPUSH
28753: CALL 36032 0 2
28757: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28758: LD_ADDR_VAR 0 3
28762: PUSH
28763: DOUBLE
28764: LD_EXP 127
28768: PUSH
28769: LD_VAR 0 4
28773: ARRAY
28774: INC
28775: ST_TO_ADDR
28776: LD_INT 1
28778: PUSH
28779: FOR_DOWNTO
28780: IFFALSE 28952
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_EXP 127
28791: PUSH
28792: LD_VAR 0 4
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 3
28802: ARRAY
28803: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28804: LD_VAR 0 5
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: CALL_OW 302
28817: NOT
28818: PUSH
28819: LD_VAR 0 5
28823: PUSH
28824: LD_INT 1
28826: ARRAY
28827: PPUSH
28828: CALL_OW 255
28832: PUSH
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 255
28842: NONEQUAL
28843: OR
28844: IFFALSE 28950
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28846: LD_VAR 0 5
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 305
28859: PUSH
28860: LD_VAR 0 5
28864: PUSH
28865: LD_INT 1
28867: ARRAY
28868: PPUSH
28869: CALL_OW 255
28873: PUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 255
28883: EQUAL
28884: AND
28885: IFFALSE 28909
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28887: LD_VAR 0 5
28891: PUSH
28892: LD_INT 1
28894: ARRAY
28895: PPUSH
28896: LD_VAR 0 5
28900: PUSH
28901: LD_INT 2
28903: ARRAY
28904: PPUSH
28905: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28909: LD_ADDR_EXP 127
28913: PUSH
28914: LD_EXP 127
28918: PPUSH
28919: LD_VAR 0 4
28923: PPUSH
28924: LD_EXP 127
28928: PUSH
28929: LD_VAR 0 4
28933: ARRAY
28934: PPUSH
28935: LD_VAR 0 3
28939: PPUSH
28940: CALL_OW 3
28944: PPUSH
28945: CALL_OW 1
28949: ST_TO_ADDR
// end ; end ;
28950: GO 28779
28952: POP
28953: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28954: LD_VAR 0 1
28958: PPUSH
28959: LD_EXP 127
28963: PUSH
28964: LD_VAR 0 4
28968: ARRAY
28969: PUSH
28970: LD_INT 0
28972: PLUS
28973: PPUSH
28974: CALL_OW 505
// end ;
28978: LD_VAR 0 2
28982: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
28987: PPUSH
28988: PPUSH
// if not hack in hackTanks then
28989: LD_VAR 0 1
28993: PUSH
28994: LD_EXP 126
28998: IN
28999: NOT
29000: IFFALSE 29004
// exit ;
29002: GO 29089
// index := GetElementIndex ( hackTanks , hack ) ;
29004: LD_ADDR_VAR 0 5
29008: PUSH
29009: LD_EXP 126
29013: PPUSH
29014: LD_VAR 0 1
29018: PPUSH
29019: CALL 36032 0 2
29023: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29024: LD_ADDR_VAR 0 4
29028: PUSH
29029: DOUBLE
29030: LD_INT 1
29032: DEC
29033: ST_TO_ADDR
29034: LD_EXP 127
29038: PUSH
29039: LD_VAR 0 5
29043: ARRAY
29044: PUSH
29045: FOR_TO
29046: IFFALSE 29087
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29048: LD_EXP 127
29052: PUSH
29053: LD_VAR 0 5
29057: ARRAY
29058: PUSH
29059: LD_VAR 0 4
29063: ARRAY
29064: PUSH
29065: LD_INT 1
29067: ARRAY
29068: PUSH
29069: LD_VAR 0 2
29073: EQUAL
29074: IFFALSE 29085
// KillUnit ( vehicle ) ;
29076: LD_VAR 0 2
29080: PPUSH
29081: CALL_OW 66
29085: GO 29045
29087: POP
29088: POP
// end ;
29089: LD_VAR 0 3
29093: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29094: LD_EXP 131
29098: NOT
29099: IFFALSE 29134
29101: GO 29103
29103: DISABLE
// begin initMiner := true ;
29104: LD_ADDR_EXP 131
29108: PUSH
29109: LD_INT 1
29111: ST_TO_ADDR
// minersList := [ ] ;
29112: LD_ADDR_EXP 132
29116: PUSH
29117: EMPTY
29118: ST_TO_ADDR
// minerMinesList := [ ] ;
29119: LD_ADDR_EXP 133
29123: PUSH
29124: EMPTY
29125: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29126: LD_ADDR_EXP 134
29130: PUSH
29131: LD_INT 5
29133: ST_TO_ADDR
// end ;
29134: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29135: LD_EXP 131
29139: PUSH
29140: LD_INT 34
29142: PUSH
29143: LD_EXP 53
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 69
29156: AND
29157: IFFALSE 29620
29159: GO 29161
29161: DISABLE
29162: LD_INT 0
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
// begin enable ;
29168: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29169: LD_ADDR_VAR 0 1
29173: PUSH
29174: LD_INT 34
29176: PUSH
29177: LD_EXP 53
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PPUSH
29186: CALL_OW 69
29190: PUSH
29191: FOR_IN
29192: IFFALSE 29264
// begin if not i in minersList then
29194: LD_VAR 0 1
29198: PUSH
29199: LD_EXP 132
29203: IN
29204: NOT
29205: IFFALSE 29262
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29207: LD_ADDR_EXP 132
29211: PUSH
29212: LD_EXP 132
29216: PPUSH
29217: LD_EXP 132
29221: PUSH
29222: LD_INT 1
29224: PLUS
29225: PPUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 1
29235: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29236: LD_ADDR_EXP 133
29240: PUSH
29241: LD_EXP 133
29245: PPUSH
29246: LD_EXP 133
29250: PUSH
29251: LD_INT 1
29253: PLUS
29254: PPUSH
29255: EMPTY
29256: PPUSH
29257: CALL_OW 1
29261: ST_TO_ADDR
// end end ;
29262: GO 29191
29264: POP
29265: POP
// for i := minerMinesList downto 1 do
29266: LD_ADDR_VAR 0 1
29270: PUSH
29271: DOUBLE
29272: LD_EXP 133
29276: INC
29277: ST_TO_ADDR
29278: LD_INT 1
29280: PUSH
29281: FOR_DOWNTO
29282: IFFALSE 29618
// begin if IsLive ( minersList [ i ] ) then
29284: LD_EXP 132
29288: PUSH
29289: LD_VAR 0 1
29293: ARRAY
29294: PPUSH
29295: CALL_OW 300
29299: IFFALSE 29327
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29301: LD_EXP 132
29305: PUSH
29306: LD_VAR 0 1
29310: ARRAY
29311: PPUSH
29312: LD_EXP 133
29316: PUSH
29317: LD_VAR 0 1
29321: ARRAY
29322: PPUSH
29323: CALL_OW 505
// if not minerMinesList [ i ] then
29327: LD_EXP 133
29331: PUSH
29332: LD_VAR 0 1
29336: ARRAY
29337: NOT
29338: IFFALSE 29342
// continue ;
29340: GO 29281
// for j := minerMinesList [ i ] downto 1 do
29342: LD_ADDR_VAR 0 2
29346: PUSH
29347: DOUBLE
29348: LD_EXP 133
29352: PUSH
29353: LD_VAR 0 1
29357: ARRAY
29358: INC
29359: ST_TO_ADDR
29360: LD_INT 1
29362: PUSH
29363: FOR_DOWNTO
29364: IFFALSE 29614
// begin side := GetSide ( minersList [ i ] ) ;
29366: LD_ADDR_VAR 0 3
29370: PUSH
29371: LD_EXP 132
29375: PUSH
29376: LD_VAR 0 1
29380: ARRAY
29381: PPUSH
29382: CALL_OW 255
29386: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29387: LD_ADDR_VAR 0 4
29391: PUSH
29392: LD_EXP 133
29396: PUSH
29397: LD_VAR 0 1
29401: ARRAY
29402: PUSH
29403: LD_VAR 0 2
29407: ARRAY
29408: PUSH
29409: LD_INT 1
29411: ARRAY
29412: PPUSH
29413: LD_EXP 133
29417: PUSH
29418: LD_VAR 0 1
29422: ARRAY
29423: PUSH
29424: LD_VAR 0 2
29428: ARRAY
29429: PUSH
29430: LD_INT 2
29432: ARRAY
29433: PPUSH
29434: CALL_OW 428
29438: ST_TO_ADDR
// if not tmp then
29439: LD_VAR 0 4
29443: NOT
29444: IFFALSE 29448
// continue ;
29446: GO 29363
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29448: LD_VAR 0 4
29452: PUSH
29453: LD_INT 81
29455: PUSH
29456: LD_VAR 0 3
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL_OW 69
29469: IN
29470: PUSH
29471: LD_EXP 133
29475: PUSH
29476: LD_VAR 0 1
29480: ARRAY
29481: PUSH
29482: LD_VAR 0 2
29486: ARRAY
29487: PUSH
29488: LD_INT 1
29490: ARRAY
29491: PPUSH
29492: LD_EXP 133
29496: PUSH
29497: LD_VAR 0 1
29501: ARRAY
29502: PUSH
29503: LD_VAR 0 2
29507: ARRAY
29508: PUSH
29509: LD_INT 2
29511: ARRAY
29512: PPUSH
29513: CALL_OW 458
29517: AND
29518: IFFALSE 29612
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29520: LD_EXP 133
29524: PUSH
29525: LD_VAR 0 1
29529: ARRAY
29530: PUSH
29531: LD_VAR 0 2
29535: ARRAY
29536: PUSH
29537: LD_INT 1
29539: ARRAY
29540: PPUSH
29541: LD_EXP 133
29545: PUSH
29546: LD_VAR 0 1
29550: ARRAY
29551: PUSH
29552: LD_VAR 0 2
29556: ARRAY
29557: PUSH
29558: LD_INT 2
29560: ARRAY
29561: PPUSH
29562: LD_VAR 0 3
29566: PPUSH
29567: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29571: LD_ADDR_EXP 133
29575: PUSH
29576: LD_EXP 133
29580: PPUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: LD_EXP 133
29590: PUSH
29591: LD_VAR 0 1
29595: ARRAY
29596: PPUSH
29597: LD_VAR 0 2
29601: PPUSH
29602: CALL_OW 3
29606: PPUSH
29607: CALL_OW 1
29611: ST_TO_ADDR
// end ; end ;
29612: GO 29363
29614: POP
29615: POP
// end ;
29616: GO 29281
29618: POP
29619: POP
// end ;
29620: PPOPN 4
29622: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
// result := false ;
29627: LD_ADDR_VAR 0 4
29631: PUSH
29632: LD_INT 0
29634: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29635: LD_VAR 0 1
29639: PPUSH
29640: CALL_OW 264
29644: PUSH
29645: LD_EXP 53
29649: EQUAL
29650: NOT
29651: IFFALSE 29655
// exit ;
29653: GO 29895
// index := GetElementIndex ( minersList , unit ) ;
29655: LD_ADDR_VAR 0 5
29659: PUSH
29660: LD_EXP 132
29664: PPUSH
29665: LD_VAR 0 1
29669: PPUSH
29670: CALL 36032 0 2
29674: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29675: LD_EXP 133
29679: PUSH
29680: LD_VAR 0 5
29684: ARRAY
29685: PUSH
29686: LD_EXP 134
29690: GREATEREQUAL
29691: IFFALSE 29695
// exit ;
29693: GO 29895
// ComMoveXY ( unit , x , y ) ;
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_VAR 0 2
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29714: LD_INT 35
29716: PPUSH
29717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: LD_VAR 0 3
29735: PPUSH
29736: CALL 67318 0 3
29740: NOT
29741: PUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 314
29751: AND
29752: IFFALSE 29756
// exit ;
29754: GO 29895
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29756: LD_VAR 0 2
29760: PPUSH
29761: LD_VAR 0 3
29765: PPUSH
29766: CALL_OW 428
29770: PUSH
29771: LD_VAR 0 1
29775: EQUAL
29776: PUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 314
29786: NOT
29787: AND
29788: IFFALSE 29714
// PlaySoundXY ( x , y , PlantMine ) ;
29790: LD_VAR 0 2
29794: PPUSH
29795: LD_VAR 0 3
29799: PPUSH
29800: LD_STRING PlantMine
29802: PPUSH
29803: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29807: LD_VAR 0 2
29811: PPUSH
29812: LD_VAR 0 3
29816: PPUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 255
29826: PPUSH
29827: LD_INT 0
29829: PPUSH
29830: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29834: LD_ADDR_EXP 133
29838: PUSH
29839: LD_EXP 133
29843: PPUSH
29844: LD_VAR 0 5
29848: PUSH
29849: LD_EXP 133
29853: PUSH
29854: LD_VAR 0 5
29858: ARRAY
29859: PUSH
29860: LD_INT 1
29862: PLUS
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PPUSH
29868: LD_VAR 0 2
29872: PUSH
29873: LD_VAR 0 3
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL 36247 0 3
29886: ST_TO_ADDR
// result := true ;
29887: LD_ADDR_VAR 0 4
29891: PUSH
29892: LD_INT 1
29894: ST_TO_ADDR
// end ;
29895: LD_VAR 0 4
29899: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29900: LD_INT 0
29902: PPUSH
29903: PPUSH
29904: PPUSH
// if not unit in minersList then
29905: LD_VAR 0 1
29909: PUSH
29910: LD_EXP 132
29914: IN
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 30312
// index := GetElementIndex ( minersList , unit ) ;
29920: LD_ADDR_VAR 0 6
29924: PUSH
29925: LD_EXP 132
29929: PPUSH
29930: LD_VAR 0 1
29934: PPUSH
29935: CALL 36032 0 2
29939: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29940: LD_ADDR_VAR 0 5
29944: PUSH
29945: DOUBLE
29946: LD_EXP 133
29950: PUSH
29951: LD_VAR 0 6
29955: ARRAY
29956: INC
29957: ST_TO_ADDR
29958: LD_INT 1
29960: PUSH
29961: FOR_DOWNTO
29962: IFFALSE 30123
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29964: LD_EXP 133
29968: PUSH
29969: LD_VAR 0 6
29973: ARRAY
29974: PUSH
29975: LD_VAR 0 5
29979: ARRAY
29980: PUSH
29981: LD_INT 1
29983: ARRAY
29984: PUSH
29985: LD_VAR 0 2
29989: EQUAL
29990: PUSH
29991: LD_EXP 133
29995: PUSH
29996: LD_VAR 0 6
30000: ARRAY
30001: PUSH
30002: LD_VAR 0 5
30006: ARRAY
30007: PUSH
30008: LD_INT 2
30010: ARRAY
30011: PUSH
30012: LD_VAR 0 3
30016: EQUAL
30017: AND
30018: IFFALSE 30121
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30020: LD_EXP 133
30024: PUSH
30025: LD_VAR 0 6
30029: ARRAY
30030: PUSH
30031: LD_VAR 0 5
30035: ARRAY
30036: PUSH
30037: LD_INT 1
30039: ARRAY
30040: PPUSH
30041: LD_EXP 133
30045: PUSH
30046: LD_VAR 0 6
30050: ARRAY
30051: PUSH
30052: LD_VAR 0 5
30056: ARRAY
30057: PUSH
30058: LD_INT 2
30060: ARRAY
30061: PPUSH
30062: LD_VAR 0 1
30066: PPUSH
30067: CALL_OW 255
30071: PPUSH
30072: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30076: LD_ADDR_EXP 133
30080: PUSH
30081: LD_EXP 133
30085: PPUSH
30086: LD_VAR 0 6
30090: PPUSH
30091: LD_EXP 133
30095: PUSH
30096: LD_VAR 0 6
30100: ARRAY
30101: PPUSH
30102: LD_VAR 0 5
30106: PPUSH
30107: CALL_OW 3
30111: PPUSH
30112: CALL_OW 1
30116: ST_TO_ADDR
// exit ;
30117: POP
30118: POP
30119: GO 30312
// end ; end ;
30121: GO 29961
30123: POP
30124: POP
// for i := minerMinesList [ index ] downto 1 do
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: DOUBLE
30131: LD_EXP 133
30135: PUSH
30136: LD_VAR 0 6
30140: ARRAY
30141: INC
30142: ST_TO_ADDR
30143: LD_INT 1
30145: PUSH
30146: FOR_DOWNTO
30147: IFFALSE 30310
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30149: LD_EXP 133
30153: PUSH
30154: LD_VAR 0 6
30158: ARRAY
30159: PUSH
30160: LD_VAR 0 5
30164: ARRAY
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PPUSH
30170: LD_EXP 133
30174: PUSH
30175: LD_VAR 0 6
30179: ARRAY
30180: PUSH
30181: LD_VAR 0 5
30185: ARRAY
30186: PUSH
30187: LD_INT 2
30189: ARRAY
30190: PPUSH
30191: LD_VAR 0 2
30195: PPUSH
30196: LD_VAR 0 3
30200: PPUSH
30201: CALL_OW 298
30205: PUSH
30206: LD_INT 6
30208: LESS
30209: IFFALSE 30308
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30211: LD_EXP 133
30215: PUSH
30216: LD_VAR 0 6
30220: ARRAY
30221: PUSH
30222: LD_VAR 0 5
30226: ARRAY
30227: PUSH
30228: LD_INT 1
30230: ARRAY
30231: PPUSH
30232: LD_EXP 133
30236: PUSH
30237: LD_VAR 0 6
30241: ARRAY
30242: PUSH
30243: LD_VAR 0 5
30247: ARRAY
30248: PUSH
30249: LD_INT 2
30251: ARRAY
30252: PPUSH
30253: LD_VAR 0 1
30257: PPUSH
30258: CALL_OW 255
30262: PPUSH
30263: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30267: LD_ADDR_EXP 133
30271: PUSH
30272: LD_EXP 133
30276: PPUSH
30277: LD_VAR 0 6
30281: PPUSH
30282: LD_EXP 133
30286: PUSH
30287: LD_VAR 0 6
30291: ARRAY
30292: PPUSH
30293: LD_VAR 0 5
30297: PPUSH
30298: CALL_OW 3
30302: PPUSH
30303: CALL_OW 1
30307: ST_TO_ADDR
// end ; end ;
30308: GO 30146
30310: POP
30311: POP
// end ;
30312: LD_VAR 0 4
30316: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30317: LD_INT 0
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 264
30337: PUSH
30338: LD_EXP 53
30342: EQUAL
30343: NOT
30344: PUSH
30345: LD_VAR 0 1
30349: PUSH
30350: LD_EXP 132
30354: IN
30355: NOT
30356: OR
30357: IFFALSE 30361
// exit ;
30359: GO 30683
// index := GetElementIndex ( minersList , unit ) ;
30361: LD_ADDR_VAR 0 6
30365: PUSH
30366: LD_EXP 132
30370: PPUSH
30371: LD_VAR 0 1
30375: PPUSH
30376: CALL 36032 0 2
30380: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30381: LD_ADDR_VAR 0 8
30385: PUSH
30386: LD_EXP 134
30390: PUSH
30391: LD_EXP 133
30395: PUSH
30396: LD_VAR 0 6
30400: ARRAY
30401: MINUS
30402: ST_TO_ADDR
// if not minesFreeAmount then
30403: LD_VAR 0 8
30407: NOT
30408: IFFALSE 30412
// exit ;
30410: GO 30683
// tmp := [ ] ;
30412: LD_ADDR_VAR 0 7
30416: PUSH
30417: EMPTY
30418: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30419: LD_ADDR_VAR 0 5
30423: PUSH
30424: DOUBLE
30425: LD_INT 1
30427: DEC
30428: ST_TO_ADDR
30429: LD_VAR 0 8
30433: PUSH
30434: FOR_TO
30435: IFFALSE 30630
// begin _d := rand ( 0 , 5 ) ;
30437: LD_ADDR_VAR 0 11
30441: PUSH
30442: LD_INT 0
30444: PPUSH
30445: LD_INT 5
30447: PPUSH
30448: CALL_OW 12
30452: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30453: LD_ADDR_VAR 0 12
30457: PUSH
30458: LD_INT 2
30460: PPUSH
30461: LD_INT 6
30463: PPUSH
30464: CALL_OW 12
30468: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30469: LD_ADDR_VAR 0 9
30473: PUSH
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 11
30483: PPUSH
30484: LD_VAR 0 12
30488: PPUSH
30489: CALL_OW 272
30493: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30494: LD_ADDR_VAR 0 10
30498: PUSH
30499: LD_VAR 0 3
30503: PPUSH
30504: LD_VAR 0 11
30508: PPUSH
30509: LD_VAR 0 12
30513: PPUSH
30514: CALL_OW 273
30518: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30519: LD_VAR 0 9
30523: PPUSH
30524: LD_VAR 0 10
30528: PPUSH
30529: CALL_OW 488
30533: PUSH
30534: LD_VAR 0 9
30538: PUSH
30539: LD_VAR 0 10
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_VAR 0 7
30552: IN
30553: NOT
30554: AND
30555: PUSH
30556: LD_VAR 0 9
30560: PPUSH
30561: LD_VAR 0 10
30565: PPUSH
30566: CALL_OW 458
30570: NOT
30571: AND
30572: IFFALSE 30614
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30574: LD_ADDR_VAR 0 7
30578: PUSH
30579: LD_VAR 0 7
30583: PPUSH
30584: LD_VAR 0 7
30588: PUSH
30589: LD_INT 1
30591: PLUS
30592: PPUSH
30593: LD_VAR 0 9
30597: PUSH
30598: LD_VAR 0 10
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PPUSH
30607: CALL_OW 1
30611: ST_TO_ADDR
30612: GO 30628
// i := i - 1 ;
30614: LD_ADDR_VAR 0 5
30618: PUSH
30619: LD_VAR 0 5
30623: PUSH
30624: LD_INT 1
30626: MINUS
30627: ST_TO_ADDR
// end ;
30628: GO 30434
30630: POP
30631: POP
// for i in tmp do
30632: LD_ADDR_VAR 0 5
30636: PUSH
30637: LD_VAR 0 7
30641: PUSH
30642: FOR_IN
30643: IFFALSE 30681
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30645: LD_VAR 0 1
30649: PPUSH
30650: LD_VAR 0 5
30654: PUSH
30655: LD_INT 1
30657: ARRAY
30658: PPUSH
30659: LD_VAR 0 5
30663: PUSH
30664: LD_INT 2
30666: ARRAY
30667: PPUSH
30668: CALL 29623 0 3
30672: NOT
30673: IFFALSE 30679
// exit ;
30675: POP
30676: POP
30677: GO 30683
30679: GO 30642
30681: POP
30682: POP
// end ;
30683: LD_VAR 0 4
30687: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30688: LD_INT 0
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
// if not GetClass ( unit ) = class_sniper then
30697: LD_VAR 0 1
30701: PPUSH
30702: CALL_OW 257
30706: PUSH
30707: LD_INT 5
30709: EQUAL
30710: NOT
30711: IFFALSE 30715
// exit ;
30713: GO 31103
// dist := 8 ;
30715: LD_ADDR_VAR 0 5
30719: PUSH
30720: LD_INT 8
30722: ST_TO_ADDR
// viewRange := 12 ;
30723: LD_ADDR_VAR 0 7
30727: PUSH
30728: LD_INT 12
30730: ST_TO_ADDR
// side := GetSide ( unit ) ;
30731: LD_ADDR_VAR 0 6
30735: PUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 255
30745: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30746: LD_INT 61
30748: PPUSH
30749: LD_VAR 0 6
30753: PPUSH
30754: CALL_OW 321
30758: PUSH
30759: LD_INT 2
30761: EQUAL
30762: IFFALSE 30772
// viewRange := 16 ;
30764: LD_ADDR_VAR 0 7
30768: PUSH
30769: LD_INT 16
30771: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30772: LD_VAR 0 1
30776: PPUSH
30777: LD_VAR 0 2
30781: PPUSH
30782: LD_VAR 0 3
30786: PPUSH
30787: CALL_OW 297
30791: PUSH
30792: LD_VAR 0 5
30796: GREATER
30797: IFFALSE 30876
// begin ComMoveXY ( unit , x , y ) ;
30799: LD_VAR 0 1
30803: PPUSH
30804: LD_VAR 0 2
30808: PPUSH
30809: LD_VAR 0 3
30813: PPUSH
30814: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30818: LD_INT 35
30820: PPUSH
30821: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30825: LD_VAR 0 1
30829: PPUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: LD_VAR 0 3
30839: PPUSH
30840: CALL 67318 0 3
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 31103
// until GetDistUnitXY ( unit , x , y ) < dist ;
30849: LD_VAR 0 1
30853: PPUSH
30854: LD_VAR 0 2
30858: PPUSH
30859: LD_VAR 0 3
30863: PPUSH
30864: CALL_OW 297
30868: PUSH
30869: LD_VAR 0 5
30873: LESS
30874: IFFALSE 30818
// end ; ComTurnXY ( unit , x , y ) ;
30876: LD_VAR 0 1
30880: PPUSH
30881: LD_VAR 0 2
30885: PPUSH
30886: LD_VAR 0 3
30890: PPUSH
30891: CALL_OW 118
// wait ( 5 ) ;
30895: LD_INT 5
30897: PPUSH
30898: CALL_OW 67
// _d := GetDir ( unit ) ;
30902: LD_ADDR_VAR 0 10
30906: PUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 254
30916: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30917: LD_ADDR_VAR 0 8
30921: PUSH
30922: LD_VAR 0 1
30926: PPUSH
30927: CALL_OW 250
30931: PPUSH
30932: LD_VAR 0 10
30936: PPUSH
30937: LD_VAR 0 5
30941: PPUSH
30942: CALL_OW 272
30946: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL_OW 251
30961: PPUSH
30962: LD_VAR 0 10
30966: PPUSH
30967: LD_VAR 0 5
30971: PPUSH
30972: CALL_OW 273
30976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30977: LD_VAR 0 8
30981: PPUSH
30982: LD_VAR 0 9
30986: PPUSH
30987: CALL_OW 488
30991: NOT
30992: IFFALSE 30996
// exit ;
30994: GO 31103
// ComAnimCustom ( unit , 1 ) ;
30996: LD_VAR 0 1
31000: PPUSH
31001: LD_INT 1
31003: PPUSH
31004: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31008: LD_VAR 0 8
31012: PPUSH
31013: LD_VAR 0 9
31017: PPUSH
31018: LD_VAR 0 6
31022: PPUSH
31023: LD_VAR 0 7
31027: PPUSH
31028: CALL_OW 330
// repeat wait ( 1 ) ;
31032: LD_INT 1
31034: PPUSH
31035: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31039: LD_VAR 0 1
31043: PPUSH
31044: CALL_OW 316
31048: PUSH
31049: LD_VAR 0 1
31053: PPUSH
31054: CALL_OW 314
31058: OR
31059: PUSH
31060: LD_VAR 0 1
31064: PPUSH
31065: CALL_OW 302
31069: NOT
31070: OR
31071: PUSH
31072: LD_VAR 0 1
31076: PPUSH
31077: CALL_OW 301
31081: OR
31082: IFFALSE 31032
// RemoveSeeing ( _x , _y , side ) ;
31084: LD_VAR 0 8
31088: PPUSH
31089: LD_VAR 0 9
31093: PPUSH
31094: LD_VAR 0 6
31098: PPUSH
31099: CALL_OW 331
// end ; end_of_file
31103: LD_VAR 0 4
31107: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
// if exist_mode then
31112: LD_VAR 0 2
31116: IFFALSE 31141
// unit := CreateCharacter ( prefix & ident ) else
31118: LD_ADDR_VAR 0 5
31122: PUSH
31123: LD_VAR 0 3
31127: PUSH
31128: LD_VAR 0 1
31132: STR
31133: PPUSH
31134: CALL_OW 34
31138: ST_TO_ADDR
31139: GO 31156
// unit := NewCharacter ( ident ) ;
31141: LD_ADDR_VAR 0 5
31145: PUSH
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 25
31155: ST_TO_ADDR
// result := unit ;
31156: LD_ADDR_VAR 0 4
31160: PUSH
31161: LD_VAR 0 5
31165: ST_TO_ADDR
// end ;
31166: LD_VAR 0 4
31170: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31171: LD_INT 0
31173: PPUSH
31174: PPUSH
// if not side or not nation then
31175: LD_VAR 0 1
31179: NOT
31180: PUSH
31181: LD_VAR 0 2
31185: NOT
31186: OR
31187: IFFALSE 31191
// exit ;
31189: GO 31959
// case nation of nation_american :
31191: LD_VAR 0 2
31195: PUSH
31196: LD_INT 1
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31418
31204: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31205: LD_ADDR_VAR 0 4
31209: PUSH
31210: LD_INT 35
31212: PUSH
31213: LD_INT 45
31215: PUSH
31216: LD_INT 46
31218: PUSH
31219: LD_INT 47
31221: PUSH
31222: LD_INT 82
31224: PUSH
31225: LD_INT 83
31227: PUSH
31228: LD_INT 84
31230: PUSH
31231: LD_INT 85
31233: PUSH
31234: LD_INT 86
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 6
31245: PUSH
31246: LD_INT 15
31248: PUSH
31249: LD_INT 16
31251: PUSH
31252: LD_INT 7
31254: PUSH
31255: LD_INT 12
31257: PUSH
31258: LD_INT 13
31260: PUSH
31261: LD_INT 10
31263: PUSH
31264: LD_INT 14
31266: PUSH
31267: LD_INT 20
31269: PUSH
31270: LD_INT 21
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_INT 25
31278: PUSH
31279: LD_INT 32
31281: PUSH
31282: LD_INT 27
31284: PUSH
31285: LD_INT 36
31287: PUSH
31288: LD_INT 69
31290: PUSH
31291: LD_INT 39
31293: PUSH
31294: LD_INT 34
31296: PUSH
31297: LD_INT 40
31299: PUSH
31300: LD_INT 48
31302: PUSH
31303: LD_INT 49
31305: PUSH
31306: LD_INT 50
31308: PUSH
31309: LD_INT 51
31311: PUSH
31312: LD_INT 52
31314: PUSH
31315: LD_INT 53
31317: PUSH
31318: LD_INT 54
31320: PUSH
31321: LD_INT 55
31323: PUSH
31324: LD_INT 56
31326: PUSH
31327: LD_INT 57
31329: PUSH
31330: LD_INT 58
31332: PUSH
31333: LD_INT 59
31335: PUSH
31336: LD_INT 60
31338: PUSH
31339: LD_INT 61
31341: PUSH
31342: LD_INT 62
31344: PUSH
31345: LD_INT 80
31347: PUSH
31348: LD_INT 82
31350: PUSH
31351: LD_INT 83
31353: PUSH
31354: LD_INT 84
31356: PUSH
31357: LD_INT 85
31359: PUSH
31360: LD_INT 86
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: ST_TO_ADDR
31416: GO 31883
31418: LD_INT 2
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31652
31426: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31427: LD_ADDR_VAR 0 4
31431: PUSH
31432: LD_INT 35
31434: PUSH
31435: LD_INT 45
31437: PUSH
31438: LD_INT 46
31440: PUSH
31441: LD_INT 47
31443: PUSH
31444: LD_INT 82
31446: PUSH
31447: LD_INT 83
31449: PUSH
31450: LD_INT 84
31452: PUSH
31453: LD_INT 85
31455: PUSH
31456: LD_INT 87
31458: PUSH
31459: LD_INT 70
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 11
31467: PUSH
31468: LD_INT 3
31470: PUSH
31471: LD_INT 4
31473: PUSH
31474: LD_INT 5
31476: PUSH
31477: LD_INT 6
31479: PUSH
31480: LD_INT 15
31482: PUSH
31483: LD_INT 18
31485: PUSH
31486: LD_INT 7
31488: PUSH
31489: LD_INT 17
31491: PUSH
31492: LD_INT 8
31494: PUSH
31495: LD_INT 20
31497: PUSH
31498: LD_INT 21
31500: PUSH
31501: LD_INT 22
31503: PUSH
31504: LD_INT 72
31506: PUSH
31507: LD_INT 26
31509: PUSH
31510: LD_INT 69
31512: PUSH
31513: LD_INT 39
31515: PUSH
31516: LD_INT 40
31518: PUSH
31519: LD_INT 41
31521: PUSH
31522: LD_INT 42
31524: PUSH
31525: LD_INT 43
31527: PUSH
31528: LD_INT 48
31530: PUSH
31531: LD_INT 49
31533: PUSH
31534: LD_INT 50
31536: PUSH
31537: LD_INT 51
31539: PUSH
31540: LD_INT 52
31542: PUSH
31543: LD_INT 53
31545: PUSH
31546: LD_INT 54
31548: PUSH
31549: LD_INT 55
31551: PUSH
31552: LD_INT 56
31554: PUSH
31555: LD_INT 60
31557: PUSH
31558: LD_INT 61
31560: PUSH
31561: LD_INT 62
31563: PUSH
31564: LD_INT 66
31566: PUSH
31567: LD_INT 67
31569: PUSH
31570: LD_INT 68
31572: PUSH
31573: LD_INT 81
31575: PUSH
31576: LD_INT 82
31578: PUSH
31579: LD_INT 83
31581: PUSH
31582: LD_INT 84
31584: PUSH
31585: LD_INT 85
31587: PUSH
31588: LD_INT 87
31590: PUSH
31591: LD_INT 88
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: ST_TO_ADDR
31650: GO 31883
31652: LD_INT 3
31654: DOUBLE
31655: EQUAL
31656: IFTRUE 31660
31658: GO 31882
31660: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31661: LD_ADDR_VAR 0 4
31665: PUSH
31666: LD_INT 46
31668: PUSH
31669: LD_INT 47
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 82
31680: PUSH
31681: LD_INT 83
31683: PUSH
31684: LD_INT 84
31686: PUSH
31687: LD_INT 85
31689: PUSH
31690: LD_INT 86
31692: PUSH
31693: LD_INT 11
31695: PUSH
31696: LD_INT 9
31698: PUSH
31699: LD_INT 20
31701: PUSH
31702: LD_INT 19
31704: PUSH
31705: LD_INT 21
31707: PUSH
31708: LD_INT 24
31710: PUSH
31711: LD_INT 22
31713: PUSH
31714: LD_INT 25
31716: PUSH
31717: LD_INT 28
31719: PUSH
31720: LD_INT 29
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_INT 31
31728: PUSH
31729: LD_INT 37
31731: PUSH
31732: LD_INT 38
31734: PUSH
31735: LD_INT 32
31737: PUSH
31738: LD_INT 27
31740: PUSH
31741: LD_INT 33
31743: PUSH
31744: LD_INT 69
31746: PUSH
31747: LD_INT 39
31749: PUSH
31750: LD_INT 34
31752: PUSH
31753: LD_INT 40
31755: PUSH
31756: LD_INT 71
31758: PUSH
31759: LD_INT 23
31761: PUSH
31762: LD_INT 44
31764: PUSH
31765: LD_INT 48
31767: PUSH
31768: LD_INT 49
31770: PUSH
31771: LD_INT 50
31773: PUSH
31774: LD_INT 51
31776: PUSH
31777: LD_INT 52
31779: PUSH
31780: LD_INT 53
31782: PUSH
31783: LD_INT 54
31785: PUSH
31786: LD_INT 55
31788: PUSH
31789: LD_INT 56
31791: PUSH
31792: LD_INT 57
31794: PUSH
31795: LD_INT 58
31797: PUSH
31798: LD_INT 59
31800: PUSH
31801: LD_INT 63
31803: PUSH
31804: LD_INT 64
31806: PUSH
31807: LD_INT 65
31809: PUSH
31810: LD_INT 82
31812: PUSH
31813: LD_INT 83
31815: PUSH
31816: LD_INT 84
31818: PUSH
31819: LD_INT 85
31821: PUSH
31822: LD_INT 86
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
31880: GO 31883
31882: POP
// if state > - 1 and state < 3 then
31883: LD_VAR 0 3
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: GREATER
31892: PUSH
31893: LD_VAR 0 3
31897: PUSH
31898: LD_INT 3
31900: LESS
31901: AND
31902: IFFALSE 31959
// for i in result do
31904: LD_ADDR_VAR 0 5
31908: PUSH
31909: LD_VAR 0 4
31913: PUSH
31914: FOR_IN
31915: IFFALSE 31957
// if GetTech ( i , side ) <> state then
31917: LD_VAR 0 5
31921: PPUSH
31922: LD_VAR 0 1
31926: PPUSH
31927: CALL_OW 321
31931: PUSH
31932: LD_VAR 0 3
31936: NONEQUAL
31937: IFFALSE 31955
// result := result diff i ;
31939: LD_ADDR_VAR 0 4
31943: PUSH
31944: LD_VAR 0 4
31948: PUSH
31949: LD_VAR 0 5
31953: DIFF
31954: ST_TO_ADDR
31955: GO 31914
31957: POP
31958: POP
// end ;
31959: LD_VAR 0 4
31963: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
31968: PPUSH
// result := true ;
31969: LD_ADDR_VAR 0 3
31973: PUSH
31974: LD_INT 1
31976: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31977: LD_ADDR_VAR 0 5
31981: PUSH
31982: LD_VAR 0 2
31986: PPUSH
31987: CALL_OW 480
31991: ST_TO_ADDR
// if not tmp then
31992: LD_VAR 0 5
31996: NOT
31997: IFFALSE 32001
// exit ;
31999: GO 32050
// for i in tmp do
32001: LD_ADDR_VAR 0 4
32005: PUSH
32006: LD_VAR 0 5
32010: PUSH
32011: FOR_IN
32012: IFFALSE 32048
// if GetTech ( i , side ) <> state_researched then
32014: LD_VAR 0 4
32018: PPUSH
32019: LD_VAR 0 1
32023: PPUSH
32024: CALL_OW 321
32028: PUSH
32029: LD_INT 2
32031: NONEQUAL
32032: IFFALSE 32046
// begin result := false ;
32034: LD_ADDR_VAR 0 3
32038: PUSH
32039: LD_INT 0
32041: ST_TO_ADDR
// exit ;
32042: POP
32043: POP
32044: GO 32050
// end ;
32046: GO 32011
32048: POP
32049: POP
// end ;
32050: LD_VAR 0 3
32054: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32055: LD_INT 0
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32070: LD_VAR 0 1
32074: NOT
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: CALL_OW 257
32085: PUSH
32086: LD_INT 9
32088: NONEQUAL
32089: OR
32090: IFFALSE 32094
// exit ;
32092: GO 32667
// side := GetSide ( unit ) ;
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: LD_VAR 0 1
32103: PPUSH
32104: CALL_OW 255
32108: ST_TO_ADDR
// tech_space := tech_spacanom ;
32109: LD_ADDR_VAR 0 12
32113: PUSH
32114: LD_INT 29
32116: ST_TO_ADDR
// tech_time := tech_taurad ;
32117: LD_ADDR_VAR 0 13
32121: PUSH
32122: LD_INT 28
32124: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32125: LD_ADDR_VAR 0 11
32129: PUSH
32130: LD_VAR 0 1
32134: PPUSH
32135: CALL_OW 310
32139: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32140: LD_VAR 0 11
32144: PPUSH
32145: CALL_OW 247
32149: PUSH
32150: LD_INT 2
32152: EQUAL
32153: IFFALSE 32157
// exit ;
32155: GO 32667
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32157: LD_ADDR_VAR 0 8
32161: PUSH
32162: LD_INT 81
32164: PUSH
32165: LD_VAR 0 9
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: LD_INT 21
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PPUSH
32195: CALL_OW 69
32199: ST_TO_ADDR
// if not tmp then
32200: LD_VAR 0 8
32204: NOT
32205: IFFALSE 32209
// exit ;
32207: GO 32667
// if in_unit then
32209: LD_VAR 0 11
32213: IFFALSE 32237
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32215: LD_ADDR_VAR 0 10
32219: PUSH
32220: LD_VAR 0 8
32224: PPUSH
32225: LD_VAR 0 11
32229: PPUSH
32230: CALL_OW 74
32234: ST_TO_ADDR
32235: GO 32257
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32237: LD_ADDR_VAR 0 10
32241: PUSH
32242: LD_VAR 0 8
32246: PPUSH
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 74
32256: ST_TO_ADDR
// if not enemy then
32257: LD_VAR 0 10
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32667
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32266: LD_VAR 0 11
32270: PUSH
32271: LD_VAR 0 11
32275: PPUSH
32276: LD_VAR 0 10
32280: PPUSH
32281: CALL_OW 296
32285: PUSH
32286: LD_INT 13
32288: GREATER
32289: AND
32290: PUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_VAR 0 10
32300: PPUSH
32301: CALL_OW 296
32305: PUSH
32306: LD_INT 12
32308: GREATER
32309: OR
32310: IFFALSE 32314
// exit ;
32312: GO 32667
// missile := [ 1 ] ;
32314: LD_ADDR_VAR 0 14
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32325: LD_VAR 0 9
32329: PPUSH
32330: LD_VAR 0 12
32334: PPUSH
32335: CALL_OW 325
32339: IFFALSE 32368
// missile := Replace ( missile , missile + 1 , 2 ) ;
32341: LD_ADDR_VAR 0 14
32345: PUSH
32346: LD_VAR 0 14
32350: PPUSH
32351: LD_VAR 0 14
32355: PUSH
32356: LD_INT 1
32358: PLUS
32359: PPUSH
32360: LD_INT 2
32362: PPUSH
32363: CALL_OW 1
32367: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32368: LD_VAR 0 9
32372: PPUSH
32373: LD_VAR 0 13
32377: PPUSH
32378: CALL_OW 325
32382: PUSH
32383: LD_VAR 0 10
32387: PPUSH
32388: CALL_OW 255
32392: PPUSH
32393: LD_VAR 0 13
32397: PPUSH
32398: CALL_OW 325
32402: NOT
32403: AND
32404: IFFALSE 32433
// missile := Replace ( missile , missile + 1 , 3 ) ;
32406: LD_ADDR_VAR 0 14
32410: PUSH
32411: LD_VAR 0 14
32415: PPUSH
32416: LD_VAR 0 14
32420: PUSH
32421: LD_INT 1
32423: PLUS
32424: PPUSH
32425: LD_INT 3
32427: PPUSH
32428: CALL_OW 1
32432: ST_TO_ADDR
// if missile < 2 then
32433: LD_VAR 0 14
32437: PUSH
32438: LD_INT 2
32440: LESS
32441: IFFALSE 32445
// exit ;
32443: GO 32667
// x := GetX ( enemy ) ;
32445: LD_ADDR_VAR 0 4
32449: PUSH
32450: LD_VAR 0 10
32454: PPUSH
32455: CALL_OW 250
32459: ST_TO_ADDR
// y := GetY ( enemy ) ;
32460: LD_ADDR_VAR 0 5
32464: PUSH
32465: LD_VAR 0 10
32469: PPUSH
32470: CALL_OW 251
32474: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32475: LD_ADDR_VAR 0 6
32479: PUSH
32480: LD_VAR 0 4
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PPUSH
32489: LD_INT 1
32491: PPUSH
32492: CALL_OW 12
32496: PLUS
32497: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32498: LD_ADDR_VAR 0 7
32502: PUSH
32503: LD_VAR 0 5
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PPUSH
32512: LD_INT 1
32514: PPUSH
32515: CALL_OW 12
32519: PLUS
32520: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32521: LD_VAR 0 6
32525: PPUSH
32526: LD_VAR 0 7
32530: PPUSH
32531: CALL_OW 488
32535: NOT
32536: IFFALSE 32558
// begin _x := x ;
32538: LD_ADDR_VAR 0 6
32542: PUSH
32543: LD_VAR 0 4
32547: ST_TO_ADDR
// _y := y ;
32548: LD_ADDR_VAR 0 7
32552: PUSH
32553: LD_VAR 0 5
32557: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32558: LD_ADDR_VAR 0 3
32562: PUSH
32563: LD_INT 1
32565: PPUSH
32566: LD_VAR 0 14
32570: PPUSH
32571: CALL_OW 12
32575: ST_TO_ADDR
// case i of 1 :
32576: LD_VAR 0 3
32580: PUSH
32581: LD_INT 1
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32606
32589: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32590: LD_VAR 0 1
32594: PPUSH
32595: LD_VAR 0 10
32599: PPUSH
32600: CALL_OW 115
32604: GO 32667
32606: LD_INT 2
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32636
32614: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32615: LD_VAR 0 1
32619: PPUSH
32620: LD_VAR 0 6
32624: PPUSH
32625: LD_VAR 0 7
32629: PPUSH
32630: CALL_OW 153
32634: GO 32667
32636: LD_INT 3
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32666
32644: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32645: LD_VAR 0 1
32649: PPUSH
32650: LD_VAR 0 6
32654: PPUSH
32655: LD_VAR 0 7
32659: PPUSH
32660: CALL_OW 154
32664: GO 32667
32666: POP
// end ;
32667: LD_VAR 0 2
32671: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32672: LD_INT 0
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
// if not unit or not building then
32680: LD_VAR 0 1
32684: NOT
32685: PUSH
32686: LD_VAR 0 2
32690: NOT
32691: OR
32692: IFFALSE 32696
// exit ;
32694: GO 32854
// x := GetX ( building ) ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 2
32705: PPUSH
32706: CALL_OW 250
32710: ST_TO_ADDR
// y := GetY ( building ) ;
32711: LD_ADDR_VAR 0 6
32715: PUSH
32716: LD_VAR 0 2
32720: PPUSH
32721: CALL_OW 251
32725: ST_TO_ADDR
// for i = 0 to 5 do
32726: LD_ADDR_VAR 0 4
32730: PUSH
32731: DOUBLE
32732: LD_INT 0
32734: DEC
32735: ST_TO_ADDR
32736: LD_INT 5
32738: PUSH
32739: FOR_TO
32740: IFFALSE 32852
// begin _x := ShiftX ( x , i , 3 ) ;
32742: LD_ADDR_VAR 0 7
32746: PUSH
32747: LD_VAR 0 5
32751: PPUSH
32752: LD_VAR 0 4
32756: PPUSH
32757: LD_INT 3
32759: PPUSH
32760: CALL_OW 272
32764: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32765: LD_ADDR_VAR 0 8
32769: PUSH
32770: LD_VAR 0 6
32774: PPUSH
32775: LD_VAR 0 4
32779: PPUSH
32780: LD_INT 3
32782: PPUSH
32783: CALL_OW 273
32787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32788: LD_VAR 0 7
32792: PPUSH
32793: LD_VAR 0 8
32797: PPUSH
32798: CALL_OW 488
32802: NOT
32803: IFFALSE 32807
// continue ;
32805: GO 32739
// if HexInfo ( _x , _y ) = 0 then
32807: LD_VAR 0 7
32811: PPUSH
32812: LD_VAR 0 8
32816: PPUSH
32817: CALL_OW 428
32821: PUSH
32822: LD_INT 0
32824: EQUAL
32825: IFFALSE 32850
// begin ComMoveXY ( unit , _x , _y ) ;
32827: LD_VAR 0 1
32831: PPUSH
32832: LD_VAR 0 7
32836: PPUSH
32837: LD_VAR 0 8
32841: PPUSH
32842: CALL_OW 111
// exit ;
32846: POP
32847: POP
32848: GO 32854
// end ; end ;
32850: GO 32739
32852: POP
32853: POP
// end ;
32854: LD_VAR 0 3
32858: RET
// export function ScanBase ( side , base_area ) ; begin
32859: LD_INT 0
32861: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32862: LD_ADDR_VAR 0 3
32866: PUSH
32867: LD_VAR 0 2
32871: PPUSH
32872: LD_INT 81
32874: PUSH
32875: LD_VAR 0 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PPUSH
32884: CALL_OW 70
32888: ST_TO_ADDR
// end ;
32889: LD_VAR 0 3
32893: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32894: LD_INT 0
32896: PPUSH
32897: PPUSH
32898: PPUSH
32899: PPUSH
// result := false ;
32900: LD_ADDR_VAR 0 2
32904: PUSH
32905: LD_INT 0
32907: ST_TO_ADDR
// side := GetSide ( unit ) ;
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 255
32922: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32923: LD_ADDR_VAR 0 4
32927: PUSH
32928: LD_VAR 0 1
32932: PPUSH
32933: CALL_OW 248
32937: ST_TO_ADDR
// case nat of 1 :
32938: LD_VAR 0 4
32942: PUSH
32943: LD_INT 1
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 32962
32951: POP
// tech := tech_lassight ; 2 :
32952: LD_ADDR_VAR 0 5
32956: PUSH
32957: LD_INT 12
32959: ST_TO_ADDR
32960: GO 33001
32962: LD_INT 2
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 32981
32970: POP
// tech := tech_mortar ; 3 :
32971: LD_ADDR_VAR 0 5
32975: PUSH
32976: LD_INT 41
32978: ST_TO_ADDR
32979: GO 33001
32981: LD_INT 3
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33000
32989: POP
// tech := tech_bazooka ; end ;
32990: LD_ADDR_VAR 0 5
32994: PUSH
32995: LD_INT 44
32997: ST_TO_ADDR
32998: GO 33001
33000: POP
// if Researched ( side , tech ) then
33001: LD_VAR 0 3
33005: PPUSH
33006: LD_VAR 0 5
33010: PPUSH
33011: CALL_OW 325
33015: IFFALSE 33042
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33017: LD_ADDR_VAR 0 2
33021: PUSH
33022: LD_INT 5
33024: PUSH
33025: LD_INT 8
33027: PUSH
33028: LD_INT 9
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: PUSH
33036: LD_VAR 0 4
33040: ARRAY
33041: ST_TO_ADDR
// end ;
33042: LD_VAR 0 2
33046: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
33051: PPUSH
// if not mines then
33052: LD_VAR 0 2
33056: NOT
33057: IFFALSE 33061
// exit ;
33059: GO 33205
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33061: LD_ADDR_VAR 0 5
33065: PUSH
33066: LD_INT 81
33068: PUSH
33069: LD_VAR 0 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 3
33080: PUSH
33081: LD_INT 21
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PPUSH
33099: CALL_OW 69
33103: ST_TO_ADDR
// for i in mines do
33104: LD_ADDR_VAR 0 4
33108: PUSH
33109: LD_VAR 0 2
33113: PUSH
33114: FOR_IN
33115: IFFALSE 33203
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33117: LD_VAR 0 4
33121: PUSH
33122: LD_INT 1
33124: ARRAY
33125: PPUSH
33126: LD_VAR 0 4
33130: PUSH
33131: LD_INT 2
33133: ARRAY
33134: PPUSH
33135: CALL_OW 458
33139: NOT
33140: IFFALSE 33144
// continue ;
33142: GO 33114
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33144: LD_VAR 0 4
33148: PUSH
33149: LD_INT 1
33151: ARRAY
33152: PPUSH
33153: LD_VAR 0 4
33157: PUSH
33158: LD_INT 2
33160: ARRAY
33161: PPUSH
33162: CALL_OW 428
33166: PUSH
33167: LD_VAR 0 5
33171: IN
33172: IFFALSE 33201
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33174: LD_VAR 0 4
33178: PUSH
33179: LD_INT 1
33181: ARRAY
33182: PPUSH
33183: LD_VAR 0 4
33187: PUSH
33188: LD_INT 2
33190: ARRAY
33191: PPUSH
33192: LD_VAR 0 1
33196: PPUSH
33197: CALL_OW 456
// end ;
33201: GO 33114
33203: POP
33204: POP
// end ;
33205: LD_VAR 0 3
33209: RET
// export function Count ( array ) ; var i ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
// result := 0 ;
33214: LD_ADDR_VAR 0 2
33218: PUSH
33219: LD_INT 0
33221: ST_TO_ADDR
// for i in array do
33222: LD_ADDR_VAR 0 3
33226: PUSH
33227: LD_VAR 0 1
33231: PUSH
33232: FOR_IN
33233: IFFALSE 33257
// if i then
33235: LD_VAR 0 3
33239: IFFALSE 33255
// result := result + 1 ;
33241: LD_ADDR_VAR 0 2
33245: PUSH
33246: LD_VAR 0 2
33250: PUSH
33251: LD_INT 1
33253: PLUS
33254: ST_TO_ADDR
33255: GO 33232
33257: POP
33258: POP
// end ;
33259: LD_VAR 0 2
33263: RET
// export function IsEmpty ( building ) ; begin
33264: LD_INT 0
33266: PPUSH
// if not building then
33267: LD_VAR 0 1
33271: NOT
33272: IFFALSE 33276
// exit ;
33274: GO 33319
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33276: LD_ADDR_VAR 0 2
33280: PUSH
33281: LD_VAR 0 1
33285: PUSH
33286: LD_INT 22
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 255
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 58
33305: PUSH
33306: EMPTY
33307: LIST
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PPUSH
33313: CALL_OW 69
33317: IN
33318: ST_TO_ADDR
// end ;
33319: LD_VAR 0 2
33323: RET
// export function IsNotFull ( building ) ; var places ; begin
33324: LD_INT 0
33326: PPUSH
33327: PPUSH
// if not building then
33328: LD_VAR 0 1
33332: NOT
33333: IFFALSE 33337
// exit ;
33335: GO 33508
// result := false ;
33337: LD_ADDR_VAR 0 2
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
// places := 0 ;
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: LD_INT 0
33352: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 266
33362: PUSH
33363: LD_INT 0
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33425
33369: LD_INT 1
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33425
33375: LD_INT 6
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33425
33381: LD_INT 7
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33425
33387: LD_INT 8
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33425
33393: LD_INT 4
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33425
33399: LD_INT 5
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33425
33405: LD_INT 2
33407: DOUBLE
33408: EQUAL
33409: IFTRUE 33425
33411: LD_INT 3
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33425
33417: LD_INT 35
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33436
33425: POP
// places := 6 ; b_bunker , b_breastwork :
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 6
33433: ST_TO_ADDR
33434: GO 33481
33436: LD_INT 32
33438: DOUBLE
33439: EQUAL
33440: IFTRUE 33450
33442: LD_INT 31
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33461
33450: POP
// places := 1 ; b_control_tower :
33451: LD_ADDR_VAR 0 3
33455: PUSH
33456: LD_INT 1
33458: ST_TO_ADDR
33459: GO 33481
33461: LD_INT 36
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33480
33469: POP
// places := 3 ; end ;
33470: LD_ADDR_VAR 0 3
33474: PUSH
33475: LD_INT 3
33477: ST_TO_ADDR
33478: GO 33481
33480: POP
// if places then
33481: LD_VAR 0 3
33485: IFFALSE 33508
// result := UnitsInside ( building ) < places ;
33487: LD_ADDR_VAR 0 2
33491: PUSH
33492: LD_VAR 0 1
33496: PPUSH
33497: CALL_OW 313
33501: PUSH
33502: LD_VAR 0 3
33506: LESS
33507: ST_TO_ADDR
// end ;
33508: LD_VAR 0 2
33512: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33513: LD_INT 0
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
// tmp := [ ] ;
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: EMPTY
33525: ST_TO_ADDR
// list := [ ] ;
33526: LD_ADDR_VAR 0 5
33530: PUSH
33531: EMPTY
33532: ST_TO_ADDR
// for i = 16 to 25 do
33533: LD_ADDR_VAR 0 4
33537: PUSH
33538: DOUBLE
33539: LD_INT 16
33541: DEC
33542: ST_TO_ADDR
33543: LD_INT 25
33545: PUSH
33546: FOR_TO
33547: IFFALSE 33620
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33549: LD_ADDR_VAR 0 3
33553: PUSH
33554: LD_VAR 0 3
33558: PUSH
33559: LD_INT 22
33561: PUSH
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 255
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 91
33578: PUSH
33579: LD_VAR 0 1
33583: PUSH
33584: LD_INT 6
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 30
33594: PUSH
33595: LD_VAR 0 4
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: PUSH
33609: EMPTY
33610: LIST
33611: PPUSH
33612: CALL_OW 69
33616: ADD
33617: ST_TO_ADDR
33618: GO 33546
33620: POP
33621: POP
// for i = 1 to tmp do
33622: LD_ADDR_VAR 0 4
33626: PUSH
33627: DOUBLE
33628: LD_INT 1
33630: DEC
33631: ST_TO_ADDR
33632: LD_VAR 0 3
33636: PUSH
33637: FOR_TO
33638: IFFALSE 33726
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33640: LD_ADDR_VAR 0 5
33644: PUSH
33645: LD_VAR 0 5
33649: PUSH
33650: LD_VAR 0 3
33654: PUSH
33655: LD_VAR 0 4
33659: ARRAY
33660: PPUSH
33661: CALL_OW 266
33665: PUSH
33666: LD_VAR 0 3
33670: PUSH
33671: LD_VAR 0 4
33675: ARRAY
33676: PPUSH
33677: CALL_OW 250
33681: PUSH
33682: LD_VAR 0 3
33686: PUSH
33687: LD_VAR 0 4
33691: ARRAY
33692: PPUSH
33693: CALL_OW 251
33697: PUSH
33698: LD_VAR 0 3
33702: PUSH
33703: LD_VAR 0 4
33707: ARRAY
33708: PPUSH
33709: CALL_OW 254
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: PUSH
33720: EMPTY
33721: LIST
33722: ADD
33723: ST_TO_ADDR
33724: GO 33637
33726: POP
33727: POP
// result := list ;
33728: LD_ADDR_VAR 0 2
33732: PUSH
33733: LD_VAR 0 5
33737: ST_TO_ADDR
// end ;
33738: LD_VAR 0 2
33742: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33743: LD_INT 0
33745: PPUSH
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
33750: PPUSH
33751: PPUSH
// if not factory then
33752: LD_VAR 0 1
33756: NOT
33757: IFFALSE 33761
// exit ;
33759: GO 34354
// if control = control_apeman then
33761: LD_VAR 0 4
33765: PUSH
33766: LD_INT 5
33768: EQUAL
33769: IFFALSE 33878
// begin tmp := UnitsInside ( factory ) ;
33771: LD_ADDR_VAR 0 8
33775: PUSH
33776: LD_VAR 0 1
33780: PPUSH
33781: CALL_OW 313
33785: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33786: LD_VAR 0 8
33790: PPUSH
33791: LD_INT 25
33793: PUSH
33794: LD_INT 12
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL_OW 72
33805: NOT
33806: IFFALSE 33816
// control := control_manual ;
33808: LD_ADDR_VAR 0 4
33812: PUSH
33813: LD_INT 1
33815: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33816: LD_ADDR_VAR 0 8
33820: PUSH
33821: LD_VAR 0 1
33825: PPUSH
33826: CALL 33513 0 1
33830: ST_TO_ADDR
// if tmp then
33831: LD_VAR 0 8
33835: IFFALSE 33878
// begin for i in tmp do
33837: LD_ADDR_VAR 0 7
33841: PUSH
33842: LD_VAR 0 8
33846: PUSH
33847: FOR_IN
33848: IFFALSE 33876
// if i [ 1 ] = b_ext_radio then
33850: LD_VAR 0 7
33854: PUSH
33855: LD_INT 1
33857: ARRAY
33858: PUSH
33859: LD_INT 22
33861: EQUAL
33862: IFFALSE 33874
// begin control := control_remote ;
33864: LD_ADDR_VAR 0 4
33868: PUSH
33869: LD_INT 2
33871: ST_TO_ADDR
// break ;
33872: GO 33876
// end ;
33874: GO 33847
33876: POP
33877: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33878: LD_VAR 0 1
33882: PPUSH
33883: LD_VAR 0 2
33887: PPUSH
33888: LD_VAR 0 3
33892: PPUSH
33893: LD_VAR 0 4
33897: PPUSH
33898: LD_VAR 0 5
33902: PPUSH
33903: CALL_OW 448
33907: IFFALSE 33942
// begin result := [ chassis , engine , control , weapon ] ;
33909: LD_ADDR_VAR 0 6
33913: PUSH
33914: LD_VAR 0 2
33918: PUSH
33919: LD_VAR 0 3
33923: PUSH
33924: LD_VAR 0 4
33928: PUSH
33929: LD_VAR 0 5
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: ST_TO_ADDR
// exit ;
33940: GO 34354
// end ; _chassis := AvailableChassisList ( factory ) ;
33942: LD_ADDR_VAR 0 9
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL_OW 475
33956: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33957: LD_ADDR_VAR 0 11
33961: PUSH
33962: LD_VAR 0 1
33966: PPUSH
33967: CALL_OW 476
33971: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33972: LD_ADDR_VAR 0 12
33976: PUSH
33977: LD_VAR 0 1
33981: PPUSH
33982: CALL_OW 477
33986: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33987: LD_ADDR_VAR 0 10
33991: PUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 478
34001: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34002: LD_VAR 0 9
34006: NOT
34007: PUSH
34008: LD_VAR 0 11
34012: NOT
34013: OR
34014: PUSH
34015: LD_VAR 0 12
34019: NOT
34020: OR
34021: PUSH
34022: LD_VAR 0 10
34026: NOT
34027: OR
34028: IFFALSE 34063
// begin result := [ chassis , engine , control , weapon ] ;
34030: LD_ADDR_VAR 0 6
34034: PUSH
34035: LD_VAR 0 2
34039: PUSH
34040: LD_VAR 0 3
34044: PUSH
34045: LD_VAR 0 4
34049: PUSH
34050: LD_VAR 0 5
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: ST_TO_ADDR
// exit ;
34061: GO 34354
// end ; if not chassis in _chassis then
34063: LD_VAR 0 2
34067: PUSH
34068: LD_VAR 0 9
34072: IN
34073: NOT
34074: IFFALSE 34100
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34076: LD_ADDR_VAR 0 2
34080: PUSH
34081: LD_VAR 0 9
34085: PUSH
34086: LD_INT 1
34088: PPUSH
34089: LD_VAR 0 9
34093: PPUSH
34094: CALL_OW 12
34098: ARRAY
34099: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34100: LD_VAR 0 2
34104: PPUSH
34105: LD_VAR 0 3
34109: PPUSH
34110: CALL 34359 0 2
34114: NOT
34115: IFFALSE 34174
// repeat engine := _engine [ 1 ] ;
34117: LD_ADDR_VAR 0 3
34121: PUSH
34122: LD_VAR 0 11
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34131: LD_ADDR_VAR 0 11
34135: PUSH
34136: LD_VAR 0 11
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: CALL_OW 3
34148: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34149: LD_VAR 0 2
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: CALL 34359 0 2
34163: PUSH
34164: LD_VAR 0 11
34168: PUSH
34169: EMPTY
34170: EQUAL
34171: OR
34172: IFFALSE 34117
// if not control in _control then
34174: LD_VAR 0 4
34178: PUSH
34179: LD_VAR 0 12
34183: IN
34184: NOT
34185: IFFALSE 34211
// control := _control [ rand ( 1 , _control ) ] ;
34187: LD_ADDR_VAR 0 4
34191: PUSH
34192: LD_VAR 0 12
34196: PUSH
34197: LD_INT 1
34199: PPUSH
34200: LD_VAR 0 12
34204: PPUSH
34205: CALL_OW 12
34209: ARRAY
34210: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34211: LD_VAR 0 2
34215: PPUSH
34216: LD_VAR 0 5
34220: PPUSH
34221: CALL 34579 0 2
34225: NOT
34226: IFFALSE 34285
// repeat weapon := _weapon [ 1 ] ;
34228: LD_ADDR_VAR 0 5
34232: PUSH
34233: LD_VAR 0 10
34237: PUSH
34238: LD_INT 1
34240: ARRAY
34241: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34242: LD_ADDR_VAR 0 10
34246: PUSH
34247: LD_VAR 0 10
34251: PPUSH
34252: LD_INT 1
34254: PPUSH
34255: CALL_OW 3
34259: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34260: LD_VAR 0 2
34264: PPUSH
34265: LD_VAR 0 5
34269: PPUSH
34270: CALL 34579 0 2
34274: PUSH
34275: LD_VAR 0 10
34279: PUSH
34280: EMPTY
34281: EQUAL
34282: OR
34283: IFFALSE 34228
// result := [ ] ;
34285: LD_ADDR_VAR 0 6
34289: PUSH
34290: EMPTY
34291: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34292: LD_VAR 0 1
34296: PPUSH
34297: LD_VAR 0 2
34301: PPUSH
34302: LD_VAR 0 3
34306: PPUSH
34307: LD_VAR 0 4
34311: PPUSH
34312: LD_VAR 0 5
34316: PPUSH
34317: CALL_OW 448
34321: IFFALSE 34354
// result := [ chassis , engine , control , weapon ] ;
34323: LD_ADDR_VAR 0 6
34327: PUSH
34328: LD_VAR 0 2
34332: PUSH
34333: LD_VAR 0 3
34337: PUSH
34338: LD_VAR 0 4
34342: PUSH
34343: LD_VAR 0 5
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// end ;
34354: LD_VAR 0 6
34358: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34359: LD_INT 0
34361: PPUSH
// if not chassis or not engine then
34362: LD_VAR 0 1
34366: NOT
34367: PUSH
34368: LD_VAR 0 2
34372: NOT
34373: OR
34374: IFFALSE 34378
// exit ;
34376: GO 34574
// case engine of engine_solar :
34378: LD_VAR 0 2
34382: PUSH
34383: LD_INT 2
34385: DOUBLE
34386: EQUAL
34387: IFTRUE 34391
34389: GO 34429
34391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: LD_INT 11
34399: PUSH
34400: LD_INT 12
34402: PUSH
34403: LD_INT 13
34405: PUSH
34406: LD_INT 14
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 3
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: ST_TO_ADDR
34427: GO 34558
34429: LD_INT 1
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34437
34435: GO 34499
34437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34438: LD_ADDR_VAR 0 3
34442: PUSH
34443: LD_INT 11
34445: PUSH
34446: LD_INT 12
34448: PUSH
34449: LD_INT 13
34451: PUSH
34452: LD_INT 14
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: LD_INT 4
34466: PUSH
34467: LD_INT 5
34469: PUSH
34470: LD_INT 21
34472: PUSH
34473: LD_INT 23
34475: PUSH
34476: LD_INT 22
34478: PUSH
34479: LD_INT 24
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: ST_TO_ADDR
34497: GO 34558
34499: LD_INT 3
34501: DOUBLE
34502: EQUAL
34503: IFTRUE 34507
34505: GO 34557
34507: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34508: LD_ADDR_VAR 0 3
34512: PUSH
34513: LD_INT 13
34515: PUSH
34516: LD_INT 14
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: LD_INT 4
34527: PUSH
34528: LD_INT 5
34530: PUSH
34531: LD_INT 21
34533: PUSH
34534: LD_INT 22
34536: PUSH
34537: LD_INT 23
34539: PUSH
34540: LD_INT 24
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
34555: GO 34558
34557: POP
// result := ( chassis in result ) ;
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_VAR 0 1
34567: PUSH
34568: LD_VAR 0 3
34572: IN
34573: ST_TO_ADDR
// end ;
34574: LD_VAR 0 3
34578: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34579: LD_INT 0
34581: PPUSH
// if not chassis or not weapon then
34582: LD_VAR 0 1
34586: NOT
34587: PUSH
34588: LD_VAR 0 2
34592: NOT
34593: OR
34594: IFFALSE 34598
// exit ;
34596: GO 35660
// case weapon of us_machine_gun :
34598: LD_VAR 0 2
34602: PUSH
34603: LD_INT 2
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34611
34609: GO 34641
34611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: LD_INT 4
34628: PUSH
34629: LD_INT 5
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
34639: GO 35644
34641: LD_INT 3
34643: DOUBLE
34644: EQUAL
34645: IFTRUE 34649
34647: GO 34679
34649: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34650: LD_ADDR_VAR 0 3
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: ST_TO_ADDR
34677: GO 35644
34679: LD_INT 11
34681: DOUBLE
34682: EQUAL
34683: IFTRUE 34687
34685: GO 34717
34687: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 3
34701: PUSH
34702: LD_INT 4
34704: PUSH
34705: LD_INT 5
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
34715: GO 35644
34717: LD_INT 4
34719: DOUBLE
34720: EQUAL
34721: IFTRUE 34725
34723: GO 34751
34725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34726: LD_ADDR_VAR 0 3
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
34749: GO 35644
34751: LD_INT 5
34753: DOUBLE
34754: EQUAL
34755: IFTRUE 34759
34757: GO 34785
34759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34760: LD_ADDR_VAR 0 3
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: LD_INT 4
34773: PUSH
34774: LD_INT 5
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: ST_TO_ADDR
34783: GO 35644
34785: LD_INT 9
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34819
34793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 4
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
34817: GO 35644
34819: LD_INT 7
34821: DOUBLE
34822: EQUAL
34823: IFTRUE 34827
34825: GO 34853
34827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 5
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
34851: GO 35644
34853: LD_INT 12
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 34887
34861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34862: LD_ADDR_VAR 0 3
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 4
34875: PUSH
34876: LD_INT 5
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: ST_TO_ADDR
34885: GO 35644
34887: LD_INT 13
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34895
34893: GO 34921
34895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: ST_TO_ADDR
34919: GO 35644
34921: LD_INT 14
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 34947
34929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34930: LD_ADDR_VAR 0 3
34934: PUSH
34935: LD_INT 4
34937: PUSH
34938: LD_INT 5
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: ST_TO_ADDR
34945: GO 35644
34947: LD_INT 6
34949: DOUBLE
34950: EQUAL
34951: IFTRUE 34955
34953: GO 34973
34955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_INT 4
34963: PUSH
34964: LD_INT 5
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: ST_TO_ADDR
34971: GO 35644
34973: LD_INT 10
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 34981
34979: GO 34999
34981: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34982: LD_ADDR_VAR 0 3
34986: PUSH
34987: LD_INT 4
34989: PUSH
34990: LD_INT 5
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: ST_TO_ADDR
34997: GO 35644
34999: LD_INT 22
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 35033
35007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35008: LD_ADDR_VAR 0 3
35012: PUSH
35013: LD_INT 11
35015: PUSH
35016: LD_INT 12
35018: PUSH
35019: LD_INT 13
35021: PUSH
35022: LD_INT 14
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: ST_TO_ADDR
35031: GO 35644
35033: LD_INT 23
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35041
35039: GO 35067
35041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35042: LD_ADDR_VAR 0 3
35046: PUSH
35047: LD_INT 11
35049: PUSH
35050: LD_INT 12
35052: PUSH
35053: LD_INT 13
35055: PUSH
35056: LD_INT 14
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: ST_TO_ADDR
35065: GO 35644
35067: LD_INT 24
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35101
35075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_INT 11
35083: PUSH
35084: LD_INT 12
35086: PUSH
35087: LD_INT 13
35089: PUSH
35090: LD_INT 14
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
35099: GO 35644
35101: LD_INT 30
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35135
35109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35110: LD_ADDR_VAR 0 3
35114: PUSH
35115: LD_INT 11
35117: PUSH
35118: LD_INT 12
35120: PUSH
35121: LD_INT 13
35123: PUSH
35124: LD_INT 14
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
35133: GO 35644
35135: LD_INT 25
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35161
35143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35144: LD_ADDR_VAR 0 3
35148: PUSH
35149: LD_INT 13
35151: PUSH
35152: LD_INT 14
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: ST_TO_ADDR
35159: GO 35644
35161: LD_INT 27
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35187
35169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35170: LD_ADDR_VAR 0 3
35174: PUSH
35175: LD_INT 13
35177: PUSH
35178: LD_INT 14
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: ST_TO_ADDR
35185: GO 35644
35187: LD_EXP 51
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35223
35197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_INT 11
35205: PUSH
35206: LD_INT 12
35208: PUSH
35209: LD_INT 13
35211: PUSH
35212: LD_INT 14
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
35221: GO 35644
35223: LD_INT 28
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35231
35229: GO 35249
35231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35232: LD_ADDR_VAR 0 3
35236: PUSH
35237: LD_INT 13
35239: PUSH
35240: LD_INT 14
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: ST_TO_ADDR
35247: GO 35644
35249: LD_INT 29
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35275
35257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35258: LD_ADDR_VAR 0 3
35262: PUSH
35263: LD_INT 13
35265: PUSH
35266: LD_INT 14
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: ST_TO_ADDR
35273: GO 35644
35275: LD_INT 31
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35301
35283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 13
35291: PUSH
35292: LD_INT 14
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: ST_TO_ADDR
35299: GO 35644
35301: LD_INT 26
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35327
35309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_INT 13
35317: PUSH
35318: LD_INT 14
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: ST_TO_ADDR
35325: GO 35644
35327: LD_INT 42
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35335
35333: GO 35361
35335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35336: LD_ADDR_VAR 0 3
35340: PUSH
35341: LD_INT 21
35343: PUSH
35344: LD_INT 22
35346: PUSH
35347: LD_INT 23
35349: PUSH
35350: LD_INT 24
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
35359: GO 35644
35361: LD_INT 43
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35369
35367: GO 35395
35369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35370: LD_ADDR_VAR 0 3
35374: PUSH
35375: LD_INT 21
35377: PUSH
35378: LD_INT 22
35380: PUSH
35381: LD_INT 23
35383: PUSH
35384: LD_INT 24
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
35393: GO 35644
35395: LD_INT 44
35397: DOUBLE
35398: EQUAL
35399: IFTRUE 35403
35401: GO 35429
35403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35404: LD_ADDR_VAR 0 3
35408: PUSH
35409: LD_INT 21
35411: PUSH
35412: LD_INT 22
35414: PUSH
35415: LD_INT 23
35417: PUSH
35418: LD_INT 24
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
35427: GO 35644
35429: LD_INT 45
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35437
35435: GO 35463
35437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35438: LD_ADDR_VAR 0 3
35442: PUSH
35443: LD_INT 21
35445: PUSH
35446: LD_INT 22
35448: PUSH
35449: LD_INT 23
35451: PUSH
35452: LD_INT 24
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: ST_TO_ADDR
35461: GO 35644
35463: LD_INT 49
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35471
35469: GO 35497
35471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35472: LD_ADDR_VAR 0 3
35476: PUSH
35477: LD_INT 21
35479: PUSH
35480: LD_INT 22
35482: PUSH
35483: LD_INT 23
35485: PUSH
35486: LD_INT 24
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
35495: GO 35644
35497: LD_INT 51
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35505
35503: GO 35531
35505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: LD_INT 21
35513: PUSH
35514: LD_INT 22
35516: PUSH
35517: LD_INT 23
35519: PUSH
35520: LD_INT 24
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
35529: GO 35644
35531: LD_INT 52
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35539
35537: GO 35565
35539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35540: LD_ADDR_VAR 0 3
35544: PUSH
35545: LD_INT 21
35547: PUSH
35548: LD_INT 22
35550: PUSH
35551: LD_INT 23
35553: PUSH
35554: LD_INT 24
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
35563: GO 35644
35565: LD_INT 53
35567: DOUBLE
35568: EQUAL
35569: IFTRUE 35573
35571: GO 35591
35573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35574: LD_ADDR_VAR 0 3
35578: PUSH
35579: LD_INT 23
35581: PUSH
35582: LD_INT 24
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: ST_TO_ADDR
35589: GO 35644
35591: LD_INT 46
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35599
35597: GO 35617
35599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_INT 23
35607: PUSH
35608: LD_INT 24
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: ST_TO_ADDR
35615: GO 35644
35617: LD_INT 47
35619: DOUBLE
35620: EQUAL
35621: IFTRUE 35625
35623: GO 35643
35625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35626: LD_ADDR_VAR 0 3
35630: PUSH
35631: LD_INT 23
35633: PUSH
35634: LD_INT 24
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: ST_TO_ADDR
35641: GO 35644
35643: POP
// result := ( chassis in result ) ;
35644: LD_ADDR_VAR 0 3
35648: PUSH
35649: LD_VAR 0 1
35653: PUSH
35654: LD_VAR 0 3
35658: IN
35659: ST_TO_ADDR
// end ;
35660: LD_VAR 0 3
35664: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35665: LD_INT 0
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
// result := array ;
35674: LD_ADDR_VAR 0 5
35678: PUSH
35679: LD_VAR 0 1
35683: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35684: LD_VAR 0 1
35688: NOT
35689: PUSH
35690: LD_VAR 0 2
35694: NOT
35695: OR
35696: PUSH
35697: LD_VAR 0 3
35701: NOT
35702: OR
35703: PUSH
35704: LD_VAR 0 2
35708: PUSH
35709: LD_VAR 0 1
35713: GREATER
35714: OR
35715: PUSH
35716: LD_VAR 0 3
35720: PUSH
35721: LD_VAR 0 1
35725: GREATER
35726: OR
35727: IFFALSE 35731
// exit ;
35729: GO 36027
// if direction then
35731: LD_VAR 0 4
35735: IFFALSE 35799
// begin d := 1 ;
35737: LD_ADDR_VAR 0 9
35741: PUSH
35742: LD_INT 1
35744: ST_TO_ADDR
// if i_from > i_to then
35745: LD_VAR 0 2
35749: PUSH
35750: LD_VAR 0 3
35754: GREATER
35755: IFFALSE 35781
// length := ( array - i_from ) + i_to else
35757: LD_ADDR_VAR 0 11
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_VAR 0 2
35771: MINUS
35772: PUSH
35773: LD_VAR 0 3
35777: PLUS
35778: ST_TO_ADDR
35779: GO 35797
// length := i_to - i_from ;
35781: LD_ADDR_VAR 0 11
35785: PUSH
35786: LD_VAR 0 3
35790: PUSH
35791: LD_VAR 0 2
35795: MINUS
35796: ST_TO_ADDR
// end else
35797: GO 35860
// begin d := - 1 ;
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: ST_TO_ADDR
// if i_from > i_to then
35808: LD_VAR 0 2
35812: PUSH
35813: LD_VAR 0 3
35817: GREATER
35818: IFFALSE 35838
// length := i_from - i_to else
35820: LD_ADDR_VAR 0 11
35824: PUSH
35825: LD_VAR 0 2
35829: PUSH
35830: LD_VAR 0 3
35834: MINUS
35835: ST_TO_ADDR
35836: GO 35860
// length := ( array - i_to ) + i_from ;
35838: LD_ADDR_VAR 0 11
35842: PUSH
35843: LD_VAR 0 1
35847: PUSH
35848: LD_VAR 0 3
35852: MINUS
35853: PUSH
35854: LD_VAR 0 2
35858: PLUS
35859: ST_TO_ADDR
// end ; if not length then
35860: LD_VAR 0 11
35864: NOT
35865: IFFALSE 35869
// exit ;
35867: GO 36027
// tmp := array ;
35869: LD_ADDR_VAR 0 10
35873: PUSH
35874: LD_VAR 0 1
35878: ST_TO_ADDR
// for i = 1 to length do
35879: LD_ADDR_VAR 0 6
35883: PUSH
35884: DOUBLE
35885: LD_INT 1
35887: DEC
35888: ST_TO_ADDR
35889: LD_VAR 0 11
35893: PUSH
35894: FOR_TO
35895: IFFALSE 36015
// begin for j = 1 to array do
35897: LD_ADDR_VAR 0 7
35901: PUSH
35902: DOUBLE
35903: LD_INT 1
35905: DEC
35906: ST_TO_ADDR
35907: LD_VAR 0 1
35911: PUSH
35912: FOR_TO
35913: IFFALSE 36001
// begin k := j + d ;
35915: LD_ADDR_VAR 0 8
35919: PUSH
35920: LD_VAR 0 7
35924: PUSH
35925: LD_VAR 0 9
35929: PLUS
35930: ST_TO_ADDR
// if k > array then
35931: LD_VAR 0 8
35935: PUSH
35936: LD_VAR 0 1
35940: GREATER
35941: IFFALSE 35951
// k := 1 ;
35943: LD_ADDR_VAR 0 8
35947: PUSH
35948: LD_INT 1
35950: ST_TO_ADDR
// if not k then
35951: LD_VAR 0 8
35955: NOT
35956: IFFALSE 35968
// k := array ;
35958: LD_ADDR_VAR 0 8
35962: PUSH
35963: LD_VAR 0 1
35967: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35968: LD_ADDR_VAR 0 10
35972: PUSH
35973: LD_VAR 0 10
35977: PPUSH
35978: LD_VAR 0 8
35982: PPUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_VAR 0 7
35992: ARRAY
35993: PPUSH
35994: CALL_OW 1
35998: ST_TO_ADDR
// end ;
35999: GO 35912
36001: POP
36002: POP
// array := tmp ;
36003: LD_ADDR_VAR 0 1
36007: PUSH
36008: LD_VAR 0 10
36012: ST_TO_ADDR
// end ;
36013: GO 35894
36015: POP
36016: POP
// result := array ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_VAR 0 1
36026: ST_TO_ADDR
// end ;
36027: LD_VAR 0 5
36031: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36032: LD_INT 0
36034: PPUSH
36035: PPUSH
// result := 0 ;
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_INT 0
36043: ST_TO_ADDR
// if not array or not value in array then
36044: LD_VAR 0 1
36048: NOT
36049: PUSH
36050: LD_VAR 0 2
36054: PUSH
36055: LD_VAR 0 1
36059: IN
36060: NOT
36061: OR
36062: IFFALSE 36066
// exit ;
36064: GO 36120
// for i = 1 to array do
36066: LD_ADDR_VAR 0 4
36070: PUSH
36071: DOUBLE
36072: LD_INT 1
36074: DEC
36075: ST_TO_ADDR
36076: LD_VAR 0 1
36080: PUSH
36081: FOR_TO
36082: IFFALSE 36118
// if value = array [ i ] then
36084: LD_VAR 0 2
36088: PUSH
36089: LD_VAR 0 1
36093: PUSH
36094: LD_VAR 0 4
36098: ARRAY
36099: EQUAL
36100: IFFALSE 36116
// begin result := i ;
36102: LD_ADDR_VAR 0 3
36106: PUSH
36107: LD_VAR 0 4
36111: ST_TO_ADDR
// exit ;
36112: POP
36113: POP
36114: GO 36120
// end ;
36116: GO 36081
36118: POP
36119: POP
// end ;
36120: LD_VAR 0 3
36124: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36125: LD_INT 0
36127: PPUSH
// vc_chassis := chassis ;
36128: LD_ADDR_OWVAR 37
36132: PUSH
36133: LD_VAR 0 1
36137: ST_TO_ADDR
// vc_engine := engine ;
36138: LD_ADDR_OWVAR 39
36142: PUSH
36143: LD_VAR 0 2
36147: ST_TO_ADDR
// vc_control := control ;
36148: LD_ADDR_OWVAR 38
36152: PUSH
36153: LD_VAR 0 3
36157: ST_TO_ADDR
// vc_weapon := weapon ;
36158: LD_ADDR_OWVAR 40
36162: PUSH
36163: LD_VAR 0 4
36167: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36168: LD_ADDR_OWVAR 41
36172: PUSH
36173: LD_VAR 0 5
36177: ST_TO_ADDR
// end ;
36178: LD_VAR 0 6
36182: RET
// export function WantPlant ( unit ) ; var task ; begin
36183: LD_INT 0
36185: PPUSH
36186: PPUSH
// result := false ;
36187: LD_ADDR_VAR 0 2
36191: PUSH
36192: LD_INT 0
36194: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: LD_VAR 0 1
36204: PPUSH
36205: CALL_OW 437
36209: ST_TO_ADDR
// if task then
36210: LD_VAR 0 3
36214: IFFALSE 36242
// if task [ 1 ] [ 1 ] = p then
36216: LD_VAR 0 3
36220: PUSH
36221: LD_INT 1
36223: ARRAY
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: PUSH
36229: LD_STRING p
36231: EQUAL
36232: IFFALSE 36242
// result := true ;
36234: LD_ADDR_VAR 0 2
36238: PUSH
36239: LD_INT 1
36241: ST_TO_ADDR
// end ;
36242: LD_VAR 0 2
36246: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36247: LD_INT 0
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
// if pos < 1 then
36253: LD_VAR 0 2
36257: PUSH
36258: LD_INT 1
36260: LESS
36261: IFFALSE 36265
// exit ;
36263: GO 36568
// if pos = 1 then
36265: LD_VAR 0 2
36269: PUSH
36270: LD_INT 1
36272: EQUAL
36273: IFFALSE 36306
// result := Replace ( arr , pos [ 1 ] , value ) else
36275: LD_ADDR_VAR 0 4
36279: PUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: LD_VAR 0 2
36289: PUSH
36290: LD_INT 1
36292: ARRAY
36293: PPUSH
36294: LD_VAR 0 3
36298: PPUSH
36299: CALL_OW 1
36303: ST_TO_ADDR
36304: GO 36568
// begin tmp := arr ;
36306: LD_ADDR_VAR 0 6
36310: PUSH
36311: LD_VAR 0 1
36315: ST_TO_ADDR
// s_arr := [ tmp ] ;
36316: LD_ADDR_VAR 0 7
36320: PUSH
36321: LD_VAR 0 6
36325: PUSH
36326: EMPTY
36327: LIST
36328: ST_TO_ADDR
// for i = 1 to pos - 1 do
36329: LD_ADDR_VAR 0 5
36333: PUSH
36334: DOUBLE
36335: LD_INT 1
36337: DEC
36338: ST_TO_ADDR
36339: LD_VAR 0 2
36343: PUSH
36344: LD_INT 1
36346: MINUS
36347: PUSH
36348: FOR_TO
36349: IFFALSE 36394
// begin tmp := tmp [ pos [ i ] ] ;
36351: LD_ADDR_VAR 0 6
36355: PUSH
36356: LD_VAR 0 6
36360: PUSH
36361: LD_VAR 0 2
36365: PUSH
36366: LD_VAR 0 5
36370: ARRAY
36371: ARRAY
36372: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36373: LD_ADDR_VAR 0 7
36377: PUSH
36378: LD_VAR 0 7
36382: PUSH
36383: LD_VAR 0 6
36387: PUSH
36388: EMPTY
36389: LIST
36390: ADD
36391: ST_TO_ADDR
// end ;
36392: GO 36348
36394: POP
36395: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36396: LD_ADDR_VAR 0 6
36400: PUSH
36401: LD_VAR 0 6
36405: PPUSH
36406: LD_VAR 0 2
36410: PUSH
36411: LD_VAR 0 2
36415: ARRAY
36416: PPUSH
36417: LD_VAR 0 3
36421: PPUSH
36422: CALL_OW 1
36426: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36427: LD_ADDR_VAR 0 7
36431: PUSH
36432: LD_VAR 0 7
36436: PPUSH
36437: LD_VAR 0 7
36441: PPUSH
36442: LD_VAR 0 6
36446: PPUSH
36447: CALL_OW 1
36451: ST_TO_ADDR
// for i = s_arr downto 2 do
36452: LD_ADDR_VAR 0 5
36456: PUSH
36457: DOUBLE
36458: LD_VAR 0 7
36462: INC
36463: ST_TO_ADDR
36464: LD_INT 2
36466: PUSH
36467: FOR_DOWNTO
36468: IFFALSE 36552
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36470: LD_ADDR_VAR 0 6
36474: PUSH
36475: LD_VAR 0 7
36479: PUSH
36480: LD_VAR 0 5
36484: PUSH
36485: LD_INT 1
36487: MINUS
36488: ARRAY
36489: PPUSH
36490: LD_VAR 0 2
36494: PUSH
36495: LD_VAR 0 5
36499: PUSH
36500: LD_INT 1
36502: MINUS
36503: ARRAY
36504: PPUSH
36505: LD_VAR 0 7
36509: PUSH
36510: LD_VAR 0 5
36514: ARRAY
36515: PPUSH
36516: CALL_OW 1
36520: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36521: LD_ADDR_VAR 0 7
36525: PUSH
36526: LD_VAR 0 7
36530: PPUSH
36531: LD_VAR 0 5
36535: PUSH
36536: LD_INT 1
36538: MINUS
36539: PPUSH
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL_OW 1
36549: ST_TO_ADDR
// end ;
36550: GO 36467
36552: POP
36553: POP
// result := s_arr [ 1 ] ;
36554: LD_ADDR_VAR 0 4
36558: PUSH
36559: LD_VAR 0 7
36563: PUSH
36564: LD_INT 1
36566: ARRAY
36567: ST_TO_ADDR
// end ; end ;
36568: LD_VAR 0 4
36572: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36573: LD_INT 0
36575: PPUSH
36576: PPUSH
// if not list then
36577: LD_VAR 0 1
36581: NOT
36582: IFFALSE 36586
// exit ;
36584: GO 36677
// i := list [ pos1 ] ;
36586: LD_ADDR_VAR 0 5
36590: PUSH
36591: LD_VAR 0 1
36595: PUSH
36596: LD_VAR 0 2
36600: ARRAY
36601: ST_TO_ADDR
// if not i then
36602: LD_VAR 0 5
36606: NOT
36607: IFFALSE 36611
// exit ;
36609: GO 36677
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36611: LD_ADDR_VAR 0 1
36615: PUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: LD_VAR 0 2
36625: PPUSH
36626: LD_VAR 0 1
36630: PUSH
36631: LD_VAR 0 3
36635: ARRAY
36636: PPUSH
36637: CALL_OW 1
36641: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36642: LD_ADDR_VAR 0 1
36646: PUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: LD_VAR 0 3
36656: PPUSH
36657: LD_VAR 0 5
36661: PPUSH
36662: CALL_OW 1
36666: ST_TO_ADDR
// result := list ;
36667: LD_ADDR_VAR 0 4
36671: PUSH
36672: LD_VAR 0 1
36676: ST_TO_ADDR
// end ;
36677: LD_VAR 0 4
36681: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36682: LD_INT 0
36684: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36685: LD_ADDR_VAR 0 5
36689: PUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL_OW 250
36699: PPUSH
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 251
36709: PPUSH
36710: LD_VAR 0 2
36714: PPUSH
36715: LD_VAR 0 3
36719: PPUSH
36720: LD_VAR 0 4
36724: PPUSH
36725: CALL 36735 0 5
36729: ST_TO_ADDR
// end ;
36730: LD_VAR 0 5
36734: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36735: LD_INT 0
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
// if not list then
36741: LD_VAR 0 3
36745: NOT
36746: IFFALSE 36750
// exit ;
36748: GO 37138
// result := [ ] ;
36750: LD_ADDR_VAR 0 6
36754: PUSH
36755: EMPTY
36756: ST_TO_ADDR
// for i in list do
36757: LD_ADDR_VAR 0 7
36761: PUSH
36762: LD_VAR 0 3
36766: PUSH
36767: FOR_IN
36768: IFFALSE 36970
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36770: LD_ADDR_VAR 0 9
36774: PUSH
36775: LD_VAR 0 7
36779: PPUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: LD_VAR 0 2
36789: PPUSH
36790: CALL_OW 297
36794: ST_TO_ADDR
// if not result then
36795: LD_VAR 0 6
36799: NOT
36800: IFFALSE 36826
// result := [ [ i , tmp ] ] else
36802: LD_ADDR_VAR 0 6
36806: PUSH
36807: LD_VAR 0 7
36811: PUSH
36812: LD_VAR 0 9
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: EMPTY
36822: LIST
36823: ST_TO_ADDR
36824: GO 36968
// begin if result [ result ] [ 2 ] < tmp then
36826: LD_VAR 0 6
36830: PUSH
36831: LD_VAR 0 6
36835: ARRAY
36836: PUSH
36837: LD_INT 2
36839: ARRAY
36840: PUSH
36841: LD_VAR 0 9
36845: LESS
36846: IFFALSE 36888
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36848: LD_ADDR_VAR 0 6
36852: PUSH
36853: LD_VAR 0 6
36857: PPUSH
36858: LD_VAR 0 6
36862: PUSH
36863: LD_INT 1
36865: PLUS
36866: PPUSH
36867: LD_VAR 0 7
36871: PUSH
36872: LD_VAR 0 9
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PPUSH
36881: CALL_OW 2
36885: ST_TO_ADDR
36886: GO 36968
// for j = 1 to result do
36888: LD_ADDR_VAR 0 8
36892: PUSH
36893: DOUBLE
36894: LD_INT 1
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 6
36902: PUSH
36903: FOR_TO
36904: IFFALSE 36966
// begin if tmp < result [ j ] [ 2 ] then
36906: LD_VAR 0 9
36910: PUSH
36911: LD_VAR 0 6
36915: PUSH
36916: LD_VAR 0 8
36920: ARRAY
36921: PUSH
36922: LD_INT 2
36924: ARRAY
36925: LESS
36926: IFFALSE 36964
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36928: LD_ADDR_VAR 0 6
36932: PUSH
36933: LD_VAR 0 6
36937: PPUSH
36938: LD_VAR 0 8
36942: PPUSH
36943: LD_VAR 0 7
36947: PUSH
36948: LD_VAR 0 9
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PPUSH
36957: CALL_OW 2
36961: ST_TO_ADDR
// break ;
36962: GO 36966
// end ; end ;
36964: GO 36903
36966: POP
36967: POP
// end ; end ;
36968: GO 36767
36970: POP
36971: POP
// if result and not asc then
36972: LD_VAR 0 6
36976: PUSH
36977: LD_VAR 0 4
36981: NOT
36982: AND
36983: IFFALSE 37058
// begin tmp := result ;
36985: LD_ADDR_VAR 0 9
36989: PUSH
36990: LD_VAR 0 6
36994: ST_TO_ADDR
// for i = tmp downto 1 do
36995: LD_ADDR_VAR 0 7
36999: PUSH
37000: DOUBLE
37001: LD_VAR 0 9
37005: INC
37006: ST_TO_ADDR
37007: LD_INT 1
37009: PUSH
37010: FOR_DOWNTO
37011: IFFALSE 37056
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37013: LD_ADDR_VAR 0 6
37017: PUSH
37018: LD_VAR 0 6
37022: PPUSH
37023: LD_VAR 0 9
37027: PUSH
37028: LD_VAR 0 7
37032: MINUS
37033: PUSH
37034: LD_INT 1
37036: PLUS
37037: PPUSH
37038: LD_VAR 0 9
37042: PUSH
37043: LD_VAR 0 7
37047: ARRAY
37048: PPUSH
37049: CALL_OW 1
37053: ST_TO_ADDR
37054: GO 37010
37056: POP
37057: POP
// end ; tmp := [ ] ;
37058: LD_ADDR_VAR 0 9
37062: PUSH
37063: EMPTY
37064: ST_TO_ADDR
// if mode then
37065: LD_VAR 0 5
37069: IFFALSE 37138
// begin for i = 1 to result do
37071: LD_ADDR_VAR 0 7
37075: PUSH
37076: DOUBLE
37077: LD_INT 1
37079: DEC
37080: ST_TO_ADDR
37081: LD_VAR 0 6
37085: PUSH
37086: FOR_TO
37087: IFFALSE 37126
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37089: LD_ADDR_VAR 0 9
37093: PUSH
37094: LD_VAR 0 9
37098: PPUSH
37099: LD_VAR 0 7
37103: PPUSH
37104: LD_VAR 0 6
37108: PUSH
37109: LD_VAR 0 7
37113: ARRAY
37114: PUSH
37115: LD_INT 1
37117: ARRAY
37118: PPUSH
37119: CALL_OW 1
37123: ST_TO_ADDR
37124: GO 37086
37126: POP
37127: POP
// result := tmp ;
37128: LD_ADDR_VAR 0 6
37132: PUSH
37133: LD_VAR 0 9
37137: ST_TO_ADDR
// end ; end ;
37138: LD_VAR 0 6
37142: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37143: LD_INT 0
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37151: LD_ADDR_VAR 0 5
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// if not x or not y then
37173: LD_VAR 0 2
37177: NOT
37178: PUSH
37179: LD_VAR 0 3
37183: NOT
37184: OR
37185: IFFALSE 37189
// exit ;
37187: GO 38841
// if not range then
37189: LD_VAR 0 4
37193: NOT
37194: IFFALSE 37204
// range := 10 ;
37196: LD_ADDR_VAR 0 4
37200: PUSH
37201: LD_INT 10
37203: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37204: LD_ADDR_VAR 0 8
37208: PUSH
37209: LD_INT 81
37211: PUSH
37212: LD_VAR 0 1
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 92
37223: PUSH
37224: LD_VAR 0 2
37228: PUSH
37229: LD_VAR 0 3
37233: PUSH
37234: LD_VAR 0 4
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 21
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: PPUSH
37267: CALL_OW 69
37271: ST_TO_ADDR
// if not tmp then
37272: LD_VAR 0 8
37276: NOT
37277: IFFALSE 37281
// exit ;
37279: GO 38841
// for i in tmp do
37281: LD_ADDR_VAR 0 6
37285: PUSH
37286: LD_VAR 0 8
37290: PUSH
37291: FOR_IN
37292: IFFALSE 38816
// begin points := [ 0 , 0 , 0 ] ;
37294: LD_ADDR_VAR 0 9
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// bpoints := 1 ;
37313: LD_ADDR_VAR 0 10
37317: PUSH
37318: LD_INT 1
37320: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37321: LD_VAR 0 6
37325: PPUSH
37326: CALL_OW 247
37330: PUSH
37331: LD_INT 1
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 37917
37339: POP
// begin if GetClass ( i ) = 1 then
37340: LD_VAR 0 6
37344: PPUSH
37345: CALL_OW 257
37349: PUSH
37350: LD_INT 1
37352: EQUAL
37353: IFFALSE 37374
// points := [ 10 , 5 , 3 ] ;
37355: LD_ADDR_VAR 0 9
37359: PUSH
37360: LD_INT 10
37362: PUSH
37363: LD_INT 5
37365: PUSH
37366: LD_INT 3
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37374: LD_VAR 0 6
37378: PPUSH
37379: CALL_OW 257
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: IN
37398: IFFALSE 37419
// points := [ 3 , 2 , 1 ] ;
37400: LD_ADDR_VAR 0 9
37404: PUSH
37405: LD_INT 3
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37419: LD_VAR 0 6
37423: PPUSH
37424: CALL_OW 257
37428: PUSH
37429: LD_INT 5
37431: EQUAL
37432: IFFALSE 37453
// points := [ 130 , 5 , 2 ] ;
37434: LD_ADDR_VAR 0 9
37438: PUSH
37439: LD_INT 130
37441: PUSH
37442: LD_INT 5
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37453: LD_VAR 0 6
37457: PPUSH
37458: CALL_OW 257
37462: PUSH
37463: LD_INT 8
37465: EQUAL
37466: IFFALSE 37487
// points := [ 35 , 35 , 30 ] ;
37468: LD_ADDR_VAR 0 9
37472: PUSH
37473: LD_INT 35
37475: PUSH
37476: LD_INT 35
37478: PUSH
37479: LD_INT 30
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37487: LD_VAR 0 6
37491: PPUSH
37492: CALL_OW 257
37496: PUSH
37497: LD_INT 9
37499: EQUAL
37500: IFFALSE 37521
// points := [ 20 , 55 , 40 ] ;
37502: LD_ADDR_VAR 0 9
37506: PUSH
37507: LD_INT 20
37509: PUSH
37510: LD_INT 55
37512: PUSH
37513: LD_INT 40
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37521: LD_VAR 0 6
37525: PPUSH
37526: CALL_OW 257
37530: PUSH
37531: LD_INT 12
37533: PUSH
37534: LD_INT 16
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: IN
37541: IFFALSE 37562
// points := [ 5 , 3 , 2 ] ;
37543: LD_ADDR_VAR 0 9
37547: PUSH
37548: LD_INT 5
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37562: LD_VAR 0 6
37566: PPUSH
37567: CALL_OW 257
37571: PUSH
37572: LD_INT 17
37574: EQUAL
37575: IFFALSE 37596
// points := [ 100 , 50 , 75 ] ;
37577: LD_ADDR_VAR 0 9
37581: PUSH
37582: LD_INT 100
37584: PUSH
37585: LD_INT 50
37587: PUSH
37588: LD_INT 75
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37596: LD_VAR 0 6
37600: PPUSH
37601: CALL_OW 257
37605: PUSH
37606: LD_INT 15
37608: EQUAL
37609: IFFALSE 37630
// points := [ 10 , 5 , 3 ] ;
37611: LD_ADDR_VAR 0 9
37615: PUSH
37616: LD_INT 10
37618: PUSH
37619: LD_INT 5
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37630: LD_VAR 0 6
37634: PPUSH
37635: CALL_OW 257
37639: PUSH
37640: LD_INT 14
37642: EQUAL
37643: IFFALSE 37664
// points := [ 10 , 0 , 0 ] ;
37645: LD_ADDR_VAR 0 9
37649: PUSH
37650: LD_INT 10
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37664: LD_VAR 0 6
37668: PPUSH
37669: CALL_OW 257
37673: PUSH
37674: LD_INT 11
37676: EQUAL
37677: IFFALSE 37698
// points := [ 30 , 10 , 5 ] ;
37679: LD_ADDR_VAR 0 9
37683: PUSH
37684: LD_INT 30
37686: PUSH
37687: LD_INT 10
37689: PUSH
37690: LD_INT 5
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37698: LD_VAR 0 1
37702: PPUSH
37703: LD_INT 5
37705: PPUSH
37706: CALL_OW 321
37710: PUSH
37711: LD_INT 2
37713: EQUAL
37714: IFFALSE 37731
// bpoints := bpoints * 1.8 ;
37716: LD_ADDR_VAR 0 10
37720: PUSH
37721: LD_VAR 0 10
37725: PUSH
37726: LD_REAL  1.80000000000000E+0000
37729: MUL
37730: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37731: LD_VAR 0 6
37735: PPUSH
37736: CALL_OW 257
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: LD_INT 4
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: IN
37759: PUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: LD_INT 51
37767: PPUSH
37768: CALL_OW 321
37772: PUSH
37773: LD_INT 2
37775: EQUAL
37776: AND
37777: IFFALSE 37794
// bpoints := bpoints * 1.2 ;
37779: LD_ADDR_VAR 0 10
37783: PUSH
37784: LD_VAR 0 10
37788: PUSH
37789: LD_REAL  1.20000000000000E+0000
37792: MUL
37793: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37794: LD_VAR 0 6
37798: PPUSH
37799: CALL_OW 257
37803: PUSH
37804: LD_INT 5
37806: PUSH
37807: LD_INT 7
37809: PUSH
37810: LD_INT 9
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: IN
37818: PUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_INT 52
37826: PPUSH
37827: CALL_OW 321
37831: PUSH
37832: LD_INT 2
37834: EQUAL
37835: AND
37836: IFFALSE 37853
// bpoints := bpoints * 1.5 ;
37838: LD_ADDR_VAR 0 10
37842: PUSH
37843: LD_VAR 0 10
37847: PUSH
37848: LD_REAL  1.50000000000000E+0000
37851: MUL
37852: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37853: LD_VAR 0 1
37857: PPUSH
37858: LD_INT 66
37860: PPUSH
37861: CALL_OW 321
37865: PUSH
37866: LD_INT 2
37868: EQUAL
37869: IFFALSE 37886
// bpoints := bpoints * 1.1 ;
37871: LD_ADDR_VAR 0 10
37875: PUSH
37876: LD_VAR 0 10
37880: PUSH
37881: LD_REAL  1.10000000000000E+0000
37884: MUL
37885: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37886: LD_ADDR_VAR 0 10
37890: PUSH
37891: LD_VAR 0 10
37895: PUSH
37896: LD_VAR 0 6
37900: PPUSH
37901: LD_INT 1
37903: PPUSH
37904: CALL_OW 259
37908: PUSH
37909: LD_REAL  1.15000000000000E+0000
37912: MUL
37913: MUL
37914: ST_TO_ADDR
// end ; unit_vehicle :
37915: GO 38745
37917: LD_INT 2
37919: DOUBLE
37920: EQUAL
37921: IFTRUE 37925
37923: GO 38733
37925: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37926: LD_VAR 0 6
37930: PPUSH
37931: CALL_OW 264
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: LD_INT 42
37941: PUSH
37942: LD_INT 24
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: IN
37950: IFFALSE 37971
// points := [ 25 , 5 , 3 ] ;
37952: LD_ADDR_VAR 0 9
37956: PUSH
37957: LD_INT 25
37959: PUSH
37960: LD_INT 5
37962: PUSH
37963: LD_INT 3
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37971: LD_VAR 0 6
37975: PPUSH
37976: CALL_OW 264
37980: PUSH
37981: LD_INT 4
37983: PUSH
37984: LD_INT 43
37986: PUSH
37987: LD_INT 25
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: IN
37995: IFFALSE 38016
// points := [ 40 , 15 , 5 ] ;
37997: LD_ADDR_VAR 0 9
38001: PUSH
38002: LD_INT 40
38004: PUSH
38005: LD_INT 15
38007: PUSH
38008: LD_INT 5
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38016: LD_VAR 0 6
38020: PPUSH
38021: CALL_OW 264
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: LD_INT 23
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: IN
38036: IFFALSE 38057
// points := [ 7 , 25 , 8 ] ;
38038: LD_ADDR_VAR 0 9
38042: PUSH
38043: LD_INT 7
38045: PUSH
38046: LD_INT 25
38048: PUSH
38049: LD_INT 8
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38057: LD_VAR 0 6
38061: PPUSH
38062: CALL_OW 264
38066: PUSH
38067: LD_INT 5
38069: PUSH
38070: LD_INT 27
38072: PUSH
38073: LD_INT 44
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: IN
38081: IFFALSE 38102
// points := [ 14 , 50 , 16 ] ;
38083: LD_ADDR_VAR 0 9
38087: PUSH
38088: LD_INT 14
38090: PUSH
38091: LD_INT 50
38093: PUSH
38094: LD_INT 16
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38102: LD_VAR 0 6
38106: PPUSH
38107: CALL_OW 264
38111: PUSH
38112: LD_INT 6
38114: PUSH
38115: LD_INT 46
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: IN
38122: IFFALSE 38143
// points := [ 32 , 120 , 70 ] ;
38124: LD_ADDR_VAR 0 9
38128: PUSH
38129: LD_INT 32
38131: PUSH
38132: LD_INT 120
38134: PUSH
38135: LD_INT 70
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38143: LD_VAR 0 6
38147: PPUSH
38148: CALL_OW 264
38152: PUSH
38153: LD_INT 7
38155: PUSH
38156: LD_INT 28
38158: PUSH
38159: LD_INT 45
38161: PUSH
38162: LD_EXP 51
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: IN
38173: IFFALSE 38194
// points := [ 35 , 20 , 45 ] ;
38175: LD_ADDR_VAR 0 9
38179: PUSH
38180: LD_INT 35
38182: PUSH
38183: LD_INT 20
38185: PUSH
38186: LD_INT 45
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38194: LD_VAR 0 6
38198: PPUSH
38199: CALL_OW 264
38203: PUSH
38204: LD_INT 47
38206: PUSH
38207: EMPTY
38208: LIST
38209: IN
38210: IFFALSE 38231
// points := [ 67 , 45 , 75 ] ;
38212: LD_ADDR_VAR 0 9
38216: PUSH
38217: LD_INT 67
38219: PUSH
38220: LD_INT 45
38222: PUSH
38223: LD_INT 75
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38231: LD_VAR 0 6
38235: PPUSH
38236: CALL_OW 264
38240: PUSH
38241: LD_INT 26
38243: PUSH
38244: EMPTY
38245: LIST
38246: IN
38247: IFFALSE 38268
// points := [ 120 , 30 , 80 ] ;
38249: LD_ADDR_VAR 0 9
38253: PUSH
38254: LD_INT 120
38256: PUSH
38257: LD_INT 30
38259: PUSH
38260: LD_INT 80
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38268: LD_VAR 0 6
38272: PPUSH
38273: CALL_OW 264
38277: PUSH
38278: LD_INT 22
38280: PUSH
38281: EMPTY
38282: LIST
38283: IN
38284: IFFALSE 38305
// points := [ 40 , 1 , 1 ] ;
38286: LD_ADDR_VAR 0 9
38290: PUSH
38291: LD_INT 40
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38305: LD_VAR 0 6
38309: PPUSH
38310: CALL_OW 264
38314: PUSH
38315: LD_INT 29
38317: PUSH
38318: EMPTY
38319: LIST
38320: IN
38321: IFFALSE 38342
// points := [ 70 , 200 , 400 ] ;
38323: LD_ADDR_VAR 0 9
38327: PUSH
38328: LD_INT 70
38330: PUSH
38331: LD_INT 200
38333: PUSH
38334: LD_INT 400
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38342: LD_VAR 0 6
38346: PPUSH
38347: CALL_OW 264
38351: PUSH
38352: LD_INT 14
38354: PUSH
38355: LD_INT 53
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: IN
38362: IFFALSE 38383
// points := [ 40 , 10 , 20 ] ;
38364: LD_ADDR_VAR 0 9
38368: PUSH
38369: LD_INT 40
38371: PUSH
38372: LD_INT 10
38374: PUSH
38375: LD_INT 20
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38383: LD_VAR 0 6
38387: PPUSH
38388: CALL_OW 264
38392: PUSH
38393: LD_INT 9
38395: PUSH
38396: EMPTY
38397: LIST
38398: IN
38399: IFFALSE 38420
// points := [ 5 , 70 , 20 ] ;
38401: LD_ADDR_VAR 0 9
38405: PUSH
38406: LD_INT 5
38408: PUSH
38409: LD_INT 70
38411: PUSH
38412: LD_INT 20
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38420: LD_VAR 0 6
38424: PPUSH
38425: CALL_OW 264
38429: PUSH
38430: LD_INT 10
38432: PUSH
38433: EMPTY
38434: LIST
38435: IN
38436: IFFALSE 38457
// points := [ 35 , 110 , 70 ] ;
38438: LD_ADDR_VAR 0 9
38442: PUSH
38443: LD_INT 35
38445: PUSH
38446: LD_INT 110
38448: PUSH
38449: LD_INT 70
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38457: LD_VAR 0 6
38461: PPUSH
38462: CALL_OW 265
38466: PUSH
38467: LD_INT 25
38469: EQUAL
38470: IFFALSE 38491
// points := [ 80 , 65 , 100 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 80
38479: PUSH
38480: LD_INT 65
38482: PUSH
38483: LD_INT 100
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 263
38500: PUSH
38501: LD_INT 1
38503: EQUAL
38504: IFFALSE 38539
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38506: LD_ADDR_VAR 0 10
38510: PUSH
38511: LD_VAR 0 10
38515: PUSH
38516: LD_VAR 0 6
38520: PPUSH
38521: CALL_OW 311
38525: PPUSH
38526: LD_INT 3
38528: PPUSH
38529: CALL_OW 259
38533: PUSH
38534: LD_INT 4
38536: MUL
38537: MUL
38538: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38539: LD_VAR 0 6
38543: PPUSH
38544: CALL_OW 263
38548: PUSH
38549: LD_INT 2
38551: EQUAL
38552: IFFALSE 38603
// begin j := IsControledBy ( i ) ;
38554: LD_ADDR_VAR 0 7
38558: PUSH
38559: LD_VAR 0 6
38563: PPUSH
38564: CALL_OW 312
38568: ST_TO_ADDR
// if j then
38569: LD_VAR 0 7
38573: IFFALSE 38603
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38575: LD_ADDR_VAR 0 10
38579: PUSH
38580: LD_VAR 0 10
38584: PUSH
38585: LD_VAR 0 7
38589: PPUSH
38590: LD_INT 3
38592: PPUSH
38593: CALL_OW 259
38597: PUSH
38598: LD_INT 3
38600: MUL
38601: MUL
38602: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38603: LD_VAR 0 6
38607: PPUSH
38608: CALL_OW 264
38612: PUSH
38613: LD_INT 5
38615: PUSH
38616: LD_INT 6
38618: PUSH
38619: LD_INT 46
38621: PUSH
38622: LD_INT 44
38624: PUSH
38625: LD_INT 47
38627: PUSH
38628: LD_INT 45
38630: PUSH
38631: LD_INT 28
38633: PUSH
38634: LD_INT 7
38636: PUSH
38637: LD_INT 27
38639: PUSH
38640: LD_INT 29
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: IN
38655: PUSH
38656: LD_VAR 0 1
38660: PPUSH
38661: LD_INT 52
38663: PPUSH
38664: CALL_OW 321
38668: PUSH
38669: LD_INT 2
38671: EQUAL
38672: AND
38673: IFFALSE 38690
// bpoints := bpoints * 1.2 ;
38675: LD_ADDR_VAR 0 10
38679: PUSH
38680: LD_VAR 0 10
38684: PUSH
38685: LD_REAL  1.20000000000000E+0000
38688: MUL
38689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38690: LD_VAR 0 6
38694: PPUSH
38695: CALL_OW 264
38699: PUSH
38700: LD_INT 6
38702: PUSH
38703: LD_INT 46
38705: PUSH
38706: LD_INT 47
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: IN
38714: IFFALSE 38731
// bpoints := bpoints * 1.2 ;
38716: LD_ADDR_VAR 0 10
38720: PUSH
38721: LD_VAR 0 10
38725: PUSH
38726: LD_REAL  1.20000000000000E+0000
38729: MUL
38730: ST_TO_ADDR
// end ; unit_building :
38731: GO 38745
38733: LD_INT 3
38735: DOUBLE
38736: EQUAL
38737: IFTRUE 38741
38739: GO 38744
38741: POP
// ; end ;
38742: GO 38745
38744: POP
// for j = 1 to 3 do
38745: LD_ADDR_VAR 0 7
38749: PUSH
38750: DOUBLE
38751: LD_INT 1
38753: DEC
38754: ST_TO_ADDR
38755: LD_INT 3
38757: PUSH
38758: FOR_TO
38759: IFFALSE 38812
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38761: LD_ADDR_VAR 0 5
38765: PUSH
38766: LD_VAR 0 5
38770: PPUSH
38771: LD_VAR 0 7
38775: PPUSH
38776: LD_VAR 0 5
38780: PUSH
38781: LD_VAR 0 7
38785: ARRAY
38786: PUSH
38787: LD_VAR 0 9
38791: PUSH
38792: LD_VAR 0 7
38796: ARRAY
38797: PUSH
38798: LD_VAR 0 10
38802: MUL
38803: PLUS
38804: PPUSH
38805: CALL_OW 1
38809: ST_TO_ADDR
38810: GO 38758
38812: POP
38813: POP
// end ;
38814: GO 37291
38816: POP
38817: POP
// result := Replace ( result , 4 , tmp ) ;
38818: LD_ADDR_VAR 0 5
38822: PUSH
38823: LD_VAR 0 5
38827: PPUSH
38828: LD_INT 4
38830: PPUSH
38831: LD_VAR 0 8
38835: PPUSH
38836: CALL_OW 1
38840: ST_TO_ADDR
// end ;
38841: LD_VAR 0 5
38845: RET
// export function DangerAtRange ( unit , range ) ; begin
38846: LD_INT 0
38848: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: LD_VAR 0 1
38858: PPUSH
38859: CALL_OW 255
38863: PPUSH
38864: LD_VAR 0 1
38868: PPUSH
38869: CALL_OW 250
38873: PPUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 251
38883: PPUSH
38884: LD_VAR 0 2
38888: PPUSH
38889: CALL 37143 0 4
38893: ST_TO_ADDR
// end ;
38894: LD_VAR 0 3
38898: RET
// export function DangerInArea ( side , area ) ; begin
38899: LD_INT 0
38901: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38902: LD_ADDR_VAR 0 3
38906: PUSH
38907: LD_VAR 0 2
38911: PPUSH
38912: LD_INT 81
38914: PUSH
38915: LD_VAR 0 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PPUSH
38924: CALL_OW 70
38928: ST_TO_ADDR
// end ;
38929: LD_VAR 0 3
38933: RET
// export function IsExtension ( b ) ; begin
38934: LD_INT 0
38936: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38937: LD_ADDR_VAR 0 2
38941: PUSH
38942: LD_VAR 0 1
38946: PUSH
38947: LD_INT 23
38949: PUSH
38950: LD_INT 20
38952: PUSH
38953: LD_INT 22
38955: PUSH
38956: LD_INT 17
38958: PUSH
38959: LD_INT 24
38961: PUSH
38962: LD_INT 21
38964: PUSH
38965: LD_INT 19
38967: PUSH
38968: LD_INT 16
38970: PUSH
38971: LD_INT 25
38973: PUSH
38974: LD_INT 18
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: IN
38989: ST_TO_ADDR
// end ;
38990: LD_VAR 0 2
38994: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38995: LD_INT 0
38997: PPUSH
38998: PPUSH
38999: PPUSH
// result := [ ] ;
39000: LD_ADDR_VAR 0 4
39004: PUSH
39005: EMPTY
39006: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39007: LD_ADDR_VAR 0 5
39011: PUSH
39012: LD_VAR 0 2
39016: PPUSH
39017: LD_INT 21
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PPUSH
39027: CALL_OW 70
39031: ST_TO_ADDR
// if not tmp then
39032: LD_VAR 0 5
39036: NOT
39037: IFFALSE 39041
// exit ;
39039: GO 39105
// if checkLink then
39041: LD_VAR 0 3
39045: IFFALSE 39095
// begin for i in tmp do
39047: LD_ADDR_VAR 0 6
39051: PUSH
39052: LD_VAR 0 5
39056: PUSH
39057: FOR_IN
39058: IFFALSE 39093
// if GetBase ( i ) <> base then
39060: LD_VAR 0 6
39064: PPUSH
39065: CALL_OW 274
39069: PUSH
39070: LD_VAR 0 1
39074: NONEQUAL
39075: IFFALSE 39091
// ComLinkToBase ( base , i ) ;
39077: LD_VAR 0 1
39081: PPUSH
39082: LD_VAR 0 6
39086: PPUSH
39087: CALL_OW 169
39091: GO 39057
39093: POP
39094: POP
// end ; result := tmp ;
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: LD_VAR 0 5
39104: ST_TO_ADDR
// end ;
39105: LD_VAR 0 4
39109: RET
// export function ComComplete ( units , b ) ; var i ; begin
39110: LD_INT 0
39112: PPUSH
39113: PPUSH
// if not units then
39114: LD_VAR 0 1
39118: NOT
39119: IFFALSE 39123
// exit ;
39121: GO 39213
// for i in units do
39123: LD_ADDR_VAR 0 4
39127: PUSH
39128: LD_VAR 0 1
39132: PUSH
39133: FOR_IN
39134: IFFALSE 39211
// if BuildingStatus ( b ) = bs_build then
39136: LD_VAR 0 2
39140: PPUSH
39141: CALL_OW 461
39145: PUSH
39146: LD_INT 1
39148: EQUAL
39149: IFFALSE 39209
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39151: LD_VAR 0 4
39155: PPUSH
39156: LD_STRING h
39158: PUSH
39159: LD_VAR 0 2
39163: PPUSH
39164: CALL_OW 250
39168: PUSH
39169: LD_VAR 0 2
39173: PPUSH
39174: CALL_OW 251
39178: PUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: PUSH
39202: EMPTY
39203: LIST
39204: PPUSH
39205: CALL_OW 446
39209: GO 39133
39211: POP
39212: POP
// end ;
39213: LD_VAR 0 3
39217: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39218: LD_INT 0
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39226: LD_VAR 0 1
39230: NOT
39231: PUSH
39232: LD_VAR 0 1
39236: PPUSH
39237: CALL_OW 263
39241: PUSH
39242: LD_INT 2
39244: NONEQUAL
39245: OR
39246: IFFALSE 39250
// exit ;
39248: GO 39566
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39250: LD_ADDR_VAR 0 6
39254: PUSH
39255: LD_INT 22
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: CALL_OW 255
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: LD_INT 36
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 34
39287: PUSH
39288: LD_INT 31
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PPUSH
39304: CALL_OW 69
39308: ST_TO_ADDR
// if not tmp then
39309: LD_VAR 0 6
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 39566
// result := [ ] ;
39318: LD_ADDR_VAR 0 2
39322: PUSH
39323: EMPTY
39324: ST_TO_ADDR
// for i in tmp do
39325: LD_ADDR_VAR 0 3
39329: PUSH
39330: LD_VAR 0 6
39334: PUSH
39335: FOR_IN
39336: IFFALSE 39407
// begin t := UnitsInside ( i ) ;
39338: LD_ADDR_VAR 0 4
39342: PUSH
39343: LD_VAR 0 3
39347: PPUSH
39348: CALL_OW 313
39352: ST_TO_ADDR
// if t then
39353: LD_VAR 0 4
39357: IFFALSE 39405
// for j in t do
39359: LD_ADDR_VAR 0 7
39363: PUSH
39364: LD_VAR 0 4
39368: PUSH
39369: FOR_IN
39370: IFFALSE 39403
// result := Replace ( result , result + 1 , j ) ;
39372: LD_ADDR_VAR 0 2
39376: PUSH
39377: LD_VAR 0 2
39381: PPUSH
39382: LD_VAR 0 2
39386: PUSH
39387: LD_INT 1
39389: PLUS
39390: PPUSH
39391: LD_VAR 0 7
39395: PPUSH
39396: CALL_OW 1
39400: ST_TO_ADDR
39401: GO 39369
39403: POP
39404: POP
// end ;
39405: GO 39335
39407: POP
39408: POP
// if not result then
39409: LD_VAR 0 2
39413: NOT
39414: IFFALSE 39418
// exit ;
39416: GO 39566
// mech := result [ 1 ] ;
39418: LD_ADDR_VAR 0 5
39422: PUSH
39423: LD_VAR 0 2
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: ST_TO_ADDR
// if result > 1 then
39432: LD_VAR 0 2
39436: PUSH
39437: LD_INT 1
39439: GREATER
39440: IFFALSE 39552
// begin for i = 2 to result do
39442: LD_ADDR_VAR 0 3
39446: PUSH
39447: DOUBLE
39448: LD_INT 2
39450: DEC
39451: ST_TO_ADDR
39452: LD_VAR 0 2
39456: PUSH
39457: FOR_TO
39458: IFFALSE 39550
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39460: LD_ADDR_VAR 0 4
39464: PUSH
39465: LD_VAR 0 2
39469: PUSH
39470: LD_VAR 0 3
39474: ARRAY
39475: PPUSH
39476: LD_INT 3
39478: PPUSH
39479: CALL_OW 259
39483: PUSH
39484: LD_VAR 0 2
39488: PUSH
39489: LD_VAR 0 3
39493: ARRAY
39494: PPUSH
39495: CALL_OW 432
39499: MINUS
39500: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39501: LD_VAR 0 4
39505: PUSH
39506: LD_VAR 0 5
39510: PPUSH
39511: LD_INT 3
39513: PPUSH
39514: CALL_OW 259
39518: PUSH
39519: LD_VAR 0 5
39523: PPUSH
39524: CALL_OW 432
39528: MINUS
39529: GREATEREQUAL
39530: IFFALSE 39548
// mech := result [ i ] ;
39532: LD_ADDR_VAR 0 5
39536: PUSH
39537: LD_VAR 0 2
39541: PUSH
39542: LD_VAR 0 3
39546: ARRAY
39547: ST_TO_ADDR
// end ;
39548: GO 39457
39550: POP
39551: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39552: LD_VAR 0 1
39556: PPUSH
39557: LD_VAR 0 5
39561: PPUSH
39562: CALL_OW 135
// end ;
39566: LD_VAR 0 2
39570: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39571: LD_INT 0
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
// result := [ ] ;
39586: LD_ADDR_VAR 0 7
39590: PUSH
39591: EMPTY
39592: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 266
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: IN
39613: NOT
39614: IFFALSE 39618
// exit ;
39616: GO 41252
// if name then
39618: LD_VAR 0 3
39622: IFFALSE 39638
// SetBName ( base_dep , name ) ;
39624: LD_VAR 0 1
39628: PPUSH
39629: LD_VAR 0 3
39633: PPUSH
39634: CALL_OW 500
// base := GetBase ( base_dep ) ;
39638: LD_ADDR_VAR 0 15
39642: PUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 274
39652: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39653: LD_ADDR_VAR 0 16
39657: PUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 255
39667: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39668: LD_ADDR_VAR 0 17
39672: PUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 248
39682: ST_TO_ADDR
// if sources then
39683: LD_VAR 0 5
39687: IFFALSE 39734
// for i = 1 to 3 do
39689: LD_ADDR_VAR 0 8
39693: PUSH
39694: DOUBLE
39695: LD_INT 1
39697: DEC
39698: ST_TO_ADDR
39699: LD_INT 3
39701: PUSH
39702: FOR_TO
39703: IFFALSE 39732
// AddResourceType ( base , i , sources [ i ] ) ;
39705: LD_VAR 0 15
39709: PPUSH
39710: LD_VAR 0 8
39714: PPUSH
39715: LD_VAR 0 5
39719: PUSH
39720: LD_VAR 0 8
39724: ARRAY
39725: PPUSH
39726: CALL_OW 276
39730: GO 39702
39732: POP
39733: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39734: LD_ADDR_VAR 0 18
39738: PUSH
39739: LD_VAR 0 15
39743: PPUSH
39744: LD_VAR 0 2
39748: PPUSH
39749: LD_INT 1
39751: PPUSH
39752: CALL 38995 0 3
39756: ST_TO_ADDR
// InitHc ;
39757: CALL_OW 19
// InitUc ;
39761: CALL_OW 18
// uc_side := side ;
39765: LD_ADDR_OWVAR 20
39769: PUSH
39770: LD_VAR 0 16
39774: ST_TO_ADDR
// uc_nation := nation ;
39775: LD_ADDR_OWVAR 21
39779: PUSH
39780: LD_VAR 0 17
39784: ST_TO_ADDR
// if buildings then
39785: LD_VAR 0 18
39789: IFFALSE 41111
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39791: LD_ADDR_VAR 0 19
39795: PUSH
39796: LD_VAR 0 18
39800: PPUSH
39801: LD_INT 2
39803: PUSH
39804: LD_INT 30
39806: PUSH
39807: LD_INT 29
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 30
39816: PUSH
39817: LD_INT 30
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: PPUSH
39829: CALL_OW 72
39833: ST_TO_ADDR
// if tmp then
39834: LD_VAR 0 19
39838: IFFALSE 39886
// for i in tmp do
39840: LD_ADDR_VAR 0 8
39844: PUSH
39845: LD_VAR 0 19
39849: PUSH
39850: FOR_IN
39851: IFFALSE 39884
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39853: LD_VAR 0 8
39857: PPUSH
39858: CALL_OW 250
39862: PPUSH
39863: LD_VAR 0 8
39867: PPUSH
39868: CALL_OW 251
39872: PPUSH
39873: LD_VAR 0 16
39877: PPUSH
39878: CALL_OW 441
39882: GO 39850
39884: POP
39885: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39886: LD_VAR 0 18
39890: PPUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 30
39896: PUSH
39897: LD_INT 32
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 30
39906: PUSH
39907: LD_INT 33
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: PPUSH
39919: CALL_OW 72
39923: IFFALSE 40011
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39925: LD_ADDR_VAR 0 8
39929: PUSH
39930: LD_VAR 0 18
39934: PPUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 30
39940: PUSH
39941: LD_INT 32
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 30
39950: PUSH
39951: LD_INT 33
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 72
39967: PUSH
39968: FOR_IN
39969: IFFALSE 40009
// begin if not GetBWeapon ( i ) then
39971: LD_VAR 0 8
39975: PPUSH
39976: CALL_OW 269
39980: NOT
39981: IFFALSE 40007
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39983: LD_VAR 0 8
39987: PPUSH
39988: LD_VAR 0 8
39992: PPUSH
39993: LD_VAR 0 2
39997: PPUSH
39998: CALL 41257 0 2
40002: PPUSH
40003: CALL_OW 431
// end ;
40007: GO 39968
40009: POP
40010: POP
// end ; for i = 1 to personel do
40011: LD_ADDR_VAR 0 8
40015: PUSH
40016: DOUBLE
40017: LD_INT 1
40019: DEC
40020: ST_TO_ADDR
40021: LD_VAR 0 6
40025: PUSH
40026: FOR_TO
40027: IFFALSE 41091
// begin if i > 4 then
40029: LD_VAR 0 8
40033: PUSH
40034: LD_INT 4
40036: GREATER
40037: IFFALSE 40041
// break ;
40039: GO 41091
// case i of 1 :
40041: LD_VAR 0 8
40045: PUSH
40046: LD_INT 1
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40134
40054: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40055: LD_ADDR_VAR 0 12
40059: PUSH
40060: LD_VAR 0 18
40064: PPUSH
40065: LD_INT 22
40067: PUSH
40068: LD_VAR 0 16
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 58
40079: PUSH
40080: EMPTY
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: LD_INT 30
40088: PUSH
40089: LD_INT 32
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 30
40098: PUSH
40099: LD_INT 4
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 30
40108: PUSH
40109: LD_INT 5
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: PPUSH
40127: CALL_OW 72
40131: ST_TO_ADDR
40132: GO 40356
40134: LD_INT 2
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40142
40140: GO 40204
40142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40143: LD_ADDR_VAR 0 12
40147: PUSH
40148: LD_VAR 0 18
40152: PPUSH
40153: LD_INT 22
40155: PUSH
40156: LD_VAR 0 16
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 30
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 30
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PPUSH
40197: CALL_OW 72
40201: ST_TO_ADDR
40202: GO 40356
40204: LD_INT 3
40206: DOUBLE
40207: EQUAL
40208: IFTRUE 40212
40210: GO 40274
40212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40213: LD_ADDR_VAR 0 12
40217: PUSH
40218: LD_VAR 0 18
40222: PPUSH
40223: LD_INT 22
40225: PUSH
40226: LD_VAR 0 16
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 30
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 30
40250: PUSH
40251: LD_INT 3
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PPUSH
40267: CALL_OW 72
40271: ST_TO_ADDR
40272: GO 40356
40274: LD_INT 4
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40355
40282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40283: LD_ADDR_VAR 0 12
40287: PUSH
40288: LD_VAR 0 18
40292: PPUSH
40293: LD_INT 22
40295: PUSH
40296: LD_VAR 0 16
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 30
40310: PUSH
40311: LD_INT 6
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 30
40320: PUSH
40321: LD_INT 7
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 30
40330: PUSH
40331: LD_INT 8
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PPUSH
40348: CALL_OW 72
40352: ST_TO_ADDR
40353: GO 40356
40355: POP
// if i = 1 then
40356: LD_VAR 0 8
40360: PUSH
40361: LD_INT 1
40363: EQUAL
40364: IFFALSE 40475
// begin tmp := [ ] ;
40366: LD_ADDR_VAR 0 19
40370: PUSH
40371: EMPTY
40372: ST_TO_ADDR
// for j in f do
40373: LD_ADDR_VAR 0 9
40377: PUSH
40378: LD_VAR 0 12
40382: PUSH
40383: FOR_IN
40384: IFFALSE 40457
// if GetBType ( j ) = b_bunker then
40386: LD_VAR 0 9
40390: PPUSH
40391: CALL_OW 266
40395: PUSH
40396: LD_INT 32
40398: EQUAL
40399: IFFALSE 40426
// tmp := Insert ( tmp , 1 , j ) else
40401: LD_ADDR_VAR 0 19
40405: PUSH
40406: LD_VAR 0 19
40410: PPUSH
40411: LD_INT 1
40413: PPUSH
40414: LD_VAR 0 9
40418: PPUSH
40419: CALL_OW 2
40423: ST_TO_ADDR
40424: GO 40455
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40426: LD_ADDR_VAR 0 19
40430: PUSH
40431: LD_VAR 0 19
40435: PPUSH
40436: LD_VAR 0 19
40440: PUSH
40441: LD_INT 1
40443: PLUS
40444: PPUSH
40445: LD_VAR 0 9
40449: PPUSH
40450: CALL_OW 2
40454: ST_TO_ADDR
40455: GO 40383
40457: POP
40458: POP
// if tmp then
40459: LD_VAR 0 19
40463: IFFALSE 40475
// f := tmp ;
40465: LD_ADDR_VAR 0 12
40469: PUSH
40470: LD_VAR 0 19
40474: ST_TO_ADDR
// end ; x := personel [ i ] ;
40475: LD_ADDR_VAR 0 13
40479: PUSH
40480: LD_VAR 0 6
40484: PUSH
40485: LD_VAR 0 8
40489: ARRAY
40490: ST_TO_ADDR
// if x = - 1 then
40491: LD_VAR 0 13
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: EQUAL
40500: IFFALSE 40709
// begin for j in f do
40502: LD_ADDR_VAR 0 9
40506: PUSH
40507: LD_VAR 0 12
40511: PUSH
40512: FOR_IN
40513: IFFALSE 40705
// repeat InitHc ;
40515: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40519: LD_VAR 0 9
40523: PPUSH
40524: CALL_OW 266
40528: PUSH
40529: LD_INT 5
40531: EQUAL
40532: IFFALSE 40602
// begin if UnitsInside ( j ) < 3 then
40534: LD_VAR 0 9
40538: PPUSH
40539: CALL_OW 313
40543: PUSH
40544: LD_INT 3
40546: LESS
40547: IFFALSE 40583
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40549: LD_INT 0
40551: PPUSH
40552: LD_INT 5
40554: PUSH
40555: LD_INT 8
40557: PUSH
40558: LD_INT 9
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: PUSH
40566: LD_VAR 0 17
40570: ARRAY
40571: PPUSH
40572: LD_VAR 0 4
40576: PPUSH
40577: CALL_OW 380
40581: GO 40600
// PrepareHuman ( false , i , skill ) ;
40583: LD_INT 0
40585: PPUSH
40586: LD_VAR 0 8
40590: PPUSH
40591: LD_VAR 0 4
40595: PPUSH
40596: CALL_OW 380
// end else
40600: GO 40619
// PrepareHuman ( false , i , skill ) ;
40602: LD_INT 0
40604: PPUSH
40605: LD_VAR 0 8
40609: PPUSH
40610: LD_VAR 0 4
40614: PPUSH
40615: CALL_OW 380
// un := CreateHuman ;
40619: LD_ADDR_VAR 0 14
40623: PUSH
40624: CALL_OW 44
40628: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40629: LD_ADDR_VAR 0 7
40633: PUSH
40634: LD_VAR 0 7
40638: PPUSH
40639: LD_INT 1
40641: PPUSH
40642: LD_VAR 0 14
40646: PPUSH
40647: CALL_OW 2
40651: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40652: LD_VAR 0 14
40656: PPUSH
40657: LD_VAR 0 9
40661: PPUSH
40662: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40666: LD_VAR 0 9
40670: PPUSH
40671: CALL_OW 313
40675: PUSH
40676: LD_INT 6
40678: EQUAL
40679: PUSH
40680: LD_VAR 0 9
40684: PPUSH
40685: CALL_OW 266
40689: PUSH
40690: LD_INT 32
40692: PUSH
40693: LD_INT 31
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: IN
40700: OR
40701: IFFALSE 40515
40703: GO 40512
40705: POP
40706: POP
// end else
40707: GO 41089
// for j = 1 to x do
40709: LD_ADDR_VAR 0 9
40713: PUSH
40714: DOUBLE
40715: LD_INT 1
40717: DEC
40718: ST_TO_ADDR
40719: LD_VAR 0 13
40723: PUSH
40724: FOR_TO
40725: IFFALSE 41087
// begin InitHc ;
40727: CALL_OW 19
// if not f then
40731: LD_VAR 0 12
40735: NOT
40736: IFFALSE 40825
// begin PrepareHuman ( false , i , skill ) ;
40738: LD_INT 0
40740: PPUSH
40741: LD_VAR 0 8
40745: PPUSH
40746: LD_VAR 0 4
40750: PPUSH
40751: CALL_OW 380
// un := CreateHuman ;
40755: LD_ADDR_VAR 0 14
40759: PUSH
40760: CALL_OW 44
40764: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40765: LD_ADDR_VAR 0 7
40769: PUSH
40770: LD_VAR 0 7
40774: PPUSH
40775: LD_INT 1
40777: PPUSH
40778: LD_VAR 0 14
40782: PPUSH
40783: CALL_OW 2
40787: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40788: LD_VAR 0 14
40792: PPUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 250
40802: PPUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: CALL_OW 251
40812: PPUSH
40813: LD_INT 10
40815: PPUSH
40816: LD_INT 0
40818: PPUSH
40819: CALL_OW 50
// continue ;
40823: GO 40724
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40825: LD_VAR 0 12
40829: PUSH
40830: LD_INT 1
40832: ARRAY
40833: PPUSH
40834: CALL_OW 313
40838: PUSH
40839: LD_VAR 0 12
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: PPUSH
40848: CALL_OW 266
40852: PUSH
40853: LD_INT 32
40855: PUSH
40856: LD_INT 31
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: IN
40863: AND
40864: PUSH
40865: LD_VAR 0 12
40869: PUSH
40870: LD_INT 1
40872: ARRAY
40873: PPUSH
40874: CALL_OW 313
40878: PUSH
40879: LD_INT 6
40881: EQUAL
40882: OR
40883: IFFALSE 40903
// f := Delete ( f , 1 ) ;
40885: LD_ADDR_VAR 0 12
40889: PUSH
40890: LD_VAR 0 12
40894: PPUSH
40895: LD_INT 1
40897: PPUSH
40898: CALL_OW 3
40902: ST_TO_ADDR
// if not f then
40903: LD_VAR 0 12
40907: NOT
40908: IFFALSE 40926
// begin x := x + 2 ;
40910: LD_ADDR_VAR 0 13
40914: PUSH
40915: LD_VAR 0 13
40919: PUSH
40920: LD_INT 2
40922: PLUS
40923: ST_TO_ADDR
// continue ;
40924: GO 40724
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40926: LD_VAR 0 12
40930: PUSH
40931: LD_INT 1
40933: ARRAY
40934: PPUSH
40935: CALL_OW 266
40939: PUSH
40940: LD_INT 5
40942: EQUAL
40943: IFFALSE 41017
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40945: LD_VAR 0 12
40949: PUSH
40950: LD_INT 1
40952: ARRAY
40953: PPUSH
40954: CALL_OW 313
40958: PUSH
40959: LD_INT 3
40961: LESS
40962: IFFALSE 40998
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40964: LD_INT 0
40966: PPUSH
40967: LD_INT 5
40969: PUSH
40970: LD_INT 8
40972: PUSH
40973: LD_INT 9
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: PUSH
40981: LD_VAR 0 17
40985: ARRAY
40986: PPUSH
40987: LD_VAR 0 4
40991: PPUSH
40992: CALL_OW 380
40996: GO 41015
// PrepareHuman ( false , i , skill ) ;
40998: LD_INT 0
41000: PPUSH
41001: LD_VAR 0 8
41005: PPUSH
41006: LD_VAR 0 4
41010: PPUSH
41011: CALL_OW 380
// end else
41015: GO 41034
// PrepareHuman ( false , i , skill ) ;
41017: LD_INT 0
41019: PPUSH
41020: LD_VAR 0 8
41024: PPUSH
41025: LD_VAR 0 4
41029: PPUSH
41030: CALL_OW 380
// un := CreateHuman ;
41034: LD_ADDR_VAR 0 14
41038: PUSH
41039: CALL_OW 44
41043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41044: LD_ADDR_VAR 0 7
41048: PUSH
41049: LD_VAR 0 7
41053: PPUSH
41054: LD_INT 1
41056: PPUSH
41057: LD_VAR 0 14
41061: PPUSH
41062: CALL_OW 2
41066: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41067: LD_VAR 0 14
41071: PPUSH
41072: LD_VAR 0 12
41076: PUSH
41077: LD_INT 1
41079: ARRAY
41080: PPUSH
41081: CALL_OW 52
// end ;
41085: GO 40724
41087: POP
41088: POP
// end ;
41089: GO 40026
41091: POP
41092: POP
// result := result ^ buildings ;
41093: LD_ADDR_VAR 0 7
41097: PUSH
41098: LD_VAR 0 7
41102: PUSH
41103: LD_VAR 0 18
41107: ADD
41108: ST_TO_ADDR
// end else
41109: GO 41252
// begin for i = 1 to personel do
41111: LD_ADDR_VAR 0 8
41115: PUSH
41116: DOUBLE
41117: LD_INT 1
41119: DEC
41120: ST_TO_ADDR
41121: LD_VAR 0 6
41125: PUSH
41126: FOR_TO
41127: IFFALSE 41250
// begin if i > 4 then
41129: LD_VAR 0 8
41133: PUSH
41134: LD_INT 4
41136: GREATER
41137: IFFALSE 41141
// break ;
41139: GO 41250
// x := personel [ i ] ;
41141: LD_ADDR_VAR 0 13
41145: PUSH
41146: LD_VAR 0 6
41150: PUSH
41151: LD_VAR 0 8
41155: ARRAY
41156: ST_TO_ADDR
// if x = - 1 then
41157: LD_VAR 0 13
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: EQUAL
41166: IFFALSE 41170
// continue ;
41168: GO 41126
// PrepareHuman ( false , i , skill ) ;
41170: LD_INT 0
41172: PPUSH
41173: LD_VAR 0 8
41177: PPUSH
41178: LD_VAR 0 4
41182: PPUSH
41183: CALL_OW 380
// un := CreateHuman ;
41187: LD_ADDR_VAR 0 14
41191: PUSH
41192: CALL_OW 44
41196: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41197: LD_VAR 0 14
41201: PPUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 250
41211: PPUSH
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL_OW 251
41221: PPUSH
41222: LD_INT 10
41224: PPUSH
41225: LD_INT 0
41227: PPUSH
41228: CALL_OW 50
// result := result ^ un ;
41232: LD_ADDR_VAR 0 7
41236: PUSH
41237: LD_VAR 0 7
41241: PUSH
41242: LD_VAR 0 14
41246: ADD
41247: ST_TO_ADDR
// end ;
41248: GO 41126
41250: POP
41251: POP
// end ; end ;
41252: LD_VAR 0 7
41256: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
// result := false ;
41275: LD_ADDR_VAR 0 3
41279: PUSH
41280: LD_INT 0
41282: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41283: LD_VAR 0 1
41287: NOT
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 266
41298: PUSH
41299: LD_INT 32
41301: PUSH
41302: LD_INT 33
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: IN
41309: NOT
41310: OR
41311: IFFALSE 41315
// exit ;
41313: GO 42424
// nat := GetNation ( tower ) ;
41315: LD_ADDR_VAR 0 12
41319: PUSH
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 248
41329: ST_TO_ADDR
// side := GetSide ( tower ) ;
41330: LD_ADDR_VAR 0 16
41334: PUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 255
41344: ST_TO_ADDR
// x := GetX ( tower ) ;
41345: LD_ADDR_VAR 0 10
41349: PUSH
41350: LD_VAR 0 1
41354: PPUSH
41355: CALL_OW 250
41359: ST_TO_ADDR
// y := GetY ( tower ) ;
41360: LD_ADDR_VAR 0 11
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 251
41374: ST_TO_ADDR
// if not x or not y then
41375: LD_VAR 0 10
41379: NOT
41380: PUSH
41381: LD_VAR 0 11
41385: NOT
41386: OR
41387: IFFALSE 41391
// exit ;
41389: GO 42424
// weapon := 0 ;
41391: LD_ADDR_VAR 0 18
41395: PUSH
41396: LD_INT 0
41398: ST_TO_ADDR
// fac_list := [ ] ;
41399: LD_ADDR_VAR 0 17
41403: PUSH
41404: EMPTY
41405: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41406: LD_ADDR_VAR 0 6
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 274
41420: PPUSH
41421: LD_VAR 0 2
41425: PPUSH
41426: LD_INT 0
41428: PPUSH
41429: CALL 38995 0 3
41433: PPUSH
41434: LD_INT 30
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PPUSH
41444: CALL_OW 72
41448: ST_TO_ADDR
// if not factories then
41449: LD_VAR 0 6
41453: NOT
41454: IFFALSE 41458
// exit ;
41456: GO 42424
// for i in factories do
41458: LD_ADDR_VAR 0 8
41462: PUSH
41463: LD_VAR 0 6
41467: PUSH
41468: FOR_IN
41469: IFFALSE 41494
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41471: LD_ADDR_VAR 0 17
41475: PUSH
41476: LD_VAR 0 17
41480: PUSH
41481: LD_VAR 0 8
41485: PPUSH
41486: CALL_OW 478
41490: UNION
41491: ST_TO_ADDR
41492: GO 41468
41494: POP
41495: POP
// if not fac_list then
41496: LD_VAR 0 17
41500: NOT
41501: IFFALSE 41505
// exit ;
41503: GO 42424
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41505: LD_ADDR_VAR 0 5
41509: PUSH
41510: LD_INT 4
41512: PUSH
41513: LD_INT 5
41515: PUSH
41516: LD_INT 9
41518: PUSH
41519: LD_INT 10
41521: PUSH
41522: LD_INT 6
41524: PUSH
41525: LD_INT 7
41527: PUSH
41528: LD_INT 11
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 27
41542: PUSH
41543: LD_INT 28
41545: PUSH
41546: LD_INT 26
41548: PUSH
41549: LD_INT 30
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 43
41560: PUSH
41561: LD_INT 44
41563: PUSH
41564: LD_INT 46
41566: PUSH
41567: LD_INT 45
41569: PUSH
41570: LD_INT 47
41572: PUSH
41573: LD_INT 49
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: PUSH
41589: LD_VAR 0 12
41593: ARRAY
41594: ST_TO_ADDR
// list := list isect fac_list ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_VAR 0 5
41604: PUSH
41605: LD_VAR 0 17
41609: ISECT
41610: ST_TO_ADDR
// if not list then
41611: LD_VAR 0 5
41615: NOT
41616: IFFALSE 41620
// exit ;
41618: GO 42424
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41620: LD_VAR 0 12
41624: PUSH
41625: LD_INT 3
41627: EQUAL
41628: PUSH
41629: LD_INT 49
41631: PUSH
41632: LD_VAR 0 5
41636: IN
41637: AND
41638: PUSH
41639: LD_INT 31
41641: PPUSH
41642: LD_VAR 0 16
41646: PPUSH
41647: CALL_OW 321
41651: PUSH
41652: LD_INT 2
41654: EQUAL
41655: AND
41656: IFFALSE 41716
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41658: LD_INT 22
41660: PUSH
41661: LD_VAR 0 16
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 35
41672: PUSH
41673: LD_INT 49
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 91
41682: PUSH
41683: LD_VAR 0 1
41687: PUSH
41688: LD_INT 10
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: PPUSH
41701: CALL_OW 69
41705: NOT
41706: IFFALSE 41716
// weapon := ru_time_lapser ;
41708: LD_ADDR_VAR 0 18
41712: PUSH
41713: LD_INT 49
41715: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41716: LD_VAR 0 12
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: IN
41731: PUSH
41732: LD_INT 11
41734: PUSH
41735: LD_VAR 0 5
41739: IN
41740: PUSH
41741: LD_INT 30
41743: PUSH
41744: LD_VAR 0 5
41748: IN
41749: OR
41750: AND
41751: PUSH
41752: LD_INT 6
41754: PPUSH
41755: LD_VAR 0 16
41759: PPUSH
41760: CALL_OW 321
41764: PUSH
41765: LD_INT 2
41767: EQUAL
41768: AND
41769: IFFALSE 41934
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41771: LD_INT 22
41773: PUSH
41774: LD_VAR 0 16
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 35
41788: PUSH
41789: LD_INT 11
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 35
41798: PUSH
41799: LD_INT 30
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 91
41813: PUSH
41814: LD_VAR 0 1
41818: PUSH
41819: LD_INT 18
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: PPUSH
41832: CALL_OW 69
41836: NOT
41837: PUSH
41838: LD_INT 22
41840: PUSH
41841: LD_VAR 0 16
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 30
41855: PUSH
41856: LD_INT 32
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 30
41865: PUSH
41866: LD_INT 33
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 91
41880: PUSH
41881: LD_VAR 0 1
41885: PUSH
41886: LD_INT 12
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: PPUSH
41902: CALL_OW 69
41906: PUSH
41907: LD_INT 2
41909: GREATER
41910: AND
41911: IFFALSE 41934
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41913: LD_ADDR_VAR 0 18
41917: PUSH
41918: LD_INT 11
41920: PUSH
41921: LD_INT 30
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_VAR 0 12
41932: ARRAY
41933: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41934: LD_VAR 0 18
41938: NOT
41939: PUSH
41940: LD_INT 40
41942: PPUSH
41943: LD_VAR 0 16
41947: PPUSH
41948: CALL_OW 321
41952: PUSH
41953: LD_INT 2
41955: EQUAL
41956: AND
41957: PUSH
41958: LD_INT 7
41960: PUSH
41961: LD_VAR 0 5
41965: IN
41966: PUSH
41967: LD_INT 28
41969: PUSH
41970: LD_VAR 0 5
41974: IN
41975: OR
41976: PUSH
41977: LD_INT 45
41979: PUSH
41980: LD_VAR 0 5
41984: IN
41985: OR
41986: AND
41987: IFFALSE 42241
// begin hex := GetHexInfo ( x , y ) ;
41989: LD_ADDR_VAR 0 4
41993: PUSH
41994: LD_VAR 0 10
41998: PPUSH
41999: LD_VAR 0 11
42003: PPUSH
42004: CALL_OW 546
42008: ST_TO_ADDR
// if hex [ 1 ] then
42009: LD_VAR 0 4
42013: PUSH
42014: LD_INT 1
42016: ARRAY
42017: IFFALSE 42021
// exit ;
42019: GO 42424
// height := hex [ 2 ] ;
42021: LD_ADDR_VAR 0 15
42025: PUSH
42026: LD_VAR 0 4
42030: PUSH
42031: LD_INT 2
42033: ARRAY
42034: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42035: LD_ADDR_VAR 0 14
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 5
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// for i in tmp do
42058: LD_ADDR_VAR 0 8
42062: PUSH
42063: LD_VAR 0 14
42067: PUSH
42068: FOR_IN
42069: IFFALSE 42239
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42071: LD_ADDR_VAR 0 9
42075: PUSH
42076: LD_VAR 0 10
42080: PPUSH
42081: LD_VAR 0 8
42085: PPUSH
42086: LD_INT 5
42088: PPUSH
42089: CALL_OW 272
42093: PUSH
42094: LD_VAR 0 11
42098: PPUSH
42099: LD_VAR 0 8
42103: PPUSH
42104: LD_INT 5
42106: PPUSH
42107: CALL_OW 273
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42116: LD_VAR 0 9
42120: PUSH
42121: LD_INT 1
42123: ARRAY
42124: PPUSH
42125: LD_VAR 0 9
42129: PUSH
42130: LD_INT 2
42132: ARRAY
42133: PPUSH
42134: CALL_OW 488
42138: IFFALSE 42237
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: LD_VAR 0 9
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: PPUSH
42154: LD_VAR 0 9
42158: PUSH
42159: LD_INT 2
42161: ARRAY
42162: PPUSH
42163: CALL_OW 546
42167: ST_TO_ADDR
// if hex [ 1 ] then
42168: LD_VAR 0 4
42172: PUSH
42173: LD_INT 1
42175: ARRAY
42176: IFFALSE 42180
// continue ;
42178: GO 42068
// h := hex [ 2 ] ;
42180: LD_ADDR_VAR 0 13
42184: PUSH
42185: LD_VAR 0 4
42189: PUSH
42190: LD_INT 2
42192: ARRAY
42193: ST_TO_ADDR
// if h + 7 < height then
42194: LD_VAR 0 13
42198: PUSH
42199: LD_INT 7
42201: PLUS
42202: PUSH
42203: LD_VAR 0 15
42207: LESS
42208: IFFALSE 42237
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42210: LD_ADDR_VAR 0 18
42214: PUSH
42215: LD_INT 7
42217: PUSH
42218: LD_INT 28
42220: PUSH
42221: LD_INT 45
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: PUSH
42229: LD_VAR 0 12
42233: ARRAY
42234: ST_TO_ADDR
// break ;
42235: GO 42239
// end ; end ; end ;
42237: GO 42068
42239: POP
42240: POP
// end ; if not weapon then
42241: LD_VAR 0 18
42245: NOT
42246: IFFALSE 42306
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42248: LD_ADDR_VAR 0 5
42252: PUSH
42253: LD_VAR 0 5
42257: PUSH
42258: LD_INT 11
42260: PUSH
42261: LD_INT 30
42263: PUSH
42264: LD_INT 49
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: DIFF
42272: ST_TO_ADDR
// if not list then
42273: LD_VAR 0 5
42277: NOT
42278: IFFALSE 42282
// exit ;
42280: GO 42424
// weapon := list [ rand ( 1 , list ) ] ;
42282: LD_ADDR_VAR 0 18
42286: PUSH
42287: LD_VAR 0 5
42291: PUSH
42292: LD_INT 1
42294: PPUSH
42295: LD_VAR 0 5
42299: PPUSH
42300: CALL_OW 12
42304: ARRAY
42305: ST_TO_ADDR
// end ; if weapon then
42306: LD_VAR 0 18
42310: IFFALSE 42424
// begin tmp := CostOfWeapon ( weapon ) ;
42312: LD_ADDR_VAR 0 14
42316: PUSH
42317: LD_VAR 0 18
42321: PPUSH
42322: CALL_OW 451
42326: ST_TO_ADDR
// j := GetBase ( tower ) ;
42327: LD_ADDR_VAR 0 9
42331: PUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 274
42341: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42342: LD_VAR 0 9
42346: PPUSH
42347: LD_INT 1
42349: PPUSH
42350: CALL_OW 275
42354: PUSH
42355: LD_VAR 0 14
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: GREATEREQUAL
42364: PUSH
42365: LD_VAR 0 9
42369: PPUSH
42370: LD_INT 2
42372: PPUSH
42373: CALL_OW 275
42377: PUSH
42378: LD_VAR 0 14
42382: PUSH
42383: LD_INT 2
42385: ARRAY
42386: GREATEREQUAL
42387: AND
42388: PUSH
42389: LD_VAR 0 9
42393: PPUSH
42394: LD_INT 3
42396: PPUSH
42397: CALL_OW 275
42401: PUSH
42402: LD_VAR 0 14
42406: PUSH
42407: LD_INT 3
42409: ARRAY
42410: GREATEREQUAL
42411: AND
42412: IFFALSE 42424
// result := weapon ;
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_VAR 0 18
42423: ST_TO_ADDR
// end ; end ;
42424: LD_VAR 0 3
42428: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42429: LD_INT 0
42431: PPUSH
42432: PPUSH
// result := true ;
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_INT 1
42440: ST_TO_ADDR
// if array1 = array2 then
42441: LD_VAR 0 1
42445: PUSH
42446: LD_VAR 0 2
42450: EQUAL
42451: IFFALSE 42511
// begin for i = 1 to array1 do
42453: LD_ADDR_VAR 0 4
42457: PUSH
42458: DOUBLE
42459: LD_INT 1
42461: DEC
42462: ST_TO_ADDR
42463: LD_VAR 0 1
42467: PUSH
42468: FOR_TO
42469: IFFALSE 42507
// if array1 [ i ] <> array2 [ i ] then
42471: LD_VAR 0 1
42475: PUSH
42476: LD_VAR 0 4
42480: ARRAY
42481: PUSH
42482: LD_VAR 0 2
42486: PUSH
42487: LD_VAR 0 4
42491: ARRAY
42492: NONEQUAL
42493: IFFALSE 42505
// begin result := false ;
42495: LD_ADDR_VAR 0 3
42499: PUSH
42500: LD_INT 0
42502: ST_TO_ADDR
// break ;
42503: GO 42507
// end ;
42505: GO 42468
42507: POP
42508: POP
// end else
42509: GO 42519
// result := false ;
42511: LD_ADDR_VAR 0 3
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
// end ;
42519: LD_VAR 0 3
42523: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42524: LD_INT 0
42526: PPUSH
42527: PPUSH
// if not array1 or not array2 then
42528: LD_VAR 0 1
42532: NOT
42533: PUSH
42534: LD_VAR 0 2
42538: NOT
42539: OR
42540: IFFALSE 42544
// exit ;
42542: GO 42608
// result := true ;
42544: LD_ADDR_VAR 0 3
42548: PUSH
42549: LD_INT 1
42551: ST_TO_ADDR
// for i = 1 to array1 do
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: DOUBLE
42558: LD_INT 1
42560: DEC
42561: ST_TO_ADDR
42562: LD_VAR 0 1
42566: PUSH
42567: FOR_TO
42568: IFFALSE 42606
// if array1 [ i ] <> array2 [ i ] then
42570: LD_VAR 0 1
42574: PUSH
42575: LD_VAR 0 4
42579: ARRAY
42580: PUSH
42581: LD_VAR 0 2
42585: PUSH
42586: LD_VAR 0 4
42590: ARRAY
42591: NONEQUAL
42592: IFFALSE 42604
// begin result := false ;
42594: LD_ADDR_VAR 0 3
42598: PUSH
42599: LD_INT 0
42601: ST_TO_ADDR
// break ;
42602: GO 42606
// end ;
42604: GO 42567
42606: POP
42607: POP
// end ;
42608: LD_VAR 0 3
42612: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42613: LD_INT 0
42615: PPUSH
42616: PPUSH
42617: PPUSH
// pom := GetBase ( fac ) ;
42618: LD_ADDR_VAR 0 5
42622: PUSH
42623: LD_VAR 0 1
42627: PPUSH
42628: CALL_OW 274
42632: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42633: LD_ADDR_VAR 0 4
42637: PUSH
42638: LD_VAR 0 2
42642: PUSH
42643: LD_INT 1
42645: ARRAY
42646: PPUSH
42647: LD_VAR 0 2
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: PPUSH
42656: LD_VAR 0 2
42660: PUSH
42661: LD_INT 3
42663: ARRAY
42664: PPUSH
42665: LD_VAR 0 2
42669: PUSH
42670: LD_INT 4
42672: ARRAY
42673: PPUSH
42674: CALL_OW 449
42678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_VAR 0 5
42688: PPUSH
42689: LD_INT 1
42691: PPUSH
42692: CALL_OW 275
42696: PUSH
42697: LD_VAR 0 4
42701: PUSH
42702: LD_INT 1
42704: ARRAY
42705: GREATEREQUAL
42706: PUSH
42707: LD_VAR 0 5
42711: PPUSH
42712: LD_INT 2
42714: PPUSH
42715: CALL_OW 275
42719: PUSH
42720: LD_VAR 0 4
42724: PUSH
42725: LD_INT 2
42727: ARRAY
42728: GREATEREQUAL
42729: AND
42730: PUSH
42731: LD_VAR 0 5
42735: PPUSH
42736: LD_INT 3
42738: PPUSH
42739: CALL_OW 275
42743: PUSH
42744: LD_VAR 0 4
42748: PUSH
42749: LD_INT 3
42751: ARRAY
42752: GREATEREQUAL
42753: AND
42754: ST_TO_ADDR
// end ;
42755: LD_VAR 0 3
42759: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42760: LD_INT 0
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
// pom := GetBase ( building ) ;
42766: LD_ADDR_VAR 0 3
42770: PUSH
42771: LD_VAR 0 1
42775: PPUSH
42776: CALL_OW 274
42780: ST_TO_ADDR
// if not pom then
42781: LD_VAR 0 3
42785: NOT
42786: IFFALSE 42790
// exit ;
42788: GO 42960
// btype := GetBType ( building ) ;
42790: LD_ADDR_VAR 0 5
42794: PUSH
42795: LD_VAR 0 1
42799: PPUSH
42800: CALL_OW 266
42804: ST_TO_ADDR
// if btype = b_armoury then
42805: LD_VAR 0 5
42809: PUSH
42810: LD_INT 4
42812: EQUAL
42813: IFFALSE 42823
// btype := b_barracks ;
42815: LD_ADDR_VAR 0 5
42819: PUSH
42820: LD_INT 5
42822: ST_TO_ADDR
// if btype = b_depot then
42823: LD_VAR 0 5
42827: PUSH
42828: LD_INT 0
42830: EQUAL
42831: IFFALSE 42841
// btype := b_warehouse ;
42833: LD_ADDR_VAR 0 5
42837: PUSH
42838: LD_INT 1
42840: ST_TO_ADDR
// if btype = b_workshop then
42841: LD_VAR 0 5
42845: PUSH
42846: LD_INT 2
42848: EQUAL
42849: IFFALSE 42859
// btype := b_factory ;
42851: LD_ADDR_VAR 0 5
42855: PUSH
42856: LD_INT 3
42858: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42859: LD_ADDR_VAR 0 4
42863: PUSH
42864: LD_VAR 0 5
42868: PPUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: CALL_OW 248
42878: PPUSH
42879: CALL_OW 450
42883: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42884: LD_ADDR_VAR 0 2
42888: PUSH
42889: LD_VAR 0 3
42893: PPUSH
42894: LD_INT 1
42896: PPUSH
42897: CALL_OW 275
42901: PUSH
42902: LD_VAR 0 4
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: GREATEREQUAL
42911: PUSH
42912: LD_VAR 0 3
42916: PPUSH
42917: LD_INT 2
42919: PPUSH
42920: CALL_OW 275
42924: PUSH
42925: LD_VAR 0 4
42929: PUSH
42930: LD_INT 2
42932: ARRAY
42933: GREATEREQUAL
42934: AND
42935: PUSH
42936: LD_VAR 0 3
42940: PPUSH
42941: LD_INT 3
42943: PPUSH
42944: CALL_OW 275
42948: PUSH
42949: LD_VAR 0 4
42953: PUSH
42954: LD_INT 3
42956: ARRAY
42957: GREATEREQUAL
42958: AND
42959: ST_TO_ADDR
// end ;
42960: LD_VAR 0 2
42964: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42965: LD_INT 0
42967: PPUSH
42968: PPUSH
42969: PPUSH
// pom := GetBase ( building ) ;
42970: LD_ADDR_VAR 0 4
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 274
42984: ST_TO_ADDR
// if not pom then
42985: LD_VAR 0 4
42989: NOT
42990: IFFALSE 42994
// exit ;
42992: GO 43095
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42994: LD_ADDR_VAR 0 5
42998: PUSH
42999: LD_VAR 0 2
43003: PPUSH
43004: LD_VAR 0 1
43008: PPUSH
43009: CALL_OW 248
43013: PPUSH
43014: CALL_OW 450
43018: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43019: LD_ADDR_VAR 0 3
43023: PUSH
43024: LD_VAR 0 4
43028: PPUSH
43029: LD_INT 1
43031: PPUSH
43032: CALL_OW 275
43036: PUSH
43037: LD_VAR 0 5
43041: PUSH
43042: LD_INT 1
43044: ARRAY
43045: GREATEREQUAL
43046: PUSH
43047: LD_VAR 0 4
43051: PPUSH
43052: LD_INT 2
43054: PPUSH
43055: CALL_OW 275
43059: PUSH
43060: LD_VAR 0 5
43064: PUSH
43065: LD_INT 2
43067: ARRAY
43068: GREATEREQUAL
43069: AND
43070: PUSH
43071: LD_VAR 0 4
43075: PPUSH
43076: LD_INT 3
43078: PPUSH
43079: CALL_OW 275
43083: PUSH
43084: LD_VAR 0 5
43088: PUSH
43089: LD_INT 3
43091: ARRAY
43092: GREATEREQUAL
43093: AND
43094: ST_TO_ADDR
// end ;
43095: LD_VAR 0 3
43099: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43100: LD_INT 0
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
// result := false ;
43113: LD_ADDR_VAR 0 8
43117: PUSH
43118: LD_INT 0
43120: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43121: LD_VAR 0 5
43125: NOT
43126: PUSH
43127: LD_VAR 0 1
43131: NOT
43132: OR
43133: PUSH
43134: LD_VAR 0 2
43138: NOT
43139: OR
43140: PUSH
43141: LD_VAR 0 3
43145: NOT
43146: OR
43147: IFFALSE 43151
// exit ;
43149: GO 43965
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43151: LD_ADDR_VAR 0 14
43155: PUSH
43156: LD_VAR 0 1
43160: PPUSH
43161: LD_VAR 0 2
43165: PPUSH
43166: LD_VAR 0 3
43170: PPUSH
43171: LD_VAR 0 4
43175: PPUSH
43176: LD_VAR 0 5
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PPUSH
43185: CALL_OW 248
43189: PPUSH
43190: LD_INT 0
43192: PPUSH
43193: CALL 45202 0 6
43197: ST_TO_ADDR
// if not hexes then
43198: LD_VAR 0 14
43202: NOT
43203: IFFALSE 43207
// exit ;
43205: GO 43965
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43207: LD_ADDR_VAR 0 17
43211: PUSH
43212: LD_VAR 0 5
43216: PPUSH
43217: LD_INT 22
43219: PUSH
43220: LD_VAR 0 13
43224: PPUSH
43225: CALL_OW 255
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 30
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 30
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PPUSH
43266: CALL_OW 72
43270: ST_TO_ADDR
// for i = 1 to hexes do
43271: LD_ADDR_VAR 0 9
43275: PUSH
43276: DOUBLE
43277: LD_INT 1
43279: DEC
43280: ST_TO_ADDR
43281: LD_VAR 0 14
43285: PUSH
43286: FOR_TO
43287: IFFALSE 43963
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43289: LD_ADDR_VAR 0 13
43293: PUSH
43294: LD_VAR 0 14
43298: PUSH
43299: LD_VAR 0 9
43303: ARRAY
43304: PUSH
43305: LD_INT 1
43307: ARRAY
43308: PPUSH
43309: LD_VAR 0 14
43313: PUSH
43314: LD_VAR 0 9
43318: ARRAY
43319: PUSH
43320: LD_INT 2
43322: ARRAY
43323: PPUSH
43324: CALL_OW 428
43328: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43329: LD_VAR 0 14
43333: PUSH
43334: LD_VAR 0 9
43338: ARRAY
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: PPUSH
43344: LD_VAR 0 14
43348: PUSH
43349: LD_VAR 0 9
43353: ARRAY
43354: PUSH
43355: LD_INT 2
43357: ARRAY
43358: PPUSH
43359: CALL_OW 351
43363: PUSH
43364: LD_VAR 0 14
43368: PUSH
43369: LD_VAR 0 9
43373: ARRAY
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: PPUSH
43379: LD_VAR 0 14
43383: PUSH
43384: LD_VAR 0 9
43388: ARRAY
43389: PUSH
43390: LD_INT 2
43392: ARRAY
43393: PPUSH
43394: CALL_OW 488
43398: NOT
43399: OR
43400: PUSH
43401: LD_VAR 0 13
43405: PPUSH
43406: CALL_OW 247
43410: PUSH
43411: LD_INT 3
43413: EQUAL
43414: OR
43415: IFFALSE 43421
// exit ;
43417: POP
43418: POP
43419: GO 43965
// if not tmp then
43421: LD_VAR 0 13
43425: NOT
43426: IFFALSE 43430
// continue ;
43428: GO 43286
// result := true ;
43430: LD_ADDR_VAR 0 8
43434: PUSH
43435: LD_INT 1
43437: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43438: LD_VAR 0 6
43442: PUSH
43443: LD_VAR 0 13
43447: PPUSH
43448: CALL_OW 247
43452: PUSH
43453: LD_INT 2
43455: EQUAL
43456: AND
43457: PUSH
43458: LD_VAR 0 13
43462: PPUSH
43463: CALL_OW 263
43467: PUSH
43468: LD_INT 1
43470: EQUAL
43471: AND
43472: IFFALSE 43636
// begin if IsDrivenBy ( tmp ) then
43474: LD_VAR 0 13
43478: PPUSH
43479: CALL_OW 311
43483: IFFALSE 43487
// continue ;
43485: GO 43286
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43487: LD_VAR 0 6
43491: PPUSH
43492: LD_INT 3
43494: PUSH
43495: LD_INT 60
43497: PUSH
43498: EMPTY
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: LD_INT 55
43510: PUSH
43511: EMPTY
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PPUSH
43522: CALL_OW 72
43526: IFFALSE 43634
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43528: LD_ADDR_VAR 0 18
43532: PUSH
43533: LD_VAR 0 6
43537: PPUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 60
43543: PUSH
43544: EMPTY
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 55
43556: PUSH
43557: EMPTY
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PPUSH
43568: CALL_OW 72
43572: PUSH
43573: LD_INT 1
43575: ARRAY
43576: ST_TO_ADDR
// if IsInUnit ( driver ) then
43577: LD_VAR 0 18
43581: PPUSH
43582: CALL_OW 310
43586: IFFALSE 43597
// ComExit ( driver ) ;
43588: LD_VAR 0 18
43592: PPUSH
43593: CALL 68907 0 1
// AddComEnterUnit ( driver , tmp ) ;
43597: LD_VAR 0 18
43601: PPUSH
43602: LD_VAR 0 13
43606: PPUSH
43607: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43611: LD_VAR 0 18
43615: PPUSH
43616: LD_VAR 0 7
43620: PPUSH
43621: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43625: LD_VAR 0 18
43629: PPUSH
43630: CALL_OW 181
// end ; continue ;
43634: GO 43286
// end ; if not cleaners or not tmp in cleaners then
43636: LD_VAR 0 6
43640: NOT
43641: PUSH
43642: LD_VAR 0 13
43646: PUSH
43647: LD_VAR 0 6
43651: IN
43652: NOT
43653: OR
43654: IFFALSE 43961
// begin if dep then
43656: LD_VAR 0 17
43660: IFFALSE 43796
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43662: LD_ADDR_VAR 0 16
43666: PUSH
43667: LD_VAR 0 17
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: CALL_OW 250
43680: PPUSH
43681: LD_VAR 0 17
43685: PUSH
43686: LD_INT 1
43688: ARRAY
43689: PPUSH
43690: CALL_OW 254
43694: PPUSH
43695: LD_INT 5
43697: PPUSH
43698: CALL_OW 272
43702: PUSH
43703: LD_VAR 0 17
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: CALL_OW 251
43716: PPUSH
43717: LD_VAR 0 17
43721: PUSH
43722: LD_INT 1
43724: ARRAY
43725: PPUSH
43726: CALL_OW 254
43730: PPUSH
43731: LD_INT 5
43733: PPUSH
43734: CALL_OW 273
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43743: LD_VAR 0 16
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: LD_VAR 0 16
43756: PUSH
43757: LD_INT 2
43759: ARRAY
43760: PPUSH
43761: CALL_OW 488
43765: IFFALSE 43796
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43767: LD_VAR 0 13
43771: PPUSH
43772: LD_VAR 0 16
43776: PUSH
43777: LD_INT 1
43779: ARRAY
43780: PPUSH
43781: LD_VAR 0 16
43785: PUSH
43786: LD_INT 2
43788: ARRAY
43789: PPUSH
43790: CALL_OW 111
// continue ;
43794: GO 43286
// end ; end ; r := GetDir ( tmp ) ;
43796: LD_ADDR_VAR 0 15
43800: PUSH
43801: LD_VAR 0 13
43805: PPUSH
43806: CALL_OW 254
43810: ST_TO_ADDR
// if r = 5 then
43811: LD_VAR 0 15
43815: PUSH
43816: LD_INT 5
43818: EQUAL
43819: IFFALSE 43829
// r := 0 ;
43821: LD_ADDR_VAR 0 15
43825: PUSH
43826: LD_INT 0
43828: ST_TO_ADDR
// for j = r to 5 do
43829: LD_ADDR_VAR 0 10
43833: PUSH
43834: DOUBLE
43835: LD_VAR 0 15
43839: DEC
43840: ST_TO_ADDR
43841: LD_INT 5
43843: PUSH
43844: FOR_TO
43845: IFFALSE 43959
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43847: LD_ADDR_VAR 0 11
43851: PUSH
43852: LD_VAR 0 13
43856: PPUSH
43857: CALL_OW 250
43861: PPUSH
43862: LD_VAR 0 10
43866: PPUSH
43867: LD_INT 2
43869: PPUSH
43870: CALL_OW 272
43874: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43875: LD_ADDR_VAR 0 12
43879: PUSH
43880: LD_VAR 0 13
43884: PPUSH
43885: CALL_OW 251
43889: PPUSH
43890: LD_VAR 0 10
43894: PPUSH
43895: LD_INT 2
43897: PPUSH
43898: CALL_OW 273
43902: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43903: LD_VAR 0 11
43907: PPUSH
43908: LD_VAR 0 12
43912: PPUSH
43913: CALL_OW 488
43917: PUSH
43918: LD_VAR 0 11
43922: PPUSH
43923: LD_VAR 0 12
43927: PPUSH
43928: CALL_OW 428
43932: NOT
43933: AND
43934: IFFALSE 43957
// begin ComMoveXY ( tmp , _x , _y ) ;
43936: LD_VAR 0 13
43940: PPUSH
43941: LD_VAR 0 11
43945: PPUSH
43946: LD_VAR 0 12
43950: PPUSH
43951: CALL_OW 111
// break ;
43955: GO 43959
// end ; end ;
43957: GO 43844
43959: POP
43960: POP
// end ; end ;
43961: GO 43286
43963: POP
43964: POP
// end ;
43965: LD_VAR 0 8
43969: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43970: LD_INT 0
43972: PPUSH
// result := true ;
43973: LD_ADDR_VAR 0 3
43977: PUSH
43978: LD_INT 1
43980: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43981: LD_VAR 0 2
43985: PUSH
43986: LD_INT 24
43988: DOUBLE
43989: EQUAL
43990: IFTRUE 44000
43992: LD_INT 33
43994: DOUBLE
43995: EQUAL
43996: IFTRUE 44000
43998: GO 44025
44000: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44001: LD_ADDR_VAR 0 3
44005: PUSH
44006: LD_INT 32
44008: PPUSH
44009: LD_VAR 0 1
44013: PPUSH
44014: CALL_OW 321
44018: PUSH
44019: LD_INT 2
44021: EQUAL
44022: ST_TO_ADDR
44023: GO 44345
44025: LD_INT 20
44027: DOUBLE
44028: EQUAL
44029: IFTRUE 44033
44031: GO 44058
44033: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44034: LD_ADDR_VAR 0 3
44038: PUSH
44039: LD_INT 6
44041: PPUSH
44042: LD_VAR 0 1
44046: PPUSH
44047: CALL_OW 321
44051: PUSH
44052: LD_INT 2
44054: EQUAL
44055: ST_TO_ADDR
44056: GO 44345
44058: LD_INT 22
44060: DOUBLE
44061: EQUAL
44062: IFTRUE 44072
44064: LD_INT 36
44066: DOUBLE
44067: EQUAL
44068: IFTRUE 44072
44070: GO 44097
44072: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44073: LD_ADDR_VAR 0 3
44077: PUSH
44078: LD_INT 15
44080: PPUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 321
44090: PUSH
44091: LD_INT 2
44093: EQUAL
44094: ST_TO_ADDR
44095: GO 44345
44097: LD_INT 30
44099: DOUBLE
44100: EQUAL
44101: IFTRUE 44105
44103: GO 44130
44105: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44106: LD_ADDR_VAR 0 3
44110: PUSH
44111: LD_INT 20
44113: PPUSH
44114: LD_VAR 0 1
44118: PPUSH
44119: CALL_OW 321
44123: PUSH
44124: LD_INT 2
44126: EQUAL
44127: ST_TO_ADDR
44128: GO 44345
44130: LD_INT 28
44132: DOUBLE
44133: EQUAL
44134: IFTRUE 44144
44136: LD_INT 21
44138: DOUBLE
44139: EQUAL
44140: IFTRUE 44144
44142: GO 44169
44144: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44145: LD_ADDR_VAR 0 3
44149: PUSH
44150: LD_INT 21
44152: PPUSH
44153: LD_VAR 0 1
44157: PPUSH
44158: CALL_OW 321
44162: PUSH
44163: LD_INT 2
44165: EQUAL
44166: ST_TO_ADDR
44167: GO 44345
44169: LD_INT 16
44171: DOUBLE
44172: EQUAL
44173: IFTRUE 44177
44175: GO 44204
44177: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44178: LD_ADDR_VAR 0 3
44182: PUSH
44183: LD_EXP 59
44187: PPUSH
44188: LD_VAR 0 1
44192: PPUSH
44193: CALL_OW 321
44197: PUSH
44198: LD_INT 2
44200: EQUAL
44201: ST_TO_ADDR
44202: GO 44345
44204: LD_INT 19
44206: DOUBLE
44207: EQUAL
44208: IFTRUE 44218
44210: LD_INT 23
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44245
44218: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_EXP 58
44228: PPUSH
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL_OW 321
44238: PUSH
44239: LD_INT 2
44241: EQUAL
44242: ST_TO_ADDR
44243: GO 44345
44245: LD_INT 17
44247: DOUBLE
44248: EQUAL
44249: IFTRUE 44253
44251: GO 44278
44253: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44254: LD_ADDR_VAR 0 3
44258: PUSH
44259: LD_INT 39
44261: PPUSH
44262: LD_VAR 0 1
44266: PPUSH
44267: CALL_OW 321
44271: PUSH
44272: LD_INT 2
44274: EQUAL
44275: ST_TO_ADDR
44276: GO 44345
44278: LD_INT 18
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44311
44286: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44287: LD_ADDR_VAR 0 3
44291: PUSH
44292: LD_INT 40
44294: PPUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: CALL_OW 321
44304: PUSH
44305: LD_INT 2
44307: EQUAL
44308: ST_TO_ADDR
44309: GO 44345
44311: LD_INT 27
44313: DOUBLE
44314: EQUAL
44315: IFTRUE 44319
44317: GO 44344
44319: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44320: LD_ADDR_VAR 0 3
44324: PUSH
44325: LD_INT 35
44327: PPUSH
44328: LD_VAR 0 1
44332: PPUSH
44333: CALL_OW 321
44337: PUSH
44338: LD_INT 2
44340: EQUAL
44341: ST_TO_ADDR
44342: GO 44345
44344: POP
// end ;
44345: LD_VAR 0 3
44349: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44350: LD_INT 0
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
44362: PPUSH
// result := false ;
44363: LD_ADDR_VAR 0 6
44367: PUSH
44368: LD_INT 0
44370: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44371: LD_VAR 0 1
44375: NOT
44376: PUSH
44377: LD_VAR 0 1
44381: PPUSH
44382: CALL_OW 266
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: IN
44397: NOT
44398: OR
44399: PUSH
44400: LD_VAR 0 2
44404: NOT
44405: OR
44406: PUSH
44407: LD_VAR 0 5
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: LD_INT 4
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: IN
44438: NOT
44439: OR
44440: PUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: LD_VAR 0 4
44450: PPUSH
44451: CALL_OW 488
44455: NOT
44456: OR
44457: IFFALSE 44461
// exit ;
44459: GO 45197
// side := GetSide ( depot ) ;
44461: LD_ADDR_VAR 0 9
44465: PUSH
44466: LD_VAR 0 1
44470: PPUSH
44471: CALL_OW 255
44475: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44476: LD_VAR 0 9
44480: PPUSH
44481: LD_VAR 0 2
44485: PPUSH
44486: CALL 43970 0 2
44490: NOT
44491: IFFALSE 44495
// exit ;
44493: GO 45197
// pom := GetBase ( depot ) ;
44495: LD_ADDR_VAR 0 10
44499: PUSH
44500: LD_VAR 0 1
44504: PPUSH
44505: CALL_OW 274
44509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44510: LD_ADDR_VAR 0 11
44514: PUSH
44515: LD_VAR 0 2
44519: PPUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 248
44529: PPUSH
44530: CALL_OW 450
44534: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44535: LD_VAR 0 10
44539: PPUSH
44540: LD_INT 1
44542: PPUSH
44543: CALL_OW 275
44547: PUSH
44548: LD_VAR 0 11
44552: PUSH
44553: LD_INT 1
44555: ARRAY
44556: GREATEREQUAL
44557: PUSH
44558: LD_VAR 0 10
44562: PPUSH
44563: LD_INT 2
44565: PPUSH
44566: CALL_OW 275
44570: PUSH
44571: LD_VAR 0 11
44575: PUSH
44576: LD_INT 2
44578: ARRAY
44579: GREATEREQUAL
44580: AND
44581: PUSH
44582: LD_VAR 0 10
44586: PPUSH
44587: LD_INT 3
44589: PPUSH
44590: CALL_OW 275
44594: PUSH
44595: LD_VAR 0 11
44599: PUSH
44600: LD_INT 3
44602: ARRAY
44603: GREATEREQUAL
44604: AND
44605: NOT
44606: IFFALSE 44610
// exit ;
44608: GO 45197
// if GetBType ( depot ) = b_depot then
44610: LD_VAR 0 1
44614: PPUSH
44615: CALL_OW 266
44619: PUSH
44620: LD_INT 0
44622: EQUAL
44623: IFFALSE 44635
// dist := 28 else
44625: LD_ADDR_VAR 0 14
44629: PUSH
44630: LD_INT 28
44632: ST_TO_ADDR
44633: GO 44643
// dist := 36 ;
44635: LD_ADDR_VAR 0 14
44639: PUSH
44640: LD_INT 36
44642: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44643: LD_VAR 0 1
44647: PPUSH
44648: LD_VAR 0 3
44652: PPUSH
44653: LD_VAR 0 4
44657: PPUSH
44658: CALL_OW 297
44662: PUSH
44663: LD_VAR 0 14
44667: GREATER
44668: IFFALSE 44672
// exit ;
44670: GO 45197
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44672: LD_ADDR_VAR 0 12
44676: PUSH
44677: LD_VAR 0 2
44681: PPUSH
44682: LD_VAR 0 3
44686: PPUSH
44687: LD_VAR 0 4
44691: PPUSH
44692: LD_VAR 0 5
44696: PPUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: CALL_OW 248
44706: PPUSH
44707: LD_INT 0
44709: PPUSH
44710: CALL 45202 0 6
44714: ST_TO_ADDR
// if not hexes then
44715: LD_VAR 0 12
44719: NOT
44720: IFFALSE 44724
// exit ;
44722: GO 45197
// hex := GetHexInfo ( x , y ) ;
44724: LD_ADDR_VAR 0 15
44728: PUSH
44729: LD_VAR 0 3
44733: PPUSH
44734: LD_VAR 0 4
44738: PPUSH
44739: CALL_OW 546
44743: ST_TO_ADDR
// if hex [ 1 ] then
44744: LD_VAR 0 15
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: IFFALSE 44756
// exit ;
44754: GO 45197
// height := hex [ 2 ] ;
44756: LD_ADDR_VAR 0 13
44760: PUSH
44761: LD_VAR 0 15
44765: PUSH
44766: LD_INT 2
44768: ARRAY
44769: ST_TO_ADDR
// for i = 1 to hexes do
44770: LD_ADDR_VAR 0 7
44774: PUSH
44775: DOUBLE
44776: LD_INT 1
44778: DEC
44779: ST_TO_ADDR
44780: LD_VAR 0 12
44784: PUSH
44785: FOR_TO
44786: IFFALSE 45116
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44788: LD_VAR 0 12
44792: PUSH
44793: LD_VAR 0 7
44797: ARRAY
44798: PUSH
44799: LD_INT 1
44801: ARRAY
44802: PPUSH
44803: LD_VAR 0 12
44807: PUSH
44808: LD_VAR 0 7
44812: ARRAY
44813: PUSH
44814: LD_INT 2
44816: ARRAY
44817: PPUSH
44818: CALL_OW 488
44822: NOT
44823: PUSH
44824: LD_VAR 0 12
44828: PUSH
44829: LD_VAR 0 7
44833: ARRAY
44834: PUSH
44835: LD_INT 1
44837: ARRAY
44838: PPUSH
44839: LD_VAR 0 12
44843: PUSH
44844: LD_VAR 0 7
44848: ARRAY
44849: PUSH
44850: LD_INT 2
44852: ARRAY
44853: PPUSH
44854: CALL_OW 428
44858: PUSH
44859: LD_INT 0
44861: GREATER
44862: OR
44863: PUSH
44864: LD_VAR 0 12
44868: PUSH
44869: LD_VAR 0 7
44873: ARRAY
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: PPUSH
44879: LD_VAR 0 12
44883: PUSH
44884: LD_VAR 0 7
44888: ARRAY
44889: PUSH
44890: LD_INT 2
44892: ARRAY
44893: PPUSH
44894: CALL_OW 351
44898: OR
44899: IFFALSE 44905
// exit ;
44901: POP
44902: POP
44903: GO 45197
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44905: LD_ADDR_VAR 0 8
44909: PUSH
44910: LD_VAR 0 12
44914: PUSH
44915: LD_VAR 0 7
44919: ARRAY
44920: PUSH
44921: LD_INT 1
44923: ARRAY
44924: PPUSH
44925: LD_VAR 0 12
44929: PUSH
44930: LD_VAR 0 7
44934: ARRAY
44935: PUSH
44936: LD_INT 2
44938: ARRAY
44939: PPUSH
44940: CALL_OW 546
44944: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44945: LD_VAR 0 8
44949: PUSH
44950: LD_INT 1
44952: ARRAY
44953: PUSH
44954: LD_VAR 0 8
44958: PUSH
44959: LD_INT 2
44961: ARRAY
44962: PUSH
44963: LD_VAR 0 13
44967: PUSH
44968: LD_INT 2
44970: PLUS
44971: GREATER
44972: OR
44973: PUSH
44974: LD_VAR 0 8
44978: PUSH
44979: LD_INT 2
44981: ARRAY
44982: PUSH
44983: LD_VAR 0 13
44987: PUSH
44988: LD_INT 2
44990: MINUS
44991: LESS
44992: OR
44993: PUSH
44994: LD_VAR 0 8
44998: PUSH
44999: LD_INT 3
45001: ARRAY
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 8
45008: PUSH
45009: LD_INT 9
45011: PUSH
45012: LD_INT 10
45014: PUSH
45015: LD_INT 11
45017: PUSH
45018: LD_INT 12
45020: PUSH
45021: LD_INT 13
45023: PUSH
45024: LD_INT 16
45026: PUSH
45027: LD_INT 17
45029: PUSH
45030: LD_INT 18
45032: PUSH
45033: LD_INT 19
45035: PUSH
45036: LD_INT 20
45038: PUSH
45039: LD_INT 21
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: IN
45057: NOT
45058: OR
45059: PUSH
45060: LD_VAR 0 8
45064: PUSH
45065: LD_INT 5
45067: ARRAY
45068: NOT
45069: OR
45070: PUSH
45071: LD_VAR 0 8
45075: PUSH
45076: LD_INT 6
45078: ARRAY
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 7
45088: PUSH
45089: LD_INT 9
45091: PUSH
45092: LD_INT 10
45094: PUSH
45095: LD_INT 11
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: IN
45106: NOT
45107: OR
45108: IFFALSE 45114
// exit ;
45110: POP
45111: POP
45112: GO 45197
// end ;
45114: GO 44785
45116: POP
45117: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45118: LD_VAR 0 9
45122: PPUSH
45123: LD_VAR 0 3
45127: PPUSH
45128: LD_VAR 0 4
45132: PPUSH
45133: LD_INT 20
45135: PPUSH
45136: CALL 37143 0 4
45140: PUSH
45141: LD_INT 4
45143: ARRAY
45144: IFFALSE 45148
// exit ;
45146: GO 45197
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45148: LD_VAR 0 2
45152: PUSH
45153: LD_INT 29
45155: PUSH
45156: LD_INT 30
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: IN
45163: PUSH
45164: LD_VAR 0 3
45168: PPUSH
45169: LD_VAR 0 4
45173: PPUSH
45174: LD_VAR 0 9
45178: PPUSH
45179: CALL_OW 440
45183: NOT
45184: AND
45185: IFFALSE 45189
// exit ;
45187: GO 45197
// result := true ;
45189: LD_ADDR_VAR 0 6
45193: PUSH
45194: LD_INT 1
45196: ST_TO_ADDR
// end ;
45197: LD_VAR 0 6
45201: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45202: LD_INT 0
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
// result = [ ] ;
45262: LD_ADDR_VAR 0 7
45266: PUSH
45267: EMPTY
45268: ST_TO_ADDR
// temp_list = [ ] ;
45269: LD_ADDR_VAR 0 9
45273: PUSH
45274: EMPTY
45275: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45276: LD_VAR 0 4
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: LD_INT 4
45295: PUSH
45296: LD_INT 5
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: IN
45307: NOT
45308: PUSH
45309: LD_VAR 0 1
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: IN
45324: PUSH
45325: LD_VAR 0 5
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: IN
45344: NOT
45345: AND
45346: OR
45347: IFFALSE 45351
// exit ;
45349: GO 63742
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45351: LD_VAR 0 1
45355: PUSH
45356: LD_INT 6
45358: PUSH
45359: LD_INT 7
45361: PUSH
45362: LD_INT 8
45364: PUSH
45365: LD_INT 13
45367: PUSH
45368: LD_INT 12
45370: PUSH
45371: LD_INT 15
45373: PUSH
45374: LD_INT 11
45376: PUSH
45377: LD_INT 14
45379: PUSH
45380: LD_INT 10
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: IN
45394: IFFALSE 45404
// btype = b_lab ;
45396: LD_ADDR_VAR 0 1
45400: PUSH
45401: LD_INT 6
45403: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45404: LD_VAR 0 6
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: IN
45423: NOT
45424: PUSH
45425: LD_VAR 0 1
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: LD_INT 6
45444: PUSH
45445: LD_INT 36
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 5
45453: PUSH
45454: LD_INT 31
45456: PUSH
45457: LD_INT 32
45459: PUSH
45460: LD_INT 33
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: IN
45476: NOT
45477: PUSH
45478: LD_VAR 0 6
45482: PUSH
45483: LD_INT 1
45485: EQUAL
45486: AND
45487: OR
45488: PUSH
45489: LD_VAR 0 1
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: IN
45504: NOT
45505: PUSH
45506: LD_VAR 0 6
45510: PUSH
45511: LD_INT 2
45513: EQUAL
45514: AND
45515: OR
45516: IFFALSE 45526
// mode = 0 ;
45518: LD_ADDR_VAR 0 6
45522: PUSH
45523: LD_INT 0
45525: ST_TO_ADDR
// case mode of 0 :
45526: LD_VAR 0 6
45530: PUSH
45531: LD_INT 0
45533: DOUBLE
45534: EQUAL
45535: IFTRUE 45539
45537: GO 56992
45539: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45540: LD_ADDR_VAR 0 11
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 3
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45733: LD_ADDR_VAR 0 12
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45929: LD_ADDR_VAR 0 13
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 3
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 3
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46128: LD_ADDR_VAR 0 14
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 3
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46324: LD_ADDR_VAR 0 15
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 3
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46517: LD_ADDR_VAR 0 16
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46710: LD_ADDR_VAR 0 17
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46940: LD_ADDR_VAR 0 18
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47170: LD_ADDR_VAR 0 19
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47400: LD_ADDR_VAR 0 20
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47630: LD_ADDR_VAR 0 21
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47860: LD_ADDR_VAR 0 22
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48090: LD_ADDR_VAR 0 23
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48370: LD_ADDR_VAR 0 24
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48646: LD_ADDR_VAR 0 25
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48920: LD_ADDR_VAR 0 26
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49196: LD_ADDR_VAR 0 27
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49476: LD_ADDR_VAR 0 28
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 3
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49758: LD_ADDR_VAR 0 29
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 3
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50037: LD_ADDR_VAR 0 30
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50315: LD_ADDR_VAR 0 31
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50593: LD_ADDR_VAR 0 32
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50871: LD_ADDR_VAR 0 33
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51150: LD_ADDR_VAR 0 34
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51430: LD_ADDR_VAR 0 35
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51542: LD_ADDR_VAR 0 36
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51654: LD_ADDR_VAR 0 37
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51766: LD_ADDR_VAR 0 38
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51878: LD_ADDR_VAR 0 39
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51990: LD_ADDR_VAR 0 40
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52102: LD_ADDR_VAR 0 41
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: NEG
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52452: LD_ADDR_VAR 0 42
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 3
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 3
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 3
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52802: LD_ADDR_VAR 0 43
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 3
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53150: LD_ADDR_VAR 0 44
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: NEG
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 3
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53500: LD_ADDR_VAR 0 45
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 3
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53850: LD_ADDR_VAR 0 46
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 3
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 3
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54198: LD_ADDR_VAR 0 47
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54349: LD_ADDR_VAR 0 48
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54496: LD_ADDR_VAR 0 49
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54640: LD_ADDR_VAR 0 50
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54784: LD_ADDR_VAR 0 51
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54931: LD_ADDR_VAR 0 52
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55082: LD_ADDR_VAR 0 53
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55312: LD_ADDR_VAR 0 54
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55542: LD_ADDR_VAR 0 55
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55772: LD_ADDR_VAR 0 56
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56002: LD_ADDR_VAR 0 57
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56232: LD_ADDR_VAR 0 58
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56462: LD_ADDR_VAR 0 59
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56550: LD_ADDR_VAR 0 60
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56638: LD_ADDR_VAR 0 61
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56726: LD_ADDR_VAR 0 62
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56814: LD_ADDR_VAR 0 63
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56902: LD_ADDR_VAR 0 64
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// end ; 1 :
56990: GO 62887
56992: LD_INT 1
56994: DOUBLE
56995: EQUAL
56996: IFTRUE 57000
56998: GO 59623
57000: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57001: LD_ADDR_VAR 0 11
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57045: LD_ADDR_VAR 0 12
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57086: LD_ADDR_VAR 0 13
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57126: LD_ADDR_VAR 0 14
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57167: LD_ADDR_VAR 0 15
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 3
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: LIST
57210: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57211: LD_ADDR_VAR 0 16
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: NEG
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57257: LD_ADDR_VAR 0 17
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 3
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57301: LD_ADDR_VAR 0 18
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57342: LD_ADDR_VAR 0 19
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57382: LD_ADDR_VAR 0 20
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57423: LD_ADDR_VAR 0 21
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57467: LD_ADDR_VAR 0 22
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57513: LD_ADDR_VAR 0 23
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 3
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57557: LD_ADDR_VAR 0 24
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 4
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57598: LD_ADDR_VAR 0 25
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 4
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57638: LD_ADDR_VAR 0 26
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 4
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57679: LD_ADDR_VAR 0 27
57683: PUSH
57684: LD_INT 3
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 4
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57723: LD_ADDR_VAR 0 28
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: NEG
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57769: LD_ADDR_VAR 0 29
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 4
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 4
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 5
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 5
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 4
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 6
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 6
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 5
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57924: LD_ADDR_VAR 0 30
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 4
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 4
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 5
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 5
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 5
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 6
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 6
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58067: LD_ADDR_VAR 0 31
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 4
58114: PUSH
58115: LD_INT 4
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 5
58144: PUSH
58145: LD_INT 5
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 4
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 6
58164: PUSH
58165: LD_INT 5
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 6
58174: PUSH
58175: LD_INT 6
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 5
58184: PUSH
58185: LD_INT 6
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58206: LD_ADDR_VAR 0 32
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 5
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 5
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 6
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 6
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 5
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58349: LD_ADDR_VAR 0 33
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 4
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 4
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: NEG
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 5
58435: NEG
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 5
58446: NEG
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 5
58458: NEG
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 6
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 6
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58504: LD_ADDR_VAR 0 34
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 3
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: LD_INT 4
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: NEG
58572: PUSH
58573: LD_INT 4
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: LD_INT 5
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 5
58595: NEG
58596: PUSH
58597: LD_INT 4
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 5
58607: NEG
58608: PUSH
58609: LD_INT 5
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 5
58619: NEG
58620: PUSH
58621: LD_INT 6
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 6
58631: NEG
58632: PUSH
58633: LD_INT 5
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 6
58643: NEG
58644: PUSH
58645: LD_INT 6
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58667: LD_ADDR_VAR 0 41
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58711: LD_ADDR_VAR 0 42
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58752: LD_ADDR_VAR 0 43
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: LIST
58791: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58792: LD_ADDR_VAR 0 44
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 3
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58833: LD_ADDR_VAR 0 45
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58877: LD_ADDR_VAR 0 46
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58923: LD_ADDR_VAR 0 47
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58956: LD_ADDR_VAR 0 48
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58987: LD_ADDR_VAR 0 49
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59016: LD_ADDR_VAR 0 50
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59045: LD_ADDR_VAR 0 51
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59076: LD_ADDR_VAR 0 52
59080: PUSH
59081: LD_INT 3
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59109: LD_ADDR_VAR 0 53
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59153: LD_ADDR_VAR 0 54
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 3
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59194: LD_ADDR_VAR 0 55
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59234: LD_ADDR_VAR 0 56
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59275: LD_ADDR_VAR 0 57
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59319: LD_ADDR_VAR 0 58
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 3
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59365: LD_ADDR_VAR 0 59
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59409: LD_ADDR_VAR 0 60
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59450: LD_ADDR_VAR 0 61
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59490: LD_ADDR_VAR 0 62
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59531: LD_ADDR_VAR 0 63
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59575: LD_ADDR_VAR 0 64
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: ST_TO_ADDR
// end ; 2 :
59621: GO 62887
59623: LD_INT 2
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59631
59629: GO 62886
59631: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59632: LD_ADDR_VAR 0 29
59636: PUSH
59637: LD_INT 4
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 5
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 5
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 4
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 4
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: LD_INT 4
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 4
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: LD_INT 4
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: LD_INT 4
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 5
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 5
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 5
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 3
59926: NEG
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 4
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: NEG
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 4
60029: NEG
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 3
60041: NEG
60042: PUSH
60043: LD_INT 4
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 4
60065: NEG
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 5
60077: NEG
60078: PUSH
60079: LD_INT 4
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 5
60089: NEG
60090: PUSH
60091: LD_INT 5
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: LD_INT 5
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 5
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60170: LD_ADDR_VAR 0 30
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: LD_INT 4
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 5
60197: PUSH
60198: LD_INT 4
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: LD_INT 5
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 4
60217: PUSH
60218: LD_INT 5
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 4
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 5
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: LD_INT 5
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 4
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 4
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 4
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 4
60360: NEG
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 4
60371: NEG
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 5
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 5
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 5
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 3
60451: NEG
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 3
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 4
60534: NEG
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 4
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 4
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 5
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 5
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60717: LD_ADDR_VAR 0 31
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 4
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 5
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 5
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 4
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 5
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 3
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 4
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 4
60919: NEG
60920: PUSH
60921: LD_INT 4
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 4
60931: NEG
60932: PUSH
60933: LD_INT 5
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: NEG
60944: PUSH
60945: LD_INT 4
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: NEG
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 5
60979: NEG
60980: PUSH
60981: LD_INT 4
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 5
60991: NEG
60992: PUSH
60993: LD_INT 5
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: LD_INT 5
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 5
61015: NEG
61016: PUSH
61017: LD_INT 3
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 3
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 3
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 3
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 4
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 4
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 4
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 5
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 5
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61267: LD_ADDR_VAR 0 32
61271: PUSH
61272: LD_INT 4
61274: NEG
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 4
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 5
61330: NEG
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 5
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 5
61353: NEG
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: NEG
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 4
61448: NEG
61449: PUSH
61450: LD_INT 4
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 4
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 4
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 4
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 5
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 4
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 3
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 4
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 5
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: LD_INT 5
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 4
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 4
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: LD_INT 4
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 5
61699: PUSH
61700: LD_INT 4
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 5
61709: PUSH
61710: LD_INT 5
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: LD_INT 5
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 4
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 3
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 5
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: LD_INT 5
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61814: LD_ADDR_VAR 0 33
61818: PUSH
61819: LD_INT 4
61821: NEG
61822: PUSH
61823: LD_INT 4
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 4
61833: NEG
61834: PUSH
61835: LD_INT 5
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 4
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 4
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 5
61881: NEG
61882: PUSH
61883: LD_INT 4
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 5
61893: NEG
61894: PUSH
61895: LD_INT 5
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 3
61905: NEG
61906: PUSH
61907: LD_INT 5
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 5
61917: NEG
61918: PUSH
61919: LD_INT 3
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 3
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 4
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 3
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 4
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 4
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 4
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 5
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 5
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 5
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 4
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 4
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: LD_INT 4
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 4
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: LD_INT 4
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 4
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 4
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 5
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 5
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 3
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: LD_INT 5
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62352: LD_ADDR_VAR 0 34
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 4
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 5
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 4
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 3
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 4
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 5
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 3
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: LD_INT 5
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 3
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 4
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 4
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 4
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: LD_INT 4
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 4
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 5
62574: PUSH
62575: LD_INT 4
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 5
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 4
62594: PUSH
62595: LD_INT 5
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: LD_INT 4
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 5
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: LD_INT 5
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 4
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 4
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 4
62737: NEG
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 4
62748: NEG
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 4
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 5
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 5
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 5
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// end ; end ;
62884: GO 62887
62886: POP
// case btype of b_depot , b_warehouse :
62887: LD_VAR 0 1
62891: PUSH
62892: LD_INT 0
62894: DOUBLE
62895: EQUAL
62896: IFTRUE 62906
62898: LD_INT 1
62900: DOUBLE
62901: EQUAL
62902: IFTRUE 62906
62904: GO 63107
62906: POP
// case nation of nation_american :
62907: LD_VAR 0 5
62911: PUSH
62912: LD_INT 1
62914: DOUBLE
62915: EQUAL
62916: IFTRUE 62920
62918: GO 62976
62920: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62921: LD_ADDR_VAR 0 9
62925: PUSH
62926: LD_VAR 0 11
62930: PUSH
62931: LD_VAR 0 12
62935: PUSH
62936: LD_VAR 0 13
62940: PUSH
62941: LD_VAR 0 14
62945: PUSH
62946: LD_VAR 0 15
62950: PUSH
62951: LD_VAR 0 16
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: PUSH
62964: LD_VAR 0 4
62968: PUSH
62969: LD_INT 1
62971: PLUS
62972: ARRAY
62973: ST_TO_ADDR
62974: GO 63105
62976: LD_INT 2
62978: DOUBLE
62979: EQUAL
62980: IFTRUE 62984
62982: GO 63040
62984: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62985: LD_ADDR_VAR 0 9
62989: PUSH
62990: LD_VAR 0 17
62994: PUSH
62995: LD_VAR 0 18
62999: PUSH
63000: LD_VAR 0 19
63004: PUSH
63005: LD_VAR 0 20
63009: PUSH
63010: LD_VAR 0 21
63014: PUSH
63015: LD_VAR 0 22
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: PUSH
63028: LD_VAR 0 4
63032: PUSH
63033: LD_INT 1
63035: PLUS
63036: ARRAY
63037: ST_TO_ADDR
63038: GO 63105
63040: LD_INT 3
63042: DOUBLE
63043: EQUAL
63044: IFTRUE 63048
63046: GO 63104
63048: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63049: LD_ADDR_VAR 0 9
63053: PUSH
63054: LD_VAR 0 23
63058: PUSH
63059: LD_VAR 0 24
63063: PUSH
63064: LD_VAR 0 25
63068: PUSH
63069: LD_VAR 0 26
63073: PUSH
63074: LD_VAR 0 27
63078: PUSH
63079: LD_VAR 0 28
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: PUSH
63092: LD_VAR 0 4
63096: PUSH
63097: LD_INT 1
63099: PLUS
63100: ARRAY
63101: ST_TO_ADDR
63102: GO 63105
63104: POP
63105: GO 63660
63107: LD_INT 2
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63121
63113: LD_INT 3
63115: DOUBLE
63116: EQUAL
63117: IFTRUE 63121
63119: GO 63177
63121: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63122: LD_ADDR_VAR 0 9
63126: PUSH
63127: LD_VAR 0 29
63131: PUSH
63132: LD_VAR 0 30
63136: PUSH
63137: LD_VAR 0 31
63141: PUSH
63142: LD_VAR 0 32
63146: PUSH
63147: LD_VAR 0 33
63151: PUSH
63152: LD_VAR 0 34
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: PUSH
63165: LD_VAR 0 4
63169: PUSH
63170: LD_INT 1
63172: PLUS
63173: ARRAY
63174: ST_TO_ADDR
63175: GO 63660
63177: LD_INT 16
63179: DOUBLE
63180: EQUAL
63181: IFTRUE 63239
63183: LD_INT 17
63185: DOUBLE
63186: EQUAL
63187: IFTRUE 63239
63189: LD_INT 18
63191: DOUBLE
63192: EQUAL
63193: IFTRUE 63239
63195: LD_INT 19
63197: DOUBLE
63198: EQUAL
63199: IFTRUE 63239
63201: LD_INT 22
63203: DOUBLE
63204: EQUAL
63205: IFTRUE 63239
63207: LD_INT 20
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63239
63213: LD_INT 21
63215: DOUBLE
63216: EQUAL
63217: IFTRUE 63239
63219: LD_INT 23
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63239
63225: LD_INT 24
63227: DOUBLE
63228: EQUAL
63229: IFTRUE 63239
63231: LD_INT 25
63233: DOUBLE
63234: EQUAL
63235: IFTRUE 63239
63237: GO 63295
63239: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63240: LD_ADDR_VAR 0 9
63244: PUSH
63245: LD_VAR 0 35
63249: PUSH
63250: LD_VAR 0 36
63254: PUSH
63255: LD_VAR 0 37
63259: PUSH
63260: LD_VAR 0 38
63264: PUSH
63265: LD_VAR 0 39
63269: PUSH
63270: LD_VAR 0 40
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: PUSH
63283: LD_VAR 0 4
63287: PUSH
63288: LD_INT 1
63290: PLUS
63291: ARRAY
63292: ST_TO_ADDR
63293: GO 63660
63295: LD_INT 6
63297: DOUBLE
63298: EQUAL
63299: IFTRUE 63351
63301: LD_INT 7
63303: DOUBLE
63304: EQUAL
63305: IFTRUE 63351
63307: LD_INT 8
63309: DOUBLE
63310: EQUAL
63311: IFTRUE 63351
63313: LD_INT 13
63315: DOUBLE
63316: EQUAL
63317: IFTRUE 63351
63319: LD_INT 12
63321: DOUBLE
63322: EQUAL
63323: IFTRUE 63351
63325: LD_INT 15
63327: DOUBLE
63328: EQUAL
63329: IFTRUE 63351
63331: LD_INT 11
63333: DOUBLE
63334: EQUAL
63335: IFTRUE 63351
63337: LD_INT 14
63339: DOUBLE
63340: EQUAL
63341: IFTRUE 63351
63343: LD_INT 10
63345: DOUBLE
63346: EQUAL
63347: IFTRUE 63351
63349: GO 63407
63351: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63352: LD_ADDR_VAR 0 9
63356: PUSH
63357: LD_VAR 0 41
63361: PUSH
63362: LD_VAR 0 42
63366: PUSH
63367: LD_VAR 0 43
63371: PUSH
63372: LD_VAR 0 44
63376: PUSH
63377: LD_VAR 0 45
63381: PUSH
63382: LD_VAR 0 46
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: PUSH
63395: LD_VAR 0 4
63399: PUSH
63400: LD_INT 1
63402: PLUS
63403: ARRAY
63404: ST_TO_ADDR
63405: GO 63660
63407: LD_INT 36
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63415
63413: GO 63471
63415: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63416: LD_ADDR_VAR 0 9
63420: PUSH
63421: LD_VAR 0 47
63425: PUSH
63426: LD_VAR 0 48
63430: PUSH
63431: LD_VAR 0 49
63435: PUSH
63436: LD_VAR 0 50
63440: PUSH
63441: LD_VAR 0 51
63445: PUSH
63446: LD_VAR 0 52
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: PUSH
63459: LD_VAR 0 4
63463: PUSH
63464: LD_INT 1
63466: PLUS
63467: ARRAY
63468: ST_TO_ADDR
63469: GO 63660
63471: LD_INT 4
63473: DOUBLE
63474: EQUAL
63475: IFTRUE 63497
63477: LD_INT 5
63479: DOUBLE
63480: EQUAL
63481: IFTRUE 63497
63483: LD_INT 34
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63497
63489: LD_INT 37
63491: DOUBLE
63492: EQUAL
63493: IFTRUE 63497
63495: GO 63553
63497: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63498: LD_ADDR_VAR 0 9
63502: PUSH
63503: LD_VAR 0 53
63507: PUSH
63508: LD_VAR 0 54
63512: PUSH
63513: LD_VAR 0 55
63517: PUSH
63518: LD_VAR 0 56
63522: PUSH
63523: LD_VAR 0 57
63527: PUSH
63528: LD_VAR 0 58
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: PUSH
63541: LD_VAR 0 4
63545: PUSH
63546: LD_INT 1
63548: PLUS
63549: ARRAY
63550: ST_TO_ADDR
63551: GO 63660
63553: LD_INT 31
63555: DOUBLE
63556: EQUAL
63557: IFTRUE 63603
63559: LD_INT 32
63561: DOUBLE
63562: EQUAL
63563: IFTRUE 63603
63565: LD_INT 33
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63603
63571: LD_INT 27
63573: DOUBLE
63574: EQUAL
63575: IFTRUE 63603
63577: LD_INT 26
63579: DOUBLE
63580: EQUAL
63581: IFTRUE 63603
63583: LD_INT 28
63585: DOUBLE
63586: EQUAL
63587: IFTRUE 63603
63589: LD_INT 29
63591: DOUBLE
63592: EQUAL
63593: IFTRUE 63603
63595: LD_INT 30
63597: DOUBLE
63598: EQUAL
63599: IFTRUE 63603
63601: GO 63659
63603: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63604: LD_ADDR_VAR 0 9
63608: PUSH
63609: LD_VAR 0 59
63613: PUSH
63614: LD_VAR 0 60
63618: PUSH
63619: LD_VAR 0 61
63623: PUSH
63624: LD_VAR 0 62
63628: PUSH
63629: LD_VAR 0 63
63633: PUSH
63634: LD_VAR 0 64
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: PUSH
63647: LD_VAR 0 4
63651: PUSH
63652: LD_INT 1
63654: PLUS
63655: ARRAY
63656: ST_TO_ADDR
63657: GO 63660
63659: POP
// temp_list2 = [ ] ;
63660: LD_ADDR_VAR 0 10
63664: PUSH
63665: EMPTY
63666: ST_TO_ADDR
// for i in temp_list do
63667: LD_ADDR_VAR 0 8
63671: PUSH
63672: LD_VAR 0 9
63676: PUSH
63677: FOR_IN
63678: IFFALSE 63730
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63680: LD_ADDR_VAR 0 10
63684: PUSH
63685: LD_VAR 0 10
63689: PUSH
63690: LD_VAR 0 8
63694: PUSH
63695: LD_INT 1
63697: ARRAY
63698: PUSH
63699: LD_VAR 0 2
63703: PLUS
63704: PUSH
63705: LD_VAR 0 8
63709: PUSH
63710: LD_INT 2
63712: ARRAY
63713: PUSH
63714: LD_VAR 0 3
63718: PLUS
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: EMPTY
63725: LIST
63726: ADD
63727: ST_TO_ADDR
63728: GO 63677
63730: POP
63731: POP
// result = temp_list2 ;
63732: LD_ADDR_VAR 0 7
63736: PUSH
63737: LD_VAR 0 10
63741: ST_TO_ADDR
// end ;
63742: LD_VAR 0 7
63746: RET
// export function EnemyInRange ( unit , dist ) ; begin
63747: LD_INT 0
63749: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63750: LD_ADDR_VAR 0 3
63754: PUSH
63755: LD_VAR 0 1
63759: PPUSH
63760: CALL_OW 255
63764: PPUSH
63765: LD_VAR 0 1
63769: PPUSH
63770: CALL_OW 250
63774: PPUSH
63775: LD_VAR 0 1
63779: PPUSH
63780: CALL_OW 251
63784: PPUSH
63785: LD_VAR 0 2
63789: PPUSH
63790: CALL 37143 0 4
63794: PUSH
63795: LD_INT 4
63797: ARRAY
63798: ST_TO_ADDR
// end ;
63799: LD_VAR 0 3
63803: RET
// export function PlayerSeeMe ( unit ) ; begin
63804: LD_INT 0
63806: PPUSH
// result := See ( your_side , unit ) ;
63807: LD_ADDR_VAR 0 2
63811: PUSH
63812: LD_OWVAR 2
63816: PPUSH
63817: LD_VAR 0 1
63821: PPUSH
63822: CALL_OW 292
63826: ST_TO_ADDR
// end ;
63827: LD_VAR 0 2
63831: RET
// export function ReverseDir ( unit ) ; begin
63832: LD_INT 0
63834: PPUSH
// if not unit then
63835: LD_VAR 0 1
63839: NOT
63840: IFFALSE 63844
// exit ;
63842: GO 63867
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63844: LD_ADDR_VAR 0 2
63848: PUSH
63849: LD_VAR 0 1
63853: PPUSH
63854: CALL_OW 254
63858: PUSH
63859: LD_INT 3
63861: PLUS
63862: PUSH
63863: LD_INT 6
63865: MOD
63866: ST_TO_ADDR
// end ;
63867: LD_VAR 0 2
63871: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63872: LD_INT 0
63874: PPUSH
63875: PPUSH
63876: PPUSH
63877: PPUSH
63878: PPUSH
// if not hexes then
63879: LD_VAR 0 2
63883: NOT
63884: IFFALSE 63888
// exit ;
63886: GO 64036
// dist := 9999 ;
63888: LD_ADDR_VAR 0 5
63892: PUSH
63893: LD_INT 9999
63895: ST_TO_ADDR
// for i = 1 to hexes do
63896: LD_ADDR_VAR 0 4
63900: PUSH
63901: DOUBLE
63902: LD_INT 1
63904: DEC
63905: ST_TO_ADDR
63906: LD_VAR 0 2
63910: PUSH
63911: FOR_TO
63912: IFFALSE 64024
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63914: LD_VAR 0 1
63918: PPUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_VAR 0 4
63928: ARRAY
63929: PUSH
63930: LD_INT 1
63932: ARRAY
63933: PPUSH
63934: LD_VAR 0 2
63938: PUSH
63939: LD_VAR 0 4
63943: ARRAY
63944: PUSH
63945: LD_INT 2
63947: ARRAY
63948: PPUSH
63949: CALL_OW 297
63953: PUSH
63954: LD_VAR 0 5
63958: LESS
63959: IFFALSE 64022
// begin hex := hexes [ i ] ;
63961: LD_ADDR_VAR 0 7
63965: PUSH
63966: LD_VAR 0 2
63970: PUSH
63971: LD_VAR 0 4
63975: ARRAY
63976: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63977: LD_ADDR_VAR 0 5
63981: PUSH
63982: LD_VAR 0 1
63986: PPUSH
63987: LD_VAR 0 2
63991: PUSH
63992: LD_VAR 0 4
63996: ARRAY
63997: PUSH
63998: LD_INT 1
64000: ARRAY
64001: PPUSH
64002: LD_VAR 0 2
64006: PUSH
64007: LD_VAR 0 4
64011: ARRAY
64012: PUSH
64013: LD_INT 2
64015: ARRAY
64016: PPUSH
64017: CALL_OW 297
64021: ST_TO_ADDR
// end ; end ;
64022: GO 63911
64024: POP
64025: POP
// result := hex ;
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: LD_VAR 0 7
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 3
64040: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64041: LD_INT 0
64043: PPUSH
64044: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64045: LD_VAR 0 1
64049: NOT
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_INT 21
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 23
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PPUSH
64080: CALL_OW 69
64084: IN
64085: NOT
64086: OR
64087: IFFALSE 64091
// exit ;
64089: GO 64138
// for i = 1 to 3 do
64091: LD_ADDR_VAR 0 3
64095: PUSH
64096: DOUBLE
64097: LD_INT 1
64099: DEC
64100: ST_TO_ADDR
64101: LD_INT 3
64103: PUSH
64104: FOR_TO
64105: IFFALSE 64136
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64107: LD_VAR 0 1
64111: PPUSH
64112: CALL_OW 250
64116: PPUSH
64117: LD_VAR 0 1
64121: PPUSH
64122: CALL_OW 251
64126: PPUSH
64127: LD_INT 1
64129: PPUSH
64130: CALL_OW 453
64134: GO 64104
64136: POP
64137: POP
// end ;
64138: LD_VAR 0 2
64142: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64143: LD_INT 0
64145: PPUSH
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
64150: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64151: LD_VAR 0 1
64155: NOT
64156: PUSH
64157: LD_VAR 0 2
64161: NOT
64162: OR
64163: PUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 314
64173: OR
64174: IFFALSE 64178
// exit ;
64176: GO 64619
// x := GetX ( enemy_unit ) ;
64178: LD_ADDR_VAR 0 7
64182: PUSH
64183: LD_VAR 0 2
64187: PPUSH
64188: CALL_OW 250
64192: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64193: LD_ADDR_VAR 0 8
64197: PUSH
64198: LD_VAR 0 2
64202: PPUSH
64203: CALL_OW 251
64207: ST_TO_ADDR
// if not x or not y then
64208: LD_VAR 0 7
64212: NOT
64213: PUSH
64214: LD_VAR 0 8
64218: NOT
64219: OR
64220: IFFALSE 64224
// exit ;
64222: GO 64619
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64224: LD_ADDR_VAR 0 6
64228: PUSH
64229: LD_VAR 0 7
64233: PPUSH
64234: LD_INT 0
64236: PPUSH
64237: LD_INT 4
64239: PPUSH
64240: CALL_OW 272
64244: PUSH
64245: LD_VAR 0 8
64249: PPUSH
64250: LD_INT 0
64252: PPUSH
64253: LD_INT 4
64255: PPUSH
64256: CALL_OW 273
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_VAR 0 7
64269: PPUSH
64270: LD_INT 1
64272: PPUSH
64273: LD_INT 4
64275: PPUSH
64276: CALL_OW 272
64280: PUSH
64281: LD_VAR 0 8
64285: PPUSH
64286: LD_INT 1
64288: PPUSH
64289: LD_INT 4
64291: PPUSH
64292: CALL_OW 273
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_VAR 0 7
64305: PPUSH
64306: LD_INT 2
64308: PPUSH
64309: LD_INT 4
64311: PPUSH
64312: CALL_OW 272
64316: PUSH
64317: LD_VAR 0 8
64321: PPUSH
64322: LD_INT 2
64324: PPUSH
64325: LD_INT 4
64327: PPUSH
64328: CALL_OW 273
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_VAR 0 7
64341: PPUSH
64342: LD_INT 3
64344: PPUSH
64345: LD_INT 4
64347: PPUSH
64348: CALL_OW 272
64352: PUSH
64353: LD_VAR 0 8
64357: PPUSH
64358: LD_INT 3
64360: PPUSH
64361: LD_INT 4
64363: PPUSH
64364: CALL_OW 273
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_VAR 0 7
64377: PPUSH
64378: LD_INT 4
64380: PPUSH
64381: LD_INT 4
64383: PPUSH
64384: CALL_OW 272
64388: PUSH
64389: LD_VAR 0 8
64393: PPUSH
64394: LD_INT 4
64396: PPUSH
64397: LD_INT 4
64399: PPUSH
64400: CALL_OW 273
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_VAR 0 7
64413: PPUSH
64414: LD_INT 5
64416: PPUSH
64417: LD_INT 4
64419: PPUSH
64420: CALL_OW 272
64424: PUSH
64425: LD_VAR 0 8
64429: PPUSH
64430: LD_INT 5
64432: PPUSH
64433: LD_INT 4
64435: PPUSH
64436: CALL_OW 273
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// for i = tmp downto 1 do
64453: LD_ADDR_VAR 0 4
64457: PUSH
64458: DOUBLE
64459: LD_VAR 0 6
64463: INC
64464: ST_TO_ADDR
64465: LD_INT 1
64467: PUSH
64468: FOR_DOWNTO
64469: IFFALSE 64570
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64471: LD_VAR 0 6
64475: PUSH
64476: LD_VAR 0 4
64480: ARRAY
64481: PUSH
64482: LD_INT 1
64484: ARRAY
64485: PPUSH
64486: LD_VAR 0 6
64490: PUSH
64491: LD_VAR 0 4
64495: ARRAY
64496: PUSH
64497: LD_INT 2
64499: ARRAY
64500: PPUSH
64501: CALL_OW 488
64505: NOT
64506: PUSH
64507: LD_VAR 0 6
64511: PUSH
64512: LD_VAR 0 4
64516: ARRAY
64517: PUSH
64518: LD_INT 1
64520: ARRAY
64521: PPUSH
64522: LD_VAR 0 6
64526: PUSH
64527: LD_VAR 0 4
64531: ARRAY
64532: PUSH
64533: LD_INT 2
64535: ARRAY
64536: PPUSH
64537: CALL_OW 428
64541: PUSH
64542: LD_INT 0
64544: NONEQUAL
64545: OR
64546: IFFALSE 64568
// tmp := Delete ( tmp , i ) ;
64548: LD_ADDR_VAR 0 6
64552: PUSH
64553: LD_VAR 0 6
64557: PPUSH
64558: LD_VAR 0 4
64562: PPUSH
64563: CALL_OW 3
64567: ST_TO_ADDR
64568: GO 64468
64570: POP
64571: POP
// j := GetClosestHex ( unit , tmp ) ;
64572: LD_ADDR_VAR 0 5
64576: PUSH
64577: LD_VAR 0 1
64581: PPUSH
64582: LD_VAR 0 6
64586: PPUSH
64587: CALL 63872 0 2
64591: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64592: LD_VAR 0 1
64596: PPUSH
64597: LD_VAR 0 5
64601: PUSH
64602: LD_INT 1
64604: ARRAY
64605: PPUSH
64606: LD_VAR 0 5
64610: PUSH
64611: LD_INT 2
64613: ARRAY
64614: PPUSH
64615: CALL_OW 111
// end ;
64619: LD_VAR 0 3
64623: RET
// export function PrepareApemanSoldier ( ) ; begin
64624: LD_INT 0
64626: PPUSH
// uc_nation := 0 ;
64627: LD_ADDR_OWVAR 21
64631: PUSH
64632: LD_INT 0
64634: ST_TO_ADDR
// hc_sex := sex_male ;
64635: LD_ADDR_OWVAR 27
64639: PUSH
64640: LD_INT 1
64642: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64643: LD_ADDR_OWVAR 28
64647: PUSH
64648: LD_INT 15
64650: ST_TO_ADDR
// hc_gallery :=  ;
64651: LD_ADDR_OWVAR 33
64655: PUSH
64656: LD_STRING 
64658: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64659: LD_ADDR_OWVAR 31
64663: PUSH
64664: LD_INT 0
64666: PPUSH
64667: LD_INT 3
64669: PPUSH
64670: CALL_OW 12
64674: PUSH
64675: LD_INT 0
64677: PPUSH
64678: LD_INT 3
64680: PPUSH
64681: CALL_OW 12
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: ST_TO_ADDR
// end ;
64698: LD_VAR 0 1
64702: RET
// export function PrepareApemanEngineer ( ) ; begin
64703: LD_INT 0
64705: PPUSH
// uc_nation := 0 ;
64706: LD_ADDR_OWVAR 21
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// hc_sex := sex_male ;
64714: LD_ADDR_OWVAR 27
64718: PUSH
64719: LD_INT 1
64721: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64722: LD_ADDR_OWVAR 28
64726: PUSH
64727: LD_INT 16
64729: ST_TO_ADDR
// hc_gallery :=  ;
64730: LD_ADDR_OWVAR 33
64734: PUSH
64735: LD_STRING 
64737: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64738: LD_ADDR_OWVAR 31
64742: PUSH
64743: LD_INT 0
64745: PPUSH
64746: LD_INT 3
64748: PPUSH
64749: CALL_OW 12
64753: PUSH
64754: LD_INT 0
64756: PPUSH
64757: LD_INT 3
64759: PPUSH
64760: CALL_OW 12
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// end ;
64777: LD_VAR 0 1
64781: RET
// export function PrepareApeman ( agressivity ) ; begin
64782: LD_INT 0
64784: PPUSH
// uc_side := 0 ;
64785: LD_ADDR_OWVAR 20
64789: PUSH
64790: LD_INT 0
64792: ST_TO_ADDR
// uc_nation := 0 ;
64793: LD_ADDR_OWVAR 21
64797: PUSH
64798: LD_INT 0
64800: ST_TO_ADDR
// hc_sex := sex_male ;
64801: LD_ADDR_OWVAR 27
64805: PUSH
64806: LD_INT 1
64808: ST_TO_ADDR
// hc_class := class_apeman ;
64809: LD_ADDR_OWVAR 28
64813: PUSH
64814: LD_INT 12
64816: ST_TO_ADDR
// hc_gallery :=  ;
64817: LD_ADDR_OWVAR 33
64821: PUSH
64822: LD_STRING 
64824: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64825: LD_ADDR_OWVAR 35
64829: PUSH
64830: LD_VAR 0 1
64834: NEG
64835: PPUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: CALL_OW 12
64845: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64846: LD_ADDR_OWVAR 31
64850: PUSH
64851: LD_INT 0
64853: PPUSH
64854: LD_INT 3
64856: PPUSH
64857: CALL_OW 12
64861: PUSH
64862: LD_INT 0
64864: PPUSH
64865: LD_INT 3
64867: PPUSH
64868: CALL_OW 12
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// end ;
64885: LD_VAR 0 2
64889: RET
// export function PrepareTiger ( agressivity ) ; begin
64890: LD_INT 0
64892: PPUSH
// uc_side := 0 ;
64893: LD_ADDR_OWVAR 20
64897: PUSH
64898: LD_INT 0
64900: ST_TO_ADDR
// uc_nation := 0 ;
64901: LD_ADDR_OWVAR 21
64905: PUSH
64906: LD_INT 0
64908: ST_TO_ADDR
// hc_class := class_tiger ;
64909: LD_ADDR_OWVAR 28
64913: PUSH
64914: LD_INT 14
64916: ST_TO_ADDR
// hc_gallery :=  ;
64917: LD_ADDR_OWVAR 33
64921: PUSH
64922: LD_STRING 
64924: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64925: LD_ADDR_OWVAR 35
64929: PUSH
64930: LD_VAR 0 1
64934: NEG
64935: PPUSH
64936: LD_VAR 0 1
64940: PPUSH
64941: CALL_OW 12
64945: ST_TO_ADDR
// end ;
64946: LD_VAR 0 2
64950: RET
// export function PrepareEnchidna ( ) ; begin
64951: LD_INT 0
64953: PPUSH
// uc_side := 0 ;
64954: LD_ADDR_OWVAR 20
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// uc_nation := 0 ;
64962: LD_ADDR_OWVAR 21
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
// hc_class := class_baggie ;
64970: LD_ADDR_OWVAR 28
64974: PUSH
64975: LD_INT 13
64977: ST_TO_ADDR
// hc_gallery :=  ;
64978: LD_ADDR_OWVAR 33
64982: PUSH
64983: LD_STRING 
64985: ST_TO_ADDR
// end ;
64986: LD_VAR 0 1
64990: RET
// export function PrepareFrog ( ) ; begin
64991: LD_INT 0
64993: PPUSH
// uc_side := 0 ;
64994: LD_ADDR_OWVAR 20
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// uc_nation := 0 ;
65002: LD_ADDR_OWVAR 21
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// hc_class := class_frog ;
65010: LD_ADDR_OWVAR 28
65014: PUSH
65015: LD_INT 19
65017: ST_TO_ADDR
// hc_gallery :=  ;
65018: LD_ADDR_OWVAR 33
65022: PUSH
65023: LD_STRING 
65025: ST_TO_ADDR
// end ;
65026: LD_VAR 0 1
65030: RET
// export function PrepareFish ( ) ; begin
65031: LD_INT 0
65033: PPUSH
// uc_side := 0 ;
65034: LD_ADDR_OWVAR 20
65038: PUSH
65039: LD_INT 0
65041: ST_TO_ADDR
// uc_nation := 0 ;
65042: LD_ADDR_OWVAR 21
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
// hc_class := class_fish ;
65050: LD_ADDR_OWVAR 28
65054: PUSH
65055: LD_INT 20
65057: ST_TO_ADDR
// hc_gallery :=  ;
65058: LD_ADDR_OWVAR 33
65062: PUSH
65063: LD_STRING 
65065: ST_TO_ADDR
// end ;
65066: LD_VAR 0 1
65070: RET
// export function PrepareBird ( ) ; begin
65071: LD_INT 0
65073: PPUSH
// uc_side := 0 ;
65074: LD_ADDR_OWVAR 20
65078: PUSH
65079: LD_INT 0
65081: ST_TO_ADDR
// uc_nation := 0 ;
65082: LD_ADDR_OWVAR 21
65086: PUSH
65087: LD_INT 0
65089: ST_TO_ADDR
// hc_class := class_phororhacos ;
65090: LD_ADDR_OWVAR 28
65094: PUSH
65095: LD_INT 18
65097: ST_TO_ADDR
// hc_gallery :=  ;
65098: LD_ADDR_OWVAR 33
65102: PUSH
65103: LD_STRING 
65105: ST_TO_ADDR
// end ;
65106: LD_VAR 0 1
65110: RET
// export function PrepareHorse ( ) ; begin
65111: LD_INT 0
65113: PPUSH
// uc_side := 0 ;
65114: LD_ADDR_OWVAR 20
65118: PUSH
65119: LD_INT 0
65121: ST_TO_ADDR
// uc_nation := 0 ;
65122: LD_ADDR_OWVAR 21
65126: PUSH
65127: LD_INT 0
65129: ST_TO_ADDR
// hc_class := class_horse ;
65130: LD_ADDR_OWVAR 28
65134: PUSH
65135: LD_INT 21
65137: ST_TO_ADDR
// hc_gallery :=  ;
65138: LD_ADDR_OWVAR 33
65142: PUSH
65143: LD_STRING 
65145: ST_TO_ADDR
// end ;
65146: LD_VAR 0 1
65150: RET
// export function PrepareMastodont ( ) ; begin
65151: LD_INT 0
65153: PPUSH
// uc_side := 0 ;
65154: LD_ADDR_OWVAR 20
65158: PUSH
65159: LD_INT 0
65161: ST_TO_ADDR
// uc_nation := 0 ;
65162: LD_ADDR_OWVAR 21
65166: PUSH
65167: LD_INT 0
65169: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65170: LD_ADDR_OWVAR 37
65174: PUSH
65175: LD_INT 31
65177: ST_TO_ADDR
// vc_control := control_rider ;
65178: LD_ADDR_OWVAR 38
65182: PUSH
65183: LD_INT 4
65185: ST_TO_ADDR
// end ;
65186: LD_VAR 0 1
65190: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65191: LD_INT 0
65193: PPUSH
65194: PPUSH
65195: PPUSH
// uc_side = 0 ;
65196: LD_ADDR_OWVAR 20
65200: PUSH
65201: LD_INT 0
65203: ST_TO_ADDR
// uc_nation = 0 ;
65204: LD_ADDR_OWVAR 21
65208: PUSH
65209: LD_INT 0
65211: ST_TO_ADDR
// InitHc_All ( ) ;
65212: CALL_OW 584
// InitVc ;
65216: CALL_OW 20
// if mastodonts then
65220: LD_VAR 0 6
65224: IFFALSE 65291
// for i = 1 to mastodonts do
65226: LD_ADDR_VAR 0 11
65230: PUSH
65231: DOUBLE
65232: LD_INT 1
65234: DEC
65235: ST_TO_ADDR
65236: LD_VAR 0 6
65240: PUSH
65241: FOR_TO
65242: IFFALSE 65289
// begin vc_chassis := 31 ;
65244: LD_ADDR_OWVAR 37
65248: PUSH
65249: LD_INT 31
65251: ST_TO_ADDR
// vc_control := control_rider ;
65252: LD_ADDR_OWVAR 38
65256: PUSH
65257: LD_INT 4
65259: ST_TO_ADDR
// animal := CreateVehicle ;
65260: LD_ADDR_VAR 0 12
65264: PUSH
65265: CALL_OW 45
65269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65270: LD_VAR 0 12
65274: PPUSH
65275: LD_VAR 0 8
65279: PPUSH
65280: LD_INT 0
65282: PPUSH
65283: CALL 67426 0 3
// end ;
65287: GO 65241
65289: POP
65290: POP
// if horses then
65291: LD_VAR 0 5
65295: IFFALSE 65362
// for i = 1 to horses do
65297: LD_ADDR_VAR 0 11
65301: PUSH
65302: DOUBLE
65303: LD_INT 1
65305: DEC
65306: ST_TO_ADDR
65307: LD_VAR 0 5
65311: PUSH
65312: FOR_TO
65313: IFFALSE 65360
// begin hc_class := 21 ;
65315: LD_ADDR_OWVAR 28
65319: PUSH
65320: LD_INT 21
65322: ST_TO_ADDR
// hc_gallery :=  ;
65323: LD_ADDR_OWVAR 33
65327: PUSH
65328: LD_STRING 
65330: ST_TO_ADDR
// animal := CreateHuman ;
65331: LD_ADDR_VAR 0 12
65335: PUSH
65336: CALL_OW 44
65340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65341: LD_VAR 0 12
65345: PPUSH
65346: LD_VAR 0 8
65350: PPUSH
65351: LD_INT 0
65353: PPUSH
65354: CALL 67426 0 3
// end ;
65358: GO 65312
65360: POP
65361: POP
// if birds then
65362: LD_VAR 0 1
65366: IFFALSE 65433
// for i = 1 to birds do
65368: LD_ADDR_VAR 0 11
65372: PUSH
65373: DOUBLE
65374: LD_INT 1
65376: DEC
65377: ST_TO_ADDR
65378: LD_VAR 0 1
65382: PUSH
65383: FOR_TO
65384: IFFALSE 65431
// begin hc_class = 18 ;
65386: LD_ADDR_OWVAR 28
65390: PUSH
65391: LD_INT 18
65393: ST_TO_ADDR
// hc_gallery =  ;
65394: LD_ADDR_OWVAR 33
65398: PUSH
65399: LD_STRING 
65401: ST_TO_ADDR
// animal := CreateHuman ;
65402: LD_ADDR_VAR 0 12
65406: PUSH
65407: CALL_OW 44
65411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65412: LD_VAR 0 12
65416: PPUSH
65417: LD_VAR 0 8
65421: PPUSH
65422: LD_INT 0
65424: PPUSH
65425: CALL 67426 0 3
// end ;
65429: GO 65383
65431: POP
65432: POP
// if tigers then
65433: LD_VAR 0 2
65437: IFFALSE 65521
// for i = 1 to tigers do
65439: LD_ADDR_VAR 0 11
65443: PUSH
65444: DOUBLE
65445: LD_INT 1
65447: DEC
65448: ST_TO_ADDR
65449: LD_VAR 0 2
65453: PUSH
65454: FOR_TO
65455: IFFALSE 65519
// begin hc_class = class_tiger ;
65457: LD_ADDR_OWVAR 28
65461: PUSH
65462: LD_INT 14
65464: ST_TO_ADDR
// hc_gallery =  ;
65465: LD_ADDR_OWVAR 33
65469: PUSH
65470: LD_STRING 
65472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65473: LD_ADDR_OWVAR 35
65477: PUSH
65478: LD_INT 7
65480: NEG
65481: PPUSH
65482: LD_INT 7
65484: PPUSH
65485: CALL_OW 12
65489: ST_TO_ADDR
// animal := CreateHuman ;
65490: LD_ADDR_VAR 0 12
65494: PUSH
65495: CALL_OW 44
65499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65500: LD_VAR 0 12
65504: PPUSH
65505: LD_VAR 0 8
65509: PPUSH
65510: LD_INT 0
65512: PPUSH
65513: CALL 67426 0 3
// end ;
65517: GO 65454
65519: POP
65520: POP
// if apemans then
65521: LD_VAR 0 3
65525: IFFALSE 65648
// for i = 1 to apemans do
65527: LD_ADDR_VAR 0 11
65531: PUSH
65532: DOUBLE
65533: LD_INT 1
65535: DEC
65536: ST_TO_ADDR
65537: LD_VAR 0 3
65541: PUSH
65542: FOR_TO
65543: IFFALSE 65646
// begin hc_class = class_apeman ;
65545: LD_ADDR_OWVAR 28
65549: PUSH
65550: LD_INT 12
65552: ST_TO_ADDR
// hc_gallery =  ;
65553: LD_ADDR_OWVAR 33
65557: PUSH
65558: LD_STRING 
65560: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65561: LD_ADDR_OWVAR 35
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PPUSH
65570: LD_INT 2
65572: PPUSH
65573: CALL_OW 12
65577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65578: LD_ADDR_OWVAR 31
65582: PUSH
65583: LD_INT 1
65585: PPUSH
65586: LD_INT 3
65588: PPUSH
65589: CALL_OW 12
65593: PUSH
65594: LD_INT 1
65596: PPUSH
65597: LD_INT 3
65599: PPUSH
65600: CALL_OW 12
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// animal := CreateHuman ;
65617: LD_ADDR_VAR 0 12
65621: PUSH
65622: CALL_OW 44
65626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65627: LD_VAR 0 12
65631: PPUSH
65632: LD_VAR 0 8
65636: PPUSH
65637: LD_INT 0
65639: PPUSH
65640: CALL 67426 0 3
// end ;
65644: GO 65542
65646: POP
65647: POP
// if enchidnas then
65648: LD_VAR 0 4
65652: IFFALSE 65719
// for i = 1 to enchidnas do
65654: LD_ADDR_VAR 0 11
65658: PUSH
65659: DOUBLE
65660: LD_INT 1
65662: DEC
65663: ST_TO_ADDR
65664: LD_VAR 0 4
65668: PUSH
65669: FOR_TO
65670: IFFALSE 65717
// begin hc_class = 13 ;
65672: LD_ADDR_OWVAR 28
65676: PUSH
65677: LD_INT 13
65679: ST_TO_ADDR
// hc_gallery =  ;
65680: LD_ADDR_OWVAR 33
65684: PUSH
65685: LD_STRING 
65687: ST_TO_ADDR
// animal := CreateHuman ;
65688: LD_ADDR_VAR 0 12
65692: PUSH
65693: CALL_OW 44
65697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65698: LD_VAR 0 12
65702: PPUSH
65703: LD_VAR 0 8
65707: PPUSH
65708: LD_INT 0
65710: PPUSH
65711: CALL 67426 0 3
// end ;
65715: GO 65669
65717: POP
65718: POP
// if fishes then
65719: LD_VAR 0 7
65723: IFFALSE 65790
// for i = 1 to fishes do
65725: LD_ADDR_VAR 0 11
65729: PUSH
65730: DOUBLE
65731: LD_INT 1
65733: DEC
65734: ST_TO_ADDR
65735: LD_VAR 0 7
65739: PUSH
65740: FOR_TO
65741: IFFALSE 65788
// begin hc_class = 20 ;
65743: LD_ADDR_OWVAR 28
65747: PUSH
65748: LD_INT 20
65750: ST_TO_ADDR
// hc_gallery =  ;
65751: LD_ADDR_OWVAR 33
65755: PUSH
65756: LD_STRING 
65758: ST_TO_ADDR
// animal := CreateHuman ;
65759: LD_ADDR_VAR 0 12
65763: PUSH
65764: CALL_OW 44
65768: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65769: LD_VAR 0 12
65773: PPUSH
65774: LD_VAR 0 9
65778: PPUSH
65779: LD_INT 0
65781: PPUSH
65782: CALL 67426 0 3
// end ;
65786: GO 65740
65788: POP
65789: POP
// end ;
65790: LD_VAR 0 10
65794: RET
// export function WantHeal ( sci , unit ) ; begin
65795: LD_INT 0
65797: PPUSH
// if GetTaskList ( sci ) > 0 then
65798: LD_VAR 0 1
65802: PPUSH
65803: CALL_OW 437
65807: PUSH
65808: LD_INT 0
65810: GREATER
65811: IFFALSE 65881
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 437
65822: PUSH
65823: LD_INT 1
65825: ARRAY
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_STRING l
65833: EQUAL
65834: PUSH
65835: LD_VAR 0 1
65839: PPUSH
65840: CALL_OW 437
65844: PUSH
65845: LD_INT 1
65847: ARRAY
65848: PUSH
65849: LD_INT 4
65851: ARRAY
65852: PUSH
65853: LD_VAR 0 2
65857: EQUAL
65858: AND
65859: IFFALSE 65871
// result := true else
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_INT 1
65868: ST_TO_ADDR
65869: GO 65879
// result := false ;
65871: LD_ADDR_VAR 0 3
65875: PUSH
65876: LD_INT 0
65878: ST_TO_ADDR
// end else
65879: GO 65889
// result := false ;
65881: LD_ADDR_VAR 0 3
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// end ;
65889: LD_VAR 0 3
65893: RET
// export function HealTarget ( sci ) ; begin
65894: LD_INT 0
65896: PPUSH
// if not sci then
65897: LD_VAR 0 1
65901: NOT
65902: IFFALSE 65906
// exit ;
65904: GO 65971
// result := 0 ;
65906: LD_ADDR_VAR 0 2
65910: PUSH
65911: LD_INT 0
65913: ST_TO_ADDR
// if GetTaskList ( sci ) then
65914: LD_VAR 0 1
65918: PPUSH
65919: CALL_OW 437
65923: IFFALSE 65971
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65925: LD_VAR 0 1
65929: PPUSH
65930: CALL_OW 437
65934: PUSH
65935: LD_INT 1
65937: ARRAY
65938: PUSH
65939: LD_INT 1
65941: ARRAY
65942: PUSH
65943: LD_STRING l
65945: EQUAL
65946: IFFALSE 65971
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65948: LD_ADDR_VAR 0 2
65952: PUSH
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 437
65962: PUSH
65963: LD_INT 1
65965: ARRAY
65966: PUSH
65967: LD_INT 4
65969: ARRAY
65970: ST_TO_ADDR
// end ;
65971: LD_VAR 0 2
65975: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65976: LD_INT 0
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
// if not base_units then
65982: LD_VAR 0 1
65986: NOT
65987: IFFALSE 65991
// exit ;
65989: GO 66078
// result := false ;
65991: LD_ADDR_VAR 0 2
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65999: LD_ADDR_VAR 0 5
66003: PUSH
66004: LD_VAR 0 1
66008: PPUSH
66009: LD_INT 21
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PPUSH
66019: CALL_OW 72
66023: ST_TO_ADDR
// if not tmp then
66024: LD_VAR 0 5
66028: NOT
66029: IFFALSE 66033
// exit ;
66031: GO 66078
// for i in tmp do
66033: LD_ADDR_VAR 0 3
66037: PUSH
66038: LD_VAR 0 5
66042: PUSH
66043: FOR_IN
66044: IFFALSE 66076
// begin result := EnemyInRange ( i , 22 ) ;
66046: LD_ADDR_VAR 0 2
66050: PUSH
66051: LD_VAR 0 3
66055: PPUSH
66056: LD_INT 22
66058: PPUSH
66059: CALL 63747 0 2
66063: ST_TO_ADDR
// if result then
66064: LD_VAR 0 2
66068: IFFALSE 66074
// exit ;
66070: POP
66071: POP
66072: GO 66078
// end ;
66074: GO 66043
66076: POP
66077: POP
// end ;
66078: LD_VAR 0 2
66082: RET
// export function FilterByTag ( units , tag ) ; begin
66083: LD_INT 0
66085: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66086: LD_ADDR_VAR 0 3
66090: PUSH
66091: LD_VAR 0 1
66095: PPUSH
66096: LD_INT 120
66098: PUSH
66099: LD_VAR 0 2
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PPUSH
66108: CALL_OW 72
66112: ST_TO_ADDR
// end ;
66113: LD_VAR 0 3
66117: RET
// export function IsDriver ( un ) ; begin
66118: LD_INT 0
66120: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66121: LD_ADDR_VAR 0 2
66125: PUSH
66126: LD_VAR 0 1
66130: PUSH
66131: LD_INT 55
66133: PUSH
66134: EMPTY
66135: LIST
66136: PPUSH
66137: CALL_OW 69
66141: IN
66142: ST_TO_ADDR
// end ;
66143: LD_VAR 0 2
66147: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66148: LD_INT 0
66150: PPUSH
66151: PPUSH
// list := [ ] ;
66152: LD_ADDR_VAR 0 5
66156: PUSH
66157: EMPTY
66158: ST_TO_ADDR
// case d of 0 :
66159: LD_VAR 0 3
66163: PUSH
66164: LD_INT 0
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66305
66172: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: LD_VAR 0 1
66182: PUSH
66183: LD_INT 4
66185: MINUS
66186: PUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_INT 4
66194: MINUS
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: PUSH
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 3
66211: MINUS
66212: PUSH
66213: LD_VAR 0 2
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: PUSH
66226: LD_VAR 0 1
66230: PUSH
66231: LD_INT 4
66233: PLUS
66234: PUSH
66235: LD_VAR 0 2
66239: PUSH
66240: LD_INT 4
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 3
66255: PLUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 3
66264: PLUS
66265: PUSH
66266: LD_INT 5
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: PUSH
66274: LD_VAR 0 1
66278: PUSH
66279: LD_VAR 0 2
66283: PUSH
66284: LD_INT 4
66286: PLUS
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: ST_TO_ADDR
// end ; 1 :
66303: GO 67003
66305: LD_INT 1
66307: DOUBLE
66308: EQUAL
66309: IFTRUE 66313
66311: GO 66446
66313: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66314: LD_ADDR_VAR 0 5
66318: PUSH
66319: LD_VAR 0 1
66323: PUSH
66324: LD_VAR 0 2
66328: PUSH
66329: LD_INT 4
66331: MINUS
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: PUSH
66341: LD_VAR 0 1
66345: PUSH
66346: LD_INT 3
66348: MINUS
66349: PUSH
66350: LD_VAR 0 2
66354: PUSH
66355: LD_INT 3
66357: MINUS
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: LD_VAR 0 1
66371: PUSH
66372: LD_INT 4
66374: MINUS
66375: PUSH
66376: LD_VAR 0 2
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_VAR 0 2
66398: PUSH
66399: LD_INT 3
66401: PLUS
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 4
66418: PLUS
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 4
66427: PLUS
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// end ; 2 :
66444: GO 67003
66446: LD_INT 2
66448: DOUBLE
66449: EQUAL
66450: IFTRUE 66454
66452: GO 66583
66454: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66455: LD_ADDR_VAR 0 5
66459: PUSH
66460: LD_VAR 0 1
66464: PUSH
66465: LD_VAR 0 2
66469: PUSH
66470: LD_INT 3
66472: MINUS
66473: PUSH
66474: LD_INT 3
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: PUSH
66482: LD_VAR 0 1
66486: PUSH
66487: LD_INT 4
66489: PLUS
66490: PUSH
66491: LD_VAR 0 2
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: LD_VAR 0 1
66508: PUSH
66509: LD_VAR 0 2
66513: PUSH
66514: LD_INT 4
66516: PLUS
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: PUSH
66526: LD_VAR 0 1
66530: PUSH
66531: LD_INT 3
66533: MINUS
66534: PUSH
66535: LD_VAR 0 2
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: PUSH
66548: LD_VAR 0 1
66552: PUSH
66553: LD_INT 4
66555: MINUS
66556: PUSH
66557: LD_VAR 0 2
66561: PUSH
66562: LD_INT 4
66564: MINUS
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: ST_TO_ADDR
// end ; 3 :
66581: GO 67003
66583: LD_INT 3
66585: DOUBLE
66586: EQUAL
66587: IFTRUE 66591
66589: GO 66724
66591: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66592: LD_ADDR_VAR 0 5
66596: PUSH
66597: LD_VAR 0 1
66601: PUSH
66602: LD_INT 3
66604: PLUS
66605: PUSH
66606: LD_VAR 0 2
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: LD_VAR 0 1
66623: PUSH
66624: LD_INT 4
66626: PLUS
66627: PUSH
66628: LD_VAR 0 2
66632: PUSH
66633: LD_INT 4
66635: PLUS
66636: PUSH
66637: LD_INT 5
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: LD_VAR 0 1
66649: PUSH
66650: LD_INT 4
66652: MINUS
66653: PUSH
66654: LD_VAR 0 2
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: PUSH
66667: LD_VAR 0 1
66671: PUSH
66672: LD_VAR 0 2
66676: PUSH
66677: LD_INT 4
66679: MINUS
66680: PUSH
66681: LD_INT 3
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: PUSH
66689: LD_VAR 0 1
66693: PUSH
66694: LD_INT 3
66696: MINUS
66697: PUSH
66698: LD_VAR 0 2
66702: PUSH
66703: LD_INT 3
66705: MINUS
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: LIST
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// end ; 4 :
66722: GO 67003
66724: LD_INT 4
66726: DOUBLE
66727: EQUAL
66728: IFTRUE 66732
66730: GO 66865
66732: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66733: LD_ADDR_VAR 0 5
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_VAR 0 2
66747: PUSH
66748: LD_INT 4
66750: PLUS
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: PUSH
66760: LD_VAR 0 1
66764: PUSH
66765: LD_INT 3
66767: PLUS
66768: PUSH
66769: LD_VAR 0 2
66773: PUSH
66774: LD_INT 3
66776: PLUS
66777: PUSH
66778: LD_INT 5
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 4
66793: PLUS
66794: PUSH
66795: LD_VAR 0 2
66799: PUSH
66800: LD_INT 4
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: PUSH
66808: LD_VAR 0 1
66812: PUSH
66813: LD_VAR 0 2
66817: PUSH
66818: LD_INT 3
66820: MINUS
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: LD_INT 4
66837: MINUS
66838: PUSH
66839: LD_VAR 0 2
66843: PUSH
66844: LD_INT 4
66846: MINUS
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// end ; 5 :
66863: GO 67003
66865: LD_INT 5
66867: DOUBLE
66868: EQUAL
66869: IFTRUE 66873
66871: GO 67002
66873: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66874: LD_ADDR_VAR 0 5
66878: PUSH
66879: LD_VAR 0 1
66883: PUSH
66884: LD_INT 4
66886: MINUS
66887: PUSH
66888: LD_VAR 0 2
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: PUSH
66901: LD_VAR 0 1
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 4
66913: MINUS
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: LIST
66922: PUSH
66923: LD_VAR 0 1
66927: PUSH
66928: LD_INT 4
66930: PLUS
66931: PUSH
66932: LD_VAR 0 2
66936: PUSH
66937: LD_INT 4
66939: PLUS
66940: PUSH
66941: LD_INT 5
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_INT 3
66956: PLUS
66957: PUSH
66958: LD_VAR 0 2
66962: PUSH
66963: LD_INT 4
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: LIST
66970: PUSH
66971: LD_VAR 0 1
66975: PUSH
66976: LD_VAR 0 2
66980: PUSH
66981: LD_INT 3
66983: PLUS
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: ST_TO_ADDR
// end ; end ;
67000: GO 67003
67002: POP
// result := list ;
67003: LD_ADDR_VAR 0 4
67007: PUSH
67008: LD_VAR 0 5
67012: ST_TO_ADDR
// end ;
67013: LD_VAR 0 4
67017: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67018: LD_INT 0
67020: PPUSH
67021: PPUSH
67022: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67023: LD_VAR 0 1
67027: NOT
67028: PUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: IN
67052: NOT
67053: OR
67054: IFFALSE 67058
// exit ;
67056: GO 67150
// tmp := [ ] ;
67058: LD_ADDR_VAR 0 5
67062: PUSH
67063: EMPTY
67064: ST_TO_ADDR
// for i in units do
67065: LD_ADDR_VAR 0 4
67069: PUSH
67070: LD_VAR 0 1
67074: PUSH
67075: FOR_IN
67076: IFFALSE 67119
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67078: LD_ADDR_VAR 0 5
67082: PUSH
67083: LD_VAR 0 5
67087: PPUSH
67088: LD_VAR 0 5
67092: PUSH
67093: LD_INT 1
67095: PLUS
67096: PPUSH
67097: LD_VAR 0 4
67101: PPUSH
67102: LD_VAR 0 2
67106: PPUSH
67107: CALL_OW 259
67111: PPUSH
67112: CALL_OW 2
67116: ST_TO_ADDR
67117: GO 67075
67119: POP
67120: POP
// if not tmp then
67121: LD_VAR 0 5
67125: NOT
67126: IFFALSE 67130
// exit ;
67128: GO 67150
// result := SortListByListDesc ( units , tmp ) ;
67130: LD_ADDR_VAR 0 3
67134: PUSH
67135: LD_VAR 0 1
67139: PPUSH
67140: LD_VAR 0 5
67144: PPUSH
67145: CALL_OW 77
67149: ST_TO_ADDR
// end ;
67150: LD_VAR 0 3
67154: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67155: LD_INT 0
67157: PPUSH
67158: PPUSH
67159: PPUSH
// result := false ;
67160: LD_ADDR_VAR 0 3
67164: PUSH
67165: LD_INT 0
67167: ST_TO_ADDR
// x := GetX ( building ) ;
67168: LD_ADDR_VAR 0 4
67172: PUSH
67173: LD_VAR 0 2
67177: PPUSH
67178: CALL_OW 250
67182: ST_TO_ADDR
// y := GetY ( building ) ;
67183: LD_ADDR_VAR 0 5
67187: PUSH
67188: LD_VAR 0 2
67192: PPUSH
67193: CALL_OW 251
67197: ST_TO_ADDR
// if not building or not x or not y then
67198: LD_VAR 0 2
67202: NOT
67203: PUSH
67204: LD_VAR 0 4
67208: NOT
67209: OR
67210: PUSH
67211: LD_VAR 0 5
67215: NOT
67216: OR
67217: IFFALSE 67221
// exit ;
67219: GO 67313
// if GetTaskList ( unit ) then
67221: LD_VAR 0 1
67225: PPUSH
67226: CALL_OW 437
67230: IFFALSE 67313
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67232: LD_STRING e
67234: PUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL_OW 437
67244: PUSH
67245: LD_INT 1
67247: ARRAY
67248: PUSH
67249: LD_INT 1
67251: ARRAY
67252: EQUAL
67253: PUSH
67254: LD_VAR 0 4
67258: PUSH
67259: LD_VAR 0 1
67263: PPUSH
67264: CALL_OW 437
67268: PUSH
67269: LD_INT 1
67271: ARRAY
67272: PUSH
67273: LD_INT 2
67275: ARRAY
67276: EQUAL
67277: AND
67278: PUSH
67279: LD_VAR 0 5
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: CALL_OW 437
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PUSH
67298: LD_INT 3
67300: ARRAY
67301: EQUAL
67302: AND
67303: IFFALSE 67313
// result := true end ;
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_INT 1
67312: ST_TO_ADDR
// end ;
67313: LD_VAR 0 3
67317: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67318: LD_INT 0
67320: PPUSH
// result := false ;
67321: LD_ADDR_VAR 0 4
67325: PUSH
67326: LD_INT 0
67328: ST_TO_ADDR
// if GetTaskList ( unit ) then
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 437
67338: IFFALSE 67421
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67340: LD_STRING M
67342: PUSH
67343: LD_VAR 0 1
67347: PPUSH
67348: CALL_OW 437
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: EQUAL
67361: PUSH
67362: LD_VAR 0 2
67366: PUSH
67367: LD_VAR 0 1
67371: PPUSH
67372: CALL_OW 437
67376: PUSH
67377: LD_INT 1
67379: ARRAY
67380: PUSH
67381: LD_INT 2
67383: ARRAY
67384: EQUAL
67385: AND
67386: PUSH
67387: LD_VAR 0 3
67391: PUSH
67392: LD_VAR 0 1
67396: PPUSH
67397: CALL_OW 437
67401: PUSH
67402: LD_INT 1
67404: ARRAY
67405: PUSH
67406: LD_INT 3
67408: ARRAY
67409: EQUAL
67410: AND
67411: IFFALSE 67421
// result := true ;
67413: LD_ADDR_VAR 0 4
67417: PUSH
67418: LD_INT 1
67420: ST_TO_ADDR
// end ; end ;
67421: LD_VAR 0 4
67425: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67426: LD_INT 0
67428: PPUSH
67429: PPUSH
67430: PPUSH
67431: PPUSH
// if not unit or not area then
67432: LD_VAR 0 1
67436: NOT
67437: PUSH
67438: LD_VAR 0 2
67442: NOT
67443: OR
67444: IFFALSE 67448
// exit ;
67446: GO 67612
// tmp := AreaToList ( area , i ) ;
67448: LD_ADDR_VAR 0 6
67452: PUSH
67453: LD_VAR 0 2
67457: PPUSH
67458: LD_VAR 0 5
67462: PPUSH
67463: CALL_OW 517
67467: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67468: LD_ADDR_VAR 0 5
67472: PUSH
67473: DOUBLE
67474: LD_INT 1
67476: DEC
67477: ST_TO_ADDR
67478: LD_VAR 0 6
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: PUSH
67487: FOR_TO
67488: IFFALSE 67610
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67490: LD_ADDR_VAR 0 7
67494: PUSH
67495: LD_VAR 0 6
67499: PUSH
67500: LD_INT 1
67502: ARRAY
67503: PUSH
67504: LD_VAR 0 5
67508: ARRAY
67509: PUSH
67510: LD_VAR 0 6
67514: PUSH
67515: LD_INT 2
67517: ARRAY
67518: PUSH
67519: LD_VAR 0 5
67523: ARRAY
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67529: LD_VAR 0 7
67533: PUSH
67534: LD_INT 1
67536: ARRAY
67537: PPUSH
67538: LD_VAR 0 7
67542: PUSH
67543: LD_INT 2
67545: ARRAY
67546: PPUSH
67547: CALL_OW 428
67551: PUSH
67552: LD_INT 0
67554: EQUAL
67555: IFFALSE 67608
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67557: LD_VAR 0 1
67561: PPUSH
67562: LD_VAR 0 7
67566: PUSH
67567: LD_INT 1
67569: ARRAY
67570: PPUSH
67571: LD_VAR 0 7
67575: PUSH
67576: LD_INT 2
67578: ARRAY
67579: PPUSH
67580: LD_VAR 0 3
67584: PPUSH
67585: CALL_OW 48
// result := IsPlaced ( unit ) ;
67589: LD_ADDR_VAR 0 4
67593: PUSH
67594: LD_VAR 0 1
67598: PPUSH
67599: CALL_OW 305
67603: ST_TO_ADDR
// exit ;
67604: POP
67605: POP
67606: GO 67612
// end ; end ;
67608: GO 67487
67610: POP
67611: POP
// end ;
67612: LD_VAR 0 4
67616: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67617: LD_INT 0
67619: PPUSH
67620: PPUSH
67621: PPUSH
// if not side or side > 8 then
67622: LD_VAR 0 1
67626: NOT
67627: PUSH
67628: LD_VAR 0 1
67632: PUSH
67633: LD_INT 8
67635: GREATER
67636: OR
67637: IFFALSE 67641
// exit ;
67639: GO 67828
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67641: LD_ADDR_VAR 0 4
67645: PUSH
67646: LD_INT 22
67648: PUSH
67649: LD_VAR 0 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 21
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PPUSH
67672: CALL_OW 69
67676: ST_TO_ADDR
// if not tmp then
67677: LD_VAR 0 4
67681: NOT
67682: IFFALSE 67686
// exit ;
67684: GO 67828
// enable_addtolog := true ;
67686: LD_ADDR_OWVAR 81
67690: PUSH
67691: LD_INT 1
67693: ST_TO_ADDR
// AddToLog ( [ ) ;
67694: LD_STRING [
67696: PPUSH
67697: CALL_OW 561
// for i in tmp do
67701: LD_ADDR_VAR 0 3
67705: PUSH
67706: LD_VAR 0 4
67710: PUSH
67711: FOR_IN
67712: IFFALSE 67819
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67714: LD_STRING [
67716: PUSH
67717: LD_VAR 0 3
67721: PPUSH
67722: CALL_OW 266
67726: STR
67727: PUSH
67728: LD_STRING , 
67730: STR
67731: PUSH
67732: LD_VAR 0 3
67736: PPUSH
67737: CALL_OW 250
67741: STR
67742: PUSH
67743: LD_STRING , 
67745: STR
67746: PUSH
67747: LD_VAR 0 3
67751: PPUSH
67752: CALL_OW 251
67756: STR
67757: PUSH
67758: LD_STRING , 
67760: STR
67761: PUSH
67762: LD_VAR 0 3
67766: PPUSH
67767: CALL_OW 254
67771: STR
67772: PUSH
67773: LD_STRING , 
67775: STR
67776: PUSH
67777: LD_VAR 0 3
67781: PPUSH
67782: LD_INT 1
67784: PPUSH
67785: CALL_OW 268
67789: STR
67790: PUSH
67791: LD_STRING , 
67793: STR
67794: PUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: LD_INT 2
67802: PPUSH
67803: CALL_OW 268
67807: STR
67808: PUSH
67809: LD_STRING ],
67811: STR
67812: PPUSH
67813: CALL_OW 561
// end ;
67817: GO 67711
67819: POP
67820: POP
// AddToLog ( ]; ) ;
67821: LD_STRING ];
67823: PPUSH
67824: CALL_OW 561
// end ;
67828: LD_VAR 0 2
67832: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67833: LD_INT 0
67835: PPUSH
67836: PPUSH
67837: PPUSH
67838: PPUSH
67839: PPUSH
// if not area or not rate or not max then
67840: LD_VAR 0 1
67844: NOT
67845: PUSH
67846: LD_VAR 0 2
67850: NOT
67851: OR
67852: PUSH
67853: LD_VAR 0 4
67857: NOT
67858: OR
67859: IFFALSE 67863
// exit ;
67861: GO 68052
// while 1 do
67863: LD_INT 1
67865: IFFALSE 68052
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67867: LD_ADDR_VAR 0 9
67871: PUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_INT 1
67879: PPUSH
67880: CALL_OW 287
67884: PUSH
67885: LD_INT 10
67887: MUL
67888: ST_TO_ADDR
// r := rate / 10 ;
67889: LD_ADDR_VAR 0 7
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_INT 10
67901: DIVREAL
67902: ST_TO_ADDR
// time := 1 1$00 ;
67903: LD_ADDR_VAR 0 8
67907: PUSH
67908: LD_INT 2100
67910: ST_TO_ADDR
// if amount < min then
67911: LD_VAR 0 9
67915: PUSH
67916: LD_VAR 0 3
67920: LESS
67921: IFFALSE 67939
// r := r * 2 else
67923: LD_ADDR_VAR 0 7
67927: PUSH
67928: LD_VAR 0 7
67932: PUSH
67933: LD_INT 2
67935: MUL
67936: ST_TO_ADDR
67937: GO 67965
// if amount > max then
67939: LD_VAR 0 9
67943: PUSH
67944: LD_VAR 0 4
67948: GREATER
67949: IFFALSE 67965
// r := r / 2 ;
67951: LD_ADDR_VAR 0 7
67955: PUSH
67956: LD_VAR 0 7
67960: PUSH
67961: LD_INT 2
67963: DIVREAL
67964: ST_TO_ADDR
// time := time / r ;
67965: LD_ADDR_VAR 0 8
67969: PUSH
67970: LD_VAR 0 8
67974: PUSH
67975: LD_VAR 0 7
67979: DIVREAL
67980: ST_TO_ADDR
// if time < 0 then
67981: LD_VAR 0 8
67985: PUSH
67986: LD_INT 0
67988: LESS
67989: IFFALSE 68006
// time := time * - 1 ;
67991: LD_ADDR_VAR 0 8
67995: PUSH
67996: LD_VAR 0 8
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: MUL
68005: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68006: LD_VAR 0 8
68010: PUSH
68011: LD_INT 35
68013: PPUSH
68014: LD_INT 875
68016: PPUSH
68017: CALL_OW 12
68021: PLUS
68022: PPUSH
68023: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68027: LD_INT 1
68029: PPUSH
68030: LD_INT 5
68032: PPUSH
68033: CALL_OW 12
68037: PPUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: LD_INT 1
68045: PPUSH
68046: CALL_OW 55
// end ;
68050: GO 67863
// end ;
68052: LD_VAR 0 5
68056: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68057: LD_INT 0
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
68066: PPUSH
// if not turrets or not factories then
68067: LD_VAR 0 1
68071: NOT
68072: PUSH
68073: LD_VAR 0 2
68077: NOT
68078: OR
68079: IFFALSE 68083
// exit ;
68081: GO 68390
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68083: LD_ADDR_VAR 0 10
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: LD_INT 6
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 24
68125: PUSH
68126: LD_INT 25
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 23
68135: PUSH
68136: LD_INT 27
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 42
68149: PUSH
68150: LD_INT 43
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 44
68159: PUSH
68160: LD_INT 46
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 45
68169: PUSH
68170: LD_INT 47
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// result := [ ] ;
68187: LD_ADDR_VAR 0 3
68191: PUSH
68192: EMPTY
68193: ST_TO_ADDR
// for i in turrets do
68194: LD_ADDR_VAR 0 4
68198: PUSH
68199: LD_VAR 0 1
68203: PUSH
68204: FOR_IN
68205: IFFALSE 68388
// begin nat := GetNation ( i ) ;
68207: LD_ADDR_VAR 0 7
68211: PUSH
68212: LD_VAR 0 4
68216: PPUSH
68217: CALL_OW 248
68221: ST_TO_ADDR
// weapon := 0 ;
68222: LD_ADDR_VAR 0 8
68226: PUSH
68227: LD_INT 0
68229: ST_TO_ADDR
// if not nat then
68230: LD_VAR 0 7
68234: NOT
68235: IFFALSE 68239
// continue ;
68237: GO 68204
// for j in list [ nat ] do
68239: LD_ADDR_VAR 0 5
68243: PUSH
68244: LD_VAR 0 10
68248: PUSH
68249: LD_VAR 0 7
68253: ARRAY
68254: PUSH
68255: FOR_IN
68256: IFFALSE 68297
// if GetBWeapon ( i ) = j [ 1 ] then
68258: LD_VAR 0 4
68262: PPUSH
68263: CALL_OW 269
68267: PUSH
68268: LD_VAR 0 5
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: EQUAL
68277: IFFALSE 68295
// begin weapon := j [ 2 ] ;
68279: LD_ADDR_VAR 0 8
68283: PUSH
68284: LD_VAR 0 5
68288: PUSH
68289: LD_INT 2
68291: ARRAY
68292: ST_TO_ADDR
// break ;
68293: GO 68297
// end ;
68295: GO 68255
68297: POP
68298: POP
// if not weapon then
68299: LD_VAR 0 8
68303: NOT
68304: IFFALSE 68308
// continue ;
68306: GO 68204
// for k in factories do
68308: LD_ADDR_VAR 0 6
68312: PUSH
68313: LD_VAR 0 2
68317: PUSH
68318: FOR_IN
68319: IFFALSE 68384
// begin weapons := AvailableWeaponList ( k ) ;
68321: LD_ADDR_VAR 0 9
68325: PUSH
68326: LD_VAR 0 6
68330: PPUSH
68331: CALL_OW 478
68335: ST_TO_ADDR
// if not weapons then
68336: LD_VAR 0 9
68340: NOT
68341: IFFALSE 68345
// continue ;
68343: GO 68318
// if weapon in weapons then
68345: LD_VAR 0 8
68349: PUSH
68350: LD_VAR 0 9
68354: IN
68355: IFFALSE 68382
// begin result := [ i , weapon ] ;
68357: LD_ADDR_VAR 0 3
68361: PUSH
68362: LD_VAR 0 4
68366: PUSH
68367: LD_VAR 0 8
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: ST_TO_ADDR
// exit ;
68376: POP
68377: POP
68378: POP
68379: POP
68380: GO 68390
// end ; end ;
68382: GO 68318
68384: POP
68385: POP
// end ;
68386: GO 68204
68388: POP
68389: POP
// end ;
68390: LD_VAR 0 3
68394: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68395: LD_INT 0
68397: PPUSH
// if not side or side > 8 then
68398: LD_VAR 0 3
68402: NOT
68403: PUSH
68404: LD_VAR 0 3
68408: PUSH
68409: LD_INT 8
68411: GREATER
68412: OR
68413: IFFALSE 68417
// exit ;
68415: GO 68476
// if not range then
68417: LD_VAR 0 4
68421: NOT
68422: IFFALSE 68433
// range := - 12 ;
68424: LD_ADDR_VAR 0 4
68428: PUSH
68429: LD_INT 12
68431: NEG
68432: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 3
68447: PPUSH
68448: LD_VAR 0 4
68452: PPUSH
68453: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: LD_VAR 0 3
68471: PPUSH
68472: CALL_OW 331
// end ;
68476: LD_VAR 0 5
68480: RET
// export function Video ( mode ) ; begin
68481: LD_INT 0
68483: PPUSH
// ingame_video = mode ;
68484: LD_ADDR_OWVAR 52
68488: PUSH
68489: LD_VAR 0 1
68493: ST_TO_ADDR
// interface_hidden = mode ;
68494: LD_ADDR_OWVAR 54
68498: PUSH
68499: LD_VAR 0 1
68503: ST_TO_ADDR
// end ;
68504: LD_VAR 0 2
68508: RET
// export function Join ( array , element ) ; begin
68509: LD_INT 0
68511: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68512: LD_ADDR_VAR 0 3
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_VAR 0 1
68526: PUSH
68527: LD_INT 1
68529: PLUS
68530: PPUSH
68531: LD_VAR 0 2
68535: PPUSH
68536: CALL_OW 1
68540: ST_TO_ADDR
// end ;
68541: LD_VAR 0 3
68545: RET
// export function JoinUnion ( array , element ) ; begin
68546: LD_INT 0
68548: PPUSH
// result := array union element ;
68549: LD_ADDR_VAR 0 3
68553: PUSH
68554: LD_VAR 0 1
68558: PUSH
68559: LD_VAR 0 2
68563: UNION
68564: ST_TO_ADDR
// end ;
68565: LD_VAR 0 3
68569: RET
// export function GetBehemoths ( side ) ; begin
68570: LD_INT 0
68572: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68573: LD_ADDR_VAR 0 2
68577: PUSH
68578: LD_INT 22
68580: PUSH
68581: LD_VAR 0 1
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 31
68592: PUSH
68593: LD_INT 25
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PPUSH
68604: CALL_OW 69
68608: ST_TO_ADDR
// end ;
68609: LD_VAR 0 2
68613: RET
// export function Shuffle ( array ) ; var i , index ; begin
68614: LD_INT 0
68616: PPUSH
68617: PPUSH
68618: PPUSH
// result := [ ] ;
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: EMPTY
68625: ST_TO_ADDR
// if not array then
68626: LD_VAR 0 1
68630: NOT
68631: IFFALSE 68635
// exit ;
68633: GO 68734
// Randomize ;
68635: CALL_OW 10
// for i = array downto 1 do
68639: LD_ADDR_VAR 0 3
68643: PUSH
68644: DOUBLE
68645: LD_VAR 0 1
68649: INC
68650: ST_TO_ADDR
68651: LD_INT 1
68653: PUSH
68654: FOR_DOWNTO
68655: IFFALSE 68732
// begin index := rand ( 1 , array ) ;
68657: LD_ADDR_VAR 0 4
68661: PUSH
68662: LD_INT 1
68664: PPUSH
68665: LD_VAR 0 1
68669: PPUSH
68670: CALL_OW 12
68674: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68675: LD_ADDR_VAR 0 2
68679: PUSH
68680: LD_VAR 0 2
68684: PPUSH
68685: LD_VAR 0 2
68689: PUSH
68690: LD_INT 1
68692: PLUS
68693: PPUSH
68694: LD_VAR 0 1
68698: PUSH
68699: LD_VAR 0 4
68703: ARRAY
68704: PPUSH
68705: CALL_OW 2
68709: ST_TO_ADDR
// array := Delete ( array , index ) ;
68710: LD_ADDR_VAR 0 1
68714: PUSH
68715: LD_VAR 0 1
68719: PPUSH
68720: LD_VAR 0 4
68724: PPUSH
68725: CALL_OW 3
68729: ST_TO_ADDR
// end ;
68730: GO 68654
68732: POP
68733: POP
// end ;
68734: LD_VAR 0 2
68738: RET
// export function GetBaseMaterials ( base ) ; begin
68739: LD_INT 0
68741: PPUSH
// result := [ 0 , 0 , 0 ] ;
68742: LD_ADDR_VAR 0 2
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: LIST
68760: ST_TO_ADDR
// if not base then
68761: LD_VAR 0 1
68765: NOT
68766: IFFALSE 68770
// exit ;
68768: GO 68819
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68770: LD_ADDR_VAR 0 2
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_INT 1
68782: PPUSH
68783: CALL_OW 275
68787: PUSH
68788: LD_VAR 0 1
68792: PPUSH
68793: LD_INT 2
68795: PPUSH
68796: CALL_OW 275
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: LD_INT 3
68808: PPUSH
68809: CALL_OW 275
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 2
68823: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68824: LD_INT 0
68826: PPUSH
68827: PPUSH
// result := array ;
68828: LD_ADDR_VAR 0 3
68832: PUSH
68833: LD_VAR 0 1
68837: ST_TO_ADDR
// if size >= result then
68838: LD_VAR 0 2
68842: PUSH
68843: LD_VAR 0 3
68847: GREATEREQUAL
68848: IFFALSE 68852
// exit ;
68850: GO 68902
// if size then
68852: LD_VAR 0 2
68856: IFFALSE 68902
// for i := array downto size do
68858: LD_ADDR_VAR 0 4
68862: PUSH
68863: DOUBLE
68864: LD_VAR 0 1
68868: INC
68869: ST_TO_ADDR
68870: LD_VAR 0 2
68874: PUSH
68875: FOR_DOWNTO
68876: IFFALSE 68900
// result := Delete ( result , result ) ;
68878: LD_ADDR_VAR 0 3
68882: PUSH
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 3
68892: PPUSH
68893: CALL_OW 3
68897: ST_TO_ADDR
68898: GO 68875
68900: POP
68901: POP
// end ;
68902: LD_VAR 0 3
68906: RET
// export function ComExit ( unit ) ; var tmp ; begin
68907: LD_INT 0
68909: PPUSH
68910: PPUSH
// if not IsInUnit ( unit ) then
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 310
68920: NOT
68921: IFFALSE 68925
// exit ;
68923: GO 68985
// tmp := IsInUnit ( unit ) ;
68925: LD_ADDR_VAR 0 3
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 310
68939: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68940: LD_VAR 0 3
68944: PPUSH
68945: CALL_OW 247
68949: PUSH
68950: LD_INT 2
68952: EQUAL
68953: IFFALSE 68966
// ComExitVehicle ( unit ) else
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 121
68964: GO 68975
// ComExitBuilding ( unit ) ;
68966: LD_VAR 0 1
68970: PPUSH
68971: CALL_OW 122
// result := tmp ;
68975: LD_ADDR_VAR 0 2
68979: PUSH
68980: LD_VAR 0 3
68984: ST_TO_ADDR
// end ;
68985: LD_VAR 0 2
68989: RET
// export function ComExitAll ( units ) ; var i ; begin
68990: LD_INT 0
68992: PPUSH
68993: PPUSH
// if not units then
68994: LD_VAR 0 1
68998: NOT
68999: IFFALSE 69003
// exit ;
69001: GO 69029
// for i in units do
69003: LD_ADDR_VAR 0 3
69007: PUSH
69008: LD_VAR 0 1
69012: PUSH
69013: FOR_IN
69014: IFFALSE 69027
// ComExit ( i ) ;
69016: LD_VAR 0 3
69020: PPUSH
69021: CALL 68907 0 1
69025: GO 69013
69027: POP
69028: POP
// end ;
69029: LD_VAR 0 2
69033: RET
// export function ResetHc ; begin
69034: LD_INT 0
69036: PPUSH
// InitHc ;
69037: CALL_OW 19
// hc_importance := 0 ;
69041: LD_ADDR_OWVAR 32
69045: PUSH
69046: LD_INT 0
69048: ST_TO_ADDR
// end ;
69049: LD_VAR 0 1
69053: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69054: LD_INT 0
69056: PPUSH
69057: PPUSH
69058: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69059: LD_ADDR_VAR 0 6
69063: PUSH
69064: LD_VAR 0 1
69068: PUSH
69069: LD_VAR 0 3
69073: PLUS
69074: PUSH
69075: LD_INT 2
69077: DIV
69078: ST_TO_ADDR
// if _x < 0 then
69079: LD_VAR 0 6
69083: PUSH
69084: LD_INT 0
69086: LESS
69087: IFFALSE 69104
// _x := _x * - 1 ;
69089: LD_ADDR_VAR 0 6
69093: PUSH
69094: LD_VAR 0 6
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: MUL
69103: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69104: LD_ADDR_VAR 0 7
69108: PUSH
69109: LD_VAR 0 2
69113: PUSH
69114: LD_VAR 0 4
69118: PLUS
69119: PUSH
69120: LD_INT 2
69122: DIV
69123: ST_TO_ADDR
// if _y < 0 then
69124: LD_VAR 0 7
69128: PUSH
69129: LD_INT 0
69131: LESS
69132: IFFALSE 69149
// _y := _y * - 1 ;
69134: LD_ADDR_VAR 0 7
69138: PUSH
69139: LD_VAR 0 7
69143: PUSH
69144: LD_INT 1
69146: NEG
69147: MUL
69148: ST_TO_ADDR
// result := [ _x , _y ] ;
69149: LD_ADDR_VAR 0 5
69153: PUSH
69154: LD_VAR 0 6
69158: PUSH
69159: LD_VAR 0 7
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// end ;
69168: LD_VAR 0 5
69172: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69173: LD_INT 0
69175: PPUSH
69176: PPUSH
69177: PPUSH
69178: PPUSH
// task := GetTaskList ( unit ) ;
69179: LD_ADDR_VAR 0 7
69183: PUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: CALL_OW 437
69193: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69194: LD_VAR 0 7
69198: NOT
69199: PUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: CALL_OW 308
69214: NOT
69215: AND
69216: IFFALSE 69220
// exit ;
69218: GO 69338
// if IsInArea ( unit , area ) then
69220: LD_VAR 0 1
69224: PPUSH
69225: LD_VAR 0 2
69229: PPUSH
69230: CALL_OW 308
69234: IFFALSE 69252
// begin ComMoveToArea ( unit , goAway ) ;
69236: LD_VAR 0 1
69240: PPUSH
69241: LD_VAR 0 3
69245: PPUSH
69246: CALL_OW 113
// exit ;
69250: GO 69338
// end ; if task [ 1 ] [ 1 ] <> M then
69252: LD_VAR 0 7
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PUSH
69261: LD_INT 1
69263: ARRAY
69264: PUSH
69265: LD_STRING M
69267: NONEQUAL
69268: IFFALSE 69272
// exit ;
69270: GO 69338
// x := task [ 1 ] [ 2 ] ;
69272: LD_ADDR_VAR 0 5
69276: PUSH
69277: LD_VAR 0 7
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_INT 2
69288: ARRAY
69289: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69290: LD_ADDR_VAR 0 6
69294: PUSH
69295: LD_VAR 0 7
69299: PUSH
69300: LD_INT 1
69302: ARRAY
69303: PUSH
69304: LD_INT 3
69306: ARRAY
69307: ST_TO_ADDR
// if InArea ( x , y , area ) then
69308: LD_VAR 0 5
69312: PPUSH
69313: LD_VAR 0 6
69317: PPUSH
69318: LD_VAR 0 2
69322: PPUSH
69323: CALL_OW 309
69327: IFFALSE 69338
// ComStop ( unit ) ;
69329: LD_VAR 0 1
69333: PPUSH
69334: CALL_OW 141
// end ;
69338: LD_VAR 0 4
69342: RET
// export function Abs ( value ) ; begin
69343: LD_INT 0
69345: PPUSH
// result := value ;
69346: LD_ADDR_VAR 0 2
69350: PUSH
69351: LD_VAR 0 1
69355: ST_TO_ADDR
// if value < 0 then
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 0
69363: LESS
69364: IFFALSE 69381
// result := value * - 1 ;
69366: LD_ADDR_VAR 0 2
69370: PUSH
69371: LD_VAR 0 1
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: MUL
69380: ST_TO_ADDR
// end ;
69381: LD_VAR 0 2
69385: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69386: LD_INT 0
69388: PPUSH
69389: PPUSH
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
69395: PPUSH
// if not unit or not building then
69396: LD_VAR 0 1
69400: NOT
69401: PUSH
69402: LD_VAR 0 2
69406: NOT
69407: OR
69408: IFFALSE 69412
// exit ;
69410: GO 69638
// x := GetX ( building ) ;
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: LD_VAR 0 2
69421: PPUSH
69422: CALL_OW 250
69426: ST_TO_ADDR
// y := GetY ( building ) ;
69427: LD_ADDR_VAR 0 6
69431: PUSH
69432: LD_VAR 0 2
69436: PPUSH
69437: CALL_OW 251
69441: ST_TO_ADDR
// d := GetDir ( building ) ;
69442: LD_ADDR_VAR 0 8
69446: PUSH
69447: LD_VAR 0 2
69451: PPUSH
69452: CALL_OW 254
69456: ST_TO_ADDR
// r := 4 ;
69457: LD_ADDR_VAR 0 9
69461: PUSH
69462: LD_INT 4
69464: ST_TO_ADDR
// for i := 1 to 5 do
69465: LD_ADDR_VAR 0 10
69469: PUSH
69470: DOUBLE
69471: LD_INT 1
69473: DEC
69474: ST_TO_ADDR
69475: LD_INT 5
69477: PUSH
69478: FOR_TO
69479: IFFALSE 69636
// begin _x := ShiftX ( x , d , r + i ) ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_VAR 0 4
69490: PPUSH
69491: LD_VAR 0 8
69495: PPUSH
69496: LD_VAR 0 9
69500: PUSH
69501: LD_VAR 0 10
69505: PLUS
69506: PPUSH
69507: CALL_OW 272
69511: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69512: LD_ADDR_VAR 0 7
69516: PUSH
69517: LD_VAR 0 6
69521: PPUSH
69522: LD_VAR 0 8
69526: PPUSH
69527: LD_VAR 0 9
69531: PUSH
69532: LD_VAR 0 10
69536: PLUS
69537: PPUSH
69538: CALL_OW 273
69542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69543: LD_VAR 0 5
69547: PPUSH
69548: LD_VAR 0 7
69552: PPUSH
69553: CALL_OW 488
69557: PUSH
69558: LD_VAR 0 5
69562: PPUSH
69563: LD_VAR 0 7
69567: PPUSH
69568: CALL_OW 428
69572: PPUSH
69573: CALL_OW 247
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: IN
69588: NOT
69589: AND
69590: IFFALSE 69634
// begin ComMoveXY ( unit , _x , _y ) ;
69592: LD_VAR 0 1
69596: PPUSH
69597: LD_VAR 0 5
69601: PPUSH
69602: LD_VAR 0 7
69606: PPUSH
69607: CALL_OW 111
// result := [ _x , _y ] ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 5
69620: PUSH
69621: LD_VAR 0 7
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: ST_TO_ADDR
// exit ;
69630: POP
69631: POP
69632: GO 69638
// end ; end ;
69634: GO 69478
69636: POP
69637: POP
// end ;
69638: LD_VAR 0 3
69642: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69643: LD_INT 0
69645: PPUSH
69646: PPUSH
69647: PPUSH
// result := 0 ;
69648: LD_ADDR_VAR 0 3
69652: PUSH
69653: LD_INT 0
69655: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 0
69663: LESS
69664: PUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_INT 8
69672: GREATER
69673: OR
69674: PUSH
69675: LD_VAR 0 2
69679: PUSH
69680: LD_INT 0
69682: LESS
69683: OR
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 8
69692: GREATER
69693: OR
69694: IFFALSE 69698
// exit ;
69696: GO 69773
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69698: LD_ADDR_VAR 0 4
69702: PUSH
69703: LD_INT 22
69705: PUSH
69706: LD_VAR 0 2
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PPUSH
69715: CALL_OW 69
69719: PUSH
69720: FOR_IN
69721: IFFALSE 69771
// begin un := UnitShoot ( i ) ;
69723: LD_ADDR_VAR 0 5
69727: PUSH
69728: LD_VAR 0 4
69732: PPUSH
69733: CALL_OW 504
69737: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69738: LD_VAR 0 5
69742: PPUSH
69743: CALL_OW 255
69747: PUSH
69748: LD_VAR 0 1
69752: EQUAL
69753: IFFALSE 69769
// begin result := un ;
69755: LD_ADDR_VAR 0 3
69759: PUSH
69760: LD_VAR 0 5
69764: ST_TO_ADDR
// exit ;
69765: POP
69766: POP
69767: GO 69773
// end ; end ;
69769: GO 69720
69771: POP
69772: POP
// end ;
69773: LD_VAR 0 3
69777: RET
// export function GetCargoBay ( units ) ; begin
69778: LD_INT 0
69780: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69781: LD_ADDR_VAR 0 2
69785: PUSH
69786: LD_VAR 0 1
69790: PPUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 34
69796: PUSH
69797: LD_INT 12
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 34
69806: PUSH
69807: LD_INT 51
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 34
69816: PUSH
69817: LD_INT 32
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 34
69826: PUSH
69827: LD_EXP 47
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: PPUSH
69843: CALL_OW 72
69847: ST_TO_ADDR
// end ;
69848: LD_VAR 0 2
69852: RET
// export function Negate ( value ) ; begin
69853: LD_INT 0
69855: PPUSH
// result := not value ;
69856: LD_ADDR_VAR 0 2
69860: PUSH
69861: LD_VAR 0 1
69865: NOT
69866: ST_TO_ADDR
// end ;
69867: LD_VAR 0 2
69871: RET
// export function Inc ( value ) ; begin
69872: LD_INT 0
69874: PPUSH
// result := value + 1 ;
69875: LD_ADDR_VAR 0 2
69879: PUSH
69880: LD_VAR 0 1
69884: PUSH
69885: LD_INT 1
69887: PLUS
69888: ST_TO_ADDR
// end ;
69889: LD_VAR 0 2
69893: RET
// export function Dec ( value ) ; begin
69894: LD_INT 0
69896: PPUSH
// result := value - 1 ;
69897: LD_ADDR_VAR 0 2
69901: PUSH
69902: LD_VAR 0 1
69906: PUSH
69907: LD_INT 1
69909: MINUS
69910: ST_TO_ADDR
// end ;
69911: LD_VAR 0 2
69915: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69916: LD_INT 0
69918: PPUSH
69919: PPUSH
69920: PPUSH
69921: PPUSH
69922: PPUSH
69923: PPUSH
69924: PPUSH
69925: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69926: LD_VAR 0 1
69930: PPUSH
69931: LD_VAR 0 2
69935: PPUSH
69936: CALL_OW 488
69940: NOT
69941: PUSH
69942: LD_VAR 0 3
69946: PPUSH
69947: LD_VAR 0 4
69951: PPUSH
69952: CALL_OW 488
69956: NOT
69957: OR
69958: IFFALSE 69971
// begin result := - 1 ;
69960: LD_ADDR_VAR 0 5
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: ST_TO_ADDR
// exit ;
69969: GO 70206
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69971: LD_ADDR_VAR 0 12
69975: PUSH
69976: LD_VAR 0 1
69980: PPUSH
69981: LD_VAR 0 2
69985: PPUSH
69986: LD_VAR 0 3
69990: PPUSH
69991: LD_VAR 0 4
69995: PPUSH
69996: CALL 69054 0 4
70000: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70001: LD_ADDR_VAR 0 11
70005: PUSH
70006: LD_VAR 0 1
70010: PPUSH
70011: LD_VAR 0 2
70015: PPUSH
70016: LD_VAR 0 12
70020: PUSH
70021: LD_INT 1
70023: ARRAY
70024: PPUSH
70025: LD_VAR 0 12
70029: PUSH
70030: LD_INT 2
70032: ARRAY
70033: PPUSH
70034: CALL_OW 298
70038: ST_TO_ADDR
// distance := 9999 ;
70039: LD_ADDR_VAR 0 10
70043: PUSH
70044: LD_INT 9999
70046: ST_TO_ADDR
// for i := 0 to 5 do
70047: LD_ADDR_VAR 0 6
70051: PUSH
70052: DOUBLE
70053: LD_INT 0
70055: DEC
70056: ST_TO_ADDR
70057: LD_INT 5
70059: PUSH
70060: FOR_TO
70061: IFFALSE 70204
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70063: LD_ADDR_VAR 0 7
70067: PUSH
70068: LD_VAR 0 1
70072: PPUSH
70073: LD_VAR 0 6
70077: PPUSH
70078: LD_VAR 0 11
70082: PPUSH
70083: CALL_OW 272
70087: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70088: LD_ADDR_VAR 0 8
70092: PUSH
70093: LD_VAR 0 2
70097: PPUSH
70098: LD_VAR 0 6
70102: PPUSH
70103: LD_VAR 0 11
70107: PPUSH
70108: CALL_OW 273
70112: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70113: LD_VAR 0 7
70117: PPUSH
70118: LD_VAR 0 8
70122: PPUSH
70123: CALL_OW 488
70127: NOT
70128: IFFALSE 70132
// continue ;
70130: GO 70060
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70132: LD_ADDR_VAR 0 9
70136: PUSH
70137: LD_VAR 0 12
70141: PUSH
70142: LD_INT 1
70144: ARRAY
70145: PPUSH
70146: LD_VAR 0 12
70150: PUSH
70151: LD_INT 2
70153: ARRAY
70154: PPUSH
70155: LD_VAR 0 7
70159: PPUSH
70160: LD_VAR 0 8
70164: PPUSH
70165: CALL_OW 298
70169: ST_TO_ADDR
// if tmp < distance then
70170: LD_VAR 0 9
70174: PUSH
70175: LD_VAR 0 10
70179: LESS
70180: IFFALSE 70202
// begin result := i ;
70182: LD_ADDR_VAR 0 5
70186: PUSH
70187: LD_VAR 0 6
70191: ST_TO_ADDR
// distance := tmp ;
70192: LD_ADDR_VAR 0 10
70196: PUSH
70197: LD_VAR 0 9
70201: ST_TO_ADDR
// end ; end ;
70202: GO 70060
70204: POP
70205: POP
// end ;
70206: LD_VAR 0 5
70210: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70211: LD_INT 0
70213: PPUSH
70214: PPUSH
// if not driver or not IsInUnit ( driver ) then
70215: LD_VAR 0 1
70219: NOT
70220: PUSH
70221: LD_VAR 0 1
70225: PPUSH
70226: CALL_OW 310
70230: NOT
70231: OR
70232: IFFALSE 70236
// exit ;
70234: GO 70326
// vehicle := IsInUnit ( driver ) ;
70236: LD_ADDR_VAR 0 3
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: CALL_OW 310
70250: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70251: LD_VAR 0 1
70255: PPUSH
70256: LD_STRING \
70258: PUSH
70259: LD_INT 0
70261: PUSH
70262: LD_INT 0
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: LD_INT 0
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: PUSH
70286: LD_STRING E
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: LD_VAR 0 3
70299: PUSH
70300: LD_INT 0
70302: PUSH
70303: LD_INT 0
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PPUSH
70322: CALL_OW 446
// end ;
70326: LD_VAR 0 2
70330: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70331: LD_INT 0
70333: PPUSH
70334: PPUSH
// if not driver or not IsInUnit ( driver ) then
70335: LD_VAR 0 1
70339: NOT
70340: PUSH
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL_OW 310
70350: NOT
70351: OR
70352: IFFALSE 70356
// exit ;
70354: GO 70446
// vehicle := IsInUnit ( driver ) ;
70356: LD_ADDR_VAR 0 3
70360: PUSH
70361: LD_VAR 0 1
70365: PPUSH
70366: CALL_OW 310
70370: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70371: LD_VAR 0 1
70375: PPUSH
70376: LD_STRING \
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: PUSH
70406: LD_STRING E
70408: PUSH
70409: LD_INT 0
70411: PUSH
70412: LD_INT 0
70414: PUSH
70415: LD_VAR 0 3
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PPUSH
70442: CALL_OW 447
// end ;
70446: LD_VAR 0 2
70450: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70451: LD_INT 0
70453: PPUSH
70454: PPUSH
70455: PPUSH
// tmp := [ ] ;
70456: LD_ADDR_VAR 0 5
70460: PUSH
70461: EMPTY
70462: ST_TO_ADDR
// for i in units do
70463: LD_ADDR_VAR 0 4
70467: PUSH
70468: LD_VAR 0 1
70472: PUSH
70473: FOR_IN
70474: IFFALSE 70512
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70476: LD_ADDR_VAR 0 5
70480: PUSH
70481: LD_VAR 0 5
70485: PPUSH
70486: LD_VAR 0 5
70490: PUSH
70491: LD_INT 1
70493: PLUS
70494: PPUSH
70495: LD_VAR 0 4
70499: PPUSH
70500: CALL_OW 256
70504: PPUSH
70505: CALL_OW 2
70509: ST_TO_ADDR
70510: GO 70473
70512: POP
70513: POP
// if not tmp then
70514: LD_VAR 0 5
70518: NOT
70519: IFFALSE 70523
// exit ;
70521: GO 70571
// if asc then
70523: LD_VAR 0 2
70527: IFFALSE 70551
// result := SortListByListAsc ( units , tmp ) else
70529: LD_ADDR_VAR 0 3
70533: PUSH
70534: LD_VAR 0 1
70538: PPUSH
70539: LD_VAR 0 5
70543: PPUSH
70544: CALL_OW 76
70548: ST_TO_ADDR
70549: GO 70571
// result := SortListByListDesc ( units , tmp ) ;
70551: LD_ADDR_VAR 0 3
70555: PUSH
70556: LD_VAR 0 1
70560: PPUSH
70561: LD_VAR 0 5
70565: PPUSH
70566: CALL_OW 77
70570: ST_TO_ADDR
// end ;
70571: LD_VAR 0 3
70575: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70576: LD_INT 0
70578: PPUSH
70579: PPUSH
// task := GetTaskList ( mech ) ;
70580: LD_ADDR_VAR 0 4
70584: PUSH
70585: LD_VAR 0 1
70589: PPUSH
70590: CALL_OW 437
70594: ST_TO_ADDR
// if not task then
70595: LD_VAR 0 4
70599: NOT
70600: IFFALSE 70604
// exit ;
70602: GO 70646
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70604: LD_ADDR_VAR 0 3
70608: PUSH
70609: LD_VAR 0 4
70613: PUSH
70614: LD_INT 1
70616: ARRAY
70617: PUSH
70618: LD_INT 1
70620: ARRAY
70621: PUSH
70622: LD_STRING r
70624: EQUAL
70625: PUSH
70626: LD_VAR 0 4
70630: PUSH
70631: LD_INT 1
70633: ARRAY
70634: PUSH
70635: LD_INT 4
70637: ARRAY
70638: PUSH
70639: LD_VAR 0 2
70643: EQUAL
70644: AND
70645: ST_TO_ADDR
// end ;
70646: LD_VAR 0 3
70650: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70651: LD_INT 0
70653: PPUSH
// SetDir ( unit , d ) ;
70654: LD_VAR 0 1
70658: PPUSH
70659: LD_VAR 0 4
70663: PPUSH
70664: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70668: LD_VAR 0 1
70672: PPUSH
70673: LD_VAR 0 2
70677: PPUSH
70678: LD_VAR 0 3
70682: PPUSH
70683: LD_VAR 0 5
70687: PPUSH
70688: CALL_OW 48
// end ;
70692: LD_VAR 0 6
70696: RET
// export function ToNaturalNumber ( number ) ; begin
70697: LD_INT 0
70699: PPUSH
// result := number div 1 ;
70700: LD_ADDR_VAR 0 2
70704: PUSH
70705: LD_VAR 0 1
70709: PUSH
70710: LD_INT 1
70712: DIV
70713: ST_TO_ADDR
// if number < 0 then
70714: LD_VAR 0 1
70718: PUSH
70719: LD_INT 0
70721: LESS
70722: IFFALSE 70732
// result := 0 ;
70724: LD_ADDR_VAR 0 2
70728: PUSH
70729: LD_INT 0
70731: ST_TO_ADDR
// end ;
70732: LD_VAR 0 2
70736: RET
// export function SortByClass ( units , class ) ; var un ; begin
70737: LD_INT 0
70739: PPUSH
70740: PPUSH
// if not units or not class then
70741: LD_VAR 0 1
70745: NOT
70746: PUSH
70747: LD_VAR 0 2
70751: NOT
70752: OR
70753: IFFALSE 70757
// exit ;
70755: GO 70852
// result := [ ] ;
70757: LD_ADDR_VAR 0 3
70761: PUSH
70762: EMPTY
70763: ST_TO_ADDR
// for un in units do
70764: LD_ADDR_VAR 0 4
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: FOR_IN
70775: IFFALSE 70850
// if GetClass ( un ) = class then
70777: LD_VAR 0 4
70781: PPUSH
70782: CALL_OW 257
70786: PUSH
70787: LD_VAR 0 2
70791: EQUAL
70792: IFFALSE 70819
// result := Insert ( result , 1 , un ) else
70794: LD_ADDR_VAR 0 3
70798: PUSH
70799: LD_VAR 0 3
70803: PPUSH
70804: LD_INT 1
70806: PPUSH
70807: LD_VAR 0 4
70811: PPUSH
70812: CALL_OW 2
70816: ST_TO_ADDR
70817: GO 70848
// result := Replace ( result , result + 1 , un ) ;
70819: LD_ADDR_VAR 0 3
70823: PUSH
70824: LD_VAR 0 3
70828: PPUSH
70829: LD_VAR 0 3
70833: PUSH
70834: LD_INT 1
70836: PLUS
70837: PPUSH
70838: LD_VAR 0 4
70842: PPUSH
70843: CALL_OW 1
70847: ST_TO_ADDR
70848: GO 70774
70850: POP
70851: POP
// end ;
70852: LD_VAR 0 3
70856: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70857: LD_INT 0
70859: PPUSH
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
70865: PPUSH
// result := [ ] ;
70866: LD_ADDR_VAR 0 4
70870: PUSH
70871: EMPTY
70872: ST_TO_ADDR
// if x - r < 0 then
70873: LD_VAR 0 1
70877: PUSH
70878: LD_VAR 0 3
70882: MINUS
70883: PUSH
70884: LD_INT 0
70886: LESS
70887: IFFALSE 70899
// min_x := 0 else
70889: LD_ADDR_VAR 0 8
70893: PUSH
70894: LD_INT 0
70896: ST_TO_ADDR
70897: GO 70915
// min_x := x - r ;
70899: LD_ADDR_VAR 0 8
70903: PUSH
70904: LD_VAR 0 1
70908: PUSH
70909: LD_VAR 0 3
70913: MINUS
70914: ST_TO_ADDR
// if y - r < 0 then
70915: LD_VAR 0 2
70919: PUSH
70920: LD_VAR 0 3
70924: MINUS
70925: PUSH
70926: LD_INT 0
70928: LESS
70929: IFFALSE 70941
// min_y := 0 else
70931: LD_ADDR_VAR 0 7
70935: PUSH
70936: LD_INT 0
70938: ST_TO_ADDR
70939: GO 70957
// min_y := y - r ;
70941: LD_ADDR_VAR 0 7
70945: PUSH
70946: LD_VAR 0 2
70950: PUSH
70951: LD_VAR 0 3
70955: MINUS
70956: ST_TO_ADDR
// max_x := x + r ;
70957: LD_ADDR_VAR 0 9
70961: PUSH
70962: LD_VAR 0 1
70966: PUSH
70967: LD_VAR 0 3
70971: PLUS
70972: ST_TO_ADDR
// max_y := y + r ;
70973: LD_ADDR_VAR 0 10
70977: PUSH
70978: LD_VAR 0 2
70982: PUSH
70983: LD_VAR 0 3
70987: PLUS
70988: ST_TO_ADDR
// for _x = min_x to max_x do
70989: LD_ADDR_VAR 0 5
70993: PUSH
70994: DOUBLE
70995: LD_VAR 0 8
70999: DEC
71000: ST_TO_ADDR
71001: LD_VAR 0 9
71005: PUSH
71006: FOR_TO
71007: IFFALSE 71108
// for _y = min_y to max_y do
71009: LD_ADDR_VAR 0 6
71013: PUSH
71014: DOUBLE
71015: LD_VAR 0 7
71019: DEC
71020: ST_TO_ADDR
71021: LD_VAR 0 10
71025: PUSH
71026: FOR_TO
71027: IFFALSE 71104
// begin if not ValidHex ( _x , _y ) then
71029: LD_VAR 0 5
71033: PPUSH
71034: LD_VAR 0 6
71038: PPUSH
71039: CALL_OW 488
71043: NOT
71044: IFFALSE 71048
// continue ;
71046: GO 71026
// if GetResourceTypeXY ( _x , _y ) then
71048: LD_VAR 0 5
71052: PPUSH
71053: LD_VAR 0 6
71057: PPUSH
71058: CALL_OW 283
71062: IFFALSE 71102
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71064: LD_ADDR_VAR 0 4
71068: PUSH
71069: LD_VAR 0 4
71073: PPUSH
71074: LD_VAR 0 4
71078: PUSH
71079: LD_INT 1
71081: PLUS
71082: PPUSH
71083: LD_VAR 0 5
71087: PUSH
71088: LD_VAR 0 6
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PPUSH
71097: CALL_OW 1
71101: ST_TO_ADDR
// end ;
71102: GO 71026
71104: POP
71105: POP
71106: GO 71006
71108: POP
71109: POP
// end ;
71110: LD_VAR 0 4
71114: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71115: LD_INT 0
71117: PPUSH
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
71123: PPUSH
71124: PPUSH
// if not units then
71125: LD_VAR 0 1
71129: NOT
71130: IFFALSE 71134
// exit ;
71132: GO 71660
// result := UnitFilter ( units , [ f_ok ] ) ;
71134: LD_ADDR_VAR 0 3
71138: PUSH
71139: LD_VAR 0 1
71143: PPUSH
71144: LD_INT 50
71146: PUSH
71147: EMPTY
71148: LIST
71149: PPUSH
71150: CALL_OW 72
71154: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71155: LD_ADDR_VAR 0 8
71159: PUSH
71160: LD_VAR 0 1
71164: PUSH
71165: LD_INT 1
71167: ARRAY
71168: PPUSH
71169: CALL_OW 255
71173: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71174: LD_ADDR_VAR 0 10
71178: PUSH
71179: LD_INT 29
71181: PUSH
71182: LD_EXP 50
71186: PUSH
71187: LD_INT 49
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: LIST
71194: ST_TO_ADDR
// if not result then
71195: LD_VAR 0 3
71199: NOT
71200: IFFALSE 71204
// exit ;
71202: GO 71660
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71204: LD_ADDR_VAR 0 5
71208: PUSH
71209: LD_INT 81
71211: PUSH
71212: LD_VAR 0 8
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PPUSH
71221: CALL_OW 69
71225: ST_TO_ADDR
// for i in result do
71226: LD_ADDR_VAR 0 4
71230: PUSH
71231: LD_VAR 0 3
71235: PUSH
71236: FOR_IN
71237: IFFALSE 71658
// begin tag := GetTag ( i ) + 1 ;
71239: LD_ADDR_VAR 0 9
71243: PUSH
71244: LD_VAR 0 4
71248: PPUSH
71249: CALL_OW 110
71253: PUSH
71254: LD_INT 1
71256: PLUS
71257: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71258: LD_ADDR_VAR 0 7
71262: PUSH
71263: LD_VAR 0 4
71267: PPUSH
71268: CALL_OW 250
71272: PPUSH
71273: LD_VAR 0 4
71277: PPUSH
71278: CALL_OW 251
71282: PPUSH
71283: LD_INT 6
71285: PPUSH
71286: CALL 70857 0 3
71290: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71291: LD_VAR 0 4
71295: PPUSH
71296: CALL_OW 247
71300: PUSH
71301: LD_INT 2
71303: EQUAL
71304: PUSH
71305: LD_VAR 0 7
71309: AND
71310: PUSH
71311: LD_VAR 0 4
71315: PPUSH
71316: CALL_OW 264
71320: PUSH
71321: LD_VAR 0 10
71325: IN
71326: NOT
71327: AND
71328: IFFALSE 71367
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71330: LD_VAR 0 4
71334: PPUSH
71335: LD_VAR 0 7
71339: PUSH
71340: LD_INT 1
71342: ARRAY
71343: PUSH
71344: LD_INT 1
71346: ARRAY
71347: PPUSH
71348: LD_VAR 0 7
71352: PUSH
71353: LD_INT 1
71355: ARRAY
71356: PUSH
71357: LD_INT 2
71359: ARRAY
71360: PPUSH
71361: CALL_OW 116
71365: GO 71656
// if path > tag then
71367: LD_VAR 0 2
71371: PUSH
71372: LD_VAR 0 9
71376: GREATER
71377: IFFALSE 71585
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71379: LD_ADDR_VAR 0 6
71383: PUSH
71384: LD_VAR 0 5
71388: PPUSH
71389: LD_INT 91
71391: PUSH
71392: LD_VAR 0 4
71396: PUSH
71397: LD_INT 8
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: LIST
71404: PPUSH
71405: CALL_OW 72
71409: ST_TO_ADDR
// if nearEnemy then
71410: LD_VAR 0 6
71414: IFFALSE 71483
// begin if GetWeapon ( i ) = ru_time_lapser then
71416: LD_VAR 0 4
71420: PPUSH
71421: CALL_OW 264
71425: PUSH
71426: LD_INT 49
71428: EQUAL
71429: IFFALSE 71457
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71431: LD_VAR 0 4
71435: PPUSH
71436: LD_VAR 0 6
71440: PPUSH
71441: LD_VAR 0 4
71445: PPUSH
71446: CALL_OW 74
71450: PPUSH
71451: CALL_OW 112
71455: GO 71481
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71457: LD_VAR 0 4
71461: PPUSH
71462: LD_VAR 0 6
71466: PPUSH
71467: LD_VAR 0 4
71471: PPUSH
71472: CALL_OW 74
71476: PPUSH
71477: CALL_OW 115
// end else
71481: GO 71583
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71483: LD_VAR 0 4
71487: PPUSH
71488: LD_VAR 0 2
71492: PUSH
71493: LD_VAR 0 9
71497: ARRAY
71498: PUSH
71499: LD_INT 1
71501: ARRAY
71502: PPUSH
71503: LD_VAR 0 2
71507: PUSH
71508: LD_VAR 0 9
71512: ARRAY
71513: PUSH
71514: LD_INT 2
71516: ARRAY
71517: PPUSH
71518: CALL_OW 297
71522: PUSH
71523: LD_INT 6
71525: GREATER
71526: IFFALSE 71569
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71528: LD_VAR 0 4
71532: PPUSH
71533: LD_VAR 0 2
71537: PUSH
71538: LD_VAR 0 9
71542: ARRAY
71543: PUSH
71544: LD_INT 1
71546: ARRAY
71547: PPUSH
71548: LD_VAR 0 2
71552: PUSH
71553: LD_VAR 0 9
71557: ARRAY
71558: PUSH
71559: LD_INT 2
71561: ARRAY
71562: PPUSH
71563: CALL_OW 114
71567: GO 71583
// SetTag ( i , tag ) ;
71569: LD_VAR 0 4
71573: PPUSH
71574: LD_VAR 0 9
71578: PPUSH
71579: CALL_OW 109
// end else
71583: GO 71656
// if enemy then
71585: LD_VAR 0 5
71589: IFFALSE 71656
// begin if GetWeapon ( i ) = ru_time_lapser then
71591: LD_VAR 0 4
71595: PPUSH
71596: CALL_OW 264
71600: PUSH
71601: LD_INT 49
71603: EQUAL
71604: IFFALSE 71632
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71606: LD_VAR 0 4
71610: PPUSH
71611: LD_VAR 0 5
71615: PPUSH
71616: LD_VAR 0 4
71620: PPUSH
71621: CALL_OW 74
71625: PPUSH
71626: CALL_OW 112
71630: GO 71656
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71632: LD_VAR 0 4
71636: PPUSH
71637: LD_VAR 0 5
71641: PPUSH
71642: LD_VAR 0 4
71646: PPUSH
71647: CALL_OW 74
71651: PPUSH
71652: CALL_OW 115
// end ; end ;
71656: GO 71236
71658: POP
71659: POP
// end ;
71660: LD_VAR 0 3
71664: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71665: LD_INT 0
71667: PPUSH
71668: PPUSH
71669: PPUSH
// if not unit or IsInUnit ( unit ) then
71670: LD_VAR 0 1
71674: NOT
71675: PUSH
71676: LD_VAR 0 1
71680: PPUSH
71681: CALL_OW 310
71685: OR
71686: IFFALSE 71690
// exit ;
71688: GO 71781
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71690: LD_ADDR_VAR 0 4
71694: PUSH
71695: LD_VAR 0 1
71699: PPUSH
71700: CALL_OW 250
71704: PPUSH
71705: LD_VAR 0 2
71709: PPUSH
71710: LD_INT 1
71712: PPUSH
71713: CALL_OW 272
71717: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71718: LD_ADDR_VAR 0 5
71722: PUSH
71723: LD_VAR 0 1
71727: PPUSH
71728: CALL_OW 251
71732: PPUSH
71733: LD_VAR 0 2
71737: PPUSH
71738: LD_INT 1
71740: PPUSH
71741: CALL_OW 273
71745: ST_TO_ADDR
// if ValidHex ( x , y ) then
71746: LD_VAR 0 4
71750: PPUSH
71751: LD_VAR 0 5
71755: PPUSH
71756: CALL_OW 488
71760: IFFALSE 71781
// ComTurnXY ( unit , x , y ) ;
71762: LD_VAR 0 1
71766: PPUSH
71767: LD_VAR 0 4
71771: PPUSH
71772: LD_VAR 0 5
71776: PPUSH
71777: CALL_OW 118
// end ;
71781: LD_VAR 0 3
71785: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71786: LD_INT 0
71788: PPUSH
71789: PPUSH
// result := false ;
71790: LD_ADDR_VAR 0 3
71794: PUSH
71795: LD_INT 0
71797: ST_TO_ADDR
// if not units then
71798: LD_VAR 0 2
71802: NOT
71803: IFFALSE 71807
// exit ;
71805: GO 71852
// for i in units do
71807: LD_ADDR_VAR 0 4
71811: PUSH
71812: LD_VAR 0 2
71816: PUSH
71817: FOR_IN
71818: IFFALSE 71850
// if See ( side , i ) then
71820: LD_VAR 0 1
71824: PPUSH
71825: LD_VAR 0 4
71829: PPUSH
71830: CALL_OW 292
71834: IFFALSE 71848
// begin result := true ;
71836: LD_ADDR_VAR 0 3
71840: PUSH
71841: LD_INT 1
71843: ST_TO_ADDR
// exit ;
71844: POP
71845: POP
71846: GO 71852
// end ;
71848: GO 71817
71850: POP
71851: POP
// end ;
71852: LD_VAR 0 3
71856: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71857: LD_INT 0
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
// if not unit or not points then
71863: LD_VAR 0 1
71867: NOT
71868: PUSH
71869: LD_VAR 0 2
71873: NOT
71874: OR
71875: IFFALSE 71879
// exit ;
71877: GO 71969
// dist := 99999 ;
71879: LD_ADDR_VAR 0 5
71883: PUSH
71884: LD_INT 99999
71886: ST_TO_ADDR
// for i in points do
71887: LD_ADDR_VAR 0 4
71891: PUSH
71892: LD_VAR 0 2
71896: PUSH
71897: FOR_IN
71898: IFFALSE 71967
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71900: LD_ADDR_VAR 0 6
71904: PUSH
71905: LD_VAR 0 1
71909: PPUSH
71910: LD_VAR 0 4
71914: PUSH
71915: LD_INT 1
71917: ARRAY
71918: PPUSH
71919: LD_VAR 0 4
71923: PUSH
71924: LD_INT 2
71926: ARRAY
71927: PPUSH
71928: CALL_OW 297
71932: ST_TO_ADDR
// if tmpDist < dist then
71933: LD_VAR 0 6
71937: PUSH
71938: LD_VAR 0 5
71942: LESS
71943: IFFALSE 71965
// begin result := i ;
71945: LD_ADDR_VAR 0 3
71949: PUSH
71950: LD_VAR 0 4
71954: ST_TO_ADDR
// dist := tmpDist ;
71955: LD_ADDR_VAR 0 5
71959: PUSH
71960: LD_VAR 0 6
71964: ST_TO_ADDR
// end ; end ;
71965: GO 71897
71967: POP
71968: POP
// end ;
71969: LD_VAR 0 3
71973: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71974: LD_INT 0
71976: PPUSH
// uc_side := side ;
71977: LD_ADDR_OWVAR 20
71981: PUSH
71982: LD_VAR 0 1
71986: ST_TO_ADDR
// uc_nation := 3 ;
71987: LD_ADDR_OWVAR 21
71991: PUSH
71992: LD_INT 3
71994: ST_TO_ADDR
// vc_chassis := 25 ;
71995: LD_ADDR_OWVAR 37
71999: PUSH
72000: LD_INT 25
72002: ST_TO_ADDR
// vc_engine := engine_siberite ;
72003: LD_ADDR_OWVAR 39
72007: PUSH
72008: LD_INT 3
72010: ST_TO_ADDR
// vc_control := control_computer ;
72011: LD_ADDR_OWVAR 38
72015: PUSH
72016: LD_INT 3
72018: ST_TO_ADDR
// vc_weapon := 59 ;
72019: LD_ADDR_OWVAR 40
72023: PUSH
72024: LD_INT 59
72026: ST_TO_ADDR
// result := CreateVehicle ;
72027: LD_ADDR_VAR 0 5
72031: PUSH
72032: CALL_OW 45
72036: ST_TO_ADDR
// SetDir ( result , d ) ;
72037: LD_VAR 0 5
72041: PPUSH
72042: LD_VAR 0 4
72046: PPUSH
72047: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72051: LD_VAR 0 5
72055: PPUSH
72056: LD_VAR 0 2
72060: PPUSH
72061: LD_VAR 0 3
72065: PPUSH
72066: LD_INT 0
72068: PPUSH
72069: CALL_OW 48
// end ;
72073: LD_VAR 0 5
72077: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72078: LD_INT 0
72080: PPUSH
72081: PPUSH
72082: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72083: LD_ADDR_VAR 0 2
72087: PUSH
72088: LD_INT 0
72090: PUSH
72091: LD_INT 0
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72106: LD_VAR 0 1
72110: NOT
72111: PUSH
72112: LD_VAR 0 1
72116: PPUSH
72117: CALL_OW 264
72121: PUSH
72122: LD_INT 12
72124: PUSH
72125: LD_INT 51
72127: PUSH
72128: LD_INT 32
72130: PUSH
72131: LD_EXP 47
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: IN
72142: NOT
72143: OR
72144: IFFALSE 72148
// exit ;
72146: GO 72246
// for i := 1 to 3 do
72148: LD_ADDR_VAR 0 3
72152: PUSH
72153: DOUBLE
72154: LD_INT 1
72156: DEC
72157: ST_TO_ADDR
72158: LD_INT 3
72160: PUSH
72161: FOR_TO
72162: IFFALSE 72244
// begin tmp := GetCargo ( cargo , i ) ;
72164: LD_ADDR_VAR 0 4
72168: PUSH
72169: LD_VAR 0 1
72173: PPUSH
72174: LD_VAR 0 3
72178: PPUSH
72179: CALL_OW 289
72183: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72184: LD_ADDR_VAR 0 2
72188: PUSH
72189: LD_VAR 0 2
72193: PPUSH
72194: LD_VAR 0 3
72198: PPUSH
72199: LD_VAR 0 4
72203: PPUSH
72204: CALL_OW 1
72208: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72209: LD_ADDR_VAR 0 2
72213: PUSH
72214: LD_VAR 0 2
72218: PPUSH
72219: LD_INT 4
72221: PPUSH
72222: LD_VAR 0 2
72226: PUSH
72227: LD_INT 4
72229: ARRAY
72230: PUSH
72231: LD_VAR 0 4
72235: PLUS
72236: PPUSH
72237: CALL_OW 1
72241: ST_TO_ADDR
// end ;
72242: GO 72161
72244: POP
72245: POP
// end ;
72246: LD_VAR 0 2
72250: RET
// export function Length ( array ) ; begin
72251: LD_INT 0
72253: PPUSH
// result := array + 0 ;
72254: LD_ADDR_VAR 0 2
72258: PUSH
72259: LD_VAR 0 1
72263: PUSH
72264: LD_INT 0
72266: PLUS
72267: ST_TO_ADDR
// end ;
72268: LD_VAR 0 2
72272: RET
// export function PrepareArray ( array ) ; begin
72273: LD_INT 0
72275: PPUSH
// result := array diff 0 ;
72276: LD_ADDR_VAR 0 2
72280: PUSH
72281: LD_VAR 0 1
72285: PUSH
72286: LD_INT 0
72288: DIFF
72289: ST_TO_ADDR
// if not result [ 1 ] then
72290: LD_VAR 0 2
72294: PUSH
72295: LD_INT 1
72297: ARRAY
72298: NOT
72299: IFFALSE 72319
// result := Delete ( result , 1 ) ;
72301: LD_ADDR_VAR 0 2
72305: PUSH
72306: LD_VAR 0 2
72310: PPUSH
72311: LD_INT 1
72313: PPUSH
72314: CALL_OW 3
72318: ST_TO_ADDR
// end ; end_of_file
72319: LD_VAR 0 2
72323: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72324: LD_VAR 0 1
72328: PUSH
72329: LD_INT 200
72331: DOUBLE
72332: GREATEREQUAL
72333: IFFALSE 72341
72335: LD_INT 299
72337: DOUBLE
72338: LESSEQUAL
72339: IFTRUE 72343
72341: GO 72375
72343: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72344: LD_VAR 0 1
72348: PPUSH
72349: LD_VAR 0 2
72353: PPUSH
72354: LD_VAR 0 3
72358: PPUSH
72359: LD_VAR 0 4
72363: PPUSH
72364: LD_VAR 0 5
72368: PPUSH
72369: CALL 27175 0 5
72373: GO 72452
72375: LD_INT 300
72377: DOUBLE
72378: GREATEREQUAL
72379: IFFALSE 72387
72381: LD_INT 399
72383: DOUBLE
72384: LESSEQUAL
72385: IFTRUE 72389
72387: GO 72451
72389: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_VAR 0 2
72399: PPUSH
72400: LD_VAR 0 3
72404: PPUSH
72405: LD_VAR 0 4
72409: PPUSH
72410: LD_VAR 0 5
72414: PPUSH
72415: LD_VAR 0 6
72419: PPUSH
72420: LD_VAR 0 7
72424: PPUSH
72425: LD_VAR 0 8
72429: PPUSH
72430: LD_VAR 0 9
72434: PPUSH
72435: LD_VAR 0 10
72439: PPUSH
72440: LD_VAR 0 11
72444: PPUSH
72445: CALL 23504 0 11
72449: GO 72452
72451: POP
// end ;
72452: PPOPN 11
72454: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72455: LD_VAR 0 1
72459: PPUSH
72460: LD_VAR 0 2
72464: PPUSH
72465: LD_VAR 0 3
72469: PPUSH
72470: LD_VAR 0 4
72474: PPUSH
72475: LD_VAR 0 5
72479: PPUSH
72480: CALL 26911 0 5
// end ; end_of_file
72484: PPOPN 5
72486: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72487: LD_VAR 0 1
72491: PPUSH
72492: LD_VAR 0 2
72496: PPUSH
72497: LD_VAR 0 3
72501: PPUSH
72502: LD_VAR 0 4
72506: PPUSH
72507: LD_VAR 0 5
72511: PPUSH
72512: LD_VAR 0 6
72516: PPUSH
72517: CALL 11197 0 6
// end ;
72521: PPOPN 6
72523: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72524: LD_INT 0
72526: PPUSH
// begin if not units then
72527: LD_VAR 0 1
72531: NOT
72532: IFFALSE 72536
// exit ;
72534: GO 72536
// end ;
72536: PPOPN 7
72538: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72539: CALL 11168 0 0
// end ;
72543: PPOPN 1
72545: END
