// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1245 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1149 0 0
// PrepareDifficulty ;
 207: CALL 6446 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING 13c_JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 5776 0 2
 600: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 601: LD_ADDR_EXP 2
 605: PUSH
 606: LD_STRING 13c_Stevens
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 5776 0 2
 616: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 617: LD_ADDR_EXP 3
 621: PUSH
 622: LD_STRING 13c_Lisa
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 5776 0 2
 632: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 633: LD_ADDR_EXP 4
 637: PUSH
 638: LD_STRING 13c_Donaldson
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL 5776 0 2
 648: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_STRING 13c_Bobby
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: CALL 5776 0 2
 664: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING 13c_Cyrus
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 5776 0 2
 680: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_STRING 13c_Denis
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 5776 0 2
 696: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 697: LD_ADDR_EXP 8
 701: PUSH
 702: LD_STRING 13c_Brown
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5776 0 2
 712: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 713: LD_ADDR_EXP 9
 717: PUSH
 718: LD_STRING 13c_Gladstone
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 5776 0 2
 728: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 729: LD_ADDR_EXP 10
 733: PUSH
 734: LD_STRING 13c_Houten
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL 5776 0 2
 744: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 745: LD_ADDR_EXP 11
 749: PUSH
 750: LD_STRING 13c_Cornel
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 5776 0 2
 760: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 761: LD_ADDR_EXP 12
 765: PUSH
 766: LD_STRING 13c_Gary
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: CALL 5776 0 2
 776: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING 13c_Frank
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL 5776 0 2
 792: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 793: LD_ADDR_EXP 14
 797: PUSH
 798: LD_STRING 13c_Kikuchi
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: CALL 5776 0 2
 808: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 809: LD_ADDR_EXP 15
 813: PUSH
 814: LD_STRING Powell
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 5776 0 2
 824: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_EXP 1
 834: PUSH
 835: LD_EXP 2
 839: PUSH
 840: LD_EXP 3
 844: PUSH
 845: LD_EXP 4
 849: PUSH
 850: LD_EXP 5
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: LD_EXP 8
 869: PUSH
 870: LD_EXP 9
 874: PUSH
 875: LD_EXP 10
 879: PUSH
 880: LD_EXP 11
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_EXP 13
 894: PUSH
 895: LD_EXP 14
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 16
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 16
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: EMPTY
1262: PPUSH
1263: CALL_OW 30
1267: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1268: LD_ADDR_EXP 24
1272: PUSH
1273: LD_STRING 13_ResourcesInCargo13_1
1275: PPUSH
1276: EMPTY
1277: PPUSH
1278: CALL_OW 30
1282: ST_TO_ADDR
// cargoList = [ ] ;
1283: LD_ADDR_VAR 0 6
1287: PUSH
1288: EMPTY
1289: ST_TO_ADDR
// uc_side = 1 ;
1290: LD_ADDR_OWVAR 20
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// if vehicles > 0 then
1298: LD_VAR 0 5
1302: PUSH
1303: LD_INT 0
1305: GREATER
1306: IFFALSE 1661
// begin for i := 1 to vehicles do
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 5
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1473
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1326: LD_ADDR_OWVAR 21
1330: PUSH
1331: LD_VAR 0 5
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1346: LD_ADDR_OWVAR 37
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_VAR 0 2
1360: ARRAY
1361: PUSH
1362: LD_INT 2
1364: ARRAY
1365: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1366: LD_ADDR_OWVAR 39
1370: PUSH
1371: LD_VAR 0 5
1375: PUSH
1376: LD_VAR 0 2
1380: ARRAY
1381: PUSH
1382: LD_INT 3
1384: ARRAY
1385: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_VAR 0 2
1400: ARRAY
1401: PUSH
1402: LD_INT 4
1404: ARRAY
1405: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PUSH
1422: LD_INT 5
1424: ARRAY
1425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1426: LD_ADDR_OWVAR 41
1430: PUSH
1431: LD_INT 40
1433: ST_TO_ADDR
// veh = CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// end ;
1471: GO 1323
1473: POP
1474: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1475: LD_ADDR_VAR 0 6
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 1
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 21
1492: PUSH
1493: LD_INT 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 34
1502: PUSH
1503: LD_INT 12
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: ST_TO_ADDR
// if cargoList > 0 then
1520: LD_VAR 0 6
1524: PUSH
1525: LD_INT 0
1527: GREATER
1528: IFFALSE 1661
// for i = 1 to cargoList do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_VAR 0 6
1544: PUSH
1545: FOR_TO
1546: IFFALSE 1659
// begin if resources > 0 then
1548: LD_EXP 24
1552: PUSH
1553: LD_INT 0
1555: GREATER
1556: IFFALSE 1657
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1558: LD_VAR 0 6
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: LD_EXP 24
1576: PUSH
1577: LD_VAR 0 2
1581: ARRAY
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1591: LD_VAR 0 6
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_EXP 24
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 2
1618: ARRAY
1619: PPUSH
1620: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1624: LD_VAR 0 6
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PPUSH
1635: LD_INT 3
1637: PPUSH
1638: LD_EXP 24
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 3
1651: ARRAY
1652: PPUSH
1653: CALL_OW 291
// end ; end ;
1657: GO 1545
1659: POP
1660: POP
// end ; end ;
1661: LD_VAR 0 1
1665: RET
// export function PowellSupport ; var i , veh , un ; begin
1666: LD_INT 0
1668: PPUSH
1669: PPUSH
1670: PPUSH
1671: PPUSH
// for i = 1 to 3 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 3
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1887
// begin uc_nation = 1 ;
1688: LD_ADDR_OWVAR 21
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// uc_side = 1 ;
1696: LD_ADDR_OWVAR 20
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// vc_engine = 3 ;
1704: LD_ADDR_OWVAR 39
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// vc_control = 1 ;
1712: LD_ADDR_OWVAR 38
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1720: LD_ADDR_OWVAR 40
1724: PUSH
1725: LD_INT 9
1727: PUSH
1728: LD_INT 5
1730: PUSH
1731: LD_INT 4
1733: PUSH
1734: LD_INT 7
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 1
1749: PPUSH
1750: LD_INT 5
1752: PPUSH
1753: CALL_OW 12
1757: ARRAY
1758: ST_TO_ADDR
// if vc_weapon = 6 then
1759: LD_OWVAR 40
1763: PUSH
1764: LD_INT 6
1766: EQUAL
1767: IFFALSE 1779
// vc_chassis = 4 else
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
1777: GO 1787
// vc_chassis = 3 ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// veh = CreateVehicle ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: CALL_OW 45
1796: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// hc_gallery =  ;
1824: LD_ADDR_OWVAR 33
1828: PUSH
1829: LD_STRING 
1831: ST_TO_ADDR
// hc_name =  ;
1832: LD_ADDR_OWVAR 26
1836: PUSH
1837: LD_STRING 
1839: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1840: LD_INT 0
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 7
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: CALL_OW 380
// un = CreateHuman ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: CALL_OW 44
1870: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: LD_VAR 0 3
1880: PPUSH
1881: CALL_OW 52
// end ;
1885: GO 1685
1887: POP
1888: POP
// end ; end_of_file
1889: LD_VAR 0 1
1893: RET
// export function PrepareBurlak ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 7 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 7
1904: ST_TO_ADDR
// uc_nation = 3 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_engine = 3 ;
1913: LD_ADDR_OWVAR 39
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_control = 1 ;
1921: LD_ADDR_OWVAR 38
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_weapon = 46 ;
1929: LD_ADDR_OWVAR 40
1933: PUSH
1934: LD_INT 46
1936: ST_TO_ADDR
// vc_chassis = 24 ;
1937: LD_ADDR_OWVAR 37
1941: PUSH
1942: LD_INT 24
1944: ST_TO_ADDR
// Masha = CreateVehicle ;
1945: LD_ADDR_EXP 18
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1955: LD_EXP 18
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1970: LD_EXP 18
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1982: LD_ADDR_EXP 17
1986: PUSH
1987: LD_STRING Burlak
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 5776 0 2
1997: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1998: LD_EXP 17
2002: PPUSH
2003: LD_EXP 18
2007: PPUSH
2008: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2012: LD_EXP 18
2016: PPUSH
2017: LD_INT 107
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 114
// spawnBurlak = 1 ;
2027: LD_ADDR_EXP 27
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// end ;
2035: LD_VAR 0 1
2039: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
2045: PPUSH
// uc_side = 7 ;
2046: LD_ADDR_OWVAR 20
2050: PUSH
2051: LD_INT 7
2053: ST_TO_ADDR
// uc_nation = 3 ;
2054: LD_ADDR_OWVAR 21
2058: PUSH
2059: LD_INT 3
2061: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2062: LD_ADDR_EXP 19
2066: PUSH
2067: LD_STRING Gnyevko
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL 5776 0 2
2077: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2078: LD_ADDR_EXP 20
2082: PUSH
2083: LD_STRING Titov
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL 5776 0 2
2093: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2094: LD_ADDR_EXP 21
2098: PUSH
2099: LD_STRING Xavier2
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL 5776 0 2
2109: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2110: LD_ADDR_EXP 22
2114: PUSH
2115: LD_STRING Belkov
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL 5776 0 2
2125: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2126: LD_ADDR_EXP 23
2130: PUSH
2131: LD_STRING Lipshchin
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 5776 0 2
2141: ST_TO_ADDR
// for i = 1 to 5 do
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 5
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2244
// begin vc_engine = 3 ;
2158: LD_ADDR_OWVAR 39
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// vc_control = 1 ;
2166: LD_ADDR_OWVAR 38
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2174: LD_ADDR_OWVAR 40
2178: PUSH
2179: LD_INT 43
2181: PUSH
2182: LD_INT 44
2184: PUSH
2185: LD_INT 45
2187: PUSH
2188: LD_INT 49
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: CALL_OW 12
2207: ARRAY
2208: ST_TO_ADDR
// vc_chassis = 22 ;
2209: LD_ADDR_OWVAR 37
2213: PUSH
2214: LD_INT 22
2216: ST_TO_ADDR
// veh = CreateVehicle ;
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: CALL_OW 45
2226: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 3
2234: PPUSH
2235: LD_INT 0
2237: PPUSH
2238: CALL_OW 49
// end ;
2242: GO 2155
2244: POP
2245: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2246: LD_ADDR_VAR 0 4
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 7
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 58
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PPUSH
2282: CALL_OW 69
2286: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2287: LD_EXP 19
2291: PPUSH
2292: LD_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2305: LD_EXP 20
2309: PPUSH
2310: LD_VAR 0 4
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2323: LD_EXP 21
2327: PPUSH
2328: LD_VAR 0 4
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PPUSH
2337: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2341: LD_EXP 22
2345: PPUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: PPUSH
2355: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2359: LD_EXP 23
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 5
2371: ARRAY
2372: PPUSH
2373: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2377: LD_EXP 19
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2389: LD_EXP 20
2393: PUSH
2394: LD_EXP 23
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PPUSH
2403: LD_INT 9
2405: PPUSH
2406: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: LD_INT 22
2417: PUSH
2418: LD_INT 7
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PPUSH
2425: CALL_OW 69
2429: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2430: LD_VAR 0 4
2434: PPUSH
2435: LD_INT 107
2437: PPUSH
2438: LD_INT 118
2440: PPUSH
2441: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_INT 34
2459: PUSH
2460: LD_INT 49
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 72
2471: PPUSH
2472: LD_EXP 18
2476: PPUSH
2477: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2481: LD_VAR 0 4
2485: PPUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 34
2491: PUSH
2492: LD_INT 49
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 72
2507: PPUSH
2508: LD_INT 107
2510: PPUSH
2511: LD_INT 118
2513: PPUSH
2514: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_INT 34
2525: PUSH
2526: LD_INT 49
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: PUSH
2538: LD_INT 0
2540: EQUAL
2541: PUSH
2542: LD_EXP 18
2546: PPUSH
2547: CALL_OW 303
2551: OR
2552: IFFALSE 2445
// repeat wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: LD_EXP 17
2585: DIFF
2586: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2587: LD_VAR 0 4
2591: PPUSH
2592: LD_INT 107
2594: PPUSH
2595: LD_INT 118
2597: PPUSH
2598: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2602: LD_EXP 17
2606: PPUSH
2607: CALL_OW 302
2611: PUSH
2612: LD_EXP 17
2616: PPUSH
2617: CALL_OW 310
2621: NOT
2622: AND
2623: IFFALSE 2640
// ComMoveXY ( Burlak , 107 , 118 ) ;
2625: LD_EXP 17
2629: PPUSH
2630: LD_INT 107
2632: PPUSH
2633: LD_INT 118
2635: PPUSH
2636: CALL_OW 111
// until not tmp ;
2640: LD_VAR 0 4
2644: NOT
2645: IFFALSE 2554
// end ; end_of_file
2647: LD_VAR 0 1
2651: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2652: LD_EXP 31
2656: IFFALSE 2832
2658: GO 2660
2660: DISABLE
2661: LD_INT 0
2663: PPUSH
2664: PPUSH
// begin enable ;
2665: ENABLE
// rnd = 0 ;
2666: LD_ADDR_VAR 0 2
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// uc_side = 8 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 8
2681: ST_TO_ADDR
// uc_nation = 2 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// hc_name =  ;
2690: LD_ADDR_OWVAR 26
2694: PUSH
2695: LD_STRING 
2697: ST_TO_ADDR
// hc_gallery =  ;
2698: LD_ADDR_OWVAR 33
2702: PUSH
2703: LD_STRING 
2705: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 10
2714: PPUSH
2715: CALL_OW 380
// un = CreateHuman ;
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_INT 8
2736: PUSH
2737: LD_INT 9
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 12
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetTag ( un , 1 ) ;
2763: LD_VAR 0 1
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: PPUSH
2783: LD_EXP 31
2787: PPUSH
2788: CALL_OW 12
2792: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_EXP 31
2817: PUSH
2818: LD_VAR 0 2
2822: ARRAY
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 158
// end ;
2832: PPOPN 2
2834: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2835: LD_INT 22
2837: PUSH
2838: LD_INT 8
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 61
2850: PUSH
2851: EMPTY
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 33
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: IFFALSE 2950
2879: GO 2881
2881: DISABLE
2882: LD_INT 0
2884: PPUSH
// begin enable ;
2885: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_INT 22
2893: PUSH
2894: LD_INT 8
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: LD_INT 61
2906: PUSH
2907: EMPTY
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 33
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2948
// Connect ( i ) ;
2937: LD_VAR 0 1
2941: PPUSH
2942: CALL 5891 0 1
2946: GO 2934
2948: POP
2949: POP
// end ; end_of_file
2950: PPOPN 1
2952: END
// every 1 do
2953: GO 2955
2955: DISABLE
// begin InGameOn ;
2956: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 21
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: PPUSH
3026: LD_INT 69
3028: PPUSH
3029: LD_INT 94
3031: PPUSH
3032: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3036: LD_EXP 1
3040: PPUSH
3041: LD_STRING D2-JMM-1
3043: PPUSH
3044: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3085: LD_EXP 2
3089: PPUSH
3090: LD_STRING D2-Huck-1
3092: PPUSH
3093: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3134: LD_EXP 1
3138: PPUSH
3139: LD_STRING D2-JMM-2
3141: PPUSH
3142: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3146: LD_INT 22
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_INT 21
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 69
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL_OW 87
// InGameOff ;
3183: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3187: LD_STRING M1
3189: PPUSH
3190: CALL_OW 337
// SaveForQuickRestart ;
3194: CALL_OW 22
// end ;
3198: END
// every 10 10$0 do
3199: GO 3201
3201: DISABLE
// begin DialogueOn ;
3202: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3206: LD_EXP 15
3210: PPUSH
3211: LD_STRING D3-Pow-1
3213: PPUSH
3214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3218: LD_EXP 1
3222: PPUSH
3223: LD_STRING D3-JMM-1
3225: PPUSH
3226: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3230: LD_EXP 15
3234: PPUSH
3235: LD_STRING D3-Pow-2
3237: PPUSH
3238: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3242: LD_EXP 1
3246: PPUSH
3247: LD_STRING D3-JMM-2
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3254: LD_EXP 15
3258: PPUSH
3259: LD_STRING D3-Pow-3
3261: PPUSH
3262: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3266: LD_EXP 1
3270: PPUSH
3271: LD_STRING D3-JMM-3
3273: PPUSH
3274: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3278: LD_EXP 15
3282: PPUSH
3283: LD_STRING D3-Pow-4
3285: PPUSH
3286: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D3-JMM-4
3297: PPUSH
3298: CALL_OW 88
// DialogueOff ;
3302: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3306: LD_STRING M2
3308: PPUSH
3309: CALL_OW 337
// wait ( 2 2$30 ) ;
3313: LD_INT 5250
3315: PPUSH
3316: CALL_OW 67
// PrepareBurlak ;
3320: CALL 1894 0 0
// BurlakArmy ;
3324: CALL 2040 0 0
// end ;
3328: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3329: LD_INT 1
3331: PPUSH
3332: LD_EXP 18
3336: PPUSH
3337: CALL_OW 292
3341: IFFALSE 3500
3343: GO 3345
3345: DISABLE
// begin DialogueOn ;
3346: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 26
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 25
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: LD_INT 25
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 25
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: LD_INT 25
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PPUSH
3450: LD_STRING D5-Sol1-1
3452: PPUSH
3453: LD_STRING D5-FSol1-1
3455: PPUSH
3456: CALL 6245 0 3
// Say ( JMM , D5-JMM-1 ) ;
3460: LD_EXP 1
3464: PPUSH
3465: LD_STRING D5-JMM-1
3467: PPUSH
3468: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3472: LD_EXP 17
3476: PPUSH
3477: LD_STRING DAmer-Bur-1
3479: PPUSH
3480: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3484: LD_EXP 1
3488: PPUSH
3489: LD_STRING DAmer-JMM-1
3491: PPUSH
3492: CALL_OW 88
// DialogueOff ;
3496: CALL_OW 7
// end ;
3500: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 70
3518: IFFALSE 3917
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
// begin enable ;
3526: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 22
3537: PUSH
3538: LD_INT 7
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3915
// begin if i = Burlak or i = Masha then
3553: LD_VAR 0 1
3557: PUSH
3558: LD_EXP 17
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: LD_EXP 18
3573: EQUAL
3574: OR
3575: IFFALSE 3722
// begin RemoveUnit ( i ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 64
// DialogueOn ;
3586: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5a-JMM-1
3597: PPUSH
3598: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 26
3614: PUSH
3615: LD_INT 1
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 25
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 25
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 25
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 25
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 5
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PPUSH
3688: CALL_OW 69
3692: PPUSH
3693: LD_STRING D5a-Sol1-1
3695: PPUSH
3696: LD_STRING D5-FSol1-1
3698: PPUSH
3699: CALL 6245 0 3
// DialogueOff ;
3703: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3707: LD_STRING M2b
3709: PPUSH
3710: CALL_OW 337
// spawnBurlak = 0 ;
3714: LD_ADDR_EXP 27
3718: PUSH
3719: LD_INT 0
3721: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3722: LD_VAR 0 1
3726: PPUSH
3727: CALL_OW 247
3731: PUSH
3732: LD_INT 2
3734: EQUAL
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 263
3745: PUSH
3746: LD_INT 1
3748: EQUAL
3749: AND
3750: IFFALSE 3878
// begin case IsDrivenBy ( i ) of Gnyevko :
3752: LD_VAR 0 1
3756: PPUSH
3757: CALL_OW 311
3761: PUSH
3762: LD_EXP 19
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3785
3772: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3773: LD_INT 1
3775: PPUSH
3776: LD_STRING 13_Gnyevko_1
3778: PPUSH
3779: CALL_OW 39
3783: GO 3878
3785: LD_EXP 20
3789: DOUBLE
3790: EQUAL
3791: IFTRUE 3795
3793: GO 3808
3795: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3796: LD_INT 1
3798: PPUSH
3799: LD_STRING 13_Titov_1
3801: PPUSH
3802: CALL_OW 39
3806: GO 3878
3808: LD_EXP 21
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3831
3818: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3819: LD_INT 1
3821: PPUSH
3822: LD_STRING 13_Xavier_1
3824: PPUSH
3825: CALL_OW 39
3829: GO 3878
3831: LD_EXP 22
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 3854
3841: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3842: LD_INT 1
3844: PPUSH
3845: LD_STRING 13_Belkov_1
3847: PPUSH
3848: CALL_OW 39
3852: GO 3878
3854: LD_EXP 23
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3877
3864: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3865: LD_INT 1
3867: PPUSH
3868: LD_STRING 13_Lipshchin_1
3870: PPUSH
3871: CALL_OW 39
3875: GO 3878
3877: POP
// end ; if GetWeapon ( i ) = 49 then
3878: LD_VAR 0 1
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_INT 49
3890: EQUAL
3891: IFFALSE 3904
// DestroyUnit ( i ) else
3893: LD_VAR 0 1
3897: PPUSH
3898: CALL_OW 65
3902: GO 3913
// RemoveUnit ( i ) ;
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 64
// end ;
3913: GO 3550
3915: POP
3916: POP
// end ;
3917: PPOPN 1
3919: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3920: LD_EXP 17
3924: PPUSH
3925: CALL_OW 302
3929: PUSH
3930: LD_EXP 18
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 500
3942: LESS
3943: AND
3944: PUSH
3945: LD_EXP 18
3949: PPUSH
3950: CALL_OW 255
3954: PUSH
3955: LD_INT 7
3957: EQUAL
3958: AND
3959: IFFALSE 3979
3961: GO 3963
3963: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3964: LD_EXP 17
3968: PPUSH
3969: LD_INT 107
3971: PPUSH
3972: LD_INT 118
3974: PPUSH
3975: CALL_OW 111
3979: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3980: LD_EXP 17
3984: PPUSH
3985: CALL_OW 301
3989: PUSH
3990: LD_EXP 27
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: AND
3999: IFFALSE 4132
4001: GO 4003
4003: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D5b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4016: LD_INT 22
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 26
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 25
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 2
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 25
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PPUSH
4107: LD_STRING D5b-Sol1-1
4109: PPUSH
4110: LD_STRING 
4112: PPUSH
4113: CALL 6245 0 3
// ChangeMissionObjectives ( M2a ) ;
4117: LD_STRING M2a
4119: PPUSH
4120: CALL_OW 337
// burlakStatus = 1 ;
4124: LD_ADDR_EXP 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// end ;
4132: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4133: LD_EXP 2
4137: PPUSH
4138: CALL_OW 301
4142: IFFALSE 4279
4144: GO 4146
4146: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4147: LD_EXP 1
4151: PPUSH
4152: LD_STRING D6-JMM-1
4154: PPUSH
4155: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4159: LD_INT 22
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: LD_INT 1
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 1
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 25
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PPUSH
4250: LD_STRING D6-Sol1-1
4252: PPUSH
4253: LD_STRING 
4255: PPUSH
4256: CALL 6245 0 3
// Say ( JMM , D6-JMM-2 ) ;
4260: LD_EXP 1
4264: PPUSH
4265: LD_STRING D6-JMM-2
4267: PPUSH
4268: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4272: LD_STRING M1a
4274: PPUSH
4275: CALL_OW 337
// end ;
4279: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4280: LD_INT 25
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: CALL_OW 321
4290: PUSH
4291: LD_INT 2
4293: EQUAL
4294: IFFALSE 4311
4296: GO 4298
4298: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4299: LD_EXP 2
4303: PPUSH
4304: LD_STRING D6-Huck-2
4306: PPUSH
4307: CALL_OW 88
// end ;
4311: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4312: LD_INT 22
4314: PUSH
4315: LD_INT 1
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 34
4327: PUSH
4328: LD_INT 8
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 35
4337: PUSH
4338: LD_INT 8
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: PUSH
4359: LD_INT 0
4361: GREATER
4362: IFFALSE 4554
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
// begin enable ;
4371: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4372: LD_ADDR_VAR 0 1
4376: PUSH
4377: LD_INT 5
4379: PPUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 57
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 5
4441: PPUSH
4442: LD_INT 22
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 21
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 30
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 57
4477: PUSH
4478: EMPTY
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 70
4495: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4496: LD_VAR 0 1
4500: PUSH
4501: LD_INT 0
4503: GREATER
4504: PUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 0
4512: GREATER
4513: AND
4514: IFFALSE 4554
// begin disable ;
4516: DISABLE
// DialogueOn ;
4517: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4521: LD_EXP 1
4525: PPUSH
4526: LD_STRING D7-JMM-1
4528: PPUSH
4529: CALL_OW 88
// DialogueOff ;
4533: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4537: LD_STRING M4
4539: PPUSH
4540: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4544: LD_INT 5
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 424
// end ; end ;
4554: PPOPN 2
4556: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4557: LD_INT 6
4559: PPUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: PUSH
4589: LD_INT 0
4591: GREATER
4592: PUSH
4593: LD_EXP 37
4597: PUSH
4598: LD_INT 1
4600: EQUAL
4601: AND
4602: PUSH
4603: LD_EXP 29
4607: PUSH
4608: LD_INT 0
4610: EQUAL
4611: AND
4612: IFFALSE 4677
4614: GO 4616
4616: DISABLE
// begin enable ;
4617: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4618: LD_ADDR_EXP 26
4622: PUSH
4623: LD_INT 6
4625: PPUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 4
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 70
4654: PUSH
4655: LD_INT 1
4657: ARRAY
4658: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4659: LD_INT 6
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 424
// radationResearched = 1 ;
4669: LD_ADDR_EXP 29
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// end ;
4677: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4678: LD_EXP 26
4682: PPUSH
4683: CALL_OW 301
4687: PUSH
4688: LD_EXP 29
4692: PUSH
4693: LD_INT 1
4695: EQUAL
4696: AND
4697: IFFALSE 4733
4699: GO 4701
4701: DISABLE
// begin enable ;
4702: ENABLE
// radationResearched = 0 ;
4703: LD_ADDR_EXP 29
4707: PUSH
4708: LD_INT 0
4710: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4711: LD_INT 6
4713: PPUSH
4714: LD_INT 1
4716: PPUSH
4717: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4721: LD_EXP 1
4725: PPUSH
4726: LD_STRING D9a-JMM-1
4728: PPUSH
4729: CALL_OW 88
// end ; end_of_file
4733: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4734: LD_VAR 0 5
4738: PUSH
4739: LD_INT 8
4741: EQUAL
4742: PUSH
4743: LD_EXP 35
4747: PUSH
4748: LD_INT 0
4750: EQUAL
4751: AND
4752: IFFALSE 4805
// begin eventVar1 = 1 ;
4754: LD_ADDR_EXP 35
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// DialogueOn ;
4762: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4766: LD_EXP 1
4770: PPUSH
4771: LD_STRING D6a-JMM-1
4773: PPUSH
4774: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4778: LD_EXP 15
4782: PPUSH
4783: LD_STRING D6a-Pow-1
4785: PPUSH
4786: CALL_OW 94
// DialogueOff ;
4790: CALL_OW 7
// wait ( 3 3$0 ) ;
4794: LD_INT 6300
4796: PPUSH
4797: CALL_OW 67
// PowellSupport ;
4801: CALL 1666 0 0
// end ; end ;
4805: PPOPN 5
4807: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4808: LD_VAR 0 1
4812: PUSH
4813: LD_EXP 1
4817: EQUAL
4818: IFFALSE 4827
// YouLost ( JMM ) ;
4820: LD_STRING JMM
4822: PPUSH
4823: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4827: LD_VAR 0 1
4831: PPUSH
4832: CALL_OW 264
4836: PUSH
4837: LD_INT 31
4839: EQUAL
4840: IFFALSE 4856
// achivCounter := achivCounter + 1 ;
4842: LD_ADDR_EXP 41
4846: PUSH
4847: LD_EXP 41
4851: PUSH
4852: LD_INT 1
4854: PLUS
4855: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4856: LD_VAR 0 1
4860: PPUSH
4861: CALL_OW 255
4865: PUSH
4866: LD_INT 1
4868: NONEQUAL
4869: PUSH
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 247
4879: PUSH
4880: LD_INT 2
4882: EQUAL
4883: AND
4884: IFFALSE 4900
// destroyCounter := destroyCounter + 1 ;
4886: LD_ADDR_EXP 42
4890: PUSH
4891: LD_EXP 42
4895: PUSH
4896: LD_INT 1
4898: PLUS
4899: ST_TO_ADDR
// end ;
4900: PPOPN 1
4902: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4903: LD_VAR 0 2
4907: PUSH
4908: LD_EXP 18
4912: EQUAL
4913: IFFALSE 4922
// SetAchievement ( ACH_MASHA ) ;
4915: LD_STRING ACH_MASHA
4917: PPUSH
4918: CALL_OW 543
// end ;
4922: PPOPN 4
4924: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 264
4934: PUSH
4935: LD_INT 8
4937: EQUAL
4938: PUSH
4939: LD_EXP 36
4943: PUSH
4944: LD_INT 0
4946: EQUAL
4947: AND
4948: IFFALSE 5017
// begin eventVar2 = 1 ;
4950: LD_ADDR_EXP 36
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// DialogueOn ;
4958: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4962: LD_EXP 1
4966: PPUSH
4967: LD_STRING D6b-JMM-1
4969: PPUSH
4970: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_STRING D6b-Pow-1
4981: PPUSH
4982: CALL_OW 94
// DialogueOff ;
4986: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4990: LD_INT 5
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5000: LD_INT 7
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5010: LD_STRING M3
5012: PPUSH
5013: CALL_OW 337
// end ; end ;
5017: PPOPN 2
5019: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: LD_INT 5
5032: PPUSH
5033: CALL_OW 309
5037: PUSH
5038: LD_EXP 37
5042: PUSH
5043: LD_INT 0
5045: EQUAL
5046: AND
5047: IFFALSE 5265
// begin eventVar3 = 1 ;
5049: LD_ADDR_EXP 37
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5057: LD_INT 175
5059: PPUSH
5060: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5064: LD_INT 7
5066: PPUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PUSH
5087: LD_INT 34
5089: PUSH
5090: LD_INT 11
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 70
5106: PUSH
5107: LD_INT 0
5109: GREATER
5110: IFFALSE 5129
// begin radarOnSpot = 1 ;
5112: LD_ADDR_EXP 30
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5120: LD_STRING M3a
5122: PPUSH
5123: CALL_OW 337
// end else
5127: GO 5136
// begin ChangeMissionObjectives ( M3b ) ;
5129: LD_STRING M3b
5131: PPUSH
5132: CALL_OW 337
// end ; DialogueOn ;
5136: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5140: LD_EXP 2
5144: PPUSH
5145: LD_STRING D8-Huck-1
5147: PPUSH
5148: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5152: LD_EXP 1
5156: PPUSH
5157: LD_STRING D8-JMM-1
5159: PPUSH
5160: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5164: LD_EXP 2
5168: PPUSH
5169: LD_STRING D8-Huck-2
5171: PPUSH
5172: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5176: LD_EXP 1
5180: PPUSH
5181: LD_STRING D8-JMM-2
5183: PPUSH
5184: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5188: LD_EXP 2
5192: PPUSH
5193: LD_STRING D8-Huck-3
5195: PPUSH
5196: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5200: LD_EXP 1
5204: PPUSH
5205: LD_STRING D8-JMM-3
5207: PPUSH
5208: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5212: LD_EXP 2
5216: PPUSH
5217: LD_STRING D8-Huck-4
5219: PPUSH
5220: CALL_OW 88
// DialogueOff ;
5224: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5228: LD_INT 5
5230: PPUSH
5231: LD_INT 0
5233: PPUSH
5234: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5238: LD_INT 7
5240: PPUSH
5241: LD_INT 0
5243: PPUSH
5244: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5248: LD_INT 6
5250: PPUSH
5251: LD_INT 1
5253: PPUSH
5254: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5258: LD_STRING M5
5260: PPUSH
5261: CALL_OW 337
// end ; end ;
5265: PPOPN 3
5267: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5268: LD_EXP 26
5272: PPUSH
5273: CALL_OW 302
5277: PUSH
5278: LD_VAR 0 2
5282: PUSH
5283: LD_EXP 26
5287: EQUAL
5288: AND
5289: PUSH
5290: LD_EXP 38
5294: PUSH
5295: LD_INT 0
5297: EQUAL
5298: AND
5299: PUSH
5300: LD_EXP 37
5304: PUSH
5305: LD_INT 1
5307: EQUAL
5308: AND
5309: IFFALSE 5355
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5311: LD_VAR 0 1
5315: PPUSH
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 268
5323: PUSH
5324: LD_INT 11
5326: EQUAL
5327: PUSH
5328: LD_VAR 0 1
5332: PPUSH
5333: LD_INT 2
5335: PPUSH
5336: CALL_OW 268
5340: PUSH
5341: LD_INT 11
5343: EQUAL
5344: OR
5345: IFFALSE 5355
// eventVar4 = 1 ;
5347: LD_ADDR_EXP 38
5351: PUSH
5352: LD_INT 1
5354: ST_TO_ADDR
// end ;
5355: PPOPN 2
5357: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
// begin if GetNation ( unit ) = 2 then
5362: LD_VAR 0 1
5366: PPUSH
5367: CALL_OW 248
5371: PUSH
5372: LD_INT 2
5374: EQUAL
5375: IFFALSE 5653
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5377: LD_ADDR_EXP 32
5381: PUSH
5382: LD_EXP 32
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ST_TO_ADDR
// for i := 1 to sibDeposits do
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: DOUBLE
5397: LD_INT 1
5399: DEC
5400: ST_TO_ADDR
5401: LD_EXP 31
5405: PUSH
5406: FOR_TO
5407: IFFALSE 5509
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5409: LD_EXP 31
5413: PUSH
5414: LD_VAR 0 4
5418: ARRAY
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PUSH
5424: LD_VAR 0 2
5428: EQUAL
5429: PUSH
5430: LD_EXP 31
5434: PUSH
5435: LD_VAR 0 4
5439: ARRAY
5440: PUSH
5441: LD_INT 2
5443: ARRAY
5444: PUSH
5445: LD_VAR 0 3
5449: EQUAL
5450: AND
5451: IFFALSE 5507
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5453: LD_ADDR_EXP 31
5457: PUSH
5458: LD_EXP 31
5462: PPUSH
5463: LD_VAR 0 4
5467: PUSH
5468: EMPTY
5469: LIST
5470: PUSH
5471: LD_INT 1
5473: ARRAY
5474: PPUSH
5475: CALL_OW 3
5479: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5480: LD_ADDR_EXP 31
5484: PUSH
5485: LD_EXP 31
5489: PPUSH
5490: LD_VAR 0 4
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: LD_INT 2
5500: ARRAY
5501: PPUSH
5502: CALL_OW 3
5506: ST_TO_ADDR
// end ;
5507: GO 5406
5509: POP
5510: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5511: LD_EXP 39
5515: PUSH
5516: LD_INT 0
5518: EQUAL
5519: PUSH
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL_OW 428
5534: PUSH
5535: LD_INT 22
5537: PUSH
5538: LD_INT 1
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PPUSH
5545: CALL_OW 69
5549: IN
5550: AND
5551: IFFALSE 5653
// begin eventVar5 = 1 ;
5553: LD_ADDR_EXP 39
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// DialogueOn ;
5561: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5565: LD_EXP 2
5569: PPUSH
5570: LD_STRING D4-Sci1-1
5572: PPUSH
5573: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5577: LD_EXP 1
5581: PPUSH
5582: LD_STRING D4-JMM-1
5584: PPUSH
5585: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5589: LD_EXP 2
5593: PPUSH
5594: LD_STRING D4-Sci1-2
5596: PPUSH
5597: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5601: LD_EXP 1
5605: PPUSH
5606: LD_STRING D4-JMM-2
5608: PPUSH
5609: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5613: LD_EXP 2
5617: PPUSH
5618: LD_STRING D4-Sci1-3
5620: PPUSH
5621: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5625: LD_EXP 1
5629: PPUSH
5630: LD_STRING D4-JMM-3
5632: PPUSH
5633: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5637: LD_EXP 1
5641: PPUSH
5642: LD_STRING D4-JMM-3a
5644: PPUSH
5645: CALL_OW 88
// DialogueOff ;
5649: CALL_OW 7
// end ; end ; end ;
5653: PPOPN 5
5655: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5656: LD_VAR 0 1
5660: PPUSH
5661: CALL_OW 255
5665: PUSH
5666: LD_INT 1
5668: EQUAL
5669: PUSH
5670: LD_VAR 0 1
5674: PPUSH
5675: CALL_OW 266
5679: PUSH
5680: LD_INT 0
5682: EQUAL
5683: AND
5684: PUSH
5685: LD_INT 22
5687: PUSH
5688: LD_INT 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 21
5697: PUSH
5698: LD_INT 3
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 2
5707: PUSH
5708: LD_INT 30
5710: PUSH
5711: LD_INT 0
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 30
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 69
5742: PUSH
5743: LD_INT 1
5745: EQUAL
5746: AND
5747: IFFALSE 5761
// SetBName ( building , omega ) ;
5749: LD_VAR 0 1
5753: PPUSH
5754: LD_STRING omega
5756: PPUSH
5757: CALL_OW 500
// end ;
5761: PPOPN 2
5763: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5764: LD_VAR 0 1
5768: PPUSH
5769: CALL 12857 0 1
// end ; end_of_file
5773: PPOPN 1
5775: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5776: LD_INT 0
5778: PPUSH
5779: PPUSH
// if exist_mode then
5780: LD_VAR 0 2
5784: IFFALSE 5803
// unit := CreateCharacter ( ident ) else
5786: LD_ADDR_VAR 0 4
5790: PUSH
5791: LD_VAR 0 1
5795: PPUSH
5796: CALL_OW 34
5800: ST_TO_ADDR
5801: GO 5818
// unit := NewCharacter ( ident ) ;
5803: LD_ADDR_VAR 0 4
5807: PUSH
5808: LD_VAR 0 1
5812: PPUSH
5813: CALL_OW 25
5817: ST_TO_ADDR
// result := unit ;
5818: LD_ADDR_VAR 0 3
5822: PUSH
5823: LD_VAR 0 4
5827: ST_TO_ADDR
// end ;
5828: LD_VAR 0 3
5832: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5833: LD_INT 0
5835: PPUSH
// vc_chassis := chassis ;
5836: LD_ADDR_OWVAR 37
5840: PUSH
5841: LD_VAR 0 1
5845: ST_TO_ADDR
// vc_engine := engine ;
5846: LD_ADDR_OWVAR 39
5850: PUSH
5851: LD_VAR 0 2
5855: ST_TO_ADDR
// vc_control := control ;
5856: LD_ADDR_OWVAR 38
5860: PUSH
5861: LD_VAR 0 3
5865: ST_TO_ADDR
// vc_weapon := weapon ;
5866: LD_ADDR_OWVAR 40
5870: PUSH
5871: LD_VAR 0 4
5875: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5876: LD_ADDR_OWVAR 41
5880: PUSH
5881: LD_VAR 0 5
5885: ST_TO_ADDR
// end ;
5886: LD_VAR 0 6
5890: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
5897: PPUSH
5898: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5899: LD_VAR 0 1
5903: NOT
5904: PUSH
5905: LD_VAR 0 1
5909: PPUSH
5910: CALL_OW 263
5914: PUSH
5915: LD_INT 2
5917: EQUAL
5918: NOT
5919: OR
5920: IFFALSE 5924
// exit ;
5922: GO 6240
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5924: LD_ADDR_VAR 0 6
5928: PUSH
5929: LD_INT 22
5931: PUSH
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 255
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: LD_INT 30
5951: PUSH
5952: LD_INT 36
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 34
5961: PUSH
5962: LD_INT 31
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 69
5982: ST_TO_ADDR
// if not tmp then
5983: LD_VAR 0 6
5987: NOT
5988: IFFALSE 5992
// exit ;
5990: GO 6240
// result := [ ] ;
5992: LD_ADDR_VAR 0 2
5996: PUSH
5997: EMPTY
5998: ST_TO_ADDR
// for i in tmp do
5999: LD_ADDR_VAR 0 3
6003: PUSH
6004: LD_VAR 0 6
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6081
// begin t := UnitsInside ( i ) ;
6012: LD_ADDR_VAR 0 4
6016: PUSH
6017: LD_VAR 0 3
6021: PPUSH
6022: CALL_OW 313
6026: ST_TO_ADDR
// if t then
6027: LD_VAR 0 4
6031: IFFALSE 6079
// for j in t do
6033: LD_ADDR_VAR 0 7
6037: PUSH
6038: LD_VAR 0 4
6042: PUSH
6043: FOR_IN
6044: IFFALSE 6077
// result := Insert ( result , result + 1 , j ) ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 2
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: PPUSH
6065: LD_VAR 0 7
6069: PPUSH
6070: CALL_OW 2
6074: ST_TO_ADDR
6075: GO 6043
6077: POP
6078: POP
// end ;
6079: GO 6009
6081: POP
6082: POP
// if not result then
6083: LD_VAR 0 2
6087: NOT
6088: IFFALSE 6092
// exit ;
6090: GO 6240
// mech := result [ 1 ] ;
6092: LD_ADDR_VAR 0 5
6096: PUSH
6097: LD_VAR 0 2
6101: PUSH
6102: LD_INT 1
6104: ARRAY
6105: ST_TO_ADDR
// if result > 1 then
6106: LD_VAR 0 2
6110: PUSH
6111: LD_INT 1
6113: GREATER
6114: IFFALSE 6226
// for i = 2 to result do
6116: LD_ADDR_VAR 0 3
6120: PUSH
6121: DOUBLE
6122: LD_INT 2
6124: DEC
6125: ST_TO_ADDR
6126: LD_VAR 0 2
6130: PUSH
6131: FOR_TO
6132: IFFALSE 6224
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6134: LD_ADDR_VAR 0 4
6138: PUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_VAR 0 3
6148: ARRAY
6149: PPUSH
6150: LD_INT 3
6152: PPUSH
6153: CALL_OW 259
6157: PUSH
6158: LD_VAR 0 2
6162: PUSH
6163: LD_VAR 0 3
6167: ARRAY
6168: PPUSH
6169: CALL_OW 432
6173: MINUS
6174: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6175: LD_VAR 0 4
6179: PUSH
6180: LD_VAR 0 5
6184: PPUSH
6185: LD_INT 3
6187: PPUSH
6188: CALL_OW 259
6192: PUSH
6193: LD_VAR 0 5
6197: PPUSH
6198: CALL_OW 432
6202: MINUS
6203: GREATEREQUAL
6204: IFFALSE 6222
// mech := result [ i ] ;
6206: LD_ADDR_VAR 0 5
6210: PUSH
6211: LD_VAR 0 2
6215: PUSH
6216: LD_VAR 0 3
6220: ARRAY
6221: ST_TO_ADDR
// end ;
6222: GO 6131
6224: POP
6225: POP
// ComLinkTo ( vehicle , mech ) ;
6226: LD_VAR 0 1
6230: PPUSH
6231: LD_VAR 0 5
6235: PPUSH
6236: CALL_OW 135
// end ;
6240: LD_VAR 0 2
6244: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6245: LD_INT 0
6247: PPUSH
6248: PPUSH
6249: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6250: LD_ADDR_VAR 0 1
6254: PUSH
6255: LD_VAR 0 1
6259: PUSH
6260: LD_EXP 1
6264: PUSH
6265: LD_EXP 2
6269: PUSH
6270: LD_EXP 3
6274: PUSH
6275: LD_EXP 4
6279: PUSH
6280: LD_EXP 5
6284: PUSH
6285: LD_EXP 6
6289: PUSH
6290: LD_EXP 7
6294: PUSH
6295: LD_EXP 8
6299: PUSH
6300: LD_EXP 9
6304: PUSH
6305: LD_EXP 10
6309: PUSH
6310: LD_EXP 11
6314: PUSH
6315: LD_EXP 12
6319: PUSH
6320: LD_EXP 13
6324: PUSH
6325: LD_EXP 14
6329: PUSH
6330: LD_EXP 15
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: DIFF
6352: ST_TO_ADDR
// if not characters then
6353: LD_VAR 0 1
6357: NOT
6358: IFFALSE 6362
// exit ;
6360: GO 6441
// speaker := characters [ rand ( 1 , characters ) ] ;
6362: LD_ADDR_VAR 0 6
6366: PUSH
6367: LD_VAR 0 1
6371: PUSH
6372: LD_INT 1
6374: PPUSH
6375: LD_VAR 0 1
6379: PPUSH
6380: CALL_OW 12
6384: ARRAY
6385: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6386: LD_VAR 0 6
6390: PPUSH
6391: CALL_OW 258
6395: PUSH
6396: LD_INT 1
6398: EQUAL
6399: IFFALSE 6417
// Say ( speaker , dialogMID ) else
6401: LD_VAR 0 6
6405: PPUSH
6406: LD_VAR 0 2
6410: PPUSH
6411: CALL_OW 88
6415: GO 6431
// Say ( speaker , dialogFID ) ;
6417: LD_VAR 0 6
6421: PPUSH
6422: LD_VAR 0 3
6426: PPUSH
6427: CALL_OW 88
// result := speaker ;
6431: LD_ADDR_VAR 0 4
6435: PUSH
6436: LD_VAR 0 6
6440: ST_TO_ADDR
// end ;
6441: LD_VAR 0 4
6445: RET
// export function PrepareDifficulty ; begin
6446: LD_INT 0
6448: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6449: LD_INT 5
6451: PPUSH
6452: LD_INT 8
6454: PPUSH
6455: LD_INT 2
6457: PPUSH
6458: CALL_OW 322
// if difficulty = 1 then
6462: LD_OWVAR 67
6466: PUSH
6467: LD_INT 1
6469: EQUAL
6470: IFFALSE 6589
// begin SetTech ( 66 , 8 , state_researched ) ;
6472: LD_INT 66
6474: PPUSH
6475: LD_INT 8
6477: PPUSH
6478: LD_INT 2
6480: PPUSH
6481: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6485: LD_INT 67
6487: PPUSH
6488: LD_INT 8
6490: PPUSH
6491: LD_INT 0
6493: PPUSH
6494: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6498: LD_INT 68
6500: PPUSH
6501: LD_INT 8
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6511: LD_INT 51
6513: PPUSH
6514: LD_INT 8
6516: PPUSH
6517: LD_INT 2
6519: PPUSH
6520: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6524: LD_INT 52
6526: PPUSH
6527: LD_INT 8
6529: PPUSH
6530: LD_INT 0
6532: PPUSH
6533: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6537: LD_INT 53
6539: PPUSH
6540: LD_INT 8
6542: PPUSH
6543: LD_INT 0
6545: PPUSH
6546: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6550: LD_INT 60
6552: PPUSH
6553: LD_INT 8
6555: PPUSH
6556: LD_INT 2
6558: PPUSH
6559: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6563: LD_INT 61
6565: PPUSH
6566: LD_INT 8
6568: PPUSH
6569: LD_INT 0
6571: PPUSH
6572: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6576: LD_INT 62
6578: PPUSH
6579: LD_INT 8
6581: PPUSH
6582: LD_INT 0
6584: PPUSH
6585: CALL_OW 322
// end ; if difficulty = 2 then
6589: LD_OWVAR 67
6593: PUSH
6594: LD_INT 2
6596: EQUAL
6597: IFFALSE 6716
// begin SetTech ( 66 , 8 , state_researched ) ;
6599: LD_INT 66
6601: PPUSH
6602: LD_INT 8
6604: PPUSH
6605: LD_INT 2
6607: PPUSH
6608: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6612: LD_INT 67
6614: PPUSH
6615: LD_INT 8
6617: PPUSH
6618: LD_INT 2
6620: PPUSH
6621: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6625: LD_INT 68
6627: PPUSH
6628: LD_INT 8
6630: PPUSH
6631: LD_INT 0
6633: PPUSH
6634: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6638: LD_INT 51
6640: PPUSH
6641: LD_INT 8
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6651: LD_INT 52
6653: PPUSH
6654: LD_INT 8
6656: PPUSH
6657: LD_INT 2
6659: PPUSH
6660: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6664: LD_INT 53
6666: PPUSH
6667: LD_INT 8
6669: PPUSH
6670: LD_INT 2
6672: PPUSH
6673: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6677: LD_INT 60
6679: PPUSH
6680: LD_INT 8
6682: PPUSH
6683: LD_INT 2
6685: PPUSH
6686: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6690: LD_INT 61
6692: PPUSH
6693: LD_INT 8
6695: PPUSH
6696: LD_INT 2
6698: PPUSH
6699: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6703: LD_INT 62
6705: PPUSH
6706: LD_INT 8
6708: PPUSH
6709: LD_INT 0
6711: PPUSH
6712: CALL_OW 322
// end ; if difficulty = 3 then
6716: LD_OWVAR 67
6720: PUSH
6721: LD_INT 3
6723: EQUAL
6724: IFFALSE 6843
// begin SetTech ( 66 , 8 , state_researched ) ;
6726: LD_INT 66
6728: PPUSH
6729: LD_INT 8
6731: PPUSH
6732: LD_INT 2
6734: PPUSH
6735: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6739: LD_INT 67
6741: PPUSH
6742: LD_INT 8
6744: PPUSH
6745: LD_INT 2
6747: PPUSH
6748: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6752: LD_INT 68
6754: PPUSH
6755: LD_INT 8
6757: PPUSH
6758: LD_INT 0
6760: PPUSH
6761: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6765: LD_INT 51
6767: PPUSH
6768: LD_INT 8
6770: PPUSH
6771: LD_INT 2
6773: PPUSH
6774: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6778: LD_INT 52
6780: PPUSH
6781: LD_INT 8
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6791: LD_INT 53
6793: PPUSH
6794: LD_INT 8
6796: PPUSH
6797: LD_INT 2
6799: PPUSH
6800: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6804: LD_INT 60
6806: PPUSH
6807: LD_INT 8
6809: PPUSH
6810: LD_INT 2
6812: PPUSH
6813: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6817: LD_INT 61
6819: PPUSH
6820: LD_INT 8
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6830: LD_INT 62
6832: PPUSH
6833: LD_INT 8
6835: PPUSH
6836: LD_INT 0
6838: PPUSH
6839: CALL_OW 322
// end ; end ;
6843: LD_VAR 0 1
6847: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6856: LD_ADDR_VAR 0 7
6860: PUSH
6861: LD_INT 22
6863: PUSH
6864: LD_VAR 0 1
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 25
6875: PUSH
6876: LD_INT 9
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6892: LD_ADDR_VAR 0 8
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_VAR 0 2
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: LD_INT 21
6914: PUSH
6915: LD_INT 3
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PPUSH
6930: CALL_OW 69
6934: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6935: LD_ADDR_VAR 0 5
6939: PUSH
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: CALL_OW 12
6950: ST_TO_ADDR
// for i = 1 to list do
6951: LD_ADDR_VAR 0 6
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_VAR 0 7
6965: PUSH
6966: FOR_TO
6967: IFFALSE 7149
// for ta in filter do
6969: LD_ADDR_VAR 0 4
6973: PUSH
6974: LD_VAR 0 8
6978: PUSH
6979: FOR_IN
6980: IFFALSE 7145
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6982: LD_VAR 0 7
6986: PUSH
6987: LD_VAR 0 6
6991: ARRAY
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 296
7002: PUSH
7003: LD_INT 13
7005: LESSEQUAL
7006: IFFALSE 7143
// begin case c of 1 :
7008: LD_VAR 0 5
7012: PUSH
7013: LD_INT 1
7015: DOUBLE
7016: EQUAL
7017: IFTRUE 7021
7019: GO 7059
7021: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7022: LD_VAR 0 7
7026: PUSH
7027: LD_VAR 0 6
7031: ARRAY
7032: PPUSH
7033: LD_VAR 0 4
7037: PPUSH
7038: CALL_OW 250
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: CALL_OW 251
7052: PPUSH
7053: CALL_OW 154
7057: GO 7143
7059: LD_INT 2
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7131
7067: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7068: LD_VAR 0 7
7072: PUSH
7073: LD_VAR 0 6
7077: ARRAY
7078: PPUSH
7079: LD_VAR 0 4
7083: PPUSH
7084: CALL_OW 250
7088: PUSH
7089: LD_INT 1
7091: NEG
7092: PPUSH
7093: LD_INT 1
7095: PPUSH
7096: CALL_OW 12
7100: PLUS
7101: PPUSH
7102: LD_VAR 0 4
7106: PPUSH
7107: CALL_OW 251
7111: PUSH
7112: LD_INT 1
7114: NEG
7115: PPUSH
7116: LD_INT 1
7118: PPUSH
7119: CALL_OW 12
7123: PLUS
7124: PPUSH
7125: CALL_OW 153
7129: GO 7143
7131: LD_INT 3
7133: DOUBLE
7134: EQUAL
7135: IFTRUE 7139
7137: GO 7142
7139: POP
// ; end ;
7140: GO 7143
7142: POP
// end ; end ;
7143: GO 6979
7145: POP
7146: POP
7147: GO 6966
7149: POP
7150: POP
// end ;
7151: LD_VAR 0 3
7155: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7156: LD_INT 0
7158: PPUSH
7159: PPUSH
// for i in charactersList do
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: LD_VAR 0 1
7169: PUSH
7170: FOR_IN
7171: IFFALSE 7189
// SaveCharacters ( i , ident ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 38
7187: GO 7170
7189: POP
7190: POP
// end ;
7191: LD_VAR 0 3
7195: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7196: LD_INT 0
7198: PPUSH
7199: PPUSH
7200: PPUSH
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
7207: PPUSH
7208: PPUSH
// for i = 1 to medicCount do
7209: LD_ADDR_VAR 0 13
7213: PUSH
7214: DOUBLE
7215: LD_INT 1
7217: DEC
7218: ST_TO_ADDR
7219: LD_VAR 0 7
7223: PUSH
7224: FOR_TO
7225: IFFALSE 7307
// begin uc_side = side ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_VAR 0 1
7236: ST_TO_ADDR
// uc_nation = nation ;
7237: LD_ADDR_OWVAR 21
7241: PUSH
7242: LD_VAR 0 2
7246: ST_TO_ADDR
// hc_name =  ;
7247: LD_ADDR_OWVAR 26
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// hc_gallery =  ;
7255: LD_ADDR_OWVAR 33
7259: PUSH
7260: LD_STRING 
7262: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_VAR 0 8
7273: PPUSH
7274: CALL_OW 380
// un = CreateHuman ;
7278: LD_ADDR_VAR 0 15
7282: PUSH
7283: CALL_OW 44
7287: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7288: LD_VAR 0 15
7292: PPUSH
7293: LD_VAR 0 9
7297: PPUSH
7298: LD_INT 0
7300: PPUSH
7301: CALL_OW 49
// end ;
7305: GO 7224
7307: POP
7308: POP
// for i = 1 to soldierCount do
7309: LD_ADDR_VAR 0 13
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 3
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7407
// begin uc_side = side ;
7327: LD_ADDR_OWVAR 20
7331: PUSH
7332: LD_VAR 0 1
7336: ST_TO_ADDR
// uc_nation = nation ;
7337: LD_ADDR_OWVAR 21
7341: PUSH
7342: LD_VAR 0 2
7346: ST_TO_ADDR
// hc_name =  ;
7347: LD_ADDR_OWVAR 26
7351: PUSH
7352: LD_STRING 
7354: ST_TO_ADDR
// hc_gallery =  ;
7355: LD_ADDR_OWVAR 33
7359: PUSH
7360: LD_STRING 
7362: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7363: LD_INT 0
7365: PPUSH
7366: LD_INT 1
7368: PPUSH
7369: LD_VAR 0 8
7373: PPUSH
7374: CALL_OW 380
// un = CreateHuman ;
7378: LD_ADDR_VAR 0 15
7382: PUSH
7383: CALL_OW 44
7387: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7388: LD_VAR 0 15
7392: PPUSH
7393: LD_VAR 0 9
7397: PPUSH
7398: LD_INT 0
7400: PPUSH
7401: CALL_OW 49
// end ;
7405: GO 7324
7407: POP
7408: POP
// for i = 1 to sniperCount do
7409: LD_ADDR_VAR 0 13
7413: PUSH
7414: DOUBLE
7415: LD_INT 1
7417: DEC
7418: ST_TO_ADDR
7419: LD_VAR 0 4
7423: PUSH
7424: FOR_TO
7425: IFFALSE 7507
// begin uc_side = side ;
7427: LD_ADDR_OWVAR 20
7431: PUSH
7432: LD_VAR 0 1
7436: ST_TO_ADDR
// uc_nation = nation ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_VAR 0 2
7446: ST_TO_ADDR
// hc_name =  ;
7447: LD_ADDR_OWVAR 26
7451: PUSH
7452: LD_STRING 
7454: ST_TO_ADDR
// hc_gallery =  ;
7455: LD_ADDR_OWVAR 33
7459: PUSH
7460: LD_STRING 
7462: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7463: LD_INT 0
7465: PPUSH
7466: LD_INT 5
7468: PPUSH
7469: LD_VAR 0 8
7473: PPUSH
7474: CALL_OW 380
// un = CreateHuman ;
7478: LD_ADDR_VAR 0 15
7482: PUSH
7483: CALL_OW 44
7487: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7488: LD_VAR 0 15
7492: PPUSH
7493: LD_VAR 0 9
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: CALL_OW 49
// end ;
7505: GO 7424
7507: POP
7508: POP
// for i = 1 to bazookCount do
7509: LD_ADDR_VAR 0 13
7513: PUSH
7514: DOUBLE
7515: LD_INT 1
7517: DEC
7518: ST_TO_ADDR
7519: LD_VAR 0 5
7523: PUSH
7524: FOR_TO
7525: IFFALSE 7607
// begin uc_side = side ;
7527: LD_ADDR_OWVAR 20
7531: PUSH
7532: LD_VAR 0 1
7536: ST_TO_ADDR
// uc_nation = nation ;
7537: LD_ADDR_OWVAR 21
7541: PUSH
7542: LD_VAR 0 2
7546: ST_TO_ADDR
// hc_name =  ;
7547: LD_ADDR_OWVAR 26
7551: PUSH
7552: LD_STRING 
7554: ST_TO_ADDR
// hc_gallery =  ;
7555: LD_ADDR_OWVAR 33
7559: PUSH
7560: LD_STRING 
7562: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7563: LD_INT 0
7565: PPUSH
7566: LD_INT 9
7568: PPUSH
7569: LD_VAR 0 8
7573: PPUSH
7574: CALL_OW 380
// un = CreateHuman ;
7578: LD_ADDR_VAR 0 15
7582: PUSH
7583: CALL_OW 44
7587: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7588: LD_VAR 0 15
7592: PPUSH
7593: LD_VAR 0 9
7597: PPUSH
7598: LD_INT 0
7600: PPUSH
7601: CALL_OW 49
// end ;
7605: GO 7524
7607: POP
7608: POP
// for i = 1 to mortalCount do
7609: LD_ADDR_VAR 0 13
7613: PUSH
7614: DOUBLE
7615: LD_INT 1
7617: DEC
7618: ST_TO_ADDR
7619: LD_VAR 0 6
7623: PUSH
7624: FOR_TO
7625: IFFALSE 7707
// begin uc_side = side ;
7627: LD_ADDR_OWVAR 20
7631: PUSH
7632: LD_VAR 0 1
7636: ST_TO_ADDR
// uc_nation = nation ;
7637: LD_ADDR_OWVAR 21
7641: PUSH
7642: LD_VAR 0 2
7646: ST_TO_ADDR
// hc_name =  ;
7647: LD_ADDR_OWVAR 26
7651: PUSH
7652: LD_STRING 
7654: ST_TO_ADDR
// hc_gallery =  ;
7655: LD_ADDR_OWVAR 33
7659: PUSH
7660: LD_STRING 
7662: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 8
7668: PPUSH
7669: LD_VAR 0 8
7673: PPUSH
7674: CALL_OW 380
// un = CreateHuman ;
7678: LD_ADDR_VAR 0 15
7682: PUSH
7683: CALL_OW 44
7687: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7688: LD_VAR 0 15
7692: PPUSH
7693: LD_VAR 0 9
7697: PPUSH
7698: LD_INT 0
7700: PPUSH
7701: CALL_OW 49
// end ;
7705: GO 7624
7707: POP
7708: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7709: LD_ADDR_VAR 0 17
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_VAR 0 1
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 25
7728: PUSH
7729: LD_INT 4
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL_OW 69
7744: ST_TO_ADDR
// for i in medic_list do
7745: LD_ADDR_VAR 0 13
7749: PUSH
7750: LD_VAR 0 17
7754: PUSH
7755: FOR_IN
7756: IFFALSE 7791
// if GetTag ( i ) = 1 then
7758: LD_VAR 0 13
7762: PPUSH
7763: CALL_OW 110
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 7789
// medic_list := medic_list diff i ;
7773: LD_ADDR_VAR 0 17
7777: PUSH
7778: LD_VAR 0 17
7782: PUSH
7783: LD_VAR 0 13
7787: DIFF
7788: ST_TO_ADDR
7789: GO 7755
7791: POP
7792: POP
// for i in medic_list do
7793: LD_ADDR_VAR 0 13
7797: PUSH
7798: LD_VAR 0 17
7802: PUSH
7803: FOR_IN
7804: IFFALSE 7822
// ComMoveToArea ( i , healArea ) ;
7806: LD_VAR 0 13
7810: PPUSH
7811: LD_VAR 0 10
7815: PPUSH
7816: CALL_OW 113
7820: GO 7803
7822: POP
7823: POP
// repeat wait ( 0 0$1 ) ;
7824: LD_INT 35
7826: PPUSH
7827: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7831: LD_ADDR_VAR 0 16
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_VAR 0 1
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 24
7856: PUSH
7857: LD_INT 550
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 24
7870: PUSH
7871: LD_INT 250
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 69
7891: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7892: LD_ADDR_VAR 0 18
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_VAR 0 1
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 2
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 25
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 25
7934: PUSH
7935: LD_INT 8
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 25
7944: PUSH
7945: LD_INT 9
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 24
7961: PUSH
7962: LD_INT 1000
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 69
7978: ST_TO_ADDR
// if medicCount > 0 then
7979: LD_VAR 0 7
7983: PUSH
7984: LD_INT 0
7986: GREATER
7987: IFFALSE 8061
// begin if damageUnit_list > 0 then
7989: LD_VAR 0 16
7993: PUSH
7994: LD_INT 0
7996: GREATER
7997: IFFALSE 8061
// begin for i in damageUnit_list do
7999: LD_ADDR_VAR 0 13
8003: PUSH
8004: LD_VAR 0 16
8008: PUSH
8009: FOR_IN
8010: IFFALSE 8059
// begin ComMoveToArea ( i , healArea ) ;
8012: LD_VAR 0 13
8016: PPUSH
8017: LD_VAR 0 10
8021: PPUSH
8022: CALL_OW 113
// for j in medic_list do
8026: LD_ADDR_VAR 0 14
8030: PUSH
8031: LD_VAR 0 17
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8055
// AddComHeal ( j , i ) ;
8039: LD_VAR 0 14
8043: PPUSH
8044: LD_VAR 0 13
8048: PPUSH
8049: CALL_OW 188
8053: GO 8036
8055: POP
8056: POP
// end ;
8057: GO 8009
8059: POP
8060: POP
// end ; end ; for i in soldiersOK_list do
8061: LD_ADDR_VAR 0 13
8065: PUSH
8066: LD_VAR 0 18
8070: PUSH
8071: FOR_IN
8072: IFFALSE 8248
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8074: LD_ADDR_VAR 0 21
8078: PUSH
8079: LD_INT 22
8081: PUSH
8082: LD_VAR 0 11
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PPUSH
8091: CALL_OW 69
8095: PPUSH
8096: LD_VAR 0 13
8100: PPUSH
8101: CALL_OW 74
8105: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8106: LD_ADDR_VAR 0 22
8110: PUSH
8111: LD_INT 22
8113: PUSH
8114: LD_VAR 0 11
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 59
8128: PUSH
8129: EMPTY
8130: LIST
8131: PUSH
8132: LD_INT 21
8134: PUSH
8135: LD_INT 1
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 21
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: PPUSH
8165: CALL_OW 69
8169: PPUSH
8170: LD_VAR 0 13
8174: PPUSH
8175: CALL_OW 74
8179: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8180: LD_VAR 0 13
8184: PPUSH
8185: LD_VAR 0 21
8189: PPUSH
8190: CALL_OW 296
8194: PUSH
8195: LD_INT 8
8197: PLUS
8198: PUSH
8199: LD_VAR 0 13
8203: PPUSH
8204: LD_VAR 0 22
8208: PPUSH
8209: CALL_OW 296
8213: LESS
8214: IFFALSE 8232
// begin ComAttackUnit ( i , target1 ) ;
8216: LD_VAR 0 13
8220: PPUSH
8221: LD_VAR 0 21
8225: PPUSH
8226: CALL_OW 115
// end else
8230: GO 8246
// begin ComAttackUnit ( i , target2 ) ;
8232: LD_VAR 0 13
8236: PPUSH
8237: LD_VAR 0 22
8241: PPUSH
8242: CALL_OW 115
// end ; end ;
8246: GO 8071
8248: POP
8249: POP
// until soldiersOK_list = [ ] ;
8250: LD_VAR 0 18
8254: PUSH
8255: EMPTY
8256: EQUAL
8257: IFFALSE 7824
// end ;
8259: LD_VAR 0 12
8263: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8264: LD_INT 0
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
8271: PPUSH
8272: PPUSH
8273: PPUSH
8274: PPUSH
8275: PPUSH
8276: PPUSH
// amChassisTab = [ ] ;
8277: LD_ADDR_VAR 0 19
8281: PUSH
8282: EMPTY
8283: ST_TO_ADDR
// arChassisTab = [ ] ;
8284: LD_ADDR_VAR 0 18
8288: PUSH
8289: EMPTY
8290: ST_TO_ADDR
// ruChassisTab = [ ] ;
8291: LD_ADDR_VAR 0 17
8295: PUSH
8296: EMPTY
8297: ST_TO_ADDR
// for i = 1 to vehCount do
8298: LD_ADDR_VAR 0 13
8302: PUSH
8303: DOUBLE
8304: LD_INT 1
8306: DEC
8307: ST_TO_ADDR
8308: LD_VAR 0 3
8312: PUSH
8313: FOR_TO
8314: IFFALSE 9738
// begin wait ( 0 0$01 ) ;
8316: LD_INT 35
8318: PPUSH
8319: CALL_OW 67
// if nation = 1 then
8323: LD_VAR 0 5
8327: PUSH
8328: LD_INT 1
8330: EQUAL
8331: IFFALSE 8812
// begin uc_side = side ;
8333: LD_ADDR_OWVAR 20
8337: PUSH
8338: LD_VAR 0 2
8342: ST_TO_ADDR
// uc_nation = nation ;
8343: LD_ADDR_OWVAR 21
8347: PUSH
8348: LD_VAR 0 5
8352: ST_TO_ADDR
// vc_engine = vehengine ;
8353: LD_ADDR_OWVAR 39
8357: PUSH
8358: LD_VAR 0 6
8362: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8363: LD_ADDR_OWVAR 40
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_VAR 0 10
8380: PPUSH
8381: CALL_OW 12
8385: ARRAY
8386: ST_TO_ADDR
// for j = 1 to AMWeapon do
8387: LD_ADDR_VAR 0 14
8391: PUSH
8392: DOUBLE
8393: LD_INT 1
8395: DEC
8396: ST_TO_ADDR
8397: LD_VAR 0 10
8401: PUSH
8402: FOR_TO
8403: IFFALSE 8704
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8405: LD_VAR 0 10
8409: PUSH
8410: LD_VAR 0 14
8414: ARRAY
8415: PUSH
8416: LD_INT 2
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 10
8424: PUSH
8425: LD_VAR 0 14
8429: ARRAY
8430: PUSH
8431: LD_INT 3
8433: EQUAL
8434: OR
8435: IFFALSE 8488
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8437: LD_ADDR_VAR 0 19
8441: PUSH
8442: LD_INT 1
8444: PUSH
8445: LD_INT 2
8447: PUSH
8448: LD_INT 3
8450: PUSH
8451: LD_INT 4
8453: PUSH
8454: LD_INT 5
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8464: LD_ADDR_OWVAR 37
8468: PUSH
8469: LD_VAR 0 19
8473: PUSH
8474: LD_INT 1
8476: PPUSH
8477: LD_VAR 0 19
8481: PPUSH
8482: CALL_OW 12
8486: ARRAY
8487: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8488: LD_VAR 0 10
8492: PUSH
8493: LD_VAR 0 14
8497: ARRAY
8498: PUSH
8499: LD_INT 4
8501: EQUAL
8502: PUSH
8503: LD_VAR 0 10
8507: PUSH
8508: LD_VAR 0 14
8512: ARRAY
8513: PUSH
8514: LD_INT 5
8516: EQUAL
8517: OR
8518: PUSH
8519: LD_VAR 0 10
8523: PUSH
8524: LD_VAR 0 14
8528: ARRAY
8529: PUSH
8530: LD_INT 9
8532: EQUAL
8533: OR
8534: PUSH
8535: LD_VAR 0 10
8539: PUSH
8540: LD_VAR 0 14
8544: ARRAY
8545: PUSH
8546: LD_INT 11
8548: EQUAL
8549: OR
8550: PUSH
8551: LD_VAR 0 10
8555: PUSH
8556: LD_VAR 0 14
8560: ARRAY
8561: PUSH
8562: LD_INT 7
8564: EQUAL
8565: OR
8566: IFFALSE 8615
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8568: LD_ADDR_VAR 0 19
8572: PUSH
8573: LD_INT 2
8575: PUSH
8576: LD_INT 3
8578: PUSH
8579: LD_INT 4
8581: PUSH
8582: LD_INT 5
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8591: LD_ADDR_OWVAR 37
8595: PUSH
8596: LD_VAR 0 19
8600: PUSH
8601: LD_INT 1
8603: PPUSH
8604: LD_VAR 0 19
8608: PPUSH
8609: CALL_OW 12
8613: ARRAY
8614: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8615: LD_VAR 0 10
8619: PUSH
8620: LD_VAR 0 14
8624: ARRAY
8625: PUSH
8626: LD_INT 8
8628: EQUAL
8629: PUSH
8630: LD_VAR 0 10
8634: PUSH
8635: LD_VAR 0 14
8639: ARRAY
8640: PUSH
8641: LD_INT 6
8643: EQUAL
8644: OR
8645: PUSH
8646: LD_VAR 0 10
8650: PUSH
8651: LD_VAR 0 14
8655: ARRAY
8656: PUSH
8657: LD_INT 10
8659: EQUAL
8660: OR
8661: IFFALSE 8702
// begin amChassisTab = [ 4 , 5 ] ;
8663: LD_ADDR_VAR 0 19
8667: PUSH
8668: LD_INT 4
8670: PUSH
8671: LD_INT 5
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8678: LD_ADDR_OWVAR 37
8682: PUSH
8683: LD_VAR 0 19
8687: PUSH
8688: LD_INT 1
8690: PPUSH
8691: LD_VAR 0 19
8695: PPUSH
8696: CALL_OW 12
8700: ARRAY
8701: ST_TO_ADDR
// end ; end ;
8702: GO 8402
8704: POP
8705: POP
// veh = CreateVehicle ;
8706: LD_ADDR_VAR 0 16
8710: PUSH
8711: CALL_OW 45
8715: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8716: LD_VAR 0 16
8720: PPUSH
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_INT 0
8728: PPUSH
8729: CALL_OW 49
// if vc_control = 1 then
8733: LD_OWVAR 38
8737: PUSH
8738: LD_INT 1
8740: EQUAL
8741: IFFALSE 8798
// begin hc_gallery =  ;
8743: LD_ADDR_OWVAR 33
8747: PUSH
8748: LD_STRING 
8750: ST_TO_ADDR
// hc_name =  ;
8751: LD_ADDR_OWVAR 26
8755: PUSH
8756: LD_STRING 
8758: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8759: LD_INT 0
8761: PPUSH
8762: LD_INT 3
8764: PPUSH
8765: LD_VAR 0 4
8769: PPUSH
8770: CALL_OW 380
// un = CreateHuman ;
8774: LD_ADDR_VAR 0 15
8778: PUSH
8779: CALL_OW 44
8783: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8784: LD_VAR 0 15
8788: PPUSH
8789: LD_VAR 0 16
8793: PPUSH
8794: CALL_OW 52
// end ; i = i + 1 ;
8798: LD_ADDR_VAR 0 13
8802: PUSH
8803: LD_VAR 0 13
8807: PUSH
8808: LD_INT 1
8810: PLUS
8811: ST_TO_ADDR
// end ; if nation = 2 then
8812: LD_VAR 0 5
8816: PUSH
8817: LD_INT 2
8819: EQUAL
8820: IFFALSE 9322
// begin uc_side = side ;
8822: LD_ADDR_OWVAR 20
8826: PUSH
8827: LD_VAR 0 2
8831: ST_TO_ADDR
// uc_nation = nation ;
8832: LD_ADDR_OWVAR 21
8836: PUSH
8837: LD_VAR 0 5
8841: ST_TO_ADDR
// vc_engine = vehengine ;
8842: LD_ADDR_OWVAR 39
8846: PUSH
8847: LD_VAR 0 6
8851: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8852: LD_INT 22
8854: PUSH
8855: LD_VAR 0 2
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 21
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 33
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 50
8886: PUSH
8887: EMPTY
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PPUSH
8896: CALL_OW 69
8900: PUSH
8901: LD_INT 8
8903: LESSEQUAL
8904: IFFALSE 8932
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8906: LD_ADDR_OWVAR 38
8910: PUSH
8911: LD_VAR 0 7
8915: PUSH
8916: LD_INT 1
8918: PPUSH
8919: LD_VAR 0 7
8923: PPUSH
8924: CALL_OW 12
8928: ARRAY
8929: ST_TO_ADDR
8930: GO 8940
// vc_control = control_apeman ;
8932: LD_ADDR_OWVAR 38
8936: PUSH
8937: LD_INT 5
8939: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8940: LD_ADDR_OWVAR 40
8944: PUSH
8945: LD_VAR 0 9
8949: PUSH
8950: LD_INT 1
8952: PPUSH
8953: LD_VAR 0 9
8957: PPUSH
8958: CALL_OW 12
8962: ARRAY
8963: ST_TO_ADDR
// for j = 1 to ARWeapons do
8964: LD_ADDR_VAR 0 14
8968: PUSH
8969: DOUBLE
8970: LD_INT 1
8972: DEC
8973: ST_TO_ADDR
8974: LD_VAR 0 9
8978: PUSH
8979: FOR_TO
8980: IFFALSE 9214
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8982: LD_VAR 0 9
8986: PUSH
8987: LD_VAR 0 14
8991: ARRAY
8992: PUSH
8993: LD_INT 24
8995: EQUAL
8996: PUSH
8997: LD_VAR 0 9
9001: PUSH
9002: LD_VAR 0 14
9006: ARRAY
9007: PUSH
9008: LD_INT 22
9010: EQUAL
9011: OR
9012: PUSH
9013: LD_VAR 0 9
9017: PUSH
9018: LD_VAR 0 14
9022: ARRAY
9023: PUSH
9024: LD_INT 23
9026: EQUAL
9027: OR
9028: PUSH
9029: LD_VAR 0 9
9033: PUSH
9034: LD_VAR 0 14
9038: ARRAY
9039: PUSH
9040: LD_INT 30
9042: EQUAL
9043: OR
9044: IFFALSE 9093
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9046: LD_ADDR_VAR 0 18
9050: PUSH
9051: LD_INT 11
9053: PUSH
9054: LD_INT 12
9056: PUSH
9057: LD_INT 13
9059: PUSH
9060: LD_INT 14
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9069: LD_ADDR_OWVAR 37
9073: PUSH
9074: LD_VAR 0 18
9078: PUSH
9079: LD_INT 1
9081: PPUSH
9082: LD_VAR 0 18
9086: PPUSH
9087: CALL_OW 12
9091: ARRAY
9092: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9093: LD_VAR 0 9
9097: PUSH
9098: LD_VAR 0 14
9102: ARRAY
9103: PUSH
9104: LD_INT 29
9106: EQUAL
9107: PUSH
9108: LD_VAR 0 9
9112: PUSH
9113: LD_VAR 0 14
9117: ARRAY
9118: PUSH
9119: LD_INT 28
9121: EQUAL
9122: OR
9123: PUSH
9124: LD_VAR 0 9
9128: PUSH
9129: LD_VAR 0 14
9133: ARRAY
9134: PUSH
9135: LD_INT 27
9137: EQUAL
9138: OR
9139: PUSH
9140: LD_VAR 0 9
9144: PUSH
9145: LD_VAR 0 14
9149: ARRAY
9150: PUSH
9151: LD_INT 26
9153: EQUAL
9154: OR
9155: PUSH
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 14
9165: ARRAY
9166: PUSH
9167: LD_INT 25
9169: EQUAL
9170: OR
9171: IFFALSE 9212
// begin arChassisTab = [ 13 , 14 ] ;
9173: LD_ADDR_VAR 0 18
9177: PUSH
9178: LD_INT 13
9180: PUSH
9181: LD_INT 14
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9188: LD_ADDR_OWVAR 37
9192: PUSH
9193: LD_VAR 0 18
9197: PUSH
9198: LD_INT 1
9200: PPUSH
9201: LD_VAR 0 18
9205: PPUSH
9206: CALL_OW 12
9210: ARRAY
9211: ST_TO_ADDR
// end ; end ;
9212: GO 8979
9214: POP
9215: POP
// veh = CreateVehicle ;
9216: LD_ADDR_VAR 0 16
9220: PUSH
9221: CALL_OW 45
9225: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9226: LD_VAR 0 16
9230: PPUSH
9231: LD_VAR 0 1
9235: PPUSH
9236: LD_INT 0
9238: PPUSH
9239: CALL_OW 49
// if vc_control = 1 then
9243: LD_OWVAR 38
9247: PUSH
9248: LD_INT 1
9250: EQUAL
9251: IFFALSE 9308
// begin hc_gallery =  ;
9253: LD_ADDR_OWVAR 33
9257: PUSH
9258: LD_STRING 
9260: ST_TO_ADDR
// hc_name =  ;
9261: LD_ADDR_OWVAR 26
9265: PUSH
9266: LD_STRING 
9268: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9269: LD_INT 0
9271: PPUSH
9272: LD_INT 3
9274: PPUSH
9275: LD_VAR 0 4
9279: PPUSH
9280: CALL_OW 380
// un = CreateHuman ;
9284: LD_ADDR_VAR 0 15
9288: PUSH
9289: CALL_OW 44
9293: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9294: LD_VAR 0 15
9298: PPUSH
9299: LD_VAR 0 16
9303: PPUSH
9304: CALL_OW 52
// end ; i = i + 1 ;
9308: LD_ADDR_VAR 0 13
9312: PUSH
9313: LD_VAR 0 13
9317: PUSH
9318: LD_INT 1
9320: PLUS
9321: ST_TO_ADDR
// end ; if nation = 3 then
9322: LD_VAR 0 5
9326: PUSH
9327: LD_INT 3
9329: EQUAL
9330: IFFALSE 9736
// begin uc_side = side ;
9332: LD_ADDR_OWVAR 20
9336: PUSH
9337: LD_VAR 0 2
9341: ST_TO_ADDR
// uc_nation = nation ;
9342: LD_ADDR_OWVAR 21
9346: PUSH
9347: LD_VAR 0 5
9351: ST_TO_ADDR
// vc_engine = vehengine ;
9352: LD_ADDR_OWVAR 39
9356: PUSH
9357: LD_VAR 0 6
9361: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9362: LD_ADDR_OWVAR 38
9366: PUSH
9367: LD_VAR 0 7
9371: PUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_VAR 0 7
9379: PPUSH
9380: CALL_OW 12
9384: ARRAY
9385: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9386: LD_ADDR_OWVAR 40
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_INT 1
9398: PPUSH
9399: LD_VAR 0 8
9403: PPUSH
9404: CALL_OW 12
9408: ARRAY
9409: ST_TO_ADDR
// for j = 1 to RuWeapons do
9410: LD_ADDR_VAR 0 14
9414: PUSH
9415: DOUBLE
9416: LD_INT 1
9418: DEC
9419: ST_TO_ADDR
9420: LD_VAR 0 8
9424: PUSH
9425: FOR_TO
9426: IFFALSE 9612
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9428: LD_VAR 0 8
9432: PUSH
9433: LD_VAR 0 14
9437: ARRAY
9438: PUSH
9439: LD_INT 42
9441: EQUAL
9442: PUSH
9443: LD_VAR 0 8
9447: PUSH
9448: LD_VAR 0 14
9452: ARRAY
9453: PUSH
9454: LD_INT 43
9456: EQUAL
9457: OR
9458: PUSH
9459: LD_VAR 0 8
9463: PUSH
9464: LD_VAR 0 14
9468: ARRAY
9469: PUSH
9470: LD_INT 44
9472: EQUAL
9473: OR
9474: PUSH
9475: LD_VAR 0 8
9479: PUSH
9480: LD_VAR 0 14
9484: ARRAY
9485: PUSH
9486: LD_INT 45
9488: EQUAL
9489: OR
9490: PUSH
9491: LD_VAR 0 8
9495: PUSH
9496: LD_VAR 0 14
9500: ARRAY
9501: PUSH
9502: LD_INT 49
9504: EQUAL
9505: OR
9506: IFFALSE 9543
// begin ruChassisTab = [ 24 ] ;
9508: LD_ADDR_VAR 0 17
9512: PUSH
9513: LD_INT 24
9515: PUSH
9516: EMPTY
9517: LIST
9518: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9519: LD_ADDR_OWVAR 37
9523: PUSH
9524: LD_VAR 0 17
9528: PUSH
9529: LD_INT 1
9531: PPUSH
9532: LD_VAR 0 17
9536: PPUSH
9537: CALL_OW 12
9541: ARRAY
9542: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9543: LD_VAR 0 8
9547: PUSH
9548: LD_VAR 0 14
9552: ARRAY
9553: PUSH
9554: LD_INT 46
9556: EQUAL
9557: PUSH
9558: LD_VAR 0 8
9562: PUSH
9563: LD_VAR 0 14
9567: ARRAY
9568: PUSH
9569: LD_INT 47
9571: EQUAL
9572: OR
9573: IFFALSE 9610
// begin ruChassisTab = [ 24 ] ;
9575: LD_ADDR_VAR 0 17
9579: PUSH
9580: LD_INT 24
9582: PUSH
9583: EMPTY
9584: LIST
9585: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9586: LD_ADDR_OWVAR 37
9590: PUSH
9591: LD_VAR 0 17
9595: PUSH
9596: LD_INT 1
9598: PPUSH
9599: LD_VAR 0 17
9603: PPUSH
9604: CALL_OW 12
9608: ARRAY
9609: ST_TO_ADDR
// end ; end ;
9610: GO 9425
9612: POP
9613: POP
// veh = CreateVehicle ;
9614: LD_ADDR_VAR 0 16
9618: PUSH
9619: CALL_OW 45
9623: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9624: LD_VAR 0 16
9628: PPUSH
9629: LD_VAR 0 1
9633: PPUSH
9634: LD_INT 0
9636: PPUSH
9637: CALL_OW 49
// if vc_control = 1 then
9641: LD_OWVAR 38
9645: PUSH
9646: LD_INT 1
9648: EQUAL
9649: IFFALSE 9736
// begin if uc_side = 8 then
9651: LD_OWVAR 20
9655: PUSH
9656: LD_INT 8
9658: EQUAL
9659: IFFALSE 9671
// uc_nation = 2 else
9661: LD_ADDR_OWVAR 21
9665: PUSH
9666: LD_INT 2
9668: ST_TO_ADDR
9669: GO 9681
// uc_nation = nation ;
9671: LD_ADDR_OWVAR 21
9675: PUSH
9676: LD_VAR 0 5
9680: ST_TO_ADDR
// hc_gallery =  ;
9681: LD_ADDR_OWVAR 33
9685: PUSH
9686: LD_STRING 
9688: ST_TO_ADDR
// hc_name =  ;
9689: LD_ADDR_OWVAR 26
9693: PUSH
9694: LD_STRING 
9696: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9697: LD_INT 0
9699: PPUSH
9700: LD_INT 3
9702: PPUSH
9703: LD_VAR 0 4
9707: PPUSH
9708: CALL_OW 380
// un = CreateHuman ;
9712: LD_ADDR_VAR 0 15
9716: PUSH
9717: CALL_OW 44
9721: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9722: LD_VAR 0 15
9726: PPUSH
9727: LD_VAR 0 16
9731: PPUSH
9732: CALL_OW 52
// end ; end ; end ;
9736: GO 8313
9738: POP
9739: POP
// repeat wait ( 0 0$1 ) ;
9740: LD_INT 35
9742: PPUSH
9743: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9747: LD_ADDR_VAR 0 20
9751: PUSH
9752: LD_INT 22
9754: PUSH
9755: LD_VAR 0 2
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 21
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 24
9776: PUSH
9777: LD_INT 250
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 2
9786: PUSH
9787: LD_INT 34
9789: PUSH
9790: LD_INT 25
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 34
9799: PUSH
9800: LD_INT 26
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 34
9809: PUSH
9810: LD_INT 27
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 34
9819: PUSH
9820: LD_INT 28
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 34
9829: PUSH
9830: LD_INT 29
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 34
9839: PUSH
9840: LD_INT 46
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 34
9849: PUSH
9850: LD_INT 44
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 34
9859: PUSH
9860: LD_INT 45
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 34
9869: PUSH
9870: LD_INT 47
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: PPUSH
9895: CALL_OW 69
9899: ST_TO_ADDR
// if vehicleOK_list > 0 then
9900: LD_VAR 0 20
9904: PUSH
9905: LD_INT 0
9907: GREATER
9908: IFFALSE 10127
// begin for i in vehicleOK_list do
9910: LD_ADDR_VAR 0 13
9914: PUSH
9915: LD_VAR 0 20
9919: PUSH
9920: FOR_IN
9921: IFFALSE 10125
// begin if GetSide ( i ) <> side then
9923: LD_VAR 0 13
9927: PPUSH
9928: CALL_OW 255
9932: PUSH
9933: LD_VAR 0 2
9937: NONEQUAL
9938: IFFALSE 9951
// begin ComStop ( i ) ;
9940: LD_VAR 0 13
9944: PPUSH
9945: CALL_OW 141
// continue ;
9949: GO 9920
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9951: LD_ADDR_VAR 0 21
9955: PUSH
9956: LD_INT 22
9958: PUSH
9959: LD_VAR 0 11
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: PPUSH
9973: LD_VAR 0 13
9977: PPUSH
9978: CALL_OW 74
9982: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9983: LD_ADDR_VAR 0 22
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 11
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 59
10005: PUSH
10006: EMPTY
10007: LIST
10008: PUSH
10009: LD_INT 21
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 21
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: PPUSH
10047: LD_VAR 0 13
10051: PPUSH
10052: CALL_OW 74
10056: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10057: LD_VAR 0 13
10061: PPUSH
10062: LD_VAR 0 21
10066: PPUSH
10067: CALL_OW 296
10071: PUSH
10072: LD_INT 8
10074: PLUS
10075: PUSH
10076: LD_VAR 0 13
10080: PPUSH
10081: LD_VAR 0 22
10085: PPUSH
10086: CALL_OW 296
10090: LESS
10091: IFFALSE 10109
// begin ComAttackUnit ( i , target1 ) ;
10093: LD_VAR 0 13
10097: PPUSH
10098: LD_VAR 0 21
10102: PPUSH
10103: CALL_OW 115
// end else
10107: GO 10123
// begin ComAttackUnit ( i , target2 ) ;
10109: LD_VAR 0 13
10113: PPUSH
10114: LD_VAR 0 22
10118: PPUSH
10119: CALL_OW 115
// end ; end ;
10123: GO 9920
10125: POP
10126: POP
// end ; until vehicleOK_list = 0 ;
10127: LD_VAR 0 20
10131: PUSH
10132: LD_INT 0
10134: EQUAL
10135: IFFALSE 9740
// end ;
10137: LD_VAR 0 12
10141: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10142: LD_INT 0
10144: PPUSH
10145: PPUSH
10146: PPUSH
10147: PPUSH
10148: PPUSH
10149: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10150: LD_ADDR_VAR 0 6
10154: PUSH
10155: LD_INT 22
10157: PUSH
10158: LD_VAR 0 1
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 34
10169: PUSH
10170: LD_INT 29
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if veh_list = 0 then
10186: LD_VAR 0 6
10190: PUSH
10191: LD_INT 0
10193: EQUAL
10194: IFFALSE 10198
// exit ;
10196: GO 10403
// if veh_list > 0 then
10198: LD_VAR 0 6
10202: PUSH
10203: LD_INT 0
10205: GREATER
10206: IFFALSE 10403
// begin for i in veh_List do
10208: LD_ADDR_VAR 0 4
10212: PUSH
10213: LD_VAR 0 6
10217: PUSH
10218: FOR_IN
10219: IFFALSE 10401
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10221: LD_ADDR_VAR 0 7
10225: PUSH
10226: LD_INT 22
10228: PUSH
10229: LD_VAR 0 2
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 24
10240: PUSH
10241: LD_INT 250
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 2
10250: PUSH
10251: LD_INT 59
10253: PUSH
10254: EMPTY
10255: LIST
10256: PUSH
10257: LD_INT 21
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 21
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: PPUSH
10296: LD_VAR 0 4
10300: PPUSH
10301: CALL_OW 74
10305: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10306: LD_VAR 0 4
10310: PPUSH
10311: LD_VAR 0 7
10315: PPUSH
10316: CALL_OW 115
// if not HasTask ( i ) then
10320: LD_VAR 0 4
10324: PPUSH
10325: CALL_OW 314
10329: NOT
10330: IFFALSE 10399
// begin wait ( 0 0$0.1 ) ;
10332: LD_INT 4
10334: PPUSH
10335: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10339: LD_ADDR_VAR 0 8
10343: PUSH
10344: LD_INT 22
10346: PUSH
10347: LD_VAR 0 2
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 24
10358: PUSH
10359: LD_INT 250
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: PPUSH
10375: LD_VAR 0 4
10379: PPUSH
10380: CALL_OW 74
10384: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10385: LD_VAR 0 4
10389: PPUSH
10390: LD_VAR 0 8
10394: PPUSH
10395: CALL_OW 115
// end ; end ;
10399: GO 10218
10401: POP
10402: POP
// end ; end ; end_of_file
10403: LD_VAR 0 3
10407: RET
// every 0 0$1 do
10408: GO 10410
10410: DISABLE
// begin enable ;
10411: ENABLE
// IntBazooka ( 7 , 1 ) ;
10412: LD_INT 7
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL 6848 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10422: LD_INT 8
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL 10142 0 2
// end ;
10432: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10433: LD_INT 22
10435: PUSH
10436: LD_INT 3
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 21
10445: PUSH
10446: LD_INT 2
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 50
10455: PUSH
10456: EMPTY
10457: LIST
10458: PUSH
10459: LD_INT 2
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 46
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 44
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 45
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 34
10494: PUSH
10495: LD_INT 47
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: PPUSH
10515: CALL_OW 69
10519: PUSH
10520: LD_INT 0
10522: GREATER
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_INT 3
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 2
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 50
10546: PUSH
10547: EMPTY
10548: LIST
10549: PUSH
10550: LD_INT 34
10552: PUSH
10553: LD_INT 49
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: PPUSH
10566: CALL_OW 69
10570: PUSH
10571: LD_INT 0
10573: GREATER
10574: AND
10575: IFFALSE 10747
10577: GO 10579
10579: DISABLE
10580: LD_INT 0
10582: PPUSH
10583: PPUSH
// begin enable ;
10584: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10585: LD_ADDR_VAR 0 1
10589: PUSH
10590: LD_INT 22
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 50
10612: PUSH
10613: EMPTY
10614: LIST
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: LD_INT 34
10621: PUSH
10622: LD_INT 46
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 34
10631: PUSH
10632: LD_INT 44
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 34
10641: PUSH
10642: LD_INT 45
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 34
10651: PUSH
10652: LD_INT 47
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 69
10676: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 50
10704: PUSH
10705: EMPTY
10706: LIST
10707: PUSH
10708: LD_INT 34
10710: PUSH
10711: LD_INT 49
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 69
10728: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10729: LD_VAR 0 2
10733: PPUSH
10734: LD_VAR 0 1
10738: PUSH
10739: LD_INT 1
10741: ARRAY
10742: PPUSH
10743: CALL_OW 112
// end ; end_of_file
10747: PPOPN 2
10749: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10750: LD_EXP 38
10754: PUSH
10755: LD_INT 1
10757: EQUAL
10758: IFFALSE 11660
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin m1 := false ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_INT 0
10775: ST_TO_ADDR
// m2 := false ;
10776: LD_ADDR_VAR 0 2
10780: PUSH
10781: LD_INT 0
10783: ST_TO_ADDR
// m3 := false ;
10784: LD_ADDR_VAR 0 3
10788: PUSH
10789: LD_INT 0
10791: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10792: LD_EXP 1
10796: PPUSH
10797: LD_STRING D9b-JMM-1
10799: PPUSH
10800: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10804: LD_EXP 15
10808: PPUSH
10809: LD_STRING D9b-Pow-1
10811: PPUSH
10812: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10816: LD_EXP 1
10820: PPUSH
10821: LD_STRING D9b-JMM-2
10823: PPUSH
10824: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10828: LD_EXP 15
10832: PPUSH
10833: LD_STRING D9b-Pow-2
10835: PPUSH
10836: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10840: LD_EXP 1
10844: PPUSH
10845: LD_STRING D9b-JMM-3
10847: PPUSH
10848: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10852: LD_EXP 15
10856: PPUSH
10857: LD_STRING D9b-Pow-3
10859: PPUSH
10860: CALL_OW 94
// if tick <= 60 60$00 then
10864: LD_OWVAR 1
10868: PUSH
10869: LD_INT 126000
10871: LESSEQUAL
10872: IFFALSE 10881
// SetAchievement ( ACH_ASPEED_13 ) ;
10874: LD_STRING ACH_ASPEED_13
10876: PPUSH
10877: CALL_OW 543
// if burlakStatus = 1 then
10881: LD_EXP 28
10885: PUSH
10886: LD_INT 1
10888: EQUAL
10889: IFFALSE 10911
// begin m1 := true ;
10891: LD_ADDR_VAR 0 1
10895: PUSH
10896: LD_INT 1
10898: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10899: LD_STRING Burlak
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 101
// end else
10909: GO 10922
// begin AddMedal ( Burlak , - 1 ) ;
10911: LD_STRING Burlak
10913: PPUSH
10914: LD_INT 1
10916: NEG
10917: PPUSH
10918: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10922: LD_EXP 2
10926: PPUSH
10927: CALL_OW 302
10931: IFFALSE 10953
// begin m2 := true ;
10933: LD_ADDR_VAR 0 2
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10941: LD_STRING Stevens
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 101
// end else
10951: GO 10964
// begin AddMedal ( Stevens , - 1 ) ;
10953: LD_STRING Stevens
10955: PPUSH
10956: LD_INT 1
10958: NEG
10959: PPUSH
10960: CALL_OW 101
// end ; if radarOnSpot = 1 then
10964: LD_EXP 30
10968: PUSH
10969: LD_INT 1
10971: EQUAL
10972: IFFALSE 10994
// begin m3 := true ;
10974: LD_ADDR_VAR 0 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10982: LD_STRING Observation
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 101
// end else
10992: GO 11005
// begin AddMedal ( Observation , - 1 ) ;
10994: LD_STRING Observation
10996: PPUSH
10997: LD_INT 1
10999: NEG
11000: PPUSH
11001: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
11005: LD_VAR 0 1
11009: PUSH
11010: LD_VAR 0 2
11014: AND
11015: PUSH
11016: LD_VAR 0 3
11020: AND
11021: PUSH
11022: LD_OWVAR 67
11026: PUSH
11027: LD_INT 3
11029: EQUAL
11030: AND
11031: IFFALSE 11043
// SetAchievementEX ( ACH_AMER , 13 ) ;
11033: LD_STRING ACH_AMER
11035: PPUSH
11036: LD_INT 13
11038: PPUSH
11039: CALL_OW 564
// GiveMedals ( MAIN ) ;
11043: LD_STRING MAIN
11045: PPUSH
11046: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
11050: LD_EXP 28
11054: PPUSH
11055: LD_STRING 13_BurlakStatus_1
11057: PPUSH
11058: CALL_OW 39
// if IsLive ( Stevens ) then
11062: LD_EXP 2
11066: PPUSH
11067: CALL_OW 300
11071: IFFALSE 11085
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
11073: LD_INT 1
11075: PPUSH
11076: LD_STRING 13_StevensStatus_1
11078: PPUSH
11079: CALL_OW 39
11083: GO 11095
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
11085: LD_INT 0
11087: PPUSH
11088: LD_STRING 13_StevensStatus_1
11090: PPUSH
11091: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
11095: LD_INT 22
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 21
11107: PUSH
11108: LD_INT 1
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: LD_INT 25
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 25
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 25
11140: PUSH
11141: LD_INT 3
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 25
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 25
11170: PUSH
11171: LD_INT 8
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: PPUSH
11192: CALL_OW 69
11196: PPUSH
11197: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11201: LD_EXP 1
11205: PPUSH
11206: LD_EXP 34
11210: PUSH
11211: LD_STRING JMM
11213: STR
11214: PPUSH
11215: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11219: LD_EXP 8
11223: PPUSH
11224: LD_EXP 34
11228: PUSH
11229: LD_STRING Brown
11231: STR
11232: PPUSH
11233: CALL 7156 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11237: LD_EXP 4
11241: PPUSH
11242: LD_EXP 34
11246: PUSH
11247: LD_STRING Donaldson
11249: STR
11250: PPUSH
11251: CALL 7156 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11255: LD_EXP 5
11259: PPUSH
11260: LD_EXP 34
11264: PUSH
11265: LD_STRING Bobby
11267: STR
11268: PPUSH
11269: CALL 7156 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11273: LD_EXP 6
11277: PPUSH
11278: LD_EXP 34
11282: PUSH
11283: LD_STRING Cyrus
11285: STR
11286: PPUSH
11287: CALL 7156 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11291: LD_EXP 3
11295: PPUSH
11296: LD_EXP 34
11300: PUSH
11301: LD_STRING Lisa
11303: STR
11304: PPUSH
11305: CALL 7156 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11309: LD_EXP 13
11313: PPUSH
11314: LD_EXP 34
11318: PUSH
11319: LD_STRING Frank
11321: STR
11322: PPUSH
11323: CALL 7156 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11327: LD_EXP 14
11331: PPUSH
11332: LD_EXP 34
11336: PUSH
11337: LD_STRING Kikuchi
11339: STR
11340: PPUSH
11341: CALL 7156 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11345: LD_EXP 10
11349: PPUSH
11350: LD_EXP 34
11354: PUSH
11355: LD_STRING Houten
11357: STR
11358: PPUSH
11359: CALL 7156 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11363: LD_EXP 12
11367: PPUSH
11368: LD_EXP 34
11372: PUSH
11373: LD_STRING Gary
11375: STR
11376: PPUSH
11377: CALL 7156 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11381: LD_EXP 11
11385: PPUSH
11386: LD_EXP 34
11390: PUSH
11391: LD_STRING Cornell
11393: STR
11394: PPUSH
11395: CALL 7156 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11399: LD_EXP 7
11403: PPUSH
11404: LD_EXP 34
11408: PUSH
11409: LD_STRING Denis
11411: STR
11412: PPUSH
11413: CALL 7156 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11417: LD_EXP 9
11421: PPUSH
11422: LD_EXP 34
11426: PUSH
11427: LD_STRING Gladstone
11429: STR
11430: PPUSH
11431: CALL 7156 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11435: LD_EXP 2
11439: PPUSH
11440: LD_EXP 34
11444: PUSH
11445: LD_STRING Stevens
11447: STR
11448: PPUSH
11449: CALL 7156 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11453: LD_INT 50
11455: PUSH
11456: EMPTY
11457: LIST
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 2
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 25
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 25
11504: PUSH
11505: LD_INT 3
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 25
11514: PUSH
11515: LD_INT 4
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 25
11524: PUSH
11525: LD_INT 5
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 25
11534: PUSH
11535: LD_INT 8
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: PPUSH
11557: CALL_OW 69
11561: PUSH
11562: LD_EXP 1
11566: PUSH
11567: LD_EXP 8
11571: PUSH
11572: LD_EXP 4
11576: PUSH
11577: LD_EXP 5
11581: PUSH
11582: LD_EXP 6
11586: PUSH
11587: LD_EXP 3
11591: PUSH
11592: LD_EXP 13
11596: PUSH
11597: LD_EXP 9
11601: PUSH
11602: LD_EXP 14
11606: PUSH
11607: LD_EXP 7
11611: PUSH
11612: LD_EXP 10
11616: PUSH
11617: LD_EXP 12
11621: PUSH
11622: LD_EXP 11
11626: PUSH
11627: LD_EXP 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: DIFF
11648: PPUSH
11649: LD_STRING 13_other_survivors
11651: PPUSH
11652: CALL_OW 38
// YouWin ;
11656: CALL_OW 103
// end ; end_of_file
11660: PPOPN 3
11662: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11663: LD_EXP 32
11667: PUSH
11668: LD_INT 2
11670: EQUAL
11671: IFFALSE 11807
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11681: LD_ADDR_VAR 0 2
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_INT 1
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 21
11698: PUSH
11699: LD_INT 3
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 2
11708: PUSH
11709: LD_INT 30
11711: PUSH
11712: LD_INT 0
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 30
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: PPUSH
11739: CALL_OW 69
11743: ST_TO_ADDR
// for i in tmp do
11744: LD_ADDR_VAR 0 1
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: FOR_IN
11755: IFFALSE 11788
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11757: LD_ADDR_VAR 0 3
11761: PUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 274
11776: PPUSH
11777: LD_INT 3
11779: PPUSH
11780: CALL_OW 275
11784: PLUS
11785: ST_TO_ADDR
11786: GO 11754
11788: POP
11789: POP
// if yourSiberite < 79 then
11790: LD_VAR 0 3
11794: PUSH
11795: LD_INT 79
11797: LESS
11798: IFFALSE 11807
// YouLost ( siberite ) ;
11800: LD_STRING siberite
11802: PPUSH
11803: CALL_OW 104
// end ; end_of_file
11807: PPOPN 3
11809: END
// every 8 8$0 + 7 7$0 do
11810: GO 11812
11812: DISABLE
// begin enable ;
11813: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11814: LD_INT 8
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: LD_INT 3
11825: PPUSH
11826: CALL_OW 12
11830: PPUSH
11831: LD_INT 0
11833: PPUSH
11834: LD_INT 0
11836: PPUSH
11837: LD_INT 2
11839: PUSH
11840: LD_INT 3
11842: PUSH
11843: LD_INT 4
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_OWVAR 67
11855: ARRAY
11856: PPUSH
11857: LD_INT 0
11859: PPUSH
11860: LD_INT 10
11862: PPUSH
11863: LD_INT 8
11865: PUSH
11866: LD_INT 9
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 1
11875: PPUSH
11876: LD_INT 2
11878: PPUSH
11879: CALL_OW 12
11883: ARRAY
11884: PPUSH
11885: LD_INT 12
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL 7196 0 11
// end ;
11895: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11896: GO 11898
11898: DISABLE
11899: LD_INT 0
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin enable ;
11904: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11905: LD_ADDR_EXP 33
11909: PUSH
11910: LD_EXP 33
11914: PUSH
11915: LD_INT 1
11917: PLUS
11918: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
11919: LD_INT 22
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: LD_INT 58
11934: PUSH
11935: EMPTY
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 34
11944: PUSH
11945: LD_INT 31
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: PPUSH
11957: CALL_OW 69
11961: PUSH
11962: LD_INT 0
11964: EQUAL
11965: IFFALSE 12161
// begin uc_side := 8 ;
11967: LD_ADDR_OWVAR 20
11971: PUSH
11972: LD_INT 8
11974: ST_TO_ADDR
// uc_nation := 2 ;
11975: LD_ADDR_OWVAR 21
11979: PUSH
11980: LD_INT 2
11982: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11983: LD_INT 14
11985: PPUSH
11986: LD_INT 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: LD_INT 31
11994: PPUSH
11995: LD_INT 100
11997: PPUSH
11998: CALL 5833 0 5
// for i = 1 to 2 do
12002: LD_ADDR_VAR 0 1
12006: PUSH
12007: DOUBLE
12008: LD_INT 1
12010: DEC
12011: ST_TO_ADDR
12012: LD_INT 2
12014: PUSH
12015: FOR_TO
12016: IFFALSE 12159
// begin veh := CreateVehicle ;
12018: LD_ADDR_VAR 0 2
12022: PUSH
12023: CALL_OW 45
12027: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12028: LD_VAR 0 2
12032: PPUSH
12033: LD_INT 5
12035: PPUSH
12036: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
12040: LD_ADDR_VAR 0 3
12044: PUSH
12045: LD_INT 181
12047: PUSH
12048: LD_INT 105
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 137
12057: PUSH
12058: LD_INT 6
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: LD_VAR 0 1
12073: PUSH
12074: LD_INT 2
12076: MOD
12077: PUSH
12078: LD_INT 1
12080: PLUS
12081: ARRAY
12082: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
12083: LD_VAR 0 2
12087: PPUSH
12088: LD_VAR 0 3
12092: PUSH
12093: LD_INT 1
12095: ARRAY
12096: PPUSH
12097: LD_VAR 0 3
12101: PUSH
12102: LD_INT 2
12104: ARRAY
12105: PPUSH
12106: LD_INT 12
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12116: LD_INT 0
12118: PPUSH
12119: LD_INT 7
12121: PUSH
12122: LD_INT 9
12124: PUSH
12125: LD_INT 10
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: LD_OWVAR 67
12137: ARRAY
12138: PPUSH
12139: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12143: CALL_OW 44
12147: PPUSH
12148: LD_VAR 0 2
12152: PPUSH
12153: CALL_OW 52
// end ;
12157: GO 12015
12159: POP
12160: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12161: LD_INT 8
12163: PUSH
12164: LD_INT 9
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 1
12173: PPUSH
12174: LD_INT 2
12176: PPUSH
12177: CALL_OW 12
12181: ARRAY
12182: PPUSH
12183: LD_INT 8
12185: PPUSH
12186: LD_INT 4
12188: PPUSH
12189: LD_INT 6
12191: PPUSH
12192: CALL_OW 12
12196: PUSH
12197: LD_INT 6
12199: PPUSH
12200: LD_INT 9
12202: PPUSH
12203: CALL_OW 12
12207: PUSH
12208: LD_INT 7
12210: PPUSH
12211: LD_INT 10
12213: PPUSH
12214: CALL_OW 12
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_OWVAR 67
12228: ARRAY
12229: PPUSH
12230: LD_INT 10
12232: PPUSH
12233: LD_INT 2
12235: PPUSH
12236: LD_INT 3
12238: PPUSH
12239: LD_INT 5
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: EMPTY
12250: PPUSH
12251: LD_INT 25
12253: PUSH
12254: LD_INT 26
12256: PUSH
12257: LD_INT 27
12259: PUSH
12260: LD_INT 28
12262: PUSH
12263: LD_INT 29
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PPUSH
12273: EMPTY
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL 8264 0 11
// end ;
12282: PPOPN 3
12284: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12285: LD_EXP 33
12289: PUSH
12290: LD_INT 4
12292: GREATEREQUAL
12293: IFFALSE 12575
12295: GO 12297
12297: DISABLE
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
// begin enable ;
12302: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12303: LD_ADDR_EXP 33
12307: PUSH
12308: LD_EXP 33
12312: PUSH
12313: LD_INT 1
12315: PLUS
12316: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
12317: LD_INT 22
12319: PUSH
12320: LD_INT 8
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 34
12329: PUSH
12330: LD_INT 31
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 69
12345: PUSH
12346: LD_INT 0
12348: EQUAL
12349: IFFALSE 12490
// begin uc_side := 8 ;
12351: LD_ADDR_OWVAR 20
12355: PUSH
12356: LD_INT 8
12358: ST_TO_ADDR
// uc_nation := 2 ;
12359: LD_ADDR_OWVAR 21
12363: PUSH
12364: LD_INT 2
12366: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12367: LD_INT 14
12369: PPUSH
12370: LD_INT 3
12372: PPUSH
12373: LD_INT 1
12375: PPUSH
12376: LD_INT 31
12378: PPUSH
12379: LD_INT 100
12381: PPUSH
12382: CALL 5833 0 5
// for i = 1 to 2 do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: DOUBLE
12392: LD_INT 1
12394: DEC
12395: ST_TO_ADDR
12396: LD_INT 2
12398: PUSH
12399: FOR_TO
12400: IFFALSE 12488
// begin veh := CreateVehicle ;
12402: LD_ADDR_VAR 0 2
12406: PUSH
12407: CALL_OW 45
12411: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12412: LD_VAR 0 2
12416: PPUSH
12417: LD_INT 5
12419: PPUSH
12420: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12424: LD_VAR 0 2
12428: PPUSH
12429: LD_INT 181
12431: PPUSH
12432: LD_INT 105
12434: PPUSH
12435: LD_INT 12
12437: PPUSH
12438: LD_INT 0
12440: PPUSH
12441: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12445: LD_INT 0
12447: PPUSH
12448: LD_INT 8
12450: PUSH
12451: LD_INT 9
12453: PUSH
12454: LD_INT 10
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_OWVAR 67
12466: ARRAY
12467: PPUSH
12468: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12472: CALL_OW 44
12476: PPUSH
12477: LD_VAR 0 2
12481: PPUSH
12482: CALL_OW 52
// end ;
12486: GO 12399
12488: POP
12489: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12490: LD_INT 8
12492: PUSH
12493: LD_INT 9
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 1
12502: PPUSH
12503: LD_INT 2
12505: PPUSH
12506: CALL_OW 12
12510: ARRAY
12511: PPUSH
12512: LD_INT 8
12514: PPUSH
12515: LD_INT 1
12517: PUSH
12518: LD_INT 2
12520: PUSH
12521: LD_INT 3
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_OWVAR 67
12533: ARRAY
12534: PPUSH
12535: LD_INT 10
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 3
12543: PPUSH
12544: LD_INT 1
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PPUSH
12554: LD_INT 47
12556: PUSH
12557: LD_INT 47
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: EMPTY
12565: PPUSH
12566: EMPTY
12567: PPUSH
12568: LD_INT 1
12570: PPUSH
12571: CALL 8264 0 11
// end ;
12575: PPOPN 2
12577: END
// every 1 1$0 trigger eventVar2 = 1 do
12578: LD_EXP 36
12582: PUSH
12583: LD_INT 1
12585: EQUAL
12586: IFFALSE 12688
12588: GO 12590
12590: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12591: LD_INT 8
12593: PUSH
12594: LD_INT 9
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 1
12603: PPUSH
12604: LD_INT 2
12606: PPUSH
12607: CALL_OW 12
12611: ARRAY
12612: PPUSH
12613: LD_INT 3
12615: PPUSH
12616: LD_INT 5
12618: PUSH
12619: LD_INT 7
12621: PUSH
12622: LD_INT 8
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: LD_OWVAR 67
12634: ARRAY
12635: PPUSH
12636: LD_INT 10
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 3
12644: PPUSH
12645: LD_INT 3
12647: PUSH
12648: LD_INT 3
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PPUSH
12655: LD_INT 46
12657: PUSH
12658: LD_INT 44
12660: PUSH
12661: LD_INT 45
12663: PUSH
12664: LD_INT 47
12666: PUSH
12667: LD_INT 49
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: PPUSH
12677: EMPTY
12678: PPUSH
12679: EMPTY
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL 8264 0 11
// end ; end_of_file
12688: END
// every 1 1$0 do
12689: GO 12691
12691: DISABLE
// begin enable ;
12692: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12693: LD_INT 3
12695: PPUSH
12696: LD_INT 5
12698: PPUSH
12699: CALL_OW 12
12703: PPUSH
12704: LD_INT 13
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 55
// end ; end_of_file
12714: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
12715: GO 12717
12717: DISABLE
// begin ru_radar := 98 ;
12718: LD_ADDR_EXP 43
12722: PUSH
12723: LD_INT 98
12725: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12726: LD_ADDR_EXP 44
12730: PUSH
12731: LD_INT 89
12733: ST_TO_ADDR
// us_hack := 99 ;
12734: LD_ADDR_EXP 45
12738: PUSH
12739: LD_INT 99
12741: ST_TO_ADDR
// us_artillery := 97 ;
12742: LD_ADDR_EXP 46
12746: PUSH
12747: LD_INT 97
12749: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12750: LD_ADDR_EXP 47
12754: PUSH
12755: LD_INT 91
12757: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
12758: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
12759: LD_INT 0
12761: PPUSH
12762: PPUSH
12763: PPUSH
12764: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 264
12774: PUSH
12775: LD_EXP 47
12779: EQUAL
12780: IFFALSE 12852
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12782: LD_INT 68
12784: PPUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 255
12794: PPUSH
12795: CALL_OW 321
12799: PUSH
12800: LD_INT 2
12802: EQUAL
12803: IFFALSE 12815
// eff := 70 else
12805: LD_ADDR_VAR 0 6
12809: PUSH
12810: LD_INT 70
12812: ST_TO_ADDR
12813: GO 12823
// eff := 30 ;
12815: LD_ADDR_VAR 0 6
12819: PUSH
12820: LD_INT 30
12822: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12823: LD_VAR 0 1
12827: PPUSH
12828: CALL_OW 250
12832: PPUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 251
12842: PPUSH
12843: LD_VAR 0 6
12847: PPUSH
12848: CALL_OW 495
// end ; end ;
12852: LD_VAR 0 4
12856: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
12857: LD_INT 0
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
12863: PPUSH
12864: PPUSH
// if cmd = 124 then
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 124
12872: EQUAL
12873: IFFALSE 13079
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
12875: LD_ADDR_VAR 0 5
12879: PUSH
12880: LD_INT 2
12882: PUSH
12883: LD_INT 34
12885: PUSH
12886: LD_INT 53
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 34
12895: PUSH
12896: LD_INT 14
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: PPUSH
12908: CALL_OW 69
12912: ST_TO_ADDR
// if not tmp then
12913: LD_VAR 0 5
12917: NOT
12918: IFFALSE 12922
// exit ;
12920: GO 13079
// for i in tmp do
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_VAR 0 5
12931: PUSH
12932: FOR_IN
12933: IFFALSE 13077
// begin taskList := GetTaskList ( i ) ;
12935: LD_ADDR_VAR 0 6
12939: PUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: CALL_OW 437
12949: ST_TO_ADDR
// if not taskList then
12950: LD_VAR 0 6
12954: NOT
12955: IFFALSE 12959
// continue ;
12957: GO 12932
// for j = 1 to taskList do
12959: LD_ADDR_VAR 0 4
12963: PUSH
12964: DOUBLE
12965: LD_INT 1
12967: DEC
12968: ST_TO_ADDR
12969: LD_VAR 0 6
12973: PUSH
12974: FOR_TO
12975: IFFALSE 13073
// if taskList [ j ] [ 1 ] = | then
12977: LD_VAR 0 6
12981: PUSH
12982: LD_VAR 0 4
12986: ARRAY
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_STRING |
12994: EQUAL
12995: IFFALSE 13071
// begin _taskList := Delete ( taskList , 1 ) ;
12997: LD_ADDR_VAR 0 7
13001: PUSH
13002: LD_VAR 0 6
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 3
13014: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_VAR 0 7
13024: PPUSH
13025: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_VAR 0 6
13038: PUSH
13039: LD_VAR 0 4
13043: ARRAY
13044: PUSH
13045: LD_INT 2
13047: ARRAY
13048: PPUSH
13049: LD_VAR 0 6
13053: PUSH
13054: LD_VAR 0 4
13058: ARRAY
13059: PUSH
13060: LD_INT 3
13062: ARRAY
13063: PPUSH
13064: LD_INT 8
13066: PPUSH
13067: CALL 13084 0 4
// end ;
13071: GO 12974
13073: POP
13074: POP
// end ;
13075: GO 12932
13077: POP
13078: POP
// end ; end ;
13079: LD_VAR 0 2
13083: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13084: LD_INT 0
13086: PPUSH
13087: PPUSH
13088: PPUSH
13089: PPUSH
13090: PPUSH
13091: PPUSH
13092: PPUSH
13093: PPUSH
13094: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
13095: LD_VAR 0 1
13099: NOT
13100: PUSH
13101: LD_VAR 0 2
13105: PPUSH
13106: LD_VAR 0 3
13110: PPUSH
13111: CALL_OW 488
13115: NOT
13116: OR
13117: PUSH
13118: LD_VAR 0 4
13122: NOT
13123: OR
13124: IFFALSE 13128
// exit ;
13126: GO 13468
// list := [ ] ;
13128: LD_ADDR_VAR 0 13
13132: PUSH
13133: EMPTY
13134: ST_TO_ADDR
// if x - r < 0 then
13135: LD_VAR 0 2
13139: PUSH
13140: LD_VAR 0 4
13144: MINUS
13145: PUSH
13146: LD_INT 0
13148: LESS
13149: IFFALSE 13161
// min_x := 0 else
13151: LD_ADDR_VAR 0 7
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
13159: GO 13177
// min_x := x - r ;
13161: LD_ADDR_VAR 0 7
13165: PUSH
13166: LD_VAR 0 2
13170: PUSH
13171: LD_VAR 0 4
13175: MINUS
13176: ST_TO_ADDR
// if y - r < 0 then
13177: LD_VAR 0 3
13181: PUSH
13182: LD_VAR 0 4
13186: MINUS
13187: PUSH
13188: LD_INT 0
13190: LESS
13191: IFFALSE 13203
// min_y := 0 else
13193: LD_ADDR_VAR 0 8
13197: PUSH
13198: LD_INT 0
13200: ST_TO_ADDR
13201: GO 13219
// min_y := y - r ;
13203: LD_ADDR_VAR 0 8
13207: PUSH
13208: LD_VAR 0 3
13212: PUSH
13213: LD_VAR 0 4
13217: MINUS
13218: ST_TO_ADDR
// max_x := x + r ;
13219: LD_ADDR_VAR 0 9
13223: PUSH
13224: LD_VAR 0 2
13228: PUSH
13229: LD_VAR 0 4
13233: PLUS
13234: ST_TO_ADDR
// max_y := y + r ;
13235: LD_ADDR_VAR 0 10
13239: PUSH
13240: LD_VAR 0 3
13244: PUSH
13245: LD_VAR 0 4
13249: PLUS
13250: ST_TO_ADDR
// for _x = min_x to max_x do
13251: LD_ADDR_VAR 0 11
13255: PUSH
13256: DOUBLE
13257: LD_VAR 0 7
13261: DEC
13262: ST_TO_ADDR
13263: LD_VAR 0 9
13267: PUSH
13268: FOR_TO
13269: IFFALSE 13386
// for _y = min_y to max_y do
13271: LD_ADDR_VAR 0 12
13275: PUSH
13276: DOUBLE
13277: LD_VAR 0 8
13281: DEC
13282: ST_TO_ADDR
13283: LD_VAR 0 10
13287: PUSH
13288: FOR_TO
13289: IFFALSE 13382
// begin if not ValidHex ( _x , _y ) then
13291: LD_VAR 0 11
13295: PPUSH
13296: LD_VAR 0 12
13300: PPUSH
13301: CALL_OW 488
13305: NOT
13306: IFFALSE 13310
// continue ;
13308: GO 13288
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13310: LD_VAR 0 11
13314: PPUSH
13315: LD_VAR 0 12
13319: PPUSH
13320: CALL_OW 351
13324: PUSH
13325: LD_VAR 0 11
13329: PPUSH
13330: LD_VAR 0 12
13334: PPUSH
13335: CALL_OW 554
13339: AND
13340: IFFALSE 13380
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13342: LD_ADDR_VAR 0 13
13346: PUSH
13347: LD_VAR 0 13
13351: PPUSH
13352: LD_VAR 0 13
13356: PUSH
13357: LD_INT 1
13359: PLUS
13360: PPUSH
13361: LD_VAR 0 11
13365: PUSH
13366: LD_VAR 0 12
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 2
13379: ST_TO_ADDR
// end ;
13380: GO 13288
13382: POP
13383: POP
13384: GO 13268
13386: POP
13387: POP
// if not list then
13388: LD_VAR 0 13
13392: NOT
13393: IFFALSE 13397
// exit ;
13395: GO 13468
// for i in list do
13397: LD_ADDR_VAR 0 6
13401: PUSH
13402: LD_VAR 0 13
13406: PUSH
13407: FOR_IN
13408: IFFALSE 13466
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
13410: LD_VAR 0 1
13414: PPUSH
13415: LD_STRING M
13417: PUSH
13418: LD_VAR 0 6
13422: PUSH
13423: LD_INT 1
13425: ARRAY
13426: PUSH
13427: LD_VAR 0 6
13431: PUSH
13432: LD_INT 2
13434: ARRAY
13435: PUSH
13436: LD_INT 0
13438: PUSH
13439: LD_INT 0
13441: PUSH
13442: LD_INT 0
13444: PUSH
13445: LD_INT 0
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: PPUSH
13460: CALL_OW 447
13464: GO 13407
13466: POP
13467: POP
// end ;
13468: LD_VAR 0 5
13472: RET
