// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1220 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1124 0 0
// PrepareDifficulty ;
 248: CALL 8426 0 0
// Action ;
 252: CALL 5290 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 40
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 41
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 42
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 40
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31092 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 40
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31092 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 40
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31092 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 40
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31092 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 40
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31092 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 40
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31092 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 40
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31092 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 40
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31092 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31092 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31092 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31092 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31092 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31092 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31092 0 3
 780: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING Powell
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 31092 0 3
 799: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 800: LD_ADDR_VAR 0 2
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_EXP 2
 814: PUSH
 815: LD_EXP 3
 819: PUSH
 820: LD_EXP 4
 824: PUSH
 825: LD_EXP 5
 829: PUSH
 830: LD_EXP 6
 834: PUSH
 835: LD_EXP 7
 839: PUSH
 840: LD_EXP 8
 844: PUSH
 845: LD_EXP 9
 849: PUSH
 850: LD_EXP 10
 854: PUSH
 855: LD_EXP 11
 859: PUSH
 860: LD_EXP 12
 864: PUSH
 865: LD_EXP 13
 869: PUSH
 870: LD_EXP 14
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 891: LD_ADDR_VAR 0 3
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 33
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PPUSH
 931: CALL_OW 69
 935: ST_TO_ADDR
// for i = tmp downto 1 do
 936: LD_ADDR_VAR 0 4
 940: PUSH
 941: DOUBLE
 942: LD_VAR 0 2
 946: INC
 947: ST_TO_ADDR
 948: LD_INT 1
 950: PUSH
 951: FOR_DOWNTO
 952: IFFALSE 989
// if not tmp [ i ] then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_VAR 0 4
 963: ARRAY
 964: NOT
 965: IFFALSE 987
// tmp := Delete ( tmp , i ) ;
 967: LD_ADDR_VAR 0 2
 971: PUSH
 972: LD_VAR 0 2
 976: PPUSH
 977: LD_VAR 0 4
 981: PPUSH
 982: CALL_OW 3
 986: ST_TO_ADDR
 987: GO 951
 989: POP
 990: POP
// for i = 1 to tmp do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1037
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1009: LD_VAR 0 2
1013: PUSH
1014: LD_VAR 0 4
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 3
1024: PUSH
1025: LD_VAR 0 4
1029: ARRAY
1030: PPUSH
1031: CALL_OW 52
1035: GO 1006
1037: POP
1038: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 25
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 34
1084: PUSH
1085: LD_INT 13
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: PUSH
1101: LD_INT 0
1103: EQUAL
1104: AND
1105: IFFALSE 1119
// SetClass ( JMM , 2 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 336
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareAmericansRandom ; var i ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1136: LD_ADDR_EXP 16
1140: PUSH
1141: LD_STRING 13c_others
1143: PPUSH
1144: CALL_OW 31
1148: ST_TO_ADDR
// for i in others13 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: LD_EXP 16
1158: PUSH
1159: FOR_IN
1160: IFFALSE 1213
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_INT 22
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 58
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 69
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 52
1211: GO 1159
1213: POP
1214: POP
// end ;
1215: LD_VAR 0 1
1219: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1228: LD_ADDR_VAR 0 5
1232: PUSH
1233: LD_STRING 13_VehiclesIn13_1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_INT 100
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 3
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 6
1276: PUSH
1277: LD_INT 100
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 5
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 6
1302: PUSH
1303: LD_INT 100
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 6
1328: PUSH
1329: LD_INT 100
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 100
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 6
1380: PUSH
1381: LD_INT 100
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 5
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 6
1406: PUSH
1407: LD_INT 100
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 5
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 6
1432: PUSH
1433: LD_INT 100
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1459: LD_ADDR_EXP 24
1463: PUSH
1464: LD_STRING 13_ResourcesInCargo13_1
1466: PPUSH
1467: EMPTY
1468: PPUSH
1469: CALL_OW 30
1473: ST_TO_ADDR
// cargoList = [ ] ;
1474: LD_ADDR_VAR 0 6
1478: PUSH
1479: EMPTY
1480: ST_TO_ADDR
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// if vehicles then
1489: LD_VAR 0 5
1493: IFFALSE 1840
// begin for i := 1 to vehicles do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_VAR 0 5
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: ARRAY
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1533: LD_ADDR_OWVAR 37
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: PUSH
1549: LD_INT 2
1551: ARRAY
1552: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1553: LD_ADDR_OWVAR 39
1557: PUSH
1558: LD_VAR 0 5
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_VAR 0 5
1582: PUSH
1583: LD_VAR 0 2
1587: ARRAY
1588: PUSH
1589: LD_INT 4
1591: ARRAY
1592: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1593: LD_ADDR_OWVAR 40
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 5
1611: ARRAY
1612: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1613: LD_ADDR_OWVAR 41
1617: PUSH
1618: LD_INT 40
1620: ST_TO_ADDR
// veh = CreateVehicle ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: CALL_OW 45
1630: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1631: LD_VAR 0 4
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// end ;
1658: GO 1510
1660: POP
1661: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1662: LD_ADDR_VAR 0 6
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: ST_TO_ADDR
// if cargoList then
1707: LD_VAR 0 6
1711: IFFALSE 1840
// for i = 1 to cargoList do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_VAR 0 6
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1838
// begin if resources then
1731: LD_EXP 24
1735: IFFALSE 1836
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1737: LD_VAR 0 6
1741: PUSH
1742: LD_VAR 0 2
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_EXP 24
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: PPUSH
1766: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_EXP 24
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_EXP 24
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 3
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// end ; end ;
1836: GO 1728
1838: POP
1839: POP
// end ; end ;
1840: LD_VAR 0 1
1844: RET
// export function PowellSupport ; var i , veh , un ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
1850: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 4
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_OWVAR 67
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2150
// begin uc_nation := 1 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// uc_side := 1 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// vc_engine := engine_siberite ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control := control_manual ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: LD_INT 6
1930: PUSH
1931: LD_INT 9
1933: PUSH
1934: LD_INT 5
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_OWVAR 67
1951: PUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: CALL_OW 12
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1965: LD_OWVAR 40
1969: PUSH
1970: LD_INT 6
1972: EQUAL
1973: IFFALSE 2002
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1975: LD_ADDR_OWVAR 37
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: ST_TO_ADDR
2000: GO 2037
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: ST_TO_ADDR
// veh = CreateVehicle ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: CALL_OW 45
2046: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetDir ( veh , 1 ) ;
2062: LD_VAR 0 3
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 233
// hc_gallery :=  ;
2074: LD_ADDR_OWVAR 33
2078: PUSH
2079: LD_STRING 
2081: ST_TO_ADDR
// hc_name :=  ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 8
2101: PUSH
2102: LD_INT 8
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_OWVAR 67
2118: ARRAY
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2134: LD_VAR 0 4
2138: PPUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1885
2150: POP
2151: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 2
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_OWVAR 67
2184: ARRAY
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2262
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 9
2197: PUSH
2198: LD_INT 8
2200: PUSH
2201: LD_INT 8
2203: PUSH
2204: LD_INT 7
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_OWVAR 67
2217: ARRAY
2218: PPUSH
2219: CALL_OW 380
// un := CreateHuman ;
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: CALL_OW 44
2232: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2233: LD_VAR 0 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2245: LD_VAR 0 4
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: GO 2186
2262: POP
2263: POP
// end ; end_of_file
2264: LD_VAR 0 1
2268: RET
// export function PrepareBurlak ; begin
2269: LD_INT 0
2271: PPUSH
// uc_side := 7 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 7
2279: ST_TO_ADDR
// uc_nation := 3 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// vc_engine := engine_siberite ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 3
2295: ST_TO_ADDR
// vc_control := control_manual ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: LD_INT 45
2314: PUSH
2315: LD_INT 46
2317: PUSH
2318: LD_INT 46
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_OWVAR 67
2331: ARRAY
2332: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2333: LD_ADDR_OWVAR 37
2337: PUSH
2338: LD_INT 24
2340: ST_TO_ADDR
// Masha := CreateVehicle ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: CALL_OW 45
2350: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2351: LD_EXP 18
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2363: LD_EXP 18
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2378: LD_EXP 18
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2390: LD_ADDR_EXP 17
2394: PUSH
2395: LD_STRING Burlak
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_STRING 
2403: PPUSH
2404: CALL 31092 0 3
2408: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_EXP 18
2418: PPUSH
2419: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2423: LD_EXP 18
2427: PPUSH
2428: LD_INT 107
2430: PPUSH
2431: LD_INT 118
2433: PPUSH
2434: CALL_OW 114
// spawnBurlak := 1 ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 1
2450: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// uc_side := 7 ;
2458: LD_ADDR_OWVAR 20
2462: PUSH
2463: LD_INT 7
2465: ST_TO_ADDR
// uc_nation := 3 ;
2466: LD_ADDR_OWVAR 21
2470: PUSH
2471: LD_INT 3
2473: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2474: LD_ADDR_EXP 19
2478: PUSH
2479: LD_STRING Gnyevko
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_STRING 
2487: PPUSH
2488: CALL 31092 0 3
2492: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2493: LD_ADDR_EXP 20
2497: PUSH
2498: LD_STRING Titov
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 31092 0 3
2511: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2512: LD_ADDR_EXP 21
2516: PUSH
2517: LD_STRING Xavier2
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_STRING 
2525: PPUSH
2526: CALL 31092 0 3
2530: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2531: LD_ADDR_EXP 22
2535: PUSH
2536: LD_STRING Belkov
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: LD_STRING 
2544: PPUSH
2545: CALL 31092 0 3
2549: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2550: LD_ADDR_EXP 23
2554: PUSH
2555: LD_STRING Lipshchin
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: LD_STRING 
2563: PPUSH
2564: CALL 31092 0 3
2568: ST_TO_ADDR
// for i = 1 to 5 do
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: DOUBLE
2575: LD_INT 1
2577: DEC
2578: ST_TO_ADDR
2579: LD_INT 5
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2708
// begin vc_engine := engine_siberite ;
2585: LD_ADDR_OWVAR 39
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// vc_control := control_manual ;
2593: LD_ADDR_OWVAR 38
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2601: LD_ADDR_OWVAR 40
2605: PUSH
2606: LD_INT 43
2608: PUSH
2609: LD_INT 45
2611: PUSH
2612: LD_INT 45
2614: PUSH
2615: LD_INT 44
2617: PUSH
2618: LD_INT 49
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2640: LD_ADDR_OWVAR 37
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 24
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: ST_TO_ADDR
// veh = CreateVehicle ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// end ;
2706: GO 2582
2708: POP
2709: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 7
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 58
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2787: LD_EXP 21
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2805: LD_EXP 22
2809: PPUSH
2810: LD_VAR 0 4
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2823: LD_EXP 23
2827: PPUSH
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 5
2835: ARRAY
2836: PPUSH
2837: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2841: LD_EXP 19
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2853: LD_EXP 20
2857: PUSH
2858: LD_EXP 23
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: LD_INT 9
2869: PPUSH
2870: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2894: LD_VAR 0 4
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 118
2904: PPUSH
2905: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2909: LD_INT 35
2911: PPUSH
2912: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_INT 34
2923: PUSH
2924: LD_INT 49
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 72
2935: PPUSH
2936: LD_EXP 18
2940: PPUSH
2941: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 34
2955: PUSH
2956: LD_INT 49
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PPUSH
2972: LD_INT 107
2974: PPUSH
2975: LD_INT 118
2977: PPUSH
2978: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_EXP 20
2991: PUSH
2992: LD_EXP 23
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: LD_INT 50
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 54
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 72
3028: ST_TO_ADDR
// if bazooka then
3029: LD_VAR 0 5
3033: IFFALSE 3075
// begin for i in bazooka do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3073
// if See ( 1 , i ) then
3048: LD_INT 1
3050: PPUSH
3051: LD_VAR 0 2
3055: PPUSH
3056: CALL_OW 292
3060: IFFALSE 3071
// ComSpaceTimeShoot ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL 32039 0 1
3071: GO 3045
3073: POP
3074: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 49
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: PUSH
3095: LD_INT 0
3097: EQUAL
3098: PUSH
3099: LD_EXP 18
3103: PPUSH
3104: CALL_OW 303
3108: OR
3109: IFFALSE 2909
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: LD_EXP 17
3142: DIFF
3143: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3144: LD_VAR 0 4
3148: PPUSH
3149: LD_INT 107
3151: PPUSH
3152: LD_INT 118
3154: PPUSH
3155: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_EXP 20
3168: PUSH
3169: LD_EXP 23
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: LD_INT 50
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 54
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: ST_TO_ADDR
// if bazooka then
3206: LD_VAR 0 5
3210: IFFALSE 3252
// begin for i in bazooka do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: LD_VAR 0 5
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3250
// if See ( 1 , i ) then
3225: LD_INT 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 292
3237: IFFALSE 3248
// ComSpaceTimeShoot ( i ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: CALL 32039 0 1
3248: GO 3222
3250: POP
3251: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3252: LD_EXP 17
3256: PPUSH
3257: CALL_OW 302
3261: PUSH
3262: LD_EXP 17
3266: PPUSH
3267: CALL_OW 310
3271: NOT
3272: AND
3273: IFFALSE 3290
// ComMoveXY ( Burlak , 107 , 118 ) ;
3275: LD_EXP 17
3279: PPUSH
3280: LD_INT 107
3282: PPUSH
3283: LD_INT 118
3285: PPUSH
3286: CALL_OW 111
// until not tmp ;
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3111
// end ;
3297: LD_VAR 0 1
3301: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
// result := [ ] ;
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_INT 8
3340: PUSH
3341: LD_INT 9
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_VAR 0 6
3352: ARRAY
3353: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: DOUBLE
3360: LD_INT 1
3362: DEC
3363: ST_TO_ADDR
3364: LD_INT 6
3366: PUSH
3367: LD_INT 8
3369: PUSH
3370: LD_INT 10
3372: PUSH
3373: LD_INT 11
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3627
// begin uc_side := 3 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 3
3398: ST_TO_ADDR
// uc_nation := 3 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 3
3406: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3407: LD_INT 24
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 1
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: CALL_OW 12
3433: ARRAY
3434: PPUSH
3435: LD_INT 46
3437: PUSH
3438: LD_INT 46
3440: PUSH
3441: LD_INT 45
3443: PUSH
3444: LD_INT 47
3446: PUSH
3447: LD_INT 49
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 5
3462: PPUSH
3463: CALL_OW 12
3467: ARRAY
3468: PPUSH
3469: LD_INT 100
3471: PPUSH
3472: CALL 35932 0 5
// veh := CreateVehicle ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: CALL_OW 45
3485: ST_TO_ADDR
// result := Join ( result , veh ) ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_VAR 0 4
3500: PPUSH
3501: CALL 68413 0 2
3505: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 5
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 6
3525: ARRAY
3526: PPUSH
3527: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// if vc_control = control_manual then
3548: LD_OWVAR 38
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3603
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 7
3563: PUSH
3564: LD_INT 8
3566: PUSH
3567: LD_INT 9
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_OWVAR 67
3583: ARRAY
3584: PPUSH
3585: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3589: CALL_OW 44
3593: PPUSH
3594: LD_VAR 0 4
3598: PPUSH
3599: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3603: LD_INT 18
3605: PPUSH
3606: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_INT 100
3617: PPUSH
3618: LD_INT 55
3620: PPUSH
3621: CALL_OW 114
// end ;
3625: GO 3388
3627: POP
3628: POP
// for i in result do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3656
// SetTag ( i , 10 ) ;
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_INT 10
3649: PPUSH
3650: CALL_OW 109
3654: GO 3639
3656: POP
3657: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3658: LD_EXP 44
3662: PPUSH
3663: CALL_OW 427
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// rnd := 0 ;
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// uc_side := 8 ;
3685: LD_ADDR_OWVAR 20
3689: PUSH
3690: LD_INT 8
3692: ST_TO_ADDR
// uc_nation := 2 ;
3693: LD_ADDR_OWVAR 21
3697: PUSH
3698: LD_INT 2
3700: ST_TO_ADDR
// hc_name :=  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// hc_gallery :=  ;
3709: LD_ADDR_OWVAR 33
3713: PUSH
3714: LD_STRING 
3716: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3717: LD_ADDR_OWVAR 29
3721: PUSH
3722: LD_INT 10
3724: PUSH
3725: LD_INT 11
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_OWVAR 67
3768: ARRAY
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 7
3782: PUSH
3783: LD_INT 8
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: PPUSH
3804: CALL_OW 380
// un := CreateHuman ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 9
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// SetTag ( un , 1 ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_EXP 31
3876: PPUSH
3877: CALL_OW 12
3881: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3882: LD_EXP 45
3886: PPUSH
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_EXP 31
3896: PUSH
3897: LD_VAR 0 3
3901: ARRAY
3902: PUSH
3903: LD_INT 1
3905: ARRAY
3906: PPUSH
3907: LD_EXP 31
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 595
// end ;
3935: LD_VAR 0 1
3939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3940: LD_INT 22
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: LD_INT 61
3955: PUSH
3956: EMPTY
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 50
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: LD_INT 33
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: IFFALSE 4076
3991: GO 3993
3993: DISABLE
3994: LD_INT 0
3996: PPUSH
// begin enable ;
3997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 22
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 61
4018: PUSH
4019: EMPTY
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: LD_INT 33
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4074
// begin wait ( 0 0$0.3 ) ;
4056: LD_INT 10
4058: PPUSH
4059: CALL_OW 67
// Connect ( i ) ;
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL 39032 0 1
// end ;
4072: GO 4053
4074: POP
4075: POP
// end ;
4076: PPOPN 1
4078: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// result := [ ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4097: LD_ADDR_EXP 33
4101: PUSH
4102: LD_EXP 33
4106: PUSH
4107: LD_INT 1
4109: PLUS
4110: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4111: LD_INT 22
4113: PUSH
4114: LD_INT 8
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 58
4126: PUSH
4127: EMPTY
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 34
4136: PUSH
4137: LD_INT 31
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_INT 2
4156: LESS
4157: IFFALSE 4401
// begin uc_side := 8 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 8
4166: ST_TO_ADDR
// uc_nation := 2 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 2
4174: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4175: LD_INT 14
4177: PPUSH
4178: LD_INT 3
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 31
4186: PPUSH
4187: LD_INT 100
4189: PPUSH
4190: CALL 35932 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 22
4202: PUSH
4203: LD_INT 8
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: LD_INT 58
4215: PUSH
4216: EMPTY
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 34
4225: PUSH
4226: LD_INT 31
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: PLUS
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 2
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4399
// begin veh := CreateVehicle ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 181
4283: PUSH
4284: LD_INT 105
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 137
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_INT 2
4312: MOD
4313: PUSH
4314: LD_INT 1
4316: PLUS
4317: ARRAY
4318: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: LD_INT 12
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 7
4357: PUSH
4358: LD_INT 9
4360: PUSH
4361: LD_INT 10
4363: PUSH
4364: LD_INT 10
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4383: CALL_OW 44
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 52
// end ;
4397: GO 4251
4399: POP
4400: POP
// end ; dir := rand ( 1 , 2 ) ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: LD_INT 1
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 12
4416: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_VAR 0 9
4436: ARRAY
4437: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_INT 6
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PUSH
4467: LD_EXP 33
4471: PLUS
4472: ST_TO_ADDR
// if counter > 20 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 20
4480: GREATER
4481: IFFALSE 4491
// counter := 20 ;
4483: LD_ADDR_VAR 0 7
4487: PUSH
4488: LD_INT 20
4490: ST_TO_ADDR
// for i := 1 to counter do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 7
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4840
// begin uc_side := 8 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 8
4516: ST_TO_ADDR
// uc_nation := 2 ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 2
4524: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 12
4545: ARRAY
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 12
4574: ARRAY
4575: PPUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 92
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: PPUSH
4614: LD_INT 100
4616: PPUSH
4617: CALL 35932 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4621: LD_OWVAR 40
4625: PUSH
4626: LD_INT 29
4628: EQUAL
4629: IFFALSE 4639
// vc_control := control_remote ;
4631: LD_ADDR_OWVAR 38
4635: PUSH
4636: LD_INT 2
4638: ST_TO_ADDR
// veh := CreateVehicle ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: CALL_OW 45
4648: ST_TO_ADDR
// result := Join ( result , veh ) ;
4649: LD_ADDR_VAR 0 1
4653: PUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL 68413 0 2
4668: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_VAR 0 9
4688: ARRAY
4689: PPUSH
4690: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 6
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if vc_control = control_manual then
4711: LD_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4766
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 7
4726: PUSH
4727: LD_INT 8
4729: PUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_OWVAR 67
4746: ARRAY
4747: PPUSH
4748: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4752: CALL_OW 44
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4766: LD_INT 10
4768: PPUSH
4769: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 263
4782: PUSH
4783: LD_INT 2
4785: EQUAL
4786: PUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 312
4796: NOT
4797: AND
4798: IFFALSE 4816
// begin Connect ( veh ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL 39032 0 1
// wait ( 0 0$0.3 ) ;
4809: LD_INT 10
4811: PPUSH
4812: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4831: LD_INT 18
4833: PPUSH
4834: CALL_OW 67
// end ;
4838: GO 4506
4840: POP
4841: POP
// if arabianAttacksCounter = 1 then
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4856
// DestroySibDeposit ;
4852: CALL 3672 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4856: LD_EXP 33
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: MOD
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 5247
// begin tmp := rand ( 0 , 2 ) ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 2
4901: PPUSH
4902: CALL_OW 12
4906: ST_TO_ADDR
// if not tmp then
4907: LD_VAR 0 8
4911: NOT
4912: IFFALSE 5073
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4914: LD_ADDR_VAR 0 2
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_INT 3
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5069
// begin uc_side := 8 ;
4951: LD_ADDR_OWVAR 20
4955: PUSH
4956: LD_INT 8
4958: ST_TO_ADDR
// uc_nation := 2 ;
4959: LD_ADDR_OWVAR 21
4963: PUSH
4964: LD_INT 2
4966: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 7
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: LD_INT 10
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PPUSH
4997: CALL_OW 380
// un := CreateHuman ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// result := Join ( result , un ) ;
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL 68413 0 2
5030: ST_TO_ADDR
// if Prob ( 60 ) then
5031: LD_INT 60
5033: PPUSH
5034: CALL_OW 13
5038: IFFALSE 5052
// SetClass ( un , class_mortar ) ;
5040: LD_VAR 0 5
5044: PPUSH
5045: LD_INT 8
5047: PPUSH
5048: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5052: LD_VAR 0 5
5056: PPUSH
5057: LD_INT 16
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4948
5069: POP
5070: POP
// end else
5071: GO 5237
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 2
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5235
// begin uc_side := 8 ;
5110: LD_ADDR_OWVAR 20
5114: PUSH
5115: LD_INT 8
5117: ST_TO_ADDR
// uc_nation := 0 ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5126: LD_ADDR_OWVAR 28
5130: PUSH
5131: LD_INT 17
5133: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5134: LD_ADDR_OWVAR 31
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 0
5144: PUSH
5145: LD_INT 0
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5157: LD_ADDR_OWVAR 29
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: LD_INT 10
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// hc_gallery :=  ;
5172: LD_ADDR_OWVAR 33
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_name :=  ;
5180: LD_ADDR_OWVAR 26
5184: PUSH
5185: LD_STRING 
5187: ST_TO_ADDR
// un := CreateHuman ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: CALL_OW 44
5197: ST_TO_ADDR
// result := Join ( result , un ) ;
5198: LD_ADDR_VAR 0 1
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 5
5212: PPUSH
5213: CALL 68413 0 2
5217: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5218: LD_VAR 0 5
5222: PPUSH
5223: LD_INT 16
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5107
5235: POP
5236: POP
// end ; if sibDeposits then
5237: LD_EXP 31
5241: IFFALSE 5247
// DestroySibDeposit ;
5243: CALL 3672 0 0
// end ; for i in result do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_VAR 0 1
5256: PUSH
5257: FOR_IN
5258: IFFALSE 5274
// SetTag ( i , 10 ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_INT 10
5267: PPUSH
5268: CALL_OW 109
5272: GO 5257
5274: POP
5275: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5276: LD_EXP 43
5280: PPUSH
5281: CALL_OW 427
// end ; end_of_file
5285: LD_VAR 0 1
5289: RET
// export function Action ; var tmp ; begin
5290: LD_INT 0
5292: PPUSH
5293: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: ST_TO_ADDR
// InGameOn ;
5328: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5341: LD_INT 22
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_INT 69
5372: PPUSH
5373: LD_INT 94
5375: PPUSH
5376: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2-JMM-1
5387: PPUSH
5388: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D2-Huck-1
5408: PPUSH
5409: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D2-JMM-2
5429: PPUSH
5430: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 87
// InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5447: LD_STRING M1
5449: PPUSH
5450: CALL_OW 337
// SaveForQuickRestart ;
5454: CALL_OW 22
// wait ( 10 10$00 ) ;
5458: LD_INT 21000
5460: PPUSH
5461: CALL_OW 67
// DialogueOn ;
5465: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING D3-Pow-1
5476: PPUSH
5477: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D3-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5493: LD_EXP 15
5497: PPUSH
5498: LD_STRING D3-Pow-2
5500: PPUSH
5501: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-2
5512: PPUSH
5513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5517: LD_EXP 15
5521: PPUSH
5522: LD_STRING D3-Pow-3
5524: PPUSH
5525: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_STRING D3-JMM-3
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5541: LD_EXP 15
5545: PPUSH
5546: LD_STRING D3-Pow-4
5548: PPUSH
5549: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5553: LD_EXP 1
5557: PPUSH
5558: LD_STRING D3-JMM-4
5560: PPUSH
5561: CALL_OW 88
// DialogueOff ;
5565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5569: LD_STRING M2
5571: PPUSH
5572: CALL_OW 337
// wait ( 2 2$30 ) ;
5576: LD_INT 5250
5578: PPUSH
5579: CALL_OW 67
// PrepareBurlak ;
5583: CALL 2269 0 0
// BurlakArmy ;
5587: CALL 2451 0 0
// end ;
5591: LD_VAR 0 1
5595: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5596: LD_INT 1
5598: PPUSH
5599: LD_EXP 18
5603: PPUSH
5604: CALL_OW 292
5608: IFFALSE 5767
5610: GO 5612
5612: DISABLE
// begin DialogueOn ;
5613: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5617: LD_EXP 18
5621: PPUSH
5622: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5626: LD_INT 22
5628: PUSH
5629: LD_INT 1
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: LD_INT 26
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 25
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 25
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_STRING D5-Sol1-1
5719: PPUSH
5720: LD_STRING D5-FSol1-1
5722: PPUSH
5723: CALL 8225 0 3
// Say ( JMM , D5-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D5-JMM-1
5734: PPUSH
5735: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_STRING DAmer-Bur-1
5746: PPUSH
5747: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING DAmer-JMM-1
5758: PPUSH
5759: CALL_OW 88
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 7
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 70
5785: IFFALSE 6184
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
// begin enable ;
5793: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 70
5816: PUSH
5817: FOR_IN
5818: IFFALSE 6182
// begin if i = Burlak or i = Masha then
5820: LD_VAR 0 1
5824: PUSH
5825: LD_EXP 17
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_EXP 18
5840: EQUAL
5841: OR
5842: IFFALSE 5989
// begin RemoveUnit ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 64
// DialogueOn ;
5853: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D5a-JMM-1
5864: PPUSH
5865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: CALL_OW 69
5959: PPUSH
5960: LD_STRING D5a-Sol1-1
5962: PPUSH
5963: LD_STRING D5-FSol1-1
5965: PPUSH
5966: CALL 8225 0 3
// DialogueOff ;
5970: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5974: LD_STRING M2b
5976: PPUSH
5977: CALL_OW 337
// spawnBurlak = 0 ;
5981: LD_ADDR_EXP 27
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 247
5998: PUSH
5999: LD_INT 2
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 263
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6145
// begin case IsDrivenBy ( i ) of Gnyevko :
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 311
6028: PUSH
6029: LD_EXP 19
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6052
6039: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6040: LD_INT 1
6042: PPUSH
6043: LD_STRING 13_Gnyevko_1
6045: PPUSH
6046: CALL_OW 39
6050: GO 6145
6052: LD_EXP 20
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6075
6062: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6063: LD_INT 1
6065: PPUSH
6066: LD_STRING 13_Titov_1
6068: PPUSH
6069: CALL_OW 39
6073: GO 6145
6075: LD_EXP 21
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6098
6085: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6086: LD_INT 1
6088: PPUSH
6089: LD_STRING 13_Xavier_1
6091: PPUSH
6092: CALL_OW 39
6096: GO 6145
6098: LD_EXP 22
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6121
6108: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6109: LD_INT 1
6111: PPUSH
6112: LD_STRING 13_Belkov_1
6114: PPUSH
6115: CALL_OW 39
6119: GO 6145
6121: LD_EXP 23
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6144
6131: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6132: LD_INT 1
6134: PPUSH
6135: LD_STRING 13_Lipshchin_1
6137: PPUSH
6138: CALL_OW 39
6142: GO 6145
6144: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 49
6157: EQUAL
6158: IFFALSE 6171
// DestroyUnit ( i ) else
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 65
6169: GO 6180
// RemoveUnit ( i ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 64
// end ;
6180: GO 5817
6182: POP
6183: POP
// end ;
6184: PPOPN 1
6186: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 500
6209: LESS
6210: AND
6211: PUSH
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 255
6221: PUSH
6222: LD_INT 7
6224: EQUAL
6225: AND
6226: IFFALSE 6246
6228: GO 6230
6230: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6231: LD_EXP 17
6235: PPUSH
6236: LD_INT 107
6238: PPUSH
6239: LD_INT 118
6241: PPUSH
6242: CALL_OW 111
6246: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6247: LD_EXP 17
6251: PPUSH
6252: CALL_OW 301
6256: PUSH
6257: LD_EXP 27
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: IFFALSE 6399
6268: GO 6270
6270: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6271: LD_EXP 1
6275: PPUSH
6276: LD_STRING D5b-JMM-1
6278: PPUSH
6279: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 25
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 25
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: PPUSH
6374: LD_STRING D5b-Sol1-1
6376: PPUSH
6377: LD_STRING 
6379: PPUSH
6380: CALL 8225 0 3
// ChangeMissionObjectives ( M2a ) ;
6384: LD_STRING M2a
6386: PPUSH
6387: CALL_OW 337
// burlakStatus := 1 ;
6391: LD_ADDR_EXP 28
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// end ;
6399: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6400: LD_EXP 2
6404: PPUSH
6405: CALL_OW 301
6409: IFFALSE 6546
6411: GO 6413
6413: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D6-JMM-1
6421: PPUSH
6422: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6426: LD_INT 22
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 2
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 25
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: LD_STRING D6-Sol1-1
6519: PPUSH
6520: LD_STRING 
6522: PPUSH
6523: CALL 8225 0 3
// Say ( JMM , D6-JMM-2 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D6-JMM-2
6534: PPUSH
6535: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6539: LD_STRING M1a
6541: PPUSH
6542: CALL_OW 337
// end ;
6546: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6547: LD_INT 25
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 321
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6578
6563: GO 6565
6565: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6566: LD_EXP 2
6570: PPUSH
6571: LD_STRING D6-Huck-2
6573: PPUSH
6574: CALL_OW 88
6578: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6579: LD_INT 22
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 34
6594: PUSH
6595: LD_INT 8
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 35
6604: PUSH
6605: LD_INT 8
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PUSH
6626: LD_INT 5
6628: PPUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 57
6664: PUSH
6665: EMPTY
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 70
6682: AND
6683: PUSH
6684: LD_INT 5
6686: PPUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 21
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 57
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 70
6740: AND
6741: IFFALSE 6783
6743: GO 6745
6745: DISABLE
// begin DialogueOn ;
6746: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D7-JMM-1
6757: PPUSH
6758: CALL_OW 88
// DialogueOff ;
6762: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6766: LD_STRING M4
6768: PPUSH
6769: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 424
// end ;
6783: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6784: LD_INT 6
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 70
6815: PUSH
6816: LD_EXP 37
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 29
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: AND
6835: IFFALSE 6900
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6841: LD_ADDR_EXP 26
6845: PUSH
6846: LD_INT 6
6848: PPUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6882: LD_INT 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// radationResearched := 1 ;
6892: LD_ADDR_EXP 29
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 301
6910: PUSH
6911: LD_EXP 29
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: IFFALSE 6956
6922: GO 6924
6924: DISABLE
// begin enable ;
6925: ENABLE
// radationResearched = 0 ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6934: LD_INT 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6944: LD_EXP 1
6948: PPUSH
6949: LD_STRING D9a-JMM-1
6951: PPUSH
6952: CALL_OW 88
// end ; end_of_file
6956: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 8
6964: EQUAL
6965: PUSH
6966: LD_EXP 35
6970: PUSH
6971: LD_INT 0
6973: EQUAL
6974: AND
6975: IFFALSE 7028
// begin eventVar1 := 1 ;
6977: LD_ADDR_EXP 35
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// DialogueOn ;
6985: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D6a-JMM-1
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7001: LD_EXP 15
7005: PPUSH
7006: LD_STRING D6a-Pow-1
7008: PPUSH
7009: CALL_OW 94
// DialogueOff ;
7013: CALL_OW 7
// wait ( 3 3$0 ) ;
7017: LD_INT 6300
7019: PPUSH
7020: CALL_OW 67
// PowellSupport ;
7024: CALL 1845 0 0
// end ; end ;
7028: PPOPN 5
7030: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL 26803 0 1
// if un = JMM then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_EXP 1
7049: EQUAL
7050: IFFALSE 7059
// YouLost ( JMM ) ;
7052: LD_STRING JMM
7054: PPUSH
7055: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7059: LD_VAR 0 1
7063: PPUSH
7064: CALL_OW 264
7068: PUSH
7069: LD_INT 31
7071: EQUAL
7072: IFFALSE 7088
// achivCounter := achivCounter + 1 ;
7074: LD_ADDR_EXP 41
7078: PUSH
7079: LD_EXP 41
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 255
7097: PUSH
7098: LD_INT 1
7100: NONEQUAL
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 247
7111: PUSH
7112: LD_INT 2
7114: EQUAL
7115: AND
7116: IFFALSE 7132
// destroyCounter := destroyCounter + 1 ;
7118: LD_ADDR_EXP 42
7122: PUSH
7123: LD_EXP 42
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ST_TO_ADDR
// end ;
7132: PPOPN 1
7134: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7135: LD_VAR 0 2
7139: PUSH
7140: LD_EXP 18
7144: EQUAL
7145: IFFALSE 7154
// SetAchievement ( ACH_MASHA ) ;
7147: LD_STRING ACH_MASHA
7149: PPUSH
7150: CALL_OW 543
// end ;
7154: PPOPN 4
7156: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 26923 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 264
7180: PUSH
7181: LD_INT 8
7183: EQUAL
7184: PUSH
7185: LD_EXP 36
7189: PUSH
7190: LD_INT 0
7192: EQUAL
7193: AND
7194: IFFALSE 7263
// begin eventVar2 := 1 ;
7196: LD_ADDR_EXP 36
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// DialogueOn ;
7204: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D6b-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7220: LD_EXP 15
7224: PPUSH
7225: LD_STRING D6b-Pow-1
7227: PPUSH
7228: CALL_OW 94
// DialogueOff ;
7232: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7236: LD_INT 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7256: LD_STRING M3
7258: PPUSH
7259: CALL_OW 337
// end ; end ;
7263: PPOPN 2
7265: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 309
7283: PUSH
7284: LD_EXP 37
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: AND
7293: IFFALSE 7518
// begin eventVar3 := 1 ;
7295: LD_ADDR_EXP 37
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7303: LD_INT 175
7305: PPUSH
7306: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7310: LD_INT 7
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: IFFALSE 7371
// begin radarOnSpot := 1 ;
7354: LD_ADDR_EXP 30
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7362: LD_STRING M3a
7364: PPUSH
7365: CALL_OW 337
// end else
7369: GO 7378
// ChangeMissionObjectives ( M3b ) ;
7371: LD_STRING M3b
7373: PPUSH
7374: CALL_OW 337
// DialogueOn ;
7378: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-1
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-1
7401: PPUSH
7402: CALL_OW 88
// if IsOk ( Stevens ) then
7406: LD_EXP 2
7410: PPUSH
7411: CALL_OW 302
7415: IFFALSE 7477
// begin Say ( Stevens , D8-Huck-2 ) ;
7417: LD_EXP 2
7421: PPUSH
7422: LD_STRING D8-Huck-2
7424: PPUSH
7425: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D8-JMM-2
7436: PPUSH
7437: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7441: LD_EXP 2
7445: PPUSH
7446: LD_STRING D8-Huck-3
7448: PPUSH
7449: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D8-JMM-3
7460: PPUSH
7461: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7465: LD_EXP 2
7469: PPUSH
7470: LD_STRING D8-Huck-4
7472: PPUSH
7473: CALL_OW 88
// end ; DialogueOff ;
7477: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 0
7496: PPUSH
7497: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7511: LD_STRING M5
7513: PPUSH
7514: CALL_OW 337
// end ; end ;
7518: PPOPN 3
7520: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7521: LD_EXP 26
7525: PPUSH
7526: CALL_OW 302
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 26
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_EXP 38
7547: PUSH
7548: LD_INT 0
7550: EQUAL
7551: AND
7552: PUSH
7553: LD_EXP 37
7557: PUSH
7558: LD_INT 1
7560: EQUAL
7561: AND
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 268
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: OR
7597: AND
7598: IFFALSE 7608
// eventVar4 := 1 ;
7600: LD_ADDR_EXP 38
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// end ;
7608: PPOPN 2
7610: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 248
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7874
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_EXP 32
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: DOUBLE
7650: LD_EXP 31
7654: INC
7655: ST_TO_ADDR
7656: LD_INT 1
7658: PUSH
7659: FOR_DOWNTO
7660: IFFALSE 7730
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7662: LD_EXP 31
7666: PUSH
7667: LD_VAR 0 4
7671: ARRAY
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PUSH
7677: LD_VAR 0 2
7681: EQUAL
7682: PUSH
7683: LD_EXP 31
7687: PUSH
7688: LD_VAR 0 4
7692: ARRAY
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PUSH
7698: LD_VAR 0 3
7702: EQUAL
7703: AND
7704: IFFALSE 7728
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7706: LD_ADDR_EXP 31
7710: PUSH
7711: LD_EXP 31
7715: PPUSH
7716: LD_VAR 0 4
7720: PPUSH
7721: CALL_OW 3
7725: ST_TO_ADDR
// break ;
7726: GO 7730
// end ;
7728: GO 7659
7730: POP
7731: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7732: LD_EXP 39
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 3
7750: PPUSH
7751: CALL_OW 428
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: IN
7771: AND
7772: IFFALSE 7874
// begin eventVar5 := 1 ;
7774: LD_ADDR_EXP 39
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// DialogueOn ;
7782: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7786: LD_EXP 2
7790: PPUSH
7791: LD_STRING D4-Sci1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D4-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7810: LD_EXP 2
7814: PPUSH
7815: LD_STRING D4-Sci1-2
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D4-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_STRING D4-Sci1-3
7841: PPUSH
7842: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7846: LD_EXP 1
7850: PPUSH
7851: LD_STRING D4-JMM-3
7853: PPUSH
7854: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7858: LD_EXP 1
7862: PPUSH
7863: LD_STRING D4-JMM-3a
7865: PPUSH
7866: CALL_OW 88
// DialogueOff ;
7870: CALL_OW 7
// end ; end ; end ;
7874: PPOPN 5
7876: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: AND
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: AND
7968: IFFALSE 7982
// SetBName ( building , omega ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING omega
7977: PPUSH
7978: CALL_OW 500
// end ;
7982: PPOPN 2
7984: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL 26907 0 1
// end ;
7994: PPOPN 1
7996: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 43
8006: EQUAL
8007: IFFALSE 8013
// ArabianAttack ;
8009: CALL 10078 0 0
// if event = eventRussianAttack then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 44
8022: EQUAL
8023: IFFALSE 8029
// RussianAttack ;
8025: CALL 10443 0 0
// end ;
8029: PPOPN 1
8031: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8032: LD_VAR 0 1
8036: PUSH
8037: LD_EXP 45
8041: EQUAL
8042: IFFALSE 8136
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 302
8053: PUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 488
8068: AND
8069: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// if not HasTask ( p1 ) then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 314
8087: NOT
8088: IFFALSE 8124
// begin ComContaminate ( p1 , p2 , p3 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 42
8116: PPUSH
8117: LD_INT 3
8119: PPUSH
8120: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8071
// end ; end ; end ;
8136: PPOPN 7
8138: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8222
// begin ComMoveXY ( driver , 41 , 2 ) ;
8161: LD_VAR 0 1
8165: PPUSH
8166: LD_INT 41
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8176: LD_INT 35
8178: PPUSH
8179: CALL_OW 67
// if IsDead ( driver ) then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 301
8192: IFFALSE 8196
// exit ;
8194: GO 8222
// until IsAt ( driver , 41 , 2 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 41
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 307
8211: IFFALSE 8176
// RemoveUnit ( driver ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 64
// end ; end ; end_of_file
8222: PPOPN 4
8224: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_EXP 3
8254: PUSH
8255: LD_EXP 4
8259: PUSH
8260: LD_EXP 5
8264: PUSH
8265: LD_EXP 6
8269: PUSH
8270: LD_EXP 7
8274: PUSH
8275: LD_EXP 8
8279: PUSH
8280: LD_EXP 9
8284: PUSH
8285: LD_EXP 10
8289: PUSH
8290: LD_EXP 11
8294: PUSH
8295: LD_EXP 12
8299: PUSH
8300: LD_EXP 13
8304: PUSH
8305: LD_EXP 14
8309: PUSH
8310: LD_EXP 15
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// if not characters then
8333: LD_VAR 0 1
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8421
// speaker := characters [ rand ( 1 , characters ) ] ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 12
8364: ARRAY
8365: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8397
// Say ( speaker , dialogMID ) else
8381: LD_VAR 0 6
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 88
8395: GO 8411
// Say ( speaker , dialogFID ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: CALL_OW 88
// result := speaker ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 6
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 4
8425: RET
// export function PrepareDifficulty ; begin
8426: LD_INT 0
8428: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8429: LD_INT 5
8431: PPUSH
8432: LD_INT 8
8434: PPUSH
8435: LD_INT 2
8437: PPUSH
8438: CALL_OW 322
// if Difficulty = 1 then
8442: LD_OWVAR 67
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: IFFALSE 8569
// begin SetTech ( 66 , 8 , state_researched ) ;
8452: LD_INT 66
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8465: LD_INT 67
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 0
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8478: LD_INT 68
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8491: LD_INT 51
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8504: LD_INT 52
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 0
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8517: LD_INT 53
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8530: LD_INT 60
8532: PPUSH
8533: LD_INT 8
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8543: LD_INT 61
8545: PPUSH
8546: LD_INT 8
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8556: LD_INT 62
8558: PPUSH
8559: LD_INT 8
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 322
// end ; if Difficulty = 2 then
8569: LD_OWVAR 67
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8696
// begin SetTech ( 66 , 8 , state_researched ) ;
8579: LD_INT 66
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8592: LD_INT 67
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8605: LD_INT 68
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8618: LD_INT 51
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8644: LD_INT 53
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 2
8652: PPUSH
8653: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8657: LD_INT 60
8659: PPUSH
8660: LD_INT 8
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8670: LD_INT 61
8672: PPUSH
8673: LD_INT 8
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8683: LD_INT 62
8685: PPUSH
8686: LD_INT 8
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 322
// end ; if Difficulty >= 3 then
8696: LD_OWVAR 67
8700: PUSH
8701: LD_INT 3
8703: GREATEREQUAL
8704: IFFALSE 8823
// begin SetTech ( 66 , 8 , state_researched ) ;
8706: LD_INT 66
8708: PPUSH
8709: LD_INT 8
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8719: LD_INT 67
8721: PPUSH
8722: LD_INT 8
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8732: LD_INT 68
8734: PPUSH
8735: LD_INT 8
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8745: LD_INT 51
8747: PPUSH
8748: LD_INT 8
8750: PPUSH
8751: LD_INT 2
8753: PPUSH
8754: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8758: LD_INT 52
8760: PPUSH
8761: LD_INT 8
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8771: LD_INT 53
8773: PPUSH
8774: LD_INT 8
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8784: LD_INT 60
8786: PPUSH
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8797: LD_INT 61
8799: PPUSH
8800: LD_INT 8
8802: PPUSH
8803: LD_INT 2
8805: PPUSH
8806: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8810: LD_INT 62
8812: PPUSH
8813: LD_INT 8
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 322
// end ; end ;
8823: LD_VAR 0 1
8827: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
// for i in charactersList do
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// SaveCharacters ( i , ident ) ;
8845: LD_VAR 0 4
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 38
8859: GO 8842
8861: POP
8862: POP
// end ; end_of_file
8863: LD_VAR 0 3
8867: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8868: LD_EXP 38
8872: PUSH
8873: LD_INT 1
8875: EQUAL
8876: IFFALSE 9782
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin m1 := false ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// m2 := false ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// m3 := false ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// DialogueOn ;
8910: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8914: LD_EXP 1
8918: PPUSH
8919: LD_STRING D9b-JMM-1
8921: PPUSH
8922: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8926: LD_EXP 15
8930: PPUSH
8931: LD_STRING D9b-Pow-1
8933: PPUSH
8934: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8938: LD_EXP 1
8942: PPUSH
8943: LD_STRING D9b-JMM-2
8945: PPUSH
8946: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8950: LD_EXP 15
8954: PPUSH
8955: LD_STRING D9b-Pow-2
8957: PPUSH
8958: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8962: LD_EXP 1
8966: PPUSH
8967: LD_STRING D9b-JMM-3
8969: PPUSH
8970: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8974: LD_EXP 15
8978: PPUSH
8979: LD_STRING D9b-Pow-3
8981: PPUSH
8982: CALL_OW 94
// if tick <= 60 60$00 then
8986: LD_OWVAR 1
8990: PUSH
8991: LD_INT 126000
8993: LESSEQUAL
8994: IFFALSE 9003
// SetAchievement ( ACH_ASPEED_13 ) ;
8996: LD_STRING ACH_ASPEED_13
8998: PPUSH
8999: CALL_OW 543
// if burlakStatus = 1 then
9003: LD_EXP 28
9007: PUSH
9008: LD_INT 1
9010: EQUAL
9011: IFFALSE 9033
// begin m1 := true ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9021: LD_STRING Burlak
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: CALL_OW 101
// end else
9031: GO 9044
// begin AddMedal ( Burlak , - 1 ) ;
9033: LD_STRING Burlak
9035: PPUSH
9036: LD_INT 1
9038: NEG
9039: PPUSH
9040: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9044: LD_EXP 2
9048: PPUSH
9049: CALL_OW 302
9053: IFFALSE 9075
// begin m2 := true ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9063: LD_STRING Stevens
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 101
// end else
9073: GO 9086
// begin AddMedal ( Stevens , - 1 ) ;
9075: LD_STRING Stevens
9077: PPUSH
9078: LD_INT 1
9080: NEG
9081: PPUSH
9082: CALL_OW 101
// end ; if radarOnSpot = 1 then
9086: LD_EXP 30
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: IFFALSE 9116
// begin m3 := true ;
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9104: LD_STRING Observation
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 101
// end else
9114: GO 9127
// begin AddMedal ( Observation , - 1 ) ;
9116: LD_STRING Observation
9118: PPUSH
9119: LD_INT 1
9121: NEG
9122: PPUSH
9123: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9127: LD_VAR 0 1
9131: PUSH
9132: LD_VAR 0 2
9136: AND
9137: PUSH
9138: LD_VAR 0 3
9142: AND
9143: PUSH
9144: LD_OWVAR 67
9148: PUSH
9149: LD_INT 3
9151: GREATEREQUAL
9152: AND
9153: IFFALSE 9165
// SetAchievementEX ( ACH_AMER , 13 ) ;
9155: LD_STRING ACH_AMER
9157: PPUSH
9158: LD_INT 13
9160: PPUSH
9161: CALL_OW 564
// GiveMedals ( MAIN ) ;
9165: LD_STRING MAIN
9167: PPUSH
9168: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9172: LD_EXP 28
9176: PPUSH
9177: LD_STRING 13_BurlakStatus_1
9179: PPUSH
9180: CALL_OW 39
// if IsLive ( Stevens ) then
9184: LD_EXP 2
9188: PPUSH
9189: CALL_OW 300
9193: IFFALSE 9207
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9195: LD_INT 1
9197: PPUSH
9198: LD_STRING 13_StevensStatus_1
9200: PPUSH
9201: CALL_OW 39
9205: GO 9217
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9207: LD_INT 0
9209: PPUSH
9210: LD_STRING 13_StevensStatus_1
9212: PPUSH
9213: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9217: LD_INT 22
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: LD_INT 25
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 25
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 25
9272: PUSH
9273: LD_INT 4
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 5
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 8
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 69
9318: PPUSH
9319: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9323: LD_EXP 1
9327: PPUSH
9328: LD_EXP 34
9332: PUSH
9333: LD_STRING JMM
9335: STR
9336: PPUSH
9337: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9341: LD_EXP 8
9345: PPUSH
9346: LD_EXP 34
9350: PUSH
9351: LD_STRING Brown
9353: STR
9354: PPUSH
9355: CALL 8828 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9359: LD_EXP 4
9363: PPUSH
9364: LD_EXP 34
9368: PUSH
9369: LD_STRING Donaldson
9371: STR
9372: PPUSH
9373: CALL 8828 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9377: LD_EXP 5
9381: PPUSH
9382: LD_EXP 34
9386: PUSH
9387: LD_STRING Bobby
9389: STR
9390: PPUSH
9391: CALL 8828 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9395: LD_EXP 6
9399: PPUSH
9400: LD_EXP 34
9404: PUSH
9405: LD_STRING Cyrus
9407: STR
9408: PPUSH
9409: CALL 8828 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9413: LD_EXP 3
9417: PPUSH
9418: LD_EXP 34
9422: PUSH
9423: LD_STRING Lisa
9425: STR
9426: PPUSH
9427: CALL 8828 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9431: LD_EXP 13
9435: PPUSH
9436: LD_EXP 34
9440: PUSH
9441: LD_STRING Frank
9443: STR
9444: PPUSH
9445: CALL 8828 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_EXP 34
9458: PUSH
9459: LD_STRING Kikuchi
9461: STR
9462: PPUSH
9463: CALL 8828 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9467: LD_EXP 10
9471: PPUSH
9472: LD_EXP 34
9476: PUSH
9477: LD_STRING Houten
9479: STR
9480: PPUSH
9481: CALL 8828 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9485: LD_EXP 12
9489: PPUSH
9490: LD_EXP 34
9494: PUSH
9495: LD_STRING Gary
9497: STR
9498: PPUSH
9499: CALL 8828 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9503: LD_EXP 11
9507: PPUSH
9508: LD_EXP 34
9512: PUSH
9513: LD_STRING Cornell
9515: STR
9516: PPUSH
9517: CALL 8828 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9521: LD_EXP 7
9525: PPUSH
9526: LD_EXP 34
9530: PUSH
9531: LD_STRING Denis
9533: STR
9534: PPUSH
9535: CALL 8828 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9539: LD_EXP 9
9543: PPUSH
9544: LD_EXP 34
9548: PUSH
9549: LD_STRING Gladstone
9551: STR
9552: PPUSH
9553: CALL 8828 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9557: LD_EXP 2
9561: PPUSH
9562: LD_EXP 34
9566: PUSH
9567: LD_STRING Stevens
9569: STR
9570: PPUSH
9571: CALL 8828 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9575: LD_INT 50
9577: PUSH
9578: EMPTY
9579: LIST
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 25
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 25
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 25
9646: PUSH
9647: LD_INT 5
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 25
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 69
9683: PUSH
9684: LD_EXP 1
9688: PUSH
9689: LD_EXP 8
9693: PUSH
9694: LD_EXP 4
9698: PUSH
9699: LD_EXP 5
9703: PUSH
9704: LD_EXP 6
9708: PUSH
9709: LD_EXP 3
9713: PUSH
9714: LD_EXP 13
9718: PUSH
9719: LD_EXP 9
9723: PUSH
9724: LD_EXP 14
9728: PUSH
9729: LD_EXP 7
9733: PUSH
9734: LD_EXP 10
9738: PUSH
9739: LD_EXP 12
9743: PUSH
9744: LD_EXP 11
9748: PUSH
9749: LD_EXP 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: DIFF
9770: PPUSH
9771: LD_STRING 13_other_survivors
9773: PPUSH
9774: CALL_OW 38
// YouWin ;
9778: CALL_OW 103
// end ; end_of_file
9782: PPOPN 3
9784: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9785: LD_EXP 32
9789: PUSH
9790: LD_INT 2
9792: EQUAL
9793: PUSH
9794: LD_INT 34
9796: PUSH
9797: LD_INT 8
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: NOT
9809: AND
9810: PUSH
9811: LD_INT 25
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 321
9821: PUSH
9822: LD_INT 1
9824: EQUAL
9825: AND
9826: IFFALSE 9962
9828: GO 9830
9830: DISABLE
9831: LD_INT 0
9833: PPUSH
9834: PPUSH
9835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 30
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// for i in tmp do
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_VAR 0 2
9908: PUSH
9909: FOR_IN
9910: IFFALSE 9943
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9912: LD_ADDR_VAR 0 3
9916: PUSH
9917: LD_VAR 0 3
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 274
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: CALL_OW 275
9939: PLUS
9940: ST_TO_ADDR
9941: GO 9909
9943: POP
9944: POP
// if yourSiberite < 60 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 60
9952: LESS
9953: IFFALSE 9962
// YouLost ( siberite ) ;
9955: LD_STRING siberite
9957: PPUSH
9958: CALL_OW 104
// end ; end_of_file
9962: PPOPN 3
9964: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9965: LD_INT 22
9967: PUSH
9968: LD_INT 8
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 10007
9999: GO 10001
10001: DISABLE
// begin enable ;
10002: ENABLE
// PrepareArabianAttack ;
10003: CALL 4079 0 0
// end ;
10007: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10008: LD_EXP 35
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: PUSH
10017: LD_INT 22
10019: PUSH
10020: LD_INT 8
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 21
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PUSH
10046: LD_INT 6
10048: LESS
10049: AND
10050: IFFALSE 10077
10052: GO 10054
10054: DISABLE
// begin wait ( 4 4$00 ) ;
10055: LD_INT 8400
10057: PPUSH
10058: CALL_OW 67
// PrepareRussianAttack ;
10062: CALL 3302 0 0
// wait ( 12 12$00 ) ;
10066: LD_INT 25200
10068: PPUSH
10069: CALL_OW 67
// PrepareRussianAttack ;
10073: CALL 3302 0 0
// end ;
10077: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
10088: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10089: LD_ADDR_VAR 0 8
10093: PUSH
10094: LD_INT 22
10096: PUSH
10097: LD_INT 8
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 120
10106: PUSH
10107: LD_INT 10
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 69
10122: ST_TO_ADDR
// if not units then
10123: LD_VAR 0 8
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10438
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10132: LD_ADDR_VAR 0 4
10136: PUSH
10137: LD_INT 80
10139: PUSH
10140: LD_INT 60
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 54
10149: PUSH
10150: LD_INT 57
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 55
10159: PUSH
10160: LD_INT 74
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 61
10169: PUSH
10170: LD_INT 85
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10183: LD_ADDR_VAR 0 5
10187: PUSH
10188: LD_INT 93
10190: PUSH
10191: LD_INT 99
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 85
10200: PUSH
10201: LD_INT 99
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10219: LD_ADDR_VAR 0 6
10223: PUSH
10224: LD_VAR 0 8
10228: PPUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 72
10243: ST_TO_ADDR
// if vehicles then
10244: LD_VAR 0 6
10248: IFFALSE 10264
// AgressiveMove ( vehicles , path ) ;
10250: LD_VAR 0 6
10254: PPUSH
10255: LD_VAR 0 4
10259: PPUSH
10260: CALL 71017 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10264: LD_ADDR_VAR 0 7
10268: PUSH
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 21
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: ST_TO_ADDR
// if infantry then
10303: LD_VAR 0 7
10307: IFFALSE 10323
// AgressiveMove ( infantry , path2 ) ;
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 5
10318: PPUSH
10319: CALL 71017 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_VAR 0 8
10332: PPUSH
10333: LD_INT 23
10335: PUSH
10336: LD_INT 0
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: ST_TO_ADDR
// if apes then
10362: LD_VAR 0 9
10366: IFFALSE 10410
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10368: LD_VAR 0 9
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: LD_VAR 0 9
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: CALL_OW 74
10405: PPUSH
10406: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10410: LD_ADDR_VAR 0 8
10414: PUSH
10415: LD_VAR 0 8
10419: PPUSH
10420: LD_INT 50
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 72
10430: ST_TO_ADDR
// until not units ;
10431: LD_VAR 0 8
10435: NOT
10436: IFFALSE 10212
// end ;
10438: LD_VAR 0 1
10442: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10451: LD_ADDR_VAR 0 6
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: LD_INT 10
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: ST_TO_ADDR
// if not units then
10485: LD_VAR 0 6
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10625
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10494: LD_ADDR_VAR 0 4
10498: PUSH
10499: LD_INT 80
10501: PUSH
10502: LD_INT 60
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 54
10511: PUSH
10512: LD_INT 57
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 55
10521: PUSH
10522: LD_INT 74
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 61
10531: PUSH
10532: LD_INT 85
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10545: LD_INT 35
10547: PPUSH
10548: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10552: LD_ADDR_VAR 0 5
10556: PUSH
10557: LD_VAR 0 6
10561: PPUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if vehicles then
10577: LD_VAR 0 5
10581: IFFALSE 10597
// AgressiveMove ( vehicles , path ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 4
10592: PPUSH
10593: CALL 71017 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10597: LD_ADDR_VAR 0 6
10601: PUSH
10602: LD_VAR 0 6
10606: PPUSH
10607: LD_INT 50
10609: PUSH
10610: EMPTY
10611: LIST
10612: PPUSH
10613: CALL_OW 72
10617: ST_TO_ADDR
// until not units ;
10618: LD_VAR 0 6
10622: NOT
10623: IFFALSE 10545
// end ; end_of_file
10625: LD_VAR 0 1
10629: RET
// every 0 0$01 do var i , cratesSpawned ;
10630: GO 10632
10632: DISABLE
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
// begin cratesSpawned := 0 ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// for i := 1 to 6 do
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_INT 6
10657: PUSH
10658: FOR_TO
10659: IFFALSE 10684
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10661: LD_INT 2
10663: PPUSH
10664: LD_INT 5
10666: PPUSH
10667: CALL_OW 12
10671: PPUSH
10672: LD_INT 17
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 55
10682: GO 10658
10684: POP
10685: POP
// wait ( 0 0$20 ) ;
10686: LD_INT 700
10688: PPUSH
10689: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10693: LD_INT 280
10695: PPUSH
10696: CALL_OW 67
// if cratesSpawned < 12 then
10700: LD_VAR 0 2
10704: PUSH
10705: LD_INT 12
10707: LESS
10708: IFFALSE 10760
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10710: LD_INT 105
10712: PPUSH
10713: LD_INT 350
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10725: LD_INT 3
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 13
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10746: LD_ADDR_VAR 0 2
10750: PUSH
10751: LD_VAR 0 2
10755: PUSH
10756: LD_INT 1
10758: PLUS
10759: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10760: LD_VAR 0 2
10764: PUSH
10765: LD_INT 12
10767: GREATEREQUAL
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_INT 32
10776: LESS
10777: AND
10778: IFFALSE 10830
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10780: LD_INT 420
10782: PPUSH
10783: LD_INT 700
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10795: LD_INT 3
10797: PPUSH
10798: LD_INT 5
10800: PPUSH
10801: CALL_OW 12
10805: PPUSH
10806: LD_INT 13
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_VAR 0 2
10825: PUSH
10826: LD_INT 1
10828: PLUS
10829: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10830: LD_VAR 0 2
10834: PUSH
10835: LD_INT 32
10837: GREATEREQUAL
10838: IFFALSE 10912
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10840: LD_INT 13
10842: PPUSH
10843: CALL_OW 435
10847: PUSH
10848: LD_INT 14
10850: LESS
10851: IFFALSE 10862
// wait ( 0 0$20 ) else
10853: LD_INT 700
10855: PPUSH
10856: CALL_OW 67
10860: GO 10877
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10862: LD_INT 1750
10864: PPUSH
10865: LD_INT 3150
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10877: LD_INT 2
10879: PPUSH
10880: LD_INT 5
10882: PPUSH
10883: CALL_OW 12
10887: PPUSH
10888: LD_INT 13
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_INT 1
10910: PLUS
10911: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10912: LD_VAR 0 2
10916: PUSH
10917: LD_INT 120
10919: GREATEREQUAL
10920: IFFALSE 10994
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10922: LD_INT 13
10924: PPUSH
10925: CALL_OW 435
10929: PUSH
10930: LD_INT 14
10932: LESS
10933: IFFALSE 10944
// wait ( 0 0$40 ) else
10935: LD_INT 1400
10937: PPUSH
10938: CALL_OW 67
10942: GO 10959
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10944: LD_INT 2450
10946: PPUSH
10947: LD_INT 3850
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10959: LD_INT 1
10961: PPUSH
10962: LD_INT 5
10964: PPUSH
10965: CALL_OW 12
10969: PPUSH
10970: LD_INT 13
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end ; until false ;
10994: LD_INT 0
10996: IFFALSE 10693
// end ; end_of_file end_of_file
10998: PPOPN 2
11000: END
// export globalGameSaveCounter ; every 0 0$1 do
11001: GO 11003
11003: DISABLE
// begin enable ;
11004: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11005: LD_STRING updateTimer(
11007: PUSH
11008: LD_OWVAR 1
11012: STR
11013: PUSH
11014: LD_STRING );
11016: STR
11017: PPUSH
11018: CALL_OW 559
// end ;
11022: END
// every 0 0$1 do
11023: GO 11025
11025: DISABLE
// begin globalGameSaveCounter := 0 ;
11026: LD_ADDR_EXP 46
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11034: LD_STRING setGameSaveCounter(0)
11036: PPUSH
11037: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11041: LD_STRING initStreamRollete();
11043: PPUSH
11044: CALL_OW 559
// InitStreamMode ;
11048: CALL 12374 0 0
// DefineStreamItems ( false ) ;
11052: LD_INT 0
11054: PPUSH
11055: CALL 12838 0 1
// end ;
11059: END
// export function SOS_MapStart ( ) ; begin
11060: LD_INT 0
11062: PPUSH
// if streamModeActive then
11063: LD_EXP 47
11067: IFFALSE 11076
// DefineStreamItems ( true ) ;
11069: LD_INT 1
11071: PPUSH
11072: CALL 12838 0 1
// UpdateLuaVariables ( ) ;
11076: CALL 11093 0 0
// UpdateFactoryWaypoints ( ) ;
11080: CALL 25707 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11084: CALL 25964 0 0
// end ;
11088: LD_VAR 0 1
11092: RET
// function UpdateLuaVariables ( ) ; begin
11093: LD_INT 0
11095: PPUSH
// if globalGameSaveCounter then
11096: LD_EXP 46
11100: IFFALSE 11134
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11102: LD_ADDR_EXP 46
11106: PUSH
11107: LD_EXP 46
11111: PPUSH
11112: CALL 69774 0 1
11116: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11117: LD_STRING setGameSaveCounter(
11119: PUSH
11120: LD_EXP 46
11124: STR
11125: PUSH
11126: LD_STRING )
11128: STR
11129: PPUSH
11130: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11134: LD_STRING setGameDifficulty(
11136: PUSH
11137: LD_OWVAR 67
11141: STR
11142: PUSH
11143: LD_STRING )
11145: STR
11146: PPUSH
11147: CALL_OW 559
// end ;
11151: LD_VAR 0 1
11155: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11156: LD_INT 0
11158: PPUSH
// if p2 = stream_mode then
11159: LD_VAR 0 2
11163: PUSH
11164: LD_INT 100
11166: EQUAL
11167: IFFALSE 12170
// begin if not StreamModeActive then
11169: LD_EXP 47
11173: NOT
11174: IFFALSE 11184
// StreamModeActive := true ;
11176: LD_ADDR_EXP 47
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// if p3 = 0 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_INT 0
11191: EQUAL
11192: IFFALSE 11198
// InitStreamMode ;
11194: CALL 12374 0 0
// if p3 = 1 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 1
11205: EQUAL
11206: IFFALSE 11216
// sRocket := true ;
11208: LD_ADDR_EXP 52
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 2 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 2
11223: EQUAL
11224: IFFALSE 11234
// sSpeed := true ;
11226: LD_ADDR_EXP 51
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 3 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 3
11241: EQUAL
11242: IFFALSE 11252
// sEngine := true ;
11244: LD_ADDR_EXP 53
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 4 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 4
11259: EQUAL
11260: IFFALSE 11270
// sSpec := true ;
11262: LD_ADDR_EXP 50
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 5 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 5
11277: EQUAL
11278: IFFALSE 11288
// sLevel := true ;
11280: LD_ADDR_EXP 54
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 6 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 6
11295: EQUAL
11296: IFFALSE 11306
// sArmoury := true ;
11298: LD_ADDR_EXP 55
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 7 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 7
11313: EQUAL
11314: IFFALSE 11324
// sRadar := true ;
11316: LD_ADDR_EXP 56
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 8 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 8
11331: EQUAL
11332: IFFALSE 11342
// sBunker := true ;
11334: LD_ADDR_EXP 57
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 9 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 9
11349: EQUAL
11350: IFFALSE 11360
// sHack := true ;
11352: LD_ADDR_EXP 58
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 10 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 10
11367: EQUAL
11368: IFFALSE 11378
// sFire := true ;
11370: LD_ADDR_EXP 59
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 11 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 11
11385: EQUAL
11386: IFFALSE 11396
// sRefresh := true ;
11388: LD_ADDR_EXP 60
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 12 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 12
11403: EQUAL
11404: IFFALSE 11414
// sExp := true ;
11406: LD_ADDR_EXP 61
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 13 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 13
11421: EQUAL
11422: IFFALSE 11432
// sDepot := true ;
11424: LD_ADDR_EXP 62
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 14 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 14
11439: EQUAL
11440: IFFALSE 11450
// sFlag := true ;
11442: LD_ADDR_EXP 63
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 15 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 15
11457: EQUAL
11458: IFFALSE 11468
// sKamikadze := true ;
11460: LD_ADDR_EXP 71
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 16 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 16
11475: EQUAL
11476: IFFALSE 11486
// sTroll := true ;
11478: LD_ADDR_EXP 72
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 17 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 17
11493: EQUAL
11494: IFFALSE 11504
// sSlow := true ;
11496: LD_ADDR_EXP 73
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 18 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 18
11511: EQUAL
11512: IFFALSE 11522
// sLack := true ;
11514: LD_ADDR_EXP 74
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 19 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 19
11529: EQUAL
11530: IFFALSE 11540
// sTank := true ;
11532: LD_ADDR_EXP 76
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 20 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 20
11547: EQUAL
11548: IFFALSE 11558
// sRemote := true ;
11550: LD_ADDR_EXP 77
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 21 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 21
11565: EQUAL
11566: IFFALSE 11576
// sPowell := true ;
11568: LD_ADDR_EXP 78
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 22 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 22
11583: EQUAL
11584: IFFALSE 11594
// sTeleport := true ;
11586: LD_ADDR_EXP 81
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 23 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 23
11601: EQUAL
11602: IFFALSE 11612
// sOilTower := true ;
11604: LD_ADDR_EXP 83
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 24 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 24
11619: EQUAL
11620: IFFALSE 11630
// sShovel := true ;
11622: LD_ADDR_EXP 84
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 25 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 25
11637: EQUAL
11638: IFFALSE 11648
// sSheik := true ;
11640: LD_ADDR_EXP 85
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 26 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 26
11655: EQUAL
11656: IFFALSE 11666
// sEarthquake := true ;
11658: LD_ADDR_EXP 87
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 27 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 27
11673: EQUAL
11674: IFFALSE 11684
// sAI := true ;
11676: LD_ADDR_EXP 88
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 28 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 28
11691: EQUAL
11692: IFFALSE 11702
// sCargo := true ;
11694: LD_ADDR_EXP 91
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 29 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 29
11709: EQUAL
11710: IFFALSE 11720
// sDLaser := true ;
11712: LD_ADDR_EXP 92
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 30 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 30
11727: EQUAL
11728: IFFALSE 11738
// sExchange := true ;
11730: LD_ADDR_EXP 93
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 31 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 31
11745: EQUAL
11746: IFFALSE 11756
// sFac := true ;
11748: LD_ADDR_EXP 94
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 32 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 32
11763: EQUAL
11764: IFFALSE 11774
// sPower := true ;
11766: LD_ADDR_EXP 95
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 33 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 33
11781: EQUAL
11782: IFFALSE 11792
// sRandom := true ;
11784: LD_ADDR_EXP 96
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 34 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 34
11799: EQUAL
11800: IFFALSE 11810
// sShield := true ;
11802: LD_ADDR_EXP 97
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 35 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 35
11817: EQUAL
11818: IFFALSE 11828
// sTime := true ;
11820: LD_ADDR_EXP 98
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 36 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 36
11835: EQUAL
11836: IFFALSE 11846
// sTools := true ;
11838: LD_ADDR_EXP 99
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 101 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 101
11853: EQUAL
11854: IFFALSE 11864
// sSold := true ;
11856: LD_ADDR_EXP 64
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 102 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 102
11871: EQUAL
11872: IFFALSE 11882
// sDiff := true ;
11874: LD_ADDR_EXP 65
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 103 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 103
11889: EQUAL
11890: IFFALSE 11900
// sFog := true ;
11892: LD_ADDR_EXP 68
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 104 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 104
11907: EQUAL
11908: IFFALSE 11918
// sReset := true ;
11910: LD_ADDR_EXP 69
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 105 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 105
11925: EQUAL
11926: IFFALSE 11936
// sSun := true ;
11928: LD_ADDR_EXP 70
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 106 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 106
11943: EQUAL
11944: IFFALSE 11954
// sTiger := true ;
11946: LD_ADDR_EXP 66
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 107 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 107
11961: EQUAL
11962: IFFALSE 11972
// sBomb := true ;
11964: LD_ADDR_EXP 67
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 108 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 108
11979: EQUAL
11980: IFFALSE 11990
// sWound := true ;
11982: LD_ADDR_EXP 75
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 109 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 109
11997: EQUAL
11998: IFFALSE 12008
// sBetray := true ;
12000: LD_ADDR_EXP 79
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 110 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 110
12015: EQUAL
12016: IFFALSE 12026
// sContamin := true ;
12018: LD_ADDR_EXP 80
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 111 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 111
12033: EQUAL
12034: IFFALSE 12044
// sOil := true ;
12036: LD_ADDR_EXP 82
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 112 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 112
12051: EQUAL
12052: IFFALSE 12062
// sStu := true ;
12054: LD_ADDR_EXP 86
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 113 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 113
12069: EQUAL
12070: IFFALSE 12080
// sBazooka := true ;
12072: LD_ADDR_EXP 89
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 114 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 114
12087: EQUAL
12088: IFFALSE 12098
// sMortar := true ;
12090: LD_ADDR_EXP 90
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 115 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 115
12105: EQUAL
12106: IFFALSE 12116
// sRanger := true ;
12108: LD_ADDR_EXP 100
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 116 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 116
12123: EQUAL
12124: IFFALSE 12134
// sComputer := true ;
12126: LD_ADDR_EXP 101
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 117 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 117
12141: EQUAL
12142: IFFALSE 12152
// s30 := true ;
12144: LD_ADDR_EXP 102
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 118 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 118
12159: EQUAL
12160: IFFALSE 12170
// s60 := true ;
12162: LD_ADDR_EXP 103
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// end ; if p2 = hack_mode then
12170: LD_VAR 0 2
12174: PUSH
12175: LD_INT 101
12177: EQUAL
12178: IFFALSE 12306
// begin case p3 of 1 :
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 1
12187: DOUBLE
12188: EQUAL
12189: IFTRUE 12193
12191: GO 12200
12193: POP
// hHackUnlimitedResources ; 2 :
12194: CALL 24453 0 0
12198: GO 12306
12200: LD_INT 2
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12215
12208: POP
// hHackSetLevel10 ; 3 :
12209: CALL 24586 0 0
12213: GO 12306
12215: LD_INT 3
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12230
12223: POP
// hHackSetLevel10YourUnits ; 4 :
12224: CALL 24671 0 0
12228: GO 12306
12230: LD_INT 4
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12245
12238: POP
// hHackInvincible ; 5 :
12239: CALL 25119 0 0
12243: GO 12306
12245: LD_INT 5
12247: DOUBLE
12248: EQUAL
12249: IFTRUE 12253
12251: GO 12260
12253: POP
// hHackInvisible ; 6 :
12254: CALL 25230 0 0
12258: GO 12306
12260: LD_INT 6
12262: DOUBLE
12263: EQUAL
12264: IFTRUE 12268
12266: GO 12275
12268: POP
// hHackChangeYourSide ; 7 :
12269: CALL 25287 0 0
12273: GO 12306
12275: LD_INT 7
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12290
12283: POP
// hHackChangeUnitSide ; 8 :
12284: CALL 25329 0 0
12288: GO 12306
12290: LD_INT 8
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12305
12298: POP
// hHackFog ; end ;
12299: CALL 25430 0 0
12303: GO 12306
12305: POP
// end ; if p2 = game_save_mode then
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 102
12313: EQUAL
12314: IFFALSE 12369
// begin if p3 = 1 then
12316: LD_VAR 0 3
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12336
// globalGameSaveCounter := p4 ;
12326: LD_ADDR_EXP 46
12330: PUSH
12331: LD_VAR 0 4
12335: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 2
12343: EQUAL
12344: PUSH
12345: LD_EXP 46
12349: AND
12350: IFFALSE 12369
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12352: LD_STRING setGameSaveCounter(
12354: PUSH
12355: LD_EXP 46
12359: STR
12360: PUSH
12361: LD_STRING )
12363: STR
12364: PPUSH
12365: CALL_OW 559
// end ; end ;
12369: LD_VAR 0 7
12373: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12374: LD_INT 0
12376: PPUSH
// streamModeActive := false ;
12377: LD_ADDR_EXP 47
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// normalCounter := 36 ;
12385: LD_ADDR_EXP 48
12389: PUSH
12390: LD_INT 36
12392: ST_TO_ADDR
// hardcoreCounter := 18 ;
12393: LD_ADDR_EXP 49
12397: PUSH
12398: LD_INT 18
12400: ST_TO_ADDR
// sRocket := false ;
12401: LD_ADDR_EXP 52
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sSpeed := false ;
12409: LD_ADDR_EXP 51
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sEngine := false ;
12417: LD_ADDR_EXP 53
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sSpec := false ;
12425: LD_ADDR_EXP 50
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sLevel := false ;
12433: LD_ADDR_EXP 54
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sArmoury := false ;
12441: LD_ADDR_EXP 55
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sRadar := false ;
12449: LD_ADDR_EXP 56
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sBunker := false ;
12457: LD_ADDR_EXP 57
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sHack := false ;
12465: LD_ADDR_EXP 58
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sFire := false ;
12473: LD_ADDR_EXP 59
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sRefresh := false ;
12481: LD_ADDR_EXP 60
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sExp := false ;
12489: LD_ADDR_EXP 61
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sDepot := false ;
12497: LD_ADDR_EXP 62
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sFlag := false ;
12505: LD_ADDR_EXP 63
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sKamikadze := false ;
12513: LD_ADDR_EXP 71
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTroll := false ;
12521: LD_ADDR_EXP 72
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sSlow := false ;
12529: LD_ADDR_EXP 73
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sLack := false ;
12537: LD_ADDR_EXP 74
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sTank := false ;
12545: LD_ADDR_EXP 76
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sRemote := false ;
12553: LD_ADDR_EXP 77
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sPowell := false ;
12561: LD_ADDR_EXP 78
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sTeleport := false ;
12569: LD_ADDR_EXP 81
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sOilTower := false ;
12577: LD_ADDR_EXP 83
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sShovel := false ;
12585: LD_ADDR_EXP 84
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sSheik := false ;
12593: LD_ADDR_EXP 85
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sEarthquake := false ;
12601: LD_ADDR_EXP 87
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sAI := false ;
12609: LD_ADDR_EXP 88
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sCargo := false ;
12617: LD_ADDR_EXP 91
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sDLaser := false ;
12625: LD_ADDR_EXP 92
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sExchange := false ;
12633: LD_ADDR_EXP 93
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sFac := false ;
12641: LD_ADDR_EXP 94
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sPower := false ;
12649: LD_ADDR_EXP 95
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sRandom := false ;
12657: LD_ADDR_EXP 96
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sShield := false ;
12665: LD_ADDR_EXP 97
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sTime := false ;
12673: LD_ADDR_EXP 98
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTools := false ;
12681: LD_ADDR_EXP 99
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sSold := false ;
12689: LD_ADDR_EXP 64
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sDiff := false ;
12697: LD_ADDR_EXP 65
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sFog := false ;
12705: LD_ADDR_EXP 68
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sReset := false ;
12713: LD_ADDR_EXP 69
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sSun := false ;
12721: LD_ADDR_EXP 70
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sTiger := false ;
12729: LD_ADDR_EXP 66
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBomb := false ;
12737: LD_ADDR_EXP 67
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sWound := false ;
12745: LD_ADDR_EXP 75
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sBetray := false ;
12753: LD_ADDR_EXP 79
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sContamin := false ;
12761: LD_ADDR_EXP 80
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sOil := false ;
12769: LD_ADDR_EXP 82
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sStu := false ;
12777: LD_ADDR_EXP 86
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sBazooka := false ;
12785: LD_ADDR_EXP 89
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sMortar := false ;
12793: LD_ADDR_EXP 90
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sRanger := false ;
12801: LD_ADDR_EXP 100
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sComputer := false ;
12809: LD_ADDR_EXP 101
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// s30 := false ;
12817: LD_ADDR_EXP 102
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s60 := false ;
12825: LD_ADDR_EXP 103
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// end ;
12833: LD_VAR 0 1
12837: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12838: LD_INT 0
12840: PPUSH
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
// result := [ ] ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: EMPTY
12853: ST_TO_ADDR
// if campaign_id = 1 then
12854: LD_OWVAR 69
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: IFFALSE 16028
// begin case mission_number of 1 :
12864: LD_OWVAR 70
12868: PUSH
12869: LD_INT 1
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12953
12877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12878: LD_ADDR_VAR 0 2
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 4
12888: PUSH
12889: LD_INT 11
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 15
12897: PUSH
12898: LD_INT 16
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 101
12923: PUSH
12924: LD_INT 102
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 116
12932: PUSH
12933: LD_INT 117
12935: PUSH
12936: LD_INT 118
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 16026
12953: LD_INT 2
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13045
12961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 11
12975: PUSH
12976: LD_INT 12
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 16
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 101
13007: PUSH
13008: LD_INT 102
13010: PUSH
13011: LD_INT 105
13013: PUSH
13014: LD_INT 106
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: LD_INT 116
13022: PUSH
13023: LD_INT 117
13025: PUSH
13026: LD_INT 118
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 16026
13045: LD_INT 3
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13141
13053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 4
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 11
13070: PUSH
13071: LD_INT 12
13073: PUSH
13074: LD_INT 15
13076: PUSH
13077: LD_INT 16
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 26
13085: PUSH
13086: LD_INT 36
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 101
13103: PUSH
13104: LD_INT 102
13106: PUSH
13107: LD_INT 105
13109: PUSH
13110: LD_INT 106
13112: PUSH
13113: LD_INT 108
13115: PUSH
13116: LD_INT 116
13118: PUSH
13119: LD_INT 117
13121: PUSH
13122: LD_INT 118
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 16026
13141: LD_INT 4
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13245
13149: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 4
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: LD_INT 8
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 15
13175: PUSH
13176: LD_INT 16
13178: PUSH
13179: LD_INT 22
13181: PUSH
13182: LD_INT 23
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 36
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 101
13207: PUSH
13208: LD_INT 102
13210: PUSH
13211: LD_INT 105
13213: PUSH
13214: LD_INT 106
13216: PUSH
13217: LD_INT 108
13219: PUSH
13220: LD_INT 116
13222: PUSH
13223: LD_INT 117
13225: PUSH
13226: LD_INT 118
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 16026
13245: LD_INT 5
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13365
13253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 15
13282: PUSH
13283: LD_INT 16
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 23
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 26
13297: PUSH
13298: LD_INT 36
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 105
13325: PUSH
13326: LD_INT 106
13328: PUSH
13329: LD_INT 108
13331: PUSH
13332: LD_INT 109
13334: PUSH
13335: LD_INT 112
13337: PUSH
13338: LD_INT 116
13340: PUSH
13341: LD_INT 117
13343: PUSH
13344: LD_INT 118
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: ST_TO_ADDR
13363: GO 16026
13365: LD_INT 6
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13505
13373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: LD_INT 5
13387: PUSH
13388: LD_INT 6
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: LD_INT 11
13396: PUSH
13397: LD_INT 12
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 30
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 36
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 101
13459: PUSH
13460: LD_INT 102
13462: PUSH
13463: LD_INT 105
13465: PUSH
13466: LD_INT 106
13468: PUSH
13469: LD_INT 108
13471: PUSH
13472: LD_INT 109
13474: PUSH
13475: LD_INT 112
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: ST_TO_ADDR
13503: GO 16026
13505: LD_INT 7
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13625
13513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: LD_INT 7
13530: PUSH
13531: LD_INT 11
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: LD_INT 15
13539: PUSH
13540: LD_INT 16
13542: PUSH
13543: LD_INT 20
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_INT 23
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 26
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 103
13585: PUSH
13586: LD_INT 105
13588: PUSH
13589: LD_INT 106
13591: PUSH
13592: LD_INT 108
13594: PUSH
13595: LD_INT 112
13597: PUSH
13598: LD_INT 116
13600: PUSH
13601: LD_INT 117
13603: PUSH
13604: LD_INT 118
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 16026
13625: LD_INT 8
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13773
13633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: LD_INT 7
13653: PUSH
13654: LD_INT 8
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: LD_INT 16
13668: PUSH
13669: LD_INT 20
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 103
13729: PUSH
13730: LD_INT 105
13732: PUSH
13733: LD_INT 106
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 112
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 16026
13773: LD_INT 9
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13929
13781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 6
13798: PUSH
13799: LD_INT 7
13801: PUSH
13802: LD_INT 8
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: LD_INT 12
13810: PUSH
13811: LD_INT 15
13813: PUSH
13814: LD_INT 16
13816: PUSH
13817: LD_INT 20
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 23
13828: PUSH
13829: LD_INT 25
13831: PUSH
13832: LD_INT 26
13834: PUSH
13835: LD_INT 28
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: LD_INT 31
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: LD_INT 36
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 101
13875: PUSH
13876: LD_INT 102
13878: PUSH
13879: LD_INT 103
13881: PUSH
13882: LD_INT 105
13884: PUSH
13885: LD_INT 106
13887: PUSH
13888: LD_INT 108
13890: PUSH
13891: LD_INT 109
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 114
13899: PUSH
13900: LD_INT 116
13902: PUSH
13903: LD_INT 117
13905: PUSH
13906: LD_INT 118
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: ST_TO_ADDR
13927: GO 16026
13929: LD_INT 10
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 14133
13937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: LD_INT 4
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: LD_INT 6
13954: PUSH
13955: LD_INT 7
13957: PUSH
13958: LD_INT 8
13960: PUSH
13961: LD_INT 9
13963: PUSH
13964: LD_INT 10
13966: PUSH
13967: LD_INT 11
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: LD_INT 13
13975: PUSH
13976: LD_INT 14
13978: PUSH
13979: LD_INT 15
13981: PUSH
13982: LD_INT 16
13984: PUSH
13985: LD_INT 17
13987: PUSH
13988: LD_INT 18
13990: PUSH
13991: LD_INT 19
13993: PUSH
13994: LD_INT 20
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 23
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 26
14014: PUSH
14015: LD_INT 28
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 31
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: LD_INT 36
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 103
14069: PUSH
14070: LD_INT 104
14072: PUSH
14073: LD_INT 105
14075: PUSH
14076: LD_INT 106
14078: PUSH
14079: LD_INT 107
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 110
14090: PUSH
14091: LD_INT 111
14093: PUSH
14094: LD_INT 112
14096: PUSH
14097: LD_INT 114
14099: PUSH
14100: LD_INT 116
14102: PUSH
14103: LD_INT 117
14105: PUSH
14106: LD_INT 118
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 16026
14133: LD_INT 11
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14345
14141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 5
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_INT 8
14167: PUSH
14168: LD_INT 9
14170: PUSH
14171: LD_INT 10
14173: PUSH
14174: LD_INT 11
14176: PUSH
14177: LD_INT 12
14179: PUSH
14180: LD_INT 13
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: LD_INT 15
14188: PUSH
14189: LD_INT 16
14191: PUSH
14192: LD_INT 17
14194: PUSH
14195: LD_INT 18
14197: PUSH
14198: LD_INT 19
14200: PUSH
14201: LD_INT 20
14203: PUSH
14204: LD_INT 21
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 24
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 26
14221: PUSH
14222: LD_INT 28
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 31
14230: PUSH
14231: LD_INT 32
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 36
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 104
14284: PUSH
14285: LD_INT 105
14287: PUSH
14288: LD_INT 106
14290: PUSH
14291: LD_INT 107
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: LD_INT 109
14299: PUSH
14300: LD_INT 110
14302: PUSH
14303: LD_INT 111
14305: PUSH
14306: LD_INT 112
14308: PUSH
14309: LD_INT 114
14311: PUSH
14312: LD_INT 116
14314: PUSH
14315: LD_INT 117
14317: PUSH
14318: LD_INT 118
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16026
14345: LD_INT 12
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14573
14353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 3
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: LD_INT 9
14385: PUSH
14386: LD_INT 10
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 13
14397: PUSH
14398: LD_INT 14
14400: PUSH
14401: LD_INT 15
14403: PUSH
14404: LD_INT 16
14406: PUSH
14407: LD_INT 17
14409: PUSH
14410: LD_INT 18
14412: PUSH
14413: LD_INT 19
14415: PUSH
14416: LD_INT 20
14418: PUSH
14419: LD_INT 21
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 23
14427: PUSH
14428: LD_INT 24
14430: PUSH
14431: LD_INT 25
14433: PUSH
14434: LD_INT 26
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: LD_INT 28
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 101
14499: PUSH
14500: LD_INT 102
14502: PUSH
14503: LD_INT 103
14505: PUSH
14506: LD_INT 104
14508: PUSH
14509: LD_INT 105
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: LD_INT 107
14517: PUSH
14518: LD_INT 108
14520: PUSH
14521: LD_INT 109
14523: PUSH
14524: LD_INT 110
14526: PUSH
14527: LD_INT 111
14529: PUSH
14530: LD_INT 112
14532: PUSH
14533: LD_INT 113
14535: PUSH
14536: LD_INT 114
14538: PUSH
14539: LD_INT 116
14541: PUSH
14542: LD_INT 117
14544: PUSH
14545: LD_INT 118
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: ST_TO_ADDR
14571: GO 16026
14573: LD_INT 13
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14789
14581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 4
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: LD_INT 10
14610: PUSH
14611: LD_INT 11
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: LD_INT 14
14619: PUSH
14620: LD_INT 15
14622: PUSH
14623: LD_INT 16
14625: PUSH
14626: LD_INT 17
14628: PUSH
14629: LD_INT 18
14631: PUSH
14632: LD_INT 19
14634: PUSH
14635: LD_INT 20
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 23
14646: PUSH
14647: LD_INT 24
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: LD_INT 27
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 31
14667: PUSH
14668: LD_INT 32
14670: PUSH
14671: LD_INT 33
14673: PUSH
14674: LD_INT 34
14676: PUSH
14677: LD_INT 36
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 103
14721: PUSH
14722: LD_INT 104
14724: PUSH
14725: LD_INT 105
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 107
14733: PUSH
14734: LD_INT 108
14736: PUSH
14737: LD_INT 109
14739: PUSH
14740: LD_INT 110
14742: PUSH
14743: LD_INT 111
14745: PUSH
14746: LD_INT 112
14748: PUSH
14749: LD_INT 113
14751: PUSH
14752: LD_INT 114
14754: PUSH
14755: LD_INT 116
14757: PUSH
14758: LD_INT 117
14760: PUSH
14761: LD_INT 118
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: ST_TO_ADDR
14787: GO 16026
14789: LD_INT 14
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 15021
14797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 36
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 113
14983: PUSH
14984: LD_INT 114
14986: PUSH
14987: LD_INT 116
14989: PUSH
14990: LD_INT 117
14992: PUSH
14993: LD_INT 118
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: ST_TO_ADDR
15019: GO 16026
15021: LD_INT 15
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15253
15029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: LD_INT 5
15049: PUSH
15050: LD_INT 6
15052: PUSH
15053: LD_INT 7
15055: PUSH
15056: LD_INT 8
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: LD_INT 10
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 13
15073: PUSH
15074: LD_INT 14
15076: PUSH
15077: LD_INT 15
15079: PUSH
15080: LD_INT 16
15082: PUSH
15083: LD_INT 17
15085: PUSH
15086: LD_INT 18
15088: PUSH
15089: LD_INT 19
15091: PUSH
15092: LD_INT 20
15094: PUSH
15095: LD_INT 21
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_INT 23
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 26
15112: PUSH
15113: LD_INT 27
15115: PUSH
15116: LD_INT 28
15118: PUSH
15119: LD_INT 29
15121: PUSH
15122: LD_INT 30
15124: PUSH
15125: LD_INT 31
15127: PUSH
15128: LD_INT 32
15130: PUSH
15131: LD_INT 33
15133: PUSH
15134: LD_INT 34
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 113
15215: PUSH
15216: LD_INT 114
15218: PUSH
15219: LD_INT 116
15221: PUSH
15222: LD_INT 117
15224: PUSH
15225: LD_INT 118
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 16026
15253: LD_INT 16
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15397
15261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 7
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 16
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 31
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 101
15347: PUSH
15348: LD_INT 102
15350: PUSH
15351: LD_INT 103
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: LD_INT 108
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: LD_INT 116
15371: PUSH
15372: LD_INT 117
15374: PUSH
15375: LD_INT 118
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: ST_TO_ADDR
15395: GO 16026
15397: LD_INT 17
15399: DOUBLE
15400: EQUAL
15401: IFTRUE 15405
15403: GO 15629
15405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15406: LD_ADDR_VAR 0 2
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 4
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 6
15428: PUSH
15429: LD_INT 7
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 9
15437: PUSH
15438: LD_INT 10
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 16
15458: PUSH
15459: LD_INT 17
15461: PUSH
15462: LD_INT 18
15464: PUSH
15465: LD_INT 19
15467: PUSH
15468: LD_INT 20
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 23
15479: PUSH
15480: LD_INT 24
15482: PUSH
15483: LD_INT 25
15485: PUSH
15486: LD_INT 26
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: LD_INT 29
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 31
15503: PUSH
15504: LD_INT 32
15506: PUSH
15507: LD_INT 33
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 36
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 101
15555: PUSH
15556: LD_INT 102
15558: PUSH
15559: LD_INT 103
15561: PUSH
15562: LD_INT 104
15564: PUSH
15565: LD_INT 105
15567: PUSH
15568: LD_INT 106
15570: PUSH
15571: LD_INT 107
15573: PUSH
15574: LD_INT 108
15576: PUSH
15577: LD_INT 109
15579: PUSH
15580: LD_INT 110
15582: PUSH
15583: LD_INT 111
15585: PUSH
15586: LD_INT 112
15588: PUSH
15589: LD_INT 113
15591: PUSH
15592: LD_INT 114
15594: PUSH
15595: LD_INT 116
15597: PUSH
15598: LD_INT 117
15600: PUSH
15601: LD_INT 118
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: ST_TO_ADDR
15627: GO 16026
15629: LD_INT 18
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15785
15637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: LD_INT 12
15660: PUSH
15661: LD_INT 15
15663: PUSH
15664: LD_INT 16
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 30
15687: PUSH
15688: LD_INT 31
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 33
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 35
15702: PUSH
15703: LD_INT 36
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 101
15731: PUSH
15732: LD_INT 102
15734: PUSH
15735: LD_INT 103
15737: PUSH
15738: LD_INT 106
15740: PUSH
15741: LD_INT 108
15743: PUSH
15744: LD_INT 112
15746: PUSH
15747: LD_INT 113
15749: PUSH
15750: LD_INT 114
15752: PUSH
15753: LD_INT 115
15755: PUSH
15756: LD_INT 116
15758: PUSH
15759: LD_INT 117
15761: PUSH
15762: LD_INT 118
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 16026
15785: LD_INT 19
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 16025
15793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15794: LD_ADDR_VAR 0 2
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: LD_INT 6
15816: PUSH
15817: LD_INT 7
15819: PUSH
15820: LD_INT 8
15822: PUSH
15823: LD_INT 9
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: LD_INT 11
15831: PUSH
15832: LD_INT 12
15834: PUSH
15835: LD_INT 13
15837: PUSH
15838: LD_INT 14
15840: PUSH
15841: LD_INT 15
15843: PUSH
15844: LD_INT 16
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: LD_INT 18
15852: PUSH
15853: LD_INT 19
15855: PUSH
15856: LD_INT 20
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 24
15870: PUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 26
15876: PUSH
15877: LD_INT 27
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: LD_INT 29
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 31
15891: PUSH
15892: LD_INT 32
15894: PUSH
15895: LD_INT 33
15897: PUSH
15898: LD_INT 34
15900: PUSH
15901: LD_INT 35
15903: PUSH
15904: LD_INT 36
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 104
15956: PUSH
15957: LD_INT 105
15959: PUSH
15960: LD_INT 106
15962: PUSH
15963: LD_INT 107
15965: PUSH
15966: LD_INT 108
15968: PUSH
15969: LD_INT 109
15971: PUSH
15972: LD_INT 110
15974: PUSH
15975: LD_INT 111
15977: PUSH
15978: LD_INT 112
15980: PUSH
15981: LD_INT 113
15983: PUSH
15984: LD_INT 114
15986: PUSH
15987: LD_INT 115
15989: PUSH
15990: LD_INT 116
15992: PUSH
15993: LD_INT 117
15995: PUSH
15996: LD_INT 118
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ST_TO_ADDR
16023: GO 16026
16025: POP
// end else
16026: GO 16257
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16028: LD_ADDR_VAR 0 2
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: LD_INT 4
16044: PUSH
16045: LD_INT 5
16047: PUSH
16048: LD_INT 6
16050: PUSH
16051: LD_INT 7
16053: PUSH
16054: LD_INT 8
16056: PUSH
16057: LD_INT 9
16059: PUSH
16060: LD_INT 10
16062: PUSH
16063: LD_INT 11
16065: PUSH
16066: LD_INT 12
16068: PUSH
16069: LD_INT 13
16071: PUSH
16072: LD_INT 14
16074: PUSH
16075: LD_INT 15
16077: PUSH
16078: LD_INT 16
16080: PUSH
16081: LD_INT 17
16083: PUSH
16084: LD_INT 18
16086: PUSH
16087: LD_INT 19
16089: PUSH
16090: LD_INT 20
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 22
16098: PUSH
16099: LD_INT 23
16101: PUSH
16102: LD_INT 24
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 26
16110: PUSH
16111: LD_INT 27
16113: PUSH
16114: LD_INT 28
16116: PUSH
16117: LD_INT 29
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 101
16181: PUSH
16182: LD_INT 102
16184: PUSH
16185: LD_INT 103
16187: PUSH
16188: LD_INT 104
16190: PUSH
16191: LD_INT 105
16193: PUSH
16194: LD_INT 106
16196: PUSH
16197: LD_INT 107
16199: PUSH
16200: LD_INT 108
16202: PUSH
16203: LD_INT 109
16205: PUSH
16206: LD_INT 110
16208: PUSH
16209: LD_INT 111
16211: PUSH
16212: LD_INT 112
16214: PUSH
16215: LD_INT 113
16217: PUSH
16218: LD_INT 114
16220: PUSH
16221: LD_INT 115
16223: PUSH
16224: LD_INT 116
16226: PUSH
16227: LD_INT 117
16229: PUSH
16230: LD_INT 118
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if result then
16257: LD_VAR 0 2
16261: IFFALSE 17047
// begin normal :=  ;
16263: LD_ADDR_VAR 0 5
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hardcore :=  ;
16271: LD_ADDR_VAR 0 6
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// active :=  ;
16279: LD_ADDR_VAR 0 7
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// for i = 1 to normalCounter do
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_EXP 48
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16404
// begin tmp := 0 ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_STRING 0
16312: ST_TO_ADDR
// if result [ 1 ] then
16313: LD_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: IFFALSE 16386
// if result [ 1 ] [ 1 ] = i then
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 8
16340: EQUAL
16341: IFFALSE 16386
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: CALL_OW 3
16372: PPUSH
16373: CALL_OW 1
16377: ST_TO_ADDR
// tmp := 1 ;
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_STRING 1
16385: ST_TO_ADDR
// end ; normal := normal & tmp ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_VAR 0 5
16395: PUSH
16396: LD_VAR 0 3
16400: STR
16401: ST_TO_ADDR
// end ;
16402: GO 16302
16404: POP
16405: POP
// for i = 1 to hardcoreCounter do
16406: LD_ADDR_VAR 0 8
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_EXP 49
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16527
// begin tmp := 0 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_STRING 0
16431: ST_TO_ADDR
// if result [ 2 ] then
16432: LD_VAR 0 2
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: IFFALSE 16509
// if result [ 2 ] [ 1 ] = 100 + i then
16442: LD_VAR 0 2
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PUSH
16455: LD_INT 100
16457: PUSH
16458: LD_VAR 0 8
16462: PLUS
16463: EQUAL
16464: IFFALSE 16509
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 2
16478: PPUSH
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 2
16486: ARRAY
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 3
16495: PPUSH
16496: CALL_OW 1
16500: ST_TO_ADDR
// tmp := 1 ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_STRING 1
16508: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16509: LD_ADDR_VAR 0 6
16513: PUSH
16514: LD_VAR 0 6
16518: PUSH
16519: LD_VAR 0 3
16523: STR
16524: ST_TO_ADDR
// end ;
16525: GO 16421
16527: POP
16528: POP
// if isGameLoad then
16529: LD_VAR 0 1
16533: IFFALSE 17008
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_EXP 52
16544: PUSH
16545: LD_EXP 51
16549: PUSH
16550: LD_EXP 53
16554: PUSH
16555: LD_EXP 50
16559: PUSH
16560: LD_EXP 54
16564: PUSH
16565: LD_EXP 55
16569: PUSH
16570: LD_EXP 56
16574: PUSH
16575: LD_EXP 57
16579: PUSH
16580: LD_EXP 58
16584: PUSH
16585: LD_EXP 59
16589: PUSH
16590: LD_EXP 60
16594: PUSH
16595: LD_EXP 61
16599: PUSH
16600: LD_EXP 62
16604: PUSH
16605: LD_EXP 63
16609: PUSH
16610: LD_EXP 71
16614: PUSH
16615: LD_EXP 72
16619: PUSH
16620: LD_EXP 73
16624: PUSH
16625: LD_EXP 74
16629: PUSH
16630: LD_EXP 76
16634: PUSH
16635: LD_EXP 77
16639: PUSH
16640: LD_EXP 78
16644: PUSH
16645: LD_EXP 81
16649: PUSH
16650: LD_EXP 83
16654: PUSH
16655: LD_EXP 84
16659: PUSH
16660: LD_EXP 85
16664: PUSH
16665: LD_EXP 87
16669: PUSH
16670: LD_EXP 88
16674: PUSH
16675: LD_EXP 91
16679: PUSH
16680: LD_EXP 92
16684: PUSH
16685: LD_EXP 93
16689: PUSH
16690: LD_EXP 94
16694: PUSH
16695: LD_EXP 95
16699: PUSH
16700: LD_EXP 96
16704: PUSH
16705: LD_EXP 97
16709: PUSH
16710: LD_EXP 98
16714: PUSH
16715: LD_EXP 99
16719: PUSH
16720: LD_EXP 64
16724: PUSH
16725: LD_EXP 65
16729: PUSH
16730: LD_EXP 68
16734: PUSH
16735: LD_EXP 69
16739: PUSH
16740: LD_EXP 70
16744: PUSH
16745: LD_EXP 66
16749: PUSH
16750: LD_EXP 67
16754: PUSH
16755: LD_EXP 75
16759: PUSH
16760: LD_EXP 79
16764: PUSH
16765: LD_EXP 80
16769: PUSH
16770: LD_EXP 82
16774: PUSH
16775: LD_EXP 86
16779: PUSH
16780: LD_EXP 89
16784: PUSH
16785: LD_EXP 90
16789: PUSH
16790: LD_EXP 100
16794: PUSH
16795: LD_EXP 101
16799: PUSH
16800: LD_EXP 102
16804: PUSH
16805: LD_EXP 103
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// tmp :=  ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_STRING 
16873: ST_TO_ADDR
// for i = 1 to normalCounter do
16874: LD_ADDR_VAR 0 8
16878: PUSH
16879: DOUBLE
16880: LD_INT 1
16882: DEC
16883: ST_TO_ADDR
16884: LD_EXP 48
16888: PUSH
16889: FOR_TO
16890: IFFALSE 16926
// begin if flags [ i ] then
16892: LD_VAR 0 4
16896: PUSH
16897: LD_VAR 0 8
16901: ARRAY
16902: IFFALSE 16924
// tmp := tmp & i & ; ;
16904: LD_ADDR_VAR 0 3
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 8
16918: STR
16919: PUSH
16920: LD_STRING ;
16922: STR
16923: ST_TO_ADDR
// end ;
16924: GO 16889
16926: POP
16927: POP
// for i = 1 to hardcoreCounter do
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_EXP 49
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16990
// begin if flags [ normalCounter + i ] then
16946: LD_VAR 0 4
16950: PUSH
16951: LD_EXP 48
16955: PUSH
16956: LD_VAR 0 8
16960: PLUS
16961: ARRAY
16962: IFFALSE 16988
// tmp := tmp & ( 100 + i ) & ; ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 100
16976: PUSH
16977: LD_VAR 0 8
16981: PLUS
16982: STR
16983: PUSH
16984: LD_STRING ;
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16943
16990: POP
16991: POP
// if tmp then
16992: LD_VAR 0 3
16996: IFFALSE 17008
// active := tmp ;
16998: LD_ADDR_VAR 0 7
17002: PUSH
17003: LD_VAR 0 3
17007: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17008: LD_STRING getStreamItemsFromMission("
17010: PUSH
17011: LD_VAR 0 5
17015: STR
17016: PUSH
17017: LD_STRING ","
17019: STR
17020: PUSH
17021: LD_VAR 0 6
17025: STR
17026: PUSH
17027: LD_STRING ","
17029: STR
17030: PUSH
17031: LD_VAR 0 7
17035: STR
17036: PUSH
17037: LD_STRING ")
17039: STR
17040: PPUSH
17041: CALL_OW 559
// end else
17045: GO 17054
// ToLua ( getStreamItemsFromMission("","","") ) ;
17047: LD_STRING getStreamItemsFromMission("","","")
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: LD_VAR 0 2
17058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17059: LD_EXP 47
17063: PUSH
17064: LD_EXP 52
17068: AND
17069: IFFALSE 17193
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
// begin enable ;
17078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_OWVAR 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 45
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 34
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 34
17131: PUSH
17132: LD_INT 47
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: ST_TO_ADDR
// if not tmp then
17155: LD_VAR 0 2
17159: NOT
17160: IFFALSE 17164
// exit ;
17162: GO 17193
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17191
// begin SetLives ( i , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 234
// end ;
17189: GO 17174
17191: POP
17192: POP
// end ;
17193: PPOPN 2
17195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17196: LD_EXP 47
17200: PUSH
17201: LD_EXP 53
17205: AND
17206: IFFALSE 17290
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
// begin enable ;
17215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 32
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: ST_TO_ADDR
// if not tmp then
17252: LD_VAR 0 2
17256: NOT
17257: IFFALSE 17261
// exit ;
17259: GO 17290
// for i in tmp do
17261: LD_ADDR_VAR 0 1
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: FOR_IN
17272: IFFALSE 17288
// begin SetLives ( i , 0 ) ;
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: CALL_OW 234
// end ;
17286: GO 17271
17288: POP
17289: POP
// end ;
17290: PPOPN 2
17292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17293: LD_EXP 47
17297: PUSH
17298: LD_EXP 50
17302: AND
17303: IFFALSE 17396
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin enable ;
17311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_OWVAR 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: LD_INT 5
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 25
17344: PUSH
17345: LD_INT 9
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 25
17354: PUSH
17355: LD_INT 8
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 69
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17394
// begin SetClass ( i , 1 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: GO 17377
17394: POP
17395: POP
// end ;
17396: PPOPN 1
17398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17399: LD_EXP 47
17403: PUSH
17404: LD_EXP 51
17408: AND
17409: PUSH
17410: LD_OWVAR 65
17414: PUSH
17415: LD_INT 7
17417: LESS
17418: AND
17419: IFFALSE 17433
17421: GO 17423
17423: DISABLE
// begin enable ;
17424: ENABLE
// game_speed := 7 ;
17425: LD_ADDR_OWVAR 65
17429: PUSH
17430: LD_INT 7
17432: ST_TO_ADDR
// end ;
17433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17434: LD_EXP 47
17438: PUSH
17439: LD_EXP 54
17443: AND
17444: IFFALSE 17646
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 81
17461: PUSH
17462: LD_OWVAR 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 21
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 3
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17646
// if tmp > 5 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 5
17506: GREATER
17507: IFFALSE 17519
// k := 5 else
17509: LD_ADDR_VAR 0 2
17513: PUSH
17514: LD_INT 5
17516: ST_TO_ADDR
17517: GO 17529
// k := tmp ;
17519: LD_ADDR_VAR 0 2
17523: PUSH
17524: LD_VAR 0 3
17528: ST_TO_ADDR
// for i := 1 to k do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_VAR 0 2
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_VAR 0 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 4
17565: MOD
17566: PUSH
17567: LD_INT 1
17569: PLUS
17570: PPUSH
17571: CALL_OW 259
17575: PUSH
17576: LD_INT 10
17578: LESS
17579: IFFALSE 17642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 1
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 4
17599: MOD
17600: PUSH
17601: LD_INT 1
17603: PLUS
17604: PPUSH
17605: LD_VAR 0 3
17609: PUSH
17610: LD_VAR 0 1
17614: ARRAY
17615: PPUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 4
17623: MOD
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: PPUSH
17629: CALL_OW 259
17633: PUSH
17634: LD_INT 1
17636: PLUS
17637: PPUSH
17638: CALL_OW 237
17642: GO 17544
17644: POP
17645: POP
// end ;
17646: PPOPN 3
17648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17649: LD_EXP 47
17653: PUSH
17654: LD_EXP 55
17658: AND
17659: IFFALSE 17679
17661: GO 17663
17663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17664: LD_INT 4
17666: PPUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 324
17679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17680: LD_EXP 47
17684: PUSH
17685: LD_EXP 84
17689: AND
17690: IFFALSE 17710
17692: GO 17694
17694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17695: LD_INT 19
17697: PPUSH
17698: LD_OWVAR 2
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL_OW 324
17710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17711: LD_EXP 47
17715: PUSH
17716: LD_EXP 56
17720: AND
17721: IFFALSE 17823
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
17729: PPUSH
// begin enable ;
17730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17731: LD_ADDR_VAR 0 2
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_OWVAR 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 34
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 34
17763: PUSH
17764: LD_INT 30
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PPUSH
17780: CALL_OW 69
17784: ST_TO_ADDR
// if not tmp then
17785: LD_VAR 0 2
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 17823
// for i in tmp do
17794: LD_ADDR_VAR 0 1
17798: PUSH
17799: LD_VAR 0 2
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17821
// begin SetLives ( i , 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_INT 0
17814: PPUSH
17815: CALL_OW 234
// end ;
17819: GO 17804
17821: POP
17822: POP
// end ;
17823: PPOPN 2
17825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17826: LD_EXP 47
17830: PUSH
17831: LD_EXP 57
17835: AND
17836: IFFALSE 17856
17838: GO 17840
17840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17841: LD_INT 32
17843: PPUSH
17844: LD_OWVAR 2
17848: PPUSH
17849: LD_INT 0
17851: PPUSH
17852: CALL_OW 324
17856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17857: LD_EXP 47
17861: PUSH
17862: LD_EXP 58
17866: AND
17867: IFFALSE 18048
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 33
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 2
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 18048
// side := 0 ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 0
17929: ST_TO_ADDR
// for i := 1 to 8 do
17930: LD_ADDR_VAR 0 1
17934: PUSH
17935: DOUBLE
17936: LD_INT 1
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 8
17942: PUSH
17943: FOR_TO
17944: IFFALSE 17992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17946: LD_OWVAR 2
17950: PUSH
17951: LD_VAR 0 1
17955: NONEQUAL
17956: PUSH
17957: LD_OWVAR 2
17961: PPUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 81
17971: PUSH
17972: LD_INT 2
17974: EQUAL
17975: AND
17976: IFFALSE 17990
// begin side := i ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: ST_TO_ADDR
// break ;
17988: GO 17992
// end ;
17990: GO 17943
17992: POP
17993: POP
// if not side then
17994: LD_VAR 0 3
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18048
// for i := 1 to tmp do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: DOUBLE
18009: LD_INT 1
18011: DEC
18012: ST_TO_ADDR
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18046
// if Prob ( 60 ) then
18021: LD_INT 60
18023: PPUSH
18024: CALL_OW 13
18028: IFFALSE 18044
// SetSide ( i , side ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_VAR 0 3
18039: PPUSH
18040: CALL_OW 235
18044: GO 18018
18046: POP
18047: POP
// end ;
18048: PPOPN 3
18050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18051: LD_EXP 47
18055: PUSH
18056: LD_EXP 60
18060: AND
18061: IFFALSE 18180
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18069: LD_ADDR_VAR 0 1
18073: PUSH
18074: LD_INT 22
18076: PUSH
18077: LD_OWVAR 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 23
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PUSH
18123: FOR_IN
18124: IFFALSE 18178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 257
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: LD_INT 4
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: IN
18154: IFFALSE 18176
// SetClass ( un , rand ( 1 , 4 ) ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 12
18171: PPUSH
18172: CALL_OW 336
18176: GO 18123
18178: POP
18179: POP
// end ;
18180: PPOPN 1
18182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18183: LD_EXP 47
18187: PUSH
18188: LD_EXP 59
18192: AND
18193: IFFALSE 18272
18195: GO 18197
18197: DISABLE
18198: LD_INT 0
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 21
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 1
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: PPUSH
18265: LD_INT 100
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18275: LD_EXP 47
18279: PUSH
18280: LD_EXP 61
18284: AND
18285: IFFALSE 18383
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18293: LD_ADDR_VAR 0 1
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_OWVAR 2
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 21
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 69
18328: ST_TO_ADDR
// if not tmp then
18329: LD_VAR 0 1
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 1
18345: PPUSH
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_INT 4
18362: PPUSH
18363: CALL_OW 12
18367: PPUSH
18368: LD_INT 3000
18370: PPUSH
18371: LD_INT 9000
18373: PPUSH
18374: CALL_OW 12
18378: PPUSH
18379: CALL_OW 492
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18386: LD_EXP 47
18390: PUSH
18391: LD_EXP 62
18395: AND
18396: IFFALSE 18416
18398: GO 18400
18400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18401: LD_INT 1
18403: PPUSH
18404: LD_OWVAR 2
18408: PPUSH
18409: LD_INT 0
18411: PPUSH
18412: CALL_OW 324
18416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18417: LD_EXP 47
18421: PUSH
18422: LD_EXP 63
18426: AND
18427: IFFALSE 18510
18429: GO 18431
18431: DISABLE
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 2
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18510
// for i in tmp do
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18508
// SetBLevel ( i , 10 ) ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_INT 10
18501: PPUSH
18502: CALL_OW 241
18506: GO 18491
18508: POP
18509: POP
// end ;
18510: PPOPN 2
18512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18513: LD_EXP 47
18517: PUSH
18518: LD_EXP 64
18522: AND
18523: IFFALSE 18634
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 25
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 3
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18634
// un := tmp [ rand ( 1 , tmp ) ] ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: CALL_OW 12
18600: ARRAY
18601: ST_TO_ADDR
// if Crawls ( un ) then
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 318
18611: IFFALSE 18622
// ComWalk ( un ) ;
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_INT 5
18629: PPUSH
18630: CALL_OW 336
// end ;
18634: PPOPN 3
18636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18637: LD_EXP 47
18641: PUSH
18642: LD_EXP 65
18646: AND
18647: PUSH
18648: LD_OWVAR 67
18652: PUSH
18653: LD_INT 4
18655: LESS
18656: AND
18657: IFFALSE 18676
18659: GO 18661
18661: DISABLE
// begin Difficulty := Difficulty + 1 ;
18662: LD_ADDR_OWVAR 67
18666: PUSH
18667: LD_OWVAR 67
18671: PUSH
18672: LD_INT 1
18674: PLUS
18675: ST_TO_ADDR
// end ;
18676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18677: LD_EXP 47
18681: PUSH
18682: LD_EXP 66
18686: AND
18687: IFFALSE 18790
18689: GO 18691
18691: DISABLE
18692: LD_INT 0
18694: PPUSH
// begin for i := 1 to 5 do
18695: LD_ADDR_VAR 0 1
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_INT 5
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18788
// begin uc_nation := nation_nature ;
18711: LD_ADDR_OWVAR 21
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// uc_side := 0 ;
18719: LD_ADDR_OWVAR 20
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18727: LD_ADDR_OWVAR 29
18731: PUSH
18732: LD_INT 12
18734: PUSH
18735: LD_INT 12
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// hc_agressivity := 20 ;
18742: LD_ADDR_OWVAR 35
18746: PUSH
18747: LD_INT 20
18749: ST_TO_ADDR
// hc_class := class_tiger ;
18750: LD_ADDR_OWVAR 28
18754: PUSH
18755: LD_INT 14
18757: ST_TO_ADDR
// hc_gallery :=  ;
18758: LD_ADDR_OWVAR 33
18762: PUSH
18763: LD_STRING 
18765: ST_TO_ADDR
// hc_name :=  ;
18766: LD_ADDR_OWVAR 26
18770: PUSH
18771: LD_STRING 
18773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18774: CALL_OW 44
18778: PPUSH
18779: LD_INT 0
18781: PPUSH
18782: CALL_OW 51
// end ;
18786: GO 18708
18788: POP
18789: POP
// end ;
18790: PPOPN 1
18792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18793: LD_EXP 47
18797: PUSH
18798: LD_EXP 67
18802: AND
18803: IFFALSE 18812
18805: GO 18807
18807: DISABLE
// StreamSibBomb ;
18808: CALL 18813 0 0
18812: END
// export function StreamSibBomb ; var i , x , y ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
// result := false ;
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// for i := 1 to 16 do
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: DOUBLE
18833: LD_INT 1
18835: DEC
18836: ST_TO_ADDR
18837: LD_INT 16
18839: PUSH
18840: FOR_TO
18841: IFFALSE 19040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 10
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 40
18859: PUSH
18860: LD_INT 50
18862: PUSH
18863: LD_INT 60
18865: PUSH
18866: LD_INT 70
18868: PUSH
18869: LD_INT 80
18871: PUSH
18872: LD_INT 90
18874: PUSH
18875: LD_INT 100
18877: PUSH
18878: LD_INT 110
18880: PUSH
18881: LD_INT 120
18883: PUSH
18884: LD_INT 130
18886: PUSH
18887: LD_INT 140
18889: PUSH
18890: LD_INT 150
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_INT 15
18915: PPUSH
18916: CALL_OW 12
18920: ARRAY
18921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18922: LD_ADDR_VAR 0 4
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 20
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 40
18938: PUSH
18939: LD_INT 50
18941: PUSH
18942: LD_INT 60
18944: PUSH
18945: LD_INT 70
18947: PUSH
18948: LD_INT 80
18950: PUSH
18951: LD_INT 90
18953: PUSH
18954: LD_INT 100
18956: PUSH
18957: LD_INT 110
18959: PUSH
18960: LD_INT 120
18962: PUSH
18963: LD_INT 130
18965: PUSH
18966: LD_INT 140
18968: PUSH
18969: LD_INT 150
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 15
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: ST_TO_ADDR
// if ValidHex ( x , y ) then
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 488
19015: IFFALSE 19038
// begin result := [ x , y ] ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 3
19026: PUSH
19027: LD_VAR 0 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// break ;
19036: GO 19040
// end ; end ;
19038: GO 18840
19040: POP
19041: POP
// if result then
19042: LD_VAR 0 1
19046: IFFALSE 19106
// begin ToLua ( playSibBomb() ) ;
19048: LD_STRING playSibBomb()
19050: PPUSH
19051: CALL_OW 559
// wait ( 0 0$14 ) ;
19055: LD_INT 490
19057: PPUSH
19058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 2
19078: ARRAY
19079: PPUSH
19080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: ARRAY
19092: PPUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PPUSH
19102: CALL_OW 429
// end ; end ;
19106: LD_VAR 0 1
19110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19111: LD_EXP 47
19115: PUSH
19116: LD_EXP 69
19120: AND
19121: IFFALSE 19133
19123: GO 19125
19125: DISABLE
// YouLost (  ) ;
19126: LD_STRING 
19128: PPUSH
19129: CALL_OW 104
19133: END
// every 0 0$1 trigger StreamModeActive and sFog do
19134: LD_EXP 47
19138: PUSH
19139: LD_EXP 68
19143: AND
19144: IFFALSE 19158
19146: GO 19148
19148: DISABLE
// FogOff ( your_side ) ;
19149: LD_OWVAR 2
19153: PPUSH
19154: CALL_OW 344
19158: END
// every 0 0$1 trigger StreamModeActive and sSun do
19159: LD_EXP 47
19163: PUSH
19164: LD_EXP 70
19168: AND
19169: IFFALSE 19197
19171: GO 19173
19173: DISABLE
// begin solar_recharge_percent := 0 ;
19174: LD_ADDR_OWVAR 79
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19182: LD_INT 10500
19184: PPUSH
19185: CALL_OW 67
// solar_recharge_percent := 100 ;
19189: LD_ADDR_OWVAR 79
19193: PUSH
19194: LD_INT 100
19196: ST_TO_ADDR
// end ;
19197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19198: LD_EXP 47
19202: PUSH
19203: LD_EXP 71
19207: AND
19208: IFFALSE 19447
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin tmp := [ ] ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: EMPTY
19224: ST_TO_ADDR
// for i := 1 to 6 do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 6
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19344
// begin uc_nation := nation_nature ;
19241: LD_ADDR_OWVAR 21
19245: PUSH
19246: LD_INT 0
19248: ST_TO_ADDR
// uc_side := 0 ;
19249: LD_ADDR_OWVAR 20
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19257: LD_ADDR_OWVAR 29
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: ST_TO_ADDR
// hc_agressivity := 20 ;
19272: LD_ADDR_OWVAR 35
19276: PUSH
19277: LD_INT 20
19279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19280: LD_ADDR_OWVAR 28
19284: PUSH
19285: LD_INT 17
19287: ST_TO_ADDR
// hc_gallery :=  ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING 
19295: ST_TO_ADDR
// hc_name :=  ;
19296: LD_ADDR_OWVAR 26
19300: PUSH
19301: LD_STRING 
19303: ST_TO_ADDR
// un := CreateHuman ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: CALL_OW 44
19313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 51
// tmp := tmp ^ un ;
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ADD
19341: ST_TO_ADDR
// end ;
19342: GO 19238
19344: POP
19345: POP
// repeat wait ( 0 0$1 ) ;
19346: LD_INT 35
19348: PPUSH
19349: CALL_OW 67
// for un in tmp do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19438
// begin if IsDead ( un ) then
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 301
19375: IFFALSE 19395
// begin tmp := tmp diff un ;
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 2
19391: DIFF
19392: ST_TO_ADDR
// continue ;
19393: GO 19363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 3
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 74
19431: PPUSH
19432: CALL_OW 115
// end ;
19436: GO 19363
19438: POP
19439: POP
// until not tmp ;
19440: LD_VAR 0 3
19444: NOT
19445: IFFALSE 19346
// end ;
19447: PPOPN 3
19449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19450: LD_EXP 47
19454: PUSH
19455: LD_EXP 72
19459: AND
19460: IFFALSE 19514
19462: GO 19464
19464: DISABLE
// begin ToLua ( displayTroll(); ) ;
19465: LD_STRING displayTroll();
19467: PPUSH
19468: CALL_OW 559
// wait ( 3 3$00 ) ;
19472: LD_INT 6300
19474: PPUSH
19475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19479: LD_STRING hideTroll();
19481: PPUSH
19482: CALL_OW 559
// wait ( 1 1$00 ) ;
19486: LD_INT 2100
19488: PPUSH
19489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19493: LD_STRING displayTroll();
19495: PPUSH
19496: CALL_OW 559
// wait ( 1 1$00 ) ;
19500: LD_INT 2100
19502: PPUSH
19503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19507: LD_STRING hideTroll();
19509: PPUSH
19510: CALL_OW 559
// end ;
19514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19515: LD_EXP 47
19519: PUSH
19520: LD_EXP 73
19524: AND
19525: IFFALSE 19588
19527: GO 19529
19529: DISABLE
19530: LD_INT 0
19532: PPUSH
// begin p := 0 ;
19533: LD_ADDR_VAR 0 1
19537: PUSH
19538: LD_INT 0
19540: ST_TO_ADDR
// repeat game_speed := 1 ;
19541: LD_ADDR_OWVAR 65
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19549: LD_INT 35
19551: PPUSH
19552: CALL_OW 67
// p := p + 1 ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 1
19568: PLUS
19569: ST_TO_ADDR
// until p >= 60 ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 60
19577: GREATEREQUAL
19578: IFFALSE 19541
// game_speed := 4 ;
19580: LD_ADDR_OWVAR 65
19584: PUSH
19585: LD_INT 4
19587: ST_TO_ADDR
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19591: LD_EXP 47
19595: PUSH
19596: LD_EXP 74
19600: AND
19601: IFFALSE 19747
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 30
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not depot then
19664: LD_VAR 0 1
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 12
19695: ARRAY
19696: PPUSH
19697: CALL_OW 274
19701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_INT 0
19712: PPUSH
19713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 2
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 3
19739: PPUSH
19740: LD_INT 0
19742: PPUSH
19743: CALL_OW 277
// end ;
19747: PPOPN 2
19749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19750: LD_EXP 47
19754: PUSH
19755: LD_EXP 75
19759: AND
19760: IFFALSE 19857
19762: GO 19764
19764: DISABLE
19765: LD_INT 0
19767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_OWVAR 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19831: LD_VAR 0 1
19835: PUSH
19836: LD_INT 1
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 12
19848: ARRAY
19849: PPUSH
19850: LD_INT 200
19852: PPUSH
19853: CALL_OW 234
// end ;
19857: PPOPN 1
19859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19860: LD_EXP 47
19864: PUSH
19865: LD_EXP 76
19869: AND
19870: IFFALSE 19949
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19878: LD_ADDR_VAR 0 1
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_OWVAR 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 21
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 69
19913: ST_TO_ADDR
// if not tmp then
19914: LD_VAR 0 1
19918: NOT
19919: IFFALSE 19923
// exit ;
19921: GO 19949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 1
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 12
19940: ARRAY
19941: PPUSH
19942: LD_INT 60
19944: PPUSH
19945: CALL_OW 234
// end ;
19949: PPOPN 1
19951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19952: LD_EXP 47
19956: PUSH
19957: LD_EXP 77
19961: AND
19962: IFFALSE 20061
19964: GO 19966
19966: DISABLE
19967: LD_INT 0
19969: PPUSH
19970: PPUSH
// begin enable ;
19971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_OWVAR 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 61
19991: PUSH
19992: EMPTY
19993: LIST
19994: PUSH
19995: LD_INT 33
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 1
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20061
// for i in tmp do
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20059
// if IsControledBy ( i ) then
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 312
20046: IFFALSE 20057
// ComUnlink ( i ) ;
20048: LD_VAR 0 2
20052: PPUSH
20053: CALL_OW 136
20057: GO 20034
20059: POP
20060: POP
// end ;
20061: PPOPN 2
20063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20064: LD_EXP 47
20068: PUSH
20069: LD_EXP 78
20073: AND
20074: IFFALSE 20214
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
// begin ToLua ( displayPowell(); ) ;
20083: LD_STRING displayPowell();
20085: PPUSH
20086: CALL_OW 559
// uc_side := 0 ;
20090: LD_ADDR_OWVAR 20
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// uc_nation := 2 ;
20098: LD_ADDR_OWVAR 21
20102: PUSH
20103: LD_INT 2
20105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20106: LD_ADDR_OWVAR 37
20110: PUSH
20111: LD_INT 14
20113: ST_TO_ADDR
// vc_engine := engine_siberite ;
20114: LD_ADDR_OWVAR 39
20118: PUSH
20119: LD_INT 3
20121: ST_TO_ADDR
// vc_control := control_apeman ;
20122: LD_ADDR_OWVAR 38
20126: PUSH
20127: LD_INT 5
20129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20130: LD_ADDR_OWVAR 40
20134: PUSH
20135: LD_INT 29
20137: ST_TO_ADDR
// un := CreateVehicle ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: CALL_OW 45
20147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 74
20198: PPUSH
20199: CALL_OW 115
// until IsDead ( un ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 301
20212: IFFALSE 20160
// end ;
20214: PPOPN 2
20216: END
// every 0 0$1 trigger StreamModeActive and sStu do
20217: LD_EXP 47
20221: PUSH
20222: LD_EXP 86
20226: AND
20227: IFFALSE 20243
20229: GO 20231
20231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ;
20243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20244: LD_EXP 47
20248: PUSH
20249: LD_EXP 79
20253: AND
20254: IFFALSE 20395
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_OWVAR 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PPUSH
20294: CALL_OW 69
20298: ST_TO_ADDR
// if not tmp then
20299: LD_VAR 0 2
20303: NOT
20304: IFFALSE 20308
// exit ;
20306: GO 20395
// un := tmp [ rand ( 1 , tmp ) ] ;
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 12
20330: ARRAY
20331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_OWVAR 3
20353: PUSH
20354: LD_VAR 0 1
20358: DIFF
20359: PPUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 74
20369: PPUSH
20370: CALL_OW 115
// wait ( 0 0$20 ) ;
20374: LD_INT 700
20376: PPUSH
20377: CALL_OW 67
// SetSide ( un , your_side ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: CALL_OW 235
// end ;
20395: PPOPN 2
20397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20398: LD_EXP 47
20402: PUSH
20403: LD_EXP 80
20407: AND
20408: IFFALSE 20514
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_OWVAR 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 30
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: ST_TO_ADDR
// if not depot then
20470: LD_VAR 0 1
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20479: LD_VAR 0 1
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 250
20492: PPUSH
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL_OW 251
20506: PPUSH
20507: LD_INT 70
20509: PPUSH
20510: CALL_OW 495
// end ;
20514: PPOPN 1
20516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20517: LD_EXP 47
20521: PUSH
20522: LD_EXP 81
20526: AND
20527: IFFALSE 20738
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_OWVAR 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PPUSH
20570: CALL_OW 69
20574: ST_TO_ADDR
// if not tmp then
20575: LD_VAR 0 5
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 20738
// for i in tmp do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20736
// begin d := rand ( 0 , 5 ) ;
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: LD_INT 0
20604: PPUSH
20605: LD_INT 5
20607: PPUSH
20608: CALL_OW 12
20612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20613: LD_ADDR_VAR 0 2
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 250
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_INT 3
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 12
20643: PPUSH
20644: CALL_OW 272
20648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 251
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_INT 3
20671: PPUSH
20672: LD_INT 12
20674: PPUSH
20675: CALL_OW 12
20679: PPUSH
20680: CALL_OW 273
20684: ST_TO_ADDR
// if ValidHex ( x , y ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: LD_VAR 0 3
20694: PPUSH
20695: CALL_OW 488
20699: IFFALSE 20734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 2
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: LD_INT 6
20721: PPUSH
20722: CALL_OW 12
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 483
// end ;
20734: GO 20594
20736: POP
20737: POP
// end ;
20738: PPOPN 5
20740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20741: LD_EXP 47
20745: PUSH
20746: LD_EXP 82
20750: AND
20751: IFFALSE 20845
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 32
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: ST_TO_ADDR
// if not tmp then
20807: LD_VAR 0 2
20811: NOT
20812: IFFALSE 20816
// exit ;
20814: GO 20845
// for i in tmp do
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: LD_VAR 0 2
20825: PUSH
20826: FOR_IN
20827: IFFALSE 20843
// SetFuel ( i , 0 ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_INT 0
20836: PPUSH
20837: CALL_OW 240
20841: GO 20826
20843: POP
20844: POP
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20848: LD_EXP 47
20852: PUSH
20853: LD_EXP 83
20857: AND
20858: IFFALSE 20924
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 29
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 1
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 20924
// DestroyUnit ( tmp [ 1 ] ) ;
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 65
// end ;
20924: PPOPN 1
20926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20927: LD_EXP 47
20931: PUSH
20932: LD_EXP 85
20936: AND
20937: IFFALSE 21066
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin uc_side := 0 ;
20945: LD_ADDR_OWVAR 20
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// uc_nation := nation_arabian ;
20953: LD_ADDR_OWVAR 21
20957: PUSH
20958: LD_INT 2
20960: ST_TO_ADDR
// hc_gallery :=  ;
20961: LD_ADDR_OWVAR 33
20965: PUSH
20966: LD_STRING 
20968: ST_TO_ADDR
// hc_name :=  ;
20969: LD_ADDR_OWVAR 26
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20977: LD_INT 1
20979: PPUSH
20980: LD_INT 11
20982: PPUSH
20983: LD_INT 10
20985: PPUSH
20986: CALL_OW 380
// un := CreateHuman ;
20990: LD_ADDR_VAR 0 1
20994: PUSH
20995: CALL_OW 44
20999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21012: LD_INT 35
21014: PPUSH
21015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until IsDead ( un ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 301
21064: IFFALSE 21012
// end ;
21066: PPOPN 1
21068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21069: LD_EXP 47
21073: PUSH
21074: LD_EXP 87
21078: AND
21079: IFFALSE 21091
21081: GO 21083
21083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21084: LD_STRING earthquake(getX(game), 0, 32)
21086: PPUSH
21087: CALL_OW 559
21091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21092: LD_EXP 47
21096: PUSH
21097: LD_EXP 88
21101: AND
21102: IFFALSE 21193
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
// begin enable ;
21110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21111: LD_ADDR_VAR 0 1
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 33
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 1
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 1
21174: PPUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: CALL_OW 12
21184: ARRAY
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 234
// end ;
21193: PPOPN 1
21195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 89
21205: AND
21206: IFFALSE 21347
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_OWVAR 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 3
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21347
// un := tmp [ rand ( 1 , tmp ) ] ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 3
21270: PUSH
21271: LD_INT 1
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: CALL_OW 12
21283: ARRAY
21284: ST_TO_ADDR
// if Crawls ( un ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 318
21294: IFFALSE 21305
// ComWalk ( un ) ;
21296: LD_VAR 0 2
21300: PPUSH
21301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21305: LD_VAR 0 2
21309: PPUSH
21310: LD_INT 9
21312: PPUSH
21313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21317: LD_INT 28
21319: PPUSH
21320: LD_OWVAR 2
21324: PPUSH
21325: LD_INT 2
21327: PPUSH
21328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21332: LD_INT 29
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 322
// end ;
21347: PPOPN 3
21349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21350: LD_EXP 47
21354: PUSH
21355: LD_EXP 90
21359: AND
21360: IFFALSE 21471
21362: GO 21364
21364: DISABLE
21365: LD_INT 0
21367: PPUSH
21368: PPUSH
21369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 69
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 21471
// un := tmp [ rand ( 1 , tmp ) ] ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 1
21427: PPUSH
21428: LD_VAR 0 3
21432: PPUSH
21433: CALL_OW 12
21437: ARRAY
21438: ST_TO_ADDR
// if Crawls ( un ) then
21439: LD_VAR 0 2
21443: PPUSH
21444: CALL_OW 318
21448: IFFALSE 21459
// ComWalk ( un ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_INT 8
21466: PPUSH
21467: CALL_OW 336
// end ;
21471: PPOPN 3
21473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21474: LD_EXP 47
21478: PUSH
21479: LD_EXP 91
21483: AND
21484: IFFALSE 21628
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_OWVAR 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 12
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 34
21535: PUSH
21536: LD_INT 51
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 34
21545: PUSH
21546: LD_INT 32
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21628
// for i in tmp do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21626
// if GetCargo ( i , mat_artifact ) = 0 then
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_INT 4
21598: PPUSH
21599: CALL_OW 289
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: IFFALSE 21624
// SetCargo ( i , mat_siberit , 100 ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 3
21616: PPUSH
21617: LD_INT 100
21619: PPUSH
21620: CALL_OW 290
21624: GO 21588
21626: POP
21627: POP
// end ;
21628: PPOPN 2
21630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21631: LD_EXP 47
21635: PUSH
21636: LD_EXP 92
21640: AND
21641: IFFALSE 21824
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_OWVAR 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not tmp then
21672: LD_VAR 0 2
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21824
// for i := 1 to 2 do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: DOUBLE
21687: LD_INT 1
21689: DEC
21690: ST_TO_ADDR
21691: LD_INT 2
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21822
// begin uc_side := your_side ;
21697: LD_ADDR_OWVAR 20
21701: PUSH
21702: LD_OWVAR 2
21706: ST_TO_ADDR
// uc_nation := nation_american ;
21707: LD_ADDR_OWVAR 21
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// vc_chassis := us_morphling ;
21715: LD_ADDR_OWVAR 37
21719: PUSH
21720: LD_INT 5
21722: ST_TO_ADDR
// vc_engine := engine_siberite ;
21723: LD_ADDR_OWVAR 39
21727: PUSH
21728: LD_INT 3
21730: ST_TO_ADDR
// vc_control := control_computer ;
21731: LD_ADDR_OWVAR 38
21735: PUSH
21736: LD_INT 3
21738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21739: LD_ADDR_OWVAR 40
21743: PUSH
21744: LD_INT 10
21746: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21747: LD_VAR 0 2
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: CALL_OW 310
21760: NOT
21761: IFFALSE 21808
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21763: CALL_OW 45
21767: PPUSH
21768: LD_VAR 0 2
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PPUSH
21777: CALL_OW 250
21781: PPUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: CALL_OW 251
21795: PPUSH
21796: LD_INT 12
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 50
21806: GO 21820
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21808: CALL_OW 45
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 51
// end ;
21820: GO 21694
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21827: LD_EXP 47
21831: PUSH
21832: LD_EXP 93
21836: AND
21837: IFFALSE 22059
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21850: LD_ADDR_VAR 0 6
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// if not tmp then
21904: LD_VAR 0 6
21908: NOT
21909: IFFALSE 21913
// exit ;
21911: GO 22059
// s1 := rand ( 1 , 4 ) ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_INT 4
21923: PPUSH
21924: CALL_OW 12
21928: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 6
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 259
21952: ST_TO_ADDR
// if s1 = 1 then
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: EQUAL
21961: IFFALSE 21981
// s2 := rand ( 2 , 4 ) else
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_INT 2
21970: PPUSH
21971: LD_INT 4
21973: PPUSH
21974: CALL_OW 12
21978: ST_TO_ADDR
21979: GO 21989
// s2 := 1 ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21989: LD_ADDR_VAR 0 5
21993: PUSH
21994: LD_VAR 0 6
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 259
22012: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22013: LD_VAR 0 6
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22036: LD_VAR 0 6
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: CALL_OW 237
// end ;
22059: PPOPN 6
22061: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22062: LD_EXP 47
22066: PUSH
22067: LD_EXP 94
22071: AND
22072: IFFALSE 22151
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22080: LD_ADDR_VAR 0 1
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_OWVAR 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 1
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 1
22132: PPUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 12
22142: ARRAY
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 234
// end ;
22151: PPOPN 1
22153: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22154: LD_EXP 47
22158: PUSH
22159: LD_EXP 95
22163: AND
22164: IFFALSE 22276
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_OWVAR 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 27
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 26
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 28
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PPUSH
22233: CALL_OW 69
22237: ST_TO_ADDR
// if not tmp then
22238: LD_VAR 0 2
22242: NOT
22243: IFFALSE 22247
// exit ;
22245: GO 22276
// for i in tmp do
22247: LD_ADDR_VAR 0 1
22251: PUSH
22252: LD_VAR 0 2
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22274
// SetLives ( i , 1 ) ;
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 234
22272: GO 22257
22274: POP
22275: POP
// end ;
22276: PPOPN 2
22278: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22279: LD_EXP 47
22283: PUSH
22284: LD_EXP 96
22288: AND
22289: IFFALSE 22576
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
22298: PPUSH
// begin i := rand ( 1 , 7 ) ;
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_INT 7
22309: PPUSH
22310: CALL_OW 12
22314: ST_TO_ADDR
// case i of 1 :
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22338
22328: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22329: LD_STRING earthquake(getX(game), 0, 32)
22331: PPUSH
22332: CALL_OW 559
22336: GO 22576
22338: LD_INT 2
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22360
22346: POP
// begin ToLua ( displayStucuk(); ) ;
22347: LD_STRING displayStucuk();
22349: PPUSH
22350: CALL_OW 559
// ResetFog ;
22354: CALL_OW 335
// end ; 3 :
22358: GO 22576
22360: LD_INT 3
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22368
22366: GO 22472
22368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_OWVAR 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 2
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22576
// un := tmp [ rand ( 1 , tmp ) ] ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_VAR 0 2
22423: PUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 12
22436: ARRAY
22437: ST_TO_ADDR
// if Crawls ( un ) then
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 318
22447: IFFALSE 22458
// ComWalk ( un ) ;
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22458: LD_VAR 0 3
22462: PPUSH
22463: LD_INT 8
22465: PPUSH
22466: CALL_OW 336
// end ; 4 :
22470: GO 22576
22472: LD_INT 4
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22554
22480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_OWVAR 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: LD_INT 29
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: ST_TO_ADDR
// if not tmp then
22517: LD_VAR 0 2
22521: NOT
22522: IFFALSE 22526
// exit ;
22524: GO 22576
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22526: LD_VAR 0 2
22530: PUSH
22531: LD_INT 1
22533: ARRAY
22534: PPUSH
22535: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: CALL_OW 65
// end ; 5 .. 7 :
22552: GO 22576
22554: LD_INT 5
22556: DOUBLE
22557: GREATEREQUAL
22558: IFFALSE 22566
22560: LD_INT 7
22562: DOUBLE
22563: LESSEQUAL
22564: IFTRUE 22568
22566: GO 22575
22568: POP
// StreamSibBomb ; end ;
22569: CALL 18813 0 0
22573: GO 22576
22575: POP
// end ;
22576: PPOPN 3
22578: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22579: LD_EXP 47
22583: PUSH
22584: LD_EXP 97
22588: AND
22589: IFFALSE 22745
22591: GO 22593
22593: DISABLE
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 81
22606: PUSH
22607: LD_OWVAR 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 2
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22745
// p := 0 ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_INT 0
22669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// p := p + 1 ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: ST_TO_ADDR
// for i in tmp do
22691: LD_ADDR_VAR 0 1
22695: PUSH
22696: LD_VAR 0 2
22700: PUSH
22701: FOR_IN
22702: IFFALSE 22733
// if GetLives ( i ) < 1000 then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 256
22713: PUSH
22714: LD_INT 1000
22716: LESS
22717: IFFALSE 22731
// SetLives ( i , 1000 ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 1000
22726: PPUSH
22727: CALL_OW 234
22731: GO 22701
22733: POP
22734: POP
// until p > 20 ;
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 20
22742: GREATER
22743: IFFALSE 22670
// end ;
22745: PPOPN 3
22747: END
// every 0 0$1 trigger StreamModeActive and sTime do
22748: LD_EXP 47
22752: PUSH
22753: LD_EXP 98
22757: AND
22758: IFFALSE 22793
22760: GO 22762
22762: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22763: LD_INT 28
22765: PPUSH
22766: LD_OWVAR 2
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22778: LD_INT 30
22780: PPUSH
22781: LD_OWVAR 2
22785: PPUSH
22786: LD_INT 2
22788: PPUSH
22789: CALL_OW 322
// end ;
22793: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22794: LD_EXP 47
22798: PUSH
22799: LD_EXP 99
22803: AND
22804: IFFALSE 22925
22806: GO 22808
22808: DISABLE
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_OWVAR 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 21
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 23
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: ST_TO_ADDR
// if not tmp then
22867: LD_VAR 0 2
22871: NOT
22872: IFFALSE 22876
// exit ;
22874: GO 22925
// for i in tmp do
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_VAR 0 2
22885: PUSH
22886: FOR_IN
22887: IFFALSE 22923
// begin if Crawls ( i ) then
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 318
22898: IFFALSE 22909
// ComWalk ( i ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 138
// SetClass ( i , 2 ) ;
22909: LD_VAR 0 1
22913: PPUSH
22914: LD_INT 2
22916: PPUSH
22917: CALL_OW 336
// end ;
22921: GO 22886
22923: POP
22924: POP
// end ;
22925: PPOPN 2
22927: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22928: LD_EXP 47
22932: PUSH
22933: LD_EXP 100
22937: AND
22938: IFFALSE 23226
22940: GO 22942
22942: DISABLE
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22948: LD_OWVAR 2
22952: PPUSH
22953: LD_INT 9
22955: PPUSH
22956: LD_INT 1
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22966: LD_INT 9
22968: PPUSH
22969: LD_OWVAR 2
22973: PPUSH
22974: CALL_OW 343
// uc_side := 9 ;
22978: LD_ADDR_OWVAR 20
22982: PUSH
22983: LD_INT 9
22985: ST_TO_ADDR
// uc_nation := 2 ;
22986: LD_ADDR_OWVAR 21
22990: PUSH
22991: LD_INT 2
22993: ST_TO_ADDR
// hc_name := Dark Warrior ;
22994: LD_ADDR_OWVAR 26
22998: PUSH
22999: LD_STRING Dark Warrior
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_noskilllimit := true ;
23010: LD_ADDR_OWVAR 76
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23018: LD_ADDR_OWVAR 31
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// un := CreateHuman ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: CALL_OW 44
23050: ST_TO_ADDR
// hc_noskilllimit := false ;
23051: LD_ADDR_OWVAR 76
23055: PUSH
23056: LD_INT 0
23058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 51
// ToLua ( playRanger() ) ;
23071: LD_STRING playRanger()
23073: PPUSH
23074: CALL_OW 559
// p := 0 ;
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23086: LD_INT 35
23088: PPUSH
23089: CALL_OW 67
// p := p + 1 ;
23093: LD_ADDR_VAR 0 2
23097: PUSH
23098: LD_VAR 0 2
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23107: LD_VAR 0 3
23111: PPUSH
23112: CALL_OW 256
23116: PUSH
23117: LD_INT 1000
23119: LESS
23120: IFFALSE 23134
// SetLives ( un , 1000 ) ;
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 1000
23129: PPUSH
23130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 81
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 91
23153: PUSH
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 74
23185: PPUSH
23186: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23190: LD_VAR 0 2
23194: PUSH
23195: LD_INT 80
23197: GREATER
23198: PUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: CALL_OW 301
23208: OR
23209: IFFALSE 23086
// if un then
23211: LD_VAR 0 3
23215: IFFALSE 23226
// RemoveUnit ( un ) ;
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 64
// end ;
23226: PPOPN 3
23228: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23229: LD_EXP 101
23233: IFFALSE 23349
23235: GO 23237
23237: DISABLE
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 81
23250: PUSH
23251: LD_OWVAR 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PPUSH
23274: CALL_OW 69
23278: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23279: LD_STRING playComputer()
23281: PPUSH
23282: CALL_OW 559
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23349
// for i in tmp do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23347
// for j := 1 to 4 do
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: DOUBLE
23314: LD_INT 1
23316: DEC
23317: ST_TO_ADDR
23318: LD_INT 4
23320: PUSH
23321: FOR_TO
23322: IFFALSE 23343
// SetSkill ( i , j , 10 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 237
23341: GO 23321
23343: POP
23344: POP
23345: GO 23305
23347: POP
23348: POP
// end ;
23349: PPOPN 3
23351: END
// every 0 0$1 trigger s30 do var i , tmp ;
23352: LD_EXP 102
23356: IFFALSE 23425
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PPUSH
23382: CALL_OW 69
23386: ST_TO_ADDR
// if not tmp then
23387: LD_VAR 0 2
23391: NOT
23392: IFFALSE 23396
// exit ;
23394: GO 23425
// for i in tmp do
23396: LD_ADDR_VAR 0 1
23400: PUSH
23401: LD_VAR 0 2
23405: PUSH
23406: FOR_IN
23407: IFFALSE 23423
// SetLives ( i , 300 ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: LD_INT 300
23416: PPUSH
23417: CALL_OW 234
23421: GO 23406
23423: POP
23424: POP
// end ;
23425: PPOPN 2
23427: END
// every 0 0$1 trigger s60 do var i , tmp ;
23428: LD_EXP 103
23432: IFFALSE 23501
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23441: LD_ADDR_VAR 0 2
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_OWVAR 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 69
23462: ST_TO_ADDR
// if not tmp then
23463: LD_VAR 0 2
23467: NOT
23468: IFFALSE 23472
// exit ;
23470: GO 23501
// for i in tmp do
23472: LD_ADDR_VAR 0 1
23476: PUSH
23477: LD_VAR 0 2
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// SetLives ( i , 600 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 600
23492: PPUSH
23493: CALL_OW 234
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 2
23503: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23504: LD_INT 0
23506: PPUSH
// case cmd of 301 :
23507: LD_VAR 0 1
23511: PUSH
23512: LD_INT 301
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23552
23520: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: LD_VAR 0 8
23535: PPUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: CALL 24761 0 5
23550: GO 23673
23552: LD_INT 302
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23597
23560: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: LD_VAR 0 8
23575: PPUSH
23576: LD_VAR 0 9
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: LD_VAR 0 5
23590: PPUSH
23591: CALL 24852 0 6
23595: GO 23673
23597: LD_INT 303
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23642
23605: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23606: LD_VAR 0 6
23610: PPUSH
23611: LD_VAR 0 7
23615: PPUSH
23616: LD_VAR 0 8
23620: PPUSH
23621: LD_VAR 0 9
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_VAR 0 5
23635: PPUSH
23636: CALL 23678 0 6
23640: GO 23673
23642: LD_INT 304
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23672
23650: POP
// hHackTeleport ( unit , x , y ) ; end ;
23651: LD_VAR 0 2
23655: PPUSH
23656: LD_VAR 0 4
23660: PPUSH
23661: LD_VAR 0 5
23665: PPUSH
23666: CALL 25445 0 3
23670: GO 23673
23672: POP
// end ;
23673: LD_VAR 0 12
23677: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23682: LD_VAR 0 1
23686: PUSH
23687: LD_INT 1
23689: LESS
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 3
23698: GREATER
23699: OR
23700: PUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: CALL_OW 428
23715: OR
23716: IFFALSE 23720
// exit ;
23718: GO 24448
// uc_side := your_side ;
23720: LD_ADDR_OWVAR 20
23724: PUSH
23725: LD_OWVAR 2
23729: ST_TO_ADDR
// uc_nation := nation ;
23730: LD_ADDR_OWVAR 21
23734: PUSH
23735: LD_VAR 0 1
23739: ST_TO_ADDR
// bc_level = 1 ;
23740: LD_ADDR_OWVAR 43
23744: PUSH
23745: LD_INT 1
23747: ST_TO_ADDR
// case btype of 1 :
23748: LD_VAR 0 2
23752: PUSH
23753: LD_INT 1
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23772
23761: POP
// bc_type := b_depot ; 2 :
23762: LD_ADDR_OWVAR 42
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
23770: GO 24392
23772: LD_INT 2
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23791
23780: POP
// bc_type := b_warehouse ; 3 :
23781: LD_ADDR_OWVAR 42
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
23789: GO 24392
23791: LD_INT 3
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23810
23799: POP
// bc_type := b_lab ; 4 .. 9 :
23800: LD_ADDR_OWVAR 42
23804: PUSH
23805: LD_INT 6
23807: ST_TO_ADDR
23808: GO 24392
23810: LD_INT 4
23812: DOUBLE
23813: GREATEREQUAL
23814: IFFALSE 23822
23816: LD_INT 9
23818: DOUBLE
23819: LESSEQUAL
23820: IFTRUE 23824
23822: GO 23884
23824: POP
// begin bc_type := b_lab_half ;
23825: LD_ADDR_OWVAR 42
23829: PUSH
23830: LD_INT 7
23832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23833: LD_ADDR_OWVAR 44
23837: PUSH
23838: LD_INT 10
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 12
23846: PUSH
23847: LD_INT 15
23849: PUSH
23850: LD_INT 14
23852: PUSH
23853: LD_INT 13
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_VAR 0 2
23868: PUSH
23869: LD_INT 3
23871: MINUS
23872: ARRAY
23873: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23874: LD_ADDR_OWVAR 45
23878: PUSH
23879: LD_INT 9
23881: ST_TO_ADDR
// end ; 10 .. 13 :
23882: GO 24392
23884: LD_INT 10
23886: DOUBLE
23887: GREATEREQUAL
23888: IFFALSE 23896
23890: LD_INT 13
23892: DOUBLE
23893: LESSEQUAL
23894: IFTRUE 23898
23896: GO 23975
23898: POP
// begin bc_type := b_lab_full ;
23899: LD_ADDR_OWVAR 42
23903: PUSH
23904: LD_INT 8
23906: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23907: LD_ADDR_OWVAR 44
23911: PUSH
23912: LD_INT 10
23914: PUSH
23915: LD_INT 12
23917: PUSH
23918: LD_INT 14
23920: PUSH
23921: LD_INT 13
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_VAR 0 2
23934: PUSH
23935: LD_INT 9
23937: MINUS
23938: ARRAY
23939: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23940: LD_ADDR_OWVAR 45
23944: PUSH
23945: LD_INT 11
23947: PUSH
23948: LD_INT 15
23950: PUSH
23951: LD_INT 12
23953: PUSH
23954: LD_INT 15
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: PUSH
23963: LD_VAR 0 2
23967: PUSH
23968: LD_INT 9
23970: MINUS
23971: ARRAY
23972: ST_TO_ADDR
// end ; 14 :
23973: GO 24392
23975: LD_INT 14
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 23994
23983: POP
// bc_type := b_workshop ; 15 :
23984: LD_ADDR_OWVAR 42
23988: PUSH
23989: LD_INT 2
23991: ST_TO_ADDR
23992: GO 24392
23994: LD_INT 15
23996: DOUBLE
23997: EQUAL
23998: IFTRUE 24002
24000: GO 24013
24002: POP
// bc_type := b_factory ; 16 :
24003: LD_ADDR_OWVAR 42
24007: PUSH
24008: LD_INT 3
24010: ST_TO_ADDR
24011: GO 24392
24013: LD_INT 16
24015: DOUBLE
24016: EQUAL
24017: IFTRUE 24021
24019: GO 24032
24021: POP
// bc_type := b_ext_gun ; 17 :
24022: LD_ADDR_OWVAR 42
24026: PUSH
24027: LD_INT 17
24029: ST_TO_ADDR
24030: GO 24392
24032: LD_INT 17
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24068
24040: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24041: LD_ADDR_OWVAR 42
24045: PUSH
24046: LD_INT 19
24048: PUSH
24049: LD_INT 23
24051: PUSH
24052: LD_INT 19
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: LD_VAR 0 1
24064: ARRAY
24065: ST_TO_ADDR
24066: GO 24392
24068: LD_INT 18
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24087
24076: POP
// bc_type := b_ext_radar ; 19 :
24077: LD_ADDR_OWVAR 42
24081: PUSH
24082: LD_INT 20
24084: ST_TO_ADDR
24085: GO 24392
24087: LD_INT 19
24089: DOUBLE
24090: EQUAL
24091: IFTRUE 24095
24093: GO 24106
24095: POP
// bc_type := b_ext_radio ; 20 :
24096: LD_ADDR_OWVAR 42
24100: PUSH
24101: LD_INT 22
24103: ST_TO_ADDR
24104: GO 24392
24106: LD_INT 20
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24125
24114: POP
// bc_type := b_ext_siberium ; 21 :
24115: LD_ADDR_OWVAR 42
24119: PUSH
24120: LD_INT 21
24122: ST_TO_ADDR
24123: GO 24392
24125: LD_INT 21
24127: DOUBLE
24128: EQUAL
24129: IFTRUE 24133
24131: GO 24144
24133: POP
// bc_type := b_ext_computer ; 22 :
24134: LD_ADDR_OWVAR 42
24138: PUSH
24139: LD_INT 24
24141: ST_TO_ADDR
24142: GO 24392
24144: LD_INT 22
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24163
24152: POP
// bc_type := b_ext_track ; 23 :
24153: LD_ADDR_OWVAR 42
24157: PUSH
24158: LD_INT 16
24160: ST_TO_ADDR
24161: GO 24392
24163: LD_INT 23
24165: DOUBLE
24166: EQUAL
24167: IFTRUE 24171
24169: GO 24182
24171: POP
// bc_type := b_ext_laser ; 24 :
24172: LD_ADDR_OWVAR 42
24176: PUSH
24177: LD_INT 25
24179: ST_TO_ADDR
24180: GO 24392
24182: LD_INT 24
24184: DOUBLE
24185: EQUAL
24186: IFTRUE 24190
24188: GO 24201
24190: POP
// bc_type := b_control_tower ; 25 :
24191: LD_ADDR_OWVAR 42
24195: PUSH
24196: LD_INT 36
24198: ST_TO_ADDR
24199: GO 24392
24201: LD_INT 25
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24220
24209: POP
// bc_type := b_breastwork ; 26 :
24210: LD_ADDR_OWVAR 42
24214: PUSH
24215: LD_INT 31
24217: ST_TO_ADDR
24218: GO 24392
24220: LD_INT 26
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24239
24228: POP
// bc_type := b_bunker ; 27 :
24229: LD_ADDR_OWVAR 42
24233: PUSH
24234: LD_INT 32
24236: ST_TO_ADDR
24237: GO 24392
24239: LD_INT 27
24241: DOUBLE
24242: EQUAL
24243: IFTRUE 24247
24245: GO 24258
24247: POP
// bc_type := b_turret ; 28 :
24248: LD_ADDR_OWVAR 42
24252: PUSH
24253: LD_INT 33
24255: ST_TO_ADDR
24256: GO 24392
24258: LD_INT 28
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24277
24266: POP
// bc_type := b_armoury ; 29 :
24267: LD_ADDR_OWVAR 42
24271: PUSH
24272: LD_INT 4
24274: ST_TO_ADDR
24275: GO 24392
24277: LD_INT 29
24279: DOUBLE
24280: EQUAL
24281: IFTRUE 24285
24283: GO 24296
24285: POP
// bc_type := b_barracks ; 30 :
24286: LD_ADDR_OWVAR 42
24290: PUSH
24291: LD_INT 5
24293: ST_TO_ADDR
24294: GO 24392
24296: LD_INT 30
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24315
24304: POP
// bc_type := b_solar_power ; 31 :
24305: LD_ADDR_OWVAR 42
24309: PUSH
24310: LD_INT 27
24312: ST_TO_ADDR
24313: GO 24392
24315: LD_INT 31
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24334
24323: POP
// bc_type := b_oil_power ; 32 :
24324: LD_ADDR_OWVAR 42
24328: PUSH
24329: LD_INT 26
24331: ST_TO_ADDR
24332: GO 24392
24334: LD_INT 32
24336: DOUBLE
24337: EQUAL
24338: IFTRUE 24342
24340: GO 24353
24342: POP
// bc_type := b_siberite_power ; 33 :
24343: LD_ADDR_OWVAR 42
24347: PUSH
24348: LD_INT 28
24350: ST_TO_ADDR
24351: GO 24392
24353: LD_INT 33
24355: DOUBLE
24356: EQUAL
24357: IFTRUE 24361
24359: GO 24372
24361: POP
// bc_type := b_oil_mine ; 34 :
24362: LD_ADDR_OWVAR 42
24366: PUSH
24367: LD_INT 29
24369: ST_TO_ADDR
24370: GO 24392
24372: LD_INT 34
24374: DOUBLE
24375: EQUAL
24376: IFTRUE 24380
24378: GO 24391
24380: POP
// bc_type := b_siberite_mine ; end ;
24381: LD_ADDR_OWVAR 42
24385: PUSH
24386: LD_INT 30
24388: ST_TO_ADDR
24389: GO 24392
24391: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24392: LD_ADDR_VAR 0 8
24396: PUSH
24397: LD_VAR 0 5
24401: PPUSH
24402: LD_VAR 0 6
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 47
24416: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24417: LD_OWVAR 42
24421: PUSH
24422: LD_INT 32
24424: PUSH
24425: LD_INT 33
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: IN
24432: IFFALSE 24448
// PlaceWeaponTurret ( b , weapon ) ;
24434: LD_VAR 0 8
24438: PPUSH
24439: LD_VAR 0 4
24443: PPUSH
24444: CALL_OW 431
// end ;
24448: LD_VAR 0 7
24452: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24453: LD_INT 0
24455: PPUSH
24456: PPUSH
24457: PPUSH
24458: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: LD_INT 22
24466: PUSH
24467: LD_OWVAR 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 30
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PPUSH
24508: CALL_OW 69
24512: ST_TO_ADDR
// if not tmp then
24513: LD_VAR 0 4
24517: NOT
24518: IFFALSE 24522
// exit ;
24520: GO 24581
// for i in tmp do
24522: LD_ADDR_VAR 0 2
24526: PUSH
24527: LD_VAR 0 4
24531: PUSH
24532: FOR_IN
24533: IFFALSE 24579
// for j = 1 to 3 do
24535: LD_ADDR_VAR 0 3
24539: PUSH
24540: DOUBLE
24541: LD_INT 1
24543: DEC
24544: ST_TO_ADDR
24545: LD_INT 3
24547: PUSH
24548: FOR_TO
24549: IFFALSE 24575
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL_OW 274
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: LD_INT 99999
24568: PPUSH
24569: CALL_OW 277
24573: GO 24548
24575: POP
24576: POP
24577: GO 24532
24579: POP
24580: POP
// end ;
24581: LD_VAR 0 1
24585: RET
// export function hHackSetLevel10 ; var i , j ; begin
24586: LD_INT 0
24588: PPUSH
24589: PPUSH
24590: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_INT 21
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: PUSH
24611: FOR_IN
24612: IFFALSE 24664
// if IsSelected ( i ) then
24614: LD_VAR 0 2
24618: PPUSH
24619: CALL_OW 306
24623: IFFALSE 24662
// begin for j := 1 to 4 do
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: DOUBLE
24631: LD_INT 1
24633: DEC
24634: ST_TO_ADDR
24635: LD_INT 4
24637: PUSH
24638: FOR_TO
24639: IFFALSE 24660
// SetSkill ( i , j , 10 ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_VAR 0 3
24650: PPUSH
24651: LD_INT 10
24653: PPUSH
24654: CALL_OW 237
24658: GO 24638
24660: POP
24661: POP
// end ;
24662: GO 24611
24664: POP
24665: POP
// end ;
24666: LD_VAR 0 1
24670: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24671: LD_INT 0
24673: PPUSH
24674: PPUSH
24675: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24676: LD_ADDR_VAR 0 2
24680: PUSH
24681: LD_INT 22
24683: PUSH
24684: LD_OWVAR 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24754
// begin for j := 1 to 4 do
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: DOUBLE
24721: LD_INT 1
24723: DEC
24724: ST_TO_ADDR
24725: LD_INT 4
24727: PUSH
24728: FOR_TO
24729: IFFALSE 24750
// SetSkill ( i , j , 10 ) ;
24731: LD_VAR 0 2
24735: PPUSH
24736: LD_VAR 0 3
24740: PPUSH
24741: LD_INT 10
24743: PPUSH
24744: CALL_OW 237
24748: GO 24728
24750: POP
24751: POP
// end ;
24752: GO 24712
24754: POP
24755: POP
// end ;
24756: LD_VAR 0 1
24760: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24761: LD_INT 0
24763: PPUSH
// uc_side := your_side ;
24764: LD_ADDR_OWVAR 20
24768: PUSH
24769: LD_OWVAR 2
24773: ST_TO_ADDR
// uc_nation := nation ;
24774: LD_ADDR_OWVAR 21
24778: PUSH
24779: LD_VAR 0 1
24783: ST_TO_ADDR
// InitHc ;
24784: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24788: LD_INT 0
24790: PPUSH
24791: LD_VAR 0 2
24795: PPUSH
24796: LD_VAR 0 3
24800: PPUSH
24801: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_VAR 0 5
24814: PPUSH
24815: CALL_OW 428
24819: PUSH
24820: LD_INT 0
24822: EQUAL
24823: IFFALSE 24847
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24825: CALL_OW 44
24829: PPUSH
24830: LD_VAR 0 4
24834: PPUSH
24835: LD_VAR 0 5
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 48
// end ;
24847: LD_VAR 0 6
24851: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
// uc_side := your_side ;
24856: LD_ADDR_OWVAR 20
24860: PUSH
24861: LD_OWVAR 2
24865: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24866: LD_VAR 0 1
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: LD_INT 4
24882: PUSH
24883: LD_INT 5
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: IN
24893: IFFALSE 24905
// uc_nation := nation_american else
24895: LD_ADDR_OWVAR 21
24899: PUSH
24900: LD_INT 1
24902: ST_TO_ADDR
24903: GO 24948
// if chassis in [ 11 , 12 , 13 , 14 ] then
24905: LD_VAR 0 1
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 12
24915: PUSH
24916: LD_INT 13
24918: PUSH
24919: LD_INT 14
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: IN
24928: IFFALSE 24940
// uc_nation := nation_arabian else
24930: LD_ADDR_OWVAR 21
24934: PUSH
24935: LD_INT 2
24937: ST_TO_ADDR
24938: GO 24948
// uc_nation := nation_russian ;
24940: LD_ADDR_OWVAR 21
24944: PUSH
24945: LD_INT 3
24947: ST_TO_ADDR
// vc_chassis := chassis ;
24948: LD_ADDR_OWVAR 37
24952: PUSH
24953: LD_VAR 0 1
24957: ST_TO_ADDR
// vc_engine := engine ;
24958: LD_ADDR_OWVAR 39
24962: PUSH
24963: LD_VAR 0 2
24967: ST_TO_ADDR
// vc_control := control ;
24968: LD_ADDR_OWVAR 38
24972: PUSH
24973: LD_VAR 0 3
24977: ST_TO_ADDR
// vc_weapon := weapon ;
24978: LD_ADDR_OWVAR 40
24982: PUSH
24983: LD_VAR 0 4
24987: ST_TO_ADDR
// un := CreateVehicle ;
24988: LD_ADDR_VAR 0 8
24992: PUSH
24993: CALL_OW 45
24997: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24998: LD_VAR 0 8
25002: PPUSH
25003: LD_INT 0
25005: PPUSH
25006: LD_INT 5
25008: PPUSH
25009: CALL_OW 12
25013: PPUSH
25014: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25018: LD_VAR 0 8
25022: PPUSH
25023: LD_VAR 0 5
25027: PPUSH
25028: LD_VAR 0 6
25032: PPUSH
25033: LD_INT 1
25035: PPUSH
25036: CALL_OW 48
// end ;
25040: LD_VAR 0 7
25044: RET
// export hInvincible ; every 1 do
25045: GO 25047
25047: DISABLE
// hInvincible := [ ] ;
25048: LD_ADDR_EXP 104
25052: PUSH
25053: EMPTY
25054: ST_TO_ADDR
25055: END
// every 10 do var i ;
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
// begin enable ;
25062: ENABLE
// if not hInvincible then
25063: LD_EXP 104
25067: NOT
25068: IFFALSE 25072
// exit ;
25070: GO 25116
// for i in hInvincible do
25072: LD_ADDR_VAR 0 1
25076: PUSH
25077: LD_EXP 104
25081: PUSH
25082: FOR_IN
25083: IFFALSE 25114
// if GetLives ( i ) < 1000 then
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 256
25094: PUSH
25095: LD_INT 1000
25097: LESS
25098: IFFALSE 25112
// SetLives ( i , 1000 ) ;
25100: LD_VAR 0 1
25104: PPUSH
25105: LD_INT 1000
25107: PPUSH
25108: CALL_OW 234
25112: GO 25082
25114: POP
25115: POP
// end ;
25116: PPOPN 1
25118: END
// export function hHackInvincible ; var i ; begin
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: PUSH
25161: FOR_IN
25162: IFFALSE 25223
// if IsSelected ( i ) then
25164: LD_VAR 0 2
25168: PPUSH
25169: CALL_OW 306
25173: IFFALSE 25221
// begin if i in hInvincible then
25175: LD_VAR 0 2
25179: PUSH
25180: LD_EXP 104
25184: IN
25185: IFFALSE 25205
// hInvincible := hInvincible diff i else
25187: LD_ADDR_EXP 104
25191: PUSH
25192: LD_EXP 104
25196: PUSH
25197: LD_VAR 0 2
25201: DIFF
25202: ST_TO_ADDR
25203: GO 25221
// hInvincible := hInvincible union i ;
25205: LD_ADDR_EXP 104
25209: PUSH
25210: LD_EXP 104
25214: PUSH
25215: LD_VAR 0 2
25219: UNION
25220: ST_TO_ADDR
// end ;
25221: GO 25161
25223: POP
25224: POP
// end ;
25225: LD_VAR 0 1
25229: RET
// export function hHackInvisible ; var i , j ; begin
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25235: LD_ADDR_VAR 0 2
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: CALL_OW 69
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25280
// if IsSelected ( i ) then
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 306
25267: IFFALSE 25278
// ComForceInvisible ( i ) ;
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 496
25278: GO 25255
25280: POP
25281: POP
// end ;
25282: LD_VAR 0 1
25286: RET
// export function hHackChangeYourSide ; begin
25287: LD_INT 0
25289: PPUSH
// if your_side = 8 then
25290: LD_OWVAR 2
25294: PUSH
25295: LD_INT 8
25297: EQUAL
25298: IFFALSE 25310
// your_side := 0 else
25300: LD_ADDR_OWVAR 2
25304: PUSH
25305: LD_INT 0
25307: ST_TO_ADDR
25308: GO 25324
// your_side := your_side + 1 ;
25310: LD_ADDR_OWVAR 2
25314: PUSH
25315: LD_OWVAR 2
25319: PUSH
25320: LD_INT 1
25322: PLUS
25323: ST_TO_ADDR
// end ;
25324: LD_VAR 0 1
25328: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
// for i in all_units do
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_OWVAR 3
25343: PUSH
25344: FOR_IN
25345: IFFALSE 25423
// if IsSelected ( i ) then
25347: LD_VAR 0 2
25351: PPUSH
25352: CALL_OW 306
25356: IFFALSE 25421
// begin j := GetSide ( i ) ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 255
25372: ST_TO_ADDR
// if j = 8 then
25373: LD_VAR 0 3
25377: PUSH
25378: LD_INT 8
25380: EQUAL
25381: IFFALSE 25393
// j := 0 else
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
25391: GO 25407
// j := j + 1 ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_VAR 0 3
25402: PUSH
25403: LD_INT 1
25405: PLUS
25406: ST_TO_ADDR
// SetSide ( i , j ) ;
25407: LD_VAR 0 2
25411: PPUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: CALL_OW 235
// end ;
25421: GO 25344
25423: POP
25424: POP
// end ;
25425: LD_VAR 0 1
25429: RET
// export function hHackFog ; begin
25430: LD_INT 0
25432: PPUSH
// FogOff ( true ) ;
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 344
// end ;
25440: LD_VAR 0 1
25444: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25445: LD_INT 0
25447: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25448: LD_VAR 0 1
25452: PPUSH
25453: LD_VAR 0 2
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: LD_INT 1
25465: PPUSH
25466: LD_INT 1
25468: PPUSH
25469: CALL_OW 483
// CenterOnXY ( x , y ) ;
25473: LD_VAR 0 2
25477: PPUSH
25478: LD_VAR 0 3
25482: PPUSH
25483: CALL_OW 84
// end ;
25487: LD_VAR 0 4
25491: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25492: LD_INT 0
25494: PPUSH
25495: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25496: LD_VAR 0 1
25500: NOT
25501: PUSH
25502: LD_VAR 0 2
25506: PPUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 488
25516: NOT
25517: OR
25518: PUSH
25519: LD_VAR 0 1
25523: PPUSH
25524: CALL_OW 266
25528: PUSH
25529: LD_INT 3
25531: NONEQUAL
25532: PUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 247
25542: PUSH
25543: LD_INT 1
25545: EQUAL
25546: NOT
25547: AND
25548: OR
25549: IFFALSE 25553
// exit ;
25551: GO 25702
// if GetType ( factory ) = unit_human then
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 247
25562: PUSH
25563: LD_INT 1
25565: EQUAL
25566: IFFALSE 25583
// factory := IsInUnit ( factory ) ;
25568: LD_ADDR_VAR 0 1
25572: PUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 310
25582: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25583: LD_VAR 0 1
25587: PPUSH
25588: CALL_OW 266
25592: PUSH
25593: LD_INT 3
25595: NONEQUAL
25596: IFFALSE 25600
// exit ;
25598: GO 25702
// if HexInfo ( x , y ) = factory then
25600: LD_VAR 0 2
25604: PPUSH
25605: LD_VAR 0 3
25609: PPUSH
25610: CALL_OW 428
25614: PUSH
25615: LD_VAR 0 1
25619: EQUAL
25620: IFFALSE 25647
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25622: LD_ADDR_EXP 105
25626: PUSH
25627: LD_EXP 105
25631: PPUSH
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_INT 0
25639: PPUSH
25640: CALL_OW 1
25644: ST_TO_ADDR
25645: GO 25698
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25647: LD_ADDR_EXP 105
25651: PUSH
25652: LD_EXP 105
25656: PPUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL_OW 255
25671: PUSH
25672: LD_VAR 0 1
25676: PUSH
25677: LD_VAR 0 2
25681: PUSH
25682: LD_VAR 0 3
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 1
25697: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25698: CALL 25707 0 0
// end ;
25702: LD_VAR 0 4
25706: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25707: LD_INT 0
25709: PPUSH
25710: PPUSH
25711: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25712: LD_STRING resetFactoryWaypoint();
25714: PPUSH
25715: CALL_OW 559
// if factoryWaypoints then
25719: LD_EXP 105
25723: IFFALSE 25849
// begin list := PrepareArray ( factoryWaypoints ) ;
25725: LD_ADDR_VAR 0 3
25729: PUSH
25730: LD_EXP 105
25734: PPUSH
25735: CALL 72171 0 1
25739: ST_TO_ADDR
// for i := 1 to list do
25740: LD_ADDR_VAR 0 2
25744: PUSH
25745: DOUBLE
25746: LD_INT 1
25748: DEC
25749: ST_TO_ADDR
25750: LD_VAR 0 3
25754: PUSH
25755: FOR_TO
25756: IFFALSE 25847
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25758: LD_STRING setFactoryWaypointXY(
25760: PUSH
25761: LD_VAR 0 3
25765: PUSH
25766: LD_VAR 0 2
25770: ARRAY
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: STR
25776: PUSH
25777: LD_STRING ,
25779: STR
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: LD_VAR 0 2
25790: ARRAY
25791: PUSH
25792: LD_INT 2
25794: ARRAY
25795: STR
25796: PUSH
25797: LD_STRING ,
25799: STR
25800: PUSH
25801: LD_VAR 0 3
25805: PUSH
25806: LD_VAR 0 2
25810: ARRAY
25811: PUSH
25812: LD_INT 3
25814: ARRAY
25815: STR
25816: PUSH
25817: LD_STRING ,
25819: STR
25820: PUSH
25821: LD_VAR 0 3
25825: PUSH
25826: LD_VAR 0 2
25830: ARRAY
25831: PUSH
25832: LD_INT 4
25834: ARRAY
25835: STR
25836: PUSH
25837: LD_STRING )
25839: STR
25840: PPUSH
25841: CALL_OW 559
25845: GO 25755
25847: POP
25848: POP
// end ; end ;
25849: LD_VAR 0 1
25853: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25854: LD_INT 0
25856: PPUSH
// if HexInfo ( x , y ) = warehouse then
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_VAR 0 3
25866: PPUSH
25867: CALL_OW 428
25871: PUSH
25872: LD_VAR 0 1
25876: EQUAL
25877: IFFALSE 25904
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25879: LD_ADDR_EXP 106
25883: PUSH
25884: LD_EXP 106
25888: PPUSH
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_INT 0
25896: PPUSH
25897: CALL_OW 1
25901: ST_TO_ADDR
25902: GO 25955
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25904: LD_ADDR_EXP 106
25908: PUSH
25909: LD_EXP 106
25913: PPUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: LD_VAR 0 1
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: LD_VAR 0 1
25933: PUSH
25934: LD_VAR 0 2
25938: PUSH
25939: LD_VAR 0 3
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 1
25954: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25955: CALL 25964 0 0
// end ;
25959: LD_VAR 0 4
25963: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
25968: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25969: LD_STRING resetWarehouseGatheringPoints();
25971: PPUSH
25972: CALL_OW 559
// if warehouseGatheringPoints then
25976: LD_EXP 106
25980: IFFALSE 26106
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25982: LD_ADDR_VAR 0 3
25986: PUSH
25987: LD_EXP 106
25991: PPUSH
25992: CALL 72171 0 1
25996: ST_TO_ADDR
// for i := 1 to list do
25997: LD_ADDR_VAR 0 2
26001: PUSH
26002: DOUBLE
26003: LD_INT 1
26005: DEC
26006: ST_TO_ADDR
26007: LD_VAR 0 3
26011: PUSH
26012: FOR_TO
26013: IFFALSE 26104
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26015: LD_STRING setWarehouseGatheringPointXY(
26017: PUSH
26018: LD_VAR 0 3
26022: PUSH
26023: LD_VAR 0 2
26027: ARRAY
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: STR
26033: PUSH
26034: LD_STRING ,
26036: STR
26037: PUSH
26038: LD_VAR 0 3
26042: PUSH
26043: LD_VAR 0 2
26047: ARRAY
26048: PUSH
26049: LD_INT 2
26051: ARRAY
26052: STR
26053: PUSH
26054: LD_STRING ,
26056: STR
26057: PUSH
26058: LD_VAR 0 3
26062: PUSH
26063: LD_VAR 0 2
26067: ARRAY
26068: PUSH
26069: LD_INT 3
26071: ARRAY
26072: STR
26073: PUSH
26074: LD_STRING ,
26076: STR
26077: PUSH
26078: LD_VAR 0 3
26082: PUSH
26083: LD_VAR 0 2
26087: ARRAY
26088: PUSH
26089: LD_INT 4
26091: ARRAY
26092: STR
26093: PUSH
26094: LD_STRING )
26096: STR
26097: PPUSH
26098: CALL_OW 559
26102: GO 26012
26104: POP
26105: POP
// end ; end ;
26106: LD_VAR 0 1
26110: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26111: LD_EXP 106
26115: IFFALSE 26800
26117: GO 26119
26119: DISABLE
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
// begin enable ;
26131: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_EXP 106
26141: PPUSH
26142: CALL 72171 0 1
26146: ST_TO_ADDR
// if not list then
26147: LD_VAR 0 3
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26800
// for i := 1 to list do
26156: LD_ADDR_VAR 0 1
26160: PUSH
26161: DOUBLE
26162: LD_INT 1
26164: DEC
26165: ST_TO_ADDR
26166: LD_VAR 0 3
26170: PUSH
26171: FOR_TO
26172: IFFALSE 26798
// begin depot := list [ i ] [ 2 ] ;
26174: LD_ADDR_VAR 0 8
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 1
26188: ARRAY
26189: PUSH
26190: LD_INT 2
26192: ARRAY
26193: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26194: LD_ADDR_VAR 0 5
26198: PUSH
26199: LD_VAR 0 3
26203: PUSH
26204: LD_VAR 0 1
26208: ARRAY
26209: PUSH
26210: LD_INT 1
26212: ARRAY
26213: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26214: LD_VAR 0 8
26218: PPUSH
26219: CALL_OW 301
26223: PUSH
26224: LD_VAR 0 5
26228: PUSH
26229: LD_VAR 0 8
26233: PPUSH
26234: CALL_OW 255
26238: NONEQUAL
26239: OR
26240: IFFALSE 26269
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26242: LD_ADDR_EXP 106
26246: PUSH
26247: LD_EXP 106
26251: PPUSH
26252: LD_VAR 0 8
26256: PPUSH
26257: LD_INT 0
26259: PPUSH
26260: CALL_OW 1
26264: ST_TO_ADDR
// exit ;
26265: POP
26266: POP
26267: GO 26800
// end ; x := list [ i ] [ 3 ] ;
26269: LD_ADDR_VAR 0 6
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 1
26283: ARRAY
26284: PUSH
26285: LD_INT 3
26287: ARRAY
26288: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26289: LD_ADDR_VAR 0 7
26293: PUSH
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 1
26303: ARRAY
26304: PUSH
26305: LD_INT 4
26307: ARRAY
26308: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26309: LD_ADDR_VAR 0 9
26313: PUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_VAR 0 7
26323: PPUSH
26324: LD_INT 16
26326: PPUSH
26327: CALL 70759 0 3
26331: ST_TO_ADDR
// if not cratesNearbyPoint then
26332: LD_VAR 0 9
26336: NOT
26337: IFFALSE 26343
// exit ;
26339: POP
26340: POP
26341: GO 26800
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26343: LD_ADDR_VAR 0 4
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_VAR 0 5
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: LD_INT 60
26365: PUSH
26366: EMPTY
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 91
26375: PUSH
26376: LD_VAR 0 8
26380: PUSH
26381: LD_INT 6
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 25
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 25
26404: PUSH
26405: LD_INT 16
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: PPUSH
26423: CALL_OW 69
26427: PUSH
26428: LD_VAR 0 8
26432: PPUSH
26433: CALL_OW 313
26437: PPUSH
26438: LD_INT 3
26440: PUSH
26441: LD_INT 60
26443: PUSH
26444: EMPTY
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 25
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 25
26466: PUSH
26467: LD_INT 16
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 72
26487: UNION
26488: ST_TO_ADDR
// if tmp then
26489: LD_VAR 0 4
26493: IFFALSE 26573
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26495: LD_ADDR_VAR 0 4
26499: PUSH
26500: LD_VAR 0 4
26504: PPUSH
26505: LD_INT 3
26507: PPUSH
26508: CALL 68728 0 2
26512: ST_TO_ADDR
// for j in tmp do
26513: LD_ADDR_VAR 0 2
26517: PUSH
26518: LD_VAR 0 4
26522: PUSH
26523: FOR_IN
26524: IFFALSE 26567
// begin if IsInUnit ( j ) then
26526: LD_VAR 0 2
26530: PPUSH
26531: CALL_OW 310
26535: IFFALSE 26546
// ComExit ( j ) ;
26537: LD_VAR 0 2
26541: PPUSH
26542: CALL 68811 0 1
// AddComCollect ( j , x , y ) ;
26546: LD_VAR 0 2
26550: PPUSH
26551: LD_VAR 0 6
26555: PPUSH
26556: LD_VAR 0 7
26560: PPUSH
26561: CALL_OW 177
// end ;
26565: GO 26523
26567: POP
26568: POP
// exit ;
26569: POP
26570: POP
26571: GO 26800
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26573: LD_ADDR_VAR 0 4
26577: PUSH
26578: LD_INT 22
26580: PUSH
26581: LD_VAR 0 5
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 91
26592: PUSH
26593: LD_VAR 0 8
26597: PUSH
26598: LD_INT 8
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: LD_INT 34
26611: PUSH
26612: LD_INT 12
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 34
26621: PUSH
26622: LD_INT 51
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 34
26631: PUSH
26632: LD_INT 32
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 34
26641: PUSH
26642: LD_INT 89
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: PPUSH
26661: CALL_OW 69
26665: ST_TO_ADDR
// if tmp then
26666: LD_VAR 0 4
26670: IFFALSE 26796
// begin for j in tmp do
26672: LD_ADDR_VAR 0 2
26676: PUSH
26677: LD_VAR 0 4
26681: PUSH
26682: FOR_IN
26683: IFFALSE 26794
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26685: LD_VAR 0 2
26689: PPUSH
26690: CALL_OW 262
26694: PUSH
26695: LD_INT 3
26697: EQUAL
26698: PUSH
26699: LD_VAR 0 2
26703: PPUSH
26704: CALL_OW 261
26708: PUSH
26709: LD_INT 20
26711: GREATER
26712: OR
26713: PUSH
26714: LD_VAR 0 2
26718: PPUSH
26719: CALL_OW 314
26723: NOT
26724: AND
26725: PUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: CALL_OW 263
26735: PUSH
26736: LD_INT 1
26738: NONEQUAL
26739: PUSH
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 311
26749: OR
26750: AND
26751: IFFALSE 26792
// begin ComCollect ( j , x , y ) ;
26753: LD_VAR 0 2
26757: PPUSH
26758: LD_VAR 0 6
26762: PPUSH
26763: LD_VAR 0 7
26767: PPUSH
26768: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26772: LD_VAR 0 2
26776: PPUSH
26777: LD_VAR 0 8
26781: PPUSH
26782: CALL_OW 172
// exit ;
26786: POP
26787: POP
26788: POP
26789: POP
26790: GO 26800
// end ;
26792: GO 26682
26794: POP
26795: POP
// end ; end ;
26796: GO 26171
26798: POP
26799: POP
// end ; end_of_file
26800: PPOPN 9
26802: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26803: LD_INT 0
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 264
26818: PUSH
26819: LD_INT 91
26821: EQUAL
26822: IFFALSE 26894
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26824: LD_INT 68
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 255
26836: PPUSH
26837: CALL_OW 321
26841: PUSH
26842: LD_INT 2
26844: EQUAL
26845: IFFALSE 26857
// eff := 70 else
26847: LD_ADDR_VAR 0 4
26851: PUSH
26852: LD_INT 70
26854: ST_TO_ADDR
26855: GO 26865
// eff := 30 ;
26857: LD_ADDR_VAR 0 4
26861: PUSH
26862: LD_INT 30
26864: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26865: LD_VAR 0 1
26869: PPUSH
26870: CALL_OW 250
26874: PPUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 251
26884: PPUSH
26885: LD_VAR 0 4
26889: PPUSH
26890: CALL_OW 495
// end ; end ;
26894: LD_VAR 0 2
26898: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26899: LD_INT 0
26901: PPUSH
// end ;
26902: LD_VAR 0 4
26906: RET
// export function SOS_Command ( cmd ) ; begin
26907: LD_INT 0
26909: PPUSH
// end ;
26910: LD_VAR 0 2
26914: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26915: LD_INT 0
26917: PPUSH
// end ;
26918: LD_VAR 0 6
26922: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26923: LD_INT 0
26925: PPUSH
26926: PPUSH
// if not vehicle or not factory then
26927: LD_VAR 0 1
26931: NOT
26932: PUSH
26933: LD_VAR 0 2
26937: NOT
26938: OR
26939: IFFALSE 26943
// exit ;
26941: GO 27174
// if factoryWaypoints >= factory then
26943: LD_EXP 105
26947: PUSH
26948: LD_VAR 0 2
26952: GREATEREQUAL
26953: IFFALSE 27174
// if factoryWaypoints [ factory ] then
26955: LD_EXP 105
26959: PUSH
26960: LD_VAR 0 2
26964: ARRAY
26965: IFFALSE 27174
// begin if GetControl ( vehicle ) = control_manual then
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 263
26976: PUSH
26977: LD_INT 1
26979: EQUAL
26980: IFFALSE 27061
// begin driver := IsDrivenBy ( vehicle ) ;
26982: LD_ADDR_VAR 0 4
26986: PUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 311
26996: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26997: LD_VAR 0 4
27001: PPUSH
27002: LD_EXP 105
27006: PUSH
27007: LD_VAR 0 2
27011: ARRAY
27012: PUSH
27013: LD_INT 3
27015: ARRAY
27016: PPUSH
27017: LD_EXP 105
27021: PUSH
27022: LD_VAR 0 2
27026: ARRAY
27027: PUSH
27028: LD_INT 4
27030: ARRAY
27031: PPUSH
27032: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27036: LD_VAR 0 4
27040: PPUSH
27041: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27045: LD_VAR 0 4
27049: PPUSH
27050: LD_VAR 0 2
27054: PPUSH
27055: CALL_OW 180
// end else
27059: GO 27174
// if GetControl ( vehicle ) = control_remote then
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 263
27070: PUSH
27071: LD_INT 2
27073: EQUAL
27074: IFFALSE 27135
// begin wait ( 0 0$2 ) ;
27076: LD_INT 70
27078: PPUSH
27079: CALL_OW 67
// if Connect ( vehicle ) then
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL 39032 0 1
27092: IFFALSE 27133
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27094: LD_VAR 0 1
27098: PPUSH
27099: LD_EXP 105
27103: PUSH
27104: LD_VAR 0 2
27108: ARRAY
27109: PUSH
27110: LD_INT 3
27112: ARRAY
27113: PPUSH
27114: LD_EXP 105
27118: PUSH
27119: LD_VAR 0 2
27123: ARRAY
27124: PUSH
27125: LD_INT 4
27127: ARRAY
27128: PPUSH
27129: CALL_OW 171
// end else
27133: GO 27174
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: LD_EXP 105
27144: PUSH
27145: LD_VAR 0 2
27149: ARRAY
27150: PUSH
27151: LD_INT 3
27153: ARRAY
27154: PPUSH
27155: LD_EXP 105
27159: PUSH
27160: LD_VAR 0 2
27164: ARRAY
27165: PUSH
27166: LD_INT 4
27168: ARRAY
27169: PPUSH
27170: CALL_OW 171
// end ; end ;
27174: LD_VAR 0 3
27178: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27179: LD_INT 0
27181: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27182: LD_VAR 0 1
27186: PUSH
27187: LD_INT 250
27189: EQUAL
27190: PUSH
27191: LD_VAR 0 2
27195: PPUSH
27196: CALL_OW 264
27200: PUSH
27201: LD_INT 81
27203: EQUAL
27204: AND
27205: IFFALSE 27226
// MinerPlaceMine ( unit , x , y ) ;
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 4
27216: PPUSH
27217: LD_VAR 0 5
27221: PPUSH
27222: CALL 29611 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27226: LD_VAR 0 1
27230: PUSH
27231: LD_INT 251
27233: EQUAL
27234: PUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 264
27244: PUSH
27245: LD_INT 81
27247: EQUAL
27248: AND
27249: IFFALSE 27270
// MinerDetonateMine ( unit , x , y ) ;
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_VAR 0 4
27260: PPUSH
27261: LD_VAR 0 5
27265: PPUSH
27266: CALL 29886 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27270: LD_VAR 0 1
27274: PUSH
27275: LD_INT 252
27277: EQUAL
27278: PUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 264
27288: PUSH
27289: LD_INT 81
27291: EQUAL
27292: AND
27293: IFFALSE 27314
// MinerCreateMinefield ( unit , x , y ) ;
27295: LD_VAR 0 2
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_VAR 0 5
27309: PPUSH
27310: CALL 30303 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 253
27321: EQUAL
27322: PUSH
27323: LD_VAR 0 2
27327: PPUSH
27328: CALL_OW 257
27332: PUSH
27333: LD_INT 5
27335: EQUAL
27336: AND
27337: IFFALSE 27358
// ComBinocular ( unit , x , y ) ;
27339: LD_VAR 0 2
27343: PPUSH
27344: LD_VAR 0 4
27348: PPUSH
27349: LD_VAR 0 5
27353: PPUSH
27354: CALL 30672 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27358: LD_VAR 0 1
27362: PUSH
27363: LD_INT 254
27365: EQUAL
27366: PUSH
27367: LD_VAR 0 2
27371: PPUSH
27372: CALL_OW 264
27376: PUSH
27377: LD_INT 99
27379: EQUAL
27380: AND
27381: PUSH
27382: LD_VAR 0 3
27386: PPUSH
27387: CALL_OW 263
27391: PUSH
27392: LD_INT 3
27394: EQUAL
27395: AND
27396: IFFALSE 27412
// HackDestroyVehicle ( unit , selectedUnit ) ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_VAR 0 3
27407: PPUSH
27408: CALL 28975 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27412: LD_VAR 0 1
27416: PUSH
27417: LD_INT 255
27419: EQUAL
27420: PUSH
27421: LD_VAR 0 2
27425: PPUSH
27426: CALL_OW 264
27430: PUSH
27431: LD_INT 14
27433: PUSH
27434: LD_INT 53
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: IN
27441: AND
27442: PUSH
27443: LD_VAR 0 4
27447: PPUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: CALL_OW 488
27457: AND
27458: IFFALSE 27482
// CutTreeXYR ( unit , x , y , 12 ) ;
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 4
27469: PPUSH
27470: LD_VAR 0 5
27474: PPUSH
27475: LD_INT 12
27477: PPUSH
27478: CALL 27545 0 4
// if cmd = 256 then
27482: LD_VAR 0 1
27486: PUSH
27487: LD_INT 256
27489: EQUAL
27490: IFFALSE 27511
// SetFactoryWaypoint ( unit , x , y ) ;
27492: LD_VAR 0 2
27496: PPUSH
27497: LD_VAR 0 4
27501: PPUSH
27502: LD_VAR 0 5
27506: PPUSH
27507: CALL 25492 0 3
// if cmd = 257 then
27511: LD_VAR 0 1
27515: PUSH
27516: LD_INT 257
27518: EQUAL
27519: IFFALSE 27540
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27521: LD_VAR 0 2
27525: PPUSH
27526: LD_VAR 0 4
27530: PPUSH
27531: LD_VAR 0 5
27535: PPUSH
27536: CALL 25854 0 3
// end ;
27540: LD_VAR 0 6
27544: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27545: LD_INT 0
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27556: LD_VAR 0 1
27560: NOT
27561: PUSH
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_VAR 0 3
27571: PPUSH
27572: CALL_OW 488
27576: NOT
27577: OR
27578: PUSH
27579: LD_VAR 0 4
27583: NOT
27584: OR
27585: IFFALSE 27589
// exit ;
27587: GO 27929
// list := [ ] ;
27589: LD_ADDR_VAR 0 13
27593: PUSH
27594: EMPTY
27595: ST_TO_ADDR
// if x - r < 0 then
27596: LD_VAR 0 2
27600: PUSH
27601: LD_VAR 0 4
27605: MINUS
27606: PUSH
27607: LD_INT 0
27609: LESS
27610: IFFALSE 27622
// min_x := 0 else
27612: LD_ADDR_VAR 0 7
27616: PUSH
27617: LD_INT 0
27619: ST_TO_ADDR
27620: GO 27638
// min_x := x - r ;
27622: LD_ADDR_VAR 0 7
27626: PUSH
27627: LD_VAR 0 2
27631: PUSH
27632: LD_VAR 0 4
27636: MINUS
27637: ST_TO_ADDR
// if y - r < 0 then
27638: LD_VAR 0 3
27642: PUSH
27643: LD_VAR 0 4
27647: MINUS
27648: PUSH
27649: LD_INT 0
27651: LESS
27652: IFFALSE 27664
// min_y := 0 else
27654: LD_ADDR_VAR 0 8
27658: PUSH
27659: LD_INT 0
27661: ST_TO_ADDR
27662: GO 27680
// min_y := y - r ;
27664: LD_ADDR_VAR 0 8
27668: PUSH
27669: LD_VAR 0 3
27673: PUSH
27674: LD_VAR 0 4
27678: MINUS
27679: ST_TO_ADDR
// max_x := x + r ;
27680: LD_ADDR_VAR 0 9
27684: PUSH
27685: LD_VAR 0 2
27689: PUSH
27690: LD_VAR 0 4
27694: PLUS
27695: ST_TO_ADDR
// max_y := y + r ;
27696: LD_ADDR_VAR 0 10
27700: PUSH
27701: LD_VAR 0 3
27705: PUSH
27706: LD_VAR 0 4
27710: PLUS
27711: ST_TO_ADDR
// for _x = min_x to max_x do
27712: LD_ADDR_VAR 0 11
27716: PUSH
27717: DOUBLE
27718: LD_VAR 0 7
27722: DEC
27723: ST_TO_ADDR
27724: LD_VAR 0 9
27728: PUSH
27729: FOR_TO
27730: IFFALSE 27847
// for _y = min_y to max_y do
27732: LD_ADDR_VAR 0 12
27736: PUSH
27737: DOUBLE
27738: LD_VAR 0 8
27742: DEC
27743: ST_TO_ADDR
27744: LD_VAR 0 10
27748: PUSH
27749: FOR_TO
27750: IFFALSE 27843
// begin if not ValidHex ( _x , _y ) then
27752: LD_VAR 0 11
27756: PPUSH
27757: LD_VAR 0 12
27761: PPUSH
27762: CALL_OW 488
27766: NOT
27767: IFFALSE 27771
// continue ;
27769: GO 27749
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27771: LD_VAR 0 11
27775: PPUSH
27776: LD_VAR 0 12
27780: PPUSH
27781: CALL_OW 351
27785: PUSH
27786: LD_VAR 0 11
27790: PPUSH
27791: LD_VAR 0 12
27795: PPUSH
27796: CALL_OW 554
27800: AND
27801: IFFALSE 27841
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27803: LD_ADDR_VAR 0 13
27807: PUSH
27808: LD_VAR 0 13
27812: PPUSH
27813: LD_VAR 0 13
27817: PUSH
27818: LD_INT 1
27820: PLUS
27821: PPUSH
27822: LD_VAR 0 11
27826: PUSH
27827: LD_VAR 0 12
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 2
27840: ST_TO_ADDR
// end ;
27841: GO 27749
27843: POP
27844: POP
27845: GO 27729
27847: POP
27848: POP
// if not list then
27849: LD_VAR 0 13
27853: NOT
27854: IFFALSE 27858
// exit ;
27856: GO 27929
// for i in list do
27858: LD_ADDR_VAR 0 6
27862: PUSH
27863: LD_VAR 0 13
27867: PUSH
27868: FOR_IN
27869: IFFALSE 27927
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27871: LD_VAR 0 1
27875: PPUSH
27876: LD_STRING M
27878: PUSH
27879: LD_VAR 0 6
27883: PUSH
27884: LD_INT 1
27886: ARRAY
27887: PUSH
27888: LD_VAR 0 6
27892: PUSH
27893: LD_INT 2
27895: ARRAY
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: PPUSH
27921: CALL_OW 447
27925: GO 27868
27927: POP
27928: POP
// end ;
27929: LD_VAR 0 5
27933: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27934: LD_EXP 108
27938: NOT
27939: IFFALSE 27989
27941: GO 27943
27943: DISABLE
// begin initHack := true ;
27944: LD_ADDR_EXP 108
27948: PUSH
27949: LD_INT 1
27951: ST_TO_ADDR
// hackTanks := [ ] ;
27952: LD_ADDR_EXP 109
27956: PUSH
27957: EMPTY
27958: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27959: LD_ADDR_EXP 110
27963: PUSH
27964: EMPTY
27965: ST_TO_ADDR
// hackLimit := 3 ;
27966: LD_ADDR_EXP 111
27970: PUSH
27971: LD_INT 3
27973: ST_TO_ADDR
// hackDist := 12 ;
27974: LD_ADDR_EXP 112
27978: PUSH
27979: LD_INT 12
27981: ST_TO_ADDR
// hackCounter := [ ] ;
27982: LD_ADDR_EXP 113
27986: PUSH
27987: EMPTY
27988: ST_TO_ADDR
// end ;
27989: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27990: LD_EXP 108
27994: PUSH
27995: LD_INT 34
27997: PUSH
27998: LD_INT 99
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PPUSH
28005: CALL_OW 69
28009: AND
28010: IFFALSE 28263
28012: GO 28014
28014: DISABLE
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
// begin enable ;
28019: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28020: LD_ADDR_VAR 0 1
28024: PUSH
28025: LD_INT 34
28027: PUSH
28028: LD_INT 99
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PPUSH
28035: CALL_OW 69
28039: PUSH
28040: FOR_IN
28041: IFFALSE 28261
// begin if not i in hackTanks then
28043: LD_VAR 0 1
28047: PUSH
28048: LD_EXP 109
28052: IN
28053: NOT
28054: IFFALSE 28137
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28056: LD_ADDR_EXP 109
28060: PUSH
28061: LD_EXP 109
28065: PPUSH
28066: LD_EXP 109
28070: PUSH
28071: LD_INT 1
28073: PLUS
28074: PPUSH
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 1
28084: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28085: LD_ADDR_EXP 110
28089: PUSH
28090: LD_EXP 110
28094: PPUSH
28095: LD_EXP 110
28099: PUSH
28100: LD_INT 1
28102: PLUS
28103: PPUSH
28104: EMPTY
28105: PPUSH
28106: CALL_OW 1
28110: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28111: LD_ADDR_EXP 113
28115: PUSH
28116: LD_EXP 113
28120: PPUSH
28121: LD_EXP 113
28125: PUSH
28126: LD_INT 1
28128: PLUS
28129: PPUSH
28130: EMPTY
28131: PPUSH
28132: CALL_OW 1
28136: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28137: LD_VAR 0 1
28141: PPUSH
28142: CALL_OW 302
28146: NOT
28147: IFFALSE 28160
// begin HackUnlinkAll ( i ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL 28266 0 1
// continue ;
28158: GO 28040
// end ; HackCheckCapturedStatus ( i ) ;
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL 28709 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28169: LD_ADDR_VAR 0 2
28173: PUSH
28174: LD_INT 81
28176: PUSH
28177: LD_VAR 0 1
28181: PPUSH
28182: CALL_OW 255
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 33
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 91
28203: PUSH
28204: LD_VAR 0 1
28208: PUSH
28209: LD_EXP 112
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 50
28221: PUSH
28222: EMPTY
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 69
28235: ST_TO_ADDR
// if not tmp then
28236: LD_VAR 0 2
28240: NOT
28241: IFFALSE 28245
// continue ;
28243: GO 28040
// HackLink ( i , tmp ) ;
28245: LD_VAR 0 1
28249: PPUSH
28250: LD_VAR 0 2
28254: PPUSH
28255: CALL 28402 0 2
// end ;
28259: GO 28040
28261: POP
28262: POP
// end ;
28263: PPOPN 2
28265: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28266: LD_INT 0
28268: PPUSH
28269: PPUSH
28270: PPUSH
// if not hack in hackTanks then
28271: LD_VAR 0 1
28275: PUSH
28276: LD_EXP 109
28280: IN
28281: NOT
28282: IFFALSE 28286
// exit ;
28284: GO 28397
// index := GetElementIndex ( hackTanks , hack ) ;
28286: LD_ADDR_VAR 0 4
28290: PUSH
28291: LD_EXP 109
28295: PPUSH
28296: LD_VAR 0 1
28300: PPUSH
28301: CALL 35839 0 2
28305: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28306: LD_EXP 110
28310: PUSH
28311: LD_VAR 0 4
28315: ARRAY
28316: IFFALSE 28397
// begin for i in hackTanksCaptured [ index ] do
28318: LD_ADDR_VAR 0 3
28322: PUSH
28323: LD_EXP 110
28327: PUSH
28328: LD_VAR 0 4
28332: ARRAY
28333: PUSH
28334: FOR_IN
28335: IFFALSE 28361
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28337: LD_VAR 0 3
28341: PUSH
28342: LD_INT 1
28344: ARRAY
28345: PPUSH
28346: LD_VAR 0 3
28350: PUSH
28351: LD_INT 2
28353: ARRAY
28354: PPUSH
28355: CALL_OW 235
28359: GO 28334
28361: POP
28362: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28363: LD_ADDR_EXP 110
28367: PUSH
28368: LD_EXP 110
28372: PPUSH
28373: LD_VAR 0 4
28377: PPUSH
28378: EMPTY
28379: PPUSH
28380: CALL_OW 1
28384: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28385: LD_VAR 0 1
28389: PPUSH
28390: LD_INT 0
28392: PPUSH
28393: CALL_OW 505
// end ; end ;
28397: LD_VAR 0 2
28401: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28402: LD_INT 0
28404: PPUSH
28405: PPUSH
28406: PPUSH
// if not hack in hackTanks or not vehicles then
28407: LD_VAR 0 1
28411: PUSH
28412: LD_EXP 109
28416: IN
28417: NOT
28418: PUSH
28419: LD_VAR 0 2
28423: NOT
28424: OR
28425: IFFALSE 28429
// exit ;
28427: GO 28704
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28429: LD_ADDR_VAR 0 2
28433: PUSH
28434: LD_VAR 0 1
28438: PPUSH
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_INT 1
28446: PPUSH
28447: LD_INT 1
28449: PPUSH
28450: CALL 36489 0 4
28454: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28455: LD_ADDR_VAR 0 5
28459: PUSH
28460: LD_EXP 109
28464: PPUSH
28465: LD_VAR 0 1
28469: PPUSH
28470: CALL 35839 0 2
28474: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28475: LD_EXP 110
28479: PUSH
28480: LD_VAR 0 5
28484: ARRAY
28485: PUSH
28486: LD_EXP 111
28490: LESS
28491: IFFALSE 28680
// begin for i := 1 to vehicles do
28493: LD_ADDR_VAR 0 4
28497: PUSH
28498: DOUBLE
28499: LD_INT 1
28501: DEC
28502: ST_TO_ADDR
28503: LD_VAR 0 2
28507: PUSH
28508: FOR_TO
28509: IFFALSE 28678
// begin if hackTanksCaptured [ index ] = hackLimit then
28511: LD_EXP 110
28515: PUSH
28516: LD_VAR 0 5
28520: ARRAY
28521: PUSH
28522: LD_EXP 111
28526: EQUAL
28527: IFFALSE 28531
// break ;
28529: GO 28678
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28531: LD_ADDR_EXP 113
28535: PUSH
28536: LD_EXP 113
28540: PPUSH
28541: LD_VAR 0 5
28545: PPUSH
28546: LD_EXP 113
28550: PUSH
28551: LD_VAR 0 5
28555: ARRAY
28556: PUSH
28557: LD_INT 1
28559: PLUS
28560: PPUSH
28561: CALL_OW 1
28565: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28566: LD_ADDR_EXP 110
28570: PUSH
28571: LD_EXP 110
28575: PPUSH
28576: LD_VAR 0 5
28580: PUSH
28581: LD_EXP 110
28585: PUSH
28586: LD_VAR 0 5
28590: ARRAY
28591: PUSH
28592: LD_INT 1
28594: PLUS
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PPUSH
28600: LD_VAR 0 2
28604: PUSH
28605: LD_VAR 0 4
28609: ARRAY
28610: PUSH
28611: LD_VAR 0 2
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: PPUSH
28622: CALL_OW 255
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PPUSH
28631: CALL 36054 0 3
28635: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28636: LD_VAR 0 2
28640: PUSH
28641: LD_VAR 0 4
28645: ARRAY
28646: PPUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 255
28656: PPUSH
28657: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28661: LD_VAR 0 2
28665: PUSH
28666: LD_VAR 0 4
28670: ARRAY
28671: PPUSH
28672: CALL_OW 141
// end ;
28676: GO 28508
28678: POP
28679: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28680: LD_VAR 0 1
28684: PPUSH
28685: LD_EXP 110
28689: PUSH
28690: LD_VAR 0 5
28694: ARRAY
28695: PUSH
28696: LD_INT 0
28698: PLUS
28699: PPUSH
28700: CALL_OW 505
// end ;
28704: LD_VAR 0 3
28708: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28709: LD_INT 0
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
// if not hack in hackTanks then
28715: LD_VAR 0 1
28719: PUSH
28720: LD_EXP 109
28724: IN
28725: NOT
28726: IFFALSE 28730
// exit ;
28728: GO 28970
// index := GetElementIndex ( hackTanks , hack ) ;
28730: LD_ADDR_VAR 0 4
28734: PUSH
28735: LD_EXP 109
28739: PPUSH
28740: LD_VAR 0 1
28744: PPUSH
28745: CALL 35839 0 2
28749: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: DOUBLE
28756: LD_EXP 110
28760: PUSH
28761: LD_VAR 0 4
28765: ARRAY
28766: INC
28767: ST_TO_ADDR
28768: LD_INT 1
28770: PUSH
28771: FOR_DOWNTO
28772: IFFALSE 28944
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28774: LD_ADDR_VAR 0 5
28778: PUSH
28779: LD_EXP 110
28783: PUSH
28784: LD_VAR 0 4
28788: ARRAY
28789: PUSH
28790: LD_VAR 0 3
28794: ARRAY
28795: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28796: LD_VAR 0 5
28800: PUSH
28801: LD_INT 1
28803: ARRAY
28804: PPUSH
28805: CALL_OW 302
28809: NOT
28810: PUSH
28811: LD_VAR 0 5
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: PPUSH
28820: CALL_OW 255
28824: PUSH
28825: LD_VAR 0 1
28829: PPUSH
28830: CALL_OW 255
28834: NONEQUAL
28835: OR
28836: IFFALSE 28942
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28838: LD_VAR 0 5
28842: PUSH
28843: LD_INT 1
28845: ARRAY
28846: PPUSH
28847: CALL_OW 305
28851: PUSH
28852: LD_VAR 0 5
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PPUSH
28861: CALL_OW 255
28865: PUSH
28866: LD_VAR 0 1
28870: PPUSH
28871: CALL_OW 255
28875: EQUAL
28876: AND
28877: IFFALSE 28901
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28879: LD_VAR 0 5
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: LD_VAR 0 5
28892: PUSH
28893: LD_INT 2
28895: ARRAY
28896: PPUSH
28897: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28901: LD_ADDR_EXP 110
28905: PUSH
28906: LD_EXP 110
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_EXP 110
28920: PUSH
28921: LD_VAR 0 4
28925: ARRAY
28926: PPUSH
28927: LD_VAR 0 3
28931: PPUSH
28932: CALL_OW 3
28936: PPUSH
28937: CALL_OW 1
28941: ST_TO_ADDR
// end ; end ;
28942: GO 28771
28944: POP
28945: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_EXP 110
28955: PUSH
28956: LD_VAR 0 4
28960: ARRAY
28961: PUSH
28962: LD_INT 0
28964: PLUS
28965: PPUSH
28966: CALL_OW 505
// end ;
28970: LD_VAR 0 2
28974: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// if not hack in hackTanks then
28981: LD_VAR 0 1
28985: PUSH
28986: LD_EXP 109
28990: IN
28991: NOT
28992: IFFALSE 28996
// exit ;
28994: GO 29081
// index := GetElementIndex ( hackTanks , hack ) ;
28996: LD_ADDR_VAR 0 5
29000: PUSH
29001: LD_EXP 109
29005: PPUSH
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL 35839 0 2
29015: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29016: LD_ADDR_VAR 0 4
29020: PUSH
29021: DOUBLE
29022: LD_INT 1
29024: DEC
29025: ST_TO_ADDR
29026: LD_EXP 110
29030: PUSH
29031: LD_VAR 0 5
29035: ARRAY
29036: PUSH
29037: FOR_TO
29038: IFFALSE 29079
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29040: LD_EXP 110
29044: PUSH
29045: LD_VAR 0 5
29049: ARRAY
29050: PUSH
29051: LD_VAR 0 4
29055: ARRAY
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: PUSH
29061: LD_VAR 0 2
29065: EQUAL
29066: IFFALSE 29077
// KillUnit ( vehicle ) ;
29068: LD_VAR 0 2
29072: PPUSH
29073: CALL_OW 66
29077: GO 29037
29079: POP
29080: POP
// end ;
29081: LD_VAR 0 3
29085: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29086: LD_EXP 114
29090: NOT
29091: IFFALSE 29126
29093: GO 29095
29095: DISABLE
// begin initMiner := true ;
29096: LD_ADDR_EXP 114
29100: PUSH
29101: LD_INT 1
29103: ST_TO_ADDR
// minersList := [ ] ;
29104: LD_ADDR_EXP 115
29108: PUSH
29109: EMPTY
29110: ST_TO_ADDR
// minerMinesList := [ ] ;
29111: LD_ADDR_EXP 116
29115: PUSH
29116: EMPTY
29117: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29118: LD_ADDR_EXP 117
29122: PUSH
29123: LD_INT 5
29125: ST_TO_ADDR
// end ;
29126: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29127: LD_EXP 114
29131: PUSH
29132: LD_INT 34
29134: PUSH
29135: LD_INT 81
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 69
29146: AND
29147: IFFALSE 29608
29149: GO 29151
29151: DISABLE
29152: LD_INT 0
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
// begin enable ;
29158: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29159: LD_ADDR_VAR 0 1
29163: PUSH
29164: LD_INT 34
29166: PUSH
29167: LD_INT 81
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PPUSH
29174: CALL_OW 69
29178: PUSH
29179: FOR_IN
29180: IFFALSE 29252
// begin if not i in minersList then
29182: LD_VAR 0 1
29186: PUSH
29187: LD_EXP 115
29191: IN
29192: NOT
29193: IFFALSE 29250
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29195: LD_ADDR_EXP 115
29199: PUSH
29200: LD_EXP 115
29204: PPUSH
29205: LD_EXP 115
29209: PUSH
29210: LD_INT 1
29212: PLUS
29213: PPUSH
29214: LD_VAR 0 1
29218: PPUSH
29219: CALL_OW 1
29223: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29224: LD_ADDR_EXP 116
29228: PUSH
29229: LD_EXP 116
29233: PPUSH
29234: LD_EXP 116
29238: PUSH
29239: LD_INT 1
29241: PLUS
29242: PPUSH
29243: EMPTY
29244: PPUSH
29245: CALL_OW 1
29249: ST_TO_ADDR
// end end ;
29250: GO 29179
29252: POP
29253: POP
// for i := minerMinesList downto 1 do
29254: LD_ADDR_VAR 0 1
29258: PUSH
29259: DOUBLE
29260: LD_EXP 116
29264: INC
29265: ST_TO_ADDR
29266: LD_INT 1
29268: PUSH
29269: FOR_DOWNTO
29270: IFFALSE 29606
// begin if IsLive ( minersList [ i ] ) then
29272: LD_EXP 115
29276: PUSH
29277: LD_VAR 0 1
29281: ARRAY
29282: PPUSH
29283: CALL_OW 300
29287: IFFALSE 29315
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29289: LD_EXP 115
29293: PUSH
29294: LD_VAR 0 1
29298: ARRAY
29299: PPUSH
29300: LD_EXP 116
29304: PUSH
29305: LD_VAR 0 1
29309: ARRAY
29310: PPUSH
29311: CALL_OW 505
// if not minerMinesList [ i ] then
29315: LD_EXP 116
29319: PUSH
29320: LD_VAR 0 1
29324: ARRAY
29325: NOT
29326: IFFALSE 29330
// continue ;
29328: GO 29269
// for j := minerMinesList [ i ] downto 1 do
29330: LD_ADDR_VAR 0 2
29334: PUSH
29335: DOUBLE
29336: LD_EXP 116
29340: PUSH
29341: LD_VAR 0 1
29345: ARRAY
29346: INC
29347: ST_TO_ADDR
29348: LD_INT 1
29350: PUSH
29351: FOR_DOWNTO
29352: IFFALSE 29602
// begin side := GetSide ( minersList [ i ] ) ;
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_EXP 115
29363: PUSH
29364: LD_VAR 0 1
29368: ARRAY
29369: PPUSH
29370: CALL_OW 255
29374: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29375: LD_ADDR_VAR 0 4
29379: PUSH
29380: LD_EXP 116
29384: PUSH
29385: LD_VAR 0 1
29389: ARRAY
29390: PUSH
29391: LD_VAR 0 2
29395: ARRAY
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PPUSH
29401: LD_EXP 116
29405: PUSH
29406: LD_VAR 0 1
29410: ARRAY
29411: PUSH
29412: LD_VAR 0 2
29416: ARRAY
29417: PUSH
29418: LD_INT 2
29420: ARRAY
29421: PPUSH
29422: CALL_OW 428
29426: ST_TO_ADDR
// if not tmp then
29427: LD_VAR 0 4
29431: NOT
29432: IFFALSE 29436
// continue ;
29434: GO 29351
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29436: LD_VAR 0 4
29440: PUSH
29441: LD_INT 81
29443: PUSH
29444: LD_VAR 0 3
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PPUSH
29453: CALL_OW 69
29457: IN
29458: PUSH
29459: LD_EXP 116
29463: PUSH
29464: LD_VAR 0 1
29468: ARRAY
29469: PUSH
29470: LD_VAR 0 2
29474: ARRAY
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PPUSH
29480: LD_EXP 116
29484: PUSH
29485: LD_VAR 0 1
29489: ARRAY
29490: PUSH
29491: LD_VAR 0 2
29495: ARRAY
29496: PUSH
29497: LD_INT 2
29499: ARRAY
29500: PPUSH
29501: CALL_OW 458
29505: AND
29506: IFFALSE 29600
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29508: LD_EXP 116
29512: PUSH
29513: LD_VAR 0 1
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 2
29523: ARRAY
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: PPUSH
29529: LD_EXP 116
29533: PUSH
29534: LD_VAR 0 1
29538: ARRAY
29539: PUSH
29540: LD_VAR 0 2
29544: ARRAY
29545: PUSH
29546: LD_INT 2
29548: ARRAY
29549: PPUSH
29550: LD_VAR 0 3
29554: PPUSH
29555: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29559: LD_ADDR_EXP 116
29563: PUSH
29564: LD_EXP 116
29568: PPUSH
29569: LD_VAR 0 1
29573: PPUSH
29574: LD_EXP 116
29578: PUSH
29579: LD_VAR 0 1
29583: ARRAY
29584: PPUSH
29585: LD_VAR 0 2
29589: PPUSH
29590: CALL_OW 3
29594: PPUSH
29595: CALL_OW 1
29599: ST_TO_ADDR
// end ; end ;
29600: GO 29351
29602: POP
29603: POP
// end ;
29604: GO 29269
29606: POP
29607: POP
// end ;
29608: PPOPN 4
29610: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29611: LD_INT 0
29613: PPUSH
29614: PPUSH
// result := false ;
29615: LD_ADDR_VAR 0 4
29619: PUSH
29620: LD_INT 0
29622: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29623: LD_VAR 0 1
29627: PPUSH
29628: CALL_OW 264
29632: PUSH
29633: LD_INT 81
29635: EQUAL
29636: NOT
29637: IFFALSE 29641
// exit ;
29639: GO 29881
// index := GetElementIndex ( minersList , unit ) ;
29641: LD_ADDR_VAR 0 5
29645: PUSH
29646: LD_EXP 115
29650: PPUSH
29651: LD_VAR 0 1
29655: PPUSH
29656: CALL 35839 0 2
29660: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29661: LD_EXP 116
29665: PUSH
29666: LD_VAR 0 5
29670: ARRAY
29671: PUSH
29672: LD_EXP 117
29676: GREATEREQUAL
29677: IFFALSE 29681
// exit ;
29679: GO 29881
// ComMoveXY ( unit , x , y ) ;
29681: LD_VAR 0 1
29685: PPUSH
29686: LD_VAR 0 2
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29700: LD_INT 35
29702: PPUSH
29703: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29707: LD_VAR 0 1
29711: PPUSH
29712: LD_VAR 0 2
29716: PPUSH
29717: LD_VAR 0 3
29721: PPUSH
29722: CALL 67223 0 3
29726: NOT
29727: PUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 314
29737: AND
29738: IFFALSE 29742
// exit ;
29740: GO 29881
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 428
29756: PUSH
29757: LD_VAR 0 1
29761: EQUAL
29762: PUSH
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 314
29772: NOT
29773: AND
29774: IFFALSE 29700
// PlaySoundXY ( x , y , PlantMine ) ;
29776: LD_VAR 0 2
29780: PPUSH
29781: LD_VAR 0 3
29785: PPUSH
29786: LD_STRING PlantMine
29788: PPUSH
29789: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29793: LD_VAR 0 2
29797: PPUSH
29798: LD_VAR 0 3
29802: PPUSH
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 255
29812: PPUSH
29813: LD_INT 0
29815: PPUSH
29816: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29820: LD_ADDR_EXP 116
29824: PUSH
29825: LD_EXP 116
29829: PPUSH
29830: LD_VAR 0 5
29834: PUSH
29835: LD_EXP 116
29839: PUSH
29840: LD_VAR 0 5
29844: ARRAY
29845: PUSH
29846: LD_INT 1
29848: PLUS
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PPUSH
29854: LD_VAR 0 2
29858: PUSH
29859: LD_VAR 0 3
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PPUSH
29868: CALL 36054 0 3
29872: ST_TO_ADDR
// result := true ;
29873: LD_ADDR_VAR 0 4
29877: PUSH
29878: LD_INT 1
29880: ST_TO_ADDR
// end ;
29881: LD_VAR 0 4
29885: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29886: LD_INT 0
29888: PPUSH
29889: PPUSH
29890: PPUSH
// if not unit in minersList then
29891: LD_VAR 0 1
29895: PUSH
29896: LD_EXP 115
29900: IN
29901: NOT
29902: IFFALSE 29906
// exit ;
29904: GO 30298
// index := GetElementIndex ( minersList , unit ) ;
29906: LD_ADDR_VAR 0 6
29910: PUSH
29911: LD_EXP 115
29915: PPUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL 35839 0 2
29925: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29926: LD_ADDR_VAR 0 5
29930: PUSH
29931: DOUBLE
29932: LD_EXP 116
29936: PUSH
29937: LD_VAR 0 6
29941: ARRAY
29942: INC
29943: ST_TO_ADDR
29944: LD_INT 1
29946: PUSH
29947: FOR_DOWNTO
29948: IFFALSE 30109
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29950: LD_EXP 116
29954: PUSH
29955: LD_VAR 0 6
29959: ARRAY
29960: PUSH
29961: LD_VAR 0 5
29965: ARRAY
29966: PUSH
29967: LD_INT 1
29969: ARRAY
29970: PUSH
29971: LD_VAR 0 2
29975: EQUAL
29976: PUSH
29977: LD_EXP 116
29981: PUSH
29982: LD_VAR 0 6
29986: ARRAY
29987: PUSH
29988: LD_VAR 0 5
29992: ARRAY
29993: PUSH
29994: LD_INT 2
29996: ARRAY
29997: PUSH
29998: LD_VAR 0 3
30002: EQUAL
30003: AND
30004: IFFALSE 30107
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30006: LD_EXP 116
30010: PUSH
30011: LD_VAR 0 6
30015: ARRAY
30016: PUSH
30017: LD_VAR 0 5
30021: ARRAY
30022: PUSH
30023: LD_INT 1
30025: ARRAY
30026: PPUSH
30027: LD_EXP 116
30031: PUSH
30032: LD_VAR 0 6
30036: ARRAY
30037: PUSH
30038: LD_VAR 0 5
30042: ARRAY
30043: PUSH
30044: LD_INT 2
30046: ARRAY
30047: PPUSH
30048: LD_VAR 0 1
30052: PPUSH
30053: CALL_OW 255
30057: PPUSH
30058: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30062: LD_ADDR_EXP 116
30066: PUSH
30067: LD_EXP 116
30071: PPUSH
30072: LD_VAR 0 6
30076: PPUSH
30077: LD_EXP 116
30081: PUSH
30082: LD_VAR 0 6
30086: ARRAY
30087: PPUSH
30088: LD_VAR 0 5
30092: PPUSH
30093: CALL_OW 3
30097: PPUSH
30098: CALL_OW 1
30102: ST_TO_ADDR
// exit ;
30103: POP
30104: POP
30105: GO 30298
// end ; end ;
30107: GO 29947
30109: POP
30110: POP
// for i := minerMinesList [ index ] downto 1 do
30111: LD_ADDR_VAR 0 5
30115: PUSH
30116: DOUBLE
30117: LD_EXP 116
30121: PUSH
30122: LD_VAR 0 6
30126: ARRAY
30127: INC
30128: ST_TO_ADDR
30129: LD_INT 1
30131: PUSH
30132: FOR_DOWNTO
30133: IFFALSE 30296
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30135: LD_EXP 116
30139: PUSH
30140: LD_VAR 0 6
30144: ARRAY
30145: PUSH
30146: LD_VAR 0 5
30150: ARRAY
30151: PUSH
30152: LD_INT 1
30154: ARRAY
30155: PPUSH
30156: LD_EXP 116
30160: PUSH
30161: LD_VAR 0 6
30165: ARRAY
30166: PUSH
30167: LD_VAR 0 5
30171: ARRAY
30172: PUSH
30173: LD_INT 2
30175: ARRAY
30176: PPUSH
30177: LD_VAR 0 2
30181: PPUSH
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 298
30191: PUSH
30192: LD_INT 6
30194: LESS
30195: IFFALSE 30294
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30197: LD_EXP 116
30201: PUSH
30202: LD_VAR 0 6
30206: ARRAY
30207: PUSH
30208: LD_VAR 0 5
30212: ARRAY
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: PPUSH
30218: LD_EXP 116
30222: PUSH
30223: LD_VAR 0 6
30227: ARRAY
30228: PUSH
30229: LD_VAR 0 5
30233: ARRAY
30234: PUSH
30235: LD_INT 2
30237: ARRAY
30238: PPUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 255
30248: PPUSH
30249: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30253: LD_ADDR_EXP 116
30257: PUSH
30258: LD_EXP 116
30262: PPUSH
30263: LD_VAR 0 6
30267: PPUSH
30268: LD_EXP 116
30272: PUSH
30273: LD_VAR 0 6
30277: ARRAY
30278: PPUSH
30279: LD_VAR 0 5
30283: PPUSH
30284: CALL_OW 3
30288: PPUSH
30289: CALL_OW 1
30293: ST_TO_ADDR
// end ; end ;
30294: GO 30132
30296: POP
30297: POP
// end ;
30298: LD_VAR 0 4
30302: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30303: LD_INT 0
30305: PPUSH
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
30310: PPUSH
30311: PPUSH
30312: PPUSH
30313: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 264
30323: PUSH
30324: LD_INT 81
30326: EQUAL
30327: NOT
30328: PUSH
30329: LD_VAR 0 1
30333: PUSH
30334: LD_EXP 115
30338: IN
30339: NOT
30340: OR
30341: IFFALSE 30345
// exit ;
30343: GO 30667
// index := GetElementIndex ( minersList , unit ) ;
30345: LD_ADDR_VAR 0 6
30349: PUSH
30350: LD_EXP 115
30354: PPUSH
30355: LD_VAR 0 1
30359: PPUSH
30360: CALL 35839 0 2
30364: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30365: LD_ADDR_VAR 0 8
30369: PUSH
30370: LD_EXP 117
30374: PUSH
30375: LD_EXP 116
30379: PUSH
30380: LD_VAR 0 6
30384: ARRAY
30385: MINUS
30386: ST_TO_ADDR
// if not minesFreeAmount then
30387: LD_VAR 0 8
30391: NOT
30392: IFFALSE 30396
// exit ;
30394: GO 30667
// tmp := [ ] ;
30396: LD_ADDR_VAR 0 7
30400: PUSH
30401: EMPTY
30402: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30403: LD_ADDR_VAR 0 5
30407: PUSH
30408: DOUBLE
30409: LD_INT 1
30411: DEC
30412: ST_TO_ADDR
30413: LD_VAR 0 8
30417: PUSH
30418: FOR_TO
30419: IFFALSE 30614
// begin _d := rand ( 0 , 5 ) ;
30421: LD_ADDR_VAR 0 11
30425: PUSH
30426: LD_INT 0
30428: PPUSH
30429: LD_INT 5
30431: PPUSH
30432: CALL_OW 12
30436: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30437: LD_ADDR_VAR 0 12
30441: PUSH
30442: LD_INT 2
30444: PPUSH
30445: LD_INT 6
30447: PPUSH
30448: CALL_OW 12
30452: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30453: LD_ADDR_VAR 0 9
30457: PUSH
30458: LD_VAR 0 2
30462: PPUSH
30463: LD_VAR 0 11
30467: PPUSH
30468: LD_VAR 0 12
30472: PPUSH
30473: CALL_OW 272
30477: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30478: LD_ADDR_VAR 0 10
30482: PUSH
30483: LD_VAR 0 3
30487: PPUSH
30488: LD_VAR 0 11
30492: PPUSH
30493: LD_VAR 0 12
30497: PPUSH
30498: CALL_OW 273
30502: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30503: LD_VAR 0 9
30507: PPUSH
30508: LD_VAR 0 10
30512: PPUSH
30513: CALL_OW 488
30517: PUSH
30518: LD_VAR 0 9
30522: PUSH
30523: LD_VAR 0 10
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_VAR 0 7
30536: IN
30537: NOT
30538: AND
30539: PUSH
30540: LD_VAR 0 9
30544: PPUSH
30545: LD_VAR 0 10
30549: PPUSH
30550: CALL_OW 458
30554: NOT
30555: AND
30556: IFFALSE 30598
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30558: LD_ADDR_VAR 0 7
30562: PUSH
30563: LD_VAR 0 7
30567: PPUSH
30568: LD_VAR 0 7
30572: PUSH
30573: LD_INT 1
30575: PLUS
30576: PPUSH
30577: LD_VAR 0 9
30581: PUSH
30582: LD_VAR 0 10
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 1
30595: ST_TO_ADDR
30596: GO 30612
// i := i - 1 ;
30598: LD_ADDR_VAR 0 5
30602: PUSH
30603: LD_VAR 0 5
30607: PUSH
30608: LD_INT 1
30610: MINUS
30611: ST_TO_ADDR
// end ;
30612: GO 30418
30614: POP
30615: POP
// for i in tmp do
30616: LD_ADDR_VAR 0 5
30620: PUSH
30621: LD_VAR 0 7
30625: PUSH
30626: FOR_IN
30627: IFFALSE 30665
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30629: LD_VAR 0 1
30633: PPUSH
30634: LD_VAR 0 5
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: PPUSH
30643: LD_VAR 0 5
30647: PUSH
30648: LD_INT 2
30650: ARRAY
30651: PPUSH
30652: CALL 29611 0 3
30656: NOT
30657: IFFALSE 30663
// exit ;
30659: POP
30660: POP
30661: GO 30667
30663: GO 30626
30665: POP
30666: POP
// end ;
30667: LD_VAR 0 4
30671: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30672: LD_INT 0
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
// if not GetClass ( unit ) = class_sniper then
30681: LD_VAR 0 1
30685: PPUSH
30686: CALL_OW 257
30690: PUSH
30691: LD_INT 5
30693: EQUAL
30694: NOT
30695: IFFALSE 30699
// exit ;
30697: GO 31087
// dist := 8 ;
30699: LD_ADDR_VAR 0 5
30703: PUSH
30704: LD_INT 8
30706: ST_TO_ADDR
// viewRange := 12 ;
30707: LD_ADDR_VAR 0 7
30711: PUSH
30712: LD_INT 12
30714: ST_TO_ADDR
// side := GetSide ( unit ) ;
30715: LD_ADDR_VAR 0 6
30719: PUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 255
30729: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30730: LD_INT 61
30732: PPUSH
30733: LD_VAR 0 6
30737: PPUSH
30738: CALL_OW 321
30742: PUSH
30743: LD_INT 2
30745: EQUAL
30746: IFFALSE 30756
// viewRange := 16 ;
30748: LD_ADDR_VAR 0 7
30752: PUSH
30753: LD_INT 16
30755: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_VAR 0 2
30765: PPUSH
30766: LD_VAR 0 3
30770: PPUSH
30771: CALL_OW 297
30775: PUSH
30776: LD_VAR 0 5
30780: GREATER
30781: IFFALSE 30860
// begin ComMoveXY ( unit , x , y ) ;
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_VAR 0 2
30792: PPUSH
30793: LD_VAR 0 3
30797: PPUSH
30798: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30802: LD_INT 35
30804: PPUSH
30805: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30809: LD_VAR 0 1
30813: PPUSH
30814: LD_VAR 0 2
30818: PPUSH
30819: LD_VAR 0 3
30823: PPUSH
30824: CALL 67223 0 3
30828: NOT
30829: IFFALSE 30833
// exit ;
30831: GO 31087
// until GetDistUnitXY ( unit , x , y ) < dist ;
30833: LD_VAR 0 1
30837: PPUSH
30838: LD_VAR 0 2
30842: PPUSH
30843: LD_VAR 0 3
30847: PPUSH
30848: CALL_OW 297
30852: PUSH
30853: LD_VAR 0 5
30857: LESS
30858: IFFALSE 30802
// end ; ComTurnXY ( unit , x , y ) ;
30860: LD_VAR 0 1
30864: PPUSH
30865: LD_VAR 0 2
30869: PPUSH
30870: LD_VAR 0 3
30874: PPUSH
30875: CALL_OW 118
// wait ( 5 ) ;
30879: LD_INT 5
30881: PPUSH
30882: CALL_OW 67
// _d := GetDir ( unit ) ;
30886: LD_ADDR_VAR 0 10
30890: PUSH
30891: LD_VAR 0 1
30895: PPUSH
30896: CALL_OW 254
30900: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30901: LD_ADDR_VAR 0 8
30905: PUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 250
30915: PPUSH
30916: LD_VAR 0 10
30920: PPUSH
30921: LD_VAR 0 5
30925: PPUSH
30926: CALL_OW 272
30930: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30931: LD_ADDR_VAR 0 9
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 251
30945: PPUSH
30946: LD_VAR 0 10
30950: PPUSH
30951: LD_VAR 0 5
30955: PPUSH
30956: CALL_OW 273
30960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30961: LD_VAR 0 8
30965: PPUSH
30966: LD_VAR 0 9
30970: PPUSH
30971: CALL_OW 488
30975: NOT
30976: IFFALSE 30980
// exit ;
30978: GO 31087
// ComAnimCustom ( unit , 1 ) ;
30980: LD_VAR 0 1
30984: PPUSH
30985: LD_INT 1
30987: PPUSH
30988: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30992: LD_VAR 0 8
30996: PPUSH
30997: LD_VAR 0 9
31001: PPUSH
31002: LD_VAR 0 6
31006: PPUSH
31007: LD_VAR 0 7
31011: PPUSH
31012: CALL_OW 330
// repeat wait ( 1 ) ;
31016: LD_INT 1
31018: PPUSH
31019: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 316
31032: PUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: CALL_OW 314
31042: OR
31043: PUSH
31044: LD_VAR 0 1
31048: PPUSH
31049: CALL_OW 302
31053: NOT
31054: OR
31055: PUSH
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 301
31065: OR
31066: IFFALSE 31016
// RemoveSeeing ( _x , _y , side ) ;
31068: LD_VAR 0 8
31072: PPUSH
31073: LD_VAR 0 9
31077: PPUSH
31078: LD_VAR 0 6
31082: PPUSH
31083: CALL_OW 331
// end ; end_of_file
31087: LD_VAR 0 4
31091: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31092: LD_INT 0
31094: PPUSH
31095: PPUSH
// if exist_mode then
31096: LD_VAR 0 2
31100: IFFALSE 31125
// unit := CreateCharacter ( prefix & ident ) else
31102: LD_ADDR_VAR 0 5
31106: PUSH
31107: LD_VAR 0 3
31111: PUSH
31112: LD_VAR 0 1
31116: STR
31117: PPUSH
31118: CALL_OW 34
31122: ST_TO_ADDR
31123: GO 31140
// unit := NewCharacter ( ident ) ;
31125: LD_ADDR_VAR 0 5
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL_OW 25
31139: ST_TO_ADDR
// result := unit ;
31140: LD_ADDR_VAR 0 4
31144: PUSH
31145: LD_VAR 0 5
31149: ST_TO_ADDR
// end ;
31150: LD_VAR 0 4
31154: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31155: LD_INT 0
31157: PPUSH
31158: PPUSH
// if not side or not nation then
31159: LD_VAR 0 1
31163: NOT
31164: PUSH
31165: LD_VAR 0 2
31169: NOT
31170: OR
31171: IFFALSE 31175
// exit ;
31173: GO 31943
// case nation of nation_american :
31175: LD_VAR 0 2
31179: PUSH
31180: LD_INT 1
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31402
31188: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31189: LD_ADDR_VAR 0 4
31193: PUSH
31194: LD_INT 35
31196: PUSH
31197: LD_INT 45
31199: PUSH
31200: LD_INT 46
31202: PUSH
31203: LD_INT 47
31205: PUSH
31206: LD_INT 82
31208: PUSH
31209: LD_INT 83
31211: PUSH
31212: LD_INT 84
31214: PUSH
31215: LD_INT 85
31217: PUSH
31218: LD_INT 86
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: LD_INT 6
31229: PUSH
31230: LD_INT 15
31232: PUSH
31233: LD_INT 16
31235: PUSH
31236: LD_INT 7
31238: PUSH
31239: LD_INT 12
31241: PUSH
31242: LD_INT 13
31244: PUSH
31245: LD_INT 10
31247: PUSH
31248: LD_INT 14
31250: PUSH
31251: LD_INT 20
31253: PUSH
31254: LD_INT 21
31256: PUSH
31257: LD_INT 22
31259: PUSH
31260: LD_INT 25
31262: PUSH
31263: LD_INT 32
31265: PUSH
31266: LD_INT 27
31268: PUSH
31269: LD_INT 36
31271: PUSH
31272: LD_INT 69
31274: PUSH
31275: LD_INT 39
31277: PUSH
31278: LD_INT 34
31280: PUSH
31281: LD_INT 40
31283: PUSH
31284: LD_INT 48
31286: PUSH
31287: LD_INT 49
31289: PUSH
31290: LD_INT 50
31292: PUSH
31293: LD_INT 51
31295: PUSH
31296: LD_INT 52
31298: PUSH
31299: LD_INT 53
31301: PUSH
31302: LD_INT 54
31304: PUSH
31305: LD_INT 55
31307: PUSH
31308: LD_INT 56
31310: PUSH
31311: LD_INT 57
31313: PUSH
31314: LD_INT 58
31316: PUSH
31317: LD_INT 59
31319: PUSH
31320: LD_INT 60
31322: PUSH
31323: LD_INT 61
31325: PUSH
31326: LD_INT 62
31328: PUSH
31329: LD_INT 80
31331: PUSH
31332: LD_INT 82
31334: PUSH
31335: LD_INT 83
31337: PUSH
31338: LD_INT 84
31340: PUSH
31341: LD_INT 85
31343: PUSH
31344: LD_INT 86
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
31400: GO 31867
31402: LD_INT 2
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31636
31410: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31411: LD_ADDR_VAR 0 4
31415: PUSH
31416: LD_INT 35
31418: PUSH
31419: LD_INT 45
31421: PUSH
31422: LD_INT 46
31424: PUSH
31425: LD_INT 47
31427: PUSH
31428: LD_INT 82
31430: PUSH
31431: LD_INT 83
31433: PUSH
31434: LD_INT 84
31436: PUSH
31437: LD_INT 85
31439: PUSH
31440: LD_INT 87
31442: PUSH
31443: LD_INT 70
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 11
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 4
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: LD_INT 6
31463: PUSH
31464: LD_INT 15
31466: PUSH
31467: LD_INT 18
31469: PUSH
31470: LD_INT 7
31472: PUSH
31473: LD_INT 17
31475: PUSH
31476: LD_INT 8
31478: PUSH
31479: LD_INT 20
31481: PUSH
31482: LD_INT 21
31484: PUSH
31485: LD_INT 22
31487: PUSH
31488: LD_INT 72
31490: PUSH
31491: LD_INT 26
31493: PUSH
31494: LD_INT 69
31496: PUSH
31497: LD_INT 39
31499: PUSH
31500: LD_INT 40
31502: PUSH
31503: LD_INT 41
31505: PUSH
31506: LD_INT 42
31508: PUSH
31509: LD_INT 43
31511: PUSH
31512: LD_INT 48
31514: PUSH
31515: LD_INT 49
31517: PUSH
31518: LD_INT 50
31520: PUSH
31521: LD_INT 51
31523: PUSH
31524: LD_INT 52
31526: PUSH
31527: LD_INT 53
31529: PUSH
31530: LD_INT 54
31532: PUSH
31533: LD_INT 55
31535: PUSH
31536: LD_INT 56
31538: PUSH
31539: LD_INT 60
31541: PUSH
31542: LD_INT 61
31544: PUSH
31545: LD_INT 62
31547: PUSH
31548: LD_INT 66
31550: PUSH
31551: LD_INT 67
31553: PUSH
31554: LD_INT 68
31556: PUSH
31557: LD_INT 81
31559: PUSH
31560: LD_INT 82
31562: PUSH
31563: LD_INT 83
31565: PUSH
31566: LD_INT 84
31568: PUSH
31569: LD_INT 85
31571: PUSH
31572: LD_INT 87
31574: PUSH
31575: LD_INT 88
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
31634: GO 31867
31636: LD_INT 3
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 31866
31644: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: LD_INT 46
31652: PUSH
31653: LD_INT 47
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 82
31664: PUSH
31665: LD_INT 83
31667: PUSH
31668: LD_INT 84
31670: PUSH
31671: LD_INT 85
31673: PUSH
31674: LD_INT 86
31676: PUSH
31677: LD_INT 11
31679: PUSH
31680: LD_INT 9
31682: PUSH
31683: LD_INT 20
31685: PUSH
31686: LD_INT 19
31688: PUSH
31689: LD_INT 21
31691: PUSH
31692: LD_INT 24
31694: PUSH
31695: LD_INT 22
31697: PUSH
31698: LD_INT 25
31700: PUSH
31701: LD_INT 28
31703: PUSH
31704: LD_INT 29
31706: PUSH
31707: LD_INT 30
31709: PUSH
31710: LD_INT 31
31712: PUSH
31713: LD_INT 37
31715: PUSH
31716: LD_INT 38
31718: PUSH
31719: LD_INT 32
31721: PUSH
31722: LD_INT 27
31724: PUSH
31725: LD_INT 33
31727: PUSH
31728: LD_INT 69
31730: PUSH
31731: LD_INT 39
31733: PUSH
31734: LD_INT 34
31736: PUSH
31737: LD_INT 40
31739: PUSH
31740: LD_INT 71
31742: PUSH
31743: LD_INT 23
31745: PUSH
31746: LD_INT 44
31748: PUSH
31749: LD_INT 48
31751: PUSH
31752: LD_INT 49
31754: PUSH
31755: LD_INT 50
31757: PUSH
31758: LD_INT 51
31760: PUSH
31761: LD_INT 52
31763: PUSH
31764: LD_INT 53
31766: PUSH
31767: LD_INT 54
31769: PUSH
31770: LD_INT 55
31772: PUSH
31773: LD_INT 56
31775: PUSH
31776: LD_INT 57
31778: PUSH
31779: LD_INT 58
31781: PUSH
31782: LD_INT 59
31784: PUSH
31785: LD_INT 63
31787: PUSH
31788: LD_INT 64
31790: PUSH
31791: LD_INT 65
31793: PUSH
31794: LD_INT 82
31796: PUSH
31797: LD_INT 83
31799: PUSH
31800: LD_INT 84
31802: PUSH
31803: LD_INT 85
31805: PUSH
31806: LD_INT 86
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
31864: GO 31867
31866: POP
// if state > - 1 and state < 3 then
31867: LD_VAR 0 3
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: GREATER
31876: PUSH
31877: LD_VAR 0 3
31881: PUSH
31882: LD_INT 3
31884: LESS
31885: AND
31886: IFFALSE 31943
// for i in result do
31888: LD_ADDR_VAR 0 5
31892: PUSH
31893: LD_VAR 0 4
31897: PUSH
31898: FOR_IN
31899: IFFALSE 31941
// if GetTech ( i , side ) <> state then
31901: LD_VAR 0 5
31905: PPUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 321
31915: PUSH
31916: LD_VAR 0 3
31920: NONEQUAL
31921: IFFALSE 31939
// result := result diff i ;
31923: LD_ADDR_VAR 0 4
31927: PUSH
31928: LD_VAR 0 4
31932: PUSH
31933: LD_VAR 0 5
31937: DIFF
31938: ST_TO_ADDR
31939: GO 31898
31941: POP
31942: POP
// end ;
31943: LD_VAR 0 4
31947: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31948: LD_INT 0
31950: PPUSH
31951: PPUSH
31952: PPUSH
// result := true ;
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: LD_INT 1
31960: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31961: LD_ADDR_VAR 0 5
31965: PUSH
31966: LD_VAR 0 2
31970: PPUSH
31971: CALL_OW 480
31975: ST_TO_ADDR
// if not tmp then
31976: LD_VAR 0 5
31980: NOT
31981: IFFALSE 31985
// exit ;
31983: GO 32034
// for i in tmp do
31985: LD_ADDR_VAR 0 4
31989: PUSH
31990: LD_VAR 0 5
31994: PUSH
31995: FOR_IN
31996: IFFALSE 32032
// if GetTech ( i , side ) <> state_researched then
31998: LD_VAR 0 4
32002: PPUSH
32003: LD_VAR 0 1
32007: PPUSH
32008: CALL_OW 321
32012: PUSH
32013: LD_INT 2
32015: NONEQUAL
32016: IFFALSE 32030
// begin result := false ;
32018: LD_ADDR_VAR 0 3
32022: PUSH
32023: LD_INT 0
32025: ST_TO_ADDR
// exit ;
32026: POP
32027: POP
32028: GO 32034
// end ;
32030: GO 31995
32032: POP
32033: POP
// end ;
32034: LD_VAR 0 3
32038: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32054: LD_VAR 0 1
32058: NOT
32059: PUSH
32060: LD_VAR 0 1
32064: PPUSH
32065: CALL_OW 257
32069: PUSH
32070: LD_INT 9
32072: NONEQUAL
32073: OR
32074: IFFALSE 32078
// exit ;
32076: GO 32651
// side := GetSide ( unit ) ;
32078: LD_ADDR_VAR 0 9
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 255
32092: ST_TO_ADDR
// tech_space := tech_spacanom ;
32093: LD_ADDR_VAR 0 12
32097: PUSH
32098: LD_INT 29
32100: ST_TO_ADDR
// tech_time := tech_taurad ;
32101: LD_ADDR_VAR 0 13
32105: PUSH
32106: LD_INT 28
32108: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32109: LD_ADDR_VAR 0 11
32113: PUSH
32114: LD_VAR 0 1
32118: PPUSH
32119: CALL_OW 310
32123: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32124: LD_VAR 0 11
32128: PPUSH
32129: CALL_OW 247
32133: PUSH
32134: LD_INT 2
32136: EQUAL
32137: IFFALSE 32141
// exit ;
32139: GO 32651
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32141: LD_ADDR_VAR 0 8
32145: PUSH
32146: LD_INT 81
32148: PUSH
32149: LD_VAR 0 9
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: LD_INT 21
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 69
32183: ST_TO_ADDR
// if not tmp then
32184: LD_VAR 0 8
32188: NOT
32189: IFFALSE 32193
// exit ;
32191: GO 32651
// if in_unit then
32193: LD_VAR 0 11
32197: IFFALSE 32221
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32199: LD_ADDR_VAR 0 10
32203: PUSH
32204: LD_VAR 0 8
32208: PPUSH
32209: LD_VAR 0 11
32213: PPUSH
32214: CALL_OW 74
32218: ST_TO_ADDR
32219: GO 32241
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32221: LD_ADDR_VAR 0 10
32225: PUSH
32226: LD_VAR 0 8
32230: PPUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: CALL_OW 74
32240: ST_TO_ADDR
// if not enemy then
32241: LD_VAR 0 10
32245: NOT
32246: IFFALSE 32250
// exit ;
32248: GO 32651
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32250: LD_VAR 0 11
32254: PUSH
32255: LD_VAR 0 11
32259: PPUSH
32260: LD_VAR 0 10
32264: PPUSH
32265: CALL_OW 296
32269: PUSH
32270: LD_INT 13
32272: GREATER
32273: AND
32274: PUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: LD_VAR 0 10
32284: PPUSH
32285: CALL_OW 296
32289: PUSH
32290: LD_INT 12
32292: GREATER
32293: OR
32294: IFFALSE 32298
// exit ;
32296: GO 32651
// missile := [ 1 ] ;
32298: LD_ADDR_VAR 0 14
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32309: LD_VAR 0 9
32313: PPUSH
32314: LD_VAR 0 12
32318: PPUSH
32319: CALL_OW 325
32323: IFFALSE 32352
// missile := Replace ( missile , missile + 1 , 2 ) ;
32325: LD_ADDR_VAR 0 14
32329: PUSH
32330: LD_VAR 0 14
32334: PPUSH
32335: LD_VAR 0 14
32339: PUSH
32340: LD_INT 1
32342: PLUS
32343: PPUSH
32344: LD_INT 2
32346: PPUSH
32347: CALL_OW 1
32351: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32352: LD_VAR 0 9
32356: PPUSH
32357: LD_VAR 0 13
32361: PPUSH
32362: CALL_OW 325
32366: PUSH
32367: LD_VAR 0 10
32371: PPUSH
32372: CALL_OW 255
32376: PPUSH
32377: LD_VAR 0 13
32381: PPUSH
32382: CALL_OW 325
32386: NOT
32387: AND
32388: IFFALSE 32417
// missile := Replace ( missile , missile + 1 , 3 ) ;
32390: LD_ADDR_VAR 0 14
32394: PUSH
32395: LD_VAR 0 14
32399: PPUSH
32400: LD_VAR 0 14
32404: PUSH
32405: LD_INT 1
32407: PLUS
32408: PPUSH
32409: LD_INT 3
32411: PPUSH
32412: CALL_OW 1
32416: ST_TO_ADDR
// if missile < 2 then
32417: LD_VAR 0 14
32421: PUSH
32422: LD_INT 2
32424: LESS
32425: IFFALSE 32429
// exit ;
32427: GO 32651
// x := GetX ( enemy ) ;
32429: LD_ADDR_VAR 0 4
32433: PUSH
32434: LD_VAR 0 10
32438: PPUSH
32439: CALL_OW 250
32443: ST_TO_ADDR
// y := GetY ( enemy ) ;
32444: LD_ADDR_VAR 0 5
32448: PUSH
32449: LD_VAR 0 10
32453: PPUSH
32454: CALL_OW 251
32458: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32459: LD_ADDR_VAR 0 6
32463: PUSH
32464: LD_VAR 0 4
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PPUSH
32473: LD_INT 1
32475: PPUSH
32476: CALL_OW 12
32480: PLUS
32481: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32482: LD_ADDR_VAR 0 7
32486: PUSH
32487: LD_VAR 0 5
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PPUSH
32496: LD_INT 1
32498: PPUSH
32499: CALL_OW 12
32503: PLUS
32504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32505: LD_VAR 0 6
32509: PPUSH
32510: LD_VAR 0 7
32514: PPUSH
32515: CALL_OW 488
32519: NOT
32520: IFFALSE 32542
// begin _x := x ;
32522: LD_ADDR_VAR 0 6
32526: PUSH
32527: LD_VAR 0 4
32531: ST_TO_ADDR
// _y := y ;
32532: LD_ADDR_VAR 0 7
32536: PUSH
32537: LD_VAR 0 5
32541: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_INT 1
32549: PPUSH
32550: LD_VAR 0 14
32554: PPUSH
32555: CALL_OW 12
32559: ST_TO_ADDR
// case i of 1 :
32560: LD_VAR 0 3
32564: PUSH
32565: LD_INT 1
32567: DOUBLE
32568: EQUAL
32569: IFTRUE 32573
32571: GO 32590
32573: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32574: LD_VAR 0 1
32578: PPUSH
32579: LD_VAR 0 10
32583: PPUSH
32584: CALL_OW 115
32588: GO 32651
32590: LD_INT 2
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32620
32598: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32599: LD_VAR 0 1
32603: PPUSH
32604: LD_VAR 0 6
32608: PPUSH
32609: LD_VAR 0 7
32613: PPUSH
32614: CALL_OW 153
32618: GO 32651
32620: LD_INT 3
32622: DOUBLE
32623: EQUAL
32624: IFTRUE 32628
32626: GO 32650
32628: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32629: LD_VAR 0 1
32633: PPUSH
32634: LD_VAR 0 6
32638: PPUSH
32639: LD_VAR 0 7
32643: PPUSH
32644: CALL_OW 154
32648: GO 32651
32650: POP
// end ;
32651: LD_VAR 0 2
32655: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32656: LD_INT 0
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
// if not unit or not building then
32664: LD_VAR 0 1
32668: NOT
32669: PUSH
32670: LD_VAR 0 2
32674: NOT
32675: OR
32676: IFFALSE 32680
// exit ;
32678: GO 32838
// x := GetX ( building ) ;
32680: LD_ADDR_VAR 0 5
32684: PUSH
32685: LD_VAR 0 2
32689: PPUSH
32690: CALL_OW 250
32694: ST_TO_ADDR
// y := GetY ( building ) ;
32695: LD_ADDR_VAR 0 6
32699: PUSH
32700: LD_VAR 0 2
32704: PPUSH
32705: CALL_OW 251
32709: ST_TO_ADDR
// for i = 0 to 5 do
32710: LD_ADDR_VAR 0 4
32714: PUSH
32715: DOUBLE
32716: LD_INT 0
32718: DEC
32719: ST_TO_ADDR
32720: LD_INT 5
32722: PUSH
32723: FOR_TO
32724: IFFALSE 32836
// begin _x := ShiftX ( x , i , 3 ) ;
32726: LD_ADDR_VAR 0 7
32730: PUSH
32731: LD_VAR 0 5
32735: PPUSH
32736: LD_VAR 0 4
32740: PPUSH
32741: LD_INT 3
32743: PPUSH
32744: CALL_OW 272
32748: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: LD_VAR 0 6
32758: PPUSH
32759: LD_VAR 0 4
32763: PPUSH
32764: LD_INT 3
32766: PPUSH
32767: CALL_OW 273
32771: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32772: LD_VAR 0 7
32776: PPUSH
32777: LD_VAR 0 8
32781: PPUSH
32782: CALL_OW 488
32786: NOT
32787: IFFALSE 32791
// continue ;
32789: GO 32723
// if HexInfo ( _x , _y ) = 0 then
32791: LD_VAR 0 7
32795: PPUSH
32796: LD_VAR 0 8
32800: PPUSH
32801: CALL_OW 428
32805: PUSH
32806: LD_INT 0
32808: EQUAL
32809: IFFALSE 32834
// begin ComMoveXY ( unit , _x , _y ) ;
32811: LD_VAR 0 1
32815: PPUSH
32816: LD_VAR 0 7
32820: PPUSH
32821: LD_VAR 0 8
32825: PPUSH
32826: CALL_OW 111
// exit ;
32830: POP
32831: POP
32832: GO 32838
// end ; end ;
32834: GO 32723
32836: POP
32837: POP
// end ;
32838: LD_VAR 0 3
32842: RET
// export function ScanBase ( side , base_area ) ; begin
32843: LD_INT 0
32845: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32846: LD_ADDR_VAR 0 3
32850: PUSH
32851: LD_VAR 0 2
32855: PPUSH
32856: LD_INT 81
32858: PUSH
32859: LD_VAR 0 1
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PPUSH
32868: CALL_OW 70
32872: ST_TO_ADDR
// end ;
32873: LD_VAR 0 3
32877: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32878: LD_INT 0
32880: PPUSH
32881: PPUSH
32882: PPUSH
32883: PPUSH
// result := false ;
32884: LD_ADDR_VAR 0 2
32888: PUSH
32889: LD_INT 0
32891: ST_TO_ADDR
// side := GetSide ( unit ) ;
32892: LD_ADDR_VAR 0 3
32896: PUSH
32897: LD_VAR 0 1
32901: PPUSH
32902: CALL_OW 255
32906: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32907: LD_ADDR_VAR 0 4
32911: PUSH
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 248
32921: ST_TO_ADDR
// case nat of 1 :
32922: LD_VAR 0 4
32926: PUSH
32927: LD_INT 1
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32946
32935: POP
// tech := tech_lassight ; 2 :
32936: LD_ADDR_VAR 0 5
32940: PUSH
32941: LD_INT 12
32943: ST_TO_ADDR
32944: GO 32985
32946: LD_INT 2
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32965
32954: POP
// tech := tech_mortar ; 3 :
32955: LD_ADDR_VAR 0 5
32959: PUSH
32960: LD_INT 41
32962: ST_TO_ADDR
32963: GO 32985
32965: LD_INT 3
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 32984
32973: POP
// tech := tech_bazooka ; end ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_INT 44
32981: ST_TO_ADDR
32982: GO 32985
32984: POP
// if Researched ( side , tech ) then
32985: LD_VAR 0 3
32989: PPUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: CALL_OW 325
32999: IFFALSE 33026
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33001: LD_ADDR_VAR 0 2
33005: PUSH
33006: LD_INT 5
33008: PUSH
33009: LD_INT 8
33011: PUSH
33012: LD_INT 9
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: PUSH
33020: LD_VAR 0 4
33024: ARRAY
33025: ST_TO_ADDR
// end ;
33026: LD_VAR 0 2
33030: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33031: LD_INT 0
33033: PPUSH
33034: PPUSH
33035: PPUSH
// if not mines then
33036: LD_VAR 0 2
33040: NOT
33041: IFFALSE 33045
// exit ;
33043: GO 33189
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33045: LD_ADDR_VAR 0 5
33049: PUSH
33050: LD_INT 81
33052: PUSH
33053: LD_VAR 0 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: LD_INT 21
33067: PUSH
33068: LD_INT 3
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PPUSH
33083: CALL_OW 69
33087: ST_TO_ADDR
// for i in mines do
33088: LD_ADDR_VAR 0 4
33092: PUSH
33093: LD_VAR 0 2
33097: PUSH
33098: FOR_IN
33099: IFFALSE 33187
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33101: LD_VAR 0 4
33105: PUSH
33106: LD_INT 1
33108: ARRAY
33109: PPUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 2
33117: ARRAY
33118: PPUSH
33119: CALL_OW 458
33123: NOT
33124: IFFALSE 33128
// continue ;
33126: GO 33098
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33128: LD_VAR 0 4
33132: PUSH
33133: LD_INT 1
33135: ARRAY
33136: PPUSH
33137: LD_VAR 0 4
33141: PUSH
33142: LD_INT 2
33144: ARRAY
33145: PPUSH
33146: CALL_OW 428
33150: PUSH
33151: LD_VAR 0 5
33155: IN
33156: IFFALSE 33185
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33158: LD_VAR 0 4
33162: PUSH
33163: LD_INT 1
33165: ARRAY
33166: PPUSH
33167: LD_VAR 0 4
33171: PUSH
33172: LD_INT 2
33174: ARRAY
33175: PPUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: CALL_OW 456
// end ;
33185: GO 33098
33187: POP
33188: POP
// end ;
33189: LD_VAR 0 3
33193: RET
// export function Count ( array ) ; begin
33194: LD_INT 0
33196: PPUSH
// result := array + 0 ;
33197: LD_ADDR_VAR 0 2
33201: PUSH
33202: LD_VAR 0 1
33206: PUSH
33207: LD_INT 0
33209: PLUS
33210: ST_TO_ADDR
// end ;
33211: LD_VAR 0 2
33215: RET
// export function IsEmpty ( building ) ; begin
33216: LD_INT 0
33218: PPUSH
// if not building then
33219: LD_VAR 0 1
33223: NOT
33224: IFFALSE 33228
// exit ;
33226: GO 33271
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_VAR 0 1
33237: PUSH
33238: LD_INT 22
33240: PUSH
33241: LD_VAR 0 1
33245: PPUSH
33246: CALL_OW 255
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 58
33257: PUSH
33258: EMPTY
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 69
33269: IN
33270: ST_TO_ADDR
// end ;
33271: LD_VAR 0 2
33275: RET
// export function IsNotFull ( building ) ; var places ; begin
33276: LD_INT 0
33278: PPUSH
33279: PPUSH
// if not building then
33280: LD_VAR 0 1
33284: NOT
33285: IFFALSE 33289
// exit ;
33287: GO 33317
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33289: LD_ADDR_VAR 0 2
33293: PUSH
33294: LD_VAR 0 1
33298: PPUSH
33299: LD_INT 3
33301: PUSH
33302: LD_INT 62
33304: PUSH
33305: EMPTY
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PPUSH
33312: CALL_OW 72
33316: ST_TO_ADDR
// end ;
33317: LD_VAR 0 2
33321: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
// tmp := [ ] ;
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: EMPTY
33334: ST_TO_ADDR
// list := [ ] ;
33335: LD_ADDR_VAR 0 5
33339: PUSH
33340: EMPTY
33341: ST_TO_ADDR
// for i = 16 to 25 do
33342: LD_ADDR_VAR 0 4
33346: PUSH
33347: DOUBLE
33348: LD_INT 16
33350: DEC
33351: ST_TO_ADDR
33352: LD_INT 25
33354: PUSH
33355: FOR_TO
33356: IFFALSE 33429
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_VAR 0 3
33367: PUSH
33368: LD_INT 22
33370: PUSH
33371: LD_VAR 0 1
33375: PPUSH
33376: CALL_OW 255
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 91
33387: PUSH
33388: LD_VAR 0 1
33392: PUSH
33393: LD_INT 6
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 30
33403: PUSH
33404: LD_VAR 0 4
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: PUSH
33418: EMPTY
33419: LIST
33420: PPUSH
33421: CALL_OW 69
33425: ADD
33426: ST_TO_ADDR
33427: GO 33355
33429: POP
33430: POP
// for i = 1 to tmp do
33431: LD_ADDR_VAR 0 4
33435: PUSH
33436: DOUBLE
33437: LD_INT 1
33439: DEC
33440: ST_TO_ADDR
33441: LD_VAR 0 3
33445: PUSH
33446: FOR_TO
33447: IFFALSE 33535
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_VAR 0 5
33458: PUSH
33459: LD_VAR 0 3
33463: PUSH
33464: LD_VAR 0 4
33468: ARRAY
33469: PPUSH
33470: CALL_OW 266
33474: PUSH
33475: LD_VAR 0 3
33479: PUSH
33480: LD_VAR 0 4
33484: ARRAY
33485: PPUSH
33486: CALL_OW 250
33490: PUSH
33491: LD_VAR 0 3
33495: PUSH
33496: LD_VAR 0 4
33500: ARRAY
33501: PPUSH
33502: CALL_OW 251
33506: PUSH
33507: LD_VAR 0 3
33511: PUSH
33512: LD_VAR 0 4
33516: ARRAY
33517: PPUSH
33518: CALL_OW 254
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: PUSH
33529: EMPTY
33530: LIST
33531: ADD
33532: ST_TO_ADDR
33533: GO 33446
33535: POP
33536: POP
// result := list ;
33537: LD_ADDR_VAR 0 2
33541: PUSH
33542: LD_VAR 0 5
33546: ST_TO_ADDR
// end ;
33547: LD_VAR 0 2
33551: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33552: LD_INT 0
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
33559: PPUSH
33560: PPUSH
// if not factory then
33561: LD_VAR 0 1
33565: NOT
33566: IFFALSE 33570
// exit ;
33568: GO 34163
// if control = control_apeman then
33570: LD_VAR 0 4
33574: PUSH
33575: LD_INT 5
33577: EQUAL
33578: IFFALSE 33687
// begin tmp := UnitsInside ( factory ) ;
33580: LD_ADDR_VAR 0 8
33584: PUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: CALL_OW 313
33594: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33595: LD_VAR 0 8
33599: PPUSH
33600: LD_INT 25
33602: PUSH
33603: LD_INT 12
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 72
33614: NOT
33615: IFFALSE 33625
// control := control_manual ;
33617: LD_ADDR_VAR 0 4
33621: PUSH
33622: LD_INT 1
33624: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33625: LD_ADDR_VAR 0 8
33629: PUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL 33322 0 1
33639: ST_TO_ADDR
// if tmp then
33640: LD_VAR 0 8
33644: IFFALSE 33687
// begin for i in tmp do
33646: LD_ADDR_VAR 0 7
33650: PUSH
33651: LD_VAR 0 8
33655: PUSH
33656: FOR_IN
33657: IFFALSE 33685
// if i [ 1 ] = b_ext_radio then
33659: LD_VAR 0 7
33663: PUSH
33664: LD_INT 1
33666: ARRAY
33667: PUSH
33668: LD_INT 22
33670: EQUAL
33671: IFFALSE 33683
// begin control := control_remote ;
33673: LD_ADDR_VAR 0 4
33677: PUSH
33678: LD_INT 2
33680: ST_TO_ADDR
// break ;
33681: GO 33685
// end ;
33683: GO 33656
33685: POP
33686: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33687: LD_VAR 0 1
33691: PPUSH
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_VAR 0 3
33701: PPUSH
33702: LD_VAR 0 4
33706: PPUSH
33707: LD_VAR 0 5
33711: PPUSH
33712: CALL_OW 448
33716: IFFALSE 33751
// begin result := [ chassis , engine , control , weapon ] ;
33718: LD_ADDR_VAR 0 6
33722: PUSH
33723: LD_VAR 0 2
33727: PUSH
33728: LD_VAR 0 3
33732: PUSH
33733: LD_VAR 0 4
33737: PUSH
33738: LD_VAR 0 5
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
// exit ;
33749: GO 34163
// end ; _chassis := AvailableChassisList ( factory ) ;
33751: LD_ADDR_VAR 0 9
33755: PUSH
33756: LD_VAR 0 1
33760: PPUSH
33761: CALL_OW 475
33765: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33766: LD_ADDR_VAR 0 11
33770: PUSH
33771: LD_VAR 0 1
33775: PPUSH
33776: CALL_OW 476
33780: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33781: LD_ADDR_VAR 0 12
33785: PUSH
33786: LD_VAR 0 1
33790: PPUSH
33791: CALL_OW 477
33795: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33796: LD_ADDR_VAR 0 10
33800: PUSH
33801: LD_VAR 0 1
33805: PPUSH
33806: CALL_OW 478
33810: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33811: LD_VAR 0 9
33815: NOT
33816: PUSH
33817: LD_VAR 0 11
33821: NOT
33822: OR
33823: PUSH
33824: LD_VAR 0 12
33828: NOT
33829: OR
33830: PUSH
33831: LD_VAR 0 10
33835: NOT
33836: OR
33837: IFFALSE 33872
// begin result := [ chassis , engine , control , weapon ] ;
33839: LD_ADDR_VAR 0 6
33843: PUSH
33844: LD_VAR 0 2
33848: PUSH
33849: LD_VAR 0 3
33853: PUSH
33854: LD_VAR 0 4
33858: PUSH
33859: LD_VAR 0 5
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: ST_TO_ADDR
// exit ;
33870: GO 34163
// end ; if not chassis in _chassis then
33872: LD_VAR 0 2
33876: PUSH
33877: LD_VAR 0 9
33881: IN
33882: NOT
33883: IFFALSE 33909
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33885: LD_ADDR_VAR 0 2
33889: PUSH
33890: LD_VAR 0 9
33894: PUSH
33895: LD_INT 1
33897: PPUSH
33898: LD_VAR 0 9
33902: PPUSH
33903: CALL_OW 12
33907: ARRAY
33908: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33909: LD_VAR 0 2
33913: PPUSH
33914: LD_VAR 0 3
33918: PPUSH
33919: CALL 34168 0 2
33923: NOT
33924: IFFALSE 33983
// repeat engine := _engine [ 1 ] ;
33926: LD_ADDR_VAR 0 3
33930: PUSH
33931: LD_VAR 0 11
33935: PUSH
33936: LD_INT 1
33938: ARRAY
33939: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33940: LD_ADDR_VAR 0 11
33944: PUSH
33945: LD_VAR 0 11
33949: PPUSH
33950: LD_INT 1
33952: PPUSH
33953: CALL_OW 3
33957: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33958: LD_VAR 0 2
33962: PPUSH
33963: LD_VAR 0 3
33967: PPUSH
33968: CALL 34168 0 2
33972: PUSH
33973: LD_VAR 0 11
33977: PUSH
33978: EMPTY
33979: EQUAL
33980: OR
33981: IFFALSE 33926
// if not control in _control then
33983: LD_VAR 0 4
33987: PUSH
33988: LD_VAR 0 12
33992: IN
33993: NOT
33994: IFFALSE 34020
// control := _control [ rand ( 1 , _control ) ] ;
33996: LD_ADDR_VAR 0 4
34000: PUSH
34001: LD_VAR 0 12
34005: PUSH
34006: LD_INT 1
34008: PPUSH
34009: LD_VAR 0 12
34013: PPUSH
34014: CALL_OW 12
34018: ARRAY
34019: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34020: LD_VAR 0 2
34024: PPUSH
34025: LD_VAR 0 5
34029: PPUSH
34030: CALL 34388 0 2
34034: NOT
34035: IFFALSE 34094
// repeat weapon := _weapon [ 1 ] ;
34037: LD_ADDR_VAR 0 5
34041: PUSH
34042: LD_VAR 0 10
34046: PUSH
34047: LD_INT 1
34049: ARRAY
34050: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34051: LD_ADDR_VAR 0 10
34055: PUSH
34056: LD_VAR 0 10
34060: PPUSH
34061: LD_INT 1
34063: PPUSH
34064: CALL_OW 3
34068: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34069: LD_VAR 0 2
34073: PPUSH
34074: LD_VAR 0 5
34078: PPUSH
34079: CALL 34388 0 2
34083: PUSH
34084: LD_VAR 0 10
34088: PUSH
34089: EMPTY
34090: EQUAL
34091: OR
34092: IFFALSE 34037
// result := [ ] ;
34094: LD_ADDR_VAR 0 6
34098: PUSH
34099: EMPTY
34100: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34101: LD_VAR 0 1
34105: PPUSH
34106: LD_VAR 0 2
34110: PPUSH
34111: LD_VAR 0 3
34115: PPUSH
34116: LD_VAR 0 4
34120: PPUSH
34121: LD_VAR 0 5
34125: PPUSH
34126: CALL_OW 448
34130: IFFALSE 34163
// result := [ chassis , engine , control , weapon ] ;
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: LD_VAR 0 2
34141: PUSH
34142: LD_VAR 0 3
34146: PUSH
34147: LD_VAR 0 4
34151: PUSH
34152: LD_VAR 0 5
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
// end ;
34163: LD_VAR 0 6
34167: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34168: LD_INT 0
34170: PPUSH
// if not chassis or not engine then
34171: LD_VAR 0 1
34175: NOT
34176: PUSH
34177: LD_VAR 0 2
34181: NOT
34182: OR
34183: IFFALSE 34187
// exit ;
34185: GO 34383
// case engine of engine_solar :
34187: LD_VAR 0 2
34191: PUSH
34192: LD_INT 2
34194: DOUBLE
34195: EQUAL
34196: IFTRUE 34200
34198: GO 34238
34200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34201: LD_ADDR_VAR 0 3
34205: PUSH
34206: LD_INT 11
34208: PUSH
34209: LD_INT 12
34211: PUSH
34212: LD_INT 13
34214: PUSH
34215: LD_INT 14
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 2
34223: PUSH
34224: LD_INT 3
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
34236: GO 34367
34238: LD_INT 1
34240: DOUBLE
34241: EQUAL
34242: IFTRUE 34246
34244: GO 34308
34246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34247: LD_ADDR_VAR 0 3
34251: PUSH
34252: LD_INT 11
34254: PUSH
34255: LD_INT 12
34257: PUSH
34258: LD_INT 13
34260: PUSH
34261: LD_INT 14
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: LD_INT 4
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 21
34281: PUSH
34282: LD_INT 23
34284: PUSH
34285: LD_INT 22
34287: PUSH
34288: LD_INT 24
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: ST_TO_ADDR
34306: GO 34367
34308: LD_INT 3
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34316
34314: GO 34366
34316: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34317: LD_ADDR_VAR 0 3
34321: PUSH
34322: LD_INT 13
34324: PUSH
34325: LD_INT 14
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 3
34333: PUSH
34334: LD_INT 4
34336: PUSH
34337: LD_INT 5
34339: PUSH
34340: LD_INT 21
34342: PUSH
34343: LD_INT 22
34345: PUSH
34346: LD_INT 23
34348: PUSH
34349: LD_INT 24
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
34364: GO 34367
34366: POP
// result := ( chassis in result ) ;
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_VAR 0 1
34376: PUSH
34377: LD_VAR 0 3
34381: IN
34382: ST_TO_ADDR
// end ;
34383: LD_VAR 0 3
34387: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34388: LD_INT 0
34390: PPUSH
// if not chassis or not weapon then
34391: LD_VAR 0 1
34395: NOT
34396: PUSH
34397: LD_VAR 0 2
34401: NOT
34402: OR
34403: IFFALSE 34407
// exit ;
34405: GO 35467
// case weapon of us_machine_gun :
34407: LD_VAR 0 2
34411: PUSH
34412: LD_INT 2
34414: DOUBLE
34415: EQUAL
34416: IFTRUE 34420
34418: GO 34450
34420: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34421: LD_ADDR_VAR 0 3
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 3
34434: PUSH
34435: LD_INT 4
34437: PUSH
34438: LD_INT 5
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: ST_TO_ADDR
34448: GO 35451
34450: LD_INT 3
34452: DOUBLE
34453: EQUAL
34454: IFTRUE 34458
34456: GO 34488
34458: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34459: LD_ADDR_VAR 0 3
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 2
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 4
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
34486: GO 35451
34488: LD_INT 11
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34526
34496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
34524: GO 35451
34526: LD_INT 4
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34560
34534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34535: LD_ADDR_VAR 0 3
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: LD_INT 4
34548: PUSH
34549: LD_INT 5
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: ST_TO_ADDR
34558: GO 35451
34560: LD_INT 5
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34594
34568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: ST_TO_ADDR
34592: GO 35451
34594: LD_INT 9
34596: DOUBLE
34597: EQUAL
34598: IFTRUE 34602
34600: GO 34628
34602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34603: LD_ADDR_VAR 0 3
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: LD_INT 4
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: ST_TO_ADDR
34626: GO 35451
34628: LD_INT 7
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34662
34636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: LD_INT 4
34650: PUSH
34651: LD_INT 5
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: ST_TO_ADDR
34660: GO 35451
34662: LD_INT 12
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 34696
34670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
34694: GO 35451
34696: LD_INT 13
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34730
34704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: LD_INT 4
34718: PUSH
34719: LD_INT 5
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
34728: GO 35451
34730: LD_INT 14
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34756
34738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_INT 4
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: ST_TO_ADDR
34754: GO 35451
34756: LD_INT 6
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34764
34762: GO 34782
34764: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34765: LD_ADDR_VAR 0 3
34769: PUSH
34770: LD_INT 4
34772: PUSH
34773: LD_INT 5
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 35451
34782: LD_INT 10
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34808
34790: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: ST_TO_ADDR
34806: GO 35451
34808: LD_INT 22
34810: DOUBLE
34811: EQUAL
34812: IFTRUE 34816
34814: GO 34842
34816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34817: LD_ADDR_VAR 0 3
34821: PUSH
34822: LD_INT 11
34824: PUSH
34825: LD_INT 12
34827: PUSH
34828: LD_INT 13
34830: PUSH
34831: LD_INT 14
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: ST_TO_ADDR
34840: GO 35451
34842: LD_INT 23
34844: DOUBLE
34845: EQUAL
34846: IFTRUE 34850
34848: GO 34876
34850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34851: LD_ADDR_VAR 0 3
34855: PUSH
34856: LD_INT 11
34858: PUSH
34859: LD_INT 12
34861: PUSH
34862: LD_INT 13
34864: PUSH
34865: LD_INT 14
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
34874: GO 35451
34876: LD_INT 24
34878: DOUBLE
34879: EQUAL
34880: IFTRUE 34884
34882: GO 34910
34884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34885: LD_ADDR_VAR 0 3
34889: PUSH
34890: LD_INT 11
34892: PUSH
34893: LD_INT 12
34895: PUSH
34896: LD_INT 13
34898: PUSH
34899: LD_INT 14
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
34908: GO 35451
34910: LD_INT 30
34912: DOUBLE
34913: EQUAL
34914: IFTRUE 34918
34916: GO 34944
34918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34919: LD_ADDR_VAR 0 3
34923: PUSH
34924: LD_INT 11
34926: PUSH
34927: LD_INT 12
34929: PUSH
34930: LD_INT 13
34932: PUSH
34933: LD_INT 14
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
34942: GO 35451
34944: LD_INT 25
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 34970
34952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_INT 13
34960: PUSH
34961: LD_INT 14
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: ST_TO_ADDR
34968: GO 35451
34970: LD_INT 27
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34978
34976: GO 34996
34978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: LD_INT 13
34986: PUSH
34987: LD_INT 14
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: ST_TO_ADDR
34994: GO 35451
34996: LD_INT 92
34998: DOUBLE
34999: EQUAL
35000: IFTRUE 35004
35002: GO 35030
35004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35005: LD_ADDR_VAR 0 3
35009: PUSH
35010: LD_INT 11
35012: PUSH
35013: LD_INT 12
35015: PUSH
35016: LD_INT 13
35018: PUSH
35019: LD_INT 14
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: ST_TO_ADDR
35028: GO 35451
35030: LD_INT 28
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35056
35038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 13
35046: PUSH
35047: LD_INT 14
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: ST_TO_ADDR
35054: GO 35451
35056: LD_INT 29
35058: DOUBLE
35059: EQUAL
35060: IFTRUE 35064
35062: GO 35082
35064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35065: LD_ADDR_VAR 0 3
35069: PUSH
35070: LD_INT 13
35072: PUSH
35073: LD_INT 14
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: ST_TO_ADDR
35080: GO 35451
35082: LD_INT 31
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35108
35090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_INT 13
35098: PUSH
35099: LD_INT 14
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: ST_TO_ADDR
35106: GO 35451
35108: LD_INT 26
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35134
35116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35117: LD_ADDR_VAR 0 3
35121: PUSH
35122: LD_INT 13
35124: PUSH
35125: LD_INT 14
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: ST_TO_ADDR
35132: GO 35451
35134: LD_INT 42
35136: DOUBLE
35137: EQUAL
35138: IFTRUE 35142
35140: GO 35168
35142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35143: LD_ADDR_VAR 0 3
35147: PUSH
35148: LD_INT 21
35150: PUSH
35151: LD_INT 22
35153: PUSH
35154: LD_INT 23
35156: PUSH
35157: LD_INT 24
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
35166: GO 35451
35168: LD_INT 43
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35176
35174: GO 35202
35176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35177: LD_ADDR_VAR 0 3
35181: PUSH
35182: LD_INT 21
35184: PUSH
35185: LD_INT 22
35187: PUSH
35188: LD_INT 23
35190: PUSH
35191: LD_INT 24
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: ST_TO_ADDR
35200: GO 35451
35202: LD_INT 44
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35210
35208: GO 35236
35210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35211: LD_ADDR_VAR 0 3
35215: PUSH
35216: LD_INT 21
35218: PUSH
35219: LD_INT 22
35221: PUSH
35222: LD_INT 23
35224: PUSH
35225: LD_INT 24
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
35234: GO 35451
35236: LD_INT 45
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35270
35244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35245: LD_ADDR_VAR 0 3
35249: PUSH
35250: LD_INT 21
35252: PUSH
35253: LD_INT 22
35255: PUSH
35256: LD_INT 23
35258: PUSH
35259: LD_INT 24
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
35268: GO 35451
35270: LD_INT 49
35272: DOUBLE
35273: EQUAL
35274: IFTRUE 35278
35276: GO 35304
35278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35279: LD_ADDR_VAR 0 3
35283: PUSH
35284: LD_INT 21
35286: PUSH
35287: LD_INT 22
35289: PUSH
35290: LD_INT 23
35292: PUSH
35293: LD_INT 24
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: ST_TO_ADDR
35302: GO 35451
35304: LD_INT 51
35306: DOUBLE
35307: EQUAL
35308: IFTRUE 35312
35310: GO 35338
35312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_INT 21
35320: PUSH
35321: LD_INT 22
35323: PUSH
35324: LD_INT 23
35326: PUSH
35327: LD_INT 24
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: ST_TO_ADDR
35336: GO 35451
35338: LD_INT 52
35340: DOUBLE
35341: EQUAL
35342: IFTRUE 35346
35344: GO 35372
35346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35347: LD_ADDR_VAR 0 3
35351: PUSH
35352: LD_INT 21
35354: PUSH
35355: LD_INT 22
35357: PUSH
35358: LD_INT 23
35360: PUSH
35361: LD_INT 24
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: ST_TO_ADDR
35370: GO 35451
35372: LD_INT 53
35374: DOUBLE
35375: EQUAL
35376: IFTRUE 35380
35378: GO 35398
35380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_INT 23
35388: PUSH
35389: LD_INT 24
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: ST_TO_ADDR
35396: GO 35451
35398: LD_INT 46
35400: DOUBLE
35401: EQUAL
35402: IFTRUE 35406
35404: GO 35424
35406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_INT 23
35414: PUSH
35415: LD_INT 24
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: ST_TO_ADDR
35422: GO 35451
35424: LD_INT 47
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35432
35430: GO 35450
35432: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35433: LD_ADDR_VAR 0 3
35437: PUSH
35438: LD_INT 23
35440: PUSH
35441: LD_INT 24
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: ST_TO_ADDR
35448: GO 35451
35450: POP
// result := ( chassis in result ) ;
35451: LD_ADDR_VAR 0 3
35455: PUSH
35456: LD_VAR 0 1
35460: PUSH
35461: LD_VAR 0 3
35465: IN
35466: ST_TO_ADDR
// end ;
35467: LD_VAR 0 3
35471: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35472: LD_INT 0
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
// result := array ;
35481: LD_ADDR_VAR 0 5
35485: PUSH
35486: LD_VAR 0 1
35490: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35491: LD_VAR 0 1
35495: NOT
35496: PUSH
35497: LD_VAR 0 2
35501: NOT
35502: OR
35503: PUSH
35504: LD_VAR 0 3
35508: NOT
35509: OR
35510: PUSH
35511: LD_VAR 0 2
35515: PUSH
35516: LD_VAR 0 1
35520: GREATER
35521: OR
35522: PUSH
35523: LD_VAR 0 3
35527: PUSH
35528: LD_VAR 0 1
35532: GREATER
35533: OR
35534: IFFALSE 35538
// exit ;
35536: GO 35834
// if direction then
35538: LD_VAR 0 4
35542: IFFALSE 35606
// begin d := 1 ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_INT 1
35551: ST_TO_ADDR
// if i_from > i_to then
35552: LD_VAR 0 2
35556: PUSH
35557: LD_VAR 0 3
35561: GREATER
35562: IFFALSE 35588
// length := ( array - i_from ) + i_to else
35564: LD_ADDR_VAR 0 11
35568: PUSH
35569: LD_VAR 0 1
35573: PUSH
35574: LD_VAR 0 2
35578: MINUS
35579: PUSH
35580: LD_VAR 0 3
35584: PLUS
35585: ST_TO_ADDR
35586: GO 35604
// length := i_to - i_from ;
35588: LD_ADDR_VAR 0 11
35592: PUSH
35593: LD_VAR 0 3
35597: PUSH
35598: LD_VAR 0 2
35602: MINUS
35603: ST_TO_ADDR
// end else
35604: GO 35667
// begin d := - 1 ;
35606: LD_ADDR_VAR 0 9
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: ST_TO_ADDR
// if i_from > i_to then
35615: LD_VAR 0 2
35619: PUSH
35620: LD_VAR 0 3
35624: GREATER
35625: IFFALSE 35645
// length := i_from - i_to else
35627: LD_ADDR_VAR 0 11
35631: PUSH
35632: LD_VAR 0 2
35636: PUSH
35637: LD_VAR 0 3
35641: MINUS
35642: ST_TO_ADDR
35643: GO 35667
// length := ( array - i_to ) + i_from ;
35645: LD_ADDR_VAR 0 11
35649: PUSH
35650: LD_VAR 0 1
35654: PUSH
35655: LD_VAR 0 3
35659: MINUS
35660: PUSH
35661: LD_VAR 0 2
35665: PLUS
35666: ST_TO_ADDR
// end ; if not length then
35667: LD_VAR 0 11
35671: NOT
35672: IFFALSE 35676
// exit ;
35674: GO 35834
// tmp := array ;
35676: LD_ADDR_VAR 0 10
35680: PUSH
35681: LD_VAR 0 1
35685: ST_TO_ADDR
// for i = 1 to length do
35686: LD_ADDR_VAR 0 6
35690: PUSH
35691: DOUBLE
35692: LD_INT 1
35694: DEC
35695: ST_TO_ADDR
35696: LD_VAR 0 11
35700: PUSH
35701: FOR_TO
35702: IFFALSE 35822
// begin for j = 1 to array do
35704: LD_ADDR_VAR 0 7
35708: PUSH
35709: DOUBLE
35710: LD_INT 1
35712: DEC
35713: ST_TO_ADDR
35714: LD_VAR 0 1
35718: PUSH
35719: FOR_TO
35720: IFFALSE 35808
// begin k := j + d ;
35722: LD_ADDR_VAR 0 8
35726: PUSH
35727: LD_VAR 0 7
35731: PUSH
35732: LD_VAR 0 9
35736: PLUS
35737: ST_TO_ADDR
// if k > array then
35738: LD_VAR 0 8
35742: PUSH
35743: LD_VAR 0 1
35747: GREATER
35748: IFFALSE 35758
// k := 1 ;
35750: LD_ADDR_VAR 0 8
35754: PUSH
35755: LD_INT 1
35757: ST_TO_ADDR
// if not k then
35758: LD_VAR 0 8
35762: NOT
35763: IFFALSE 35775
// k := array ;
35765: LD_ADDR_VAR 0 8
35769: PUSH
35770: LD_VAR 0 1
35774: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35775: LD_ADDR_VAR 0 10
35779: PUSH
35780: LD_VAR 0 10
35784: PPUSH
35785: LD_VAR 0 8
35789: PPUSH
35790: LD_VAR 0 1
35794: PUSH
35795: LD_VAR 0 7
35799: ARRAY
35800: PPUSH
35801: CALL_OW 1
35805: ST_TO_ADDR
// end ;
35806: GO 35719
35808: POP
35809: POP
// array := tmp ;
35810: LD_ADDR_VAR 0 1
35814: PUSH
35815: LD_VAR 0 10
35819: ST_TO_ADDR
// end ;
35820: GO 35701
35822: POP
35823: POP
// result := array ;
35824: LD_ADDR_VAR 0 5
35828: PUSH
35829: LD_VAR 0 1
35833: ST_TO_ADDR
// end ;
35834: LD_VAR 0 5
35838: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35839: LD_INT 0
35841: PPUSH
35842: PPUSH
// result := 0 ;
35843: LD_ADDR_VAR 0 3
35847: PUSH
35848: LD_INT 0
35850: ST_TO_ADDR
// if not array or not value in array then
35851: LD_VAR 0 1
35855: NOT
35856: PUSH
35857: LD_VAR 0 2
35861: PUSH
35862: LD_VAR 0 1
35866: IN
35867: NOT
35868: OR
35869: IFFALSE 35873
// exit ;
35871: GO 35927
// for i = 1 to array do
35873: LD_ADDR_VAR 0 4
35877: PUSH
35878: DOUBLE
35879: LD_INT 1
35881: DEC
35882: ST_TO_ADDR
35883: LD_VAR 0 1
35887: PUSH
35888: FOR_TO
35889: IFFALSE 35925
// if value = array [ i ] then
35891: LD_VAR 0 2
35895: PUSH
35896: LD_VAR 0 1
35900: PUSH
35901: LD_VAR 0 4
35905: ARRAY
35906: EQUAL
35907: IFFALSE 35923
// begin result := i ;
35909: LD_ADDR_VAR 0 3
35913: PUSH
35914: LD_VAR 0 4
35918: ST_TO_ADDR
// exit ;
35919: POP
35920: POP
35921: GO 35927
// end ;
35923: GO 35888
35925: POP
35926: POP
// end ;
35927: LD_VAR 0 3
35931: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35932: LD_INT 0
35934: PPUSH
// vc_chassis := chassis ;
35935: LD_ADDR_OWVAR 37
35939: PUSH
35940: LD_VAR 0 1
35944: ST_TO_ADDR
// vc_engine := engine ;
35945: LD_ADDR_OWVAR 39
35949: PUSH
35950: LD_VAR 0 2
35954: ST_TO_ADDR
// vc_control := control ;
35955: LD_ADDR_OWVAR 38
35959: PUSH
35960: LD_VAR 0 3
35964: ST_TO_ADDR
// vc_weapon := weapon ;
35965: LD_ADDR_OWVAR 40
35969: PUSH
35970: LD_VAR 0 4
35974: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35975: LD_ADDR_OWVAR 41
35979: PUSH
35980: LD_VAR 0 5
35984: ST_TO_ADDR
// end ;
35985: LD_VAR 0 6
35989: RET
// export function WantPlant ( unit ) ; var task ; begin
35990: LD_INT 0
35992: PPUSH
35993: PPUSH
// result := false ;
35994: LD_ADDR_VAR 0 2
35998: PUSH
35999: LD_INT 0
36001: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 437
36016: ST_TO_ADDR
// if task then
36017: LD_VAR 0 3
36021: IFFALSE 36049
// if task [ 1 ] [ 1 ] = p then
36023: LD_VAR 0 3
36027: PUSH
36028: LD_INT 1
36030: ARRAY
36031: PUSH
36032: LD_INT 1
36034: ARRAY
36035: PUSH
36036: LD_STRING p
36038: EQUAL
36039: IFFALSE 36049
// result := true ;
36041: LD_ADDR_VAR 0 2
36045: PUSH
36046: LD_INT 1
36048: ST_TO_ADDR
// end ;
36049: LD_VAR 0 2
36053: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36054: LD_INT 0
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
// if pos < 1 then
36060: LD_VAR 0 2
36064: PUSH
36065: LD_INT 1
36067: LESS
36068: IFFALSE 36072
// exit ;
36070: GO 36375
// if pos = 1 then
36072: LD_VAR 0 2
36076: PUSH
36077: LD_INT 1
36079: EQUAL
36080: IFFALSE 36113
// result := Replace ( arr , pos [ 1 ] , value ) else
36082: LD_ADDR_VAR 0 4
36086: PUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_INT 1
36099: ARRAY
36100: PPUSH
36101: LD_VAR 0 3
36105: PPUSH
36106: CALL_OW 1
36110: ST_TO_ADDR
36111: GO 36375
// begin tmp := arr ;
36113: LD_ADDR_VAR 0 6
36117: PUSH
36118: LD_VAR 0 1
36122: ST_TO_ADDR
// s_arr := [ tmp ] ;
36123: LD_ADDR_VAR 0 7
36127: PUSH
36128: LD_VAR 0 6
36132: PUSH
36133: EMPTY
36134: LIST
36135: ST_TO_ADDR
// for i = 1 to pos - 1 do
36136: LD_ADDR_VAR 0 5
36140: PUSH
36141: DOUBLE
36142: LD_INT 1
36144: DEC
36145: ST_TO_ADDR
36146: LD_VAR 0 2
36150: PUSH
36151: LD_INT 1
36153: MINUS
36154: PUSH
36155: FOR_TO
36156: IFFALSE 36201
// begin tmp := tmp [ pos [ i ] ] ;
36158: LD_ADDR_VAR 0 6
36162: PUSH
36163: LD_VAR 0 6
36167: PUSH
36168: LD_VAR 0 2
36172: PUSH
36173: LD_VAR 0 5
36177: ARRAY
36178: ARRAY
36179: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36180: LD_ADDR_VAR 0 7
36184: PUSH
36185: LD_VAR 0 7
36189: PUSH
36190: LD_VAR 0 6
36194: PUSH
36195: EMPTY
36196: LIST
36197: ADD
36198: ST_TO_ADDR
// end ;
36199: GO 36155
36201: POP
36202: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36203: LD_ADDR_VAR 0 6
36207: PUSH
36208: LD_VAR 0 6
36212: PPUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_VAR 0 2
36222: ARRAY
36223: PPUSH
36224: LD_VAR 0 3
36228: PPUSH
36229: CALL_OW 1
36233: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36234: LD_ADDR_VAR 0 7
36238: PUSH
36239: LD_VAR 0 7
36243: PPUSH
36244: LD_VAR 0 7
36248: PPUSH
36249: LD_VAR 0 6
36253: PPUSH
36254: CALL_OW 1
36258: ST_TO_ADDR
// for i = s_arr downto 2 do
36259: LD_ADDR_VAR 0 5
36263: PUSH
36264: DOUBLE
36265: LD_VAR 0 7
36269: INC
36270: ST_TO_ADDR
36271: LD_INT 2
36273: PUSH
36274: FOR_DOWNTO
36275: IFFALSE 36359
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36277: LD_ADDR_VAR 0 6
36281: PUSH
36282: LD_VAR 0 7
36286: PUSH
36287: LD_VAR 0 5
36291: PUSH
36292: LD_INT 1
36294: MINUS
36295: ARRAY
36296: PPUSH
36297: LD_VAR 0 2
36301: PUSH
36302: LD_VAR 0 5
36306: PUSH
36307: LD_INT 1
36309: MINUS
36310: ARRAY
36311: PPUSH
36312: LD_VAR 0 7
36316: PUSH
36317: LD_VAR 0 5
36321: ARRAY
36322: PPUSH
36323: CALL_OW 1
36327: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36328: LD_ADDR_VAR 0 7
36332: PUSH
36333: LD_VAR 0 7
36337: PPUSH
36338: LD_VAR 0 5
36342: PUSH
36343: LD_INT 1
36345: MINUS
36346: PPUSH
36347: LD_VAR 0 6
36351: PPUSH
36352: CALL_OW 1
36356: ST_TO_ADDR
// end ;
36357: GO 36274
36359: POP
36360: POP
// result := s_arr [ 1 ] ;
36361: LD_ADDR_VAR 0 4
36365: PUSH
36366: LD_VAR 0 7
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: ST_TO_ADDR
// end ; end ;
36375: LD_VAR 0 4
36379: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36380: LD_INT 0
36382: PPUSH
36383: PPUSH
// if not list then
36384: LD_VAR 0 1
36388: NOT
36389: IFFALSE 36393
// exit ;
36391: GO 36484
// i := list [ pos1 ] ;
36393: LD_ADDR_VAR 0 5
36397: PUSH
36398: LD_VAR 0 1
36402: PUSH
36403: LD_VAR 0 2
36407: ARRAY
36408: ST_TO_ADDR
// if not i then
36409: LD_VAR 0 5
36413: NOT
36414: IFFALSE 36418
// exit ;
36416: GO 36484
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36418: LD_ADDR_VAR 0 1
36422: PUSH
36423: LD_VAR 0 1
36427: PPUSH
36428: LD_VAR 0 2
36432: PPUSH
36433: LD_VAR 0 1
36437: PUSH
36438: LD_VAR 0 3
36442: ARRAY
36443: PPUSH
36444: CALL_OW 1
36448: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36449: LD_ADDR_VAR 0 1
36453: PUSH
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_VAR 0 3
36463: PPUSH
36464: LD_VAR 0 5
36468: PPUSH
36469: CALL_OW 1
36473: ST_TO_ADDR
// result := list ;
36474: LD_ADDR_VAR 0 4
36478: PUSH
36479: LD_VAR 0 1
36483: ST_TO_ADDR
// end ;
36484: LD_VAR 0 4
36488: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36489: LD_INT 0
36491: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_VAR 0 1
36501: PPUSH
36502: CALL_OW 250
36506: PPUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL_OW 251
36516: PPUSH
36517: LD_VAR 0 2
36521: PPUSH
36522: LD_VAR 0 3
36526: PPUSH
36527: LD_VAR 0 4
36531: PPUSH
36532: CALL 36542 0 5
36536: ST_TO_ADDR
// end ;
36537: LD_VAR 0 5
36541: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36542: LD_INT 0
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
// if not list then
36548: LD_VAR 0 3
36552: NOT
36553: IFFALSE 36557
// exit ;
36555: GO 36945
// result := [ ] ;
36557: LD_ADDR_VAR 0 6
36561: PUSH
36562: EMPTY
36563: ST_TO_ADDR
// for i in list do
36564: LD_ADDR_VAR 0 7
36568: PUSH
36569: LD_VAR 0 3
36573: PUSH
36574: FOR_IN
36575: IFFALSE 36777
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36577: LD_ADDR_VAR 0 9
36581: PUSH
36582: LD_VAR 0 7
36586: PPUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: LD_VAR 0 2
36596: PPUSH
36597: CALL_OW 297
36601: ST_TO_ADDR
// if not result then
36602: LD_VAR 0 6
36606: NOT
36607: IFFALSE 36633
// result := [ [ i , tmp ] ] else
36609: LD_ADDR_VAR 0 6
36613: PUSH
36614: LD_VAR 0 7
36618: PUSH
36619: LD_VAR 0 9
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: ST_TO_ADDR
36631: GO 36775
// begin if result [ result ] [ 2 ] < tmp then
36633: LD_VAR 0 6
36637: PUSH
36638: LD_VAR 0 6
36642: ARRAY
36643: PUSH
36644: LD_INT 2
36646: ARRAY
36647: PUSH
36648: LD_VAR 0 9
36652: LESS
36653: IFFALSE 36695
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36655: LD_ADDR_VAR 0 6
36659: PUSH
36660: LD_VAR 0 6
36664: PPUSH
36665: LD_VAR 0 6
36669: PUSH
36670: LD_INT 1
36672: PLUS
36673: PPUSH
36674: LD_VAR 0 7
36678: PUSH
36679: LD_VAR 0 9
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PPUSH
36688: CALL_OW 2
36692: ST_TO_ADDR
36693: GO 36775
// for j = 1 to result do
36695: LD_ADDR_VAR 0 8
36699: PUSH
36700: DOUBLE
36701: LD_INT 1
36703: DEC
36704: ST_TO_ADDR
36705: LD_VAR 0 6
36709: PUSH
36710: FOR_TO
36711: IFFALSE 36773
// begin if tmp < result [ j ] [ 2 ] then
36713: LD_VAR 0 9
36717: PUSH
36718: LD_VAR 0 6
36722: PUSH
36723: LD_VAR 0 8
36727: ARRAY
36728: PUSH
36729: LD_INT 2
36731: ARRAY
36732: LESS
36733: IFFALSE 36771
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36735: LD_ADDR_VAR 0 6
36739: PUSH
36740: LD_VAR 0 6
36744: PPUSH
36745: LD_VAR 0 8
36749: PPUSH
36750: LD_VAR 0 7
36754: PUSH
36755: LD_VAR 0 9
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PPUSH
36764: CALL_OW 2
36768: ST_TO_ADDR
// break ;
36769: GO 36773
// end ; end ;
36771: GO 36710
36773: POP
36774: POP
// end ; end ;
36775: GO 36574
36777: POP
36778: POP
// if result and not asc then
36779: LD_VAR 0 6
36783: PUSH
36784: LD_VAR 0 4
36788: NOT
36789: AND
36790: IFFALSE 36865
// begin tmp := result ;
36792: LD_ADDR_VAR 0 9
36796: PUSH
36797: LD_VAR 0 6
36801: ST_TO_ADDR
// for i = tmp downto 1 do
36802: LD_ADDR_VAR 0 7
36806: PUSH
36807: DOUBLE
36808: LD_VAR 0 9
36812: INC
36813: ST_TO_ADDR
36814: LD_INT 1
36816: PUSH
36817: FOR_DOWNTO
36818: IFFALSE 36863
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36820: LD_ADDR_VAR 0 6
36824: PUSH
36825: LD_VAR 0 6
36829: PPUSH
36830: LD_VAR 0 9
36834: PUSH
36835: LD_VAR 0 7
36839: MINUS
36840: PUSH
36841: LD_INT 1
36843: PLUS
36844: PPUSH
36845: LD_VAR 0 9
36849: PUSH
36850: LD_VAR 0 7
36854: ARRAY
36855: PPUSH
36856: CALL_OW 1
36860: ST_TO_ADDR
36861: GO 36817
36863: POP
36864: POP
// end ; tmp := [ ] ;
36865: LD_ADDR_VAR 0 9
36869: PUSH
36870: EMPTY
36871: ST_TO_ADDR
// if mode then
36872: LD_VAR 0 5
36876: IFFALSE 36945
// begin for i = 1 to result do
36878: LD_ADDR_VAR 0 7
36882: PUSH
36883: DOUBLE
36884: LD_INT 1
36886: DEC
36887: ST_TO_ADDR
36888: LD_VAR 0 6
36892: PUSH
36893: FOR_TO
36894: IFFALSE 36933
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_VAR 0 9
36905: PPUSH
36906: LD_VAR 0 7
36910: PPUSH
36911: LD_VAR 0 6
36915: PUSH
36916: LD_VAR 0 7
36920: ARRAY
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PPUSH
36926: CALL_OW 1
36930: ST_TO_ADDR
36931: GO 36893
36933: POP
36934: POP
// result := tmp ;
36935: LD_ADDR_VAR 0 6
36939: PUSH
36940: LD_VAR 0 9
36944: ST_TO_ADDR
// end ; end ;
36945: LD_VAR 0 6
36949: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36950: LD_INT 0
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// if not x or not y then
36980: LD_VAR 0 2
36984: NOT
36985: PUSH
36986: LD_VAR 0 3
36990: NOT
36991: OR
36992: IFFALSE 36996
// exit ;
36994: GO 38646
// if not range then
36996: LD_VAR 0 4
37000: NOT
37001: IFFALSE 37011
// range := 10 ;
37003: LD_ADDR_VAR 0 4
37007: PUSH
37008: LD_INT 10
37010: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37011: LD_ADDR_VAR 0 8
37015: PUSH
37016: LD_INT 81
37018: PUSH
37019: LD_VAR 0 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 92
37030: PUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_VAR 0 3
37040: PUSH
37041: LD_VAR 0 4
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: LD_INT 21
37057: PUSH
37058: LD_INT 3
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: PPUSH
37074: CALL_OW 69
37078: ST_TO_ADDR
// if not tmp then
37079: LD_VAR 0 8
37083: NOT
37084: IFFALSE 37088
// exit ;
37086: GO 38646
// for i in tmp do
37088: LD_ADDR_VAR 0 6
37092: PUSH
37093: LD_VAR 0 8
37097: PUSH
37098: FOR_IN
37099: IFFALSE 38621
// begin points := [ 0 , 0 , 0 ] ;
37101: LD_ADDR_VAR 0 9
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: ST_TO_ADDR
// bpoints := 1 ;
37120: LD_ADDR_VAR 0 10
37124: PUSH
37125: LD_INT 1
37127: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37128: LD_VAR 0 6
37132: PPUSH
37133: CALL_OW 247
37137: PUSH
37138: LD_INT 1
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37724
37146: POP
// begin if GetClass ( i ) = 1 then
37147: LD_VAR 0 6
37151: PPUSH
37152: CALL_OW 257
37156: PUSH
37157: LD_INT 1
37159: EQUAL
37160: IFFALSE 37181
// points := [ 10 , 5 , 3 ] ;
37162: LD_ADDR_VAR 0 9
37166: PUSH
37167: LD_INT 10
37169: PUSH
37170: LD_INT 5
37172: PUSH
37173: LD_INT 3
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37181: LD_VAR 0 6
37185: PPUSH
37186: CALL_OW 257
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: LD_INT 4
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: IN
37205: IFFALSE 37226
// points := [ 3 , 2 , 1 ] ;
37207: LD_ADDR_VAR 0 9
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37226: LD_VAR 0 6
37230: PPUSH
37231: CALL_OW 257
37235: PUSH
37236: LD_INT 5
37238: EQUAL
37239: IFFALSE 37260
// points := [ 130 , 5 , 2 ] ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_INT 130
37248: PUSH
37249: LD_INT 5
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37260: LD_VAR 0 6
37264: PPUSH
37265: CALL_OW 257
37269: PUSH
37270: LD_INT 8
37272: EQUAL
37273: IFFALSE 37294
// points := [ 35 , 35 , 30 ] ;
37275: LD_ADDR_VAR 0 9
37279: PUSH
37280: LD_INT 35
37282: PUSH
37283: LD_INT 35
37285: PUSH
37286: LD_INT 30
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37294: LD_VAR 0 6
37298: PPUSH
37299: CALL_OW 257
37303: PUSH
37304: LD_INT 9
37306: EQUAL
37307: IFFALSE 37328
// points := [ 20 , 55 , 40 ] ;
37309: LD_ADDR_VAR 0 9
37313: PUSH
37314: LD_INT 20
37316: PUSH
37317: LD_INT 55
37319: PUSH
37320: LD_INT 40
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37328: LD_VAR 0 6
37332: PPUSH
37333: CALL_OW 257
37337: PUSH
37338: LD_INT 12
37340: PUSH
37341: LD_INT 16
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: IN
37348: IFFALSE 37369
// points := [ 5 , 3 , 2 ] ;
37350: LD_ADDR_VAR 0 9
37354: PUSH
37355: LD_INT 5
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37369: LD_VAR 0 6
37373: PPUSH
37374: CALL_OW 257
37378: PUSH
37379: LD_INT 17
37381: EQUAL
37382: IFFALSE 37403
// points := [ 100 , 50 , 75 ] ;
37384: LD_ADDR_VAR 0 9
37388: PUSH
37389: LD_INT 100
37391: PUSH
37392: LD_INT 50
37394: PUSH
37395: LD_INT 75
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37403: LD_VAR 0 6
37407: PPUSH
37408: CALL_OW 257
37412: PUSH
37413: LD_INT 15
37415: EQUAL
37416: IFFALSE 37437
// points := [ 10 , 5 , 3 ] ;
37418: LD_ADDR_VAR 0 9
37422: PUSH
37423: LD_INT 10
37425: PUSH
37426: LD_INT 5
37428: PUSH
37429: LD_INT 3
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37437: LD_VAR 0 6
37441: PPUSH
37442: CALL_OW 257
37446: PUSH
37447: LD_INT 14
37449: EQUAL
37450: IFFALSE 37471
// points := [ 10 , 0 , 0 ] ;
37452: LD_ADDR_VAR 0 9
37456: PUSH
37457: LD_INT 10
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37471: LD_VAR 0 6
37475: PPUSH
37476: CALL_OW 257
37480: PUSH
37481: LD_INT 11
37483: EQUAL
37484: IFFALSE 37505
// points := [ 30 , 10 , 5 ] ;
37486: LD_ADDR_VAR 0 9
37490: PUSH
37491: LD_INT 30
37493: PUSH
37494: LD_INT 10
37496: PUSH
37497: LD_INT 5
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37505: LD_VAR 0 1
37509: PPUSH
37510: LD_INT 5
37512: PPUSH
37513: CALL_OW 321
37517: PUSH
37518: LD_INT 2
37520: EQUAL
37521: IFFALSE 37538
// bpoints := bpoints * 1.8 ;
37523: LD_ADDR_VAR 0 10
37527: PUSH
37528: LD_VAR 0 10
37532: PUSH
37533: LD_REAL  1.80000000000000E+0000
37536: MUL
37537: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37538: LD_VAR 0 6
37542: PPUSH
37543: CALL_OW 257
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 2
37553: PUSH
37554: LD_INT 3
37556: PUSH
37557: LD_INT 4
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: IN
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: LD_INT 51
37574: PPUSH
37575: CALL_OW 321
37579: PUSH
37580: LD_INT 2
37582: EQUAL
37583: AND
37584: IFFALSE 37601
// bpoints := bpoints * 1.2 ;
37586: LD_ADDR_VAR 0 10
37590: PUSH
37591: LD_VAR 0 10
37595: PUSH
37596: LD_REAL  1.20000000000000E+0000
37599: MUL
37600: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37601: LD_VAR 0 6
37605: PPUSH
37606: CALL_OW 257
37610: PUSH
37611: LD_INT 5
37613: PUSH
37614: LD_INT 7
37616: PUSH
37617: LD_INT 9
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: IN
37625: PUSH
37626: LD_VAR 0 1
37630: PPUSH
37631: LD_INT 52
37633: PPUSH
37634: CALL_OW 321
37638: PUSH
37639: LD_INT 2
37641: EQUAL
37642: AND
37643: IFFALSE 37660
// bpoints := bpoints * 1.5 ;
37645: LD_ADDR_VAR 0 10
37649: PUSH
37650: LD_VAR 0 10
37654: PUSH
37655: LD_REAL  1.50000000000000E+0000
37658: MUL
37659: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37660: LD_VAR 0 1
37664: PPUSH
37665: LD_INT 66
37667: PPUSH
37668: CALL_OW 321
37672: PUSH
37673: LD_INT 2
37675: EQUAL
37676: IFFALSE 37693
// bpoints := bpoints * 1.1 ;
37678: LD_ADDR_VAR 0 10
37682: PUSH
37683: LD_VAR 0 10
37687: PUSH
37688: LD_REAL  1.10000000000000E+0000
37691: MUL
37692: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37693: LD_ADDR_VAR 0 10
37697: PUSH
37698: LD_VAR 0 10
37702: PUSH
37703: LD_VAR 0 6
37707: PPUSH
37708: LD_INT 1
37710: PPUSH
37711: CALL_OW 259
37715: PUSH
37716: LD_REAL  1.15000000000000E+0000
37719: MUL
37720: MUL
37721: ST_TO_ADDR
// end ; unit_vehicle :
37722: GO 38550
37724: LD_INT 2
37726: DOUBLE
37727: EQUAL
37728: IFTRUE 37732
37730: GO 38538
37732: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37733: LD_VAR 0 6
37737: PPUSH
37738: CALL_OW 264
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 42
37748: PUSH
37749: LD_INT 24
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: IN
37757: IFFALSE 37778
// points := [ 25 , 5 , 3 ] ;
37759: LD_ADDR_VAR 0 9
37763: PUSH
37764: LD_INT 25
37766: PUSH
37767: LD_INT 5
37769: PUSH
37770: LD_INT 3
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37778: LD_VAR 0 6
37782: PPUSH
37783: CALL_OW 264
37787: PUSH
37788: LD_INT 4
37790: PUSH
37791: LD_INT 43
37793: PUSH
37794: LD_INT 25
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: IN
37802: IFFALSE 37823
// points := [ 40 , 15 , 5 ] ;
37804: LD_ADDR_VAR 0 9
37808: PUSH
37809: LD_INT 40
37811: PUSH
37812: LD_INT 15
37814: PUSH
37815: LD_INT 5
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37823: LD_VAR 0 6
37827: PPUSH
37828: CALL_OW 264
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: LD_INT 23
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: IN
37843: IFFALSE 37864
// points := [ 7 , 25 , 8 ] ;
37845: LD_ADDR_VAR 0 9
37849: PUSH
37850: LD_INT 7
37852: PUSH
37853: LD_INT 25
37855: PUSH
37856: LD_INT 8
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37864: LD_VAR 0 6
37868: PPUSH
37869: CALL_OW 264
37873: PUSH
37874: LD_INT 5
37876: PUSH
37877: LD_INT 27
37879: PUSH
37880: LD_INT 44
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: IN
37888: IFFALSE 37909
// points := [ 14 , 50 , 16 ] ;
37890: LD_ADDR_VAR 0 9
37894: PUSH
37895: LD_INT 14
37897: PUSH
37898: LD_INT 50
37900: PUSH
37901: LD_INT 16
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37909: LD_VAR 0 6
37913: PPUSH
37914: CALL_OW 264
37918: PUSH
37919: LD_INT 6
37921: PUSH
37922: LD_INT 46
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: IN
37929: IFFALSE 37950
// points := [ 32 , 120 , 70 ] ;
37931: LD_ADDR_VAR 0 9
37935: PUSH
37936: LD_INT 32
37938: PUSH
37939: LD_INT 120
37941: PUSH
37942: LD_INT 70
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37950: LD_VAR 0 6
37954: PPUSH
37955: CALL_OW 264
37959: PUSH
37960: LD_INT 7
37962: PUSH
37963: LD_INT 28
37965: PUSH
37966: LD_INT 45
37968: PUSH
37969: LD_INT 92
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: IN
37978: IFFALSE 37999
// points := [ 35 , 20 , 45 ] ;
37980: LD_ADDR_VAR 0 9
37984: PUSH
37985: LD_INT 35
37987: PUSH
37988: LD_INT 20
37990: PUSH
37991: LD_INT 45
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37999: LD_VAR 0 6
38003: PPUSH
38004: CALL_OW 264
38008: PUSH
38009: LD_INT 47
38011: PUSH
38012: EMPTY
38013: LIST
38014: IN
38015: IFFALSE 38036
// points := [ 67 , 45 , 75 ] ;
38017: LD_ADDR_VAR 0 9
38021: PUSH
38022: LD_INT 67
38024: PUSH
38025: LD_INT 45
38027: PUSH
38028: LD_INT 75
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38036: LD_VAR 0 6
38040: PPUSH
38041: CALL_OW 264
38045: PUSH
38046: LD_INT 26
38048: PUSH
38049: EMPTY
38050: LIST
38051: IN
38052: IFFALSE 38073
// points := [ 120 , 30 , 80 ] ;
38054: LD_ADDR_VAR 0 9
38058: PUSH
38059: LD_INT 120
38061: PUSH
38062: LD_INT 30
38064: PUSH
38065: LD_INT 80
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38073: LD_VAR 0 6
38077: PPUSH
38078: CALL_OW 264
38082: PUSH
38083: LD_INT 22
38085: PUSH
38086: EMPTY
38087: LIST
38088: IN
38089: IFFALSE 38110
// points := [ 40 , 1 , 1 ] ;
38091: LD_ADDR_VAR 0 9
38095: PUSH
38096: LD_INT 40
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38110: LD_VAR 0 6
38114: PPUSH
38115: CALL_OW 264
38119: PUSH
38120: LD_INT 29
38122: PUSH
38123: EMPTY
38124: LIST
38125: IN
38126: IFFALSE 38147
// points := [ 70 , 200 , 400 ] ;
38128: LD_ADDR_VAR 0 9
38132: PUSH
38133: LD_INT 70
38135: PUSH
38136: LD_INT 200
38138: PUSH
38139: LD_INT 400
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38147: LD_VAR 0 6
38151: PPUSH
38152: CALL_OW 264
38156: PUSH
38157: LD_INT 14
38159: PUSH
38160: LD_INT 53
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: IN
38167: IFFALSE 38188
// points := [ 40 , 10 , 20 ] ;
38169: LD_ADDR_VAR 0 9
38173: PUSH
38174: LD_INT 40
38176: PUSH
38177: LD_INT 10
38179: PUSH
38180: LD_INT 20
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38188: LD_VAR 0 6
38192: PPUSH
38193: CALL_OW 264
38197: PUSH
38198: LD_INT 9
38200: PUSH
38201: EMPTY
38202: LIST
38203: IN
38204: IFFALSE 38225
// points := [ 5 , 70 , 20 ] ;
38206: LD_ADDR_VAR 0 9
38210: PUSH
38211: LD_INT 5
38213: PUSH
38214: LD_INT 70
38216: PUSH
38217: LD_INT 20
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38225: LD_VAR 0 6
38229: PPUSH
38230: CALL_OW 264
38234: PUSH
38235: LD_INT 10
38237: PUSH
38238: EMPTY
38239: LIST
38240: IN
38241: IFFALSE 38262
// points := [ 35 , 110 , 70 ] ;
38243: LD_ADDR_VAR 0 9
38247: PUSH
38248: LD_INT 35
38250: PUSH
38251: LD_INT 110
38253: PUSH
38254: LD_INT 70
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38262: LD_VAR 0 6
38266: PPUSH
38267: CALL_OW 265
38271: PUSH
38272: LD_INT 25
38274: EQUAL
38275: IFFALSE 38296
// points := [ 80 , 65 , 100 ] ;
38277: LD_ADDR_VAR 0 9
38281: PUSH
38282: LD_INT 80
38284: PUSH
38285: LD_INT 65
38287: PUSH
38288: LD_INT 100
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38296: LD_VAR 0 6
38300: PPUSH
38301: CALL_OW 263
38305: PUSH
38306: LD_INT 1
38308: EQUAL
38309: IFFALSE 38344
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38311: LD_ADDR_VAR 0 10
38315: PUSH
38316: LD_VAR 0 10
38320: PUSH
38321: LD_VAR 0 6
38325: PPUSH
38326: CALL_OW 311
38330: PPUSH
38331: LD_INT 3
38333: PPUSH
38334: CALL_OW 259
38338: PUSH
38339: LD_INT 4
38341: MUL
38342: MUL
38343: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38344: LD_VAR 0 6
38348: PPUSH
38349: CALL_OW 263
38353: PUSH
38354: LD_INT 2
38356: EQUAL
38357: IFFALSE 38408
// begin j := IsControledBy ( i ) ;
38359: LD_ADDR_VAR 0 7
38363: PUSH
38364: LD_VAR 0 6
38368: PPUSH
38369: CALL_OW 312
38373: ST_TO_ADDR
// if j then
38374: LD_VAR 0 7
38378: IFFALSE 38408
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38380: LD_ADDR_VAR 0 10
38384: PUSH
38385: LD_VAR 0 10
38389: PUSH
38390: LD_VAR 0 7
38394: PPUSH
38395: LD_INT 3
38397: PPUSH
38398: CALL_OW 259
38402: PUSH
38403: LD_INT 3
38405: MUL
38406: MUL
38407: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38408: LD_VAR 0 6
38412: PPUSH
38413: CALL_OW 264
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: LD_INT 6
38423: PUSH
38424: LD_INT 46
38426: PUSH
38427: LD_INT 44
38429: PUSH
38430: LD_INT 47
38432: PUSH
38433: LD_INT 45
38435: PUSH
38436: LD_INT 28
38438: PUSH
38439: LD_INT 7
38441: PUSH
38442: LD_INT 27
38444: PUSH
38445: LD_INT 29
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: IN
38460: PUSH
38461: LD_VAR 0 1
38465: PPUSH
38466: LD_INT 52
38468: PPUSH
38469: CALL_OW 321
38473: PUSH
38474: LD_INT 2
38476: EQUAL
38477: AND
38478: IFFALSE 38495
// bpoints := bpoints * 1.2 ;
38480: LD_ADDR_VAR 0 10
38484: PUSH
38485: LD_VAR 0 10
38489: PUSH
38490: LD_REAL  1.20000000000000E+0000
38493: MUL
38494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38495: LD_VAR 0 6
38499: PPUSH
38500: CALL_OW 264
38504: PUSH
38505: LD_INT 6
38507: PUSH
38508: LD_INT 46
38510: PUSH
38511: LD_INT 47
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: IN
38519: IFFALSE 38536
// bpoints := bpoints * 1.2 ;
38521: LD_ADDR_VAR 0 10
38525: PUSH
38526: LD_VAR 0 10
38530: PUSH
38531: LD_REAL  1.20000000000000E+0000
38534: MUL
38535: ST_TO_ADDR
// end ; unit_building :
38536: GO 38550
38538: LD_INT 3
38540: DOUBLE
38541: EQUAL
38542: IFTRUE 38546
38544: GO 38549
38546: POP
// ; end ;
38547: GO 38550
38549: POP
// for j = 1 to 3 do
38550: LD_ADDR_VAR 0 7
38554: PUSH
38555: DOUBLE
38556: LD_INT 1
38558: DEC
38559: ST_TO_ADDR
38560: LD_INT 3
38562: PUSH
38563: FOR_TO
38564: IFFALSE 38617
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38566: LD_ADDR_VAR 0 5
38570: PUSH
38571: LD_VAR 0 5
38575: PPUSH
38576: LD_VAR 0 7
38580: PPUSH
38581: LD_VAR 0 5
38585: PUSH
38586: LD_VAR 0 7
38590: ARRAY
38591: PUSH
38592: LD_VAR 0 9
38596: PUSH
38597: LD_VAR 0 7
38601: ARRAY
38602: PUSH
38603: LD_VAR 0 10
38607: MUL
38608: PLUS
38609: PPUSH
38610: CALL_OW 1
38614: ST_TO_ADDR
38615: GO 38563
38617: POP
38618: POP
// end ;
38619: GO 37098
38621: POP
38622: POP
// result := Replace ( result , 4 , tmp ) ;
38623: LD_ADDR_VAR 0 5
38627: PUSH
38628: LD_VAR 0 5
38632: PPUSH
38633: LD_INT 4
38635: PPUSH
38636: LD_VAR 0 8
38640: PPUSH
38641: CALL_OW 1
38645: ST_TO_ADDR
// end ;
38646: LD_VAR 0 5
38650: RET
// export function DangerAtRange ( unit , range ) ; begin
38651: LD_INT 0
38653: PPUSH
// if not unit then
38654: LD_VAR 0 1
38658: NOT
38659: IFFALSE 38663
// exit ;
38661: GO 38708
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38663: LD_ADDR_VAR 0 3
38667: PUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: CALL_OW 255
38677: PPUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 250
38687: PPUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 251
38697: PPUSH
38698: LD_VAR 0 2
38702: PPUSH
38703: CALL 36950 0 4
38707: ST_TO_ADDR
// end ;
38708: LD_VAR 0 3
38712: RET
// export function DangerInArea ( side , area ) ; begin
38713: LD_INT 0
38715: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38716: LD_ADDR_VAR 0 3
38720: PUSH
38721: LD_VAR 0 2
38725: PPUSH
38726: LD_INT 81
38728: PUSH
38729: LD_VAR 0 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PPUSH
38738: CALL_OW 70
38742: ST_TO_ADDR
// end ;
38743: LD_VAR 0 3
38747: RET
// export function IsExtension ( b ) ; begin
38748: LD_INT 0
38750: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38751: LD_ADDR_VAR 0 2
38755: PUSH
38756: LD_VAR 0 1
38760: PUSH
38761: LD_INT 23
38763: PUSH
38764: LD_INT 20
38766: PUSH
38767: LD_INT 22
38769: PUSH
38770: LD_INT 17
38772: PUSH
38773: LD_INT 24
38775: PUSH
38776: LD_INT 21
38778: PUSH
38779: LD_INT 19
38781: PUSH
38782: LD_INT 16
38784: PUSH
38785: LD_INT 25
38787: PUSH
38788: LD_INT 18
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: IN
38803: ST_TO_ADDR
// end ;
38804: LD_VAR 0 2
38808: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38809: LD_INT 0
38811: PPUSH
38812: PPUSH
38813: PPUSH
// result := [ ] ;
38814: LD_ADDR_VAR 0 4
38818: PUSH
38819: EMPTY
38820: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: LD_INT 21
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PPUSH
38841: CALL_OW 70
38845: ST_TO_ADDR
// if not tmp then
38846: LD_VAR 0 5
38850: NOT
38851: IFFALSE 38855
// exit ;
38853: GO 38919
// if checkLink then
38855: LD_VAR 0 3
38859: IFFALSE 38909
// begin for i in tmp do
38861: LD_ADDR_VAR 0 6
38865: PUSH
38866: LD_VAR 0 5
38870: PUSH
38871: FOR_IN
38872: IFFALSE 38907
// if GetBase ( i ) <> base then
38874: LD_VAR 0 6
38878: PPUSH
38879: CALL_OW 274
38883: PUSH
38884: LD_VAR 0 1
38888: NONEQUAL
38889: IFFALSE 38905
// ComLinkToBase ( base , i ) ;
38891: LD_VAR 0 1
38895: PPUSH
38896: LD_VAR 0 6
38900: PPUSH
38901: CALL_OW 169
38905: GO 38871
38907: POP
38908: POP
// end ; result := tmp ;
38909: LD_ADDR_VAR 0 4
38913: PUSH
38914: LD_VAR 0 5
38918: ST_TO_ADDR
// end ;
38919: LD_VAR 0 4
38923: RET
// export function ComComplete ( units , b ) ; var i ; begin
38924: LD_INT 0
38926: PPUSH
38927: PPUSH
// if not units then
38928: LD_VAR 0 1
38932: NOT
38933: IFFALSE 38937
// exit ;
38935: GO 39027
// for i in units do
38937: LD_ADDR_VAR 0 4
38941: PUSH
38942: LD_VAR 0 1
38946: PUSH
38947: FOR_IN
38948: IFFALSE 39025
// if BuildingStatus ( b ) = bs_build then
38950: LD_VAR 0 2
38954: PPUSH
38955: CALL_OW 461
38959: PUSH
38960: LD_INT 1
38962: EQUAL
38963: IFFALSE 39023
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38965: LD_VAR 0 4
38969: PPUSH
38970: LD_STRING h
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: CALL_OW 250
38982: PUSH
38983: LD_VAR 0 2
38987: PPUSH
38988: CALL_OW 251
38992: PUSH
38993: LD_VAR 0 2
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: PPUSH
39019: CALL_OW 446
39023: GO 38947
39025: POP
39026: POP
// end ;
39027: LD_VAR 0 3
39031: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39032: LD_INT 0
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39040: LD_VAR 0 1
39044: NOT
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 263
39055: PUSH
39056: LD_INT 2
39058: NONEQUAL
39059: OR
39060: IFFALSE 39064
// exit ;
39062: GO 39380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39064: LD_ADDR_VAR 0 6
39068: PUSH
39069: LD_INT 22
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 255
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 30
39091: PUSH
39092: LD_INT 36
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 34
39101: PUSH
39102: LD_INT 31
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PPUSH
39118: CALL_OW 69
39122: ST_TO_ADDR
// if not tmp then
39123: LD_VAR 0 6
39127: NOT
39128: IFFALSE 39132
// exit ;
39130: GO 39380
// result := [ ] ;
39132: LD_ADDR_VAR 0 2
39136: PUSH
39137: EMPTY
39138: ST_TO_ADDR
// for i in tmp do
39139: LD_ADDR_VAR 0 3
39143: PUSH
39144: LD_VAR 0 6
39148: PUSH
39149: FOR_IN
39150: IFFALSE 39221
// begin t := UnitsInside ( i ) ;
39152: LD_ADDR_VAR 0 4
39156: PUSH
39157: LD_VAR 0 3
39161: PPUSH
39162: CALL_OW 313
39166: ST_TO_ADDR
// if t then
39167: LD_VAR 0 4
39171: IFFALSE 39219
// for j in t do
39173: LD_ADDR_VAR 0 7
39177: PUSH
39178: LD_VAR 0 4
39182: PUSH
39183: FOR_IN
39184: IFFALSE 39217
// result := Replace ( result , result + 1 , j ) ;
39186: LD_ADDR_VAR 0 2
39190: PUSH
39191: LD_VAR 0 2
39195: PPUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 1
39203: PLUS
39204: PPUSH
39205: LD_VAR 0 7
39209: PPUSH
39210: CALL_OW 1
39214: ST_TO_ADDR
39215: GO 39183
39217: POP
39218: POP
// end ;
39219: GO 39149
39221: POP
39222: POP
// if not result then
39223: LD_VAR 0 2
39227: NOT
39228: IFFALSE 39232
// exit ;
39230: GO 39380
// mech := result [ 1 ] ;
39232: LD_ADDR_VAR 0 5
39236: PUSH
39237: LD_VAR 0 2
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: ST_TO_ADDR
// if result > 1 then
39246: LD_VAR 0 2
39250: PUSH
39251: LD_INT 1
39253: GREATER
39254: IFFALSE 39366
// begin for i = 2 to result do
39256: LD_ADDR_VAR 0 3
39260: PUSH
39261: DOUBLE
39262: LD_INT 2
39264: DEC
39265: ST_TO_ADDR
39266: LD_VAR 0 2
39270: PUSH
39271: FOR_TO
39272: IFFALSE 39364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39274: LD_ADDR_VAR 0 4
39278: PUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_VAR 0 3
39288: ARRAY
39289: PPUSH
39290: LD_INT 3
39292: PPUSH
39293: CALL_OW 259
39297: PUSH
39298: LD_VAR 0 2
39302: PUSH
39303: LD_VAR 0 3
39307: ARRAY
39308: PPUSH
39309: CALL_OW 432
39313: MINUS
39314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39315: LD_VAR 0 4
39319: PUSH
39320: LD_VAR 0 5
39324: PPUSH
39325: LD_INT 3
39327: PPUSH
39328: CALL_OW 259
39332: PUSH
39333: LD_VAR 0 5
39337: PPUSH
39338: CALL_OW 432
39342: MINUS
39343: GREATEREQUAL
39344: IFFALSE 39362
// mech := result [ i ] ;
39346: LD_ADDR_VAR 0 5
39350: PUSH
39351: LD_VAR 0 2
39355: PUSH
39356: LD_VAR 0 3
39360: ARRAY
39361: ST_TO_ADDR
// end ;
39362: GO 39271
39364: POP
39365: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39366: LD_VAR 0 1
39370: PPUSH
39371: LD_VAR 0 5
39375: PPUSH
39376: CALL_OW 135
// end ;
39380: LD_VAR 0 2
39384: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39385: LD_INT 0
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
// result := [ ] ;
39400: LD_ADDR_VAR 0 7
39404: PUSH
39405: EMPTY
39406: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39407: LD_VAR 0 1
39411: PPUSH
39412: CALL_OW 266
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: IN
39427: NOT
39428: IFFALSE 39432
// exit ;
39430: GO 41066
// if name then
39432: LD_VAR 0 3
39436: IFFALSE 39452
// SetBName ( base_dep , name ) ;
39438: LD_VAR 0 1
39442: PPUSH
39443: LD_VAR 0 3
39447: PPUSH
39448: CALL_OW 500
// base := GetBase ( base_dep ) ;
39452: LD_ADDR_VAR 0 15
39456: PUSH
39457: LD_VAR 0 1
39461: PPUSH
39462: CALL_OW 274
39466: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39467: LD_ADDR_VAR 0 16
39471: PUSH
39472: LD_VAR 0 1
39476: PPUSH
39477: CALL_OW 255
39481: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39482: LD_ADDR_VAR 0 17
39486: PUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 248
39496: ST_TO_ADDR
// if sources then
39497: LD_VAR 0 5
39501: IFFALSE 39548
// for i = 1 to 3 do
39503: LD_ADDR_VAR 0 8
39507: PUSH
39508: DOUBLE
39509: LD_INT 1
39511: DEC
39512: ST_TO_ADDR
39513: LD_INT 3
39515: PUSH
39516: FOR_TO
39517: IFFALSE 39546
// AddResourceType ( base , i , sources [ i ] ) ;
39519: LD_VAR 0 15
39523: PPUSH
39524: LD_VAR 0 8
39528: PPUSH
39529: LD_VAR 0 5
39533: PUSH
39534: LD_VAR 0 8
39538: ARRAY
39539: PPUSH
39540: CALL_OW 276
39544: GO 39516
39546: POP
39547: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39548: LD_ADDR_VAR 0 18
39552: PUSH
39553: LD_VAR 0 15
39557: PPUSH
39558: LD_VAR 0 2
39562: PPUSH
39563: LD_INT 1
39565: PPUSH
39566: CALL 38809 0 3
39570: ST_TO_ADDR
// InitHc ;
39571: CALL_OW 19
// InitUc ;
39575: CALL_OW 18
// uc_side := side ;
39579: LD_ADDR_OWVAR 20
39583: PUSH
39584: LD_VAR 0 16
39588: ST_TO_ADDR
// uc_nation := nation ;
39589: LD_ADDR_OWVAR 21
39593: PUSH
39594: LD_VAR 0 17
39598: ST_TO_ADDR
// if buildings then
39599: LD_VAR 0 18
39603: IFFALSE 40925
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39605: LD_ADDR_VAR 0 19
39609: PUSH
39610: LD_VAR 0 18
39614: PPUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 30
39620: PUSH
39621: LD_INT 29
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 30
39630: PUSH
39631: LD_INT 30
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: PPUSH
39643: CALL_OW 72
39647: ST_TO_ADDR
// if tmp then
39648: LD_VAR 0 19
39652: IFFALSE 39700
// for i in tmp do
39654: LD_ADDR_VAR 0 8
39658: PUSH
39659: LD_VAR 0 19
39663: PUSH
39664: FOR_IN
39665: IFFALSE 39698
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39667: LD_VAR 0 8
39671: PPUSH
39672: CALL_OW 250
39676: PPUSH
39677: LD_VAR 0 8
39681: PPUSH
39682: CALL_OW 251
39686: PPUSH
39687: LD_VAR 0 16
39691: PPUSH
39692: CALL_OW 441
39696: GO 39664
39698: POP
39699: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39700: LD_VAR 0 18
39704: PPUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 30
39710: PUSH
39711: LD_INT 32
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 33
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: PPUSH
39733: CALL_OW 72
39737: IFFALSE 39825
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39739: LD_ADDR_VAR 0 8
39743: PUSH
39744: LD_VAR 0 18
39748: PPUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 30
39754: PUSH
39755: LD_INT 32
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 30
39764: PUSH
39765: LD_INT 33
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: PPUSH
39777: CALL_OW 72
39781: PUSH
39782: FOR_IN
39783: IFFALSE 39823
// begin if not GetBWeapon ( i ) then
39785: LD_VAR 0 8
39789: PPUSH
39790: CALL_OW 269
39794: NOT
39795: IFFALSE 39821
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39797: LD_VAR 0 8
39801: PPUSH
39802: LD_VAR 0 8
39806: PPUSH
39807: LD_VAR 0 2
39811: PPUSH
39812: CALL 41071 0 2
39816: PPUSH
39817: CALL_OW 431
// end ;
39821: GO 39782
39823: POP
39824: POP
// end ; for i = 1 to personel do
39825: LD_ADDR_VAR 0 8
39829: PUSH
39830: DOUBLE
39831: LD_INT 1
39833: DEC
39834: ST_TO_ADDR
39835: LD_VAR 0 6
39839: PUSH
39840: FOR_TO
39841: IFFALSE 40905
// begin if i > 4 then
39843: LD_VAR 0 8
39847: PUSH
39848: LD_INT 4
39850: GREATER
39851: IFFALSE 39855
// break ;
39853: GO 40905
// case i of 1 :
39855: LD_VAR 0 8
39859: PUSH
39860: LD_INT 1
39862: DOUBLE
39863: EQUAL
39864: IFTRUE 39868
39866: GO 39948
39868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39869: LD_ADDR_VAR 0 12
39873: PUSH
39874: LD_VAR 0 18
39878: PPUSH
39879: LD_INT 22
39881: PUSH
39882: LD_VAR 0 16
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 58
39893: PUSH
39894: EMPTY
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 30
39902: PUSH
39903: LD_INT 32
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 30
39912: PUSH
39913: LD_INT 4
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 30
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: PPUSH
39941: CALL_OW 72
39945: ST_TO_ADDR
39946: GO 40170
39948: LD_INT 2
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 39956
39954: GO 40018
39956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39957: LD_ADDR_VAR 0 12
39961: PUSH
39962: LD_VAR 0 18
39966: PPUSH
39967: LD_INT 22
39969: PUSH
39970: LD_VAR 0 16
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 30
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 30
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PPUSH
40011: CALL_OW 72
40015: ST_TO_ADDR
40016: GO 40170
40018: LD_INT 3
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40088
40026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40027: LD_ADDR_VAR 0 12
40031: PUSH
40032: LD_VAR 0 18
40036: PPUSH
40037: LD_INT 22
40039: PUSH
40040: LD_VAR 0 16
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 30
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 30
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PPUSH
40081: CALL_OW 72
40085: ST_TO_ADDR
40086: GO 40170
40088: LD_INT 4
40090: DOUBLE
40091: EQUAL
40092: IFTRUE 40096
40094: GO 40169
40096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40097: LD_ADDR_VAR 0 12
40101: PUSH
40102: LD_VAR 0 18
40106: PPUSH
40107: LD_INT 22
40109: PUSH
40110: LD_VAR 0 16
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 6
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 30
40134: PUSH
40135: LD_INT 7
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 30
40144: PUSH
40145: LD_INT 8
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PPUSH
40162: CALL_OW 72
40166: ST_TO_ADDR
40167: GO 40170
40169: POP
// if i = 1 then
40170: LD_VAR 0 8
40174: PUSH
40175: LD_INT 1
40177: EQUAL
40178: IFFALSE 40289
// begin tmp := [ ] ;
40180: LD_ADDR_VAR 0 19
40184: PUSH
40185: EMPTY
40186: ST_TO_ADDR
// for j in f do
40187: LD_ADDR_VAR 0 9
40191: PUSH
40192: LD_VAR 0 12
40196: PUSH
40197: FOR_IN
40198: IFFALSE 40271
// if GetBType ( j ) = b_bunker then
40200: LD_VAR 0 9
40204: PPUSH
40205: CALL_OW 266
40209: PUSH
40210: LD_INT 32
40212: EQUAL
40213: IFFALSE 40240
// tmp := Insert ( tmp , 1 , j ) else
40215: LD_ADDR_VAR 0 19
40219: PUSH
40220: LD_VAR 0 19
40224: PPUSH
40225: LD_INT 1
40227: PPUSH
40228: LD_VAR 0 9
40232: PPUSH
40233: CALL_OW 2
40237: ST_TO_ADDR
40238: GO 40269
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40240: LD_ADDR_VAR 0 19
40244: PUSH
40245: LD_VAR 0 19
40249: PPUSH
40250: LD_VAR 0 19
40254: PUSH
40255: LD_INT 1
40257: PLUS
40258: PPUSH
40259: LD_VAR 0 9
40263: PPUSH
40264: CALL_OW 2
40268: ST_TO_ADDR
40269: GO 40197
40271: POP
40272: POP
// if tmp then
40273: LD_VAR 0 19
40277: IFFALSE 40289
// f := tmp ;
40279: LD_ADDR_VAR 0 12
40283: PUSH
40284: LD_VAR 0 19
40288: ST_TO_ADDR
// end ; x := personel [ i ] ;
40289: LD_ADDR_VAR 0 13
40293: PUSH
40294: LD_VAR 0 6
40298: PUSH
40299: LD_VAR 0 8
40303: ARRAY
40304: ST_TO_ADDR
// if x = - 1 then
40305: LD_VAR 0 13
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: EQUAL
40314: IFFALSE 40523
// begin for j in f do
40316: LD_ADDR_VAR 0 9
40320: PUSH
40321: LD_VAR 0 12
40325: PUSH
40326: FOR_IN
40327: IFFALSE 40519
// repeat InitHc ;
40329: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40333: LD_VAR 0 9
40337: PPUSH
40338: CALL_OW 266
40342: PUSH
40343: LD_INT 5
40345: EQUAL
40346: IFFALSE 40416
// begin if UnitsInside ( j ) < 3 then
40348: LD_VAR 0 9
40352: PPUSH
40353: CALL_OW 313
40357: PUSH
40358: LD_INT 3
40360: LESS
40361: IFFALSE 40397
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40363: LD_INT 0
40365: PPUSH
40366: LD_INT 5
40368: PUSH
40369: LD_INT 8
40371: PUSH
40372: LD_INT 9
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: PUSH
40380: LD_VAR 0 17
40384: ARRAY
40385: PPUSH
40386: LD_VAR 0 4
40390: PPUSH
40391: CALL_OW 380
40395: GO 40414
// PrepareHuman ( false , i , skill ) ;
40397: LD_INT 0
40399: PPUSH
40400: LD_VAR 0 8
40404: PPUSH
40405: LD_VAR 0 4
40409: PPUSH
40410: CALL_OW 380
// end else
40414: GO 40433
// PrepareHuman ( false , i , skill ) ;
40416: LD_INT 0
40418: PPUSH
40419: LD_VAR 0 8
40423: PPUSH
40424: LD_VAR 0 4
40428: PPUSH
40429: CALL_OW 380
// un := CreateHuman ;
40433: LD_ADDR_VAR 0 14
40437: PUSH
40438: CALL_OW 44
40442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40443: LD_ADDR_VAR 0 7
40447: PUSH
40448: LD_VAR 0 7
40452: PPUSH
40453: LD_INT 1
40455: PPUSH
40456: LD_VAR 0 14
40460: PPUSH
40461: CALL_OW 2
40465: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40466: LD_VAR 0 14
40470: PPUSH
40471: LD_VAR 0 9
40475: PPUSH
40476: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40480: LD_VAR 0 9
40484: PPUSH
40485: CALL_OW 313
40489: PUSH
40490: LD_INT 6
40492: EQUAL
40493: PUSH
40494: LD_VAR 0 9
40498: PPUSH
40499: CALL_OW 266
40503: PUSH
40504: LD_INT 32
40506: PUSH
40507: LD_INT 31
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: IN
40514: OR
40515: IFFALSE 40329
40517: GO 40326
40519: POP
40520: POP
// end else
40521: GO 40903
// for j = 1 to x do
40523: LD_ADDR_VAR 0 9
40527: PUSH
40528: DOUBLE
40529: LD_INT 1
40531: DEC
40532: ST_TO_ADDR
40533: LD_VAR 0 13
40537: PUSH
40538: FOR_TO
40539: IFFALSE 40901
// begin InitHc ;
40541: CALL_OW 19
// if not f then
40545: LD_VAR 0 12
40549: NOT
40550: IFFALSE 40639
// begin PrepareHuman ( false , i , skill ) ;
40552: LD_INT 0
40554: PPUSH
40555: LD_VAR 0 8
40559: PPUSH
40560: LD_VAR 0 4
40564: PPUSH
40565: CALL_OW 380
// un := CreateHuman ;
40569: LD_ADDR_VAR 0 14
40573: PUSH
40574: CALL_OW 44
40578: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40579: LD_ADDR_VAR 0 7
40583: PUSH
40584: LD_VAR 0 7
40588: PPUSH
40589: LD_INT 1
40591: PPUSH
40592: LD_VAR 0 14
40596: PPUSH
40597: CALL_OW 2
40601: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40602: LD_VAR 0 14
40606: PPUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 250
40616: PPUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 251
40626: PPUSH
40627: LD_INT 10
40629: PPUSH
40630: LD_INT 0
40632: PPUSH
40633: CALL_OW 50
// continue ;
40637: GO 40538
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40639: LD_VAR 0 12
40643: PUSH
40644: LD_INT 1
40646: ARRAY
40647: PPUSH
40648: CALL_OW 313
40652: PUSH
40653: LD_VAR 0 12
40657: PUSH
40658: LD_INT 1
40660: ARRAY
40661: PPUSH
40662: CALL_OW 266
40666: PUSH
40667: LD_INT 32
40669: PUSH
40670: LD_INT 31
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: IN
40677: AND
40678: PUSH
40679: LD_VAR 0 12
40683: PUSH
40684: LD_INT 1
40686: ARRAY
40687: PPUSH
40688: CALL_OW 313
40692: PUSH
40693: LD_INT 6
40695: EQUAL
40696: OR
40697: IFFALSE 40717
// f := Delete ( f , 1 ) ;
40699: LD_ADDR_VAR 0 12
40703: PUSH
40704: LD_VAR 0 12
40708: PPUSH
40709: LD_INT 1
40711: PPUSH
40712: CALL_OW 3
40716: ST_TO_ADDR
// if not f then
40717: LD_VAR 0 12
40721: NOT
40722: IFFALSE 40740
// begin x := x + 2 ;
40724: LD_ADDR_VAR 0 13
40728: PUSH
40729: LD_VAR 0 13
40733: PUSH
40734: LD_INT 2
40736: PLUS
40737: ST_TO_ADDR
// continue ;
40738: GO 40538
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40740: LD_VAR 0 12
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: PPUSH
40749: CALL_OW 266
40753: PUSH
40754: LD_INT 5
40756: EQUAL
40757: IFFALSE 40831
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40759: LD_VAR 0 12
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: PPUSH
40768: CALL_OW 313
40772: PUSH
40773: LD_INT 3
40775: LESS
40776: IFFALSE 40812
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40778: LD_INT 0
40780: PPUSH
40781: LD_INT 5
40783: PUSH
40784: LD_INT 8
40786: PUSH
40787: LD_INT 9
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: PUSH
40795: LD_VAR 0 17
40799: ARRAY
40800: PPUSH
40801: LD_VAR 0 4
40805: PPUSH
40806: CALL_OW 380
40810: GO 40829
// PrepareHuman ( false , i , skill ) ;
40812: LD_INT 0
40814: PPUSH
40815: LD_VAR 0 8
40819: PPUSH
40820: LD_VAR 0 4
40824: PPUSH
40825: CALL_OW 380
// end else
40829: GO 40848
// PrepareHuman ( false , i , skill ) ;
40831: LD_INT 0
40833: PPUSH
40834: LD_VAR 0 8
40838: PPUSH
40839: LD_VAR 0 4
40843: PPUSH
40844: CALL_OW 380
// un := CreateHuman ;
40848: LD_ADDR_VAR 0 14
40852: PUSH
40853: CALL_OW 44
40857: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40858: LD_ADDR_VAR 0 7
40862: PUSH
40863: LD_VAR 0 7
40867: PPUSH
40868: LD_INT 1
40870: PPUSH
40871: LD_VAR 0 14
40875: PPUSH
40876: CALL_OW 2
40880: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40881: LD_VAR 0 14
40885: PPUSH
40886: LD_VAR 0 12
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PPUSH
40895: CALL_OW 52
// end ;
40899: GO 40538
40901: POP
40902: POP
// end ;
40903: GO 39840
40905: POP
40906: POP
// result := result ^ buildings ;
40907: LD_ADDR_VAR 0 7
40911: PUSH
40912: LD_VAR 0 7
40916: PUSH
40917: LD_VAR 0 18
40921: ADD
40922: ST_TO_ADDR
// end else
40923: GO 41066
// begin for i = 1 to personel do
40925: LD_ADDR_VAR 0 8
40929: PUSH
40930: DOUBLE
40931: LD_INT 1
40933: DEC
40934: ST_TO_ADDR
40935: LD_VAR 0 6
40939: PUSH
40940: FOR_TO
40941: IFFALSE 41064
// begin if i > 4 then
40943: LD_VAR 0 8
40947: PUSH
40948: LD_INT 4
40950: GREATER
40951: IFFALSE 40955
// break ;
40953: GO 41064
// x := personel [ i ] ;
40955: LD_ADDR_VAR 0 13
40959: PUSH
40960: LD_VAR 0 6
40964: PUSH
40965: LD_VAR 0 8
40969: ARRAY
40970: ST_TO_ADDR
// if x = - 1 then
40971: LD_VAR 0 13
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: EQUAL
40980: IFFALSE 40984
// continue ;
40982: GO 40940
// PrepareHuman ( false , i , skill ) ;
40984: LD_INT 0
40986: PPUSH
40987: LD_VAR 0 8
40991: PPUSH
40992: LD_VAR 0 4
40996: PPUSH
40997: CALL_OW 380
// un := CreateHuman ;
41001: LD_ADDR_VAR 0 14
41005: PUSH
41006: CALL_OW 44
41010: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41011: LD_VAR 0 14
41015: PPUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 250
41025: PPUSH
41026: LD_VAR 0 1
41030: PPUSH
41031: CALL_OW 251
41035: PPUSH
41036: LD_INT 10
41038: PPUSH
41039: LD_INT 0
41041: PPUSH
41042: CALL_OW 50
// result := result ^ un ;
41046: LD_ADDR_VAR 0 7
41050: PUSH
41051: LD_VAR 0 7
41055: PUSH
41056: LD_VAR 0 14
41060: ADD
41061: ST_TO_ADDR
// end ;
41062: GO 40940
41064: POP
41065: POP
// end ; end ;
41066: LD_VAR 0 7
41070: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41071: LD_INT 0
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
// result := false ;
41089: LD_ADDR_VAR 0 3
41093: PUSH
41094: LD_INT 0
41096: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41097: LD_VAR 0 1
41101: NOT
41102: PUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: CALL_OW 266
41112: PUSH
41113: LD_INT 32
41115: PUSH
41116: LD_INT 33
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: IN
41123: NOT
41124: OR
41125: IFFALSE 41129
// exit ;
41127: GO 42238
// nat := GetNation ( tower ) ;
41129: LD_ADDR_VAR 0 12
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 248
41143: ST_TO_ADDR
// side := GetSide ( tower ) ;
41144: LD_ADDR_VAR 0 16
41148: PUSH
41149: LD_VAR 0 1
41153: PPUSH
41154: CALL_OW 255
41158: ST_TO_ADDR
// x := GetX ( tower ) ;
41159: LD_ADDR_VAR 0 10
41163: PUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 250
41173: ST_TO_ADDR
// y := GetY ( tower ) ;
41174: LD_ADDR_VAR 0 11
41178: PUSH
41179: LD_VAR 0 1
41183: PPUSH
41184: CALL_OW 251
41188: ST_TO_ADDR
// if not x or not y then
41189: LD_VAR 0 10
41193: NOT
41194: PUSH
41195: LD_VAR 0 11
41199: NOT
41200: OR
41201: IFFALSE 41205
// exit ;
41203: GO 42238
// weapon := 0 ;
41205: LD_ADDR_VAR 0 18
41209: PUSH
41210: LD_INT 0
41212: ST_TO_ADDR
// fac_list := [ ] ;
41213: LD_ADDR_VAR 0 17
41217: PUSH
41218: EMPTY
41219: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41220: LD_ADDR_VAR 0 6
41224: PUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 274
41234: PPUSH
41235: LD_VAR 0 2
41239: PPUSH
41240: LD_INT 0
41242: PPUSH
41243: CALL 38809 0 3
41247: PPUSH
41248: LD_INT 30
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PPUSH
41258: CALL_OW 72
41262: ST_TO_ADDR
// if not factories then
41263: LD_VAR 0 6
41267: NOT
41268: IFFALSE 41272
// exit ;
41270: GO 42238
// for i in factories do
41272: LD_ADDR_VAR 0 8
41276: PUSH
41277: LD_VAR 0 6
41281: PUSH
41282: FOR_IN
41283: IFFALSE 41308
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41285: LD_ADDR_VAR 0 17
41289: PUSH
41290: LD_VAR 0 17
41294: PUSH
41295: LD_VAR 0 8
41299: PPUSH
41300: CALL_OW 478
41304: UNION
41305: ST_TO_ADDR
41306: GO 41282
41308: POP
41309: POP
// if not fac_list then
41310: LD_VAR 0 17
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 42238
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41319: LD_ADDR_VAR 0 5
41323: PUSH
41324: LD_INT 4
41326: PUSH
41327: LD_INT 5
41329: PUSH
41330: LD_INT 9
41332: PUSH
41333: LD_INT 10
41335: PUSH
41336: LD_INT 6
41338: PUSH
41339: LD_INT 7
41341: PUSH
41342: LD_INT 11
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 27
41356: PUSH
41357: LD_INT 28
41359: PUSH
41360: LD_INT 26
41362: PUSH
41363: LD_INT 30
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 43
41374: PUSH
41375: LD_INT 44
41377: PUSH
41378: LD_INT 46
41380: PUSH
41381: LD_INT 45
41383: PUSH
41384: LD_INT 47
41386: PUSH
41387: LD_INT 49
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: PUSH
41403: LD_VAR 0 12
41407: ARRAY
41408: ST_TO_ADDR
// list := list isect fac_list ;
41409: LD_ADDR_VAR 0 5
41413: PUSH
41414: LD_VAR 0 5
41418: PUSH
41419: LD_VAR 0 17
41423: ISECT
41424: ST_TO_ADDR
// if not list then
41425: LD_VAR 0 5
41429: NOT
41430: IFFALSE 41434
// exit ;
41432: GO 42238
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41434: LD_VAR 0 12
41438: PUSH
41439: LD_INT 3
41441: EQUAL
41442: PUSH
41443: LD_INT 49
41445: PUSH
41446: LD_VAR 0 5
41450: IN
41451: AND
41452: PUSH
41453: LD_INT 31
41455: PPUSH
41456: LD_VAR 0 16
41460: PPUSH
41461: CALL_OW 321
41465: PUSH
41466: LD_INT 2
41468: EQUAL
41469: AND
41470: IFFALSE 41530
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41472: LD_INT 22
41474: PUSH
41475: LD_VAR 0 16
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 35
41486: PUSH
41487: LD_INT 49
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 91
41496: PUSH
41497: LD_VAR 0 1
41501: PUSH
41502: LD_INT 10
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: PPUSH
41515: CALL_OW 69
41519: NOT
41520: IFFALSE 41530
// weapon := ru_time_lapser ;
41522: LD_ADDR_VAR 0 18
41526: PUSH
41527: LD_INT 49
41529: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41530: LD_VAR 0 12
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: IN
41545: PUSH
41546: LD_INT 11
41548: PUSH
41549: LD_VAR 0 5
41553: IN
41554: PUSH
41555: LD_INT 30
41557: PUSH
41558: LD_VAR 0 5
41562: IN
41563: OR
41564: AND
41565: PUSH
41566: LD_INT 6
41568: PPUSH
41569: LD_VAR 0 16
41573: PPUSH
41574: CALL_OW 321
41578: PUSH
41579: LD_INT 2
41581: EQUAL
41582: AND
41583: IFFALSE 41748
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41585: LD_INT 22
41587: PUSH
41588: LD_VAR 0 16
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: LD_INT 35
41602: PUSH
41603: LD_INT 11
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 35
41612: PUSH
41613: LD_INT 30
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 91
41627: PUSH
41628: LD_VAR 0 1
41632: PUSH
41633: LD_INT 18
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: LIST
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: PPUSH
41646: CALL_OW 69
41650: NOT
41651: PUSH
41652: LD_INT 22
41654: PUSH
41655: LD_VAR 0 16
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 30
41669: PUSH
41670: LD_INT 32
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 30
41679: PUSH
41680: LD_INT 33
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 91
41694: PUSH
41695: LD_VAR 0 1
41699: PUSH
41700: LD_INT 12
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: PUSH
41713: EMPTY
41714: LIST
41715: PPUSH
41716: CALL_OW 69
41720: PUSH
41721: LD_INT 2
41723: GREATER
41724: AND
41725: IFFALSE 41748
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41727: LD_ADDR_VAR 0 18
41731: PUSH
41732: LD_INT 11
41734: PUSH
41735: LD_INT 30
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_VAR 0 12
41746: ARRAY
41747: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41748: LD_VAR 0 18
41752: NOT
41753: PUSH
41754: LD_INT 40
41756: PPUSH
41757: LD_VAR 0 16
41761: PPUSH
41762: CALL_OW 321
41766: PUSH
41767: LD_INT 2
41769: EQUAL
41770: AND
41771: PUSH
41772: LD_INT 7
41774: PUSH
41775: LD_VAR 0 5
41779: IN
41780: PUSH
41781: LD_INT 28
41783: PUSH
41784: LD_VAR 0 5
41788: IN
41789: OR
41790: PUSH
41791: LD_INT 45
41793: PUSH
41794: LD_VAR 0 5
41798: IN
41799: OR
41800: AND
41801: IFFALSE 42055
// begin hex := GetHexInfo ( x , y ) ;
41803: LD_ADDR_VAR 0 4
41807: PUSH
41808: LD_VAR 0 10
41812: PPUSH
41813: LD_VAR 0 11
41817: PPUSH
41818: CALL_OW 546
41822: ST_TO_ADDR
// if hex [ 1 ] then
41823: LD_VAR 0 4
41827: PUSH
41828: LD_INT 1
41830: ARRAY
41831: IFFALSE 41835
// exit ;
41833: GO 42238
// height := hex [ 2 ] ;
41835: LD_ADDR_VAR 0 15
41839: PUSH
41840: LD_VAR 0 4
41844: PUSH
41845: LD_INT 2
41847: ARRAY
41848: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41849: LD_ADDR_VAR 0 14
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 5
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// for i in tmp do
41872: LD_ADDR_VAR 0 8
41876: PUSH
41877: LD_VAR 0 14
41881: PUSH
41882: FOR_IN
41883: IFFALSE 42053
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41885: LD_ADDR_VAR 0 9
41889: PUSH
41890: LD_VAR 0 10
41894: PPUSH
41895: LD_VAR 0 8
41899: PPUSH
41900: LD_INT 5
41902: PPUSH
41903: CALL_OW 272
41907: PUSH
41908: LD_VAR 0 11
41912: PPUSH
41913: LD_VAR 0 8
41917: PPUSH
41918: LD_INT 5
41920: PPUSH
41921: CALL_OW 273
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41930: LD_VAR 0 9
41934: PUSH
41935: LD_INT 1
41937: ARRAY
41938: PPUSH
41939: LD_VAR 0 9
41943: PUSH
41944: LD_INT 2
41946: ARRAY
41947: PPUSH
41948: CALL_OW 488
41952: IFFALSE 42051
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41954: LD_ADDR_VAR 0 4
41958: PUSH
41959: LD_VAR 0 9
41963: PUSH
41964: LD_INT 1
41966: ARRAY
41967: PPUSH
41968: LD_VAR 0 9
41972: PUSH
41973: LD_INT 2
41975: ARRAY
41976: PPUSH
41977: CALL_OW 546
41981: ST_TO_ADDR
// if hex [ 1 ] then
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 1
41989: ARRAY
41990: IFFALSE 41994
// continue ;
41992: GO 41882
// h := hex [ 2 ] ;
41994: LD_ADDR_VAR 0 13
41998: PUSH
41999: LD_VAR 0 4
42003: PUSH
42004: LD_INT 2
42006: ARRAY
42007: ST_TO_ADDR
// if h + 7 < height then
42008: LD_VAR 0 13
42012: PUSH
42013: LD_INT 7
42015: PLUS
42016: PUSH
42017: LD_VAR 0 15
42021: LESS
42022: IFFALSE 42051
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42024: LD_ADDR_VAR 0 18
42028: PUSH
42029: LD_INT 7
42031: PUSH
42032: LD_INT 28
42034: PUSH
42035: LD_INT 45
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: PUSH
42043: LD_VAR 0 12
42047: ARRAY
42048: ST_TO_ADDR
// break ;
42049: GO 42053
// end ; end ; end ;
42051: GO 41882
42053: POP
42054: POP
// end ; if not weapon then
42055: LD_VAR 0 18
42059: NOT
42060: IFFALSE 42120
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42062: LD_ADDR_VAR 0 5
42066: PUSH
42067: LD_VAR 0 5
42071: PUSH
42072: LD_INT 11
42074: PUSH
42075: LD_INT 30
42077: PUSH
42078: LD_INT 49
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: DIFF
42086: ST_TO_ADDR
// if not list then
42087: LD_VAR 0 5
42091: NOT
42092: IFFALSE 42096
// exit ;
42094: GO 42238
// weapon := list [ rand ( 1 , list ) ] ;
42096: LD_ADDR_VAR 0 18
42100: PUSH
42101: LD_VAR 0 5
42105: PUSH
42106: LD_INT 1
42108: PPUSH
42109: LD_VAR 0 5
42113: PPUSH
42114: CALL_OW 12
42118: ARRAY
42119: ST_TO_ADDR
// end ; if weapon then
42120: LD_VAR 0 18
42124: IFFALSE 42238
// begin tmp := CostOfWeapon ( weapon ) ;
42126: LD_ADDR_VAR 0 14
42130: PUSH
42131: LD_VAR 0 18
42135: PPUSH
42136: CALL_OW 451
42140: ST_TO_ADDR
// j := GetBase ( tower ) ;
42141: LD_ADDR_VAR 0 9
42145: PUSH
42146: LD_VAR 0 1
42150: PPUSH
42151: CALL_OW 274
42155: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42156: LD_VAR 0 9
42160: PPUSH
42161: LD_INT 1
42163: PPUSH
42164: CALL_OW 275
42168: PUSH
42169: LD_VAR 0 14
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: GREATEREQUAL
42178: PUSH
42179: LD_VAR 0 9
42183: PPUSH
42184: LD_INT 2
42186: PPUSH
42187: CALL_OW 275
42191: PUSH
42192: LD_VAR 0 14
42196: PUSH
42197: LD_INT 2
42199: ARRAY
42200: GREATEREQUAL
42201: AND
42202: PUSH
42203: LD_VAR 0 9
42207: PPUSH
42208: LD_INT 3
42210: PPUSH
42211: CALL_OW 275
42215: PUSH
42216: LD_VAR 0 14
42220: PUSH
42221: LD_INT 3
42223: ARRAY
42224: GREATEREQUAL
42225: AND
42226: IFFALSE 42238
// result := weapon ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_VAR 0 18
42237: ST_TO_ADDR
// end ; end ;
42238: LD_VAR 0 3
42242: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42243: LD_INT 0
42245: PPUSH
42246: PPUSH
// result := true ;
42247: LD_ADDR_VAR 0 3
42251: PUSH
42252: LD_INT 1
42254: ST_TO_ADDR
// if array1 = array2 then
42255: LD_VAR 0 1
42259: PUSH
42260: LD_VAR 0 2
42264: EQUAL
42265: IFFALSE 42325
// begin for i = 1 to array1 do
42267: LD_ADDR_VAR 0 4
42271: PUSH
42272: DOUBLE
42273: LD_INT 1
42275: DEC
42276: ST_TO_ADDR
42277: LD_VAR 0 1
42281: PUSH
42282: FOR_TO
42283: IFFALSE 42321
// if array1 [ i ] <> array2 [ i ] then
42285: LD_VAR 0 1
42289: PUSH
42290: LD_VAR 0 4
42294: ARRAY
42295: PUSH
42296: LD_VAR 0 2
42300: PUSH
42301: LD_VAR 0 4
42305: ARRAY
42306: NONEQUAL
42307: IFFALSE 42319
// begin result := false ;
42309: LD_ADDR_VAR 0 3
42313: PUSH
42314: LD_INT 0
42316: ST_TO_ADDR
// break ;
42317: GO 42321
// end ;
42319: GO 42282
42321: POP
42322: POP
// end else
42323: GO 42333
// result := false ;
42325: LD_ADDR_VAR 0 3
42329: PUSH
42330: LD_INT 0
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 3
42337: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42338: LD_INT 0
42340: PPUSH
42341: PPUSH
// if not array1 or not array2 then
42342: LD_VAR 0 1
42346: NOT
42347: PUSH
42348: LD_VAR 0 2
42352: NOT
42353: OR
42354: IFFALSE 42358
// exit ;
42356: GO 42422
// result := true ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_INT 1
42365: ST_TO_ADDR
// for i = 1 to array1 do
42366: LD_ADDR_VAR 0 4
42370: PUSH
42371: DOUBLE
42372: LD_INT 1
42374: DEC
42375: ST_TO_ADDR
42376: LD_VAR 0 1
42380: PUSH
42381: FOR_TO
42382: IFFALSE 42420
// if array1 [ i ] <> array2 [ i ] then
42384: LD_VAR 0 1
42388: PUSH
42389: LD_VAR 0 4
42393: ARRAY
42394: PUSH
42395: LD_VAR 0 2
42399: PUSH
42400: LD_VAR 0 4
42404: ARRAY
42405: NONEQUAL
42406: IFFALSE 42418
// begin result := false ;
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 0
42415: ST_TO_ADDR
// break ;
42416: GO 42420
// end ;
42418: GO 42381
42420: POP
42421: POP
// end ;
42422: LD_VAR 0 3
42426: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42427: LD_INT 0
42429: PPUSH
42430: PPUSH
42431: PPUSH
// pom := GetBase ( fac ) ;
42432: LD_ADDR_VAR 0 5
42436: PUSH
42437: LD_VAR 0 1
42441: PPUSH
42442: CALL_OW 274
42446: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42447: LD_ADDR_VAR 0 4
42451: PUSH
42452: LD_VAR 0 2
42456: PUSH
42457: LD_INT 1
42459: ARRAY
42460: PPUSH
42461: LD_VAR 0 2
42465: PUSH
42466: LD_INT 2
42468: ARRAY
42469: PPUSH
42470: LD_VAR 0 2
42474: PUSH
42475: LD_INT 3
42477: ARRAY
42478: PPUSH
42479: LD_VAR 0 2
42483: PUSH
42484: LD_INT 4
42486: ARRAY
42487: PPUSH
42488: CALL_OW 449
42492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_VAR 0 5
42502: PPUSH
42503: LD_INT 1
42505: PPUSH
42506: CALL_OW 275
42510: PUSH
42511: LD_VAR 0 4
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: GREATEREQUAL
42520: PUSH
42521: LD_VAR 0 5
42525: PPUSH
42526: LD_INT 2
42528: PPUSH
42529: CALL_OW 275
42533: PUSH
42534: LD_VAR 0 4
42538: PUSH
42539: LD_INT 2
42541: ARRAY
42542: GREATEREQUAL
42543: AND
42544: PUSH
42545: LD_VAR 0 5
42549: PPUSH
42550: LD_INT 3
42552: PPUSH
42553: CALL_OW 275
42557: PUSH
42558: LD_VAR 0 4
42562: PUSH
42563: LD_INT 3
42565: ARRAY
42566: GREATEREQUAL
42567: AND
42568: ST_TO_ADDR
// end ;
42569: LD_VAR 0 3
42573: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42574: LD_INT 0
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
// pom := GetBase ( building ) ;
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_VAR 0 1
42589: PPUSH
42590: CALL_OW 274
42594: ST_TO_ADDR
// if not pom then
42595: LD_VAR 0 3
42599: NOT
42600: IFFALSE 42604
// exit ;
42602: GO 42774
// btype := GetBType ( building ) ;
42604: LD_ADDR_VAR 0 5
42608: PUSH
42609: LD_VAR 0 1
42613: PPUSH
42614: CALL_OW 266
42618: ST_TO_ADDR
// if btype = b_armoury then
42619: LD_VAR 0 5
42623: PUSH
42624: LD_INT 4
42626: EQUAL
42627: IFFALSE 42637
// btype := b_barracks ;
42629: LD_ADDR_VAR 0 5
42633: PUSH
42634: LD_INT 5
42636: ST_TO_ADDR
// if btype = b_depot then
42637: LD_VAR 0 5
42641: PUSH
42642: LD_INT 0
42644: EQUAL
42645: IFFALSE 42655
// btype := b_warehouse ;
42647: LD_ADDR_VAR 0 5
42651: PUSH
42652: LD_INT 1
42654: ST_TO_ADDR
// if btype = b_workshop then
42655: LD_VAR 0 5
42659: PUSH
42660: LD_INT 2
42662: EQUAL
42663: IFFALSE 42673
// btype := b_factory ;
42665: LD_ADDR_VAR 0 5
42669: PUSH
42670: LD_INT 3
42672: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: LD_VAR 0 5
42682: PPUSH
42683: LD_VAR 0 1
42687: PPUSH
42688: CALL_OW 248
42692: PPUSH
42693: CALL_OW 450
42697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42698: LD_ADDR_VAR 0 2
42702: PUSH
42703: LD_VAR 0 3
42707: PPUSH
42708: LD_INT 1
42710: PPUSH
42711: CALL_OW 275
42715: PUSH
42716: LD_VAR 0 4
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: GREATEREQUAL
42725: PUSH
42726: LD_VAR 0 3
42730: PPUSH
42731: LD_INT 2
42733: PPUSH
42734: CALL_OW 275
42738: PUSH
42739: LD_VAR 0 4
42743: PUSH
42744: LD_INT 2
42746: ARRAY
42747: GREATEREQUAL
42748: AND
42749: PUSH
42750: LD_VAR 0 3
42754: PPUSH
42755: LD_INT 3
42757: PPUSH
42758: CALL_OW 275
42762: PUSH
42763: LD_VAR 0 4
42767: PUSH
42768: LD_INT 3
42770: ARRAY
42771: GREATEREQUAL
42772: AND
42773: ST_TO_ADDR
// end ;
42774: LD_VAR 0 2
42778: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42779: LD_INT 0
42781: PPUSH
42782: PPUSH
42783: PPUSH
// pom := GetBase ( building ) ;
42784: LD_ADDR_VAR 0 4
42788: PUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 274
42798: ST_TO_ADDR
// if not pom then
42799: LD_VAR 0 4
42803: NOT
42804: IFFALSE 42808
// exit ;
42806: GO 42909
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42808: LD_ADDR_VAR 0 5
42812: PUSH
42813: LD_VAR 0 2
42817: PPUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 248
42827: PPUSH
42828: CALL_OW 450
42832: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_VAR 0 4
42842: PPUSH
42843: LD_INT 1
42845: PPUSH
42846: CALL_OW 275
42850: PUSH
42851: LD_VAR 0 5
42855: PUSH
42856: LD_INT 1
42858: ARRAY
42859: GREATEREQUAL
42860: PUSH
42861: LD_VAR 0 4
42865: PPUSH
42866: LD_INT 2
42868: PPUSH
42869: CALL_OW 275
42873: PUSH
42874: LD_VAR 0 5
42878: PUSH
42879: LD_INT 2
42881: ARRAY
42882: GREATEREQUAL
42883: AND
42884: PUSH
42885: LD_VAR 0 4
42889: PPUSH
42890: LD_INT 3
42892: PPUSH
42893: CALL_OW 275
42897: PUSH
42898: LD_VAR 0 5
42902: PUSH
42903: LD_INT 3
42905: ARRAY
42906: GREATEREQUAL
42907: AND
42908: ST_TO_ADDR
// end ;
42909: LD_VAR 0 3
42913: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42914: LD_INT 0
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
// result := false ;
42927: LD_ADDR_VAR 0 8
42931: PUSH
42932: LD_INT 0
42934: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42935: LD_VAR 0 5
42939: NOT
42940: PUSH
42941: LD_VAR 0 1
42945: NOT
42946: OR
42947: PUSH
42948: LD_VAR 0 2
42952: NOT
42953: OR
42954: PUSH
42955: LD_VAR 0 3
42959: NOT
42960: OR
42961: IFFALSE 42965
// exit ;
42963: GO 43779
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42965: LD_ADDR_VAR 0 14
42969: PUSH
42970: LD_VAR 0 1
42974: PPUSH
42975: LD_VAR 0 2
42979: PPUSH
42980: LD_VAR 0 3
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: LD_VAR 0 5
42994: PUSH
42995: LD_INT 1
42997: ARRAY
42998: PPUSH
42999: CALL_OW 248
43003: PPUSH
43004: LD_INT 0
43006: PPUSH
43007: CALL 45032 0 6
43011: ST_TO_ADDR
// if not hexes then
43012: LD_VAR 0 14
43016: NOT
43017: IFFALSE 43021
// exit ;
43019: GO 43779
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43021: LD_ADDR_VAR 0 17
43025: PUSH
43026: LD_VAR 0 5
43030: PPUSH
43031: LD_INT 22
43033: PUSH
43034: LD_VAR 0 13
43038: PPUSH
43039: CALL_OW 255
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 30
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 30
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PPUSH
43080: CALL_OW 72
43084: ST_TO_ADDR
// for i = 1 to hexes do
43085: LD_ADDR_VAR 0 9
43089: PUSH
43090: DOUBLE
43091: LD_INT 1
43093: DEC
43094: ST_TO_ADDR
43095: LD_VAR 0 14
43099: PUSH
43100: FOR_TO
43101: IFFALSE 43777
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43103: LD_ADDR_VAR 0 13
43107: PUSH
43108: LD_VAR 0 14
43112: PUSH
43113: LD_VAR 0 9
43117: ARRAY
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PPUSH
43123: LD_VAR 0 14
43127: PUSH
43128: LD_VAR 0 9
43132: ARRAY
43133: PUSH
43134: LD_INT 2
43136: ARRAY
43137: PPUSH
43138: CALL_OW 428
43142: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43143: LD_VAR 0 14
43147: PUSH
43148: LD_VAR 0 9
43152: ARRAY
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: PPUSH
43158: LD_VAR 0 14
43162: PUSH
43163: LD_VAR 0 9
43167: ARRAY
43168: PUSH
43169: LD_INT 2
43171: ARRAY
43172: PPUSH
43173: CALL_OW 351
43177: PUSH
43178: LD_VAR 0 14
43182: PUSH
43183: LD_VAR 0 9
43187: ARRAY
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: LD_VAR 0 14
43197: PUSH
43198: LD_VAR 0 9
43202: ARRAY
43203: PUSH
43204: LD_INT 2
43206: ARRAY
43207: PPUSH
43208: CALL_OW 488
43212: NOT
43213: OR
43214: PUSH
43215: LD_VAR 0 13
43219: PPUSH
43220: CALL_OW 247
43224: PUSH
43225: LD_INT 3
43227: EQUAL
43228: OR
43229: IFFALSE 43235
// exit ;
43231: POP
43232: POP
43233: GO 43779
// if not tmp then
43235: LD_VAR 0 13
43239: NOT
43240: IFFALSE 43244
// continue ;
43242: GO 43100
// result := true ;
43244: LD_ADDR_VAR 0 8
43248: PUSH
43249: LD_INT 1
43251: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43252: LD_VAR 0 6
43256: PUSH
43257: LD_VAR 0 13
43261: PPUSH
43262: CALL_OW 247
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: AND
43271: PUSH
43272: LD_VAR 0 13
43276: PPUSH
43277: CALL_OW 263
43281: PUSH
43282: LD_INT 1
43284: EQUAL
43285: AND
43286: IFFALSE 43450
// begin if IsDrivenBy ( tmp ) then
43288: LD_VAR 0 13
43292: PPUSH
43293: CALL_OW 311
43297: IFFALSE 43301
// continue ;
43299: GO 43100
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43301: LD_VAR 0 6
43305: PPUSH
43306: LD_INT 3
43308: PUSH
43309: LD_INT 60
43311: PUSH
43312: EMPTY
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 55
43324: PUSH
43325: EMPTY
43326: LIST
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PPUSH
43336: CALL_OW 72
43340: IFFALSE 43448
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43342: LD_ADDR_VAR 0 18
43346: PUSH
43347: LD_VAR 0 6
43351: PPUSH
43352: LD_INT 3
43354: PUSH
43355: LD_INT 60
43357: PUSH
43358: EMPTY
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 3
43367: PUSH
43368: LD_INT 55
43370: PUSH
43371: EMPTY
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PPUSH
43382: CALL_OW 72
43386: PUSH
43387: LD_INT 1
43389: ARRAY
43390: ST_TO_ADDR
// if IsInUnit ( driver ) then
43391: LD_VAR 0 18
43395: PPUSH
43396: CALL_OW 310
43400: IFFALSE 43411
// ComExit ( driver ) ;
43402: LD_VAR 0 18
43406: PPUSH
43407: CALL 68811 0 1
// AddComEnterUnit ( driver , tmp ) ;
43411: LD_VAR 0 18
43415: PPUSH
43416: LD_VAR 0 13
43420: PPUSH
43421: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43425: LD_VAR 0 18
43429: PPUSH
43430: LD_VAR 0 7
43434: PPUSH
43435: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43439: LD_VAR 0 18
43443: PPUSH
43444: CALL_OW 181
// end ; continue ;
43448: GO 43100
// end ; if not cleaners or not tmp in cleaners then
43450: LD_VAR 0 6
43454: NOT
43455: PUSH
43456: LD_VAR 0 13
43460: PUSH
43461: LD_VAR 0 6
43465: IN
43466: NOT
43467: OR
43468: IFFALSE 43775
// begin if dep then
43470: LD_VAR 0 17
43474: IFFALSE 43610
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43476: LD_ADDR_VAR 0 16
43480: PUSH
43481: LD_VAR 0 17
43485: PUSH
43486: LD_INT 1
43488: ARRAY
43489: PPUSH
43490: CALL_OW 250
43494: PPUSH
43495: LD_VAR 0 17
43499: PUSH
43500: LD_INT 1
43502: ARRAY
43503: PPUSH
43504: CALL_OW 254
43508: PPUSH
43509: LD_INT 5
43511: PPUSH
43512: CALL_OW 272
43516: PUSH
43517: LD_VAR 0 17
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: PPUSH
43526: CALL_OW 251
43530: PPUSH
43531: LD_VAR 0 17
43535: PUSH
43536: LD_INT 1
43538: ARRAY
43539: PPUSH
43540: CALL_OW 254
43544: PPUSH
43545: LD_INT 5
43547: PPUSH
43548: CALL_OW 273
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43557: LD_VAR 0 16
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: PPUSH
43566: LD_VAR 0 16
43570: PUSH
43571: LD_INT 2
43573: ARRAY
43574: PPUSH
43575: CALL_OW 488
43579: IFFALSE 43610
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43581: LD_VAR 0 13
43585: PPUSH
43586: LD_VAR 0 16
43590: PUSH
43591: LD_INT 1
43593: ARRAY
43594: PPUSH
43595: LD_VAR 0 16
43599: PUSH
43600: LD_INT 2
43602: ARRAY
43603: PPUSH
43604: CALL_OW 111
// continue ;
43608: GO 43100
// end ; end ; r := GetDir ( tmp ) ;
43610: LD_ADDR_VAR 0 15
43614: PUSH
43615: LD_VAR 0 13
43619: PPUSH
43620: CALL_OW 254
43624: ST_TO_ADDR
// if r = 5 then
43625: LD_VAR 0 15
43629: PUSH
43630: LD_INT 5
43632: EQUAL
43633: IFFALSE 43643
// r := 0 ;
43635: LD_ADDR_VAR 0 15
43639: PUSH
43640: LD_INT 0
43642: ST_TO_ADDR
// for j = r to 5 do
43643: LD_ADDR_VAR 0 10
43647: PUSH
43648: DOUBLE
43649: LD_VAR 0 15
43653: DEC
43654: ST_TO_ADDR
43655: LD_INT 5
43657: PUSH
43658: FOR_TO
43659: IFFALSE 43773
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43661: LD_ADDR_VAR 0 11
43665: PUSH
43666: LD_VAR 0 13
43670: PPUSH
43671: CALL_OW 250
43675: PPUSH
43676: LD_VAR 0 10
43680: PPUSH
43681: LD_INT 2
43683: PPUSH
43684: CALL_OW 272
43688: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43689: LD_ADDR_VAR 0 12
43693: PUSH
43694: LD_VAR 0 13
43698: PPUSH
43699: CALL_OW 251
43703: PPUSH
43704: LD_VAR 0 10
43708: PPUSH
43709: LD_INT 2
43711: PPUSH
43712: CALL_OW 273
43716: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43717: LD_VAR 0 11
43721: PPUSH
43722: LD_VAR 0 12
43726: PPUSH
43727: CALL_OW 488
43731: PUSH
43732: LD_VAR 0 11
43736: PPUSH
43737: LD_VAR 0 12
43741: PPUSH
43742: CALL_OW 428
43746: NOT
43747: AND
43748: IFFALSE 43771
// begin ComMoveXY ( tmp , _x , _y ) ;
43750: LD_VAR 0 13
43754: PPUSH
43755: LD_VAR 0 11
43759: PPUSH
43760: LD_VAR 0 12
43764: PPUSH
43765: CALL_OW 111
// break ;
43769: GO 43773
// end ; end ;
43771: GO 43658
43773: POP
43774: POP
// end ; end ;
43775: GO 43100
43777: POP
43778: POP
// end ;
43779: LD_VAR 0 8
43783: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43784: LD_INT 0
43786: PPUSH
// result := true ;
43787: LD_ADDR_VAR 0 3
43791: PUSH
43792: LD_INT 1
43794: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43795: LD_VAR 0 2
43799: PUSH
43800: LD_INT 24
43802: DOUBLE
43803: EQUAL
43804: IFTRUE 43814
43806: LD_INT 33
43808: DOUBLE
43809: EQUAL
43810: IFTRUE 43814
43812: GO 43839
43814: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43815: LD_ADDR_VAR 0 3
43819: PUSH
43820: LD_INT 32
43822: PPUSH
43823: LD_VAR 0 1
43827: PPUSH
43828: CALL_OW 321
43832: PUSH
43833: LD_INT 2
43835: EQUAL
43836: ST_TO_ADDR
43837: GO 44155
43839: LD_INT 20
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 43872
43847: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_INT 6
43855: PPUSH
43856: LD_VAR 0 1
43860: PPUSH
43861: CALL_OW 321
43865: PUSH
43866: LD_INT 2
43868: EQUAL
43869: ST_TO_ADDR
43870: GO 44155
43872: LD_INT 22
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43886
43878: LD_INT 36
43880: DOUBLE
43881: EQUAL
43882: IFTRUE 43886
43884: GO 43911
43886: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43887: LD_ADDR_VAR 0 3
43891: PUSH
43892: LD_INT 15
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 321
43904: PUSH
43905: LD_INT 2
43907: EQUAL
43908: ST_TO_ADDR
43909: GO 44155
43911: LD_INT 30
43913: DOUBLE
43914: EQUAL
43915: IFTRUE 43919
43917: GO 43944
43919: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_INT 20
43927: PPUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 321
43937: PUSH
43938: LD_INT 2
43940: EQUAL
43941: ST_TO_ADDR
43942: GO 44155
43944: LD_INT 28
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43958
43950: LD_INT 21
43952: DOUBLE
43953: EQUAL
43954: IFTRUE 43958
43956: GO 43983
43958: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_INT 21
43966: PPUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 321
43976: PUSH
43977: LD_INT 2
43979: EQUAL
43980: ST_TO_ADDR
43981: GO 44155
43983: LD_INT 16
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 43991
43989: GO 44016
43991: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: LD_INT 84
43999: PPUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 321
44009: PUSH
44010: LD_INT 2
44012: EQUAL
44013: ST_TO_ADDR
44014: GO 44155
44016: LD_INT 19
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44030
44022: LD_INT 23
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44055
44030: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_INT 83
44038: PPUSH
44039: LD_VAR 0 1
44043: PPUSH
44044: CALL_OW 321
44048: PUSH
44049: LD_INT 2
44051: EQUAL
44052: ST_TO_ADDR
44053: GO 44155
44055: LD_INT 17
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44063
44061: GO 44088
44063: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44064: LD_ADDR_VAR 0 3
44068: PUSH
44069: LD_INT 39
44071: PPUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 321
44081: PUSH
44082: LD_INT 2
44084: EQUAL
44085: ST_TO_ADDR
44086: GO 44155
44088: LD_INT 18
44090: DOUBLE
44091: EQUAL
44092: IFTRUE 44096
44094: GO 44121
44096: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44097: LD_ADDR_VAR 0 3
44101: PUSH
44102: LD_INT 40
44104: PPUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 321
44114: PUSH
44115: LD_INT 2
44117: EQUAL
44118: ST_TO_ADDR
44119: GO 44155
44121: LD_INT 27
44123: DOUBLE
44124: EQUAL
44125: IFTRUE 44129
44127: GO 44154
44129: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_INT 35
44137: PPUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: CALL_OW 321
44147: PUSH
44148: LD_INT 2
44150: EQUAL
44151: ST_TO_ADDR
44152: GO 44155
44154: POP
// end ;
44155: LD_VAR 0 3
44159: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44160: LD_INT 0
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
// result := false ;
44173: LD_ADDR_VAR 0 6
44177: PUSH
44178: LD_INT 0
44180: ST_TO_ADDR
// if btype = b_depot then
44181: LD_VAR 0 2
44185: PUSH
44186: LD_INT 0
44188: EQUAL
44189: IFFALSE 44201
// begin result := true ;
44191: LD_ADDR_VAR 0 6
44195: PUSH
44196: LD_INT 1
44198: ST_TO_ADDR
// exit ;
44199: GO 45027
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44201: LD_VAR 0 1
44205: NOT
44206: PUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 266
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: IN
44227: NOT
44228: OR
44229: PUSH
44230: LD_VAR 0 2
44234: NOT
44235: OR
44236: PUSH
44237: LD_VAR 0 5
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: LD_INT 4
44256: PUSH
44257: LD_INT 5
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: IN
44268: NOT
44269: OR
44270: PUSH
44271: LD_VAR 0 3
44275: PPUSH
44276: LD_VAR 0 4
44280: PPUSH
44281: CALL_OW 488
44285: NOT
44286: OR
44287: IFFALSE 44291
// exit ;
44289: GO 45027
// side := GetSide ( depot ) ;
44291: LD_ADDR_VAR 0 9
44295: PUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 255
44305: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44306: LD_VAR 0 9
44310: PPUSH
44311: LD_VAR 0 2
44315: PPUSH
44316: CALL 43784 0 2
44320: NOT
44321: IFFALSE 44325
// exit ;
44323: GO 45027
// pom := GetBase ( depot ) ;
44325: LD_ADDR_VAR 0 10
44329: PUSH
44330: LD_VAR 0 1
44334: PPUSH
44335: CALL_OW 274
44339: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44340: LD_ADDR_VAR 0 11
44344: PUSH
44345: LD_VAR 0 2
44349: PPUSH
44350: LD_VAR 0 1
44354: PPUSH
44355: CALL_OW 248
44359: PPUSH
44360: CALL_OW 450
44364: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44365: LD_VAR 0 10
44369: PPUSH
44370: LD_INT 1
44372: PPUSH
44373: CALL_OW 275
44377: PUSH
44378: LD_VAR 0 11
44382: PUSH
44383: LD_INT 1
44385: ARRAY
44386: GREATEREQUAL
44387: PUSH
44388: LD_VAR 0 10
44392: PPUSH
44393: LD_INT 2
44395: PPUSH
44396: CALL_OW 275
44400: PUSH
44401: LD_VAR 0 11
44405: PUSH
44406: LD_INT 2
44408: ARRAY
44409: GREATEREQUAL
44410: AND
44411: PUSH
44412: LD_VAR 0 10
44416: PPUSH
44417: LD_INT 3
44419: PPUSH
44420: CALL_OW 275
44424: PUSH
44425: LD_VAR 0 11
44429: PUSH
44430: LD_INT 3
44432: ARRAY
44433: GREATEREQUAL
44434: AND
44435: NOT
44436: IFFALSE 44440
// exit ;
44438: GO 45027
// if GetBType ( depot ) = b_depot then
44440: LD_VAR 0 1
44444: PPUSH
44445: CALL_OW 266
44449: PUSH
44450: LD_INT 0
44452: EQUAL
44453: IFFALSE 44465
// dist := 28 else
44455: LD_ADDR_VAR 0 14
44459: PUSH
44460: LD_INT 28
44462: ST_TO_ADDR
44463: GO 44473
// dist := 36 ;
44465: LD_ADDR_VAR 0 14
44469: PUSH
44470: LD_INT 36
44472: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44473: LD_VAR 0 1
44477: PPUSH
44478: LD_VAR 0 3
44482: PPUSH
44483: LD_VAR 0 4
44487: PPUSH
44488: CALL_OW 297
44492: PUSH
44493: LD_VAR 0 14
44497: GREATER
44498: IFFALSE 44502
// exit ;
44500: GO 45027
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44502: LD_ADDR_VAR 0 12
44506: PUSH
44507: LD_VAR 0 2
44511: PPUSH
44512: LD_VAR 0 3
44516: PPUSH
44517: LD_VAR 0 4
44521: PPUSH
44522: LD_VAR 0 5
44526: PPUSH
44527: LD_VAR 0 1
44531: PPUSH
44532: CALL_OW 248
44536: PPUSH
44537: LD_INT 0
44539: PPUSH
44540: CALL 45032 0 6
44544: ST_TO_ADDR
// if not hexes then
44545: LD_VAR 0 12
44549: NOT
44550: IFFALSE 44554
// exit ;
44552: GO 45027
// hex := GetHexInfo ( x , y ) ;
44554: LD_ADDR_VAR 0 15
44558: PUSH
44559: LD_VAR 0 3
44563: PPUSH
44564: LD_VAR 0 4
44568: PPUSH
44569: CALL_OW 546
44573: ST_TO_ADDR
// if hex [ 1 ] then
44574: LD_VAR 0 15
44578: PUSH
44579: LD_INT 1
44581: ARRAY
44582: IFFALSE 44586
// exit ;
44584: GO 45027
// height := hex [ 2 ] ;
44586: LD_ADDR_VAR 0 13
44590: PUSH
44591: LD_VAR 0 15
44595: PUSH
44596: LD_INT 2
44598: ARRAY
44599: ST_TO_ADDR
// for i = 1 to hexes do
44600: LD_ADDR_VAR 0 7
44604: PUSH
44605: DOUBLE
44606: LD_INT 1
44608: DEC
44609: ST_TO_ADDR
44610: LD_VAR 0 12
44614: PUSH
44615: FOR_TO
44616: IFFALSE 44946
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44618: LD_VAR 0 12
44622: PUSH
44623: LD_VAR 0 7
44627: ARRAY
44628: PUSH
44629: LD_INT 1
44631: ARRAY
44632: PPUSH
44633: LD_VAR 0 12
44637: PUSH
44638: LD_VAR 0 7
44642: ARRAY
44643: PUSH
44644: LD_INT 2
44646: ARRAY
44647: PPUSH
44648: CALL_OW 488
44652: NOT
44653: PUSH
44654: LD_VAR 0 12
44658: PUSH
44659: LD_VAR 0 7
44663: ARRAY
44664: PUSH
44665: LD_INT 1
44667: ARRAY
44668: PPUSH
44669: LD_VAR 0 12
44673: PUSH
44674: LD_VAR 0 7
44678: ARRAY
44679: PUSH
44680: LD_INT 2
44682: ARRAY
44683: PPUSH
44684: CALL_OW 428
44688: PUSH
44689: LD_INT 0
44691: GREATER
44692: OR
44693: PUSH
44694: LD_VAR 0 12
44698: PUSH
44699: LD_VAR 0 7
44703: ARRAY
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: LD_VAR 0 12
44713: PUSH
44714: LD_VAR 0 7
44718: ARRAY
44719: PUSH
44720: LD_INT 2
44722: ARRAY
44723: PPUSH
44724: CALL_OW 351
44728: OR
44729: IFFALSE 44735
// exit ;
44731: POP
44732: POP
44733: GO 45027
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44735: LD_ADDR_VAR 0 8
44739: PUSH
44740: LD_VAR 0 12
44744: PUSH
44745: LD_VAR 0 7
44749: ARRAY
44750: PUSH
44751: LD_INT 1
44753: ARRAY
44754: PPUSH
44755: LD_VAR 0 12
44759: PUSH
44760: LD_VAR 0 7
44764: ARRAY
44765: PUSH
44766: LD_INT 2
44768: ARRAY
44769: PPUSH
44770: CALL_OW 546
44774: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44775: LD_VAR 0 8
44779: PUSH
44780: LD_INT 1
44782: ARRAY
44783: PUSH
44784: LD_VAR 0 8
44788: PUSH
44789: LD_INT 2
44791: ARRAY
44792: PUSH
44793: LD_VAR 0 13
44797: PUSH
44798: LD_INT 2
44800: PLUS
44801: GREATER
44802: OR
44803: PUSH
44804: LD_VAR 0 8
44808: PUSH
44809: LD_INT 2
44811: ARRAY
44812: PUSH
44813: LD_VAR 0 13
44817: PUSH
44818: LD_INT 2
44820: MINUS
44821: LESS
44822: OR
44823: PUSH
44824: LD_VAR 0 8
44828: PUSH
44829: LD_INT 3
44831: ARRAY
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 8
44838: PUSH
44839: LD_INT 9
44841: PUSH
44842: LD_INT 10
44844: PUSH
44845: LD_INT 11
44847: PUSH
44848: LD_INT 12
44850: PUSH
44851: LD_INT 13
44853: PUSH
44854: LD_INT 16
44856: PUSH
44857: LD_INT 17
44859: PUSH
44860: LD_INT 18
44862: PUSH
44863: LD_INT 19
44865: PUSH
44866: LD_INT 20
44868: PUSH
44869: LD_INT 21
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: IN
44887: NOT
44888: OR
44889: PUSH
44890: LD_VAR 0 8
44894: PUSH
44895: LD_INT 5
44897: ARRAY
44898: NOT
44899: OR
44900: PUSH
44901: LD_VAR 0 8
44905: PUSH
44906: LD_INT 6
44908: ARRAY
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 7
44918: PUSH
44919: LD_INT 9
44921: PUSH
44922: LD_INT 10
44924: PUSH
44925: LD_INT 11
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: IN
44936: NOT
44937: OR
44938: IFFALSE 44944
// exit ;
44940: POP
44941: POP
44942: GO 45027
// end ;
44944: GO 44615
44946: POP
44947: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44948: LD_VAR 0 9
44952: PPUSH
44953: LD_VAR 0 3
44957: PPUSH
44958: LD_VAR 0 4
44962: PPUSH
44963: LD_INT 20
44965: PPUSH
44966: CALL 36950 0 4
44970: PUSH
44971: LD_INT 4
44973: ARRAY
44974: IFFALSE 44978
// exit ;
44976: GO 45027
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44978: LD_VAR 0 2
44982: PUSH
44983: LD_INT 29
44985: PUSH
44986: LD_INT 30
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: IN
44993: PUSH
44994: LD_VAR 0 3
44998: PPUSH
44999: LD_VAR 0 4
45003: PPUSH
45004: LD_VAR 0 9
45008: PPUSH
45009: CALL_OW 440
45013: NOT
45014: AND
45015: IFFALSE 45019
// exit ;
45017: GO 45027
// result := true ;
45019: LD_ADDR_VAR 0 6
45023: PUSH
45024: LD_INT 1
45026: ST_TO_ADDR
// end ;
45027: LD_VAR 0 6
45031: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45032: LD_INT 0
45034: PPUSH
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
45051: PPUSH
45052: PPUSH
45053: PPUSH
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
// result = [ ] ;
45092: LD_ADDR_VAR 0 7
45096: PUSH
45097: EMPTY
45098: ST_TO_ADDR
// temp_list = [ ] ;
45099: LD_ADDR_VAR 0 9
45103: PUSH
45104: EMPTY
45105: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45106: LD_VAR 0 4
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: LD_INT 4
45125: PUSH
45126: LD_INT 5
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: IN
45137: NOT
45138: PUSH
45139: LD_VAR 0 1
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: IN
45154: PUSH
45155: LD_VAR 0 5
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: LIST
45173: IN
45174: NOT
45175: AND
45176: OR
45177: IFFALSE 45181
// exit ;
45179: GO 63572
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45181: LD_VAR 0 1
45185: PUSH
45186: LD_INT 6
45188: PUSH
45189: LD_INT 7
45191: PUSH
45192: LD_INT 8
45194: PUSH
45195: LD_INT 13
45197: PUSH
45198: LD_INT 12
45200: PUSH
45201: LD_INT 15
45203: PUSH
45204: LD_INT 11
45206: PUSH
45207: LD_INT 14
45209: PUSH
45210: LD_INT 10
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: IN
45224: IFFALSE 45234
// btype = b_lab ;
45226: LD_ADDR_VAR 0 1
45230: PUSH
45231: LD_INT 6
45233: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45234: LD_VAR 0 6
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: IN
45253: NOT
45254: PUSH
45255: LD_VAR 0 1
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 6
45274: PUSH
45275: LD_INT 36
45277: PUSH
45278: LD_INT 4
45280: PUSH
45281: LD_INT 5
45283: PUSH
45284: LD_INT 31
45286: PUSH
45287: LD_INT 32
45289: PUSH
45290: LD_INT 33
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: IN
45306: NOT
45307: PUSH
45308: LD_VAR 0 6
45312: PUSH
45313: LD_INT 1
45315: EQUAL
45316: AND
45317: OR
45318: PUSH
45319: LD_VAR 0 1
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: IN
45334: NOT
45335: PUSH
45336: LD_VAR 0 6
45340: PUSH
45341: LD_INT 2
45343: EQUAL
45344: AND
45345: OR
45346: IFFALSE 45356
// mode = 0 ;
45348: LD_ADDR_VAR 0 6
45352: PUSH
45353: LD_INT 0
45355: ST_TO_ADDR
// case mode of 0 :
45356: LD_VAR 0 6
45360: PUSH
45361: LD_INT 0
45363: DOUBLE
45364: EQUAL
45365: IFTRUE 45369
45367: GO 56822
45369: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45370: LD_ADDR_VAR 0 11
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 3
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45563: LD_ADDR_VAR 0 12
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45759: LD_ADDR_VAR 0 13
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 3
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45958: LD_ADDR_VAR 0 14
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46154: LD_ADDR_VAR 0 15
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46347: LD_ADDR_VAR 0 16
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46540: LD_ADDR_VAR 0 17
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46770: LD_ADDR_VAR 0 18
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47000: LD_ADDR_VAR 0 19
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47230: LD_ADDR_VAR 0 20
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47460: LD_ADDR_VAR 0 21
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47690: LD_ADDR_VAR 0 22
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47920: LD_ADDR_VAR 0 23
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: LD_INT 3
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48200: LD_ADDR_VAR 0 24
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48476: LD_ADDR_VAR 0 25
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48750: LD_ADDR_VAR 0 26
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49026: LD_ADDR_VAR 0 27
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49306: LD_ADDR_VAR 0 28
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 3
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49588: LD_ADDR_VAR 0 29
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49867: LD_ADDR_VAR 0 30
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 3
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50145: LD_ADDR_VAR 0 31
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 3
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50423: LD_ADDR_VAR 0 32
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50701: LD_ADDR_VAR 0 33
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 3
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50980: LD_ADDR_VAR 0 34
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51260: LD_ADDR_VAR 0 35
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51372: LD_ADDR_VAR 0 36
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51484: LD_ADDR_VAR 0 37
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51596: LD_ADDR_VAR 0 38
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51708: LD_ADDR_VAR 0 39
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51820: LD_ADDR_VAR 0 40
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51932: LD_ADDR_VAR 0 41
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52282: LD_ADDR_VAR 0 42
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 3
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52632: LD_ADDR_VAR 0 43
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52980: LD_ADDR_VAR 0 44
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53330: LD_ADDR_VAR 0 45
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53680: LD_ADDR_VAR 0 46
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54028: LD_ADDR_VAR 0 47
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54179: LD_ADDR_VAR 0 48
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54326: LD_ADDR_VAR 0 49
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54470: LD_ADDR_VAR 0 50
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54614: LD_ADDR_VAR 0 51
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54761: LD_ADDR_VAR 0 52
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54912: LD_ADDR_VAR 0 53
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55142: LD_ADDR_VAR 0 54
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55372: LD_ADDR_VAR 0 55
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55602: LD_ADDR_VAR 0 56
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55832: LD_ADDR_VAR 0 57
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56062: LD_ADDR_VAR 0 58
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56292: LD_ADDR_VAR 0 59
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56380: LD_ADDR_VAR 0 60
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56468: LD_ADDR_VAR 0 61
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56556: LD_ADDR_VAR 0 62
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56644: LD_ADDR_VAR 0 63
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56732: LD_ADDR_VAR 0 64
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: ST_TO_ADDR
// end ; 1 :
56820: GO 62717
56822: LD_INT 1
56824: DOUBLE
56825: EQUAL
56826: IFTRUE 56830
56828: GO 59453
56830: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56831: LD_ADDR_VAR 0 11
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56875: LD_ADDR_VAR 0 12
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56916: LD_ADDR_VAR 0 13
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56956: LD_ADDR_VAR 0 14
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56997: LD_ADDR_VAR 0 15
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57041: LD_ADDR_VAR 0 16
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 3
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57087: LD_ADDR_VAR 0 17
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57131: LD_ADDR_VAR 0 18
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57172: LD_ADDR_VAR 0 19
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: LD_INT 3
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57212: LD_ADDR_VAR 0 20
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57253: LD_ADDR_VAR 0 21
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57297: LD_ADDR_VAR 0 22
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 3
57328: NEG
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57343: LD_ADDR_VAR 0 23
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57387: LD_ADDR_VAR 0 24
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 4
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57428: LD_ADDR_VAR 0 25
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: LD_INT 3
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57468: LD_ADDR_VAR 0 26
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57509: LD_ADDR_VAR 0 27
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 4
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57553: LD_ADDR_VAR 0 28
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: LD_INT 4
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 4
57584: NEG
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57599: LD_ADDR_VAR 0 29
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 4
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 5
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 5
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 4
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 6
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 6
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 5
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57754: LD_ADDR_VAR 0 30
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 5
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 5
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 5
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 6
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 6
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57897: LD_ADDR_VAR 0 31
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 4
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 4
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: LD_INT 4
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 5
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 5
57974: PUSH
57975: LD_INT 5
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: PUSH
57985: LD_INT 5
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 6
57994: PUSH
57995: LD_INT 5
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 6
58004: PUSH
58005: LD_INT 6
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 5
58014: PUSH
58015: LD_INT 6
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58036: LD_ADDR_VAR 0 32
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 4
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 4
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 5
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 5
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 4
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 6
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 6
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 5
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58179: LD_ADDR_VAR 0 33
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 4
58231: NEG
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 4
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 4
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 5
58265: NEG
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 5
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 6
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 6
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58334: LD_ADDR_VAR 0 34
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: LD_INT 4
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 4
58401: NEG
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 4
58413: NEG
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 5
58425: NEG
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 5
58437: NEG
58438: PUSH
58439: LD_INT 5
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 5
58449: NEG
58450: PUSH
58451: LD_INT 6
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 6
58461: NEG
58462: PUSH
58463: LD_INT 5
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 6
58473: NEG
58474: PUSH
58475: LD_INT 6
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58497: LD_ADDR_VAR 0 41
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58541: LD_ADDR_VAR 0 42
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58582: LD_ADDR_VAR 0 43
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: LD_INT 3
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58622: LD_ADDR_VAR 0 44
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58663: LD_ADDR_VAR 0 45
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58707: LD_ADDR_VAR 0 46
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: NEG
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58753: LD_ADDR_VAR 0 47
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58786: LD_ADDR_VAR 0 48
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58817: LD_ADDR_VAR 0 49
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58846: LD_ADDR_VAR 0 50
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58875: LD_ADDR_VAR 0 51
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58906: LD_ADDR_VAR 0 52
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58939: LD_ADDR_VAR 0 53
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58983: LD_ADDR_VAR 0 54
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: LIST
59023: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59024: LD_ADDR_VAR 0 55
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59064: LD_ADDR_VAR 0 56
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59105: LD_ADDR_VAR 0 57
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59149: LD_ADDR_VAR 0 58
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: NEG
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59195: LD_ADDR_VAR 0 59
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59239: LD_ADDR_VAR 0 60
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59280: LD_ADDR_VAR 0 61
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59320: LD_ADDR_VAR 0 62
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59361: LD_ADDR_VAR 0 63
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59405: LD_ADDR_VAR 0 64
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// end ; 2 :
59451: GO 62717
59453: LD_INT 2
59455: DOUBLE
59456: EQUAL
59457: IFTRUE 59461
59459: GO 62716
59461: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59462: LD_ADDR_VAR 0 29
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 4
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 5
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 5
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 5
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 4
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 4
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 5
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 5
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 4
59801: NEG
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 4
59824: NEG
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: NEG
59860: PUSH
59861: LD_INT 5
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: LD_INT 4
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: NEG
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 5
59907: NEG
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 5
59919: NEG
59920: PUSH
59921: LD_INT 5
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 5
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 5
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60000: LD_ADDR_VAR 0 30
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 4
60047: PUSH
60048: LD_INT 5
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 5
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 5
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 3
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 4
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 4
60190: NEG
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: NEG
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 5
60246: NEG
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 5
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: NEG
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 3
60304: NEG
60305: PUSH
60306: LD_INT 4
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: LD_INT 3
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: LD_INT 4
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 4
60388: NEG
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 4
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 4
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 5
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: LD_INT 5
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60547: LD_ADDR_VAR 0 31
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 5
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 3
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: LD_INT 5
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: NEG
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 4
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: LD_INT 4
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: LD_INT 5
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: LD_INT 4
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: LD_INT 3
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 5
60809: NEG
60810: PUSH
60811: LD_INT 4
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 5
60821: NEG
60822: PUSH
60823: LD_INT 5
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: LD_INT 5
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 5
60845: NEG
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 4
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 4
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 4
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 5
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 5
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 5
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61097: LD_ADDR_VAR 0 32
61101: PUSH
61102: LD_INT 4
61104: NEG
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: NEG
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 5
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 5
61183: NEG
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: NEG
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 4
61278: NEG
61279: PUSH
61280: LD_INT 4
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: LD_INT 4
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 4
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 5
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 4
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 4
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: LD_INT 5
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 3
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: LD_INT 5
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 4
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 4
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 4
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 5
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 5
61539: PUSH
61540: LD_INT 5
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: LD_INT 5
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 4
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 5
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: LD_INT 5
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61644: LD_ADDR_VAR 0 33
61648: PUSH
61649: LD_INT 4
61651: NEG
61652: PUSH
61653: LD_INT 4
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 4
61663: NEG
61664: PUSH
61665: LD_INT 5
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: LD_INT 4
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 4
61699: NEG
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 5
61711: NEG
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 5
61723: NEG
61724: PUSH
61725: LD_INT 5
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: LD_INT 5
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 5
61747: NEG
61748: PUSH
61749: LD_INT 3
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 3
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 4
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: LD_INT 4
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 5
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 5
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 3
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 5
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 4
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 4
61984: PUSH
61985: LD_INT 4
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 4
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 4
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 4
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 5
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 5
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 4
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 5
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62182: LD_ADDR_VAR 0 34
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: LD_INT 4
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 5
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 4
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: LD_INT 4
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 5
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 5
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 4
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 4
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 4
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 4
62384: PUSH
62385: LD_INT 4
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 4
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 5
62404: PUSH
62405: LD_INT 4
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 5
62414: PUSH
62415: LD_INT 5
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 4
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: LD_INT 4
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 5
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: LD_INT 5
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 3
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 4
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 4
62567: NEG
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 4
62578: NEG
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 3
62601: NEG
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 4
62612: NEG
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 5
62623: NEG
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 5
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 5
62646: NEG
62647: PUSH
62648: LD_INT 2
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: ST_TO_ADDR
// end ; end ;
62714: GO 62717
62716: POP
// case btype of b_depot , b_warehouse :
62717: LD_VAR 0 1
62721: PUSH
62722: LD_INT 0
62724: DOUBLE
62725: EQUAL
62726: IFTRUE 62736
62728: LD_INT 1
62730: DOUBLE
62731: EQUAL
62732: IFTRUE 62736
62734: GO 62937
62736: POP
// case nation of nation_american :
62737: LD_VAR 0 5
62741: PUSH
62742: LD_INT 1
62744: DOUBLE
62745: EQUAL
62746: IFTRUE 62750
62748: GO 62806
62750: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62751: LD_ADDR_VAR 0 9
62755: PUSH
62756: LD_VAR 0 11
62760: PUSH
62761: LD_VAR 0 12
62765: PUSH
62766: LD_VAR 0 13
62770: PUSH
62771: LD_VAR 0 14
62775: PUSH
62776: LD_VAR 0 15
62780: PUSH
62781: LD_VAR 0 16
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: LD_VAR 0 4
62798: PUSH
62799: LD_INT 1
62801: PLUS
62802: ARRAY
62803: ST_TO_ADDR
62804: GO 62935
62806: LD_INT 2
62808: DOUBLE
62809: EQUAL
62810: IFTRUE 62814
62812: GO 62870
62814: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62815: LD_ADDR_VAR 0 9
62819: PUSH
62820: LD_VAR 0 17
62824: PUSH
62825: LD_VAR 0 18
62829: PUSH
62830: LD_VAR 0 19
62834: PUSH
62835: LD_VAR 0 20
62839: PUSH
62840: LD_VAR 0 21
62844: PUSH
62845: LD_VAR 0 22
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: PUSH
62858: LD_VAR 0 4
62862: PUSH
62863: LD_INT 1
62865: PLUS
62866: ARRAY
62867: ST_TO_ADDR
62868: GO 62935
62870: LD_INT 3
62872: DOUBLE
62873: EQUAL
62874: IFTRUE 62878
62876: GO 62934
62878: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62879: LD_ADDR_VAR 0 9
62883: PUSH
62884: LD_VAR 0 23
62888: PUSH
62889: LD_VAR 0 24
62893: PUSH
62894: LD_VAR 0 25
62898: PUSH
62899: LD_VAR 0 26
62903: PUSH
62904: LD_VAR 0 27
62908: PUSH
62909: LD_VAR 0 28
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: PUSH
62922: LD_VAR 0 4
62926: PUSH
62927: LD_INT 1
62929: PLUS
62930: ARRAY
62931: ST_TO_ADDR
62932: GO 62935
62934: POP
62935: GO 63490
62937: LD_INT 2
62939: DOUBLE
62940: EQUAL
62941: IFTRUE 62951
62943: LD_INT 3
62945: DOUBLE
62946: EQUAL
62947: IFTRUE 62951
62949: GO 63007
62951: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62952: LD_ADDR_VAR 0 9
62956: PUSH
62957: LD_VAR 0 29
62961: PUSH
62962: LD_VAR 0 30
62966: PUSH
62967: LD_VAR 0 31
62971: PUSH
62972: LD_VAR 0 32
62976: PUSH
62977: LD_VAR 0 33
62981: PUSH
62982: LD_VAR 0 34
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: LD_VAR 0 4
62999: PUSH
63000: LD_INT 1
63002: PLUS
63003: ARRAY
63004: ST_TO_ADDR
63005: GO 63490
63007: LD_INT 16
63009: DOUBLE
63010: EQUAL
63011: IFTRUE 63069
63013: LD_INT 17
63015: DOUBLE
63016: EQUAL
63017: IFTRUE 63069
63019: LD_INT 18
63021: DOUBLE
63022: EQUAL
63023: IFTRUE 63069
63025: LD_INT 19
63027: DOUBLE
63028: EQUAL
63029: IFTRUE 63069
63031: LD_INT 22
63033: DOUBLE
63034: EQUAL
63035: IFTRUE 63069
63037: LD_INT 20
63039: DOUBLE
63040: EQUAL
63041: IFTRUE 63069
63043: LD_INT 21
63045: DOUBLE
63046: EQUAL
63047: IFTRUE 63069
63049: LD_INT 23
63051: DOUBLE
63052: EQUAL
63053: IFTRUE 63069
63055: LD_INT 24
63057: DOUBLE
63058: EQUAL
63059: IFTRUE 63069
63061: LD_INT 25
63063: DOUBLE
63064: EQUAL
63065: IFTRUE 63069
63067: GO 63125
63069: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63070: LD_ADDR_VAR 0 9
63074: PUSH
63075: LD_VAR 0 35
63079: PUSH
63080: LD_VAR 0 36
63084: PUSH
63085: LD_VAR 0 37
63089: PUSH
63090: LD_VAR 0 38
63094: PUSH
63095: LD_VAR 0 39
63099: PUSH
63100: LD_VAR 0 40
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: PUSH
63113: LD_VAR 0 4
63117: PUSH
63118: LD_INT 1
63120: PLUS
63121: ARRAY
63122: ST_TO_ADDR
63123: GO 63490
63125: LD_INT 6
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63181
63131: LD_INT 7
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63181
63137: LD_INT 8
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63181
63143: LD_INT 13
63145: DOUBLE
63146: EQUAL
63147: IFTRUE 63181
63149: LD_INT 12
63151: DOUBLE
63152: EQUAL
63153: IFTRUE 63181
63155: LD_INT 15
63157: DOUBLE
63158: EQUAL
63159: IFTRUE 63181
63161: LD_INT 11
63163: DOUBLE
63164: EQUAL
63165: IFTRUE 63181
63167: LD_INT 14
63169: DOUBLE
63170: EQUAL
63171: IFTRUE 63181
63173: LD_INT 10
63175: DOUBLE
63176: EQUAL
63177: IFTRUE 63181
63179: GO 63237
63181: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63182: LD_ADDR_VAR 0 9
63186: PUSH
63187: LD_VAR 0 41
63191: PUSH
63192: LD_VAR 0 42
63196: PUSH
63197: LD_VAR 0 43
63201: PUSH
63202: LD_VAR 0 44
63206: PUSH
63207: LD_VAR 0 45
63211: PUSH
63212: LD_VAR 0 46
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: PUSH
63225: LD_VAR 0 4
63229: PUSH
63230: LD_INT 1
63232: PLUS
63233: ARRAY
63234: ST_TO_ADDR
63235: GO 63490
63237: LD_INT 36
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63245
63243: GO 63301
63245: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63246: LD_ADDR_VAR 0 9
63250: PUSH
63251: LD_VAR 0 47
63255: PUSH
63256: LD_VAR 0 48
63260: PUSH
63261: LD_VAR 0 49
63265: PUSH
63266: LD_VAR 0 50
63270: PUSH
63271: LD_VAR 0 51
63275: PUSH
63276: LD_VAR 0 52
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: PUSH
63289: LD_VAR 0 4
63293: PUSH
63294: LD_INT 1
63296: PLUS
63297: ARRAY
63298: ST_TO_ADDR
63299: GO 63490
63301: LD_INT 4
63303: DOUBLE
63304: EQUAL
63305: IFTRUE 63327
63307: LD_INT 5
63309: DOUBLE
63310: EQUAL
63311: IFTRUE 63327
63313: LD_INT 34
63315: DOUBLE
63316: EQUAL
63317: IFTRUE 63327
63319: LD_INT 37
63321: DOUBLE
63322: EQUAL
63323: IFTRUE 63327
63325: GO 63383
63327: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63328: LD_ADDR_VAR 0 9
63332: PUSH
63333: LD_VAR 0 53
63337: PUSH
63338: LD_VAR 0 54
63342: PUSH
63343: LD_VAR 0 55
63347: PUSH
63348: LD_VAR 0 56
63352: PUSH
63353: LD_VAR 0 57
63357: PUSH
63358: LD_VAR 0 58
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: LD_VAR 0 4
63375: PUSH
63376: LD_INT 1
63378: PLUS
63379: ARRAY
63380: ST_TO_ADDR
63381: GO 63490
63383: LD_INT 31
63385: DOUBLE
63386: EQUAL
63387: IFTRUE 63433
63389: LD_INT 32
63391: DOUBLE
63392: EQUAL
63393: IFTRUE 63433
63395: LD_INT 33
63397: DOUBLE
63398: EQUAL
63399: IFTRUE 63433
63401: LD_INT 27
63403: DOUBLE
63404: EQUAL
63405: IFTRUE 63433
63407: LD_INT 26
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63433
63413: LD_INT 28
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63433
63419: LD_INT 29
63421: DOUBLE
63422: EQUAL
63423: IFTRUE 63433
63425: LD_INT 30
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63433
63431: GO 63489
63433: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63434: LD_ADDR_VAR 0 9
63438: PUSH
63439: LD_VAR 0 59
63443: PUSH
63444: LD_VAR 0 60
63448: PUSH
63449: LD_VAR 0 61
63453: PUSH
63454: LD_VAR 0 62
63458: PUSH
63459: LD_VAR 0 63
63463: PUSH
63464: LD_VAR 0 64
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: LD_VAR 0 4
63481: PUSH
63482: LD_INT 1
63484: PLUS
63485: ARRAY
63486: ST_TO_ADDR
63487: GO 63490
63489: POP
// temp_list2 = [ ] ;
63490: LD_ADDR_VAR 0 10
63494: PUSH
63495: EMPTY
63496: ST_TO_ADDR
// for i in temp_list do
63497: LD_ADDR_VAR 0 8
63501: PUSH
63502: LD_VAR 0 9
63506: PUSH
63507: FOR_IN
63508: IFFALSE 63560
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63510: LD_ADDR_VAR 0 10
63514: PUSH
63515: LD_VAR 0 10
63519: PUSH
63520: LD_VAR 0 8
63524: PUSH
63525: LD_INT 1
63527: ARRAY
63528: PUSH
63529: LD_VAR 0 2
63533: PLUS
63534: PUSH
63535: LD_VAR 0 8
63539: PUSH
63540: LD_INT 2
63542: ARRAY
63543: PUSH
63544: LD_VAR 0 3
63548: PLUS
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: EMPTY
63555: LIST
63556: ADD
63557: ST_TO_ADDR
63558: GO 63507
63560: POP
63561: POP
// result = temp_list2 ;
63562: LD_ADDR_VAR 0 7
63566: PUSH
63567: LD_VAR 0 10
63571: ST_TO_ADDR
// end ;
63572: LD_VAR 0 7
63576: RET
// export function EnemyInRange ( unit , dist ) ; begin
63577: LD_INT 0
63579: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63580: LD_ADDR_VAR 0 3
63584: PUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 255
63594: PPUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 250
63604: PPUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: CALL_OW 251
63614: PPUSH
63615: LD_VAR 0 2
63619: PPUSH
63620: CALL 36950 0 4
63624: PUSH
63625: LD_INT 4
63627: ARRAY
63628: ST_TO_ADDR
// end ;
63629: LD_VAR 0 3
63633: RET
// export function PlayerSeeMe ( unit ) ; begin
63634: LD_INT 0
63636: PPUSH
// result := See ( your_side , unit ) ;
63637: LD_ADDR_VAR 0 2
63641: PUSH
63642: LD_OWVAR 2
63646: PPUSH
63647: LD_VAR 0 1
63651: PPUSH
63652: CALL_OW 292
63656: ST_TO_ADDR
// end ;
63657: LD_VAR 0 2
63661: RET
// export function ReverseDir ( unit ) ; begin
63662: LD_INT 0
63664: PPUSH
// if not unit then
63665: LD_VAR 0 1
63669: NOT
63670: IFFALSE 63674
// exit ;
63672: GO 63697
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63674: LD_ADDR_VAR 0 2
63678: PUSH
63679: LD_VAR 0 1
63683: PPUSH
63684: CALL_OW 254
63688: PUSH
63689: LD_INT 3
63691: PLUS
63692: PUSH
63693: LD_INT 6
63695: MOD
63696: ST_TO_ADDR
// end ;
63697: LD_VAR 0 2
63701: RET
// export function ReverseArray ( array ) ; var i ; begin
63702: LD_INT 0
63704: PPUSH
63705: PPUSH
// if not array then
63706: LD_VAR 0 1
63710: NOT
63711: IFFALSE 63715
// exit ;
63713: GO 63770
// result := [ ] ;
63715: LD_ADDR_VAR 0 2
63719: PUSH
63720: EMPTY
63721: ST_TO_ADDR
// for i := array downto 1 do
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: DOUBLE
63728: LD_VAR 0 1
63732: INC
63733: ST_TO_ADDR
63734: LD_INT 1
63736: PUSH
63737: FOR_DOWNTO
63738: IFFALSE 63768
// result := Join ( result , array [ i ] ) ;
63740: LD_ADDR_VAR 0 2
63744: PUSH
63745: LD_VAR 0 2
63749: PPUSH
63750: LD_VAR 0 1
63754: PUSH
63755: LD_VAR 0 3
63759: ARRAY
63760: PPUSH
63761: CALL 68413 0 2
63765: ST_TO_ADDR
63766: GO 63737
63768: POP
63769: POP
// end ;
63770: LD_VAR 0 2
63774: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63775: LD_INT 0
63777: PPUSH
63778: PPUSH
63779: PPUSH
63780: PPUSH
63781: PPUSH
63782: PPUSH
// if not unit or not hexes then
63783: LD_VAR 0 1
63787: NOT
63788: PUSH
63789: LD_VAR 0 2
63793: NOT
63794: OR
63795: IFFALSE 63799
// exit ;
63797: GO 63922
// dist := 9999 ;
63799: LD_ADDR_VAR 0 5
63803: PUSH
63804: LD_INT 9999
63806: ST_TO_ADDR
// for i = 1 to hexes do
63807: LD_ADDR_VAR 0 4
63811: PUSH
63812: DOUBLE
63813: LD_INT 1
63815: DEC
63816: ST_TO_ADDR
63817: LD_VAR 0 2
63821: PUSH
63822: FOR_TO
63823: IFFALSE 63910
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63825: LD_ADDR_VAR 0 6
63829: PUSH
63830: LD_VAR 0 1
63834: PPUSH
63835: LD_VAR 0 2
63839: PUSH
63840: LD_VAR 0 4
63844: ARRAY
63845: PUSH
63846: LD_INT 1
63848: ARRAY
63849: PPUSH
63850: LD_VAR 0 2
63854: PUSH
63855: LD_VAR 0 4
63859: ARRAY
63860: PUSH
63861: LD_INT 2
63863: ARRAY
63864: PPUSH
63865: CALL_OW 297
63869: ST_TO_ADDR
// if tdist < dist then
63870: LD_VAR 0 6
63874: PUSH
63875: LD_VAR 0 5
63879: LESS
63880: IFFALSE 63908
// begin hex := hexes [ i ] ;
63882: LD_ADDR_VAR 0 8
63886: PUSH
63887: LD_VAR 0 2
63891: PUSH
63892: LD_VAR 0 4
63896: ARRAY
63897: ST_TO_ADDR
// dist := tdist ;
63898: LD_ADDR_VAR 0 5
63902: PUSH
63903: LD_VAR 0 6
63907: ST_TO_ADDR
// end ; end ;
63908: GO 63822
63910: POP
63911: POP
// result := hex ;
63912: LD_ADDR_VAR 0 3
63916: PUSH
63917: LD_VAR 0 8
63921: ST_TO_ADDR
// end ;
63922: LD_VAR 0 3
63926: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63927: LD_INT 0
63929: PPUSH
63930: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63931: LD_VAR 0 1
63935: NOT
63936: PUSH
63937: LD_VAR 0 1
63941: PUSH
63942: LD_INT 21
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 23
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PPUSH
63966: CALL_OW 69
63970: IN
63971: NOT
63972: OR
63973: IFFALSE 63977
// exit ;
63975: GO 64024
// for i = 1 to 3 do
63977: LD_ADDR_VAR 0 3
63981: PUSH
63982: DOUBLE
63983: LD_INT 1
63985: DEC
63986: ST_TO_ADDR
63987: LD_INT 3
63989: PUSH
63990: FOR_TO
63991: IFFALSE 64022
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 250
64002: PPUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL_OW 251
64012: PPUSH
64013: LD_INT 1
64015: PPUSH
64016: CALL_OW 453
64020: GO 63990
64022: POP
64023: POP
// end ;
64024: LD_VAR 0 2
64028: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64029: LD_INT 0
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64037: LD_VAR 0 1
64041: NOT
64042: PUSH
64043: LD_VAR 0 2
64047: NOT
64048: OR
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 314
64059: OR
64060: IFFALSE 64064
// exit ;
64062: GO 64531
// if GetLives ( i ) < 250 then
64064: LD_VAR 0 4
64068: PPUSH
64069: CALL_OW 256
64073: PUSH
64074: LD_INT 250
64076: LESS
64077: IFFALSE 64090
// begin ComAutodestruct ( i ) ;
64079: LD_VAR 0 4
64083: PPUSH
64084: CALL 63927 0 1
// exit ;
64088: GO 64531
// end ; x := GetX ( enemy_unit ) ;
64090: LD_ADDR_VAR 0 7
64094: PUSH
64095: LD_VAR 0 2
64099: PPUSH
64100: CALL_OW 250
64104: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64105: LD_ADDR_VAR 0 8
64109: PUSH
64110: LD_VAR 0 2
64114: PPUSH
64115: CALL_OW 251
64119: ST_TO_ADDR
// if not x or not y then
64120: LD_VAR 0 7
64124: NOT
64125: PUSH
64126: LD_VAR 0 8
64130: NOT
64131: OR
64132: IFFALSE 64136
// exit ;
64134: GO 64531
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64136: LD_ADDR_VAR 0 6
64140: PUSH
64141: LD_VAR 0 7
64145: PPUSH
64146: LD_INT 0
64148: PPUSH
64149: LD_INT 4
64151: PPUSH
64152: CALL_OW 272
64156: PUSH
64157: LD_VAR 0 8
64161: PPUSH
64162: LD_INT 0
64164: PPUSH
64165: LD_INT 4
64167: PPUSH
64168: CALL_OW 273
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_VAR 0 7
64181: PPUSH
64182: LD_INT 1
64184: PPUSH
64185: LD_INT 4
64187: PPUSH
64188: CALL_OW 272
64192: PUSH
64193: LD_VAR 0 8
64197: PPUSH
64198: LD_INT 1
64200: PPUSH
64201: LD_INT 4
64203: PPUSH
64204: CALL_OW 273
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_VAR 0 7
64217: PPUSH
64218: LD_INT 2
64220: PPUSH
64221: LD_INT 4
64223: PPUSH
64224: CALL_OW 272
64228: PUSH
64229: LD_VAR 0 8
64233: PPUSH
64234: LD_INT 2
64236: PPUSH
64237: LD_INT 4
64239: PPUSH
64240: CALL_OW 273
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_VAR 0 7
64253: PPUSH
64254: LD_INT 3
64256: PPUSH
64257: LD_INT 4
64259: PPUSH
64260: CALL_OW 272
64264: PUSH
64265: LD_VAR 0 8
64269: PPUSH
64270: LD_INT 3
64272: PPUSH
64273: LD_INT 4
64275: PPUSH
64276: CALL_OW 273
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_VAR 0 7
64289: PPUSH
64290: LD_INT 4
64292: PPUSH
64293: LD_INT 4
64295: PPUSH
64296: CALL_OW 272
64300: PUSH
64301: LD_VAR 0 8
64305: PPUSH
64306: LD_INT 4
64308: PPUSH
64309: LD_INT 4
64311: PPUSH
64312: CALL_OW 273
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_VAR 0 7
64325: PPUSH
64326: LD_INT 5
64328: PPUSH
64329: LD_INT 4
64331: PPUSH
64332: CALL_OW 272
64336: PUSH
64337: LD_VAR 0 8
64341: PPUSH
64342: LD_INT 5
64344: PPUSH
64345: LD_INT 4
64347: PPUSH
64348: CALL_OW 273
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: ST_TO_ADDR
// for i = tmp downto 1 do
64365: LD_ADDR_VAR 0 4
64369: PUSH
64370: DOUBLE
64371: LD_VAR 0 6
64375: INC
64376: ST_TO_ADDR
64377: LD_INT 1
64379: PUSH
64380: FOR_DOWNTO
64381: IFFALSE 64482
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64383: LD_VAR 0 6
64387: PUSH
64388: LD_VAR 0 4
64392: ARRAY
64393: PUSH
64394: LD_INT 1
64396: ARRAY
64397: PPUSH
64398: LD_VAR 0 6
64402: PUSH
64403: LD_VAR 0 4
64407: ARRAY
64408: PUSH
64409: LD_INT 2
64411: ARRAY
64412: PPUSH
64413: CALL_OW 488
64417: NOT
64418: PUSH
64419: LD_VAR 0 6
64423: PUSH
64424: LD_VAR 0 4
64428: ARRAY
64429: PUSH
64430: LD_INT 1
64432: ARRAY
64433: PPUSH
64434: LD_VAR 0 6
64438: PUSH
64439: LD_VAR 0 4
64443: ARRAY
64444: PUSH
64445: LD_INT 2
64447: ARRAY
64448: PPUSH
64449: CALL_OW 428
64453: PUSH
64454: LD_INT 0
64456: NONEQUAL
64457: OR
64458: IFFALSE 64480
// tmp := Delete ( tmp , i ) ;
64460: LD_ADDR_VAR 0 6
64464: PUSH
64465: LD_VAR 0 6
64469: PPUSH
64470: LD_VAR 0 4
64474: PPUSH
64475: CALL_OW 3
64479: ST_TO_ADDR
64480: GO 64380
64482: POP
64483: POP
// j := GetClosestHex ( unit , tmp ) ;
64484: LD_ADDR_VAR 0 5
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: LD_VAR 0 6
64498: PPUSH
64499: CALL 63775 0 2
64503: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64504: LD_VAR 0 1
64508: PPUSH
64509: LD_VAR 0 5
64513: PUSH
64514: LD_INT 1
64516: ARRAY
64517: PPUSH
64518: LD_VAR 0 5
64522: PUSH
64523: LD_INT 2
64525: ARRAY
64526: PPUSH
64527: CALL_OW 111
// end ;
64531: LD_VAR 0 3
64535: RET
// export function PrepareApemanSoldier ( ) ; begin
64536: LD_INT 0
64538: PPUSH
// uc_nation := 0 ;
64539: LD_ADDR_OWVAR 21
64543: PUSH
64544: LD_INT 0
64546: ST_TO_ADDR
// hc_sex := sex_male ;
64547: LD_ADDR_OWVAR 27
64551: PUSH
64552: LD_INT 1
64554: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64555: LD_ADDR_OWVAR 28
64559: PUSH
64560: LD_INT 15
64562: ST_TO_ADDR
// hc_gallery :=  ;
64563: LD_ADDR_OWVAR 33
64567: PUSH
64568: LD_STRING 
64570: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64571: LD_ADDR_OWVAR 31
64575: PUSH
64576: LD_INT 0
64578: PPUSH
64579: LD_INT 3
64581: PPUSH
64582: CALL_OW 12
64586: PUSH
64587: LD_INT 0
64589: PPUSH
64590: LD_INT 3
64592: PPUSH
64593: CALL_OW 12
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: ST_TO_ADDR
// end ;
64610: LD_VAR 0 1
64614: RET
// export function PrepareApemanEngineer ( ) ; begin
64615: LD_INT 0
64617: PPUSH
// uc_nation := 0 ;
64618: LD_ADDR_OWVAR 21
64622: PUSH
64623: LD_INT 0
64625: ST_TO_ADDR
// hc_sex := sex_male ;
64626: LD_ADDR_OWVAR 27
64630: PUSH
64631: LD_INT 1
64633: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64634: LD_ADDR_OWVAR 28
64638: PUSH
64639: LD_INT 16
64641: ST_TO_ADDR
// hc_gallery :=  ;
64642: LD_ADDR_OWVAR 33
64646: PUSH
64647: LD_STRING 
64649: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64650: LD_ADDR_OWVAR 31
64654: PUSH
64655: LD_INT 0
64657: PPUSH
64658: LD_INT 3
64660: PPUSH
64661: CALL_OW 12
64665: PUSH
64666: LD_INT 0
64668: PPUSH
64669: LD_INT 3
64671: PPUSH
64672: CALL_OW 12
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// end ;
64689: LD_VAR 0 1
64693: RET
// export function PrepareApeman ( agressivity ) ; begin
64694: LD_INT 0
64696: PPUSH
// uc_side := 0 ;
64697: LD_ADDR_OWVAR 20
64701: PUSH
64702: LD_INT 0
64704: ST_TO_ADDR
// uc_nation := 0 ;
64705: LD_ADDR_OWVAR 21
64709: PUSH
64710: LD_INT 0
64712: ST_TO_ADDR
// hc_sex := sex_male ;
64713: LD_ADDR_OWVAR 27
64717: PUSH
64718: LD_INT 1
64720: ST_TO_ADDR
// hc_class := class_apeman ;
64721: LD_ADDR_OWVAR 28
64725: PUSH
64726: LD_INT 12
64728: ST_TO_ADDR
// hc_gallery :=  ;
64729: LD_ADDR_OWVAR 33
64733: PUSH
64734: LD_STRING 
64736: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64737: LD_ADDR_OWVAR 35
64741: PUSH
64742: LD_VAR 0 1
64746: NEG
64747: PPUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 12
64757: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64758: LD_ADDR_OWVAR 31
64762: PUSH
64763: LD_INT 0
64765: PPUSH
64766: LD_INT 3
64768: PPUSH
64769: CALL_OW 12
64773: PUSH
64774: LD_INT 0
64776: PPUSH
64777: LD_INT 3
64779: PPUSH
64780: CALL_OW 12
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: ST_TO_ADDR
// end ;
64797: LD_VAR 0 2
64801: RET
// export function PrepareTiger ( agressivity ) ; begin
64802: LD_INT 0
64804: PPUSH
// uc_side := 0 ;
64805: LD_ADDR_OWVAR 20
64809: PUSH
64810: LD_INT 0
64812: ST_TO_ADDR
// uc_nation := 0 ;
64813: LD_ADDR_OWVAR 21
64817: PUSH
64818: LD_INT 0
64820: ST_TO_ADDR
// hc_class := class_tiger ;
64821: LD_ADDR_OWVAR 28
64825: PUSH
64826: LD_INT 14
64828: ST_TO_ADDR
// hc_gallery :=  ;
64829: LD_ADDR_OWVAR 33
64833: PUSH
64834: LD_STRING 
64836: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64837: LD_ADDR_OWVAR 35
64841: PUSH
64842: LD_VAR 0 1
64846: NEG
64847: PPUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 12
64857: ST_TO_ADDR
// end ;
64858: LD_VAR 0 2
64862: RET
// export function PrepareEnchidna ( ) ; begin
64863: LD_INT 0
64865: PPUSH
// uc_side := 0 ;
64866: LD_ADDR_OWVAR 20
64870: PUSH
64871: LD_INT 0
64873: ST_TO_ADDR
// uc_nation := 0 ;
64874: LD_ADDR_OWVAR 21
64878: PUSH
64879: LD_INT 0
64881: ST_TO_ADDR
// hc_class := class_baggie ;
64882: LD_ADDR_OWVAR 28
64886: PUSH
64887: LD_INT 13
64889: ST_TO_ADDR
// hc_gallery :=  ;
64890: LD_ADDR_OWVAR 33
64894: PUSH
64895: LD_STRING 
64897: ST_TO_ADDR
// end ;
64898: LD_VAR 0 1
64902: RET
// export function PrepareFrog ( ) ; begin
64903: LD_INT 0
64905: PPUSH
// uc_side := 0 ;
64906: LD_ADDR_OWVAR 20
64910: PUSH
64911: LD_INT 0
64913: ST_TO_ADDR
// uc_nation := 0 ;
64914: LD_ADDR_OWVAR 21
64918: PUSH
64919: LD_INT 0
64921: ST_TO_ADDR
// hc_class := class_frog ;
64922: LD_ADDR_OWVAR 28
64926: PUSH
64927: LD_INT 19
64929: ST_TO_ADDR
// hc_gallery :=  ;
64930: LD_ADDR_OWVAR 33
64934: PUSH
64935: LD_STRING 
64937: ST_TO_ADDR
// end ;
64938: LD_VAR 0 1
64942: RET
// export function PrepareFish ( ) ; begin
64943: LD_INT 0
64945: PPUSH
// uc_side := 0 ;
64946: LD_ADDR_OWVAR 20
64950: PUSH
64951: LD_INT 0
64953: ST_TO_ADDR
// uc_nation := 0 ;
64954: LD_ADDR_OWVAR 21
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// hc_class := class_fish ;
64962: LD_ADDR_OWVAR 28
64966: PUSH
64967: LD_INT 20
64969: ST_TO_ADDR
// hc_gallery :=  ;
64970: LD_ADDR_OWVAR 33
64974: PUSH
64975: LD_STRING 
64977: ST_TO_ADDR
// end ;
64978: LD_VAR 0 1
64982: RET
// export function PrepareBird ( ) ; begin
64983: LD_INT 0
64985: PPUSH
// uc_side := 0 ;
64986: LD_ADDR_OWVAR 20
64990: PUSH
64991: LD_INT 0
64993: ST_TO_ADDR
// uc_nation := 0 ;
64994: LD_ADDR_OWVAR 21
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// hc_class := class_phororhacos ;
65002: LD_ADDR_OWVAR 28
65006: PUSH
65007: LD_INT 18
65009: ST_TO_ADDR
// hc_gallery :=  ;
65010: LD_ADDR_OWVAR 33
65014: PUSH
65015: LD_STRING 
65017: ST_TO_ADDR
// end ;
65018: LD_VAR 0 1
65022: RET
// export function PrepareHorse ( ) ; begin
65023: LD_INT 0
65025: PPUSH
// uc_side := 0 ;
65026: LD_ADDR_OWVAR 20
65030: PUSH
65031: LD_INT 0
65033: ST_TO_ADDR
// uc_nation := 0 ;
65034: LD_ADDR_OWVAR 21
65038: PUSH
65039: LD_INT 0
65041: ST_TO_ADDR
// hc_class := class_horse ;
65042: LD_ADDR_OWVAR 28
65046: PUSH
65047: LD_INT 21
65049: ST_TO_ADDR
// hc_gallery :=  ;
65050: LD_ADDR_OWVAR 33
65054: PUSH
65055: LD_STRING 
65057: ST_TO_ADDR
// end ;
65058: LD_VAR 0 1
65062: RET
// export function PrepareMastodont ( ) ; begin
65063: LD_INT 0
65065: PPUSH
// uc_side := 0 ;
65066: LD_ADDR_OWVAR 20
65070: PUSH
65071: LD_INT 0
65073: ST_TO_ADDR
// uc_nation := 0 ;
65074: LD_ADDR_OWVAR 21
65078: PUSH
65079: LD_INT 0
65081: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65082: LD_ADDR_OWVAR 37
65086: PUSH
65087: LD_INT 31
65089: ST_TO_ADDR
// vc_control := control_rider ;
65090: LD_ADDR_OWVAR 38
65094: PUSH
65095: LD_INT 4
65097: ST_TO_ADDR
// end ;
65098: LD_VAR 0 1
65102: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65103: LD_INT 0
65105: PPUSH
65106: PPUSH
65107: PPUSH
// uc_side = 0 ;
65108: LD_ADDR_OWVAR 20
65112: PUSH
65113: LD_INT 0
65115: ST_TO_ADDR
// uc_nation = 0 ;
65116: LD_ADDR_OWVAR 21
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
// InitHc_All ( ) ;
65124: CALL_OW 584
// InitVc ;
65128: CALL_OW 20
// if mastodonts then
65132: LD_VAR 0 6
65136: IFFALSE 65203
// for i = 1 to mastodonts do
65138: LD_ADDR_VAR 0 11
65142: PUSH
65143: DOUBLE
65144: LD_INT 1
65146: DEC
65147: ST_TO_ADDR
65148: LD_VAR 0 6
65152: PUSH
65153: FOR_TO
65154: IFFALSE 65201
// begin vc_chassis := 31 ;
65156: LD_ADDR_OWVAR 37
65160: PUSH
65161: LD_INT 31
65163: ST_TO_ADDR
// vc_control := control_rider ;
65164: LD_ADDR_OWVAR 38
65168: PUSH
65169: LD_INT 4
65171: ST_TO_ADDR
// animal := CreateVehicle ;
65172: LD_ADDR_VAR 0 12
65176: PUSH
65177: CALL_OW 45
65181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65182: LD_VAR 0 12
65186: PPUSH
65187: LD_VAR 0 8
65191: PPUSH
65192: LD_INT 0
65194: PPUSH
65195: CALL 67331 0 3
// end ;
65199: GO 65153
65201: POP
65202: POP
// if horses then
65203: LD_VAR 0 5
65207: IFFALSE 65274
// for i = 1 to horses do
65209: LD_ADDR_VAR 0 11
65213: PUSH
65214: DOUBLE
65215: LD_INT 1
65217: DEC
65218: ST_TO_ADDR
65219: LD_VAR 0 5
65223: PUSH
65224: FOR_TO
65225: IFFALSE 65272
// begin hc_class := 21 ;
65227: LD_ADDR_OWVAR 28
65231: PUSH
65232: LD_INT 21
65234: ST_TO_ADDR
// hc_gallery :=  ;
65235: LD_ADDR_OWVAR 33
65239: PUSH
65240: LD_STRING 
65242: ST_TO_ADDR
// animal := CreateHuman ;
65243: LD_ADDR_VAR 0 12
65247: PUSH
65248: CALL_OW 44
65252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65253: LD_VAR 0 12
65257: PPUSH
65258: LD_VAR 0 8
65262: PPUSH
65263: LD_INT 0
65265: PPUSH
65266: CALL 67331 0 3
// end ;
65270: GO 65224
65272: POP
65273: POP
// if birds then
65274: LD_VAR 0 1
65278: IFFALSE 65345
// for i = 1 to birds do
65280: LD_ADDR_VAR 0 11
65284: PUSH
65285: DOUBLE
65286: LD_INT 1
65288: DEC
65289: ST_TO_ADDR
65290: LD_VAR 0 1
65294: PUSH
65295: FOR_TO
65296: IFFALSE 65343
// begin hc_class := 18 ;
65298: LD_ADDR_OWVAR 28
65302: PUSH
65303: LD_INT 18
65305: ST_TO_ADDR
// hc_gallery =  ;
65306: LD_ADDR_OWVAR 33
65310: PUSH
65311: LD_STRING 
65313: ST_TO_ADDR
// animal := CreateHuman ;
65314: LD_ADDR_VAR 0 12
65318: PUSH
65319: CALL_OW 44
65323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65324: LD_VAR 0 12
65328: PPUSH
65329: LD_VAR 0 8
65333: PPUSH
65334: LD_INT 0
65336: PPUSH
65337: CALL 67331 0 3
// end ;
65341: GO 65295
65343: POP
65344: POP
// if tigers then
65345: LD_VAR 0 2
65349: IFFALSE 65433
// for i = 1 to tigers do
65351: LD_ADDR_VAR 0 11
65355: PUSH
65356: DOUBLE
65357: LD_INT 1
65359: DEC
65360: ST_TO_ADDR
65361: LD_VAR 0 2
65365: PUSH
65366: FOR_TO
65367: IFFALSE 65431
// begin hc_class = class_tiger ;
65369: LD_ADDR_OWVAR 28
65373: PUSH
65374: LD_INT 14
65376: ST_TO_ADDR
// hc_gallery =  ;
65377: LD_ADDR_OWVAR 33
65381: PUSH
65382: LD_STRING 
65384: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65385: LD_ADDR_OWVAR 35
65389: PUSH
65390: LD_INT 7
65392: NEG
65393: PPUSH
65394: LD_INT 7
65396: PPUSH
65397: CALL_OW 12
65401: ST_TO_ADDR
// animal := CreateHuman ;
65402: LD_ADDR_VAR 0 12
65406: PUSH
65407: CALL_OW 44
65411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65412: LD_VAR 0 12
65416: PPUSH
65417: LD_VAR 0 8
65421: PPUSH
65422: LD_INT 0
65424: PPUSH
65425: CALL 67331 0 3
// end ;
65429: GO 65366
65431: POP
65432: POP
// if apemans then
65433: LD_VAR 0 3
65437: IFFALSE 65560
// for i = 1 to apemans do
65439: LD_ADDR_VAR 0 11
65443: PUSH
65444: DOUBLE
65445: LD_INT 1
65447: DEC
65448: ST_TO_ADDR
65449: LD_VAR 0 3
65453: PUSH
65454: FOR_TO
65455: IFFALSE 65558
// begin hc_class = class_apeman ;
65457: LD_ADDR_OWVAR 28
65461: PUSH
65462: LD_INT 12
65464: ST_TO_ADDR
// hc_gallery =  ;
65465: LD_ADDR_OWVAR 33
65469: PUSH
65470: LD_STRING 
65472: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65473: LD_ADDR_OWVAR 35
65477: PUSH
65478: LD_INT 2
65480: NEG
65481: PPUSH
65482: LD_INT 2
65484: PPUSH
65485: CALL_OW 12
65489: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65490: LD_ADDR_OWVAR 31
65494: PUSH
65495: LD_INT 1
65497: PPUSH
65498: LD_INT 3
65500: PPUSH
65501: CALL_OW 12
65505: PUSH
65506: LD_INT 1
65508: PPUSH
65509: LD_INT 3
65511: PPUSH
65512: CALL_OW 12
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: ST_TO_ADDR
// animal := CreateHuman ;
65529: LD_ADDR_VAR 0 12
65533: PUSH
65534: CALL_OW 44
65538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65539: LD_VAR 0 12
65543: PPUSH
65544: LD_VAR 0 8
65548: PPUSH
65549: LD_INT 0
65551: PPUSH
65552: CALL 67331 0 3
// end ;
65556: GO 65454
65558: POP
65559: POP
// if enchidnas then
65560: LD_VAR 0 4
65564: IFFALSE 65631
// for i = 1 to enchidnas do
65566: LD_ADDR_VAR 0 11
65570: PUSH
65571: DOUBLE
65572: LD_INT 1
65574: DEC
65575: ST_TO_ADDR
65576: LD_VAR 0 4
65580: PUSH
65581: FOR_TO
65582: IFFALSE 65629
// begin hc_class = 13 ;
65584: LD_ADDR_OWVAR 28
65588: PUSH
65589: LD_INT 13
65591: ST_TO_ADDR
// hc_gallery =  ;
65592: LD_ADDR_OWVAR 33
65596: PUSH
65597: LD_STRING 
65599: ST_TO_ADDR
// animal := CreateHuman ;
65600: LD_ADDR_VAR 0 12
65604: PUSH
65605: CALL_OW 44
65609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65610: LD_VAR 0 12
65614: PPUSH
65615: LD_VAR 0 8
65619: PPUSH
65620: LD_INT 0
65622: PPUSH
65623: CALL 67331 0 3
// end ;
65627: GO 65581
65629: POP
65630: POP
// if fishes then
65631: LD_VAR 0 7
65635: IFFALSE 65702
// for i = 1 to fishes do
65637: LD_ADDR_VAR 0 11
65641: PUSH
65642: DOUBLE
65643: LD_INT 1
65645: DEC
65646: ST_TO_ADDR
65647: LD_VAR 0 7
65651: PUSH
65652: FOR_TO
65653: IFFALSE 65700
// begin hc_class = 20 ;
65655: LD_ADDR_OWVAR 28
65659: PUSH
65660: LD_INT 20
65662: ST_TO_ADDR
// hc_gallery =  ;
65663: LD_ADDR_OWVAR 33
65667: PUSH
65668: LD_STRING 
65670: ST_TO_ADDR
// animal := CreateHuman ;
65671: LD_ADDR_VAR 0 12
65675: PUSH
65676: CALL_OW 44
65680: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65681: LD_VAR 0 12
65685: PPUSH
65686: LD_VAR 0 9
65690: PPUSH
65691: LD_INT 0
65693: PPUSH
65694: CALL 67331 0 3
// end ;
65698: GO 65652
65700: POP
65701: POP
// end ;
65702: LD_VAR 0 10
65706: RET
// export function WantHeal ( sci , unit ) ; begin
65707: LD_INT 0
65709: PPUSH
// if GetTaskList ( sci ) > 0 then
65710: LD_VAR 0 1
65714: PPUSH
65715: CALL_OW 437
65719: PUSH
65720: LD_INT 0
65722: GREATER
65723: IFFALSE 65793
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65725: LD_VAR 0 1
65729: PPUSH
65730: CALL_OW 437
65734: PUSH
65735: LD_INT 1
65737: ARRAY
65738: PUSH
65739: LD_INT 1
65741: ARRAY
65742: PUSH
65743: LD_STRING l
65745: EQUAL
65746: PUSH
65747: LD_VAR 0 1
65751: PPUSH
65752: CALL_OW 437
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: PUSH
65761: LD_INT 4
65763: ARRAY
65764: PUSH
65765: LD_VAR 0 2
65769: EQUAL
65770: AND
65771: IFFALSE 65783
// result := true else
65773: LD_ADDR_VAR 0 3
65777: PUSH
65778: LD_INT 1
65780: ST_TO_ADDR
65781: GO 65791
// result := false ;
65783: LD_ADDR_VAR 0 3
65787: PUSH
65788: LD_INT 0
65790: ST_TO_ADDR
// end else
65791: GO 65801
// result := false ;
65793: LD_ADDR_VAR 0 3
65797: PUSH
65798: LD_INT 0
65800: ST_TO_ADDR
// end ;
65801: LD_VAR 0 3
65805: RET
// export function HealTarget ( sci ) ; begin
65806: LD_INT 0
65808: PPUSH
// if not sci then
65809: LD_VAR 0 1
65813: NOT
65814: IFFALSE 65818
// exit ;
65816: GO 65883
// result := 0 ;
65818: LD_ADDR_VAR 0 2
65822: PUSH
65823: LD_INT 0
65825: ST_TO_ADDR
// if GetTaskList ( sci ) then
65826: LD_VAR 0 1
65830: PPUSH
65831: CALL_OW 437
65835: IFFALSE 65883
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65837: LD_VAR 0 1
65841: PPUSH
65842: CALL_OW 437
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: PUSH
65851: LD_INT 1
65853: ARRAY
65854: PUSH
65855: LD_STRING l
65857: EQUAL
65858: IFFALSE 65883
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65860: LD_ADDR_VAR 0 2
65864: PUSH
65865: LD_VAR 0 1
65869: PPUSH
65870: CALL_OW 437
65874: PUSH
65875: LD_INT 1
65877: ARRAY
65878: PUSH
65879: LD_INT 4
65881: ARRAY
65882: ST_TO_ADDR
// end ;
65883: LD_VAR 0 2
65887: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65888: LD_INT 0
65890: PPUSH
65891: PPUSH
65892: PPUSH
65893: PPUSH
// if not base_units then
65894: LD_VAR 0 1
65898: NOT
65899: IFFALSE 65903
// exit ;
65901: GO 65990
// result := false ;
65903: LD_ADDR_VAR 0 2
65907: PUSH
65908: LD_INT 0
65910: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65911: LD_ADDR_VAR 0 5
65915: PUSH
65916: LD_VAR 0 1
65920: PPUSH
65921: LD_INT 21
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PPUSH
65931: CALL_OW 72
65935: ST_TO_ADDR
// if not tmp then
65936: LD_VAR 0 5
65940: NOT
65941: IFFALSE 65945
// exit ;
65943: GO 65990
// for i in tmp do
65945: LD_ADDR_VAR 0 3
65949: PUSH
65950: LD_VAR 0 5
65954: PUSH
65955: FOR_IN
65956: IFFALSE 65988
// begin result := EnemyInRange ( i , 22 ) ;
65958: LD_ADDR_VAR 0 2
65962: PUSH
65963: LD_VAR 0 3
65967: PPUSH
65968: LD_INT 22
65970: PPUSH
65971: CALL 63577 0 2
65975: ST_TO_ADDR
// if result then
65976: LD_VAR 0 2
65980: IFFALSE 65986
// exit ;
65982: POP
65983: POP
65984: GO 65990
// end ;
65986: GO 65955
65988: POP
65989: POP
// end ;
65990: LD_VAR 0 2
65994: RET
// export function FilterByTag ( units , tag ) ; begin
65995: LD_INT 0
65997: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65998: LD_ADDR_VAR 0 3
66002: PUSH
66003: LD_VAR 0 1
66007: PPUSH
66008: LD_INT 120
66010: PUSH
66011: LD_VAR 0 2
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 72
66024: ST_TO_ADDR
// end ;
66025: LD_VAR 0 3
66029: RET
// export function IsDriver ( un ) ; begin
66030: LD_INT 0
66032: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66033: LD_ADDR_VAR 0 2
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 55
66045: PUSH
66046: EMPTY
66047: LIST
66048: PPUSH
66049: CALL_OW 69
66053: IN
66054: ST_TO_ADDR
// end ;
66055: LD_VAR 0 2
66059: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66060: LD_INT 0
66062: PPUSH
66063: PPUSH
// list := [ ] ;
66064: LD_ADDR_VAR 0 5
66068: PUSH
66069: EMPTY
66070: ST_TO_ADDR
// case d of 0 :
66071: LD_VAR 0 3
66075: PUSH
66076: LD_INT 0
66078: DOUBLE
66079: EQUAL
66080: IFTRUE 66084
66082: GO 66217
66084: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66085: LD_ADDR_VAR 0 5
66089: PUSH
66090: LD_VAR 0 1
66094: PUSH
66095: LD_INT 4
66097: MINUS
66098: PUSH
66099: LD_VAR 0 2
66103: PUSH
66104: LD_INT 4
66106: MINUS
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: LIST
66115: PUSH
66116: LD_VAR 0 1
66120: PUSH
66121: LD_INT 3
66123: MINUS
66124: PUSH
66125: LD_VAR 0 2
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: PUSH
66138: LD_VAR 0 1
66142: PUSH
66143: LD_INT 4
66145: PLUS
66146: PUSH
66147: LD_VAR 0 2
66151: PUSH
66152: LD_INT 4
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: LIST
66159: PUSH
66160: LD_VAR 0 1
66164: PUSH
66165: LD_INT 3
66167: PLUS
66168: PUSH
66169: LD_VAR 0 2
66173: PUSH
66174: LD_INT 3
66176: PLUS
66177: PUSH
66178: LD_INT 5
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: PUSH
66186: LD_VAR 0 1
66190: PUSH
66191: LD_VAR 0 2
66195: PUSH
66196: LD_INT 4
66198: PLUS
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: ST_TO_ADDR
// end ; 1 :
66215: GO 66915
66217: LD_INT 1
66219: DOUBLE
66220: EQUAL
66221: IFTRUE 66225
66223: GO 66358
66225: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66226: LD_ADDR_VAR 0 5
66230: PUSH
66231: LD_VAR 0 1
66235: PUSH
66236: LD_VAR 0 2
66240: PUSH
66241: LD_INT 4
66243: MINUS
66244: PUSH
66245: LD_INT 3
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: PUSH
66253: LD_VAR 0 1
66257: PUSH
66258: LD_INT 3
66260: MINUS
66261: PUSH
66262: LD_VAR 0 2
66266: PUSH
66267: LD_INT 3
66269: MINUS
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: LIST
66278: PUSH
66279: LD_VAR 0 1
66283: PUSH
66284: LD_INT 4
66286: MINUS
66287: PUSH
66288: LD_VAR 0 2
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: LD_VAR 0 1
66305: PUSH
66306: LD_VAR 0 2
66310: PUSH
66311: LD_INT 3
66313: PLUS
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: PUSH
66323: LD_VAR 0 1
66327: PUSH
66328: LD_INT 4
66330: PLUS
66331: PUSH
66332: LD_VAR 0 2
66336: PUSH
66337: LD_INT 4
66339: PLUS
66340: PUSH
66341: LD_INT 5
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: LIST
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// end ; 2 :
66356: GO 66915
66358: LD_INT 2
66360: DOUBLE
66361: EQUAL
66362: IFTRUE 66366
66364: GO 66495
66366: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66367: LD_ADDR_VAR 0 5
66371: PUSH
66372: LD_VAR 0 1
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: LD_INT 3
66384: MINUS
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: PUSH
66394: LD_VAR 0 1
66398: PUSH
66399: LD_INT 4
66401: PLUS
66402: PUSH
66403: LD_VAR 0 2
66407: PUSH
66408: LD_INT 4
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: PUSH
66416: LD_VAR 0 1
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_INT 4
66428: PLUS
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: LD_INT 3
66445: MINUS
66446: PUSH
66447: LD_VAR 0 2
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: PUSH
66460: LD_VAR 0 1
66464: PUSH
66465: LD_INT 4
66467: MINUS
66468: PUSH
66469: LD_VAR 0 2
66473: PUSH
66474: LD_INT 4
66476: MINUS
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// end ; 3 :
66493: GO 66915
66495: LD_INT 3
66497: DOUBLE
66498: EQUAL
66499: IFTRUE 66503
66501: GO 66636
66503: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66504: LD_ADDR_VAR 0 5
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: LD_INT 3
66516: PLUS
66517: PUSH
66518: LD_VAR 0 2
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: LIST
66530: PUSH
66531: LD_VAR 0 1
66535: PUSH
66536: LD_INT 4
66538: PLUS
66539: PUSH
66540: LD_VAR 0 2
66544: PUSH
66545: LD_INT 4
66547: PLUS
66548: PUSH
66549: LD_INT 5
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: PUSH
66557: LD_VAR 0 1
66561: PUSH
66562: LD_INT 4
66564: MINUS
66565: PUSH
66566: LD_VAR 0 2
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: PUSH
66579: LD_VAR 0 1
66583: PUSH
66584: LD_VAR 0 2
66588: PUSH
66589: LD_INT 4
66591: MINUS
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: LIST
66600: PUSH
66601: LD_VAR 0 1
66605: PUSH
66606: LD_INT 3
66608: MINUS
66609: PUSH
66610: LD_VAR 0 2
66614: PUSH
66615: LD_INT 3
66617: MINUS
66618: PUSH
66619: LD_INT 2
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// end ; 4 :
66634: GO 66915
66636: LD_INT 4
66638: DOUBLE
66639: EQUAL
66640: IFTRUE 66644
66642: GO 66777
66644: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66645: LD_ADDR_VAR 0 5
66649: PUSH
66650: LD_VAR 0 1
66654: PUSH
66655: LD_VAR 0 2
66659: PUSH
66660: LD_INT 4
66662: PLUS
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_VAR 0 1
66676: PUSH
66677: LD_INT 3
66679: PLUS
66680: PUSH
66681: LD_VAR 0 2
66685: PUSH
66686: LD_INT 3
66688: PLUS
66689: PUSH
66690: LD_INT 5
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: PUSH
66698: LD_VAR 0 1
66702: PUSH
66703: LD_INT 4
66705: PLUS
66706: PUSH
66707: LD_VAR 0 2
66711: PUSH
66712: LD_INT 4
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: PUSH
66720: LD_VAR 0 1
66724: PUSH
66725: LD_VAR 0 2
66729: PUSH
66730: LD_INT 3
66732: MINUS
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: LIST
66741: PUSH
66742: LD_VAR 0 1
66746: PUSH
66747: LD_INT 4
66749: MINUS
66750: PUSH
66751: LD_VAR 0 2
66755: PUSH
66756: LD_INT 4
66758: MINUS
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: ST_TO_ADDR
// end ; 5 :
66775: GO 66915
66777: LD_INT 5
66779: DOUBLE
66780: EQUAL
66781: IFTRUE 66785
66783: GO 66914
66785: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66786: LD_ADDR_VAR 0 5
66790: PUSH
66791: LD_VAR 0 1
66795: PUSH
66796: LD_INT 4
66798: MINUS
66799: PUSH
66800: LD_VAR 0 2
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: LIST
66812: PUSH
66813: LD_VAR 0 1
66817: PUSH
66818: LD_VAR 0 2
66822: PUSH
66823: LD_INT 4
66825: MINUS
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: PUSH
66835: LD_VAR 0 1
66839: PUSH
66840: LD_INT 4
66842: PLUS
66843: PUSH
66844: LD_VAR 0 2
66848: PUSH
66849: LD_INT 4
66851: PLUS
66852: PUSH
66853: LD_INT 5
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: PUSH
66861: LD_VAR 0 1
66865: PUSH
66866: LD_INT 3
66868: PLUS
66869: PUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: PUSH
66883: LD_VAR 0 1
66887: PUSH
66888: LD_VAR 0 2
66892: PUSH
66893: LD_INT 3
66895: PLUS
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: ST_TO_ADDR
// end ; end ;
66912: GO 66915
66914: POP
// result := list ;
66915: LD_ADDR_VAR 0 4
66919: PUSH
66920: LD_VAR 0 5
66924: ST_TO_ADDR
// end ;
66925: LD_VAR 0 4
66929: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66930: LD_INT 0
66932: PPUSH
66933: PPUSH
66934: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66935: LD_VAR 0 1
66939: NOT
66940: PUSH
66941: LD_VAR 0 2
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: IN
66964: NOT
66965: OR
66966: IFFALSE 66970
// exit ;
66968: GO 67053
// tmp := [ ] ;
66970: LD_ADDR_VAR 0 5
66974: PUSH
66975: EMPTY
66976: ST_TO_ADDR
// for i in units do
66977: LD_ADDR_VAR 0 4
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: FOR_IN
66988: IFFALSE 67022
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66990: LD_ADDR_VAR 0 5
66994: PUSH
66995: LD_VAR 0 5
66999: PPUSH
67000: LD_VAR 0 4
67004: PPUSH
67005: LD_VAR 0 2
67009: PPUSH
67010: CALL_OW 259
67014: PPUSH
67015: CALL 68413 0 2
67019: ST_TO_ADDR
67020: GO 66987
67022: POP
67023: POP
// if not tmp then
67024: LD_VAR 0 5
67028: NOT
67029: IFFALSE 67033
// exit ;
67031: GO 67053
// result := SortListByListDesc ( units , tmp ) ;
67033: LD_ADDR_VAR 0 3
67037: PUSH
67038: LD_VAR 0 1
67042: PPUSH
67043: LD_VAR 0 5
67047: PPUSH
67048: CALL_OW 77
67052: ST_TO_ADDR
// end ;
67053: LD_VAR 0 3
67057: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67058: LD_INT 0
67060: PPUSH
67061: PPUSH
67062: PPUSH
// result := false ;
67063: LD_ADDR_VAR 0 3
67067: PUSH
67068: LD_INT 0
67070: ST_TO_ADDR
// if not building then
67071: LD_VAR 0 2
67075: NOT
67076: IFFALSE 67080
// exit ;
67078: GO 67218
// x := GetX ( building ) ;
67080: LD_ADDR_VAR 0 4
67084: PUSH
67085: LD_VAR 0 2
67089: PPUSH
67090: CALL_OW 250
67094: ST_TO_ADDR
// y := GetY ( building ) ;
67095: LD_ADDR_VAR 0 5
67099: PUSH
67100: LD_VAR 0 2
67104: PPUSH
67105: CALL_OW 251
67109: ST_TO_ADDR
// if not x or not y then
67110: LD_VAR 0 4
67114: NOT
67115: PUSH
67116: LD_VAR 0 5
67120: NOT
67121: OR
67122: IFFALSE 67126
// exit ;
67124: GO 67218
// if GetTaskList ( unit ) then
67126: LD_VAR 0 1
67130: PPUSH
67131: CALL_OW 437
67135: IFFALSE 67218
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67137: LD_STRING e
67139: PUSH
67140: LD_VAR 0 1
67144: PPUSH
67145: CALL_OW 437
67149: PUSH
67150: LD_INT 1
67152: ARRAY
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: EQUAL
67158: PUSH
67159: LD_VAR 0 4
67163: PUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: CALL_OW 437
67173: PUSH
67174: LD_INT 1
67176: ARRAY
67177: PUSH
67178: LD_INT 2
67180: ARRAY
67181: EQUAL
67182: AND
67183: PUSH
67184: LD_VAR 0 5
67188: PUSH
67189: LD_VAR 0 1
67193: PPUSH
67194: CALL_OW 437
67198: PUSH
67199: LD_INT 1
67201: ARRAY
67202: PUSH
67203: LD_INT 3
67205: ARRAY
67206: EQUAL
67207: AND
67208: IFFALSE 67218
// result := true end ;
67210: LD_ADDR_VAR 0 3
67214: PUSH
67215: LD_INT 1
67217: ST_TO_ADDR
// end ;
67218: LD_VAR 0 3
67222: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67223: LD_INT 0
67225: PPUSH
// result := false ;
67226: LD_ADDR_VAR 0 4
67230: PUSH
67231: LD_INT 0
67233: ST_TO_ADDR
// if GetTaskList ( unit ) then
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 437
67243: IFFALSE 67326
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67245: LD_STRING M
67247: PUSH
67248: LD_VAR 0 1
67252: PPUSH
67253: CALL_OW 437
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PUSH
67262: LD_INT 1
67264: ARRAY
67265: EQUAL
67266: PUSH
67267: LD_VAR 0 2
67271: PUSH
67272: LD_VAR 0 1
67276: PPUSH
67277: CALL_OW 437
67281: PUSH
67282: LD_INT 1
67284: ARRAY
67285: PUSH
67286: LD_INT 2
67288: ARRAY
67289: EQUAL
67290: AND
67291: PUSH
67292: LD_VAR 0 3
67296: PUSH
67297: LD_VAR 0 1
67301: PPUSH
67302: CALL_OW 437
67306: PUSH
67307: LD_INT 1
67309: ARRAY
67310: PUSH
67311: LD_INT 3
67313: ARRAY
67314: EQUAL
67315: AND
67316: IFFALSE 67326
// result := true ;
67318: LD_ADDR_VAR 0 4
67322: PUSH
67323: LD_INT 1
67325: ST_TO_ADDR
// end ; end ;
67326: LD_VAR 0 4
67330: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67331: LD_INT 0
67333: PPUSH
67334: PPUSH
67335: PPUSH
67336: PPUSH
// if not unit or not area then
67337: LD_VAR 0 1
67341: NOT
67342: PUSH
67343: LD_VAR 0 2
67347: NOT
67348: OR
67349: IFFALSE 67353
// exit ;
67351: GO 67516
// tmp := AreaToList ( area , i ) ;
67353: LD_ADDR_VAR 0 6
67357: PUSH
67358: LD_VAR 0 2
67362: PPUSH
67363: LD_VAR 0 5
67367: PPUSH
67368: CALL_OW 517
67372: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67373: LD_ADDR_VAR 0 5
67377: PUSH
67378: DOUBLE
67379: LD_INT 1
67381: DEC
67382: ST_TO_ADDR
67383: LD_VAR 0 6
67387: PUSH
67388: LD_INT 1
67390: ARRAY
67391: PUSH
67392: FOR_TO
67393: IFFALSE 67514
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67395: LD_ADDR_VAR 0 7
67399: PUSH
67400: LD_VAR 0 6
67404: PUSH
67405: LD_INT 1
67407: ARRAY
67408: PUSH
67409: LD_VAR 0 5
67413: ARRAY
67414: PUSH
67415: LD_VAR 0 6
67419: PUSH
67420: LD_INT 2
67422: ARRAY
67423: PUSH
67424: LD_VAR 0 5
67428: ARRAY
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67434: LD_INT 92
67436: PUSH
67437: LD_VAR 0 7
67441: PUSH
67442: LD_INT 1
67444: ARRAY
67445: PUSH
67446: LD_VAR 0 7
67450: PUSH
67451: LD_INT 2
67453: ARRAY
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: PPUSH
67464: CALL_OW 69
67468: PUSH
67469: LD_INT 0
67471: EQUAL
67472: IFFALSE 67512
// begin PlaceUnitArea ( unit , area , mode ) ;
67474: LD_VAR 0 1
67478: PPUSH
67479: LD_VAR 0 2
67483: PPUSH
67484: LD_VAR 0 3
67488: PPUSH
67489: CALL_OW 49
// result := IsPlaced ( unit ) ;
67493: LD_ADDR_VAR 0 4
67497: PUSH
67498: LD_VAR 0 1
67502: PPUSH
67503: CALL_OW 305
67507: ST_TO_ADDR
// exit ;
67508: POP
67509: POP
67510: GO 67516
// end ; end ;
67512: GO 67392
67514: POP
67515: POP
// end ;
67516: LD_VAR 0 4
67520: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67521: LD_INT 0
67523: PPUSH
67524: PPUSH
67525: PPUSH
// if not side or side > 8 then
67526: LD_VAR 0 1
67530: NOT
67531: PUSH
67532: LD_VAR 0 1
67536: PUSH
67537: LD_INT 8
67539: GREATER
67540: OR
67541: IFFALSE 67545
// exit ;
67543: GO 67732
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67545: LD_ADDR_VAR 0 4
67549: PUSH
67550: LD_INT 22
67552: PUSH
67553: LD_VAR 0 1
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 21
67564: PUSH
67565: LD_INT 3
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PPUSH
67576: CALL_OW 69
67580: ST_TO_ADDR
// if not tmp then
67581: LD_VAR 0 4
67585: NOT
67586: IFFALSE 67590
// exit ;
67588: GO 67732
// enable_addtolog := true ;
67590: LD_ADDR_OWVAR 81
67594: PUSH
67595: LD_INT 1
67597: ST_TO_ADDR
// AddToLog ( [ ) ;
67598: LD_STRING [
67600: PPUSH
67601: CALL_OW 561
// for i in tmp do
67605: LD_ADDR_VAR 0 3
67609: PUSH
67610: LD_VAR 0 4
67614: PUSH
67615: FOR_IN
67616: IFFALSE 67723
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67618: LD_STRING [
67620: PUSH
67621: LD_VAR 0 3
67625: PPUSH
67626: CALL_OW 266
67630: STR
67631: PUSH
67632: LD_STRING , 
67634: STR
67635: PUSH
67636: LD_VAR 0 3
67640: PPUSH
67641: CALL_OW 250
67645: STR
67646: PUSH
67647: LD_STRING , 
67649: STR
67650: PUSH
67651: LD_VAR 0 3
67655: PPUSH
67656: CALL_OW 251
67660: STR
67661: PUSH
67662: LD_STRING , 
67664: STR
67665: PUSH
67666: LD_VAR 0 3
67670: PPUSH
67671: CALL_OW 254
67675: STR
67676: PUSH
67677: LD_STRING , 
67679: STR
67680: PUSH
67681: LD_VAR 0 3
67685: PPUSH
67686: LD_INT 1
67688: PPUSH
67689: CALL_OW 268
67693: STR
67694: PUSH
67695: LD_STRING , 
67697: STR
67698: PUSH
67699: LD_VAR 0 3
67703: PPUSH
67704: LD_INT 2
67706: PPUSH
67707: CALL_OW 268
67711: STR
67712: PUSH
67713: LD_STRING ],
67715: STR
67716: PPUSH
67717: CALL_OW 561
// end ;
67721: GO 67615
67723: POP
67724: POP
// AddToLog ( ]; ) ;
67725: LD_STRING ];
67727: PPUSH
67728: CALL_OW 561
// end ;
67732: LD_VAR 0 2
67736: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67737: LD_INT 0
67739: PPUSH
67740: PPUSH
67741: PPUSH
67742: PPUSH
67743: PPUSH
// if not area or not rate or not max then
67744: LD_VAR 0 1
67748: NOT
67749: PUSH
67750: LD_VAR 0 2
67754: NOT
67755: OR
67756: PUSH
67757: LD_VAR 0 4
67761: NOT
67762: OR
67763: IFFALSE 67767
// exit ;
67765: GO 67956
// while 1 do
67767: LD_INT 1
67769: IFFALSE 67956
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67771: LD_ADDR_VAR 0 9
67775: PUSH
67776: LD_VAR 0 1
67780: PPUSH
67781: LD_INT 1
67783: PPUSH
67784: CALL_OW 287
67788: PUSH
67789: LD_INT 10
67791: MUL
67792: ST_TO_ADDR
// r := rate / 10 ;
67793: LD_ADDR_VAR 0 7
67797: PUSH
67798: LD_VAR 0 2
67802: PUSH
67803: LD_INT 10
67805: DIVREAL
67806: ST_TO_ADDR
// time := 1 1$00 ;
67807: LD_ADDR_VAR 0 8
67811: PUSH
67812: LD_INT 2100
67814: ST_TO_ADDR
// if amount < min then
67815: LD_VAR 0 9
67819: PUSH
67820: LD_VAR 0 3
67824: LESS
67825: IFFALSE 67843
// r := r * 2 else
67827: LD_ADDR_VAR 0 7
67831: PUSH
67832: LD_VAR 0 7
67836: PUSH
67837: LD_INT 2
67839: MUL
67840: ST_TO_ADDR
67841: GO 67869
// if amount > max then
67843: LD_VAR 0 9
67847: PUSH
67848: LD_VAR 0 4
67852: GREATER
67853: IFFALSE 67869
// r := r / 2 ;
67855: LD_ADDR_VAR 0 7
67859: PUSH
67860: LD_VAR 0 7
67864: PUSH
67865: LD_INT 2
67867: DIVREAL
67868: ST_TO_ADDR
// time := time / r ;
67869: LD_ADDR_VAR 0 8
67873: PUSH
67874: LD_VAR 0 8
67878: PUSH
67879: LD_VAR 0 7
67883: DIVREAL
67884: ST_TO_ADDR
// if time < 0 then
67885: LD_VAR 0 8
67889: PUSH
67890: LD_INT 0
67892: LESS
67893: IFFALSE 67910
// time := time * - 1 ;
67895: LD_ADDR_VAR 0 8
67899: PUSH
67900: LD_VAR 0 8
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: MUL
67909: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67910: LD_VAR 0 8
67914: PUSH
67915: LD_INT 35
67917: PPUSH
67918: LD_INT 875
67920: PPUSH
67921: CALL_OW 12
67925: PLUS
67926: PPUSH
67927: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67931: LD_INT 1
67933: PPUSH
67934: LD_INT 5
67936: PPUSH
67937: CALL_OW 12
67941: PPUSH
67942: LD_VAR 0 1
67946: PPUSH
67947: LD_INT 1
67949: PPUSH
67950: CALL_OW 55
// end ;
67954: GO 67767
// end ;
67956: LD_VAR 0 5
67960: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67961: LD_INT 0
67963: PPUSH
67964: PPUSH
67965: PPUSH
67966: PPUSH
67967: PPUSH
67968: PPUSH
67969: PPUSH
67970: PPUSH
// if not turrets or not factories then
67971: LD_VAR 0 1
67975: NOT
67976: PUSH
67977: LD_VAR 0 2
67981: NOT
67982: OR
67983: IFFALSE 67987
// exit ;
67985: GO 68294
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67987: LD_ADDR_VAR 0 10
67991: PUSH
67992: LD_INT 5
67994: PUSH
67995: LD_INT 6
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: LD_INT 4
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: LD_INT 5
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 24
68029: PUSH
68030: LD_INT 25
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 23
68039: PUSH
68040: LD_INT 27
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 42
68053: PUSH
68054: LD_INT 43
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 44
68063: PUSH
68064: LD_INT 46
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 45
68073: PUSH
68074: LD_INT 47
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: LIST
68090: ST_TO_ADDR
// result := [ ] ;
68091: LD_ADDR_VAR 0 3
68095: PUSH
68096: EMPTY
68097: ST_TO_ADDR
// for i in turrets do
68098: LD_ADDR_VAR 0 4
68102: PUSH
68103: LD_VAR 0 1
68107: PUSH
68108: FOR_IN
68109: IFFALSE 68292
// begin nat := GetNation ( i ) ;
68111: LD_ADDR_VAR 0 7
68115: PUSH
68116: LD_VAR 0 4
68120: PPUSH
68121: CALL_OW 248
68125: ST_TO_ADDR
// weapon := 0 ;
68126: LD_ADDR_VAR 0 8
68130: PUSH
68131: LD_INT 0
68133: ST_TO_ADDR
// if not nat then
68134: LD_VAR 0 7
68138: NOT
68139: IFFALSE 68143
// continue ;
68141: GO 68108
// for j in list [ nat ] do
68143: LD_ADDR_VAR 0 5
68147: PUSH
68148: LD_VAR 0 10
68152: PUSH
68153: LD_VAR 0 7
68157: ARRAY
68158: PUSH
68159: FOR_IN
68160: IFFALSE 68201
// if GetBWeapon ( i ) = j [ 1 ] then
68162: LD_VAR 0 4
68166: PPUSH
68167: CALL_OW 269
68171: PUSH
68172: LD_VAR 0 5
68176: PUSH
68177: LD_INT 1
68179: ARRAY
68180: EQUAL
68181: IFFALSE 68199
// begin weapon := j [ 2 ] ;
68183: LD_ADDR_VAR 0 8
68187: PUSH
68188: LD_VAR 0 5
68192: PUSH
68193: LD_INT 2
68195: ARRAY
68196: ST_TO_ADDR
// break ;
68197: GO 68201
// end ;
68199: GO 68159
68201: POP
68202: POP
// if not weapon then
68203: LD_VAR 0 8
68207: NOT
68208: IFFALSE 68212
// continue ;
68210: GO 68108
// for k in factories do
68212: LD_ADDR_VAR 0 6
68216: PUSH
68217: LD_VAR 0 2
68221: PUSH
68222: FOR_IN
68223: IFFALSE 68288
// begin weapons := AvailableWeaponList ( k ) ;
68225: LD_ADDR_VAR 0 9
68229: PUSH
68230: LD_VAR 0 6
68234: PPUSH
68235: CALL_OW 478
68239: ST_TO_ADDR
// if not weapons then
68240: LD_VAR 0 9
68244: NOT
68245: IFFALSE 68249
// continue ;
68247: GO 68222
// if weapon in weapons then
68249: LD_VAR 0 8
68253: PUSH
68254: LD_VAR 0 9
68258: IN
68259: IFFALSE 68286
// begin result := [ i , weapon ] ;
68261: LD_ADDR_VAR 0 3
68265: PUSH
68266: LD_VAR 0 4
68270: PUSH
68271: LD_VAR 0 8
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// exit ;
68280: POP
68281: POP
68282: POP
68283: POP
68284: GO 68294
// end ; end ;
68286: GO 68222
68288: POP
68289: POP
// end ;
68290: GO 68108
68292: POP
68293: POP
// end ;
68294: LD_VAR 0 3
68298: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68299: LD_INT 0
68301: PPUSH
// if not side or side > 8 then
68302: LD_VAR 0 3
68306: NOT
68307: PUSH
68308: LD_VAR 0 3
68312: PUSH
68313: LD_INT 8
68315: GREATER
68316: OR
68317: IFFALSE 68321
// exit ;
68319: GO 68380
// if not range then
68321: LD_VAR 0 4
68325: NOT
68326: IFFALSE 68337
// range := - 12 ;
68328: LD_ADDR_VAR 0 4
68332: PUSH
68333: LD_INT 12
68335: NEG
68336: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68337: LD_VAR 0 1
68341: PPUSH
68342: LD_VAR 0 2
68346: PPUSH
68347: LD_VAR 0 3
68351: PPUSH
68352: LD_VAR 0 4
68356: PPUSH
68357: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68361: LD_VAR 0 1
68365: PPUSH
68366: LD_VAR 0 2
68370: PPUSH
68371: LD_VAR 0 3
68375: PPUSH
68376: CALL_OW 331
// end ;
68380: LD_VAR 0 5
68384: RET
// export function Video ( mode ) ; begin
68385: LD_INT 0
68387: PPUSH
// ingame_video = mode ;
68388: LD_ADDR_OWVAR 52
68392: PUSH
68393: LD_VAR 0 1
68397: ST_TO_ADDR
// interface_hidden = mode ;
68398: LD_ADDR_OWVAR 54
68402: PUSH
68403: LD_VAR 0 1
68407: ST_TO_ADDR
// end ;
68408: LD_VAR 0 2
68412: RET
// export function Join ( array , element ) ; begin
68413: LD_INT 0
68415: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68416: LD_ADDR_VAR 0 3
68420: PUSH
68421: LD_VAR 0 1
68425: PPUSH
68426: LD_VAR 0 1
68430: PUSH
68431: LD_INT 1
68433: PLUS
68434: PPUSH
68435: LD_VAR 0 2
68439: PPUSH
68440: CALL_OW 1
68444: ST_TO_ADDR
// end ;
68445: LD_VAR 0 3
68449: RET
// export function JoinUnion ( array , element ) ; begin
68450: LD_INT 0
68452: PPUSH
// result := array union element ;
68453: LD_ADDR_VAR 0 3
68457: PUSH
68458: LD_VAR 0 1
68462: PUSH
68463: LD_VAR 0 2
68467: UNION
68468: ST_TO_ADDR
// end ;
68469: LD_VAR 0 3
68473: RET
// export function GetBehemoths ( side ) ; begin
68474: LD_INT 0
68476: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68477: LD_ADDR_VAR 0 2
68481: PUSH
68482: LD_INT 22
68484: PUSH
68485: LD_VAR 0 1
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 31
68496: PUSH
68497: LD_INT 25
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PPUSH
68508: CALL_OW 69
68512: ST_TO_ADDR
// end ;
68513: LD_VAR 0 2
68517: RET
// export function Shuffle ( array ) ; var i , index ; begin
68518: LD_INT 0
68520: PPUSH
68521: PPUSH
68522: PPUSH
// result := [ ] ;
68523: LD_ADDR_VAR 0 2
68527: PUSH
68528: EMPTY
68529: ST_TO_ADDR
// if not array then
68530: LD_VAR 0 1
68534: NOT
68535: IFFALSE 68539
// exit ;
68537: GO 68638
// Randomize ;
68539: CALL_OW 10
// for i = array downto 1 do
68543: LD_ADDR_VAR 0 3
68547: PUSH
68548: DOUBLE
68549: LD_VAR 0 1
68553: INC
68554: ST_TO_ADDR
68555: LD_INT 1
68557: PUSH
68558: FOR_DOWNTO
68559: IFFALSE 68636
// begin index := rand ( 1 , array ) ;
68561: LD_ADDR_VAR 0 4
68565: PUSH
68566: LD_INT 1
68568: PPUSH
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 12
68578: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_VAR 0 2
68588: PPUSH
68589: LD_VAR 0 2
68593: PUSH
68594: LD_INT 1
68596: PLUS
68597: PPUSH
68598: LD_VAR 0 1
68602: PUSH
68603: LD_VAR 0 4
68607: ARRAY
68608: PPUSH
68609: CALL_OW 2
68613: ST_TO_ADDR
// array := Delete ( array , index ) ;
68614: LD_ADDR_VAR 0 1
68618: PUSH
68619: LD_VAR 0 1
68623: PPUSH
68624: LD_VAR 0 4
68628: PPUSH
68629: CALL_OW 3
68633: ST_TO_ADDR
// end ;
68634: GO 68558
68636: POP
68637: POP
// end ;
68638: LD_VAR 0 2
68642: RET
// export function GetBaseMaterials ( base ) ; begin
68643: LD_INT 0
68645: PPUSH
// result := [ 0 , 0 , 0 ] ;
68646: LD_ADDR_VAR 0 2
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: ST_TO_ADDR
// if not base then
68665: LD_VAR 0 1
68669: NOT
68670: IFFALSE 68674
// exit ;
68672: GO 68723
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68674: LD_ADDR_VAR 0 2
68678: PUSH
68679: LD_VAR 0 1
68683: PPUSH
68684: LD_INT 1
68686: PPUSH
68687: CALL_OW 275
68691: PUSH
68692: LD_VAR 0 1
68696: PPUSH
68697: LD_INT 2
68699: PPUSH
68700: CALL_OW 275
68704: PUSH
68705: LD_VAR 0 1
68709: PPUSH
68710: LD_INT 3
68712: PPUSH
68713: CALL_OW 275
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: LIST
68722: ST_TO_ADDR
// end ;
68723: LD_VAR 0 2
68727: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68728: LD_INT 0
68730: PPUSH
68731: PPUSH
// result := array ;
68732: LD_ADDR_VAR 0 3
68736: PUSH
68737: LD_VAR 0 1
68741: ST_TO_ADDR
// if size >= result then
68742: LD_VAR 0 2
68746: PUSH
68747: LD_VAR 0 3
68751: GREATEREQUAL
68752: IFFALSE 68756
// exit ;
68754: GO 68806
// if size then
68756: LD_VAR 0 2
68760: IFFALSE 68806
// for i := array downto size do
68762: LD_ADDR_VAR 0 4
68766: PUSH
68767: DOUBLE
68768: LD_VAR 0 1
68772: INC
68773: ST_TO_ADDR
68774: LD_VAR 0 2
68778: PUSH
68779: FOR_DOWNTO
68780: IFFALSE 68804
// result := Delete ( result , result ) ;
68782: LD_ADDR_VAR 0 3
68786: PUSH
68787: LD_VAR 0 3
68791: PPUSH
68792: LD_VAR 0 3
68796: PPUSH
68797: CALL_OW 3
68801: ST_TO_ADDR
68802: GO 68779
68804: POP
68805: POP
// end ;
68806: LD_VAR 0 3
68810: RET
// export function ComExit ( unit ) ; var tmp ; begin
68811: LD_INT 0
68813: PPUSH
68814: PPUSH
// if not IsInUnit ( unit ) then
68815: LD_VAR 0 1
68819: PPUSH
68820: CALL_OW 310
68824: NOT
68825: IFFALSE 68829
// exit ;
68827: GO 68889
// tmp := IsInUnit ( unit ) ;
68829: LD_ADDR_VAR 0 3
68833: PUSH
68834: LD_VAR 0 1
68838: PPUSH
68839: CALL_OW 310
68843: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68844: LD_VAR 0 3
68848: PPUSH
68849: CALL_OW 247
68853: PUSH
68854: LD_INT 2
68856: EQUAL
68857: IFFALSE 68870
// ComExitVehicle ( unit ) else
68859: LD_VAR 0 1
68863: PPUSH
68864: CALL_OW 121
68868: GO 68879
// ComExitBuilding ( unit ) ;
68870: LD_VAR 0 1
68874: PPUSH
68875: CALL_OW 122
// result := tmp ;
68879: LD_ADDR_VAR 0 2
68883: PUSH
68884: LD_VAR 0 3
68888: ST_TO_ADDR
// end ;
68889: LD_VAR 0 2
68893: RET
// export function ComExitAll ( units ) ; var i ; begin
68894: LD_INT 0
68896: PPUSH
68897: PPUSH
// if not units then
68898: LD_VAR 0 1
68902: NOT
68903: IFFALSE 68907
// exit ;
68905: GO 68933
// for i in units do
68907: LD_ADDR_VAR 0 3
68911: PUSH
68912: LD_VAR 0 1
68916: PUSH
68917: FOR_IN
68918: IFFALSE 68931
// ComExit ( i ) ;
68920: LD_VAR 0 3
68924: PPUSH
68925: CALL 68811 0 1
68929: GO 68917
68931: POP
68932: POP
// end ;
68933: LD_VAR 0 2
68937: RET
// export function ResetHc ; begin
68938: LD_INT 0
68940: PPUSH
// InitHc ;
68941: CALL_OW 19
// hc_importance := 0 ;
68945: LD_ADDR_OWVAR 32
68949: PUSH
68950: LD_INT 0
68952: ST_TO_ADDR
// end ;
68953: LD_VAR 0 1
68957: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68958: LD_INT 0
68960: PPUSH
68961: PPUSH
68962: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68963: LD_ADDR_VAR 0 6
68967: PUSH
68968: LD_VAR 0 1
68972: PUSH
68973: LD_VAR 0 3
68977: PLUS
68978: PUSH
68979: LD_INT 2
68981: DIV
68982: ST_TO_ADDR
// if _x < 0 then
68983: LD_VAR 0 6
68987: PUSH
68988: LD_INT 0
68990: LESS
68991: IFFALSE 69008
// _x := _x * - 1 ;
68993: LD_ADDR_VAR 0 6
68997: PUSH
68998: LD_VAR 0 6
69002: PUSH
69003: LD_INT 1
69005: NEG
69006: MUL
69007: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69008: LD_ADDR_VAR 0 7
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_VAR 0 4
69022: PLUS
69023: PUSH
69024: LD_INT 2
69026: DIV
69027: ST_TO_ADDR
// if _y < 0 then
69028: LD_VAR 0 7
69032: PUSH
69033: LD_INT 0
69035: LESS
69036: IFFALSE 69053
// _y := _y * - 1 ;
69038: LD_ADDR_VAR 0 7
69042: PUSH
69043: LD_VAR 0 7
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: MUL
69052: ST_TO_ADDR
// result := [ _x , _y ] ;
69053: LD_ADDR_VAR 0 5
69057: PUSH
69058: LD_VAR 0 6
69062: PUSH
69063: LD_VAR 0 7
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: ST_TO_ADDR
// end ;
69072: LD_VAR 0 5
69076: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69077: LD_INT 0
69079: PPUSH
69080: PPUSH
69081: PPUSH
69082: PPUSH
// task := GetTaskList ( unit ) ;
69083: LD_ADDR_VAR 0 7
69087: PUSH
69088: LD_VAR 0 1
69092: PPUSH
69093: CALL_OW 437
69097: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69098: LD_VAR 0 7
69102: NOT
69103: PUSH
69104: LD_VAR 0 1
69108: PPUSH
69109: LD_VAR 0 2
69113: PPUSH
69114: CALL_OW 308
69118: NOT
69119: AND
69120: IFFALSE 69124
// exit ;
69122: GO 69242
// if IsInArea ( unit , area ) then
69124: LD_VAR 0 1
69128: PPUSH
69129: LD_VAR 0 2
69133: PPUSH
69134: CALL_OW 308
69138: IFFALSE 69156
// begin ComMoveToArea ( unit , goAway ) ;
69140: LD_VAR 0 1
69144: PPUSH
69145: LD_VAR 0 3
69149: PPUSH
69150: CALL_OW 113
// exit ;
69154: GO 69242
// end ; if task [ 1 ] [ 1 ] <> M then
69156: LD_VAR 0 7
69160: PUSH
69161: LD_INT 1
69163: ARRAY
69164: PUSH
69165: LD_INT 1
69167: ARRAY
69168: PUSH
69169: LD_STRING M
69171: NONEQUAL
69172: IFFALSE 69176
// exit ;
69174: GO 69242
// x := task [ 1 ] [ 2 ] ;
69176: LD_ADDR_VAR 0 5
69180: PUSH
69181: LD_VAR 0 7
69185: PUSH
69186: LD_INT 1
69188: ARRAY
69189: PUSH
69190: LD_INT 2
69192: ARRAY
69193: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69194: LD_ADDR_VAR 0 6
69198: PUSH
69199: LD_VAR 0 7
69203: PUSH
69204: LD_INT 1
69206: ARRAY
69207: PUSH
69208: LD_INT 3
69210: ARRAY
69211: ST_TO_ADDR
// if InArea ( x , y , area ) then
69212: LD_VAR 0 5
69216: PPUSH
69217: LD_VAR 0 6
69221: PPUSH
69222: LD_VAR 0 2
69226: PPUSH
69227: CALL_OW 309
69231: IFFALSE 69242
// ComStop ( unit ) ;
69233: LD_VAR 0 1
69237: PPUSH
69238: CALL_OW 141
// end ;
69242: LD_VAR 0 4
69246: RET
// export function Abs ( value ) ; begin
69247: LD_INT 0
69249: PPUSH
// result := value ;
69250: LD_ADDR_VAR 0 2
69254: PUSH
69255: LD_VAR 0 1
69259: ST_TO_ADDR
// if value < 0 then
69260: LD_VAR 0 1
69264: PUSH
69265: LD_INT 0
69267: LESS
69268: IFFALSE 69285
// result := value * - 1 ;
69270: LD_ADDR_VAR 0 2
69274: PUSH
69275: LD_VAR 0 1
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: MUL
69284: ST_TO_ADDR
// end ;
69285: LD_VAR 0 2
69289: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69290: LD_INT 0
69292: PPUSH
69293: PPUSH
69294: PPUSH
69295: PPUSH
69296: PPUSH
69297: PPUSH
69298: PPUSH
69299: PPUSH
// if not unit or not building then
69300: LD_VAR 0 1
69304: NOT
69305: PUSH
69306: LD_VAR 0 2
69310: NOT
69311: OR
69312: IFFALSE 69316
// exit ;
69314: GO 69542
// x := GetX ( building ) ;
69316: LD_ADDR_VAR 0 4
69320: PUSH
69321: LD_VAR 0 2
69325: PPUSH
69326: CALL_OW 250
69330: ST_TO_ADDR
// y := GetY ( building ) ;
69331: LD_ADDR_VAR 0 6
69335: PUSH
69336: LD_VAR 0 2
69340: PPUSH
69341: CALL_OW 251
69345: ST_TO_ADDR
// d := GetDir ( building ) ;
69346: LD_ADDR_VAR 0 8
69350: PUSH
69351: LD_VAR 0 2
69355: PPUSH
69356: CALL_OW 254
69360: ST_TO_ADDR
// r := 4 ;
69361: LD_ADDR_VAR 0 9
69365: PUSH
69366: LD_INT 4
69368: ST_TO_ADDR
// for i := 1 to 5 do
69369: LD_ADDR_VAR 0 10
69373: PUSH
69374: DOUBLE
69375: LD_INT 1
69377: DEC
69378: ST_TO_ADDR
69379: LD_INT 5
69381: PUSH
69382: FOR_TO
69383: IFFALSE 69540
// begin _x := ShiftX ( x , d , r + i ) ;
69385: LD_ADDR_VAR 0 5
69389: PUSH
69390: LD_VAR 0 4
69394: PPUSH
69395: LD_VAR 0 8
69399: PPUSH
69400: LD_VAR 0 9
69404: PUSH
69405: LD_VAR 0 10
69409: PLUS
69410: PPUSH
69411: CALL_OW 272
69415: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69416: LD_ADDR_VAR 0 7
69420: PUSH
69421: LD_VAR 0 6
69425: PPUSH
69426: LD_VAR 0 8
69430: PPUSH
69431: LD_VAR 0 9
69435: PUSH
69436: LD_VAR 0 10
69440: PLUS
69441: PPUSH
69442: CALL_OW 273
69446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69447: LD_VAR 0 5
69451: PPUSH
69452: LD_VAR 0 7
69456: PPUSH
69457: CALL_OW 488
69461: PUSH
69462: LD_VAR 0 5
69466: PPUSH
69467: LD_VAR 0 7
69471: PPUSH
69472: CALL_OW 428
69476: PPUSH
69477: CALL_OW 247
69481: PUSH
69482: LD_INT 3
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: IN
69492: NOT
69493: AND
69494: IFFALSE 69538
// begin ComMoveXY ( unit , _x , _y ) ;
69496: LD_VAR 0 1
69500: PPUSH
69501: LD_VAR 0 5
69505: PPUSH
69506: LD_VAR 0 7
69510: PPUSH
69511: CALL_OW 111
// result := [ _x , _y ] ;
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_VAR 0 5
69524: PUSH
69525: LD_VAR 0 7
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: ST_TO_ADDR
// exit ;
69534: POP
69535: POP
69536: GO 69542
// end ; end ;
69538: GO 69382
69540: POP
69541: POP
// end ;
69542: LD_VAR 0 3
69546: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69547: LD_INT 0
69549: PPUSH
69550: PPUSH
69551: PPUSH
// result := 0 ;
69552: LD_ADDR_VAR 0 3
69556: PUSH
69557: LD_INT 0
69559: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69560: LD_VAR 0 1
69564: PUSH
69565: LD_INT 0
69567: LESS
69568: PUSH
69569: LD_VAR 0 1
69573: PUSH
69574: LD_INT 8
69576: GREATER
69577: OR
69578: PUSH
69579: LD_VAR 0 2
69583: PUSH
69584: LD_INT 0
69586: LESS
69587: OR
69588: PUSH
69589: LD_VAR 0 2
69593: PUSH
69594: LD_INT 8
69596: GREATER
69597: OR
69598: IFFALSE 69602
// exit ;
69600: GO 69677
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: LD_INT 22
69609: PUSH
69610: LD_VAR 0 2
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PPUSH
69619: CALL_OW 69
69623: PUSH
69624: FOR_IN
69625: IFFALSE 69675
// begin un := UnitShoot ( i ) ;
69627: LD_ADDR_VAR 0 5
69631: PUSH
69632: LD_VAR 0 4
69636: PPUSH
69637: CALL_OW 504
69641: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69642: LD_VAR 0 5
69646: PPUSH
69647: CALL_OW 255
69651: PUSH
69652: LD_VAR 0 1
69656: EQUAL
69657: IFFALSE 69673
// begin result := un ;
69659: LD_ADDR_VAR 0 3
69663: PUSH
69664: LD_VAR 0 5
69668: ST_TO_ADDR
// exit ;
69669: POP
69670: POP
69671: GO 69677
// end ; end ;
69673: GO 69624
69675: POP
69676: POP
// end ;
69677: LD_VAR 0 3
69681: RET
// export function GetCargoBay ( units ) ; begin
69682: LD_INT 0
69684: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69685: LD_ADDR_VAR 0 2
69689: PUSH
69690: LD_VAR 0 1
69694: PPUSH
69695: LD_INT 2
69697: PUSH
69698: LD_INT 34
69700: PUSH
69701: LD_INT 12
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 34
69710: PUSH
69711: LD_INT 51
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 34
69720: PUSH
69721: LD_INT 32
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 34
69730: PUSH
69731: LD_INT 89
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: PPUSH
69745: CALL_OW 72
69749: ST_TO_ADDR
// end ;
69750: LD_VAR 0 2
69754: RET
// export function Negate ( value ) ; begin
69755: LD_INT 0
69757: PPUSH
// result := not value ;
69758: LD_ADDR_VAR 0 2
69762: PUSH
69763: LD_VAR 0 1
69767: NOT
69768: ST_TO_ADDR
// end ;
69769: LD_VAR 0 2
69773: RET
// export function Inc ( value ) ; begin
69774: LD_INT 0
69776: PPUSH
// result := value + 1 ;
69777: LD_ADDR_VAR 0 2
69781: PUSH
69782: LD_VAR 0 1
69786: PUSH
69787: LD_INT 1
69789: PLUS
69790: ST_TO_ADDR
// end ;
69791: LD_VAR 0 2
69795: RET
// export function Dec ( value ) ; begin
69796: LD_INT 0
69798: PPUSH
// result := value - 1 ;
69799: LD_ADDR_VAR 0 2
69803: PUSH
69804: LD_VAR 0 1
69808: PUSH
69809: LD_INT 1
69811: MINUS
69812: ST_TO_ADDR
// end ;
69813: LD_VAR 0 2
69817: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69818: LD_INT 0
69820: PPUSH
69821: PPUSH
69822: PPUSH
69823: PPUSH
69824: PPUSH
69825: PPUSH
69826: PPUSH
69827: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69828: LD_VAR 0 1
69832: PPUSH
69833: LD_VAR 0 2
69837: PPUSH
69838: CALL_OW 488
69842: NOT
69843: PUSH
69844: LD_VAR 0 3
69848: PPUSH
69849: LD_VAR 0 4
69853: PPUSH
69854: CALL_OW 488
69858: NOT
69859: OR
69860: IFFALSE 69873
// begin result := - 1 ;
69862: LD_ADDR_VAR 0 5
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: ST_TO_ADDR
// exit ;
69871: GO 70108
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69873: LD_ADDR_VAR 0 12
69877: PUSH
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_VAR 0 2
69887: PPUSH
69888: LD_VAR 0 3
69892: PPUSH
69893: LD_VAR 0 4
69897: PPUSH
69898: CALL 68958 0 4
69902: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69903: LD_ADDR_VAR 0 11
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: LD_VAR 0 2
69917: PPUSH
69918: LD_VAR 0 12
69922: PUSH
69923: LD_INT 1
69925: ARRAY
69926: PPUSH
69927: LD_VAR 0 12
69931: PUSH
69932: LD_INT 2
69934: ARRAY
69935: PPUSH
69936: CALL_OW 298
69940: ST_TO_ADDR
// distance := 9999 ;
69941: LD_ADDR_VAR 0 10
69945: PUSH
69946: LD_INT 9999
69948: ST_TO_ADDR
// for i := 0 to 5 do
69949: LD_ADDR_VAR 0 6
69953: PUSH
69954: DOUBLE
69955: LD_INT 0
69957: DEC
69958: ST_TO_ADDR
69959: LD_INT 5
69961: PUSH
69962: FOR_TO
69963: IFFALSE 70106
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69965: LD_ADDR_VAR 0 7
69969: PUSH
69970: LD_VAR 0 1
69974: PPUSH
69975: LD_VAR 0 6
69979: PPUSH
69980: LD_VAR 0 11
69984: PPUSH
69985: CALL_OW 272
69989: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69990: LD_ADDR_VAR 0 8
69994: PUSH
69995: LD_VAR 0 2
69999: PPUSH
70000: LD_VAR 0 6
70004: PPUSH
70005: LD_VAR 0 11
70009: PPUSH
70010: CALL_OW 273
70014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70015: LD_VAR 0 7
70019: PPUSH
70020: LD_VAR 0 8
70024: PPUSH
70025: CALL_OW 488
70029: NOT
70030: IFFALSE 70034
// continue ;
70032: GO 69962
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70034: LD_ADDR_VAR 0 9
70038: PUSH
70039: LD_VAR 0 12
70043: PUSH
70044: LD_INT 1
70046: ARRAY
70047: PPUSH
70048: LD_VAR 0 12
70052: PUSH
70053: LD_INT 2
70055: ARRAY
70056: PPUSH
70057: LD_VAR 0 7
70061: PPUSH
70062: LD_VAR 0 8
70066: PPUSH
70067: CALL_OW 298
70071: ST_TO_ADDR
// if tmp < distance then
70072: LD_VAR 0 9
70076: PUSH
70077: LD_VAR 0 10
70081: LESS
70082: IFFALSE 70104
// begin result := i ;
70084: LD_ADDR_VAR 0 5
70088: PUSH
70089: LD_VAR 0 6
70093: ST_TO_ADDR
// distance := tmp ;
70094: LD_ADDR_VAR 0 10
70098: PUSH
70099: LD_VAR 0 9
70103: ST_TO_ADDR
// end ; end ;
70104: GO 69962
70106: POP
70107: POP
// end ;
70108: LD_VAR 0 5
70112: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70113: LD_INT 0
70115: PPUSH
70116: PPUSH
// if not driver or not IsInUnit ( driver ) then
70117: LD_VAR 0 1
70121: NOT
70122: PUSH
70123: LD_VAR 0 1
70127: PPUSH
70128: CALL_OW 310
70132: NOT
70133: OR
70134: IFFALSE 70138
// exit ;
70136: GO 70228
// vehicle := IsInUnit ( driver ) ;
70138: LD_ADDR_VAR 0 3
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: CALL_OW 310
70152: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70153: LD_VAR 0 1
70157: PPUSH
70158: LD_STRING \
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: LD_INT 0
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: PUSH
70188: LD_STRING E
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: LD_VAR 0 3
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PPUSH
70224: CALL_OW 446
// end ;
70228: LD_VAR 0 2
70232: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70233: LD_INT 0
70235: PPUSH
70236: PPUSH
// if not driver or not IsInUnit ( driver ) then
70237: LD_VAR 0 1
70241: NOT
70242: PUSH
70243: LD_VAR 0 1
70247: PPUSH
70248: CALL_OW 310
70252: NOT
70253: OR
70254: IFFALSE 70258
// exit ;
70256: GO 70348
// vehicle := IsInUnit ( driver ) ;
70258: LD_ADDR_VAR 0 3
70262: PUSH
70263: LD_VAR 0 1
70267: PPUSH
70268: CALL_OW 310
70272: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70273: LD_VAR 0 1
70277: PPUSH
70278: LD_STRING \
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: PUSH
70308: LD_STRING E
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: LD_VAR 0 3
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: LD_INT 0
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PPUSH
70344: CALL_OW 447
// end ;
70348: LD_VAR 0 2
70352: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70353: LD_INT 0
70355: PPUSH
70356: PPUSH
70357: PPUSH
// tmp := [ ] ;
70358: LD_ADDR_VAR 0 5
70362: PUSH
70363: EMPTY
70364: ST_TO_ADDR
// for i in units do
70365: LD_ADDR_VAR 0 4
70369: PUSH
70370: LD_VAR 0 1
70374: PUSH
70375: FOR_IN
70376: IFFALSE 70414
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70378: LD_ADDR_VAR 0 5
70382: PUSH
70383: LD_VAR 0 5
70387: PPUSH
70388: LD_VAR 0 5
70392: PUSH
70393: LD_INT 1
70395: PLUS
70396: PPUSH
70397: LD_VAR 0 4
70401: PPUSH
70402: CALL_OW 256
70406: PPUSH
70407: CALL_OW 2
70411: ST_TO_ADDR
70412: GO 70375
70414: POP
70415: POP
// if not tmp then
70416: LD_VAR 0 5
70420: NOT
70421: IFFALSE 70425
// exit ;
70423: GO 70473
// if asc then
70425: LD_VAR 0 2
70429: IFFALSE 70453
// result := SortListByListAsc ( units , tmp ) else
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: LD_VAR 0 1
70440: PPUSH
70441: LD_VAR 0 5
70445: PPUSH
70446: CALL_OW 76
70450: ST_TO_ADDR
70451: GO 70473
// result := SortListByListDesc ( units , tmp ) ;
70453: LD_ADDR_VAR 0 3
70457: PUSH
70458: LD_VAR 0 1
70462: PPUSH
70463: LD_VAR 0 5
70467: PPUSH
70468: CALL_OW 77
70472: ST_TO_ADDR
// end ;
70473: LD_VAR 0 3
70477: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70478: LD_INT 0
70480: PPUSH
70481: PPUSH
// task := GetTaskList ( mech ) ;
70482: LD_ADDR_VAR 0 4
70486: PUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 437
70496: ST_TO_ADDR
// if not task then
70497: LD_VAR 0 4
70501: NOT
70502: IFFALSE 70506
// exit ;
70504: GO 70548
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70506: LD_ADDR_VAR 0 3
70510: PUSH
70511: LD_VAR 0 4
70515: PUSH
70516: LD_INT 1
70518: ARRAY
70519: PUSH
70520: LD_INT 1
70522: ARRAY
70523: PUSH
70524: LD_STRING r
70526: EQUAL
70527: PUSH
70528: LD_VAR 0 4
70532: PUSH
70533: LD_INT 1
70535: ARRAY
70536: PUSH
70537: LD_INT 4
70539: ARRAY
70540: PUSH
70541: LD_VAR 0 2
70545: EQUAL
70546: AND
70547: ST_TO_ADDR
// end ;
70548: LD_VAR 0 3
70552: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70553: LD_INT 0
70555: PPUSH
// SetDir ( unit , d ) ;
70556: LD_VAR 0 1
70560: PPUSH
70561: LD_VAR 0 4
70565: PPUSH
70566: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70570: LD_VAR 0 1
70574: PPUSH
70575: LD_VAR 0 2
70579: PPUSH
70580: LD_VAR 0 3
70584: PPUSH
70585: LD_VAR 0 5
70589: PPUSH
70590: CALL_OW 48
// end ;
70594: LD_VAR 0 6
70598: RET
// export function ToNaturalNumber ( number ) ; begin
70599: LD_INT 0
70601: PPUSH
// result := number div 1 ;
70602: LD_ADDR_VAR 0 2
70606: PUSH
70607: LD_VAR 0 1
70611: PUSH
70612: LD_INT 1
70614: DIV
70615: ST_TO_ADDR
// if number < 0 then
70616: LD_VAR 0 1
70620: PUSH
70621: LD_INT 0
70623: LESS
70624: IFFALSE 70634
// result := 0 ;
70626: LD_ADDR_VAR 0 2
70630: PUSH
70631: LD_INT 0
70633: ST_TO_ADDR
// end ;
70634: LD_VAR 0 2
70638: RET
// export function SortByClass ( units , class ) ; var un ; begin
70639: LD_INT 0
70641: PPUSH
70642: PPUSH
// if not units or not class then
70643: LD_VAR 0 1
70647: NOT
70648: PUSH
70649: LD_VAR 0 2
70653: NOT
70654: OR
70655: IFFALSE 70659
// exit ;
70657: GO 70754
// result := [ ] ;
70659: LD_ADDR_VAR 0 3
70663: PUSH
70664: EMPTY
70665: ST_TO_ADDR
// for un in units do
70666: LD_ADDR_VAR 0 4
70670: PUSH
70671: LD_VAR 0 1
70675: PUSH
70676: FOR_IN
70677: IFFALSE 70752
// if GetClass ( un ) = class then
70679: LD_VAR 0 4
70683: PPUSH
70684: CALL_OW 257
70688: PUSH
70689: LD_VAR 0 2
70693: EQUAL
70694: IFFALSE 70721
// result := Insert ( result , 1 , un ) else
70696: LD_ADDR_VAR 0 3
70700: PUSH
70701: LD_VAR 0 3
70705: PPUSH
70706: LD_INT 1
70708: PPUSH
70709: LD_VAR 0 4
70713: PPUSH
70714: CALL_OW 2
70718: ST_TO_ADDR
70719: GO 70750
// result := Replace ( result , result + 1 , un ) ;
70721: LD_ADDR_VAR 0 3
70725: PUSH
70726: LD_VAR 0 3
70730: PPUSH
70731: LD_VAR 0 3
70735: PUSH
70736: LD_INT 1
70738: PLUS
70739: PPUSH
70740: LD_VAR 0 4
70744: PPUSH
70745: CALL_OW 1
70749: ST_TO_ADDR
70750: GO 70676
70752: POP
70753: POP
// end ;
70754: LD_VAR 0 3
70758: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70759: LD_INT 0
70761: PPUSH
70762: PPUSH
70763: PPUSH
70764: PPUSH
70765: PPUSH
70766: PPUSH
70767: PPUSH
// result := [ ] ;
70768: LD_ADDR_VAR 0 4
70772: PUSH
70773: EMPTY
70774: ST_TO_ADDR
// if x - r < 0 then
70775: LD_VAR 0 1
70779: PUSH
70780: LD_VAR 0 3
70784: MINUS
70785: PUSH
70786: LD_INT 0
70788: LESS
70789: IFFALSE 70801
// min_x := 0 else
70791: LD_ADDR_VAR 0 8
70795: PUSH
70796: LD_INT 0
70798: ST_TO_ADDR
70799: GO 70817
// min_x := x - r ;
70801: LD_ADDR_VAR 0 8
70805: PUSH
70806: LD_VAR 0 1
70810: PUSH
70811: LD_VAR 0 3
70815: MINUS
70816: ST_TO_ADDR
// if y - r < 0 then
70817: LD_VAR 0 2
70821: PUSH
70822: LD_VAR 0 3
70826: MINUS
70827: PUSH
70828: LD_INT 0
70830: LESS
70831: IFFALSE 70843
// min_y := 0 else
70833: LD_ADDR_VAR 0 7
70837: PUSH
70838: LD_INT 0
70840: ST_TO_ADDR
70841: GO 70859
// min_y := y - r ;
70843: LD_ADDR_VAR 0 7
70847: PUSH
70848: LD_VAR 0 2
70852: PUSH
70853: LD_VAR 0 3
70857: MINUS
70858: ST_TO_ADDR
// max_x := x + r ;
70859: LD_ADDR_VAR 0 9
70863: PUSH
70864: LD_VAR 0 1
70868: PUSH
70869: LD_VAR 0 3
70873: PLUS
70874: ST_TO_ADDR
// max_y := y + r ;
70875: LD_ADDR_VAR 0 10
70879: PUSH
70880: LD_VAR 0 2
70884: PUSH
70885: LD_VAR 0 3
70889: PLUS
70890: ST_TO_ADDR
// for _x = min_x to max_x do
70891: LD_ADDR_VAR 0 5
70895: PUSH
70896: DOUBLE
70897: LD_VAR 0 8
70901: DEC
70902: ST_TO_ADDR
70903: LD_VAR 0 9
70907: PUSH
70908: FOR_TO
70909: IFFALSE 71010
// for _y = min_y to max_y do
70911: LD_ADDR_VAR 0 6
70915: PUSH
70916: DOUBLE
70917: LD_VAR 0 7
70921: DEC
70922: ST_TO_ADDR
70923: LD_VAR 0 10
70927: PUSH
70928: FOR_TO
70929: IFFALSE 71006
// begin if not ValidHex ( _x , _y ) then
70931: LD_VAR 0 5
70935: PPUSH
70936: LD_VAR 0 6
70940: PPUSH
70941: CALL_OW 488
70945: NOT
70946: IFFALSE 70950
// continue ;
70948: GO 70928
// if GetResourceTypeXY ( _x , _y ) then
70950: LD_VAR 0 5
70954: PPUSH
70955: LD_VAR 0 6
70959: PPUSH
70960: CALL_OW 283
70964: IFFALSE 71004
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70966: LD_ADDR_VAR 0 4
70970: PUSH
70971: LD_VAR 0 4
70975: PPUSH
70976: LD_VAR 0 4
70980: PUSH
70981: LD_INT 1
70983: PLUS
70984: PPUSH
70985: LD_VAR 0 5
70989: PUSH
70990: LD_VAR 0 6
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PPUSH
70999: CALL_OW 1
71003: ST_TO_ADDR
// end ;
71004: GO 70928
71006: POP
71007: POP
71008: GO 70908
71010: POP
71011: POP
// end ;
71012: LD_VAR 0 4
71016: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71017: LD_INT 0
71019: PPUSH
71020: PPUSH
71021: PPUSH
71022: PPUSH
71023: PPUSH
71024: PPUSH
71025: PPUSH
71026: PPUSH
// if not units then
71027: LD_VAR 0 1
71031: NOT
71032: IFFALSE 71036
// exit ;
71034: GO 71560
// result := UnitFilter ( units , [ f_ok ] ) ;
71036: LD_ADDR_VAR 0 3
71040: PUSH
71041: LD_VAR 0 1
71045: PPUSH
71046: LD_INT 50
71048: PUSH
71049: EMPTY
71050: LIST
71051: PPUSH
71052: CALL_OW 72
71056: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71057: LD_ADDR_VAR 0 8
71061: PUSH
71062: LD_VAR 0 1
71066: PUSH
71067: LD_INT 1
71069: ARRAY
71070: PPUSH
71071: CALL_OW 255
71075: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71076: LD_ADDR_VAR 0 10
71080: PUSH
71081: LD_INT 29
71083: PUSH
71084: LD_INT 91
71086: PUSH
71087: LD_INT 49
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: LIST
71094: ST_TO_ADDR
// if not result then
71095: LD_VAR 0 3
71099: NOT
71100: IFFALSE 71104
// exit ;
71102: GO 71560
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71104: LD_ADDR_VAR 0 5
71108: PUSH
71109: LD_INT 81
71111: PUSH
71112: LD_VAR 0 8
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PPUSH
71121: CALL_OW 69
71125: ST_TO_ADDR
// for i in result do
71126: LD_ADDR_VAR 0 4
71130: PUSH
71131: LD_VAR 0 3
71135: PUSH
71136: FOR_IN
71137: IFFALSE 71558
// begin tag := GetTag ( i ) + 1 ;
71139: LD_ADDR_VAR 0 9
71143: PUSH
71144: LD_VAR 0 4
71148: PPUSH
71149: CALL_OW 110
71153: PUSH
71154: LD_INT 1
71156: PLUS
71157: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71158: LD_ADDR_VAR 0 7
71162: PUSH
71163: LD_VAR 0 4
71167: PPUSH
71168: CALL_OW 250
71172: PPUSH
71173: LD_VAR 0 4
71177: PPUSH
71178: CALL_OW 251
71182: PPUSH
71183: LD_INT 6
71185: PPUSH
71186: CALL 70759 0 3
71190: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71191: LD_VAR 0 4
71195: PPUSH
71196: CALL_OW 247
71200: PUSH
71201: LD_INT 2
71203: EQUAL
71204: PUSH
71205: LD_VAR 0 7
71209: AND
71210: PUSH
71211: LD_VAR 0 4
71215: PPUSH
71216: CALL_OW 264
71220: PUSH
71221: LD_VAR 0 10
71225: IN
71226: NOT
71227: AND
71228: IFFALSE 71267
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71230: LD_VAR 0 4
71234: PPUSH
71235: LD_VAR 0 7
71239: PUSH
71240: LD_INT 1
71242: ARRAY
71243: PUSH
71244: LD_INT 1
71246: ARRAY
71247: PPUSH
71248: LD_VAR 0 7
71252: PUSH
71253: LD_INT 1
71255: ARRAY
71256: PUSH
71257: LD_INT 2
71259: ARRAY
71260: PPUSH
71261: CALL_OW 116
71265: GO 71556
// if path > tag then
71267: LD_VAR 0 2
71271: PUSH
71272: LD_VAR 0 9
71276: GREATER
71277: IFFALSE 71485
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71279: LD_ADDR_VAR 0 6
71283: PUSH
71284: LD_VAR 0 5
71288: PPUSH
71289: LD_INT 91
71291: PUSH
71292: LD_VAR 0 4
71296: PUSH
71297: LD_INT 8
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: LIST
71304: PPUSH
71305: CALL_OW 72
71309: ST_TO_ADDR
// if nearEnemy then
71310: LD_VAR 0 6
71314: IFFALSE 71383
// begin if GetWeapon ( i ) = ru_time_lapser then
71316: LD_VAR 0 4
71320: PPUSH
71321: CALL_OW 264
71325: PUSH
71326: LD_INT 49
71328: EQUAL
71329: IFFALSE 71357
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71331: LD_VAR 0 4
71335: PPUSH
71336: LD_VAR 0 6
71340: PPUSH
71341: LD_VAR 0 4
71345: PPUSH
71346: CALL_OW 74
71350: PPUSH
71351: CALL_OW 112
71355: GO 71381
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71357: LD_VAR 0 4
71361: PPUSH
71362: LD_VAR 0 6
71366: PPUSH
71367: LD_VAR 0 4
71371: PPUSH
71372: CALL_OW 74
71376: PPUSH
71377: CALL 72485 0 2
// end else
71381: GO 71483
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71383: LD_VAR 0 4
71387: PPUSH
71388: LD_VAR 0 2
71392: PUSH
71393: LD_VAR 0 9
71397: ARRAY
71398: PUSH
71399: LD_INT 1
71401: ARRAY
71402: PPUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_VAR 0 9
71412: ARRAY
71413: PUSH
71414: LD_INT 2
71416: ARRAY
71417: PPUSH
71418: CALL_OW 297
71422: PUSH
71423: LD_INT 6
71425: GREATER
71426: IFFALSE 71469
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71428: LD_VAR 0 4
71432: PPUSH
71433: LD_VAR 0 2
71437: PUSH
71438: LD_VAR 0 9
71442: ARRAY
71443: PUSH
71444: LD_INT 1
71446: ARRAY
71447: PPUSH
71448: LD_VAR 0 2
71452: PUSH
71453: LD_VAR 0 9
71457: ARRAY
71458: PUSH
71459: LD_INT 2
71461: ARRAY
71462: PPUSH
71463: CALL_OW 114
71467: GO 71483
// SetTag ( i , tag ) ;
71469: LD_VAR 0 4
71473: PPUSH
71474: LD_VAR 0 9
71478: PPUSH
71479: CALL_OW 109
// end else
71483: GO 71556
// if enemy then
71485: LD_VAR 0 5
71489: IFFALSE 71556
// begin if GetWeapon ( i ) = ru_time_lapser then
71491: LD_VAR 0 4
71495: PPUSH
71496: CALL_OW 264
71500: PUSH
71501: LD_INT 49
71503: EQUAL
71504: IFFALSE 71532
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71506: LD_VAR 0 4
71510: PPUSH
71511: LD_VAR 0 5
71515: PPUSH
71516: LD_VAR 0 4
71520: PPUSH
71521: CALL_OW 74
71525: PPUSH
71526: CALL_OW 112
71530: GO 71556
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71532: LD_VAR 0 4
71536: PPUSH
71537: LD_VAR 0 5
71541: PPUSH
71542: LD_VAR 0 4
71546: PPUSH
71547: CALL_OW 74
71551: PPUSH
71552: CALL 72485 0 2
// end ; end ;
71556: GO 71136
71558: POP
71559: POP
// end ;
71560: LD_VAR 0 3
71564: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71565: LD_INT 0
71567: PPUSH
71568: PPUSH
71569: PPUSH
// if not unit or IsInUnit ( unit ) then
71570: LD_VAR 0 1
71574: NOT
71575: PUSH
71576: LD_VAR 0 1
71580: PPUSH
71581: CALL_OW 310
71585: OR
71586: IFFALSE 71590
// exit ;
71588: GO 71681
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71590: LD_ADDR_VAR 0 4
71594: PUSH
71595: LD_VAR 0 1
71599: PPUSH
71600: CALL_OW 250
71604: PPUSH
71605: LD_VAR 0 2
71609: PPUSH
71610: LD_INT 1
71612: PPUSH
71613: CALL_OW 272
71617: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71618: LD_ADDR_VAR 0 5
71622: PUSH
71623: LD_VAR 0 1
71627: PPUSH
71628: CALL_OW 251
71632: PPUSH
71633: LD_VAR 0 2
71637: PPUSH
71638: LD_INT 1
71640: PPUSH
71641: CALL_OW 273
71645: ST_TO_ADDR
// if ValidHex ( x , y ) then
71646: LD_VAR 0 4
71650: PPUSH
71651: LD_VAR 0 5
71655: PPUSH
71656: CALL_OW 488
71660: IFFALSE 71681
// ComTurnXY ( unit , x , y ) ;
71662: LD_VAR 0 1
71666: PPUSH
71667: LD_VAR 0 4
71671: PPUSH
71672: LD_VAR 0 5
71676: PPUSH
71677: CALL_OW 118
// end ;
71681: LD_VAR 0 3
71685: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
// result := false ;
71690: LD_ADDR_VAR 0 3
71694: PUSH
71695: LD_INT 0
71697: ST_TO_ADDR
// if not units then
71698: LD_VAR 0 2
71702: NOT
71703: IFFALSE 71707
// exit ;
71705: GO 71752
// for i in units do
71707: LD_ADDR_VAR 0 4
71711: PUSH
71712: LD_VAR 0 2
71716: PUSH
71717: FOR_IN
71718: IFFALSE 71750
// if See ( side , i ) then
71720: LD_VAR 0 1
71724: PPUSH
71725: LD_VAR 0 4
71729: PPUSH
71730: CALL_OW 292
71734: IFFALSE 71748
// begin result := true ;
71736: LD_ADDR_VAR 0 3
71740: PUSH
71741: LD_INT 1
71743: ST_TO_ADDR
// exit ;
71744: POP
71745: POP
71746: GO 71752
// end ;
71748: GO 71717
71750: POP
71751: POP
// end ;
71752: LD_VAR 0 3
71756: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71757: LD_INT 0
71759: PPUSH
71760: PPUSH
71761: PPUSH
71762: PPUSH
// if not unit or not points then
71763: LD_VAR 0 1
71767: NOT
71768: PUSH
71769: LD_VAR 0 2
71773: NOT
71774: OR
71775: IFFALSE 71779
// exit ;
71777: GO 71869
// dist := 99999 ;
71779: LD_ADDR_VAR 0 5
71783: PUSH
71784: LD_INT 99999
71786: ST_TO_ADDR
// for i in points do
71787: LD_ADDR_VAR 0 4
71791: PUSH
71792: LD_VAR 0 2
71796: PUSH
71797: FOR_IN
71798: IFFALSE 71867
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71800: LD_ADDR_VAR 0 6
71804: PUSH
71805: LD_VAR 0 1
71809: PPUSH
71810: LD_VAR 0 4
71814: PUSH
71815: LD_INT 1
71817: ARRAY
71818: PPUSH
71819: LD_VAR 0 4
71823: PUSH
71824: LD_INT 2
71826: ARRAY
71827: PPUSH
71828: CALL_OW 297
71832: ST_TO_ADDR
// if tmpDist < dist then
71833: LD_VAR 0 6
71837: PUSH
71838: LD_VAR 0 5
71842: LESS
71843: IFFALSE 71865
// begin result := i ;
71845: LD_ADDR_VAR 0 3
71849: PUSH
71850: LD_VAR 0 4
71854: ST_TO_ADDR
// dist := tmpDist ;
71855: LD_ADDR_VAR 0 5
71859: PUSH
71860: LD_VAR 0 6
71864: ST_TO_ADDR
// end ; end ;
71865: GO 71797
71867: POP
71868: POP
// end ;
71869: LD_VAR 0 3
71873: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71874: LD_INT 0
71876: PPUSH
// uc_side := side ;
71877: LD_ADDR_OWVAR 20
71881: PUSH
71882: LD_VAR 0 1
71886: ST_TO_ADDR
// uc_nation := 3 ;
71887: LD_ADDR_OWVAR 21
71891: PUSH
71892: LD_INT 3
71894: ST_TO_ADDR
// vc_chassis := 25 ;
71895: LD_ADDR_OWVAR 37
71899: PUSH
71900: LD_INT 25
71902: ST_TO_ADDR
// vc_engine := engine_siberite ;
71903: LD_ADDR_OWVAR 39
71907: PUSH
71908: LD_INT 3
71910: ST_TO_ADDR
// vc_control := control_computer ;
71911: LD_ADDR_OWVAR 38
71915: PUSH
71916: LD_INT 3
71918: ST_TO_ADDR
// vc_weapon := 59 ;
71919: LD_ADDR_OWVAR 40
71923: PUSH
71924: LD_INT 59
71926: ST_TO_ADDR
// result := CreateVehicle ;
71927: LD_ADDR_VAR 0 5
71931: PUSH
71932: CALL_OW 45
71936: ST_TO_ADDR
// SetDir ( result , d ) ;
71937: LD_VAR 0 5
71941: PPUSH
71942: LD_VAR 0 4
71946: PPUSH
71947: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71951: LD_VAR 0 5
71955: PPUSH
71956: LD_VAR 0 2
71960: PPUSH
71961: LD_VAR 0 3
71965: PPUSH
71966: LD_INT 0
71968: PPUSH
71969: CALL_OW 48
// end ;
71973: LD_VAR 0 5
71977: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71978: LD_INT 0
71980: PPUSH
71981: PPUSH
71982: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71983: LD_ADDR_VAR 0 2
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: LD_INT 0
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72006: LD_VAR 0 1
72010: NOT
72011: PUSH
72012: LD_VAR 0 1
72016: PPUSH
72017: CALL_OW 264
72021: PUSH
72022: LD_INT 12
72024: PUSH
72025: LD_INT 51
72027: PUSH
72028: LD_INT 32
72030: PUSH
72031: LD_INT 89
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: IN
72040: NOT
72041: OR
72042: IFFALSE 72046
// exit ;
72044: GO 72144
// for i := 1 to 3 do
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: DOUBLE
72052: LD_INT 1
72054: DEC
72055: ST_TO_ADDR
72056: LD_INT 3
72058: PUSH
72059: FOR_TO
72060: IFFALSE 72142
// begin tmp := GetCargo ( cargo , i ) ;
72062: LD_ADDR_VAR 0 4
72066: PUSH
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_VAR 0 3
72076: PPUSH
72077: CALL_OW 289
72081: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72082: LD_ADDR_VAR 0 2
72086: PUSH
72087: LD_VAR 0 2
72091: PPUSH
72092: LD_VAR 0 3
72096: PPUSH
72097: LD_VAR 0 4
72101: PPUSH
72102: CALL_OW 1
72106: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72107: LD_ADDR_VAR 0 2
72111: PUSH
72112: LD_VAR 0 2
72116: PPUSH
72117: LD_INT 4
72119: PPUSH
72120: LD_VAR 0 2
72124: PUSH
72125: LD_INT 4
72127: ARRAY
72128: PUSH
72129: LD_VAR 0 4
72133: PLUS
72134: PPUSH
72135: CALL_OW 1
72139: ST_TO_ADDR
// end ;
72140: GO 72059
72142: POP
72143: POP
// end ;
72144: LD_VAR 0 2
72148: RET
// export function Length ( array ) ; begin
72149: LD_INT 0
72151: PPUSH
// result := array + 0 ;
72152: LD_ADDR_VAR 0 2
72156: PUSH
72157: LD_VAR 0 1
72161: PUSH
72162: LD_INT 0
72164: PLUS
72165: ST_TO_ADDR
// end ;
72166: LD_VAR 0 2
72170: RET
// export function PrepareArray ( array ) ; begin
72171: LD_INT 0
72173: PPUSH
// result := array diff 0 ;
72174: LD_ADDR_VAR 0 2
72178: PUSH
72179: LD_VAR 0 1
72183: PUSH
72184: LD_INT 0
72186: DIFF
72187: ST_TO_ADDR
// if not result [ 1 ] then
72188: LD_VAR 0 2
72192: PUSH
72193: LD_INT 1
72195: ARRAY
72196: NOT
72197: IFFALSE 72217
// result := Delete ( result , 1 ) ;
72199: LD_ADDR_VAR 0 2
72203: PUSH
72204: LD_VAR 0 2
72208: PPUSH
72209: LD_INT 1
72211: PPUSH
72212: CALL_OW 3
72216: ST_TO_ADDR
// end ;
72217: LD_VAR 0 2
72221: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72222: LD_INT 0
72224: PPUSH
72225: PPUSH
72226: PPUSH
72227: PPUSH
// sibRocketRange := 25 ;
72228: LD_ADDR_VAR 0 6
72232: PUSH
72233: LD_INT 25
72235: ST_TO_ADDR
// result := false ;
72236: LD_ADDR_VAR 0 4
72240: PUSH
72241: LD_INT 0
72243: ST_TO_ADDR
// for i := 0 to 5 do
72244: LD_ADDR_VAR 0 5
72248: PUSH
72249: DOUBLE
72250: LD_INT 0
72252: DEC
72253: ST_TO_ADDR
72254: LD_INT 5
72256: PUSH
72257: FOR_TO
72258: IFFALSE 72325
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72260: LD_VAR 0 1
72264: PPUSH
72265: LD_VAR 0 5
72269: PPUSH
72270: LD_VAR 0 6
72274: PPUSH
72275: CALL_OW 272
72279: PPUSH
72280: LD_VAR 0 2
72284: PPUSH
72285: LD_VAR 0 5
72289: PPUSH
72290: LD_VAR 0 6
72294: PPUSH
72295: CALL_OW 273
72299: PPUSH
72300: LD_VAR 0 3
72304: PPUSH
72305: CALL_OW 309
72309: IFFALSE 72323
// begin result := true ;
72311: LD_ADDR_VAR 0 4
72315: PUSH
72316: LD_INT 1
72318: ST_TO_ADDR
// exit ;
72319: POP
72320: POP
72321: GO 72327
// end ;
72323: GO 72257
72325: POP
72326: POP
// end ;
72327: LD_VAR 0 4
72331: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72332: LD_INT 0
72334: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72335: LD_VAR 0 1
72339: PPUSH
72340: LD_VAR 0 2
72344: PPUSH
72345: LD_INT 0
72347: PPUSH
72348: LD_INT 0
72350: PPUSH
72351: LD_INT 1
72353: PPUSH
72354: LD_INT 0
72356: PPUSH
72357: CALL_OW 587
// end ;
72361: LD_VAR 0 3
72365: RET
// export function CenterOnNow ( unit ) ; begin
72366: LD_INT 0
72368: PPUSH
// result := IsInUnit ( unit ) ;
72369: LD_ADDR_VAR 0 2
72373: PUSH
72374: LD_VAR 0 1
72378: PPUSH
72379: CALL_OW 310
72383: ST_TO_ADDR
// if not result then
72384: LD_VAR 0 2
72388: NOT
72389: IFFALSE 72401
// result := unit ;
72391: LD_ADDR_VAR 0 2
72395: PUSH
72396: LD_VAR 0 1
72400: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72401: LD_VAR 0 1
72405: PPUSH
72406: CALL_OW 87
// end ;
72410: LD_VAR 0 2
72414: RET
// export function ComMoveHex ( unit , hex ) ; begin
72415: LD_INT 0
72417: PPUSH
// if not hex then
72418: LD_VAR 0 2
72422: NOT
72423: IFFALSE 72427
// exit ;
72425: GO 72480
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72427: LD_VAR 0 2
72431: PUSH
72432: LD_INT 1
72434: ARRAY
72435: PPUSH
72436: LD_VAR 0 2
72440: PUSH
72441: LD_INT 2
72443: ARRAY
72444: PPUSH
72445: CALL_OW 428
72449: IFFALSE 72453
// exit ;
72451: GO 72480
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72453: LD_VAR 0 1
72457: PPUSH
72458: LD_VAR 0 2
72462: PUSH
72463: LD_INT 1
72465: ARRAY
72466: PPUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_INT 2
72474: ARRAY
72475: PPUSH
72476: CALL_OW 111
// end ;
72480: LD_VAR 0 3
72484: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72485: LD_INT 0
72487: PPUSH
72488: PPUSH
72489: PPUSH
// if not unit or not enemy then
72490: LD_VAR 0 1
72494: NOT
72495: PUSH
72496: LD_VAR 0 2
72500: NOT
72501: OR
72502: IFFALSE 72506
// exit ;
72504: GO 72630
// x := GetX ( enemy ) ;
72506: LD_ADDR_VAR 0 4
72510: PUSH
72511: LD_VAR 0 2
72515: PPUSH
72516: CALL_OW 250
72520: ST_TO_ADDR
// y := GetY ( enemy ) ;
72521: LD_ADDR_VAR 0 5
72525: PUSH
72526: LD_VAR 0 2
72530: PPUSH
72531: CALL_OW 251
72535: ST_TO_ADDR
// if ValidHex ( x , y ) then
72536: LD_VAR 0 4
72540: PPUSH
72541: LD_VAR 0 5
72545: PPUSH
72546: CALL_OW 488
72550: IFFALSE 72630
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72552: LD_VAR 0 2
72556: PPUSH
72557: CALL_OW 247
72561: PUSH
72562: LD_INT 3
72564: PUSH
72565: LD_INT 2
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: IN
72572: PUSH
72573: LD_VAR 0 1
72577: PPUSH
72578: CALL_OW 255
72582: PPUSH
72583: LD_VAR 0 2
72587: PPUSH
72588: CALL_OW 292
72592: AND
72593: IFFALSE 72611
// ComAttackUnit ( unit , enemy ) else
72595: LD_VAR 0 1
72599: PPUSH
72600: LD_VAR 0 2
72604: PPUSH
72605: CALL_OW 115
72609: GO 72630
// ComAgressiveMove ( unit , x , y ) ;
72611: LD_VAR 0 1
72615: PPUSH
72616: LD_VAR 0 4
72620: PPUSH
72621: LD_VAR 0 5
72625: PPUSH
72626: CALL_OW 114
// end ; end_of_file
72630: LD_VAR 0 3
72634: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72635: LD_VAR 0 1
72639: PUSH
72640: LD_INT 200
72642: DOUBLE
72643: GREATEREQUAL
72644: IFFALSE 72652
72646: LD_INT 299
72648: DOUBLE
72649: LESSEQUAL
72650: IFTRUE 72654
72652: GO 72686
72654: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72655: LD_VAR 0 1
72659: PPUSH
72660: LD_VAR 0 2
72664: PPUSH
72665: LD_VAR 0 3
72669: PPUSH
72670: LD_VAR 0 4
72674: PPUSH
72675: LD_VAR 0 5
72679: PPUSH
72680: CALL 27179 0 5
72684: GO 72763
72686: LD_INT 300
72688: DOUBLE
72689: GREATEREQUAL
72690: IFFALSE 72698
72692: LD_INT 399
72694: DOUBLE
72695: LESSEQUAL
72696: IFTRUE 72700
72698: GO 72762
72700: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72701: LD_VAR 0 1
72705: PPUSH
72706: LD_VAR 0 2
72710: PPUSH
72711: LD_VAR 0 3
72715: PPUSH
72716: LD_VAR 0 4
72720: PPUSH
72721: LD_VAR 0 5
72725: PPUSH
72726: LD_VAR 0 6
72730: PPUSH
72731: LD_VAR 0 7
72735: PPUSH
72736: LD_VAR 0 8
72740: PPUSH
72741: LD_VAR 0 9
72745: PPUSH
72746: LD_VAR 0 10
72750: PPUSH
72751: LD_VAR 0 11
72755: PPUSH
72756: CALL 23504 0 11
72760: GO 72763
72762: POP
// end ;
72763: PPOPN 11
72765: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72766: LD_VAR 0 1
72770: PPUSH
72771: LD_VAR 0 2
72775: PPUSH
72776: LD_VAR 0 3
72780: PPUSH
72781: LD_VAR 0 4
72785: PPUSH
72786: LD_VAR 0 5
72790: PPUSH
72791: CALL 26915 0 5
// end ; end_of_file
72795: PPOPN 5
72797: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72798: LD_VAR 0 1
72802: PPUSH
72803: LD_VAR 0 2
72807: PPUSH
72808: LD_VAR 0 3
72812: PPUSH
72813: LD_VAR 0 4
72817: PPUSH
72818: LD_VAR 0 5
72822: PPUSH
72823: LD_VAR 0 6
72827: PPUSH
72828: CALL 11156 0 6
// end ;
72832: PPOPN 6
72834: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72835: LD_INT 0
72837: PPUSH
// begin if not units then
72838: LD_VAR 0 1
72842: NOT
72843: IFFALSE 72847
// exit ;
72845: GO 72847
// end ;
72847: PPOPN 7
72849: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72850: CALL 11060 0 0
// end ;
72854: PPOPN 1
72856: END
