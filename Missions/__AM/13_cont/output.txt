// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  77: LD_ADDR_EXP 33
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// resources = [ ] ;
  85: LD_ADDR_EXP 24
  89: PUSH
  90: EMPTY
  91: ST_TO_ADDR
// vehicles = [ ] ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// eventVar1 = 0 ;
  99: LD_ADDR_EXP 35
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar2 = 0 ;
 107: LD_ADDR_EXP 36
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar3 = 0 ;
 115: LD_ADDR_EXP 37
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar4 = 0 ;
 123: LD_ADDR_EXP 38
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar5 = 0 ;
 131: LD_ADDR_EXP 39
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mission_prefix = 13f_ ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_STRING 13f_
 146: ST_TO_ADDR
// debugMode = 0 ;
 147: LD_ADDR_EXP 40
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// PrepareVehicles ;
 155: CALL 1163 0 0
// PrepareHeroes ;
 159: CALL 489 0 0
// PrepareAmericansRandom ;
 163: CALL 1067 0 0
// PrepareDifficulty ;
 167: CALL 6203 0 0
// end ;
 171: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 172: LD_EXP 40
 176: PUSH
 177: LD_INT 1
 179: EQUAL
 180: IFFALSE 486
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// fogoff ( true ) ;
 189: LD_INT 1
 191: PPUSH
 192: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 196: LD_ADDR_VAR 0 1
 200: PUSH
 201: LD_INT 22
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 21
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PPUSH
 225: CALL_OW 69
 229: PUSH
 230: FOR_IN
 231: IFFALSE 247
// SetLives ( i , 1000 ) ;
 233: LD_VAR 0 1
 237: PPUSH
 238: LD_INT 1000
 240: PPUSH
 241: CALL_OW 234
 245: GO 230
 247: POP
 248: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 249: LD_ADDR_VAR 0 1
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 2
 266: PUSH
 267: LD_INT 30
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 30
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 326
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 274
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 9999
 319: PPUSH
 320: CALL_OW 277
 324: GO 301
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 30
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 30
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 405
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: CALL_OW 274
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: LD_INT 9999
 398: PPUSH
 399: CALL_OW 277
 403: GO 380
 405: POP
 406: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 407: LD_ADDR_VAR 0 1
 411: PUSH
 412: LD_INT 22
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 30
 427: PUSH
 428: LD_INT 0
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PPUSH
 454: CALL_OW 69
 458: PUSH
 459: FOR_IN
 460: IFFALSE 484
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 462: LD_VAR 0 1
 466: PPUSH
 467: CALL_OW 274
 471: PPUSH
 472: LD_INT 3
 474: PPUSH
 475: LD_INT 9999
 477: PPUSH
 478: CALL_OW 277
 482: GO 459
 484: POP
 485: POP
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
 493: PPUSH
 494: PPUSH
// uc_side = 1 ;
 495: LD_ADDR_OWVAR 20
 499: PUSH
 500: LD_INT 1
 502: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 503: LD_ADDR_EXP 1
 507: PUSH
 508: LD_STRING 13c_JMM
 510: PPUSH
 511: LD_INT 1
 513: PPUSH
 514: CALL 5533 0 2
 518: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 519: LD_ADDR_EXP 2
 523: PUSH
 524: LD_STRING 13c_Stevens
 526: PPUSH
 527: LD_INT 1
 529: PPUSH
 530: CALL 5533 0 2
 534: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING 13c_Lisa
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL 5533 0 2
 550: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 551: LD_ADDR_EXP 4
 555: PUSH
 556: LD_STRING 13c_Donaldson
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: CALL 5533 0 2
 566: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 567: LD_ADDR_EXP 5
 571: PUSH
 572: LD_STRING 13c_Bobby
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL 5533 0 2
 582: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 583: LD_ADDR_EXP 6
 587: PUSH
 588: LD_STRING 13c_Cyrus
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 5533 0 2
 598: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 599: LD_ADDR_EXP 7
 603: PUSH
 604: LD_STRING 13c_Denis
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL 5533 0 2
 614: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 615: LD_ADDR_EXP 8
 619: PUSH
 620: LD_STRING 13c_Brown
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 5533 0 2
 630: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 631: LD_ADDR_EXP 9
 635: PUSH
 636: LD_STRING 13c_Gladstone
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL 5533 0 2
 646: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 647: LD_ADDR_EXP 10
 651: PUSH
 652: LD_STRING 13c_Houten
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 5533 0 2
 662: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 663: LD_ADDR_EXP 11
 667: PUSH
 668: LD_STRING 13c_Cornel
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 5533 0 2
 678: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_STRING 13c_Gary
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: CALL 5533 0 2
 694: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 695: LD_ADDR_EXP 13
 699: PUSH
 700: LD_STRING 13c_Frank
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL 5533 0 2
 710: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 711: LD_ADDR_EXP 14
 715: PUSH
 716: LD_STRING 13c_Kikuchi
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL 5533 0 2
 726: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 727: LD_ADDR_EXP 15
 731: PUSH
 732: LD_STRING Powell
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL 5533 0 2
 742: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: LD_EXP 1
 752: PUSH
 753: LD_EXP 2
 757: PUSH
 758: LD_EXP 3
 762: PUSH
 763: LD_EXP 4
 767: PUSH
 768: LD_EXP 5
 772: PUSH
 773: LD_EXP 6
 777: PUSH
 778: LD_EXP 7
 782: PUSH
 783: LD_EXP 8
 787: PUSH
 788: LD_EXP 9
 792: PUSH
 793: LD_EXP 10
 797: PUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_EXP 12
 807: PUSH
 808: LD_EXP 13
 812: PUSH
 813: LD_EXP 14
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 834: LD_ADDR_VAR 0 3
 838: PUSH
 839: LD_INT 22
 841: PUSH
 842: LD_INT 1
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 33
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 21
 861: PUSH
 862: LD_INT 2
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: ST_TO_ADDR
// for i = tmp downto 1 do
 879: LD_ADDR_VAR 0 4
 883: PUSH
 884: DOUBLE
 885: LD_VAR 0 2
 889: INC
 890: ST_TO_ADDR
 891: LD_INT 1
 893: PUSH
 894: FOR_DOWNTO
 895: IFFALSE 932
// if not tmp [ i ] then
 897: LD_VAR 0 2
 901: PUSH
 902: LD_VAR 0 4
 906: ARRAY
 907: NOT
 908: IFFALSE 930
// tmp := Delete ( tmp , i ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_VAR 0 2
 919: PPUSH
 920: LD_VAR 0 4
 924: PPUSH
 925: CALL_OW 3
 929: ST_TO_ADDR
 930: GO 894
 932: POP
 933: POP
// for i = 1 to tmp do
 934: LD_ADDR_VAR 0 4
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_VAR 0 2
 948: PUSH
 949: FOR_TO
 950: IFFALSE 980
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 952: LD_VAR 0 2
 956: PUSH
 957: LD_VAR 0 4
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 3
 967: PUSH
 968: LD_VAR 0 4
 972: ARRAY
 973: PPUSH
 974: CALL_OW 52
 978: GO 949
 980: POP
 981: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
 982: LD_INT 22
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 25
 994: PUSH
 995: LD_INT 2
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PUSH
1011: LD_INT 0
1013: EQUAL
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 34
1027: PUSH
1028: LD_INT 13
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: PUSH
1044: LD_INT 0
1046: EQUAL
1047: AND
1048: IFFALSE 1062
// SetClass ( JMM , 2 ) ;
1050: LD_EXP 1
1054: PPUSH
1055: LD_INT 2
1057: PPUSH
1058: CALL_OW 336
// end ;
1062: LD_VAR 0 1
1066: RET
// export function PrepareAmericansRandom ; var i ; begin
1067: LD_INT 0
1069: PPUSH
1070: PPUSH
// uc_side = 1 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 1
1078: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1079: LD_ADDR_EXP 16
1083: PUSH
1084: LD_STRING 13c_others
1086: PPUSH
1087: CALL_OW 31
1091: ST_TO_ADDR
// for i in others13 do
1092: LD_ADDR_VAR 0 2
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: FOR_IN
1103: IFFALSE 1156
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1105: LD_VAR 0 2
1109: PPUSH
1110: LD_INT 22
1112: PUSH
1113: LD_INT 1
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 21
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 58
1132: PUSH
1133: EMPTY
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PPUSH
1141: CALL_OW 69
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 52
1154: GO 1102
1156: POP
1157: POP
// end ;
1158: LD_VAR 0 1
1162: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1163: LD_INT 0
1165: PPUSH
1166: PPUSH
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1171: LD_ADDR_VAR 0 5
1175: PUSH
1176: LD_STRING 13_VehiclesIn13_1
1178: PPUSH
1179: EMPTY
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1186: LD_ADDR_EXP 24
1190: PUSH
1191: LD_STRING 13_ResourcesInCargo13_1
1193: PPUSH
1194: EMPTY
1195: PPUSH
1196: CALL_OW 30
1200: ST_TO_ADDR
// cargoList = [ ] ;
1201: LD_ADDR_VAR 0 6
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// uc_side = 1 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if vehicles > 0 then
1216: LD_VAR 0 5
1220: PUSH
1221: LD_INT 0
1223: GREATER
1224: IFFALSE 1579
// begin for i := 1 to vehicles do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: DOUBLE
1232: LD_INT 1
1234: DEC
1235: ST_TO_ADDR
1236: LD_VAR 0 5
1240: PUSH
1241: FOR_TO
1242: IFFALSE 1391
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_VAR 0 5
1253: PUSH
1254: LD_VAR 0 2
1258: ARRAY
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1264: LD_ADDR_OWVAR 37
1268: PUSH
1269: LD_VAR 0 5
1273: PUSH
1274: LD_VAR 0 2
1278: ARRAY
1279: PUSH
1280: LD_INT 2
1282: ARRAY
1283: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1284: LD_ADDR_OWVAR 39
1288: PUSH
1289: LD_VAR 0 5
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 3
1302: ARRAY
1303: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1304: LD_ADDR_OWVAR 38
1308: PUSH
1309: LD_VAR 0 5
1313: PUSH
1314: LD_VAR 0 2
1318: ARRAY
1319: PUSH
1320: LD_INT 4
1322: ARRAY
1323: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1324: LD_ADDR_OWVAR 40
1328: PUSH
1329: LD_VAR 0 5
1333: PUSH
1334: LD_VAR 0 2
1338: ARRAY
1339: PUSH
1340: LD_INT 5
1342: ARRAY
1343: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1344: LD_ADDR_OWVAR 41
1348: PUSH
1349: LD_INT 40
1351: ST_TO_ADDR
// veh = CreateVehicle ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: CALL_OW 45
1361: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1362: LD_VAR 0 4
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1374: LD_VAR 0 4
1378: PPUSH
1379: LD_INT 2
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// end ;
1389: GO 1241
1391: POP
1392: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 34
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if cargoList > 0 then
1438: LD_VAR 0 6
1442: PUSH
1443: LD_INT 0
1445: GREATER
1446: IFFALSE 1579
// for i = 1 to cargoList do
1448: LD_ADDR_VAR 0 2
1452: PUSH
1453: DOUBLE
1454: LD_INT 1
1456: DEC
1457: ST_TO_ADDR
1458: LD_VAR 0 6
1462: PUSH
1463: FOR_TO
1464: IFFALSE 1577
// begin if resources > 0 then
1466: LD_EXP 24
1470: PUSH
1471: LD_INT 0
1473: GREATER
1474: IFFALSE 1575
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1476: LD_VAR 0 6
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PPUSH
1487: LD_INT 1
1489: PPUSH
1490: LD_EXP 24
1494: PUSH
1495: LD_VAR 0 2
1499: ARRAY
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PPUSH
1505: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1509: LD_VAR 0 6
1513: PUSH
1514: LD_VAR 0 2
1518: ARRAY
1519: PPUSH
1520: LD_INT 2
1522: PPUSH
1523: LD_EXP 24
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 2
1536: ARRAY
1537: PPUSH
1538: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1542: LD_VAR 0 6
1546: PUSH
1547: LD_VAR 0 2
1551: ARRAY
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_EXP 24
1560: PUSH
1561: LD_VAR 0 2
1565: ARRAY
1566: PUSH
1567: LD_INT 3
1569: ARRAY
1570: PPUSH
1571: CALL_OW 291
// end ; end ;
1575: GO 1463
1577: POP
1578: POP
// end ; end ;
1579: LD_VAR 0 1
1583: RET
// export function PowellSupport ; var i , veh , un ; begin
1584: LD_INT 0
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
// for i = 1 to 3 do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_INT 3
1602: PUSH
1603: FOR_TO
1604: IFFALSE 1805
// begin uc_nation = 1 ;
1606: LD_ADDR_OWVAR 21
1610: PUSH
1611: LD_INT 1
1613: ST_TO_ADDR
// uc_side = 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// vc_engine = 3 ;
1622: LD_ADDR_OWVAR 39
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// vc_control = 1 ;
1630: LD_ADDR_OWVAR 38
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1638: LD_ADDR_OWVAR 40
1642: PUSH
1643: LD_INT 9
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: LD_INT 7
1654: PUSH
1655: LD_INT 6
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 1
1667: PPUSH
1668: LD_INT 5
1670: PPUSH
1671: CALL_OW 12
1675: ARRAY
1676: ST_TO_ADDR
// if vc_weapon = 6 then
1677: LD_OWVAR 40
1681: PUSH
1682: LD_INT 6
1684: EQUAL
1685: IFFALSE 1697
// vc_chassis = 4 else
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
1695: GO 1705
// vc_chassis = 3 ;
1697: LD_ADDR_OWVAR 37
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// veh = CreateVehicle ;
1705: LD_ADDR_VAR 0 3
1709: PUSH
1710: CALL_OW 45
1714: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: CALL_OW 49
// SetDir ( veh , 1 ) ;
1730: LD_VAR 0 3
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: CALL_OW 233
// hc_gallery =  ;
1742: LD_ADDR_OWVAR 33
1746: PUSH
1747: LD_STRING 
1749: ST_TO_ADDR
// hc_name =  ;
1750: LD_ADDR_OWVAR 26
1754: PUSH
1755: LD_STRING 
1757: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1758: LD_INT 0
1760: PPUSH
1761: LD_INT 3
1763: PPUSH
1764: LD_INT 7
1766: PPUSH
1767: LD_INT 10
1769: PPUSH
1770: CALL_OW 12
1774: PPUSH
1775: CALL_OW 380
// un = CreateHuman ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: CALL_OW 44
1788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1789: LD_VAR 0 4
1793: PPUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL_OW 52
// end ;
1803: GO 1603
1805: POP
1806: POP
// end ; end_of_file
1807: LD_VAR 0 1
1811: RET
// export function PrepareBurlak ; begin
1812: LD_INT 0
1814: PPUSH
// uc_side = 7 ;
1815: LD_ADDR_OWVAR 20
1819: PUSH
1820: LD_INT 7
1822: ST_TO_ADDR
// uc_nation = 3 ;
1823: LD_ADDR_OWVAR 21
1827: PUSH
1828: LD_INT 3
1830: ST_TO_ADDR
// vc_engine = 3 ;
1831: LD_ADDR_OWVAR 39
1835: PUSH
1836: LD_INT 3
1838: ST_TO_ADDR
// vc_control = 1 ;
1839: LD_ADDR_OWVAR 38
1843: PUSH
1844: LD_INT 1
1846: ST_TO_ADDR
// vc_weapon = 46 ;
1847: LD_ADDR_OWVAR 40
1851: PUSH
1852: LD_INT 46
1854: ST_TO_ADDR
// vc_chassis = 24 ;
1855: LD_ADDR_OWVAR 37
1859: PUSH
1860: LD_INT 24
1862: ST_TO_ADDR
// Masha = CreateVehicle ;
1863: LD_ADDR_EXP 18
1867: PUSH
1868: CALL_OW 45
1872: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1873: LD_EXP 18
1877: PPUSH
1878: LD_INT 3
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1888: LD_EXP 18
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING Burlak
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL 5533 0 2
1915: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1916: LD_EXP 17
1920: PPUSH
1921: LD_EXP 18
1925: PPUSH
1926: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1930: LD_EXP 18
1934: PPUSH
1935: LD_INT 107
1937: PPUSH
1938: LD_INT 118
1940: PPUSH
1941: CALL_OW 114
// spawnBurlak = 1 ;
1945: LD_ADDR_EXP 27
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// end ;
1953: LD_VAR 0 1
1957: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
1958: LD_INT 0
1960: PPUSH
1961: PPUSH
1962: PPUSH
1963: PPUSH
// uc_side = 7 ;
1964: LD_ADDR_OWVAR 20
1968: PUSH
1969: LD_INT 7
1971: ST_TO_ADDR
// uc_nation = 3 ;
1972: LD_ADDR_OWVAR 21
1976: PUSH
1977: LD_INT 3
1979: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
1980: LD_ADDR_EXP 19
1984: PUSH
1985: LD_STRING Gnyevko
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 5533 0 2
1995: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
1996: LD_ADDR_EXP 20
2000: PUSH
2001: LD_STRING Titov
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 5533 0 2
2011: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2012: LD_ADDR_EXP 21
2016: PUSH
2017: LD_STRING Xavier2
2019: PPUSH
2020: LD_INT 0
2022: PPUSH
2023: CALL 5533 0 2
2027: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2028: LD_ADDR_EXP 22
2032: PUSH
2033: LD_STRING Belkov
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL 5533 0 2
2043: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2044: LD_ADDR_EXP 23
2048: PUSH
2049: LD_STRING Lipshchin
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL 5533 0 2
2059: ST_TO_ADDR
// for i = 1 to 5 do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: DOUBLE
2066: LD_INT 1
2068: DEC
2069: ST_TO_ADDR
2070: LD_INT 5
2072: PUSH
2073: FOR_TO
2074: IFFALSE 2162
// begin vc_engine = 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control = 1 ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 1
2091: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 43
2099: PUSH
2100: LD_INT 44
2102: PUSH
2103: LD_INT 45
2105: PUSH
2106: LD_INT 49
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// vc_chassis = 22 ;
2127: LD_ADDR_OWVAR 37
2131: PUSH
2132: LD_INT 22
2134: ST_TO_ADDR
// veh = CreateVehicle ;
2135: LD_ADDR_VAR 0 3
2139: PUSH
2140: CALL_OW 45
2144: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 3
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// end ;
2160: GO 2073
2162: POP
2163: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2164: LD_ADDR_VAR 0 4
2168: PUSH
2169: LD_INT 22
2171: PUSH
2172: LD_INT 7
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 21
2181: PUSH
2182: LD_INT 2
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 58
2191: PUSH
2192: EMPTY
2193: LIST
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PPUSH
2200: CALL_OW 69
2204: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2205: LD_EXP 19
2209: PPUSH
2210: LD_VAR 0 4
2214: PUSH
2215: LD_INT 1
2217: ARRAY
2218: PPUSH
2219: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2223: LD_EXP 20
2227: PPUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 2
2235: ARRAY
2236: PPUSH
2237: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2241: LD_EXP 21
2245: PPUSH
2246: LD_VAR 0 4
2250: PUSH
2251: LD_INT 3
2253: ARRAY
2254: PPUSH
2255: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2259: LD_EXP 22
2263: PPUSH
2264: LD_VAR 0 4
2268: PUSH
2269: LD_INT 4
2271: ARRAY
2272: PPUSH
2273: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2277: LD_EXP 23
2281: PPUSH
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 5
2289: ARRAY
2290: PPUSH
2291: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2295: LD_EXP 19
2299: PPUSH
2300: LD_INT 3
2302: PPUSH
2303: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2307: LD_EXP 20
2311: PUSH
2312: LD_EXP 23
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PPUSH
2321: LD_INT 9
2323: PPUSH
2324: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 7
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PPUSH
2343: CALL_OW 69
2347: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2348: LD_VAR 0 4
2352: PPUSH
2353: LD_INT 107
2355: PPUSH
2356: LD_INT 118
2358: PPUSH
2359: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2363: LD_INT 35
2365: PPUSH
2366: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2370: LD_VAR 0 4
2374: PPUSH
2375: LD_INT 34
2377: PUSH
2378: LD_INT 49
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: CALL_OW 72
2389: PPUSH
2390: LD_EXP 18
2394: PPUSH
2395: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2399: LD_VAR 0 4
2403: PPUSH
2404: LD_INT 3
2406: PUSH
2407: LD_INT 34
2409: PUSH
2410: LD_INT 49
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 72
2425: PPUSH
2426: LD_INT 107
2428: PPUSH
2429: LD_INT 118
2431: PPUSH
2432: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 34
2443: PUSH
2444: LD_INT 49
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PPUSH
2451: CALL_OW 72
2455: PUSH
2456: LD_INT 0
2458: EQUAL
2459: PUSH
2460: LD_EXP 18
2464: PPUSH
2465: CALL_OW 303
2469: OR
2470: IFFALSE 2363
// repeat wait ( 0 0$1 ) ;
2472: LD_INT 35
2474: PPUSH
2475: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2479: LD_ADDR_VAR 0 4
2483: PUSH
2484: LD_INT 22
2486: PUSH
2487: LD_INT 7
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PPUSH
2494: CALL_OW 69
2498: PUSH
2499: LD_EXP 17
2503: DIFF
2504: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2505: LD_VAR 0 4
2509: PPUSH
2510: LD_INT 107
2512: PPUSH
2513: LD_INT 118
2515: PPUSH
2516: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2520: LD_EXP 17
2524: PPUSH
2525: CALL_OW 302
2529: PUSH
2530: LD_EXP 17
2534: PPUSH
2535: CALL_OW 310
2539: NOT
2540: AND
2541: IFFALSE 2558
// ComMoveXY ( Burlak , 107 , 118 ) ;
2543: LD_EXP 17
2547: PPUSH
2548: LD_INT 107
2550: PPUSH
2551: LD_INT 118
2553: PPUSH
2554: CALL_OW 111
// until not tmp ;
2558: LD_VAR 0 4
2562: NOT
2563: IFFALSE 2472
// end ; end_of_file
2565: LD_VAR 0 1
2569: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2570: LD_EXP 31
2574: IFFALSE 2750
2576: GO 2578
2578: DISABLE
2579: LD_INT 0
2581: PPUSH
2582: PPUSH
// begin enable ;
2583: ENABLE
// rnd = 0 ;
2584: LD_ADDR_VAR 0 2
2588: PUSH
2589: LD_INT 0
2591: ST_TO_ADDR
// uc_side = 8 ;
2592: LD_ADDR_OWVAR 20
2596: PUSH
2597: LD_INT 8
2599: ST_TO_ADDR
// uc_nation = 2 ;
2600: LD_ADDR_OWVAR 21
2604: PUSH
2605: LD_INT 2
2607: ST_TO_ADDR
// hc_name =  ;
2608: LD_ADDR_OWVAR 26
2612: PUSH
2613: LD_STRING 
2615: ST_TO_ADDR
// hc_gallery =  ;
2616: LD_ADDR_OWVAR 33
2620: PUSH
2621: LD_STRING 
2623: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2624: LD_INT 0
2626: PPUSH
2627: LD_INT 4
2629: PPUSH
2630: LD_INT 10
2632: PPUSH
2633: CALL_OW 380
// un = CreateHuman ;
2637: LD_ADDR_VAR 0 1
2641: PUSH
2642: CALL_OW 44
2646: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_INT 8
2654: PUSH
2655: LD_INT 9
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 12
2672: ARRAY
2673: PPUSH
2674: LD_INT 0
2676: PPUSH
2677: CALL_OW 49
// SetTag ( un , 1 ) ;
2681: LD_VAR 0 1
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_EXP 31
2705: PPUSH
2706: CALL_OW 12
2710: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2711: LD_VAR 0 1
2715: PPUSH
2716: LD_EXP 31
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 1
2729: ARRAY
2730: PPUSH
2731: LD_EXP 31
2735: PUSH
2736: LD_VAR 0 2
2740: ARRAY
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 158
// end ;
2750: PPOPN 2
2752: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2753: LD_INT 22
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 3
2765: PUSH
2766: LD_INT 61
2768: PUSH
2769: EMPTY
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 33
2778: PUSH
2779: LD_INT 2
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: PPUSH
2791: CALL_OW 69
2795: IFFALSE 2868
2797: GO 2799
2799: DISABLE
2800: LD_INT 0
2802: PPUSH
// begin enable ;
2803: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2804: LD_ADDR_VAR 0 1
2808: PUSH
2809: LD_INT 22
2811: PUSH
2812: LD_INT 8
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 61
2824: PUSH
2825: EMPTY
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 33
2834: PUSH
2835: LD_INT 2
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: PPUSH
2847: CALL_OW 69
2851: PUSH
2852: FOR_IN
2853: IFFALSE 2866
// Connect ( i ) ;
2855: LD_VAR 0 1
2859: PPUSH
2860: CALL 5648 0 1
2864: GO 2852
2866: POP
2867: POP
// end ; end_of_file
2868: PPOPN 1
2870: END
// every 1 do
2871: GO 2873
2873: DISABLE
// begin InGameOn ;
2874: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2878: LD_INT 22
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 2
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 21
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: PPUSH
2944: LD_INT 69
2946: PPUSH
2947: LD_INT 94
2949: PPUSH
2950: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_STRING D2-JMM-1
2961: PPUSH
2962: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2966: LD_INT 22
2968: PUSH
2969: LD_INT 1
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 21
2978: PUSH
2979: LD_INT 2
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3003: LD_EXP 2
3007: PPUSH
3008: LD_STRING D2-Huck-1
3010: PPUSH
3011: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3015: LD_INT 22
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 21
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: PUSH
3044: LD_INT 1
3046: ARRAY
3047: PPUSH
3048: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3052: LD_EXP 1
3056: PPUSH
3057: LD_STRING D2-JMM-2
3059: PPUSH
3060: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3064: LD_INT 22
3066: PUSH
3067: LD_INT 1
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 21
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PPUSH
3088: CALL_OW 69
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PPUSH
3097: CALL_OW 87
// InGameOff ;
3101: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3105: LD_STRING M1
3107: PPUSH
3108: CALL_OW 337
// SaveForQuickRestart ;
3112: CALL_OW 22
// end ;
3116: END
// every 10 10$0 do
3117: GO 3119
3119: DISABLE
// begin DialogueOn ;
3120: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3124: LD_EXP 15
3128: PPUSH
3129: LD_STRING D3-Pow-1
3131: PPUSH
3132: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_STRING D3-JMM-1
3143: PPUSH
3144: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3148: LD_EXP 15
3152: PPUSH
3153: LD_STRING D3-Pow-2
3155: PPUSH
3156: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3160: LD_EXP 1
3164: PPUSH
3165: LD_STRING D3-JMM-2
3167: PPUSH
3168: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3172: LD_EXP 15
3176: PPUSH
3177: LD_STRING D3-Pow-3
3179: PPUSH
3180: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING D3-JMM-3
3191: PPUSH
3192: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3196: LD_EXP 15
3200: PPUSH
3201: LD_STRING D3-Pow-4
3203: PPUSH
3204: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3208: LD_EXP 1
3212: PPUSH
3213: LD_STRING D3-JMM-4
3215: PPUSH
3216: CALL_OW 88
// DialogueOff ;
3220: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3224: LD_STRING M2
3226: PPUSH
3227: CALL_OW 337
// wait ( 2 2$30 ) ;
3231: LD_INT 5250
3233: PPUSH
3234: CALL_OW 67
// PrepareBurlak ;
3238: CALL 1812 0 0
// BurlakArmy ;
3242: CALL 1958 0 0
// end ;
3246: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 18
3254: PPUSH
3255: CALL_OW 292
3259: IFFALSE 3418
3261: GO 3263
3263: DISABLE
// begin DialogueOn ;
3264: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3268: LD_EXP 18
3272: PPUSH
3273: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3277: LD_INT 22
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 26
3289: PUSH
3290: LD_INT 1
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: LD_INT 25
3302: PUSH
3303: LD_INT 1
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 25
3312: PUSH
3313: LD_INT 2
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 25
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PUSH
3330: LD_INT 25
3332: PUSH
3333: LD_INT 4
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PUSH
3340: LD_INT 25
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PPUSH
3368: LD_STRING D5-Sol1-1
3370: PPUSH
3371: LD_STRING D5-FSol1-1
3373: PPUSH
3374: CALL 6002 0 3
// Say ( JMM , D5-JMM-1 ) ;
3378: LD_EXP 1
3382: PPUSH
3383: LD_STRING D5-JMM-1
3385: PPUSH
3386: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3390: LD_EXP 17
3394: PPUSH
3395: LD_STRING DAmer-Bur-1
3397: PPUSH
3398: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3402: LD_EXP 1
3406: PPUSH
3407: LD_STRING DAmer-JMM-1
3409: PPUSH
3410: CALL_OW 88
// DialogueOff ;
3414: CALL_OW 7
// end ;
3418: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3419: LD_INT 4
3421: PPUSH
3422: LD_INT 22
3424: PUSH
3425: LD_INT 7
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PPUSH
3432: CALL_OW 70
3436: IFFALSE 3835
3438: GO 3440
3440: DISABLE
3441: LD_INT 0
3443: PPUSH
// begin enable ;
3444: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: LD_INT 4
3452: PPUSH
3453: LD_INT 22
3455: PUSH
3456: LD_INT 7
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PPUSH
3463: CALL_OW 70
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3833
// begin if i = Burlak or i = Masha then
3471: LD_VAR 0 1
3475: PUSH
3476: LD_EXP 17
3480: EQUAL
3481: PUSH
3482: LD_VAR 0 1
3486: PUSH
3487: LD_EXP 18
3491: EQUAL
3492: OR
3493: IFFALSE 3640
// begin RemoveUnit ( i ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: CALL_OW 64
// DialogueOn ;
3504: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_STRING D5a-JMM-1
3515: PPUSH
3516: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3520: LD_INT 22
3522: PUSH
3523: LD_INT 1
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 26
3532: PUSH
3533: LD_INT 1
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 2
3542: PUSH
3543: LD_INT 25
3545: PUSH
3546: LD_INT 1
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 25
3555: PUSH
3556: LD_INT 2
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 25
3565: PUSH
3566: LD_INT 3
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 25
3575: PUSH
3576: LD_INT 4
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 25
3585: PUSH
3586: LD_INT 5
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL_OW 69
3610: PPUSH
3611: LD_STRING D5a-Sol1-1
3613: PPUSH
3614: LD_STRING D5-FSol1-1
3616: PPUSH
3617: CALL 6002 0 3
// DialogueOff ;
3621: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3625: LD_STRING M2b
3627: PPUSH
3628: CALL_OW 337
// spawnBurlak = 0 ;
3632: LD_ADDR_EXP 27
3636: PUSH
3637: LD_INT 0
3639: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 247
3649: PUSH
3650: LD_INT 2
3652: EQUAL
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 263
3663: PUSH
3664: LD_INT 1
3666: EQUAL
3667: AND
3668: IFFALSE 3796
// begin case IsDrivenBy ( i ) of Gnyevko :
3670: LD_VAR 0 1
3674: PPUSH
3675: CALL_OW 311
3679: PUSH
3680: LD_EXP 19
3684: DOUBLE
3685: EQUAL
3686: IFTRUE 3690
3688: GO 3703
3690: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3691: LD_INT 1
3693: PPUSH
3694: LD_STRING 13_Gnyevko_1
3696: PPUSH
3697: CALL_OW 39
3701: GO 3796
3703: LD_EXP 20
3707: DOUBLE
3708: EQUAL
3709: IFTRUE 3713
3711: GO 3726
3713: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3714: LD_INT 1
3716: PPUSH
3717: LD_STRING 13_Titov_1
3719: PPUSH
3720: CALL_OW 39
3724: GO 3796
3726: LD_EXP 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3749
3736: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3737: LD_INT 1
3739: PPUSH
3740: LD_STRING 13_Xavier_1
3742: PPUSH
3743: CALL_OW 39
3747: GO 3796
3749: LD_EXP 22
3753: DOUBLE
3754: EQUAL
3755: IFTRUE 3759
3757: GO 3772
3759: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3760: LD_INT 1
3762: PPUSH
3763: LD_STRING 13_Belkov_1
3765: PPUSH
3766: CALL_OW 39
3770: GO 3796
3772: LD_EXP 23
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3795
3782: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3783: LD_INT 1
3785: PPUSH
3786: LD_STRING 13_Lipshchin_1
3788: PPUSH
3789: CALL_OW 39
3793: GO 3796
3795: POP
// end ; if GetWeapon ( i ) = 49 then
3796: LD_VAR 0 1
3800: PPUSH
3801: CALL_OW 264
3805: PUSH
3806: LD_INT 49
3808: EQUAL
3809: IFFALSE 3822
// DestroyUnit ( i ) else
3811: LD_VAR 0 1
3815: PPUSH
3816: CALL_OW 65
3820: GO 3831
// RemoveUnit ( i ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: CALL_OW 64
// end ;
3831: GO 3468
3833: POP
3834: POP
// end ;
3835: PPOPN 1
3837: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3838: LD_EXP 17
3842: PPUSH
3843: CALL_OW 302
3847: PUSH
3848: LD_EXP 18
3852: PPUSH
3853: CALL_OW 256
3857: PUSH
3858: LD_INT 500
3860: LESS
3861: AND
3862: PUSH
3863: LD_EXP 18
3867: PPUSH
3868: CALL_OW 255
3872: PUSH
3873: LD_INT 7
3875: EQUAL
3876: AND
3877: IFFALSE 3897
3879: GO 3881
3881: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3882: LD_EXP 17
3886: PPUSH
3887: LD_INT 107
3889: PPUSH
3890: LD_INT 118
3892: PPUSH
3893: CALL_OW 111
3897: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3898: LD_EXP 17
3902: PPUSH
3903: CALL_OW 301
3907: PUSH
3908: LD_EXP 27
3912: PUSH
3913: LD_INT 1
3915: EQUAL
3916: AND
3917: IFFALSE 4050
3919: GO 3921
3921: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
3922: LD_EXP 1
3926: PPUSH
3927: LD_STRING D5b-JMM-1
3929: PPUSH
3930: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
3934: LD_INT 22
3936: PUSH
3937: LD_INT 1
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 26
3946: PUSH
3947: LD_INT 1
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 2
3956: PUSH
3957: LD_INT 25
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 25
3969: PUSH
3970: LD_INT 2
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_INT 25
3979: PUSH
3980: LD_INT 3
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PUSH
3987: LD_INT 25
3989: PUSH
3990: LD_INT 4
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_INT 25
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: LIST
4019: PPUSH
4020: CALL_OW 69
4024: PPUSH
4025: LD_STRING D5b-Sol1-1
4027: PPUSH
4028: LD_STRING 
4030: PPUSH
4031: CALL 6002 0 3
// ChangeMissionObjectives ( M2a ) ;
4035: LD_STRING M2a
4037: PPUSH
4038: CALL_OW 337
// burlakStatus = 1 ;
4042: LD_ADDR_EXP 28
4046: PUSH
4047: LD_INT 1
4049: ST_TO_ADDR
// end ;
4050: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4051: LD_EXP 2
4055: PPUSH
4056: CALL_OW 301
4060: IFFALSE 4197
4062: GO 4064
4064: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING D6-JMM-1
4072: PPUSH
4073: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4077: LD_INT 22
4079: PUSH
4080: LD_INT 1
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 26
4089: PUSH
4090: LD_INT 1
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: LD_INT 25
4102: PUSH
4103: LD_INT 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 25
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 25
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 25
4132: PUSH
4133: LD_INT 4
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 5
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: PPUSH
4163: CALL_OW 69
4167: PPUSH
4168: LD_STRING D6-Sol1-1
4170: PPUSH
4171: LD_STRING 
4173: PPUSH
4174: CALL 6002 0 3
// Say ( JMM , D6-JMM-2 ) ;
4178: LD_EXP 1
4182: PPUSH
4183: LD_STRING D6-JMM-2
4185: PPUSH
4186: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4190: LD_STRING M1a
4192: PPUSH
4193: CALL_OW 337
// end ;
4197: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4198: LD_INT 25
4200: PPUSH
4201: LD_INT 1
4203: PPUSH
4204: CALL_OW 321
4208: PUSH
4209: LD_INT 2
4211: EQUAL
4212: IFFALSE 4229
4214: GO 4216
4216: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4217: LD_EXP 2
4221: PPUSH
4222: LD_STRING D6-Huck-2
4224: PPUSH
4225: CALL_OW 88
// end ;
4229: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4230: LD_INT 22
4232: PUSH
4233: LD_INT 1
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: LD_INT 34
4245: PUSH
4246: LD_INT 8
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 35
4255: PUSH
4256: LD_INT 8
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: PPUSH
4272: CALL_OW 69
4276: PUSH
4277: LD_INT 0
4279: GREATER
4280: IFFALSE 4472
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
// begin enable ;
4289: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 1
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 21
4310: PUSH
4311: LD_INT 3
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: LD_INT 30
4320: PUSH
4321: LD_INT 1
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 57
4333: PUSH
4334: EMPTY
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 70
4351: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4352: LD_ADDR_VAR 0 2
4356: PUSH
4357: LD_INT 5
4359: PPUSH
4360: LD_INT 22
4362: PUSH
4363: LD_INT 1
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 21
4372: PUSH
4373: LD_INT 3
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 30
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 57
4395: PUSH
4396: EMPTY
4397: LIST
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: PPUSH
4409: CALL_OW 70
4413: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4414: LD_VAR 0 1
4418: PUSH
4419: LD_INT 0
4421: GREATER
4422: PUSH
4423: LD_VAR 0 2
4427: PUSH
4428: LD_INT 0
4430: GREATER
4431: AND
4432: IFFALSE 4472
// begin disable ;
4434: DISABLE
// DialogueOn ;
4435: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4439: LD_EXP 1
4443: PPUSH
4444: LD_STRING D7-JMM-1
4446: PPUSH
4447: CALL_OW 88
// DialogueOff ;
4451: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4455: LD_STRING M4
4457: PPUSH
4458: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4462: LD_INT 5
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 424
// end ; end ;
4472: PPOPN 2
4474: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4475: LD_INT 6
4477: PPUSH
4478: LD_INT 22
4480: PUSH
4481: LD_INT 1
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 25
4490: PUSH
4491: LD_INT 4
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 70
4506: PUSH
4507: LD_INT 0
4509: GREATER
4510: PUSH
4511: LD_EXP 37
4515: PUSH
4516: LD_INT 1
4518: EQUAL
4519: AND
4520: PUSH
4521: LD_EXP 29
4525: PUSH
4526: LD_INT 0
4528: EQUAL
4529: AND
4530: IFFALSE 4595
4532: GO 4534
4534: DISABLE
// begin enable ;
4535: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4536: LD_ADDR_EXP 26
4540: PUSH
4541: LD_INT 6
4543: PPUSH
4544: LD_INT 22
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 25
4556: PUSH
4557: LD_INT 4
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 70
4572: PUSH
4573: LD_INT 1
4575: ARRAY
4576: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4577: LD_INT 6
4579: PPUSH
4580: LD_INT 0
4582: PPUSH
4583: CALL_OW 424
// radationResearched = 1 ;
4587: LD_ADDR_EXP 29
4591: PUSH
4592: LD_INT 1
4594: ST_TO_ADDR
// end ;
4595: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4596: LD_EXP 26
4600: PPUSH
4601: CALL_OW 301
4605: PUSH
4606: LD_EXP 29
4610: PUSH
4611: LD_INT 1
4613: EQUAL
4614: AND
4615: IFFALSE 4651
4617: GO 4619
4619: DISABLE
// begin enable ;
4620: ENABLE
// radationResearched = 0 ;
4621: LD_ADDR_EXP 29
4625: PUSH
4626: LD_INT 0
4628: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4629: LD_INT 6
4631: PPUSH
4632: LD_INT 1
4634: PPUSH
4635: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4639: LD_EXP 1
4643: PPUSH
4644: LD_STRING D9a-JMM-1
4646: PPUSH
4647: CALL_OW 88
// end ; end_of_file
4651: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4652: LD_VAR 0 5
4656: PUSH
4657: LD_INT 8
4659: EQUAL
4660: PUSH
4661: LD_EXP 35
4665: PUSH
4666: LD_INT 0
4668: EQUAL
4669: AND
4670: IFFALSE 4723
// begin eventVar1 = 1 ;
4672: LD_ADDR_EXP 35
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// DialogueOn ;
4680: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4684: LD_EXP 1
4688: PPUSH
4689: LD_STRING D6a-JMM-1
4691: PPUSH
4692: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4696: LD_EXP 15
4700: PPUSH
4701: LD_STRING D6a-Pow-1
4703: PPUSH
4704: CALL_OW 94
// DialogueOff ;
4708: CALL_OW 7
// wait ( 3 3$0 ) ;
4712: LD_INT 6300
4714: PPUSH
4715: CALL_OW 67
// PowellSupport ;
4719: CALL 1584 0 0
// end ; end ;
4723: PPOPN 5
4725: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4726: LD_VAR 0 1
4730: PPUSH
4731: CALL_OW 264
4735: PUSH
4736: LD_INT 8
4738: EQUAL
4739: PUSH
4740: LD_EXP 36
4744: PUSH
4745: LD_INT 0
4747: EQUAL
4748: AND
4749: IFFALSE 4818
// begin eventVar2 = 1 ;
4751: LD_ADDR_EXP 36
4755: PUSH
4756: LD_INT 1
4758: ST_TO_ADDR
// DialogueOn ;
4759: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4763: LD_EXP 1
4767: PPUSH
4768: LD_STRING D6b-JMM-1
4770: PPUSH
4771: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4775: LD_EXP 15
4779: PPUSH
4780: LD_STRING D6b-Pow-1
4782: PPUSH
4783: CALL_OW 94
// DialogueOff ;
4787: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4791: LD_INT 5
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
4801: LD_INT 7
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
4811: LD_STRING M3
4813: PPUSH
4814: CALL_OW 337
// end ; end ;
4818: PPOPN 2
4820: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
4821: LD_VAR 0 2
4825: PPUSH
4826: LD_VAR 0 3
4830: PPUSH
4831: LD_INT 5
4833: PPUSH
4834: CALL_OW 309
4838: PUSH
4839: LD_EXP 37
4843: PUSH
4844: LD_INT 0
4846: EQUAL
4847: AND
4848: IFFALSE 5066
// begin eventVar3 = 1 ;
4850: LD_ADDR_EXP 37
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// wait ( 0 0$5 ) ;
4858: LD_INT 175
4860: PPUSH
4861: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
4865: LD_INT 7
4867: PPUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 1
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 21
4880: PUSH
4881: LD_INT 2
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 34
4890: PUSH
4891: LD_INT 11
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PPUSH
4903: CALL_OW 70
4907: PUSH
4908: LD_INT 0
4910: GREATER
4911: IFFALSE 4930
// begin radarOnSpot = 1 ;
4913: LD_ADDR_EXP 30
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
4921: LD_STRING M3a
4923: PPUSH
4924: CALL_OW 337
// end else
4928: GO 4937
// begin ChangeMissionObjectives ( M3b ) ;
4930: LD_STRING M3b
4932: PPUSH
4933: CALL_OW 337
// end ; DialogueOn ;
4937: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
4941: LD_EXP 2
4945: PPUSH
4946: LD_STRING D8-Huck-1
4948: PPUSH
4949: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
4953: LD_EXP 1
4957: PPUSH
4958: LD_STRING D8-JMM-1
4960: PPUSH
4961: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
4965: LD_EXP 2
4969: PPUSH
4970: LD_STRING D8-Huck-2
4972: PPUSH
4973: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
4977: LD_EXP 1
4981: PPUSH
4982: LD_STRING D8-JMM-2
4984: PPUSH
4985: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
4989: LD_EXP 2
4993: PPUSH
4994: LD_STRING D8-Huck-3
4996: PPUSH
4997: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5001: LD_EXP 1
5005: PPUSH
5006: LD_STRING D8-JMM-3
5008: PPUSH
5009: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5013: LD_EXP 2
5017: PPUSH
5018: LD_STRING D8-Huck-4
5020: PPUSH
5021: CALL_OW 88
// DialogueOff ;
5025: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5029: LD_INT 5
5031: PPUSH
5032: LD_INT 0
5034: PPUSH
5035: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5039: LD_INT 7
5041: PPUSH
5042: LD_INT 0
5044: PPUSH
5045: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5049: LD_INT 6
5051: PPUSH
5052: LD_INT 1
5054: PPUSH
5055: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5059: LD_STRING M5
5061: PPUSH
5062: CALL_OW 337
// end ; end ;
5066: PPOPN 3
5068: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5069: LD_EXP 26
5073: PPUSH
5074: CALL_OW 302
5078: PUSH
5079: LD_VAR 0 2
5083: PUSH
5084: LD_EXP 26
5088: EQUAL
5089: AND
5090: PUSH
5091: LD_EXP 38
5095: PUSH
5096: LD_INT 0
5098: EQUAL
5099: AND
5100: PUSH
5101: LD_EXP 37
5105: PUSH
5106: LD_INT 1
5108: EQUAL
5109: AND
5110: IFFALSE 5156
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5112: LD_VAR 0 1
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 268
5124: PUSH
5125: LD_INT 11
5127: EQUAL
5128: PUSH
5129: LD_VAR 0 1
5133: PPUSH
5134: LD_INT 2
5136: PPUSH
5137: CALL_OW 268
5141: PUSH
5142: LD_INT 11
5144: EQUAL
5145: OR
5146: IFFALSE 5156
// eventVar4 = 1 ;
5148: LD_ADDR_EXP 38
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// end ;
5156: PPOPN 2
5158: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
// begin if GetNation ( unit ) = 2 then
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 248
5172: PUSH
5173: LD_INT 2
5175: EQUAL
5176: IFFALSE 5422
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5178: LD_ADDR_EXP 32
5182: PUSH
5183: LD_EXP 32
5187: PUSH
5188: LD_INT 1
5190: PLUS
5191: ST_TO_ADDR
// for i := 1 to sibDeposits do
5192: LD_ADDR_VAR 0 4
5196: PUSH
5197: DOUBLE
5198: LD_INT 1
5200: DEC
5201: ST_TO_ADDR
5202: LD_EXP 31
5206: PUSH
5207: FOR_TO
5208: IFFALSE 5310
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5210: LD_EXP 31
5214: PUSH
5215: LD_VAR 0 4
5219: ARRAY
5220: PUSH
5221: LD_INT 1
5223: ARRAY
5224: PUSH
5225: LD_VAR 0 2
5229: EQUAL
5230: PUSH
5231: LD_EXP 31
5235: PUSH
5236: LD_VAR 0 4
5240: ARRAY
5241: PUSH
5242: LD_INT 2
5244: ARRAY
5245: PUSH
5246: LD_VAR 0 3
5250: EQUAL
5251: AND
5252: IFFALSE 5308
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5254: LD_ADDR_EXP 31
5258: PUSH
5259: LD_EXP 31
5263: PPUSH
5264: LD_VAR 0 4
5268: PUSH
5269: EMPTY
5270: LIST
5271: PUSH
5272: LD_INT 1
5274: ARRAY
5275: PPUSH
5276: CALL_OW 3
5280: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5281: LD_ADDR_EXP 31
5285: PUSH
5286: LD_EXP 31
5290: PPUSH
5291: LD_VAR 0 4
5295: PUSH
5296: EMPTY
5297: LIST
5298: PUSH
5299: LD_INT 2
5301: ARRAY
5302: PPUSH
5303: CALL_OW 3
5307: ST_TO_ADDR
// end ;
5308: GO 5207
5310: POP
5311: POP
// if eventVar5 = 0 then
5312: LD_EXP 39
5316: PUSH
5317: LD_INT 0
5319: EQUAL
5320: IFFALSE 5422
// begin eventVar5 = 1 ;
5322: LD_ADDR_EXP 39
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// DialogueOn ;
5330: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5334: LD_EXP 2
5338: PPUSH
5339: LD_STRING D4-Sci1-1
5341: PPUSH
5342: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5346: LD_EXP 1
5350: PPUSH
5351: LD_STRING D4-JMM-1
5353: PPUSH
5354: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5358: LD_EXP 2
5362: PPUSH
5363: LD_STRING D4-Sci1-2
5365: PPUSH
5366: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5370: LD_EXP 1
5374: PPUSH
5375: LD_STRING D4-JMM-2
5377: PPUSH
5378: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5382: LD_EXP 2
5386: PPUSH
5387: LD_STRING D4-Sci1-3
5389: PPUSH
5390: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5394: LD_EXP 1
5398: PPUSH
5399: LD_STRING D4-JMM-3
5401: PPUSH
5402: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5406: LD_EXP 1
5410: PPUSH
5411: LD_STRING D4-JMM-3a
5413: PPUSH
5414: CALL_OW 88
// DialogueOff ;
5418: CALL_OW 7
// end ; end ; end ;
5422: PPOPN 5
5424: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 255
5434: PUSH
5435: LD_INT 1
5437: EQUAL
5438: PUSH
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 266
5448: PUSH
5449: LD_INT 0
5451: EQUAL
5452: AND
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 1
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 21
5466: PUSH
5467: LD_INT 3
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 2
5476: PUSH
5477: LD_INT 30
5479: PUSH
5480: LD_INT 0
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 30
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 69
5511: PUSH
5512: LD_INT 1
5514: EQUAL
5515: AND
5516: IFFALSE 5530
// SetBName ( building , omega ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_STRING omega
5525: PPUSH
5526: CALL_OW 500
// end ; end_of_file
5530: PPOPN 2
5532: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5533: LD_INT 0
5535: PPUSH
5536: PPUSH
// if exist_mode then
5537: LD_VAR 0 2
5541: IFFALSE 5560
// unit := CreateCharacter ( ident ) else
5543: LD_ADDR_VAR 0 4
5547: PUSH
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 34
5557: ST_TO_ADDR
5558: GO 5575
// unit := NewCharacter ( ident ) ;
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL_OW 25
5574: ST_TO_ADDR
// result := unit ;
5575: LD_ADDR_VAR 0 3
5579: PUSH
5580: LD_VAR 0 4
5584: ST_TO_ADDR
// end ;
5585: LD_VAR 0 3
5589: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5590: LD_INT 0
5592: PPUSH
// vc_chassis := chassis ;
5593: LD_ADDR_OWVAR 37
5597: PUSH
5598: LD_VAR 0 1
5602: ST_TO_ADDR
// vc_engine := engine ;
5603: LD_ADDR_OWVAR 39
5607: PUSH
5608: LD_VAR 0 2
5612: ST_TO_ADDR
// vc_control := control ;
5613: LD_ADDR_OWVAR 38
5617: PUSH
5618: LD_VAR 0 3
5622: ST_TO_ADDR
// vc_weapon := weapon ;
5623: LD_ADDR_OWVAR 40
5627: PUSH
5628: LD_VAR 0 4
5632: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5633: LD_ADDR_OWVAR 41
5637: PUSH
5638: LD_VAR 0 5
5642: ST_TO_ADDR
// end ;
5643: LD_VAR 0 6
5647: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5648: LD_INT 0
5650: PPUSH
5651: PPUSH
5652: PPUSH
5653: PPUSH
5654: PPUSH
5655: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5656: LD_VAR 0 1
5660: NOT
5661: PUSH
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 263
5671: PUSH
5672: LD_INT 2
5674: EQUAL
5675: NOT
5676: OR
5677: IFFALSE 5681
// exit ;
5679: GO 5997
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5681: LD_ADDR_VAR 0 6
5685: PUSH
5686: LD_INT 22
5688: PUSH
5689: LD_VAR 0 1
5693: PPUSH
5694: CALL_OW 255
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 2
5705: PUSH
5706: LD_INT 30
5708: PUSH
5709: LD_INT 36
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 34
5718: PUSH
5719: LD_INT 31
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 69
5739: ST_TO_ADDR
// if not tmp then
5740: LD_VAR 0 6
5744: NOT
5745: IFFALSE 5749
// exit ;
5747: GO 5997
// result := [ ] ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: EMPTY
5755: ST_TO_ADDR
// for i in tmp do
5756: LD_ADDR_VAR 0 3
5760: PUSH
5761: LD_VAR 0 6
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5838
// begin t := UnitsInside ( i ) ;
5769: LD_ADDR_VAR 0 4
5773: PUSH
5774: LD_VAR 0 3
5778: PPUSH
5779: CALL_OW 313
5783: ST_TO_ADDR
// if t then
5784: LD_VAR 0 4
5788: IFFALSE 5836
// for j in t do
5790: LD_ADDR_VAR 0 7
5794: PUSH
5795: LD_VAR 0 4
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5834
// result := Insert ( result , result + 1 , j ) ;
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 2
5817: PUSH
5818: LD_INT 1
5820: PLUS
5821: PPUSH
5822: LD_VAR 0 7
5826: PPUSH
5827: CALL_OW 2
5831: ST_TO_ADDR
5832: GO 5800
5834: POP
5835: POP
// end ;
5836: GO 5766
5838: POP
5839: POP
// if not result then
5840: LD_VAR 0 2
5844: NOT
5845: IFFALSE 5849
// exit ;
5847: GO 5997
// mech := result [ 1 ] ;
5849: LD_ADDR_VAR 0 5
5853: PUSH
5854: LD_VAR 0 2
5858: PUSH
5859: LD_INT 1
5861: ARRAY
5862: ST_TO_ADDR
// if result > 1 then
5863: LD_VAR 0 2
5867: PUSH
5868: LD_INT 1
5870: GREATER
5871: IFFALSE 5983
// for i = 2 to result do
5873: LD_ADDR_VAR 0 3
5877: PUSH
5878: DOUBLE
5879: LD_INT 2
5881: DEC
5882: ST_TO_ADDR
5883: LD_VAR 0 2
5887: PUSH
5888: FOR_TO
5889: IFFALSE 5981
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: LD_VAR 0 2
5900: PUSH
5901: LD_VAR 0 3
5905: ARRAY
5906: PPUSH
5907: LD_INT 3
5909: PPUSH
5910: CALL_OW 259
5914: PUSH
5915: LD_VAR 0 2
5919: PUSH
5920: LD_VAR 0 3
5924: ARRAY
5925: PPUSH
5926: CALL_OW 432
5930: MINUS
5931: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
5932: LD_VAR 0 4
5936: PUSH
5937: LD_VAR 0 5
5941: PPUSH
5942: LD_INT 3
5944: PPUSH
5945: CALL_OW 259
5949: PUSH
5950: LD_VAR 0 5
5954: PPUSH
5955: CALL_OW 432
5959: MINUS
5960: GREATEREQUAL
5961: IFFALSE 5979
// mech := result [ i ] ;
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: LD_VAR 0 2
5972: PUSH
5973: LD_VAR 0 3
5977: ARRAY
5978: ST_TO_ADDR
// end ;
5979: GO 5888
5981: POP
5982: POP
// ComLinkTo ( vehicle , mech ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 5
5992: PPUSH
5993: CALL_OW 135
// end ;
5997: LD_VAR 0 2
6001: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6002: LD_INT 0
6004: PPUSH
6005: PPUSH
6006: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6007: LD_ADDR_VAR 0 1
6011: PUSH
6012: LD_VAR 0 1
6016: PUSH
6017: LD_EXP 1
6021: PUSH
6022: LD_EXP 2
6026: PUSH
6027: LD_EXP 3
6031: PUSH
6032: LD_EXP 4
6036: PUSH
6037: LD_EXP 5
6041: PUSH
6042: LD_EXP 6
6046: PUSH
6047: LD_EXP 7
6051: PUSH
6052: LD_EXP 8
6056: PUSH
6057: LD_EXP 9
6061: PUSH
6062: LD_EXP 10
6066: PUSH
6067: LD_EXP 11
6071: PUSH
6072: LD_EXP 12
6076: PUSH
6077: LD_EXP 13
6081: PUSH
6082: LD_EXP 14
6086: PUSH
6087: LD_EXP 15
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: DIFF
6109: ST_TO_ADDR
// if not characters then
6110: LD_VAR 0 1
6114: NOT
6115: IFFALSE 6119
// exit ;
6117: GO 6198
// speaker := characters [ rand ( 1 , characters ) ] ;
6119: LD_ADDR_VAR 0 6
6123: PUSH
6124: LD_VAR 0 1
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 12
6141: ARRAY
6142: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6143: LD_VAR 0 6
6147: PPUSH
6148: CALL_OW 258
6152: PUSH
6153: LD_INT 1
6155: EQUAL
6156: IFFALSE 6174
// Say ( speaker , dialogMID ) else
6158: LD_VAR 0 6
6162: PPUSH
6163: LD_VAR 0 2
6167: PPUSH
6168: CALL_OW 88
6172: GO 6188
// Say ( speaker , dialogFID ) ;
6174: LD_VAR 0 6
6178: PPUSH
6179: LD_VAR 0 3
6183: PPUSH
6184: CALL_OW 88
// result := speaker ;
6188: LD_ADDR_VAR 0 4
6192: PUSH
6193: LD_VAR 0 6
6197: ST_TO_ADDR
// end ;
6198: LD_VAR 0 4
6202: RET
// export function PrepareDifficulty ; begin
6203: LD_INT 0
6205: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6206: LD_INT 5
6208: PPUSH
6209: LD_INT 8
6211: PPUSH
6212: LD_INT 2
6214: PPUSH
6215: CALL_OW 322
// if difficulty = 1 then
6219: LD_OWVAR 67
6223: PUSH
6224: LD_INT 1
6226: EQUAL
6227: IFFALSE 6346
// begin SetTech ( 66 , 8 , state_researched ) ;
6229: LD_INT 66
6231: PPUSH
6232: LD_INT 8
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6242: LD_INT 67
6244: PPUSH
6245: LD_INT 8
6247: PPUSH
6248: LD_INT 0
6250: PPUSH
6251: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6255: LD_INT 68
6257: PPUSH
6258: LD_INT 8
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6268: LD_INT 51
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: LD_INT 2
6276: PPUSH
6277: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6281: LD_INT 52
6283: PPUSH
6284: LD_INT 8
6286: PPUSH
6287: LD_INT 0
6289: PPUSH
6290: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6294: LD_INT 53
6296: PPUSH
6297: LD_INT 8
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6307: LD_INT 60
6309: PPUSH
6310: LD_INT 8
6312: PPUSH
6313: LD_INT 2
6315: PPUSH
6316: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6320: LD_INT 61
6322: PPUSH
6323: LD_INT 8
6325: PPUSH
6326: LD_INT 0
6328: PPUSH
6329: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6333: LD_INT 62
6335: PPUSH
6336: LD_INT 8
6338: PPUSH
6339: LD_INT 0
6341: PPUSH
6342: CALL_OW 322
// end ; if difficulty = 2 then
6346: LD_OWVAR 67
6350: PUSH
6351: LD_INT 2
6353: EQUAL
6354: IFFALSE 6473
// begin SetTech ( 66 , 8 , state_researched ) ;
6356: LD_INT 66
6358: PPUSH
6359: LD_INT 8
6361: PPUSH
6362: LD_INT 2
6364: PPUSH
6365: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6369: LD_INT 67
6371: PPUSH
6372: LD_INT 8
6374: PPUSH
6375: LD_INT 2
6377: PPUSH
6378: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6382: LD_INT 68
6384: PPUSH
6385: LD_INT 8
6387: PPUSH
6388: LD_INT 0
6390: PPUSH
6391: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6395: LD_INT 51
6397: PPUSH
6398: LD_INT 8
6400: PPUSH
6401: LD_INT 2
6403: PPUSH
6404: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6408: LD_INT 52
6410: PPUSH
6411: LD_INT 8
6413: PPUSH
6414: LD_INT 2
6416: PPUSH
6417: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6421: LD_INT 53
6423: PPUSH
6424: LD_INT 8
6426: PPUSH
6427: LD_INT 2
6429: PPUSH
6430: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6434: LD_INT 60
6436: PPUSH
6437: LD_INT 8
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6447: LD_INT 61
6449: PPUSH
6450: LD_INT 8
6452: PPUSH
6453: LD_INT 2
6455: PPUSH
6456: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6460: LD_INT 62
6462: PPUSH
6463: LD_INT 8
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 322
// end ; if difficulty = 3 then
6473: LD_OWVAR 67
6477: PUSH
6478: LD_INT 3
6480: EQUAL
6481: IFFALSE 6600
// begin SetTech ( 66 , 8 , state_researched ) ;
6483: LD_INT 66
6485: PPUSH
6486: LD_INT 8
6488: PPUSH
6489: LD_INT 2
6491: PPUSH
6492: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6496: LD_INT 67
6498: PPUSH
6499: LD_INT 8
6501: PPUSH
6502: LD_INT 2
6504: PPUSH
6505: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6509: LD_INT 68
6511: PPUSH
6512: LD_INT 8
6514: PPUSH
6515: LD_INT 0
6517: PPUSH
6518: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6522: LD_INT 51
6524: PPUSH
6525: LD_INT 8
6527: PPUSH
6528: LD_INT 2
6530: PPUSH
6531: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6535: LD_INT 52
6537: PPUSH
6538: LD_INT 8
6540: PPUSH
6541: LD_INT 2
6543: PPUSH
6544: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6548: LD_INT 53
6550: PPUSH
6551: LD_INT 8
6553: PPUSH
6554: LD_INT 2
6556: PPUSH
6557: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6561: LD_INT 60
6563: PPUSH
6564: LD_INT 8
6566: PPUSH
6567: LD_INT 2
6569: PPUSH
6570: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6574: LD_INT 61
6576: PPUSH
6577: LD_INT 8
6579: PPUSH
6580: LD_INT 2
6582: PPUSH
6583: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6587: LD_INT 62
6589: PPUSH
6590: LD_INT 8
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 322
// end ; end ;
6600: LD_VAR 0 1
6604: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6605: LD_INT 0
6607: PPUSH
6608: PPUSH
6609: PPUSH
6610: PPUSH
6611: PPUSH
6612: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6613: LD_ADDR_VAR 0 7
6617: PUSH
6618: LD_INT 22
6620: PUSH
6621: LD_VAR 0 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 25
6632: PUSH
6633: LD_INT 9
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 69
6648: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6649: LD_ADDR_VAR 0 8
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_VAR 0 2
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 3
6668: PUSH
6669: LD_INT 21
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PPUSH
6687: CALL_OW 69
6691: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6692: LD_ADDR_VAR 0 5
6696: PUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 3
6702: PPUSH
6703: CALL_OW 12
6707: ST_TO_ADDR
// for i = 1 to list do
6708: LD_ADDR_VAR 0 6
6712: PUSH
6713: DOUBLE
6714: LD_INT 1
6716: DEC
6717: ST_TO_ADDR
6718: LD_VAR 0 7
6722: PUSH
6723: FOR_TO
6724: IFFALSE 6906
// for ta in filter do
6726: LD_ADDR_VAR 0 4
6730: PUSH
6731: LD_VAR 0 8
6735: PUSH
6736: FOR_IN
6737: IFFALSE 6902
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6739: LD_VAR 0 7
6743: PUSH
6744: LD_VAR 0 6
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 4
6754: PPUSH
6755: CALL_OW 296
6759: PUSH
6760: LD_INT 13
6762: LESSEQUAL
6763: IFFALSE 6900
// begin case c of 1 :
6765: LD_VAR 0 5
6769: PUSH
6770: LD_INT 1
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6816
6778: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6779: LD_VAR 0 7
6783: PUSH
6784: LD_VAR 0 6
6788: ARRAY
6789: PPUSH
6790: LD_VAR 0 4
6794: PPUSH
6795: CALL_OW 250
6799: PPUSH
6800: LD_VAR 0 4
6804: PPUSH
6805: CALL_OW 251
6809: PPUSH
6810: CALL_OW 154
6814: GO 6900
6816: LD_INT 2
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6888
6824: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6825: LD_VAR 0 7
6829: PUSH
6830: LD_VAR 0 6
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 4
6840: PPUSH
6841: CALL_OW 250
6845: PUSH
6846: LD_INT 1
6848: NEG
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 12
6857: PLUS
6858: PPUSH
6859: LD_VAR 0 4
6863: PPUSH
6864: CALL_OW 251
6868: PUSH
6869: LD_INT 1
6871: NEG
6872: PPUSH
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 12
6880: PLUS
6881: PPUSH
6882: CALL_OW 153
6886: GO 6900
6888: LD_INT 3
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 6899
6896: POP
// ; end ;
6897: GO 6900
6899: POP
// end ; end ;
6900: GO 6736
6902: POP
6903: POP
6904: GO 6723
6906: POP
6907: POP
// end ;
6908: LD_VAR 0 3
6912: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// for i in charactersList do
6917: LD_ADDR_VAR 0 4
6921: PUSH
6922: LD_VAR 0 1
6926: PUSH
6927: FOR_IN
6928: IFFALSE 6946
// SaveCharacters ( i , ident ) ;
6930: LD_VAR 0 4
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: CALL_OW 38
6944: GO 6927
6946: POP
6947: POP
// end ;
6948: LD_VAR 0 3
6952: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6953: LD_INT 0
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// for i = 1 to medicCount do
6966: LD_ADDR_VAR 0 13
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_VAR 0 7
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7064
// begin uc_side = side ;
6984: LD_ADDR_OWVAR 20
6988: PUSH
6989: LD_VAR 0 1
6993: ST_TO_ADDR
// uc_nation = nation ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_VAR 0 2
7003: ST_TO_ADDR
// hc_name =  ;
7004: LD_ADDR_OWVAR 26
7008: PUSH
7009: LD_STRING 
7011: ST_TO_ADDR
// hc_gallery =  ;
7012: LD_ADDR_OWVAR 33
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_INT 4
7025: PPUSH
7026: LD_VAR 0 8
7030: PPUSH
7031: CALL_OW 380
// un = CreateHuman ;
7035: LD_ADDR_VAR 0 15
7039: PUSH
7040: CALL_OW 44
7044: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7045: LD_VAR 0 15
7049: PPUSH
7050: LD_VAR 0 9
7054: PPUSH
7055: LD_INT 0
7057: PPUSH
7058: CALL_OW 49
// end ;
7062: GO 6981
7064: POP
7065: POP
// for i = 1 to soldierCount do
7066: LD_ADDR_VAR 0 13
7070: PUSH
7071: DOUBLE
7072: LD_INT 1
7074: DEC
7075: ST_TO_ADDR
7076: LD_VAR 0 3
7080: PUSH
7081: FOR_TO
7082: IFFALSE 7164
// begin uc_side = side ;
7084: LD_ADDR_OWVAR 20
7088: PUSH
7089: LD_VAR 0 1
7093: ST_TO_ADDR
// uc_nation = nation ;
7094: LD_ADDR_OWVAR 21
7098: PUSH
7099: LD_VAR 0 2
7103: ST_TO_ADDR
// hc_name =  ;
7104: LD_ADDR_OWVAR 26
7108: PUSH
7109: LD_STRING 
7111: ST_TO_ADDR
// hc_gallery =  ;
7112: LD_ADDR_OWVAR 33
7116: PUSH
7117: LD_STRING 
7119: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7120: LD_INT 0
7122: PPUSH
7123: LD_INT 1
7125: PPUSH
7126: LD_VAR 0 8
7130: PPUSH
7131: CALL_OW 380
// un = CreateHuman ;
7135: LD_ADDR_VAR 0 15
7139: PUSH
7140: CALL_OW 44
7144: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7145: LD_VAR 0 15
7149: PPUSH
7150: LD_VAR 0 9
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
// end ;
7162: GO 7081
7164: POP
7165: POP
// for i = 1 to sniperCount do
7166: LD_ADDR_VAR 0 13
7170: PUSH
7171: DOUBLE
7172: LD_INT 1
7174: DEC
7175: ST_TO_ADDR
7176: LD_VAR 0 4
7180: PUSH
7181: FOR_TO
7182: IFFALSE 7264
// begin uc_side = side ;
7184: LD_ADDR_OWVAR 20
7188: PUSH
7189: LD_VAR 0 1
7193: ST_TO_ADDR
// uc_nation = nation ;
7194: LD_ADDR_OWVAR 21
7198: PUSH
7199: LD_VAR 0 2
7203: ST_TO_ADDR
// hc_name =  ;
7204: LD_ADDR_OWVAR 26
7208: PUSH
7209: LD_STRING 
7211: ST_TO_ADDR
// hc_gallery =  ;
7212: LD_ADDR_OWVAR 33
7216: PUSH
7217: LD_STRING 
7219: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7220: LD_INT 0
7222: PPUSH
7223: LD_INT 5
7225: PPUSH
7226: LD_VAR 0 8
7230: PPUSH
7231: CALL_OW 380
// un = CreateHuman ;
7235: LD_ADDR_VAR 0 15
7239: PUSH
7240: CALL_OW 44
7244: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7245: LD_VAR 0 15
7249: PPUSH
7250: LD_VAR 0 9
7254: PPUSH
7255: LD_INT 0
7257: PPUSH
7258: CALL_OW 49
// end ;
7262: GO 7181
7264: POP
7265: POP
// for i = 1 to bazookCount do
7266: LD_ADDR_VAR 0 13
7270: PUSH
7271: DOUBLE
7272: LD_INT 1
7274: DEC
7275: ST_TO_ADDR
7276: LD_VAR 0 5
7280: PUSH
7281: FOR_TO
7282: IFFALSE 7364
// begin uc_side = side ;
7284: LD_ADDR_OWVAR 20
7288: PUSH
7289: LD_VAR 0 1
7293: ST_TO_ADDR
// uc_nation = nation ;
7294: LD_ADDR_OWVAR 21
7298: PUSH
7299: LD_VAR 0 2
7303: ST_TO_ADDR
// hc_name =  ;
7304: LD_ADDR_OWVAR 26
7308: PUSH
7309: LD_STRING 
7311: ST_TO_ADDR
// hc_gallery =  ;
7312: LD_ADDR_OWVAR 33
7316: PUSH
7317: LD_STRING 
7319: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7320: LD_INT 0
7322: PPUSH
7323: LD_INT 9
7325: PPUSH
7326: LD_VAR 0 8
7330: PPUSH
7331: CALL_OW 380
// un = CreateHuman ;
7335: LD_ADDR_VAR 0 15
7339: PUSH
7340: CALL_OW 44
7344: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7345: LD_VAR 0 15
7349: PPUSH
7350: LD_VAR 0 9
7354: PPUSH
7355: LD_INT 0
7357: PPUSH
7358: CALL_OW 49
// end ;
7362: GO 7281
7364: POP
7365: POP
// for i = 1 to mortalCount do
7366: LD_ADDR_VAR 0 13
7370: PUSH
7371: DOUBLE
7372: LD_INT 1
7374: DEC
7375: ST_TO_ADDR
7376: LD_VAR 0 6
7380: PUSH
7381: FOR_TO
7382: IFFALSE 7464
// begin uc_side = side ;
7384: LD_ADDR_OWVAR 20
7388: PUSH
7389: LD_VAR 0 1
7393: ST_TO_ADDR
// uc_nation = nation ;
7394: LD_ADDR_OWVAR 21
7398: PUSH
7399: LD_VAR 0 2
7403: ST_TO_ADDR
// hc_name =  ;
7404: LD_ADDR_OWVAR 26
7408: PUSH
7409: LD_STRING 
7411: ST_TO_ADDR
// hc_gallery =  ;
7412: LD_ADDR_OWVAR 33
7416: PUSH
7417: LD_STRING 
7419: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7420: LD_INT 0
7422: PPUSH
7423: LD_INT 8
7425: PPUSH
7426: LD_VAR 0 8
7430: PPUSH
7431: CALL_OW 380
// un = CreateHuman ;
7435: LD_ADDR_VAR 0 15
7439: PUSH
7440: CALL_OW 44
7444: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7445: LD_VAR 0 15
7449: PPUSH
7450: LD_VAR 0 9
7454: PPUSH
7455: LD_INT 0
7457: PPUSH
7458: CALL_OW 49
// end ;
7462: GO 7381
7464: POP
7465: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7466: LD_ADDR_VAR 0 17
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: LD_INT 4
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PPUSH
7497: CALL_OW 69
7501: ST_TO_ADDR
// for i in medic_list do
7502: LD_ADDR_VAR 0 13
7506: PUSH
7507: LD_VAR 0 17
7511: PUSH
7512: FOR_IN
7513: IFFALSE 7548
// if GetTag ( i ) = 1 then
7515: LD_VAR 0 13
7519: PPUSH
7520: CALL_OW 110
7524: PUSH
7525: LD_INT 1
7527: EQUAL
7528: IFFALSE 7546
// medic_list := medic_list diff i ;
7530: LD_ADDR_VAR 0 17
7534: PUSH
7535: LD_VAR 0 17
7539: PUSH
7540: LD_VAR 0 13
7544: DIFF
7545: ST_TO_ADDR
7546: GO 7512
7548: POP
7549: POP
// for i in medic_list do
7550: LD_ADDR_VAR 0 13
7554: PUSH
7555: LD_VAR 0 17
7559: PUSH
7560: FOR_IN
7561: IFFALSE 7579
// ComMoveToArea ( i , healArea ) ;
7563: LD_VAR 0 13
7567: PPUSH
7568: LD_VAR 0 10
7572: PPUSH
7573: CALL_OW 113
7577: GO 7560
7579: POP
7580: POP
// repeat wait ( 0 0$1 ) ;
7581: LD_INT 35
7583: PPUSH
7584: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7588: LD_ADDR_VAR 0 16
7592: PUSH
7593: LD_INT 22
7595: PUSH
7596: LD_VAR 0 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 1
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: LD_INT 24
7613: PUSH
7614: LD_INT 550
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 24
7627: PUSH
7628: LD_INT 250
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 69
7648: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7649: LD_ADDR_VAR 0 18
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_VAR 0 1
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 1
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 25
7681: PUSH
7682: LD_INT 5
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 25
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 25
7701: PUSH
7702: LD_INT 9
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 24
7718: PUSH
7719: LD_INT 1000
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: PPUSH
7731: CALL_OW 69
7735: ST_TO_ADDR
// if medicCount > 0 then
7736: LD_VAR 0 7
7740: PUSH
7741: LD_INT 0
7743: GREATER
7744: IFFALSE 7818
// begin if damageUnit_list > 0 then
7746: LD_VAR 0 16
7750: PUSH
7751: LD_INT 0
7753: GREATER
7754: IFFALSE 7818
// begin for i in damageUnit_list do
7756: LD_ADDR_VAR 0 13
7760: PUSH
7761: LD_VAR 0 16
7765: PUSH
7766: FOR_IN
7767: IFFALSE 7816
// begin ComMoveToArea ( i , healArea ) ;
7769: LD_VAR 0 13
7773: PPUSH
7774: LD_VAR 0 10
7778: PPUSH
7779: CALL_OW 113
// for j in medic_list do
7783: LD_ADDR_VAR 0 14
7787: PUSH
7788: LD_VAR 0 17
7792: PUSH
7793: FOR_IN
7794: IFFALSE 7812
// AddComHeal ( j , i ) ;
7796: LD_VAR 0 14
7800: PPUSH
7801: LD_VAR 0 13
7805: PPUSH
7806: CALL_OW 188
7810: GO 7793
7812: POP
7813: POP
// end ;
7814: GO 7766
7816: POP
7817: POP
// end ; end ; for i in soldiersOK_list do
7818: LD_ADDR_VAR 0 13
7822: PUSH
7823: LD_VAR 0 18
7827: PUSH
7828: FOR_IN
7829: IFFALSE 8005
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7831: LD_ADDR_VAR 0 21
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_VAR 0 11
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PPUSH
7848: CALL_OW 69
7852: PPUSH
7853: LD_VAR 0 13
7857: PPUSH
7858: CALL_OW 74
7862: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7863: LD_ADDR_VAR 0 22
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 11
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: LD_INT 59
7885: PUSH
7886: EMPTY
7887: LIST
7888: PUSH
7889: LD_INT 21
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 21
7901: PUSH
7902: LD_INT 2
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: EMPTY
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: PPUSH
7927: LD_VAR 0 13
7931: PPUSH
7932: CALL_OW 74
7936: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7937: LD_VAR 0 13
7941: PPUSH
7942: LD_VAR 0 21
7946: PPUSH
7947: CALL_OW 296
7951: PUSH
7952: LD_INT 8
7954: PLUS
7955: PUSH
7956: LD_VAR 0 13
7960: PPUSH
7961: LD_VAR 0 22
7965: PPUSH
7966: CALL_OW 296
7970: LESS
7971: IFFALSE 7989
// begin ComAttackUnit ( i , target1 ) ;
7973: LD_VAR 0 13
7977: PPUSH
7978: LD_VAR 0 21
7982: PPUSH
7983: CALL_OW 115
// end else
7987: GO 8003
// begin ComAttackUnit ( i , target2 ) ;
7989: LD_VAR 0 13
7993: PPUSH
7994: LD_VAR 0 22
7998: PPUSH
7999: CALL_OW 115
// end ; end ;
8003: GO 7828
8005: POP
8006: POP
// until soldiersOK_list = [ ] ;
8007: LD_VAR 0 18
8011: PUSH
8012: EMPTY
8013: EQUAL
8014: IFFALSE 7581
// end ;
8016: LD_VAR 0 12
8020: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8021: LD_INT 0
8023: PPUSH
8024: PPUSH
8025: PPUSH
8026: PPUSH
8027: PPUSH
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
8032: PPUSH
8033: PPUSH
// amChassisTab = [ ] ;
8034: LD_ADDR_VAR 0 19
8038: PUSH
8039: EMPTY
8040: ST_TO_ADDR
// arChassisTab = [ ] ;
8041: LD_ADDR_VAR 0 18
8045: PUSH
8046: EMPTY
8047: ST_TO_ADDR
// ruChassisTab = [ ] ;
8048: LD_ADDR_VAR 0 17
8052: PUSH
8053: EMPTY
8054: ST_TO_ADDR
// for i = 1 to vehCount do
8055: LD_ADDR_VAR 0 13
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_VAR 0 3
8069: PUSH
8070: FOR_TO
8071: IFFALSE 9495
// begin wait ( 0 0$01 ) ;
8073: LD_INT 35
8075: PPUSH
8076: CALL_OW 67
// if nation = 1 then
8080: LD_VAR 0 5
8084: PUSH
8085: LD_INT 1
8087: EQUAL
8088: IFFALSE 8569
// begin uc_side = side ;
8090: LD_ADDR_OWVAR 20
8094: PUSH
8095: LD_VAR 0 2
8099: ST_TO_ADDR
// uc_nation = nation ;
8100: LD_ADDR_OWVAR 21
8104: PUSH
8105: LD_VAR 0 5
8109: ST_TO_ADDR
// vc_engine = vehengine ;
8110: LD_ADDR_OWVAR 39
8114: PUSH
8115: LD_VAR 0 6
8119: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8120: LD_ADDR_OWVAR 40
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: PPUSH
8133: LD_VAR 0 10
8137: PPUSH
8138: CALL_OW 12
8142: ARRAY
8143: ST_TO_ADDR
// for j = 1 to AMWeapon do
8144: LD_ADDR_VAR 0 14
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 10
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8461
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8162: LD_VAR 0 10
8166: PUSH
8167: LD_VAR 0 14
8171: ARRAY
8172: PUSH
8173: LD_INT 2
8175: EQUAL
8176: PUSH
8177: LD_VAR 0 10
8181: PUSH
8182: LD_VAR 0 14
8186: ARRAY
8187: PUSH
8188: LD_INT 3
8190: EQUAL
8191: OR
8192: IFFALSE 8245
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8194: LD_ADDR_VAR 0 19
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: LD_INT 3
8207: PUSH
8208: LD_INT 4
8210: PUSH
8211: LD_INT 5
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8221: LD_ADDR_OWVAR 37
8225: PUSH
8226: LD_VAR 0 19
8230: PUSH
8231: LD_INT 1
8233: PPUSH
8234: LD_VAR 0 19
8238: PPUSH
8239: CALL_OW 12
8243: ARRAY
8244: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8245: LD_VAR 0 10
8249: PUSH
8250: LD_VAR 0 14
8254: ARRAY
8255: PUSH
8256: LD_INT 4
8258: EQUAL
8259: PUSH
8260: LD_VAR 0 10
8264: PUSH
8265: LD_VAR 0 14
8269: ARRAY
8270: PUSH
8271: LD_INT 5
8273: EQUAL
8274: OR
8275: PUSH
8276: LD_VAR 0 10
8280: PUSH
8281: LD_VAR 0 14
8285: ARRAY
8286: PUSH
8287: LD_INT 9
8289: EQUAL
8290: OR
8291: PUSH
8292: LD_VAR 0 10
8296: PUSH
8297: LD_VAR 0 14
8301: ARRAY
8302: PUSH
8303: LD_INT 11
8305: EQUAL
8306: OR
8307: PUSH
8308: LD_VAR 0 10
8312: PUSH
8313: LD_VAR 0 14
8317: ARRAY
8318: PUSH
8319: LD_INT 7
8321: EQUAL
8322: OR
8323: IFFALSE 8372
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8325: LD_ADDR_VAR 0 19
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 3
8335: PUSH
8336: LD_INT 4
8338: PUSH
8339: LD_INT 5
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8348: LD_ADDR_OWVAR 37
8352: PUSH
8353: LD_VAR 0 19
8357: PUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_VAR 0 19
8365: PPUSH
8366: CALL_OW 12
8370: ARRAY
8371: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8372: LD_VAR 0 10
8376: PUSH
8377: LD_VAR 0 14
8381: ARRAY
8382: PUSH
8383: LD_INT 8
8385: EQUAL
8386: PUSH
8387: LD_VAR 0 10
8391: PUSH
8392: LD_VAR 0 14
8396: ARRAY
8397: PUSH
8398: LD_INT 6
8400: EQUAL
8401: OR
8402: PUSH
8403: LD_VAR 0 10
8407: PUSH
8408: LD_VAR 0 14
8412: ARRAY
8413: PUSH
8414: LD_INT 10
8416: EQUAL
8417: OR
8418: IFFALSE 8459
// begin amChassisTab = [ 4 , 5 ] ;
8420: LD_ADDR_VAR 0 19
8424: PUSH
8425: LD_INT 4
8427: PUSH
8428: LD_INT 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8435: LD_ADDR_OWVAR 37
8439: PUSH
8440: LD_VAR 0 19
8444: PUSH
8445: LD_INT 1
8447: PPUSH
8448: LD_VAR 0 19
8452: PPUSH
8453: CALL_OW 12
8457: ARRAY
8458: ST_TO_ADDR
// end ; end ;
8459: GO 8159
8461: POP
8462: POP
// veh = CreateVehicle ;
8463: LD_ADDR_VAR 0 16
8467: PUSH
8468: CALL_OW 45
8472: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8473: LD_VAR 0 16
8477: PPUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 0
8485: PPUSH
8486: CALL_OW 49
// if vc_control = 1 then
8490: LD_OWVAR 38
8494: PUSH
8495: LD_INT 1
8497: EQUAL
8498: IFFALSE 8555
// begin hc_gallery =  ;
8500: LD_ADDR_OWVAR 33
8504: PUSH
8505: LD_STRING 
8507: ST_TO_ADDR
// hc_name =  ;
8508: LD_ADDR_OWVAR 26
8512: PUSH
8513: LD_STRING 
8515: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8516: LD_INT 0
8518: PPUSH
8519: LD_INT 3
8521: PPUSH
8522: LD_VAR 0 4
8526: PPUSH
8527: CALL_OW 380
// un = CreateHuman ;
8531: LD_ADDR_VAR 0 15
8535: PUSH
8536: CALL_OW 44
8540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8541: LD_VAR 0 15
8545: PPUSH
8546: LD_VAR 0 16
8550: PPUSH
8551: CALL_OW 52
// end ; i = i + 1 ;
8555: LD_ADDR_VAR 0 13
8559: PUSH
8560: LD_VAR 0 13
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// end ; if nation = 2 then
8569: LD_VAR 0 5
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 9079
// begin uc_side = side ;
8579: LD_ADDR_OWVAR 20
8583: PUSH
8584: LD_VAR 0 2
8588: ST_TO_ADDR
// uc_nation = nation ;
8589: LD_ADDR_OWVAR 21
8593: PUSH
8594: LD_VAR 0 5
8598: ST_TO_ADDR
// vc_engine = vehengine ;
8599: LD_ADDR_OWVAR 39
8603: PUSH
8604: LD_VAR 0 6
8608: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8609: LD_INT 22
8611: PUSH
8612: LD_VAR 0 2
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 21
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 33
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 50
8643: PUSH
8644: EMPTY
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: PPUSH
8653: CALL_OW 69
8657: PUSH
8658: LD_INT 8
8660: LESSEQUAL
8661: IFFALSE 8689
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8663: LD_ADDR_OWVAR 38
8667: PUSH
8668: LD_VAR 0 7
8672: PUSH
8673: LD_INT 1
8675: PPUSH
8676: LD_VAR 0 7
8680: PPUSH
8681: CALL_OW 12
8685: ARRAY
8686: ST_TO_ADDR
8687: GO 8697
// vc_control = control_apeman ;
8689: LD_ADDR_OWVAR 38
8693: PUSH
8694: LD_INT 5
8696: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8697: LD_ADDR_OWVAR 40
8701: PUSH
8702: LD_VAR 0 9
8706: PUSH
8707: LD_INT 1
8709: PPUSH
8710: LD_VAR 0 9
8714: PPUSH
8715: CALL_OW 12
8719: ARRAY
8720: ST_TO_ADDR
// for j = 1 to ARWeapons do
8721: LD_ADDR_VAR 0 14
8725: PUSH
8726: DOUBLE
8727: LD_INT 1
8729: DEC
8730: ST_TO_ADDR
8731: LD_VAR 0 9
8735: PUSH
8736: FOR_TO
8737: IFFALSE 8971
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8739: LD_VAR 0 9
8743: PUSH
8744: LD_VAR 0 14
8748: ARRAY
8749: PUSH
8750: LD_INT 24
8752: EQUAL
8753: PUSH
8754: LD_VAR 0 9
8758: PUSH
8759: LD_VAR 0 14
8763: ARRAY
8764: PUSH
8765: LD_INT 22
8767: EQUAL
8768: OR
8769: PUSH
8770: LD_VAR 0 9
8774: PUSH
8775: LD_VAR 0 14
8779: ARRAY
8780: PUSH
8781: LD_INT 23
8783: EQUAL
8784: OR
8785: PUSH
8786: LD_VAR 0 9
8790: PUSH
8791: LD_VAR 0 14
8795: ARRAY
8796: PUSH
8797: LD_INT 30
8799: EQUAL
8800: OR
8801: IFFALSE 8850
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8803: LD_ADDR_VAR 0 18
8807: PUSH
8808: LD_INT 11
8810: PUSH
8811: LD_INT 12
8813: PUSH
8814: LD_INT 13
8816: PUSH
8817: LD_INT 14
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8826: LD_ADDR_OWVAR 37
8830: PUSH
8831: LD_VAR 0 18
8835: PUSH
8836: LD_INT 1
8838: PPUSH
8839: LD_VAR 0 18
8843: PPUSH
8844: CALL_OW 12
8848: ARRAY
8849: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8850: LD_VAR 0 9
8854: PUSH
8855: LD_VAR 0 14
8859: ARRAY
8860: PUSH
8861: LD_INT 29
8863: EQUAL
8864: PUSH
8865: LD_VAR 0 9
8869: PUSH
8870: LD_VAR 0 14
8874: ARRAY
8875: PUSH
8876: LD_INT 28
8878: EQUAL
8879: OR
8880: PUSH
8881: LD_VAR 0 9
8885: PUSH
8886: LD_VAR 0 14
8890: ARRAY
8891: PUSH
8892: LD_INT 27
8894: EQUAL
8895: OR
8896: PUSH
8897: LD_VAR 0 9
8901: PUSH
8902: LD_VAR 0 14
8906: ARRAY
8907: PUSH
8908: LD_INT 26
8910: EQUAL
8911: OR
8912: PUSH
8913: LD_VAR 0 9
8917: PUSH
8918: LD_VAR 0 14
8922: ARRAY
8923: PUSH
8924: LD_INT 25
8926: EQUAL
8927: OR
8928: IFFALSE 8969
// begin arChassisTab = [ 13 , 14 ] ;
8930: LD_ADDR_VAR 0 18
8934: PUSH
8935: LD_INT 13
8937: PUSH
8938: LD_INT 14
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8945: LD_ADDR_OWVAR 37
8949: PUSH
8950: LD_VAR 0 18
8954: PUSH
8955: LD_INT 1
8957: PPUSH
8958: LD_VAR 0 18
8962: PPUSH
8963: CALL_OW 12
8967: ARRAY
8968: ST_TO_ADDR
// end ; end ;
8969: GO 8736
8971: POP
8972: POP
// veh = CreateVehicle ;
8973: LD_ADDR_VAR 0 16
8977: PUSH
8978: CALL_OW 45
8982: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8983: LD_VAR 0 16
8987: PPUSH
8988: LD_VAR 0 1
8992: PPUSH
8993: LD_INT 0
8995: PPUSH
8996: CALL_OW 49
// if vc_control = 1 then
9000: LD_OWVAR 38
9004: PUSH
9005: LD_INT 1
9007: EQUAL
9008: IFFALSE 9065
// begin hc_gallery =  ;
9010: LD_ADDR_OWVAR 33
9014: PUSH
9015: LD_STRING 
9017: ST_TO_ADDR
// hc_name =  ;
9018: LD_ADDR_OWVAR 26
9022: PUSH
9023: LD_STRING 
9025: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9026: LD_INT 0
9028: PPUSH
9029: LD_INT 3
9031: PPUSH
9032: LD_VAR 0 4
9036: PPUSH
9037: CALL_OW 380
// un = CreateHuman ;
9041: LD_ADDR_VAR 0 15
9045: PUSH
9046: CALL_OW 44
9050: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9051: LD_VAR 0 15
9055: PPUSH
9056: LD_VAR 0 16
9060: PPUSH
9061: CALL_OW 52
// end ; i = i + 1 ;
9065: LD_ADDR_VAR 0 13
9069: PUSH
9070: LD_VAR 0 13
9074: PUSH
9075: LD_INT 1
9077: PLUS
9078: ST_TO_ADDR
// end ; if nation = 3 then
9079: LD_VAR 0 5
9083: PUSH
9084: LD_INT 3
9086: EQUAL
9087: IFFALSE 9493
// begin uc_side = side ;
9089: LD_ADDR_OWVAR 20
9093: PUSH
9094: LD_VAR 0 2
9098: ST_TO_ADDR
// uc_nation = nation ;
9099: LD_ADDR_OWVAR 21
9103: PUSH
9104: LD_VAR 0 5
9108: ST_TO_ADDR
// vc_engine = vehengine ;
9109: LD_ADDR_OWVAR 39
9113: PUSH
9114: LD_VAR 0 6
9118: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9119: LD_ADDR_OWVAR 38
9123: PUSH
9124: LD_VAR 0 7
9128: PUSH
9129: LD_INT 1
9131: PPUSH
9132: LD_VAR 0 7
9136: PPUSH
9137: CALL_OW 12
9141: ARRAY
9142: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9143: LD_ADDR_OWVAR 40
9147: PUSH
9148: LD_VAR 0 8
9152: PUSH
9153: LD_INT 1
9155: PPUSH
9156: LD_VAR 0 8
9160: PPUSH
9161: CALL_OW 12
9165: ARRAY
9166: ST_TO_ADDR
// for j = 1 to RuWeapons do
9167: LD_ADDR_VAR 0 14
9171: PUSH
9172: DOUBLE
9173: LD_INT 1
9175: DEC
9176: ST_TO_ADDR
9177: LD_VAR 0 8
9181: PUSH
9182: FOR_TO
9183: IFFALSE 9369
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9185: LD_VAR 0 8
9189: PUSH
9190: LD_VAR 0 14
9194: ARRAY
9195: PUSH
9196: LD_INT 42
9198: EQUAL
9199: PUSH
9200: LD_VAR 0 8
9204: PUSH
9205: LD_VAR 0 14
9209: ARRAY
9210: PUSH
9211: LD_INT 43
9213: EQUAL
9214: OR
9215: PUSH
9216: LD_VAR 0 8
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PUSH
9227: LD_INT 44
9229: EQUAL
9230: OR
9231: PUSH
9232: LD_VAR 0 8
9236: PUSH
9237: LD_VAR 0 14
9241: ARRAY
9242: PUSH
9243: LD_INT 45
9245: EQUAL
9246: OR
9247: PUSH
9248: LD_VAR 0 8
9252: PUSH
9253: LD_VAR 0 14
9257: ARRAY
9258: PUSH
9259: LD_INT 49
9261: EQUAL
9262: OR
9263: IFFALSE 9300
// begin ruChassisTab = [ 24 ] ;
9265: LD_ADDR_VAR 0 17
9269: PUSH
9270: LD_INT 24
9272: PUSH
9273: EMPTY
9274: LIST
9275: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9276: LD_ADDR_OWVAR 37
9280: PUSH
9281: LD_VAR 0 17
9285: PUSH
9286: LD_INT 1
9288: PPUSH
9289: LD_VAR 0 17
9293: PPUSH
9294: CALL_OW 12
9298: ARRAY
9299: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9300: LD_VAR 0 8
9304: PUSH
9305: LD_VAR 0 14
9309: ARRAY
9310: PUSH
9311: LD_INT 46
9313: EQUAL
9314: PUSH
9315: LD_VAR 0 8
9319: PUSH
9320: LD_VAR 0 14
9324: ARRAY
9325: PUSH
9326: LD_INT 47
9328: EQUAL
9329: OR
9330: IFFALSE 9367
// begin ruChassisTab = [ 24 ] ;
9332: LD_ADDR_VAR 0 17
9336: PUSH
9337: LD_INT 24
9339: PUSH
9340: EMPTY
9341: LIST
9342: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9343: LD_ADDR_OWVAR 37
9347: PUSH
9348: LD_VAR 0 17
9352: PUSH
9353: LD_INT 1
9355: PPUSH
9356: LD_VAR 0 17
9360: PPUSH
9361: CALL_OW 12
9365: ARRAY
9366: ST_TO_ADDR
// end ; end ;
9367: GO 9182
9369: POP
9370: POP
// veh = CreateVehicle ;
9371: LD_ADDR_VAR 0 16
9375: PUSH
9376: CALL_OW 45
9380: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9381: LD_VAR 0 16
9385: PPUSH
9386: LD_VAR 0 1
9390: PPUSH
9391: LD_INT 0
9393: PPUSH
9394: CALL_OW 49
// if vc_control = 1 then
9398: LD_OWVAR 38
9402: PUSH
9403: LD_INT 1
9405: EQUAL
9406: IFFALSE 9493
// begin if uc_side = 8 then
9408: LD_OWVAR 20
9412: PUSH
9413: LD_INT 8
9415: EQUAL
9416: IFFALSE 9428
// uc_nation = 2 else
9418: LD_ADDR_OWVAR 21
9422: PUSH
9423: LD_INT 2
9425: ST_TO_ADDR
9426: GO 9438
// uc_nation = nation ;
9428: LD_ADDR_OWVAR 21
9432: PUSH
9433: LD_VAR 0 5
9437: ST_TO_ADDR
// hc_gallery =  ;
9438: LD_ADDR_OWVAR 33
9442: PUSH
9443: LD_STRING 
9445: ST_TO_ADDR
// hc_name =  ;
9446: LD_ADDR_OWVAR 26
9450: PUSH
9451: LD_STRING 
9453: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9454: LD_INT 0
9456: PPUSH
9457: LD_INT 3
9459: PPUSH
9460: LD_VAR 0 4
9464: PPUSH
9465: CALL_OW 380
// un = CreateHuman ;
9469: LD_ADDR_VAR 0 15
9473: PUSH
9474: CALL_OW 44
9478: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9479: LD_VAR 0 15
9483: PPUSH
9484: LD_VAR 0 16
9488: PPUSH
9489: CALL_OW 52
// end ; end ; end ;
9493: GO 8070
9495: POP
9496: POP
// repeat wait ( 0 0$1 ) ;
9497: LD_INT 35
9499: PPUSH
9500: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9504: LD_ADDR_VAR 0 20
9508: PUSH
9509: LD_INT 22
9511: PUSH
9512: LD_VAR 0 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 21
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 24
9533: PUSH
9534: LD_INT 250
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 34
9546: PUSH
9547: LD_INT 25
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 34
9556: PUSH
9557: LD_INT 26
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 34
9566: PUSH
9567: LD_INT 27
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 34
9576: PUSH
9577: LD_INT 28
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 34
9586: PUSH
9587: LD_INT 29
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 34
9596: PUSH
9597: LD_INT 46
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 34
9606: PUSH
9607: LD_INT 44
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 34
9616: PUSH
9617: LD_INT 45
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 34
9626: PUSH
9627: LD_INT 47
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PPUSH
9652: CALL_OW 69
9656: ST_TO_ADDR
// if vehicleOK_list > 0 then
9657: LD_VAR 0 20
9661: PUSH
9662: LD_INT 0
9664: GREATER
9665: IFFALSE 9884
// begin for i in vehicleOK_list do
9667: LD_ADDR_VAR 0 13
9671: PUSH
9672: LD_VAR 0 20
9676: PUSH
9677: FOR_IN
9678: IFFALSE 9882
// begin if GetSide ( i ) <> side then
9680: LD_VAR 0 13
9684: PPUSH
9685: CALL_OW 255
9689: PUSH
9690: LD_VAR 0 2
9694: NONEQUAL
9695: IFFALSE 9708
// begin ComStop ( i ) ;
9697: LD_VAR 0 13
9701: PPUSH
9702: CALL_OW 141
// continue ;
9706: GO 9677
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9708: LD_ADDR_VAR 0 21
9712: PUSH
9713: LD_INT 22
9715: PUSH
9716: LD_VAR 0 11
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 69
9729: PPUSH
9730: LD_VAR 0 13
9734: PPUSH
9735: CALL_OW 74
9739: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9740: LD_ADDR_VAR 0 22
9744: PUSH
9745: LD_INT 22
9747: PUSH
9748: LD_VAR 0 11
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 2
9759: PUSH
9760: LD_INT 59
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: LD_INT 21
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 21
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: PPUSH
9804: LD_VAR 0 13
9808: PPUSH
9809: CALL_OW 74
9813: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9814: LD_VAR 0 13
9818: PPUSH
9819: LD_VAR 0 21
9823: PPUSH
9824: CALL_OW 296
9828: PUSH
9829: LD_INT 8
9831: PLUS
9832: PUSH
9833: LD_VAR 0 13
9837: PPUSH
9838: LD_VAR 0 22
9842: PPUSH
9843: CALL_OW 296
9847: LESS
9848: IFFALSE 9866
// begin ComAttackUnit ( i , target1 ) ;
9850: LD_VAR 0 13
9854: PPUSH
9855: LD_VAR 0 21
9859: PPUSH
9860: CALL_OW 115
// end else
9864: GO 9880
// begin ComAttackUnit ( i , target2 ) ;
9866: LD_VAR 0 13
9870: PPUSH
9871: LD_VAR 0 22
9875: PPUSH
9876: CALL_OW 115
// end ; end ;
9880: GO 9677
9882: POP
9883: POP
// end ; until vehicleOK_list = 0 ;
9884: LD_VAR 0 20
9888: PUSH
9889: LD_INT 0
9891: EQUAL
9892: IFFALSE 9497
// end ;
9894: LD_VAR 0 12
9898: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9899: LD_INT 0
9901: PPUSH
9902: PPUSH
9903: PPUSH
9904: PPUSH
9905: PPUSH
9906: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9907: LD_ADDR_VAR 0 6
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_VAR 0 1
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 34
9926: PUSH
9927: LD_INT 29
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: ST_TO_ADDR
// if veh_list = 0 then
9943: LD_VAR 0 6
9947: PUSH
9948: LD_INT 0
9950: EQUAL
9951: IFFALSE 9955
// exit ;
9953: GO 10160
// if veh_list > 0 then
9955: LD_VAR 0 6
9959: PUSH
9960: LD_INT 0
9962: GREATER
9963: IFFALSE 10160
// begin for i in veh_List do
9965: LD_ADDR_VAR 0 4
9969: PUSH
9970: LD_VAR 0 6
9974: PUSH
9975: FOR_IN
9976: IFFALSE 10158
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9978: LD_ADDR_VAR 0 7
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_VAR 0 2
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 24
9997: PUSH
9998: LD_INT 250
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: LD_INT 59
10010: PUSH
10011: EMPTY
10012: LIST
10013: PUSH
10014: LD_INT 21
10016: PUSH
10017: LD_INT 1
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PUSH
10024: LD_INT 21
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: LD_VAR 0 4
10057: PPUSH
10058: CALL_OW 74
10062: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10063: LD_VAR 0 4
10067: PPUSH
10068: LD_VAR 0 7
10072: PPUSH
10073: CALL_OW 115
// if not HasTask ( i ) then
10077: LD_VAR 0 4
10081: PPUSH
10082: CALL_OW 314
10086: NOT
10087: IFFALSE 10156
// begin wait ( 0 0$0.1 ) ;
10089: LD_INT 4
10091: PPUSH
10092: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_VAR 0 2
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 24
10115: PUSH
10116: LD_INT 250
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PPUSH
10127: CALL_OW 69
10131: PPUSH
10132: LD_VAR 0 4
10136: PPUSH
10137: CALL_OW 74
10141: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10142: LD_VAR 0 4
10146: PPUSH
10147: LD_VAR 0 8
10151: PPUSH
10152: CALL_OW 115
// end ; end ;
10156: GO 9975
10158: POP
10159: POP
// end ; end ; end_of_file
10160: LD_VAR 0 3
10164: RET
// every 0 0$1 do
10165: GO 10167
10167: DISABLE
// begin enable ;
10168: ENABLE
// IntBazooka ( 7 , 1 ) ;
10169: LD_INT 7
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: CALL 6605 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10179: LD_INT 8
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL 9899 0 2
// end ;
10189: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10190: LD_INT 22
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 50
10212: PUSH
10213: EMPTY
10214: LIST
10215: PUSH
10216: LD_INT 2
10218: PUSH
10219: LD_INT 34
10221: PUSH
10222: LD_INT 46
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 34
10231: PUSH
10232: LD_INT 44
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 34
10241: PUSH
10242: LD_INT 45
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 34
10251: PUSH
10252: LD_INT 47
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 69
10276: PUSH
10277: LD_INT 0
10279: GREATER
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 3
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 21
10293: PUSH
10294: LD_INT 2
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 50
10303: PUSH
10304: EMPTY
10305: LIST
10306: PUSH
10307: LD_INT 34
10309: PUSH
10310: LD_INT 49
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: PUSH
10328: LD_INT 0
10330: GREATER
10331: AND
10332: IFFALSE 10504
10334: GO 10336
10336: DISABLE
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
// begin enable ;
10341: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 3
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 21
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 50
10369: PUSH
10370: EMPTY
10371: LIST
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: LD_INT 34
10378: PUSH
10379: LD_INT 46
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 34
10388: PUSH
10389: LD_INT 44
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 34
10398: PUSH
10399: LD_INT 45
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 34
10408: PUSH
10409: LD_INT 47
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 69
10433: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10434: LD_ADDR_VAR 0 2
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 21
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 50
10461: PUSH
10462: EMPTY
10463: LIST
10464: PUSH
10465: LD_INT 34
10467: PUSH
10468: LD_INT 49
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 69
10485: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10486: LD_VAR 0 2
10490: PPUSH
10491: LD_VAR 0 1
10495: PUSH
10496: LD_INT 1
10498: ARRAY
10499: PPUSH
10500: CALL_OW 112
// end ; end_of_file
10504: PPOPN 2
10506: END
// every 0 0$1 trigger eventVar4 = 1 do
10507: LD_EXP 38
10511: PUSH
10512: LD_INT 1
10514: EQUAL
10515: IFFALSE 11309
10517: GO 10519
10519: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10520: LD_EXP 1
10524: PPUSH
10525: LD_STRING D9b-JMM-1
10527: PPUSH
10528: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10532: LD_EXP 15
10536: PPUSH
10537: LD_STRING D9b-Pow-1
10539: PPUSH
10540: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10544: LD_EXP 1
10548: PPUSH
10549: LD_STRING D9b-JMM-2
10551: PPUSH
10552: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10556: LD_EXP 15
10560: PPUSH
10561: LD_STRING D9b-Pow-2
10563: PPUSH
10564: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10568: LD_EXP 1
10572: PPUSH
10573: LD_STRING D9b-JMM-3
10575: PPUSH
10576: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10580: LD_EXP 15
10584: PPUSH
10585: LD_STRING D9b-Pow-3
10587: PPUSH
10588: CALL_OW 94
// if burlakStatus = 1 then
10592: LD_EXP 28
10596: PUSH
10597: LD_INT 1
10599: EQUAL
10600: IFFALSE 10614
// begin AddMedal ( Burlak , 1 ) ;
10602: LD_STRING Burlak
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 101
// end else
10612: GO 10625
// begin AddMedal ( Burlak , - 1 ) ;
10614: LD_STRING Burlak
10616: PPUSH
10617: LD_INT 1
10619: NEG
10620: PPUSH
10621: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10625: LD_EXP 2
10629: PPUSH
10630: CALL_OW 302
10634: IFFALSE 10648
// begin AddMedal ( Stevens , 1 ) ;
10636: LD_STRING Stevens
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 101
// end else
10646: GO 10659
// begin AddMedal ( Stevens , - 1 ) ;
10648: LD_STRING Stevens
10650: PPUSH
10651: LD_INT 1
10653: NEG
10654: PPUSH
10655: CALL_OW 101
// end ; if radarOnSpot = 1 then
10659: LD_EXP 30
10663: PUSH
10664: LD_INT 1
10666: EQUAL
10667: IFFALSE 10681
// begin AddMedal ( Observation , 1 ) ;
10669: LD_STRING Observation
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 101
// end else
10679: GO 10692
// begin AddMedal ( Observation , - 1 ) ;
10681: LD_STRING Observation
10683: PPUSH
10684: LD_INT 1
10686: NEG
10687: PPUSH
10688: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10692: LD_STRING MAIN
10694: PPUSH
10695: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10699: LD_EXP 28
10703: PPUSH
10704: LD_STRING 13_BurlakStatus_1
10706: PPUSH
10707: CALL_OW 39
// if IsLive ( Stevens ) then
10711: LD_EXP 2
10715: PPUSH
10716: CALL_OW 300
10720: IFFALSE 10734
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10722: LD_INT 1
10724: PPUSH
10725: LD_STRING 13_StevensStatus_1
10727: PPUSH
10728: CALL_OW 39
10732: GO 10744
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10734: LD_INT 0
10736: PPUSH
10737: LD_STRING 13_StevensStatus_1
10739: PPUSH
10740: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10744: LD_INT 22
10746: PUSH
10747: LD_INT 1
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 21
10756: PUSH
10757: LD_INT 1
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 25
10779: PUSH
10780: LD_INT 2
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 25
10789: PUSH
10790: LD_INT 3
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 25
10799: PUSH
10800: LD_INT 4
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 5
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 25
10819: PUSH
10820: LD_INT 8
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 69
10845: PPUSH
10846: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10850: LD_EXP 1
10854: PPUSH
10855: LD_EXP 34
10859: PUSH
10860: LD_STRING JMM
10862: STR
10863: PPUSH
10864: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10868: LD_EXP 8
10872: PPUSH
10873: LD_EXP 34
10877: PUSH
10878: LD_STRING Brown
10880: STR
10881: PPUSH
10882: CALL 6913 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10886: LD_EXP 4
10890: PPUSH
10891: LD_EXP 34
10895: PUSH
10896: LD_STRING Donaldson
10898: STR
10899: PPUSH
10900: CALL 6913 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10904: LD_EXP 5
10908: PPUSH
10909: LD_EXP 34
10913: PUSH
10914: LD_STRING Bobby
10916: STR
10917: PPUSH
10918: CALL 6913 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10922: LD_EXP 6
10926: PPUSH
10927: LD_EXP 34
10931: PUSH
10932: LD_STRING Cyrus
10934: STR
10935: PPUSH
10936: CALL 6913 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10940: LD_EXP 3
10944: PPUSH
10945: LD_EXP 34
10949: PUSH
10950: LD_STRING Lisa
10952: STR
10953: PPUSH
10954: CALL 6913 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10958: LD_EXP 13
10962: PPUSH
10963: LD_EXP 34
10967: PUSH
10968: LD_STRING Frank
10970: STR
10971: PPUSH
10972: CALL 6913 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10976: LD_EXP 14
10980: PPUSH
10981: LD_EXP 34
10985: PUSH
10986: LD_STRING Kikuchi
10988: STR
10989: PPUSH
10990: CALL 6913 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10994: LD_EXP 10
10998: PPUSH
10999: LD_EXP 34
11003: PUSH
11004: LD_STRING Houten
11006: STR
11007: PPUSH
11008: CALL 6913 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11012: LD_EXP 12
11016: PPUSH
11017: LD_EXP 34
11021: PUSH
11022: LD_STRING Gary
11024: STR
11025: PPUSH
11026: CALL 6913 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11030: LD_EXP 11
11034: PPUSH
11035: LD_EXP 34
11039: PUSH
11040: LD_STRING Cornell
11042: STR
11043: PPUSH
11044: CALL 6913 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11048: LD_EXP 7
11052: PPUSH
11053: LD_EXP 34
11057: PUSH
11058: LD_STRING Denis
11060: STR
11061: PPUSH
11062: CALL 6913 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11066: LD_EXP 9
11070: PPUSH
11071: LD_EXP 34
11075: PUSH
11076: LD_STRING Gladstone
11078: STR
11079: PPUSH
11080: CALL 6913 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11084: LD_EXP 2
11088: PPUSH
11089: LD_EXP 34
11093: PUSH
11094: LD_STRING Stevens
11096: STR
11097: PPUSH
11098: CALL 6913 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11102: LD_INT 50
11104: PUSH
11105: EMPTY
11106: LIST
11107: PUSH
11108: LD_INT 22
11110: PUSH
11111: LD_INT 1
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 21
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 2
11130: PUSH
11131: LD_INT 25
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 25
11143: PUSH
11144: LD_INT 2
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 25
11153: PUSH
11154: LD_INT 3
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 5
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 25
11183: PUSH
11184: LD_INT 8
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: PUSH
11211: LD_EXP 1
11215: PUSH
11216: LD_EXP 8
11220: PUSH
11221: LD_EXP 4
11225: PUSH
11226: LD_EXP 5
11230: PUSH
11231: LD_EXP 6
11235: PUSH
11236: LD_EXP 3
11240: PUSH
11241: LD_EXP 13
11245: PUSH
11246: LD_EXP 9
11250: PUSH
11251: LD_EXP 14
11255: PUSH
11256: LD_EXP 7
11260: PUSH
11261: LD_EXP 10
11265: PUSH
11266: LD_EXP 12
11270: PUSH
11271: LD_EXP 11
11275: PUSH
11276: LD_EXP 2
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: DIFF
11297: PPUSH
11298: LD_STRING 13_other_survivors
11300: PPUSH
11301: CALL_OW 38
// YouWin ;
11305: CALL_OW 103
// end ; end_of_file
11309: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11310: LD_EXP 32
11314: PUSH
11315: LD_INT 2
11317: EQUAL
11318: IFFALSE 11454
11320: GO 11322
11322: DISABLE
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
11327: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11328: LD_ADDR_VAR 0 2
11332: PUSH
11333: LD_INT 22
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 3
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 2
11355: PUSH
11356: LD_INT 30
11358: PUSH
11359: LD_INT 0
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 30
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 69
11390: ST_TO_ADDR
// for i in tmp do
11391: LD_ADDR_VAR 0 1
11395: PUSH
11396: LD_VAR 0 2
11400: PUSH
11401: FOR_IN
11402: IFFALSE 11435
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11404: LD_ADDR_VAR 0 3
11408: PUSH
11409: LD_VAR 0 3
11413: PUSH
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 274
11423: PPUSH
11424: LD_INT 3
11426: PPUSH
11427: CALL_OW 275
11431: PLUS
11432: ST_TO_ADDR
11433: GO 11401
11435: POP
11436: POP
// if yourSiberite < 79 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 79
11444: LESS
11445: IFFALSE 11454
// YouLost ( siberite ) ;
11447: LD_STRING siberite
11449: PPUSH
11450: CALL_OW 104
// end ;
11454: PPOPN 3
11456: END
// every 0 0$1 trigger IsDead ( JMM ) do
11457: LD_EXP 1
11461: PPUSH
11462: CALL_OW 301
11466: IFFALSE 11478
11468: GO 11470
11470: DISABLE
// YouLost ( JMM ) ; end_of_file
11471: LD_STRING JMM
11473: PPUSH
11474: CALL_OW 104
11478: END
// every 8 8$0 + 7 7$0 do
11479: GO 11481
11481: DISABLE
// begin enable ;
11482: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11483: LD_INT 8
11485: PPUSH
11486: LD_INT 2
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 3
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 0
11502: PPUSH
11503: LD_INT 0
11505: PPUSH
11506: LD_INT 2
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: PUSH
11520: LD_OWVAR 67
11524: ARRAY
11525: PPUSH
11526: LD_INT 0
11528: PPUSH
11529: LD_INT 10
11531: PPUSH
11532: LD_INT 8
11534: PUSH
11535: LD_INT 9
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 1
11544: PPUSH
11545: LD_INT 2
11547: PPUSH
11548: CALL_OW 12
11552: ARRAY
11553: PPUSH
11554: LD_INT 12
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL 6953 0 11
// end ;
11564: END
// every 8 8$0 + 7 7$0 do var i , veh ;
11565: GO 11567
11567: DISABLE
11568: LD_INT 0
11570: PPUSH
11571: PPUSH
// begin enable ;
11572: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11573: LD_ADDR_EXP 33
11577: PUSH
11578: LD_EXP 33
11582: PUSH
11583: LD_INT 1
11585: PLUS
11586: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
11587: LD_INT 22
11589: PUSH
11590: LD_INT 8
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 34
11599: PUSH
11600: LD_INT 31
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PPUSH
11611: CALL_OW 69
11615: PUSH
11616: LD_INT 0
11618: EQUAL
11619: IFFALSE 11760
// begin uc_side := 8 ;
11621: LD_ADDR_OWVAR 20
11625: PUSH
11626: LD_INT 8
11628: ST_TO_ADDR
// uc_nation := 2 ;
11629: LD_ADDR_OWVAR 21
11633: PUSH
11634: LD_INT 2
11636: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11637: LD_INT 14
11639: PPUSH
11640: LD_INT 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: LD_INT 31
11648: PPUSH
11649: LD_INT 100
11651: PPUSH
11652: CALL 5590 0 5
// for i = 1 to 2 do
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: DOUBLE
11662: LD_INT 1
11664: DEC
11665: ST_TO_ADDR
11666: LD_INT 2
11668: PUSH
11669: FOR_TO
11670: IFFALSE 11758
// begin veh := CreateVehicle ;
11672: LD_ADDR_VAR 0 2
11676: PUSH
11677: CALL_OW 45
11681: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11682: LD_VAR 0 2
11686: PPUSH
11687: LD_INT 5
11689: PPUSH
11690: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
11694: LD_VAR 0 2
11698: PPUSH
11699: LD_INT 181
11701: PPUSH
11702: LD_INT 105
11704: PPUSH
11705: LD_INT 12
11707: PPUSH
11708: LD_INT 0
11710: PPUSH
11711: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
11715: LD_INT 0
11717: PPUSH
11718: LD_INT 8
11720: PUSH
11721: LD_INT 9
11723: PUSH
11724: LD_INT 10
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: LD_OWVAR 67
11736: ARRAY
11737: PPUSH
11738: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
11742: CALL_OW 44
11746: PPUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 52
// end ;
11756: GO 11669
11758: POP
11759: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 9 ) , rand ( 6 , 9 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11760: LD_INT 8
11762: PUSH
11763: LD_INT 9
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_INT 2
11775: PPUSH
11776: CALL_OW 12
11780: ARRAY
11781: PPUSH
11782: LD_INT 8
11784: PPUSH
11785: LD_INT 4
11787: PPUSH
11788: LD_INT 9
11790: PPUSH
11791: CALL_OW 12
11795: PUSH
11796: LD_INT 6
11798: PPUSH
11799: LD_INT 9
11801: PPUSH
11802: CALL_OW 12
11806: PUSH
11807: LD_INT 6
11809: PPUSH
11810: LD_INT 10
11812: PPUSH
11813: CALL_OW 12
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: PUSH
11823: LD_OWVAR 67
11827: ARRAY
11828: PPUSH
11829: LD_INT 10
11831: PPUSH
11832: LD_INT 2
11834: PPUSH
11835: LD_INT 3
11837: PPUSH
11838: LD_INT 5
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: EMPTY
11849: PPUSH
11850: LD_INT 25
11852: PUSH
11853: LD_INT 26
11855: PUSH
11856: LD_INT 27
11858: PUSH
11859: LD_INT 28
11861: PUSH
11862: LD_INT 29
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PPUSH
11872: EMPTY
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL 8021 0 11
// end ;
11881: PPOPN 2
11883: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
11884: LD_EXP 33
11888: PUSH
11889: LD_INT 4
11891: GREATEREQUAL
11892: IFFALSE 12174
11894: GO 11896
11896: DISABLE
11897: LD_INT 0
11899: PPUSH
11900: PPUSH
// begin enable ;
11901: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11902: LD_ADDR_EXP 33
11906: PUSH
11907: LD_EXP 33
11911: PUSH
11912: LD_INT 1
11914: PLUS
11915: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
11916: LD_INT 22
11918: PUSH
11919: LD_INT 8
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 31
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PPUSH
11940: CALL_OW 69
11944: PUSH
11945: LD_INT 0
11947: EQUAL
11948: IFFALSE 12089
// begin uc_side := 8 ;
11950: LD_ADDR_OWVAR 20
11954: PUSH
11955: LD_INT 8
11957: ST_TO_ADDR
// uc_nation := 2 ;
11958: LD_ADDR_OWVAR 21
11962: PUSH
11963: LD_INT 2
11965: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11966: LD_INT 14
11968: PPUSH
11969: LD_INT 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: LD_INT 31
11977: PPUSH
11978: LD_INT 100
11980: PPUSH
11981: CALL 5590 0 5
// for i = 1 to 2 do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: DOUBLE
11991: LD_INT 1
11993: DEC
11994: ST_TO_ADDR
11995: LD_INT 2
11997: PUSH
11998: FOR_TO
11999: IFFALSE 12087
// begin veh := CreateVehicle ;
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: CALL_OW 45
12010: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 5
12018: PPUSH
12019: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12023: LD_VAR 0 2
12027: PPUSH
12028: LD_INT 181
12030: PPUSH
12031: LD_INT 105
12033: PPUSH
12034: LD_INT 12
12036: PPUSH
12037: LD_INT 0
12039: PPUSH
12040: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12044: LD_INT 0
12046: PPUSH
12047: LD_INT 8
12049: PUSH
12050: LD_INT 9
12052: PUSH
12053: LD_INT 10
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: LD_OWVAR 67
12065: ARRAY
12066: PPUSH
12067: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12071: CALL_OW 44
12075: PPUSH
12076: LD_VAR 0 2
12080: PPUSH
12081: CALL_OW 52
// end ;
12085: GO 11998
12087: POP
12088: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12089: LD_INT 8
12091: PUSH
12092: LD_INT 9
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 1
12101: PPUSH
12102: LD_INT 2
12104: PPUSH
12105: CALL_OW 12
12109: ARRAY
12110: PPUSH
12111: LD_INT 8
12113: PPUSH
12114: LD_INT 1
12116: PUSH
12117: LD_INT 2
12119: PUSH
12120: LD_INT 3
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: PUSH
12128: LD_OWVAR 67
12132: ARRAY
12133: PPUSH
12134: LD_INT 10
12136: PPUSH
12137: LD_INT 3
12139: PPUSH
12140: LD_INT 3
12142: PPUSH
12143: LD_INT 1
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: LD_INT 47
12155: PUSH
12156: LD_INT 47
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: EMPTY
12164: PPUSH
12165: EMPTY
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL 8021 0 11
// end ;
12174: PPOPN 2
12176: END
// every 1 1$0 trigger eventVar2 = 1 do
12177: LD_EXP 36
12181: PUSH
12182: LD_INT 1
12184: EQUAL
12185: IFFALSE 12287
12187: GO 12189
12189: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12190: LD_INT 8
12192: PUSH
12193: LD_INT 9
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 1
12202: PPUSH
12203: LD_INT 2
12205: PPUSH
12206: CALL_OW 12
12210: ARRAY
12211: PPUSH
12212: LD_INT 3
12214: PPUSH
12215: LD_INT 6
12217: PUSH
12218: LD_INT 7
12220: PUSH
12221: LD_INT 8
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_OWVAR 67
12233: ARRAY
12234: PPUSH
12235: LD_INT 10
12237: PPUSH
12238: LD_INT 3
12240: PPUSH
12241: LD_INT 3
12243: PPUSH
12244: LD_INT 3
12246: PUSH
12247: LD_INT 3
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: LD_INT 46
12256: PUSH
12257: LD_INT 44
12259: PUSH
12260: LD_INT 45
12262: PUSH
12263: LD_INT 47
12265: PUSH
12266: LD_INT 49
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PPUSH
12276: EMPTY
12277: PPUSH
12278: EMPTY
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL 8021 0 11
// end ; end_of_file
12287: END
// every 1 1$0 do
12288: GO 12290
12290: DISABLE
// begin enable ;
12291: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12292: LD_INT 3
12294: PPUSH
12295: LD_INT 5
12297: PPUSH
12298: CALL_OW 12
12302: PPUSH
12303: LD_INT 13
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 55
// end ;
12313: END
