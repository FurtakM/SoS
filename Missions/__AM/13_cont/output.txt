// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if debugMode then
 202: LD_EXP 41
 206: IFFALSE 215
// FogOff ( true ) ;
 208: LD_INT 1
 210: PPUSH
 211: CALL_OW 344
// if Difficulty = 1 then
 215: LD_OWVAR 67
 219: PUSH
 220: LD_INT 1
 222: EQUAL
 223: IFFALSE 232
// RemoveEnvironmentArea ( oilBlockArea ) ;
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 355
// if Difficulty < 4 then
 232: LD_OWVAR 67
 236: PUSH
 237: LD_INT 4
 239: LESS
 240: IFFALSE 249
// RemoveEnvironmentArea ( sibBlockArea ) ;
 242: LD_INT 18
 244: PPUSH
 245: CALL_OW 355
// PrepareVehicles ;
 249: CALL 1253 0 0
// PrepareHeroes ;
 253: CALL 483 0 0
// PrepareAmericansRandom ;
 257: CALL 1157 0 0
// PrepareDifficulty ;
 261: CALL 8656 0 0
// Action ;
 265: CALL 5431 0 0
// end ;
 269: END
// every 0 0$1 trigger debugMode do var i , j ;
 270: LD_EXP 41
 274: IFFALSE 438
 276: GO 278
 278: DISABLE
 279: LD_INT 0
 281: PPUSH
 282: PPUSH
// begin enable ;
 283: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 284: LD_ADDR_VAR 0 1
 288: PUSH
 289: LD_INT 22
 291: PUSH
 292: LD_INT 1
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 21
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL_OW 69
 317: PUSH
 318: FOR_IN
 319: IFFALSE 335
// SetLives ( i , 1000 ) ;
 321: LD_VAR 0 1
 325: PPUSH
 326: LD_INT 1000
 328: PPUSH
 329: CALL_OW 234
 333: GO 318
 335: POP
 336: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 337: LD_ADDR_VAR 0 1
 341: PUSH
 342: LD_INT 22
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: LD_INT 2
 354: PUSH
 355: LD_INT 30
 357: PUSH
 358: LD_INT 0
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 30
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: FOR_IN
 390: IFFALSE 436
// for j := 1 to 3 do
 392: LD_ADDR_VAR 0 2
 396: PUSH
 397: DOUBLE
 398: LD_INT 1
 400: DEC
 401: ST_TO_ADDR
 402: LD_INT 3
 404: PUSH
 405: FOR_TO
 406: IFFALSE 432
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: CALL_OW 274
 417: PPUSH
 418: LD_VAR 0 2
 422: PPUSH
 423: LD_INT 9999
 425: PPUSH
 426: CALL_OW 277
 430: GO 405
 432: POP
 433: POP
 434: GO 389
 436: POP
 437: POP
// end ;
 438: PPOPN 2
 440: END
// every 0 0$1 trigger achivCounter >= 2 do
 441: LD_EXP 42
 445: PUSH
 446: LD_INT 2
 448: GREATEREQUAL
 449: IFFALSE 461
 451: GO 453
 453: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 454: LD_STRING ACH_REMOTE
 456: PPUSH
 457: CALL_OW 543
 461: END
// every 0 0$1 trigger destroyCounter >= 30 do
 462: LD_EXP 43
 466: PUSH
 467: LD_INT 30
 469: GREATEREQUAL
 470: IFFALSE 482
 472: GO 474
 474: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 475: LD_STRING ACH_DEFMASTER
 477: PPUSH
 478: CALL_OW 543
 482: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 483: LD_INT 0
 485: PPUSH
 486: PPUSH
 487: PPUSH
 488: PPUSH
// uc_side = 1 ;
 489: LD_ADDR_OWVAR 20
 493: PUSH
 494: LD_INT 1
 496: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 497: LD_ADDR_EXP 1
 501: PUSH
 502: LD_STRING JMM
 504: PPUSH
 505: LD_EXP 41
 509: NOT
 510: PPUSH
 511: LD_STRING 13c_
 513: PPUSH
 514: CALL 33880 0 3
 518: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 519: LD_ADDR_EXP 2
 523: PUSH
 524: LD_STRING Stevens
 526: PPUSH
 527: LD_EXP 41
 531: NOT
 532: PPUSH
 533: LD_STRING 13c_
 535: PPUSH
 536: CALL 33880 0 3
 540: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 541: LD_ADDR_EXP 3
 545: PUSH
 546: LD_STRING Lisa
 548: PPUSH
 549: LD_EXP 41
 553: NOT
 554: PPUSH
 555: LD_STRING 13c_
 557: PPUSH
 558: CALL 33880 0 3
 562: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 563: LD_ADDR_EXP 4
 567: PUSH
 568: LD_STRING Donaldson
 570: PPUSH
 571: LD_EXP 41
 575: NOT
 576: PPUSH
 577: LD_STRING 13c_
 579: PPUSH
 580: CALL 33880 0 3
 584: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 5
 589: PUSH
 590: LD_STRING Bobby
 592: PPUSH
 593: LD_EXP 41
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 33880 0 3
 606: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 6
 611: PUSH
 612: LD_STRING Cyrus
 614: PPUSH
 615: LD_EXP 41
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 33880 0 3
 628: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 7
 633: PUSH
 634: LD_STRING Denis
 636: PPUSH
 637: LD_EXP 41
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 33880 0 3
 650: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 8
 655: PUSH
 656: LD_STRING Brown
 658: PPUSH
 659: LD_EXP 41
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 33880 0 3
 672: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 673: LD_ADDR_EXP 9
 677: PUSH
 678: LD_STRING Gladstone
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING 13c_
 686: PPUSH
 687: CALL 33880 0 3
 691: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 692: LD_ADDR_EXP 10
 696: PUSH
 697: LD_STRING Houten
 699: PPUSH
 700: LD_INT 1
 702: PPUSH
 703: LD_STRING 13c_
 705: PPUSH
 706: CALL 33880 0 3
 710: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 711: LD_ADDR_EXP 11
 715: PUSH
 716: LD_STRING Cornel
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_STRING 13c_
 724: PPUSH
 725: CALL 33880 0 3
 729: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 730: LD_ADDR_EXP 12
 734: PUSH
 735: LD_STRING Gary
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: LD_STRING 13c_
 743: PPUSH
 744: CALL 33880 0 3
 748: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 749: LD_ADDR_EXP 13
 753: PUSH
 754: LD_STRING Frank
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_STRING 13c_
 762: PPUSH
 763: CALL 33880 0 3
 767: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 768: LD_ADDR_EXP 14
 772: PUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 13c_
 781: PPUSH
 782: CALL 33880 0 3
 786: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 787: LD_ADDR_EXP 15
 791: PUSH
 792: LD_STRING DeltaDoctor
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: LD_STRING 13c_
 800: PPUSH
 801: CALL 33880 0 3
 805: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 806: LD_ADDR_EXP 16
 810: PUSH
 811: LD_STRING Powell
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: LD_STRING 
 819: PPUSH
 820: CALL 33880 0 3
 824: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_EXP 1
 834: PUSH
 835: LD_EXP 2
 839: PUSH
 840: LD_EXP 3
 844: PUSH
 845: LD_EXP 4
 849: PUSH
 850: LD_EXP 5
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: LD_EXP 8
 869: PUSH
 870: LD_EXP 9
 874: PUSH
 875: LD_EXP 10
 879: PUSH
 880: LD_EXP 11
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_EXP 13
 894: PUSH
 895: LD_EXP 14
 899: PUSH
 900: LD_EXP 15
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 922: LD_ADDR_VAR 0 3
 926: PUSH
 927: LD_INT 22
 929: PUSH
 930: LD_INT 1
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 33
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: PUSH
 947: LD_INT 21
 949: PUSH
 950: LD_INT 2
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: ST_TO_ADDR
// for i = tmp downto 1 do
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: DOUBLE
 973: LD_VAR 0 2
 977: INC
 978: ST_TO_ADDR
 979: LD_INT 1
 981: PUSH
 982: FOR_DOWNTO
 983: IFFALSE 1020
// if not tmp [ i ] then
 985: LD_VAR 0 2
 989: PUSH
 990: LD_VAR 0 4
 994: ARRAY
 995: NOT
 996: IFFALSE 1018
// tmp := Delete ( tmp , i ) ;
 998: LD_ADDR_VAR 0 2
1002: PUSH
1003: LD_VAR 0 2
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 3
1017: ST_TO_ADDR
1018: GO 982
1020: POP
1021: POP
// for i = 1 to tmp do
1022: LD_ADDR_VAR 0 4
1026: PUSH
1027: DOUBLE
1028: LD_INT 1
1030: DEC
1031: ST_TO_ADDR
1032: LD_VAR 0 2
1036: PUSH
1037: FOR_TO
1038: IFFALSE 1068
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1040: LD_VAR 0 2
1044: PUSH
1045: LD_VAR 0 4
1049: ARRAY
1050: PPUSH
1051: LD_VAR 0 3
1055: PUSH
1056: LD_VAR 0 4
1060: ARRAY
1061: PPUSH
1062: CALL_OW 52
1066: GO 1037
1068: POP
1069: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1070: LD_INT 22
1072: PUSH
1073: LD_INT 1
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: LD_INT 25
1082: PUSH
1083: LD_INT 2
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: PPUSH
1094: CALL_OW 69
1098: PUSH
1099: LD_INT 0
1101: EQUAL
1102: IFFALSE 1138
1104: PUSH
1105: LD_INT 22
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 34
1117: PUSH
1118: LD_INT 13
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PPUSH
1129: CALL_OW 69
1133: PUSH
1134: LD_INT 0
1136: EQUAL
1137: AND
1138: IFFALSE 1152
// SetClass ( JMM , 2 ) ;
1140: LD_EXP 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 336
// end ;
1152: LD_VAR 0 1
1156: RET
// export function PrepareAmericansRandom ; var i ; begin
1157: LD_INT 0
1159: PPUSH
1160: PPUSH
// uc_side = 1 ;
1161: LD_ADDR_OWVAR 20
1165: PUSH
1166: LD_INT 1
1168: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1169: LD_ADDR_EXP 17
1173: PUSH
1174: LD_STRING 13c_others
1176: PPUSH
1177: CALL_OW 31
1181: ST_TO_ADDR
// for i in others13 do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_EXP 17
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1246
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1195: LD_VAR 0 2
1199: PPUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 21
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: PUSH
1236: LD_INT 1
1238: ARRAY
1239: PPUSH
1240: CALL_OW 52
1244: GO 1192
1246: POP
1247: POP
// end ;
1248: LD_VAR 0 1
1252: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1253: LD_INT 0
1255: PPUSH
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
1260: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: LD_STRING 13_VehiclesIn13_1
1268: PPUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 5
1274: PUSH
1275: LD_INT 3
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: LD_INT 6
1283: PUSH
1284: LD_INT 100
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 1
1297: PUSH
1298: LD_INT 5
1300: PUSH
1301: LD_INT 3
1303: PUSH
1304: LD_INT 1
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 100
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: LD_INT 5
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 100
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 5
1352: PUSH
1353: LD_INT 3
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 6
1361: PUSH
1362: LD_INT 100
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: LD_INT 5
1378: PUSH
1379: LD_INT 3
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 6
1387: PUSH
1388: LD_INT 100
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 1
1401: PUSH
1402: LD_INT 5
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 6
1413: PUSH
1414: LD_INT 100
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 1
1427: PUSH
1428: LD_INT 5
1430: PUSH
1431: LD_INT 3
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 6
1439: PUSH
1440: LD_INT 100
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 5
1456: PUSH
1457: LD_INT 3
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 6
1465: PUSH
1466: LD_INT 100
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: PPUSH
1487: CALL_OW 30
1491: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1492: LD_ADDR_EXP 25
1496: PUSH
1497: LD_STRING 13_ResourcesInCargo13_1
1499: PPUSH
1500: EMPTY
1501: PPUSH
1502: CALL_OW 30
1506: ST_TO_ADDR
// cargoList = [ ] ;
1507: LD_ADDR_VAR 0 6
1511: PUSH
1512: EMPTY
1513: ST_TO_ADDR
// uc_side = 1 ;
1514: LD_ADDR_OWVAR 20
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// if vehicles then
1522: LD_VAR 0 5
1526: IFFALSE 1873
// begin for i := 1 to vehicles do
1528: LD_ADDR_VAR 0 2
1532: PUSH
1533: DOUBLE
1534: LD_INT 1
1536: DEC
1537: ST_TO_ADDR
1538: LD_VAR 0 5
1542: PUSH
1543: FOR_TO
1544: IFFALSE 1693
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1546: LD_ADDR_OWVAR 21
1550: PUSH
1551: LD_VAR 0 5
1555: PUSH
1556: LD_VAR 0 2
1560: ARRAY
1561: PUSH
1562: LD_INT 1
1564: ARRAY
1565: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1566: LD_ADDR_OWVAR 37
1570: PUSH
1571: LD_VAR 0 5
1575: PUSH
1576: LD_VAR 0 2
1580: ARRAY
1581: PUSH
1582: LD_INT 2
1584: ARRAY
1585: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1586: LD_ADDR_OWVAR 39
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 3
1604: ARRAY
1605: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1606: LD_ADDR_OWVAR 38
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 4
1624: ARRAY
1625: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1626: LD_ADDR_OWVAR 40
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 5
1644: ARRAY
1645: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1646: LD_ADDR_OWVAR 41
1650: PUSH
1651: LD_INT 40
1653: ST_TO_ADDR
// veh = CreateVehicle ;
1654: LD_ADDR_VAR 0 4
1658: PUSH
1659: CALL_OW 45
1663: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1664: LD_VAR 0 4
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 2
1683: PPUSH
1684: LD_INT 0
1686: PPUSH
1687: CALL_OW 49
// end ;
1691: GO 1543
1693: POP
1694: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1695: LD_ADDR_VAR 0 6
1699: PUSH
1700: LD_INT 22
1702: PUSH
1703: LD_INT 1
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 21
1712: PUSH
1713: LD_INT 2
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 34
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 69
1739: ST_TO_ADDR
// if cargoList then
1740: LD_VAR 0 6
1744: IFFALSE 1873
// for i = 1 to cargoList do
1746: LD_ADDR_VAR 0 2
1750: PUSH
1751: DOUBLE
1752: LD_INT 1
1754: DEC
1755: ST_TO_ADDR
1756: LD_VAR 0 6
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1871
// begin if resources then
1764: LD_EXP 25
1768: IFFALSE 1869
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 1
1783: PPUSH
1784: LD_EXP 25
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 1
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 2
1816: PPUSH
1817: LD_EXP 25
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 2
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1836: LD_VAR 0 6
1840: PUSH
1841: LD_VAR 0 2
1845: ARRAY
1846: PPUSH
1847: LD_INT 3
1849: PPUSH
1850: LD_EXP 25
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PUSH
1861: LD_INT 3
1863: ARRAY
1864: PPUSH
1865: CALL_OW 291
// end ; end ;
1869: GO 1761
1871: POP
1872: POP
// end ; end ;
1873: LD_VAR 0 1
1877: RET
// export function PowellSupport ; var i , veh , un ; begin
1878: LD_INT 0
1880: PPUSH
1881: PPUSH
1882: PPUSH
1883: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1884: LD_ADDR_VAR 0 2
1888: PUSH
1889: DOUBLE
1890: LD_INT 1
1892: DEC
1893: ST_TO_ADDR
1894: LD_INT 4
1896: PUSH
1897: LD_INT 3
1899: PUSH
1900: LD_INT 2
1902: PUSH
1903: LD_INT 2
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: PUSH
1912: LD_OWVAR 67
1916: ARRAY
1917: PUSH
1918: FOR_TO
1919: IFFALSE 2192
// begin uc_nation := 1 ;
1921: LD_ADDR_OWVAR 21
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// uc_side := 1 ;
1929: LD_ADDR_OWVAR 20
1933: PUSH
1934: LD_INT 1
1936: ST_TO_ADDR
// vc_engine := engine_siberite ;
1937: LD_ADDR_OWVAR 39
1941: PUSH
1942: LD_INT 3
1944: ST_TO_ADDR
// vc_control := control_manual ;
1945: LD_ADDR_OWVAR 38
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1953: LD_ADDR_OWVAR 40
1957: PUSH
1958: LD_INT 9
1960: PUSH
1961: LD_INT 6
1963: PUSH
1964: LD_INT 9
1966: PUSH
1967: LD_INT 5
1969: PUSH
1970: LD_INT 5
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 0
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 12
1995: PLUS
1996: ARRAY
1997: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1998: LD_OWVAR 40
2002: PUSH
2003: LD_INT 6
2005: EQUAL
2006: IFFALSE 2035
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 5
2015: PUSH
2016: LD_INT 4
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: LD_OWVAR 67
2031: ARRAY
2032: ST_TO_ADDR
2033: GO 2070
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2035: LD_ADDR_OWVAR 37
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 3
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 4
2063: PPUSH
2064: CALL_OW 12
2068: ARRAY
2069: ST_TO_ADDR
// veh = CreateVehicle ;
2070: LD_ADDR_VAR 0 3
2074: PUSH
2075: CALL_OW 45
2079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2080: LD_INT 35
2082: PPUSH
2083: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn2 , false ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 24
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 49
2102: IFFALSE 2080
// SetDir ( veh , 1 ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 233
// hc_gallery :=  ;
2116: LD_ADDR_OWVAR 33
2120: PUSH
2121: LD_STRING 
2123: ST_TO_ADDR
// hc_name :=  ;
2124: LD_ADDR_OWVAR 26
2128: PUSH
2129: LD_STRING 
2131: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 3
2137: PPUSH
2138: LD_INT 9
2140: PUSH
2141: LD_INT 8
2143: PUSH
2144: LD_INT 8
2146: PUSH
2147: LD_INT 7
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: CALL_OW 380
// un := CreateHuman ;
2166: LD_ADDR_VAR 0 4
2170: PUSH
2171: CALL_OW 44
2175: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2176: LD_VAR 0 4
2180: PPUSH
2181: LD_VAR 0 3
2185: PPUSH
2186: CALL_OW 52
// end ;
2190: GO 1918
2192: POP
2193: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_INT 2
2206: PUSH
2207: LD_INT 2
2209: PUSH
2210: LD_INT 2
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: PUSH
2222: LD_OWVAR 67
2226: ARRAY
2227: PUSH
2228: FOR_TO
2229: IFFALSE 2313
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2231: LD_INT 0
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: LD_INT 9
2239: PUSH
2240: LD_INT 8
2242: PUSH
2243: LD_INT 8
2245: PUSH
2246: LD_INT 7
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: LD_OWVAR 67
2259: ARRAY
2260: PPUSH
2261: CALL_OW 380
// un := CreateHuman ;
2265: LD_ADDR_VAR 0 4
2269: PUSH
2270: CALL_OW 44
2274: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2275: LD_VAR 0 4
2279: PPUSH
2280: LD_INT 1
2282: PPUSH
2283: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2287: LD_INT 35
2289: PPUSH
2290: CALL_OW 67
// until PlaceUnitArea ( un , PlayerSpawn2 , false ) ;
2294: LD_VAR 0 4
2298: PPUSH
2299: LD_INT 24
2301: PPUSH
2302: LD_INT 0
2304: PPUSH
2305: CALL_OW 49
2309: IFFALSE 2287
// end ;
2311: GO 2228
2313: POP
2314: POP
// end ; end_of_file
2315: LD_VAR 0 1
2319: RET
// export function PrepareBurlak ; begin
2320: LD_INT 0
2322: PPUSH
// uc_side := 7 ;
2323: LD_ADDR_OWVAR 20
2327: PUSH
2328: LD_INT 7
2330: ST_TO_ADDR
// uc_nation := 3 ;
2331: LD_ADDR_OWVAR 21
2335: PUSH
2336: LD_INT 3
2338: ST_TO_ADDR
// vc_engine := engine_siberite ;
2339: LD_ADDR_OWVAR 39
2343: PUSH
2344: LD_INT 3
2346: ST_TO_ADDR
// vc_control := control_manual ;
2347: LD_ADDR_OWVAR 38
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2355: LD_ADDR_OWVAR 40
2359: PUSH
2360: LD_INT 44
2362: PUSH
2363: LD_INT 45
2365: PUSH
2366: LD_INT 46
2368: PUSH
2369: LD_INT 46
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: LD_OWVAR 67
2382: ARRAY
2383: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2384: LD_ADDR_OWVAR 37
2388: PUSH
2389: LD_INT 24
2391: ST_TO_ADDR
// Masha := CreateVehicle ;
2392: LD_ADDR_EXP 19
2396: PUSH
2397: CALL_OW 45
2401: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2402: LD_EXP 19
2406: PPUSH
2407: LD_INT 2
2409: PPUSH
2410: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2414: LD_EXP 19
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2429: LD_EXP 19
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2441: LD_ADDR_EXP 18
2445: PUSH
2446: LD_STRING Burlak
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: LD_STRING 
2454: PPUSH
2455: CALL 33880 0 3
2459: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2460: LD_EXP 18
2464: PPUSH
2465: LD_EXP 19
2469: PPUSH
2470: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2474: LD_EXP 19
2478: PPUSH
2479: LD_INT 107
2481: PPUSH
2482: LD_INT 118
2484: PPUSH
2485: CALL_OW 114
// spawnBurlak := 1 ;
2489: LD_ADDR_EXP 28
2493: PUSH
2494: LD_INT 1
2496: ST_TO_ADDR
// end ;
2497: LD_VAR 0 1
2501: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
2507: PPUSH
2508: PPUSH
// uc_side := 7 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 7
2516: ST_TO_ADDR
// uc_nation := 3 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 3
2524: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2525: LD_ADDR_EXP 20
2529: PUSH
2530: LD_STRING Gnyevko
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 33880 0 3
2543: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2544: LD_ADDR_EXP 21
2548: PUSH
2549: LD_STRING Titov
2551: PPUSH
2552: LD_INT 0
2554: PPUSH
2555: LD_STRING 
2557: PPUSH
2558: CALL 33880 0 3
2562: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2563: LD_ADDR_EXP 22
2567: PUSH
2568: LD_STRING Xavier2
2570: PPUSH
2571: LD_INT 0
2573: PPUSH
2574: LD_STRING 
2576: PPUSH
2577: CALL 33880 0 3
2581: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2582: LD_ADDR_EXP 23
2586: PUSH
2587: LD_STRING Belkov
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: LD_STRING 
2595: PPUSH
2596: CALL 33880 0 3
2600: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2601: LD_ADDR_EXP 24
2605: PUSH
2606: LD_STRING Lipshchin
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: LD_STRING 
2614: PPUSH
2615: CALL 33880 0 3
2619: ST_TO_ADDR
// for i = 1 to 5 do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: DOUBLE
2626: LD_INT 1
2628: DEC
2629: ST_TO_ADDR
2630: LD_INT 5
2632: PUSH
2633: FOR_TO
2634: IFFALSE 2759
// begin vc_engine := engine_siberite ;
2636: LD_ADDR_OWVAR 39
2640: PUSH
2641: LD_INT 3
2643: ST_TO_ADDR
// vc_control := control_manual ;
2644: LD_ADDR_OWVAR 38
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 43
2659: PUSH
2660: LD_INT 45
2662: PUSH
2663: LD_INT 45
2665: PUSH
2666: LD_INT 44
2668: PUSH
2669: LD_INT 49
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 1
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: CALL_OW 12
2689: ARRAY
2690: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2691: LD_ADDR_OWVAR 37
2695: PUSH
2696: LD_INT 22
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 24
2704: PUSH
2705: LD_INT 24
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: LD_OWVAR 67
2718: ARRAY
2719: ST_TO_ADDR
// veh = CreateVehicle ;
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: CALL_OW 45
2729: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2730: LD_VAR 0 3
2734: PPUSH
2735: LD_INT 2
2737: PPUSH
2738: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2742: LD_VAR 0 3
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: CALL_OW 49
// end ;
2757: GO 2633
2759: POP
2760: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2761: LD_ADDR_VAR 0 4
2765: PUSH
2766: LD_INT 22
2768: PUSH
2769: LD_INT 7
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 21
2778: PUSH
2779: LD_INT 2
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 58
2788: PUSH
2789: EMPTY
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2802: LD_EXP 20
2806: PPUSH
2807: LD_VAR 0 4
2811: PUSH
2812: LD_INT 1
2814: ARRAY
2815: PPUSH
2816: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2820: LD_EXP 21
2824: PPUSH
2825: LD_VAR 0 4
2829: PUSH
2830: LD_INT 2
2832: ARRAY
2833: PPUSH
2834: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2838: LD_EXP 22
2842: PPUSH
2843: LD_VAR 0 4
2847: PUSH
2848: LD_INT 3
2850: ARRAY
2851: PPUSH
2852: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2856: LD_EXP 23
2860: PPUSH
2861: LD_VAR 0 4
2865: PUSH
2866: LD_INT 4
2868: ARRAY
2869: PPUSH
2870: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2874: LD_EXP 24
2878: PPUSH
2879: LD_VAR 0 4
2883: PUSH
2884: LD_INT 5
2886: ARRAY
2887: PPUSH
2888: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2892: LD_EXP 20
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2904: LD_EXP 21
2908: PUSH
2909: LD_EXP 24
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: LD_INT 9
2920: PPUSH
2921: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2925: LD_ADDR_VAR 0 4
2929: PUSH
2930: LD_INT 22
2932: PUSH
2933: LD_INT 7
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 107
2952: PPUSH
2953: LD_INT 118
2955: PPUSH
2956: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2960: LD_INT 35
2962: PPUSH
2963: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2967: LD_VAR 0 4
2971: PPUSH
2972: LD_INT 34
2974: PUSH
2975: LD_INT 49
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 72
2986: PPUSH
2987: LD_EXP 19
2991: PPUSH
2992: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2996: LD_VAR 0 4
3000: PPUSH
3001: LD_INT 3
3003: PUSH
3004: LD_INT 34
3006: PUSH
3007: LD_INT 49
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 72
3022: PPUSH
3023: LD_INT 107
3025: PPUSH
3026: LD_INT 118
3028: PPUSH
3029: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3033: LD_ADDR_VAR 0 5
3037: PUSH
3038: LD_EXP 21
3042: PUSH
3043: LD_EXP 24
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PPUSH
3052: LD_INT 50
3054: PUSH
3055: EMPTY
3056: LIST
3057: PUSH
3058: LD_INT 3
3060: PUSH
3061: LD_INT 54
3063: PUSH
3064: EMPTY
3065: LIST
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PPUSH
3075: CALL_OW 72
3079: ST_TO_ADDR
// if bazooka then
3080: LD_VAR 0 5
3084: IFFALSE 3126
// begin for i in bazooka do
3086: LD_ADDR_VAR 0 2
3090: PUSH
3091: LD_VAR 0 5
3095: PUSH
3096: FOR_IN
3097: IFFALSE 3124
// if See ( 1 , i ) then
3099: LD_INT 1
3101: PPUSH
3102: LD_VAR 0 2
3106: PPUSH
3107: CALL_OW 292
3111: IFFALSE 3122
// ComSpaceTimeShoot ( i ) ;
3113: LD_VAR 0 2
3117: PPUSH
3118: CALL 34939 0 1
3122: GO 3096
3124: POP
3125: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3126: LD_VAR 0 4
3130: PPUSH
3131: LD_INT 34
3133: PUSH
3134: LD_INT 49
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 72
3145: PUSH
3146: LD_INT 0
3148: EQUAL
3149: IFTRUE 3162
3151: PUSH
3152: LD_EXP 19
3156: PPUSH
3157: CALL_OW 303
3161: OR
3162: IFFALSE 2960
// repeat wait ( 0 0$1 ) ;
3164: LD_INT 35
3166: PPUSH
3167: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_INT 22
3178: PUSH
3179: LD_INT 7
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: LD_EXP 18
3195: DIFF
3196: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3197: LD_VAR 0 4
3201: PPUSH
3202: LD_INT 107
3204: PPUSH
3205: LD_INT 118
3207: PPUSH
3208: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3212: LD_ADDR_VAR 0 5
3216: PUSH
3217: LD_EXP 21
3221: PUSH
3222: LD_EXP 24
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PPUSH
3231: LD_INT 50
3233: PUSH
3234: EMPTY
3235: LIST
3236: PUSH
3237: LD_INT 3
3239: PUSH
3240: LD_INT 54
3242: PUSH
3243: EMPTY
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PPUSH
3254: CALL_OW 72
3258: ST_TO_ADDR
// if bazooka then
3259: LD_VAR 0 5
3263: IFFALSE 3305
// begin for i in bazooka do
3265: LD_ADDR_VAR 0 2
3269: PUSH
3270: LD_VAR 0 5
3274: PUSH
3275: FOR_IN
3276: IFFALSE 3303
// if See ( 1 , i ) then
3278: LD_INT 1
3280: PPUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: CALL_OW 292
3290: IFFALSE 3301
// ComSpaceTimeShoot ( i ) ;
3292: LD_VAR 0 2
3296: PPUSH
3297: CALL 34939 0 1
3301: GO 3275
3303: POP
3304: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3305: LD_EXP 18
3309: PPUSH
3310: CALL_OW 302
3314: IFFALSE 3328
3316: PUSH
3317: LD_EXP 18
3321: PPUSH
3322: CALL_OW 310
3326: NOT
3327: AND
3328: IFFALSE 3345
// ComMoveXY ( Burlak , 107 , 118 ) ;
3330: LD_EXP 18
3334: PPUSH
3335: LD_INT 107
3337: PPUSH
3338: LD_INT 118
3340: PPUSH
3341: CALL_OW 111
// until not tmp ;
3345: LD_VAR 0 4
3349: NOT
3350: IFFALSE 3164
// end ;
3352: LD_VAR 0 1
3356: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3357: LD_INT 0
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
3364: PPUSH
// result := [ ] ;
3365: LD_ADDR_VAR 0 1
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3372: LD_ADDR_VAR 0 6
3376: PUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 12
3387: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3388: LD_ADDR_VAR 0 5
3392: PUSH
3393: LD_INT 8
3395: PUSH
3396: LD_INT 9
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_VAR 0 6
3407: ARRAY
3408: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3409: LD_ADDR_VAR 0 2
3413: PUSH
3414: DOUBLE
3415: LD_INT 1
3417: DEC
3418: ST_TO_ADDR
3419: LD_INT 6
3421: PUSH
3422: LD_INT 8
3424: PUSH
3425: LD_INT 10
3427: PUSH
3428: LD_INT 11
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_OWVAR 67
3441: ARRAY
3442: PUSH
3443: FOR_TO
3444: IFFALSE 3682
// begin uc_side := 3 ;
3446: LD_ADDR_OWVAR 20
3450: PUSH
3451: LD_INT 3
3453: ST_TO_ADDR
// uc_nation := 3 ;
3454: LD_ADDR_OWVAR 21
3458: PUSH
3459: LD_INT 3
3461: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3462: LD_INT 24
3464: PPUSH
3465: LD_INT 3
3467: PPUSH
3468: LD_INT 1
3470: PUSH
3471: LD_INT 3
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 1
3480: PPUSH
3481: LD_INT 2
3483: PPUSH
3484: CALL_OW 12
3488: ARRAY
3489: PPUSH
3490: LD_INT 46
3492: PUSH
3493: LD_INT 46
3495: PUSH
3496: LD_INT 45
3498: PUSH
3499: LD_INT 47
3501: PUSH
3502: LD_INT 49
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 1
3514: PPUSH
3515: LD_INT 5
3517: PPUSH
3518: CALL_OW 12
3522: ARRAY
3523: PPUSH
3524: LD_INT 100
3526: PPUSH
3527: CALL 38900 0 5
// veh := CreateVehicle ;
3531: LD_ADDR_VAR 0 4
3535: PUSH
3536: CALL_OW 45
3540: ST_TO_ADDR
// result := Join ( result , veh ) ;
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_VAR 0 4
3555: PPUSH
3556: CALL 72080 0 2
3560: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3561: LD_VAR 0 4
3565: PPUSH
3566: LD_INT 3
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_VAR 0 6
3580: ARRAY
3581: PPUSH
3582: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3586: LD_VAR 0 4
3590: PPUSH
3591: LD_VAR 0 5
3595: PPUSH
3596: LD_INT 0
3598: PPUSH
3599: CALL_OW 49
// if vc_control = control_manual then
3603: LD_OWVAR 38
3607: PUSH
3608: LD_INT 1
3610: EQUAL
3611: IFFALSE 3658
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3613: LD_INT 0
3615: PPUSH
3616: LD_INT 7
3618: PUSH
3619: LD_INT 8
3621: PUSH
3622: LD_INT 9
3624: PUSH
3625: LD_INT 10
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: PUSH
3634: LD_OWVAR 67
3638: ARRAY
3639: PPUSH
3640: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3644: CALL_OW 44
3648: PPUSH
3649: LD_VAR 0 4
3653: PPUSH
3654: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3658: LD_INT 18
3660: PPUSH
3661: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3665: LD_VAR 0 4
3669: PPUSH
3670: LD_INT 100
3672: PPUSH
3673: LD_INT 55
3675: PPUSH
3676: CALL_OW 114
// end ;
3680: GO 3443
3682: POP
3683: POP
// for i in result do
3684: LD_ADDR_VAR 0 2
3688: PUSH
3689: LD_VAR 0 1
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3711
// SetTag ( i , 10 ) ;
3697: LD_VAR 0 2
3701: PPUSH
3702: LD_INT 10
3704: PPUSH
3705: CALL_OW 109
3709: GO 3694
3711: POP
3712: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3713: LD_EXP 45
3717: PPUSH
3718: CALL_OW 427
// end ; end_of_file
3722: LD_VAR 0 1
3726: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3727: LD_INT 0
3729: PPUSH
3730: PPUSH
3731: PPUSH
// rnd := 0 ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: LD_INT 0
3739: ST_TO_ADDR
// uc_side := 8 ;
3740: LD_ADDR_OWVAR 20
3744: PUSH
3745: LD_INT 8
3747: ST_TO_ADDR
// uc_nation := 2 ;
3748: LD_ADDR_OWVAR 21
3752: PUSH
3753: LD_INT 2
3755: ST_TO_ADDR
// hc_name :=  ;
3756: LD_ADDR_OWVAR 26
3760: PUSH
3761: LD_STRING 
3763: ST_TO_ADDR
// hc_gallery :=  ;
3764: LD_ADDR_OWVAR 33
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3772: LD_ADDR_OWVAR 29
3776: PUSH
3777: LD_INT 10
3779: PUSH
3780: LD_INT 11
3782: PUSH
3783: LD_INT 12
3785: PUSH
3786: LD_INT 12
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: PUSH
3801: LD_INT 10
3803: PUSH
3804: LD_INT 11
3806: PUSH
3807: LD_INT 12
3809: PUSH
3810: LD_INT 12
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_OWVAR 67
3823: ARRAY
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3829: LD_INT 0
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: LD_INT 7
3837: PUSH
3838: LD_INT 8
3840: PUSH
3841: LD_INT 9
3843: PUSH
3844: LD_INT 10
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_OWVAR 67
3857: ARRAY
3858: PPUSH
3859: CALL_OW 380
// un := CreateHuman ;
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: CALL_OW 44
3872: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 8
3880: PUSH
3881: LD_INT 9
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 2
3893: PPUSH
3894: CALL_OW 12
3898: ARRAY
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 49
// SetTag ( un , 1 ) ;
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3919: LD_ADDR_VAR 0 3
3923: PUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_EXP 32
3931: PPUSH
3932: CALL_OW 12
3936: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3937: LD_EXP 46
3941: PPUSH
3942: LD_VAR 0 2
3946: PPUSH
3947: LD_EXP 32
3951: PUSH
3952: LD_VAR 0 3
3956: ARRAY
3957: PUSH
3958: LD_INT 1
3960: ARRAY
3961: PPUSH
3962: LD_EXP 32
3966: PUSH
3967: LD_VAR 0 3
3971: ARRAY
3972: PUSH
3973: LD_INT 2
3975: ARRAY
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: LD_INT 0
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 595
// end ;
3990: LD_VAR 0 1
3994: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3995: LD_INT 22
3997: PUSH
3998: LD_INT 8
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: LD_INT 61
4010: PUSH
4011: EMPTY
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PUSH
4018: LD_INT 50
4020: PUSH
4021: EMPTY
4022: LIST
4023: PUSH
4024: LD_INT 33
4026: PUSH
4027: LD_INT 2
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PPUSH
4040: CALL_OW 69
4044: IFFALSE 4131
4046: GO 4048
4048: DISABLE
4049: LD_INT 0
4051: PPUSH
// begin enable ;
4052: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4053: LD_ADDR_VAR 0 1
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 8
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: LD_INT 61
4073: PUSH
4074: EMPTY
4075: LIST
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PUSH
4081: LD_INT 50
4083: PUSH
4084: EMPTY
4085: LIST
4086: PUSH
4087: LD_INT 33
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 69
4107: PUSH
4108: FOR_IN
4109: IFFALSE 4129
// begin wait ( 0 0$0.3 ) ;
4111: LD_INT 10
4113: PPUSH
4114: CALL_OW 67
// Connect ( i ) ;
4118: LD_VAR 0 1
4122: PPUSH
4123: CALL 42382 0 1
// end ;
4127: GO 4108
4129: POP
4130: POP
// end ;
4131: PPOPN 1
4133: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4134: LD_INT 0
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
// result := [ ] ;
4145: LD_ADDR_VAR 0 1
4149: PUSH
4150: EMPTY
4151: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4152: LD_ADDR_EXP 34
4156: PUSH
4157: LD_EXP 34
4161: PUSH
4162: LD_INT 1
4164: PLUS
4165: ST_TO_ADDR
// xy := [ ctArea1 , ctArea2 , ctArea3 , ctArea4 ] ;
4166: LD_ADDR_VAR 0 4
4170: PUSH
4171: LD_INT 19
4173: PUSH
4174: LD_INT 20
4176: PUSH
4177: LD_INT 21
4179: PUSH
4180: LD_INT 22
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4189: LD_INT 22
4191: PUSH
4192: LD_INT 8
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 3
4201: PUSH
4202: LD_INT 58
4204: PUSH
4205: EMPTY
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 34
4214: PUSH
4215: LD_INT 31
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: PUSH
4232: LD_INT 2
4234: LESS
4235: IFFALSE 4540
// begin uc_side := 8 ;
4237: LD_ADDR_OWVAR 20
4241: PUSH
4242: LD_INT 8
4244: ST_TO_ADDR
// uc_nation := 2 ;
4245: LD_ADDR_OWVAR 21
4249: PUSH
4250: LD_INT 2
4252: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4253: LD_INT 14
4255: PPUSH
4256: LD_INT 3
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_INT 31
4264: PPUSH
4265: LD_INT 100
4267: PPUSH
4268: CALL 38900 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: DOUBLE
4278: LD_INT 22
4280: PUSH
4281: LD_INT 8
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 58
4293: PUSH
4294: EMPTY
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 31
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: PPUSH
4316: CALL_OW 69
4320: PUSH
4321: LD_INT 1
4323: PLUS
4324: DEC
4325: ST_TO_ADDR
4326: LD_INT 2
4328: PUSH
4329: FOR_TO
4330: IFFALSE 4538
// begin veh := CreateVehicle ;
4332: LD_ADDR_VAR 0 3
4336: PUSH
4337: CALL_OW 45
4341: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 0
4349: PPUSH
4350: LD_INT 5
4352: PPUSH
4353: CALL_OW 12
4357: PPUSH
4358: CALL_OW 233
// xy := Delete ( xy , rand ( 1 , Count ( xy ) ) ) ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_VAR 0 4
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_VAR 0 4
4379: PPUSH
4380: CALL 36104 0 1
4384: PPUSH
4385: CALL_OW 12
4389: PPUSH
4390: CALL_OW 3
4394: ST_TO_ADDR
// area := xy [ rand ( 1 , Count ( xy ) ) ] ;
4395: LD_ADDR_VAR 0 6
4399: PUSH
4400: LD_VAR 0 4
4404: PUSH
4405: LD_INT 1
4407: PPUSH
4408: LD_VAR 0 4
4412: PPUSH
4413: CALL 36104 0 1
4417: PPUSH
4418: CALL_OW 12
4422: ARRAY
4423: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_ok ] ) then
4424: LD_VAR 0 6
4428: PPUSH
4429: LD_INT 50
4431: PUSH
4432: EMPTY
4433: LIST
4434: PPUSH
4435: CALL_OW 70
4439: IFFALSE 4449
// area := ctAreaExtra ;
4441: LD_ADDR_VAR 0 6
4445: PUSH
4446: LD_INT 23
4448: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4449: LD_VAR 0 3
4453: PPUSH
4454: LD_VAR 0 6
4458: PPUSH
4459: LD_INT 0
4461: PPUSH
4462: CALL_OW 49
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 7
4471: PUSH
4472: LD_INT 9
4474: PUSH
4475: LD_INT 10
4477: PUSH
4478: LD_INT 10
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_OWVAR 67
4491: ARRAY
4492: PPUSH
4493: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4497: CALL_OW 44
4501: PPUSH
4502: LD_VAR 0 3
4506: PPUSH
4507: CALL_OW 52
// if area = ctAreaExtra then
4511: LD_VAR 0 6
4515: PUSH
4516: LD_INT 23
4518: EQUAL
4519: IFFALSE 4536
// ComMoveXY ( veh , 73 , 21 ) ;
4521: LD_VAR 0 3
4525: PPUSH
4526: LD_INT 73
4528: PPUSH
4529: LD_INT 21
4531: PPUSH
4532: CALL_OW 111
// end ;
4536: GO 4329
4538: POP
4539: POP
// end ; dir := rand ( 1 , 2 ) ;
4540: LD_ADDR_VAR 0 9
4544: PUSH
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 2
4550: PPUSH
4551: CALL_OW 12
4555: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4556: LD_ADDR_VAR 0 6
4560: PUSH
4561: LD_INT 8
4563: PUSH
4564: LD_INT 9
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_VAR 0 9
4575: ARRAY
4576: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4577: LD_ADDR_VAR 0 7
4581: PUSH
4582: LD_INT 6
4584: PUSH
4585: LD_INT 8
4587: PUSH
4588: LD_INT 10
4590: PUSH
4591: LD_INT 11
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: PUSH
4600: LD_OWVAR 67
4604: ARRAY
4605: PUSH
4606: LD_EXP 34
4610: PLUS
4611: ST_TO_ADDR
// if counter > 20 then
4612: LD_VAR 0 7
4616: PUSH
4617: LD_INT 20
4619: GREATER
4620: IFFALSE 4630
// counter := 20 ;
4622: LD_ADDR_VAR 0 7
4626: PUSH
4627: LD_INT 20
4629: ST_TO_ADDR
// for i := 1 to counter do
4630: LD_ADDR_VAR 0 2
4634: PUSH
4635: DOUBLE
4636: LD_INT 1
4638: DEC
4639: ST_TO_ADDR
4640: LD_VAR 0 7
4644: PUSH
4645: FOR_TO
4646: IFFALSE 4981
// begin uc_side := 8 ;
4648: LD_ADDR_OWVAR 20
4652: PUSH
4653: LD_INT 8
4655: ST_TO_ADDR
// uc_nation := 2 ;
4656: LD_ADDR_OWVAR 21
4660: PUSH
4661: LD_INT 2
4663: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4664: LD_INT 13
4666: PUSH
4667: LD_INT 14
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 1
4676: PPUSH
4677: LD_INT 2
4679: PPUSH
4680: CALL_OW 12
4684: ARRAY
4685: PPUSH
4686: LD_INT 3
4688: PPUSH
4689: LD_INT 1
4691: PUSH
4692: LD_INT 2
4694: PUSH
4695: LD_INT 5
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 1
4705: PPUSH
4706: LD_INT 3
4708: PPUSH
4709: CALL_OW 12
4713: ARRAY
4714: PPUSH
4715: LD_INT 27
4717: PUSH
4718: LD_INT 28
4720: PUSH
4721: LD_INT 27
4723: PUSH
4724: LD_INT 92
4726: PUSH
4727: LD_INT 29
4729: PUSH
4730: LD_INT 25
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 1
4743: PPUSH
4744: LD_INT 6
4746: PPUSH
4747: CALL_OW 12
4751: ARRAY
4752: PPUSH
4753: LD_INT 100
4755: PPUSH
4756: CALL 38900 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4760: LD_OWVAR 40
4764: PUSH
4765: LD_INT 29
4767: EQUAL
4768: IFFALSE 4778
// vc_control := control_remote ;
4770: LD_ADDR_OWVAR 38
4774: PUSH
4775: LD_INT 2
4777: ST_TO_ADDR
// veh := CreateVehicle ;
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: CALL_OW 45
4787: ST_TO_ADDR
// result := Join ( result , veh ) ;
4788: LD_ADDR_VAR 0 1
4792: PUSH
4793: LD_VAR 0 1
4797: PPUSH
4798: LD_VAR 0 3
4802: PPUSH
4803: CALL 72080 0 2
4807: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 3
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_VAR 0 9
4827: ARRAY
4828: PPUSH
4829: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4833: LD_VAR 0 3
4837: PPUSH
4838: LD_VAR 0 6
4842: PPUSH
4843: LD_INT 0
4845: PPUSH
4846: CALL_OW 49
// if vc_control = control_manual then
4850: LD_OWVAR 38
4854: PUSH
4855: LD_INT 1
4857: EQUAL
4858: IFFALSE 4905
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4860: LD_INT 0
4862: PPUSH
4863: LD_INT 7
4865: PUSH
4866: LD_INT 8
4868: PUSH
4869: LD_INT 9
4871: PUSH
4872: LD_INT 10
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: PPUSH
4887: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4891: CALL_OW 44
4895: PPUSH
4896: LD_VAR 0 3
4900: PPUSH
4901: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4905: LD_INT 10
4907: PPUSH
4908: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4912: LD_VAR 0 3
4916: PPUSH
4917: CALL_OW 263
4921: PUSH
4922: LD_INT 2
4924: EQUAL
4925: IFFALSE 4939
4927: PUSH
4928: LD_VAR 0 3
4932: PPUSH
4933: CALL_OW 312
4937: NOT
4938: AND
4939: IFFALSE 4957
// begin Connect ( veh ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: CALL 42382 0 1
// wait ( 0 0$0.3 ) ;
4950: LD_INT 10
4952: PPUSH
4953: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4957: LD_VAR 0 3
4961: PPUSH
4962: LD_INT 100
4964: PPUSH
4965: LD_INT 55
4967: PPUSH
4968: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4972: LD_INT 18
4974: PPUSH
4975: CALL_OW 67
// end ;
4979: GO 4645
4981: POP
4982: POP
// if arabianAttacksCounter = 1 then
4983: LD_EXP 34
4987: PUSH
4988: LD_INT 1
4990: EQUAL
4991: IFFALSE 4997
// DestroySibDeposit ;
4993: CALL 3727 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4997: LD_EXP 34
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 3
5007: PUSH
5008: LD_INT 3
5010: PUSH
5011: LD_INT 2
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: PUSH
5020: LD_OWVAR 67
5024: ARRAY
5025: MOD
5026: PUSH
5027: LD_INT 0
5029: EQUAL
5030: IFFALSE 5388
// begin tmp := rand ( 0 , 2 ) ;
5032: LD_ADDR_VAR 0 8
5036: PUSH
5037: LD_INT 0
5039: PPUSH
5040: LD_INT 2
5042: PPUSH
5043: CALL_OW 12
5047: ST_TO_ADDR
// if not tmp then
5048: LD_VAR 0 8
5052: NOT
5053: IFFALSE 5214
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_INT 3
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 4
5073: PUSH
5074: LD_INT 5
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: PUSH
5083: LD_OWVAR 67
5087: ARRAY
5088: PUSH
5089: FOR_TO
5090: IFFALSE 5210
// begin uc_side := 8 ;
5092: LD_ADDR_OWVAR 20
5096: PUSH
5097: LD_INT 8
5099: ST_TO_ADDR
// uc_nation := 2 ;
5100: LD_ADDR_OWVAR 21
5104: PUSH
5105: LD_INT 2
5107: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5108: LD_INT 0
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: LD_INT 7
5116: PUSH
5117: LD_INT 8
5119: PUSH
5120: LD_INT 9
5122: PUSH
5123: LD_INT 10
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: PUSH
5132: LD_OWVAR 67
5136: ARRAY
5137: PPUSH
5138: CALL_OW 380
// un := CreateHuman ;
5142: LD_ADDR_VAR 0 5
5146: PUSH
5147: CALL_OW 44
5151: ST_TO_ADDR
// result := Join ( result , un ) ;
5152: LD_ADDR_VAR 0 1
5156: PUSH
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_VAR 0 5
5166: PPUSH
5167: CALL 72080 0 2
5171: ST_TO_ADDR
// if Prob ( 60 ) then
5172: LD_INT 60
5174: PPUSH
5175: CALL_OW 13
5179: IFFALSE 5193
// SetClass ( un , class_mortar ) ;
5181: LD_VAR 0 5
5185: PPUSH
5186: LD_INT 8
5188: PPUSH
5189: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5193: LD_VAR 0 5
5197: PPUSH
5198: LD_INT 16
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 49
// end ;
5208: GO 5089
5210: POP
5211: POP
// end else
5212: GO 5378
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5214: LD_ADDR_VAR 0 2
5218: PUSH
5219: DOUBLE
5220: LD_INT 1
5222: DEC
5223: ST_TO_ADDR
5224: LD_INT 2
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: LD_INT 3
5232: PUSH
5233: LD_INT 4
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: PUSH
5242: LD_OWVAR 67
5246: ARRAY
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5376
// begin uc_side := 8 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 8
5258: ST_TO_ADDR
// uc_nation := 0 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 0
5266: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5267: LD_ADDR_OWVAR 28
5271: PUSH
5272: LD_INT 17
5274: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5275: LD_ADDR_OWVAR 31
5279: PUSH
5280: LD_INT 3
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: LD_INT 0
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5298: LD_ADDR_OWVAR 29
5302: PUSH
5303: LD_INT 10
5305: PUSH
5306: LD_INT 10
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: ST_TO_ADDR
// hc_gallery :=  ;
5313: LD_ADDR_OWVAR 33
5317: PUSH
5318: LD_STRING 
5320: ST_TO_ADDR
// hc_name :=  ;
5321: LD_ADDR_OWVAR 26
5325: PUSH
5326: LD_STRING 
5328: ST_TO_ADDR
// un := CreateHuman ;
5329: LD_ADDR_VAR 0 5
5333: PUSH
5334: CALL_OW 44
5338: ST_TO_ADDR
// result := Join ( result , un ) ;
5339: LD_ADDR_VAR 0 1
5343: PUSH
5344: LD_VAR 0 1
5348: PPUSH
5349: LD_VAR 0 5
5353: PPUSH
5354: CALL 72080 0 2
5358: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5359: LD_VAR 0 5
5363: PPUSH
5364: LD_INT 16
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: CALL_OW 49
// end ;
5374: GO 5248
5376: POP
5377: POP
// end ; if sibDeposits then
5378: LD_EXP 32
5382: IFFALSE 5388
// DestroySibDeposit ;
5384: CALL 3727 0 0
// end ; for i in result do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: FOR_IN
5399: IFFALSE 5415
// SetTag ( i , 10 ) ;
5401: LD_VAR 0 2
5405: PPUSH
5406: LD_INT 10
5408: PPUSH
5409: CALL_OW 109
5413: GO 5398
5415: POP
5416: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5417: LD_EXP 44
5421: PPUSH
5422: CALL_OW 427
// end ; end_of_file
5426: LD_VAR 0 1
5430: RET
// export function Action ; var tmp ; begin
5431: LD_INT 0
5433: PPUSH
5434: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5435: LD_ADDR_VAR 0 2
5439: PUSH
5440: LD_INT 22
5442: PUSH
5443: LD_INT 1
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: LD_INT 21
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PPUSH
5464: CALL_OW 69
5468: ST_TO_ADDR
// InGameOn ;
5469: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5473: LD_VAR 0 2
5477: PPUSH
5478: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5482: LD_INT 22
5484: PUSH
5485: LD_INT 1
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 2
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: PPUSH
5511: LD_INT 69
5513: PPUSH
5514: LD_INT 94
5516: PPUSH
5517: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5521: LD_EXP 1
5525: PPUSH
5526: LD_STRING D2-JMM-1
5528: PPUSH
5529: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5533: LD_VAR 0 2
5537: PPUSH
5538: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5542: LD_EXP 2
5546: PPUSH
5547: LD_STRING D2-Huck-1
5549: PPUSH
5550: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5554: LD_VAR 0 2
5558: PPUSH
5559: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_STRING D2-JMM-2
5570: PPUSH
5571: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 87
// InGameOff ;
5584: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5588: LD_STRING M1
5590: PPUSH
5591: CALL_OW 337
// SaveForQuickRestart ;
5595: CALL_OW 22
// wait ( 10 10$00 ) ;
5599: LD_INT 21000
5601: PPUSH
5602: CALL_OW 67
// DialogueOn ;
5606: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5610: LD_EXP 16
5614: PPUSH
5615: LD_STRING D3-Pow-1
5617: PPUSH
5618: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_STRING D3-JMM-1
5629: PPUSH
5630: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5634: LD_EXP 16
5638: PPUSH
5639: LD_STRING D3-Pow-2
5641: PPUSH
5642: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5646: LD_EXP 1
5650: PPUSH
5651: LD_STRING D3-JMM-2
5653: PPUSH
5654: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5658: LD_EXP 16
5662: PPUSH
5663: LD_STRING D3-Pow-3
5665: PPUSH
5666: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D3-JMM-3
5677: PPUSH
5678: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5682: LD_EXP 16
5686: PPUSH
5687: LD_STRING D3-Pow-4
5689: PPUSH
5690: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5694: LD_EXP 1
5698: PPUSH
5699: LD_STRING D3-JMM-4
5701: PPUSH
5702: CALL_OW 88
// DialogueOff ;
5706: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5710: LD_STRING M2
5712: PPUSH
5713: CALL_OW 337
// wait ( 2 2$30 ) ;
5717: LD_INT 5250
5719: PPUSH
5720: CALL_OW 67
// PrepareBurlak ;
5724: CALL 2320 0 0
// BurlakArmy ;
5728: CALL 2502 0 0
// end ;
5732: LD_VAR 0 1
5736: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5737: LD_INT 1
5739: PPUSH
5740: LD_EXP 19
5744: PPUSH
5745: CALL_OW 292
5749: IFFALSE 5908
5751: GO 5753
5753: DISABLE
// begin DialogueOn ;
5754: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5758: LD_EXP 19
5762: PPUSH
5763: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5767: LD_INT 22
5769: PUSH
5770: LD_INT 1
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 26
5779: PUSH
5780: LD_INT 1
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 25
5792: PUSH
5793: LD_INT 1
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 25
5802: PUSH
5803: LD_INT 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 25
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 25
5822: PUSH
5823: LD_INT 4
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 25
5832: PUSH
5833: LD_INT 5
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: PPUSH
5858: LD_STRING D5-Sol1-1
5860: PPUSH
5861: LD_STRING D5-FSol1-1
5863: PPUSH
5864: CALL 8455 0 3
// Say ( JMM , D5-JMM-1 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D5-JMM-1
5875: PPUSH
5876: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5880: LD_EXP 18
5884: PPUSH
5885: LD_STRING DAmer-Bur-1
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING DAmer-JMM-1
5899: PPUSH
5900: CALL_OW 88
// DialogueOff ;
5904: CALL_OW 7
// end ;
5908: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5909: LD_INT 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_INT 7
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PPUSH
5922: CALL_OW 70
5926: IFFALSE 6329
5928: GO 5930
5930: DISABLE
5931: LD_INT 0
5933: PPUSH
// begin enable ;
5934: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: LD_INT 4
5942: PPUSH
5943: LD_INT 22
5945: PUSH
5946: LD_INT 7
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PPUSH
5953: CALL_OW 70
5957: PUSH
5958: FOR_IN
5959: IFFALSE 6327
// begin if i = Burlak or i = Masha then
5961: LD_VAR 0 1
5965: PUSH
5966: LD_EXP 18
5970: EQUAL
5971: IFTRUE 5985
5973: PUSH
5974: LD_VAR 0 1
5978: PUSH
5979: LD_EXP 19
5983: EQUAL
5984: OR
5985: IFFALSE 6132
// begin RemoveUnit ( i ) ;
5987: LD_VAR 0 1
5991: PPUSH
5992: CALL_OW 64
// DialogueOn ;
5996: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
6000: LD_EXP 1
6004: PPUSH
6005: LD_STRING D5a-JMM-1
6007: PPUSH
6008: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
6012: LD_INT 22
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 26
6024: PUSH
6025: LD_INT 1
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 2
6034: PUSH
6035: LD_INT 25
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 25
6047: PUSH
6048: LD_INT 2
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 25
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 25
6067: PUSH
6068: LD_INT 4
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: LD_INT 25
6077: PUSH
6078: LD_INT 5
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PPUSH
6098: CALL_OW 69
6102: PPUSH
6103: LD_STRING D5a-Sol1-1
6105: PPUSH
6106: LD_STRING D5-FSol1-1
6108: PPUSH
6109: CALL 8455 0 3
// DialogueOff ;
6113: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
6117: LD_STRING M2b
6119: PPUSH
6120: CALL_OW 337
// spawnBurlak = 0 ;
6124: LD_ADDR_EXP 28
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 247
6141: PUSH
6142: LD_INT 2
6144: EQUAL
6145: IFFALSE 6162
6147: PUSH
6148: LD_VAR 0 1
6152: PPUSH
6153: CALL_OW 263
6157: PUSH
6158: LD_INT 1
6160: EQUAL
6161: AND
6162: IFFALSE 6290
// begin case IsDrivenBy ( i ) of Gnyevko :
6164: LD_VAR 0 1
6168: PPUSH
6169: CALL_OW 311
6173: PUSH
6174: LD_EXP 20
6178: DOUBLE
6179: EQUAL
6180: IFTRUE 6184
6182: GO 6197
6184: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6185: LD_INT 1
6187: PPUSH
6188: LD_STRING 13_Gnyevko_1
6190: PPUSH
6191: CALL_OW 39
6195: GO 6290
6197: LD_EXP 21
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6220
6207: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6208: LD_INT 1
6210: PPUSH
6211: LD_STRING 13_Titov_1
6213: PPUSH
6214: CALL_OW 39
6218: GO 6290
6220: LD_EXP 22
6224: DOUBLE
6225: EQUAL
6226: IFTRUE 6230
6228: GO 6243
6230: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6231: LD_INT 1
6233: PPUSH
6234: LD_STRING 13_Xavier_1
6236: PPUSH
6237: CALL_OW 39
6241: GO 6290
6243: LD_EXP 23
6247: DOUBLE
6248: EQUAL
6249: IFTRUE 6253
6251: GO 6266
6253: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6254: LD_INT 1
6256: PPUSH
6257: LD_STRING 13_Belkov_1
6259: PPUSH
6260: CALL_OW 39
6264: GO 6290
6266: LD_EXP 24
6270: DOUBLE
6271: EQUAL
6272: IFTRUE 6276
6274: GO 6289
6276: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6277: LD_INT 1
6279: PPUSH
6280: LD_STRING 13_Lipshchin_1
6282: PPUSH
6283: CALL_OW 39
6287: GO 6290
6289: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 264
6299: PUSH
6300: LD_INT 49
6302: EQUAL
6303: IFFALSE 6316
// DestroyUnit ( i ) else
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 65
6314: GO 6325
// RemoveUnit ( i ) ;
6316: LD_VAR 0 1
6320: PPUSH
6321: CALL_OW 64
// end ;
6325: GO 5958
6327: POP
6328: POP
// end ;
6329: PPOPN 1
6331: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6332: LD_EXP 18
6336: PPUSH
6337: CALL_OW 302
6341: IFFALSE 6358
6343: PUSH
6344: LD_EXP 19
6348: PPUSH
6349: CALL_OW 256
6353: PUSH
6354: LD_INT 500
6356: LESS
6357: AND
6358: IFFALSE 6375
6360: PUSH
6361: LD_EXP 19
6365: PPUSH
6366: CALL_OW 255
6370: PUSH
6371: LD_INT 7
6373: EQUAL
6374: AND
6375: IFFALSE 6395
6377: GO 6379
6379: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6380: LD_EXP 18
6384: PPUSH
6385: LD_INT 107
6387: PPUSH
6388: LD_INT 118
6390: PPUSH
6391: CALL_OW 111
6395: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6396: LD_EXP 18
6400: PPUSH
6401: CALL_OW 301
6405: IFFALSE 6417
6407: PUSH
6408: LD_EXP 28
6412: PUSH
6413: LD_INT 1
6415: EQUAL
6416: AND
6417: IFFALSE 6550
6419: GO 6421
6421: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6422: LD_EXP 1
6426: PPUSH
6427: LD_STRING D5b-JMM-1
6429: PPUSH
6430: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6434: LD_INT 22
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 26
6446: PUSH
6447: LD_INT 1
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 2
6456: PUSH
6457: LD_INT 25
6459: PUSH
6460: LD_INT 1
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 2
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 3
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 4
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: PPUSH
6520: CALL_OW 69
6524: PPUSH
6525: LD_STRING D5b-Sol1-1
6527: PPUSH
6528: LD_STRING 
6530: PPUSH
6531: CALL 8455 0 3
// ChangeMissionObjectives ( M2a ) ;
6535: LD_STRING M2a
6537: PPUSH
6538: CALL_OW 337
// burlakStatus := 1 ;
6542: LD_ADDR_EXP 29
6546: PUSH
6547: LD_INT 1
6549: ST_TO_ADDR
// end ;
6550: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6551: LD_EXP 2
6555: PPUSH
6556: CALL_OW 301
6560: IFFALSE 6697
6562: GO 6564
6564: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6565: LD_EXP 1
6569: PPUSH
6570: LD_STRING D6-JMM-1
6572: PPUSH
6573: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6577: LD_INT 22
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 26
6589: PUSH
6590: LD_INT 1
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: LD_INT 25
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 25
6612: PUSH
6613: LD_INT 2
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 25
6622: PUSH
6623: LD_INT 3
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 25
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 25
6642: PUSH
6643: LD_INT 5
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: PPUSH
6668: LD_STRING D6-Sol1-1
6670: PPUSH
6671: LD_STRING 
6673: PPUSH
6674: CALL 8455 0 3
// Say ( JMM , D6-JMM-2 ) ;
6678: LD_EXP 1
6682: PPUSH
6683: LD_STRING D6-JMM-2
6685: PPUSH
6686: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6690: LD_STRING M1a
6692: PPUSH
6693: CALL_OW 337
// end ;
6697: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6698: LD_INT 25
6700: PPUSH
6701: LD_INT 1
6703: PPUSH
6704: CALL_OW 321
6708: PUSH
6709: LD_INT 2
6711: EQUAL
6712: IFFALSE 6729
6714: GO 6716
6716: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6717: LD_EXP 2
6721: PPUSH
6722: LD_STRING D6-Huck-2
6724: PPUSH
6725: CALL_OW 88
6729: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6730: LD_INT 22
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 2
6742: PUSH
6743: LD_INT 34
6745: PUSH
6746: LD_INT 8
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: LD_INT 35
6755: PUSH
6756: LD_INT 8
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 69
6776: IFFALSE 6836
6778: PUSH
6779: LD_INT 5
6781: PPUSH
6782: LD_INT 22
6784: PUSH
6785: LD_INT 1
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 21
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: LD_INT 30
6804: PUSH
6805: LD_INT 1
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 57
6817: PUSH
6818: EMPTY
6819: LIST
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 70
6835: AND
6836: IFFALSE 6896
6838: PUSH
6839: LD_INT 5
6841: PPUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 1
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 21
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 30
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: LD_INT 57
6877: PUSH
6878: EMPTY
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 70
6895: AND
6896: IFFALSE 6938
6898: GO 6900
6900: DISABLE
// begin DialogueOn ;
6901: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6905: LD_EXP 1
6909: PPUSH
6910: LD_STRING D7-JMM-1
6912: PPUSH
6913: CALL_OW 88
// DialogueOff ;
6917: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6921: LD_STRING M4
6923: PPUSH
6924: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6928: LD_INT 5
6930: PPUSH
6931: LD_INT 0
6933: PPUSH
6934: CALL_OW 424
// end ;
6938: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6939: LD_INT 6
6941: PPUSH
6942: LD_INT 22
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 25
6954: PUSH
6955: LD_INT 4
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PPUSH
6966: CALL_OW 70
6970: IFFALSE 6982
6972: PUSH
6973: LD_EXP 38
6977: PUSH
6978: LD_INT 1
6980: EQUAL
6981: AND
6982: IFFALSE 6994
6984: PUSH
6985: LD_EXP 30
6989: PUSH
6990: LD_INT 0
6992: EQUAL
6993: AND
6994: IFFALSE 7059
6996: GO 6998
6998: DISABLE
// begin enable ;
6999: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
7000: LD_ADDR_EXP 27
7004: PUSH
7005: LD_INT 6
7007: PPUSH
7008: LD_INT 22
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 25
7020: PUSH
7021: LD_INT 4
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PPUSH
7032: CALL_OW 70
7036: PUSH
7037: LD_INT 1
7039: ARRAY
7040: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
7041: LD_INT 6
7043: PPUSH
7044: LD_INT 0
7046: PPUSH
7047: CALL_OW 424
// radationResearched := 1 ;
7051: LD_ADDR_EXP 30
7055: PUSH
7056: LD_INT 1
7058: ST_TO_ADDR
// end ;
7059: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
7060: LD_EXP 27
7064: PPUSH
7065: CALL_OW 301
7069: IFFALSE 7081
7071: PUSH
7072: LD_EXP 30
7076: PUSH
7077: LD_INT 1
7079: EQUAL
7080: AND
7081: IFFALSE 7117
7083: GO 7085
7085: DISABLE
// begin enable ;
7086: ENABLE
// radationResearched = 0 ;
7087: LD_ADDR_EXP 30
7091: PUSH
7092: LD_INT 0
7094: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7095: LD_INT 6
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
7105: LD_EXP 1
7109: PPUSH
7110: LD_STRING D9a-JMM-1
7112: PPUSH
7113: CALL_OW 88
// end ; end_of_file
7117: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
7118: LD_VAR 0 5
7122: PUSH
7123: LD_INT 8
7125: EQUAL
7126: IFFALSE 7138
7128: PUSH
7129: LD_EXP 36
7133: PUSH
7134: LD_INT 0
7136: EQUAL
7137: AND
7138: IFFALSE 7191
// begin eventVar1 := 1 ;
7140: LD_ADDR_EXP 36
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// DialogueOn ;
7148: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7152: LD_EXP 1
7156: PPUSH
7157: LD_STRING D6a-JMM-1
7159: PPUSH
7160: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7164: LD_EXP 16
7168: PPUSH
7169: LD_STRING D6a-Pow-1
7171: PPUSH
7172: CALL_OW 94
// DialogueOff ;
7176: CALL_OW 7
// wait ( 3 3$0 ) ;
7180: LD_INT 6300
7182: PPUSH
7183: CALL_OW 67
// PowellSupport ;
7187: CALL 1878 0 0
// end ; end ;
7191: PPOPN 5
7193: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL 27406 0 1
// if un = JMM then
7203: LD_VAR 0 1
7207: PUSH
7208: LD_EXP 1
7212: EQUAL
7213: IFFALSE 7222
// YouLost ( JMM ) ;
7215: LD_STRING JMM
7217: PPUSH
7218: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7222: LD_VAR 0 1
7226: PPUSH
7227: CALL_OW 264
7231: PUSH
7232: LD_INT 31
7234: EQUAL
7235: IFFALSE 7251
// achivCounter := achivCounter + 1 ;
7237: LD_ADDR_EXP 42
7241: PUSH
7242: LD_EXP 42
7246: PUSH
7247: LD_INT 1
7249: PLUS
7250: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 255
7260: PUSH
7261: LD_INT 1
7263: NONEQUAL
7264: IFFALSE 7281
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 247
7276: PUSH
7277: LD_INT 2
7279: EQUAL
7280: AND
7281: IFFALSE 7297
// destroyCounter := destroyCounter + 1 ;
7283: LD_ADDR_EXP 43
7287: PUSH
7288: LD_EXP 43
7292: PUSH
7293: LD_INT 1
7295: PLUS
7296: ST_TO_ADDR
// end ;
7297: PPOPN 1
7299: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7300: LD_VAR 0 2
7304: PUSH
7305: LD_EXP 19
7309: EQUAL
7310: IFFALSE 7319
// SetAchievement ( ACH_MASHA ) ;
7312: LD_STRING ACH_MASHA
7314: PPUSH
7315: CALL_OW 543
// end ;
7319: PPOPN 4
7321: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7322: LD_VAR 0 1
7326: PPUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: CALL 27464 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 264
7345: PUSH
7346: LD_INT 8
7348: EQUAL
7349: IFFALSE 7361
7351: PUSH
7352: LD_EXP 37
7356: PUSH
7357: LD_INT 0
7359: EQUAL
7360: AND
7361: IFFALSE 7430
// begin eventVar2 := 1 ;
7363: LD_ADDR_EXP 37
7367: PUSH
7368: LD_INT 1
7370: ST_TO_ADDR
// DialogueOn ;
7371: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7375: LD_EXP 1
7379: PPUSH
7380: LD_STRING D6b-JMM-1
7382: PPUSH
7383: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7387: LD_EXP 16
7391: PPUSH
7392: LD_STRING D6b-Pow-1
7394: PPUSH
7395: CALL_OW 94
// DialogueOff ;
7399: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7403: LD_INT 5
7405: PPUSH
7406: LD_INT 1
7408: PPUSH
7409: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7413: LD_INT 7
7415: PPUSH
7416: LD_INT 1
7418: PPUSH
7419: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7423: LD_STRING M3
7425: PPUSH
7426: CALL_OW 337
// end ; end ;
7430: PPOPN 2
7432: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 3
7442: PPUSH
7443: LD_INT 5
7445: PPUSH
7446: CALL_OW 309
7450: IFFALSE 7462
7452: PUSH
7453: LD_EXP 38
7457: PUSH
7458: LD_INT 0
7460: EQUAL
7461: AND
7462: IFFALSE 7687
// begin eventVar3 := 1 ;
7464: LD_ADDR_EXP 38
7468: PUSH
7469: LD_INT 1
7471: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7472: LD_INT 175
7474: PPUSH
7475: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7479: LD_INT 7
7481: PPUSH
7482: LD_INT 22
7484: PUSH
7485: LD_INT 1
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 21
7494: PUSH
7495: LD_INT 2
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 11
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 70
7521: IFFALSE 7540
// begin radarOnSpot := 1 ;
7523: LD_ADDR_EXP 31
7527: PUSH
7528: LD_INT 1
7530: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7531: LD_STRING M3a
7533: PPUSH
7534: CALL_OW 337
// end else
7538: GO 7547
// ChangeMissionObjectives ( M3b ) ;
7540: LD_STRING M3b
7542: PPUSH
7543: CALL_OW 337
// DialogueOn ;
7547: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7551: LD_EXP 2
7555: PPUSH
7556: LD_STRING D8-Huck-1
7558: PPUSH
7559: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7563: LD_EXP 1
7567: PPUSH
7568: LD_STRING D8-JMM-1
7570: PPUSH
7571: CALL_OW 88
// if IsOk ( Stevens ) then
7575: LD_EXP 2
7579: PPUSH
7580: CALL_OW 302
7584: IFFALSE 7646
// begin Say ( Stevens , D8-Huck-2 ) ;
7586: LD_EXP 2
7590: PPUSH
7591: LD_STRING D8-Huck-2
7593: PPUSH
7594: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7598: LD_EXP 1
7602: PPUSH
7603: LD_STRING D8-JMM-2
7605: PPUSH
7606: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7610: LD_EXP 2
7614: PPUSH
7615: LD_STRING D8-Huck-3
7617: PPUSH
7618: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7622: LD_EXP 1
7626: PPUSH
7627: LD_STRING D8-JMM-3
7629: PPUSH
7630: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7634: LD_EXP 2
7638: PPUSH
7639: LD_STRING D8-Huck-4
7641: PPUSH
7642: CALL_OW 88
// end ; DialogueOff ;
7646: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7650: LD_INT 5
7652: PPUSH
7653: LD_INT 0
7655: PPUSH
7656: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7660: LD_INT 7
7662: PPUSH
7663: LD_INT 0
7665: PPUSH
7666: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7670: LD_INT 6
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7680: LD_STRING M5
7682: PPUSH
7683: CALL_OW 337
// end ; end ;
7687: PPOPN 3
7689: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7690: LD_EXP 27
7694: PPUSH
7695: CALL_OW 302
7699: IFFALSE 7713
7701: PUSH
7702: LD_VAR 0 2
7706: PUSH
7707: LD_EXP 27
7711: EQUAL
7712: AND
7713: IFFALSE 7725
7715: PUSH
7716: LD_EXP 39
7720: PUSH
7721: LD_INT 0
7723: EQUAL
7724: AND
7725: IFFALSE 7737
7727: PUSH
7728: LD_EXP 38
7732: PUSH
7733: LD_INT 1
7735: EQUAL
7736: AND
7737: IFFALSE 7777
7739: PUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_INT 1
7747: PPUSH
7748: CALL_OW 268
7752: PUSH
7753: LD_INT 11
7755: EQUAL
7756: IFTRUE 7776
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: CALL_OW 268
7771: PUSH
7772: LD_INT 11
7774: EQUAL
7775: OR
7776: AND
7777: IFFALSE 7787
// eventVar4 := 1 ;
7779: LD_ADDR_EXP 39
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// end ;
7787: PPOPN 2
7789: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7790: LD_INT 0
7792: PPUSH
7793: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 248
7803: PUSH
7804: LD_INT 2
7806: EQUAL
7807: IFFALSE 8043
// begin for i := sibDeposits downto 1 do
7809: LD_ADDR_VAR 0 4
7813: PUSH
7814: DOUBLE
7815: LD_EXP 32
7819: INC
7820: ST_TO_ADDR
7821: LD_INT 1
7823: PUSH
7824: FOR_DOWNTO
7825: IFFALSE 7897
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7827: LD_EXP 32
7831: PUSH
7832: LD_VAR 0 4
7836: ARRAY
7837: PUSH
7838: LD_INT 1
7840: ARRAY
7841: PUSH
7842: LD_VAR 0 2
7846: EQUAL
7847: IFFALSE 7871
7849: PUSH
7850: LD_EXP 32
7854: PUSH
7855: LD_VAR 0 4
7859: ARRAY
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: PUSH
7865: LD_VAR 0 3
7869: EQUAL
7870: AND
7871: IFFALSE 7895
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7873: LD_ADDR_EXP 32
7877: PUSH
7878: LD_EXP 32
7882: PPUSH
7883: LD_VAR 0 4
7887: PPUSH
7888: CALL_OW 3
7892: ST_TO_ADDR
// break ;
7893: GO 7897
// end ;
7895: GO 7824
7897: POP
7898: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7899: LD_EXP 40
7903: PUSH
7904: LD_INT 0
7906: EQUAL
7907: IFFALSE 7941
7909: PUSH
7910: LD_VAR 0 2
7914: PPUSH
7915: LD_VAR 0 3
7919: PPUSH
7920: CALL_OW 428
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_INT 1
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: IN
7940: AND
7941: IFFALSE 8043
// begin eventVar5 := 1 ;
7943: LD_ADDR_EXP 40
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// DialogueOn ;
7951: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7955: LD_EXP 2
7959: PPUSH
7960: LD_STRING D4-Sci1-1
7962: PPUSH
7963: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7967: LD_EXP 1
7971: PPUSH
7972: LD_STRING D4-JMM-1
7974: PPUSH
7975: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7979: LD_EXP 2
7983: PPUSH
7984: LD_STRING D4-Sci1-2
7986: PPUSH
7987: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7991: LD_EXP 1
7995: PPUSH
7996: LD_STRING D4-JMM-2
7998: PPUSH
7999: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
8003: LD_EXP 2
8007: PPUSH
8008: LD_STRING D4-Sci1-3
8010: PPUSH
8011: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8015: LD_EXP 1
8019: PPUSH
8020: LD_STRING D4-JMM-3
8022: PPUSH
8023: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
8027: LD_EXP 1
8031: PPUSH
8032: LD_STRING D4-JMM-3a
8034: PPUSH
8035: CALL_OW 88
// DialogueOff ;
8039: CALL_OW 7
// end ; end ; end ;
8043: PPOPN 5
8045: END
// on SiberiteDepositDestroyed ( x , y ) do begin sibDestroyedCounter := Inc ( sibDestroyedCounter ) ;
8046: LD_ADDR_EXP 33
8050: PUSH
8051: LD_EXP 33
8055: PPUSH
8056: CALL 73453 0 1
8060: ST_TO_ADDR
// if GetDistUnitXY ( JMM , x , y ) < 12 then
8061: LD_EXP 1
8065: PPUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: LD_VAR 0 2
8075: PPUSH
8076: CALL_OW 297
8080: PUSH
8081: LD_INT 12
8083: LESS
8084: IFFALSE 8098
// ForceExclamation ( JMM , 49 ) ;
8086: LD_EXP 1
8090: PPUSH
8091: LD_INT 49
8093: PPUSH
8094: CALL_OW 582
// end ;
8098: PPOPN 2
8100: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 255
8110: PUSH
8111: LD_INT 1
8113: EQUAL
8114: IFFALSE 8131
8116: PUSH
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 266
8126: PUSH
8127: LD_INT 0
8129: EQUAL
8130: AND
8131: IFFALSE 8196
8133: PUSH
8134: LD_INT 22
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 2
8156: PUSH
8157: LD_INT 30
8159: PUSH
8160: LD_INT 0
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 1
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PUSH
8192: LD_INT 1
8194: EQUAL
8195: AND
8196: IFFALSE 8210
// SetBName ( building , omega ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: LD_STRING omega
8205: PPUSH
8206: CALL_OW 500
// end ;
8210: PPOPN 2
8212: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL 27448 0 1
// end ;
8222: PPOPN 1
8224: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8225: LD_VAR 0 1
8229: PUSH
8230: LD_EXP 44
8234: EQUAL
8235: IFFALSE 8241
// ArabianAttack ;
8237: CALL 10395 0 0
// if event = eventRussianAttack then
8241: LD_VAR 0 1
8245: PUSH
8246: LD_EXP 45
8250: EQUAL
8251: IFFALSE 8257
// RussianAttack ;
8253: CALL 10760 0 0
// end ;
8257: PPOPN 1
8259: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8260: LD_VAR 0 1
8264: PUSH
8265: LD_EXP 46
8269: EQUAL
8270: IFFALSE 8366
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8272: LD_VAR 0 2
8276: PPUSH
8277: CALL_OW 302
8281: IFFALSE 8299
8283: PUSH
8284: LD_VAR 0 3
8288: PPUSH
8289: LD_VAR 0 4
8293: PPUSH
8294: CALL_OW 488
8298: AND
8299: IFFALSE 8366
// begin repeat wait ( 0 0$1 ) ;
8301: LD_INT 35
8303: PPUSH
8304: CALL_OW 67
// if not HasTask ( p1 ) then
8308: LD_VAR 0 2
8312: PPUSH
8313: CALL_OW 314
8317: NOT
8318: IFFALSE 8354
// begin ComContaminate ( p1 , p2 , p3 ) ;
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_VAR 0 3
8329: PPUSH
8330: LD_VAR 0 4
8334: PPUSH
8335: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8339: LD_VAR 0 2
8343: PPUSH
8344: LD_INT 42
8346: PPUSH
8347: LD_INT 3
8349: PPUSH
8350: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8354: LD_VAR 0 2
8358: PPUSH
8359: CALL_OW 302
8363: NOT
8364: IFFALSE 8301
// end ; end ; end ;
8366: PPOPN 7
8368: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 255
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: LD_INT 8
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: IN
8389: IFFALSE 8452
// begin ComMoveXY ( driver , 41 , 2 ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_INT 41
8398: PPUSH
8399: LD_INT 2
8401: PPUSH
8402: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8406: LD_INT 35
8408: PPUSH
8409: CALL_OW 67
// if IsDead ( driver ) then
8413: LD_VAR 0 1
8417: PPUSH
8418: CALL_OW 301
8422: IFFALSE 8426
// exit ;
8424: GO 8452
// until IsAt ( driver , 41 , 2 ) ;
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_INT 41
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: CALL_OW 307
8441: IFFALSE 8406
// RemoveUnit ( driver ) ;
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 64
// end ; end ; end_of_file
8452: PPOPN 4
8454: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8455: LD_INT 0
8457: PPUSH
8458: PPUSH
8459: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 1
8469: PUSH
8470: LD_EXP 1
8474: PUSH
8475: LD_EXP 2
8479: PUSH
8480: LD_EXP 3
8484: PUSH
8485: LD_EXP 4
8489: PUSH
8490: LD_EXP 5
8494: PUSH
8495: LD_EXP 6
8499: PUSH
8500: LD_EXP 7
8504: PUSH
8505: LD_EXP 8
8509: PUSH
8510: LD_EXP 9
8514: PUSH
8515: LD_EXP 10
8519: PUSH
8520: LD_EXP 11
8524: PUSH
8525: LD_EXP 12
8529: PUSH
8530: LD_EXP 13
8534: PUSH
8535: LD_EXP 14
8539: PUSH
8540: LD_EXP 16
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: DIFF
8562: ST_TO_ADDR
// if not characters then
8563: LD_VAR 0 1
8567: NOT
8568: IFFALSE 8572
// exit ;
8570: GO 8651
// speaker := characters [ rand ( 1 , characters ) ] ;
8572: LD_ADDR_VAR 0 6
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: LD_INT 1
8584: PPUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 12
8594: ARRAY
8595: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8596: LD_VAR 0 6
8600: PPUSH
8601: CALL_OW 258
8605: PUSH
8606: LD_INT 1
8608: EQUAL
8609: IFFALSE 8627
// Say ( speaker , dialogMID ) else
8611: LD_VAR 0 6
8615: PPUSH
8616: LD_VAR 0 2
8620: PPUSH
8621: CALL_OW 88
8625: GO 8641
// Say ( speaker , dialogFID ) ;
8627: LD_VAR 0 6
8631: PPUSH
8632: LD_VAR 0 3
8636: PPUSH
8637: CALL_OW 88
// result := speaker ;
8641: LD_ADDR_VAR 0 4
8645: PUSH
8646: LD_VAR 0 6
8650: ST_TO_ADDR
// end ;
8651: LD_VAR 0 4
8655: RET
// export function PrepareDifficulty ; begin
8656: LD_INT 0
8658: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8659: LD_INT 5
8661: PPUSH
8662: LD_INT 8
8664: PPUSH
8665: LD_INT 2
8667: PPUSH
8668: CALL_OW 322
// if Difficulty = 1 then
8672: LD_OWVAR 67
8676: PUSH
8677: LD_INT 1
8679: EQUAL
8680: IFFALSE 8799
// begin SetTech ( 66 , 8 , state_researched ) ;
8682: LD_INT 66
8684: PPUSH
8685: LD_INT 8
8687: PPUSH
8688: LD_INT 2
8690: PPUSH
8691: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8695: LD_INT 67
8697: PPUSH
8698: LD_INT 8
8700: PPUSH
8701: LD_INT 0
8703: PPUSH
8704: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8708: LD_INT 68
8710: PPUSH
8711: LD_INT 8
8713: PPUSH
8714: LD_INT 0
8716: PPUSH
8717: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8721: LD_INT 51
8723: PPUSH
8724: LD_INT 8
8726: PPUSH
8727: LD_INT 2
8729: PPUSH
8730: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8734: LD_INT 52
8736: PPUSH
8737: LD_INT 8
8739: PPUSH
8740: LD_INT 0
8742: PPUSH
8743: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8747: LD_INT 53
8749: PPUSH
8750: LD_INT 8
8752: PPUSH
8753: LD_INT 0
8755: PPUSH
8756: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8760: LD_INT 60
8762: PPUSH
8763: LD_INT 8
8765: PPUSH
8766: LD_INT 2
8768: PPUSH
8769: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8773: LD_INT 61
8775: PPUSH
8776: LD_INT 8
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8786: LD_INT 62
8788: PPUSH
8789: LD_INT 8
8791: PPUSH
8792: LD_INT 0
8794: PPUSH
8795: CALL_OW 322
// end ; if Difficulty = 2 then
8799: LD_OWVAR 67
8803: PUSH
8804: LD_INT 2
8806: EQUAL
8807: IFFALSE 8926
// begin SetTech ( 66 , 8 , state_researched ) ;
8809: LD_INT 66
8811: PPUSH
8812: LD_INT 8
8814: PPUSH
8815: LD_INT 2
8817: PPUSH
8818: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8822: LD_INT 67
8824: PPUSH
8825: LD_INT 8
8827: PPUSH
8828: LD_INT 2
8830: PPUSH
8831: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8835: LD_INT 68
8837: PPUSH
8838: LD_INT 8
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8848: LD_INT 51
8850: PPUSH
8851: LD_INT 8
8853: PPUSH
8854: LD_INT 2
8856: PPUSH
8857: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8861: LD_INT 52
8863: PPUSH
8864: LD_INT 8
8866: PPUSH
8867: LD_INT 2
8869: PPUSH
8870: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8874: LD_INT 53
8876: PPUSH
8877: LD_INT 8
8879: PPUSH
8880: LD_INT 2
8882: PPUSH
8883: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8887: LD_INT 60
8889: PPUSH
8890: LD_INT 8
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8900: LD_INT 61
8902: PPUSH
8903: LD_INT 8
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8913: LD_INT 62
8915: PPUSH
8916: LD_INT 8
8918: PPUSH
8919: LD_INT 0
8921: PPUSH
8922: CALL_OW 322
// end ; if Difficulty >= 3 then
8926: LD_OWVAR 67
8930: PUSH
8931: LD_INT 3
8933: GREATEREQUAL
8934: IFFALSE 9053
// begin SetTech ( 66 , 8 , state_researched ) ;
8936: LD_INT 66
8938: PPUSH
8939: LD_INT 8
8941: PPUSH
8942: LD_INT 2
8944: PPUSH
8945: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8949: LD_INT 67
8951: PPUSH
8952: LD_INT 8
8954: PPUSH
8955: LD_INT 2
8957: PPUSH
8958: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8962: LD_INT 68
8964: PPUSH
8965: LD_INT 8
8967: PPUSH
8968: LD_INT 0
8970: PPUSH
8971: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8975: LD_INT 51
8977: PPUSH
8978: LD_INT 8
8980: PPUSH
8981: LD_INT 2
8983: PPUSH
8984: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8988: LD_INT 52
8990: PPUSH
8991: LD_INT 8
8993: PPUSH
8994: LD_INT 2
8996: PPUSH
8997: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
9001: LD_INT 53
9003: PPUSH
9004: LD_INT 8
9006: PPUSH
9007: LD_INT 2
9009: PPUSH
9010: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
9014: LD_INT 60
9016: PPUSH
9017: LD_INT 8
9019: PPUSH
9020: LD_INT 2
9022: PPUSH
9023: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
9027: LD_INT 61
9029: PPUSH
9030: LD_INT 8
9032: PPUSH
9033: LD_INT 2
9035: PPUSH
9036: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
9040: LD_INT 62
9042: PPUSH
9043: LD_INT 8
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 322
// end ; end ;
9053: LD_VAR 0 1
9057: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9058: LD_INT 0
9060: PPUSH
9061: PPUSH
// for i in charactersList do
9062: LD_ADDR_VAR 0 4
9066: PUSH
9067: LD_VAR 0 1
9071: PUSH
9072: FOR_IN
9073: IFFALSE 9091
// SaveCharacters ( i , ident ) ;
9075: LD_VAR 0 4
9079: PPUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 38
9089: GO 9072
9091: POP
9092: POP
// end ; end_of_file
9093: LD_VAR 0 3
9097: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
9098: LD_EXP 39
9102: PUSH
9103: LD_INT 1
9105: EQUAL
9106: IFFALSE 10084
9108: GO 9110
9110: DISABLE
9111: LD_INT 0
9113: PPUSH
9114: PPUSH
9115: PPUSH
// begin m1 := false ;
9116: LD_ADDR_VAR 0 1
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// m2 := false ;
9124: LD_ADDR_VAR 0 2
9128: PUSH
9129: LD_INT 0
9131: ST_TO_ADDR
// m3 := false ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: LD_INT 0
9139: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
9140: LD_INT 22
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 1
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 23
9162: PUSH
9163: LD_INT 1
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 50
9172: PUSH
9173: EMPTY
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PPUSH
9182: CALL_OW 69
9186: PPUSH
9187: CALL 36104 0 1
9191: PUSH
9192: LD_INT 5
9194: LESS
9195: IFFALSE 9206
// begin YouLost ( Troops ) ;
9197: LD_STRING Troops
9199: PPUSH
9200: CALL_OW 104
// exit ;
9204: GO 10084
// end ; DialogueOn ;
9206: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9210: LD_EXP 1
9214: PPUSH
9215: LD_STRING D9b-JMM-1
9217: PPUSH
9218: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9222: LD_EXP 16
9226: PPUSH
9227: LD_STRING D9b-Pow-1
9229: PPUSH
9230: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9234: LD_EXP 1
9238: PPUSH
9239: LD_STRING D9b-JMM-2
9241: PPUSH
9242: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9246: LD_EXP 16
9250: PPUSH
9251: LD_STRING D9b-Pow-2
9253: PPUSH
9254: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9258: LD_EXP 1
9262: PPUSH
9263: LD_STRING D9b-JMM-3
9265: PPUSH
9266: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9270: LD_EXP 16
9274: PPUSH
9275: LD_STRING D9b-Pow-3
9277: PPUSH
9278: CALL_OW 94
// if tick <= 60 60$00 then
9282: LD_OWVAR 1
9286: PUSH
9287: LD_INT 126000
9289: LESSEQUAL
9290: IFFALSE 9299
// SetAchievement ( ACH_ASPEED_13 ) ;
9292: LD_STRING ACH_ASPEED_13
9294: PPUSH
9295: CALL_OW 543
// if burlakStatus = 1 then
9299: LD_EXP 29
9303: PUSH
9304: LD_INT 1
9306: EQUAL
9307: IFFALSE 9329
// begin m1 := true ;
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9317: LD_STRING Burlak
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 101
// end else
9327: GO 9340
// begin AddMedal ( Burlak , - 1 ) ;
9329: LD_STRING Burlak
9331: PPUSH
9332: LD_INT 1
9334: NEG
9335: PPUSH
9336: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9340: LD_EXP 2
9344: PPUSH
9345: CALL_OW 302
9349: IFFALSE 9371
// begin m2 := true ;
9351: LD_ADDR_VAR 0 2
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9359: LD_STRING Stevens
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 101
// end else
9369: GO 9382
// begin AddMedal ( Stevens , - 1 ) ;
9371: LD_STRING Stevens
9373: PPUSH
9374: LD_INT 1
9376: NEG
9377: PPUSH
9378: CALL_OW 101
// end ; if radarOnSpot = 1 then
9382: LD_EXP 31
9386: PUSH
9387: LD_INT 1
9389: EQUAL
9390: IFFALSE 9412
// begin m3 := true ;
9392: LD_ADDR_VAR 0 3
9396: PUSH
9397: LD_INT 1
9399: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9400: LD_STRING Observation
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL_OW 101
// end else
9410: GO 9423
// begin AddMedal ( Observation , - 1 ) ;
9412: LD_STRING Observation
9414: PPUSH
9415: LD_INT 1
9417: NEG
9418: PPUSH
9419: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9423: LD_VAR 0 1
9427: IFFALSE 9435
9429: PUSH
9430: LD_VAR 0 2
9434: AND
9435: IFFALSE 9443
9437: PUSH
9438: LD_VAR 0 3
9442: AND
9443: IFFALSE 9455
9445: PUSH
9446: LD_OWVAR 67
9450: PUSH
9451: LD_INT 3
9453: GREATEREQUAL
9454: AND
9455: IFFALSE 9467
// SetAchievementEX ( ACH_AMER , 13 ) ;
9457: LD_STRING ACH_AMER
9459: PPUSH
9460: LD_INT 13
9462: PPUSH
9463: CALL_OW 564
// GiveMedals ( MAIN ) ;
9467: LD_STRING MAIN
9469: PPUSH
9470: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9474: LD_EXP 29
9478: PPUSH
9479: LD_STRING 13_BurlakStatus_1
9481: PPUSH
9482: CALL_OW 39
// if IsLive ( Stevens ) then
9486: LD_EXP 2
9490: PPUSH
9491: CALL_OW 300
9495: IFFALSE 9509
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9497: LD_INT 1
9499: PPUSH
9500: LD_STRING 13_StevensStatus_1
9502: PPUSH
9503: CALL_OW 39
9507: GO 9519
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9509: LD_INT 0
9511: PPUSH
9512: LD_STRING 13_StevensStatus_1
9514: PPUSH
9515: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9519: LD_INT 22
9521: PUSH
9522: LD_INT 1
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 21
9531: PUSH
9532: LD_INT 1
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 25
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 2
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 25
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 25
9574: PUSH
9575: LD_INT 4
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 25
9584: PUSH
9585: LD_INT 5
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 25
9594: PUSH
9595: LD_INT 8
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL_OW 69
9620: PPUSH
9621: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9625: LD_EXP 1
9629: PPUSH
9630: LD_EXP 35
9634: PUSH
9635: LD_STRING JMM
9637: STR
9638: PPUSH
9639: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9643: LD_EXP 8
9647: PPUSH
9648: LD_EXP 35
9652: PUSH
9653: LD_STRING Brown
9655: STR
9656: PPUSH
9657: CALL 9058 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9661: LD_EXP 4
9665: PPUSH
9666: LD_EXP 35
9670: PUSH
9671: LD_STRING Donaldson
9673: STR
9674: PPUSH
9675: CALL 9058 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9679: LD_EXP 5
9683: PPUSH
9684: LD_EXP 35
9688: PUSH
9689: LD_STRING Bobby
9691: STR
9692: PPUSH
9693: CALL 9058 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9697: LD_EXP 6
9701: PPUSH
9702: LD_EXP 35
9706: PUSH
9707: LD_STRING Cyrus
9709: STR
9710: PPUSH
9711: CALL 9058 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9715: LD_EXP 3
9719: PPUSH
9720: LD_EXP 35
9724: PUSH
9725: LD_STRING Lisa
9727: STR
9728: PPUSH
9729: CALL 9058 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9733: LD_EXP 13
9737: PPUSH
9738: LD_EXP 35
9742: PUSH
9743: LD_STRING Frank
9745: STR
9746: PPUSH
9747: CALL 9058 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9751: LD_EXP 14
9755: PPUSH
9756: LD_EXP 35
9760: PUSH
9761: LD_STRING Kikuchi
9763: STR
9764: PPUSH
9765: CALL 9058 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9769: LD_EXP 10
9773: PPUSH
9774: LD_EXP 35
9778: PUSH
9779: LD_STRING Houten
9781: STR
9782: PPUSH
9783: CALL 9058 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9787: LD_EXP 12
9791: PPUSH
9792: LD_EXP 35
9796: PUSH
9797: LD_STRING Gary
9799: STR
9800: PPUSH
9801: CALL 9058 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9805: LD_EXP 11
9809: PPUSH
9810: LD_EXP 35
9814: PUSH
9815: LD_STRING Cornell
9817: STR
9818: PPUSH
9819: CALL 9058 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9823: LD_EXP 7
9827: PPUSH
9828: LD_EXP 35
9832: PUSH
9833: LD_STRING Denis
9835: STR
9836: PPUSH
9837: CALL 9058 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9841: LD_EXP 9
9845: PPUSH
9846: LD_EXP 35
9850: PUSH
9851: LD_STRING Gladstone
9853: STR
9854: PPUSH
9855: CALL 9058 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9859: LD_EXP 2
9863: PPUSH
9864: LD_EXP 35
9868: PUSH
9869: LD_STRING Stevens
9871: STR
9872: PPUSH
9873: CALL 9058 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9877: LD_INT 50
9879: PUSH
9880: EMPTY
9881: LIST
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 21
9895: PUSH
9896: LD_INT 1
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 2
9905: PUSH
9906: LD_INT 25
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 25
9918: PUSH
9919: LD_INT 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 3
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 25
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 25
9948: PUSH
9949: LD_INT 5
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 25
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: PPUSH
9981: CALL_OW 69
9985: PUSH
9986: LD_EXP 1
9990: PUSH
9991: LD_EXP 8
9995: PUSH
9996: LD_EXP 4
10000: PUSH
10001: LD_EXP 5
10005: PUSH
10006: LD_EXP 6
10010: PUSH
10011: LD_EXP 3
10015: PUSH
10016: LD_EXP 13
10020: PUSH
10021: LD_EXP 9
10025: PUSH
10026: LD_EXP 14
10030: PUSH
10031: LD_EXP 7
10035: PUSH
10036: LD_EXP 10
10040: PUSH
10041: LD_EXP 12
10045: PUSH
10046: LD_EXP 11
10050: PUSH
10051: LD_EXP 2
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: DIFF
10072: PPUSH
10073: LD_STRING 13_other_survivors
10075: PPUSH
10076: CALL_OW 38
// YouWin ;
10080: CALL_OW 103
// end ; end_of_file
10084: PPOPN 3
10086: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
10087: LD_EXP 33
10091: PUSH
10092: LD_INT 2
10094: EQUAL
10095: IFFALSE 10114
10097: PUSH
10098: LD_INT 34
10100: PUSH
10101: LD_INT 8
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 69
10112: NOT
10113: AND
10114: IFFALSE 10132
10116: PUSH
10117: LD_INT 25
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 321
10127: PUSH
10128: LD_INT 1
10130: EQUAL
10131: AND
10132: IFFALSE 10277
10134: GO 10136
10136: DISABLE
10137: LD_INT 0
10139: PPUSH
10140: PPUSH
10141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10142: LD_ADDR_VAR 0 2
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_INT 1
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 21
10159: PUSH
10160: LD_INT 3
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: LD_INT 30
10172: PUSH
10173: LD_INT 0
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 30
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 69
10204: ST_TO_ADDR
// for i in tmp do
10205: LD_ADDR_VAR 0 1
10209: PUSH
10210: LD_VAR 0 2
10214: PUSH
10215: FOR_IN
10216: IFFALSE 10249
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10218: LD_ADDR_VAR 0 3
10222: PUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 274
10237: PPUSH
10238: LD_INT 3
10240: PPUSH
10241: CALL_OW 275
10245: PLUS
10246: ST_TO_ADDR
10247: GO 10215
10249: POP
10250: POP
// if yourSiberite < CostOfWeapon ( us_siberium_rocket ) [ 3 ] then
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 8
10258: PPUSH
10259: CALL_OW 451
10263: PUSH
10264: LD_INT 3
10266: ARRAY
10267: LESS
10268: IFFALSE 10277
// YouLost ( siberite ) ;
10270: LD_STRING siberite
10272: PPUSH
10273: CALL_OW 104
// end ; end_of_file
10277: PPOPN 3
10279: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10280: LD_INT 22
10282: PUSH
10283: LD_INT 8
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 21
10292: PUSH
10293: LD_INT 1
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: PUSH
10309: LD_INT 6
10311: LESS
10312: IFFALSE 10322
10314: GO 10316
10316: DISABLE
// begin enable ;
10317: ENABLE
// PrepareArabianAttack ;
10318: CALL 4134 0 0
// end ;
10322: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10323: LD_EXP 36
10327: PUSH
10328: LD_INT 1
10330: EQUAL
10331: IFFALSE 10367
10333: PUSH
10334: LD_INT 22
10336: PUSH
10337: LD_INT 8
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 21
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 69
10362: PUSH
10363: LD_INT 6
10365: LESS
10366: AND
10367: IFFALSE 10394
10369: GO 10371
10371: DISABLE
// begin wait ( 4 4$00 ) ;
10372: LD_INT 8400
10374: PPUSH
10375: CALL_OW 67
// PrepareRussianAttack ;
10379: CALL 3357 0 0
// wait ( 12 12$00 ) ;
10383: LD_INT 25200
10385: PPUSH
10386: CALL_OW 67
// PrepareRussianAttack ;
10390: CALL 3357 0 0
// end ;
10394: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10395: LD_INT 0
10397: PPUSH
10398: PPUSH
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10406: LD_ADDR_VAR 0 8
10410: PUSH
10411: LD_INT 22
10413: PUSH
10414: LD_INT 8
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 120
10423: PUSH
10424: LD_INT 10
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PPUSH
10435: CALL_OW 69
10439: ST_TO_ADDR
// if not units then
10440: LD_VAR 0 8
10444: NOT
10445: IFFALSE 10449
// exit ;
10447: GO 10755
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10449: LD_ADDR_VAR 0 4
10453: PUSH
10454: LD_INT 80
10456: PUSH
10457: LD_INT 60
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 54
10466: PUSH
10467: LD_INT 57
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 55
10476: PUSH
10477: LD_INT 74
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 61
10486: PUSH
10487: LD_INT 85
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10500: LD_ADDR_VAR 0 5
10504: PUSH
10505: LD_INT 93
10507: PUSH
10508: LD_INT 99
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 85
10517: PUSH
10518: LD_INT 99
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10529: LD_INT 35
10531: PPUSH
10532: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10536: LD_ADDR_VAR 0 6
10540: PUSH
10541: LD_VAR 0 8
10545: PPUSH
10546: LD_INT 21
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 72
10560: ST_TO_ADDR
// if vehicles then
10561: LD_VAR 0 6
10565: IFFALSE 10581
// AgressiveMove ( vehicles , path ) ;
10567: LD_VAR 0 6
10571: PPUSH
10572: LD_VAR 0 4
10576: PPUSH
10577: CALL 74846 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10581: LD_ADDR_VAR 0 7
10585: PUSH
10586: LD_VAR 0 8
10590: PPUSH
10591: LD_INT 23
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 21
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 72
10619: ST_TO_ADDR
// if infantry then
10620: LD_VAR 0 7
10624: IFFALSE 10640
// AgressiveMove ( infantry , path2 ) ;
10626: LD_VAR 0 7
10630: PPUSH
10631: LD_VAR 0 5
10635: PPUSH
10636: CALL 74846 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10640: LD_ADDR_VAR 0 9
10644: PUSH
10645: LD_VAR 0 8
10649: PPUSH
10650: LD_INT 23
10652: PUSH
10653: LD_INT 0
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 72
10678: ST_TO_ADDR
// if apes then
10679: LD_VAR 0 9
10683: IFFALSE 10727
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10685: LD_VAR 0 9
10689: PUSH
10690: LD_INT 1
10692: ARRAY
10693: PPUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 9
10713: PUSH
10714: LD_INT 1
10716: ARRAY
10717: PPUSH
10718: CALL_OW 74
10722: PPUSH
10723: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10727: LD_ADDR_VAR 0 8
10731: PUSH
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_INT 50
10739: PUSH
10740: EMPTY
10741: LIST
10742: PPUSH
10743: CALL_OW 72
10747: ST_TO_ADDR
// until not units ;
10748: LD_VAR 0 8
10752: NOT
10753: IFFALSE 10529
// end ;
10755: LD_VAR 0 1
10759: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10760: LD_INT 0
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10768: LD_ADDR_VAR 0 6
10772: PUSH
10773: LD_INT 22
10775: PUSH
10776: LD_INT 3
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 120
10785: PUSH
10786: LD_INT 10
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: ST_TO_ADDR
// if not units then
10802: LD_VAR 0 6
10806: NOT
10807: IFFALSE 10811
// exit ;
10809: GO 10942
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10811: LD_ADDR_VAR 0 4
10815: PUSH
10816: LD_INT 80
10818: PUSH
10819: LD_INT 60
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 54
10828: PUSH
10829: LD_INT 57
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 55
10838: PUSH
10839: LD_INT 74
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 61
10848: PUSH
10849: LD_INT 85
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10862: LD_INT 35
10864: PPUSH
10865: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10869: LD_ADDR_VAR 0 5
10873: PUSH
10874: LD_VAR 0 6
10878: PPUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 72
10893: ST_TO_ADDR
// if vehicles then
10894: LD_VAR 0 5
10898: IFFALSE 10914
// AgressiveMove ( vehicles , path ) ;
10900: LD_VAR 0 5
10904: PPUSH
10905: LD_VAR 0 4
10909: PPUSH
10910: CALL 74846 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10914: LD_ADDR_VAR 0 6
10918: PUSH
10919: LD_VAR 0 6
10923: PPUSH
10924: LD_INT 50
10926: PUSH
10927: EMPTY
10928: LIST
10929: PPUSH
10930: CALL_OW 72
10934: ST_TO_ADDR
// until not units ;
10935: LD_VAR 0 6
10939: NOT
10940: IFFALSE 10862
// end ; end_of_file
10942: LD_VAR 0 1
10946: RET
// every 0 0$01 do var i , cratesSpawned ;
10947: GO 10949
10949: DISABLE
10950: LD_INT 0
10952: PPUSH
10953: PPUSH
// begin cratesSpawned := 0 ;
10954: LD_ADDR_VAR 0 2
10958: PUSH
10959: LD_INT 0
10961: ST_TO_ADDR
// for i := 1 to 6 do
10962: LD_ADDR_VAR 0 1
10966: PUSH
10967: DOUBLE
10968: LD_INT 1
10970: DEC
10971: ST_TO_ADDR
10972: LD_INT 6
10974: PUSH
10975: FOR_TO
10976: IFFALSE 11001
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10978: LD_INT 2
10980: PPUSH
10981: LD_INT 5
10983: PPUSH
10984: CALL_OW 12
10988: PPUSH
10989: LD_INT 17
10991: PPUSH
10992: LD_INT 0
10994: PPUSH
10995: CALL_OW 55
10999: GO 10975
11001: POP
11002: POP
// wait ( 0 0$20 ) ;
11003: LD_INT 700
11005: PPUSH
11006: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
11010: LD_INT 280
11012: PPUSH
11013: CALL_OW 67
// if cratesSpawned < 12 then
11017: LD_VAR 0 2
11021: PUSH
11022: LD_INT 12
11024: LESS
11025: IFFALSE 11077
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
11027: LD_INT 105
11029: PPUSH
11030: LD_INT 350
11032: PPUSH
11033: CALL_OW 12
11037: PPUSH
11038: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11042: LD_INT 3
11044: PPUSH
11045: LD_INT 5
11047: PPUSH
11048: CALL_OW 12
11052: PPUSH
11053: LD_INT 13
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_VAR 0 2
11072: PUSH
11073: LD_INT 1
11075: PLUS
11076: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
11077: LD_VAR 0 2
11081: PUSH
11082: LD_INT 12
11084: GREATEREQUAL
11085: IFFALSE 11097
11087: PUSH
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 32
11095: LESS
11096: AND
11097: IFFALSE 11149
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
11099: LD_INT 420
11101: PPUSH
11102: LD_INT 700
11104: PPUSH
11105: CALL_OW 12
11109: PPUSH
11110: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11114: LD_INT 3
11116: PPUSH
11117: LD_INT 5
11119: PPUSH
11120: CALL_OW 12
11124: PPUSH
11125: LD_INT 13
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11135: LD_ADDR_VAR 0 2
11139: PUSH
11140: LD_VAR 0 2
11144: PUSH
11145: LD_INT 1
11147: PLUS
11148: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
11149: LD_VAR 0 2
11153: PUSH
11154: LD_INT 32
11156: GREATEREQUAL
11157: IFFALSE 11231
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11159: LD_INT 13
11161: PPUSH
11162: CALL_OW 435
11166: PUSH
11167: LD_INT 14
11169: LESS
11170: IFFALSE 11181
// wait ( 0 0$20 ) else
11172: LD_INT 700
11174: PPUSH
11175: CALL_OW 67
11179: GO 11196
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
11181: LD_INT 1750
11183: PPUSH
11184: LD_INT 3150
11186: PPUSH
11187: CALL_OW 12
11191: PPUSH
11192: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
11196: LD_INT 2
11198: PPUSH
11199: LD_INT 5
11201: PPUSH
11202: CALL_OW 12
11206: PPUSH
11207: LD_INT 13
11209: PPUSH
11210: LD_INT 1
11212: PPUSH
11213: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_VAR 0 2
11226: PUSH
11227: LD_INT 1
11229: PLUS
11230: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11231: LD_VAR 0 2
11235: PUSH
11236: LD_INT 120
11238: GREATEREQUAL
11239: IFFALSE 11313
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11241: LD_INT 13
11243: PPUSH
11244: CALL_OW 435
11248: PUSH
11249: LD_INT 14
11251: LESS
11252: IFFALSE 11263
// wait ( 0 0$40 ) else
11254: LD_INT 1400
11256: PPUSH
11257: CALL_OW 67
11261: GO 11278
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11263: LD_INT 2450
11265: PPUSH
11266: LD_INT 3850
11268: PPUSH
11269: CALL_OW 12
11273: PPUSH
11274: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11278: LD_INT 1
11280: PPUSH
11281: LD_INT 5
11283: PPUSH
11284: CALL_OW 12
11288: PPUSH
11289: LD_INT 13
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11299: LD_ADDR_VAR 0 2
11303: PUSH
11304: LD_VAR 0 2
11308: PUSH
11309: LD_INT 1
11311: PLUS
11312: ST_TO_ADDR
// end ; until false ;
11313: LD_INT 0
11315: IFFALSE 11010
// end ; end_of_file end_of_file
11317: PPOPN 2
11319: END
// export globalGameSaveCounter ; every 0 0$1 do
11320: GO 11322
11322: DISABLE
// begin enable ;
11323: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11324: LD_STRING updateTimer(
11326: PUSH
11327: LD_OWVAR 1
11331: STR
11332: PUSH
11333: LD_STRING );
11335: STR
11336: PPUSH
11337: CALL_OW 559
// end ;
11341: END
// every 0 0$1 do
11342: GO 11344
11344: DISABLE
// begin globalGameSaveCounter := 0 ;
11345: LD_ADDR_EXP 47
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11353: LD_STRING setGameSaveCounter(0)
11355: PPUSH
11356: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11360: LD_STRING initStreamRollete();
11362: PPUSH
11363: CALL_OW 559
// InitStreamMode ;
11367: CALL 12719 0 0
// DefineStreamItems ( false ) ;
11371: LD_INT 0
11373: PPUSH
11374: CALL 13183 0 1
// end ;
11378: END
// export function SOS_MapStart ( ) ; begin
11379: LD_INT 0
11381: PPUSH
// if streamModeActive then
11382: LD_EXP 48
11386: IFFALSE 11395
// DefineStreamItems ( true ) ;
11388: LD_INT 1
11390: PPUSH
11391: CALL 13183 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
11395: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
11397: PPUSH
11398: CALL_OW 559
// UpdateLuaVariables ( ) ;
11402: CALL 11419 0 0
// UpdateFactoryWaypoints ( ) ;
11406: CALL 26305 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11410: CALL 26557 0 0
// end ;
11414: LD_VAR 0 1
11418: RET
// function UpdateLuaVariables ( ) ; begin
11419: LD_INT 0
11421: PPUSH
// if globalGameSaveCounter then
11422: LD_EXP 47
11426: IFFALSE 11460
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11428: LD_ADDR_EXP 47
11432: PUSH
11433: LD_EXP 47
11437: PPUSH
11438: CALL 73453 0 1
11442: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11443: LD_STRING setGameSaveCounter(
11445: PUSH
11446: LD_EXP 47
11450: STR
11451: PUSH
11452: LD_STRING )
11454: STR
11455: PPUSH
11456: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11460: LD_STRING setGameDifficulty(
11462: PUSH
11463: LD_OWVAR 67
11467: STR
11468: PUSH
11469: LD_STRING )
11471: STR
11472: PPUSH
11473: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11477: LD_STRING displayDifficulty(
11479: PUSH
11480: LD_OWVAR 67
11484: STR
11485: PUSH
11486: LD_STRING )
11488: STR
11489: PPUSH
11490: CALL_OW 559
// end ;
11494: LD_VAR 0 1
11498: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11499: LD_INT 0
11501: PPUSH
// if p2 = stream_mode then
11502: LD_VAR 0 2
11506: PUSH
11507: LD_INT 100
11509: EQUAL
11510: IFFALSE 12513
// begin if not StreamModeActive then
11512: LD_EXP 48
11516: NOT
11517: IFFALSE 11527
// StreamModeActive := true ;
11519: LD_ADDR_EXP 48
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 0 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 0
11534: EQUAL
11535: IFFALSE 11541
// InitStreamMode ;
11537: CALL 12719 0 0
// if p3 = 1 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 1
11548: EQUAL
11549: IFFALSE 11559
// sRocket := true ;
11551: LD_ADDR_EXP 53
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 2 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 2
11566: EQUAL
11567: IFFALSE 11577
// sSpeed := true ;
11569: LD_ADDR_EXP 52
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 3 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 3
11584: EQUAL
11585: IFFALSE 11595
// sEngine := true ;
11587: LD_ADDR_EXP 54
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 4 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 4
11602: EQUAL
11603: IFFALSE 11613
// sSpec := true ;
11605: LD_ADDR_EXP 51
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 5 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 5
11620: EQUAL
11621: IFFALSE 11631
// sLevel := true ;
11623: LD_ADDR_EXP 55
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 6 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 6
11638: EQUAL
11639: IFFALSE 11649
// sArmoury := true ;
11641: LD_ADDR_EXP 56
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 7 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 7
11656: EQUAL
11657: IFFALSE 11667
// sRadar := true ;
11659: LD_ADDR_EXP 57
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 8 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 8
11674: EQUAL
11675: IFFALSE 11685
// sBunker := true ;
11677: LD_ADDR_EXP 58
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 9 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 9
11692: EQUAL
11693: IFFALSE 11703
// sHack := true ;
11695: LD_ADDR_EXP 59
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 10 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 10
11710: EQUAL
11711: IFFALSE 11721
// sFire := true ;
11713: LD_ADDR_EXP 60
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 11 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 11
11728: EQUAL
11729: IFFALSE 11739
// sRefresh := true ;
11731: LD_ADDR_EXP 61
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 12 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 12
11746: EQUAL
11747: IFFALSE 11757
// sExp := true ;
11749: LD_ADDR_EXP 62
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 13 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 13
11764: EQUAL
11765: IFFALSE 11775
// sDepot := true ;
11767: LD_ADDR_EXP 63
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 14 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 14
11782: EQUAL
11783: IFFALSE 11793
// sFlag := true ;
11785: LD_ADDR_EXP 64
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 15 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 15
11800: EQUAL
11801: IFFALSE 11811
// sKamikadze := true ;
11803: LD_ADDR_EXP 72
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 16 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 16
11818: EQUAL
11819: IFFALSE 11829
// sTroll := true ;
11821: LD_ADDR_EXP 73
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 17 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 17
11836: EQUAL
11837: IFFALSE 11847
// sSlow := true ;
11839: LD_ADDR_EXP 74
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 18 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 18
11854: EQUAL
11855: IFFALSE 11865
// sLack := true ;
11857: LD_ADDR_EXP 75
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 19 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 19
11872: EQUAL
11873: IFFALSE 11883
// sTank := true ;
11875: LD_ADDR_EXP 77
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 20 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 20
11890: EQUAL
11891: IFFALSE 11901
// sRemote := true ;
11893: LD_ADDR_EXP 78
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 21 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 21
11908: EQUAL
11909: IFFALSE 11919
// sPowell := true ;
11911: LD_ADDR_EXP 79
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// if p3 = 22 then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 22
11926: EQUAL
11927: IFFALSE 11937
// sTeleport := true ;
11929: LD_ADDR_EXP 82
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// if p3 = 23 then
11937: LD_VAR 0 3
11941: PUSH
11942: LD_INT 23
11944: EQUAL
11945: IFFALSE 11955
// sOilTower := true ;
11947: LD_ADDR_EXP 84
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// if p3 = 24 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_INT 24
11962: EQUAL
11963: IFFALSE 11973
// sShovel := true ;
11965: LD_ADDR_EXP 85
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// if p3 = 25 then
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 25
11980: EQUAL
11981: IFFALSE 11991
// sSheik := true ;
11983: LD_ADDR_EXP 86
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// if p3 = 26 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 26
11998: EQUAL
11999: IFFALSE 12009
// sEarthquake := true ;
12001: LD_ADDR_EXP 88
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// if p3 = 27 then
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 27
12016: EQUAL
12017: IFFALSE 12027
// sAI := true ;
12019: LD_ADDR_EXP 89
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// if p3 = 28 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 28
12034: EQUAL
12035: IFFALSE 12045
// sCargo := true ;
12037: LD_ADDR_EXP 92
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// if p3 = 29 then
12045: LD_VAR 0 3
12049: PUSH
12050: LD_INT 29
12052: EQUAL
12053: IFFALSE 12063
// sDLaser := true ;
12055: LD_ADDR_EXP 93
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// if p3 = 30 then
12063: LD_VAR 0 3
12067: PUSH
12068: LD_INT 30
12070: EQUAL
12071: IFFALSE 12081
// sExchange := true ;
12073: LD_ADDR_EXP 94
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// if p3 = 31 then
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 31
12088: EQUAL
12089: IFFALSE 12099
// sFac := true ;
12091: LD_ADDR_EXP 95
12095: PUSH
12096: LD_INT 1
12098: ST_TO_ADDR
// if p3 = 32 then
12099: LD_VAR 0 3
12103: PUSH
12104: LD_INT 32
12106: EQUAL
12107: IFFALSE 12117
// sPower := true ;
12109: LD_ADDR_EXP 96
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// if p3 = 33 then
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 33
12124: EQUAL
12125: IFFALSE 12135
// sRandom := true ;
12127: LD_ADDR_EXP 97
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// if p3 = 34 then
12135: LD_VAR 0 3
12139: PUSH
12140: LD_INT 34
12142: EQUAL
12143: IFFALSE 12153
// sShield := true ;
12145: LD_ADDR_EXP 98
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// if p3 = 35 then
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 35
12160: EQUAL
12161: IFFALSE 12171
// sTime := true ;
12163: LD_ADDR_EXP 99
12167: PUSH
12168: LD_INT 1
12170: ST_TO_ADDR
// if p3 = 36 then
12171: LD_VAR 0 3
12175: PUSH
12176: LD_INT 36
12178: EQUAL
12179: IFFALSE 12189
// sTools := true ;
12181: LD_ADDR_EXP 100
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// if p3 = 101 then
12189: LD_VAR 0 3
12193: PUSH
12194: LD_INT 101
12196: EQUAL
12197: IFFALSE 12207
// sSold := true ;
12199: LD_ADDR_EXP 65
12203: PUSH
12204: LD_INT 1
12206: ST_TO_ADDR
// if p3 = 102 then
12207: LD_VAR 0 3
12211: PUSH
12212: LD_INT 102
12214: EQUAL
12215: IFFALSE 12225
// sDiff := true ;
12217: LD_ADDR_EXP 66
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// if p3 = 103 then
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 103
12232: EQUAL
12233: IFFALSE 12243
// sFog := true ;
12235: LD_ADDR_EXP 69
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
// if p3 = 104 then
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 104
12250: EQUAL
12251: IFFALSE 12261
// sReset := true ;
12253: LD_ADDR_EXP 70
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// if p3 = 105 then
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 105
12268: EQUAL
12269: IFFALSE 12279
// sSun := true ;
12271: LD_ADDR_EXP 71
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// if p3 = 106 then
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 106
12286: EQUAL
12287: IFFALSE 12297
// sTiger := true ;
12289: LD_ADDR_EXP 67
12293: PUSH
12294: LD_INT 1
12296: ST_TO_ADDR
// if p3 = 107 then
12297: LD_VAR 0 3
12301: PUSH
12302: LD_INT 107
12304: EQUAL
12305: IFFALSE 12315
// sBomb := true ;
12307: LD_ADDR_EXP 68
12311: PUSH
12312: LD_INT 1
12314: ST_TO_ADDR
// if p3 = 108 then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_INT 108
12322: EQUAL
12323: IFFALSE 12333
// sWound := true ;
12325: LD_ADDR_EXP 76
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// if p3 = 109 then
12333: LD_VAR 0 3
12337: PUSH
12338: LD_INT 109
12340: EQUAL
12341: IFFALSE 12351
// sBetray := true ;
12343: LD_ADDR_EXP 80
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// if p3 = 110 then
12351: LD_VAR 0 3
12355: PUSH
12356: LD_INT 110
12358: EQUAL
12359: IFFALSE 12369
// sContamin := true ;
12361: LD_ADDR_EXP 81
12365: PUSH
12366: LD_INT 1
12368: ST_TO_ADDR
// if p3 = 111 then
12369: LD_VAR 0 3
12373: PUSH
12374: LD_INT 111
12376: EQUAL
12377: IFFALSE 12387
// sOil := true ;
12379: LD_ADDR_EXP 83
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// if p3 = 112 then
12387: LD_VAR 0 3
12391: PUSH
12392: LD_INT 112
12394: EQUAL
12395: IFFALSE 12405
// sStu := true ;
12397: LD_ADDR_EXP 87
12401: PUSH
12402: LD_INT 1
12404: ST_TO_ADDR
// if p3 = 113 then
12405: LD_VAR 0 3
12409: PUSH
12410: LD_INT 113
12412: EQUAL
12413: IFFALSE 12423
// sBazooka := true ;
12415: LD_ADDR_EXP 90
12419: PUSH
12420: LD_INT 1
12422: ST_TO_ADDR
// if p3 = 114 then
12423: LD_VAR 0 3
12427: PUSH
12428: LD_INT 114
12430: EQUAL
12431: IFFALSE 12441
// sMortar := true ;
12433: LD_ADDR_EXP 91
12437: PUSH
12438: LD_INT 1
12440: ST_TO_ADDR
// if p3 = 115 then
12441: LD_VAR 0 3
12445: PUSH
12446: LD_INT 115
12448: EQUAL
12449: IFFALSE 12459
// sRanger := true ;
12451: LD_ADDR_EXP 101
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// if p3 = 116 then
12459: LD_VAR 0 3
12463: PUSH
12464: LD_INT 116
12466: EQUAL
12467: IFFALSE 12477
// sComputer := true ;
12469: LD_ADDR_EXP 102
12473: PUSH
12474: LD_INT 1
12476: ST_TO_ADDR
// if p3 = 117 then
12477: LD_VAR 0 3
12481: PUSH
12482: LD_INT 117
12484: EQUAL
12485: IFFALSE 12495
// s30 := true ;
12487: LD_ADDR_EXP 103
12491: PUSH
12492: LD_INT 1
12494: ST_TO_ADDR
// if p3 = 118 then
12495: LD_VAR 0 3
12499: PUSH
12500: LD_INT 118
12502: EQUAL
12503: IFFALSE 12513
// s60 := true ;
12505: LD_ADDR_EXP 104
12509: PUSH
12510: LD_INT 1
12512: ST_TO_ADDR
// end ; if p2 = hack_mode then
12513: LD_VAR 0 2
12517: PUSH
12518: LD_INT 101
12520: EQUAL
12521: IFFALSE 12649
// begin case p3 of 1 :
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 1
12530: DOUBLE
12531: EQUAL
12532: IFTRUE 12536
12534: GO 12543
12536: POP
// hHackUnlimitedResources ; 2 :
12537: CALL 24912 0 0
12541: GO 12649
12543: LD_INT 2
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12558
12551: POP
// hHackSetLevel10 ; 3 :
12552: CALL 25045 0 0
12556: GO 12649
12558: LD_INT 3
12560: DOUBLE
12561: EQUAL
12562: IFTRUE 12566
12564: GO 12573
12566: POP
// hHackSetLevel10YourUnits ; 4 :
12567: CALL 25130 0 0
12571: GO 12649
12573: LD_INT 4
12575: DOUBLE
12576: EQUAL
12577: IFTRUE 12581
12579: GO 12588
12581: POP
// hHackInvincible ; 5 :
12582: CALL 25578 0 0
12586: GO 12649
12588: LD_INT 5
12590: DOUBLE
12591: EQUAL
12592: IFTRUE 12596
12594: GO 12603
12596: POP
// hHackInvisible ; 6 :
12597: CALL 25689 0 0
12601: GO 12649
12603: LD_INT 6
12605: DOUBLE
12606: EQUAL
12607: IFTRUE 12611
12609: GO 12618
12611: POP
// hHackChangeYourSide ; 7 :
12612: CALL 25746 0 0
12616: GO 12649
12618: LD_INT 7
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12633
12626: POP
// hHackChangeUnitSide ; 8 :
12627: CALL 25788 0 0
12631: GO 12649
12633: LD_INT 8
12635: DOUBLE
12636: EQUAL
12637: IFTRUE 12641
12639: GO 12648
12641: POP
// hHackFog ; end ;
12642: CALL 25889 0 0
12646: GO 12649
12648: POP
// end ; if p2 = game_save_mode then
12649: LD_VAR 0 2
12653: PUSH
12654: LD_INT 102
12656: EQUAL
12657: IFFALSE 12714
// begin if p3 = 1 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 1
12666: EQUAL
12667: IFFALSE 12679
// globalGameSaveCounter := p4 ;
12669: LD_ADDR_EXP 47
12673: PUSH
12674: LD_VAR 0 4
12678: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12679: LD_VAR 0 3
12683: PUSH
12684: LD_INT 2
12686: EQUAL
12687: IFFALSE 12695
12689: PUSH
12690: LD_EXP 47
12694: AND
12695: IFFALSE 12714
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12697: LD_STRING setGameSaveCounter(
12699: PUSH
12700: LD_EXP 47
12704: STR
12705: PUSH
12706: LD_STRING )
12708: STR
12709: PPUSH
12710: CALL_OW 559
// end ; end ;
12714: LD_VAR 0 7
12718: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12719: LD_INT 0
12721: PPUSH
// streamModeActive := false ;
12722: LD_ADDR_EXP 48
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// normalCounter := 36 ;
12730: LD_ADDR_EXP 49
12734: PUSH
12735: LD_INT 36
12737: ST_TO_ADDR
// hardcoreCounter := 18 ;
12738: LD_ADDR_EXP 50
12742: PUSH
12743: LD_INT 18
12745: ST_TO_ADDR
// sRocket := false ;
12746: LD_ADDR_EXP 53
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sSpeed := false ;
12754: LD_ADDR_EXP 52
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sEngine := false ;
12762: LD_ADDR_EXP 54
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sSpec := false ;
12770: LD_ADDR_EXP 51
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sLevel := false ;
12778: LD_ADDR_EXP 55
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sArmoury := false ;
12786: LD_ADDR_EXP 56
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sRadar := false ;
12794: LD_ADDR_EXP 57
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sBunker := false ;
12802: LD_ADDR_EXP 58
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sHack := false ;
12810: LD_ADDR_EXP 59
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// sFire := false ;
12818: LD_ADDR_EXP 60
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// sRefresh := false ;
12826: LD_ADDR_EXP 61
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// sExp := false ;
12834: LD_ADDR_EXP 62
12838: PUSH
12839: LD_INT 0
12841: ST_TO_ADDR
// sDepot := false ;
12842: LD_ADDR_EXP 63
12846: PUSH
12847: LD_INT 0
12849: ST_TO_ADDR
// sFlag := false ;
12850: LD_ADDR_EXP 64
12854: PUSH
12855: LD_INT 0
12857: ST_TO_ADDR
// sKamikadze := false ;
12858: LD_ADDR_EXP 72
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// sTroll := false ;
12866: LD_ADDR_EXP 73
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// sSlow := false ;
12874: LD_ADDR_EXP 74
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// sLack := false ;
12882: LD_ADDR_EXP 75
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// sTank := false ;
12890: LD_ADDR_EXP 77
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// sRemote := false ;
12898: LD_ADDR_EXP 78
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// sPowell := false ;
12906: LD_ADDR_EXP 79
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// sTeleport := false ;
12914: LD_ADDR_EXP 82
12918: PUSH
12919: LD_INT 0
12921: ST_TO_ADDR
// sOilTower := false ;
12922: LD_ADDR_EXP 84
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// sShovel := false ;
12930: LD_ADDR_EXP 85
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// sSheik := false ;
12938: LD_ADDR_EXP 86
12942: PUSH
12943: LD_INT 0
12945: ST_TO_ADDR
// sEarthquake := false ;
12946: LD_ADDR_EXP 88
12950: PUSH
12951: LD_INT 0
12953: ST_TO_ADDR
// sAI := false ;
12954: LD_ADDR_EXP 89
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// sCargo := false ;
12962: LD_ADDR_EXP 92
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// sDLaser := false ;
12970: LD_ADDR_EXP 93
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// sExchange := false ;
12978: LD_ADDR_EXP 94
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// sFac := false ;
12986: LD_ADDR_EXP 95
12990: PUSH
12991: LD_INT 0
12993: ST_TO_ADDR
// sPower := false ;
12994: LD_ADDR_EXP 96
12998: PUSH
12999: LD_INT 0
13001: ST_TO_ADDR
// sRandom := false ;
13002: LD_ADDR_EXP 97
13006: PUSH
13007: LD_INT 0
13009: ST_TO_ADDR
// sShield := false ;
13010: LD_ADDR_EXP 98
13014: PUSH
13015: LD_INT 0
13017: ST_TO_ADDR
// sTime := false ;
13018: LD_ADDR_EXP 99
13022: PUSH
13023: LD_INT 0
13025: ST_TO_ADDR
// sTools := false ;
13026: LD_ADDR_EXP 100
13030: PUSH
13031: LD_INT 0
13033: ST_TO_ADDR
// sSold := false ;
13034: LD_ADDR_EXP 65
13038: PUSH
13039: LD_INT 0
13041: ST_TO_ADDR
// sDiff := false ;
13042: LD_ADDR_EXP 66
13046: PUSH
13047: LD_INT 0
13049: ST_TO_ADDR
// sFog := false ;
13050: LD_ADDR_EXP 69
13054: PUSH
13055: LD_INT 0
13057: ST_TO_ADDR
// sReset := false ;
13058: LD_ADDR_EXP 70
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// sSun := false ;
13066: LD_ADDR_EXP 71
13070: PUSH
13071: LD_INT 0
13073: ST_TO_ADDR
// sTiger := false ;
13074: LD_ADDR_EXP 67
13078: PUSH
13079: LD_INT 0
13081: ST_TO_ADDR
// sBomb := false ;
13082: LD_ADDR_EXP 68
13086: PUSH
13087: LD_INT 0
13089: ST_TO_ADDR
// sWound := false ;
13090: LD_ADDR_EXP 76
13094: PUSH
13095: LD_INT 0
13097: ST_TO_ADDR
// sBetray := false ;
13098: LD_ADDR_EXP 80
13102: PUSH
13103: LD_INT 0
13105: ST_TO_ADDR
// sContamin := false ;
13106: LD_ADDR_EXP 81
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// sOil := false ;
13114: LD_ADDR_EXP 83
13118: PUSH
13119: LD_INT 0
13121: ST_TO_ADDR
// sStu := false ;
13122: LD_ADDR_EXP 87
13126: PUSH
13127: LD_INT 0
13129: ST_TO_ADDR
// sBazooka := false ;
13130: LD_ADDR_EXP 90
13134: PUSH
13135: LD_INT 0
13137: ST_TO_ADDR
// sMortar := false ;
13138: LD_ADDR_EXP 91
13142: PUSH
13143: LD_INT 0
13145: ST_TO_ADDR
// sRanger := false ;
13146: LD_ADDR_EXP 101
13150: PUSH
13151: LD_INT 0
13153: ST_TO_ADDR
// sComputer := false ;
13154: LD_ADDR_EXP 102
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// s30 := false ;
13162: LD_ADDR_EXP 103
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// s60 := false ;
13170: LD_ADDR_EXP 104
13174: PUSH
13175: LD_INT 0
13177: ST_TO_ADDR
// end ;
13178: LD_VAR 0 1
13182: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
13187: PPUSH
13188: PPUSH
13189: PPUSH
13190: PPUSH
13191: PPUSH
// result := [ ] ;
13192: LD_ADDR_VAR 0 2
13196: PUSH
13197: EMPTY
13198: ST_TO_ADDR
// if campaign_id = 1 then
13199: LD_OWVAR 69
13203: PUSH
13204: LD_INT 1
13206: EQUAL
13207: IFFALSE 16373
// begin case mission_number of 1 :
13209: LD_OWVAR 70
13213: PUSH
13214: LD_INT 1
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13298
13222: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13223: LD_ADDR_VAR 0 2
13227: PUSH
13228: LD_INT 2
13230: PUSH
13231: LD_INT 4
13233: PUSH
13234: LD_INT 11
13236: PUSH
13237: LD_INT 12
13239: PUSH
13240: LD_INT 15
13242: PUSH
13243: LD_INT 16
13245: PUSH
13246: LD_INT 22
13248: PUSH
13249: LD_INT 23
13251: PUSH
13252: LD_INT 26
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 101
13268: PUSH
13269: LD_INT 102
13271: PUSH
13272: LD_INT 106
13274: PUSH
13275: LD_INT 116
13277: PUSH
13278: LD_INT 117
13280: PUSH
13281: LD_INT 118
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: ST_TO_ADDR
13296: GO 16371
13298: LD_INT 2
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13390
13306: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13307: LD_ADDR_VAR 0 2
13311: PUSH
13312: LD_INT 2
13314: PUSH
13315: LD_INT 4
13317: PUSH
13318: LD_INT 11
13320: PUSH
13321: LD_INT 12
13323: PUSH
13324: LD_INT 15
13326: PUSH
13327: LD_INT 16
13329: PUSH
13330: LD_INT 22
13332: PUSH
13333: LD_INT 23
13335: PUSH
13336: LD_INT 26
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 101
13352: PUSH
13353: LD_INT 102
13355: PUSH
13356: LD_INT 105
13358: PUSH
13359: LD_INT 106
13361: PUSH
13362: LD_INT 108
13364: PUSH
13365: LD_INT 116
13367: PUSH
13368: LD_INT 117
13370: PUSH
13371: LD_INT 118
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: ST_TO_ADDR
13388: GO 16371
13390: LD_INT 3
13392: DOUBLE
13393: EQUAL
13394: IFTRUE 13398
13396: GO 13486
13398: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13399: LD_ADDR_VAR 0 2
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 4
13409: PUSH
13410: LD_INT 5
13412: PUSH
13413: LD_INT 11
13415: PUSH
13416: LD_INT 12
13418: PUSH
13419: LD_INT 15
13421: PUSH
13422: LD_INT 16
13424: PUSH
13425: LD_INT 22
13427: PUSH
13428: LD_INT 26
13430: PUSH
13431: LD_INT 36
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 101
13448: PUSH
13449: LD_INT 102
13451: PUSH
13452: LD_INT 105
13454: PUSH
13455: LD_INT 106
13457: PUSH
13458: LD_INT 108
13460: PUSH
13461: LD_INT 116
13463: PUSH
13464: LD_INT 117
13466: PUSH
13467: LD_INT 118
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: ST_TO_ADDR
13484: GO 16371
13486: LD_INT 4
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13494
13492: GO 13590
13494: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13495: LD_ADDR_VAR 0 2
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: LD_INT 4
13505: PUSH
13506: LD_INT 5
13508: PUSH
13509: LD_INT 8
13511: PUSH
13512: LD_INT 11
13514: PUSH
13515: LD_INT 12
13517: PUSH
13518: LD_INT 15
13520: PUSH
13521: LD_INT 16
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_INT 23
13529: PUSH
13530: LD_INT 26
13532: PUSH
13533: LD_INT 36
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 101
13552: PUSH
13553: LD_INT 102
13555: PUSH
13556: LD_INT 105
13558: PUSH
13559: LD_INT 106
13561: PUSH
13562: LD_INT 108
13564: PUSH
13565: LD_INT 116
13567: PUSH
13568: LD_INT 117
13570: PUSH
13571: LD_INT 118
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: ST_TO_ADDR
13588: GO 16371
13590: LD_INT 5
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13710
13598: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 4
13609: PUSH
13610: LD_INT 5
13612: PUSH
13613: LD_INT 6
13615: PUSH
13616: LD_INT 8
13618: PUSH
13619: LD_INT 11
13621: PUSH
13622: LD_INT 12
13624: PUSH
13625: LD_INT 15
13627: PUSH
13628: LD_INT 16
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 23
13636: PUSH
13637: LD_INT 25
13639: PUSH
13640: LD_INT 26
13642: PUSH
13643: LD_INT 36
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 105
13670: PUSH
13671: LD_INT 106
13673: PUSH
13674: LD_INT 108
13676: PUSH
13677: LD_INT 109
13679: PUSH
13680: LD_INT 112
13682: PUSH
13683: LD_INT 116
13685: PUSH
13686: LD_INT 117
13688: PUSH
13689: LD_INT 118
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: ST_TO_ADDR
13708: GO 16371
13710: LD_INT 6
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13850
13718: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13719: LD_ADDR_VAR 0 2
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: LD_INT 4
13729: PUSH
13730: LD_INT 5
13732: PUSH
13733: LD_INT 6
13735: PUSH
13736: LD_INT 8
13738: PUSH
13739: LD_INT 11
13741: PUSH
13742: LD_INT 12
13744: PUSH
13745: LD_INT 15
13747: PUSH
13748: LD_INT 16
13750: PUSH
13751: LD_INT 20
13753: PUSH
13754: LD_INT 21
13756: PUSH
13757: LD_INT 22
13759: PUSH
13760: LD_INT 23
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 26
13768: PUSH
13769: LD_INT 30
13771: PUSH
13772: LD_INT 31
13774: PUSH
13775: LD_INT 32
13777: PUSH
13778: LD_INT 36
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 101
13804: PUSH
13805: LD_INT 102
13807: PUSH
13808: LD_INT 105
13810: PUSH
13811: LD_INT 106
13813: PUSH
13814: LD_INT 108
13816: PUSH
13817: LD_INT 109
13819: PUSH
13820: LD_INT 112
13822: PUSH
13823: LD_INT 116
13825: PUSH
13826: LD_INT 117
13828: PUSH
13829: LD_INT 118
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: ST_TO_ADDR
13848: GO 16371
13850: LD_INT 7
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13970
13858: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13859: LD_ADDR_VAR 0 2
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: LD_INT 4
13869: PUSH
13870: LD_INT 5
13872: PUSH
13873: LD_INT 7
13875: PUSH
13876: LD_INT 11
13878: PUSH
13879: LD_INT 12
13881: PUSH
13882: LD_INT 15
13884: PUSH
13885: LD_INT 16
13887: PUSH
13888: LD_INT 20
13890: PUSH
13891: LD_INT 21
13893: PUSH
13894: LD_INT 22
13896: PUSH
13897: LD_INT 23
13899: PUSH
13900: LD_INT 25
13902: PUSH
13903: LD_INT 26
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 101
13924: PUSH
13925: LD_INT 102
13927: PUSH
13928: LD_INT 103
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 108
13939: PUSH
13940: LD_INT 112
13942: PUSH
13943: LD_INT 116
13945: PUSH
13946: LD_INT 117
13948: PUSH
13949: LD_INT 118
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: ST_TO_ADDR
13968: GO 16371
13970: LD_INT 8
13972: DOUBLE
13973: EQUAL
13974: IFTRUE 13978
13976: GO 14118
13978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13979: LD_ADDR_VAR 0 2
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 4
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: LD_INT 6
13995: PUSH
13996: LD_INT 7
13998: PUSH
13999: LD_INT 8
14001: PUSH
14002: LD_INT 11
14004: PUSH
14005: LD_INT 12
14007: PUSH
14008: LD_INT 15
14010: PUSH
14011: LD_INT 16
14013: PUSH
14014: LD_INT 20
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_INT 23
14025: PUSH
14026: LD_INT 25
14028: PUSH
14029: LD_INT 26
14031: PUSH
14032: LD_INT 30
14034: PUSH
14035: LD_INT 31
14037: PUSH
14038: LD_INT 32
14040: PUSH
14041: LD_INT 36
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 101
14068: PUSH
14069: LD_INT 102
14071: PUSH
14072: LD_INT 103
14074: PUSH
14075: LD_INT 105
14077: PUSH
14078: LD_INT 106
14080: PUSH
14081: LD_INT 108
14083: PUSH
14084: LD_INT 109
14086: PUSH
14087: LD_INT 112
14089: PUSH
14090: LD_INT 116
14092: PUSH
14093: LD_INT 117
14095: PUSH
14096: LD_INT 118
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: ST_TO_ADDR
14116: GO 16371
14118: LD_INT 9
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14274
14126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14127: LD_ADDR_VAR 0 2
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: LD_INT 4
14137: PUSH
14138: LD_INT 5
14140: PUSH
14141: LD_INT 6
14143: PUSH
14144: LD_INT 7
14146: PUSH
14147: LD_INT 8
14149: PUSH
14150: LD_INT 11
14152: PUSH
14153: LD_INT 12
14155: PUSH
14156: LD_INT 15
14158: PUSH
14159: LD_INT 16
14161: PUSH
14162: LD_INT 20
14164: PUSH
14165: LD_INT 21
14167: PUSH
14168: LD_INT 22
14170: PUSH
14171: LD_INT 23
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 26
14179: PUSH
14180: LD_INT 28
14182: PUSH
14183: LD_INT 30
14185: PUSH
14186: LD_INT 31
14188: PUSH
14189: LD_INT 32
14191: PUSH
14192: LD_INT 36
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 101
14220: PUSH
14221: LD_INT 102
14223: PUSH
14224: LD_INT 103
14226: PUSH
14227: LD_INT 105
14229: PUSH
14230: LD_INT 106
14232: PUSH
14233: LD_INT 108
14235: PUSH
14236: LD_INT 109
14238: PUSH
14239: LD_INT 112
14241: PUSH
14242: LD_INT 114
14244: PUSH
14245: LD_INT 116
14247: PUSH
14248: LD_INT 117
14250: PUSH
14251: LD_INT 118
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: ST_TO_ADDR
14272: GO 16371
14274: LD_INT 10
14276: DOUBLE
14277: EQUAL
14278: IFTRUE 14282
14280: GO 14478
14282: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14283: LD_ADDR_VAR 0 2
14287: PUSH
14288: LD_INT 2
14290: PUSH
14291: LD_INT 4
14293: PUSH
14294: LD_INT 5
14296: PUSH
14297: LD_INT 6
14299: PUSH
14300: LD_INT 7
14302: PUSH
14303: LD_INT 8
14305: PUSH
14306: LD_INT 9
14308: PUSH
14309: LD_INT 10
14311: PUSH
14312: LD_INT 11
14314: PUSH
14315: LD_INT 12
14317: PUSH
14318: LD_INT 13
14320: PUSH
14321: LD_INT 14
14323: PUSH
14324: LD_INT 15
14326: PUSH
14327: LD_INT 16
14329: PUSH
14330: LD_INT 17
14332: PUSH
14333: LD_INT 18
14335: PUSH
14336: LD_INT 19
14338: PUSH
14339: LD_INT 20
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_INT 23
14350: PUSH
14351: LD_INT 24
14353: PUSH
14354: LD_INT 25
14356: PUSH
14357: LD_INT 26
14359: PUSH
14360: LD_INT 28
14362: PUSH
14363: LD_INT 30
14365: PUSH
14366: LD_INT 31
14368: PUSH
14369: LD_INT 32
14371: PUSH
14372: LD_INT 36
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 101
14408: PUSH
14409: LD_INT 102
14411: PUSH
14412: LD_INT 103
14414: PUSH
14415: LD_INT 104
14417: PUSH
14418: LD_INT 105
14420: PUSH
14421: LD_INT 106
14423: PUSH
14424: LD_INT 107
14426: PUSH
14427: LD_INT 108
14429: PUSH
14430: LD_INT 109
14432: PUSH
14433: LD_INT 110
14435: PUSH
14436: LD_INT 111
14438: PUSH
14439: LD_INT 112
14441: PUSH
14442: LD_INT 114
14444: PUSH
14445: LD_INT 116
14447: PUSH
14448: LD_INT 117
14450: PUSH
14451: LD_INT 118
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
14476: GO 16371
14478: LD_INT 11
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14690
14486: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14487: LD_ADDR_VAR 0 2
14491: PUSH
14492: LD_INT 2
14494: PUSH
14495: LD_INT 3
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: LD_INT 5
14503: PUSH
14504: LD_INT 6
14506: PUSH
14507: LD_INT 7
14509: PUSH
14510: LD_INT 8
14512: PUSH
14513: LD_INT 9
14515: PUSH
14516: LD_INT 10
14518: PUSH
14519: LD_INT 11
14521: PUSH
14522: LD_INT 12
14524: PUSH
14525: LD_INT 13
14527: PUSH
14528: LD_INT 14
14530: PUSH
14531: LD_INT 15
14533: PUSH
14534: LD_INT 16
14536: PUSH
14537: LD_INT 17
14539: PUSH
14540: LD_INT 18
14542: PUSH
14543: LD_INT 19
14545: PUSH
14546: LD_INT 20
14548: PUSH
14549: LD_INT 21
14551: PUSH
14552: LD_INT 22
14554: PUSH
14555: LD_INT 23
14557: PUSH
14558: LD_INT 24
14560: PUSH
14561: LD_INT 25
14563: PUSH
14564: LD_INT 26
14566: PUSH
14567: LD_INT 28
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 31
14575: PUSH
14576: LD_INT 32
14578: PUSH
14579: LD_INT 34
14581: PUSH
14582: LD_INT 36
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 101
14620: PUSH
14621: LD_INT 102
14623: PUSH
14624: LD_INT 103
14626: PUSH
14627: LD_INT 104
14629: PUSH
14630: LD_INT 105
14632: PUSH
14633: LD_INT 106
14635: PUSH
14636: LD_INT 107
14638: PUSH
14639: LD_INT 108
14641: PUSH
14642: LD_INT 109
14644: PUSH
14645: LD_INT 110
14647: PUSH
14648: LD_INT 111
14650: PUSH
14651: LD_INT 112
14653: PUSH
14654: LD_INT 114
14656: PUSH
14657: LD_INT 116
14659: PUSH
14660: LD_INT 117
14662: PUSH
14663: LD_INT 118
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: ST_TO_ADDR
14688: GO 16371
14690: LD_INT 12
14692: DOUBLE
14693: EQUAL
14694: IFTRUE 14698
14696: GO 14918
14698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: LD_INT 2
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: LD_INT 4
14715: PUSH
14716: LD_INT 5
14718: PUSH
14719: LD_INT 6
14721: PUSH
14722: LD_INT 7
14724: PUSH
14725: LD_INT 8
14727: PUSH
14728: LD_INT 9
14730: PUSH
14731: LD_INT 10
14733: PUSH
14734: LD_INT 11
14736: PUSH
14737: LD_INT 12
14739: PUSH
14740: LD_INT 13
14742: PUSH
14743: LD_INT 14
14745: PUSH
14746: LD_INT 15
14748: PUSH
14749: LD_INT 16
14751: PUSH
14752: LD_INT 17
14754: PUSH
14755: LD_INT 18
14757: PUSH
14758: LD_INT 19
14760: PUSH
14761: LD_INT 20
14763: PUSH
14764: LD_INT 21
14766: PUSH
14767: LD_INT 22
14769: PUSH
14770: LD_INT 23
14772: PUSH
14773: LD_INT 24
14775: PUSH
14776: LD_INT 25
14778: PUSH
14779: LD_INT 26
14781: PUSH
14782: LD_INT 27
14784: PUSH
14785: LD_INT 28
14787: PUSH
14788: LD_INT 30
14790: PUSH
14791: LD_INT 31
14793: PUSH
14794: LD_INT 32
14796: PUSH
14797: LD_INT 33
14799: PUSH
14800: LD_INT 34
14802: PUSH
14803: LD_INT 36
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 101
14844: PUSH
14845: LD_INT 102
14847: PUSH
14848: LD_INT 103
14850: PUSH
14851: LD_INT 104
14853: PUSH
14854: LD_INT 105
14856: PUSH
14857: LD_INT 106
14859: PUSH
14860: LD_INT 107
14862: PUSH
14863: LD_INT 108
14865: PUSH
14866: LD_INT 109
14868: PUSH
14869: LD_INT 110
14871: PUSH
14872: LD_INT 111
14874: PUSH
14875: LD_INT 112
14877: PUSH
14878: LD_INT 113
14880: PUSH
14881: LD_INT 114
14883: PUSH
14884: LD_INT 116
14886: PUSH
14887: LD_INT 117
14889: PUSH
14890: LD_INT 118
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: ST_TO_ADDR
14916: GO 16371
14918: LD_INT 13
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 15134
14926: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14927: LD_ADDR_VAR 0 2
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: LD_INT 2
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: LD_INT 4
14943: PUSH
14944: LD_INT 5
14946: PUSH
14947: LD_INT 8
14949: PUSH
14950: LD_INT 9
14952: PUSH
14953: LD_INT 10
14955: PUSH
14956: LD_INT 11
14958: PUSH
14959: LD_INT 12
14961: PUSH
14962: LD_INT 14
14964: PUSH
14965: LD_INT 15
14967: PUSH
14968: LD_INT 16
14970: PUSH
14971: LD_INT 17
14973: PUSH
14974: LD_INT 18
14976: PUSH
14977: LD_INT 19
14979: PUSH
14980: LD_INT 20
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 23
14991: PUSH
14992: LD_INT 24
14994: PUSH
14995: LD_INT 25
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 27
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 31
15012: PUSH
15013: LD_INT 32
15015: PUSH
15016: LD_INT 33
15018: PUSH
15019: LD_INT 34
15021: PUSH
15022: LD_INT 36
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 101
15060: PUSH
15061: LD_INT 102
15063: PUSH
15064: LD_INT 103
15066: PUSH
15067: LD_INT 104
15069: PUSH
15070: LD_INT 105
15072: PUSH
15073: LD_INT 106
15075: PUSH
15076: LD_INT 107
15078: PUSH
15079: LD_INT 108
15081: PUSH
15082: LD_INT 109
15084: PUSH
15085: LD_INT 110
15087: PUSH
15088: LD_INT 111
15090: PUSH
15091: LD_INT 112
15093: PUSH
15094: LD_INT 113
15096: PUSH
15097: LD_INT 114
15099: PUSH
15100: LD_INT 116
15102: PUSH
15103: LD_INT 117
15105: PUSH
15106: LD_INT 118
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: ST_TO_ADDR
15132: GO 16371
15134: LD_INT 14
15136: DOUBLE
15137: EQUAL
15138: IFTRUE 15142
15140: GO 15366
15142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15143: LD_ADDR_VAR 0 2
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: LD_INT 2
15153: PUSH
15154: LD_INT 3
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: LD_INT 5
15162: PUSH
15163: LD_INT 6
15165: PUSH
15166: LD_INT 7
15168: PUSH
15169: LD_INT 8
15171: PUSH
15172: LD_INT 9
15174: PUSH
15175: LD_INT 10
15177: PUSH
15178: LD_INT 11
15180: PUSH
15181: LD_INT 12
15183: PUSH
15184: LD_INT 13
15186: PUSH
15187: LD_INT 14
15189: PUSH
15190: LD_INT 15
15192: PUSH
15193: LD_INT 16
15195: PUSH
15196: LD_INT 17
15198: PUSH
15199: LD_INT 18
15201: PUSH
15202: LD_INT 19
15204: PUSH
15205: LD_INT 20
15207: PUSH
15208: LD_INT 21
15210: PUSH
15211: LD_INT 22
15213: PUSH
15214: LD_INT 23
15216: PUSH
15217: LD_INT 24
15219: PUSH
15220: LD_INT 25
15222: PUSH
15223: LD_INT 26
15225: PUSH
15226: LD_INT 27
15228: PUSH
15229: LD_INT 28
15231: PUSH
15232: LD_INT 29
15234: PUSH
15235: LD_INT 30
15237: PUSH
15238: LD_INT 31
15240: PUSH
15241: LD_INT 32
15243: PUSH
15244: LD_INT 33
15246: PUSH
15247: LD_INT 34
15249: PUSH
15250: LD_INT 36
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 101
15292: PUSH
15293: LD_INT 102
15295: PUSH
15296: LD_INT 103
15298: PUSH
15299: LD_INT 104
15301: PUSH
15302: LD_INT 105
15304: PUSH
15305: LD_INT 106
15307: PUSH
15308: LD_INT 107
15310: PUSH
15311: LD_INT 108
15313: PUSH
15314: LD_INT 109
15316: PUSH
15317: LD_INT 110
15319: PUSH
15320: LD_INT 111
15322: PUSH
15323: LD_INT 112
15325: PUSH
15326: LD_INT 113
15328: PUSH
15329: LD_INT 114
15331: PUSH
15332: LD_INT 116
15334: PUSH
15335: LD_INT 117
15337: PUSH
15338: LD_INT 118
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: ST_TO_ADDR
15364: GO 16371
15366: LD_INT 15
15368: DOUBLE
15369: EQUAL
15370: IFTRUE 15374
15372: GO 15598
15374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 4
15391: PUSH
15392: LD_INT 5
15394: PUSH
15395: LD_INT 6
15397: PUSH
15398: LD_INT 7
15400: PUSH
15401: LD_INT 8
15403: PUSH
15404: LD_INT 9
15406: PUSH
15407: LD_INT 10
15409: PUSH
15410: LD_INT 11
15412: PUSH
15413: LD_INT 12
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: LD_INT 15
15424: PUSH
15425: LD_INT 16
15427: PUSH
15428: LD_INT 17
15430: PUSH
15431: LD_INT 18
15433: PUSH
15434: LD_INT 19
15436: PUSH
15437: LD_INT 20
15439: PUSH
15440: LD_INT 21
15442: PUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 23
15448: PUSH
15449: LD_INT 24
15451: PUSH
15452: LD_INT 25
15454: PUSH
15455: LD_INT 26
15457: PUSH
15458: LD_INT 27
15460: PUSH
15461: LD_INT 28
15463: PUSH
15464: LD_INT 29
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 31
15472: PUSH
15473: LD_INT 32
15475: PUSH
15476: LD_INT 33
15478: PUSH
15479: LD_INT 34
15481: PUSH
15482: LD_INT 36
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 101
15524: PUSH
15525: LD_INT 102
15527: PUSH
15528: LD_INT 103
15530: PUSH
15531: LD_INT 104
15533: PUSH
15534: LD_INT 105
15536: PUSH
15537: LD_INT 106
15539: PUSH
15540: LD_INT 107
15542: PUSH
15543: LD_INT 108
15545: PUSH
15546: LD_INT 109
15548: PUSH
15549: LD_INT 110
15551: PUSH
15552: LD_INT 111
15554: PUSH
15555: LD_INT 112
15557: PUSH
15558: LD_INT 113
15560: PUSH
15561: LD_INT 114
15563: PUSH
15564: LD_INT 116
15566: PUSH
15567: LD_INT 117
15569: PUSH
15570: LD_INT 118
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 16371
15598: LD_INT 16
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15742
15606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: LD_INT 5
15620: PUSH
15621: LD_INT 7
15623: PUSH
15624: LD_INT 11
15626: PUSH
15627: LD_INT 12
15629: PUSH
15630: LD_INT 15
15632: PUSH
15633: LD_INT 16
15635: PUSH
15636: LD_INT 20
15638: PUSH
15639: LD_INT 21
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_INT 23
15647: PUSH
15648: LD_INT 25
15650: PUSH
15651: LD_INT 26
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 31
15659: PUSH
15660: LD_INT 32
15662: PUSH
15663: LD_INT 33
15665: PUSH
15666: LD_INT 34
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 101
15692: PUSH
15693: LD_INT 102
15695: PUSH
15696: LD_INT 103
15698: PUSH
15699: LD_INT 106
15701: PUSH
15702: LD_INT 108
15704: PUSH
15705: LD_INT 112
15707: PUSH
15708: LD_INT 113
15710: PUSH
15711: LD_INT 114
15713: PUSH
15714: LD_INT 116
15716: PUSH
15717: LD_INT 117
15719: PUSH
15720: LD_INT 118
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: ST_TO_ADDR
15740: GO 16371
15742: LD_INT 17
15744: DOUBLE
15745: EQUAL
15746: IFTRUE 15750
15748: GO 15974
15750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: LD_INT 2
15761: PUSH
15762: LD_INT 3
15764: PUSH
15765: LD_INT 4
15767: PUSH
15768: LD_INT 5
15770: PUSH
15771: LD_INT 6
15773: PUSH
15774: LD_INT 7
15776: PUSH
15777: LD_INT 8
15779: PUSH
15780: LD_INT 9
15782: PUSH
15783: LD_INT 10
15785: PUSH
15786: LD_INT 11
15788: PUSH
15789: LD_INT 12
15791: PUSH
15792: LD_INT 13
15794: PUSH
15795: LD_INT 14
15797: PUSH
15798: LD_INT 15
15800: PUSH
15801: LD_INT 16
15803: PUSH
15804: LD_INT 17
15806: PUSH
15807: LD_INT 18
15809: PUSH
15810: LD_INT 19
15812: PUSH
15813: LD_INT 20
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 22
15821: PUSH
15822: LD_INT 23
15824: PUSH
15825: LD_INT 24
15827: PUSH
15828: LD_INT 25
15830: PUSH
15831: LD_INT 26
15833: PUSH
15834: LD_INT 27
15836: PUSH
15837: LD_INT 28
15839: PUSH
15840: LD_INT 29
15842: PUSH
15843: LD_INT 30
15845: PUSH
15846: LD_INT 31
15848: PUSH
15849: LD_INT 32
15851: PUSH
15852: LD_INT 33
15854: PUSH
15855: LD_INT 34
15857: PUSH
15858: LD_INT 36
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 101
15900: PUSH
15901: LD_INT 102
15903: PUSH
15904: LD_INT 103
15906: PUSH
15907: LD_INT 104
15909: PUSH
15910: LD_INT 105
15912: PUSH
15913: LD_INT 106
15915: PUSH
15916: LD_INT 107
15918: PUSH
15919: LD_INT 108
15921: PUSH
15922: LD_INT 109
15924: PUSH
15925: LD_INT 110
15927: PUSH
15928: LD_INT 111
15930: PUSH
15931: LD_INT 112
15933: PUSH
15934: LD_INT 113
15936: PUSH
15937: LD_INT 114
15939: PUSH
15940: LD_INT 116
15942: PUSH
15943: LD_INT 117
15945: PUSH
15946: LD_INT 118
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: ST_TO_ADDR
15972: GO 16371
15974: LD_INT 18
15976: DOUBLE
15977: EQUAL
15978: IFTRUE 15982
15980: GO 16130
15982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15983: LD_ADDR_VAR 0 2
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 4
15993: PUSH
15994: LD_INT 5
15996: PUSH
15997: LD_INT 7
15999: PUSH
16000: LD_INT 11
16002: PUSH
16003: LD_INT 12
16005: PUSH
16006: LD_INT 15
16008: PUSH
16009: LD_INT 16
16011: PUSH
16012: LD_INT 20
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 22
16020: PUSH
16021: LD_INT 23
16023: PUSH
16024: LD_INT 25
16026: PUSH
16027: LD_INT 26
16029: PUSH
16030: LD_INT 30
16032: PUSH
16033: LD_INT 31
16035: PUSH
16036: LD_INT 32
16038: PUSH
16039: LD_INT 33
16041: PUSH
16042: LD_INT 34
16044: PUSH
16045: LD_INT 35
16047: PUSH
16048: LD_INT 36
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 101
16076: PUSH
16077: LD_INT 102
16079: PUSH
16080: LD_INT 103
16082: PUSH
16083: LD_INT 106
16085: PUSH
16086: LD_INT 108
16088: PUSH
16089: LD_INT 112
16091: PUSH
16092: LD_INT 113
16094: PUSH
16095: LD_INT 114
16097: PUSH
16098: LD_INT 115
16100: PUSH
16101: LD_INT 116
16103: PUSH
16104: LD_INT 117
16106: PUSH
16107: LD_INT 118
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: ST_TO_ADDR
16128: GO 16371
16130: LD_INT 19
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16370
16138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_INT 1
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 4
16155: PUSH
16156: LD_INT 5
16158: PUSH
16159: LD_INT 6
16161: PUSH
16162: LD_INT 7
16164: PUSH
16165: LD_INT 8
16167: PUSH
16168: LD_INT 9
16170: PUSH
16171: LD_INT 10
16173: PUSH
16174: LD_INT 11
16176: PUSH
16177: LD_INT 12
16179: PUSH
16180: LD_INT 13
16182: PUSH
16183: LD_INT 14
16185: PUSH
16186: LD_INT 15
16188: PUSH
16189: LD_INT 16
16191: PUSH
16192: LD_INT 17
16194: PUSH
16195: LD_INT 18
16197: PUSH
16198: LD_INT 19
16200: PUSH
16201: LD_INT 20
16203: PUSH
16204: LD_INT 21
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 23
16212: PUSH
16213: LD_INT 24
16215: PUSH
16216: LD_INT 25
16218: PUSH
16219: LD_INT 26
16221: PUSH
16222: LD_INT 27
16224: PUSH
16225: LD_INT 28
16227: PUSH
16228: LD_INT 29
16230: PUSH
16231: LD_INT 30
16233: PUSH
16234: LD_INT 31
16236: PUSH
16237: LD_INT 32
16239: PUSH
16240: LD_INT 33
16242: PUSH
16243: LD_INT 34
16245: PUSH
16246: LD_INT 35
16248: PUSH
16249: LD_INT 36
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 101
16292: PUSH
16293: LD_INT 102
16295: PUSH
16296: LD_INT 103
16298: PUSH
16299: LD_INT 104
16301: PUSH
16302: LD_INT 105
16304: PUSH
16305: LD_INT 106
16307: PUSH
16308: LD_INT 107
16310: PUSH
16311: LD_INT 108
16313: PUSH
16314: LD_INT 109
16316: PUSH
16317: LD_INT 110
16319: PUSH
16320: LD_INT 111
16322: PUSH
16323: LD_INT 112
16325: PUSH
16326: LD_INT 113
16328: PUSH
16329: LD_INT 114
16331: PUSH
16332: LD_INT 115
16334: PUSH
16335: LD_INT 116
16337: PUSH
16338: LD_INT 117
16340: PUSH
16341: LD_INT 118
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: ST_TO_ADDR
16368: GO 16371
16370: POP
// end else
16371: GO 16602
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16373: LD_ADDR_VAR 0 2
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 3
16386: PUSH
16387: LD_INT 4
16389: PUSH
16390: LD_INT 5
16392: PUSH
16393: LD_INT 6
16395: PUSH
16396: LD_INT 7
16398: PUSH
16399: LD_INT 8
16401: PUSH
16402: LD_INT 9
16404: PUSH
16405: LD_INT 10
16407: PUSH
16408: LD_INT 11
16410: PUSH
16411: LD_INT 12
16413: PUSH
16414: LD_INT 13
16416: PUSH
16417: LD_INT 14
16419: PUSH
16420: LD_INT 15
16422: PUSH
16423: LD_INT 16
16425: PUSH
16426: LD_INT 17
16428: PUSH
16429: LD_INT 18
16431: PUSH
16432: LD_INT 19
16434: PUSH
16435: LD_INT 20
16437: PUSH
16438: LD_INT 21
16440: PUSH
16441: LD_INT 22
16443: PUSH
16444: LD_INT 23
16446: PUSH
16447: LD_INT 24
16449: PUSH
16450: LD_INT 25
16452: PUSH
16453: LD_INT 26
16455: PUSH
16456: LD_INT 27
16458: PUSH
16459: LD_INT 28
16461: PUSH
16462: LD_INT 29
16464: PUSH
16465: LD_INT 30
16467: PUSH
16468: LD_INT 31
16470: PUSH
16471: LD_INT 32
16473: PUSH
16474: LD_INT 33
16476: PUSH
16477: LD_INT 34
16479: PUSH
16480: LD_INT 35
16482: PUSH
16483: LD_INT 36
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 101
16526: PUSH
16527: LD_INT 102
16529: PUSH
16530: LD_INT 103
16532: PUSH
16533: LD_INT 104
16535: PUSH
16536: LD_INT 105
16538: PUSH
16539: LD_INT 106
16541: PUSH
16542: LD_INT 107
16544: PUSH
16545: LD_INT 108
16547: PUSH
16548: LD_INT 109
16550: PUSH
16551: LD_INT 110
16553: PUSH
16554: LD_INT 111
16556: PUSH
16557: LD_INT 112
16559: PUSH
16560: LD_INT 113
16562: PUSH
16563: LD_INT 114
16565: PUSH
16566: LD_INT 115
16568: PUSH
16569: LD_INT 116
16571: PUSH
16572: LD_INT 117
16574: PUSH
16575: LD_INT 118
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if result then
16602: LD_VAR 0 2
16606: IFFALSE 17392
// begin normal :=  ;
16608: LD_ADDR_VAR 0 5
16612: PUSH
16613: LD_STRING 
16615: ST_TO_ADDR
// hardcore :=  ;
16616: LD_ADDR_VAR 0 6
16620: PUSH
16621: LD_STRING 
16623: ST_TO_ADDR
// active :=  ;
16624: LD_ADDR_VAR 0 7
16628: PUSH
16629: LD_STRING 
16631: ST_TO_ADDR
// for i = 1 to normalCounter do
16632: LD_ADDR_VAR 0 8
16636: PUSH
16637: DOUBLE
16638: LD_INT 1
16640: DEC
16641: ST_TO_ADDR
16642: LD_EXP 49
16646: PUSH
16647: FOR_TO
16648: IFFALSE 16749
// begin tmp := 0 ;
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_STRING 0
16657: ST_TO_ADDR
// if result [ 1 ] then
16658: LD_VAR 0 2
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: IFFALSE 16731
// if result [ 1 ] [ 1 ] = i then
16668: LD_VAR 0 2
16672: PUSH
16673: LD_INT 1
16675: ARRAY
16676: PUSH
16677: LD_INT 1
16679: ARRAY
16680: PUSH
16681: LD_VAR 0 8
16685: EQUAL
16686: IFFALSE 16731
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16688: LD_ADDR_VAR 0 2
16692: PUSH
16693: LD_VAR 0 2
16697: PPUSH
16698: LD_INT 1
16700: PPUSH
16701: LD_VAR 0 2
16705: PUSH
16706: LD_INT 1
16708: ARRAY
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 3
16717: PPUSH
16718: CALL_OW 1
16722: ST_TO_ADDR
// tmp := 1 ;
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_STRING 1
16730: ST_TO_ADDR
// end ; normal := normal & tmp ;
16731: LD_ADDR_VAR 0 5
16735: PUSH
16736: LD_VAR 0 5
16740: PUSH
16741: LD_VAR 0 3
16745: STR
16746: ST_TO_ADDR
// end ;
16747: GO 16647
16749: POP
16750: POP
// for i = 1 to hardcoreCounter do
16751: LD_ADDR_VAR 0 8
16755: PUSH
16756: DOUBLE
16757: LD_INT 1
16759: DEC
16760: ST_TO_ADDR
16761: LD_EXP 50
16765: PUSH
16766: FOR_TO
16767: IFFALSE 16872
// begin tmp := 0 ;
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_STRING 0
16776: ST_TO_ADDR
// if result [ 2 ] then
16777: LD_VAR 0 2
16781: PUSH
16782: LD_INT 2
16784: ARRAY
16785: IFFALSE 16854
// if result [ 2 ] [ 1 ] = 100 + i then
16787: LD_VAR 0 2
16791: PUSH
16792: LD_INT 2
16794: ARRAY
16795: PUSH
16796: LD_INT 1
16798: ARRAY
16799: PUSH
16800: LD_INT 100
16802: PUSH
16803: LD_VAR 0 8
16807: PLUS
16808: EQUAL
16809: IFFALSE 16854
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16811: LD_ADDR_VAR 0 2
16815: PUSH
16816: LD_VAR 0 2
16820: PPUSH
16821: LD_INT 2
16823: PPUSH
16824: LD_VAR 0 2
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 3
16840: PPUSH
16841: CALL_OW 1
16845: ST_TO_ADDR
// tmp := 1 ;
16846: LD_ADDR_VAR 0 3
16850: PUSH
16851: LD_STRING 1
16853: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16854: LD_ADDR_VAR 0 6
16858: PUSH
16859: LD_VAR 0 6
16863: PUSH
16864: LD_VAR 0 3
16868: STR
16869: ST_TO_ADDR
// end ;
16870: GO 16766
16872: POP
16873: POP
// if isGameLoad then
16874: LD_VAR 0 1
16878: IFFALSE 17353
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16880: LD_ADDR_VAR 0 4
16884: PUSH
16885: LD_EXP 53
16889: PUSH
16890: LD_EXP 52
16894: PUSH
16895: LD_EXP 54
16899: PUSH
16900: LD_EXP 51
16904: PUSH
16905: LD_EXP 55
16909: PUSH
16910: LD_EXP 56
16914: PUSH
16915: LD_EXP 57
16919: PUSH
16920: LD_EXP 58
16924: PUSH
16925: LD_EXP 59
16929: PUSH
16930: LD_EXP 60
16934: PUSH
16935: LD_EXP 61
16939: PUSH
16940: LD_EXP 62
16944: PUSH
16945: LD_EXP 63
16949: PUSH
16950: LD_EXP 64
16954: PUSH
16955: LD_EXP 72
16959: PUSH
16960: LD_EXP 73
16964: PUSH
16965: LD_EXP 74
16969: PUSH
16970: LD_EXP 75
16974: PUSH
16975: LD_EXP 77
16979: PUSH
16980: LD_EXP 78
16984: PUSH
16985: LD_EXP 79
16989: PUSH
16990: LD_EXP 82
16994: PUSH
16995: LD_EXP 84
16999: PUSH
17000: LD_EXP 85
17004: PUSH
17005: LD_EXP 86
17009: PUSH
17010: LD_EXP 88
17014: PUSH
17015: LD_EXP 89
17019: PUSH
17020: LD_EXP 92
17024: PUSH
17025: LD_EXP 93
17029: PUSH
17030: LD_EXP 94
17034: PUSH
17035: LD_EXP 95
17039: PUSH
17040: LD_EXP 96
17044: PUSH
17045: LD_EXP 97
17049: PUSH
17050: LD_EXP 98
17054: PUSH
17055: LD_EXP 99
17059: PUSH
17060: LD_EXP 100
17064: PUSH
17065: LD_EXP 65
17069: PUSH
17070: LD_EXP 66
17074: PUSH
17075: LD_EXP 69
17079: PUSH
17080: LD_EXP 70
17084: PUSH
17085: LD_EXP 71
17089: PUSH
17090: LD_EXP 67
17094: PUSH
17095: LD_EXP 68
17099: PUSH
17100: LD_EXP 76
17104: PUSH
17105: LD_EXP 80
17109: PUSH
17110: LD_EXP 81
17114: PUSH
17115: LD_EXP 83
17119: PUSH
17120: LD_EXP 87
17124: PUSH
17125: LD_EXP 90
17129: PUSH
17130: LD_EXP 91
17134: PUSH
17135: LD_EXP 101
17139: PUSH
17140: LD_EXP 102
17144: PUSH
17145: LD_EXP 103
17149: PUSH
17150: LD_EXP 104
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: ST_TO_ADDR
// tmp :=  ;
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: LD_STRING 
17218: ST_TO_ADDR
// for i = 1 to normalCounter do
17219: LD_ADDR_VAR 0 8
17223: PUSH
17224: DOUBLE
17225: LD_INT 1
17227: DEC
17228: ST_TO_ADDR
17229: LD_EXP 49
17233: PUSH
17234: FOR_TO
17235: IFFALSE 17271
// begin if flags [ i ] then
17237: LD_VAR 0 4
17241: PUSH
17242: LD_VAR 0 8
17246: ARRAY
17247: IFFALSE 17269
// tmp := tmp & i & ; ;
17249: LD_ADDR_VAR 0 3
17253: PUSH
17254: LD_VAR 0 3
17258: PUSH
17259: LD_VAR 0 8
17263: STR
17264: PUSH
17265: LD_STRING ;
17267: STR
17268: ST_TO_ADDR
// end ;
17269: GO 17234
17271: POP
17272: POP
// for i = 1 to hardcoreCounter do
17273: LD_ADDR_VAR 0 8
17277: PUSH
17278: DOUBLE
17279: LD_INT 1
17281: DEC
17282: ST_TO_ADDR
17283: LD_EXP 50
17287: PUSH
17288: FOR_TO
17289: IFFALSE 17335
// begin if flags [ normalCounter + i ] then
17291: LD_VAR 0 4
17295: PUSH
17296: LD_EXP 49
17300: PUSH
17301: LD_VAR 0 8
17305: PLUS
17306: ARRAY
17307: IFFALSE 17333
// tmp := tmp & ( 100 + i ) & ; ;
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: LD_VAR 0 3
17318: PUSH
17319: LD_INT 100
17321: PUSH
17322: LD_VAR 0 8
17326: PLUS
17327: STR
17328: PUSH
17329: LD_STRING ;
17331: STR
17332: ST_TO_ADDR
// end ;
17333: GO 17288
17335: POP
17336: POP
// if tmp then
17337: LD_VAR 0 3
17341: IFFALSE 17353
// active := tmp ;
17343: LD_ADDR_VAR 0 7
17347: PUSH
17348: LD_VAR 0 3
17352: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17353: LD_STRING getStreamItemsFromMission("
17355: PUSH
17356: LD_VAR 0 5
17360: STR
17361: PUSH
17362: LD_STRING ","
17364: STR
17365: PUSH
17366: LD_VAR 0 6
17370: STR
17371: PUSH
17372: LD_STRING ","
17374: STR
17375: PUSH
17376: LD_VAR 0 7
17380: STR
17381: PUSH
17382: LD_STRING ")
17384: STR
17385: PPUSH
17386: CALL_OW 559
// end else
17390: GO 17399
// ToLua ( getStreamItemsFromMission("","","") ) ;
17392: LD_STRING getStreamItemsFromMission("","","")
17394: PPUSH
17395: CALL_OW 559
// end ;
17399: LD_VAR 0 2
17403: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17404: LD_EXP 48
17408: IFFALSE 17416
17410: PUSH
17411: LD_EXP 53
17415: AND
17416: IFFALSE 17540
17418: GO 17420
17420: DISABLE
17421: LD_INT 0
17423: PPUSH
17424: PPUSH
// begin enable ;
17425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17426: LD_ADDR_VAR 0 2
17430: PUSH
17431: LD_INT 22
17433: PUSH
17434: LD_OWVAR 2
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: LD_INT 34
17448: PUSH
17449: LD_INT 7
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 34
17458: PUSH
17459: LD_INT 45
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 34
17468: PUSH
17469: LD_INT 28
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 34
17478: PUSH
17479: LD_INT 47
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: ST_TO_ADDR
// if not tmp then
17502: LD_VAR 0 2
17506: NOT
17507: IFFALSE 17511
// exit ;
17509: GO 17540
// for i in tmp do
17511: LD_ADDR_VAR 0 1
17515: PUSH
17516: LD_VAR 0 2
17520: PUSH
17521: FOR_IN
17522: IFFALSE 17538
// begin SetLives ( i , 0 ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_INT 0
17531: PPUSH
17532: CALL_OW 234
// end ;
17536: GO 17521
17538: POP
17539: POP
// end ;
17540: PPOPN 2
17542: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17543: LD_EXP 48
17547: IFFALSE 17555
17549: PUSH
17550: LD_EXP 54
17554: AND
17555: IFFALSE 17639
17557: GO 17559
17559: DISABLE
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
// begin enable ;
17564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17565: LD_ADDR_VAR 0 2
17569: PUSH
17570: LD_INT 22
17572: PUSH
17573: LD_OWVAR 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 32
17584: PUSH
17585: LD_INT 3
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 2
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17639
// for i in tmp do
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_VAR 0 2
17619: PUSH
17620: FOR_IN
17621: IFFALSE 17637
// begin SetLives ( i , 0 ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_INT 0
17630: PPUSH
17631: CALL_OW 234
// end ;
17635: GO 17620
17637: POP
17638: POP
// end ;
17639: PPOPN 2
17641: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17642: LD_EXP 48
17646: IFFALSE 17654
17648: PUSH
17649: LD_EXP 51
17653: AND
17654: IFFALSE 17747
17656: GO 17658
17658: DISABLE
17659: LD_INT 0
17661: PPUSH
// begin enable ;
17662: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17663: LD_ADDR_VAR 0 1
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_OWVAR 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: LD_INT 25
17685: PUSH
17686: LD_INT 5
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 25
17695: PUSH
17696: LD_INT 9
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 25
17705: PUSH
17706: LD_INT 8
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: PUSH
17728: FOR_IN
17729: IFFALSE 17745
// begin SetClass ( i , 1 ) ;
17731: LD_VAR 0 1
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 336
// end ;
17743: GO 17728
17745: POP
17746: POP
// end ;
17747: PPOPN 1
17749: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17750: LD_EXP 48
17754: IFFALSE 17762
17756: PUSH
17757: LD_EXP 52
17761: AND
17762: IFFALSE 17774
17764: PUSH
17765: LD_OWVAR 65
17769: PUSH
17770: LD_INT 7
17772: LESS
17773: AND
17774: IFFALSE 17788
17776: GO 17778
17778: DISABLE
// begin enable ;
17779: ENABLE
// game_speed := 7 ;
17780: LD_ADDR_OWVAR 65
17784: PUSH
17785: LD_INT 7
17787: ST_TO_ADDR
// end ;
17788: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17789: LD_EXP 48
17793: IFFALSE 17801
17795: PUSH
17796: LD_EXP 55
17800: AND
17801: IFFALSE 18003
17803: GO 17805
17805: DISABLE
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: LD_INT 81
17818: PUSH
17819: LD_OWVAR 2
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 21
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 69
17846: ST_TO_ADDR
// if not tmp then
17847: LD_VAR 0 3
17851: NOT
17852: IFFALSE 17856
// exit ;
17854: GO 18003
// if tmp > 5 then
17856: LD_VAR 0 3
17860: PUSH
17861: LD_INT 5
17863: GREATER
17864: IFFALSE 17876
// k := 5 else
17866: LD_ADDR_VAR 0 2
17870: PUSH
17871: LD_INT 5
17873: ST_TO_ADDR
17874: GO 17886
// k := tmp ;
17876: LD_ADDR_VAR 0 2
17880: PUSH
17881: LD_VAR 0 3
17885: ST_TO_ADDR
// for i := 1 to k do
17886: LD_ADDR_VAR 0 1
17890: PUSH
17891: DOUBLE
17892: LD_INT 1
17894: DEC
17895: ST_TO_ADDR
17896: LD_VAR 0 2
17900: PUSH
17901: FOR_TO
17902: IFFALSE 18001
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17904: LD_VAR 0 3
17908: PUSH
17909: LD_VAR 0 1
17913: ARRAY
17914: PPUSH
17915: LD_VAR 0 1
17919: PUSH
17920: LD_INT 4
17922: MOD
17923: PUSH
17924: LD_INT 1
17926: PLUS
17927: PPUSH
17928: CALL_OW 259
17932: PUSH
17933: LD_INT 10
17935: LESS
17936: IFFALSE 17999
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17938: LD_VAR 0 3
17942: PUSH
17943: LD_VAR 0 1
17947: ARRAY
17948: PPUSH
17949: LD_VAR 0 1
17953: PUSH
17954: LD_INT 4
17956: MOD
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: PPUSH
17962: LD_VAR 0 3
17966: PUSH
17967: LD_VAR 0 1
17971: ARRAY
17972: PPUSH
17973: LD_VAR 0 1
17977: PUSH
17978: LD_INT 4
17980: MOD
17981: PUSH
17982: LD_INT 1
17984: PLUS
17985: PPUSH
17986: CALL_OW 259
17990: PUSH
17991: LD_INT 1
17993: PLUS
17994: PPUSH
17995: CALL_OW 237
17999: GO 17901
18001: POP
18002: POP
// end ;
18003: PPOPN 3
18005: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18006: LD_EXP 48
18010: IFFALSE 18018
18012: PUSH
18013: LD_EXP 56
18017: AND
18018: IFFALSE 18038
18020: GO 18022
18022: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18023: LD_INT 4
18025: PPUSH
18026: LD_OWVAR 2
18030: PPUSH
18031: LD_INT 0
18033: PPUSH
18034: CALL_OW 324
18038: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18039: LD_EXP 48
18043: IFFALSE 18051
18045: PUSH
18046: LD_EXP 85
18050: AND
18051: IFFALSE 18071
18053: GO 18055
18055: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18056: LD_INT 19
18058: PPUSH
18059: LD_OWVAR 2
18063: PPUSH
18064: LD_INT 0
18066: PPUSH
18067: CALL_OW 324
18071: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18072: LD_EXP 48
18076: IFFALSE 18084
18078: PUSH
18079: LD_EXP 57
18083: AND
18084: IFFALSE 18186
18086: GO 18088
18088: DISABLE
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
// begin enable ;
18093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18094: LD_ADDR_VAR 0 2
18098: PUSH
18099: LD_INT 22
18101: PUSH
18102: LD_OWVAR 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 2
18113: PUSH
18114: LD_INT 34
18116: PUSH
18117: LD_INT 11
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 34
18126: PUSH
18127: LD_INT 30
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PPUSH
18143: CALL_OW 69
18147: ST_TO_ADDR
// if not tmp then
18148: LD_VAR 0 2
18152: NOT
18153: IFFALSE 18157
// exit ;
18155: GO 18186
// for i in tmp do
18157: LD_ADDR_VAR 0 1
18161: PUSH
18162: LD_VAR 0 2
18166: PUSH
18167: FOR_IN
18168: IFFALSE 18184
// begin SetLives ( i , 0 ) ;
18170: LD_VAR 0 1
18174: PPUSH
18175: LD_INT 0
18177: PPUSH
18178: CALL_OW 234
// end ;
18182: GO 18167
18184: POP
18185: POP
// end ;
18186: PPOPN 2
18188: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18189: LD_EXP 48
18193: IFFALSE 18201
18195: PUSH
18196: LD_EXP 58
18200: AND
18201: IFFALSE 18221
18203: GO 18205
18205: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18206: LD_INT 32
18208: PPUSH
18209: LD_OWVAR 2
18213: PPUSH
18214: LD_INT 0
18216: PPUSH
18217: CALL_OW 324
18221: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18222: LD_EXP 48
18226: IFFALSE 18234
18228: PUSH
18229: LD_EXP 59
18233: AND
18234: IFFALSE 18417
18236: GO 18238
18238: DISABLE
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
18243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18244: LD_ADDR_VAR 0 2
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_OWVAR 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 33
18263: PUSH
18264: LD_INT 3
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: ST_TO_ADDR
// if not tmp then
18280: LD_VAR 0 2
18284: NOT
18285: IFFALSE 18289
// exit ;
18287: GO 18417
// side := 0 ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_INT 0
18296: ST_TO_ADDR
// for i := 1 to 8 do
18297: LD_ADDR_VAR 0 1
18301: PUSH
18302: DOUBLE
18303: LD_INT 1
18305: DEC
18306: ST_TO_ADDR
18307: LD_INT 8
18309: PUSH
18310: FOR_TO
18311: IFFALSE 18361
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18313: LD_OWVAR 2
18317: PUSH
18318: LD_VAR 0 1
18322: NONEQUAL
18323: IFFALSE 18345
18325: PUSH
18326: LD_OWVAR 2
18330: PPUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 81
18340: PUSH
18341: LD_INT 2
18343: EQUAL
18344: AND
18345: IFFALSE 18359
// begin side := i ;
18347: LD_ADDR_VAR 0 3
18351: PUSH
18352: LD_VAR 0 1
18356: ST_TO_ADDR
// break ;
18357: GO 18361
// end ;
18359: GO 18310
18361: POP
18362: POP
// if not side then
18363: LD_VAR 0 3
18367: NOT
18368: IFFALSE 18372
// exit ;
18370: GO 18417
// for i := 1 to tmp do
18372: LD_ADDR_VAR 0 1
18376: PUSH
18377: DOUBLE
18378: LD_INT 1
18380: DEC
18381: ST_TO_ADDR
18382: LD_VAR 0 2
18386: PUSH
18387: FOR_TO
18388: IFFALSE 18415
// if Prob ( 60 ) then
18390: LD_INT 60
18392: PPUSH
18393: CALL_OW 13
18397: IFFALSE 18413
// SetSide ( i , side ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: CALL_OW 235
18413: GO 18387
18415: POP
18416: POP
// end ;
18417: PPOPN 3
18419: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18420: LD_EXP 48
18424: IFFALSE 18432
18426: PUSH
18427: LD_EXP 61
18431: AND
18432: IFFALSE 18551
18434: GO 18436
18436: DISABLE
18437: LD_INT 0
18439: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 21
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 3
18469: PUSH
18470: LD_INT 23
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18549
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 257
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: LD_INT 4
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: IN
18525: IFFALSE 18547
// SetClass ( un , rand ( 1 , 4 ) ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: LD_INT 4
18537: PPUSH
18538: CALL_OW 12
18542: PPUSH
18543: CALL_OW 336
18547: GO 18494
18549: POP
18550: POP
// end ;
18551: PPOPN 1
18553: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18554: LD_EXP 48
18558: IFFALSE 18566
18560: PUSH
18561: LD_EXP 60
18565: AND
18566: IFFALSE 18645
18568: GO 18570
18570: DISABLE
18571: LD_INT 0
18573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18574: LD_ADDR_VAR 0 1
18578: PUSH
18579: LD_INT 22
18581: PUSH
18582: LD_OWVAR 2
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 21
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PPUSH
18605: CALL_OW 69
18609: ST_TO_ADDR
// if not tmp then
18610: LD_VAR 0 1
18614: NOT
18615: IFFALSE 18619
// exit ;
18617: GO 18645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18619: LD_VAR 0 1
18623: PUSH
18624: LD_INT 1
18626: PPUSH
18627: LD_VAR 0 1
18631: PPUSH
18632: CALL_OW 12
18636: ARRAY
18637: PPUSH
18638: LD_INT 100
18640: PPUSH
18641: CALL_OW 234
// end ;
18645: PPOPN 1
18647: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18648: LD_EXP 48
18652: IFFALSE 18660
18654: PUSH
18655: LD_EXP 62
18659: AND
18660: IFFALSE 18758
18662: GO 18664
18664: DISABLE
18665: LD_INT 0
18667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18668: LD_ADDR_VAR 0 1
18672: PUSH
18673: LD_INT 22
18675: PUSH
18676: LD_OWVAR 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 21
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PPUSH
18699: CALL_OW 69
18703: ST_TO_ADDR
// if not tmp then
18704: LD_VAR 0 1
18708: NOT
18709: IFFALSE 18713
// exit ;
18711: GO 18758
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18713: LD_VAR 0 1
18717: PUSH
18718: LD_INT 1
18720: PPUSH
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 12
18730: ARRAY
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: LD_INT 4
18737: PPUSH
18738: CALL_OW 12
18742: PPUSH
18743: LD_INT 3000
18745: PPUSH
18746: LD_INT 9000
18748: PPUSH
18749: CALL_OW 12
18753: PPUSH
18754: CALL_OW 492
// end ;
18758: PPOPN 1
18760: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18761: LD_EXP 48
18765: IFFALSE 18773
18767: PUSH
18768: LD_EXP 63
18772: AND
18773: IFFALSE 18793
18775: GO 18777
18777: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18778: LD_INT 1
18780: PPUSH
18781: LD_OWVAR 2
18785: PPUSH
18786: LD_INT 0
18788: PPUSH
18789: CALL_OW 324
18793: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18794: LD_EXP 48
18798: IFFALSE 18806
18800: PUSH
18801: LD_EXP 64
18805: AND
18806: IFFALSE 18889
18808: GO 18810
18810: DISABLE
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_OWVAR 2
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: ST_TO_ADDR
// if not tmp then
18851: LD_VAR 0 2
18855: NOT
18856: IFFALSE 18860
// exit ;
18858: GO 18889
// for i in tmp do
18860: LD_ADDR_VAR 0 1
18864: PUSH
18865: LD_VAR 0 2
18869: PUSH
18870: FOR_IN
18871: IFFALSE 18887
// SetBLevel ( i , 10 ) ;
18873: LD_VAR 0 1
18877: PPUSH
18878: LD_INT 10
18880: PPUSH
18881: CALL_OW 241
18885: GO 18870
18887: POP
18888: POP
// end ;
18889: PPOPN 2
18891: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18892: LD_EXP 48
18896: IFFALSE 18904
18898: PUSH
18899: LD_EXP 65
18903: AND
18904: IFFALSE 19015
18906: GO 18908
18908: DISABLE
18909: LD_INT 0
18911: PPUSH
18912: PPUSH
18913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18914: LD_ADDR_VAR 0 3
18918: PUSH
18919: LD_INT 22
18921: PUSH
18922: LD_OWVAR 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 25
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: ST_TO_ADDR
// if not tmp then
18950: LD_VAR 0 3
18954: NOT
18955: IFFALSE 18959
// exit ;
18957: GO 19015
// un := tmp [ rand ( 1 , tmp ) ] ;
18959: LD_ADDR_VAR 0 2
18963: PUSH
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 1
18971: PPUSH
18972: LD_VAR 0 3
18976: PPUSH
18977: CALL_OW 12
18981: ARRAY
18982: ST_TO_ADDR
// if Crawls ( un ) then
18983: LD_VAR 0 2
18987: PPUSH
18988: CALL_OW 318
18992: IFFALSE 19003
// ComWalk ( un ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19003: LD_VAR 0 2
19007: PPUSH
19008: LD_INT 5
19010: PPUSH
19011: CALL_OW 336
// end ;
19015: PPOPN 3
19017: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19018: LD_EXP 48
19022: IFFALSE 19030
19024: PUSH
19025: LD_EXP 66
19029: AND
19030: IFFALSE 19042
19032: PUSH
19033: LD_OWVAR 67
19037: PUSH
19038: LD_INT 4
19040: LESS
19041: AND
19042: IFFALSE 19061
19044: GO 19046
19046: DISABLE
// begin Difficulty := Difficulty + 1 ;
19047: LD_ADDR_OWVAR 67
19051: PUSH
19052: LD_OWVAR 67
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: ST_TO_ADDR
// end ;
19061: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19062: LD_EXP 48
19066: IFFALSE 19074
19068: PUSH
19069: LD_EXP 67
19073: AND
19074: IFFALSE 19177
19076: GO 19078
19078: DISABLE
19079: LD_INT 0
19081: PPUSH
// begin for i := 1 to 5 do
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: DOUBLE
19088: LD_INT 1
19090: DEC
19091: ST_TO_ADDR
19092: LD_INT 5
19094: PUSH
19095: FOR_TO
19096: IFFALSE 19175
// begin uc_nation := nation_nature ;
19098: LD_ADDR_OWVAR 21
19102: PUSH
19103: LD_INT 0
19105: ST_TO_ADDR
// uc_side := 0 ;
19106: LD_ADDR_OWVAR 20
19110: PUSH
19111: LD_INT 0
19113: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19114: LD_ADDR_OWVAR 29
19118: PUSH
19119: LD_INT 12
19121: PUSH
19122: LD_INT 12
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: ST_TO_ADDR
// hc_agressivity := 20 ;
19129: LD_ADDR_OWVAR 35
19133: PUSH
19134: LD_INT 20
19136: ST_TO_ADDR
// hc_class := class_tiger ;
19137: LD_ADDR_OWVAR 28
19141: PUSH
19142: LD_INT 14
19144: ST_TO_ADDR
// hc_gallery :=  ;
19145: LD_ADDR_OWVAR 33
19149: PUSH
19150: LD_STRING 
19152: ST_TO_ADDR
// hc_name :=  ;
19153: LD_ADDR_OWVAR 26
19157: PUSH
19158: LD_STRING 
19160: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19161: CALL_OW 44
19165: PPUSH
19166: LD_INT 0
19168: PPUSH
19169: CALL_OW 51
// end ;
19173: GO 19095
19175: POP
19176: POP
// end ;
19177: PPOPN 1
19179: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19180: LD_EXP 48
19184: IFFALSE 19192
19186: PUSH
19187: LD_EXP 68
19191: AND
19192: IFFALSE 19201
19194: GO 19196
19196: DISABLE
// StreamSibBomb ;
19197: CALL 19202 0 0
19201: END
// export function StreamSibBomb ; var i , x , y ; begin
19202: LD_INT 0
19204: PPUSH
19205: PPUSH
19206: PPUSH
19207: PPUSH
// result := false ;
19208: LD_ADDR_VAR 0 1
19212: PUSH
19213: LD_INT 0
19215: ST_TO_ADDR
// for i := 1 to 16 do
19216: LD_ADDR_VAR 0 2
19220: PUSH
19221: DOUBLE
19222: LD_INT 1
19224: DEC
19225: ST_TO_ADDR
19226: LD_INT 16
19228: PUSH
19229: FOR_TO
19230: IFFALSE 19429
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19232: LD_ADDR_VAR 0 3
19236: PUSH
19237: LD_INT 10
19239: PUSH
19240: LD_INT 20
19242: PUSH
19243: LD_INT 30
19245: PUSH
19246: LD_INT 40
19248: PUSH
19249: LD_INT 50
19251: PUSH
19252: LD_INT 60
19254: PUSH
19255: LD_INT 70
19257: PUSH
19258: LD_INT 80
19260: PUSH
19261: LD_INT 90
19263: PUSH
19264: LD_INT 100
19266: PUSH
19267: LD_INT 110
19269: PUSH
19270: LD_INT 120
19272: PUSH
19273: LD_INT 130
19275: PUSH
19276: LD_INT 140
19278: PUSH
19279: LD_INT 150
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PPUSH
19302: LD_INT 15
19304: PPUSH
19305: CALL_OW 12
19309: ARRAY
19310: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19311: LD_ADDR_VAR 0 4
19315: PUSH
19316: LD_INT 10
19318: PUSH
19319: LD_INT 20
19321: PUSH
19322: LD_INT 30
19324: PUSH
19325: LD_INT 40
19327: PUSH
19328: LD_INT 50
19330: PUSH
19331: LD_INT 60
19333: PUSH
19334: LD_INT 70
19336: PUSH
19337: LD_INT 80
19339: PUSH
19340: LD_INT 90
19342: PUSH
19343: LD_INT 100
19345: PUSH
19346: LD_INT 110
19348: PUSH
19349: LD_INT 120
19351: PUSH
19352: LD_INT 130
19354: PUSH
19355: LD_INT 140
19357: PUSH
19358: LD_INT 150
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PPUSH
19381: LD_INT 15
19383: PPUSH
19384: CALL_OW 12
19388: ARRAY
19389: ST_TO_ADDR
// if ValidHex ( x , y ) then
19390: LD_VAR 0 3
19394: PPUSH
19395: LD_VAR 0 4
19399: PPUSH
19400: CALL_OW 488
19404: IFFALSE 19427
// begin result := [ x , y ] ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_VAR 0 3
19415: PUSH
19416: LD_VAR 0 4
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: ST_TO_ADDR
// break ;
19425: GO 19429
// end ; end ;
19427: GO 19229
19429: POP
19430: POP
// if result then
19431: LD_VAR 0 1
19435: IFFALSE 19495
// begin ToLua ( playSibBomb() ) ;
19437: LD_STRING playSibBomb()
19439: PPUSH
19440: CALL_OW 559
// wait ( 0 0$14 ) ;
19444: LD_INT 490
19446: PPUSH
19447: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19451: LD_VAR 0 1
19455: PUSH
19456: LD_INT 1
19458: ARRAY
19459: PPUSH
19460: LD_VAR 0 1
19464: PUSH
19465: LD_INT 2
19467: ARRAY
19468: PPUSH
19469: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19473: LD_VAR 0 1
19477: PUSH
19478: LD_INT 1
19480: ARRAY
19481: PPUSH
19482: LD_VAR 0 1
19486: PUSH
19487: LD_INT 2
19489: ARRAY
19490: PPUSH
19491: CALL_OW 429
// end ; end ;
19495: LD_VAR 0 1
19499: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19500: LD_EXP 48
19504: IFFALSE 19512
19506: PUSH
19507: LD_EXP 70
19511: AND
19512: IFFALSE 19524
19514: GO 19516
19516: DISABLE
// YouLost (  ) ;
19517: LD_STRING 
19519: PPUSH
19520: CALL_OW 104
19524: END
// every 0 0$1 trigger StreamModeActive and sFog do
19525: LD_EXP 48
19529: IFFALSE 19537
19531: PUSH
19532: LD_EXP 69
19536: AND
19537: IFFALSE 19551
19539: GO 19541
19541: DISABLE
// FogOff ( your_side ) ;
19542: LD_OWVAR 2
19546: PPUSH
19547: CALL_OW 344
19551: END
// every 0 0$1 trigger StreamModeActive and sSun do
19552: LD_EXP 48
19556: IFFALSE 19564
19558: PUSH
19559: LD_EXP 71
19563: AND
19564: IFFALSE 19592
19566: GO 19568
19568: DISABLE
// begin solar_recharge_percent := 0 ;
19569: LD_ADDR_OWVAR 79
19573: PUSH
19574: LD_INT 0
19576: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19577: LD_INT 10500
19579: PPUSH
19580: CALL_OW 67
// solar_recharge_percent := 100 ;
19584: LD_ADDR_OWVAR 79
19588: PUSH
19589: LD_INT 100
19591: ST_TO_ADDR
// end ;
19592: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19593: LD_EXP 48
19597: IFFALSE 19605
19599: PUSH
19600: LD_EXP 72
19604: AND
19605: IFFALSE 19844
19607: GO 19609
19609: DISABLE
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
19614: PPUSH
// begin tmp := [ ] ;
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: EMPTY
19621: ST_TO_ADDR
// for i := 1 to 6 do
19622: LD_ADDR_VAR 0 1
19626: PUSH
19627: DOUBLE
19628: LD_INT 1
19630: DEC
19631: ST_TO_ADDR
19632: LD_INT 6
19634: PUSH
19635: FOR_TO
19636: IFFALSE 19741
// begin uc_nation := nation_nature ;
19638: LD_ADDR_OWVAR 21
19642: PUSH
19643: LD_INT 0
19645: ST_TO_ADDR
// uc_side := 0 ;
19646: LD_ADDR_OWVAR 20
19650: PUSH
19651: LD_INT 0
19653: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19654: LD_ADDR_OWVAR 29
19658: PUSH
19659: LD_INT 12
19661: PUSH
19662: LD_INT 12
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: ST_TO_ADDR
// hc_agressivity := 20 ;
19669: LD_ADDR_OWVAR 35
19673: PUSH
19674: LD_INT 20
19676: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19677: LD_ADDR_OWVAR 28
19681: PUSH
19682: LD_INT 17
19684: ST_TO_ADDR
// hc_gallery :=  ;
19685: LD_ADDR_OWVAR 33
19689: PUSH
19690: LD_STRING 
19692: ST_TO_ADDR
// hc_name :=  ;
19693: LD_ADDR_OWVAR 26
19697: PUSH
19698: LD_STRING 
19700: ST_TO_ADDR
// un := CreateHuman ;
19701: LD_ADDR_VAR 0 2
19705: PUSH
19706: CALL_OW 44
19710: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19711: LD_VAR 0 2
19715: PPUSH
19716: LD_INT 1
19718: PPUSH
19719: CALL_OW 51
// tmp := tmp ^ un ;
19723: LD_ADDR_VAR 0 3
19727: PUSH
19728: LD_VAR 0 3
19732: PUSH
19733: LD_VAR 0 2
19737: ADD
19738: ST_TO_ADDR
// end ;
19739: GO 19635
19741: POP
19742: POP
// repeat wait ( 0 0$1 ) ;
19743: LD_INT 35
19745: PPUSH
19746: CALL_OW 67
// for un in tmp do
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: LD_VAR 0 3
19759: PUSH
19760: FOR_IN
19761: IFFALSE 19835
// begin if IsDead ( un ) then
19763: LD_VAR 0 2
19767: PPUSH
19768: CALL_OW 301
19772: IFFALSE 19792
// begin tmp := tmp diff un ;
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_VAR 0 3
19783: PUSH
19784: LD_VAR 0 2
19788: DIFF
19789: ST_TO_ADDR
// continue ;
19790: GO 19760
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19792: LD_VAR 0 2
19796: PPUSH
19797: LD_INT 3
19799: PUSH
19800: LD_INT 22
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PPUSH
19814: CALL_OW 69
19818: PPUSH
19819: LD_VAR 0 2
19823: PPUSH
19824: CALL_OW 74
19828: PPUSH
19829: CALL_OW 115
// end ;
19833: GO 19760
19835: POP
19836: POP
// until not tmp ;
19837: LD_VAR 0 3
19841: NOT
19842: IFFALSE 19743
// end ;
19844: PPOPN 3
19846: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19847: LD_EXP 48
19851: IFFALSE 19859
19853: PUSH
19854: LD_EXP 73
19858: AND
19859: IFFALSE 19913
19861: GO 19863
19863: DISABLE
// begin ToLua ( displayTroll(); ) ;
19864: LD_STRING displayTroll();
19866: PPUSH
19867: CALL_OW 559
// wait ( 3 3$00 ) ;
19871: LD_INT 6300
19873: PPUSH
19874: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19878: LD_STRING hideTroll();
19880: PPUSH
19881: CALL_OW 559
// wait ( 1 1$00 ) ;
19885: LD_INT 2100
19887: PPUSH
19888: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19892: LD_STRING displayTroll();
19894: PPUSH
19895: CALL_OW 559
// wait ( 1 1$00 ) ;
19899: LD_INT 2100
19901: PPUSH
19902: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19906: LD_STRING hideTroll();
19908: PPUSH
19909: CALL_OW 559
// end ;
19913: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19914: LD_EXP 48
19918: IFFALSE 19926
19920: PUSH
19921: LD_EXP 74
19925: AND
19926: IFFALSE 19989
19928: GO 19930
19930: DISABLE
19931: LD_INT 0
19933: PPUSH
// begin p := 0 ;
19934: LD_ADDR_VAR 0 1
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// repeat game_speed := 1 ;
19942: LD_ADDR_OWVAR 65
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19950: LD_INT 35
19952: PPUSH
19953: CALL_OW 67
// p := p + 1 ;
19957: LD_ADDR_VAR 0 1
19961: PUSH
19962: LD_VAR 0 1
19966: PUSH
19967: LD_INT 1
19969: PLUS
19970: ST_TO_ADDR
// until p >= 60 ;
19971: LD_VAR 0 1
19975: PUSH
19976: LD_INT 60
19978: GREATEREQUAL
19979: IFFALSE 19942
// game_speed := 4 ;
19981: LD_ADDR_OWVAR 65
19985: PUSH
19986: LD_INT 4
19988: ST_TO_ADDR
// end ;
19989: PPOPN 1
19991: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19992: LD_EXP 48
19996: IFFALSE 20004
19998: PUSH
19999: LD_EXP 75
20003: AND
20004: IFFALSE 20150
20006: GO 20008
20008: DISABLE
20009: LD_INT 0
20011: PPUSH
20012: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20013: LD_ADDR_VAR 0 1
20017: PUSH
20018: LD_INT 22
20020: PUSH
20021: LD_OWVAR 2
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 30
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 30
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: ST_TO_ADDR
// if not depot then
20067: LD_VAR 0 1
20071: NOT
20072: IFFALSE 20076
// exit ;
20074: GO 20150
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20076: LD_ADDR_VAR 0 2
20080: PUSH
20081: LD_VAR 0 1
20085: PUSH
20086: LD_INT 1
20088: PPUSH
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 12
20098: ARRAY
20099: PPUSH
20100: CALL_OW 274
20104: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20105: LD_VAR 0 2
20109: PPUSH
20110: LD_INT 1
20112: PPUSH
20113: LD_INT 0
20115: PPUSH
20116: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_INT 2
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20135: LD_VAR 0 2
20139: PPUSH
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 0
20145: PPUSH
20146: CALL_OW 277
// end ;
20150: PPOPN 2
20152: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20153: LD_EXP 48
20157: IFFALSE 20165
20159: PUSH
20160: LD_EXP 76
20164: AND
20165: IFFALSE 20262
20167: GO 20169
20169: DISABLE
20170: LD_INT 0
20172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20173: LD_ADDR_VAR 0 1
20177: PUSH
20178: LD_INT 22
20180: PUSH
20181: LD_OWVAR 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 21
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 3
20202: PUSH
20203: LD_INT 23
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: PPUSH
20222: CALL_OW 69
20226: ST_TO_ADDR
// if not tmp then
20227: LD_VAR 0 1
20231: NOT
20232: IFFALSE 20236
// exit ;
20234: GO 20262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20236: LD_VAR 0 1
20240: PUSH
20241: LD_INT 1
20243: PPUSH
20244: LD_VAR 0 1
20248: PPUSH
20249: CALL_OW 12
20253: ARRAY
20254: PPUSH
20255: LD_INT 200
20257: PPUSH
20258: CALL_OW 234
// end ;
20262: PPOPN 1
20264: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20265: LD_EXP 48
20269: IFFALSE 20277
20271: PUSH
20272: LD_EXP 77
20276: AND
20277: IFFALSE 20356
20279: GO 20281
20281: DISABLE
20282: LD_INT 0
20284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20285: LD_ADDR_VAR 0 1
20289: PUSH
20290: LD_INT 22
20292: PUSH
20293: LD_OWVAR 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 21
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 69
20320: ST_TO_ADDR
// if not tmp then
20321: LD_VAR 0 1
20325: NOT
20326: IFFALSE 20330
// exit ;
20328: GO 20356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20330: LD_VAR 0 1
20334: PUSH
20335: LD_INT 1
20337: PPUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 12
20347: ARRAY
20348: PPUSH
20349: LD_INT 60
20351: PPUSH
20352: CALL_OW 234
// end ;
20356: PPOPN 1
20358: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20359: LD_EXP 48
20363: IFFALSE 20371
20365: PUSH
20366: LD_EXP 78
20370: AND
20371: IFFALSE 20470
20373: GO 20375
20375: DISABLE
20376: LD_INT 0
20378: PPUSH
20379: PPUSH
// begin enable ;
20380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20381: LD_ADDR_VAR 0 1
20385: PUSH
20386: LD_INT 22
20388: PUSH
20389: LD_OWVAR 2
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 61
20400: PUSH
20401: EMPTY
20402: LIST
20403: PUSH
20404: LD_INT 33
20406: PUSH
20407: LD_INT 2
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: PPUSH
20419: CALL_OW 69
20423: ST_TO_ADDR
// if not tmp then
20424: LD_VAR 0 1
20428: NOT
20429: IFFALSE 20433
// exit ;
20431: GO 20470
// for i in tmp do
20433: LD_ADDR_VAR 0 2
20437: PUSH
20438: LD_VAR 0 1
20442: PUSH
20443: FOR_IN
20444: IFFALSE 20468
// if IsControledBy ( i ) then
20446: LD_VAR 0 2
20450: PPUSH
20451: CALL_OW 312
20455: IFFALSE 20466
// ComUnlink ( i ) ;
20457: LD_VAR 0 2
20461: PPUSH
20462: CALL_OW 136
20466: GO 20443
20468: POP
20469: POP
// end ;
20470: PPOPN 2
20472: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20473: LD_EXP 48
20477: IFFALSE 20485
20479: PUSH
20480: LD_EXP 79
20484: AND
20485: IFFALSE 20625
20487: GO 20489
20489: DISABLE
20490: LD_INT 0
20492: PPUSH
20493: PPUSH
// begin ToLua ( displayPowell(); ) ;
20494: LD_STRING displayPowell();
20496: PPUSH
20497: CALL_OW 559
// uc_side := 0 ;
20501: LD_ADDR_OWVAR 20
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// uc_nation := 2 ;
20509: LD_ADDR_OWVAR 21
20513: PUSH
20514: LD_INT 2
20516: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20517: LD_ADDR_OWVAR 37
20521: PUSH
20522: LD_INT 14
20524: ST_TO_ADDR
// vc_engine := engine_siberite ;
20525: LD_ADDR_OWVAR 39
20529: PUSH
20530: LD_INT 3
20532: ST_TO_ADDR
// vc_control := control_apeman ;
20533: LD_ADDR_OWVAR 38
20537: PUSH
20538: LD_INT 5
20540: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20541: LD_ADDR_OWVAR 40
20545: PUSH
20546: LD_INT 29
20548: ST_TO_ADDR
// un := CreateVehicle ;
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: CALL_OW 45
20558: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20559: LD_VAR 0 2
20563: PPUSH
20564: LD_INT 1
20566: PPUSH
20567: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20571: LD_INT 35
20573: PPUSH
20574: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20578: LD_VAR 0 2
20582: PPUSH
20583: LD_INT 22
20585: PUSH
20586: LD_OWVAR 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PPUSH
20595: CALL_OW 69
20599: PPUSH
20600: LD_VAR 0 2
20604: PPUSH
20605: CALL_OW 74
20609: PPUSH
20610: CALL_OW 115
// until IsDead ( un ) ;
20614: LD_VAR 0 2
20618: PPUSH
20619: CALL_OW 301
20623: IFFALSE 20571
// end ;
20625: PPOPN 2
20627: END
// every 0 0$1 trigger StreamModeActive and sStu do
20628: LD_EXP 48
20632: IFFALSE 20640
20634: PUSH
20635: LD_EXP 87
20639: AND
20640: IFFALSE 20656
20642: GO 20644
20644: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20645: LD_STRING displayStucuk();
20647: PPUSH
20648: CALL_OW 559
// ResetFog ;
20652: CALL_OW 335
// end ;
20656: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20657: LD_EXP 48
20661: IFFALSE 20669
20663: PUSH
20664: LD_EXP 80
20668: AND
20669: IFFALSE 20810
20671: GO 20673
20673: DISABLE
20674: LD_INT 0
20676: PPUSH
20677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20678: LD_ADDR_VAR 0 2
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_OWVAR 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 21
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PPUSH
20709: CALL_OW 69
20713: ST_TO_ADDR
// if not tmp then
20714: LD_VAR 0 2
20718: NOT
20719: IFFALSE 20723
// exit ;
20721: GO 20810
// un := tmp [ rand ( 1 , tmp ) ] ;
20723: LD_ADDR_VAR 0 1
20727: PUSH
20728: LD_VAR 0 2
20732: PUSH
20733: LD_INT 1
20735: PPUSH
20736: LD_VAR 0 2
20740: PPUSH
20741: CALL_OW 12
20745: ARRAY
20746: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20747: LD_VAR 0 1
20751: PPUSH
20752: LD_INT 0
20754: PPUSH
20755: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20759: LD_VAR 0 1
20763: PPUSH
20764: LD_OWVAR 3
20768: PUSH
20769: LD_VAR 0 1
20773: DIFF
20774: PPUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 74
20784: PPUSH
20785: CALL_OW 115
// wait ( 0 0$20 ) ;
20789: LD_INT 700
20791: PPUSH
20792: CALL_OW 67
// SetSide ( un , your_side ) ;
20796: LD_VAR 0 1
20800: PPUSH
20801: LD_OWVAR 2
20805: PPUSH
20806: CALL_OW 235
// end ;
20810: PPOPN 2
20812: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20813: LD_EXP 48
20817: IFFALSE 20825
20819: PUSH
20820: LD_EXP 81
20824: AND
20825: IFFALSE 20931
20827: GO 20829
20829: DISABLE
20830: LD_INT 0
20832: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20833: LD_ADDR_VAR 0 1
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_OWVAR 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: LD_INT 30
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 30
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: ST_TO_ADDR
// if not depot then
20887: LD_VAR 0 1
20891: NOT
20892: IFFALSE 20896
// exit ;
20894: GO 20931
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20896: LD_VAR 0 1
20900: PUSH
20901: LD_INT 1
20903: ARRAY
20904: PPUSH
20905: CALL_OW 250
20909: PPUSH
20910: LD_VAR 0 1
20914: PUSH
20915: LD_INT 1
20917: ARRAY
20918: PPUSH
20919: CALL_OW 251
20923: PPUSH
20924: LD_INT 70
20926: PPUSH
20927: CALL_OW 495
// end ;
20931: PPOPN 1
20933: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20934: LD_EXP 48
20938: IFFALSE 20946
20940: PUSH
20941: LD_EXP 82
20945: AND
20946: IFFALSE 21157
20948: GO 20950
20950: DISABLE
20951: LD_INT 0
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20958: LD_ADDR_VAR 0 5
20962: PUSH
20963: LD_INT 22
20965: PUSH
20966: LD_OWVAR 2
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 21
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PPUSH
20989: CALL_OW 69
20993: ST_TO_ADDR
// if not tmp then
20994: LD_VAR 0 5
20998: NOT
20999: IFFALSE 21003
// exit ;
21001: GO 21157
// for i in tmp do
21003: LD_ADDR_VAR 0 1
21007: PUSH
21008: LD_VAR 0 5
21012: PUSH
21013: FOR_IN
21014: IFFALSE 21155
// begin d := rand ( 0 , 5 ) ;
21016: LD_ADDR_VAR 0 4
21020: PUSH
21021: LD_INT 0
21023: PPUSH
21024: LD_INT 5
21026: PPUSH
21027: CALL_OW 12
21031: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21032: LD_ADDR_VAR 0 2
21036: PUSH
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 250
21046: PPUSH
21047: LD_VAR 0 4
21051: PPUSH
21052: LD_INT 3
21054: PPUSH
21055: LD_INT 12
21057: PPUSH
21058: CALL_OW 12
21062: PPUSH
21063: CALL_OW 272
21067: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21068: LD_ADDR_VAR 0 3
21072: PUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 251
21082: PPUSH
21083: LD_VAR 0 4
21087: PPUSH
21088: LD_INT 3
21090: PPUSH
21091: LD_INT 12
21093: PPUSH
21094: CALL_OW 12
21098: PPUSH
21099: CALL_OW 273
21103: ST_TO_ADDR
// if ValidHex ( x , y ) then
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: CALL_OW 488
21118: IFFALSE 21153
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21120: LD_VAR 0 1
21124: PPUSH
21125: LD_VAR 0 2
21129: PPUSH
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 6
21140: PPUSH
21141: CALL_OW 12
21145: PPUSH
21146: LD_INT 1
21148: PPUSH
21149: CALL_OW 483
// end ;
21153: GO 21013
21155: POP
21156: POP
// end ;
21157: PPOPN 5
21159: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21160: LD_EXP 48
21164: IFFALSE 21172
21166: PUSH
21167: LD_EXP 83
21171: AND
21172: IFFALSE 21266
21174: GO 21176
21176: DISABLE
21177: LD_INT 0
21179: PPUSH
21180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21181: LD_ADDR_VAR 0 2
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 32
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 21
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 69
21227: ST_TO_ADDR
// if not tmp then
21228: LD_VAR 0 2
21232: NOT
21233: IFFALSE 21237
// exit ;
21235: GO 21266
// for i in tmp do
21237: LD_ADDR_VAR 0 1
21241: PUSH
21242: LD_VAR 0 2
21246: PUSH
21247: FOR_IN
21248: IFFALSE 21264
// SetFuel ( i , 0 ) ;
21250: LD_VAR 0 1
21254: PPUSH
21255: LD_INT 0
21257: PPUSH
21258: CALL_OW 240
21262: GO 21247
21264: POP
21265: POP
// end ;
21266: PPOPN 2
21268: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21269: LD_EXP 48
21273: IFFALSE 21281
21275: PUSH
21276: LD_EXP 84
21280: AND
21281: IFFALSE 21347
21283: GO 21285
21285: DISABLE
21286: LD_INT 0
21288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21289: LD_ADDR_VAR 0 1
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_OWVAR 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_INT 29
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: ST_TO_ADDR
// if not tmp then
21325: LD_VAR 0 1
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 21347
// DestroyUnit ( tmp [ 1 ] ) ;
21334: LD_VAR 0 1
21338: PUSH
21339: LD_INT 1
21341: ARRAY
21342: PPUSH
21343: CALL_OW 65
// end ;
21347: PPOPN 1
21349: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21350: LD_EXP 48
21354: IFFALSE 21362
21356: PUSH
21357: LD_EXP 86
21361: AND
21362: IFFALSE 21491
21364: GO 21366
21366: DISABLE
21367: LD_INT 0
21369: PPUSH
// begin uc_side := 0 ;
21370: LD_ADDR_OWVAR 20
21374: PUSH
21375: LD_INT 0
21377: ST_TO_ADDR
// uc_nation := nation_arabian ;
21378: LD_ADDR_OWVAR 21
21382: PUSH
21383: LD_INT 2
21385: ST_TO_ADDR
// hc_gallery :=  ;
21386: LD_ADDR_OWVAR 33
21390: PUSH
21391: LD_STRING 
21393: ST_TO_ADDR
// hc_name :=  ;
21394: LD_ADDR_OWVAR 26
21398: PUSH
21399: LD_STRING 
21401: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21402: LD_INT 1
21404: PPUSH
21405: LD_INT 11
21407: PPUSH
21408: LD_INT 10
21410: PPUSH
21411: CALL_OW 380
// un := CreateHuman ;
21415: LD_ADDR_VAR 0 1
21419: PUSH
21420: CALL_OW 44
21424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21425: LD_VAR 0 1
21429: PPUSH
21430: LD_INT 1
21432: PPUSH
21433: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21437: LD_INT 35
21439: PPUSH
21440: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21444: LD_VAR 0 1
21448: PPUSH
21449: LD_INT 22
21451: PUSH
21452: LD_OWVAR 2
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PPUSH
21461: CALL_OW 69
21465: PPUSH
21466: LD_VAR 0 1
21470: PPUSH
21471: CALL_OW 74
21475: PPUSH
21476: CALL_OW 115
// until IsDead ( un ) ;
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 301
21489: IFFALSE 21437
// end ;
21491: PPOPN 1
21493: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21494: LD_EXP 48
21498: IFFALSE 21506
21500: PUSH
21501: LD_EXP 88
21505: AND
21506: IFFALSE 21518
21508: GO 21510
21510: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21511: LD_STRING earthquake(getX(game), 0, 32)
21513: PPUSH
21514: CALL_OW 559
21518: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21519: LD_EXP 48
21523: IFFALSE 21531
21525: PUSH
21526: LD_EXP 89
21530: AND
21531: IFFALSE 21622
21533: GO 21535
21535: DISABLE
21536: LD_INT 0
21538: PPUSH
// begin enable ;
21539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21540: LD_ADDR_VAR 0 1
21544: PUSH
21545: LD_INT 22
21547: PUSH
21548: LD_OWVAR 2
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 21
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 33
21569: PUSH
21570: LD_INT 3
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: PPUSH
21582: CALL_OW 69
21586: ST_TO_ADDR
// if not tmp then
21587: LD_VAR 0 1
21591: NOT
21592: IFFALSE 21596
// exit ;
21594: GO 21622
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21596: LD_VAR 0 1
21600: PUSH
21601: LD_INT 1
21603: PPUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 12
21613: ARRAY
21614: PPUSH
21615: LD_INT 1
21617: PPUSH
21618: CALL_OW 234
// end ;
21622: PPOPN 1
21624: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21625: LD_EXP 48
21629: IFFALSE 21637
21631: PUSH
21632: LD_EXP 90
21636: AND
21637: IFFALSE 21778
21639: GO 21641
21641: DISABLE
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
21646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21647: LD_ADDR_VAR 0 3
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 25
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 3
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21778
// un := tmp [ rand ( 1 , tmp ) ] ;
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_VAR 0 3
21701: PUSH
21702: LD_INT 1
21704: PPUSH
21705: LD_VAR 0 3
21709: PPUSH
21710: CALL_OW 12
21714: ARRAY
21715: ST_TO_ADDR
// if Crawls ( un ) then
21716: LD_VAR 0 2
21720: PPUSH
21721: CALL_OW 318
21725: IFFALSE 21736
// ComWalk ( un ) ;
21727: LD_VAR 0 2
21731: PPUSH
21732: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21736: LD_VAR 0 2
21740: PPUSH
21741: LD_INT 9
21743: PPUSH
21744: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21748: LD_INT 28
21750: PPUSH
21751: LD_OWVAR 2
21755: PPUSH
21756: LD_INT 2
21758: PPUSH
21759: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21763: LD_INT 29
21765: PPUSH
21766: LD_OWVAR 2
21770: PPUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 322
// end ;
21778: PPOPN 3
21780: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21781: LD_EXP 48
21785: IFFALSE 21793
21787: PUSH
21788: LD_EXP 91
21792: AND
21793: IFFALSE 21904
21795: GO 21797
21797: DISABLE
21798: LD_INT 0
21800: PPUSH
21801: PPUSH
21802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21803: LD_ADDR_VAR 0 3
21807: PUSH
21808: LD_INT 22
21810: PUSH
21811: LD_OWVAR 2
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 25
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PPUSH
21834: CALL_OW 69
21838: ST_TO_ADDR
// if not tmp then
21839: LD_VAR 0 3
21843: NOT
21844: IFFALSE 21848
// exit ;
21846: GO 21904
// un := tmp [ rand ( 1 , tmp ) ] ;
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_VAR 0 3
21857: PUSH
21858: LD_INT 1
21860: PPUSH
21861: LD_VAR 0 3
21865: PPUSH
21866: CALL_OW 12
21870: ARRAY
21871: ST_TO_ADDR
// if Crawls ( un ) then
21872: LD_VAR 0 2
21876: PPUSH
21877: CALL_OW 318
21881: IFFALSE 21892
// ComWalk ( un ) ;
21883: LD_VAR 0 2
21887: PPUSH
21888: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_INT 8
21899: PPUSH
21900: CALL_OW 336
// end ;
21904: PPOPN 3
21906: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21907: LD_EXP 48
21911: IFFALSE 21919
21913: PUSH
21914: LD_EXP 92
21918: AND
21919: IFFALSE 22063
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
21927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_OWVAR 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 21
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 34
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 34
21970: PUSH
21971: LD_INT 51
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 32
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 69
22003: ST_TO_ADDR
// if not tmp then
22004: LD_VAR 0 2
22008: NOT
22009: IFFALSE 22013
// exit ;
22011: GO 22063
// for i in tmp do
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: FOR_IN
22024: IFFALSE 22061
// if GetCargo ( i , mat_artifact ) = 0 then
22026: LD_VAR 0 1
22030: PPUSH
22031: LD_INT 4
22033: PPUSH
22034: CALL_OW 289
22038: PUSH
22039: LD_INT 0
22041: EQUAL
22042: IFFALSE 22059
// SetCargo ( i , mat_siberit , 100 ) ;
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_INT 3
22051: PPUSH
22052: LD_INT 100
22054: PPUSH
22055: CALL_OW 290
22059: GO 22023
22061: POP
22062: POP
// end ;
22063: PPOPN 2
22065: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22066: LD_EXP 48
22070: IFFALSE 22078
22072: PUSH
22073: LD_EXP 93
22077: AND
22078: IFFALSE 22261
22080: GO 22082
22082: DISABLE
22083: LD_INT 0
22085: PPUSH
22086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22087: LD_ADDR_VAR 0 2
22091: PUSH
22092: LD_INT 22
22094: PUSH
22095: LD_OWVAR 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PPUSH
22104: CALL_OW 69
22108: ST_TO_ADDR
// if not tmp then
22109: LD_VAR 0 2
22113: NOT
22114: IFFALSE 22118
// exit ;
22116: GO 22261
// for i := 1 to 2 do
22118: LD_ADDR_VAR 0 1
22122: PUSH
22123: DOUBLE
22124: LD_INT 1
22126: DEC
22127: ST_TO_ADDR
22128: LD_INT 2
22130: PUSH
22131: FOR_TO
22132: IFFALSE 22259
// begin uc_side := your_side ;
22134: LD_ADDR_OWVAR 20
22138: PUSH
22139: LD_OWVAR 2
22143: ST_TO_ADDR
// uc_nation := nation_american ;
22144: LD_ADDR_OWVAR 21
22148: PUSH
22149: LD_INT 1
22151: ST_TO_ADDR
// vc_chassis := us_morphling ;
22152: LD_ADDR_OWVAR 37
22156: PUSH
22157: LD_INT 5
22159: ST_TO_ADDR
// vc_engine := engine_siberite ;
22160: LD_ADDR_OWVAR 39
22164: PUSH
22165: LD_INT 3
22167: ST_TO_ADDR
// vc_control := control_computer ;
22168: LD_ADDR_OWVAR 38
22172: PUSH
22173: LD_INT 3
22175: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22176: LD_ADDR_OWVAR 40
22180: PUSH
22181: LD_INT 10
22183: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22184: LD_VAR 0 2
22188: PUSH
22189: LD_INT 1
22191: ARRAY
22192: PPUSH
22193: CALL_OW 310
22197: NOT
22198: IFFALSE 22245
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22200: CALL_OW 45
22204: PPUSH
22205: LD_VAR 0 2
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: PPUSH
22214: CALL_OW 250
22218: PPUSH
22219: LD_VAR 0 2
22223: PUSH
22224: LD_INT 1
22226: ARRAY
22227: PPUSH
22228: CALL_OW 251
22232: PPUSH
22233: LD_INT 12
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL_OW 50
22243: GO 22257
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22245: CALL_OW 45
22249: PPUSH
22250: LD_INT 1
22252: PPUSH
22253: CALL_OW 51
// end ;
22257: GO 22131
22259: POP
22260: POP
// end ;
22261: PPOPN 2
22263: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22264: LD_EXP 48
22268: IFFALSE 22276
22270: PUSH
22271: LD_EXP 94
22275: AND
22276: IFFALSE 22498
22278: GO 22280
22280: DISABLE
22281: LD_INT 0
22283: PPUSH
22284: PPUSH
22285: PPUSH
22286: PPUSH
22287: PPUSH
22288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22289: LD_ADDR_VAR 0 6
22293: PUSH
22294: LD_INT 22
22296: PUSH
22297: LD_OWVAR 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 21
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: LD_INT 23
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 69
22342: ST_TO_ADDR
// if not tmp then
22343: LD_VAR 0 6
22347: NOT
22348: IFFALSE 22352
// exit ;
22350: GO 22498
// s1 := rand ( 1 , 4 ) ;
22352: LD_ADDR_VAR 0 2
22356: PUSH
22357: LD_INT 1
22359: PPUSH
22360: LD_INT 4
22362: PPUSH
22363: CALL_OW 12
22367: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22368: LD_ADDR_VAR 0 4
22372: PUSH
22373: LD_VAR 0 6
22377: PUSH
22378: LD_INT 1
22380: ARRAY
22381: PPUSH
22382: LD_VAR 0 2
22386: PPUSH
22387: CALL_OW 259
22391: ST_TO_ADDR
// if s1 = 1 then
22392: LD_VAR 0 2
22396: PUSH
22397: LD_INT 1
22399: EQUAL
22400: IFFALSE 22420
// s2 := rand ( 2 , 4 ) else
22402: LD_ADDR_VAR 0 3
22406: PUSH
22407: LD_INT 2
22409: PPUSH
22410: LD_INT 4
22412: PPUSH
22413: CALL_OW 12
22417: ST_TO_ADDR
22418: GO 22428
// s2 := 1 ;
22420: LD_ADDR_VAR 0 3
22424: PUSH
22425: LD_INT 1
22427: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22428: LD_ADDR_VAR 0 5
22432: PUSH
22433: LD_VAR 0 6
22437: PUSH
22438: LD_INT 1
22440: ARRAY
22441: PPUSH
22442: LD_VAR 0 3
22446: PPUSH
22447: CALL_OW 259
22451: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22452: LD_VAR 0 6
22456: PUSH
22457: LD_INT 1
22459: ARRAY
22460: PPUSH
22461: LD_VAR 0 2
22465: PPUSH
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22475: LD_VAR 0 6
22479: PUSH
22480: LD_INT 1
22482: ARRAY
22483: PPUSH
22484: LD_VAR 0 3
22488: PPUSH
22489: LD_VAR 0 4
22493: PPUSH
22494: CALL_OW 237
// end ;
22498: PPOPN 6
22500: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22501: LD_EXP 48
22505: IFFALSE 22513
22507: PUSH
22508: LD_EXP 95
22512: AND
22513: IFFALSE 22592
22515: GO 22517
22517: DISABLE
22518: LD_INT 0
22520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22521: LD_ADDR_VAR 0 1
22525: PUSH
22526: LD_INT 22
22528: PUSH
22529: LD_OWVAR 2
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 3
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PPUSH
22552: CALL_OW 69
22556: ST_TO_ADDR
// if not tmp then
22557: LD_VAR 0 1
22561: NOT
22562: IFFALSE 22566
// exit ;
22564: GO 22592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22566: LD_VAR 0 1
22570: PUSH
22571: LD_INT 1
22573: PPUSH
22574: LD_VAR 0 1
22578: PPUSH
22579: CALL_OW 12
22583: ARRAY
22584: PPUSH
22585: LD_INT 1
22587: PPUSH
22588: CALL_OW 234
// end ;
22592: PPOPN 1
22594: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22595: LD_EXP 48
22599: IFFALSE 22607
22601: PUSH
22602: LD_EXP 96
22606: AND
22607: IFFALSE 22719
22609: GO 22611
22611: DISABLE
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22616: LD_ADDR_VAR 0 2
22620: PUSH
22621: LD_INT 22
22623: PUSH
22624: LD_OWVAR 2
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 30
22638: PUSH
22639: LD_INT 27
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 30
22648: PUSH
22649: LD_INT 26
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 30
22658: PUSH
22659: LD_INT 28
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PPUSH
22676: CALL_OW 69
22680: ST_TO_ADDR
// if not tmp then
22681: LD_VAR 0 2
22685: NOT
22686: IFFALSE 22690
// exit ;
22688: GO 22719
// for i in tmp do
22690: LD_ADDR_VAR 0 1
22694: PUSH
22695: LD_VAR 0 2
22699: PUSH
22700: FOR_IN
22701: IFFALSE 22717
// SetLives ( i , 1 ) ;
22703: LD_VAR 0 1
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 234
22715: GO 22700
22717: POP
22718: POP
// end ;
22719: PPOPN 2
22721: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22722: LD_EXP 48
22726: IFFALSE 22734
22728: PUSH
22729: LD_EXP 97
22733: AND
22734: IFFALSE 23021
22736: GO 22738
22738: DISABLE
22739: LD_INT 0
22741: PPUSH
22742: PPUSH
22743: PPUSH
// begin i := rand ( 1 , 7 ) ;
22744: LD_ADDR_VAR 0 1
22748: PUSH
22749: LD_INT 1
22751: PPUSH
22752: LD_INT 7
22754: PPUSH
22755: CALL_OW 12
22759: ST_TO_ADDR
// case i of 1 :
22760: LD_VAR 0 1
22764: PUSH
22765: LD_INT 1
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22783
22773: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22774: LD_STRING earthquake(getX(game), 0, 32)
22776: PPUSH
22777: CALL_OW 559
22781: GO 23021
22783: LD_INT 2
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22805
22791: POP
// begin ToLua ( displayStucuk(); ) ;
22792: LD_STRING displayStucuk();
22794: PPUSH
22795: CALL_OW 559
// ResetFog ;
22799: CALL_OW 335
// end ; 3 :
22803: GO 23021
22805: LD_INT 3
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 22917
22813: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 22
22821: PUSH
22822: LD_OWVAR 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 25
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PPUSH
22845: CALL_OW 69
22849: ST_TO_ADDR
// if not tmp then
22850: LD_VAR 0 2
22854: NOT
22855: IFFALSE 22859
// exit ;
22857: GO 23021
// un := tmp [ rand ( 1 , tmp ) ] ;
22859: LD_ADDR_VAR 0 3
22863: PUSH
22864: LD_VAR 0 2
22868: PUSH
22869: LD_INT 1
22871: PPUSH
22872: LD_VAR 0 2
22876: PPUSH
22877: CALL_OW 12
22881: ARRAY
22882: ST_TO_ADDR
// if Crawls ( un ) then
22883: LD_VAR 0 3
22887: PPUSH
22888: CALL_OW 318
22892: IFFALSE 22903
// ComWalk ( un ) ;
22894: LD_VAR 0 3
22898: PPUSH
22899: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_INT 8
22910: PPUSH
22911: CALL_OW 336
// end ; 4 :
22915: GO 23021
22917: LD_INT 4
22919: DOUBLE
22920: EQUAL
22921: IFTRUE 22925
22923: GO 22999
22925: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22926: LD_ADDR_VAR 0 2
22930: PUSH
22931: LD_INT 22
22933: PUSH
22934: LD_OWVAR 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 30
22945: PUSH
22946: LD_INT 29
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PPUSH
22957: CALL_OW 69
22961: ST_TO_ADDR
// if not tmp then
22962: LD_VAR 0 2
22966: NOT
22967: IFFALSE 22971
// exit ;
22969: GO 23021
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22971: LD_VAR 0 2
22975: PUSH
22976: LD_INT 1
22978: ARRAY
22979: PPUSH
22980: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22984: LD_VAR 0 2
22988: PUSH
22989: LD_INT 1
22991: ARRAY
22992: PPUSH
22993: CALL_OW 65
// end ; 5 .. 7 :
22997: GO 23021
22999: LD_INT 5
23001: DOUBLE
23002: GREATEREQUAL
23003: IFFALSE 23011
23005: LD_INT 7
23007: DOUBLE
23008: LESSEQUAL
23009: IFTRUE 23013
23011: GO 23020
23013: POP
// StreamSibBomb ; end ;
23014: CALL 19202 0 0
23018: GO 23021
23020: POP
// end ;
23021: PPOPN 3
23023: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23024: LD_EXP 48
23028: IFFALSE 23036
23030: PUSH
23031: LD_EXP 98
23035: AND
23036: IFFALSE 23192
23038: GO 23040
23040: DISABLE
23041: LD_INT 0
23043: PPUSH
23044: PPUSH
23045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23046: LD_ADDR_VAR 0 2
23050: PUSH
23051: LD_INT 81
23053: PUSH
23054: LD_OWVAR 2
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: LD_INT 21
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 21
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PPUSH
23095: CALL_OW 69
23099: ST_TO_ADDR
// if not tmp then
23100: LD_VAR 0 2
23104: NOT
23105: IFFALSE 23109
// exit ;
23107: GO 23192
// p := 0 ;
23109: LD_ADDR_VAR 0 3
23113: PUSH
23114: LD_INT 0
23116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23117: LD_INT 35
23119: PPUSH
23120: CALL_OW 67
// p := p + 1 ;
23124: LD_ADDR_VAR 0 3
23128: PUSH
23129: LD_VAR 0 3
23133: PUSH
23134: LD_INT 1
23136: PLUS
23137: ST_TO_ADDR
// for i in tmp do
23138: LD_ADDR_VAR 0 1
23142: PUSH
23143: LD_VAR 0 2
23147: PUSH
23148: FOR_IN
23149: IFFALSE 23180
// if GetLives ( i ) < 1000 then
23151: LD_VAR 0 1
23155: PPUSH
23156: CALL_OW 256
23160: PUSH
23161: LD_INT 1000
23163: LESS
23164: IFFALSE 23178
// SetLives ( i , 1000 ) ;
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_INT 1000
23173: PPUSH
23174: CALL_OW 234
23178: GO 23148
23180: POP
23181: POP
// until p > 20 ;
23182: LD_VAR 0 3
23186: PUSH
23187: LD_INT 20
23189: GREATER
23190: IFFALSE 23117
// end ;
23192: PPOPN 3
23194: END
// every 0 0$1 trigger StreamModeActive and sTime do
23195: LD_EXP 48
23199: IFFALSE 23207
23201: PUSH
23202: LD_EXP 99
23206: AND
23207: IFFALSE 23242
23209: GO 23211
23211: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23212: LD_INT 28
23214: PPUSH
23215: LD_OWVAR 2
23219: PPUSH
23220: LD_INT 2
23222: PPUSH
23223: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23227: LD_INT 30
23229: PPUSH
23230: LD_OWVAR 2
23234: PPUSH
23235: LD_INT 2
23237: PPUSH
23238: CALL_OW 322
// end ;
23242: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23243: LD_EXP 48
23247: IFFALSE 23255
23249: PUSH
23250: LD_EXP 100
23254: AND
23255: IFFALSE 23376
23257: GO 23259
23259: DISABLE
23260: LD_INT 0
23262: PPUSH
23263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23264: LD_ADDR_VAR 0 2
23268: PUSH
23269: LD_INT 22
23271: PUSH
23272: LD_OWVAR 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 21
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 3
23293: PUSH
23294: LD_INT 23
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: PPUSH
23313: CALL_OW 69
23317: ST_TO_ADDR
// if not tmp then
23318: LD_VAR 0 2
23322: NOT
23323: IFFALSE 23327
// exit ;
23325: GO 23376
// for i in tmp do
23327: LD_ADDR_VAR 0 1
23331: PUSH
23332: LD_VAR 0 2
23336: PUSH
23337: FOR_IN
23338: IFFALSE 23374
// begin if Crawls ( i ) then
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL_OW 318
23349: IFFALSE 23360
// ComWalk ( i ) ;
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 138
// SetClass ( i , 2 ) ;
23360: LD_VAR 0 1
23364: PPUSH
23365: LD_INT 2
23367: PPUSH
23368: CALL_OW 336
// end ;
23372: GO 23337
23374: POP
23375: POP
// end ;
23376: PPOPN 2
23378: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23379: LD_EXP 48
23383: IFFALSE 23391
23385: PUSH
23386: LD_EXP 101
23390: AND
23391: IFFALSE 23681
23393: GO 23395
23395: DISABLE
23396: LD_INT 0
23398: PPUSH
23399: PPUSH
23400: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23401: LD_OWVAR 2
23405: PPUSH
23406: LD_INT 9
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: LD_INT 1
23414: PPUSH
23415: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23419: LD_INT 9
23421: PPUSH
23422: LD_OWVAR 2
23426: PPUSH
23427: CALL_OW 343
// uc_side := 9 ;
23431: LD_ADDR_OWVAR 20
23435: PUSH
23436: LD_INT 9
23438: ST_TO_ADDR
// uc_nation := 2 ;
23439: LD_ADDR_OWVAR 21
23443: PUSH
23444: LD_INT 2
23446: ST_TO_ADDR
// hc_name := Dark Warrior ;
23447: LD_ADDR_OWVAR 26
23451: PUSH
23452: LD_STRING Dark Warrior
23454: ST_TO_ADDR
// hc_gallery :=  ;
23455: LD_ADDR_OWVAR 33
23459: PUSH
23460: LD_STRING 
23462: ST_TO_ADDR
// hc_noskilllimit := true ;
23463: LD_ADDR_OWVAR 76
23467: PUSH
23468: LD_INT 1
23470: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23471: LD_ADDR_OWVAR 31
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 30
23484: PUSH
23485: LD_INT 30
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
// un := CreateHuman ;
23494: LD_ADDR_VAR 0 3
23498: PUSH
23499: CALL_OW 44
23503: ST_TO_ADDR
// hc_noskilllimit := false ;
23504: LD_ADDR_OWVAR 76
23508: PUSH
23509: LD_INT 0
23511: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23512: LD_VAR 0 3
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: CALL_OW 51
// ToLua ( playRanger() ) ;
23524: LD_STRING playRanger()
23526: PPUSH
23527: CALL_OW 559
// p := 0 ;
23531: LD_ADDR_VAR 0 2
23535: PUSH
23536: LD_INT 0
23538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23539: LD_INT 35
23541: PPUSH
23542: CALL_OW 67
// p := p + 1 ;
23546: LD_ADDR_VAR 0 2
23550: PUSH
23551: LD_VAR 0 2
23555: PUSH
23556: LD_INT 1
23558: PLUS
23559: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23560: LD_VAR 0 3
23564: PPUSH
23565: CALL_OW 256
23569: PUSH
23570: LD_INT 1000
23572: LESS
23573: IFFALSE 23587
// SetLives ( un , 1000 ) ;
23575: LD_VAR 0 3
23579: PPUSH
23580: LD_INT 1000
23582: PPUSH
23583: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23587: LD_VAR 0 3
23591: PPUSH
23592: LD_INT 81
23594: PUSH
23595: LD_OWVAR 2
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 91
23606: PUSH
23607: LD_VAR 0 3
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: CALL_OW 74
23638: PPUSH
23639: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23643: LD_VAR 0 2
23647: PUSH
23648: LD_INT 80
23650: GREATER
23651: IFTRUE 23664
23653: PUSH
23654: LD_VAR 0 3
23658: PPUSH
23659: CALL_OW 301
23663: OR
23664: IFFALSE 23539
// if un then
23666: LD_VAR 0 3
23670: IFFALSE 23681
// RemoveUnit ( un ) ;
23672: LD_VAR 0 3
23676: PPUSH
23677: CALL_OW 64
// end ;
23681: PPOPN 3
23683: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23684: LD_EXP 102
23688: IFFALSE 23804
23690: GO 23692
23692: DISABLE
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23698: LD_ADDR_VAR 0 2
23702: PUSH
23703: LD_INT 81
23705: PUSH
23706: LD_OWVAR 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 21
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL_OW 69
23733: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23734: LD_STRING playComputer()
23736: PPUSH
23737: CALL_OW 559
// if not tmp then
23741: LD_VAR 0 2
23745: NOT
23746: IFFALSE 23750
// exit ;
23748: GO 23804
// for i in tmp do
23750: LD_ADDR_VAR 0 1
23754: PUSH
23755: LD_VAR 0 2
23759: PUSH
23760: FOR_IN
23761: IFFALSE 23802
// for j := 1 to 4 do
23763: LD_ADDR_VAR 0 3
23767: PUSH
23768: DOUBLE
23769: LD_INT 1
23771: DEC
23772: ST_TO_ADDR
23773: LD_INT 4
23775: PUSH
23776: FOR_TO
23777: IFFALSE 23798
// SetSkill ( i , j , 10 ) ;
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: LD_INT 10
23791: PPUSH
23792: CALL_OW 237
23796: GO 23776
23798: POP
23799: POP
23800: GO 23760
23802: POP
23803: POP
// end ;
23804: PPOPN 3
23806: END
// every 0 0$1 trigger s30 do var i , tmp ;
23807: LD_EXP 103
23811: IFFALSE 23880
23813: GO 23815
23815: DISABLE
23816: LD_INT 0
23818: PPUSH
23819: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_INT 22
23827: PUSH
23828: LD_OWVAR 2
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PPUSH
23837: CALL_OW 69
23841: ST_TO_ADDR
// if not tmp then
23842: LD_VAR 0 2
23846: NOT
23847: IFFALSE 23851
// exit ;
23849: GO 23880
// for i in tmp do
23851: LD_ADDR_VAR 0 1
23855: PUSH
23856: LD_VAR 0 2
23860: PUSH
23861: FOR_IN
23862: IFFALSE 23878
// SetLives ( i , 300 ) ;
23864: LD_VAR 0 1
23868: PPUSH
23869: LD_INT 300
23871: PPUSH
23872: CALL_OW 234
23876: GO 23861
23878: POP
23879: POP
// end ;
23880: PPOPN 2
23882: END
// every 0 0$1 trigger s60 do var i , tmp ;
23883: LD_EXP 104
23887: IFFALSE 23956
23889: GO 23891
23891: DISABLE
23892: LD_INT 0
23894: PPUSH
23895: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23896: LD_ADDR_VAR 0 2
23900: PUSH
23901: LD_INT 22
23903: PUSH
23904: LD_OWVAR 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 69
23917: ST_TO_ADDR
// if not tmp then
23918: LD_VAR 0 2
23922: NOT
23923: IFFALSE 23927
// exit ;
23925: GO 23956
// for i in tmp do
23927: LD_ADDR_VAR 0 1
23931: PUSH
23932: LD_VAR 0 2
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23954
// SetLives ( i , 600 ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_INT 600
23947: PPUSH
23948: CALL_OW 234
23952: GO 23937
23954: POP
23955: POP
// end ;
23956: PPOPN 2
23958: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23959: LD_INT 0
23961: PPUSH
// case cmd of 301 :
23962: LD_VAR 0 1
23966: PUSH
23967: LD_INT 301
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 24007
23975: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23976: LD_VAR 0 6
23980: PPUSH
23981: LD_VAR 0 7
23985: PPUSH
23986: LD_VAR 0 8
23990: PPUSH
23991: LD_VAR 0 4
23995: PPUSH
23996: LD_VAR 0 5
24000: PPUSH
24001: CALL 25220 0 5
24005: GO 24128
24007: LD_INT 302
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24052
24015: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24016: LD_VAR 0 6
24020: PPUSH
24021: LD_VAR 0 7
24025: PPUSH
24026: LD_VAR 0 8
24030: PPUSH
24031: LD_VAR 0 9
24035: PPUSH
24036: LD_VAR 0 4
24040: PPUSH
24041: LD_VAR 0 5
24045: PPUSH
24046: CALL 25311 0 6
24050: GO 24128
24052: LD_INT 303
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24097
24060: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24061: LD_VAR 0 6
24065: PPUSH
24066: LD_VAR 0 7
24070: PPUSH
24071: LD_VAR 0 8
24075: PPUSH
24076: LD_VAR 0 9
24080: PPUSH
24081: LD_VAR 0 4
24085: PPUSH
24086: LD_VAR 0 5
24090: PPUSH
24091: CALL 24133 0 6
24095: GO 24128
24097: LD_INT 304
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24127
24105: POP
// hHackTeleport ( unit , x , y ) ; end ;
24106: LD_VAR 0 2
24110: PPUSH
24111: LD_VAR 0 4
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: CALL 25904 0 3
24125: GO 24128
24127: POP
// end ;
24128: LD_VAR 0 12
24132: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24137: LD_VAR 0 1
24141: PUSH
24142: LD_INT 1
24144: LESS
24145: IFTRUE 24157
24147: PUSH
24148: LD_VAR 0 1
24152: PUSH
24153: LD_INT 3
24155: GREATER
24156: OR
24157: IFTRUE 24175
24159: PUSH
24160: LD_VAR 0 5
24164: PPUSH
24165: LD_VAR 0 6
24169: PPUSH
24170: CALL_OW 428
24174: OR
24175: IFFALSE 24179
// exit ;
24177: GO 24907
// uc_side := your_side ;
24179: LD_ADDR_OWVAR 20
24183: PUSH
24184: LD_OWVAR 2
24188: ST_TO_ADDR
// uc_nation := nation ;
24189: LD_ADDR_OWVAR 21
24193: PUSH
24194: LD_VAR 0 1
24198: ST_TO_ADDR
// bc_level = 1 ;
24199: LD_ADDR_OWVAR 43
24203: PUSH
24204: LD_INT 1
24206: ST_TO_ADDR
// case btype of 1 :
24207: LD_VAR 0 2
24211: PUSH
24212: LD_INT 1
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_depot ; 2 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 0
24228: ST_TO_ADDR
24229: GO 24851
24231: LD_INT 2
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24250
24239: POP
// bc_type := b_warehouse ; 3 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 1
24247: ST_TO_ADDR
24248: GO 24851
24250: LD_INT 3
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24269
24258: POP
// bc_type := b_lab ; 4 .. 9 :
24259: LD_ADDR_OWVAR 42
24263: PUSH
24264: LD_INT 6
24266: ST_TO_ADDR
24267: GO 24851
24269: LD_INT 4
24271: DOUBLE
24272: GREATEREQUAL
24273: IFFALSE 24281
24275: LD_INT 9
24277: DOUBLE
24278: LESSEQUAL
24279: IFTRUE 24283
24281: GO 24343
24283: POP
// begin bc_type := b_lab_half ;
24284: LD_ADDR_OWVAR 42
24288: PUSH
24289: LD_INT 7
24291: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24292: LD_ADDR_OWVAR 44
24296: PUSH
24297: LD_INT 10
24299: PUSH
24300: LD_INT 11
24302: PUSH
24303: LD_INT 12
24305: PUSH
24306: LD_INT 15
24308: PUSH
24309: LD_INT 14
24311: PUSH
24312: LD_INT 13
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: PUSH
24323: LD_VAR 0 2
24327: PUSH
24328: LD_INT 3
24330: MINUS
24331: ARRAY
24332: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24333: LD_ADDR_OWVAR 45
24337: PUSH
24338: LD_INT 9
24340: ST_TO_ADDR
// end ; 10 .. 13 :
24341: GO 24851
24343: LD_INT 10
24345: DOUBLE
24346: GREATEREQUAL
24347: IFFALSE 24355
24349: LD_INT 13
24351: DOUBLE
24352: LESSEQUAL
24353: IFTRUE 24357
24355: GO 24434
24357: POP
// begin bc_type := b_lab_full ;
24358: LD_ADDR_OWVAR 42
24362: PUSH
24363: LD_INT 8
24365: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24366: LD_ADDR_OWVAR 44
24370: PUSH
24371: LD_INT 10
24373: PUSH
24374: LD_INT 12
24376: PUSH
24377: LD_INT 14
24379: PUSH
24380: LD_INT 13
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PUSH
24389: LD_VAR 0 2
24393: PUSH
24394: LD_INT 9
24396: MINUS
24397: ARRAY
24398: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24399: LD_ADDR_OWVAR 45
24403: PUSH
24404: LD_INT 11
24406: PUSH
24407: LD_INT 15
24409: PUSH
24410: LD_INT 12
24412: PUSH
24413: LD_INT 15
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: PUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_INT 9
24429: MINUS
24430: ARRAY
24431: ST_TO_ADDR
// end ; 14 :
24432: GO 24851
24434: LD_INT 14
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24453
24442: POP
// bc_type := b_workshop ; 15 :
24443: LD_ADDR_OWVAR 42
24447: PUSH
24448: LD_INT 2
24450: ST_TO_ADDR
24451: GO 24851
24453: LD_INT 15
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24472
24461: POP
// bc_type := b_factory ; 16 :
24462: LD_ADDR_OWVAR 42
24466: PUSH
24467: LD_INT 3
24469: ST_TO_ADDR
24470: GO 24851
24472: LD_INT 16
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24491
24480: POP
// bc_type := b_ext_gun ; 17 :
24481: LD_ADDR_OWVAR 42
24485: PUSH
24486: LD_INT 17
24488: ST_TO_ADDR
24489: GO 24851
24491: LD_INT 17
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24527
24499: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24500: LD_ADDR_OWVAR 42
24504: PUSH
24505: LD_INT 19
24507: PUSH
24508: LD_INT 23
24510: PUSH
24511: LD_INT 19
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: PUSH
24519: LD_VAR 0 1
24523: ARRAY
24524: ST_TO_ADDR
24525: GO 24851
24527: LD_INT 18
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24546
24535: POP
// bc_type := b_ext_radar ; 19 :
24536: LD_ADDR_OWVAR 42
24540: PUSH
24541: LD_INT 20
24543: ST_TO_ADDR
24544: GO 24851
24546: LD_INT 19
24548: DOUBLE
24549: EQUAL
24550: IFTRUE 24554
24552: GO 24565
24554: POP
// bc_type := b_ext_radio ; 20 :
24555: LD_ADDR_OWVAR 42
24559: PUSH
24560: LD_INT 22
24562: ST_TO_ADDR
24563: GO 24851
24565: LD_INT 20
24567: DOUBLE
24568: EQUAL
24569: IFTRUE 24573
24571: GO 24584
24573: POP
// bc_type := b_ext_siberium ; 21 :
24574: LD_ADDR_OWVAR 42
24578: PUSH
24579: LD_INT 21
24581: ST_TO_ADDR
24582: GO 24851
24584: LD_INT 21
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24603
24592: POP
// bc_type := b_ext_computer ; 22 :
24593: LD_ADDR_OWVAR 42
24597: PUSH
24598: LD_INT 24
24600: ST_TO_ADDR
24601: GO 24851
24603: LD_INT 22
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24622
24611: POP
// bc_type := b_ext_track ; 23 :
24612: LD_ADDR_OWVAR 42
24616: PUSH
24617: LD_INT 16
24619: ST_TO_ADDR
24620: GO 24851
24622: LD_INT 23
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24641
24630: POP
// bc_type := b_ext_laser ; 24 :
24631: LD_ADDR_OWVAR 42
24635: PUSH
24636: LD_INT 25
24638: ST_TO_ADDR
24639: GO 24851
24641: LD_INT 24
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24660
24649: POP
// bc_type := b_control_tower ; 25 :
24650: LD_ADDR_OWVAR 42
24654: PUSH
24655: LD_INT 36
24657: ST_TO_ADDR
24658: GO 24851
24660: LD_INT 25
24662: DOUBLE
24663: EQUAL
24664: IFTRUE 24668
24666: GO 24679
24668: POP
// bc_type := b_breastwork ; 26 :
24669: LD_ADDR_OWVAR 42
24673: PUSH
24674: LD_INT 31
24676: ST_TO_ADDR
24677: GO 24851
24679: LD_INT 26
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24698
24687: POP
// bc_type := b_bunker ; 27 :
24688: LD_ADDR_OWVAR 42
24692: PUSH
24693: LD_INT 32
24695: ST_TO_ADDR
24696: GO 24851
24698: LD_INT 27
24700: DOUBLE
24701: EQUAL
24702: IFTRUE 24706
24704: GO 24717
24706: POP
// bc_type := b_turret ; 28 :
24707: LD_ADDR_OWVAR 42
24711: PUSH
24712: LD_INT 33
24714: ST_TO_ADDR
24715: GO 24851
24717: LD_INT 28
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24736
24725: POP
// bc_type := b_armoury ; 29 :
24726: LD_ADDR_OWVAR 42
24730: PUSH
24731: LD_INT 4
24733: ST_TO_ADDR
24734: GO 24851
24736: LD_INT 29
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24755
24744: POP
// bc_type := b_barracks ; 30 :
24745: LD_ADDR_OWVAR 42
24749: PUSH
24750: LD_INT 5
24752: ST_TO_ADDR
24753: GO 24851
24755: LD_INT 30
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24774
24763: POP
// bc_type := b_solar_power ; 31 :
24764: LD_ADDR_OWVAR 42
24768: PUSH
24769: LD_INT 27
24771: ST_TO_ADDR
24772: GO 24851
24774: LD_INT 31
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24793
24782: POP
// bc_type := b_oil_power ; 32 :
24783: LD_ADDR_OWVAR 42
24787: PUSH
24788: LD_INT 26
24790: ST_TO_ADDR
24791: GO 24851
24793: LD_INT 32
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24812
24801: POP
// bc_type := b_siberite_power ; 33 :
24802: LD_ADDR_OWVAR 42
24806: PUSH
24807: LD_INT 28
24809: ST_TO_ADDR
24810: GO 24851
24812: LD_INT 33
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24831
24820: POP
// bc_type := b_oil_mine ; 34 :
24821: LD_ADDR_OWVAR 42
24825: PUSH
24826: LD_INT 29
24828: ST_TO_ADDR
24829: GO 24851
24831: LD_INT 34
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24850
24839: POP
// bc_type := b_siberite_mine ; end ;
24840: LD_ADDR_OWVAR 42
24844: PUSH
24845: LD_INT 30
24847: ST_TO_ADDR
24848: GO 24851
24850: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24851: LD_ADDR_VAR 0 8
24855: PUSH
24856: LD_VAR 0 5
24860: PPUSH
24861: LD_VAR 0 6
24865: PPUSH
24866: LD_VAR 0 3
24870: PPUSH
24871: CALL_OW 47
24875: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24876: LD_OWVAR 42
24880: PUSH
24881: LD_INT 32
24883: PUSH
24884: LD_INT 33
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: IN
24891: IFFALSE 24907
// PlaceWeaponTurret ( b , weapon ) ;
24893: LD_VAR 0 8
24897: PPUSH
24898: LD_VAR 0 4
24902: PPUSH
24903: CALL_OW 431
// end ;
24907: LD_VAR 0 7
24911: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24912: LD_INT 0
24914: PPUSH
24915: PPUSH
24916: PPUSH
24917: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24918: LD_ADDR_VAR 0 4
24922: PUSH
24923: LD_INT 22
24925: PUSH
24926: LD_OWVAR 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 30
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 30
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 69
24971: ST_TO_ADDR
// if not tmp then
24972: LD_VAR 0 4
24976: NOT
24977: IFFALSE 24981
// exit ;
24979: GO 25040
// for i in tmp do
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: LD_VAR 0 4
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25038
// for j = 1 to 3 do
24994: LD_ADDR_VAR 0 3
24998: PUSH
24999: DOUBLE
25000: LD_INT 1
25002: DEC
25003: ST_TO_ADDR
25004: LD_INT 3
25006: PUSH
25007: FOR_TO
25008: IFFALSE 25034
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25010: LD_VAR 0 2
25014: PPUSH
25015: CALL_OW 274
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: LD_INT 99999
25027: PPUSH
25028: CALL_OW 277
25032: GO 25007
25034: POP
25035: POP
25036: GO 24991
25038: POP
25039: POP
// end ;
25040: LD_VAR 0 1
25044: RET
// export function hHackSetLevel10 ; var i , j ; begin
25045: LD_INT 0
25047: PPUSH
25048: PPUSH
25049: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25050: LD_ADDR_VAR 0 2
25054: PUSH
25055: LD_INT 21
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 69
25069: PUSH
25070: FOR_IN
25071: IFFALSE 25123
// if IsSelected ( i ) then
25073: LD_VAR 0 2
25077: PPUSH
25078: CALL_OW 306
25082: IFFALSE 25121
// begin for j := 1 to 4 do
25084: LD_ADDR_VAR 0 3
25088: PUSH
25089: DOUBLE
25090: LD_INT 1
25092: DEC
25093: ST_TO_ADDR
25094: LD_INT 4
25096: PUSH
25097: FOR_TO
25098: IFFALSE 25119
// SetSkill ( i , j , 10 ) ;
25100: LD_VAR 0 2
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: LD_INT 10
25112: PPUSH
25113: CALL_OW 237
25117: GO 25097
25119: POP
25120: POP
// end ;
25121: GO 25070
25123: POP
25124: POP
// end ;
25125: LD_VAR 0 1
25129: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25130: LD_INT 0
25132: PPUSH
25133: PPUSH
25134: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25135: LD_ADDR_VAR 0 2
25139: PUSH
25140: LD_INT 22
25142: PUSH
25143: LD_OWVAR 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 21
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: PUSH
25171: FOR_IN
25172: IFFALSE 25213
// begin for j := 1 to 4 do
25174: LD_ADDR_VAR 0 3
25178: PUSH
25179: DOUBLE
25180: LD_INT 1
25182: DEC
25183: ST_TO_ADDR
25184: LD_INT 4
25186: PUSH
25187: FOR_TO
25188: IFFALSE 25209
// SetSkill ( i , j , 10 ) ;
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: LD_INT 10
25202: PPUSH
25203: CALL_OW 237
25207: GO 25187
25209: POP
25210: POP
// end ;
25211: GO 25171
25213: POP
25214: POP
// end ;
25215: LD_VAR 0 1
25219: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25220: LD_INT 0
25222: PPUSH
// uc_side := your_side ;
25223: LD_ADDR_OWVAR 20
25227: PUSH
25228: LD_OWVAR 2
25232: ST_TO_ADDR
// uc_nation := nation ;
25233: LD_ADDR_OWVAR 21
25237: PUSH
25238: LD_VAR 0 1
25242: ST_TO_ADDR
// InitHc ;
25243: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25247: LD_INT 0
25249: PPUSH
25250: LD_VAR 0 2
25254: PPUSH
25255: LD_VAR 0 3
25259: PPUSH
25260: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25264: LD_VAR 0 4
25268: PPUSH
25269: LD_VAR 0 5
25273: PPUSH
25274: CALL_OW 428
25278: PUSH
25279: LD_INT 0
25281: EQUAL
25282: IFFALSE 25306
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25284: CALL_OW 44
25288: PPUSH
25289: LD_VAR 0 4
25293: PPUSH
25294: LD_VAR 0 5
25298: PPUSH
25299: LD_INT 1
25301: PPUSH
25302: CALL_OW 48
// end ;
25306: LD_VAR 0 6
25310: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
// uc_side := your_side ;
25315: LD_ADDR_OWVAR 20
25319: PUSH
25320: LD_OWVAR 2
25324: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25325: LD_VAR 0 1
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: LD_INT 4
25341: PUSH
25342: LD_INT 5
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: IN
25352: IFFALSE 25364
// uc_nation := nation_american else
25354: LD_ADDR_OWVAR 21
25358: PUSH
25359: LD_INT 1
25361: ST_TO_ADDR
25362: GO 25407
// if chassis in [ 11 , 12 , 13 , 14 ] then
25364: LD_VAR 0 1
25368: PUSH
25369: LD_INT 11
25371: PUSH
25372: LD_INT 12
25374: PUSH
25375: LD_INT 13
25377: PUSH
25378: LD_INT 14
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: IN
25387: IFFALSE 25399
// uc_nation := nation_arabian else
25389: LD_ADDR_OWVAR 21
25393: PUSH
25394: LD_INT 2
25396: ST_TO_ADDR
25397: GO 25407
// uc_nation := nation_russian ;
25399: LD_ADDR_OWVAR 21
25403: PUSH
25404: LD_INT 3
25406: ST_TO_ADDR
// vc_chassis := chassis ;
25407: LD_ADDR_OWVAR 37
25411: PUSH
25412: LD_VAR 0 1
25416: ST_TO_ADDR
// vc_engine := engine ;
25417: LD_ADDR_OWVAR 39
25421: PUSH
25422: LD_VAR 0 2
25426: ST_TO_ADDR
// vc_control := control ;
25427: LD_ADDR_OWVAR 38
25431: PUSH
25432: LD_VAR 0 3
25436: ST_TO_ADDR
// vc_weapon := weapon ;
25437: LD_ADDR_OWVAR 40
25441: PUSH
25442: LD_VAR 0 4
25446: ST_TO_ADDR
// un := CreateVehicle ;
25447: LD_ADDR_VAR 0 8
25451: PUSH
25452: CALL_OW 45
25456: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25457: LD_VAR 0 8
25461: PPUSH
25462: LD_INT 0
25464: PPUSH
25465: LD_INT 5
25467: PPUSH
25468: CALL_OW 12
25472: PPUSH
25473: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25477: LD_VAR 0 8
25481: PPUSH
25482: LD_VAR 0 5
25486: PPUSH
25487: LD_VAR 0 6
25491: PPUSH
25492: LD_INT 1
25494: PPUSH
25495: CALL_OW 48
// end ;
25499: LD_VAR 0 7
25503: RET
// export hInvincible ; every 1 do
25504: GO 25506
25506: DISABLE
// hInvincible := [ ] ;
25507: LD_ADDR_EXP 105
25511: PUSH
25512: EMPTY
25513: ST_TO_ADDR
25514: END
// every 10 do var i ;
25515: GO 25517
25517: DISABLE
25518: LD_INT 0
25520: PPUSH
// begin enable ;
25521: ENABLE
// if not hInvincible then
25522: LD_EXP 105
25526: NOT
25527: IFFALSE 25531
// exit ;
25529: GO 25575
// for i in hInvincible do
25531: LD_ADDR_VAR 0 1
25535: PUSH
25536: LD_EXP 105
25540: PUSH
25541: FOR_IN
25542: IFFALSE 25573
// if GetLives ( i ) < 1000 then
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 256
25553: PUSH
25554: LD_INT 1000
25556: LESS
25557: IFFALSE 25571
// SetLives ( i , 1000 ) ;
25559: LD_VAR 0 1
25563: PPUSH
25564: LD_INT 1000
25566: PPUSH
25567: CALL_OW 234
25571: GO 25541
25573: POP
25574: POP
// end ;
25575: PPOPN 1
25577: END
// export function hHackInvincible ; var i ; begin
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25582: LD_ADDR_VAR 0 2
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 21
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 21
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: PPUSH
25615: CALL_OW 69
25619: PUSH
25620: FOR_IN
25621: IFFALSE 25682
// if IsSelected ( i ) then
25623: LD_VAR 0 2
25627: PPUSH
25628: CALL_OW 306
25632: IFFALSE 25680
// begin if i in hInvincible then
25634: LD_VAR 0 2
25638: PUSH
25639: LD_EXP 105
25643: IN
25644: IFFALSE 25664
// hInvincible := hInvincible diff i else
25646: LD_ADDR_EXP 105
25650: PUSH
25651: LD_EXP 105
25655: PUSH
25656: LD_VAR 0 2
25660: DIFF
25661: ST_TO_ADDR
25662: GO 25680
// hInvincible := hInvincible union i ;
25664: LD_ADDR_EXP 105
25668: PUSH
25669: LD_EXP 105
25673: PUSH
25674: LD_VAR 0 2
25678: UNION
25679: ST_TO_ADDR
// end ;
25680: GO 25620
25682: POP
25683: POP
// end ;
25684: LD_VAR 0 1
25688: RET
// export function hHackInvisible ; var i , j ; begin
25689: LD_INT 0
25691: PPUSH
25692: PPUSH
25693: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25694: LD_ADDR_VAR 0 2
25698: PUSH
25699: LD_INT 21
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 69
25713: PUSH
25714: FOR_IN
25715: IFFALSE 25739
// if IsSelected ( i ) then
25717: LD_VAR 0 2
25721: PPUSH
25722: CALL_OW 306
25726: IFFALSE 25737
// ComForceInvisible ( i ) ;
25728: LD_VAR 0 2
25732: PPUSH
25733: CALL_OW 496
25737: GO 25714
25739: POP
25740: POP
// end ;
25741: LD_VAR 0 1
25745: RET
// export function hHackChangeYourSide ; begin
25746: LD_INT 0
25748: PPUSH
// if your_side = 8 then
25749: LD_OWVAR 2
25753: PUSH
25754: LD_INT 8
25756: EQUAL
25757: IFFALSE 25769
// your_side := 0 else
25759: LD_ADDR_OWVAR 2
25763: PUSH
25764: LD_INT 0
25766: ST_TO_ADDR
25767: GO 25783
// your_side := your_side + 1 ;
25769: LD_ADDR_OWVAR 2
25773: PUSH
25774: LD_OWVAR 2
25778: PUSH
25779: LD_INT 1
25781: PLUS
25782: ST_TO_ADDR
// end ;
25783: LD_VAR 0 1
25787: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25788: LD_INT 0
25790: PPUSH
25791: PPUSH
25792: PPUSH
// for i in all_units do
25793: LD_ADDR_VAR 0 2
25797: PUSH
25798: LD_OWVAR 3
25802: PUSH
25803: FOR_IN
25804: IFFALSE 25882
// if IsSelected ( i ) then
25806: LD_VAR 0 2
25810: PPUSH
25811: CALL_OW 306
25815: IFFALSE 25880
// begin j := GetSide ( i ) ;
25817: LD_ADDR_VAR 0 3
25821: PUSH
25822: LD_VAR 0 2
25826: PPUSH
25827: CALL_OW 255
25831: ST_TO_ADDR
// if j = 8 then
25832: LD_VAR 0 3
25836: PUSH
25837: LD_INT 8
25839: EQUAL
25840: IFFALSE 25852
// j := 0 else
25842: LD_ADDR_VAR 0 3
25846: PUSH
25847: LD_INT 0
25849: ST_TO_ADDR
25850: GO 25866
// j := j + 1 ;
25852: LD_ADDR_VAR 0 3
25856: PUSH
25857: LD_VAR 0 3
25861: PUSH
25862: LD_INT 1
25864: PLUS
25865: ST_TO_ADDR
// SetSide ( i , j ) ;
25866: LD_VAR 0 2
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: CALL_OW 235
// end ;
25880: GO 25803
25882: POP
25883: POP
// end ;
25884: LD_VAR 0 1
25888: RET
// export function hHackFog ; begin
25889: LD_INT 0
25891: PPUSH
// FogOff ( true ) ;
25892: LD_INT 1
25894: PPUSH
25895: CALL_OW 344
// end ;
25899: LD_VAR 0 1
25903: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25904: LD_INT 0
25906: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_VAR 0 2
25916: PPUSH
25917: LD_VAR 0 3
25921: PPUSH
25922: LD_INT 1
25924: PPUSH
25925: LD_INT 1
25927: PPUSH
25928: CALL_OW 483
// CenterOnXY ( x , y ) ;
25932: LD_VAR 0 2
25936: PPUSH
25937: LD_VAR 0 3
25941: PPUSH
25942: CALL_OW 84
// end ;
25946: LD_VAR 0 4
25950: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25951: LD_INT 0
25953: PPUSH
25954: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25955: LD_VAR 0 1
25959: NOT
25960: IFTRUE 25979
25962: PUSH
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 488
25977: NOT
25978: OR
25979: IFTRUE 26014
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 266
25991: PUSH
25992: LD_INT 3
25994: NONEQUAL
25995: IFFALSE 26013
25997: PUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 247
26007: PUSH
26008: LD_INT 1
26010: EQUAL
26011: NOT
26012: AND
26013: OR
26014: IFFALSE 26018
// exit ;
26016: GO 26300
// if GetType ( factory ) = unit_human then
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 247
26027: PUSH
26028: LD_INT 1
26030: EQUAL
26031: IFFALSE 26048
// factory := IsInUnit ( factory ) ;
26033: LD_ADDR_VAR 0 1
26037: PUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 310
26047: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26048: LD_VAR 0 1
26052: PPUSH
26053: CALL_OW 266
26057: PUSH
26058: LD_INT 3
26060: NONEQUAL
26061: IFFALSE 26065
// exit ;
26063: GO 26300
// for i := 1 to Count ( factoryWaypoints ) do
26065: LD_ADDR_VAR 0 5
26069: PUSH
26070: DOUBLE
26071: LD_INT 1
26073: DEC
26074: ST_TO_ADDR
26075: LD_EXP 106
26079: PPUSH
26080: CALL 36104 0 1
26084: PUSH
26085: FOR_TO
26086: IFFALSE 26248
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26088: LD_VAR 0 2
26092: PPUSH
26093: LD_VAR 0 3
26097: PPUSH
26098: CALL_OW 428
26102: PUSH
26103: LD_EXP 106
26107: PUSH
26108: LD_VAR 0 5
26112: ARRAY
26113: PUSH
26114: LD_INT 2
26116: ARRAY
26117: EQUAL
26118: IFFALSE 26150
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26120: LD_ADDR_EXP 106
26124: PUSH
26125: LD_EXP 106
26129: PPUSH
26130: LD_VAR 0 5
26134: PPUSH
26135: CALL_OW 3
26139: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26140: CALL 26305 0 0
// exit ;
26144: POP
26145: POP
26146: GO 26300
// end else
26148: GO 26246
// if factory = factoryWaypoints [ i ] [ 2 ] then
26150: LD_VAR 0 1
26154: PUSH
26155: LD_EXP 106
26159: PUSH
26160: LD_VAR 0 5
26164: ARRAY
26165: PUSH
26166: LD_INT 2
26168: ARRAY
26169: EQUAL
26170: IFFALSE 26246
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26172: LD_ADDR_EXP 106
26176: PUSH
26177: LD_EXP 106
26181: PPUSH
26182: LD_VAR 0 5
26186: PPUSH
26187: CALL_OW 3
26191: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26192: LD_ADDR_EXP 106
26196: PUSH
26197: LD_EXP 106
26201: PPUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 255
26211: PUSH
26212: LD_VAR 0 1
26216: PUSH
26217: LD_VAR 0 2
26221: PUSH
26222: LD_VAR 0 3
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: PPUSH
26233: CALL 72080 0 2
26237: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26238: CALL 26305 0 0
// exit ;
26242: POP
26243: POP
26244: GO 26300
// end ; end ;
26246: GO 26085
26248: POP
26249: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26250: LD_ADDR_EXP 106
26254: PUSH
26255: LD_EXP 106
26259: PPUSH
26260: LD_VAR 0 1
26264: PPUSH
26265: CALL_OW 255
26269: PUSH
26270: LD_VAR 0 1
26274: PUSH
26275: LD_VAR 0 2
26279: PUSH
26280: LD_VAR 0 3
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: PPUSH
26291: CALL 72080 0 2
26295: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26296: CALL 26305 0 0
// end ;
26300: LD_VAR 0 4
26304: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26305: LD_INT 0
26307: PPUSH
26308: PPUSH
26309: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26310: LD_STRING resetFactoryWaypoint();
26312: PPUSH
26313: CALL_OW 559
// if factoryWaypoints then
26317: LD_EXP 106
26321: IFFALSE 26442
// begin list := factoryWaypoints ;
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: LD_EXP 106
26332: ST_TO_ADDR
// for i := 1 to list do
26333: LD_ADDR_VAR 0 2
26337: PUSH
26338: DOUBLE
26339: LD_INT 1
26341: DEC
26342: ST_TO_ADDR
26343: LD_VAR 0 3
26347: PUSH
26348: FOR_TO
26349: IFFALSE 26440
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26351: LD_STRING setFactoryWaypointXY(
26353: PUSH
26354: LD_VAR 0 3
26358: PUSH
26359: LD_VAR 0 2
26363: ARRAY
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: STR
26369: PUSH
26370: LD_STRING ,
26372: STR
26373: PUSH
26374: LD_VAR 0 3
26378: PUSH
26379: LD_VAR 0 2
26383: ARRAY
26384: PUSH
26385: LD_INT 2
26387: ARRAY
26388: STR
26389: PUSH
26390: LD_STRING ,
26392: STR
26393: PUSH
26394: LD_VAR 0 3
26398: PUSH
26399: LD_VAR 0 2
26403: ARRAY
26404: PUSH
26405: LD_INT 3
26407: ARRAY
26408: STR
26409: PUSH
26410: LD_STRING ,
26412: STR
26413: PUSH
26414: LD_VAR 0 3
26418: PUSH
26419: LD_VAR 0 2
26423: ARRAY
26424: PUSH
26425: LD_INT 4
26427: ARRAY
26428: STR
26429: PUSH
26430: LD_STRING )
26432: STR
26433: PPUSH
26434: CALL_OW 559
26438: GO 26348
26440: POP
26441: POP
// end ; end ;
26442: LD_VAR 0 1
26446: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26447: LD_INT 0
26449: PPUSH
// if HexInfo ( x , y ) = warehouse then
26450: LD_VAR 0 2
26454: PPUSH
26455: LD_VAR 0 3
26459: PPUSH
26460: CALL_OW 428
26464: PUSH
26465: LD_VAR 0 1
26469: EQUAL
26470: IFFALSE 26497
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26472: LD_ADDR_EXP 108
26476: PUSH
26477: LD_EXP 108
26481: PPUSH
26482: LD_VAR 0 1
26486: PPUSH
26487: LD_INT 0
26489: PPUSH
26490: CALL_OW 1
26494: ST_TO_ADDR
26495: GO 26548
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26497: LD_ADDR_EXP 108
26501: PUSH
26502: LD_EXP 108
26506: PPUSH
26507: LD_VAR 0 1
26511: PPUSH
26512: LD_VAR 0 1
26516: PPUSH
26517: CALL_OW 255
26521: PUSH
26522: LD_VAR 0 1
26526: PUSH
26527: LD_VAR 0 2
26531: PUSH
26532: LD_VAR 0 3
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PPUSH
26543: CALL_OW 1
26547: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26548: CALL 26557 0 0
// end ;
26552: LD_VAR 0 4
26556: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26562: LD_STRING resetWarehouseGatheringPoints();
26564: PPUSH
26565: CALL_OW 559
// if warehouseGatheringPoints then
26569: LD_EXP 108
26573: IFFALSE 26699
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26575: LD_ADDR_VAR 0 3
26579: PUSH
26580: LD_EXP 108
26584: PPUSH
26585: CALL 76014 0 1
26589: ST_TO_ADDR
// for i := 1 to list do
26590: LD_ADDR_VAR 0 2
26594: PUSH
26595: DOUBLE
26596: LD_INT 1
26598: DEC
26599: ST_TO_ADDR
26600: LD_VAR 0 3
26604: PUSH
26605: FOR_TO
26606: IFFALSE 26697
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26608: LD_STRING setWarehouseGatheringPointXY(
26610: PUSH
26611: LD_VAR 0 3
26615: PUSH
26616: LD_VAR 0 2
26620: ARRAY
26621: PUSH
26622: LD_INT 1
26624: ARRAY
26625: STR
26626: PUSH
26627: LD_STRING ,
26629: STR
26630: PUSH
26631: LD_VAR 0 3
26635: PUSH
26636: LD_VAR 0 2
26640: ARRAY
26641: PUSH
26642: LD_INT 2
26644: ARRAY
26645: STR
26646: PUSH
26647: LD_STRING ,
26649: STR
26650: PUSH
26651: LD_VAR 0 3
26655: PUSH
26656: LD_VAR 0 2
26660: ARRAY
26661: PUSH
26662: LD_INT 3
26664: ARRAY
26665: STR
26666: PUSH
26667: LD_STRING ,
26669: STR
26670: PUSH
26671: LD_VAR 0 3
26675: PUSH
26676: LD_VAR 0 2
26680: ARRAY
26681: PUSH
26682: LD_INT 4
26684: ARRAY
26685: STR
26686: PUSH
26687: LD_STRING )
26689: STR
26690: PPUSH
26691: CALL_OW 559
26695: GO 26605
26697: POP
26698: POP
// end ; end ;
26699: LD_VAR 0 1
26703: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26704: LD_EXP 108
26708: IFFALSE 27403
26710: GO 26712
26712: DISABLE
26713: LD_INT 0
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
// begin enable ;
26724: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: LD_EXP 108
26734: PPUSH
26735: CALL 76014 0 1
26739: ST_TO_ADDR
// if not list then
26740: LD_VAR 0 3
26744: NOT
26745: IFFALSE 26749
// exit ;
26747: GO 27403
// for i := 1 to list do
26749: LD_ADDR_VAR 0 1
26753: PUSH
26754: DOUBLE
26755: LD_INT 1
26757: DEC
26758: ST_TO_ADDR
26759: LD_VAR 0 3
26763: PUSH
26764: FOR_TO
26765: IFFALSE 27401
// begin depot := list [ i ] [ 2 ] ;
26767: LD_ADDR_VAR 0 8
26771: PUSH
26772: LD_VAR 0 3
26776: PUSH
26777: LD_VAR 0 1
26781: ARRAY
26782: PUSH
26783: LD_INT 2
26785: ARRAY
26786: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26787: LD_ADDR_VAR 0 5
26791: PUSH
26792: LD_VAR 0 3
26796: PUSH
26797: LD_VAR 0 1
26801: ARRAY
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26807: LD_VAR 0 8
26811: PPUSH
26812: CALL_OW 301
26816: IFTRUE 26835
26818: PUSH
26819: LD_VAR 0 5
26823: PUSH
26824: LD_VAR 0 8
26828: PPUSH
26829: CALL_OW 255
26833: NONEQUAL
26834: OR
26835: IFFALSE 26864
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26837: LD_ADDR_EXP 108
26841: PUSH
26842: LD_EXP 108
26846: PPUSH
26847: LD_VAR 0 8
26851: PPUSH
26852: LD_INT 0
26854: PPUSH
26855: CALL_OW 1
26859: ST_TO_ADDR
// exit ;
26860: POP
26861: POP
26862: GO 27403
// end ; x := list [ i ] [ 3 ] ;
26864: LD_ADDR_VAR 0 6
26868: PUSH
26869: LD_VAR 0 3
26873: PUSH
26874: LD_VAR 0 1
26878: ARRAY
26879: PUSH
26880: LD_INT 3
26882: ARRAY
26883: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26884: LD_ADDR_VAR 0 7
26888: PUSH
26889: LD_VAR 0 3
26893: PUSH
26894: LD_VAR 0 1
26898: ARRAY
26899: PUSH
26900: LD_INT 4
26902: ARRAY
26903: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26904: LD_ADDR_VAR 0 9
26908: PUSH
26909: LD_VAR 0 6
26913: PPUSH
26914: LD_VAR 0 7
26918: PPUSH
26919: LD_INT 16
26921: PPUSH
26922: CALL 74588 0 3
26926: ST_TO_ADDR
// if not cratesNearbyPoint then
26927: LD_VAR 0 9
26931: NOT
26932: IFFALSE 26938
// exit ;
26934: POP
26935: POP
26936: GO 27403
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26938: LD_ADDR_VAR 0 4
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_VAR 0 5
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 3
26957: PUSH
26958: LD_INT 60
26960: PUSH
26961: EMPTY
26962: LIST
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 91
26970: PUSH
26971: LD_VAR 0 8
26975: PUSH
26976: LD_INT 6
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 25
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 25
26999: PUSH
27000: LD_INT 16
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: PPUSH
27018: CALL_OW 69
27022: PUSH
27023: LD_VAR 0 8
27027: PPUSH
27028: CALL_OW 313
27032: PPUSH
27033: LD_INT 3
27035: PUSH
27036: LD_INT 60
27038: PUSH
27039: EMPTY
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: LD_INT 25
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 25
27061: PUSH
27062: LD_INT 16
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PPUSH
27078: CALL_OW 72
27082: UNION
27083: ST_TO_ADDR
// if tmp then
27084: LD_VAR 0 4
27088: IFFALSE 27168
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27090: LD_ADDR_VAR 0 4
27094: PUSH
27095: LD_VAR 0 4
27099: PPUSH
27100: LD_INT 3
27102: PPUSH
27103: CALL 72395 0 2
27107: ST_TO_ADDR
// for j in tmp do
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_VAR 0 4
27117: PUSH
27118: FOR_IN
27119: IFFALSE 27162
// begin if IsInUnit ( j ) then
27121: LD_VAR 0 2
27125: PPUSH
27126: CALL_OW 310
27130: IFFALSE 27141
// ComExit ( j ) ;
27132: LD_VAR 0 2
27136: PPUSH
27137: CALL 72478 0 1
// AddComCollect ( j , x , y ) ;
27141: LD_VAR 0 2
27145: PPUSH
27146: LD_VAR 0 6
27150: PPUSH
27151: LD_VAR 0 7
27155: PPUSH
27156: CALL_OW 177
// end ;
27160: GO 27118
27162: POP
27163: POP
// exit ;
27164: POP
27165: POP
27166: GO 27403
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27168: LD_ADDR_VAR 0 4
27172: PUSH
27173: LD_INT 22
27175: PUSH
27176: LD_VAR 0 5
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 91
27187: PUSH
27188: LD_VAR 0 8
27192: PUSH
27193: LD_INT 8
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: LD_INT 34
27206: PUSH
27207: LD_INT 12
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 34
27216: PUSH
27217: LD_INT 51
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 34
27226: PUSH
27227: LD_INT 32
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 34
27236: PUSH
27237: LD_INT 89
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: PPUSH
27256: CALL_OW 69
27260: ST_TO_ADDR
// if tmp then
27261: LD_VAR 0 4
27265: IFFALSE 27399
// begin for j in tmp do
27267: LD_ADDR_VAR 0 2
27271: PUSH
27272: LD_VAR 0 4
27276: PUSH
27277: FOR_IN
27278: IFFALSE 27397
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 262
27289: PUSH
27290: LD_INT 3
27292: EQUAL
27293: IFTRUE 27310
27295: PUSH
27296: LD_VAR 0 2
27300: PPUSH
27301: CALL_OW 261
27305: PUSH
27306: LD_INT 20
27308: GREATER
27309: OR
27310: IFFALSE 27324
27312: PUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 314
27322: NOT
27323: AND
27324: IFFALSE 27354
27326: PUSH
27327: LD_VAR 0 2
27331: PPUSH
27332: CALL_OW 263
27336: PUSH
27337: LD_INT 1
27339: NONEQUAL
27340: IFTRUE 27353
27342: PUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 311
27352: OR
27353: AND
27354: IFFALSE 27395
// begin ComCollect ( j , x , y ) ;
27356: LD_VAR 0 2
27360: PPUSH
27361: LD_VAR 0 6
27365: PPUSH
27366: LD_VAR 0 7
27370: PPUSH
27371: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27375: LD_VAR 0 2
27379: PPUSH
27380: LD_VAR 0 8
27384: PPUSH
27385: CALL_OW 172
// exit ;
27389: POP
27390: POP
27391: POP
27392: POP
27393: GO 27403
// end ;
27395: GO 27277
27397: POP
27398: POP
// end ; end ;
27399: GO 26764
27401: POP
27402: POP
// end ; end_of_file
27403: PPOPN 9
27405: END
// export function SOS_UnitDestroyed ( un ) ; begin
27406: LD_INT 0
27408: PPUSH
// ComRadiation ( un ) ;
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL 28576 0 1
// end ;
27418: LD_VAR 0 2
27422: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27423: LD_INT 0
27425: PPUSH
// ComRadiation ( un ) ;
27426: LD_VAR 0 1
27430: PPUSH
27431: CALL 28576 0 1
// end ;
27435: LD_VAR 0 2
27439: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27440: LD_INT 0
27442: PPUSH
// end ;
27443: LD_VAR 0 4
27447: RET
// export function SOS_Command ( cmd ) ; begin
27448: LD_INT 0
27450: PPUSH
// end ;
27451: LD_VAR 0 2
27455: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27456: LD_INT 0
27458: PPUSH
// end ;
27459: LD_VAR 0 6
27463: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
27464: LD_INT 0
27466: PPUSH
27467: PPUSH
27468: PPUSH
27469: PPUSH
27470: PPUSH
// if not vehicle or not factory then
27471: LD_VAR 0 1
27475: NOT
27476: IFTRUE 27485
27478: PUSH
27479: LD_VAR 0 2
27483: NOT
27484: OR
27485: IFFALSE 27489
// exit ;
27487: GO 28151
// weapon := GetWeapon ( vehicle ) ;
27489: LD_ADDR_VAR 0 7
27493: PUSH
27494: LD_VAR 0 1
27498: PPUSH
27499: CALL_OW 264
27503: ST_TO_ADDR
// if weapon = ar_miner then
27504: LD_VAR 0 7
27508: PUSH
27509: LD_INT 81
27511: EQUAL
27512: IFFALSE 27569
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27514: LD_ADDR_EXP 117
27518: PUSH
27519: LD_EXP 117
27523: PPUSH
27524: LD_EXP 117
27528: PUSH
27529: LD_INT 1
27531: PLUS
27532: PPUSH
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL_OW 1
27542: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27543: LD_ADDR_EXP 118
27547: PUSH
27548: LD_EXP 118
27552: PPUSH
27553: LD_EXP 118
27557: PUSH
27558: LD_INT 1
27560: PLUS
27561: PPUSH
27562: EMPTY
27563: PPUSH
27564: CALL_OW 1
27568: ST_TO_ADDR
// end ; if not factoryWaypoints then
27569: LD_EXP 106
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 28151
// for i := 1 to Count ( factoryWaypoints ) do
27578: LD_ADDR_VAR 0 4
27582: PUSH
27583: DOUBLE
27584: LD_INT 1
27586: DEC
27587: ST_TO_ADDR
27588: LD_EXP 106
27592: PPUSH
27593: CALL 36104 0 1
27597: PUSH
27598: FOR_TO
27599: IFFALSE 28149
// if factoryWaypoints [ i ] [ 2 ] = factory then
27601: LD_EXP 106
27605: PUSH
27606: LD_VAR 0 4
27610: ARRAY
27611: PUSH
27612: LD_INT 2
27614: ARRAY
27615: PUSH
27616: LD_VAR 0 2
27620: EQUAL
27621: IFFALSE 28147
// begin if GetControl ( vehicle ) = control_manual then
27623: LD_VAR 0 1
27627: PPUSH
27628: CALL_OW 263
27632: PUSH
27633: LD_INT 1
27635: EQUAL
27636: IFFALSE 28000
// begin driver := IsDrivenBy ( vehicle ) ;
27638: LD_ADDR_VAR 0 5
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 311
27652: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27653: LD_VAR 0 5
27657: PUSH
27658: LD_EXP 107
27662: IN
27663: IFTRUE 27677
27665: PUSH
27666: LD_VAR 0 1
27670: PUSH
27671: LD_EXP 107
27675: IN
27676: OR
27677: IFFALSE 27683
// exit ;
27679: POP
27680: POP
27681: GO 28151
// if not HasTask ( driver ) then
27683: LD_VAR 0 5
27687: PPUSH
27688: CALL_OW 314
27692: NOT
27693: IFFALSE 27998
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27695: LD_ADDR_EXP 107
27699: PUSH
27700: LD_EXP 107
27704: PPUSH
27705: LD_VAR 0 5
27709: PPUSH
27710: CALL 72080 0 2
27714: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27715: LD_ADDR_EXP 107
27719: PUSH
27720: LD_EXP 107
27724: PPUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL 72080 0 2
27734: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27735: LD_ADDR_VAR 0 6
27739: PUSH
27740: LD_EXP 106
27744: PUSH
27745: LD_VAR 0 4
27749: ARRAY
27750: PUSH
27751: LD_INT 3
27753: ARRAY
27754: PPUSH
27755: LD_EXP 106
27759: PUSH
27760: LD_VAR 0 4
27764: ARRAY
27765: PUSH
27766: LD_INT 4
27768: ARRAY
27769: PPUSH
27770: CALL_OW 428
27774: ST_TO_ADDR
// if hex then
27775: LD_VAR 0 6
27779: IFFALSE 27797
// ComMoveUnit ( driver , hex ) else
27781: LD_VAR 0 5
27785: PPUSH
27786: LD_VAR 0 6
27790: PPUSH
27791: CALL_OW 112
27795: GO 27881
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27797: LD_VAR 0 1
27801: PPUSH
27802: LD_EXP 106
27806: PUSH
27807: LD_VAR 0 4
27811: ARRAY
27812: PUSH
27813: LD_INT 3
27815: ARRAY
27816: PPUSH
27817: LD_EXP 106
27821: PUSH
27822: LD_VAR 0 4
27826: ARRAY
27827: PUSH
27828: LD_INT 4
27830: ARRAY
27831: PPUSH
27832: CALL_OW 297
27836: PUSH
27837: LD_INT 0
27839: GREATER
27840: IFFALSE 27881
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27842: LD_VAR 0 5
27846: PPUSH
27847: LD_EXP 106
27851: PUSH
27852: LD_VAR 0 4
27856: ARRAY
27857: PUSH
27858: LD_INT 3
27860: ARRAY
27861: PPUSH
27862: LD_EXP 106
27866: PUSH
27867: LD_VAR 0 4
27871: ARRAY
27872: PUSH
27873: LD_INT 4
27875: ARRAY
27876: PPUSH
27877: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27881: LD_VAR 0 5
27885: PPUSH
27886: CALL_OW 181
// if Multiplayer then
27890: LD_OWVAR 4
27894: IFFALSE 27943
// begin repeat wait ( 10 ) ;
27896: LD_INT 10
27898: PPUSH
27899: CALL_OW 67
// until not IsInUnit ( driver ) ;
27903: LD_VAR 0 5
27907: PPUSH
27908: CALL_OW 310
27912: NOT
27913: IFFALSE 27896
// if not HasTask ( driver ) then
27915: LD_VAR 0 5
27919: PPUSH
27920: CALL_OW 314
27924: NOT
27925: IFFALSE 27941
// ComEnterUnit ( driver , factory ) ;
27927: LD_VAR 0 5
27931: PPUSH
27932: LD_VAR 0 2
27936: PPUSH
27937: CALL_OW 120
// end else
27941: GO 27957
// AddComEnterUnit ( driver , factory ) ;
27943: LD_VAR 0 5
27947: PPUSH
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 180
// wait ( 0 0$1 ) ;
27957: LD_INT 35
27959: PPUSH
27960: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27964: LD_ADDR_EXP 107
27968: PUSH
27969: LD_EXP 107
27973: PUSH
27974: LD_VAR 0 5
27978: DIFF
27979: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27980: LD_ADDR_EXP 107
27984: PUSH
27985: LD_EXP 107
27989: PUSH
27990: LD_VAR 0 1
27994: DIFF
27995: ST_TO_ADDR
// break ;
27996: GO 28149
// end ; end else
27998: GO 28147
// if GetControl ( vehicle ) = control_remote then
28000: LD_VAR 0 1
28004: PPUSH
28005: CALL_OW 263
28009: PUSH
28010: LD_INT 2
28012: EQUAL
28013: IFFALSE 28099
// begin wait ( 0 0$2 ) ;
28015: LD_INT 70
28017: PPUSH
28018: CALL_OW 67
// repeat wait ( 10 ) ;
28022: LD_INT 10
28024: PPUSH
28025: CALL_OW 67
// Connect ( vehicle ) ;
28029: LD_VAR 0 1
28033: PPUSH
28034: CALL 42382 0 1
// until IsControledBy ( vehicle ) ;
28038: LD_VAR 0 1
28042: PPUSH
28043: CALL_OW 312
28047: IFFALSE 28022
// wait ( 10 ) ;
28049: LD_INT 10
28051: PPUSH
28052: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28056: LD_VAR 0 1
28060: PPUSH
28061: LD_EXP 106
28065: PUSH
28066: LD_VAR 0 4
28070: ARRAY
28071: PUSH
28072: LD_INT 3
28074: ARRAY
28075: PPUSH
28076: LD_EXP 106
28080: PUSH
28081: LD_VAR 0 4
28085: ARRAY
28086: PUSH
28087: LD_INT 4
28089: ARRAY
28090: PPUSH
28091: CALL_OW 111
// break ;
28095: GO 28149
// end else
28097: GO 28147
// begin wait ( 0 0$3 ) ;
28099: LD_INT 105
28101: PPUSH
28102: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28106: LD_VAR 0 1
28110: PPUSH
28111: LD_EXP 106
28115: PUSH
28116: LD_VAR 0 4
28120: ARRAY
28121: PUSH
28122: LD_INT 3
28124: ARRAY
28125: PPUSH
28126: LD_EXP 106
28130: PUSH
28131: LD_VAR 0 4
28135: ARRAY
28136: PUSH
28137: LD_INT 4
28139: ARRAY
28140: PPUSH
28141: CALL_OW 111
// break ;
28145: GO 28149
// end ; end ;
28147: GO 27598
28149: POP
28150: POP
// end ;
28151: LD_VAR 0 3
28155: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28156: LD_INT 0
28158: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28159: LD_VAR 0 1
28163: PUSH
28164: LD_INT 250
28166: EQUAL
28167: IFFALSE 28184
28169: PUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: CALL_OW 264
28179: PUSH
28180: LD_INT 81
28182: EQUAL
28183: AND
28184: IFFALSE 28205
// MinerPlaceMine ( unit , x , y ) ;
28186: LD_VAR 0 2
28190: PPUSH
28191: LD_VAR 0 4
28195: PPUSH
28196: LD_VAR 0 5
28200: PPUSH
28201: CALL 31551 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28205: LD_VAR 0 1
28209: PUSH
28210: LD_INT 251
28212: EQUAL
28213: IFFALSE 28230
28215: PUSH
28216: LD_VAR 0 2
28220: PPUSH
28221: CALL_OW 264
28225: PUSH
28226: LD_INT 81
28228: EQUAL
28229: AND
28230: IFFALSE 28251
// MinerDetonateMine ( unit , x , y ) ;
28232: LD_VAR 0 2
28236: PPUSH
28237: LD_VAR 0 4
28241: PPUSH
28242: LD_VAR 0 5
28246: PPUSH
28247: CALL 31958 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28251: LD_VAR 0 1
28255: PUSH
28256: LD_INT 252
28258: EQUAL
28259: IFFALSE 28276
28261: PUSH
28262: LD_VAR 0 2
28266: PPUSH
28267: CALL_OW 264
28271: PUSH
28272: LD_INT 81
28274: EQUAL
28275: AND
28276: IFFALSE 28297
// MinerCreateMinefield ( unit , x , y ) ;
28278: LD_VAR 0 2
28282: PPUSH
28283: LD_VAR 0 4
28287: PPUSH
28288: LD_VAR 0 5
28292: PPUSH
28293: CALL 32190 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28297: LD_VAR 0 1
28301: PUSH
28302: LD_INT 253
28304: EQUAL
28305: IFFALSE 28322
28307: PUSH
28308: LD_VAR 0 2
28312: PPUSH
28313: CALL_OW 257
28317: PUSH
28318: LD_INT 5
28320: EQUAL
28321: AND
28322: IFFALSE 28343
// ComBinocular ( unit , x , y ) ;
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_VAR 0 4
28333: PPUSH
28334: LD_VAR 0 5
28338: PPUSH
28339: CALL 32565 0 3
// if selectedUnit then
28343: LD_VAR 0 3
28347: IFFALSE 28407
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28349: LD_VAR 0 1
28353: PUSH
28354: LD_INT 254
28356: EQUAL
28357: IFFALSE 28374
28359: PUSH
28360: LD_VAR 0 2
28364: PPUSH
28365: CALL_OW 264
28369: PUSH
28370: LD_INT 99
28372: EQUAL
28373: AND
28374: IFFALSE 28391
28376: PUSH
28377: LD_VAR 0 3
28381: PPUSH
28382: CALL_OW 263
28386: PUSH
28387: LD_INT 3
28389: EQUAL
28390: AND
28391: IFFALSE 28407
// HackDestroyVehicle ( unit , selectedUnit ) ;
28393: LD_VAR 0 2
28397: PPUSH
28398: LD_VAR 0 3
28402: PPUSH
28403: CALL 30741 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28407: LD_VAR 0 1
28411: PUSH
28412: LD_INT 255
28414: EQUAL
28415: IFFALSE 28439
28417: PUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL_OW 264
28427: PUSH
28428: LD_INT 14
28430: PUSH
28431: LD_INT 53
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: IN
28438: AND
28439: IFFALSE 28457
28441: PUSH
28442: LD_VAR 0 4
28446: PPUSH
28447: LD_VAR 0 5
28451: PPUSH
28452: CALL_OW 488
28456: AND
28457: IFFALSE 28481
// CutTreeXYR ( unit , x , y , 12 ) ;
28459: LD_VAR 0 2
28463: PPUSH
28464: LD_VAR 0 4
28468: PPUSH
28469: LD_VAR 0 5
28473: PPUSH
28474: LD_INT 12
28476: PPUSH
28477: CALL 28672 0 4
// if cmd = 256 then
28481: LD_VAR 0 1
28485: PUSH
28486: LD_INT 256
28488: EQUAL
28489: IFFALSE 28510
// SetFactoryWaypoint ( unit , x , y ) ;
28491: LD_VAR 0 2
28495: PPUSH
28496: LD_VAR 0 4
28500: PPUSH
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL 25951 0 3
// if cmd = 257 then
28510: LD_VAR 0 1
28514: PUSH
28515: LD_INT 257
28517: EQUAL
28518: IFFALSE 28539
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28520: LD_VAR 0 2
28524: PPUSH
28525: LD_VAR 0 4
28529: PPUSH
28530: LD_VAR 0 5
28534: PPUSH
28535: CALL 26447 0 3
// if cmd = 258 then
28539: LD_VAR 0 1
28543: PUSH
28544: LD_INT 258
28546: EQUAL
28547: IFFALSE 28571
// BurnTreeXYR ( unit , x , y , 8 ) ;
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_VAR 0 4
28558: PPUSH
28559: LD_VAR 0 5
28563: PPUSH
28564: LD_INT 8
28566: PPUSH
28567: CALL 29094 0 4
// end ;
28571: LD_VAR 0 6
28575: RET
// export function ComRadiation ( un ) ; var eff ; begin
28576: LD_INT 0
28578: PPUSH
28579: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28580: LD_VAR 0 1
28584: PPUSH
28585: CALL_OW 264
28589: PUSH
28590: LD_INT 91
28592: NONEQUAL
28593: IFFALSE 28597
// exit ;
28595: GO 28667
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28597: LD_INT 68
28599: PPUSH
28600: LD_VAR 0 1
28604: PPUSH
28605: CALL_OW 255
28609: PPUSH
28610: CALL_OW 321
28614: PUSH
28615: LD_INT 2
28617: EQUAL
28618: IFFALSE 28630
// eff := 50 else
28620: LD_ADDR_VAR 0 3
28624: PUSH
28625: LD_INT 50
28627: ST_TO_ADDR
28628: GO 28638
// eff := 25 ;
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_INT 25
28637: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 250
28647: PPUSH
28648: LD_VAR 0 1
28652: PPUSH
28653: CALL_OW 251
28657: PPUSH
28658: LD_VAR 0 3
28662: PPUSH
28663: CALL_OW 495
// end ;
28667: LD_VAR 0 2
28671: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28672: LD_INT 0
28674: PPUSH
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28683: LD_VAR 0 1
28687: PPUSH
28688: CALL_OW 302
28692: NOT
28693: IFTRUE 28712
28695: PUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_VAR 0 3
28705: PPUSH
28706: CALL_OW 488
28710: NOT
28711: OR
28712: IFTRUE 28721
28714: PUSH
28715: LD_VAR 0 4
28719: NOT
28720: OR
28721: IFFALSE 28725
// exit ;
28723: GO 29089
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 437
28734: PPUSH
28735: CALL 36104 0 1
28739: PUSH
28740: LD_INT 10
28742: GREATER
28743: IFFALSE 28747
// exit ;
28745: GO 29089
// list := [ ] ;
28747: LD_ADDR_VAR 0 13
28751: PUSH
28752: EMPTY
28753: ST_TO_ADDR
// if x - r < 0 then
28754: LD_VAR 0 2
28758: PUSH
28759: LD_VAR 0 4
28763: MINUS
28764: PUSH
28765: LD_INT 0
28767: LESS
28768: IFFALSE 28780
// min_x := 0 else
28770: LD_ADDR_VAR 0 7
28774: PUSH
28775: LD_INT 0
28777: ST_TO_ADDR
28778: GO 28796
// min_x := x - r ;
28780: LD_ADDR_VAR 0 7
28784: PUSH
28785: LD_VAR 0 2
28789: PUSH
28790: LD_VAR 0 4
28794: MINUS
28795: ST_TO_ADDR
// if y - r < 0 then
28796: LD_VAR 0 3
28800: PUSH
28801: LD_VAR 0 4
28805: MINUS
28806: PUSH
28807: LD_INT 0
28809: LESS
28810: IFFALSE 28822
// min_y := 0 else
28812: LD_ADDR_VAR 0 8
28816: PUSH
28817: LD_INT 0
28819: ST_TO_ADDR
28820: GO 28838
// min_y := y - r ;
28822: LD_ADDR_VAR 0 8
28826: PUSH
28827: LD_VAR 0 3
28831: PUSH
28832: LD_VAR 0 4
28836: MINUS
28837: ST_TO_ADDR
// max_x := x + r ;
28838: LD_ADDR_VAR 0 9
28842: PUSH
28843: LD_VAR 0 2
28847: PUSH
28848: LD_VAR 0 4
28852: PLUS
28853: ST_TO_ADDR
// max_y := y + r ;
28854: LD_ADDR_VAR 0 10
28858: PUSH
28859: LD_VAR 0 3
28863: PUSH
28864: LD_VAR 0 4
28868: PLUS
28869: ST_TO_ADDR
// for _x = min_x to max_x do
28870: LD_ADDR_VAR 0 11
28874: PUSH
28875: DOUBLE
28876: LD_VAR 0 7
28880: DEC
28881: ST_TO_ADDR
28882: LD_VAR 0 9
28886: PUSH
28887: FOR_TO
28888: IFFALSE 29007
// for _y = min_y to max_y do
28890: LD_ADDR_VAR 0 12
28894: PUSH
28895: DOUBLE
28896: LD_VAR 0 8
28900: DEC
28901: ST_TO_ADDR
28902: LD_VAR 0 10
28906: PUSH
28907: FOR_TO
28908: IFFALSE 29003
// begin if not ValidHex ( _x , _y ) then
28910: LD_VAR 0 11
28914: PPUSH
28915: LD_VAR 0 12
28919: PPUSH
28920: CALL_OW 488
28924: NOT
28925: IFFALSE 28929
// continue ;
28927: GO 28907
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28929: LD_VAR 0 11
28933: PPUSH
28934: LD_VAR 0 12
28938: PPUSH
28939: CALL_OW 351
28943: IFFALSE 28961
28945: PUSH
28946: LD_VAR 0 11
28950: PPUSH
28951: LD_VAR 0 12
28955: PPUSH
28956: CALL_OW 554
28960: AND
28961: IFFALSE 29001
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28963: LD_ADDR_VAR 0 13
28967: PUSH
28968: LD_VAR 0 13
28972: PPUSH
28973: LD_VAR 0 13
28977: PUSH
28978: LD_INT 1
28980: PLUS
28981: PPUSH
28982: LD_VAR 0 11
28986: PUSH
28987: LD_VAR 0 12
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PPUSH
28996: CALL_OW 2
29000: ST_TO_ADDR
// end ;
29001: GO 28907
29003: POP
29004: POP
29005: GO 28887
29007: POP
29008: POP
// if not list then
29009: LD_VAR 0 13
29013: NOT
29014: IFFALSE 29018
// exit ;
29016: GO 29089
// for i in list do
29018: LD_ADDR_VAR 0 6
29022: PUSH
29023: LD_VAR 0 13
29027: PUSH
29028: FOR_IN
29029: IFFALSE 29087
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29031: LD_VAR 0 1
29035: PPUSH
29036: LD_STRING M
29038: PUSH
29039: LD_VAR 0 6
29043: PUSH
29044: LD_INT 1
29046: ARRAY
29047: PUSH
29048: LD_VAR 0 6
29052: PUSH
29053: LD_INT 2
29055: ARRAY
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: PPUSH
29081: CALL_OW 447
29085: GO 29028
29087: POP
29088: POP
// end ;
29089: LD_VAR 0 5
29093: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29094: LD_INT 0
29096: PPUSH
29097: PPUSH
29098: PPUSH
29099: PPUSH
29100: PPUSH
29101: PPUSH
29102: PPUSH
29103: PPUSH
29104: PPUSH
29105: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 302
29115: NOT
29116: IFTRUE 29135
29118: PUSH
29119: LD_VAR 0 2
29123: PPUSH
29124: LD_VAR 0 3
29128: PPUSH
29129: CALL_OW 488
29133: NOT
29134: OR
29135: IFTRUE 29144
29137: PUSH
29138: LD_VAR 0 4
29142: NOT
29143: OR
29144: IFFALSE 29148
// exit ;
29146: GO 29687
// if Count ( GetTaskList ( flame ) ) > 10 then
29148: LD_VAR 0 1
29152: PPUSH
29153: CALL_OW 437
29157: PPUSH
29158: CALL 36104 0 1
29162: PUSH
29163: LD_INT 10
29165: GREATER
29166: IFFALSE 29170
// exit ;
29168: GO 29687
// list := [ ] ;
29170: LD_ADDR_VAR 0 13
29174: PUSH
29175: EMPTY
29176: ST_TO_ADDR
// if x - r < 0 then
29177: LD_VAR 0 2
29181: PUSH
29182: LD_VAR 0 4
29186: MINUS
29187: PUSH
29188: LD_INT 0
29190: LESS
29191: IFFALSE 29203
// min_x := 0 else
29193: LD_ADDR_VAR 0 7
29197: PUSH
29198: LD_INT 0
29200: ST_TO_ADDR
29201: GO 29219
// min_x := x - r ;
29203: LD_ADDR_VAR 0 7
29207: PUSH
29208: LD_VAR 0 2
29212: PUSH
29213: LD_VAR 0 4
29217: MINUS
29218: ST_TO_ADDR
// if y - r < 0 then
29219: LD_VAR 0 3
29223: PUSH
29224: LD_VAR 0 4
29228: MINUS
29229: PUSH
29230: LD_INT 0
29232: LESS
29233: IFFALSE 29245
// min_y := 0 else
29235: LD_ADDR_VAR 0 8
29239: PUSH
29240: LD_INT 0
29242: ST_TO_ADDR
29243: GO 29261
// min_y := y - r ;
29245: LD_ADDR_VAR 0 8
29249: PUSH
29250: LD_VAR 0 3
29254: PUSH
29255: LD_VAR 0 4
29259: MINUS
29260: ST_TO_ADDR
// max_x := x + r ;
29261: LD_ADDR_VAR 0 9
29265: PUSH
29266: LD_VAR 0 2
29270: PUSH
29271: LD_VAR 0 4
29275: PLUS
29276: ST_TO_ADDR
// max_y := y + r ;
29277: LD_ADDR_VAR 0 10
29281: PUSH
29282: LD_VAR 0 3
29286: PUSH
29287: LD_VAR 0 4
29291: PLUS
29292: ST_TO_ADDR
// for _x = min_x to max_x do
29293: LD_ADDR_VAR 0 11
29297: PUSH
29298: DOUBLE
29299: LD_VAR 0 7
29303: DEC
29304: ST_TO_ADDR
29305: LD_VAR 0 9
29309: PUSH
29310: FOR_TO
29311: IFFALSE 29430
// for _y = min_y to max_y do
29313: LD_ADDR_VAR 0 12
29317: PUSH
29318: DOUBLE
29319: LD_VAR 0 8
29323: DEC
29324: ST_TO_ADDR
29325: LD_VAR 0 10
29329: PUSH
29330: FOR_TO
29331: IFFALSE 29426
// begin if not ValidHex ( _x , _y ) then
29333: LD_VAR 0 11
29337: PPUSH
29338: LD_VAR 0 12
29342: PPUSH
29343: CALL_OW 488
29347: NOT
29348: IFFALSE 29352
// continue ;
29350: GO 29330
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29352: LD_VAR 0 11
29356: PPUSH
29357: LD_VAR 0 12
29361: PPUSH
29362: CALL_OW 351
29366: IFFALSE 29384
29368: PUSH
29369: LD_VAR 0 11
29373: PPUSH
29374: LD_VAR 0 12
29378: PPUSH
29379: CALL_OW 554
29383: AND
29384: IFFALSE 29424
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29386: LD_ADDR_VAR 0 13
29390: PUSH
29391: LD_VAR 0 13
29395: PPUSH
29396: LD_VAR 0 13
29400: PUSH
29401: LD_INT 1
29403: PLUS
29404: PPUSH
29405: LD_VAR 0 11
29409: PUSH
29410: LD_VAR 0 12
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PPUSH
29419: CALL_OW 2
29423: ST_TO_ADDR
// end ;
29424: GO 29330
29426: POP
29427: POP
29428: GO 29310
29430: POP
29431: POP
// if not list then
29432: LD_VAR 0 13
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29687
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29441: LD_ADDR_VAR 0 13
29445: PUSH
29446: LD_VAR 0 1
29450: PPUSH
29451: LD_VAR 0 13
29455: PPUSH
29456: LD_INT 1
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: CALL 39510 0 4
29466: ST_TO_ADDR
// ComStop ( flame ) ;
29467: LD_VAR 0 1
29471: PPUSH
29472: CALL_OW 141
// for i in list do
29476: LD_ADDR_VAR 0 6
29480: PUSH
29481: LD_VAR 0 13
29485: PUSH
29486: FOR_IN
29487: IFFALSE 29518
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29489: LD_VAR 0 1
29493: PPUSH
29494: LD_VAR 0 6
29498: PUSH
29499: LD_INT 1
29501: ARRAY
29502: PPUSH
29503: LD_VAR 0 6
29507: PUSH
29508: LD_INT 2
29510: ARRAY
29511: PPUSH
29512: CALL_OW 176
29516: GO 29486
29518: POP
29519: POP
// repeat wait ( 0 0$1 ) ;
29520: LD_INT 35
29522: PPUSH
29523: CALL_OW 67
// task := GetTaskList ( flame ) ;
29527: LD_ADDR_VAR 0 14
29531: PUSH
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 437
29541: ST_TO_ADDR
// if not task then
29542: LD_VAR 0 14
29546: NOT
29547: IFFALSE 29551
// exit ;
29549: GO 29687
// if task [ 1 ] [ 1 ] <> | then
29551: LD_VAR 0 14
29555: PUSH
29556: LD_INT 1
29558: ARRAY
29559: PUSH
29560: LD_INT 1
29562: ARRAY
29563: PUSH
29564: LD_STRING |
29566: NONEQUAL
29567: IFFALSE 29571
// exit ;
29569: GO 29687
// _x := task [ 1 ] [ 2 ] ;
29571: LD_ADDR_VAR 0 11
29575: PUSH
29576: LD_VAR 0 14
29580: PUSH
29581: LD_INT 1
29583: ARRAY
29584: PUSH
29585: LD_INT 2
29587: ARRAY
29588: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29589: LD_ADDR_VAR 0 12
29593: PUSH
29594: LD_VAR 0 14
29598: PUSH
29599: LD_INT 1
29601: ARRAY
29602: PUSH
29603: LD_INT 3
29605: ARRAY
29606: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29607: LD_VAR 0 11
29611: PPUSH
29612: LD_VAR 0 12
29616: PPUSH
29617: CALL_OW 351
29621: NOT
29622: IFTRUE 29641
29624: PUSH
29625: LD_VAR 0 11
29629: PPUSH
29630: LD_VAR 0 12
29634: PPUSH
29635: CALL_OW 554
29639: NOT
29640: OR
29641: IFFALSE 29675
// begin task := Delete ( task , 1 ) ;
29643: LD_ADDR_VAR 0 14
29647: PUSH
29648: LD_VAR 0 14
29652: PPUSH
29653: LD_INT 1
29655: PPUSH
29656: CALL_OW 3
29660: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29661: LD_VAR 0 1
29665: PPUSH
29666: LD_VAR 0 14
29670: PPUSH
29671: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29675: LD_VAR 0 1
29679: PPUSH
29680: CALL_OW 314
29684: NOT
29685: IFFALSE 29520
// end ;
29687: LD_VAR 0 5
29691: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29692: LD_EXP 110
29696: NOT
29697: IFFALSE 29747
29699: GO 29701
29701: DISABLE
// begin initHack := true ;
29702: LD_ADDR_EXP 110
29706: PUSH
29707: LD_INT 1
29709: ST_TO_ADDR
// hackTanks := [ ] ;
29710: LD_ADDR_EXP 111
29714: PUSH
29715: EMPTY
29716: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29717: LD_ADDR_EXP 112
29721: PUSH
29722: EMPTY
29723: ST_TO_ADDR
// hackLimit := 3 ;
29724: LD_ADDR_EXP 113
29728: PUSH
29729: LD_INT 3
29731: ST_TO_ADDR
// hackDist := 12 ;
29732: LD_ADDR_EXP 114
29736: PUSH
29737: LD_INT 12
29739: ST_TO_ADDR
// hackCounter := [ ] ;
29740: LD_ADDR_EXP 115
29744: PUSH
29745: EMPTY
29746: ST_TO_ADDR
// end ;
29747: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29748: LD_EXP 110
29752: IFFALSE 29770
29754: PUSH
29755: LD_INT 34
29757: PUSH
29758: LD_INT 99
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PPUSH
29765: CALL_OW 69
29769: AND
29770: IFFALSE 30023
29772: GO 29774
29774: DISABLE
29775: LD_INT 0
29777: PPUSH
29778: PPUSH
// begin enable ;
29779: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29780: LD_ADDR_VAR 0 1
29784: PUSH
29785: LD_INT 34
29787: PUSH
29788: LD_INT 99
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PPUSH
29795: CALL_OW 69
29799: PUSH
29800: FOR_IN
29801: IFFALSE 30021
// begin if not i in hackTanks then
29803: LD_VAR 0 1
29807: PUSH
29808: LD_EXP 111
29812: IN
29813: NOT
29814: IFFALSE 29897
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29816: LD_ADDR_EXP 111
29820: PUSH
29821: LD_EXP 111
29825: PPUSH
29826: LD_EXP 111
29830: PUSH
29831: LD_INT 1
29833: PLUS
29834: PPUSH
29835: LD_VAR 0 1
29839: PPUSH
29840: CALL_OW 1
29844: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29845: LD_ADDR_EXP 112
29849: PUSH
29850: LD_EXP 112
29854: PPUSH
29855: LD_EXP 112
29859: PUSH
29860: LD_INT 1
29862: PLUS
29863: PPUSH
29864: EMPTY
29865: PPUSH
29866: CALL_OW 1
29870: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29871: LD_ADDR_EXP 115
29875: PUSH
29876: LD_EXP 115
29880: PPUSH
29881: LD_EXP 115
29885: PUSH
29886: LD_INT 1
29888: PLUS
29889: PPUSH
29890: EMPTY
29891: PPUSH
29892: CALL_OW 1
29896: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29897: LD_VAR 0 1
29901: PPUSH
29902: CALL_OW 302
29906: NOT
29907: IFFALSE 29920
// begin HackUnlinkAll ( i ) ;
29909: LD_VAR 0 1
29913: PPUSH
29914: CALL 30026 0 1
// continue ;
29918: GO 29800
// end ; HackCheckCapturedStatus ( i ) ;
29920: LD_VAR 0 1
29924: PPUSH
29925: CALL 30471 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29929: LD_ADDR_VAR 0 2
29933: PUSH
29934: LD_INT 81
29936: PUSH
29937: LD_VAR 0 1
29941: PPUSH
29942: CALL_OW 255
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 33
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 91
29963: PUSH
29964: LD_VAR 0 1
29968: PUSH
29969: LD_EXP 114
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 50
29981: PUSH
29982: EMPTY
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 69
29995: ST_TO_ADDR
// if not tmp then
29996: LD_VAR 0 2
30000: NOT
30001: IFFALSE 30005
// continue ;
30003: GO 29800
// HackLink ( i , tmp ) ;
30005: LD_VAR 0 1
30009: PPUSH
30010: LD_VAR 0 2
30014: PPUSH
30015: CALL 30162 0 2
// end ;
30019: GO 29800
30021: POP
30022: POP
// end ;
30023: PPOPN 2
30025: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30026: LD_INT 0
30028: PPUSH
30029: PPUSH
30030: PPUSH
// if not hack in hackTanks then
30031: LD_VAR 0 1
30035: PUSH
30036: LD_EXP 111
30040: IN
30041: NOT
30042: IFFALSE 30046
// exit ;
30044: GO 30157
// index := GetElementIndex ( hackTanks , hack ) ;
30046: LD_ADDR_VAR 0 4
30050: PUSH
30051: LD_EXP 111
30055: PPUSH
30056: LD_VAR 0 1
30060: PPUSH
30061: CALL 38805 0 2
30065: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30066: LD_EXP 112
30070: PUSH
30071: LD_VAR 0 4
30075: ARRAY
30076: IFFALSE 30157
// begin for i in hackTanksCaptured [ index ] do
30078: LD_ADDR_VAR 0 3
30082: PUSH
30083: LD_EXP 112
30087: PUSH
30088: LD_VAR 0 4
30092: ARRAY
30093: PUSH
30094: FOR_IN
30095: IFFALSE 30121
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30097: LD_VAR 0 3
30101: PUSH
30102: LD_INT 1
30104: ARRAY
30105: PPUSH
30106: LD_VAR 0 3
30110: PUSH
30111: LD_INT 2
30113: ARRAY
30114: PPUSH
30115: CALL_OW 235
30119: GO 30094
30121: POP
30122: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30123: LD_ADDR_EXP 112
30127: PUSH
30128: LD_EXP 112
30132: PPUSH
30133: LD_VAR 0 4
30137: PPUSH
30138: EMPTY
30139: PPUSH
30140: CALL_OW 1
30144: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30145: LD_VAR 0 1
30149: PPUSH
30150: LD_INT 0
30152: PPUSH
30153: CALL_OW 505
// end ; end ;
30157: LD_VAR 0 2
30161: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30162: LD_INT 0
30164: PPUSH
30165: PPUSH
30166: PPUSH
// if not hack in hackTanks or not vehicles then
30167: LD_VAR 0 1
30171: PUSH
30172: LD_EXP 111
30176: IN
30177: NOT
30178: IFTRUE 30187
30180: PUSH
30181: LD_VAR 0 2
30185: NOT
30186: OR
30187: IFFALSE 30191
// exit ;
30189: GO 30466
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30191: LD_ADDR_VAR 0 2
30195: PUSH
30196: LD_VAR 0 1
30200: PPUSH
30201: LD_VAR 0 2
30205: PPUSH
30206: LD_INT 1
30208: PPUSH
30209: LD_INT 1
30211: PPUSH
30212: CALL 39457 0 4
30216: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30217: LD_ADDR_VAR 0 5
30221: PUSH
30222: LD_EXP 111
30226: PPUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL 38805 0 2
30236: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30237: LD_EXP 112
30241: PUSH
30242: LD_VAR 0 5
30246: ARRAY
30247: PUSH
30248: LD_EXP 113
30252: LESS
30253: IFFALSE 30442
// begin for i := 1 to vehicles do
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: DOUBLE
30261: LD_INT 1
30263: DEC
30264: ST_TO_ADDR
30265: LD_VAR 0 2
30269: PUSH
30270: FOR_TO
30271: IFFALSE 30440
// begin if hackTanksCaptured [ index ] = hackLimit then
30273: LD_EXP 112
30277: PUSH
30278: LD_VAR 0 5
30282: ARRAY
30283: PUSH
30284: LD_EXP 113
30288: EQUAL
30289: IFFALSE 30293
// break ;
30291: GO 30440
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30293: LD_ADDR_EXP 115
30297: PUSH
30298: LD_EXP 115
30302: PPUSH
30303: LD_VAR 0 5
30307: PPUSH
30308: LD_EXP 115
30312: PUSH
30313: LD_VAR 0 5
30317: ARRAY
30318: PUSH
30319: LD_INT 1
30321: PLUS
30322: PPUSH
30323: CALL_OW 1
30327: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30328: LD_ADDR_EXP 112
30332: PUSH
30333: LD_EXP 112
30337: PPUSH
30338: LD_VAR 0 5
30342: PUSH
30343: LD_EXP 112
30347: PUSH
30348: LD_VAR 0 5
30352: ARRAY
30353: PUSH
30354: LD_INT 1
30356: PLUS
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PPUSH
30362: LD_VAR 0 2
30366: PUSH
30367: LD_VAR 0 4
30371: ARRAY
30372: PUSH
30373: LD_VAR 0 2
30377: PUSH
30378: LD_VAR 0 4
30382: ARRAY
30383: PPUSH
30384: CALL_OW 255
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PPUSH
30393: CALL 39022 0 3
30397: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30398: LD_VAR 0 2
30402: PUSH
30403: LD_VAR 0 4
30407: ARRAY
30408: PPUSH
30409: LD_VAR 0 1
30413: PPUSH
30414: CALL_OW 255
30418: PPUSH
30419: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30423: LD_VAR 0 2
30427: PUSH
30428: LD_VAR 0 4
30432: ARRAY
30433: PPUSH
30434: CALL_OW 141
// end ;
30438: GO 30270
30440: POP
30441: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30442: LD_VAR 0 1
30446: PPUSH
30447: LD_EXP 112
30451: PUSH
30452: LD_VAR 0 5
30456: ARRAY
30457: PUSH
30458: LD_INT 0
30460: PLUS
30461: PPUSH
30462: CALL_OW 505
// end ;
30466: LD_VAR 0 3
30470: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30471: LD_INT 0
30473: PPUSH
30474: PPUSH
30475: PPUSH
30476: PPUSH
// if not hack in hackTanks then
30477: LD_VAR 0 1
30481: PUSH
30482: LD_EXP 111
30486: IN
30487: NOT
30488: IFFALSE 30492
// exit ;
30490: GO 30736
// index := GetElementIndex ( hackTanks , hack ) ;
30492: LD_ADDR_VAR 0 4
30496: PUSH
30497: LD_EXP 111
30501: PPUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: CALL 38805 0 2
30511: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30512: LD_ADDR_VAR 0 3
30516: PUSH
30517: DOUBLE
30518: LD_EXP 112
30522: PUSH
30523: LD_VAR 0 4
30527: ARRAY
30528: INC
30529: ST_TO_ADDR
30530: LD_INT 1
30532: PUSH
30533: FOR_DOWNTO
30534: IFFALSE 30710
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30536: LD_ADDR_VAR 0 5
30540: PUSH
30541: LD_EXP 112
30545: PUSH
30546: LD_VAR 0 4
30550: ARRAY
30551: PUSH
30552: LD_VAR 0 3
30556: ARRAY
30557: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30558: LD_VAR 0 5
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PPUSH
30567: CALL_OW 302
30571: NOT
30572: IFTRUE 30600
30574: PUSH
30575: LD_VAR 0 5
30579: PUSH
30580: LD_INT 1
30582: ARRAY
30583: PPUSH
30584: CALL_OW 255
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 255
30598: NONEQUAL
30599: OR
30600: IFFALSE 30708
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30602: LD_VAR 0 5
30606: PUSH
30607: LD_INT 1
30609: ARRAY
30610: PPUSH
30611: CALL_OW 305
30615: IFFALSE 30643
30617: PUSH
30618: LD_VAR 0 5
30622: PUSH
30623: LD_INT 1
30625: ARRAY
30626: PPUSH
30627: CALL_OW 255
30631: PUSH
30632: LD_VAR 0 1
30636: PPUSH
30637: CALL_OW 255
30641: EQUAL
30642: AND
30643: IFFALSE 30667
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30645: LD_VAR 0 5
30649: PUSH
30650: LD_INT 1
30652: ARRAY
30653: PPUSH
30654: LD_VAR 0 5
30658: PUSH
30659: LD_INT 2
30661: ARRAY
30662: PPUSH
30663: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30667: LD_ADDR_EXP 112
30671: PUSH
30672: LD_EXP 112
30676: PPUSH
30677: LD_VAR 0 4
30681: PPUSH
30682: LD_EXP 112
30686: PUSH
30687: LD_VAR 0 4
30691: ARRAY
30692: PPUSH
30693: LD_VAR 0 3
30697: PPUSH
30698: CALL_OW 3
30702: PPUSH
30703: CALL_OW 1
30707: ST_TO_ADDR
// end ; end ;
30708: GO 30533
30710: POP
30711: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30712: LD_VAR 0 1
30716: PPUSH
30717: LD_EXP 112
30721: PUSH
30722: LD_VAR 0 4
30726: ARRAY
30727: PUSH
30728: LD_INT 0
30730: PLUS
30731: PPUSH
30732: CALL_OW 505
// end ;
30736: LD_VAR 0 2
30740: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30741: LD_INT 0
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
// if not hack in hackTanks then
30747: LD_VAR 0 1
30751: PUSH
30752: LD_EXP 111
30756: IN
30757: NOT
30758: IFFALSE 30762
// exit ;
30760: GO 30847
// index := GetElementIndex ( hackTanks , hack ) ;
30762: LD_ADDR_VAR 0 5
30766: PUSH
30767: LD_EXP 111
30771: PPUSH
30772: LD_VAR 0 1
30776: PPUSH
30777: CALL 38805 0 2
30781: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30782: LD_ADDR_VAR 0 4
30786: PUSH
30787: DOUBLE
30788: LD_INT 1
30790: DEC
30791: ST_TO_ADDR
30792: LD_EXP 112
30796: PUSH
30797: LD_VAR 0 5
30801: ARRAY
30802: PUSH
30803: FOR_TO
30804: IFFALSE 30845
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30806: LD_EXP 112
30810: PUSH
30811: LD_VAR 0 5
30815: ARRAY
30816: PUSH
30817: LD_VAR 0 4
30821: ARRAY
30822: PUSH
30823: LD_INT 1
30825: ARRAY
30826: PUSH
30827: LD_VAR 0 2
30831: EQUAL
30832: IFFALSE 30843
// KillUnit ( vehicle ) ;
30834: LD_VAR 0 2
30838: PPUSH
30839: CALL_OW 66
30843: GO 30803
30845: POP
30846: POP
// end ;
30847: LD_VAR 0 3
30851: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30852: LD_EXP 116
30856: NOT
30857: IFFALSE 30990
30859: GO 30861
30861: DISABLE
30862: LD_INT 0
30864: PPUSH
// begin initMiner := true ;
30865: LD_ADDR_EXP 116
30869: PUSH
30870: LD_INT 1
30872: ST_TO_ADDR
// minersList := [ ] ;
30873: LD_ADDR_EXP 117
30877: PUSH
30878: EMPTY
30879: ST_TO_ADDR
// minerMinesList := [ ] ;
30880: LD_ADDR_EXP 118
30884: PUSH
30885: EMPTY
30886: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
30887: LD_ADDR_EXP 119
30891: PUSH
30892: LD_INT 10
30894: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30895: LD_ADDR_VAR 0 1
30899: PUSH
30900: LD_INT 34
30902: PUSH
30903: LD_INT 81
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PPUSH
30910: CALL_OW 69
30914: PUSH
30915: FOR_IN
30916: IFFALSE 30988
// begin if not i in minersList then
30918: LD_VAR 0 1
30922: PUSH
30923: LD_EXP 117
30927: IN
30928: NOT
30929: IFFALSE 30986
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30931: LD_ADDR_EXP 117
30935: PUSH
30936: LD_EXP 117
30940: PPUSH
30941: LD_EXP 117
30945: PUSH
30946: LD_INT 1
30948: PLUS
30949: PPUSH
30950: LD_VAR 0 1
30954: PPUSH
30955: CALL_OW 1
30959: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30960: LD_ADDR_EXP 118
30964: PUSH
30965: LD_EXP 118
30969: PPUSH
30970: LD_EXP 118
30974: PUSH
30975: LD_INT 1
30977: PLUS
30978: PPUSH
30979: EMPTY
30980: PPUSH
30981: CALL_OW 1
30985: ST_TO_ADDR
// end end ;
30986: GO 30915
30988: POP
30989: POP
// end ;
30990: PPOPN 1
30992: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30993: LD_EXP 116
30997: IFFALSE 31028
30999: PUSH
31000: LD_EXP 118
31004: PPUSH
31005: CALL 36104 0 1
31009: IFTRUE 31027
31011: PUSH
31012: LD_INT 34
31014: PUSH
31015: LD_INT 81
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PPUSH
31022: CALL_OW 69
31026: OR
31027: AND
31028: IFFALSE 31548
31030: GO 31032
31032: DISABLE
31033: LD_INT 0
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
// begin enable ;
31039: ENABLE
// for i := minerMinesList downto 1 do
31040: LD_ADDR_VAR 0 1
31044: PUSH
31045: DOUBLE
31046: LD_EXP 118
31050: INC
31051: ST_TO_ADDR
31052: LD_INT 1
31054: PUSH
31055: FOR_DOWNTO
31056: IFFALSE 31546
// begin side := GetSide ( minersList [ i ] ) ;
31058: LD_ADDR_VAR 0 3
31062: PUSH
31063: LD_EXP 117
31067: PUSH
31068: LD_VAR 0 1
31072: ARRAY
31073: PPUSH
31074: CALL_OW 255
31078: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
31079: LD_EXP 117
31083: PUSH
31084: LD_VAR 0 1
31088: ARRAY
31089: PPUSH
31090: CALL_OW 300
31094: IFFALSE 31115
31096: PUSH
31097: LD_VAR 0 3
31101: PUSH
31102: LD_OWVAR 2
31106: PUSH
31107: LD_INT 9
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: IN
31114: AND
31115: IFFALSE 31148
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
31117: LD_EXP 117
31121: PUSH
31122: LD_VAR 0 1
31126: ARRAY
31127: PPUSH
31128: LD_EXP 118
31132: PUSH
31133: LD_VAR 0 1
31137: ARRAY
31138: PPUSH
31139: CALL 36104 0 1
31143: PPUSH
31144: CALL_OW 505
// if not minerMinesList [ i ] then
31148: LD_EXP 118
31152: PUSH
31153: LD_VAR 0 1
31157: ARRAY
31158: NOT
31159: IFFALSE 31163
// continue ;
31161: GO 31055
// for j := minerMinesList [ i ] downto 1 do
31163: LD_ADDR_VAR 0 2
31167: PUSH
31168: DOUBLE
31169: LD_EXP 118
31173: PUSH
31174: LD_VAR 0 1
31178: ARRAY
31179: INC
31180: ST_TO_ADDR
31181: LD_INT 1
31183: PUSH
31184: FOR_DOWNTO
31185: IFFALSE 31542
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
31187: LD_EXP 117
31191: PUSH
31192: LD_VAR 0 1
31196: ARRAY
31197: PPUSH
31198: CALL_OW 301
31202: IFTRUE 31222
31204: PUSH
31205: LD_EXP 117
31209: PUSH
31210: LD_VAR 0 1
31214: ARRAY
31215: PPUSH
31216: CALL_OW 305
31220: NOT
31221: OR
31222: IFFALSE 31313
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31224: LD_EXP 118
31228: PUSH
31229: LD_VAR 0 1
31233: ARRAY
31234: PUSH
31235: LD_VAR 0 2
31239: ARRAY
31240: PUSH
31241: LD_INT 1
31243: ARRAY
31244: PPUSH
31245: LD_EXP 118
31249: PUSH
31250: LD_VAR 0 1
31254: ARRAY
31255: PUSH
31256: LD_VAR 0 2
31260: ARRAY
31261: PUSH
31262: LD_INT 2
31264: ARRAY
31265: PPUSH
31266: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31270: LD_ADDR_EXP 118
31274: PUSH
31275: LD_EXP 118
31279: PPUSH
31280: LD_VAR 0 1
31284: PPUSH
31285: LD_EXP 118
31289: PUSH
31290: LD_VAR 0 1
31294: ARRAY
31295: PPUSH
31296: LD_VAR 0 2
31300: PPUSH
31301: CALL_OW 3
31305: PPUSH
31306: CALL_OW 1
31310: ST_TO_ADDR
// continue ;
31311: GO 31184
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31313: LD_ADDR_VAR 0 4
31317: PUSH
31318: LD_EXP 118
31322: PUSH
31323: LD_VAR 0 1
31327: ARRAY
31328: PUSH
31329: LD_VAR 0 2
31333: ARRAY
31334: PUSH
31335: LD_INT 1
31337: ARRAY
31338: PPUSH
31339: LD_EXP 118
31343: PUSH
31344: LD_VAR 0 1
31348: ARRAY
31349: PUSH
31350: LD_VAR 0 2
31354: ARRAY
31355: PUSH
31356: LD_INT 2
31358: ARRAY
31359: PPUSH
31360: CALL_OW 428
31364: ST_TO_ADDR
// if not tmp then
31365: LD_VAR 0 4
31369: NOT
31370: IFFALSE 31374
// continue ;
31372: GO 31184
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31374: LD_VAR 0 4
31378: PUSH
31379: LD_INT 81
31381: PUSH
31382: LD_VAR 0 3
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PPUSH
31391: CALL_OW 69
31395: IN
31396: IFFALSE 31446
31398: PUSH
31399: LD_EXP 118
31403: PUSH
31404: LD_VAR 0 1
31408: ARRAY
31409: PUSH
31410: LD_VAR 0 2
31414: ARRAY
31415: PUSH
31416: LD_INT 1
31418: ARRAY
31419: PPUSH
31420: LD_EXP 118
31424: PUSH
31425: LD_VAR 0 1
31429: ARRAY
31430: PUSH
31431: LD_VAR 0 2
31435: ARRAY
31436: PUSH
31437: LD_INT 2
31439: ARRAY
31440: PPUSH
31441: CALL_OW 458
31445: AND
31446: IFFALSE 31540
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31448: LD_EXP 118
31452: PUSH
31453: LD_VAR 0 1
31457: ARRAY
31458: PUSH
31459: LD_VAR 0 2
31463: ARRAY
31464: PUSH
31465: LD_INT 1
31467: ARRAY
31468: PPUSH
31469: LD_EXP 118
31473: PUSH
31474: LD_VAR 0 1
31478: ARRAY
31479: PUSH
31480: LD_VAR 0 2
31484: ARRAY
31485: PUSH
31486: LD_INT 2
31488: ARRAY
31489: PPUSH
31490: LD_VAR 0 3
31494: PPUSH
31495: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31499: LD_ADDR_EXP 118
31503: PUSH
31504: LD_EXP 118
31508: PPUSH
31509: LD_VAR 0 1
31513: PPUSH
31514: LD_EXP 118
31518: PUSH
31519: LD_VAR 0 1
31523: ARRAY
31524: PPUSH
31525: LD_VAR 0 2
31529: PPUSH
31530: CALL_OW 3
31534: PPUSH
31535: CALL_OW 1
31539: ST_TO_ADDR
// end ; end ;
31540: GO 31184
31542: POP
31543: POP
// end ;
31544: GO 31055
31546: POP
31547: POP
// end ;
31548: PPOPN 4
31550: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31551: LD_INT 0
31553: PPUSH
31554: PPUSH
31555: PPUSH
31556: PPUSH
// result := false ;
31557: LD_ADDR_VAR 0 4
31561: PUSH
31562: LD_INT 0
31564: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL_OW 264
31574: PUSH
31575: LD_INT 81
31577: EQUAL
31578: NOT
31579: IFFALSE 31583
// exit ;
31581: GO 31953
// side := GetSide ( unit ) ;
31583: LD_ADDR_VAR 0 6
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 255
31597: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31598: LD_ADDR_VAR 0 5
31602: PUSH
31603: LD_EXP 117
31607: PPUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL 38805 0 2
31617: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31618: LD_EXP 118
31622: PUSH
31623: LD_VAR 0 5
31627: ARRAY
31628: PUSH
31629: LD_EXP 119
31633: GREATEREQUAL
31634: IFFALSE 31638
// exit ;
31636: GO 31953
// ComMoveXY ( unit , x , y ) ;
31638: LD_VAR 0 1
31642: PPUSH
31643: LD_VAR 0 2
31647: PPUSH
31648: LD_VAR 0 3
31652: PPUSH
31653: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31657: LD_INT 35
31659: PPUSH
31660: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31664: LD_VAR 0 1
31668: PPUSH
31669: LD_VAR 0 2
31673: PPUSH
31674: LD_VAR 0 3
31678: PPUSH
31679: CALL 70861 0 3
31683: NOT
31684: IFFALSE 31697
31686: PUSH
31687: LD_VAR 0 1
31691: PPUSH
31692: CALL_OW 314
31696: AND
31697: IFFALSE 31701
// exit ;
31699: GO 31953
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31701: LD_VAR 0 2
31705: PPUSH
31706: LD_VAR 0 3
31710: PPUSH
31711: CALL_OW 428
31715: PUSH
31716: LD_VAR 0 1
31720: EQUAL
31721: IFFALSE 31735
31723: PUSH
31724: LD_VAR 0 1
31728: PPUSH
31729: CALL_OW 314
31733: NOT
31734: AND
31735: IFFALSE 31657
// if MineAtPos ( x , y ) then
31737: LD_VAR 0 2
31741: PPUSH
31742: LD_VAR 0 3
31746: PPUSH
31747: CALL_OW 458
31751: IFFALSE 31755
// exit ;
31753: GO 31953
// if your_side = side then
31755: LD_OWVAR 2
31759: PUSH
31760: LD_VAR 0 6
31764: EQUAL
31765: IFFALSE 31784
// PlaySoundXY ( x , y , PlantMine ) ;
31767: LD_VAR 0 2
31771: PPUSH
31772: LD_VAR 0 3
31776: PPUSH
31777: LD_STRING PlantMine
31779: PPUSH
31780: CALL_OW 366
// repeat wait ( 1 ) ;
31784: LD_INT 1
31786: PPUSH
31787: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31791: LD_VAR 0 2
31795: PPUSH
31796: LD_VAR 0 3
31800: PPUSH
31801: LD_VAR 0 6
31805: PPUSH
31806: LD_INT 0
31808: PPUSH
31809: CALL_OW 454
31813: IFFALSE 31784
// if MineAtPos ( x , y ) then
31815: LD_VAR 0 2
31819: PPUSH
31820: LD_VAR 0 3
31824: PPUSH
31825: CALL_OW 458
31829: IFFALSE 31945
// begin for i in minerMinesList [ index ] do
31831: LD_ADDR_VAR 0 7
31835: PUSH
31836: LD_EXP 118
31840: PUSH
31841: LD_VAR 0 5
31845: ARRAY
31846: PUSH
31847: FOR_IN
31848: IFFALSE 31890
// if i [ 1 ] = x and i [ 2 ] = y then
31850: LD_VAR 0 7
31854: PUSH
31855: LD_INT 1
31857: ARRAY
31858: PUSH
31859: LD_VAR 0 2
31863: EQUAL
31864: IFFALSE 31882
31866: PUSH
31867: LD_VAR 0 7
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: PUSH
31876: LD_VAR 0 3
31880: EQUAL
31881: AND
31882: IFFALSE 31888
// exit ;
31884: POP
31885: POP
31886: GO 31953
31888: GO 31847
31890: POP
31891: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31892: LD_ADDR_EXP 118
31896: PUSH
31897: LD_EXP 118
31901: PPUSH
31902: LD_VAR 0 5
31906: PUSH
31907: LD_EXP 118
31911: PUSH
31912: LD_VAR 0 5
31916: ARRAY
31917: PUSH
31918: LD_INT 1
31920: PLUS
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: LD_VAR 0 2
31930: PUSH
31931: LD_VAR 0 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PPUSH
31940: CALL 39022 0 3
31944: ST_TO_ADDR
// end ; result := true ;
31945: LD_ADDR_VAR 0 4
31949: PUSH
31950: LD_INT 1
31952: ST_TO_ADDR
// end ;
31953: LD_VAR 0 4
31957: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31958: LD_INT 0
31960: PPUSH
31961: PPUSH
31962: PPUSH
// if not unit in minersList then
31963: LD_VAR 0 1
31967: PUSH
31968: LD_EXP 117
31972: IN
31973: NOT
31974: IFFALSE 31978
// exit ;
31976: GO 32185
// index := GetElementIndex ( minersList , unit ) ;
31978: LD_ADDR_VAR 0 6
31982: PUSH
31983: LD_EXP 117
31987: PPUSH
31988: LD_VAR 0 1
31992: PPUSH
31993: CALL 38805 0 2
31997: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31998: LD_ADDR_VAR 0 5
32002: PUSH
32003: DOUBLE
32004: LD_EXP 118
32008: PUSH
32009: LD_VAR 0 6
32013: ARRAY
32014: INC
32015: ST_TO_ADDR
32016: LD_INT 1
32018: PUSH
32019: FOR_DOWNTO
32020: IFFALSE 32183
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32022: LD_EXP 118
32026: PUSH
32027: LD_VAR 0 6
32031: ARRAY
32032: PUSH
32033: LD_VAR 0 5
32037: ARRAY
32038: PUSH
32039: LD_INT 1
32041: ARRAY
32042: PPUSH
32043: LD_EXP 118
32047: PUSH
32048: LD_VAR 0 6
32052: ARRAY
32053: PUSH
32054: LD_VAR 0 5
32058: ARRAY
32059: PUSH
32060: LD_INT 2
32062: ARRAY
32063: PPUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_VAR 0 3
32073: PPUSH
32074: CALL_OW 298
32078: PUSH
32079: LD_INT 6
32081: LESS
32082: IFFALSE 32181
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32084: LD_EXP 118
32088: PUSH
32089: LD_VAR 0 6
32093: ARRAY
32094: PUSH
32095: LD_VAR 0 5
32099: ARRAY
32100: PUSH
32101: LD_INT 1
32103: ARRAY
32104: PPUSH
32105: LD_EXP 118
32109: PUSH
32110: LD_VAR 0 6
32114: ARRAY
32115: PUSH
32116: LD_VAR 0 5
32120: ARRAY
32121: PUSH
32122: LD_INT 2
32124: ARRAY
32125: PPUSH
32126: LD_VAR 0 1
32130: PPUSH
32131: CALL_OW 255
32135: PPUSH
32136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32140: LD_ADDR_EXP 118
32144: PUSH
32145: LD_EXP 118
32149: PPUSH
32150: LD_VAR 0 6
32154: PPUSH
32155: LD_EXP 118
32159: PUSH
32160: LD_VAR 0 6
32164: ARRAY
32165: PPUSH
32166: LD_VAR 0 5
32170: PPUSH
32171: CALL_OW 3
32175: PPUSH
32176: CALL_OW 1
32180: ST_TO_ADDR
// end ; end ;
32181: GO 32019
32183: POP
32184: POP
// end ;
32185: LD_VAR 0 4
32189: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32190: LD_INT 0
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 264
32210: PUSH
32211: LD_INT 81
32213: EQUAL
32214: NOT
32215: IFTRUE 32230
32217: PUSH
32218: LD_VAR 0 1
32222: PUSH
32223: LD_EXP 117
32227: IN
32228: NOT
32229: OR
32230: IFFALSE 32234
// exit ;
32232: GO 32560
// index := GetElementIndex ( minersList , unit ) ;
32234: LD_ADDR_VAR 0 6
32238: PUSH
32239: LD_EXP 117
32243: PPUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL 38805 0 2
32253: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32254: LD_ADDR_VAR 0 8
32258: PUSH
32259: LD_EXP 119
32263: PUSH
32264: LD_EXP 118
32268: PUSH
32269: LD_VAR 0 6
32273: ARRAY
32274: MINUS
32275: ST_TO_ADDR
// if not minesFreeAmount then
32276: LD_VAR 0 8
32280: NOT
32281: IFFALSE 32285
// exit ;
32283: GO 32560
// tmp := [ ] ;
32285: LD_ADDR_VAR 0 7
32289: PUSH
32290: EMPTY
32291: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32292: LD_ADDR_VAR 0 5
32296: PUSH
32297: DOUBLE
32298: LD_INT 1
32300: DEC
32301: ST_TO_ADDR
32302: LD_VAR 0 8
32306: PUSH
32307: FOR_TO
32308: IFFALSE 32507
// begin _d := rand ( 0 , 5 ) ;
32310: LD_ADDR_VAR 0 11
32314: PUSH
32315: LD_INT 0
32317: PPUSH
32318: LD_INT 5
32320: PPUSH
32321: CALL_OW 12
32325: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32326: LD_ADDR_VAR 0 12
32330: PUSH
32331: LD_INT 2
32333: PPUSH
32334: LD_INT 6
32336: PPUSH
32337: CALL_OW 12
32341: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32342: LD_ADDR_VAR 0 9
32346: PUSH
32347: LD_VAR 0 2
32351: PPUSH
32352: LD_VAR 0 11
32356: PPUSH
32357: LD_VAR 0 12
32361: PPUSH
32362: CALL_OW 272
32366: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32367: LD_ADDR_VAR 0 10
32371: PUSH
32372: LD_VAR 0 3
32376: PPUSH
32377: LD_VAR 0 11
32381: PPUSH
32382: LD_VAR 0 12
32386: PPUSH
32387: CALL_OW 273
32391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32392: LD_VAR 0 9
32396: PPUSH
32397: LD_VAR 0 10
32401: PPUSH
32402: CALL_OW 488
32406: IFFALSE 32430
32408: PUSH
32409: LD_VAR 0 9
32413: PUSH
32414: LD_VAR 0 10
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_VAR 0 7
32427: IN
32428: NOT
32429: AND
32430: IFFALSE 32449
32432: PUSH
32433: LD_VAR 0 9
32437: PPUSH
32438: LD_VAR 0 10
32442: PPUSH
32443: CALL_OW 458
32447: NOT
32448: AND
32449: IFFALSE 32491
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32451: LD_ADDR_VAR 0 7
32455: PUSH
32456: LD_VAR 0 7
32460: PPUSH
32461: LD_VAR 0 7
32465: PUSH
32466: LD_INT 1
32468: PLUS
32469: PPUSH
32470: LD_VAR 0 9
32474: PUSH
32475: LD_VAR 0 10
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL_OW 1
32488: ST_TO_ADDR
32489: GO 32505
// i := i - 1 ;
32491: LD_ADDR_VAR 0 5
32495: PUSH
32496: LD_VAR 0 5
32500: PUSH
32501: LD_INT 1
32503: MINUS
32504: ST_TO_ADDR
// end ;
32505: GO 32307
32507: POP
32508: POP
// for i in tmp do
32509: LD_ADDR_VAR 0 5
32513: PUSH
32514: LD_VAR 0 7
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32558
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_VAR 0 5
32531: PUSH
32532: LD_INT 1
32534: ARRAY
32535: PPUSH
32536: LD_VAR 0 5
32540: PUSH
32541: LD_INT 2
32543: ARRAY
32544: PPUSH
32545: CALL 31551 0 3
32549: NOT
32550: IFFALSE 32556
// exit ;
32552: POP
32553: POP
32554: GO 32560
32556: GO 32519
32558: POP
32559: POP
// end ;
32560: LD_VAR 0 4
32564: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
// if GetClass ( unit ) <> class_sniper then
32576: LD_VAR 0 1
32580: PPUSH
32581: CALL_OW 257
32585: PUSH
32586: LD_INT 5
32588: NONEQUAL
32589: IFFALSE 32593
// exit ;
32591: GO 33063
// dist := 8 ;
32593: LD_ADDR_VAR 0 5
32597: PUSH
32598: LD_INT 8
32600: ST_TO_ADDR
// viewRange := 12 ;
32601: LD_ADDR_VAR 0 8
32605: PUSH
32606: LD_INT 12
32608: ST_TO_ADDR
// side := GetSide ( unit ) ;
32609: LD_ADDR_VAR 0 6
32613: PUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 255
32623: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32624: LD_INT 61
32626: PPUSH
32627: LD_VAR 0 6
32631: PPUSH
32632: CALL_OW 321
32636: PUSH
32637: LD_INT 2
32639: EQUAL
32640: IFFALSE 32650
// viewRange := 16 ;
32642: LD_ADDR_VAR 0 8
32646: PUSH
32647: LD_INT 16
32649: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32650: LD_VAR 0 1
32654: PPUSH
32655: LD_VAR 0 2
32659: PPUSH
32660: LD_VAR 0 3
32664: PPUSH
32665: CALL_OW 297
32669: PUSH
32670: LD_VAR 0 5
32674: GREATER
32675: IFFALSE 32754
// begin ComMoveXY ( unit , x , y ) ;
32677: LD_VAR 0 1
32681: PPUSH
32682: LD_VAR 0 2
32686: PPUSH
32687: LD_VAR 0 3
32691: PPUSH
32692: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32696: LD_INT 35
32698: PPUSH
32699: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32703: LD_VAR 0 1
32707: PPUSH
32708: LD_VAR 0 2
32712: PPUSH
32713: LD_VAR 0 3
32717: PPUSH
32718: CALL 70861 0 3
32722: NOT
32723: IFFALSE 32727
// exit ;
32725: GO 33063
// until GetDistUnitXY ( unit , x , y ) < dist ;
32727: LD_VAR 0 1
32731: PPUSH
32732: LD_VAR 0 2
32736: PPUSH
32737: LD_VAR 0 3
32741: PPUSH
32742: CALL_OW 297
32746: PUSH
32747: LD_VAR 0 5
32751: LESS
32752: IFFALSE 32696
// end ; ComTurnXY ( unit , x , y ) ;
32754: LD_VAR 0 1
32758: PPUSH
32759: LD_VAR 0 2
32763: PPUSH
32764: LD_VAR 0 3
32768: PPUSH
32769: CALL_OW 118
// repeat if Multiplayer then
32773: LD_OWVAR 4
32777: IFFALSE 32788
// wait ( 35 ) else
32779: LD_INT 35
32781: PPUSH
32782: CALL_OW 67
32786: GO 32795
// wait ( 5 ) ;
32788: LD_INT 5
32790: PPUSH
32791: CALL_OW 67
// _d := GetDir ( unit ) ;
32795: LD_ADDR_VAR 0 11
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 254
32809: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32810: LD_ADDR_VAR 0 7
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 250
32824: PPUSH
32825: LD_VAR 0 1
32829: PPUSH
32830: CALL_OW 251
32834: PPUSH
32835: LD_VAR 0 2
32839: PPUSH
32840: LD_VAR 0 3
32844: PPUSH
32845: CALL 73497 0 4
32849: ST_TO_ADDR
// until dir = _d ;
32850: LD_VAR 0 7
32854: PUSH
32855: LD_VAR 0 11
32859: EQUAL
32860: IFFALSE 32773
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 250
32876: PPUSH
32877: LD_VAR 0 7
32881: PPUSH
32882: LD_VAR 0 5
32886: PPUSH
32887: CALL_OW 272
32891: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32892: LD_ADDR_VAR 0 10
32896: PUSH
32897: LD_VAR 0 1
32901: PPUSH
32902: CALL_OW 251
32906: PPUSH
32907: LD_VAR 0 7
32911: PPUSH
32912: LD_VAR 0 5
32916: PPUSH
32917: CALL_OW 273
32921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32922: LD_VAR 0 9
32926: PPUSH
32927: LD_VAR 0 10
32931: PPUSH
32932: CALL_OW 488
32936: NOT
32937: IFFALSE 32941
// exit ;
32939: GO 33063
// ComAnimCustom ( unit , 1 ) ;
32941: LD_VAR 0 1
32945: PPUSH
32946: LD_INT 1
32948: PPUSH
32949: CALL_OW 592
// p := 0 ;
32953: LD_ADDR_VAR 0 12
32957: PUSH
32958: LD_INT 0
32960: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32961: LD_VAR 0 9
32965: PPUSH
32966: LD_VAR 0 10
32970: PPUSH
32971: LD_VAR 0 6
32975: PPUSH
32976: LD_VAR 0 8
32980: PPUSH
32981: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32985: LD_INT 35
32987: PPUSH
32988: CALL_OW 67
// p := Inc ( p ) ;
32992: LD_ADDR_VAR 0 12
32996: PUSH
32997: LD_VAR 0 12
33001: PPUSH
33002: CALL 73453 0 1
33006: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33007: LD_VAR 0 12
33011: PUSH
33012: LD_INT 3
33014: EQUAL
33015: IFTRUE 33029
33017: PUSH
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 302
33027: NOT
33028: OR
33029: IFTRUE 33042
33031: PUSH
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 301
33041: OR
33042: IFFALSE 32985
// RemoveSeeing ( _x , _y , side ) ;
33044: LD_VAR 0 9
33048: PPUSH
33049: LD_VAR 0 10
33053: PPUSH
33054: LD_VAR 0 6
33058: PPUSH
33059: CALL_OW 331
// end ;
33063: LD_VAR 0 4
33067: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
33068: LD_INT 0
33070: PPUSH
33071: PPUSH
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
33076: PPUSH
33077: PPUSH
33078: PPUSH
33079: PPUSH
33080: PPUSH
// if not unit then
33081: LD_VAR 0 1
33085: NOT
33086: IFFALSE 33090
// exit ;
33088: GO 33361
// side := GetSide ( unit ) ;
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: LD_VAR 0 1
33099: PPUSH
33100: CALL_OW 255
33104: ST_TO_ADDR
// x := GetX ( unit ) ;
33105: LD_ADDR_VAR 0 5
33109: PUSH
33110: LD_VAR 0 1
33114: PPUSH
33115: CALL_OW 250
33119: ST_TO_ADDR
// y := GetY ( unit ) ;
33120: LD_ADDR_VAR 0 6
33124: PUSH
33125: LD_VAR 0 1
33129: PPUSH
33130: CALL_OW 251
33134: ST_TO_ADDR
// r := 8 ;
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: LD_INT 8
33142: ST_TO_ADDR
// if x - r < 0 then
33143: LD_VAR 0 5
33147: PUSH
33148: LD_VAR 0 4
33152: MINUS
33153: PUSH
33154: LD_INT 0
33156: LESS
33157: IFFALSE 33169
// min_x := 0 else
33159: LD_ADDR_VAR 0 7
33163: PUSH
33164: LD_INT 0
33166: ST_TO_ADDR
33167: GO 33185
// min_x := x - r ;
33169: LD_ADDR_VAR 0 7
33173: PUSH
33174: LD_VAR 0 5
33178: PUSH
33179: LD_VAR 0 4
33183: MINUS
33184: ST_TO_ADDR
// if y - r < 0 then
33185: LD_VAR 0 6
33189: PUSH
33190: LD_VAR 0 4
33194: MINUS
33195: PUSH
33196: LD_INT 0
33198: LESS
33199: IFFALSE 33211
// min_y := 0 else
33201: LD_ADDR_VAR 0 8
33205: PUSH
33206: LD_INT 0
33208: ST_TO_ADDR
33209: GO 33227
// min_y := y - r ;
33211: LD_ADDR_VAR 0 8
33215: PUSH
33216: LD_VAR 0 6
33220: PUSH
33221: LD_VAR 0 4
33225: MINUS
33226: ST_TO_ADDR
// max_x := x + r ;
33227: LD_ADDR_VAR 0 9
33231: PUSH
33232: LD_VAR 0 5
33236: PUSH
33237: LD_VAR 0 4
33241: PLUS
33242: ST_TO_ADDR
// max_y := y + r ;
33243: LD_ADDR_VAR 0 10
33247: PUSH
33248: LD_VAR 0 6
33252: PUSH
33253: LD_VAR 0 4
33257: PLUS
33258: ST_TO_ADDR
// for _x = min_x to max_x do
33259: LD_ADDR_VAR 0 11
33263: PUSH
33264: DOUBLE
33265: LD_VAR 0 7
33269: DEC
33270: ST_TO_ADDR
33271: LD_VAR 0 9
33275: PUSH
33276: FOR_TO
33277: IFFALSE 33359
// for _y = min_y to max_y do
33279: LD_ADDR_VAR 0 12
33283: PUSH
33284: DOUBLE
33285: LD_VAR 0 8
33289: DEC
33290: ST_TO_ADDR
33291: LD_VAR 0 10
33295: PUSH
33296: FOR_TO
33297: IFFALSE 33355
// begin if not ValidHex ( _x , _y ) then
33299: LD_VAR 0 11
33303: PPUSH
33304: LD_VAR 0 12
33308: PPUSH
33309: CALL_OW 488
33313: NOT
33314: IFFALSE 33318
// continue ;
33316: GO 33296
// if MineAtPos ( _x , _y ) then
33318: LD_VAR 0 11
33322: PPUSH
33323: LD_VAR 0 12
33327: PPUSH
33328: CALL_OW 458
33332: IFFALSE 33353
// ViewMineAtPos ( _x , _y , side ) ;
33334: LD_VAR 0 11
33338: PPUSH
33339: LD_VAR 0 12
33343: PPUSH
33344: LD_VAR 0 3
33348: PPUSH
33349: CALL_OW 457
// end ;
33353: GO 33296
33355: POP
33356: POP
33357: GO 33276
33359: POP
33360: POP
// end ;
33361: LD_VAR 0 2
33365: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
// if not units then
33375: LD_VAR 0 1
33379: NOT
33380: IFFALSE 33384
// exit ;
33382: GO 33848
// scaners := [ ] ;
33384: LD_ADDR_VAR 0 6
33388: PUSH
33389: EMPTY
33390: ST_TO_ADDR
// for i in units do
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_VAR 0 1
33400: PUSH
33401: FOR_IN
33402: IFFALSE 33559
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33404: LD_VAR 0 3
33408: PPUSH
33409: CALL_OW 264
33413: PUSH
33414: LD_INT 11
33416: NONEQUAL
33417: IFTRUE 33431
33419: PUSH
33420: LD_VAR 0 3
33424: PPUSH
33425: CALL_OW 302
33429: NOT
33430: OR
33431: IFTRUE 33448
33433: PUSH
33434: LD_VAR 0 3
33438: PPUSH
33439: CALL_OW 110
33443: PUSH
33444: LD_INT 502
33446: EQUAL
33447: OR
33448: IFFALSE 33452
// continue ;
33450: GO 33401
// ComStop ( i ) ;
33452: LD_VAR 0 3
33456: PPUSH
33457: CALL_OW 141
// x := GetX ( i ) ;
33461: LD_ADDR_VAR 0 4
33465: PUSH
33466: LD_VAR 0 3
33470: PPUSH
33471: CALL_OW 250
33475: ST_TO_ADDR
// y := GetY ( i ) ;
33476: LD_ADDR_VAR 0 5
33480: PUSH
33481: LD_VAR 0 3
33485: PPUSH
33486: CALL_OW 251
33490: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33491: LD_VAR 0 3
33495: PPUSH
33496: CALL_OW 255
33500: PUSH
33501: LD_OWVAR 2
33505: EQUAL
33506: IFFALSE 33525
// PlaySoundXY ( x , y , mineDetector ) ;
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: LD_STRING mineDetector
33520: PPUSH
33521: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33525: LD_ADDR_VAR 0 6
33529: PUSH
33530: LD_VAR 0 6
33534: PPUSH
33535: LD_VAR 0 3
33539: PPUSH
33540: CALL 72080 0 2
33544: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33545: LD_VAR 0 3
33549: PPUSH
33550: LD_INT 502
33552: PPUSH
33553: CALL_OW 109
// end ;
33557: GO 33401
33559: POP
33560: POP
// if not scaners then
33561: LD_VAR 0 6
33565: NOT
33566: IFFALSE 33570
// exit ;
33568: GO 33848
// wait ( 3 ) ;
33570: LD_INT 3
33572: PPUSH
33573: CALL_OW 67
// timer := 6 ;
33577: LD_ADDR_VAR 0 7
33581: PUSH
33582: LD_INT 6
33584: ST_TO_ADDR
// repeat for i in scaners do
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: LD_VAR 0 6
33594: PUSH
33595: FOR_IN
33596: IFFALSE 33746
// begin side := GetSide ( i ) ;
33598: LD_ADDR_VAR 0 8
33602: PUSH
33603: LD_VAR 0 3
33607: PPUSH
33608: CALL_OW 255
33612: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33613: LD_VAR 0 3
33617: PPUSH
33618: CALL_OW 302
33622: NOT
33623: IFTRUE 33636
33625: PUSH
33626: LD_VAR 0 3
33630: PPUSH
33631: CALL_OW 314
33635: OR
33636: IFTRUE 33667
33638: PUSH
33639: LD_VAR 0 3
33643: PPUSH
33644: CALL_OW 263
33648: PUSH
33649: LD_INT 1
33651: EQUAL
33652: IFFALSE 33666
33654: PUSH
33655: LD_VAR 0 3
33659: PPUSH
33660: CALL_OW 311
33664: NOT
33665: AND
33666: OR
33667: IFFALSE 33711
// begin SetUnitDisplayNumber ( i , 0 ) ;
33669: LD_VAR 0 3
33673: PPUSH
33674: LD_INT 0
33676: PPUSH
33677: CALL_OW 505
// SetTag ( i , 0 ) ;
33681: LD_VAR 0 3
33685: PPUSH
33686: LD_INT 0
33688: PPUSH
33689: CALL_OW 109
// scaners := scaners diff i ;
33693: LD_ADDR_VAR 0 6
33697: PUSH
33698: LD_VAR 0 6
33702: PUSH
33703: LD_VAR 0 3
33707: DIFF
33708: ST_TO_ADDR
// continue ;
33709: GO 33595
// end ; if side in [ your_side , 9 ] then
33711: LD_VAR 0 8
33715: PUSH
33716: LD_OWVAR 2
33720: PUSH
33721: LD_INT 9
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: IN
33728: IFFALSE 33744
// SetUnitDisplayNumber ( i , timer ) ;
33730: LD_VAR 0 3
33734: PPUSH
33735: LD_VAR 0 7
33739: PPUSH
33740: CALL_OW 505
// end ;
33744: GO 33595
33746: POP
33747: POP
// if not scaners then
33748: LD_VAR 0 6
33752: NOT
33753: IFFALSE 33757
// exit ;
33755: GO 33848
// timer := Dec ( timer ) ;
33757: LD_ADDR_VAR 0 7
33761: PUSH
33762: LD_VAR 0 7
33766: PPUSH
33767: CALL 73475 0 1
33771: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33772: LD_INT 35
33774: PPUSH
33775: CALL_OW 67
// until timer = 0 ;
33779: LD_VAR 0 7
33783: PUSH
33784: LD_INT 0
33786: EQUAL
33787: IFFALSE 33585
// if not scaners then
33789: LD_VAR 0 6
33793: NOT
33794: IFFALSE 33798
// exit ;
33796: GO 33848
// for i in scaners do
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: LD_VAR 0 6
33807: PUSH
33808: FOR_IN
33809: IFFALSE 33846
// begin SetUnitDisplayNumber ( i , 0 ) ;
33811: LD_VAR 0 3
33815: PPUSH
33816: LD_INT 0
33818: PPUSH
33819: CALL_OW 505
// SetTag ( i , 0 ) ;
33823: LD_VAR 0 3
33827: PPUSH
33828: LD_INT 0
33830: PPUSH
33831: CALL_OW 109
// RevealDetectorMine ( i ) ;
33835: LD_VAR 0 3
33839: PPUSH
33840: CALL 33068 0 1
// end ;
33844: GO 33808
33846: POP
33847: POP
// end ;
33848: LD_VAR 0 2
33852: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33853: LD_INT 0
33855: PPUSH
// if p1 = mine_detector_mode then
33856: LD_VAR 0 2
33860: PUSH
33861: LD_INT 103
33863: EQUAL
33864: IFFALSE 33875
// DetectMine ( units ) ;
33866: LD_VAR 0 1
33870: PPUSH
33871: CALL 33366 0 1
// end ; end_of_file
33875: LD_VAR 0 7
33879: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33880: LD_INT 0
33882: PPUSH
33883: PPUSH
// if exist_mode then
33884: LD_VAR 0 2
33888: IFFALSE 33934
// begin unit := CreateCharacter ( prefix & ident ) ;
33890: LD_ADDR_VAR 0 5
33894: PUSH
33895: LD_VAR 0 3
33899: PUSH
33900: LD_VAR 0 1
33904: STR
33905: PPUSH
33906: CALL_OW 34
33910: ST_TO_ADDR
// if unit then
33911: LD_VAR 0 5
33915: IFFALSE 33932
// DeleteCharacters ( prefix & ident ) ;
33917: LD_VAR 0 3
33921: PUSH
33922: LD_VAR 0 1
33926: STR
33927: PPUSH
33928: CALL_OW 40
// end else
33932: GO 33949
// unit := NewCharacter ( ident ) ;
33934: LD_ADDR_VAR 0 5
33938: PUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 25
33948: ST_TO_ADDR
// result := unit ;
33949: LD_ADDR_VAR 0 4
33953: PUSH
33954: LD_VAR 0 5
33958: ST_TO_ADDR
// end ;
33959: LD_VAR 0 4
33963: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33964: LD_INT 0
33966: PPUSH
33967: PPUSH
// if exist_mode then
33968: LD_VAR 0 2
33972: IFFALSE 33997
// unit := CreateCharacter ( prefix & ident ) else
33974: LD_ADDR_VAR 0 5
33978: PUSH
33979: LD_VAR 0 3
33983: PUSH
33984: LD_VAR 0 1
33988: STR
33989: PPUSH
33990: CALL_OW 34
33994: ST_TO_ADDR
33995: GO 34012
// unit := NewCharacter ( ident ) ;
33997: LD_ADDR_VAR 0 5
34001: PUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: CALL_OW 25
34011: ST_TO_ADDR
// result := unit ;
34012: LD_ADDR_VAR 0 4
34016: PUSH
34017: LD_VAR 0 5
34021: ST_TO_ADDR
// end ;
34022: LD_VAR 0 4
34026: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34027: LD_INT 0
34029: PPUSH
34030: PPUSH
// if not side or not nation then
34031: LD_VAR 0 1
34035: NOT
34036: IFTRUE 34045
34038: PUSH
34039: LD_VAR 0 2
34043: NOT
34044: OR
34045: IFFALSE 34049
// exit ;
34047: GO 34843
// case nation of nation_american :
34049: LD_VAR 0 2
34053: PUSH
34054: LD_INT 1
34056: DOUBLE
34057: EQUAL
34058: IFTRUE 34062
34060: GO 34284
34062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
34063: LD_ADDR_VAR 0 4
34067: PUSH
34068: LD_INT 35
34070: PUSH
34071: LD_INT 45
34073: PUSH
34074: LD_INT 46
34076: PUSH
34077: LD_INT 47
34079: PUSH
34080: LD_INT 82
34082: PUSH
34083: LD_INT 83
34085: PUSH
34086: LD_INT 84
34088: PUSH
34089: LD_INT 85
34091: PUSH
34092: LD_INT 86
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 6
34103: PUSH
34104: LD_INT 15
34106: PUSH
34107: LD_INT 16
34109: PUSH
34110: LD_INT 7
34112: PUSH
34113: LD_INT 12
34115: PUSH
34116: LD_INT 13
34118: PUSH
34119: LD_INT 10
34121: PUSH
34122: LD_INT 14
34124: PUSH
34125: LD_INT 20
34127: PUSH
34128: LD_INT 21
34130: PUSH
34131: LD_INT 22
34133: PUSH
34134: LD_INT 25
34136: PUSH
34137: LD_INT 32
34139: PUSH
34140: LD_INT 27
34142: PUSH
34143: LD_INT 36
34145: PUSH
34146: LD_INT 69
34148: PUSH
34149: LD_INT 39
34151: PUSH
34152: LD_INT 34
34154: PUSH
34155: LD_INT 40
34157: PUSH
34158: LD_INT 48
34160: PUSH
34161: LD_INT 49
34163: PUSH
34164: LD_INT 50
34166: PUSH
34167: LD_INT 51
34169: PUSH
34170: LD_INT 52
34172: PUSH
34173: LD_INT 53
34175: PUSH
34176: LD_INT 54
34178: PUSH
34179: LD_INT 55
34181: PUSH
34182: LD_INT 56
34184: PUSH
34185: LD_INT 57
34187: PUSH
34188: LD_INT 58
34190: PUSH
34191: LD_INT 59
34193: PUSH
34194: LD_INT 60
34196: PUSH
34197: LD_INT 61
34199: PUSH
34200: LD_INT 62
34202: PUSH
34203: LD_INT 80
34205: PUSH
34206: LD_INT 82
34208: PUSH
34209: LD_INT 83
34211: PUSH
34212: LD_INT 84
34214: PUSH
34215: LD_INT 85
34217: PUSH
34218: LD_INT 86
34220: PUSH
34221: LD_INT 90
34223: PUSH
34224: LD_INT 93
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
34282: GO 34765
34284: LD_INT 2
34286: DOUBLE
34287: EQUAL
34288: IFTRUE 34292
34290: GO 34526
34292: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
34293: LD_ADDR_VAR 0 4
34297: PUSH
34298: LD_INT 35
34300: PUSH
34301: LD_INT 45
34303: PUSH
34304: LD_INT 46
34306: PUSH
34307: LD_INT 47
34309: PUSH
34310: LD_INT 82
34312: PUSH
34313: LD_INT 83
34315: PUSH
34316: LD_INT 84
34318: PUSH
34319: LD_INT 85
34321: PUSH
34322: LD_INT 87
34324: PUSH
34325: LD_INT 70
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 11
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 4
34339: PUSH
34340: LD_INT 5
34342: PUSH
34343: LD_INT 6
34345: PUSH
34346: LD_INT 15
34348: PUSH
34349: LD_INT 18
34351: PUSH
34352: LD_INT 7
34354: PUSH
34355: LD_INT 17
34357: PUSH
34358: LD_INT 8
34360: PUSH
34361: LD_INT 20
34363: PUSH
34364: LD_INT 21
34366: PUSH
34367: LD_INT 22
34369: PUSH
34370: LD_INT 72
34372: PUSH
34373: LD_INT 26
34375: PUSH
34376: LD_INT 69
34378: PUSH
34379: LD_INT 39
34381: PUSH
34382: LD_INT 40
34384: PUSH
34385: LD_INT 41
34387: PUSH
34388: LD_INT 42
34390: PUSH
34391: LD_INT 43
34393: PUSH
34394: LD_INT 48
34396: PUSH
34397: LD_INT 49
34399: PUSH
34400: LD_INT 50
34402: PUSH
34403: LD_INT 51
34405: PUSH
34406: LD_INT 52
34408: PUSH
34409: LD_INT 53
34411: PUSH
34412: LD_INT 54
34414: PUSH
34415: LD_INT 55
34417: PUSH
34418: LD_INT 56
34420: PUSH
34421: LD_INT 60
34423: PUSH
34424: LD_INT 61
34426: PUSH
34427: LD_INT 62
34429: PUSH
34430: LD_INT 66
34432: PUSH
34433: LD_INT 67
34435: PUSH
34436: LD_INT 68
34438: PUSH
34439: LD_INT 81
34441: PUSH
34442: LD_INT 82
34444: PUSH
34445: LD_INT 83
34447: PUSH
34448: LD_INT 84
34450: PUSH
34451: LD_INT 85
34453: PUSH
34454: LD_INT 87
34456: PUSH
34457: LD_INT 88
34459: PUSH
34460: LD_INT 92
34462: PUSH
34463: LD_INT 94
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
34524: GO 34765
34526: LD_INT 3
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34764
34534: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34535: LD_ADDR_VAR 0 4
34539: PUSH
34540: LD_INT 46
34542: PUSH
34543: LD_INT 47
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 82
34554: PUSH
34555: LD_INT 83
34557: PUSH
34558: LD_INT 84
34560: PUSH
34561: LD_INT 85
34563: PUSH
34564: LD_INT 86
34566: PUSH
34567: LD_INT 11
34569: PUSH
34570: LD_INT 9
34572: PUSH
34573: LD_INT 20
34575: PUSH
34576: LD_INT 19
34578: PUSH
34579: LD_INT 21
34581: PUSH
34582: LD_INT 24
34584: PUSH
34585: LD_INT 22
34587: PUSH
34588: LD_INT 25
34590: PUSH
34591: LD_INT 28
34593: PUSH
34594: LD_INT 29
34596: PUSH
34597: LD_INT 30
34599: PUSH
34600: LD_INT 31
34602: PUSH
34603: LD_INT 37
34605: PUSH
34606: LD_INT 38
34608: PUSH
34609: LD_INT 32
34611: PUSH
34612: LD_INT 27
34614: PUSH
34615: LD_INT 33
34617: PUSH
34618: LD_INT 69
34620: PUSH
34621: LD_INT 39
34623: PUSH
34624: LD_INT 34
34626: PUSH
34627: LD_INT 40
34629: PUSH
34630: LD_INT 71
34632: PUSH
34633: LD_INT 23
34635: PUSH
34636: LD_INT 44
34638: PUSH
34639: LD_INT 48
34641: PUSH
34642: LD_INT 49
34644: PUSH
34645: LD_INT 50
34647: PUSH
34648: LD_INT 51
34650: PUSH
34651: LD_INT 52
34653: PUSH
34654: LD_INT 53
34656: PUSH
34657: LD_INT 54
34659: PUSH
34660: LD_INT 55
34662: PUSH
34663: LD_INT 56
34665: PUSH
34666: LD_INT 57
34668: PUSH
34669: LD_INT 58
34671: PUSH
34672: LD_INT 59
34674: PUSH
34675: LD_INT 63
34677: PUSH
34678: LD_INT 64
34680: PUSH
34681: LD_INT 65
34683: PUSH
34684: LD_INT 82
34686: PUSH
34687: LD_INT 83
34689: PUSH
34690: LD_INT 84
34692: PUSH
34693: LD_INT 85
34695: PUSH
34696: LD_INT 86
34698: PUSH
34699: LD_INT 89
34701: PUSH
34702: LD_INT 91
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
34762: GO 34765
34764: POP
// if state > - 1 and state < 3 then
34765: LD_VAR 0 3
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: GREATER
34774: IFFALSE 34786
34776: PUSH
34777: LD_VAR 0 3
34781: PUSH
34782: LD_INT 3
34784: LESS
34785: AND
34786: IFFALSE 34843
// for i in result do
34788: LD_ADDR_VAR 0 5
34792: PUSH
34793: LD_VAR 0 4
34797: PUSH
34798: FOR_IN
34799: IFFALSE 34841
// if GetTech ( i , side ) <> state then
34801: LD_VAR 0 5
34805: PPUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: CALL_OW 321
34815: PUSH
34816: LD_VAR 0 3
34820: NONEQUAL
34821: IFFALSE 34839
// result := result diff i ;
34823: LD_ADDR_VAR 0 4
34827: PUSH
34828: LD_VAR 0 4
34832: PUSH
34833: LD_VAR 0 5
34837: DIFF
34838: ST_TO_ADDR
34839: GO 34798
34841: POP
34842: POP
// end ;
34843: LD_VAR 0 4
34847: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34848: LD_INT 0
34850: PPUSH
34851: PPUSH
34852: PPUSH
// result := true ;
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_INT 1
34860: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 2
34870: PPUSH
34871: CALL_OW 480
34875: ST_TO_ADDR
// if not tmp then
34876: LD_VAR 0 5
34880: NOT
34881: IFFALSE 34885
// exit ;
34883: GO 34934
// for i in tmp do
34885: LD_ADDR_VAR 0 4
34889: PUSH
34890: LD_VAR 0 5
34894: PUSH
34895: FOR_IN
34896: IFFALSE 34932
// if GetTech ( i , side ) <> state_researched then
34898: LD_VAR 0 4
34902: PPUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 321
34912: PUSH
34913: LD_INT 2
34915: NONEQUAL
34916: IFFALSE 34930
// begin result := false ;
34918: LD_ADDR_VAR 0 3
34922: PUSH
34923: LD_INT 0
34925: ST_TO_ADDR
// exit ;
34926: POP
34927: POP
34928: GO 34934
// end ;
34930: GO 34895
34932: POP
34933: POP
// end ;
34934: LD_VAR 0 3
34938: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34939: LD_INT 0
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34954: LD_VAR 0 1
34958: NOT
34959: IFTRUE 34976
34961: PUSH
34962: LD_VAR 0 1
34966: PPUSH
34967: CALL_OW 257
34971: PUSH
34972: LD_INT 9
34974: NONEQUAL
34975: OR
34976: IFFALSE 34980
// exit ;
34978: GO 35559
// side := GetSide ( unit ) ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_VAR 0 1
34989: PPUSH
34990: CALL_OW 255
34994: ST_TO_ADDR
// tech_space := tech_spacanom ;
34995: LD_ADDR_VAR 0 12
34999: PUSH
35000: LD_INT 29
35002: ST_TO_ADDR
// tech_time := tech_taurad ;
35003: LD_ADDR_VAR 0 13
35007: PUSH
35008: LD_INT 28
35010: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35011: LD_ADDR_VAR 0 11
35015: PUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 310
35025: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35026: LD_VAR 0 11
35030: PPUSH
35031: CALL_OW 247
35035: PUSH
35036: LD_INT 2
35038: EQUAL
35039: IFFALSE 35043
// exit ;
35041: GO 35559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35043: LD_ADDR_VAR 0 8
35047: PUSH
35048: LD_INT 81
35050: PUSH
35051: LD_VAR 0 9
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: LD_INT 21
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PPUSH
35081: CALL_OW 69
35085: ST_TO_ADDR
// if not tmp then
35086: LD_VAR 0 8
35090: NOT
35091: IFFALSE 35095
// exit ;
35093: GO 35559
// if in_unit then
35095: LD_VAR 0 11
35099: IFFALSE 35123
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35101: LD_ADDR_VAR 0 10
35105: PUSH
35106: LD_VAR 0 8
35110: PPUSH
35111: LD_VAR 0 11
35115: PPUSH
35116: CALL_OW 74
35120: ST_TO_ADDR
35121: GO 35143
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35123: LD_ADDR_VAR 0 10
35127: PUSH
35128: LD_VAR 0 8
35132: PPUSH
35133: LD_VAR 0 1
35137: PPUSH
35138: CALL_OW 74
35142: ST_TO_ADDR
// if not enemy then
35143: LD_VAR 0 10
35147: NOT
35148: IFFALSE 35152
// exit ;
35150: GO 35559
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35152: LD_VAR 0 11
35156: IFFALSE 35178
35158: PUSH
35159: LD_VAR 0 11
35163: PPUSH
35164: LD_VAR 0 10
35168: PPUSH
35169: CALL_OW 296
35173: PUSH
35174: LD_INT 13
35176: GREATER
35177: AND
35178: IFTRUE 35200
35180: PUSH
35181: LD_VAR 0 1
35185: PPUSH
35186: LD_VAR 0 10
35190: PPUSH
35191: CALL_OW 296
35195: PUSH
35196: LD_INT 12
35198: GREATER
35199: OR
35200: IFFALSE 35204
// exit ;
35202: GO 35559
// missile := [ 1 ] ;
35204: LD_ADDR_VAR 0 14
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35215: LD_VAR 0 9
35219: PPUSH
35220: LD_VAR 0 12
35224: PPUSH
35225: CALL_OW 325
35229: IFFALSE 35258
// missile := Replace ( missile , missile + 1 , 2 ) ;
35231: LD_ADDR_VAR 0 14
35235: PUSH
35236: LD_VAR 0 14
35240: PPUSH
35241: LD_VAR 0 14
35245: PUSH
35246: LD_INT 1
35248: PLUS
35249: PPUSH
35250: LD_INT 2
35252: PPUSH
35253: CALL_OW 1
35257: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35258: LD_VAR 0 9
35262: PPUSH
35263: LD_VAR 0 13
35267: PPUSH
35268: CALL_OW 325
35272: IFFALSE 35296
35274: PUSH
35275: LD_VAR 0 10
35279: PPUSH
35280: CALL_OW 255
35284: PPUSH
35285: LD_VAR 0 13
35289: PPUSH
35290: CALL_OW 325
35294: NOT
35295: AND
35296: IFFALSE 35325
// missile := Replace ( missile , missile + 1 , 3 ) ;
35298: LD_ADDR_VAR 0 14
35302: PUSH
35303: LD_VAR 0 14
35307: PPUSH
35308: LD_VAR 0 14
35312: PUSH
35313: LD_INT 1
35315: PLUS
35316: PPUSH
35317: LD_INT 3
35319: PPUSH
35320: CALL_OW 1
35324: ST_TO_ADDR
// if missile < 2 then
35325: LD_VAR 0 14
35329: PUSH
35330: LD_INT 2
35332: LESS
35333: IFFALSE 35337
// exit ;
35335: GO 35559
// x := GetX ( enemy ) ;
35337: LD_ADDR_VAR 0 4
35341: PUSH
35342: LD_VAR 0 10
35346: PPUSH
35347: CALL_OW 250
35351: ST_TO_ADDR
// y := GetY ( enemy ) ;
35352: LD_ADDR_VAR 0 5
35356: PUSH
35357: LD_VAR 0 10
35361: PPUSH
35362: CALL_OW 251
35366: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 4
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PPUSH
35381: LD_INT 1
35383: PPUSH
35384: CALL_OW 12
35388: PLUS
35389: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35390: LD_ADDR_VAR 0 7
35394: PUSH
35395: LD_VAR 0 5
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PPUSH
35404: LD_INT 1
35406: PPUSH
35407: CALL_OW 12
35411: PLUS
35412: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35413: LD_VAR 0 6
35417: PPUSH
35418: LD_VAR 0 7
35422: PPUSH
35423: CALL_OW 488
35427: NOT
35428: IFFALSE 35450
// begin _x := x ;
35430: LD_ADDR_VAR 0 6
35434: PUSH
35435: LD_VAR 0 4
35439: ST_TO_ADDR
// _y := y ;
35440: LD_ADDR_VAR 0 7
35444: PUSH
35445: LD_VAR 0 5
35449: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_INT 1
35457: PPUSH
35458: LD_VAR 0 14
35462: PPUSH
35463: CALL_OW 12
35467: ST_TO_ADDR
// case i of 1 :
35468: LD_VAR 0 3
35472: PUSH
35473: LD_INT 1
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35481
35479: GO 35498
35481: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35482: LD_VAR 0 1
35486: PPUSH
35487: LD_VAR 0 10
35491: PPUSH
35492: CALL_OW 115
35496: GO 35559
35498: LD_INT 2
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35506
35504: GO 35528
35506: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35507: LD_VAR 0 1
35511: PPUSH
35512: LD_VAR 0 6
35516: PPUSH
35517: LD_VAR 0 7
35521: PPUSH
35522: CALL_OW 153
35526: GO 35559
35528: LD_INT 3
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35558
35536: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35537: LD_VAR 0 1
35541: PPUSH
35542: LD_VAR 0 6
35546: PPUSH
35547: LD_VAR 0 7
35551: PPUSH
35552: CALL_OW 154
35556: GO 35559
35558: POP
// end ;
35559: LD_VAR 0 2
35563: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35564: LD_INT 0
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
// if not unit or not building then
35572: LD_VAR 0 1
35576: NOT
35577: IFTRUE 35586
35579: PUSH
35580: LD_VAR 0 2
35584: NOT
35585: OR
35586: IFFALSE 35590
// exit ;
35588: GO 35748
// x := GetX ( building ) ;
35590: LD_ADDR_VAR 0 5
35594: PUSH
35595: LD_VAR 0 2
35599: PPUSH
35600: CALL_OW 250
35604: ST_TO_ADDR
// y := GetY ( building ) ;
35605: LD_ADDR_VAR 0 6
35609: PUSH
35610: LD_VAR 0 2
35614: PPUSH
35615: CALL_OW 251
35619: ST_TO_ADDR
// for i := 0 to 5 do
35620: LD_ADDR_VAR 0 4
35624: PUSH
35625: DOUBLE
35626: LD_INT 0
35628: DEC
35629: ST_TO_ADDR
35630: LD_INT 5
35632: PUSH
35633: FOR_TO
35634: IFFALSE 35746
// begin _x := ShiftX ( x , i , 3 ) ;
35636: LD_ADDR_VAR 0 7
35640: PUSH
35641: LD_VAR 0 5
35645: PPUSH
35646: LD_VAR 0 4
35650: PPUSH
35651: LD_INT 3
35653: PPUSH
35654: CALL_OW 272
35658: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35659: LD_ADDR_VAR 0 8
35663: PUSH
35664: LD_VAR 0 6
35668: PPUSH
35669: LD_VAR 0 4
35673: PPUSH
35674: LD_INT 3
35676: PPUSH
35677: CALL_OW 273
35681: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35682: LD_VAR 0 7
35686: PPUSH
35687: LD_VAR 0 8
35691: PPUSH
35692: CALL_OW 488
35696: NOT
35697: IFFALSE 35701
// continue ;
35699: GO 35633
// if HexInfo ( _x , _y ) = 0 then
35701: LD_VAR 0 7
35705: PPUSH
35706: LD_VAR 0 8
35710: PPUSH
35711: CALL_OW 428
35715: PUSH
35716: LD_INT 0
35718: EQUAL
35719: IFFALSE 35744
// begin ComMoveXY ( unit , _x , _y ) ;
35721: LD_VAR 0 1
35725: PPUSH
35726: LD_VAR 0 7
35730: PPUSH
35731: LD_VAR 0 8
35735: PPUSH
35736: CALL_OW 111
// exit ;
35740: POP
35741: POP
35742: GO 35748
// end ; end ;
35744: GO 35633
35746: POP
35747: POP
// end ;
35748: LD_VAR 0 3
35752: RET
// export function ScanBase ( side , base_area ) ; begin
35753: LD_INT 0
35755: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_VAR 0 2
35765: PPUSH
35766: LD_INT 81
35768: PUSH
35769: LD_VAR 0 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PPUSH
35778: CALL_OW 70
35782: ST_TO_ADDR
// end ;
35783: LD_VAR 0 3
35787: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35788: LD_INT 0
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
// result := false ;
35794: LD_ADDR_VAR 0 2
35798: PUSH
35799: LD_INT 0
35801: ST_TO_ADDR
// side := GetSide ( unit ) ;
35802: LD_ADDR_VAR 0 3
35806: PUSH
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 255
35816: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35817: LD_ADDR_VAR 0 4
35821: PUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: CALL_OW 248
35831: ST_TO_ADDR
// case nat of 1 :
35832: LD_VAR 0 4
35836: PUSH
35837: LD_INT 1
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35845
35843: GO 35856
35845: POP
// tech := tech_lassight ; 2 :
35846: LD_ADDR_VAR 0 5
35850: PUSH
35851: LD_INT 12
35853: ST_TO_ADDR
35854: GO 35895
35856: LD_INT 2
35858: DOUBLE
35859: EQUAL
35860: IFTRUE 35864
35862: GO 35875
35864: POP
// tech := tech_mortar ; 3 :
35865: LD_ADDR_VAR 0 5
35869: PUSH
35870: LD_INT 41
35872: ST_TO_ADDR
35873: GO 35895
35875: LD_INT 3
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35894
35883: POP
// tech := tech_bazooka ; end ;
35884: LD_ADDR_VAR 0 5
35888: PUSH
35889: LD_INT 44
35891: ST_TO_ADDR
35892: GO 35895
35894: POP
// if Researched ( side , tech ) then
35895: LD_VAR 0 3
35899: PPUSH
35900: LD_VAR 0 5
35904: PPUSH
35905: CALL_OW 325
35909: IFFALSE 35936
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35911: LD_ADDR_VAR 0 2
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: LD_INT 8
35921: PUSH
35922: LD_INT 9
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_VAR 0 4
35934: ARRAY
35935: ST_TO_ADDR
// end ;
35936: LD_VAR 0 2
35940: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35941: LD_INT 0
35943: PPUSH
35944: PPUSH
35945: PPUSH
// if not mines then
35946: LD_VAR 0 2
35950: NOT
35951: IFFALSE 35955
// exit ;
35953: GO 36099
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35955: LD_ADDR_VAR 0 5
35959: PUSH
35960: LD_INT 81
35962: PUSH
35963: LD_VAR 0 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 3
35974: PUSH
35975: LD_INT 21
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PPUSH
35993: CALL_OW 69
35997: ST_TO_ADDR
// for i in mines do
35998: LD_ADDR_VAR 0 4
36002: PUSH
36003: LD_VAR 0 2
36007: PUSH
36008: FOR_IN
36009: IFFALSE 36097
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36011: LD_VAR 0 4
36015: PUSH
36016: LD_INT 1
36018: ARRAY
36019: PPUSH
36020: LD_VAR 0 4
36024: PUSH
36025: LD_INT 2
36027: ARRAY
36028: PPUSH
36029: CALL_OW 458
36033: NOT
36034: IFFALSE 36038
// continue ;
36036: GO 36008
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36038: LD_VAR 0 4
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PPUSH
36047: LD_VAR 0 4
36051: PUSH
36052: LD_INT 2
36054: ARRAY
36055: PPUSH
36056: CALL_OW 428
36060: PUSH
36061: LD_VAR 0 5
36065: IN
36066: IFFALSE 36095
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36068: LD_VAR 0 4
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: PPUSH
36077: LD_VAR 0 4
36081: PUSH
36082: LD_INT 2
36084: ARRAY
36085: PPUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL_OW 456
// end ;
36095: GO 36008
36097: POP
36098: POP
// end ;
36099: LD_VAR 0 3
36103: RET
// export function Count ( array ) ; begin
36104: LD_INT 0
36106: PPUSH
// result := array + 0 ;
36107: LD_ADDR_VAR 0 2
36111: PUSH
36112: LD_VAR 0 1
36116: PUSH
36117: LD_INT 0
36119: PLUS
36120: ST_TO_ADDR
// end ;
36121: LD_VAR 0 2
36125: RET
// export function IsEmpty ( building ) ; begin
36126: LD_INT 0
36128: PPUSH
// if not building then
36129: LD_VAR 0 1
36133: NOT
36134: IFFALSE 36138
// exit ;
36136: GO 36181
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36138: LD_ADDR_VAR 0 2
36142: PUSH
36143: LD_VAR 0 1
36147: PUSH
36148: LD_INT 22
36150: PUSH
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 255
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 58
36167: PUSH
36168: EMPTY
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PPUSH
36175: CALL_OW 69
36179: IN
36180: ST_TO_ADDR
// end ;
36181: LD_VAR 0 2
36185: RET
// export function IsNotFull ( building ) ; var places ; begin
36186: LD_INT 0
36188: PPUSH
36189: PPUSH
// if not building then
36190: LD_VAR 0 1
36194: NOT
36195: IFFALSE 36199
// exit ;
36197: GO 36227
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36199: LD_ADDR_VAR 0 2
36203: PUSH
36204: LD_VAR 0 1
36208: PPUSH
36209: LD_INT 3
36211: PUSH
36212: LD_INT 62
36214: PUSH
36215: EMPTY
36216: LIST
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PPUSH
36222: CALL_OW 72
36226: ST_TO_ADDR
// end ;
36227: LD_VAR 0 2
36231: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36232: LD_INT 0
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
// tmp := [ ] ;
36238: LD_ADDR_VAR 0 3
36242: PUSH
36243: EMPTY
36244: ST_TO_ADDR
// list := [ ] ;
36245: LD_ADDR_VAR 0 5
36249: PUSH
36250: EMPTY
36251: ST_TO_ADDR
// for i = 16 to 25 do
36252: LD_ADDR_VAR 0 4
36256: PUSH
36257: DOUBLE
36258: LD_INT 16
36260: DEC
36261: ST_TO_ADDR
36262: LD_INT 25
36264: PUSH
36265: FOR_TO
36266: IFFALSE 36339
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_VAR 0 3
36277: PUSH
36278: LD_INT 22
36280: PUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL_OW 255
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 91
36297: PUSH
36298: LD_VAR 0 1
36302: PUSH
36303: LD_INT 6
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 30
36313: PUSH
36314: LD_VAR 0 4
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: PPUSH
36331: CALL_OW 69
36335: ADD
36336: ST_TO_ADDR
36337: GO 36265
36339: POP
36340: POP
// for i = 1 to tmp do
36341: LD_ADDR_VAR 0 4
36345: PUSH
36346: DOUBLE
36347: LD_INT 1
36349: DEC
36350: ST_TO_ADDR
36351: LD_VAR 0 3
36355: PUSH
36356: FOR_TO
36357: IFFALSE 36445
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36359: LD_ADDR_VAR 0 5
36363: PUSH
36364: LD_VAR 0 5
36368: PUSH
36369: LD_VAR 0 3
36373: PUSH
36374: LD_VAR 0 4
36378: ARRAY
36379: PPUSH
36380: CALL_OW 266
36384: PUSH
36385: LD_VAR 0 3
36389: PUSH
36390: LD_VAR 0 4
36394: ARRAY
36395: PPUSH
36396: CALL_OW 250
36400: PUSH
36401: LD_VAR 0 3
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: PPUSH
36412: CALL_OW 251
36416: PUSH
36417: LD_VAR 0 3
36421: PUSH
36422: LD_VAR 0 4
36426: ARRAY
36427: PPUSH
36428: CALL_OW 254
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: ADD
36442: ST_TO_ADDR
36443: GO 36356
36445: POP
36446: POP
// result := list ;
36447: LD_ADDR_VAR 0 2
36451: PUSH
36452: LD_VAR 0 5
36456: ST_TO_ADDR
// end ;
36457: LD_VAR 0 2
36461: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36462: LD_INT 0
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
// if not factory then
36471: LD_VAR 0 1
36475: NOT
36476: IFFALSE 36480
// exit ;
36478: GO 37083
// if control = control_apeman then
36480: LD_VAR 0 4
36484: PUSH
36485: LD_INT 5
36487: EQUAL
36488: IFFALSE 36597
// begin tmp := UnitsInside ( factory ) ;
36490: LD_ADDR_VAR 0 8
36494: PUSH
36495: LD_VAR 0 1
36499: PPUSH
36500: CALL_OW 313
36504: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36505: LD_VAR 0 8
36509: PPUSH
36510: LD_INT 25
36512: PUSH
36513: LD_INT 12
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PPUSH
36520: CALL_OW 72
36524: NOT
36525: IFFALSE 36535
// control := control_manual ;
36527: LD_ADDR_VAR 0 4
36531: PUSH
36532: LD_INT 1
36534: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36535: LD_ADDR_VAR 0 8
36539: PUSH
36540: LD_VAR 0 1
36544: PPUSH
36545: CALL 36232 0 1
36549: ST_TO_ADDR
// if tmp then
36550: LD_VAR 0 8
36554: IFFALSE 36597
// begin for i in tmp do
36556: LD_ADDR_VAR 0 7
36560: PUSH
36561: LD_VAR 0 8
36565: PUSH
36566: FOR_IN
36567: IFFALSE 36595
// if i [ 1 ] = b_ext_radio then
36569: LD_VAR 0 7
36573: PUSH
36574: LD_INT 1
36576: ARRAY
36577: PUSH
36578: LD_INT 22
36580: EQUAL
36581: IFFALSE 36593
// begin control := control_remote ;
36583: LD_ADDR_VAR 0 4
36587: PUSH
36588: LD_INT 2
36590: ST_TO_ADDR
// break ;
36591: GO 36595
// end ;
36593: GO 36566
36595: POP
36596: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36597: LD_VAR 0 1
36601: PPUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: LD_VAR 0 3
36611: PPUSH
36612: LD_VAR 0 4
36616: PPUSH
36617: LD_VAR 0 5
36621: PPUSH
36622: CALL_OW 448
36626: IFFALSE 36661
// begin result := [ chassis , engine , control , weapon ] ;
36628: LD_ADDR_VAR 0 6
36632: PUSH
36633: LD_VAR 0 2
36637: PUSH
36638: LD_VAR 0 3
36642: PUSH
36643: LD_VAR 0 4
36647: PUSH
36648: LD_VAR 0 5
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
// exit ;
36659: GO 37083
// end ; _chassis := AvailableChassisList ( factory ) ;
36661: LD_ADDR_VAR 0 9
36665: PUSH
36666: LD_VAR 0 1
36670: PPUSH
36671: CALL_OW 475
36675: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36676: LD_ADDR_VAR 0 11
36680: PUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 476
36690: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36691: LD_ADDR_VAR 0 12
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 477
36705: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36706: LD_ADDR_VAR 0 10
36710: PUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 478
36720: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36721: LD_VAR 0 9
36725: NOT
36726: IFTRUE 36735
36728: PUSH
36729: LD_VAR 0 11
36733: NOT
36734: OR
36735: IFTRUE 36744
36737: PUSH
36738: LD_VAR 0 12
36742: NOT
36743: OR
36744: IFTRUE 36753
36746: PUSH
36747: LD_VAR 0 10
36751: NOT
36752: OR
36753: IFFALSE 36788
// begin result := [ chassis , engine , control , weapon ] ;
36755: LD_ADDR_VAR 0 6
36759: PUSH
36760: LD_VAR 0 2
36764: PUSH
36765: LD_VAR 0 3
36769: PUSH
36770: LD_VAR 0 4
36774: PUSH
36775: LD_VAR 0 5
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// exit ;
36786: GO 37083
// end ; if not chassis in _chassis then
36788: LD_VAR 0 2
36792: PUSH
36793: LD_VAR 0 9
36797: IN
36798: NOT
36799: IFFALSE 36825
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36801: LD_ADDR_VAR 0 2
36805: PUSH
36806: LD_VAR 0 9
36810: PUSH
36811: LD_INT 1
36813: PPUSH
36814: LD_VAR 0 9
36818: PPUSH
36819: CALL_OW 12
36823: ARRAY
36824: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36825: LD_VAR 0 2
36829: PPUSH
36830: LD_VAR 0 3
36834: PPUSH
36835: CALL 37088 0 2
36839: NOT
36840: IFFALSE 36901
// repeat engine := _engine [ 1 ] ;
36842: LD_ADDR_VAR 0 3
36846: PUSH
36847: LD_VAR 0 11
36851: PUSH
36852: LD_INT 1
36854: ARRAY
36855: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36856: LD_ADDR_VAR 0 11
36860: PUSH
36861: LD_VAR 0 11
36865: PPUSH
36866: LD_INT 1
36868: PPUSH
36869: CALL_OW 3
36873: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36874: LD_VAR 0 2
36878: PPUSH
36879: LD_VAR 0 3
36883: PPUSH
36884: CALL 37088 0 2
36888: IFTRUE 36899
36890: PUSH
36891: LD_VAR 0 11
36895: PUSH
36896: EMPTY
36897: EQUAL
36898: OR
36899: IFFALSE 36842
// if not control in _control then
36901: LD_VAR 0 4
36905: PUSH
36906: LD_VAR 0 12
36910: IN
36911: NOT
36912: IFFALSE 36938
// control := _control [ rand ( 1 , _control ) ] ;
36914: LD_ADDR_VAR 0 4
36918: PUSH
36919: LD_VAR 0 12
36923: PUSH
36924: LD_INT 1
36926: PPUSH
36927: LD_VAR 0 12
36931: PPUSH
36932: CALL_OW 12
36936: ARRAY
36937: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36938: LD_VAR 0 2
36942: PPUSH
36943: LD_VAR 0 5
36947: PPUSH
36948: CALL 37310 0 2
36952: NOT
36953: IFFALSE 37014
// repeat weapon := _weapon [ 1 ] ;
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_VAR 0 10
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36969: LD_ADDR_VAR 0 10
36973: PUSH
36974: LD_VAR 0 10
36978: PPUSH
36979: LD_INT 1
36981: PPUSH
36982: CALL_OW 3
36986: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36987: LD_VAR 0 2
36991: PPUSH
36992: LD_VAR 0 5
36996: PPUSH
36997: CALL 37310 0 2
37001: IFTRUE 37012
37003: PUSH
37004: LD_VAR 0 10
37008: PUSH
37009: EMPTY
37010: EQUAL
37011: OR
37012: IFFALSE 36955
// result := [ ] ;
37014: LD_ADDR_VAR 0 6
37018: PUSH
37019: EMPTY
37020: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37021: LD_VAR 0 1
37025: PPUSH
37026: LD_VAR 0 2
37030: PPUSH
37031: LD_VAR 0 3
37035: PPUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: LD_VAR 0 5
37045: PPUSH
37046: CALL_OW 448
37050: IFFALSE 37083
// result := [ chassis , engine , control , weapon ] ;
37052: LD_ADDR_VAR 0 6
37056: PUSH
37057: LD_VAR 0 2
37061: PUSH
37062: LD_VAR 0 3
37066: PUSH
37067: LD_VAR 0 4
37071: PUSH
37072: LD_VAR 0 5
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// end ;
37083: LD_VAR 0 6
37087: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37088: LD_INT 0
37090: PPUSH
// if not chassis or not engine then
37091: LD_VAR 0 1
37095: NOT
37096: IFTRUE 37105
37098: PUSH
37099: LD_VAR 0 2
37103: NOT
37104: OR
37105: IFFALSE 37109
// exit ;
37107: GO 37305
// case engine of engine_solar :
37109: LD_VAR 0 2
37113: PUSH
37114: LD_INT 2
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37122
37120: GO 37160
37122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37123: LD_ADDR_VAR 0 3
37127: PUSH
37128: LD_INT 11
37130: PUSH
37131: LD_INT 12
37133: PUSH
37134: LD_INT 13
37136: PUSH
37137: LD_INT 14
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
37158: GO 37289
37160: LD_INT 1
37162: DOUBLE
37163: EQUAL
37164: IFTRUE 37168
37166: GO 37230
37168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37169: LD_ADDR_VAR 0 3
37173: PUSH
37174: LD_INT 11
37176: PUSH
37177: LD_INT 12
37179: PUSH
37180: LD_INT 13
37182: PUSH
37183: LD_INT 14
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 3
37194: PUSH
37195: LD_INT 4
37197: PUSH
37198: LD_INT 5
37200: PUSH
37201: LD_INT 21
37203: PUSH
37204: LD_INT 23
37206: PUSH
37207: LD_INT 22
37209: PUSH
37210: LD_INT 24
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
37228: GO 37289
37230: LD_INT 3
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37238
37236: GO 37288
37238: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37239: LD_ADDR_VAR 0 3
37243: PUSH
37244: LD_INT 13
37246: PUSH
37247: LD_INT 14
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 3
37255: PUSH
37256: LD_INT 4
37258: PUSH
37259: LD_INT 5
37261: PUSH
37262: LD_INT 21
37264: PUSH
37265: LD_INT 22
37267: PUSH
37268: LD_INT 23
37270: PUSH
37271: LD_INT 24
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: ST_TO_ADDR
37286: GO 37289
37288: POP
// result := ( chassis in result ) ;
37289: LD_ADDR_VAR 0 3
37293: PUSH
37294: LD_VAR 0 1
37298: PUSH
37299: LD_VAR 0 3
37303: IN
37304: ST_TO_ADDR
// end ;
37305: LD_VAR 0 3
37309: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37310: LD_INT 0
37312: PPUSH
// if not chassis or not weapon then
37313: LD_VAR 0 1
37317: NOT
37318: IFTRUE 37327
37320: PUSH
37321: LD_VAR 0 2
37325: NOT
37326: OR
37327: IFFALSE 37331
// exit ;
37329: GO 38425
// case weapon of us_machine_gun :
37331: LD_VAR 0 2
37335: PUSH
37336: LD_INT 2
37338: DOUBLE
37339: EQUAL
37340: IFTRUE 37344
37342: GO 37374
37344: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37345: LD_ADDR_VAR 0 3
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: LD_INT 3
37358: PUSH
37359: LD_INT 4
37361: PUSH
37362: LD_INT 5
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: ST_TO_ADDR
37372: GO 38409
37374: LD_INT 3
37376: DOUBLE
37377: EQUAL
37378: IFTRUE 37382
37380: GO 37412
37382: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: LD_INT 4
37399: PUSH
37400: LD_INT 5
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
37410: GO 38409
37412: LD_INT 11
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37450
37420: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: LD_INT 3
37434: PUSH
37435: LD_INT 4
37437: PUSH
37438: LD_INT 5
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
37448: GO 38409
37450: LD_INT 4
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37458
37456: GO 37484
37458: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37459: LD_ADDR_VAR 0 3
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 4
37472: PUSH
37473: LD_INT 5
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: ST_TO_ADDR
37482: GO 38409
37484: LD_INT 5
37486: DOUBLE
37487: EQUAL
37488: IFTRUE 37492
37490: GO 37518
37492: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37493: LD_ADDR_VAR 0 3
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: LD_INT 5
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: ST_TO_ADDR
37516: GO 38409
37518: LD_INT 9
37520: DOUBLE
37521: EQUAL
37522: IFTRUE 37526
37524: GO 37552
37526: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37527: LD_ADDR_VAR 0 3
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: LD_INT 3
37537: PUSH
37538: LD_INT 4
37540: PUSH
37541: LD_INT 5
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
37550: GO 38409
37552: LD_INT 7
37554: DOUBLE
37555: EQUAL
37556: IFTRUE 37560
37558: GO 37586
37560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37561: LD_ADDR_VAR 0 3
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: LD_INT 4
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
37584: GO 38409
37586: LD_INT 12
37588: DOUBLE
37589: EQUAL
37590: IFTRUE 37594
37592: GO 37620
37594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37595: LD_ADDR_VAR 0 3
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: LD_INT 3
37605: PUSH
37606: LD_INT 4
37608: PUSH
37609: LD_INT 5
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: ST_TO_ADDR
37618: GO 38409
37620: LD_INT 13
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37628
37626: GO 37654
37628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: LD_INT 4
37642: PUSH
37643: LD_INT 5
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
37652: GO 38409
37654: LD_INT 14
37656: DOUBLE
37657: EQUAL
37658: IFTRUE 37662
37660: GO 37680
37662: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37663: LD_ADDR_VAR 0 3
37667: PUSH
37668: LD_INT 4
37670: PUSH
37671: LD_INT 5
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: ST_TO_ADDR
37678: GO 38409
37680: LD_INT 6
37682: DOUBLE
37683: EQUAL
37684: IFTRUE 37688
37686: GO 37706
37688: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37689: LD_ADDR_VAR 0 3
37693: PUSH
37694: LD_INT 4
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: ST_TO_ADDR
37704: GO 38409
37706: LD_INT 10
37708: DOUBLE
37709: EQUAL
37710: IFTRUE 37714
37712: GO 37732
37714: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37715: LD_ADDR_VAR 0 3
37719: PUSH
37720: LD_INT 4
37722: PUSH
37723: LD_INT 5
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: ST_TO_ADDR
37730: GO 38409
37732: LD_INT 22
37734: DOUBLE
37735: EQUAL
37736: IFTRUE 37740
37738: GO 37766
37740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: LD_INT 11
37748: PUSH
37749: LD_INT 12
37751: PUSH
37752: LD_INT 13
37754: PUSH
37755: LD_INT 14
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
37764: GO 38409
37766: LD_INT 23
37768: DOUBLE
37769: EQUAL
37770: IFTRUE 37774
37772: GO 37800
37774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 11
37782: PUSH
37783: LD_INT 12
37785: PUSH
37786: LD_INT 13
37788: PUSH
37789: LD_INT 14
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
37798: GO 38409
37800: LD_INT 24
37802: DOUBLE
37803: EQUAL
37804: IFTRUE 37808
37806: GO 37834
37808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_INT 11
37816: PUSH
37817: LD_INT 12
37819: PUSH
37820: LD_INT 13
37822: PUSH
37823: LD_INT 14
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
37832: GO 38409
37834: LD_INT 30
37836: DOUBLE
37837: EQUAL
37838: IFTRUE 37842
37840: GO 37868
37842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37843: LD_ADDR_VAR 0 3
37847: PUSH
37848: LD_INT 11
37850: PUSH
37851: LD_INT 12
37853: PUSH
37854: LD_INT 13
37856: PUSH
37857: LD_INT 14
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
37866: GO 38409
37868: LD_INT 25
37870: DOUBLE
37871: EQUAL
37872: IFTRUE 37876
37874: GO 37894
37876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_INT 13
37884: PUSH
37885: LD_INT 14
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: ST_TO_ADDR
37892: GO 38409
37894: LD_INT 27
37896: DOUBLE
37897: EQUAL
37898: IFTRUE 37902
37900: GO 37920
37902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37903: LD_ADDR_VAR 0 3
37907: PUSH
37908: LD_INT 13
37910: PUSH
37911: LD_INT 14
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: ST_TO_ADDR
37918: GO 38409
37920: LD_INT 92
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37928
37926: GO 37954
37928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37929: LD_ADDR_VAR 0 3
37933: PUSH
37934: LD_INT 11
37936: PUSH
37937: LD_INT 12
37939: PUSH
37940: LD_INT 13
37942: PUSH
37943: LD_INT 14
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
37952: GO 38409
37954: LD_INT 28
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 37980
37962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_INT 13
37970: PUSH
37971: LD_INT 14
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: ST_TO_ADDR
37978: GO 38409
37980: LD_INT 29
37982: DOUBLE
37983: EQUAL
37984: IFTRUE 37988
37986: GO 38006
37988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37989: LD_ADDR_VAR 0 3
37993: PUSH
37994: LD_INT 13
37996: PUSH
37997: LD_INT 14
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: ST_TO_ADDR
38004: GO 38409
38006: LD_INT 31
38008: DOUBLE
38009: EQUAL
38010: IFTRUE 38014
38012: GO 38032
38014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_INT 13
38022: PUSH
38023: LD_INT 14
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: ST_TO_ADDR
38030: GO 38409
38032: LD_INT 26
38034: DOUBLE
38035: EQUAL
38036: IFTRUE 38040
38038: GO 38058
38040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: LD_INT 13
38048: PUSH
38049: LD_INT 14
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: ST_TO_ADDR
38056: GO 38409
38058: LD_INT 42
38060: DOUBLE
38061: EQUAL
38062: IFTRUE 38066
38064: GO 38092
38066: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38067: LD_ADDR_VAR 0 3
38071: PUSH
38072: LD_INT 21
38074: PUSH
38075: LD_INT 22
38077: PUSH
38078: LD_INT 23
38080: PUSH
38081: LD_INT 24
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: ST_TO_ADDR
38090: GO 38409
38092: LD_INT 43
38094: DOUBLE
38095: EQUAL
38096: IFTRUE 38100
38098: GO 38126
38100: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38101: LD_ADDR_VAR 0 3
38105: PUSH
38106: LD_INT 21
38108: PUSH
38109: LD_INT 22
38111: PUSH
38112: LD_INT 23
38114: PUSH
38115: LD_INT 24
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: ST_TO_ADDR
38124: GO 38409
38126: LD_INT 44
38128: DOUBLE
38129: EQUAL
38130: IFTRUE 38134
38132: GO 38160
38134: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38135: LD_ADDR_VAR 0 3
38139: PUSH
38140: LD_INT 21
38142: PUSH
38143: LD_INT 22
38145: PUSH
38146: LD_INT 23
38148: PUSH
38149: LD_INT 24
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: ST_TO_ADDR
38158: GO 38409
38160: LD_INT 45
38162: DOUBLE
38163: EQUAL
38164: IFTRUE 38168
38166: GO 38194
38168: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38169: LD_ADDR_VAR 0 3
38173: PUSH
38174: LD_INT 21
38176: PUSH
38177: LD_INT 22
38179: PUSH
38180: LD_INT 23
38182: PUSH
38183: LD_INT 24
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
38192: GO 38409
38194: LD_INT 49
38196: DOUBLE
38197: EQUAL
38198: IFTRUE 38202
38200: GO 38228
38202: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38203: LD_ADDR_VAR 0 3
38207: PUSH
38208: LD_INT 21
38210: PUSH
38211: LD_INT 22
38213: PUSH
38214: LD_INT 23
38216: PUSH
38217: LD_INT 24
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: ST_TO_ADDR
38226: GO 38409
38228: LD_INT 51
38230: DOUBLE
38231: EQUAL
38232: IFTRUE 38236
38234: GO 38262
38236: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38237: LD_ADDR_VAR 0 3
38241: PUSH
38242: LD_INT 21
38244: PUSH
38245: LD_INT 22
38247: PUSH
38248: LD_INT 23
38250: PUSH
38251: LD_INT 24
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: ST_TO_ADDR
38260: GO 38409
38262: LD_INT 52
38264: DOUBLE
38265: EQUAL
38266: IFTRUE 38270
38268: GO 38296
38270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38271: LD_ADDR_VAR 0 3
38275: PUSH
38276: LD_INT 21
38278: PUSH
38279: LD_INT 22
38281: PUSH
38282: LD_INT 23
38284: PUSH
38285: LD_INT 24
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: ST_TO_ADDR
38294: GO 38409
38296: LD_INT 53
38298: DOUBLE
38299: EQUAL
38300: IFTRUE 38304
38302: GO 38322
38304: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38305: LD_ADDR_VAR 0 3
38309: PUSH
38310: LD_INT 23
38312: PUSH
38313: LD_INT 24
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: ST_TO_ADDR
38320: GO 38409
38322: LD_INT 46
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 38348
38330: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 23
38338: PUSH
38339: LD_INT 24
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: ST_TO_ADDR
38346: GO 38409
38348: LD_INT 47
38350: DOUBLE
38351: EQUAL
38352: IFTRUE 38356
38354: GO 38374
38356: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
38357: LD_ADDR_VAR 0 3
38361: PUSH
38362: LD_INT 23
38364: PUSH
38365: LD_INT 24
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: ST_TO_ADDR
38372: GO 38409
38374: LD_INT 98
38376: DOUBLE
38377: EQUAL
38378: IFTRUE 38382
38380: GO 38408
38382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38383: LD_ADDR_VAR 0 3
38387: PUSH
38388: LD_INT 21
38390: PUSH
38391: LD_INT 22
38393: PUSH
38394: LD_INT 23
38396: PUSH
38397: LD_INT 24
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
38406: GO 38409
38408: POP
// result := ( chassis in result ) ;
38409: LD_ADDR_VAR 0 3
38413: PUSH
38414: LD_VAR 0 1
38418: PUSH
38419: LD_VAR 0 3
38423: IN
38424: ST_TO_ADDR
// end ;
38425: LD_VAR 0 3
38429: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38430: LD_INT 0
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
// result := array ;
38439: LD_ADDR_VAR 0 5
38443: PUSH
38444: LD_VAR 0 1
38448: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38449: LD_VAR 0 1
38453: NOT
38454: IFTRUE 38463
38456: PUSH
38457: LD_VAR 0 2
38461: NOT
38462: OR
38463: IFTRUE 38472
38465: PUSH
38466: LD_VAR 0 3
38470: NOT
38471: OR
38472: IFTRUE 38486
38474: PUSH
38475: LD_VAR 0 2
38479: PUSH
38480: LD_VAR 0 1
38484: GREATER
38485: OR
38486: IFTRUE 38500
38488: PUSH
38489: LD_VAR 0 3
38493: PUSH
38494: LD_VAR 0 1
38498: GREATER
38499: OR
38500: IFFALSE 38504
// exit ;
38502: GO 38800
// if direction then
38504: LD_VAR 0 4
38508: IFFALSE 38572
// begin d := 1 ;
38510: LD_ADDR_VAR 0 9
38514: PUSH
38515: LD_INT 1
38517: ST_TO_ADDR
// if i_from > i_to then
38518: LD_VAR 0 2
38522: PUSH
38523: LD_VAR 0 3
38527: GREATER
38528: IFFALSE 38554
// length := ( array - i_from ) + i_to else
38530: LD_ADDR_VAR 0 11
38534: PUSH
38535: LD_VAR 0 1
38539: PUSH
38540: LD_VAR 0 2
38544: MINUS
38545: PUSH
38546: LD_VAR 0 3
38550: PLUS
38551: ST_TO_ADDR
38552: GO 38570
// length := i_to - i_from ;
38554: LD_ADDR_VAR 0 11
38558: PUSH
38559: LD_VAR 0 3
38563: PUSH
38564: LD_VAR 0 2
38568: MINUS
38569: ST_TO_ADDR
// end else
38570: GO 38633
// begin d := - 1 ;
38572: LD_ADDR_VAR 0 9
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: ST_TO_ADDR
// if i_from > i_to then
38581: LD_VAR 0 2
38585: PUSH
38586: LD_VAR 0 3
38590: GREATER
38591: IFFALSE 38611
// length := i_from - i_to else
38593: LD_ADDR_VAR 0 11
38597: PUSH
38598: LD_VAR 0 2
38602: PUSH
38603: LD_VAR 0 3
38607: MINUS
38608: ST_TO_ADDR
38609: GO 38633
// length := ( array - i_to ) + i_from ;
38611: LD_ADDR_VAR 0 11
38615: PUSH
38616: LD_VAR 0 1
38620: PUSH
38621: LD_VAR 0 3
38625: MINUS
38626: PUSH
38627: LD_VAR 0 2
38631: PLUS
38632: ST_TO_ADDR
// end ; if not length then
38633: LD_VAR 0 11
38637: NOT
38638: IFFALSE 38642
// exit ;
38640: GO 38800
// tmp := array ;
38642: LD_ADDR_VAR 0 10
38646: PUSH
38647: LD_VAR 0 1
38651: ST_TO_ADDR
// for i = 1 to length do
38652: LD_ADDR_VAR 0 6
38656: PUSH
38657: DOUBLE
38658: LD_INT 1
38660: DEC
38661: ST_TO_ADDR
38662: LD_VAR 0 11
38666: PUSH
38667: FOR_TO
38668: IFFALSE 38788
// begin for j = 1 to array do
38670: LD_ADDR_VAR 0 7
38674: PUSH
38675: DOUBLE
38676: LD_INT 1
38678: DEC
38679: ST_TO_ADDR
38680: LD_VAR 0 1
38684: PUSH
38685: FOR_TO
38686: IFFALSE 38774
// begin k := j + d ;
38688: LD_ADDR_VAR 0 8
38692: PUSH
38693: LD_VAR 0 7
38697: PUSH
38698: LD_VAR 0 9
38702: PLUS
38703: ST_TO_ADDR
// if k > array then
38704: LD_VAR 0 8
38708: PUSH
38709: LD_VAR 0 1
38713: GREATER
38714: IFFALSE 38724
// k := 1 ;
38716: LD_ADDR_VAR 0 8
38720: PUSH
38721: LD_INT 1
38723: ST_TO_ADDR
// if not k then
38724: LD_VAR 0 8
38728: NOT
38729: IFFALSE 38741
// k := array ;
38731: LD_ADDR_VAR 0 8
38735: PUSH
38736: LD_VAR 0 1
38740: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38741: LD_ADDR_VAR 0 10
38745: PUSH
38746: LD_VAR 0 10
38750: PPUSH
38751: LD_VAR 0 8
38755: PPUSH
38756: LD_VAR 0 1
38760: PUSH
38761: LD_VAR 0 7
38765: ARRAY
38766: PPUSH
38767: CALL_OW 1
38771: ST_TO_ADDR
// end ;
38772: GO 38685
38774: POP
38775: POP
// array := tmp ;
38776: LD_ADDR_VAR 0 1
38780: PUSH
38781: LD_VAR 0 10
38785: ST_TO_ADDR
// end ;
38786: GO 38667
38788: POP
38789: POP
// result := array ;
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: LD_VAR 0 1
38799: ST_TO_ADDR
// end ;
38800: LD_VAR 0 5
38804: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38805: LD_INT 0
38807: PPUSH
38808: PPUSH
// result := 0 ;
38809: LD_ADDR_VAR 0 3
38813: PUSH
38814: LD_INT 0
38816: ST_TO_ADDR
// if not array or not value in array then
38817: LD_VAR 0 1
38821: NOT
38822: IFTRUE 38837
38824: PUSH
38825: LD_VAR 0 2
38829: PUSH
38830: LD_VAR 0 1
38834: IN
38835: NOT
38836: OR
38837: IFFALSE 38841
// exit ;
38839: GO 38895
// for i = 1 to array do
38841: LD_ADDR_VAR 0 4
38845: PUSH
38846: DOUBLE
38847: LD_INT 1
38849: DEC
38850: ST_TO_ADDR
38851: LD_VAR 0 1
38855: PUSH
38856: FOR_TO
38857: IFFALSE 38893
// if value = array [ i ] then
38859: LD_VAR 0 2
38863: PUSH
38864: LD_VAR 0 1
38868: PUSH
38869: LD_VAR 0 4
38873: ARRAY
38874: EQUAL
38875: IFFALSE 38891
// begin result := i ;
38877: LD_ADDR_VAR 0 3
38881: PUSH
38882: LD_VAR 0 4
38886: ST_TO_ADDR
// exit ;
38887: POP
38888: POP
38889: GO 38895
// end ;
38891: GO 38856
38893: POP
38894: POP
// end ;
38895: LD_VAR 0 3
38899: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38900: LD_INT 0
38902: PPUSH
// vc_chassis := chassis ;
38903: LD_ADDR_OWVAR 37
38907: PUSH
38908: LD_VAR 0 1
38912: ST_TO_ADDR
// vc_engine := engine ;
38913: LD_ADDR_OWVAR 39
38917: PUSH
38918: LD_VAR 0 2
38922: ST_TO_ADDR
// vc_control := control ;
38923: LD_ADDR_OWVAR 38
38927: PUSH
38928: LD_VAR 0 3
38932: ST_TO_ADDR
// vc_weapon := weapon ;
38933: LD_ADDR_OWVAR 40
38937: PUSH
38938: LD_VAR 0 4
38942: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38943: LD_ADDR_OWVAR 41
38947: PUSH
38948: LD_VAR 0 5
38952: ST_TO_ADDR
// end ;
38953: LD_VAR 0 6
38957: RET
// export function WantPlant ( unit ) ; var task ; begin
38958: LD_INT 0
38960: PPUSH
38961: PPUSH
// result := false ;
38962: LD_ADDR_VAR 0 2
38966: PUSH
38967: LD_INT 0
38969: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38970: LD_ADDR_VAR 0 3
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 437
38984: ST_TO_ADDR
// if task then
38985: LD_VAR 0 3
38989: IFFALSE 39017
// if task [ 1 ] [ 1 ] = p then
38991: LD_VAR 0 3
38995: PUSH
38996: LD_INT 1
38998: ARRAY
38999: PUSH
39000: LD_INT 1
39002: ARRAY
39003: PUSH
39004: LD_STRING p
39006: EQUAL
39007: IFFALSE 39017
// result := true ;
39009: LD_ADDR_VAR 0 2
39013: PUSH
39014: LD_INT 1
39016: ST_TO_ADDR
// end ;
39017: LD_VAR 0 2
39021: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39022: LD_INT 0
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
// if pos < 1 then
39028: LD_VAR 0 2
39032: PUSH
39033: LD_INT 1
39035: LESS
39036: IFFALSE 39040
// exit ;
39038: GO 39343
// if pos = 1 then
39040: LD_VAR 0 2
39044: PUSH
39045: LD_INT 1
39047: EQUAL
39048: IFFALSE 39081
// result := Replace ( arr , pos [ 1 ] , value ) else
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: LD_VAR 0 1
39059: PPUSH
39060: LD_VAR 0 2
39064: PUSH
39065: LD_INT 1
39067: ARRAY
39068: PPUSH
39069: LD_VAR 0 3
39073: PPUSH
39074: CALL_OW 1
39078: ST_TO_ADDR
39079: GO 39343
// begin tmp := arr ;
39081: LD_ADDR_VAR 0 6
39085: PUSH
39086: LD_VAR 0 1
39090: ST_TO_ADDR
// s_arr := [ tmp ] ;
39091: LD_ADDR_VAR 0 7
39095: PUSH
39096: LD_VAR 0 6
39100: PUSH
39101: EMPTY
39102: LIST
39103: ST_TO_ADDR
// for i = 1 to pos - 1 do
39104: LD_ADDR_VAR 0 5
39108: PUSH
39109: DOUBLE
39110: LD_INT 1
39112: DEC
39113: ST_TO_ADDR
39114: LD_VAR 0 2
39118: PUSH
39119: LD_INT 1
39121: MINUS
39122: PUSH
39123: FOR_TO
39124: IFFALSE 39169
// begin tmp := tmp [ pos [ i ] ] ;
39126: LD_ADDR_VAR 0 6
39130: PUSH
39131: LD_VAR 0 6
39135: PUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_VAR 0 5
39145: ARRAY
39146: ARRAY
39147: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39148: LD_ADDR_VAR 0 7
39152: PUSH
39153: LD_VAR 0 7
39157: PUSH
39158: LD_VAR 0 6
39162: PUSH
39163: EMPTY
39164: LIST
39165: ADD
39166: ST_TO_ADDR
// end ;
39167: GO 39123
39169: POP
39170: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39171: LD_ADDR_VAR 0 6
39175: PUSH
39176: LD_VAR 0 6
39180: PPUSH
39181: LD_VAR 0 2
39185: PUSH
39186: LD_VAR 0 2
39190: ARRAY
39191: PPUSH
39192: LD_VAR 0 3
39196: PPUSH
39197: CALL_OW 1
39201: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39202: LD_ADDR_VAR 0 7
39206: PUSH
39207: LD_VAR 0 7
39211: PPUSH
39212: LD_VAR 0 7
39216: PPUSH
39217: LD_VAR 0 6
39221: PPUSH
39222: CALL_OW 1
39226: ST_TO_ADDR
// for i = s_arr downto 2 do
39227: LD_ADDR_VAR 0 5
39231: PUSH
39232: DOUBLE
39233: LD_VAR 0 7
39237: INC
39238: ST_TO_ADDR
39239: LD_INT 2
39241: PUSH
39242: FOR_DOWNTO
39243: IFFALSE 39327
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39245: LD_ADDR_VAR 0 6
39249: PUSH
39250: LD_VAR 0 7
39254: PUSH
39255: LD_VAR 0 5
39259: PUSH
39260: LD_INT 1
39262: MINUS
39263: ARRAY
39264: PPUSH
39265: LD_VAR 0 2
39269: PUSH
39270: LD_VAR 0 5
39274: PUSH
39275: LD_INT 1
39277: MINUS
39278: ARRAY
39279: PPUSH
39280: LD_VAR 0 7
39284: PUSH
39285: LD_VAR 0 5
39289: ARRAY
39290: PPUSH
39291: CALL_OW 1
39295: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39296: LD_ADDR_VAR 0 7
39300: PUSH
39301: LD_VAR 0 7
39305: PPUSH
39306: LD_VAR 0 5
39310: PUSH
39311: LD_INT 1
39313: MINUS
39314: PPUSH
39315: LD_VAR 0 6
39319: PPUSH
39320: CALL_OW 1
39324: ST_TO_ADDR
// end ;
39325: GO 39242
39327: POP
39328: POP
// result := s_arr [ 1 ] ;
39329: LD_ADDR_VAR 0 4
39333: PUSH
39334: LD_VAR 0 7
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: ST_TO_ADDR
// end ; end ;
39343: LD_VAR 0 4
39347: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39348: LD_INT 0
39350: PPUSH
39351: PPUSH
// if not list then
39352: LD_VAR 0 1
39356: NOT
39357: IFFALSE 39361
// exit ;
39359: GO 39452
// i := list [ pos1 ] ;
39361: LD_ADDR_VAR 0 5
39365: PUSH
39366: LD_VAR 0 1
39370: PUSH
39371: LD_VAR 0 2
39375: ARRAY
39376: ST_TO_ADDR
// if not i then
39377: LD_VAR 0 5
39381: NOT
39382: IFFALSE 39386
// exit ;
39384: GO 39452
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39386: LD_ADDR_VAR 0 1
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: LD_VAR 0 2
39400: PPUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_VAR 0 3
39410: ARRAY
39411: PPUSH
39412: CALL_OW 1
39416: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39417: LD_ADDR_VAR 0 1
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: LD_VAR 0 3
39431: PPUSH
39432: LD_VAR 0 5
39436: PPUSH
39437: CALL_OW 1
39441: ST_TO_ADDR
// result := list ;
39442: LD_ADDR_VAR 0 4
39446: PUSH
39447: LD_VAR 0 1
39451: ST_TO_ADDR
// end ;
39452: LD_VAR 0 4
39456: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39457: LD_INT 0
39459: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39460: LD_ADDR_VAR 0 5
39464: PUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 250
39474: PPUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 251
39484: PPUSH
39485: LD_VAR 0 2
39489: PPUSH
39490: LD_VAR 0 3
39494: PPUSH
39495: LD_VAR 0 4
39499: PPUSH
39500: CALL 39882 0 5
39504: ST_TO_ADDR
// end ;
39505: LD_VAR 0 5
39509: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39510: LD_INT 0
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
// if not list or not unit then
39516: LD_VAR 0 2
39520: NOT
39521: IFTRUE 39530
39523: PUSH
39524: LD_VAR 0 1
39528: NOT
39529: OR
39530: IFFALSE 39534
// exit ;
39532: GO 39877
// result := [ ] ;
39534: LD_ADDR_VAR 0 5
39538: PUSH
39539: EMPTY
39540: ST_TO_ADDR
// for i in list do
39541: LD_ADDR_VAR 0 6
39545: PUSH
39546: LD_VAR 0 2
39550: PUSH
39551: FOR_IN
39552: IFFALSE 39770
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39554: LD_ADDR_VAR 0 8
39558: PUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: LD_VAR 0 6
39568: PUSH
39569: LD_INT 1
39571: ARRAY
39572: PPUSH
39573: LD_VAR 0 6
39577: PUSH
39578: LD_INT 2
39580: ARRAY
39581: PPUSH
39582: CALL_OW 297
39586: ST_TO_ADDR
// if not Count ( result ) then
39587: LD_VAR 0 5
39591: PPUSH
39592: CALL 36104 0 1
39596: NOT
39597: IFFALSE 39630
// begin result := Join ( result , [ i , tmp ] ) ;
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_VAR 0 5
39608: PPUSH
39609: LD_VAR 0 6
39613: PUSH
39614: LD_VAR 0 8
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PPUSH
39623: CALL 72080 0 2
39627: ST_TO_ADDR
// continue ;
39628: GO 39551
// end ; if result [ result ] [ 2 ] <= tmp then
39630: LD_VAR 0 5
39634: PUSH
39635: LD_VAR 0 5
39639: ARRAY
39640: PUSH
39641: LD_INT 2
39643: ARRAY
39644: PUSH
39645: LD_VAR 0 8
39649: LESSEQUAL
39650: IFFALSE 39683
// result := Join ( result , [ i , tmp ] ) else
39652: LD_ADDR_VAR 0 5
39656: PUSH
39657: LD_VAR 0 5
39661: PPUSH
39662: LD_VAR 0 6
39666: PUSH
39667: LD_VAR 0 8
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PPUSH
39676: CALL 72080 0 2
39680: ST_TO_ADDR
39681: GO 39768
// begin for j := 1 to Count ( result ) do
39683: LD_ADDR_VAR 0 7
39687: PUSH
39688: DOUBLE
39689: LD_INT 1
39691: DEC
39692: ST_TO_ADDR
39693: LD_VAR 0 5
39697: PPUSH
39698: CALL 36104 0 1
39702: PUSH
39703: FOR_TO
39704: IFFALSE 39766
// begin if tmp < result [ j ] [ 2 ] then
39706: LD_VAR 0 8
39710: PUSH
39711: LD_VAR 0 5
39715: PUSH
39716: LD_VAR 0 7
39720: ARRAY
39721: PUSH
39722: LD_INT 2
39724: ARRAY
39725: LESS
39726: IFFALSE 39764
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39728: LD_ADDR_VAR 0 5
39732: PUSH
39733: LD_VAR 0 5
39737: PPUSH
39738: LD_VAR 0 7
39742: PPUSH
39743: LD_VAR 0 6
39747: PUSH
39748: LD_VAR 0 8
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PPUSH
39757: CALL_OW 2
39761: ST_TO_ADDR
// break ;
39762: GO 39766
// end ; end ;
39764: GO 39703
39766: POP
39767: POP
// end ; end ;
39768: GO 39551
39770: POP
39771: POP
// if result and not asc then
39772: LD_VAR 0 5
39776: IFFALSE 39785
39778: PUSH
39779: LD_VAR 0 3
39783: NOT
39784: AND
39785: IFFALSE 39802
// result := ReverseArray ( result ) ;
39787: LD_ADDR_VAR 0 5
39791: PUSH
39792: LD_VAR 0 5
39796: PPUSH
39797: CALL 67160 0 1
39801: ST_TO_ADDR
// tmp := [ ] ;
39802: LD_ADDR_VAR 0 8
39806: PUSH
39807: EMPTY
39808: ST_TO_ADDR
// if mode then
39809: LD_VAR 0 4
39813: IFFALSE 39877
// begin for i := 1 to result do
39815: LD_ADDR_VAR 0 6
39819: PUSH
39820: DOUBLE
39821: LD_INT 1
39823: DEC
39824: ST_TO_ADDR
39825: LD_VAR 0 5
39829: PUSH
39830: FOR_TO
39831: IFFALSE 39865
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39833: LD_ADDR_VAR 0 8
39837: PUSH
39838: LD_VAR 0 8
39842: PPUSH
39843: LD_VAR 0 5
39847: PUSH
39848: LD_VAR 0 6
39852: ARRAY
39853: PUSH
39854: LD_INT 1
39856: ARRAY
39857: PPUSH
39858: CALL 72080 0 2
39862: ST_TO_ADDR
39863: GO 39830
39865: POP
39866: POP
// result := tmp ;
39867: LD_ADDR_VAR 0 5
39871: PUSH
39872: LD_VAR 0 8
39876: ST_TO_ADDR
// end ; end ;
39877: LD_VAR 0 5
39881: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39882: LD_INT 0
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
// if not list then
39888: LD_VAR 0 3
39892: NOT
39893: IFFALSE 39897
// exit ;
39895: GO 40287
// result := [ ] ;
39897: LD_ADDR_VAR 0 6
39901: PUSH
39902: EMPTY
39903: ST_TO_ADDR
// for i in list do
39904: LD_ADDR_VAR 0 7
39908: PUSH
39909: LD_VAR 0 3
39913: PUSH
39914: FOR_IN
39915: IFFALSE 40117
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39917: LD_ADDR_VAR 0 9
39921: PUSH
39922: LD_VAR 0 7
39926: PPUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: LD_VAR 0 2
39936: PPUSH
39937: CALL_OW 297
39941: ST_TO_ADDR
// if not result then
39942: LD_VAR 0 6
39946: NOT
39947: IFFALSE 39973
// result := [ [ i , tmp ] ] else
39949: LD_ADDR_VAR 0 6
39953: PUSH
39954: LD_VAR 0 7
39958: PUSH
39959: LD_VAR 0 9
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: EMPTY
39969: LIST
39970: ST_TO_ADDR
39971: GO 40115
// begin if result [ result ] [ 2 ] <= tmp then
39973: LD_VAR 0 6
39977: PUSH
39978: LD_VAR 0 6
39982: ARRAY
39983: PUSH
39984: LD_INT 2
39986: ARRAY
39987: PUSH
39988: LD_VAR 0 9
39992: LESSEQUAL
39993: IFFALSE 40035
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39995: LD_ADDR_VAR 0 6
39999: PUSH
40000: LD_VAR 0 6
40004: PPUSH
40005: LD_VAR 0 6
40009: PUSH
40010: LD_INT 1
40012: PLUS
40013: PPUSH
40014: LD_VAR 0 7
40018: PUSH
40019: LD_VAR 0 9
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PPUSH
40028: CALL_OW 2
40032: ST_TO_ADDR
40033: GO 40115
// for j := 1 to result do
40035: LD_ADDR_VAR 0 8
40039: PUSH
40040: DOUBLE
40041: LD_INT 1
40043: DEC
40044: ST_TO_ADDR
40045: LD_VAR 0 6
40049: PUSH
40050: FOR_TO
40051: IFFALSE 40113
// begin if tmp < result [ j ] [ 2 ] then
40053: LD_VAR 0 9
40057: PUSH
40058: LD_VAR 0 6
40062: PUSH
40063: LD_VAR 0 8
40067: ARRAY
40068: PUSH
40069: LD_INT 2
40071: ARRAY
40072: LESS
40073: IFFALSE 40111
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40075: LD_ADDR_VAR 0 6
40079: PUSH
40080: LD_VAR 0 6
40084: PPUSH
40085: LD_VAR 0 8
40089: PPUSH
40090: LD_VAR 0 7
40094: PUSH
40095: LD_VAR 0 9
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PPUSH
40104: CALL_OW 2
40108: ST_TO_ADDR
// break ;
40109: GO 40113
// end ; end ;
40111: GO 40050
40113: POP
40114: POP
// end ; end ;
40115: GO 39914
40117: POP
40118: POP
// if result and not asc then
40119: LD_VAR 0 6
40123: IFFALSE 40132
40125: PUSH
40126: LD_VAR 0 4
40130: NOT
40131: AND
40132: IFFALSE 40207
// begin tmp := result ;
40134: LD_ADDR_VAR 0 9
40138: PUSH
40139: LD_VAR 0 6
40143: ST_TO_ADDR
// for i = tmp downto 1 do
40144: LD_ADDR_VAR 0 7
40148: PUSH
40149: DOUBLE
40150: LD_VAR 0 9
40154: INC
40155: ST_TO_ADDR
40156: LD_INT 1
40158: PUSH
40159: FOR_DOWNTO
40160: IFFALSE 40205
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40162: LD_ADDR_VAR 0 6
40166: PUSH
40167: LD_VAR 0 6
40171: PPUSH
40172: LD_VAR 0 9
40176: PUSH
40177: LD_VAR 0 7
40181: MINUS
40182: PUSH
40183: LD_INT 1
40185: PLUS
40186: PPUSH
40187: LD_VAR 0 9
40191: PUSH
40192: LD_VAR 0 7
40196: ARRAY
40197: PPUSH
40198: CALL_OW 1
40202: ST_TO_ADDR
40203: GO 40159
40205: POP
40206: POP
// end ; tmp := [ ] ;
40207: LD_ADDR_VAR 0 9
40211: PUSH
40212: EMPTY
40213: ST_TO_ADDR
// if mode then
40214: LD_VAR 0 5
40218: IFFALSE 40287
// begin for i = 1 to result do
40220: LD_ADDR_VAR 0 7
40224: PUSH
40225: DOUBLE
40226: LD_INT 1
40228: DEC
40229: ST_TO_ADDR
40230: LD_VAR 0 6
40234: PUSH
40235: FOR_TO
40236: IFFALSE 40275
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40238: LD_ADDR_VAR 0 9
40242: PUSH
40243: LD_VAR 0 9
40247: PPUSH
40248: LD_VAR 0 7
40252: PPUSH
40253: LD_VAR 0 6
40257: PUSH
40258: LD_VAR 0 7
40262: ARRAY
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: PPUSH
40268: CALL_OW 1
40272: ST_TO_ADDR
40273: GO 40235
40275: POP
40276: POP
// result := tmp ;
40277: LD_ADDR_VAR 0 6
40281: PUSH
40282: LD_VAR 0 9
40286: ST_TO_ADDR
// end ; end ;
40287: LD_VAR 0 6
40291: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40292: LD_INT 0
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40300: LD_ADDR_VAR 0 5
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: ST_TO_ADDR
// if not x or not y then
40322: LD_VAR 0 2
40326: NOT
40327: IFTRUE 40336
40329: PUSH
40330: LD_VAR 0 3
40334: NOT
40335: OR
40336: IFFALSE 40340
// exit ;
40338: GO 41996
// if not range then
40340: LD_VAR 0 4
40344: NOT
40345: IFFALSE 40355
// range := 10 ;
40347: LD_ADDR_VAR 0 4
40351: PUSH
40352: LD_INT 10
40354: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40355: LD_ADDR_VAR 0 8
40359: PUSH
40360: LD_INT 81
40362: PUSH
40363: LD_VAR 0 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 92
40374: PUSH
40375: LD_VAR 0 2
40379: PUSH
40380: LD_VAR 0 3
40384: PUSH
40385: LD_VAR 0 4
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 21
40401: PUSH
40402: LD_INT 3
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: PPUSH
40418: CALL_OW 69
40422: ST_TO_ADDR
// if not tmp then
40423: LD_VAR 0 8
40427: NOT
40428: IFFALSE 40432
// exit ;
40430: GO 41996
// for i in tmp do
40432: LD_ADDR_VAR 0 6
40436: PUSH
40437: LD_VAR 0 8
40441: PUSH
40442: FOR_IN
40443: IFFALSE 41971
// begin points := [ 0 , 0 , 0 ] ;
40445: LD_ADDR_VAR 0 9
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: ST_TO_ADDR
// bpoints := 1 ;
40464: LD_ADDR_VAR 0 10
40468: PUSH
40469: LD_INT 1
40471: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40472: LD_VAR 0 6
40476: PPUSH
40477: CALL_OW 247
40481: PUSH
40482: LD_INT 1
40484: DOUBLE
40485: EQUAL
40486: IFTRUE 40490
40488: GO 41072
40490: POP
// begin if GetClass ( i ) = 1 then
40491: LD_VAR 0 6
40495: PPUSH
40496: CALL_OW 257
40500: PUSH
40501: LD_INT 1
40503: EQUAL
40504: IFFALSE 40525
// points := [ 10 , 5 , 3 ] ;
40506: LD_ADDR_VAR 0 9
40510: PUSH
40511: LD_INT 10
40513: PUSH
40514: LD_INT 5
40516: PUSH
40517: LD_INT 3
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40525: LD_VAR 0 6
40529: PPUSH
40530: CALL_OW 257
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: LD_INT 3
40540: PUSH
40541: LD_INT 4
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: IN
40549: IFFALSE 40570
// points := [ 3 , 2 , 1 ] ;
40551: LD_ADDR_VAR 0 9
40555: PUSH
40556: LD_INT 3
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40570: LD_VAR 0 6
40574: PPUSH
40575: CALL_OW 257
40579: PUSH
40580: LD_INT 5
40582: EQUAL
40583: IFFALSE 40604
// points := [ 130 , 5 , 2 ] ;
40585: LD_ADDR_VAR 0 9
40589: PUSH
40590: LD_INT 130
40592: PUSH
40593: LD_INT 5
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40604: LD_VAR 0 6
40608: PPUSH
40609: CALL_OW 257
40613: PUSH
40614: LD_INT 8
40616: EQUAL
40617: IFFALSE 40638
// points := [ 35 , 35 , 30 ] ;
40619: LD_ADDR_VAR 0 9
40623: PUSH
40624: LD_INT 35
40626: PUSH
40627: LD_INT 35
40629: PUSH
40630: LD_INT 30
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40638: LD_VAR 0 6
40642: PPUSH
40643: CALL_OW 257
40647: PUSH
40648: LD_INT 9
40650: EQUAL
40651: IFFALSE 40672
// points := [ 20 , 55 , 40 ] ;
40653: LD_ADDR_VAR 0 9
40657: PUSH
40658: LD_INT 20
40660: PUSH
40661: LD_INT 55
40663: PUSH
40664: LD_INT 40
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40672: LD_VAR 0 6
40676: PPUSH
40677: CALL_OW 257
40681: PUSH
40682: LD_INT 12
40684: PUSH
40685: LD_INT 16
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: IN
40692: IFFALSE 40713
// points := [ 5 , 3 , 2 ] ;
40694: LD_ADDR_VAR 0 9
40698: PUSH
40699: LD_INT 5
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40713: LD_VAR 0 6
40717: PPUSH
40718: CALL_OW 257
40722: PUSH
40723: LD_INT 17
40725: EQUAL
40726: IFFALSE 40747
// points := [ 100 , 50 , 75 ] ;
40728: LD_ADDR_VAR 0 9
40732: PUSH
40733: LD_INT 100
40735: PUSH
40736: LD_INT 50
40738: PUSH
40739: LD_INT 75
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40747: LD_VAR 0 6
40751: PPUSH
40752: CALL_OW 257
40756: PUSH
40757: LD_INT 15
40759: EQUAL
40760: IFFALSE 40781
// points := [ 10 , 5 , 3 ] ;
40762: LD_ADDR_VAR 0 9
40766: PUSH
40767: LD_INT 10
40769: PUSH
40770: LD_INT 5
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40781: LD_VAR 0 6
40785: PPUSH
40786: CALL_OW 257
40790: PUSH
40791: LD_INT 14
40793: EQUAL
40794: IFFALSE 40815
// points := [ 10 , 0 , 0 ] ;
40796: LD_ADDR_VAR 0 9
40800: PUSH
40801: LD_INT 10
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40815: LD_VAR 0 6
40819: PPUSH
40820: CALL_OW 257
40824: PUSH
40825: LD_INT 11
40827: EQUAL
40828: IFFALSE 40849
// points := [ 30 , 10 , 5 ] ;
40830: LD_ADDR_VAR 0 9
40834: PUSH
40835: LD_INT 30
40837: PUSH
40838: LD_INT 10
40840: PUSH
40841: LD_INT 5
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40849: LD_VAR 0 1
40853: PPUSH
40854: LD_INT 5
40856: PPUSH
40857: CALL_OW 321
40861: PUSH
40862: LD_INT 2
40864: EQUAL
40865: IFFALSE 40882
// bpoints := bpoints * 1.8 ;
40867: LD_ADDR_VAR 0 10
40871: PUSH
40872: LD_VAR 0 10
40876: PUSH
40877: LD_REAL  1.80000000000000E+0000
40880: MUL
40881: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40882: LD_VAR 0 6
40886: PPUSH
40887: CALL_OW 257
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 2
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: LD_INT 4
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: IN
40910: IFFALSE 40930
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: LD_INT 51
40920: PPUSH
40921: CALL_OW 321
40925: PUSH
40926: LD_INT 2
40928: EQUAL
40929: AND
40930: IFFALSE 40947
// bpoints := bpoints * 1.2 ;
40932: LD_ADDR_VAR 0 10
40936: PUSH
40937: LD_VAR 0 10
40941: PUSH
40942: LD_REAL  1.20000000000000E+0000
40945: MUL
40946: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40947: LD_VAR 0 6
40951: PPUSH
40952: CALL_OW 257
40956: PUSH
40957: LD_INT 5
40959: PUSH
40960: LD_INT 7
40962: PUSH
40963: LD_INT 9
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: IN
40971: IFFALSE 40991
40973: PUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: LD_INT 52
40981: PPUSH
40982: CALL_OW 321
40986: PUSH
40987: LD_INT 2
40989: EQUAL
40990: AND
40991: IFFALSE 41008
// bpoints := bpoints * 1.5 ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 10
41002: PUSH
41003: LD_REAL  1.50000000000000E+0000
41006: MUL
41007: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_INT 66
41015: PPUSH
41016: CALL_OW 321
41020: PUSH
41021: LD_INT 2
41023: EQUAL
41024: IFFALSE 41041
// bpoints := bpoints * 1.1 ;
41026: LD_ADDR_VAR 0 10
41030: PUSH
41031: LD_VAR 0 10
41035: PUSH
41036: LD_REAL  1.10000000000000E+0000
41039: MUL
41040: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41041: LD_ADDR_VAR 0 10
41045: PUSH
41046: LD_VAR 0 10
41050: PUSH
41051: LD_VAR 0 6
41055: PPUSH
41056: LD_INT 1
41058: PPUSH
41059: CALL_OW 259
41063: PUSH
41064: LD_REAL  1.15000000000000E+0000
41067: MUL
41068: MUL
41069: ST_TO_ADDR
// end ; unit_vehicle :
41070: GO 41900
41072: LD_INT 2
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41080
41078: GO 41888
41080: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41081: LD_VAR 0 6
41085: PPUSH
41086: CALL_OW 264
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 42
41096: PUSH
41097: LD_INT 24
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: IN
41105: IFFALSE 41126
// points := [ 25 , 5 , 3 ] ;
41107: LD_ADDR_VAR 0 9
41111: PUSH
41112: LD_INT 25
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41126: LD_VAR 0 6
41130: PPUSH
41131: CALL_OW 264
41135: PUSH
41136: LD_INT 4
41138: PUSH
41139: LD_INT 43
41141: PUSH
41142: LD_INT 25
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: IN
41150: IFFALSE 41171
// points := [ 40 , 15 , 5 ] ;
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_INT 40
41159: PUSH
41160: LD_INT 15
41162: PUSH
41163: LD_INT 5
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41171: LD_VAR 0 6
41175: PPUSH
41176: CALL_OW 264
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: LD_INT 23
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: IN
41191: IFFALSE 41212
// points := [ 7 , 25 , 8 ] ;
41193: LD_ADDR_VAR 0 9
41197: PUSH
41198: LD_INT 7
41200: PUSH
41201: LD_INT 25
41203: PUSH
41204: LD_INT 8
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41212: LD_VAR 0 6
41216: PPUSH
41217: CALL_OW 264
41221: PUSH
41222: LD_INT 5
41224: PUSH
41225: LD_INT 27
41227: PUSH
41228: LD_INT 44
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: IN
41236: IFFALSE 41257
// points := [ 14 , 50 , 16 ] ;
41238: LD_ADDR_VAR 0 9
41242: PUSH
41243: LD_INT 14
41245: PUSH
41246: LD_INT 50
41248: PUSH
41249: LD_INT 16
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41257: LD_VAR 0 6
41261: PPUSH
41262: CALL_OW 264
41266: PUSH
41267: LD_INT 6
41269: PUSH
41270: LD_INT 46
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: IN
41277: IFFALSE 41298
// points := [ 32 , 120 , 70 ] ;
41279: LD_ADDR_VAR 0 9
41283: PUSH
41284: LD_INT 32
41286: PUSH
41287: LD_INT 120
41289: PUSH
41290: LD_INT 70
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41298: LD_VAR 0 6
41302: PPUSH
41303: CALL_OW 264
41307: PUSH
41308: LD_INT 7
41310: PUSH
41311: LD_INT 28
41313: PUSH
41314: LD_INT 45
41316: PUSH
41317: LD_INT 92
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: IN
41326: IFFALSE 41347
// points := [ 35 , 20 , 45 ] ;
41328: LD_ADDR_VAR 0 9
41332: PUSH
41333: LD_INT 35
41335: PUSH
41336: LD_INT 20
41338: PUSH
41339: LD_INT 45
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41347: LD_VAR 0 6
41351: PPUSH
41352: CALL_OW 264
41356: PUSH
41357: LD_INT 47
41359: PUSH
41360: EMPTY
41361: LIST
41362: IN
41363: IFFALSE 41384
// points := [ 67 , 45 , 75 ] ;
41365: LD_ADDR_VAR 0 9
41369: PUSH
41370: LD_INT 67
41372: PUSH
41373: LD_INT 45
41375: PUSH
41376: LD_INT 75
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41384: LD_VAR 0 6
41388: PPUSH
41389: CALL_OW 264
41393: PUSH
41394: LD_INT 26
41396: PUSH
41397: EMPTY
41398: LIST
41399: IN
41400: IFFALSE 41421
// points := [ 120 , 30 , 80 ] ;
41402: LD_ADDR_VAR 0 9
41406: PUSH
41407: LD_INT 120
41409: PUSH
41410: LD_INT 30
41412: PUSH
41413: LD_INT 80
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41421: LD_VAR 0 6
41425: PPUSH
41426: CALL_OW 264
41430: PUSH
41431: LD_INT 22
41433: PUSH
41434: EMPTY
41435: LIST
41436: IN
41437: IFFALSE 41458
// points := [ 40 , 1 , 1 ] ;
41439: LD_ADDR_VAR 0 9
41443: PUSH
41444: LD_INT 40
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41458: LD_VAR 0 6
41462: PPUSH
41463: CALL_OW 264
41467: PUSH
41468: LD_INT 29
41470: PUSH
41471: EMPTY
41472: LIST
41473: IN
41474: IFFALSE 41495
// points := [ 70 , 200 , 400 ] ;
41476: LD_ADDR_VAR 0 9
41480: PUSH
41481: LD_INT 70
41483: PUSH
41484: LD_INT 200
41486: PUSH
41487: LD_INT 400
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41495: LD_VAR 0 6
41499: PPUSH
41500: CALL_OW 264
41504: PUSH
41505: LD_INT 14
41507: PUSH
41508: LD_INT 53
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: IN
41515: IFFALSE 41536
// points := [ 40 , 10 , 20 ] ;
41517: LD_ADDR_VAR 0 9
41521: PUSH
41522: LD_INT 40
41524: PUSH
41525: LD_INT 10
41527: PUSH
41528: LD_INT 20
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41536: LD_VAR 0 6
41540: PPUSH
41541: CALL_OW 264
41545: PUSH
41546: LD_INT 9
41548: PUSH
41549: EMPTY
41550: LIST
41551: IN
41552: IFFALSE 41573
// points := [ 5 , 70 , 20 ] ;
41554: LD_ADDR_VAR 0 9
41558: PUSH
41559: LD_INT 5
41561: PUSH
41562: LD_INT 70
41564: PUSH
41565: LD_INT 20
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41573: LD_VAR 0 6
41577: PPUSH
41578: CALL_OW 264
41582: PUSH
41583: LD_INT 10
41585: PUSH
41586: EMPTY
41587: LIST
41588: IN
41589: IFFALSE 41610
// points := [ 35 , 110 , 70 ] ;
41591: LD_ADDR_VAR 0 9
41595: PUSH
41596: LD_INT 35
41598: PUSH
41599: LD_INT 110
41601: PUSH
41602: LD_INT 70
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41610: LD_VAR 0 6
41614: PPUSH
41615: CALL_OW 265
41619: PUSH
41620: LD_INT 25
41622: EQUAL
41623: IFFALSE 41644
// points := [ 80 , 65 , 100 ] ;
41625: LD_ADDR_VAR 0 9
41629: PUSH
41630: LD_INT 80
41632: PUSH
41633: LD_INT 65
41635: PUSH
41636: LD_INT 100
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41644: LD_VAR 0 6
41648: PPUSH
41649: CALL_OW 263
41653: PUSH
41654: LD_INT 1
41656: EQUAL
41657: IFFALSE 41692
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41659: LD_ADDR_VAR 0 10
41663: PUSH
41664: LD_VAR 0 10
41668: PUSH
41669: LD_VAR 0 6
41673: PPUSH
41674: CALL_OW 311
41678: PPUSH
41679: LD_INT 3
41681: PPUSH
41682: CALL_OW 259
41686: PUSH
41687: LD_INT 4
41689: MUL
41690: MUL
41691: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41692: LD_VAR 0 6
41696: PPUSH
41697: CALL_OW 263
41701: PUSH
41702: LD_INT 2
41704: EQUAL
41705: IFFALSE 41756
// begin j := IsControledBy ( i ) ;
41707: LD_ADDR_VAR 0 7
41711: PUSH
41712: LD_VAR 0 6
41716: PPUSH
41717: CALL_OW 312
41721: ST_TO_ADDR
// if j then
41722: LD_VAR 0 7
41726: IFFALSE 41756
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41728: LD_ADDR_VAR 0 10
41732: PUSH
41733: LD_VAR 0 10
41737: PUSH
41738: LD_VAR 0 7
41742: PPUSH
41743: LD_INT 3
41745: PPUSH
41746: CALL_OW 259
41750: PUSH
41751: LD_INT 3
41753: MUL
41754: MUL
41755: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41756: LD_VAR 0 6
41760: PPUSH
41761: CALL_OW 264
41765: PUSH
41766: LD_INT 5
41768: PUSH
41769: LD_INT 6
41771: PUSH
41772: LD_INT 46
41774: PUSH
41775: LD_INT 44
41777: PUSH
41778: LD_INT 47
41780: PUSH
41781: LD_INT 45
41783: PUSH
41784: LD_INT 28
41786: PUSH
41787: LD_INT 7
41789: PUSH
41790: LD_INT 27
41792: PUSH
41793: LD_INT 29
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: IN
41808: IFFALSE 41828
41810: PUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_INT 52
41818: PPUSH
41819: CALL_OW 321
41823: PUSH
41824: LD_INT 2
41826: EQUAL
41827: AND
41828: IFFALSE 41845
// bpoints := bpoints * 1.2 ;
41830: LD_ADDR_VAR 0 10
41834: PUSH
41835: LD_VAR 0 10
41839: PUSH
41840: LD_REAL  1.20000000000000E+0000
41843: MUL
41844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41845: LD_VAR 0 6
41849: PPUSH
41850: CALL_OW 264
41854: PUSH
41855: LD_INT 6
41857: PUSH
41858: LD_INT 46
41860: PUSH
41861: LD_INT 47
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: IN
41869: IFFALSE 41886
// bpoints := bpoints * 1.2 ;
41871: LD_ADDR_VAR 0 10
41875: PUSH
41876: LD_VAR 0 10
41880: PUSH
41881: LD_REAL  1.20000000000000E+0000
41884: MUL
41885: ST_TO_ADDR
// end ; unit_building :
41886: GO 41900
41888: LD_INT 3
41890: DOUBLE
41891: EQUAL
41892: IFTRUE 41896
41894: GO 41899
41896: POP
// ; end ;
41897: GO 41900
41899: POP
// for j = 1 to 3 do
41900: LD_ADDR_VAR 0 7
41904: PUSH
41905: DOUBLE
41906: LD_INT 1
41908: DEC
41909: ST_TO_ADDR
41910: LD_INT 3
41912: PUSH
41913: FOR_TO
41914: IFFALSE 41967
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_VAR 0 5
41925: PPUSH
41926: LD_VAR 0 7
41930: PPUSH
41931: LD_VAR 0 5
41935: PUSH
41936: LD_VAR 0 7
41940: ARRAY
41941: PUSH
41942: LD_VAR 0 9
41946: PUSH
41947: LD_VAR 0 7
41951: ARRAY
41952: PUSH
41953: LD_VAR 0 10
41957: MUL
41958: PLUS
41959: PPUSH
41960: CALL_OW 1
41964: ST_TO_ADDR
41965: GO 41913
41967: POP
41968: POP
// end ;
41969: GO 40442
41971: POP
41972: POP
// result := Replace ( result , 4 , tmp ) ;
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_VAR 0 5
41982: PPUSH
41983: LD_INT 4
41985: PPUSH
41986: LD_VAR 0 8
41990: PPUSH
41991: CALL_OW 1
41995: ST_TO_ADDR
// end ;
41996: LD_VAR 0 5
42000: RET
// export function DangerAtRange ( unit , range ) ; begin
42001: LD_INT 0
42003: PPUSH
// if not unit then
42004: LD_VAR 0 1
42008: NOT
42009: IFFALSE 42013
// exit ;
42011: GO 42058
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42013: LD_ADDR_VAR 0 3
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: CALL_OW 255
42027: PPUSH
42028: LD_VAR 0 1
42032: PPUSH
42033: CALL_OW 250
42037: PPUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: CALL_OW 251
42047: PPUSH
42048: LD_VAR 0 2
42052: PPUSH
42053: CALL 40292 0 4
42057: ST_TO_ADDR
// end ;
42058: LD_VAR 0 3
42062: RET
// export function DangerInArea ( side , area ) ; begin
42063: LD_INT 0
42065: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_VAR 0 2
42075: PPUSH
42076: LD_INT 81
42078: PUSH
42079: LD_VAR 0 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PPUSH
42088: CALL_OW 70
42092: ST_TO_ADDR
// end ;
42093: LD_VAR 0 3
42097: RET
// export function IsExtension ( b ) ; begin
42098: LD_INT 0
42100: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42101: LD_ADDR_VAR 0 2
42105: PUSH
42106: LD_VAR 0 1
42110: PUSH
42111: LD_INT 23
42113: PUSH
42114: LD_INT 20
42116: PUSH
42117: LD_INT 22
42119: PUSH
42120: LD_INT 17
42122: PUSH
42123: LD_INT 24
42125: PUSH
42126: LD_INT 21
42128: PUSH
42129: LD_INT 19
42131: PUSH
42132: LD_INT 16
42134: PUSH
42135: LD_INT 25
42137: PUSH
42138: LD_INT 18
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: IN
42153: ST_TO_ADDR
// end ;
42154: LD_VAR 0 2
42158: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42159: LD_INT 0
42161: PPUSH
42162: PPUSH
42163: PPUSH
// result := [ ] ;
42164: LD_ADDR_VAR 0 4
42168: PUSH
42169: EMPTY
42170: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42171: LD_ADDR_VAR 0 5
42175: PUSH
42176: LD_VAR 0 2
42180: PPUSH
42181: LD_INT 21
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PPUSH
42191: CALL_OW 70
42195: ST_TO_ADDR
// if not tmp then
42196: LD_VAR 0 5
42200: NOT
42201: IFFALSE 42205
// exit ;
42203: GO 42269
// if checkLink then
42205: LD_VAR 0 3
42209: IFFALSE 42259
// begin for i in tmp do
42211: LD_ADDR_VAR 0 6
42215: PUSH
42216: LD_VAR 0 5
42220: PUSH
42221: FOR_IN
42222: IFFALSE 42257
// if GetBase ( i ) <> base then
42224: LD_VAR 0 6
42228: PPUSH
42229: CALL_OW 274
42233: PUSH
42234: LD_VAR 0 1
42238: NONEQUAL
42239: IFFALSE 42255
// ComLinkToBase ( base , i ) ;
42241: LD_VAR 0 1
42245: PPUSH
42246: LD_VAR 0 6
42250: PPUSH
42251: CALL_OW 169
42255: GO 42221
42257: POP
42258: POP
// end ; result := tmp ;
42259: LD_ADDR_VAR 0 4
42263: PUSH
42264: LD_VAR 0 5
42268: ST_TO_ADDR
// end ;
42269: LD_VAR 0 4
42273: RET
// export function ComComplete ( units , b ) ; var i ; begin
42274: LD_INT 0
42276: PPUSH
42277: PPUSH
// if not units then
42278: LD_VAR 0 1
42282: NOT
42283: IFFALSE 42287
// exit ;
42285: GO 42377
// for i in units do
42287: LD_ADDR_VAR 0 4
42291: PUSH
42292: LD_VAR 0 1
42296: PUSH
42297: FOR_IN
42298: IFFALSE 42375
// if BuildingStatus ( b ) = bs_build then
42300: LD_VAR 0 2
42304: PPUSH
42305: CALL_OW 461
42309: PUSH
42310: LD_INT 1
42312: EQUAL
42313: IFFALSE 42373
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42315: LD_VAR 0 4
42319: PPUSH
42320: LD_STRING h
42322: PUSH
42323: LD_VAR 0 2
42327: PPUSH
42328: CALL_OW 250
42332: PUSH
42333: LD_VAR 0 2
42337: PPUSH
42338: CALL_OW 251
42342: PUSH
42343: LD_VAR 0 2
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: PUSH
42366: EMPTY
42367: LIST
42368: PPUSH
42369: CALL_OW 446
42373: GO 42297
42375: POP
42376: POP
// end ;
42377: LD_VAR 0 3
42381: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42382: LD_INT 0
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42390: LD_VAR 0 1
42394: NOT
42395: IFTRUE 42412
42397: PUSH
42398: LD_VAR 0 1
42402: PPUSH
42403: CALL_OW 263
42407: PUSH
42408: LD_INT 2
42410: NONEQUAL
42411: OR
42412: IFFALSE 42416
// exit ;
42414: GO 42732
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42416: LD_ADDR_VAR 0 6
42420: PUSH
42421: LD_INT 22
42423: PUSH
42424: LD_VAR 0 1
42428: PPUSH
42429: CALL_OW 255
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 30
42443: PUSH
42444: LD_INT 36
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 34
42453: PUSH
42454: LD_INT 31
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PPUSH
42470: CALL_OW 69
42474: ST_TO_ADDR
// if not tmp then
42475: LD_VAR 0 6
42479: NOT
42480: IFFALSE 42484
// exit ;
42482: GO 42732
// result := [ ] ;
42484: LD_ADDR_VAR 0 2
42488: PUSH
42489: EMPTY
42490: ST_TO_ADDR
// for i in tmp do
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: LD_VAR 0 6
42500: PUSH
42501: FOR_IN
42502: IFFALSE 42573
// begin t := UnitsInside ( i ) ;
42504: LD_ADDR_VAR 0 4
42508: PUSH
42509: LD_VAR 0 3
42513: PPUSH
42514: CALL_OW 313
42518: ST_TO_ADDR
// if t then
42519: LD_VAR 0 4
42523: IFFALSE 42571
// for j in t do
42525: LD_ADDR_VAR 0 7
42529: PUSH
42530: LD_VAR 0 4
42534: PUSH
42535: FOR_IN
42536: IFFALSE 42569
// result := Replace ( result , result + 1 , j ) ;
42538: LD_ADDR_VAR 0 2
42542: PUSH
42543: LD_VAR 0 2
42547: PPUSH
42548: LD_VAR 0 2
42552: PUSH
42553: LD_INT 1
42555: PLUS
42556: PPUSH
42557: LD_VAR 0 7
42561: PPUSH
42562: CALL_OW 1
42566: ST_TO_ADDR
42567: GO 42535
42569: POP
42570: POP
// end ;
42571: GO 42501
42573: POP
42574: POP
// if not result then
42575: LD_VAR 0 2
42579: NOT
42580: IFFALSE 42584
// exit ;
42582: GO 42732
// mech := result [ 1 ] ;
42584: LD_ADDR_VAR 0 5
42588: PUSH
42589: LD_VAR 0 2
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: ST_TO_ADDR
// if result > 1 then
42598: LD_VAR 0 2
42602: PUSH
42603: LD_INT 1
42605: GREATER
42606: IFFALSE 42718
// begin for i = 2 to result do
42608: LD_ADDR_VAR 0 3
42612: PUSH
42613: DOUBLE
42614: LD_INT 2
42616: DEC
42617: ST_TO_ADDR
42618: LD_VAR 0 2
42622: PUSH
42623: FOR_TO
42624: IFFALSE 42716
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42626: LD_ADDR_VAR 0 4
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_VAR 0 3
42640: ARRAY
42641: PPUSH
42642: LD_INT 3
42644: PPUSH
42645: CALL_OW 259
42649: PUSH
42650: LD_VAR 0 2
42654: PUSH
42655: LD_VAR 0 3
42659: ARRAY
42660: PPUSH
42661: CALL_OW 432
42665: MINUS
42666: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42667: LD_VAR 0 4
42671: PUSH
42672: LD_VAR 0 5
42676: PPUSH
42677: LD_INT 3
42679: PPUSH
42680: CALL_OW 259
42684: PUSH
42685: LD_VAR 0 5
42689: PPUSH
42690: CALL_OW 432
42694: MINUS
42695: GREATEREQUAL
42696: IFFALSE 42714
// mech := result [ i ] ;
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_VAR 0 2
42707: PUSH
42708: LD_VAR 0 3
42712: ARRAY
42713: ST_TO_ADDR
// end ;
42714: GO 42623
42716: POP
42717: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42718: LD_VAR 0 1
42722: PPUSH
42723: LD_VAR 0 5
42727: PPUSH
42728: CALL_OW 135
// end ;
42732: LD_VAR 0 2
42736: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42737: LD_INT 0
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
// result := [ ] ;
42752: LD_ADDR_VAR 0 7
42756: PUSH
42757: EMPTY
42758: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42759: LD_VAR 0 1
42763: PPUSH
42764: CALL_OW 266
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: IN
42779: NOT
42780: IFFALSE 42784
// exit ;
42782: GO 44424
// if name then
42784: LD_VAR 0 3
42788: IFFALSE 42804
// SetBName ( base_dep , name ) ;
42790: LD_VAR 0 1
42794: PPUSH
42795: LD_VAR 0 3
42799: PPUSH
42800: CALL_OW 500
// base := GetBase ( base_dep ) ;
42804: LD_ADDR_VAR 0 15
42808: PUSH
42809: LD_VAR 0 1
42813: PPUSH
42814: CALL_OW 274
42818: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42819: LD_ADDR_VAR 0 16
42823: PUSH
42824: LD_VAR 0 1
42828: PPUSH
42829: CALL_OW 255
42833: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42834: LD_ADDR_VAR 0 17
42838: PUSH
42839: LD_VAR 0 1
42843: PPUSH
42844: CALL_OW 248
42848: ST_TO_ADDR
// if sources then
42849: LD_VAR 0 5
42853: IFFALSE 42900
// for i = 1 to 3 do
42855: LD_ADDR_VAR 0 8
42859: PUSH
42860: DOUBLE
42861: LD_INT 1
42863: DEC
42864: ST_TO_ADDR
42865: LD_INT 3
42867: PUSH
42868: FOR_TO
42869: IFFALSE 42898
// AddResourceType ( base , i , sources [ i ] ) ;
42871: LD_VAR 0 15
42875: PPUSH
42876: LD_VAR 0 8
42880: PPUSH
42881: LD_VAR 0 5
42885: PUSH
42886: LD_VAR 0 8
42890: ARRAY
42891: PPUSH
42892: CALL_OW 276
42896: GO 42868
42898: POP
42899: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42900: LD_ADDR_VAR 0 18
42904: PUSH
42905: LD_VAR 0 15
42909: PPUSH
42910: LD_VAR 0 2
42914: PPUSH
42915: LD_INT 1
42917: PPUSH
42918: CALL 42159 0 3
42922: ST_TO_ADDR
// InitHc ;
42923: CALL_OW 19
// InitUc ;
42927: CALL_OW 18
// uc_side := side ;
42931: LD_ADDR_OWVAR 20
42935: PUSH
42936: LD_VAR 0 16
42940: ST_TO_ADDR
// uc_nation := nation ;
42941: LD_ADDR_OWVAR 21
42945: PUSH
42946: LD_VAR 0 17
42950: ST_TO_ADDR
// if buildings then
42951: LD_VAR 0 18
42955: IFFALSE 44283
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42957: LD_ADDR_VAR 0 19
42961: PUSH
42962: LD_VAR 0 18
42966: PPUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 30
42972: PUSH
42973: LD_INT 29
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 30
42982: PUSH
42983: LD_INT 30
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: PPUSH
42995: CALL_OW 72
42999: ST_TO_ADDR
// if tmp then
43000: LD_VAR 0 19
43004: IFFALSE 43052
// for i in tmp do
43006: LD_ADDR_VAR 0 8
43010: PUSH
43011: LD_VAR 0 19
43015: PUSH
43016: FOR_IN
43017: IFFALSE 43050
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43019: LD_VAR 0 8
43023: PPUSH
43024: CALL_OW 250
43028: PPUSH
43029: LD_VAR 0 8
43033: PPUSH
43034: CALL_OW 251
43038: PPUSH
43039: LD_VAR 0 16
43043: PPUSH
43044: CALL_OW 441
43048: GO 43016
43050: POP
43051: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43052: LD_VAR 0 18
43056: PPUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 30
43062: PUSH
43063: LD_INT 32
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 30
43072: PUSH
43073: LD_INT 33
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: PPUSH
43085: CALL_OW 72
43089: IFFALSE 43177
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43091: LD_ADDR_VAR 0 8
43095: PUSH
43096: LD_VAR 0 18
43100: PPUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 30
43106: PUSH
43107: LD_INT 32
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 30
43116: PUSH
43117: LD_INT 33
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: PPUSH
43129: CALL_OW 72
43133: PUSH
43134: FOR_IN
43135: IFFALSE 43175
// begin if not GetBWeapon ( i ) then
43137: LD_VAR 0 8
43141: PPUSH
43142: CALL_OW 269
43146: NOT
43147: IFFALSE 43173
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43149: LD_VAR 0 8
43153: PPUSH
43154: LD_VAR 0 8
43158: PPUSH
43159: LD_VAR 0 2
43163: PPUSH
43164: CALL 44429 0 2
43168: PPUSH
43169: CALL_OW 431
// end ;
43173: GO 43134
43175: POP
43176: POP
// end ; for i = 1 to personel do
43177: LD_ADDR_VAR 0 8
43181: PUSH
43182: DOUBLE
43183: LD_INT 1
43185: DEC
43186: ST_TO_ADDR
43187: LD_VAR 0 6
43191: PUSH
43192: FOR_TO
43193: IFFALSE 44263
// begin if i > 4 then
43195: LD_VAR 0 8
43199: PUSH
43200: LD_INT 4
43202: GREATER
43203: IFFALSE 43207
// break ;
43205: GO 44263
// case i of 1 :
43207: LD_VAR 0 8
43211: PUSH
43212: LD_INT 1
43214: DOUBLE
43215: EQUAL
43216: IFTRUE 43220
43218: GO 43300
43220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43221: LD_ADDR_VAR 0 12
43225: PUSH
43226: LD_VAR 0 18
43230: PPUSH
43231: LD_INT 22
43233: PUSH
43234: LD_VAR 0 16
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 58
43245: PUSH
43246: EMPTY
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 30
43254: PUSH
43255: LD_INT 32
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 30
43264: PUSH
43265: LD_INT 4
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 30
43274: PUSH
43275: LD_INT 5
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: PPUSH
43293: CALL_OW 72
43297: ST_TO_ADDR
43298: GO 43522
43300: LD_INT 2
43302: DOUBLE
43303: EQUAL
43304: IFTRUE 43308
43306: GO 43370
43308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43309: LD_ADDR_VAR 0 12
43313: PUSH
43314: LD_VAR 0 18
43318: PPUSH
43319: LD_INT 22
43321: PUSH
43322: LD_VAR 0 16
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 30
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 30
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PPUSH
43363: CALL_OW 72
43367: ST_TO_ADDR
43368: GO 43522
43370: LD_INT 3
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43440
43378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43379: LD_ADDR_VAR 0 12
43383: PUSH
43384: LD_VAR 0 18
43388: PPUSH
43389: LD_INT 22
43391: PUSH
43392: LD_VAR 0 16
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 30
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 30
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PPUSH
43433: CALL_OW 72
43437: ST_TO_ADDR
43438: GO 43522
43440: LD_INT 4
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43448
43446: GO 43521
43448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43449: LD_ADDR_VAR 0 12
43453: PUSH
43454: LD_VAR 0 18
43458: PPUSH
43459: LD_INT 22
43461: PUSH
43462: LD_VAR 0 16
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 30
43476: PUSH
43477: LD_INT 6
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 30
43486: PUSH
43487: LD_INT 7
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 30
43496: PUSH
43497: LD_INT 8
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PPUSH
43514: CALL_OW 72
43518: ST_TO_ADDR
43519: GO 43522
43521: POP
// if i = 1 then
43522: LD_VAR 0 8
43526: PUSH
43527: LD_INT 1
43529: EQUAL
43530: IFFALSE 43641
// begin tmp := [ ] ;
43532: LD_ADDR_VAR 0 19
43536: PUSH
43537: EMPTY
43538: ST_TO_ADDR
// for j in f do
43539: LD_ADDR_VAR 0 9
43543: PUSH
43544: LD_VAR 0 12
43548: PUSH
43549: FOR_IN
43550: IFFALSE 43623
// if GetBType ( j ) = b_bunker then
43552: LD_VAR 0 9
43556: PPUSH
43557: CALL_OW 266
43561: PUSH
43562: LD_INT 32
43564: EQUAL
43565: IFFALSE 43592
// tmp := Insert ( tmp , 1 , j ) else
43567: LD_ADDR_VAR 0 19
43571: PUSH
43572: LD_VAR 0 19
43576: PPUSH
43577: LD_INT 1
43579: PPUSH
43580: LD_VAR 0 9
43584: PPUSH
43585: CALL_OW 2
43589: ST_TO_ADDR
43590: GO 43621
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43592: LD_ADDR_VAR 0 19
43596: PUSH
43597: LD_VAR 0 19
43601: PPUSH
43602: LD_VAR 0 19
43606: PUSH
43607: LD_INT 1
43609: PLUS
43610: PPUSH
43611: LD_VAR 0 9
43615: PPUSH
43616: CALL_OW 2
43620: ST_TO_ADDR
43621: GO 43549
43623: POP
43624: POP
// if tmp then
43625: LD_VAR 0 19
43629: IFFALSE 43641
// f := tmp ;
43631: LD_ADDR_VAR 0 12
43635: PUSH
43636: LD_VAR 0 19
43640: ST_TO_ADDR
// end ; x := personel [ i ] ;
43641: LD_ADDR_VAR 0 13
43645: PUSH
43646: LD_VAR 0 6
43650: PUSH
43651: LD_VAR 0 8
43655: ARRAY
43656: ST_TO_ADDR
// if x = - 1 then
43657: LD_VAR 0 13
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: EQUAL
43666: IFFALSE 43877
// begin for j in f do
43668: LD_ADDR_VAR 0 9
43672: PUSH
43673: LD_VAR 0 12
43677: PUSH
43678: FOR_IN
43679: IFFALSE 43873
// repeat InitHc ;
43681: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43685: LD_VAR 0 9
43689: PPUSH
43690: CALL_OW 266
43694: PUSH
43695: LD_INT 5
43697: EQUAL
43698: IFFALSE 43768
// begin if UnitsInside ( j ) < 3 then
43700: LD_VAR 0 9
43704: PPUSH
43705: CALL_OW 313
43709: PUSH
43710: LD_INT 3
43712: LESS
43713: IFFALSE 43749
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43715: LD_INT 0
43717: PPUSH
43718: LD_INT 5
43720: PUSH
43721: LD_INT 8
43723: PUSH
43724: LD_INT 9
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: PUSH
43732: LD_VAR 0 17
43736: ARRAY
43737: PPUSH
43738: LD_VAR 0 4
43742: PPUSH
43743: CALL_OW 380
43747: GO 43766
// PrepareHuman ( false , i , skill ) ;
43749: LD_INT 0
43751: PPUSH
43752: LD_VAR 0 8
43756: PPUSH
43757: LD_VAR 0 4
43761: PPUSH
43762: CALL_OW 380
// end else
43766: GO 43785
// PrepareHuman ( false , i , skill ) ;
43768: LD_INT 0
43770: PPUSH
43771: LD_VAR 0 8
43775: PPUSH
43776: LD_VAR 0 4
43780: PPUSH
43781: CALL_OW 380
// un := CreateHuman ;
43785: LD_ADDR_VAR 0 14
43789: PUSH
43790: CALL_OW 44
43794: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43795: LD_ADDR_VAR 0 7
43799: PUSH
43800: LD_VAR 0 7
43804: PPUSH
43805: LD_INT 1
43807: PPUSH
43808: LD_VAR 0 14
43812: PPUSH
43813: CALL_OW 2
43817: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43818: LD_VAR 0 14
43822: PPUSH
43823: LD_VAR 0 9
43827: PPUSH
43828: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43832: LD_VAR 0 9
43836: PPUSH
43837: CALL_OW 313
43841: PUSH
43842: LD_INT 6
43844: EQUAL
43845: IFTRUE 43869
43847: PUSH
43848: LD_VAR 0 9
43852: PPUSH
43853: CALL_OW 266
43857: PUSH
43858: LD_INT 32
43860: PUSH
43861: LD_INT 31
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: IN
43868: OR
43869: IFFALSE 43681
43871: GO 43678
43873: POP
43874: POP
// end else
43875: GO 44261
// for j = 1 to x do
43877: LD_ADDR_VAR 0 9
43881: PUSH
43882: DOUBLE
43883: LD_INT 1
43885: DEC
43886: ST_TO_ADDR
43887: LD_VAR 0 13
43891: PUSH
43892: FOR_TO
43893: IFFALSE 44259
// begin InitHc ;
43895: CALL_OW 19
// if not f then
43899: LD_VAR 0 12
43903: NOT
43904: IFFALSE 43993
// begin PrepareHuman ( false , i , skill ) ;
43906: LD_INT 0
43908: PPUSH
43909: LD_VAR 0 8
43913: PPUSH
43914: LD_VAR 0 4
43918: PPUSH
43919: CALL_OW 380
// un := CreateHuman ;
43923: LD_ADDR_VAR 0 14
43927: PUSH
43928: CALL_OW 44
43932: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43933: LD_ADDR_VAR 0 7
43937: PUSH
43938: LD_VAR 0 7
43942: PPUSH
43943: LD_INT 1
43945: PPUSH
43946: LD_VAR 0 14
43950: PPUSH
43951: CALL_OW 2
43955: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43956: LD_VAR 0 14
43960: PPUSH
43961: LD_VAR 0 1
43965: PPUSH
43966: CALL_OW 250
43970: PPUSH
43971: LD_VAR 0 1
43975: PPUSH
43976: CALL_OW 251
43980: PPUSH
43981: LD_INT 10
43983: PPUSH
43984: LD_INT 0
43986: PPUSH
43987: CALL_OW 50
// continue ;
43991: GO 43892
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43993: LD_VAR 0 12
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: PPUSH
44002: CALL_OW 313
44006: IFFALSE 44034
44008: PUSH
44009: LD_VAR 0 12
44013: PUSH
44014: LD_INT 1
44016: ARRAY
44017: PPUSH
44018: CALL_OW 266
44022: PUSH
44023: LD_INT 32
44025: PUSH
44026: LD_INT 31
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: IN
44033: AND
44034: IFTRUE 44055
44036: PUSH
44037: LD_VAR 0 12
44041: PUSH
44042: LD_INT 1
44044: ARRAY
44045: PPUSH
44046: CALL_OW 313
44050: PUSH
44051: LD_INT 6
44053: EQUAL
44054: OR
44055: IFFALSE 44075
// f := Delete ( f , 1 ) ;
44057: LD_ADDR_VAR 0 12
44061: PUSH
44062: LD_VAR 0 12
44066: PPUSH
44067: LD_INT 1
44069: PPUSH
44070: CALL_OW 3
44074: ST_TO_ADDR
// if not f then
44075: LD_VAR 0 12
44079: NOT
44080: IFFALSE 44098
// begin x := x + 2 ;
44082: LD_ADDR_VAR 0 13
44086: PUSH
44087: LD_VAR 0 13
44091: PUSH
44092: LD_INT 2
44094: PLUS
44095: ST_TO_ADDR
// continue ;
44096: GO 43892
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44098: LD_VAR 0 12
44102: PUSH
44103: LD_INT 1
44105: ARRAY
44106: PPUSH
44107: CALL_OW 266
44111: PUSH
44112: LD_INT 5
44114: EQUAL
44115: IFFALSE 44189
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44117: LD_VAR 0 12
44121: PUSH
44122: LD_INT 1
44124: ARRAY
44125: PPUSH
44126: CALL_OW 313
44130: PUSH
44131: LD_INT 3
44133: LESS
44134: IFFALSE 44170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44136: LD_INT 0
44138: PPUSH
44139: LD_INT 5
44141: PUSH
44142: LD_INT 8
44144: PUSH
44145: LD_INT 9
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: PUSH
44153: LD_VAR 0 17
44157: ARRAY
44158: PPUSH
44159: LD_VAR 0 4
44163: PPUSH
44164: CALL_OW 380
44168: GO 44187
// PrepareHuman ( false , i , skill ) ;
44170: LD_INT 0
44172: PPUSH
44173: LD_VAR 0 8
44177: PPUSH
44178: LD_VAR 0 4
44182: PPUSH
44183: CALL_OW 380
// end else
44187: GO 44206
// PrepareHuman ( false , i , skill ) ;
44189: LD_INT 0
44191: PPUSH
44192: LD_VAR 0 8
44196: PPUSH
44197: LD_VAR 0 4
44201: PPUSH
44202: CALL_OW 380
// un := CreateHuman ;
44206: LD_ADDR_VAR 0 14
44210: PUSH
44211: CALL_OW 44
44215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44216: LD_ADDR_VAR 0 7
44220: PUSH
44221: LD_VAR 0 7
44225: PPUSH
44226: LD_INT 1
44228: PPUSH
44229: LD_VAR 0 14
44233: PPUSH
44234: CALL_OW 2
44238: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44239: LD_VAR 0 14
44243: PPUSH
44244: LD_VAR 0 12
44248: PUSH
44249: LD_INT 1
44251: ARRAY
44252: PPUSH
44253: CALL_OW 52
// end ;
44257: GO 43892
44259: POP
44260: POP
// end ;
44261: GO 43192
44263: POP
44264: POP
// result := result ^ buildings ;
44265: LD_ADDR_VAR 0 7
44269: PUSH
44270: LD_VAR 0 7
44274: PUSH
44275: LD_VAR 0 18
44279: ADD
44280: ST_TO_ADDR
// end else
44281: GO 44424
// begin for i = 1 to personel do
44283: LD_ADDR_VAR 0 8
44287: PUSH
44288: DOUBLE
44289: LD_INT 1
44291: DEC
44292: ST_TO_ADDR
44293: LD_VAR 0 6
44297: PUSH
44298: FOR_TO
44299: IFFALSE 44422
// begin if i > 4 then
44301: LD_VAR 0 8
44305: PUSH
44306: LD_INT 4
44308: GREATER
44309: IFFALSE 44313
// break ;
44311: GO 44422
// x := personel [ i ] ;
44313: LD_ADDR_VAR 0 13
44317: PUSH
44318: LD_VAR 0 6
44322: PUSH
44323: LD_VAR 0 8
44327: ARRAY
44328: ST_TO_ADDR
// if x = - 1 then
44329: LD_VAR 0 13
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: EQUAL
44338: IFFALSE 44342
// continue ;
44340: GO 44298
// PrepareHuman ( false , i , skill ) ;
44342: LD_INT 0
44344: PPUSH
44345: LD_VAR 0 8
44349: PPUSH
44350: LD_VAR 0 4
44354: PPUSH
44355: CALL_OW 380
// un := CreateHuman ;
44359: LD_ADDR_VAR 0 14
44363: PUSH
44364: CALL_OW 44
44368: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44369: LD_VAR 0 14
44373: PPUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 250
44383: PPUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 251
44393: PPUSH
44394: LD_INT 10
44396: PPUSH
44397: LD_INT 0
44399: PPUSH
44400: CALL_OW 50
// result := result ^ un ;
44404: LD_ADDR_VAR 0 7
44408: PUSH
44409: LD_VAR 0 7
44413: PUSH
44414: LD_VAR 0 14
44418: ADD
44419: ST_TO_ADDR
// end ;
44420: GO 44298
44422: POP
44423: POP
// end ; end ;
44424: LD_VAR 0 7
44428: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44429: LD_INT 0
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
// result := false ;
44447: LD_ADDR_VAR 0 3
44451: PUSH
44452: LD_INT 0
44454: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44455: LD_VAR 0 1
44459: NOT
44460: IFTRUE 44485
44462: PUSH
44463: LD_VAR 0 1
44467: PPUSH
44468: CALL_OW 266
44472: PUSH
44473: LD_INT 32
44475: PUSH
44476: LD_INT 33
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: IN
44483: NOT
44484: OR
44485: IFFALSE 44489
// exit ;
44487: GO 45624
// nat := GetNation ( tower ) ;
44489: LD_ADDR_VAR 0 12
44493: PUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 248
44503: ST_TO_ADDR
// side := GetSide ( tower ) ;
44504: LD_ADDR_VAR 0 16
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 255
44518: ST_TO_ADDR
// x := GetX ( tower ) ;
44519: LD_ADDR_VAR 0 10
44523: PUSH
44524: LD_VAR 0 1
44528: PPUSH
44529: CALL_OW 250
44533: ST_TO_ADDR
// y := GetY ( tower ) ;
44534: LD_ADDR_VAR 0 11
44538: PUSH
44539: LD_VAR 0 1
44543: PPUSH
44544: CALL_OW 251
44548: ST_TO_ADDR
// if not x or not y then
44549: LD_VAR 0 10
44553: NOT
44554: IFTRUE 44563
44556: PUSH
44557: LD_VAR 0 11
44561: NOT
44562: OR
44563: IFFALSE 44567
// exit ;
44565: GO 45624
// weapon := 0 ;
44567: LD_ADDR_VAR 0 18
44571: PUSH
44572: LD_INT 0
44574: ST_TO_ADDR
// fac_list := [ ] ;
44575: LD_ADDR_VAR 0 17
44579: PUSH
44580: EMPTY
44581: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44582: LD_ADDR_VAR 0 6
44586: PUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: CALL_OW 274
44596: PPUSH
44597: LD_VAR 0 2
44601: PPUSH
44602: LD_INT 0
44604: PPUSH
44605: CALL 42159 0 3
44609: PPUSH
44610: LD_INT 30
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PPUSH
44620: CALL_OW 72
44624: ST_TO_ADDR
// if not factories then
44625: LD_VAR 0 6
44629: NOT
44630: IFFALSE 44634
// exit ;
44632: GO 45624
// for i in factories do
44634: LD_ADDR_VAR 0 8
44638: PUSH
44639: LD_VAR 0 6
44643: PUSH
44644: FOR_IN
44645: IFFALSE 44670
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44647: LD_ADDR_VAR 0 17
44651: PUSH
44652: LD_VAR 0 17
44656: PUSH
44657: LD_VAR 0 8
44661: PPUSH
44662: CALL_OW 478
44666: UNION
44667: ST_TO_ADDR
44668: GO 44644
44670: POP
44671: POP
// if not fac_list then
44672: LD_VAR 0 17
44676: NOT
44677: IFFALSE 44681
// exit ;
44679: GO 45624
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44681: LD_ADDR_VAR 0 5
44685: PUSH
44686: LD_INT 4
44688: PUSH
44689: LD_INT 5
44691: PUSH
44692: LD_INT 9
44694: PUSH
44695: LD_INT 10
44697: PUSH
44698: LD_INT 6
44700: PUSH
44701: LD_INT 7
44703: PUSH
44704: LD_INT 11
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 27
44718: PUSH
44719: LD_INT 28
44721: PUSH
44722: LD_INT 26
44724: PUSH
44725: LD_INT 30
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 43
44736: PUSH
44737: LD_INT 44
44739: PUSH
44740: LD_INT 46
44742: PUSH
44743: LD_INT 45
44745: PUSH
44746: LD_INT 47
44748: PUSH
44749: LD_INT 49
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: PUSH
44765: LD_VAR 0 12
44769: ARRAY
44770: ST_TO_ADDR
// list := list isect fac_list ;
44771: LD_ADDR_VAR 0 5
44775: PUSH
44776: LD_VAR 0 5
44780: PUSH
44781: LD_VAR 0 17
44785: ISECT
44786: ST_TO_ADDR
// if not list then
44787: LD_VAR 0 5
44791: NOT
44792: IFFALSE 44796
// exit ;
44794: GO 45624
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44796: LD_VAR 0 12
44800: PUSH
44801: LD_INT 3
44803: EQUAL
44804: IFFALSE 44816
44806: PUSH
44807: LD_INT 49
44809: PUSH
44810: LD_VAR 0 5
44814: IN
44815: AND
44816: IFFALSE 44836
44818: PUSH
44819: LD_INT 31
44821: PPUSH
44822: LD_VAR 0 16
44826: PPUSH
44827: CALL_OW 321
44831: PUSH
44832: LD_INT 2
44834: EQUAL
44835: AND
44836: IFFALSE 44896
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44838: LD_INT 22
44840: PUSH
44841: LD_VAR 0 16
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 35
44852: PUSH
44853: LD_INT 49
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 91
44862: PUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_INT 10
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: PPUSH
44881: CALL_OW 69
44885: NOT
44886: IFFALSE 44896
// weapon := ru_time_lapser ;
44888: LD_ADDR_VAR 0 18
44892: PUSH
44893: LD_INT 49
44895: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44896: LD_VAR 0 12
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: IN
44911: IFFALSE 44935
44913: PUSH
44914: LD_INT 11
44916: PUSH
44917: LD_VAR 0 5
44921: IN
44922: IFTRUE 44934
44924: PUSH
44925: LD_INT 30
44927: PUSH
44928: LD_VAR 0 5
44932: IN
44933: OR
44934: AND
44935: IFFALSE 44955
44937: PUSH
44938: LD_INT 6
44940: PPUSH
44941: LD_VAR 0 16
44945: PPUSH
44946: CALL_OW 321
44950: PUSH
44951: LD_INT 2
44953: EQUAL
44954: AND
44955: IFFALSE 45122
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44957: LD_INT 22
44959: PUSH
44960: LD_VAR 0 16
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 35
44974: PUSH
44975: LD_INT 11
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 35
44984: PUSH
44985: LD_INT 30
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 91
44999: PUSH
45000: LD_VAR 0 1
45004: PUSH
45005: LD_INT 18
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: PPUSH
45018: CALL_OW 69
45022: NOT
45023: IFFALSE 45099
45025: PUSH
45026: LD_INT 22
45028: PUSH
45029: LD_VAR 0 16
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 30
45043: PUSH
45044: LD_INT 32
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 30
45053: PUSH
45054: LD_INT 33
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 91
45068: PUSH
45069: LD_VAR 0 1
45073: PUSH
45074: LD_INT 12
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: PPUSH
45090: CALL_OW 69
45094: PUSH
45095: LD_INT 2
45097: GREATER
45098: AND
45099: IFFALSE 45122
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45101: LD_ADDR_VAR 0 18
45105: PUSH
45106: LD_INT 11
45108: PUSH
45109: LD_INT 30
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_VAR 0 12
45120: ARRAY
45121: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45122: LD_VAR 0 18
45126: NOT
45127: IFFALSE 45147
45129: PUSH
45130: LD_INT 40
45132: PPUSH
45133: LD_VAR 0 16
45137: PPUSH
45138: CALL_OW 321
45142: PUSH
45143: LD_INT 2
45145: EQUAL
45146: AND
45147: IFFALSE 45183
45149: PUSH
45150: LD_INT 7
45152: PUSH
45153: LD_VAR 0 5
45157: IN
45158: IFTRUE 45170
45160: PUSH
45161: LD_INT 28
45163: PUSH
45164: LD_VAR 0 5
45168: IN
45169: OR
45170: IFTRUE 45182
45172: PUSH
45173: LD_INT 45
45175: PUSH
45176: LD_VAR 0 5
45180: IN
45181: OR
45182: AND
45183: IFFALSE 45437
// begin hex := GetHexInfo ( x , y ) ;
45185: LD_ADDR_VAR 0 4
45189: PUSH
45190: LD_VAR 0 10
45194: PPUSH
45195: LD_VAR 0 11
45199: PPUSH
45200: CALL_OW 546
45204: ST_TO_ADDR
// if hex [ 1 ] then
45205: LD_VAR 0 4
45209: PUSH
45210: LD_INT 1
45212: ARRAY
45213: IFFALSE 45217
// exit ;
45215: GO 45624
// height := hex [ 2 ] ;
45217: LD_ADDR_VAR 0 15
45221: PUSH
45222: LD_VAR 0 4
45226: PUSH
45227: LD_INT 2
45229: ARRAY
45230: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45231: LD_ADDR_VAR 0 14
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 5
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
// for i in tmp do
45254: LD_ADDR_VAR 0 8
45258: PUSH
45259: LD_VAR 0 14
45263: PUSH
45264: FOR_IN
45265: IFFALSE 45435
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_VAR 0 10
45276: PPUSH
45277: LD_VAR 0 8
45281: PPUSH
45282: LD_INT 5
45284: PPUSH
45285: CALL_OW 272
45289: PUSH
45290: LD_VAR 0 11
45294: PPUSH
45295: LD_VAR 0 8
45299: PPUSH
45300: LD_INT 5
45302: PPUSH
45303: CALL_OW 273
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45312: LD_VAR 0 9
45316: PUSH
45317: LD_INT 1
45319: ARRAY
45320: PPUSH
45321: LD_VAR 0 9
45325: PUSH
45326: LD_INT 2
45328: ARRAY
45329: PPUSH
45330: CALL_OW 488
45334: IFFALSE 45433
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45336: LD_ADDR_VAR 0 4
45340: PUSH
45341: LD_VAR 0 9
45345: PUSH
45346: LD_INT 1
45348: ARRAY
45349: PPUSH
45350: LD_VAR 0 9
45354: PUSH
45355: LD_INT 2
45357: ARRAY
45358: PPUSH
45359: CALL_OW 546
45363: ST_TO_ADDR
// if hex [ 1 ] then
45364: LD_VAR 0 4
45368: PUSH
45369: LD_INT 1
45371: ARRAY
45372: IFFALSE 45376
// continue ;
45374: GO 45264
// h := hex [ 2 ] ;
45376: LD_ADDR_VAR 0 13
45380: PUSH
45381: LD_VAR 0 4
45385: PUSH
45386: LD_INT 2
45388: ARRAY
45389: ST_TO_ADDR
// if h + 7 < height then
45390: LD_VAR 0 13
45394: PUSH
45395: LD_INT 7
45397: PLUS
45398: PUSH
45399: LD_VAR 0 15
45403: LESS
45404: IFFALSE 45433
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45406: LD_ADDR_VAR 0 18
45410: PUSH
45411: LD_INT 7
45413: PUSH
45414: LD_INT 28
45416: PUSH
45417: LD_INT 45
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: PUSH
45425: LD_VAR 0 12
45429: ARRAY
45430: ST_TO_ADDR
// break ;
45431: GO 45435
// end ; end ; end ;
45433: GO 45264
45435: POP
45436: POP
// end ; if not weapon then
45437: LD_VAR 0 18
45441: NOT
45442: IFFALSE 45502
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45444: LD_ADDR_VAR 0 5
45448: PUSH
45449: LD_VAR 0 5
45453: PUSH
45454: LD_INT 11
45456: PUSH
45457: LD_INT 30
45459: PUSH
45460: LD_INT 49
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: DIFF
45468: ST_TO_ADDR
// if not list then
45469: LD_VAR 0 5
45473: NOT
45474: IFFALSE 45478
// exit ;
45476: GO 45624
// weapon := list [ rand ( 1 , list ) ] ;
45478: LD_ADDR_VAR 0 18
45482: PUSH
45483: LD_VAR 0 5
45487: PUSH
45488: LD_INT 1
45490: PPUSH
45491: LD_VAR 0 5
45495: PPUSH
45496: CALL_OW 12
45500: ARRAY
45501: ST_TO_ADDR
// end ; if weapon then
45502: LD_VAR 0 18
45506: IFFALSE 45624
// begin tmp := CostOfWeapon ( weapon ) ;
45508: LD_ADDR_VAR 0 14
45512: PUSH
45513: LD_VAR 0 18
45517: PPUSH
45518: CALL_OW 451
45522: ST_TO_ADDR
// j := GetBase ( tower ) ;
45523: LD_ADDR_VAR 0 9
45527: PUSH
45528: LD_VAR 0 1
45532: PPUSH
45533: CALL_OW 274
45537: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45538: LD_VAR 0 9
45542: PPUSH
45543: LD_INT 1
45545: PPUSH
45546: CALL_OW 275
45550: PUSH
45551: LD_VAR 0 14
45555: PUSH
45556: LD_INT 1
45558: ARRAY
45559: GREATEREQUAL
45560: IFFALSE 45586
45562: PUSH
45563: LD_VAR 0 9
45567: PPUSH
45568: LD_INT 2
45570: PPUSH
45571: CALL_OW 275
45575: PUSH
45576: LD_VAR 0 14
45580: PUSH
45581: LD_INT 2
45583: ARRAY
45584: GREATEREQUAL
45585: AND
45586: IFFALSE 45612
45588: PUSH
45589: LD_VAR 0 9
45593: PPUSH
45594: LD_INT 3
45596: PPUSH
45597: CALL_OW 275
45601: PUSH
45602: LD_VAR 0 14
45606: PUSH
45607: LD_INT 3
45609: ARRAY
45610: GREATEREQUAL
45611: AND
45612: IFFALSE 45624
// result := weapon ;
45614: LD_ADDR_VAR 0 3
45618: PUSH
45619: LD_VAR 0 18
45623: ST_TO_ADDR
// end ; end ;
45624: LD_VAR 0 3
45628: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45629: LD_INT 0
45631: PPUSH
45632: PPUSH
// result := true ;
45633: LD_ADDR_VAR 0 3
45637: PUSH
45638: LD_INT 1
45640: ST_TO_ADDR
// if array1 = array2 then
45641: LD_VAR 0 1
45645: PUSH
45646: LD_VAR 0 2
45650: EQUAL
45651: IFFALSE 45711
// begin for i = 1 to array1 do
45653: LD_ADDR_VAR 0 4
45657: PUSH
45658: DOUBLE
45659: LD_INT 1
45661: DEC
45662: ST_TO_ADDR
45663: LD_VAR 0 1
45667: PUSH
45668: FOR_TO
45669: IFFALSE 45707
// if array1 [ i ] <> array2 [ i ] then
45671: LD_VAR 0 1
45675: PUSH
45676: LD_VAR 0 4
45680: ARRAY
45681: PUSH
45682: LD_VAR 0 2
45686: PUSH
45687: LD_VAR 0 4
45691: ARRAY
45692: NONEQUAL
45693: IFFALSE 45705
// begin result := false ;
45695: LD_ADDR_VAR 0 3
45699: PUSH
45700: LD_INT 0
45702: ST_TO_ADDR
// break ;
45703: GO 45707
// end ;
45705: GO 45668
45707: POP
45708: POP
// end else
45709: GO 45719
// result := false ;
45711: LD_ADDR_VAR 0 3
45715: PUSH
45716: LD_INT 0
45718: ST_TO_ADDR
// end ;
45719: LD_VAR 0 3
45723: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45724: LD_INT 0
45726: PPUSH
45727: PPUSH
// if not array1 or not array2 then
45728: LD_VAR 0 1
45732: NOT
45733: IFTRUE 45742
45735: PUSH
45736: LD_VAR 0 2
45740: NOT
45741: OR
45742: IFFALSE 45746
// exit ;
45744: GO 45810
// result := true ;
45746: LD_ADDR_VAR 0 3
45750: PUSH
45751: LD_INT 1
45753: ST_TO_ADDR
// for i = 1 to array1 do
45754: LD_ADDR_VAR 0 4
45758: PUSH
45759: DOUBLE
45760: LD_INT 1
45762: DEC
45763: ST_TO_ADDR
45764: LD_VAR 0 1
45768: PUSH
45769: FOR_TO
45770: IFFALSE 45808
// if array1 [ i ] <> array2 [ i ] then
45772: LD_VAR 0 1
45776: PUSH
45777: LD_VAR 0 4
45781: ARRAY
45782: PUSH
45783: LD_VAR 0 2
45787: PUSH
45788: LD_VAR 0 4
45792: ARRAY
45793: NONEQUAL
45794: IFFALSE 45806
// begin result := false ;
45796: LD_ADDR_VAR 0 3
45800: PUSH
45801: LD_INT 0
45803: ST_TO_ADDR
// break ;
45804: GO 45808
// end ;
45806: GO 45769
45808: POP
45809: POP
// end ;
45810: LD_VAR 0 3
45814: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45815: LD_INT 0
45817: PPUSH
45818: PPUSH
45819: PPUSH
// pom := GetBase ( fac ) ;
45820: LD_ADDR_VAR 0 5
45824: PUSH
45825: LD_VAR 0 1
45829: PPUSH
45830: CALL_OW 274
45834: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45835: LD_ADDR_VAR 0 4
45839: PUSH
45840: LD_VAR 0 2
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PPUSH
45849: LD_VAR 0 2
45853: PUSH
45854: LD_INT 2
45856: ARRAY
45857: PPUSH
45858: LD_VAR 0 2
45862: PUSH
45863: LD_INT 3
45865: ARRAY
45866: PPUSH
45867: LD_VAR 0 2
45871: PUSH
45872: LD_INT 4
45874: ARRAY
45875: PPUSH
45876: CALL_OW 449
45880: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_VAR 0 5
45890: PPUSH
45891: LD_INT 1
45893: PPUSH
45894: CALL_OW 275
45898: PUSH
45899: LD_VAR 0 4
45903: PUSH
45904: LD_INT 1
45906: ARRAY
45907: GREATEREQUAL
45908: IFFALSE 45934
45910: PUSH
45911: LD_VAR 0 5
45915: PPUSH
45916: LD_INT 2
45918: PPUSH
45919: CALL_OW 275
45923: PUSH
45924: LD_VAR 0 4
45928: PUSH
45929: LD_INT 2
45931: ARRAY
45932: GREATEREQUAL
45933: AND
45934: IFFALSE 45960
45936: PUSH
45937: LD_VAR 0 5
45941: PPUSH
45942: LD_INT 3
45944: PPUSH
45945: CALL_OW 275
45949: PUSH
45950: LD_VAR 0 4
45954: PUSH
45955: LD_INT 3
45957: ARRAY
45958: GREATEREQUAL
45959: AND
45960: ST_TO_ADDR
// end ;
45961: LD_VAR 0 3
45965: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45966: LD_INT 0
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
// pom := GetBase ( building ) ;
45972: LD_ADDR_VAR 0 3
45976: PUSH
45977: LD_VAR 0 1
45981: PPUSH
45982: CALL_OW 274
45986: ST_TO_ADDR
// if not pom then
45987: LD_VAR 0 3
45991: NOT
45992: IFFALSE 45996
// exit ;
45994: GO 46170
// btype := GetBType ( building ) ;
45996: LD_ADDR_VAR 0 5
46000: PUSH
46001: LD_VAR 0 1
46005: PPUSH
46006: CALL_OW 266
46010: ST_TO_ADDR
// if btype = b_armoury then
46011: LD_VAR 0 5
46015: PUSH
46016: LD_INT 4
46018: EQUAL
46019: IFFALSE 46029
// btype := b_barracks ;
46021: LD_ADDR_VAR 0 5
46025: PUSH
46026: LD_INT 5
46028: ST_TO_ADDR
// if btype = b_depot then
46029: LD_VAR 0 5
46033: PUSH
46034: LD_INT 0
46036: EQUAL
46037: IFFALSE 46047
// btype := b_warehouse ;
46039: LD_ADDR_VAR 0 5
46043: PUSH
46044: LD_INT 1
46046: ST_TO_ADDR
// if btype = b_workshop then
46047: LD_VAR 0 5
46051: PUSH
46052: LD_INT 2
46054: EQUAL
46055: IFFALSE 46065
// btype := b_factory ;
46057: LD_ADDR_VAR 0 5
46061: PUSH
46062: LD_INT 3
46064: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46065: LD_ADDR_VAR 0 4
46069: PUSH
46070: LD_VAR 0 5
46074: PPUSH
46075: LD_VAR 0 1
46079: PPUSH
46080: CALL_OW 248
46084: PPUSH
46085: CALL_OW 450
46089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46090: LD_ADDR_VAR 0 2
46094: PUSH
46095: LD_VAR 0 3
46099: PPUSH
46100: LD_INT 1
46102: PPUSH
46103: CALL_OW 275
46107: PUSH
46108: LD_VAR 0 4
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: GREATEREQUAL
46117: IFFALSE 46143
46119: PUSH
46120: LD_VAR 0 3
46124: PPUSH
46125: LD_INT 2
46127: PPUSH
46128: CALL_OW 275
46132: PUSH
46133: LD_VAR 0 4
46137: PUSH
46138: LD_INT 2
46140: ARRAY
46141: GREATEREQUAL
46142: AND
46143: IFFALSE 46169
46145: PUSH
46146: LD_VAR 0 3
46150: PPUSH
46151: LD_INT 3
46153: PPUSH
46154: CALL_OW 275
46158: PUSH
46159: LD_VAR 0 4
46163: PUSH
46164: LD_INT 3
46166: ARRAY
46167: GREATEREQUAL
46168: AND
46169: ST_TO_ADDR
// end ;
46170: LD_VAR 0 2
46174: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46175: LD_INT 0
46177: PPUSH
46178: PPUSH
46179: PPUSH
// pom := GetBase ( building ) ;
46180: LD_ADDR_VAR 0 4
46184: PUSH
46185: LD_VAR 0 1
46189: PPUSH
46190: CALL_OW 274
46194: ST_TO_ADDR
// if not pom then
46195: LD_VAR 0 4
46199: NOT
46200: IFFALSE 46204
// exit ;
46202: GO 46309
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46204: LD_ADDR_VAR 0 5
46208: PUSH
46209: LD_VAR 0 2
46213: PPUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: CALL_OW 248
46223: PPUSH
46224: CALL_OW 450
46228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46229: LD_ADDR_VAR 0 3
46233: PUSH
46234: LD_VAR 0 4
46238: PPUSH
46239: LD_INT 1
46241: PPUSH
46242: CALL_OW 275
46246: PUSH
46247: LD_VAR 0 5
46251: PUSH
46252: LD_INT 1
46254: ARRAY
46255: GREATEREQUAL
46256: IFFALSE 46282
46258: PUSH
46259: LD_VAR 0 4
46263: PPUSH
46264: LD_INT 2
46266: PPUSH
46267: CALL_OW 275
46271: PUSH
46272: LD_VAR 0 5
46276: PUSH
46277: LD_INT 2
46279: ARRAY
46280: GREATEREQUAL
46281: AND
46282: IFFALSE 46308
46284: PUSH
46285: LD_VAR 0 4
46289: PPUSH
46290: LD_INT 3
46292: PPUSH
46293: CALL_OW 275
46297: PUSH
46298: LD_VAR 0 5
46302: PUSH
46303: LD_INT 3
46305: ARRAY
46306: GREATEREQUAL
46307: AND
46308: ST_TO_ADDR
// end ;
46309: LD_VAR 0 3
46313: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46314: LD_INT 0
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
46326: PPUSH
// result := false ;
46327: LD_ADDR_VAR 0 8
46331: PUSH
46332: LD_INT 0
46334: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46335: LD_VAR 0 5
46339: NOT
46340: IFTRUE 46349
46342: PUSH
46343: LD_VAR 0 1
46347: NOT
46348: OR
46349: IFTRUE 46358
46351: PUSH
46352: LD_VAR 0 2
46356: NOT
46357: OR
46358: IFTRUE 46367
46360: PUSH
46361: LD_VAR 0 3
46365: NOT
46366: OR
46367: IFFALSE 46371
// exit ;
46369: GO 47197
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46371: LD_ADDR_VAR 0 14
46375: PUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: LD_VAR 0 2
46385: PPUSH
46386: LD_VAR 0 3
46390: PPUSH
46391: LD_VAR 0 4
46395: PPUSH
46396: LD_VAR 0 5
46400: PUSH
46401: LD_INT 1
46403: ARRAY
46404: PPUSH
46405: CALL_OW 248
46409: PPUSH
46410: LD_INT 0
46412: PPUSH
46413: CALL 48478 0 6
46417: ST_TO_ADDR
// if not hexes then
46418: LD_VAR 0 14
46422: NOT
46423: IFFALSE 46427
// exit ;
46425: GO 47197
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46427: LD_ADDR_VAR 0 17
46431: PUSH
46432: LD_VAR 0 5
46436: PPUSH
46437: LD_INT 22
46439: PUSH
46440: LD_VAR 0 13
46444: PPUSH
46445: CALL_OW 255
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 30
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 30
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PPUSH
46486: CALL_OW 72
46490: ST_TO_ADDR
// for i = 1 to hexes do
46491: LD_ADDR_VAR 0 9
46495: PUSH
46496: DOUBLE
46497: LD_INT 1
46499: DEC
46500: ST_TO_ADDR
46501: LD_VAR 0 14
46505: PUSH
46506: FOR_TO
46507: IFFALSE 47195
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46509: LD_ADDR_VAR 0 13
46513: PUSH
46514: LD_VAR 0 14
46518: PUSH
46519: LD_VAR 0 9
46523: ARRAY
46524: PUSH
46525: LD_INT 1
46527: ARRAY
46528: PPUSH
46529: LD_VAR 0 14
46533: PUSH
46534: LD_VAR 0 9
46538: ARRAY
46539: PUSH
46540: LD_INT 2
46542: ARRAY
46543: PPUSH
46544: CALL_OW 428
46548: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46549: LD_VAR 0 14
46553: PUSH
46554: LD_VAR 0 9
46558: ARRAY
46559: PUSH
46560: LD_INT 1
46562: ARRAY
46563: PPUSH
46564: LD_VAR 0 14
46568: PUSH
46569: LD_VAR 0 9
46573: ARRAY
46574: PUSH
46575: LD_INT 2
46577: ARRAY
46578: PPUSH
46579: CALL_OW 351
46583: IFTRUE 46622
46585: PUSH
46586: LD_VAR 0 14
46590: PUSH
46591: LD_VAR 0 9
46595: ARRAY
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: PPUSH
46601: LD_VAR 0 14
46605: PUSH
46606: LD_VAR 0 9
46610: ARRAY
46611: PUSH
46612: LD_INT 2
46614: ARRAY
46615: PPUSH
46616: CALL_OW 488
46620: NOT
46621: OR
46622: IFTRUE 46639
46624: PUSH
46625: LD_VAR 0 13
46629: PPUSH
46630: CALL_OW 247
46634: PUSH
46635: LD_INT 3
46637: EQUAL
46638: OR
46639: IFFALSE 46645
// exit ;
46641: POP
46642: POP
46643: GO 47197
// if not tmp then
46645: LD_VAR 0 13
46649: NOT
46650: IFFALSE 46654
// continue ;
46652: GO 46506
// result := true ;
46654: LD_ADDR_VAR 0 8
46658: PUSH
46659: LD_INT 1
46661: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46662: LD_VAR 0 6
46666: IFFALSE 46683
46668: PUSH
46669: LD_VAR 0 13
46673: PPUSH
46674: CALL_OW 247
46678: PUSH
46679: LD_INT 2
46681: EQUAL
46682: AND
46683: IFFALSE 46700
46685: PUSH
46686: LD_VAR 0 13
46690: PPUSH
46691: CALL_OW 263
46695: PUSH
46696: LD_INT 1
46698: EQUAL
46699: AND
46700: IFFALSE 46864
// begin if IsDrivenBy ( tmp ) then
46702: LD_VAR 0 13
46706: PPUSH
46707: CALL_OW 311
46711: IFFALSE 46715
// continue ;
46713: GO 46506
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46715: LD_VAR 0 6
46719: PPUSH
46720: LD_INT 3
46722: PUSH
46723: LD_INT 60
46725: PUSH
46726: EMPTY
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: LD_INT 55
46738: PUSH
46739: EMPTY
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PPUSH
46750: CALL_OW 72
46754: IFFALSE 46862
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46756: LD_ADDR_VAR 0 18
46760: PUSH
46761: LD_VAR 0 6
46765: PPUSH
46766: LD_INT 3
46768: PUSH
46769: LD_INT 60
46771: PUSH
46772: EMPTY
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 55
46784: PUSH
46785: EMPTY
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PPUSH
46796: CALL_OW 72
46800: PUSH
46801: LD_INT 1
46803: ARRAY
46804: ST_TO_ADDR
// if IsInUnit ( driver ) then
46805: LD_VAR 0 18
46809: PPUSH
46810: CALL_OW 310
46814: IFFALSE 46825
// ComExit ( driver ) ;
46816: LD_VAR 0 18
46820: PPUSH
46821: CALL 72478 0 1
// AddComEnterUnit ( driver , tmp ) ;
46825: LD_VAR 0 18
46829: PPUSH
46830: LD_VAR 0 13
46834: PPUSH
46835: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46839: LD_VAR 0 18
46843: PPUSH
46844: LD_VAR 0 7
46848: PPUSH
46849: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46853: LD_VAR 0 18
46857: PPUSH
46858: CALL_OW 181
// end ; continue ;
46862: GO 46506
// end ; if not cleaners or not tmp in cleaners then
46864: LD_VAR 0 6
46868: NOT
46869: IFTRUE 46884
46871: PUSH
46872: LD_VAR 0 13
46876: PUSH
46877: LD_VAR 0 6
46881: IN
46882: NOT
46883: OR
46884: IFFALSE 47193
// begin if dep then
46886: LD_VAR 0 17
46890: IFFALSE 47026
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46892: LD_ADDR_VAR 0 16
46896: PUSH
46897: LD_VAR 0 17
46901: PUSH
46902: LD_INT 1
46904: ARRAY
46905: PPUSH
46906: CALL_OW 250
46910: PPUSH
46911: LD_VAR 0 17
46915: PUSH
46916: LD_INT 1
46918: ARRAY
46919: PPUSH
46920: CALL_OW 254
46924: PPUSH
46925: LD_INT 5
46927: PPUSH
46928: CALL_OW 272
46932: PUSH
46933: LD_VAR 0 17
46937: PUSH
46938: LD_INT 1
46940: ARRAY
46941: PPUSH
46942: CALL_OW 251
46946: PPUSH
46947: LD_VAR 0 17
46951: PUSH
46952: LD_INT 1
46954: ARRAY
46955: PPUSH
46956: CALL_OW 254
46960: PPUSH
46961: LD_INT 5
46963: PPUSH
46964: CALL_OW 273
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46973: LD_VAR 0 16
46977: PUSH
46978: LD_INT 1
46980: ARRAY
46981: PPUSH
46982: LD_VAR 0 16
46986: PUSH
46987: LD_INT 2
46989: ARRAY
46990: PPUSH
46991: CALL_OW 488
46995: IFFALSE 47026
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46997: LD_VAR 0 13
47001: PPUSH
47002: LD_VAR 0 16
47006: PUSH
47007: LD_INT 1
47009: ARRAY
47010: PPUSH
47011: LD_VAR 0 16
47015: PUSH
47016: LD_INT 2
47018: ARRAY
47019: PPUSH
47020: CALL_OW 111
// continue ;
47024: GO 46506
// end ; end ; r := GetDir ( tmp ) ;
47026: LD_ADDR_VAR 0 15
47030: PUSH
47031: LD_VAR 0 13
47035: PPUSH
47036: CALL_OW 254
47040: ST_TO_ADDR
// if r = 5 then
47041: LD_VAR 0 15
47045: PUSH
47046: LD_INT 5
47048: EQUAL
47049: IFFALSE 47059
// r := 0 ;
47051: LD_ADDR_VAR 0 15
47055: PUSH
47056: LD_INT 0
47058: ST_TO_ADDR
// for j = r to 5 do
47059: LD_ADDR_VAR 0 10
47063: PUSH
47064: DOUBLE
47065: LD_VAR 0 15
47069: DEC
47070: ST_TO_ADDR
47071: LD_INT 5
47073: PUSH
47074: FOR_TO
47075: IFFALSE 47191
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47077: LD_ADDR_VAR 0 11
47081: PUSH
47082: LD_VAR 0 13
47086: PPUSH
47087: CALL_OW 250
47091: PPUSH
47092: LD_VAR 0 10
47096: PPUSH
47097: LD_INT 2
47099: PPUSH
47100: CALL_OW 272
47104: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47105: LD_ADDR_VAR 0 12
47109: PUSH
47110: LD_VAR 0 13
47114: PPUSH
47115: CALL_OW 251
47119: PPUSH
47120: LD_VAR 0 10
47124: PPUSH
47125: LD_INT 2
47127: PPUSH
47128: CALL_OW 273
47132: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47133: LD_VAR 0 11
47137: PPUSH
47138: LD_VAR 0 12
47142: PPUSH
47143: CALL_OW 488
47147: IFFALSE 47166
47149: PUSH
47150: LD_VAR 0 11
47154: PPUSH
47155: LD_VAR 0 12
47159: PPUSH
47160: CALL_OW 428
47164: NOT
47165: AND
47166: IFFALSE 47189
// begin ComMoveXY ( tmp , _x , _y ) ;
47168: LD_VAR 0 13
47172: PPUSH
47173: LD_VAR 0 11
47177: PPUSH
47178: LD_VAR 0 12
47182: PPUSH
47183: CALL_OW 111
// break ;
47187: GO 47191
// end ; end ;
47189: GO 47074
47191: POP
47192: POP
// end ; end ;
47193: GO 46506
47195: POP
47196: POP
// end ;
47197: LD_VAR 0 8
47201: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47202: LD_INT 0
47204: PPUSH
// result := true ;
47205: LD_ADDR_VAR 0 3
47209: PUSH
47210: LD_INT 1
47212: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47213: LD_VAR 0 2
47217: PUSH
47218: LD_INT 24
47220: DOUBLE
47221: EQUAL
47222: IFTRUE 47232
47224: LD_INT 33
47226: DOUBLE
47227: EQUAL
47228: IFTRUE 47232
47230: GO 47257
47232: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47233: LD_ADDR_VAR 0 3
47237: PUSH
47238: LD_INT 32
47240: PPUSH
47241: LD_VAR 0 1
47245: PPUSH
47246: CALL_OW 321
47250: PUSH
47251: LD_INT 2
47253: EQUAL
47254: ST_TO_ADDR
47255: GO 47573
47257: LD_INT 20
47259: DOUBLE
47260: EQUAL
47261: IFTRUE 47265
47263: GO 47290
47265: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47266: LD_ADDR_VAR 0 3
47270: PUSH
47271: LD_INT 6
47273: PPUSH
47274: LD_VAR 0 1
47278: PPUSH
47279: CALL_OW 321
47283: PUSH
47284: LD_INT 2
47286: EQUAL
47287: ST_TO_ADDR
47288: GO 47573
47290: LD_INT 22
47292: DOUBLE
47293: EQUAL
47294: IFTRUE 47304
47296: LD_INT 36
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47329
47304: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47305: LD_ADDR_VAR 0 3
47309: PUSH
47310: LD_INT 15
47312: PPUSH
47313: LD_VAR 0 1
47317: PPUSH
47318: CALL_OW 321
47322: PUSH
47323: LD_INT 2
47325: EQUAL
47326: ST_TO_ADDR
47327: GO 47573
47329: LD_INT 30
47331: DOUBLE
47332: EQUAL
47333: IFTRUE 47337
47335: GO 47362
47337: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47338: LD_ADDR_VAR 0 3
47342: PUSH
47343: LD_INT 20
47345: PPUSH
47346: LD_VAR 0 1
47350: PPUSH
47351: CALL_OW 321
47355: PUSH
47356: LD_INT 2
47358: EQUAL
47359: ST_TO_ADDR
47360: GO 47573
47362: LD_INT 28
47364: DOUBLE
47365: EQUAL
47366: IFTRUE 47376
47368: LD_INT 21
47370: DOUBLE
47371: EQUAL
47372: IFTRUE 47376
47374: GO 47401
47376: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47377: LD_ADDR_VAR 0 3
47381: PUSH
47382: LD_INT 21
47384: PPUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 321
47394: PUSH
47395: LD_INT 2
47397: EQUAL
47398: ST_TO_ADDR
47399: GO 47573
47401: LD_INT 16
47403: DOUBLE
47404: EQUAL
47405: IFTRUE 47409
47407: GO 47434
47409: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47410: LD_ADDR_VAR 0 3
47414: PUSH
47415: LD_INT 84
47417: PPUSH
47418: LD_VAR 0 1
47422: PPUSH
47423: CALL_OW 321
47427: PUSH
47428: LD_INT 2
47430: EQUAL
47431: ST_TO_ADDR
47432: GO 47573
47434: LD_INT 19
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47448
47440: LD_INT 23
47442: DOUBLE
47443: EQUAL
47444: IFTRUE 47448
47446: GO 47473
47448: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47449: LD_ADDR_VAR 0 3
47453: PUSH
47454: LD_INT 83
47456: PPUSH
47457: LD_VAR 0 1
47461: PPUSH
47462: CALL_OW 321
47466: PUSH
47467: LD_INT 2
47469: EQUAL
47470: ST_TO_ADDR
47471: GO 47573
47473: LD_INT 17
47475: DOUBLE
47476: EQUAL
47477: IFTRUE 47481
47479: GO 47506
47481: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47482: LD_ADDR_VAR 0 3
47486: PUSH
47487: LD_INT 39
47489: PPUSH
47490: LD_VAR 0 1
47494: PPUSH
47495: CALL_OW 321
47499: PUSH
47500: LD_INT 2
47502: EQUAL
47503: ST_TO_ADDR
47504: GO 47573
47506: LD_INT 18
47508: DOUBLE
47509: EQUAL
47510: IFTRUE 47514
47512: GO 47539
47514: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47515: LD_ADDR_VAR 0 3
47519: PUSH
47520: LD_INT 40
47522: PPUSH
47523: LD_VAR 0 1
47527: PPUSH
47528: CALL_OW 321
47532: PUSH
47533: LD_INT 2
47535: EQUAL
47536: ST_TO_ADDR
47537: GO 47573
47539: LD_INT 27
47541: DOUBLE
47542: EQUAL
47543: IFTRUE 47547
47545: GO 47572
47547: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: LD_INT 35
47555: PPUSH
47556: LD_VAR 0 1
47560: PPUSH
47561: CALL_OW 321
47565: PUSH
47566: LD_INT 2
47568: EQUAL
47569: ST_TO_ADDR
47570: GO 47573
47572: POP
// end ;
47573: LD_VAR 0 3
47577: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47578: LD_INT 0
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
47590: PPUSH
// result := false ;
47591: LD_ADDR_VAR 0 6
47595: PUSH
47596: LD_INT 0
47598: ST_TO_ADDR
// if btype = b_depot then
47599: LD_VAR 0 2
47603: PUSH
47604: LD_INT 0
47606: EQUAL
47607: IFFALSE 47619
// begin result := true ;
47609: LD_ADDR_VAR 0 6
47613: PUSH
47614: LD_INT 1
47616: ST_TO_ADDR
// exit ;
47617: GO 48473
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47619: LD_VAR 0 1
47623: NOT
47624: IFTRUE 47649
47626: PUSH
47627: LD_VAR 0 1
47631: PPUSH
47632: CALL_OW 266
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: IN
47647: NOT
47648: OR
47649: IFTRUE 47658
47651: PUSH
47652: LD_VAR 0 2
47656: NOT
47657: OR
47658: IFTRUE 47694
47660: PUSH
47661: LD_VAR 0 5
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: LD_INT 4
47680: PUSH
47681: LD_INT 5
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: IN
47692: NOT
47693: OR
47694: IFTRUE 47713
47696: PUSH
47697: LD_VAR 0 3
47701: PPUSH
47702: LD_VAR 0 4
47706: PPUSH
47707: CALL_OW 488
47711: NOT
47712: OR
47713: IFFALSE 47717
// exit ;
47715: GO 48473
// side := GetSide ( depot ) ;
47717: LD_ADDR_VAR 0 9
47721: PUSH
47722: LD_VAR 0 1
47726: PPUSH
47727: CALL_OW 255
47731: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47732: LD_VAR 0 9
47736: PPUSH
47737: LD_VAR 0 2
47741: PPUSH
47742: CALL 47202 0 2
47746: NOT
47747: IFFALSE 47751
// exit ;
47749: GO 48473
// pom := GetBase ( depot ) ;
47751: LD_ADDR_VAR 0 10
47755: PUSH
47756: LD_VAR 0 1
47760: PPUSH
47761: CALL_OW 274
47765: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47766: LD_ADDR_VAR 0 11
47770: PUSH
47771: LD_VAR 0 2
47775: PPUSH
47776: LD_VAR 0 1
47780: PPUSH
47781: CALL_OW 248
47785: PPUSH
47786: CALL_OW 450
47790: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47791: LD_VAR 0 10
47795: PPUSH
47796: LD_INT 1
47798: PPUSH
47799: CALL_OW 275
47803: PUSH
47804: LD_VAR 0 11
47808: PUSH
47809: LD_INT 1
47811: ARRAY
47812: GREATEREQUAL
47813: IFFALSE 47839
47815: PUSH
47816: LD_VAR 0 10
47820: PPUSH
47821: LD_INT 2
47823: PPUSH
47824: CALL_OW 275
47828: PUSH
47829: LD_VAR 0 11
47833: PUSH
47834: LD_INT 2
47836: ARRAY
47837: GREATEREQUAL
47838: AND
47839: IFFALSE 47865
47841: PUSH
47842: LD_VAR 0 10
47846: PPUSH
47847: LD_INT 3
47849: PPUSH
47850: CALL_OW 275
47854: PUSH
47855: LD_VAR 0 11
47859: PUSH
47860: LD_INT 3
47862: ARRAY
47863: GREATEREQUAL
47864: AND
47865: NOT
47866: IFFALSE 47870
// exit ;
47868: GO 48473
// if GetBType ( depot ) = b_depot then
47870: LD_VAR 0 1
47874: PPUSH
47875: CALL_OW 266
47879: PUSH
47880: LD_INT 0
47882: EQUAL
47883: IFFALSE 47895
// dist := 28 else
47885: LD_ADDR_VAR 0 14
47889: PUSH
47890: LD_INT 28
47892: ST_TO_ADDR
47893: GO 47903
// dist := 36 ;
47895: LD_ADDR_VAR 0 14
47899: PUSH
47900: LD_INT 36
47902: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47903: LD_VAR 0 1
47907: PPUSH
47908: LD_VAR 0 3
47912: PPUSH
47913: LD_VAR 0 4
47917: PPUSH
47918: CALL_OW 297
47922: PUSH
47923: LD_VAR 0 14
47927: GREATER
47928: IFFALSE 47932
// exit ;
47930: GO 48473
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47932: LD_ADDR_VAR 0 12
47936: PUSH
47937: LD_VAR 0 2
47941: PPUSH
47942: LD_VAR 0 3
47946: PPUSH
47947: LD_VAR 0 4
47951: PPUSH
47952: LD_VAR 0 5
47956: PPUSH
47957: LD_VAR 0 1
47961: PPUSH
47962: CALL_OW 248
47966: PPUSH
47967: LD_INT 0
47969: PPUSH
47970: CALL 48478 0 6
47974: ST_TO_ADDR
// if not hexes then
47975: LD_VAR 0 12
47979: NOT
47980: IFFALSE 47984
// exit ;
47982: GO 48473
// hex := GetHexInfo ( x , y ) ;
47984: LD_ADDR_VAR 0 15
47988: PUSH
47989: LD_VAR 0 3
47993: PPUSH
47994: LD_VAR 0 4
47998: PPUSH
47999: CALL_OW 546
48003: ST_TO_ADDR
// if hex [ 1 ] then
48004: LD_VAR 0 15
48008: PUSH
48009: LD_INT 1
48011: ARRAY
48012: IFFALSE 48016
// exit ;
48014: GO 48473
// height := hex [ 2 ] ;
48016: LD_ADDR_VAR 0 13
48020: PUSH
48021: LD_VAR 0 15
48025: PUSH
48026: LD_INT 2
48028: ARRAY
48029: ST_TO_ADDR
// for i = 1 to hexes do
48030: LD_ADDR_VAR 0 7
48034: PUSH
48035: DOUBLE
48036: LD_INT 1
48038: DEC
48039: ST_TO_ADDR
48040: LD_VAR 0 12
48044: PUSH
48045: FOR_TO
48046: IFFALSE 48390
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48048: LD_VAR 0 12
48052: PUSH
48053: LD_VAR 0 7
48057: ARRAY
48058: PUSH
48059: LD_INT 1
48061: ARRAY
48062: PPUSH
48063: LD_VAR 0 12
48067: PUSH
48068: LD_VAR 0 7
48072: ARRAY
48073: PUSH
48074: LD_INT 2
48076: ARRAY
48077: PPUSH
48078: CALL_OW 488
48082: NOT
48083: IFTRUE 48125
48085: PUSH
48086: LD_VAR 0 12
48090: PUSH
48091: LD_VAR 0 7
48095: ARRAY
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: PPUSH
48101: LD_VAR 0 12
48105: PUSH
48106: LD_VAR 0 7
48110: ARRAY
48111: PUSH
48112: LD_INT 2
48114: ARRAY
48115: PPUSH
48116: CALL_OW 428
48120: PUSH
48121: LD_INT 0
48123: GREATER
48124: OR
48125: IFTRUE 48163
48127: PUSH
48128: LD_VAR 0 12
48132: PUSH
48133: LD_VAR 0 7
48137: ARRAY
48138: PUSH
48139: LD_INT 1
48141: ARRAY
48142: PPUSH
48143: LD_VAR 0 12
48147: PUSH
48148: LD_VAR 0 7
48152: ARRAY
48153: PUSH
48154: LD_INT 2
48156: ARRAY
48157: PPUSH
48158: CALL_OW 351
48162: OR
48163: IFFALSE 48169
// exit ;
48165: POP
48166: POP
48167: GO 48473
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48169: LD_ADDR_VAR 0 8
48173: PUSH
48174: LD_VAR 0 12
48178: PUSH
48179: LD_VAR 0 7
48183: ARRAY
48184: PUSH
48185: LD_INT 1
48187: ARRAY
48188: PPUSH
48189: LD_VAR 0 12
48193: PUSH
48194: LD_VAR 0 7
48198: ARRAY
48199: PUSH
48200: LD_INT 2
48202: ARRAY
48203: PPUSH
48204: CALL_OW 546
48208: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48209: LD_VAR 0 8
48213: PUSH
48214: LD_INT 1
48216: ARRAY
48217: IFTRUE 48239
48219: PUSH
48220: LD_VAR 0 8
48224: PUSH
48225: LD_INT 2
48227: ARRAY
48228: PUSH
48229: LD_VAR 0 13
48233: PUSH
48234: LD_INT 2
48236: PLUS
48237: GREATER
48238: OR
48239: IFTRUE 48261
48241: PUSH
48242: LD_VAR 0 8
48246: PUSH
48247: LD_INT 2
48249: ARRAY
48250: PUSH
48251: LD_VAR 0 13
48255: PUSH
48256: LD_INT 2
48258: MINUS
48259: LESS
48260: OR
48261: IFTRUE 48329
48263: PUSH
48264: LD_VAR 0 8
48268: PUSH
48269: LD_INT 3
48271: ARRAY
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 8
48278: PUSH
48279: LD_INT 9
48281: PUSH
48282: LD_INT 10
48284: PUSH
48285: LD_INT 11
48287: PUSH
48288: LD_INT 12
48290: PUSH
48291: LD_INT 13
48293: PUSH
48294: LD_INT 16
48296: PUSH
48297: LD_INT 17
48299: PUSH
48300: LD_INT 18
48302: PUSH
48303: LD_INT 19
48305: PUSH
48306: LD_INT 20
48308: PUSH
48309: LD_INT 21
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: IN
48327: NOT
48328: OR
48329: IFTRUE 48342
48331: PUSH
48332: LD_VAR 0 8
48336: PUSH
48337: LD_INT 5
48339: ARRAY
48340: NOT
48341: OR
48342: IFTRUE 48382
48344: PUSH
48345: LD_VAR 0 8
48349: PUSH
48350: LD_INT 6
48352: ARRAY
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 7
48362: PUSH
48363: LD_INT 9
48365: PUSH
48366: LD_INT 10
48368: PUSH
48369: LD_INT 11
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: IN
48380: NOT
48381: OR
48382: IFFALSE 48388
// exit ;
48384: POP
48385: POP
48386: GO 48473
// end ;
48388: GO 48045
48390: POP
48391: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48392: LD_VAR 0 9
48396: PPUSH
48397: LD_VAR 0 3
48401: PPUSH
48402: LD_VAR 0 4
48406: PPUSH
48407: LD_INT 20
48409: PPUSH
48410: CALL 40292 0 4
48414: PUSH
48415: LD_INT 4
48417: ARRAY
48418: IFFALSE 48422
// exit ;
48420: GO 48473
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48422: LD_VAR 0 2
48426: PUSH
48427: LD_INT 29
48429: PUSH
48430: LD_INT 30
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: IN
48437: IFFALSE 48461
48439: PUSH
48440: LD_VAR 0 3
48444: PPUSH
48445: LD_VAR 0 4
48449: PPUSH
48450: LD_VAR 0 9
48454: PPUSH
48455: CALL_OW 440
48459: NOT
48460: AND
48461: IFFALSE 48465
// exit ;
48463: GO 48473
// result := true ;
48465: LD_ADDR_VAR 0 6
48469: PUSH
48470: LD_INT 1
48472: ST_TO_ADDR
// end ;
48473: LD_VAR 0 6
48477: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48478: LD_INT 0
48480: PPUSH
48481: PPUSH
48482: PPUSH
48483: PPUSH
48484: PPUSH
48485: PPUSH
48486: PPUSH
48487: PPUSH
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
48501: PPUSH
48502: PPUSH
48503: PPUSH
48504: PPUSH
48505: PPUSH
48506: PPUSH
48507: PPUSH
48508: PPUSH
48509: PPUSH
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
48520: PPUSH
48521: PPUSH
48522: PPUSH
48523: PPUSH
48524: PPUSH
48525: PPUSH
48526: PPUSH
48527: PPUSH
48528: PPUSH
48529: PPUSH
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
// result = [ ] ;
48538: LD_ADDR_VAR 0 7
48542: PUSH
48543: EMPTY
48544: ST_TO_ADDR
// temp_list = [ ] ;
48545: LD_ADDR_VAR 0 9
48549: PUSH
48550: EMPTY
48551: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48552: LD_VAR 0 4
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: LD_INT 4
48571: PUSH
48572: LD_INT 5
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: IN
48583: NOT
48584: IFTRUE 48627
48586: PUSH
48587: LD_VAR 0 1
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: IN
48602: IFFALSE 48626
48604: PUSH
48605: LD_VAR 0 5
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: IN
48624: NOT
48625: AND
48626: OR
48627: IFFALSE 48631
// exit ;
48629: GO 67030
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48631: LD_VAR 0 1
48635: PUSH
48636: LD_INT 6
48638: PUSH
48639: LD_INT 7
48641: PUSH
48642: LD_INT 8
48644: PUSH
48645: LD_INT 13
48647: PUSH
48648: LD_INT 12
48650: PUSH
48651: LD_INT 15
48653: PUSH
48654: LD_INT 11
48656: PUSH
48657: LD_INT 14
48659: PUSH
48660: LD_INT 10
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: IN
48674: IFFALSE 48684
// btype = b_lab ;
48676: LD_ADDR_VAR 0 1
48680: PUSH
48681: LD_INT 6
48683: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48684: LD_VAR 0 6
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: IN
48703: NOT
48704: IFTRUE 48772
48706: PUSH
48707: LD_VAR 0 1
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: LD_INT 6
48726: PUSH
48727: LD_INT 36
48729: PUSH
48730: LD_INT 4
48732: PUSH
48733: LD_INT 5
48735: PUSH
48736: LD_INT 31
48738: PUSH
48739: LD_INT 32
48741: PUSH
48742: LD_INT 33
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: IN
48758: NOT
48759: IFFALSE 48771
48761: PUSH
48762: LD_VAR 0 6
48766: PUSH
48767: LD_INT 1
48769: EQUAL
48770: AND
48771: OR
48772: IFTRUE 48804
48774: PUSH
48775: LD_VAR 0 1
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: IN
48790: NOT
48791: IFFALSE 48803
48793: PUSH
48794: LD_VAR 0 6
48798: PUSH
48799: LD_INT 2
48801: EQUAL
48802: AND
48803: OR
48804: IFFALSE 48814
// mode = 0 ;
48806: LD_ADDR_VAR 0 6
48810: PUSH
48811: LD_INT 0
48813: ST_TO_ADDR
// case mode of 0 :
48814: LD_VAR 0 6
48818: PUSH
48819: LD_INT 0
48821: DOUBLE
48822: EQUAL
48823: IFTRUE 48827
48825: GO 60280
48827: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48828: LD_ADDR_VAR 0 11
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49021: LD_ADDR_VAR 0 12
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49217: LD_ADDR_VAR 0 13
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 3
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49416: LD_ADDR_VAR 0 14
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 3
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 3
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49612: LD_ADDR_VAR 0 15
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49805: LD_ADDR_VAR 0 16
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49998: LD_ADDR_VAR 0 17
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50228: LD_ADDR_VAR 0 18
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50458: LD_ADDR_VAR 0 19
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50688: LD_ADDR_VAR 0 20
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50918: LD_ADDR_VAR 0 21
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51148: LD_ADDR_VAR 0 22
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51378: LD_ADDR_VAR 0 23
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51658: LD_ADDR_VAR 0 24
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51934: LD_ADDR_VAR 0 25
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52208: LD_ADDR_VAR 0 26
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52484: LD_ADDR_VAR 0 27
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52764: LD_ADDR_VAR 0 28
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53046: LD_ADDR_VAR 0 29
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53325: LD_ADDR_VAR 0 30
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53603: LD_ADDR_VAR 0 31
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53881: LD_ADDR_VAR 0 32
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 3
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54159: LD_ADDR_VAR 0 33
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: NEG
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54438: LD_ADDR_VAR 0 34
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54718: LD_ADDR_VAR 0 35
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54830: LD_ADDR_VAR 0 36
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54942: LD_ADDR_VAR 0 37
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55054: LD_ADDR_VAR 0 38
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55166: LD_ADDR_VAR 0 39
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55278: LD_ADDR_VAR 0 40
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55390: LD_ADDR_VAR 0 41
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 3
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 3
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 3
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55740: LD_ADDR_VAR 0 42
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: LD_INT 3
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 3
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 3
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56090: LD_ADDR_VAR 0 43
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56438: LD_ADDR_VAR 0 44
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 3
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56788: LD_ADDR_VAR 0 45
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: NEG
57098: PUSH
57099: LD_INT 3
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57138: LD_ADDR_VAR 0 46
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57486: LD_ADDR_VAR 0 47
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57637: LD_ADDR_VAR 0 48
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57784: LD_ADDR_VAR 0 49
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57928: LD_ADDR_VAR 0 50
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58072: LD_ADDR_VAR 0 51
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58219: LD_ADDR_VAR 0 52
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58370: LD_ADDR_VAR 0 53
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58600: LD_ADDR_VAR 0 54
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58830: LD_ADDR_VAR 0 55
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59060: LD_ADDR_VAR 0 56
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59290: LD_ADDR_VAR 0 57
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59520: LD_ADDR_VAR 0 58
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59750: LD_ADDR_VAR 0 59
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59838: LD_ADDR_VAR 0 60
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59926: LD_ADDR_VAR 0 61
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60014: LD_ADDR_VAR 0 62
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60102: LD_ADDR_VAR 0 63
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60190: LD_ADDR_VAR 0 64
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// end ; 1 :
60278: GO 66175
60280: LD_INT 1
60282: DOUBLE
60283: EQUAL
60284: IFTRUE 60288
60286: GO 62911
60288: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60289: LD_ADDR_VAR 0 11
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 3
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60333: LD_ADDR_VAR 0 12
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60374: LD_ADDR_VAR 0 13
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60414: LD_ADDR_VAR 0 14
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60455: LD_ADDR_VAR 0 15
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: NEG
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60499: LD_ADDR_VAR 0 16
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: NEG
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: LD_INT 3
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60545: LD_ADDR_VAR 0 17
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 3
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 3
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60589: LD_ADDR_VAR 0 18
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60630: LD_ADDR_VAR 0 19
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: LD_INT 3
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: LD_INT 3
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: LIST
60669: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60670: LD_ADDR_VAR 0 20
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60711: LD_ADDR_VAR 0 21
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60755: LD_ADDR_VAR 0 22
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60801: LD_ADDR_VAR 0 23
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60845: LD_ADDR_VAR 0 24
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 4
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60886: LD_ADDR_VAR 0 25
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 4
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 4
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60926: LD_ADDR_VAR 0 26
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60967: LD_ADDR_VAR 0 27
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 4
60996: NEG
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61011: LD_ADDR_VAR 0 28
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 3
61030: NEG
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61057: LD_ADDR_VAR 0 29
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 4
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 4
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 5
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 5
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 6
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 6
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 5
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61212: LD_ADDR_VAR 0 30
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 4
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 4
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 6
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 6
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61355: LD_ADDR_VAR 0 31
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 5
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 5
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 6
61452: PUSH
61453: LD_INT 5
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 6
61462: PUSH
61463: LD_INT 6
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 5
61472: PUSH
61473: LD_INT 6
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61494: LD_ADDR_VAR 0 32
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 3
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 4
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 4
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: LD_INT 5
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: LD_INT 5
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: LD_INT 4
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 6
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 6
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61637: LD_ADDR_VAR 0 33
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 3
61655: NEG
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: NEG
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: NEG
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 5
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 5
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 6
61757: NEG
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 6
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61792: LD_ADDR_VAR 0 34
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 4
61847: NEG
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 4
61859: NEG
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: NEG
61872: PUSH
61873: LD_INT 5
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 5
61883: NEG
61884: PUSH
61885: LD_INT 4
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 5
61895: NEG
61896: PUSH
61897: LD_INT 5
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 5
61907: NEG
61908: PUSH
61909: LD_INT 6
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 6
61919: NEG
61920: PUSH
61921: LD_INT 5
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 6
61931: NEG
61932: PUSH
61933: LD_INT 6
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61955: LD_ADDR_VAR 0 41
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 2
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61999: LD_ADDR_VAR 0 42
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62040: LD_ADDR_VAR 0 43
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62080: LD_ADDR_VAR 0 44
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62121: LD_ADDR_VAR 0 45
62125: PUSH
62126: LD_INT 2
62128: NEG
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62165: LD_ADDR_VAR 0 46
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62211: LD_ADDR_VAR 0 47
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62244: LD_ADDR_VAR 0 48
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62275: LD_ADDR_VAR 0 49
62279: PUSH
62280: LD_INT 3
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 3
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62304: LD_ADDR_VAR 0 50
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62333: LD_ADDR_VAR 0 51
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62364: LD_ADDR_VAR 0 52
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62397: LD_ADDR_VAR 0 53
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 3
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62441: LD_ADDR_VAR 0 54
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62482: LD_ADDR_VAR 0 55
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62522: LD_ADDR_VAR 0 56
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62563: LD_ADDR_VAR 0 57
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62607: LD_ADDR_VAR 0 58
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: NEG
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62653: LD_ADDR_VAR 0 59
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62697: LD_ADDR_VAR 0 60
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62738: LD_ADDR_VAR 0 61
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62778: LD_ADDR_VAR 0 62
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62819: LD_ADDR_VAR 0 63
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62863: LD_ADDR_VAR 0 64
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: ST_TO_ADDR
// end ; 2 :
62909: GO 66175
62911: LD_INT 2
62913: DOUBLE
62914: EQUAL
62915: IFTRUE 62919
62917: GO 66174
62919: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62920: LD_ADDR_VAR 0 29
62924: PUSH
62925: LD_INT 4
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 5
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 5
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 4
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 5
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 3
63020: PUSH
63021: LD_INT 3
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 4
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 4
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: LD_INT 4
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 4
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 3
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 4
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 5
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 5
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 4
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 5
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 3
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 4
63259: NEG
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 4
63270: NEG
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 4
63305: NEG
63306: PUSH
63307: LD_INT 4
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 4
63317: NEG
63318: PUSH
63319: LD_INT 5
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: NEG
63330: PUSH
63331: LD_INT 4
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 4
63353: NEG
63354: PUSH
63355: LD_INT 3
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 5
63365: NEG
63366: PUSH
63367: LD_INT 4
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 5
63377: NEG
63378: PUSH
63379: LD_INT 5
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 3
63389: NEG
63390: PUSH
63391: LD_INT 5
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 5
63401: NEG
63402: PUSH
63403: LD_INT 3
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63458: LD_ADDR_VAR 0 30
63462: PUSH
63463: LD_INT 4
63465: PUSH
63466: LD_INT 4
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 4
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 5
63485: PUSH
63486: LD_INT 4
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 5
63495: PUSH
63496: LD_INT 5
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 4
63505: PUSH
63506: LD_INT 5
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: LD_INT 4
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 3
63525: PUSH
63526: LD_INT 3
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 5
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: PUSH
63546: LD_INT 5
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 3
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 4
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 4
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: LD_INT 2
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 4
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: LD_INT 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 4
63648: NEG
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 4
63659: NEG
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 4
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 5
63704: NEG
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 5
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 5
63727: NEG
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: LD_INT 3
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: LD_INT 4
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: NEG
63775: PUSH
63776: LD_INT 3
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: LD_INT 2
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 4
63810: NEG
63811: PUSH
63812: LD_INT 3
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 4
63822: NEG
63823: PUSH
63824: LD_INT 4
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: LD_INT 4
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 4
63846: NEG
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 4
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 5
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: LD_INT 4
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 3
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: LD_INT 5
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 5
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64005: LD_ADDR_VAR 0 31
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 4
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 3
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: LD_INT 4
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 5
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: LD_INT 5
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 5
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: LD_INT 3
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 3
64105: NEG
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 3
64116: NEG
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: NEG
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 4
64161: NEG
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 4
64172: NEG
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 2
64196: NEG
64197: PUSH
64198: LD_INT 2
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 4
64207: NEG
64208: PUSH
64209: LD_INT 4
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 4
64219: NEG
64220: PUSH
64221: LD_INT 5
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 3
64231: NEG
64232: PUSH
64233: LD_INT 4
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 3
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 4
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 5
64267: NEG
64268: PUSH
64269: LD_INT 4
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 5
64279: NEG
64280: PUSH
64281: LD_INT 5
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: NEG
64292: PUSH
64293: LD_INT 5
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 5
64303: NEG
64304: PUSH
64305: LD_INT 3
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 3
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 2
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: LD_INT 3
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 4
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 4
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 4
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 5
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 5
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 4
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 5
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64555: LD_ADDR_VAR 0 32
64559: PUSH
64560: LD_INT 4
64562: NEG
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 4
64573: NEG
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 4
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 5
64618: NEG
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 5
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 5
64641: NEG
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 3
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: LD_INT 4
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: NEG
64689: PUSH
64690: LD_INT 3
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 4
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 4
64736: NEG
64737: PUSH
64738: LD_INT 4
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 4
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 4
64760: NEG
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_INT 4
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 5
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 4
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 4
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: LD_INT 5
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: LD_INT 5
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 4
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 4
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: LD_INT 2
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 4
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: LD_INT 4
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 4
64977: PUSH
64978: LD_INT 3
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 5
64987: PUSH
64988: LD_INT 4
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 5
64997: PUSH
64998: LD_INT 5
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: LD_INT 5
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: LD_INT 4
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: LD_INT 3
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 5
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: LD_INT 5
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65102: LD_ADDR_VAR 0 33
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: LD_INT 4
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 4
65121: NEG
65122: PUSH
65123: LD_INT 5
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 3
65133: NEG
65134: PUSH
65135: LD_INT 4
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 4
65157: NEG
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 5
65169: NEG
65170: PUSH
65171: LD_INT 4
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 5
65181: NEG
65182: PUSH
65183: LD_INT 5
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: LD_INT 5
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 5
65205: NEG
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 4
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 3
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: LD_INT 4
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: LD_INT 4
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 5
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 5
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 4
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 4
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: LD_INT 3
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 4
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: LD_INT 3
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 4
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 5
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 5
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 2
65574: PUSH
65575: LD_INT 5
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 2
65584: NEG
65585: PUSH
65586: LD_INT 3
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65640: LD_ADDR_VAR 0 34
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: LD_INT 4
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 5
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 4
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: LD_INT 4
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 5
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 5
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 3
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 3
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 4
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 4
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 4
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 4
65852: PUSH
65853: LD_INT 3
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 5
65862: PUSH
65863: LD_INT 4
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 5
65872: PUSH
65873: LD_INT 5
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: LD_INT 5
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: LD_INT 4
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 5
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: LD_INT 4
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: LD_INT 4
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: NEG
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 1
65993: NEG
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 4
66025: NEG
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 4
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 3
66048: NEG
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 4
66070: NEG
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 5
66081: NEG
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 5
66092: NEG
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 5
66104: NEG
66105: PUSH
66106: LD_INT 2
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: NEG
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// end ; end ;
66172: GO 66175
66174: POP
// case btype of b_depot , b_warehouse :
66175: LD_VAR 0 1
66179: PUSH
66180: LD_INT 0
66182: DOUBLE
66183: EQUAL
66184: IFTRUE 66194
66186: LD_INT 1
66188: DOUBLE
66189: EQUAL
66190: IFTRUE 66194
66192: GO 66395
66194: POP
// case nation of nation_american :
66195: LD_VAR 0 5
66199: PUSH
66200: LD_INT 1
66202: DOUBLE
66203: EQUAL
66204: IFTRUE 66208
66206: GO 66264
66208: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66209: LD_ADDR_VAR 0 9
66213: PUSH
66214: LD_VAR 0 11
66218: PUSH
66219: LD_VAR 0 12
66223: PUSH
66224: LD_VAR 0 13
66228: PUSH
66229: LD_VAR 0 14
66233: PUSH
66234: LD_VAR 0 15
66238: PUSH
66239: LD_VAR 0 16
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: PUSH
66252: LD_VAR 0 4
66256: PUSH
66257: LD_INT 1
66259: PLUS
66260: ARRAY
66261: ST_TO_ADDR
66262: GO 66393
66264: LD_INT 2
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66272
66270: GO 66328
66272: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66273: LD_ADDR_VAR 0 9
66277: PUSH
66278: LD_VAR 0 17
66282: PUSH
66283: LD_VAR 0 18
66287: PUSH
66288: LD_VAR 0 19
66292: PUSH
66293: LD_VAR 0 20
66297: PUSH
66298: LD_VAR 0 21
66302: PUSH
66303: LD_VAR 0 22
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: PUSH
66316: LD_VAR 0 4
66320: PUSH
66321: LD_INT 1
66323: PLUS
66324: ARRAY
66325: ST_TO_ADDR
66326: GO 66393
66328: LD_INT 3
66330: DOUBLE
66331: EQUAL
66332: IFTRUE 66336
66334: GO 66392
66336: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66337: LD_ADDR_VAR 0 9
66341: PUSH
66342: LD_VAR 0 23
66346: PUSH
66347: LD_VAR 0 24
66351: PUSH
66352: LD_VAR 0 25
66356: PUSH
66357: LD_VAR 0 26
66361: PUSH
66362: LD_VAR 0 27
66366: PUSH
66367: LD_VAR 0 28
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: PUSH
66380: LD_VAR 0 4
66384: PUSH
66385: LD_INT 1
66387: PLUS
66388: ARRAY
66389: ST_TO_ADDR
66390: GO 66393
66392: POP
66393: GO 66948
66395: LD_INT 2
66397: DOUBLE
66398: EQUAL
66399: IFTRUE 66409
66401: LD_INT 3
66403: DOUBLE
66404: EQUAL
66405: IFTRUE 66409
66407: GO 66465
66409: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66410: LD_ADDR_VAR 0 9
66414: PUSH
66415: LD_VAR 0 29
66419: PUSH
66420: LD_VAR 0 30
66424: PUSH
66425: LD_VAR 0 31
66429: PUSH
66430: LD_VAR 0 32
66434: PUSH
66435: LD_VAR 0 33
66439: PUSH
66440: LD_VAR 0 34
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: PUSH
66453: LD_VAR 0 4
66457: PUSH
66458: LD_INT 1
66460: PLUS
66461: ARRAY
66462: ST_TO_ADDR
66463: GO 66948
66465: LD_INT 16
66467: DOUBLE
66468: EQUAL
66469: IFTRUE 66527
66471: LD_INT 17
66473: DOUBLE
66474: EQUAL
66475: IFTRUE 66527
66477: LD_INT 18
66479: DOUBLE
66480: EQUAL
66481: IFTRUE 66527
66483: LD_INT 19
66485: DOUBLE
66486: EQUAL
66487: IFTRUE 66527
66489: LD_INT 22
66491: DOUBLE
66492: EQUAL
66493: IFTRUE 66527
66495: LD_INT 20
66497: DOUBLE
66498: EQUAL
66499: IFTRUE 66527
66501: LD_INT 21
66503: DOUBLE
66504: EQUAL
66505: IFTRUE 66527
66507: LD_INT 23
66509: DOUBLE
66510: EQUAL
66511: IFTRUE 66527
66513: LD_INT 24
66515: DOUBLE
66516: EQUAL
66517: IFTRUE 66527
66519: LD_INT 25
66521: DOUBLE
66522: EQUAL
66523: IFTRUE 66527
66525: GO 66583
66527: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66528: LD_ADDR_VAR 0 9
66532: PUSH
66533: LD_VAR 0 35
66537: PUSH
66538: LD_VAR 0 36
66542: PUSH
66543: LD_VAR 0 37
66547: PUSH
66548: LD_VAR 0 38
66552: PUSH
66553: LD_VAR 0 39
66557: PUSH
66558: LD_VAR 0 40
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: PUSH
66571: LD_VAR 0 4
66575: PUSH
66576: LD_INT 1
66578: PLUS
66579: ARRAY
66580: ST_TO_ADDR
66581: GO 66948
66583: LD_INT 6
66585: DOUBLE
66586: EQUAL
66587: IFTRUE 66639
66589: LD_INT 7
66591: DOUBLE
66592: EQUAL
66593: IFTRUE 66639
66595: LD_INT 8
66597: DOUBLE
66598: EQUAL
66599: IFTRUE 66639
66601: LD_INT 13
66603: DOUBLE
66604: EQUAL
66605: IFTRUE 66639
66607: LD_INT 12
66609: DOUBLE
66610: EQUAL
66611: IFTRUE 66639
66613: LD_INT 15
66615: DOUBLE
66616: EQUAL
66617: IFTRUE 66639
66619: LD_INT 11
66621: DOUBLE
66622: EQUAL
66623: IFTRUE 66639
66625: LD_INT 14
66627: DOUBLE
66628: EQUAL
66629: IFTRUE 66639
66631: LD_INT 10
66633: DOUBLE
66634: EQUAL
66635: IFTRUE 66639
66637: GO 66695
66639: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66640: LD_ADDR_VAR 0 9
66644: PUSH
66645: LD_VAR 0 41
66649: PUSH
66650: LD_VAR 0 42
66654: PUSH
66655: LD_VAR 0 43
66659: PUSH
66660: LD_VAR 0 44
66664: PUSH
66665: LD_VAR 0 45
66669: PUSH
66670: LD_VAR 0 46
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: PUSH
66683: LD_VAR 0 4
66687: PUSH
66688: LD_INT 1
66690: PLUS
66691: ARRAY
66692: ST_TO_ADDR
66693: GO 66948
66695: LD_INT 36
66697: DOUBLE
66698: EQUAL
66699: IFTRUE 66703
66701: GO 66759
66703: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66704: LD_ADDR_VAR 0 9
66708: PUSH
66709: LD_VAR 0 47
66713: PUSH
66714: LD_VAR 0 48
66718: PUSH
66719: LD_VAR 0 49
66723: PUSH
66724: LD_VAR 0 50
66728: PUSH
66729: LD_VAR 0 51
66733: PUSH
66734: LD_VAR 0 52
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: PUSH
66747: LD_VAR 0 4
66751: PUSH
66752: LD_INT 1
66754: PLUS
66755: ARRAY
66756: ST_TO_ADDR
66757: GO 66948
66759: LD_INT 4
66761: DOUBLE
66762: EQUAL
66763: IFTRUE 66785
66765: LD_INT 5
66767: DOUBLE
66768: EQUAL
66769: IFTRUE 66785
66771: LD_INT 34
66773: DOUBLE
66774: EQUAL
66775: IFTRUE 66785
66777: LD_INT 37
66779: DOUBLE
66780: EQUAL
66781: IFTRUE 66785
66783: GO 66841
66785: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66786: LD_ADDR_VAR 0 9
66790: PUSH
66791: LD_VAR 0 53
66795: PUSH
66796: LD_VAR 0 54
66800: PUSH
66801: LD_VAR 0 55
66805: PUSH
66806: LD_VAR 0 56
66810: PUSH
66811: LD_VAR 0 57
66815: PUSH
66816: LD_VAR 0 58
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: PUSH
66829: LD_VAR 0 4
66833: PUSH
66834: LD_INT 1
66836: PLUS
66837: ARRAY
66838: ST_TO_ADDR
66839: GO 66948
66841: LD_INT 31
66843: DOUBLE
66844: EQUAL
66845: IFTRUE 66891
66847: LD_INT 32
66849: DOUBLE
66850: EQUAL
66851: IFTRUE 66891
66853: LD_INT 33
66855: DOUBLE
66856: EQUAL
66857: IFTRUE 66891
66859: LD_INT 27
66861: DOUBLE
66862: EQUAL
66863: IFTRUE 66891
66865: LD_INT 26
66867: DOUBLE
66868: EQUAL
66869: IFTRUE 66891
66871: LD_INT 28
66873: DOUBLE
66874: EQUAL
66875: IFTRUE 66891
66877: LD_INT 29
66879: DOUBLE
66880: EQUAL
66881: IFTRUE 66891
66883: LD_INT 30
66885: DOUBLE
66886: EQUAL
66887: IFTRUE 66891
66889: GO 66947
66891: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66892: LD_ADDR_VAR 0 9
66896: PUSH
66897: LD_VAR 0 59
66901: PUSH
66902: LD_VAR 0 60
66906: PUSH
66907: LD_VAR 0 61
66911: PUSH
66912: LD_VAR 0 62
66916: PUSH
66917: LD_VAR 0 63
66921: PUSH
66922: LD_VAR 0 64
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: PUSH
66935: LD_VAR 0 4
66939: PUSH
66940: LD_INT 1
66942: PLUS
66943: ARRAY
66944: ST_TO_ADDR
66945: GO 66948
66947: POP
// temp_list2 = [ ] ;
66948: LD_ADDR_VAR 0 10
66952: PUSH
66953: EMPTY
66954: ST_TO_ADDR
// for i in temp_list do
66955: LD_ADDR_VAR 0 8
66959: PUSH
66960: LD_VAR 0 9
66964: PUSH
66965: FOR_IN
66966: IFFALSE 67018
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66968: LD_ADDR_VAR 0 10
66972: PUSH
66973: LD_VAR 0 10
66977: PUSH
66978: LD_VAR 0 8
66982: PUSH
66983: LD_INT 1
66985: ARRAY
66986: PUSH
66987: LD_VAR 0 2
66991: PLUS
66992: PUSH
66993: LD_VAR 0 8
66997: PUSH
66998: LD_INT 2
67000: ARRAY
67001: PUSH
67002: LD_VAR 0 3
67006: PLUS
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: ADD
67015: ST_TO_ADDR
67016: GO 66965
67018: POP
67019: POP
// result = temp_list2 ;
67020: LD_ADDR_VAR 0 7
67024: PUSH
67025: LD_VAR 0 10
67029: ST_TO_ADDR
// end ;
67030: LD_VAR 0 7
67034: RET
// export function EnemyInRange ( unit , dist ) ; begin
67035: LD_INT 0
67037: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67038: LD_ADDR_VAR 0 3
67042: PUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL_OW 255
67052: PPUSH
67053: LD_VAR 0 1
67057: PPUSH
67058: CALL_OW 250
67062: PPUSH
67063: LD_VAR 0 1
67067: PPUSH
67068: CALL_OW 251
67072: PPUSH
67073: LD_VAR 0 2
67077: PPUSH
67078: CALL 40292 0 4
67082: PUSH
67083: LD_INT 4
67085: ARRAY
67086: ST_TO_ADDR
// end ;
67087: LD_VAR 0 3
67091: RET
// export function PlayerSeeMe ( unit ) ; begin
67092: LD_INT 0
67094: PPUSH
// result := See ( your_side , unit ) ;
67095: LD_ADDR_VAR 0 2
67099: PUSH
67100: LD_OWVAR 2
67104: PPUSH
67105: LD_VAR 0 1
67109: PPUSH
67110: CALL_OW 292
67114: ST_TO_ADDR
// end ;
67115: LD_VAR 0 2
67119: RET
// export function ReverseDir ( unit ) ; begin
67120: LD_INT 0
67122: PPUSH
// if not unit then
67123: LD_VAR 0 1
67127: NOT
67128: IFFALSE 67132
// exit ;
67130: GO 67155
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67132: LD_ADDR_VAR 0 2
67136: PUSH
67137: LD_VAR 0 1
67141: PPUSH
67142: CALL_OW 254
67146: PUSH
67147: LD_INT 3
67149: PLUS
67150: PUSH
67151: LD_INT 6
67153: MOD
67154: ST_TO_ADDR
// end ;
67155: LD_VAR 0 2
67159: RET
// export function ReverseArray ( array ) ; var i ; begin
67160: LD_INT 0
67162: PPUSH
67163: PPUSH
// if not array then
67164: LD_VAR 0 1
67168: NOT
67169: IFFALSE 67173
// exit ;
67171: GO 67228
// result := [ ] ;
67173: LD_ADDR_VAR 0 2
67177: PUSH
67178: EMPTY
67179: ST_TO_ADDR
// for i := array downto 1 do
67180: LD_ADDR_VAR 0 3
67184: PUSH
67185: DOUBLE
67186: LD_VAR 0 1
67190: INC
67191: ST_TO_ADDR
67192: LD_INT 1
67194: PUSH
67195: FOR_DOWNTO
67196: IFFALSE 67226
// result := Join ( result , array [ i ] ) ;
67198: LD_ADDR_VAR 0 2
67202: PUSH
67203: LD_VAR 0 2
67207: PPUSH
67208: LD_VAR 0 1
67212: PUSH
67213: LD_VAR 0 3
67217: ARRAY
67218: PPUSH
67219: CALL 72080 0 2
67223: ST_TO_ADDR
67224: GO 67195
67226: POP
67227: POP
// end ;
67228: LD_VAR 0 2
67232: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
67240: PPUSH
// if not unit or not hexes then
67241: LD_VAR 0 1
67245: NOT
67246: IFTRUE 67255
67248: PUSH
67249: LD_VAR 0 2
67253: NOT
67254: OR
67255: IFFALSE 67259
// exit ;
67257: GO 67382
// dist := 9999 ;
67259: LD_ADDR_VAR 0 5
67263: PUSH
67264: LD_INT 9999
67266: ST_TO_ADDR
// for i = 1 to hexes do
67267: LD_ADDR_VAR 0 4
67271: PUSH
67272: DOUBLE
67273: LD_INT 1
67275: DEC
67276: ST_TO_ADDR
67277: LD_VAR 0 2
67281: PUSH
67282: FOR_TO
67283: IFFALSE 67370
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67285: LD_ADDR_VAR 0 6
67289: PUSH
67290: LD_VAR 0 1
67294: PPUSH
67295: LD_VAR 0 2
67299: PUSH
67300: LD_VAR 0 4
67304: ARRAY
67305: PUSH
67306: LD_INT 1
67308: ARRAY
67309: PPUSH
67310: LD_VAR 0 2
67314: PUSH
67315: LD_VAR 0 4
67319: ARRAY
67320: PUSH
67321: LD_INT 2
67323: ARRAY
67324: PPUSH
67325: CALL_OW 297
67329: ST_TO_ADDR
// if tdist < dist then
67330: LD_VAR 0 6
67334: PUSH
67335: LD_VAR 0 5
67339: LESS
67340: IFFALSE 67368
// begin hex := hexes [ i ] ;
67342: LD_ADDR_VAR 0 8
67346: PUSH
67347: LD_VAR 0 2
67351: PUSH
67352: LD_VAR 0 4
67356: ARRAY
67357: ST_TO_ADDR
// dist := tdist ;
67358: LD_ADDR_VAR 0 5
67362: PUSH
67363: LD_VAR 0 6
67367: ST_TO_ADDR
// end ; end ;
67368: GO 67282
67370: POP
67371: POP
// result := hex ;
67372: LD_ADDR_VAR 0 3
67376: PUSH
67377: LD_VAR 0 8
67381: ST_TO_ADDR
// end ;
67382: LD_VAR 0 3
67386: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67387: LD_INT 0
67389: PPUSH
67390: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67391: LD_VAR 0 1
67395: NOT
67396: IFTRUE 67435
67398: PUSH
67399: LD_VAR 0 1
67403: PUSH
67404: LD_INT 21
67406: PUSH
67407: LD_INT 2
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 23
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PPUSH
67428: CALL_OW 69
67432: IN
67433: NOT
67434: OR
67435: IFFALSE 67439
// exit ;
67437: GO 67486
// for i = 1 to 3 do
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: DOUBLE
67445: LD_INT 1
67447: DEC
67448: ST_TO_ADDR
67449: LD_INT 3
67451: PUSH
67452: FOR_TO
67453: IFFALSE 67484
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67455: LD_VAR 0 1
67459: PPUSH
67460: CALL_OW 250
67464: PPUSH
67465: LD_VAR 0 1
67469: PPUSH
67470: CALL_OW 251
67474: PPUSH
67475: LD_INT 1
67477: PPUSH
67478: CALL_OW 453
67482: GO 67452
67484: POP
67485: POP
// end ;
67486: LD_VAR 0 2
67490: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67491: LD_INT 0
67493: PPUSH
67494: PPUSH
67495: PPUSH
67496: PPUSH
67497: PPUSH
67498: PPUSH
// if not unit or not enemy_unit then
67499: LD_VAR 0 1
67503: NOT
67504: IFTRUE 67513
67506: PUSH
67507: LD_VAR 0 2
67511: NOT
67512: OR
67513: IFFALSE 67517
// exit ;
67515: GO 67998
// if GetLives ( i ) < 250 then
67517: LD_VAR 0 4
67521: PPUSH
67522: CALL_OW 256
67526: PUSH
67527: LD_INT 250
67529: LESS
67530: IFFALSE 67543
// begin ComAutodestruct ( i ) ;
67532: LD_VAR 0 4
67536: PPUSH
67537: CALL 67387 0 1
// exit ;
67541: GO 67998
// end ; x := GetX ( enemy_unit ) ;
67543: LD_ADDR_VAR 0 7
67547: PUSH
67548: LD_VAR 0 2
67552: PPUSH
67553: CALL_OW 250
67557: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67558: LD_ADDR_VAR 0 8
67562: PUSH
67563: LD_VAR 0 2
67567: PPUSH
67568: CALL_OW 251
67572: ST_TO_ADDR
// if not x or not y then
67573: LD_VAR 0 7
67577: NOT
67578: IFTRUE 67587
67580: PUSH
67581: LD_VAR 0 8
67585: NOT
67586: OR
67587: IFFALSE 67591
// exit ;
67589: GO 67998
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67591: LD_ADDR_VAR 0 6
67595: PUSH
67596: LD_VAR 0 7
67600: PPUSH
67601: LD_INT 0
67603: PPUSH
67604: LD_INT 4
67606: PPUSH
67607: CALL_OW 272
67611: PUSH
67612: LD_VAR 0 8
67616: PPUSH
67617: LD_INT 0
67619: PPUSH
67620: LD_INT 4
67622: PPUSH
67623: CALL_OW 273
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_VAR 0 7
67636: PPUSH
67637: LD_INT 1
67639: PPUSH
67640: LD_INT 4
67642: PPUSH
67643: CALL_OW 272
67647: PUSH
67648: LD_VAR 0 8
67652: PPUSH
67653: LD_INT 1
67655: PPUSH
67656: LD_INT 4
67658: PPUSH
67659: CALL_OW 273
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_VAR 0 7
67672: PPUSH
67673: LD_INT 2
67675: PPUSH
67676: LD_INT 4
67678: PPUSH
67679: CALL_OW 272
67683: PUSH
67684: LD_VAR 0 8
67688: PPUSH
67689: LD_INT 2
67691: PPUSH
67692: LD_INT 4
67694: PPUSH
67695: CALL_OW 273
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_VAR 0 7
67708: PPUSH
67709: LD_INT 3
67711: PPUSH
67712: LD_INT 4
67714: PPUSH
67715: CALL_OW 272
67719: PUSH
67720: LD_VAR 0 8
67724: PPUSH
67725: LD_INT 3
67727: PPUSH
67728: LD_INT 4
67730: PPUSH
67731: CALL_OW 273
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_VAR 0 7
67744: PPUSH
67745: LD_INT 4
67747: PPUSH
67748: LD_INT 4
67750: PPUSH
67751: CALL_OW 272
67755: PUSH
67756: LD_VAR 0 8
67760: PPUSH
67761: LD_INT 4
67763: PPUSH
67764: LD_INT 4
67766: PPUSH
67767: CALL_OW 273
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_VAR 0 7
67780: PPUSH
67781: LD_INT 5
67783: PPUSH
67784: LD_INT 4
67786: PPUSH
67787: CALL_OW 272
67791: PUSH
67792: LD_VAR 0 8
67796: PPUSH
67797: LD_INT 5
67799: PPUSH
67800: LD_INT 4
67802: PPUSH
67803: CALL_OW 273
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: ST_TO_ADDR
// for i = tmp downto 1 do
67820: LD_ADDR_VAR 0 4
67824: PUSH
67825: DOUBLE
67826: LD_VAR 0 6
67830: INC
67831: ST_TO_ADDR
67832: LD_INT 1
67834: PUSH
67835: FOR_DOWNTO
67836: IFFALSE 67939
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67838: LD_VAR 0 6
67842: PUSH
67843: LD_VAR 0 4
67847: ARRAY
67848: PUSH
67849: LD_INT 1
67851: ARRAY
67852: PPUSH
67853: LD_VAR 0 6
67857: PUSH
67858: LD_VAR 0 4
67862: ARRAY
67863: PUSH
67864: LD_INT 2
67866: ARRAY
67867: PPUSH
67868: CALL_OW 488
67872: NOT
67873: IFTRUE 67915
67875: PUSH
67876: LD_VAR 0 6
67880: PUSH
67881: LD_VAR 0 4
67885: ARRAY
67886: PUSH
67887: LD_INT 1
67889: ARRAY
67890: PPUSH
67891: LD_VAR 0 6
67895: PUSH
67896: LD_VAR 0 4
67900: ARRAY
67901: PUSH
67902: LD_INT 2
67904: ARRAY
67905: PPUSH
67906: CALL_OW 428
67910: PUSH
67911: LD_INT 0
67913: NONEQUAL
67914: OR
67915: IFFALSE 67937
// tmp := Delete ( tmp , i ) ;
67917: LD_ADDR_VAR 0 6
67921: PUSH
67922: LD_VAR 0 6
67926: PPUSH
67927: LD_VAR 0 4
67931: PPUSH
67932: CALL_OW 3
67936: ST_TO_ADDR
67937: GO 67835
67939: POP
67940: POP
// j := GetClosestHex ( unit , tmp ) ;
67941: LD_ADDR_VAR 0 5
67945: PUSH
67946: LD_VAR 0 1
67950: PPUSH
67951: LD_VAR 0 6
67955: PPUSH
67956: CALL 67233 0 2
67960: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67961: LD_VAR 0 1
67965: PPUSH
67966: LD_VAR 0 5
67970: PUSH
67971: LD_INT 1
67973: ARRAY
67974: PPUSH
67975: LD_VAR 0 5
67979: PUSH
67980: LD_INT 2
67982: ARRAY
67983: PPUSH
67984: CALL_OW 111
// result := j ;
67988: LD_ADDR_VAR 0 3
67992: PUSH
67993: LD_VAR 0 5
67997: ST_TO_ADDR
// end ;
67998: LD_VAR 0 3
68002: RET
// export function PrepareApemanSoldier ( ) ; begin
68003: LD_INT 0
68005: PPUSH
// uc_nation := 0 ;
68006: LD_ADDR_OWVAR 21
68010: PUSH
68011: LD_INT 0
68013: ST_TO_ADDR
// hc_sex := sex_male ;
68014: LD_ADDR_OWVAR 27
68018: PUSH
68019: LD_INT 1
68021: ST_TO_ADDR
// hc_name :=  ;
68022: LD_ADDR_OWVAR 26
68026: PUSH
68027: LD_STRING 
68029: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68030: LD_ADDR_OWVAR 28
68034: PUSH
68035: LD_INT 15
68037: ST_TO_ADDR
// hc_gallery :=  ;
68038: LD_ADDR_OWVAR 33
68042: PUSH
68043: LD_STRING 
68045: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68046: LD_ADDR_OWVAR 31
68050: PUSH
68051: LD_INT 0
68053: PPUSH
68054: LD_INT 3
68056: PPUSH
68057: CALL_OW 12
68061: PUSH
68062: LD_INT 0
68064: PPUSH
68065: LD_INT 3
68067: PPUSH
68068: CALL_OW 12
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68085: LD_ADDR_OWVAR 29
68089: PUSH
68090: LD_INT 10
68092: PUSH
68093: LD_INT 12
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: ST_TO_ADDR
// end ;
68100: LD_VAR 0 1
68104: RET
// export function PrepareApemanEngineer ( ) ; begin
68105: LD_INT 0
68107: PPUSH
// uc_nation := 0 ;
68108: LD_ADDR_OWVAR 21
68112: PUSH
68113: LD_INT 0
68115: ST_TO_ADDR
// hc_sex := sex_male ;
68116: LD_ADDR_OWVAR 27
68120: PUSH
68121: LD_INT 1
68123: ST_TO_ADDR
// hc_name :=  ;
68124: LD_ADDR_OWVAR 26
68128: PUSH
68129: LD_STRING 
68131: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68132: LD_ADDR_OWVAR 28
68136: PUSH
68137: LD_INT 16
68139: ST_TO_ADDR
// hc_gallery :=  ;
68140: LD_ADDR_OWVAR 33
68144: PUSH
68145: LD_STRING 
68147: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68148: LD_ADDR_OWVAR 31
68152: PUSH
68153: LD_INT 0
68155: PPUSH
68156: LD_INT 3
68158: PPUSH
68159: CALL_OW 12
68163: PUSH
68164: LD_INT 0
68166: PPUSH
68167: LD_INT 3
68169: PPUSH
68170: CALL_OW 12
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68187: LD_ADDR_OWVAR 29
68191: PUSH
68192: LD_INT 10
68194: PUSH
68195: LD_INT 12
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: ST_TO_ADDR
// end ;
68202: LD_VAR 0 1
68206: RET
// export function PrepareApeman ( agressivity ) ; begin
68207: LD_INT 0
68209: PPUSH
// uc_side := 0 ;
68210: LD_ADDR_OWVAR 20
68214: PUSH
68215: LD_INT 0
68217: ST_TO_ADDR
// uc_nation := 0 ;
68218: LD_ADDR_OWVAR 21
68222: PUSH
68223: LD_INT 0
68225: ST_TO_ADDR
// hc_sex := sex_male ;
68226: LD_ADDR_OWVAR 27
68230: PUSH
68231: LD_INT 1
68233: ST_TO_ADDR
// hc_class := class_apeman ;
68234: LD_ADDR_OWVAR 28
68238: PUSH
68239: LD_INT 12
68241: ST_TO_ADDR
// hc_gallery :=  ;
68242: LD_ADDR_OWVAR 33
68246: PUSH
68247: LD_STRING 
68249: ST_TO_ADDR
// hc_name :=  ;
68250: LD_ADDR_OWVAR 26
68254: PUSH
68255: LD_STRING 
68257: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68258: LD_ADDR_OWVAR 29
68262: PUSH
68263: LD_INT 10
68265: PUSH
68266: LD_INT 12
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// if agressivity = 0 then
68273: LD_VAR 0 1
68277: PUSH
68278: LD_INT 0
68280: EQUAL
68281: IFFALSE 68293
// hc_agressivity := 0 else
68283: LD_ADDR_OWVAR 35
68287: PUSH
68288: LD_INT 0
68290: ST_TO_ADDR
68291: GO 68314
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68293: LD_ADDR_OWVAR 35
68297: PUSH
68298: LD_VAR 0 1
68302: NEG
68303: PPUSH
68304: LD_VAR 0 1
68308: PPUSH
68309: CALL_OW 12
68313: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68314: LD_ADDR_OWVAR 31
68318: PUSH
68319: LD_INT 0
68321: PPUSH
68322: LD_INT 3
68324: PPUSH
68325: CALL_OW 12
68329: PUSH
68330: LD_INT 0
68332: PPUSH
68333: LD_INT 3
68335: PPUSH
68336: CALL_OW 12
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: ST_TO_ADDR
// end ;
68353: LD_VAR 0 2
68357: RET
// export function PrepareTiger ( agressivity ) ; begin
68358: LD_INT 0
68360: PPUSH
// uc_side := 0 ;
68361: LD_ADDR_OWVAR 20
68365: PUSH
68366: LD_INT 0
68368: ST_TO_ADDR
// uc_nation := 0 ;
68369: LD_ADDR_OWVAR 21
68373: PUSH
68374: LD_INT 0
68376: ST_TO_ADDR
// InitHc ;
68377: CALL_OW 19
// hc_class := class_tiger ;
68381: LD_ADDR_OWVAR 28
68385: PUSH
68386: LD_INT 14
68388: ST_TO_ADDR
// hc_gallery :=  ;
68389: LD_ADDR_OWVAR 33
68393: PUSH
68394: LD_STRING 
68396: ST_TO_ADDR
// hc_name :=  ;
68397: LD_ADDR_OWVAR 26
68401: PUSH
68402: LD_STRING 
68404: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68405: LD_ADDR_OWVAR 35
68409: PUSH
68410: LD_VAR 0 1
68414: NEG
68415: PPUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: CALL_OW 12
68425: ST_TO_ADDR
// end ;
68426: LD_VAR 0 2
68430: RET
// export function PrepareEnchidna ( ) ; begin
68431: LD_INT 0
68433: PPUSH
// uc_side := 0 ;
68434: LD_ADDR_OWVAR 20
68438: PUSH
68439: LD_INT 0
68441: ST_TO_ADDR
// uc_nation := 0 ;
68442: LD_ADDR_OWVAR 21
68446: PUSH
68447: LD_INT 0
68449: ST_TO_ADDR
// InitHc ;
68450: CALL_OW 19
// hc_class := class_baggie ;
68454: LD_ADDR_OWVAR 28
68458: PUSH
68459: LD_INT 13
68461: ST_TO_ADDR
// hc_gallery :=  ;
68462: LD_ADDR_OWVAR 33
68466: PUSH
68467: LD_STRING 
68469: ST_TO_ADDR
// hc_name :=  ;
68470: LD_ADDR_OWVAR 26
68474: PUSH
68475: LD_STRING 
68477: ST_TO_ADDR
// end ;
68478: LD_VAR 0 1
68482: RET
// export function PrepareFrog ( ) ; begin
68483: LD_INT 0
68485: PPUSH
// uc_side := 0 ;
68486: LD_ADDR_OWVAR 20
68490: PUSH
68491: LD_INT 0
68493: ST_TO_ADDR
// uc_nation := 0 ;
68494: LD_ADDR_OWVAR 21
68498: PUSH
68499: LD_INT 0
68501: ST_TO_ADDR
// InitHc ;
68502: CALL_OW 19
// hc_class := class_frog ;
68506: LD_ADDR_OWVAR 28
68510: PUSH
68511: LD_INT 19
68513: ST_TO_ADDR
// hc_gallery :=  ;
68514: LD_ADDR_OWVAR 33
68518: PUSH
68519: LD_STRING 
68521: ST_TO_ADDR
// hc_name :=  ;
68522: LD_ADDR_OWVAR 26
68526: PUSH
68527: LD_STRING 
68529: ST_TO_ADDR
// end ;
68530: LD_VAR 0 1
68534: RET
// export function PrepareFish ( ) ; begin
68535: LD_INT 0
68537: PPUSH
// uc_side := 0 ;
68538: LD_ADDR_OWVAR 20
68542: PUSH
68543: LD_INT 0
68545: ST_TO_ADDR
// uc_nation := 0 ;
68546: LD_ADDR_OWVAR 21
68550: PUSH
68551: LD_INT 0
68553: ST_TO_ADDR
// InitHc ;
68554: CALL_OW 19
// hc_class := class_fish ;
68558: LD_ADDR_OWVAR 28
68562: PUSH
68563: LD_INT 20
68565: ST_TO_ADDR
// hc_gallery :=  ;
68566: LD_ADDR_OWVAR 33
68570: PUSH
68571: LD_STRING 
68573: ST_TO_ADDR
// hc_name :=  ;
68574: LD_ADDR_OWVAR 26
68578: PUSH
68579: LD_STRING 
68581: ST_TO_ADDR
// end ;
68582: LD_VAR 0 1
68586: RET
// export function PrepareBird ( ) ; begin
68587: LD_INT 0
68589: PPUSH
// uc_side := 0 ;
68590: LD_ADDR_OWVAR 20
68594: PUSH
68595: LD_INT 0
68597: ST_TO_ADDR
// uc_nation := 0 ;
68598: LD_ADDR_OWVAR 21
68602: PUSH
68603: LD_INT 0
68605: ST_TO_ADDR
// InitHc ;
68606: CALL_OW 19
// hc_class := class_phororhacos ;
68610: LD_ADDR_OWVAR 28
68614: PUSH
68615: LD_INT 18
68617: ST_TO_ADDR
// hc_gallery :=  ;
68618: LD_ADDR_OWVAR 33
68622: PUSH
68623: LD_STRING 
68625: ST_TO_ADDR
// hc_name :=  ;
68626: LD_ADDR_OWVAR 26
68630: PUSH
68631: LD_STRING 
68633: ST_TO_ADDR
// end ;
68634: LD_VAR 0 1
68638: RET
// export function PrepareHorse ( ) ; begin
68639: LD_INT 0
68641: PPUSH
// uc_side := 0 ;
68642: LD_ADDR_OWVAR 20
68646: PUSH
68647: LD_INT 0
68649: ST_TO_ADDR
// uc_nation := 0 ;
68650: LD_ADDR_OWVAR 21
68654: PUSH
68655: LD_INT 0
68657: ST_TO_ADDR
// InitHc ;
68658: CALL_OW 19
// hc_class := class_horse ;
68662: LD_ADDR_OWVAR 28
68666: PUSH
68667: LD_INT 21
68669: ST_TO_ADDR
// hc_gallery :=  ;
68670: LD_ADDR_OWVAR 33
68674: PUSH
68675: LD_STRING 
68677: ST_TO_ADDR
// hc_name :=  ;
68678: LD_ADDR_OWVAR 26
68682: PUSH
68683: LD_STRING 
68685: ST_TO_ADDR
// end ;
68686: LD_VAR 0 1
68690: RET
// export function PrepareMastodont ( ) ; begin
68691: LD_INT 0
68693: PPUSH
// uc_side := 0 ;
68694: LD_ADDR_OWVAR 20
68698: PUSH
68699: LD_INT 0
68701: ST_TO_ADDR
// uc_nation := 0 ;
68702: LD_ADDR_OWVAR 21
68706: PUSH
68707: LD_INT 0
68709: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68710: LD_ADDR_OWVAR 37
68714: PUSH
68715: LD_INT 31
68717: ST_TO_ADDR
// vc_control := control_rider ;
68718: LD_ADDR_OWVAR 38
68722: PUSH
68723: LD_INT 4
68725: ST_TO_ADDR
// end ;
68726: LD_VAR 0 1
68730: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68731: LD_INT 0
68733: PPUSH
68734: PPUSH
68735: PPUSH
// uc_side = 0 ;
68736: LD_ADDR_OWVAR 20
68740: PUSH
68741: LD_INT 0
68743: ST_TO_ADDR
// uc_nation = 0 ;
68744: LD_ADDR_OWVAR 21
68748: PUSH
68749: LD_INT 0
68751: ST_TO_ADDR
// InitHc_All ( ) ;
68752: CALL_OW 584
// InitVc ;
68756: CALL_OW 20
// if mastodonts then
68760: LD_VAR 0 6
68764: IFFALSE 68831
// for i = 1 to mastodonts do
68766: LD_ADDR_VAR 0 11
68770: PUSH
68771: DOUBLE
68772: LD_INT 1
68774: DEC
68775: ST_TO_ADDR
68776: LD_VAR 0 6
68780: PUSH
68781: FOR_TO
68782: IFFALSE 68829
// begin vc_chassis := 31 ;
68784: LD_ADDR_OWVAR 37
68788: PUSH
68789: LD_INT 31
68791: ST_TO_ADDR
// vc_control := control_rider ;
68792: LD_ADDR_OWVAR 38
68796: PUSH
68797: LD_INT 4
68799: ST_TO_ADDR
// animal := CreateVehicle ;
68800: LD_ADDR_VAR 0 12
68804: PUSH
68805: CALL_OW 45
68809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68810: LD_VAR 0 12
68814: PPUSH
68815: LD_VAR 0 8
68819: PPUSH
68820: LD_INT 0
68822: PPUSH
68823: CALL 70973 0 3
// end ;
68827: GO 68781
68829: POP
68830: POP
// if horses then
68831: LD_VAR 0 5
68835: IFFALSE 68902
// for i = 1 to horses do
68837: LD_ADDR_VAR 0 11
68841: PUSH
68842: DOUBLE
68843: LD_INT 1
68845: DEC
68846: ST_TO_ADDR
68847: LD_VAR 0 5
68851: PUSH
68852: FOR_TO
68853: IFFALSE 68900
// begin hc_class := 21 ;
68855: LD_ADDR_OWVAR 28
68859: PUSH
68860: LD_INT 21
68862: ST_TO_ADDR
// hc_gallery :=  ;
68863: LD_ADDR_OWVAR 33
68867: PUSH
68868: LD_STRING 
68870: ST_TO_ADDR
// animal := CreateHuman ;
68871: LD_ADDR_VAR 0 12
68875: PUSH
68876: CALL_OW 44
68880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68881: LD_VAR 0 12
68885: PPUSH
68886: LD_VAR 0 8
68890: PPUSH
68891: LD_INT 0
68893: PPUSH
68894: CALL 70973 0 3
// end ;
68898: GO 68852
68900: POP
68901: POP
// if birds then
68902: LD_VAR 0 1
68906: IFFALSE 68973
// for i = 1 to birds do
68908: LD_ADDR_VAR 0 11
68912: PUSH
68913: DOUBLE
68914: LD_INT 1
68916: DEC
68917: ST_TO_ADDR
68918: LD_VAR 0 1
68922: PUSH
68923: FOR_TO
68924: IFFALSE 68971
// begin hc_class := 18 ;
68926: LD_ADDR_OWVAR 28
68930: PUSH
68931: LD_INT 18
68933: ST_TO_ADDR
// hc_gallery =  ;
68934: LD_ADDR_OWVAR 33
68938: PUSH
68939: LD_STRING 
68941: ST_TO_ADDR
// animal := CreateHuman ;
68942: LD_ADDR_VAR 0 12
68946: PUSH
68947: CALL_OW 44
68951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68952: LD_VAR 0 12
68956: PPUSH
68957: LD_VAR 0 8
68961: PPUSH
68962: LD_INT 0
68964: PPUSH
68965: CALL 70973 0 3
// end ;
68969: GO 68923
68971: POP
68972: POP
// if tigers then
68973: LD_VAR 0 2
68977: IFFALSE 69061
// for i = 1 to tigers do
68979: LD_ADDR_VAR 0 11
68983: PUSH
68984: DOUBLE
68985: LD_INT 1
68987: DEC
68988: ST_TO_ADDR
68989: LD_VAR 0 2
68993: PUSH
68994: FOR_TO
68995: IFFALSE 69059
// begin hc_class = class_tiger ;
68997: LD_ADDR_OWVAR 28
69001: PUSH
69002: LD_INT 14
69004: ST_TO_ADDR
// hc_gallery =  ;
69005: LD_ADDR_OWVAR 33
69009: PUSH
69010: LD_STRING 
69012: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69013: LD_ADDR_OWVAR 35
69017: PUSH
69018: LD_INT 7
69020: NEG
69021: PPUSH
69022: LD_INT 7
69024: PPUSH
69025: CALL_OW 12
69029: ST_TO_ADDR
// animal := CreateHuman ;
69030: LD_ADDR_VAR 0 12
69034: PUSH
69035: CALL_OW 44
69039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69040: LD_VAR 0 12
69044: PPUSH
69045: LD_VAR 0 8
69049: PPUSH
69050: LD_INT 0
69052: PPUSH
69053: CALL 70973 0 3
// end ;
69057: GO 68994
69059: POP
69060: POP
// if apemans then
69061: LD_VAR 0 3
69065: IFFALSE 69188
// for i = 1 to apemans do
69067: LD_ADDR_VAR 0 11
69071: PUSH
69072: DOUBLE
69073: LD_INT 1
69075: DEC
69076: ST_TO_ADDR
69077: LD_VAR 0 3
69081: PUSH
69082: FOR_TO
69083: IFFALSE 69186
// begin hc_class = class_apeman ;
69085: LD_ADDR_OWVAR 28
69089: PUSH
69090: LD_INT 12
69092: ST_TO_ADDR
// hc_gallery =  ;
69093: LD_ADDR_OWVAR 33
69097: PUSH
69098: LD_STRING 
69100: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69101: LD_ADDR_OWVAR 35
69105: PUSH
69106: LD_INT 2
69108: NEG
69109: PPUSH
69110: LD_INT 2
69112: PPUSH
69113: CALL_OW 12
69117: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69118: LD_ADDR_OWVAR 31
69122: PUSH
69123: LD_INT 1
69125: PPUSH
69126: LD_INT 3
69128: PPUSH
69129: CALL_OW 12
69133: PUSH
69134: LD_INT 1
69136: PPUSH
69137: LD_INT 3
69139: PPUSH
69140: CALL_OW 12
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: ST_TO_ADDR
// animal := CreateHuman ;
69157: LD_ADDR_VAR 0 12
69161: PUSH
69162: CALL_OW 44
69166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69167: LD_VAR 0 12
69171: PPUSH
69172: LD_VAR 0 8
69176: PPUSH
69177: LD_INT 0
69179: PPUSH
69180: CALL 70973 0 3
// end ;
69184: GO 69082
69186: POP
69187: POP
// if enchidnas then
69188: LD_VAR 0 4
69192: IFFALSE 69259
// for i = 1 to enchidnas do
69194: LD_ADDR_VAR 0 11
69198: PUSH
69199: DOUBLE
69200: LD_INT 1
69202: DEC
69203: ST_TO_ADDR
69204: LD_VAR 0 4
69208: PUSH
69209: FOR_TO
69210: IFFALSE 69257
// begin hc_class = 13 ;
69212: LD_ADDR_OWVAR 28
69216: PUSH
69217: LD_INT 13
69219: ST_TO_ADDR
// hc_gallery =  ;
69220: LD_ADDR_OWVAR 33
69224: PUSH
69225: LD_STRING 
69227: ST_TO_ADDR
// animal := CreateHuman ;
69228: LD_ADDR_VAR 0 12
69232: PUSH
69233: CALL_OW 44
69237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69238: LD_VAR 0 12
69242: PPUSH
69243: LD_VAR 0 8
69247: PPUSH
69248: LD_INT 0
69250: PPUSH
69251: CALL 70973 0 3
// end ;
69255: GO 69209
69257: POP
69258: POP
// if fishes then
69259: LD_VAR 0 7
69263: IFFALSE 69330
// for i = 1 to fishes do
69265: LD_ADDR_VAR 0 11
69269: PUSH
69270: DOUBLE
69271: LD_INT 1
69273: DEC
69274: ST_TO_ADDR
69275: LD_VAR 0 7
69279: PUSH
69280: FOR_TO
69281: IFFALSE 69328
// begin hc_class = 20 ;
69283: LD_ADDR_OWVAR 28
69287: PUSH
69288: LD_INT 20
69290: ST_TO_ADDR
// hc_gallery =  ;
69291: LD_ADDR_OWVAR 33
69295: PUSH
69296: LD_STRING 
69298: ST_TO_ADDR
// animal := CreateHuman ;
69299: LD_ADDR_VAR 0 12
69303: PUSH
69304: CALL_OW 44
69308: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69309: LD_VAR 0 12
69313: PPUSH
69314: LD_VAR 0 9
69318: PPUSH
69319: LD_INT 0
69321: PPUSH
69322: CALL 70973 0 3
// end ;
69326: GO 69280
69328: POP
69329: POP
// end ;
69330: LD_VAR 0 10
69334: RET
// export function WantHeal ( sci , unit ) ; begin
69335: LD_INT 0
69337: PPUSH
// if GetTaskList ( sci ) > 0 then
69338: LD_VAR 0 1
69342: PPUSH
69343: CALL_OW 437
69347: PUSH
69348: LD_INT 0
69350: GREATER
69351: IFFALSE 69423
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL_OW 437
69362: PUSH
69363: LD_INT 1
69365: ARRAY
69366: PUSH
69367: LD_INT 1
69369: ARRAY
69370: PUSH
69371: LD_STRING l
69373: EQUAL
69374: IFFALSE 69401
69376: PUSH
69377: LD_VAR 0 1
69381: PPUSH
69382: CALL_OW 437
69386: PUSH
69387: LD_INT 1
69389: ARRAY
69390: PUSH
69391: LD_INT 4
69393: ARRAY
69394: PUSH
69395: LD_VAR 0 2
69399: EQUAL
69400: AND
69401: IFFALSE 69413
// result := true else
69403: LD_ADDR_VAR 0 3
69407: PUSH
69408: LD_INT 1
69410: ST_TO_ADDR
69411: GO 69421
// result := false ;
69413: LD_ADDR_VAR 0 3
69417: PUSH
69418: LD_INT 0
69420: ST_TO_ADDR
// end else
69421: GO 69431
// result := false ;
69423: LD_ADDR_VAR 0 3
69427: PUSH
69428: LD_INT 0
69430: ST_TO_ADDR
// end ;
69431: LD_VAR 0 3
69435: RET
// export function HealTarget ( sci ) ; begin
69436: LD_INT 0
69438: PPUSH
// if not sci then
69439: LD_VAR 0 1
69443: NOT
69444: IFFALSE 69448
// exit ;
69446: GO 69513
// result := 0 ;
69448: LD_ADDR_VAR 0 2
69452: PUSH
69453: LD_INT 0
69455: ST_TO_ADDR
// if GetTaskList ( sci ) then
69456: LD_VAR 0 1
69460: PPUSH
69461: CALL_OW 437
69465: IFFALSE 69513
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69467: LD_VAR 0 1
69471: PPUSH
69472: CALL_OW 437
69476: PUSH
69477: LD_INT 1
69479: ARRAY
69480: PUSH
69481: LD_INT 1
69483: ARRAY
69484: PUSH
69485: LD_STRING l
69487: EQUAL
69488: IFFALSE 69513
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69490: LD_ADDR_VAR 0 2
69494: PUSH
69495: LD_VAR 0 1
69499: PPUSH
69500: CALL_OW 437
69504: PUSH
69505: LD_INT 1
69507: ARRAY
69508: PUSH
69509: LD_INT 4
69511: ARRAY
69512: ST_TO_ADDR
// end ;
69513: LD_VAR 0 2
69517: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69518: LD_INT 0
69520: PPUSH
69521: PPUSH
69522: PPUSH
69523: PPUSH
// if not base_units then
69524: LD_VAR 0 1
69528: NOT
69529: IFFALSE 69533
// exit ;
69531: GO 69620
// result := false ;
69533: LD_ADDR_VAR 0 2
69537: PUSH
69538: LD_INT 0
69540: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69541: LD_ADDR_VAR 0 5
69545: PUSH
69546: LD_VAR 0 1
69550: PPUSH
69551: LD_INT 21
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PPUSH
69561: CALL_OW 72
69565: ST_TO_ADDR
// if not tmp then
69566: LD_VAR 0 5
69570: NOT
69571: IFFALSE 69575
// exit ;
69573: GO 69620
// for i in tmp do
69575: LD_ADDR_VAR 0 3
69579: PUSH
69580: LD_VAR 0 5
69584: PUSH
69585: FOR_IN
69586: IFFALSE 69618
// begin result := EnemyInRange ( i , 22 ) ;
69588: LD_ADDR_VAR 0 2
69592: PUSH
69593: LD_VAR 0 3
69597: PPUSH
69598: LD_INT 22
69600: PPUSH
69601: CALL 67035 0 2
69605: ST_TO_ADDR
// if result then
69606: LD_VAR 0 2
69610: IFFALSE 69616
// exit ;
69612: POP
69613: POP
69614: GO 69620
// end ;
69616: GO 69585
69618: POP
69619: POP
// end ;
69620: LD_VAR 0 2
69624: RET
// export function FilterByTag ( units , tag ) ; begin
69625: LD_INT 0
69627: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69628: LD_ADDR_VAR 0 3
69632: PUSH
69633: LD_VAR 0 1
69637: PPUSH
69638: LD_INT 120
69640: PUSH
69641: LD_VAR 0 2
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PPUSH
69650: CALL_OW 72
69654: ST_TO_ADDR
// end ;
69655: LD_VAR 0 3
69659: RET
// export function IsDriver ( un ) ; begin
69660: LD_INT 0
69662: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69663: LD_ADDR_VAR 0 2
69667: PUSH
69668: LD_VAR 0 1
69672: PUSH
69673: LD_INT 55
69675: PUSH
69676: EMPTY
69677: LIST
69678: PPUSH
69679: CALL_OW 69
69683: IN
69684: ST_TO_ADDR
// end ;
69685: LD_VAR 0 2
69689: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69690: LD_INT 0
69692: PPUSH
69693: PPUSH
// list := [ ] ;
69694: LD_ADDR_VAR 0 5
69698: PUSH
69699: EMPTY
69700: ST_TO_ADDR
// case d of 0 :
69701: LD_VAR 0 3
69705: PUSH
69706: LD_INT 0
69708: DOUBLE
69709: EQUAL
69710: IFTRUE 69714
69712: GO 69847
69714: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69715: LD_ADDR_VAR 0 5
69719: PUSH
69720: LD_VAR 0 1
69724: PUSH
69725: LD_INT 4
69727: MINUS
69728: PUSH
69729: LD_VAR 0 2
69733: PUSH
69734: LD_INT 4
69736: MINUS
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: PUSH
69746: LD_VAR 0 1
69750: PUSH
69751: LD_INT 3
69753: MINUS
69754: PUSH
69755: LD_VAR 0 2
69759: PUSH
69760: LD_INT 1
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: PUSH
69768: LD_VAR 0 1
69772: PUSH
69773: LD_INT 4
69775: PLUS
69776: PUSH
69777: LD_VAR 0 2
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: PUSH
69790: LD_VAR 0 1
69794: PUSH
69795: LD_INT 3
69797: PLUS
69798: PUSH
69799: LD_VAR 0 2
69803: PUSH
69804: LD_INT 3
69806: PLUS
69807: PUSH
69808: LD_INT 5
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: LIST
69815: PUSH
69816: LD_VAR 0 1
69820: PUSH
69821: LD_VAR 0 2
69825: PUSH
69826: LD_INT 4
69828: PLUS
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: LIST
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: ST_TO_ADDR
// end ; 1 :
69845: GO 70545
69847: LD_INT 1
69849: DOUBLE
69850: EQUAL
69851: IFTRUE 69855
69853: GO 69988
69855: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69856: LD_ADDR_VAR 0 5
69860: PUSH
69861: LD_VAR 0 1
69865: PUSH
69866: LD_VAR 0 2
69870: PUSH
69871: LD_INT 4
69873: MINUS
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: PUSH
69883: LD_VAR 0 1
69887: PUSH
69888: LD_INT 3
69890: MINUS
69891: PUSH
69892: LD_VAR 0 2
69896: PUSH
69897: LD_INT 3
69899: MINUS
69900: PUSH
69901: LD_INT 2
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: PUSH
69909: LD_VAR 0 1
69913: PUSH
69914: LD_INT 4
69916: MINUS
69917: PUSH
69918: LD_VAR 0 2
69922: PUSH
69923: LD_INT 1
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: PUSH
69931: LD_VAR 0 1
69935: PUSH
69936: LD_VAR 0 2
69940: PUSH
69941: LD_INT 3
69943: PLUS
69944: PUSH
69945: LD_INT 0
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: PUSH
69953: LD_VAR 0 1
69957: PUSH
69958: LD_INT 4
69960: PLUS
69961: PUSH
69962: LD_VAR 0 2
69966: PUSH
69967: LD_INT 4
69969: PLUS
69970: PUSH
69971: LD_INT 5
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: ST_TO_ADDR
// end ; 2 :
69986: GO 70545
69988: LD_INT 2
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 69996
69994: GO 70125
69996: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69997: LD_ADDR_VAR 0 5
70001: PUSH
70002: LD_VAR 0 1
70006: PUSH
70007: LD_VAR 0 2
70011: PUSH
70012: LD_INT 3
70014: MINUS
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: PUSH
70024: LD_VAR 0 1
70028: PUSH
70029: LD_INT 4
70031: PLUS
70032: PUSH
70033: LD_VAR 0 2
70037: PUSH
70038: LD_INT 4
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: PUSH
70046: LD_VAR 0 1
70050: PUSH
70051: LD_VAR 0 2
70055: PUSH
70056: LD_INT 4
70058: PLUS
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: PUSH
70068: LD_VAR 0 1
70072: PUSH
70073: LD_INT 3
70075: MINUS
70076: PUSH
70077: LD_VAR 0 2
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: PUSH
70090: LD_VAR 0 1
70094: PUSH
70095: LD_INT 4
70097: MINUS
70098: PUSH
70099: LD_VAR 0 2
70103: PUSH
70104: LD_INT 4
70106: MINUS
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: LIST
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: ST_TO_ADDR
// end ; 3 :
70123: GO 70545
70125: LD_INT 3
70127: DOUBLE
70128: EQUAL
70129: IFTRUE 70133
70131: GO 70266
70133: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70134: LD_ADDR_VAR 0 5
70138: PUSH
70139: LD_VAR 0 1
70143: PUSH
70144: LD_INT 3
70146: PLUS
70147: PUSH
70148: LD_VAR 0 2
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: PUSH
70161: LD_VAR 0 1
70165: PUSH
70166: LD_INT 4
70168: PLUS
70169: PUSH
70170: LD_VAR 0 2
70174: PUSH
70175: LD_INT 4
70177: PLUS
70178: PUSH
70179: LD_INT 5
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: LIST
70186: PUSH
70187: LD_VAR 0 1
70191: PUSH
70192: LD_INT 4
70194: MINUS
70195: PUSH
70196: LD_VAR 0 2
70200: PUSH
70201: LD_INT 1
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: LIST
70208: PUSH
70209: LD_VAR 0 1
70213: PUSH
70214: LD_VAR 0 2
70218: PUSH
70219: LD_INT 4
70221: MINUS
70222: PUSH
70223: LD_INT 3
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: LIST
70230: PUSH
70231: LD_VAR 0 1
70235: PUSH
70236: LD_INT 3
70238: MINUS
70239: PUSH
70240: LD_VAR 0 2
70244: PUSH
70245: LD_INT 3
70247: MINUS
70248: PUSH
70249: LD_INT 2
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: ST_TO_ADDR
// end ; 4 :
70264: GO 70545
70266: LD_INT 4
70268: DOUBLE
70269: EQUAL
70270: IFTRUE 70274
70272: GO 70407
70274: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70275: LD_ADDR_VAR 0 5
70279: PUSH
70280: LD_VAR 0 1
70284: PUSH
70285: LD_VAR 0 2
70289: PUSH
70290: LD_INT 4
70292: PLUS
70293: PUSH
70294: LD_INT 0
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: LIST
70301: PUSH
70302: LD_VAR 0 1
70306: PUSH
70307: LD_INT 3
70309: PLUS
70310: PUSH
70311: LD_VAR 0 2
70315: PUSH
70316: LD_INT 3
70318: PLUS
70319: PUSH
70320: LD_INT 5
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: PUSH
70328: LD_VAR 0 1
70332: PUSH
70333: LD_INT 4
70335: PLUS
70336: PUSH
70337: LD_VAR 0 2
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: PUSH
70350: LD_VAR 0 1
70354: PUSH
70355: LD_VAR 0 2
70359: PUSH
70360: LD_INT 3
70362: MINUS
70363: PUSH
70364: LD_INT 3
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: PUSH
70372: LD_VAR 0 1
70376: PUSH
70377: LD_INT 4
70379: MINUS
70380: PUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_INT 4
70388: MINUS
70389: PUSH
70390: LD_INT 2
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: LIST
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: ST_TO_ADDR
// end ; 5 :
70405: GO 70545
70407: LD_INT 5
70409: DOUBLE
70410: EQUAL
70411: IFTRUE 70415
70413: GO 70544
70415: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70416: LD_ADDR_VAR 0 5
70420: PUSH
70421: LD_VAR 0 1
70425: PUSH
70426: LD_INT 4
70428: MINUS
70429: PUSH
70430: LD_VAR 0 2
70434: PUSH
70435: LD_INT 1
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 1
70447: PUSH
70448: LD_VAR 0 2
70452: PUSH
70453: LD_INT 4
70455: MINUS
70456: PUSH
70457: LD_INT 3
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: PUSH
70465: LD_VAR 0 1
70469: PUSH
70470: LD_INT 4
70472: PLUS
70473: PUSH
70474: LD_VAR 0 2
70478: PUSH
70479: LD_INT 4
70481: PLUS
70482: PUSH
70483: LD_INT 5
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: PUSH
70491: LD_VAR 0 1
70495: PUSH
70496: LD_INT 3
70498: PLUS
70499: PUSH
70500: LD_VAR 0 2
70504: PUSH
70505: LD_INT 4
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: PUSH
70513: LD_VAR 0 1
70517: PUSH
70518: LD_VAR 0 2
70522: PUSH
70523: LD_INT 3
70525: PLUS
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: LIST
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: ST_TO_ADDR
// end ; end ;
70542: GO 70545
70544: POP
// result := list ;
70545: LD_ADDR_VAR 0 4
70549: PUSH
70550: LD_VAR 0 5
70554: ST_TO_ADDR
// end ;
70555: LD_VAR 0 4
70559: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70560: LD_INT 0
70562: PPUSH
70563: PPUSH
70564: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70565: LD_VAR 0 1
70569: NOT
70570: IFTRUE 70598
70572: PUSH
70573: LD_VAR 0 2
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: LD_INT 2
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: LD_INT 4
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: IN
70596: NOT
70597: OR
70598: IFFALSE 70602
// exit ;
70600: GO 70685
// tmp := [ ] ;
70602: LD_ADDR_VAR 0 5
70606: PUSH
70607: EMPTY
70608: ST_TO_ADDR
// for i in units do
70609: LD_ADDR_VAR 0 4
70613: PUSH
70614: LD_VAR 0 1
70618: PUSH
70619: FOR_IN
70620: IFFALSE 70654
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70622: LD_ADDR_VAR 0 5
70626: PUSH
70627: LD_VAR 0 5
70631: PPUSH
70632: LD_VAR 0 4
70636: PPUSH
70637: LD_VAR 0 2
70641: PPUSH
70642: CALL_OW 259
70646: PPUSH
70647: CALL 72080 0 2
70651: ST_TO_ADDR
70652: GO 70619
70654: POP
70655: POP
// if not tmp then
70656: LD_VAR 0 5
70660: NOT
70661: IFFALSE 70665
// exit ;
70663: GO 70685
// result := SortListByListDesc ( units , tmp ) ;
70665: LD_ADDR_VAR 0 3
70669: PUSH
70670: LD_VAR 0 1
70674: PPUSH
70675: LD_VAR 0 5
70679: PPUSH
70680: CALL_OW 77
70684: ST_TO_ADDR
// end ;
70685: LD_VAR 0 3
70689: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70690: LD_INT 0
70692: PPUSH
70693: PPUSH
70694: PPUSH
// result := false ;
70695: LD_ADDR_VAR 0 3
70699: PUSH
70700: LD_INT 0
70702: ST_TO_ADDR
// if not building then
70703: LD_VAR 0 2
70707: NOT
70708: IFFALSE 70712
// exit ;
70710: GO 70856
// x := GetX ( building ) ;
70712: LD_ADDR_VAR 0 4
70716: PUSH
70717: LD_VAR 0 2
70721: PPUSH
70722: CALL_OW 250
70726: ST_TO_ADDR
// y := GetY ( building ) ;
70727: LD_ADDR_VAR 0 5
70731: PUSH
70732: LD_VAR 0 2
70736: PPUSH
70737: CALL_OW 251
70741: ST_TO_ADDR
// if not x or not y then
70742: LD_VAR 0 4
70746: NOT
70747: IFTRUE 70756
70749: PUSH
70750: LD_VAR 0 5
70754: NOT
70755: OR
70756: IFFALSE 70760
// exit ;
70758: GO 70856
// if GetTaskList ( unit ) then
70760: LD_VAR 0 1
70764: PPUSH
70765: CALL_OW 437
70769: IFFALSE 70856
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70771: LD_STRING e
70773: PUSH
70774: LD_VAR 0 1
70778: PPUSH
70779: CALL_OW 437
70783: PUSH
70784: LD_INT 1
70786: ARRAY
70787: PUSH
70788: LD_INT 1
70790: ARRAY
70791: EQUAL
70792: IFFALSE 70819
70794: PUSH
70795: LD_VAR 0 4
70799: PUSH
70800: LD_VAR 0 1
70804: PPUSH
70805: CALL_OW 437
70809: PUSH
70810: LD_INT 1
70812: ARRAY
70813: PUSH
70814: LD_INT 2
70816: ARRAY
70817: EQUAL
70818: AND
70819: IFFALSE 70846
70821: PUSH
70822: LD_VAR 0 5
70826: PUSH
70827: LD_VAR 0 1
70831: PPUSH
70832: CALL_OW 437
70836: PUSH
70837: LD_INT 1
70839: ARRAY
70840: PUSH
70841: LD_INT 3
70843: ARRAY
70844: EQUAL
70845: AND
70846: IFFALSE 70856
// result := true end ;
70848: LD_ADDR_VAR 0 3
70852: PUSH
70853: LD_INT 1
70855: ST_TO_ADDR
// end ;
70856: LD_VAR 0 3
70860: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70861: LD_INT 0
70863: PPUSH
// result := false ;
70864: LD_ADDR_VAR 0 4
70868: PUSH
70869: LD_INT 0
70871: ST_TO_ADDR
// if GetTaskList ( unit ) then
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 437
70881: IFFALSE 70968
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70883: LD_STRING M
70885: PUSH
70886: LD_VAR 0 1
70890: PPUSH
70891: CALL_OW 437
70895: PUSH
70896: LD_INT 1
70898: ARRAY
70899: PUSH
70900: LD_INT 1
70902: ARRAY
70903: EQUAL
70904: IFFALSE 70931
70906: PUSH
70907: LD_VAR 0 2
70911: PUSH
70912: LD_VAR 0 1
70916: PPUSH
70917: CALL_OW 437
70921: PUSH
70922: LD_INT 1
70924: ARRAY
70925: PUSH
70926: LD_INT 2
70928: ARRAY
70929: EQUAL
70930: AND
70931: IFFALSE 70958
70933: PUSH
70934: LD_VAR 0 3
70938: PUSH
70939: LD_VAR 0 1
70943: PPUSH
70944: CALL_OW 437
70948: PUSH
70949: LD_INT 1
70951: ARRAY
70952: PUSH
70953: LD_INT 3
70955: ARRAY
70956: EQUAL
70957: AND
70958: IFFALSE 70968
// result := true ;
70960: LD_ADDR_VAR 0 4
70964: PUSH
70965: LD_INT 1
70967: ST_TO_ADDR
// end ; end ;
70968: LD_VAR 0 4
70972: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70973: LD_INT 0
70975: PPUSH
70976: PPUSH
70977: PPUSH
70978: PPUSH
// if not unit or not area then
70979: LD_VAR 0 1
70983: NOT
70984: IFTRUE 70993
70986: PUSH
70987: LD_VAR 0 2
70991: NOT
70992: OR
70993: IFFALSE 70997
// exit ;
70995: GO 71173
// tmp := AreaToList ( area , i ) ;
70997: LD_ADDR_VAR 0 6
71001: PUSH
71002: LD_VAR 0 2
71006: PPUSH
71007: LD_VAR 0 5
71011: PPUSH
71012: CALL_OW 517
71016: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71017: LD_ADDR_VAR 0 5
71021: PUSH
71022: DOUBLE
71023: LD_INT 1
71025: DEC
71026: ST_TO_ADDR
71027: LD_VAR 0 6
71031: PUSH
71032: LD_INT 1
71034: ARRAY
71035: PUSH
71036: FOR_TO
71037: IFFALSE 71171
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71039: LD_ADDR_VAR 0 7
71043: PUSH
71044: LD_VAR 0 6
71048: PUSH
71049: LD_INT 1
71051: ARRAY
71052: PUSH
71053: LD_VAR 0 5
71057: ARRAY
71058: PUSH
71059: LD_VAR 0 6
71063: PUSH
71064: LD_INT 2
71066: ARRAY
71067: PUSH
71068: LD_VAR 0 5
71072: ARRAY
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
71078: LD_INT 92
71080: PUSH
71081: LD_VAR 0 7
71085: PUSH
71086: LD_INT 1
71088: ARRAY
71089: PUSH
71090: LD_VAR 0 7
71094: PUSH
71095: LD_INT 2
71097: ARRAY
71098: PUSH
71099: LD_INT 2
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: PPUSH
71108: CALL_OW 69
71112: PUSH
71113: LD_INT 0
71115: EQUAL
71116: IFFALSE 71169
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71118: LD_VAR 0 1
71122: PPUSH
71123: LD_VAR 0 7
71127: PUSH
71128: LD_INT 1
71130: ARRAY
71131: PPUSH
71132: LD_VAR 0 7
71136: PUSH
71137: LD_INT 2
71139: ARRAY
71140: PPUSH
71141: LD_VAR 0 3
71145: PPUSH
71146: CALL_OW 48
// result := IsPlaced ( unit ) ;
71150: LD_ADDR_VAR 0 4
71154: PUSH
71155: LD_VAR 0 1
71159: PPUSH
71160: CALL_OW 305
71164: ST_TO_ADDR
// exit ;
71165: POP
71166: POP
71167: GO 71173
// end ; end ;
71169: GO 71036
71171: POP
71172: POP
// end ;
71173: LD_VAR 0 4
71177: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71178: LD_INT 0
71180: PPUSH
71181: PPUSH
71182: PPUSH
// if not side or side > 8 then
71183: LD_VAR 0 1
71187: NOT
71188: IFTRUE 71200
71190: PUSH
71191: LD_VAR 0 1
71195: PUSH
71196: LD_INT 8
71198: GREATER
71199: OR
71200: IFFALSE 71204
// exit ;
71202: GO 71391
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71204: LD_ADDR_VAR 0 4
71208: PUSH
71209: LD_INT 22
71211: PUSH
71212: LD_VAR 0 1
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 21
71223: PUSH
71224: LD_INT 3
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PPUSH
71235: CALL_OW 69
71239: ST_TO_ADDR
// if not tmp then
71240: LD_VAR 0 4
71244: NOT
71245: IFFALSE 71249
// exit ;
71247: GO 71391
// enable_addtolog := true ;
71249: LD_ADDR_OWVAR 81
71253: PUSH
71254: LD_INT 1
71256: ST_TO_ADDR
// AddToLog ( [ ) ;
71257: LD_STRING [
71259: PPUSH
71260: CALL_OW 561
// for i in tmp do
71264: LD_ADDR_VAR 0 3
71268: PUSH
71269: LD_VAR 0 4
71273: PUSH
71274: FOR_IN
71275: IFFALSE 71382
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71277: LD_STRING [
71279: PUSH
71280: LD_VAR 0 3
71284: PPUSH
71285: CALL_OW 266
71289: STR
71290: PUSH
71291: LD_STRING , 
71293: STR
71294: PUSH
71295: LD_VAR 0 3
71299: PPUSH
71300: CALL_OW 250
71304: STR
71305: PUSH
71306: LD_STRING , 
71308: STR
71309: PUSH
71310: LD_VAR 0 3
71314: PPUSH
71315: CALL_OW 251
71319: STR
71320: PUSH
71321: LD_STRING , 
71323: STR
71324: PUSH
71325: LD_VAR 0 3
71329: PPUSH
71330: CALL_OW 254
71334: STR
71335: PUSH
71336: LD_STRING , 
71338: STR
71339: PUSH
71340: LD_VAR 0 3
71344: PPUSH
71345: LD_INT 1
71347: PPUSH
71348: CALL_OW 268
71352: STR
71353: PUSH
71354: LD_STRING , 
71356: STR
71357: PUSH
71358: LD_VAR 0 3
71362: PPUSH
71363: LD_INT 2
71365: PPUSH
71366: CALL_OW 268
71370: STR
71371: PUSH
71372: LD_STRING ],
71374: STR
71375: PPUSH
71376: CALL_OW 561
// end ;
71380: GO 71274
71382: POP
71383: POP
// AddToLog ( ]; ) ;
71384: LD_STRING ];
71386: PPUSH
71387: CALL_OW 561
// end ;
71391: LD_VAR 0 2
71395: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71396: LD_INT 0
71398: PPUSH
71399: PPUSH
71400: PPUSH
71401: PPUSH
71402: PPUSH
// if not area or not rate or not max then
71403: LD_VAR 0 1
71407: NOT
71408: IFTRUE 71417
71410: PUSH
71411: LD_VAR 0 2
71415: NOT
71416: OR
71417: IFTRUE 71426
71419: PUSH
71420: LD_VAR 0 4
71424: NOT
71425: OR
71426: IFFALSE 71430
// exit ;
71428: GO 71619
// while 1 do
71430: LD_INT 1
71432: IFFALSE 71619
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71434: LD_ADDR_VAR 0 9
71438: PUSH
71439: LD_VAR 0 1
71443: PPUSH
71444: LD_INT 1
71446: PPUSH
71447: CALL_OW 287
71451: PUSH
71452: LD_INT 10
71454: MUL
71455: ST_TO_ADDR
// r := rate / 10 ;
71456: LD_ADDR_VAR 0 7
71460: PUSH
71461: LD_VAR 0 2
71465: PUSH
71466: LD_INT 10
71468: DIVREAL
71469: ST_TO_ADDR
// time := 1 1$00 ;
71470: LD_ADDR_VAR 0 8
71474: PUSH
71475: LD_INT 2100
71477: ST_TO_ADDR
// if amount < min then
71478: LD_VAR 0 9
71482: PUSH
71483: LD_VAR 0 3
71487: LESS
71488: IFFALSE 71506
// r := r * 2 else
71490: LD_ADDR_VAR 0 7
71494: PUSH
71495: LD_VAR 0 7
71499: PUSH
71500: LD_INT 2
71502: MUL
71503: ST_TO_ADDR
71504: GO 71532
// if amount > max then
71506: LD_VAR 0 9
71510: PUSH
71511: LD_VAR 0 4
71515: GREATER
71516: IFFALSE 71532
// r := r / 2 ;
71518: LD_ADDR_VAR 0 7
71522: PUSH
71523: LD_VAR 0 7
71527: PUSH
71528: LD_INT 2
71530: DIVREAL
71531: ST_TO_ADDR
// time := time / r ;
71532: LD_ADDR_VAR 0 8
71536: PUSH
71537: LD_VAR 0 8
71541: PUSH
71542: LD_VAR 0 7
71546: DIVREAL
71547: ST_TO_ADDR
// if time < 0 then
71548: LD_VAR 0 8
71552: PUSH
71553: LD_INT 0
71555: LESS
71556: IFFALSE 71573
// time := time * - 1 ;
71558: LD_ADDR_VAR 0 8
71562: PUSH
71563: LD_VAR 0 8
71567: PUSH
71568: LD_INT 1
71570: NEG
71571: MUL
71572: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71573: LD_VAR 0 8
71577: PUSH
71578: LD_INT 35
71580: PPUSH
71581: LD_INT 875
71583: PPUSH
71584: CALL_OW 12
71588: PLUS
71589: PPUSH
71590: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71594: LD_INT 1
71596: PPUSH
71597: LD_INT 5
71599: PPUSH
71600: CALL_OW 12
71604: PPUSH
71605: LD_VAR 0 1
71609: PPUSH
71610: LD_INT 1
71612: PPUSH
71613: CALL_OW 55
// end ;
71617: GO 71430
// end ;
71619: LD_VAR 0 5
71623: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71624: LD_INT 0
71626: PPUSH
71627: PPUSH
71628: PPUSH
71629: PPUSH
71630: PPUSH
71631: PPUSH
71632: PPUSH
71633: PPUSH
// if not turrets or not factories then
71634: LD_VAR 0 1
71638: NOT
71639: IFTRUE 71648
71641: PUSH
71642: LD_VAR 0 2
71646: NOT
71647: OR
71648: IFFALSE 71652
// exit ;
71650: GO 71959
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71652: LD_ADDR_VAR 0 10
71656: PUSH
71657: LD_INT 5
71659: PUSH
71660: LD_INT 6
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 2
71669: PUSH
71670: LD_INT 4
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 3
71679: PUSH
71680: LD_INT 5
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 24
71694: PUSH
71695: LD_INT 25
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 23
71704: PUSH
71705: LD_INT 27
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 42
71718: PUSH
71719: LD_INT 43
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 44
71728: PUSH
71729: LD_INT 46
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 45
71738: PUSH
71739: LD_INT 47
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: LIST
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: ST_TO_ADDR
// result := [ ] ;
71756: LD_ADDR_VAR 0 3
71760: PUSH
71761: EMPTY
71762: ST_TO_ADDR
// for i in turrets do
71763: LD_ADDR_VAR 0 4
71767: PUSH
71768: LD_VAR 0 1
71772: PUSH
71773: FOR_IN
71774: IFFALSE 71957
// begin nat := GetNation ( i ) ;
71776: LD_ADDR_VAR 0 7
71780: PUSH
71781: LD_VAR 0 4
71785: PPUSH
71786: CALL_OW 248
71790: ST_TO_ADDR
// weapon := 0 ;
71791: LD_ADDR_VAR 0 8
71795: PUSH
71796: LD_INT 0
71798: ST_TO_ADDR
// if not nat then
71799: LD_VAR 0 7
71803: NOT
71804: IFFALSE 71808
// continue ;
71806: GO 71773
// for j in list [ nat ] do
71808: LD_ADDR_VAR 0 5
71812: PUSH
71813: LD_VAR 0 10
71817: PUSH
71818: LD_VAR 0 7
71822: ARRAY
71823: PUSH
71824: FOR_IN
71825: IFFALSE 71866
// if GetBWeapon ( i ) = j [ 1 ] then
71827: LD_VAR 0 4
71831: PPUSH
71832: CALL_OW 269
71836: PUSH
71837: LD_VAR 0 5
71841: PUSH
71842: LD_INT 1
71844: ARRAY
71845: EQUAL
71846: IFFALSE 71864
// begin weapon := j [ 2 ] ;
71848: LD_ADDR_VAR 0 8
71852: PUSH
71853: LD_VAR 0 5
71857: PUSH
71858: LD_INT 2
71860: ARRAY
71861: ST_TO_ADDR
// break ;
71862: GO 71866
// end ;
71864: GO 71824
71866: POP
71867: POP
// if not weapon then
71868: LD_VAR 0 8
71872: NOT
71873: IFFALSE 71877
// continue ;
71875: GO 71773
// for k in factories do
71877: LD_ADDR_VAR 0 6
71881: PUSH
71882: LD_VAR 0 2
71886: PUSH
71887: FOR_IN
71888: IFFALSE 71953
// begin weapons := AvailableWeaponList ( k ) ;
71890: LD_ADDR_VAR 0 9
71894: PUSH
71895: LD_VAR 0 6
71899: PPUSH
71900: CALL_OW 478
71904: ST_TO_ADDR
// if not weapons then
71905: LD_VAR 0 9
71909: NOT
71910: IFFALSE 71914
// continue ;
71912: GO 71887
// if weapon in weapons then
71914: LD_VAR 0 8
71918: PUSH
71919: LD_VAR 0 9
71923: IN
71924: IFFALSE 71951
// begin result := [ i , weapon ] ;
71926: LD_ADDR_VAR 0 3
71930: PUSH
71931: LD_VAR 0 4
71935: PUSH
71936: LD_VAR 0 8
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: ST_TO_ADDR
// exit ;
71945: POP
71946: POP
71947: POP
71948: POP
71949: GO 71959
// end ; end ;
71951: GO 71887
71953: POP
71954: POP
// end ;
71955: GO 71773
71957: POP
71958: POP
// end ;
71959: LD_VAR 0 3
71963: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71964: LD_INT 0
71966: PPUSH
// if not side or side > 8 then
71967: LD_VAR 0 3
71971: NOT
71972: IFTRUE 71984
71974: PUSH
71975: LD_VAR 0 3
71979: PUSH
71980: LD_INT 8
71982: GREATER
71983: OR
71984: IFFALSE 71988
// exit ;
71986: GO 72047
// if not range then
71988: LD_VAR 0 4
71992: NOT
71993: IFFALSE 72004
// range := - 12 ;
71995: LD_ADDR_VAR 0 4
71999: PUSH
72000: LD_INT 12
72002: NEG
72003: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72004: LD_VAR 0 1
72008: PPUSH
72009: LD_VAR 0 2
72013: PPUSH
72014: LD_VAR 0 3
72018: PPUSH
72019: LD_VAR 0 4
72023: PPUSH
72024: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72028: LD_VAR 0 1
72032: PPUSH
72033: LD_VAR 0 2
72037: PPUSH
72038: LD_VAR 0 3
72042: PPUSH
72043: CALL_OW 331
// end ;
72047: LD_VAR 0 5
72051: RET
// export function Video ( mode ) ; begin
72052: LD_INT 0
72054: PPUSH
// ingame_video = mode ;
72055: LD_ADDR_OWVAR 52
72059: PUSH
72060: LD_VAR 0 1
72064: ST_TO_ADDR
// interface_hidden = mode ;
72065: LD_ADDR_OWVAR 54
72069: PUSH
72070: LD_VAR 0 1
72074: ST_TO_ADDR
// end ;
72075: LD_VAR 0 2
72079: RET
// export function Join ( array , element ) ; begin
72080: LD_INT 0
72082: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72083: LD_ADDR_VAR 0 3
72087: PUSH
72088: LD_VAR 0 1
72092: PPUSH
72093: LD_VAR 0 1
72097: PUSH
72098: LD_INT 1
72100: PLUS
72101: PPUSH
72102: LD_VAR 0 2
72106: PPUSH
72107: CALL_OW 1
72111: ST_TO_ADDR
// end ;
72112: LD_VAR 0 3
72116: RET
// export function JoinUnion ( array , element ) ; begin
72117: LD_INT 0
72119: PPUSH
// result := array union element ;
72120: LD_ADDR_VAR 0 3
72124: PUSH
72125: LD_VAR 0 1
72129: PUSH
72130: LD_VAR 0 2
72134: UNION
72135: ST_TO_ADDR
// end ;
72136: LD_VAR 0 3
72140: RET
// export function GetBehemoths ( side ) ; begin
72141: LD_INT 0
72143: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72144: LD_ADDR_VAR 0 2
72148: PUSH
72149: LD_INT 22
72151: PUSH
72152: LD_VAR 0 1
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 31
72163: PUSH
72164: LD_INT 25
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PPUSH
72175: CALL_OW 69
72179: ST_TO_ADDR
// end ;
72180: LD_VAR 0 2
72184: RET
// export function Shuffle ( array ) ; var i , index ; begin
72185: LD_INT 0
72187: PPUSH
72188: PPUSH
72189: PPUSH
// result := [ ] ;
72190: LD_ADDR_VAR 0 2
72194: PUSH
72195: EMPTY
72196: ST_TO_ADDR
// if not array then
72197: LD_VAR 0 1
72201: NOT
72202: IFFALSE 72206
// exit ;
72204: GO 72305
// Randomize ;
72206: CALL_OW 10
// for i = array downto 1 do
72210: LD_ADDR_VAR 0 3
72214: PUSH
72215: DOUBLE
72216: LD_VAR 0 1
72220: INC
72221: ST_TO_ADDR
72222: LD_INT 1
72224: PUSH
72225: FOR_DOWNTO
72226: IFFALSE 72303
// begin index := rand ( 1 , array ) ;
72228: LD_ADDR_VAR 0 4
72232: PUSH
72233: LD_INT 1
72235: PPUSH
72236: LD_VAR 0 1
72240: PPUSH
72241: CALL_OW 12
72245: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72246: LD_ADDR_VAR 0 2
72250: PUSH
72251: LD_VAR 0 2
72255: PPUSH
72256: LD_VAR 0 2
72260: PUSH
72261: LD_INT 1
72263: PLUS
72264: PPUSH
72265: LD_VAR 0 1
72269: PUSH
72270: LD_VAR 0 4
72274: ARRAY
72275: PPUSH
72276: CALL_OW 2
72280: ST_TO_ADDR
// array := Delete ( array , index ) ;
72281: LD_ADDR_VAR 0 1
72285: PUSH
72286: LD_VAR 0 1
72290: PPUSH
72291: LD_VAR 0 4
72295: PPUSH
72296: CALL_OW 3
72300: ST_TO_ADDR
// end ;
72301: GO 72225
72303: POP
72304: POP
// end ;
72305: LD_VAR 0 2
72309: RET
// export function GetBaseMaterials ( base ) ; begin
72310: LD_INT 0
72312: PPUSH
// result := [ 0 , 0 , 0 ] ;
72313: LD_ADDR_VAR 0 2
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: LIST
72331: ST_TO_ADDR
// if not base then
72332: LD_VAR 0 1
72336: NOT
72337: IFFALSE 72341
// exit ;
72339: GO 72390
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72341: LD_ADDR_VAR 0 2
72345: PUSH
72346: LD_VAR 0 1
72350: PPUSH
72351: LD_INT 1
72353: PPUSH
72354: CALL_OW 275
72358: PUSH
72359: LD_VAR 0 1
72363: PPUSH
72364: LD_INT 2
72366: PPUSH
72367: CALL_OW 275
72371: PUSH
72372: LD_VAR 0 1
72376: PPUSH
72377: LD_INT 3
72379: PPUSH
72380: CALL_OW 275
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: ST_TO_ADDR
// end ;
72390: LD_VAR 0 2
72394: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72395: LD_INT 0
72397: PPUSH
72398: PPUSH
// result := array ;
72399: LD_ADDR_VAR 0 3
72403: PUSH
72404: LD_VAR 0 1
72408: ST_TO_ADDR
// if size >= result then
72409: LD_VAR 0 2
72413: PUSH
72414: LD_VAR 0 3
72418: GREATEREQUAL
72419: IFFALSE 72423
// exit ;
72421: GO 72473
// if size then
72423: LD_VAR 0 2
72427: IFFALSE 72473
// for i := array downto size do
72429: LD_ADDR_VAR 0 4
72433: PUSH
72434: DOUBLE
72435: LD_VAR 0 1
72439: INC
72440: ST_TO_ADDR
72441: LD_VAR 0 2
72445: PUSH
72446: FOR_DOWNTO
72447: IFFALSE 72471
// result := Delete ( result , result ) ;
72449: LD_ADDR_VAR 0 3
72453: PUSH
72454: LD_VAR 0 3
72458: PPUSH
72459: LD_VAR 0 3
72463: PPUSH
72464: CALL_OW 3
72468: ST_TO_ADDR
72469: GO 72446
72471: POP
72472: POP
// end ;
72473: LD_VAR 0 3
72477: RET
// export function ComExit ( unit ) ; var tmp ; begin
72478: LD_INT 0
72480: PPUSH
72481: PPUSH
// if not IsInUnit ( unit ) then
72482: LD_VAR 0 1
72486: PPUSH
72487: CALL_OW 310
72491: NOT
72492: IFFALSE 72496
// exit ;
72494: GO 72556
// tmp := IsInUnit ( unit ) ;
72496: LD_ADDR_VAR 0 3
72500: PUSH
72501: LD_VAR 0 1
72505: PPUSH
72506: CALL_OW 310
72510: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72511: LD_VAR 0 3
72515: PPUSH
72516: CALL_OW 247
72520: PUSH
72521: LD_INT 2
72523: EQUAL
72524: IFFALSE 72537
// ComExitVehicle ( unit ) else
72526: LD_VAR 0 1
72530: PPUSH
72531: CALL_OW 121
72535: GO 72546
// ComExitBuilding ( unit ) ;
72537: LD_VAR 0 1
72541: PPUSH
72542: CALL_OW 122
// result := tmp ;
72546: LD_ADDR_VAR 0 2
72550: PUSH
72551: LD_VAR 0 3
72555: ST_TO_ADDR
// end ;
72556: LD_VAR 0 2
72560: RET
// export function ComExitAll ( units ) ; var i ; begin
72561: LD_INT 0
72563: PPUSH
72564: PPUSH
// if not units then
72565: LD_VAR 0 1
72569: NOT
72570: IFFALSE 72574
// exit ;
72572: GO 72600
// for i in units do
72574: LD_ADDR_VAR 0 3
72578: PUSH
72579: LD_VAR 0 1
72583: PUSH
72584: FOR_IN
72585: IFFALSE 72598
// ComExit ( i ) ;
72587: LD_VAR 0 3
72591: PPUSH
72592: CALL 72478 0 1
72596: GO 72584
72598: POP
72599: POP
// end ;
72600: LD_VAR 0 2
72604: RET
// export function ResetHc ; begin
72605: LD_INT 0
72607: PPUSH
// InitHc ;
72608: CALL_OW 19
// hc_importance := 0 ;
72612: LD_ADDR_OWVAR 32
72616: PUSH
72617: LD_INT 0
72619: ST_TO_ADDR
// end ;
72620: LD_VAR 0 1
72624: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72625: LD_INT 0
72627: PPUSH
72628: PPUSH
72629: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72630: LD_ADDR_VAR 0 6
72634: PUSH
72635: LD_VAR 0 1
72639: PUSH
72640: LD_VAR 0 3
72644: PLUS
72645: PUSH
72646: LD_INT 2
72648: DIV
72649: ST_TO_ADDR
// if _x < 0 then
72650: LD_VAR 0 6
72654: PUSH
72655: LD_INT 0
72657: LESS
72658: IFFALSE 72675
// _x := _x * - 1 ;
72660: LD_ADDR_VAR 0 6
72664: PUSH
72665: LD_VAR 0 6
72669: PUSH
72670: LD_INT 1
72672: NEG
72673: MUL
72674: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72675: LD_ADDR_VAR 0 7
72679: PUSH
72680: LD_VAR 0 2
72684: PUSH
72685: LD_VAR 0 4
72689: PLUS
72690: PUSH
72691: LD_INT 2
72693: DIV
72694: ST_TO_ADDR
// if _y < 0 then
72695: LD_VAR 0 7
72699: PUSH
72700: LD_INT 0
72702: LESS
72703: IFFALSE 72720
// _y := _y * - 1 ;
72705: LD_ADDR_VAR 0 7
72709: PUSH
72710: LD_VAR 0 7
72714: PUSH
72715: LD_INT 1
72717: NEG
72718: MUL
72719: ST_TO_ADDR
// result := [ _x , _y ] ;
72720: LD_ADDR_VAR 0 5
72724: PUSH
72725: LD_VAR 0 6
72729: PUSH
72730: LD_VAR 0 7
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: ST_TO_ADDR
// end ;
72739: LD_VAR 0 5
72743: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72744: LD_INT 0
72746: PPUSH
72747: PPUSH
72748: PPUSH
72749: PPUSH
// task := GetTaskList ( unit ) ;
72750: LD_ADDR_VAR 0 7
72754: PUSH
72755: LD_VAR 0 1
72759: PPUSH
72760: CALL_OW 437
72764: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72765: LD_VAR 0 7
72769: NOT
72770: IFFALSE 72789
72772: PUSH
72773: LD_VAR 0 1
72777: PPUSH
72778: LD_VAR 0 2
72782: PPUSH
72783: CALL_OW 308
72787: NOT
72788: AND
72789: IFFALSE 72793
// exit ;
72791: GO 72911
// if IsInArea ( unit , area ) then
72793: LD_VAR 0 1
72797: PPUSH
72798: LD_VAR 0 2
72802: PPUSH
72803: CALL_OW 308
72807: IFFALSE 72825
// begin ComMoveToArea ( unit , goAway ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_VAR 0 3
72818: PPUSH
72819: CALL_OW 113
// exit ;
72823: GO 72911
// end ; if task [ 1 ] [ 1 ] <> M then
72825: LD_VAR 0 7
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PUSH
72834: LD_INT 1
72836: ARRAY
72837: PUSH
72838: LD_STRING M
72840: NONEQUAL
72841: IFFALSE 72845
// exit ;
72843: GO 72911
// x := task [ 1 ] [ 2 ] ;
72845: LD_ADDR_VAR 0 5
72849: PUSH
72850: LD_VAR 0 7
72854: PUSH
72855: LD_INT 1
72857: ARRAY
72858: PUSH
72859: LD_INT 2
72861: ARRAY
72862: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72863: LD_ADDR_VAR 0 6
72867: PUSH
72868: LD_VAR 0 7
72872: PUSH
72873: LD_INT 1
72875: ARRAY
72876: PUSH
72877: LD_INT 3
72879: ARRAY
72880: ST_TO_ADDR
// if InArea ( x , y , area ) then
72881: LD_VAR 0 5
72885: PPUSH
72886: LD_VAR 0 6
72890: PPUSH
72891: LD_VAR 0 2
72895: PPUSH
72896: CALL_OW 309
72900: IFFALSE 72911
// ComStop ( unit ) ;
72902: LD_VAR 0 1
72906: PPUSH
72907: CALL_OW 141
// end ;
72911: LD_VAR 0 4
72915: RET
// export function Abs ( value ) ; begin
72916: LD_INT 0
72918: PPUSH
// result := value ;
72919: LD_ADDR_VAR 0 2
72923: PUSH
72924: LD_VAR 0 1
72928: ST_TO_ADDR
// if value < 0 then
72929: LD_VAR 0 1
72933: PUSH
72934: LD_INT 0
72936: LESS
72937: IFFALSE 72954
// result := value * - 1 ;
72939: LD_ADDR_VAR 0 2
72943: PUSH
72944: LD_VAR 0 1
72948: PUSH
72949: LD_INT 1
72951: NEG
72952: MUL
72953: ST_TO_ADDR
// end ;
72954: LD_VAR 0 2
72958: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72959: LD_INT 0
72961: PPUSH
72962: PPUSH
72963: PPUSH
72964: PPUSH
72965: PPUSH
72966: PPUSH
72967: PPUSH
72968: PPUSH
// if not unit or not building then
72969: LD_VAR 0 1
72973: NOT
72974: IFTRUE 72983
72976: PUSH
72977: LD_VAR 0 2
72981: NOT
72982: OR
72983: IFFALSE 72987
// exit ;
72985: GO 73215
// x := GetX ( building ) ;
72987: LD_ADDR_VAR 0 4
72991: PUSH
72992: LD_VAR 0 2
72996: PPUSH
72997: CALL_OW 250
73001: ST_TO_ADDR
// y := GetY ( building ) ;
73002: LD_ADDR_VAR 0 6
73006: PUSH
73007: LD_VAR 0 2
73011: PPUSH
73012: CALL_OW 251
73016: ST_TO_ADDR
// d := GetDir ( building ) ;
73017: LD_ADDR_VAR 0 8
73021: PUSH
73022: LD_VAR 0 2
73026: PPUSH
73027: CALL_OW 254
73031: ST_TO_ADDR
// r := 4 ;
73032: LD_ADDR_VAR 0 9
73036: PUSH
73037: LD_INT 4
73039: ST_TO_ADDR
// for i := 1 to 5 do
73040: LD_ADDR_VAR 0 10
73044: PUSH
73045: DOUBLE
73046: LD_INT 1
73048: DEC
73049: ST_TO_ADDR
73050: LD_INT 5
73052: PUSH
73053: FOR_TO
73054: IFFALSE 73213
// begin _x := ShiftX ( x , d , r + i ) ;
73056: LD_ADDR_VAR 0 5
73060: PUSH
73061: LD_VAR 0 4
73065: PPUSH
73066: LD_VAR 0 8
73070: PPUSH
73071: LD_VAR 0 9
73075: PUSH
73076: LD_VAR 0 10
73080: PLUS
73081: PPUSH
73082: CALL_OW 272
73086: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73087: LD_ADDR_VAR 0 7
73091: PUSH
73092: LD_VAR 0 6
73096: PPUSH
73097: LD_VAR 0 8
73101: PPUSH
73102: LD_VAR 0 9
73106: PUSH
73107: LD_VAR 0 10
73111: PLUS
73112: PPUSH
73113: CALL_OW 273
73117: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73118: LD_VAR 0 5
73122: PPUSH
73123: LD_VAR 0 7
73127: PPUSH
73128: CALL_OW 488
73132: IFFALSE 73167
73134: PUSH
73135: LD_VAR 0 5
73139: PPUSH
73140: LD_VAR 0 7
73144: PPUSH
73145: CALL_OW 428
73149: PPUSH
73150: CALL_OW 247
73154: PUSH
73155: LD_INT 3
73157: PUSH
73158: LD_INT 2
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: IN
73165: NOT
73166: AND
73167: IFFALSE 73211
// begin ComMoveXY ( unit , _x , _y ) ;
73169: LD_VAR 0 1
73173: PPUSH
73174: LD_VAR 0 5
73178: PPUSH
73179: LD_VAR 0 7
73183: PPUSH
73184: CALL_OW 111
// result := [ _x , _y ] ;
73188: LD_ADDR_VAR 0 3
73192: PUSH
73193: LD_VAR 0 5
73197: PUSH
73198: LD_VAR 0 7
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: ST_TO_ADDR
// exit ;
73207: POP
73208: POP
73209: GO 73215
// end ; end ;
73211: GO 73053
73213: POP
73214: POP
// end ;
73215: LD_VAR 0 3
73219: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73220: LD_INT 0
73222: PPUSH
73223: PPUSH
73224: PPUSH
// result := 0 ;
73225: LD_ADDR_VAR 0 3
73229: PUSH
73230: LD_INT 0
73232: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73233: LD_VAR 0 1
73237: PUSH
73238: LD_INT 0
73240: LESS
73241: IFTRUE 73253
73243: PUSH
73244: LD_VAR 0 1
73248: PUSH
73249: LD_INT 8
73251: GREATER
73252: OR
73253: IFTRUE 73265
73255: PUSH
73256: LD_VAR 0 2
73260: PUSH
73261: LD_INT 0
73263: LESS
73264: OR
73265: IFTRUE 73277
73267: PUSH
73268: LD_VAR 0 2
73272: PUSH
73273: LD_INT 8
73275: GREATER
73276: OR
73277: IFFALSE 73281
// exit ;
73279: GO 73356
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73281: LD_ADDR_VAR 0 4
73285: PUSH
73286: LD_INT 22
73288: PUSH
73289: LD_VAR 0 2
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PPUSH
73298: CALL_OW 69
73302: PUSH
73303: FOR_IN
73304: IFFALSE 73354
// begin un := UnitShoot ( i ) ;
73306: LD_ADDR_VAR 0 5
73310: PUSH
73311: LD_VAR 0 4
73315: PPUSH
73316: CALL_OW 504
73320: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73321: LD_VAR 0 5
73325: PPUSH
73326: CALL_OW 255
73330: PUSH
73331: LD_VAR 0 1
73335: EQUAL
73336: IFFALSE 73352
// begin result := un ;
73338: LD_ADDR_VAR 0 3
73342: PUSH
73343: LD_VAR 0 5
73347: ST_TO_ADDR
// exit ;
73348: POP
73349: POP
73350: GO 73356
// end ; end ;
73352: GO 73303
73354: POP
73355: POP
// end ;
73356: LD_VAR 0 3
73360: RET
// export function GetCargoBay ( units ) ; begin
73361: LD_INT 0
73363: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73364: LD_ADDR_VAR 0 2
73368: PUSH
73369: LD_VAR 0 1
73373: PPUSH
73374: LD_INT 2
73376: PUSH
73377: LD_INT 34
73379: PUSH
73380: LD_INT 12
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 34
73389: PUSH
73390: LD_INT 51
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 34
73399: PUSH
73400: LD_INT 32
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 34
73409: PUSH
73410: LD_INT 89
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: PPUSH
73424: CALL_OW 72
73428: ST_TO_ADDR
// end ;
73429: LD_VAR 0 2
73433: RET
// export function Negate ( value ) ; begin
73434: LD_INT 0
73436: PPUSH
// result := not value ;
73437: LD_ADDR_VAR 0 2
73441: PUSH
73442: LD_VAR 0 1
73446: NOT
73447: ST_TO_ADDR
// end ;
73448: LD_VAR 0 2
73452: RET
// export function Inc ( value ) ; begin
73453: LD_INT 0
73455: PPUSH
// result := value + 1 ;
73456: LD_ADDR_VAR 0 2
73460: PUSH
73461: LD_VAR 0 1
73465: PUSH
73466: LD_INT 1
73468: PLUS
73469: ST_TO_ADDR
// end ;
73470: LD_VAR 0 2
73474: RET
// export function Dec ( value ) ; begin
73475: LD_INT 0
73477: PPUSH
// result := value - 1 ;
73478: LD_ADDR_VAR 0 2
73482: PUSH
73483: LD_VAR 0 1
73487: PUSH
73488: LD_INT 1
73490: MINUS
73491: ST_TO_ADDR
// end ;
73492: LD_VAR 0 2
73496: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73497: LD_INT 0
73499: PPUSH
73500: PPUSH
73501: PPUSH
73502: PPUSH
73503: PPUSH
73504: PPUSH
73505: PPUSH
73506: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73507: LD_VAR 0 1
73511: PPUSH
73512: LD_VAR 0 2
73516: PPUSH
73517: CALL_OW 488
73521: NOT
73522: IFTRUE 73541
73524: PUSH
73525: LD_VAR 0 3
73529: PPUSH
73530: LD_VAR 0 4
73534: PPUSH
73535: CALL_OW 488
73539: NOT
73540: OR
73541: IFFALSE 73554
// begin result := - 1 ;
73543: LD_ADDR_VAR 0 5
73547: PUSH
73548: LD_INT 1
73550: NEG
73551: ST_TO_ADDR
// exit ;
73552: GO 73789
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73554: LD_ADDR_VAR 0 12
73558: PUSH
73559: LD_VAR 0 1
73563: PPUSH
73564: LD_VAR 0 2
73568: PPUSH
73569: LD_VAR 0 3
73573: PPUSH
73574: LD_VAR 0 4
73578: PPUSH
73579: CALL 72625 0 4
73583: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73584: LD_ADDR_VAR 0 11
73588: PUSH
73589: LD_VAR 0 1
73593: PPUSH
73594: LD_VAR 0 2
73598: PPUSH
73599: LD_VAR 0 12
73603: PUSH
73604: LD_INT 1
73606: ARRAY
73607: PPUSH
73608: LD_VAR 0 12
73612: PUSH
73613: LD_INT 2
73615: ARRAY
73616: PPUSH
73617: CALL_OW 298
73621: ST_TO_ADDR
// distance := 9999 ;
73622: LD_ADDR_VAR 0 10
73626: PUSH
73627: LD_INT 9999
73629: ST_TO_ADDR
// for i := 0 to 5 do
73630: LD_ADDR_VAR 0 6
73634: PUSH
73635: DOUBLE
73636: LD_INT 0
73638: DEC
73639: ST_TO_ADDR
73640: LD_INT 5
73642: PUSH
73643: FOR_TO
73644: IFFALSE 73787
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73646: LD_ADDR_VAR 0 7
73650: PUSH
73651: LD_VAR 0 1
73655: PPUSH
73656: LD_VAR 0 6
73660: PPUSH
73661: LD_VAR 0 11
73665: PPUSH
73666: CALL_OW 272
73670: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73671: LD_ADDR_VAR 0 8
73675: PUSH
73676: LD_VAR 0 2
73680: PPUSH
73681: LD_VAR 0 6
73685: PPUSH
73686: LD_VAR 0 11
73690: PPUSH
73691: CALL_OW 273
73695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73696: LD_VAR 0 7
73700: PPUSH
73701: LD_VAR 0 8
73705: PPUSH
73706: CALL_OW 488
73710: NOT
73711: IFFALSE 73715
// continue ;
73713: GO 73643
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73715: LD_ADDR_VAR 0 9
73719: PUSH
73720: LD_VAR 0 12
73724: PUSH
73725: LD_INT 1
73727: ARRAY
73728: PPUSH
73729: LD_VAR 0 12
73733: PUSH
73734: LD_INT 2
73736: ARRAY
73737: PPUSH
73738: LD_VAR 0 7
73742: PPUSH
73743: LD_VAR 0 8
73747: PPUSH
73748: CALL_OW 298
73752: ST_TO_ADDR
// if tmp < distance then
73753: LD_VAR 0 9
73757: PUSH
73758: LD_VAR 0 10
73762: LESS
73763: IFFALSE 73785
// begin result := i ;
73765: LD_ADDR_VAR 0 5
73769: PUSH
73770: LD_VAR 0 6
73774: ST_TO_ADDR
// distance := tmp ;
73775: LD_ADDR_VAR 0 10
73779: PUSH
73780: LD_VAR 0 9
73784: ST_TO_ADDR
// end ; end ;
73785: GO 73643
73787: POP
73788: POP
// end ;
73789: LD_VAR 0 5
73793: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
// if not driver or not IsInUnit ( driver ) then
73798: LD_VAR 0 1
73802: NOT
73803: IFTRUE 73817
73805: PUSH
73806: LD_VAR 0 1
73810: PPUSH
73811: CALL_OW 310
73815: NOT
73816: OR
73817: IFFALSE 73821
// exit ;
73819: GO 73911
// vehicle := IsInUnit ( driver ) ;
73821: LD_ADDR_VAR 0 3
73825: PUSH
73826: LD_VAR 0 1
73830: PPUSH
73831: CALL_OW 310
73835: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73836: LD_VAR 0 1
73840: PPUSH
73841: LD_STRING \
73843: PUSH
73844: LD_INT 0
73846: PUSH
73847: LD_INT 0
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: LD_INT 0
73855: PUSH
73856: LD_INT 0
73858: PUSH
73859: LD_INT 0
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: PUSH
73871: LD_STRING E
73873: PUSH
73874: LD_INT 0
73876: PUSH
73877: LD_INT 0
73879: PUSH
73880: LD_VAR 0 3
73884: PUSH
73885: LD_INT 0
73887: PUSH
73888: LD_INT 0
73890: PUSH
73891: LD_INT 0
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PPUSH
73907: CALL_OW 446
// end ;
73911: LD_VAR 0 2
73915: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73916: LD_INT 0
73918: PPUSH
73919: PPUSH
// if not driver or not IsInUnit ( driver ) then
73920: LD_VAR 0 1
73924: NOT
73925: IFTRUE 73939
73927: PUSH
73928: LD_VAR 0 1
73932: PPUSH
73933: CALL_OW 310
73937: NOT
73938: OR
73939: IFFALSE 73943
// exit ;
73941: GO 74033
// vehicle := IsInUnit ( driver ) ;
73943: LD_ADDR_VAR 0 3
73947: PUSH
73948: LD_VAR 0 1
73952: PPUSH
73953: CALL_OW 310
73957: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73958: LD_VAR 0 1
73962: PPUSH
73963: LD_STRING \
73965: PUSH
73966: LD_INT 0
73968: PUSH
73969: LD_INT 0
73971: PUSH
73972: LD_INT 0
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: LD_INT 0
73980: PUSH
73981: LD_INT 0
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: PUSH
73993: LD_STRING E
73995: PUSH
73996: LD_INT 0
73998: PUSH
73999: LD_INT 0
74001: PUSH
74002: LD_VAR 0 3
74006: PUSH
74007: LD_INT 0
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PPUSH
74029: CALL_OW 447
// end ;
74033: LD_VAR 0 2
74037: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74038: LD_INT 0
74040: PPUSH
74041: PPUSH
74042: PPUSH
// tmp := [ ] ;
74043: LD_ADDR_VAR 0 5
74047: PUSH
74048: EMPTY
74049: ST_TO_ADDR
// for i in units do
74050: LD_ADDR_VAR 0 4
74054: PUSH
74055: LD_VAR 0 1
74059: PUSH
74060: FOR_IN
74061: IFFALSE 74099
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74063: LD_ADDR_VAR 0 5
74067: PUSH
74068: LD_VAR 0 5
74072: PPUSH
74073: LD_VAR 0 5
74077: PUSH
74078: LD_INT 1
74080: PLUS
74081: PPUSH
74082: LD_VAR 0 4
74086: PPUSH
74087: CALL_OW 256
74091: PPUSH
74092: CALL_OW 2
74096: ST_TO_ADDR
74097: GO 74060
74099: POP
74100: POP
// if not tmp then
74101: LD_VAR 0 5
74105: NOT
74106: IFFALSE 74110
// exit ;
74108: GO 74158
// if asc then
74110: LD_VAR 0 2
74114: IFFALSE 74138
// result := SortListByListAsc ( units , tmp ) else
74116: LD_ADDR_VAR 0 3
74120: PUSH
74121: LD_VAR 0 1
74125: PPUSH
74126: LD_VAR 0 5
74130: PPUSH
74131: CALL_OW 76
74135: ST_TO_ADDR
74136: GO 74158
// result := SortListByListDesc ( units , tmp ) ;
74138: LD_ADDR_VAR 0 3
74142: PUSH
74143: LD_VAR 0 1
74147: PPUSH
74148: LD_VAR 0 5
74152: PPUSH
74153: CALL_OW 77
74157: ST_TO_ADDR
// end ;
74158: LD_VAR 0 3
74162: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74163: LD_INT 0
74165: PPUSH
74166: PPUSH
// task := GetTaskList ( mech ) ;
74167: LD_ADDR_VAR 0 4
74171: PUSH
74172: LD_VAR 0 1
74176: PPUSH
74177: CALL_OW 437
74181: ST_TO_ADDR
// if not task then
74182: LD_VAR 0 4
74186: NOT
74187: IFFALSE 74191
// exit ;
74189: GO 74235
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74191: LD_ADDR_VAR 0 3
74195: PUSH
74196: LD_VAR 0 4
74200: PUSH
74201: LD_INT 1
74203: ARRAY
74204: PUSH
74205: LD_INT 1
74207: ARRAY
74208: PUSH
74209: LD_STRING r
74211: EQUAL
74212: IFFALSE 74234
74214: PUSH
74215: LD_VAR 0 4
74219: PUSH
74220: LD_INT 1
74222: ARRAY
74223: PUSH
74224: LD_INT 4
74226: ARRAY
74227: PUSH
74228: LD_VAR 0 2
74232: EQUAL
74233: AND
74234: ST_TO_ADDR
// end ;
74235: LD_VAR 0 3
74239: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74240: LD_INT 0
74242: PPUSH
// SetDir ( unit , d ) ;
74243: LD_VAR 0 1
74247: PPUSH
74248: LD_VAR 0 4
74252: PPUSH
74253: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
74257: LD_ADDR_VAR 0 6
74261: PUSH
74262: LD_VAR 0 1
74266: PPUSH
74267: LD_VAR 0 2
74271: PPUSH
74272: LD_VAR 0 3
74276: PPUSH
74277: LD_VAR 0 5
74281: PPUSH
74282: CALL_OW 48
74286: ST_TO_ADDR
// end ;
74287: LD_VAR 0 6
74291: RET
// export function ToNaturalNumber ( number ) ; begin
74292: LD_INT 0
74294: PPUSH
// result := number div 1 ;
74295: LD_ADDR_VAR 0 2
74299: PUSH
74300: LD_VAR 0 1
74304: PUSH
74305: LD_INT 1
74307: DIV
74308: ST_TO_ADDR
// if number < 0 then
74309: LD_VAR 0 1
74313: PUSH
74314: LD_INT 0
74316: LESS
74317: IFFALSE 74327
// result := 0 ;
74319: LD_ADDR_VAR 0 2
74323: PUSH
74324: LD_INT 0
74326: ST_TO_ADDR
// end ;
74327: LD_VAR 0 2
74331: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
74332: LD_INT 0
74334: PPUSH
74335: PPUSH
74336: PPUSH
// if not buildings then
74337: LD_VAR 0 1
74341: NOT
74342: IFFALSE 74346
// exit ;
74344: GO 74461
// tmp := [ ] ;
74346: LD_ADDR_VAR 0 5
74350: PUSH
74351: EMPTY
74352: ST_TO_ADDR
// for b in buildings do
74353: LD_ADDR_VAR 0 4
74357: PUSH
74358: LD_VAR 0 1
74362: PUSH
74363: FOR_IN
74364: IFFALSE 74402
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74366: LD_ADDR_VAR 0 5
74370: PUSH
74371: LD_VAR 0 5
74375: PPUSH
74376: LD_VAR 0 5
74380: PUSH
74381: LD_INT 1
74383: PLUS
74384: PPUSH
74385: LD_VAR 0 4
74389: PPUSH
74390: CALL_OW 266
74394: PPUSH
74395: CALL_OW 1
74399: ST_TO_ADDR
74400: GO 74363
74402: POP
74403: POP
// if not tmp then
74404: LD_VAR 0 5
74408: NOT
74409: IFFALSE 74413
// exit ;
74411: GO 74461
// if asc then
74413: LD_VAR 0 2
74417: IFFALSE 74441
// result := SortListByListAsc ( buildings , tmp ) else
74419: LD_ADDR_VAR 0 3
74423: PUSH
74424: LD_VAR 0 1
74428: PPUSH
74429: LD_VAR 0 5
74433: PPUSH
74434: CALL_OW 76
74438: ST_TO_ADDR
74439: GO 74461
// result := SortListByListDesc ( buildings , tmp ) ;
74441: LD_ADDR_VAR 0 3
74445: PUSH
74446: LD_VAR 0 1
74450: PPUSH
74451: LD_VAR 0 5
74455: PPUSH
74456: CALL_OW 77
74460: ST_TO_ADDR
// end ;
74461: LD_VAR 0 3
74465: RET
// export function SortByClass ( units , class ) ; var un ; begin
74466: LD_INT 0
74468: PPUSH
74469: PPUSH
// if not units or not class then
74470: LD_VAR 0 1
74474: NOT
74475: IFTRUE 74484
74477: PUSH
74478: LD_VAR 0 2
74482: NOT
74483: OR
74484: IFFALSE 74488
// exit ;
74486: GO 74583
// result := [ ] ;
74488: LD_ADDR_VAR 0 3
74492: PUSH
74493: EMPTY
74494: ST_TO_ADDR
// for un in units do
74495: LD_ADDR_VAR 0 4
74499: PUSH
74500: LD_VAR 0 1
74504: PUSH
74505: FOR_IN
74506: IFFALSE 74581
// if GetClass ( un ) = class then
74508: LD_VAR 0 4
74512: PPUSH
74513: CALL_OW 257
74517: PUSH
74518: LD_VAR 0 2
74522: EQUAL
74523: IFFALSE 74550
// result := Insert ( result , 1 , un ) else
74525: LD_ADDR_VAR 0 3
74529: PUSH
74530: LD_VAR 0 3
74534: PPUSH
74535: LD_INT 1
74537: PPUSH
74538: LD_VAR 0 4
74542: PPUSH
74543: CALL_OW 2
74547: ST_TO_ADDR
74548: GO 74579
// result := Replace ( result , result + 1 , un ) ;
74550: LD_ADDR_VAR 0 3
74554: PUSH
74555: LD_VAR 0 3
74559: PPUSH
74560: LD_VAR 0 3
74564: PUSH
74565: LD_INT 1
74567: PLUS
74568: PPUSH
74569: LD_VAR 0 4
74573: PPUSH
74574: CALL_OW 1
74578: ST_TO_ADDR
74579: GO 74505
74581: POP
74582: POP
// end ;
74583: LD_VAR 0 3
74587: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74588: LD_INT 0
74590: PPUSH
74591: PPUSH
74592: PPUSH
74593: PPUSH
74594: PPUSH
74595: PPUSH
74596: PPUSH
// result := [ ] ;
74597: LD_ADDR_VAR 0 4
74601: PUSH
74602: EMPTY
74603: ST_TO_ADDR
// if x - r < 0 then
74604: LD_VAR 0 1
74608: PUSH
74609: LD_VAR 0 3
74613: MINUS
74614: PUSH
74615: LD_INT 0
74617: LESS
74618: IFFALSE 74630
// min_x := 0 else
74620: LD_ADDR_VAR 0 8
74624: PUSH
74625: LD_INT 0
74627: ST_TO_ADDR
74628: GO 74646
// min_x := x - r ;
74630: LD_ADDR_VAR 0 8
74634: PUSH
74635: LD_VAR 0 1
74639: PUSH
74640: LD_VAR 0 3
74644: MINUS
74645: ST_TO_ADDR
// if y - r < 0 then
74646: LD_VAR 0 2
74650: PUSH
74651: LD_VAR 0 3
74655: MINUS
74656: PUSH
74657: LD_INT 0
74659: LESS
74660: IFFALSE 74672
// min_y := 0 else
74662: LD_ADDR_VAR 0 7
74666: PUSH
74667: LD_INT 0
74669: ST_TO_ADDR
74670: GO 74688
// min_y := y - r ;
74672: LD_ADDR_VAR 0 7
74676: PUSH
74677: LD_VAR 0 2
74681: PUSH
74682: LD_VAR 0 3
74686: MINUS
74687: ST_TO_ADDR
// max_x := x + r ;
74688: LD_ADDR_VAR 0 9
74692: PUSH
74693: LD_VAR 0 1
74697: PUSH
74698: LD_VAR 0 3
74702: PLUS
74703: ST_TO_ADDR
// max_y := y + r ;
74704: LD_ADDR_VAR 0 10
74708: PUSH
74709: LD_VAR 0 2
74713: PUSH
74714: LD_VAR 0 3
74718: PLUS
74719: ST_TO_ADDR
// for _x = min_x to max_x do
74720: LD_ADDR_VAR 0 5
74724: PUSH
74725: DOUBLE
74726: LD_VAR 0 8
74730: DEC
74731: ST_TO_ADDR
74732: LD_VAR 0 9
74736: PUSH
74737: FOR_TO
74738: IFFALSE 74839
// for _y = min_y to max_y do
74740: LD_ADDR_VAR 0 6
74744: PUSH
74745: DOUBLE
74746: LD_VAR 0 7
74750: DEC
74751: ST_TO_ADDR
74752: LD_VAR 0 10
74756: PUSH
74757: FOR_TO
74758: IFFALSE 74835
// begin if not ValidHex ( _x , _y ) then
74760: LD_VAR 0 5
74764: PPUSH
74765: LD_VAR 0 6
74769: PPUSH
74770: CALL_OW 488
74774: NOT
74775: IFFALSE 74779
// continue ;
74777: GO 74757
// if GetResourceTypeXY ( _x , _y ) then
74779: LD_VAR 0 5
74783: PPUSH
74784: LD_VAR 0 6
74788: PPUSH
74789: CALL_OW 283
74793: IFFALSE 74833
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74795: LD_ADDR_VAR 0 4
74799: PUSH
74800: LD_VAR 0 4
74804: PPUSH
74805: LD_VAR 0 4
74809: PUSH
74810: LD_INT 1
74812: PLUS
74813: PPUSH
74814: LD_VAR 0 5
74818: PUSH
74819: LD_VAR 0 6
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PPUSH
74828: CALL_OW 1
74832: ST_TO_ADDR
// end ;
74833: GO 74757
74835: POP
74836: POP
74837: GO 74737
74839: POP
74840: POP
// end ;
74841: LD_VAR 0 4
74845: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74846: LD_INT 0
74848: PPUSH
74849: PPUSH
74850: PPUSH
74851: PPUSH
74852: PPUSH
74853: PPUSH
74854: PPUSH
74855: PPUSH
// if not units then
74856: LD_VAR 0 1
74860: NOT
74861: IFFALSE 74865
// exit ;
74863: GO 75397
// result := UnitFilter ( units , [ f_ok ] ) ;
74865: LD_ADDR_VAR 0 3
74869: PUSH
74870: LD_VAR 0 1
74874: PPUSH
74875: LD_INT 50
74877: PUSH
74878: EMPTY
74879: LIST
74880: PPUSH
74881: CALL_OW 72
74885: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74886: LD_ADDR_VAR 0 8
74890: PUSH
74891: LD_VAR 0 1
74895: PUSH
74896: LD_INT 1
74898: ARRAY
74899: PPUSH
74900: CALL_OW 255
74904: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74905: LD_ADDR_VAR 0 10
74909: PUSH
74910: LD_INT 29
74912: PUSH
74913: LD_INT 91
74915: PUSH
74916: LD_INT 49
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: ST_TO_ADDR
// if not result then
74924: LD_VAR 0 3
74928: NOT
74929: IFFALSE 74933
// exit ;
74931: GO 75397
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74933: LD_ADDR_VAR 0 5
74937: PUSH
74938: LD_INT 81
74940: PUSH
74941: LD_VAR 0 8
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PPUSH
74950: CALL_OW 69
74954: ST_TO_ADDR
// for i in result do
74955: LD_ADDR_VAR 0 4
74959: PUSH
74960: LD_VAR 0 3
74964: PUSH
74965: FOR_IN
74966: IFFALSE 75395
// begin tag := GetTag ( i ) + 1 ;
74968: LD_ADDR_VAR 0 9
74972: PUSH
74973: LD_VAR 0 4
74977: PPUSH
74978: CALL_OW 110
74982: PUSH
74983: LD_INT 1
74985: PLUS
74986: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74987: LD_ADDR_VAR 0 7
74991: PUSH
74992: LD_VAR 0 4
74996: PPUSH
74997: CALL_OW 250
75001: PPUSH
75002: LD_VAR 0 4
75006: PPUSH
75007: CALL_OW 251
75011: PPUSH
75012: LD_INT 4
75014: PPUSH
75015: CALL 74588 0 3
75019: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
75020: LD_VAR 0 4
75024: PPUSH
75025: CALL_OW 247
75029: PUSH
75030: LD_INT 2
75032: EQUAL
75033: IFFALSE 75045
75035: PUSH
75036: LD_VAR 0 7
75040: PUSH
75041: LD_INT 2
75043: GREATER
75044: AND
75045: IFFALSE 75065
75047: PUSH
75048: LD_VAR 0 4
75052: PPUSH
75053: CALL_OW 264
75057: PUSH
75058: LD_VAR 0 10
75062: IN
75063: NOT
75064: AND
75065: IFFALSE 75104
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75067: LD_VAR 0 4
75071: PPUSH
75072: LD_VAR 0 7
75076: PUSH
75077: LD_INT 1
75079: ARRAY
75080: PUSH
75081: LD_INT 1
75083: ARRAY
75084: PPUSH
75085: LD_VAR 0 7
75089: PUSH
75090: LD_INT 1
75092: ARRAY
75093: PUSH
75094: LD_INT 2
75096: ARRAY
75097: PPUSH
75098: CALL_OW 116
75102: GO 75393
// if path > tag then
75104: LD_VAR 0 2
75108: PUSH
75109: LD_VAR 0 9
75113: GREATER
75114: IFFALSE 75322
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75116: LD_ADDR_VAR 0 6
75120: PUSH
75121: LD_VAR 0 5
75125: PPUSH
75126: LD_INT 91
75128: PUSH
75129: LD_VAR 0 4
75133: PUSH
75134: LD_INT 8
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: LIST
75141: PPUSH
75142: CALL_OW 72
75146: ST_TO_ADDR
// if nearEnemy then
75147: LD_VAR 0 6
75151: IFFALSE 75220
// begin if GetWeapon ( i ) = ru_time_lapser then
75153: LD_VAR 0 4
75157: PPUSH
75158: CALL_OW 264
75162: PUSH
75163: LD_INT 49
75165: EQUAL
75166: IFFALSE 75194
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75168: LD_VAR 0 4
75172: PPUSH
75173: LD_VAR 0 6
75177: PPUSH
75178: LD_VAR 0 4
75182: PPUSH
75183: CALL_OW 74
75187: PPUSH
75188: CALL_OW 112
75192: GO 75218
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75194: LD_VAR 0 4
75198: PPUSH
75199: LD_VAR 0 6
75203: PPUSH
75204: LD_VAR 0 4
75208: PPUSH
75209: CALL_OW 74
75213: PPUSH
75214: CALL 76478 0 2
// end else
75218: GO 75320
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75220: LD_VAR 0 4
75224: PPUSH
75225: LD_VAR 0 2
75229: PUSH
75230: LD_VAR 0 9
75234: ARRAY
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PPUSH
75240: LD_VAR 0 2
75244: PUSH
75245: LD_VAR 0 9
75249: ARRAY
75250: PUSH
75251: LD_INT 2
75253: ARRAY
75254: PPUSH
75255: CALL_OW 297
75259: PUSH
75260: LD_INT 6
75262: GREATER
75263: IFFALSE 75306
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75265: LD_VAR 0 4
75269: PPUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_VAR 0 9
75279: ARRAY
75280: PUSH
75281: LD_INT 1
75283: ARRAY
75284: PPUSH
75285: LD_VAR 0 2
75289: PUSH
75290: LD_VAR 0 9
75294: ARRAY
75295: PUSH
75296: LD_INT 2
75298: ARRAY
75299: PPUSH
75300: CALL_OW 114
75304: GO 75320
// SetTag ( i , tag ) ;
75306: LD_VAR 0 4
75310: PPUSH
75311: LD_VAR 0 9
75315: PPUSH
75316: CALL_OW 109
// end else
75320: GO 75393
// if enemy then
75322: LD_VAR 0 5
75326: IFFALSE 75393
// begin if GetWeapon ( i ) = ru_time_lapser then
75328: LD_VAR 0 4
75332: PPUSH
75333: CALL_OW 264
75337: PUSH
75338: LD_INT 49
75340: EQUAL
75341: IFFALSE 75369
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75343: LD_VAR 0 4
75347: PPUSH
75348: LD_VAR 0 5
75352: PPUSH
75353: LD_VAR 0 4
75357: PPUSH
75358: CALL_OW 74
75362: PPUSH
75363: CALL_OW 112
75367: GO 75393
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75369: LD_VAR 0 4
75373: PPUSH
75374: LD_VAR 0 5
75378: PPUSH
75379: LD_VAR 0 4
75383: PPUSH
75384: CALL_OW 74
75388: PPUSH
75389: CALL 76478 0 2
// end ; end ;
75393: GO 74965
75395: POP
75396: POP
// end ;
75397: LD_VAR 0 3
75401: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75402: LD_INT 0
75404: PPUSH
75405: PPUSH
75406: PPUSH
// if not unit or IsInUnit ( unit ) then
75407: LD_VAR 0 1
75411: NOT
75412: IFTRUE 75425
75414: PUSH
75415: LD_VAR 0 1
75419: PPUSH
75420: CALL_OW 310
75424: OR
75425: IFFALSE 75429
// exit ;
75427: GO 75520
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75429: LD_ADDR_VAR 0 4
75433: PUSH
75434: LD_VAR 0 1
75438: PPUSH
75439: CALL_OW 250
75443: PPUSH
75444: LD_VAR 0 2
75448: PPUSH
75449: LD_INT 1
75451: PPUSH
75452: CALL_OW 272
75456: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75457: LD_ADDR_VAR 0 5
75461: PUSH
75462: LD_VAR 0 1
75466: PPUSH
75467: CALL_OW 251
75471: PPUSH
75472: LD_VAR 0 2
75476: PPUSH
75477: LD_INT 1
75479: PPUSH
75480: CALL_OW 273
75484: ST_TO_ADDR
// if ValidHex ( x , y ) then
75485: LD_VAR 0 4
75489: PPUSH
75490: LD_VAR 0 5
75494: PPUSH
75495: CALL_OW 488
75499: IFFALSE 75520
// ComTurnXY ( unit , x , y ) ;
75501: LD_VAR 0 1
75505: PPUSH
75506: LD_VAR 0 4
75510: PPUSH
75511: LD_VAR 0 5
75515: PPUSH
75516: CALL_OW 118
// end ;
75520: LD_VAR 0 3
75524: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75525: LD_INT 0
75527: PPUSH
75528: PPUSH
// result := false ;
75529: LD_ADDR_VAR 0 3
75533: PUSH
75534: LD_INT 0
75536: ST_TO_ADDR
// if not units then
75537: LD_VAR 0 2
75541: NOT
75542: IFFALSE 75546
// exit ;
75544: GO 75591
// for i in units do
75546: LD_ADDR_VAR 0 4
75550: PUSH
75551: LD_VAR 0 2
75555: PUSH
75556: FOR_IN
75557: IFFALSE 75589
// if See ( side , i ) then
75559: LD_VAR 0 1
75563: PPUSH
75564: LD_VAR 0 4
75568: PPUSH
75569: CALL_OW 292
75573: IFFALSE 75587
// begin result := true ;
75575: LD_ADDR_VAR 0 3
75579: PUSH
75580: LD_INT 1
75582: ST_TO_ADDR
// exit ;
75583: POP
75584: POP
75585: GO 75591
// end ;
75587: GO 75556
75589: POP
75590: POP
// end ;
75591: LD_VAR 0 3
75595: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75596: LD_INT 0
75598: PPUSH
75599: PPUSH
75600: PPUSH
75601: PPUSH
// if not unit or not points then
75602: LD_VAR 0 1
75606: NOT
75607: IFTRUE 75616
75609: PUSH
75610: LD_VAR 0 2
75614: NOT
75615: OR
75616: IFFALSE 75620
// exit ;
75618: GO 75710
// dist := 99999 ;
75620: LD_ADDR_VAR 0 5
75624: PUSH
75625: LD_INT 99999
75627: ST_TO_ADDR
// for i in points do
75628: LD_ADDR_VAR 0 4
75632: PUSH
75633: LD_VAR 0 2
75637: PUSH
75638: FOR_IN
75639: IFFALSE 75708
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75641: LD_ADDR_VAR 0 6
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: LD_VAR 0 4
75655: PUSH
75656: LD_INT 1
75658: ARRAY
75659: PPUSH
75660: LD_VAR 0 4
75664: PUSH
75665: LD_INT 2
75667: ARRAY
75668: PPUSH
75669: CALL_OW 297
75673: ST_TO_ADDR
// if tmpDist < dist then
75674: LD_VAR 0 6
75678: PUSH
75679: LD_VAR 0 5
75683: LESS
75684: IFFALSE 75706
// begin result := i ;
75686: LD_ADDR_VAR 0 3
75690: PUSH
75691: LD_VAR 0 4
75695: ST_TO_ADDR
// dist := tmpDist ;
75696: LD_ADDR_VAR 0 5
75700: PUSH
75701: LD_VAR 0 6
75705: ST_TO_ADDR
// end ; end ;
75706: GO 75638
75708: POP
75709: POP
// end ;
75710: LD_VAR 0 3
75714: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75715: LD_INT 0
75717: PPUSH
// uc_side := side ;
75718: LD_ADDR_OWVAR 20
75722: PUSH
75723: LD_VAR 0 1
75727: ST_TO_ADDR
// uc_nation := 3 ;
75728: LD_ADDR_OWVAR 21
75732: PUSH
75733: LD_INT 3
75735: ST_TO_ADDR
// vc_chassis := 25 ;
75736: LD_ADDR_OWVAR 37
75740: PUSH
75741: LD_INT 25
75743: ST_TO_ADDR
// vc_engine := engine_siberite ;
75744: LD_ADDR_OWVAR 39
75748: PUSH
75749: LD_INT 3
75751: ST_TO_ADDR
// vc_control := control_computer ;
75752: LD_ADDR_OWVAR 38
75756: PUSH
75757: LD_INT 3
75759: ST_TO_ADDR
// vc_weapon := 59 ;
75760: LD_ADDR_OWVAR 40
75764: PUSH
75765: LD_INT 59
75767: ST_TO_ADDR
// result := CreateVehicle ;
75768: LD_ADDR_VAR 0 5
75772: PUSH
75773: CALL_OW 45
75777: ST_TO_ADDR
// SetDir ( result , d ) ;
75778: LD_VAR 0 5
75782: PPUSH
75783: LD_VAR 0 4
75787: PPUSH
75788: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75792: LD_VAR 0 5
75796: PPUSH
75797: LD_VAR 0 2
75801: PPUSH
75802: LD_VAR 0 3
75806: PPUSH
75807: LD_INT 0
75809: PPUSH
75810: CALL_OW 48
// end ;
75814: LD_VAR 0 5
75818: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75819: LD_INT 0
75821: PPUSH
75822: PPUSH
75823: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75824: LD_ADDR_VAR 0 2
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: LD_INT 0
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: LD_INT 0
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75847: LD_VAR 0 1
75851: NOT
75852: IFTRUE 75885
75854: PUSH
75855: LD_VAR 0 1
75859: PPUSH
75860: CALL_OW 264
75864: PUSH
75865: LD_INT 12
75867: PUSH
75868: LD_INT 51
75870: PUSH
75871: LD_INT 32
75873: PUSH
75874: LD_INT 89
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: IN
75883: NOT
75884: OR
75885: IFFALSE 75889
// exit ;
75887: GO 75987
// for i := 1 to 3 do
75889: LD_ADDR_VAR 0 3
75893: PUSH
75894: DOUBLE
75895: LD_INT 1
75897: DEC
75898: ST_TO_ADDR
75899: LD_INT 3
75901: PUSH
75902: FOR_TO
75903: IFFALSE 75985
// begin tmp := GetCargo ( cargo , i ) ;
75905: LD_ADDR_VAR 0 4
75909: PUSH
75910: LD_VAR 0 1
75914: PPUSH
75915: LD_VAR 0 3
75919: PPUSH
75920: CALL_OW 289
75924: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75925: LD_ADDR_VAR 0 2
75929: PUSH
75930: LD_VAR 0 2
75934: PPUSH
75935: LD_VAR 0 3
75939: PPUSH
75940: LD_VAR 0 4
75944: PPUSH
75945: CALL_OW 1
75949: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75950: LD_ADDR_VAR 0 2
75954: PUSH
75955: LD_VAR 0 2
75959: PPUSH
75960: LD_INT 4
75962: PPUSH
75963: LD_VAR 0 2
75967: PUSH
75968: LD_INT 4
75970: ARRAY
75971: PUSH
75972: LD_VAR 0 4
75976: PLUS
75977: PPUSH
75978: CALL_OW 1
75982: ST_TO_ADDR
// end ;
75983: GO 75902
75985: POP
75986: POP
// end ;
75987: LD_VAR 0 2
75991: RET
// export function Length ( array ) ; begin
75992: LD_INT 0
75994: PPUSH
// result := array + 0 ;
75995: LD_ADDR_VAR 0 2
75999: PUSH
76000: LD_VAR 0 1
76004: PUSH
76005: LD_INT 0
76007: PLUS
76008: ST_TO_ADDR
// end ;
76009: LD_VAR 0 2
76013: RET
// export function PrepareArray ( array ) ; begin
76014: LD_INT 0
76016: PPUSH
// result := array diff 0 ;
76017: LD_ADDR_VAR 0 2
76021: PUSH
76022: LD_VAR 0 1
76026: PUSH
76027: LD_INT 0
76029: DIFF
76030: ST_TO_ADDR
// if not result [ 1 ] then
76031: LD_VAR 0 2
76035: PUSH
76036: LD_INT 1
76038: ARRAY
76039: NOT
76040: IFFALSE 76060
// result := Delete ( result , 1 ) ;
76042: LD_ADDR_VAR 0 2
76046: PUSH
76047: LD_VAR 0 2
76051: PPUSH
76052: LD_INT 1
76054: PPUSH
76055: CALL_OW 3
76059: ST_TO_ADDR
// end ;
76060: LD_VAR 0 2
76064: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76065: LD_INT 0
76067: PPUSH
76068: PPUSH
76069: PPUSH
76070: PPUSH
// sibRocketRange := 25 ;
76071: LD_ADDR_VAR 0 6
76075: PUSH
76076: LD_INT 25
76078: ST_TO_ADDR
// result := false ;
76079: LD_ADDR_VAR 0 4
76083: PUSH
76084: LD_INT 0
76086: ST_TO_ADDR
// for i := 0 to 5 do
76087: LD_ADDR_VAR 0 5
76091: PUSH
76092: DOUBLE
76093: LD_INT 0
76095: DEC
76096: ST_TO_ADDR
76097: LD_INT 5
76099: PUSH
76100: FOR_TO
76101: IFFALSE 76168
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76103: LD_VAR 0 1
76107: PPUSH
76108: LD_VAR 0 5
76112: PPUSH
76113: LD_VAR 0 6
76117: PPUSH
76118: CALL_OW 272
76122: PPUSH
76123: LD_VAR 0 2
76127: PPUSH
76128: LD_VAR 0 5
76132: PPUSH
76133: LD_VAR 0 6
76137: PPUSH
76138: CALL_OW 273
76142: PPUSH
76143: LD_VAR 0 3
76147: PPUSH
76148: CALL_OW 309
76152: IFFALSE 76166
// begin result := true ;
76154: LD_ADDR_VAR 0 4
76158: PUSH
76159: LD_INT 1
76161: ST_TO_ADDR
// exit ;
76162: POP
76163: POP
76164: GO 76170
// end ;
76166: GO 76100
76168: POP
76169: POP
// end ;
76170: LD_VAR 0 4
76174: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76175: LD_INT 0
76177: PPUSH
76178: PPUSH
76179: PPUSH
// if btype = b_depot then
76180: LD_VAR 0 2
76184: PUSH
76185: LD_INT 0
76187: EQUAL
76188: IFFALSE 76200
// begin result := true ;
76190: LD_ADDR_VAR 0 3
76194: PUSH
76195: LD_INT 1
76197: ST_TO_ADDR
// exit ;
76198: GO 76320
// end ; pom := GetBase ( depot ) ;
76200: LD_ADDR_VAR 0 4
76204: PUSH
76205: LD_VAR 0 1
76209: PPUSH
76210: CALL_OW 274
76214: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76215: LD_ADDR_VAR 0 5
76219: PUSH
76220: LD_VAR 0 2
76224: PPUSH
76225: LD_VAR 0 1
76229: PPUSH
76230: CALL_OW 248
76234: PPUSH
76235: CALL_OW 450
76239: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
76240: LD_ADDR_VAR 0 3
76244: PUSH
76245: LD_VAR 0 4
76249: PPUSH
76250: LD_INT 1
76252: PPUSH
76253: CALL_OW 275
76257: PUSH
76258: LD_VAR 0 5
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: GREATEREQUAL
76267: IFFALSE 76293
76269: PUSH
76270: LD_VAR 0 4
76274: PPUSH
76275: LD_INT 2
76277: PPUSH
76278: CALL_OW 275
76282: PUSH
76283: LD_VAR 0 5
76287: PUSH
76288: LD_INT 2
76290: ARRAY
76291: GREATEREQUAL
76292: AND
76293: IFFALSE 76319
76295: PUSH
76296: LD_VAR 0 4
76300: PPUSH
76301: LD_INT 3
76303: PPUSH
76304: CALL_OW 275
76308: PUSH
76309: LD_VAR 0 5
76313: PUSH
76314: LD_INT 3
76316: ARRAY
76317: GREATEREQUAL
76318: AND
76319: ST_TO_ADDR
// end ;
76320: LD_VAR 0 3
76324: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76325: LD_INT 0
76327: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76328: LD_VAR 0 1
76332: PPUSH
76333: LD_VAR 0 2
76337: PPUSH
76338: LD_INT 0
76340: PPUSH
76341: LD_INT 0
76343: PPUSH
76344: LD_INT 1
76346: PPUSH
76347: LD_INT 0
76349: PPUSH
76350: CALL_OW 587
// end ;
76354: LD_VAR 0 3
76358: RET
// export function CenterOnNow ( unit ) ; begin
76359: LD_INT 0
76361: PPUSH
// result := IsInUnit ( unit ) ;
76362: LD_ADDR_VAR 0 2
76366: PUSH
76367: LD_VAR 0 1
76371: PPUSH
76372: CALL_OW 310
76376: ST_TO_ADDR
// if not result then
76377: LD_VAR 0 2
76381: NOT
76382: IFFALSE 76394
// result := unit ;
76384: LD_ADDR_VAR 0 2
76388: PUSH
76389: LD_VAR 0 1
76393: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76394: LD_VAR 0 1
76398: PPUSH
76399: CALL_OW 87
// end ;
76403: LD_VAR 0 2
76407: RET
// export function ComMoveHex ( unit , hex ) ; begin
76408: LD_INT 0
76410: PPUSH
// if not hex then
76411: LD_VAR 0 2
76415: NOT
76416: IFFALSE 76420
// exit ;
76418: GO 76473
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76420: LD_VAR 0 2
76424: PUSH
76425: LD_INT 1
76427: ARRAY
76428: PPUSH
76429: LD_VAR 0 2
76433: PUSH
76434: LD_INT 2
76436: ARRAY
76437: PPUSH
76438: CALL_OW 428
76442: IFFALSE 76446
// exit ;
76444: GO 76473
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76446: LD_VAR 0 1
76450: PPUSH
76451: LD_VAR 0 2
76455: PUSH
76456: LD_INT 1
76458: ARRAY
76459: PPUSH
76460: LD_VAR 0 2
76464: PUSH
76465: LD_INT 2
76467: ARRAY
76468: PPUSH
76469: CALL_OW 111
// end ;
76473: LD_VAR 0 3
76477: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76478: LD_INT 0
76480: PPUSH
76481: PPUSH
76482: PPUSH
// if not unit or not enemy then
76483: LD_VAR 0 1
76487: NOT
76488: IFTRUE 76497
76490: PUSH
76491: LD_VAR 0 2
76495: NOT
76496: OR
76497: IFFALSE 76501
// exit ;
76499: GO 76627
// x := GetX ( enemy ) ;
76501: LD_ADDR_VAR 0 4
76505: PUSH
76506: LD_VAR 0 2
76510: PPUSH
76511: CALL_OW 250
76515: ST_TO_ADDR
// y := GetY ( enemy ) ;
76516: LD_ADDR_VAR 0 5
76520: PUSH
76521: LD_VAR 0 2
76525: PPUSH
76526: CALL_OW 251
76530: ST_TO_ADDR
// if ValidHex ( x , y ) then
76531: LD_VAR 0 4
76535: PPUSH
76536: LD_VAR 0 5
76540: PPUSH
76541: CALL_OW 488
76545: IFFALSE 76627
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76547: LD_VAR 0 2
76551: PPUSH
76552: CALL_OW 247
76556: PUSH
76557: LD_INT 3
76559: PUSH
76560: LD_INT 2
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: IN
76567: IFTRUE 76590
76569: PUSH
76570: LD_VAR 0 1
76574: PPUSH
76575: CALL_OW 255
76579: PPUSH
76580: LD_VAR 0 2
76584: PPUSH
76585: CALL_OW 292
76589: OR
76590: IFFALSE 76608
// ComAttackUnit ( unit , enemy ) else
76592: LD_VAR 0 1
76596: PPUSH
76597: LD_VAR 0 2
76601: PPUSH
76602: CALL_OW 115
76606: GO 76627
// ComAgressiveMove ( unit , x , y ) ;
76608: LD_VAR 0 1
76612: PPUSH
76613: LD_VAR 0 4
76617: PPUSH
76618: LD_VAR 0 5
76622: PPUSH
76623: CALL_OW 114
// end ;
76627: LD_VAR 0 3
76631: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76632: LD_INT 0
76634: PPUSH
76635: PPUSH
76636: PPUSH
// list := AreaToList ( area , 0 ) ;
76637: LD_ADDR_VAR 0 5
76641: PUSH
76642: LD_VAR 0 1
76646: PPUSH
76647: LD_INT 0
76649: PPUSH
76650: CALL_OW 517
76654: ST_TO_ADDR
// if not list then
76655: LD_VAR 0 5
76659: NOT
76660: IFFALSE 76664
// exit ;
76662: GO 76794
// if all then
76664: LD_VAR 0 2
76668: IFFALSE 76756
// begin for i := 1 to list [ 1 ] do
76670: LD_ADDR_VAR 0 4
76674: PUSH
76675: DOUBLE
76676: LD_INT 1
76678: DEC
76679: ST_TO_ADDR
76680: LD_VAR 0 5
76684: PUSH
76685: LD_INT 1
76687: ARRAY
76688: PUSH
76689: FOR_TO
76690: IFFALSE 76752
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76692: LD_ADDR_VAR 0 3
76696: PUSH
76697: LD_VAR 0 3
76701: PPUSH
76702: LD_VAR 0 3
76706: PUSH
76707: LD_INT 1
76709: PLUS
76710: PPUSH
76711: LD_VAR 0 5
76715: PUSH
76716: LD_INT 1
76718: ARRAY
76719: PUSH
76720: LD_VAR 0 4
76724: ARRAY
76725: PUSH
76726: LD_VAR 0 5
76730: PUSH
76731: LD_INT 2
76733: ARRAY
76734: PUSH
76735: LD_VAR 0 4
76739: ARRAY
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PPUSH
76745: CALL_OW 1
76749: ST_TO_ADDR
76750: GO 76689
76752: POP
76753: POP
// exit ;
76754: GO 76794
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76756: LD_ADDR_VAR 0 3
76760: PUSH
76761: LD_VAR 0 5
76765: PUSH
76766: LD_INT 1
76768: ARRAY
76769: PUSH
76770: LD_INT 1
76772: ARRAY
76773: PUSH
76774: LD_VAR 0 5
76778: PUSH
76779: LD_INT 2
76781: ARRAY
76782: PUSH
76783: LD_INT 1
76785: ARRAY
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: PUSH
76791: EMPTY
76792: LIST
76793: ST_TO_ADDR
// end ;
76794: LD_VAR 0 3
76798: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76799: LD_INT 0
76801: PPUSH
76802: PPUSH
// list := AreaToList ( area , 0 ) ;
76803: LD_ADDR_VAR 0 4
76807: PUSH
76808: LD_VAR 0 1
76812: PPUSH
76813: LD_INT 0
76815: PPUSH
76816: CALL_OW 517
76820: ST_TO_ADDR
// if not list then
76821: LD_VAR 0 4
76825: NOT
76826: IFFALSE 76830
// exit ;
76828: GO 76871
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76830: LD_ADDR_VAR 0 3
76834: PUSH
76835: LD_VAR 0 4
76839: PUSH
76840: LD_INT 1
76842: ARRAY
76843: PUSH
76844: LD_INT 1
76846: ARRAY
76847: PUSH
76848: LD_VAR 0 4
76852: PUSH
76853: LD_INT 2
76855: ARRAY
76856: PUSH
76857: LD_INT 1
76859: ARRAY
76860: PUSH
76861: LD_VAR 0 2
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: ST_TO_ADDR
// end ;
76871: LD_VAR 0 3
76875: RET
// export function First ( array ) ; begin
76876: LD_INT 0
76878: PPUSH
// if not array then
76879: LD_VAR 0 1
76883: NOT
76884: IFFALSE 76888
// exit ;
76886: GO 76902
// result := array [ 1 ] ;
76888: LD_ADDR_VAR 0 2
76892: PUSH
76893: LD_VAR 0 1
76897: PUSH
76898: LD_INT 1
76900: ARRAY
76901: ST_TO_ADDR
// end ;
76902: LD_VAR 0 2
76906: RET
// export function Last ( array ) ; begin
76907: LD_INT 0
76909: PPUSH
// if not array then
76910: LD_VAR 0 1
76914: NOT
76915: IFFALSE 76919
// exit ;
76917: GO 76935
// result := array [ array ] ;
76919: LD_ADDR_VAR 0 2
76923: PUSH
76924: LD_VAR 0 1
76928: PUSH
76929: LD_VAR 0 1
76933: ARRAY
76934: ST_TO_ADDR
// end ;
76935: LD_VAR 0 2
76939: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76940: LD_INT 0
76942: PPUSH
76943: PPUSH
// result := [ ] ;
76944: LD_ADDR_VAR 0 5
76948: PUSH
76949: EMPTY
76950: ST_TO_ADDR
// if not array then
76951: LD_VAR 0 1
76955: NOT
76956: IFFALSE 76960
// exit ;
76958: GO 77072
// for i := 1 to array do
76960: LD_ADDR_VAR 0 6
76964: PUSH
76965: DOUBLE
76966: LD_INT 1
76968: DEC
76969: ST_TO_ADDR
76970: LD_VAR 0 1
76974: PUSH
76975: FOR_TO
76976: IFFALSE 77070
// if array [ i ] [ index ] = value then
76978: LD_VAR 0 1
76982: PUSH
76983: LD_VAR 0 6
76987: ARRAY
76988: PUSH
76989: LD_VAR 0 2
76993: ARRAY
76994: PUSH
76995: LD_VAR 0 3
76999: EQUAL
77000: IFFALSE 77068
// begin if indexColumn then
77002: LD_VAR 0 4
77006: IFFALSE 77042
// result := Join ( result , array [ i ] [ indexColumn ] ) else
77008: LD_ADDR_VAR 0 5
77012: PUSH
77013: LD_VAR 0 5
77017: PPUSH
77018: LD_VAR 0 1
77022: PUSH
77023: LD_VAR 0 6
77027: ARRAY
77028: PUSH
77029: LD_VAR 0 4
77033: ARRAY
77034: PPUSH
77035: CALL 72080 0 2
77039: ST_TO_ADDR
77040: GO 77068
// result := Join ( result , array [ i ] ) ;
77042: LD_ADDR_VAR 0 5
77046: PUSH
77047: LD_VAR 0 5
77051: PPUSH
77052: LD_VAR 0 1
77056: PUSH
77057: LD_VAR 0 6
77061: ARRAY
77062: PPUSH
77063: CALL 72080 0 2
77067: ST_TO_ADDR
// end ;
77068: GO 76975
77070: POP
77071: POP
// end ;
77072: LD_VAR 0 5
77076: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
77077: LD_INT 0
77079: PPUSH
// if not vehicles or not parkingPoint then
77080: LD_VAR 0 1
77084: NOT
77085: IFTRUE 77094
77087: PUSH
77088: LD_VAR 0 2
77092: NOT
77093: OR
77094: IFFALSE 77098
// exit ;
77096: GO 77196
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
77098: LD_ADDR_VAR 0 1
77102: PUSH
77103: LD_VAR 0 1
77107: PPUSH
77108: LD_INT 50
77110: PUSH
77111: EMPTY
77112: LIST
77113: PUSH
77114: LD_INT 3
77116: PUSH
77117: LD_INT 92
77119: PUSH
77120: LD_VAR 0 2
77124: PUSH
77125: LD_INT 1
77127: ARRAY
77128: PUSH
77129: LD_VAR 0 2
77133: PUSH
77134: LD_INT 2
77136: ARRAY
77137: PUSH
77138: LD_INT 8
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PPUSH
77155: CALL_OW 72
77159: ST_TO_ADDR
// if not vehicles then
77160: LD_VAR 0 1
77164: NOT
77165: IFFALSE 77169
// exit ;
77167: GO 77196
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
77169: LD_VAR 0 1
77173: PPUSH
77174: LD_VAR 0 2
77178: PUSH
77179: LD_INT 1
77181: ARRAY
77182: PPUSH
77183: LD_VAR 0 2
77187: PUSH
77188: LD_INT 2
77190: ARRAY
77191: PPUSH
77192: CALL_OW 111
// end ;
77196: LD_VAR 0 3
77200: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
77201: LD_INT 0
77203: PPUSH
77204: PPUSH
77205: PPUSH
// if not side or not area then
77206: LD_VAR 0 1
77210: NOT
77211: IFTRUE 77220
77213: PUSH
77214: LD_VAR 0 2
77218: NOT
77219: OR
77220: IFFALSE 77224
// exit ;
77222: GO 77343
// tmp := AreaToList ( area , 0 ) ;
77224: LD_ADDR_VAR 0 5
77228: PUSH
77229: LD_VAR 0 2
77233: PPUSH
77234: LD_INT 0
77236: PPUSH
77237: CALL_OW 517
77241: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
77242: LD_ADDR_VAR 0 4
77246: PUSH
77247: DOUBLE
77248: LD_INT 1
77250: DEC
77251: ST_TO_ADDR
77252: LD_VAR 0 5
77256: PUSH
77257: LD_INT 1
77259: ARRAY
77260: PUSH
77261: FOR_TO
77262: IFFALSE 77341
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
77264: LD_VAR 0 5
77268: PUSH
77269: LD_INT 1
77271: ARRAY
77272: PUSH
77273: LD_VAR 0 4
77277: ARRAY
77278: PPUSH
77279: LD_VAR 0 5
77283: PUSH
77284: LD_INT 2
77286: ARRAY
77287: PUSH
77288: LD_VAR 0 4
77292: ARRAY
77293: PPUSH
77294: CALL_OW 351
77298: IFFALSE 77339
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
77300: LD_VAR 0 5
77304: PUSH
77305: LD_INT 1
77307: ARRAY
77308: PUSH
77309: LD_VAR 0 4
77313: ARRAY
77314: PPUSH
77315: LD_VAR 0 5
77319: PUSH
77320: LD_INT 2
77322: ARRAY
77323: PUSH
77324: LD_VAR 0 4
77328: ARRAY
77329: PPUSH
77330: LD_VAR 0 1
77334: PPUSH
77335: CALL_OW 244
// end ;
77339: GO 77261
77341: POP
77342: POP
// end ;
77343: LD_VAR 0 3
77347: RET
// export function UniqueArray ( array ) ; var i ; begin
77348: LD_INT 0
77350: PPUSH
77351: PPUSH
// result := [ ] ;
77352: LD_ADDR_VAR 0 2
77356: PUSH
77357: EMPTY
77358: ST_TO_ADDR
// if not array then
77359: LD_VAR 0 1
77363: NOT
77364: IFFALSE 77368
// exit ;
77366: GO 77429
// for i := 1 to array do
77368: LD_ADDR_VAR 0 3
77372: PUSH
77373: DOUBLE
77374: LD_INT 1
77376: DEC
77377: ST_TO_ADDR
77378: LD_VAR 0 1
77382: PUSH
77383: FOR_TO
77384: IFFALSE 77427
// if not array [ i ] in result then
77386: LD_VAR 0 1
77390: PUSH
77391: LD_VAR 0 3
77395: ARRAY
77396: PUSH
77397: LD_VAR 0 2
77401: IN
77402: NOT
77403: IFFALSE 77425
// result := Join ( result , i ) ;
77405: LD_ADDR_VAR 0 2
77409: PUSH
77410: LD_VAR 0 2
77414: PPUSH
77415: LD_VAR 0 3
77419: PPUSH
77420: CALL 72080 0 2
77424: ST_TO_ADDR
77425: GO 77383
77427: POP
77428: POP
// end ; end_of_file
77429: LD_VAR 0 2
77433: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77434: LD_VAR 0 1
77438: PUSH
77439: LD_INT 200
77441: DOUBLE
77442: GREATEREQUAL
77443: IFFALSE 77451
77445: LD_INT 299
77447: DOUBLE
77448: LESSEQUAL
77449: IFTRUE 77453
77451: GO 77485
77453: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77454: LD_VAR 0 1
77458: PPUSH
77459: LD_VAR 0 2
77463: PPUSH
77464: LD_VAR 0 3
77468: PPUSH
77469: LD_VAR 0 4
77473: PPUSH
77474: LD_VAR 0 5
77478: PPUSH
77479: CALL 28156 0 5
77483: GO 77562
77485: LD_INT 300
77487: DOUBLE
77488: GREATEREQUAL
77489: IFFALSE 77497
77491: LD_INT 399
77493: DOUBLE
77494: LESSEQUAL
77495: IFTRUE 77499
77497: GO 77561
77499: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77500: LD_VAR 0 1
77504: PPUSH
77505: LD_VAR 0 2
77509: PPUSH
77510: LD_VAR 0 3
77514: PPUSH
77515: LD_VAR 0 4
77519: PPUSH
77520: LD_VAR 0 5
77524: PPUSH
77525: LD_VAR 0 6
77529: PPUSH
77530: LD_VAR 0 7
77534: PPUSH
77535: LD_VAR 0 8
77539: PPUSH
77540: LD_VAR 0 9
77544: PPUSH
77545: LD_VAR 0 10
77549: PPUSH
77550: LD_VAR 0 11
77554: PPUSH
77555: CALL 23959 0 11
77559: GO 77562
77561: POP
// end ;
77562: PPOPN 11
77564: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77565: LD_VAR 0 1
77569: PPUSH
77570: LD_VAR 0 2
77574: PPUSH
77575: LD_VAR 0 3
77579: PPUSH
77580: LD_VAR 0 4
77584: PPUSH
77585: LD_VAR 0 5
77589: PPUSH
77590: CALL 27456 0 5
// end ; end_of_file
77594: PPOPN 5
77596: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77597: LD_VAR 0 1
77601: PPUSH
77602: LD_VAR 0 2
77606: PPUSH
77607: LD_VAR 0 3
77611: PPUSH
77612: LD_VAR 0 4
77616: PPUSH
77617: LD_VAR 0 5
77621: PPUSH
77622: LD_VAR 0 6
77626: PPUSH
77627: CALL 11499 0 6
// end ;
77631: PPOPN 6
77633: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77634: LD_INT 0
77636: PPUSH
// begin if not units then
77637: LD_VAR 0 1
77641: NOT
77642: IFFALSE 77646
// exit ;
77644: GO 77680
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77646: LD_VAR 0 1
77650: PPUSH
77651: LD_VAR 0 2
77655: PPUSH
77656: LD_VAR 0 3
77660: PPUSH
77661: LD_VAR 0 4
77665: PPUSH
77666: LD_VAR 0 5
77670: PPUSH
77671: LD_VAR 0 6
77675: PPUSH
77676: CALL 33853 0 6
// end ;
77680: PPOPN 7
77682: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77683: CALL 11379 0 0
// end ;
77687: PPOPN 1
77689: END
