// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// PrepareVehicles ;
 219: CALL 1203 0 0
// PrepareHeroes ;
 223: CALL 460 0 0
// PrepareAmericansRandom ;
 227: CALL 1107 0 0
// PrepareDifficulty ;
 231: CALL 8409 0 0
// Action ;
 235: CALL 5273 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode do var i , j ;
 240: LD_EXP 40
 244: IFFALSE 415
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
// begin enable ;
 253: ENABLE
// FogOff ( true ) ;
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 22
 268: PUSH
 269: LD_INT 1
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 69
 294: PUSH
 295: FOR_IN
 296: IFFALSE 312
// SetLives ( i , 1000 ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_INT 1000
 305: PPUSH
 306: CALL_OW 234
 310: GO 295
 312: POP
 313: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 30
 334: PUSH
 335: LD_INT 0
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 413
// for j := 1 to 3 do
 369: LD_ADDR_VAR 0 2
 373: PUSH
 374: DOUBLE
 375: LD_INT 1
 377: DEC
 378: ST_TO_ADDR
 379: LD_INT 3
 381: PUSH
 382: FOR_TO
 383: IFFALSE 409
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: LD_INT 9999
 402: PPUSH
 403: CALL_OW 277
 407: GO 382
 409: POP
 410: POP
 411: GO 366
 413: POP
 414: POP
// end ;
 415: PPOPN 2
 417: END
// every 0 0$1 trigger achivCounter >= 2 do
 418: LD_EXP 41
 422: PUSH
 423: LD_INT 2
 425: GREATEREQUAL
 426: IFFALSE 438
 428: GO 430
 430: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 431: LD_STRING ACH_REMOTE
 433: PPUSH
 434: CALL_OW 543
 438: END
// every 0 0$1 trigger destroyCounter >= 30 do
 439: LD_EXP 42
 443: PUSH
 444: LD_INT 30
 446: GREATEREQUAL
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 452: LD_STRING ACH_DEFMASTER
 454: PPUSH
 455: CALL_OW 543
 459: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
 464: PPUSH
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING JMM
 481: PPUSH
 482: LD_EXP 40
 486: NOT
 487: PPUSH
 488: LD_STRING 13c_
 490: PPUSH
 491: CALL 30922 0 3
 495: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 496: LD_ADDR_EXP 2
 500: PUSH
 501: LD_STRING Stevens
 503: PPUSH
 504: LD_EXP 40
 508: NOT
 509: PPUSH
 510: LD_STRING 13c_
 512: PPUSH
 513: CALL 30922 0 3
 517: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 518: LD_ADDR_EXP 3
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 40
 530: NOT
 531: PPUSH
 532: LD_STRING 13c_
 534: PPUSH
 535: CALL 30922 0 3
 539: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 540: LD_ADDR_EXP 4
 544: PUSH
 545: LD_STRING Donaldson
 547: PPUSH
 548: LD_EXP 40
 552: NOT
 553: PPUSH
 554: LD_STRING 13c_
 556: PPUSH
 557: CALL 30922 0 3
 561: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_STRING Bobby
 569: PPUSH
 570: LD_EXP 40
 574: NOT
 575: PPUSH
 576: LD_STRING 13c_
 578: PPUSH
 579: CALL 30922 0 3
 583: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 584: LD_ADDR_EXP 6
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_EXP 40
 596: NOT
 597: PPUSH
 598: LD_STRING 13c_
 600: PPUSH
 601: CALL 30922 0 3
 605: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 606: LD_ADDR_EXP 7
 610: PUSH
 611: LD_STRING Denis
 613: PPUSH
 614: LD_EXP 40
 618: NOT
 619: PPUSH
 620: LD_STRING 13c_
 622: PPUSH
 623: CALL 30922 0 3
 627: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 628: LD_ADDR_EXP 8
 632: PUSH
 633: LD_STRING Brown
 635: PPUSH
 636: LD_EXP 40
 640: NOT
 641: PPUSH
 642: LD_STRING 13c_
 644: PPUSH
 645: CALL 30922 0 3
 649: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 650: LD_ADDR_EXP 9
 654: PUSH
 655: LD_STRING Gladstone
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: LD_STRING 13c_
 663: PPUSH
 664: CALL 30922 0 3
 668: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 669: LD_ADDR_EXP 10
 673: PUSH
 674: LD_STRING Houten
 676: PPUSH
 677: LD_INT 1
 679: PPUSH
 680: LD_STRING 13c_
 682: PPUSH
 683: CALL 30922 0 3
 687: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 688: LD_ADDR_EXP 11
 692: PUSH
 693: LD_STRING Cornel
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: LD_STRING 13c_
 701: PPUSH
 702: CALL 30922 0 3
 706: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 707: LD_ADDR_EXP 12
 711: PUSH
 712: LD_STRING Gary
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: LD_STRING 13c_
 720: PPUSH
 721: CALL 30922 0 3
 725: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING Frank
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_STRING 13c_
 739: PPUSH
 740: CALL 30922 0 3
 744: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 745: LD_ADDR_EXP 14
 749: PUSH
 750: LD_STRING Kikuchi
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_STRING 13c_
 758: PPUSH
 759: CALL 30922 0 3
 763: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 764: LD_ADDR_EXP 15
 768: PUSH
 769: LD_STRING Powell
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: LD_STRING 
 777: PPUSH
 778: CALL 30922 0 3
 782: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: LD_EXP 1
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_EXP 3
 802: PUSH
 803: LD_EXP 4
 807: PUSH
 808: LD_EXP 5
 812: PUSH
 813: LD_EXP 6
 817: PUSH
 818: LD_EXP 7
 822: PUSH
 823: LD_EXP 8
 827: PUSH
 828: LD_EXP 9
 832: PUSH
 833: LD_EXP 10
 837: PUSH
 838: LD_EXP 11
 842: PUSH
 843: LD_EXP 12
 847: PUSH
 848: LD_EXP 13
 852: PUSH
 853: LD_EXP 14
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 33
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// for i = tmp downto 1 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_VAR 0 2
 929: INC
 930: ST_TO_ADDR
 931: LD_INT 1
 933: PUSH
 934: FOR_DOWNTO
 935: IFFALSE 972
// if not tmp [ i ] then
 937: LD_VAR 0 2
 941: PUSH
 942: LD_VAR 0 4
 946: ARRAY
 947: NOT
 948: IFFALSE 970
// tmp := Delete ( tmp , i ) ;
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 3
 969: ST_TO_ADDR
 970: GO 934
 972: POP
 973: POP
// for i = 1 to tmp do
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_VAR 0 2
 988: PUSH
 989: FOR_TO
 990: IFFALSE 1020
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 992: LD_VAR 0 2
 996: PUSH
 997: LD_VAR 0 4
1001: ARRAY
1002: PPUSH
1003: LD_VAR 0 3
1007: PUSH
1008: LD_VAR 0 4
1012: ARRAY
1013: PPUSH
1014: CALL_OW 52
1018: GO 989
1020: POP
1021: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 25
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: PUSH
1055: LD_INT 22
1057: PUSH
1058: LD_INT 1
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 34
1067: PUSH
1068: LD_INT 13
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 69
1083: PUSH
1084: LD_INT 0
1086: EQUAL
1087: AND
1088: IFFALSE 1102
// SetClass ( JMM , 2 ) ;
1090: LD_EXP 1
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: CALL_OW 336
// end ;
1102: LD_VAR 0 1
1106: RET
// export function PrepareAmericansRandom ; var i ; begin
1107: LD_INT 0
1109: PPUSH
1110: PPUSH
// uc_side = 1 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 1
1118: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1119: LD_ADDR_EXP 16
1123: PUSH
1124: LD_STRING 13c_others
1126: PPUSH
1127: CALL_OW 31
1131: ST_TO_ADDR
// for i in others13 do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: LD_EXP 16
1141: PUSH
1142: FOR_IN
1143: IFFALSE 1196
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1145: LD_VAR 0 2
1149: PPUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 21
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 58
1172: PUSH
1173: EMPTY
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: CALL_OW 52
1194: GO 1142
1196: POP
1197: POP
// end ;
1198: LD_VAR 0 1
1202: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
1207: PPUSH
1208: PPUSH
1209: PPUSH
1210: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1211: LD_ADDR_VAR 0 5
1215: PUSH
1216: LD_STRING 13_VehiclesIn13_1
1218: PPUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 5
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: LD_INT 6
1233: PUSH
1234: LD_INT 100
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 5
1250: PUSH
1251: LD_INT 3
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 6
1259: PUSH
1260: LD_INT 100
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 1
1282: PUSH
1283: LD_INT 6
1285: PUSH
1286: LD_INT 100
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: LD_INT 6
1311: PUSH
1312: LD_INT 100
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 5
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 6
1337: PUSH
1338: LD_INT 100
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 5
1354: PUSH
1355: LD_INT 3
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 100
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 5
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 6
1389: PUSH
1390: LD_INT 100
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 5
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 6
1415: PUSH
1416: LD_INT 100
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1442: LD_ADDR_EXP 24
1446: PUSH
1447: LD_STRING 13_ResourcesInCargo13_1
1449: PPUSH
1450: EMPTY
1451: PPUSH
1452: CALL_OW 30
1456: ST_TO_ADDR
// cargoList = [ ] ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: EMPTY
1463: ST_TO_ADDR
// uc_side = 1 ;
1464: LD_ADDR_OWVAR 20
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// if vehicles then
1472: LD_VAR 0 5
1476: IFFALSE 1823
// begin for i := 1 to vehicles do
1478: LD_ADDR_VAR 0 2
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 5
1492: PUSH
1493: FOR_TO
1494: IFFALSE 1643
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1496: LD_ADDR_OWVAR 21
1500: PUSH
1501: LD_VAR 0 5
1505: PUSH
1506: LD_VAR 0 2
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: ARRAY
1515: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1516: LD_ADDR_OWVAR 37
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_VAR 0 2
1530: ARRAY
1531: PUSH
1532: LD_INT 2
1534: ARRAY
1535: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1536: LD_ADDR_OWVAR 39
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 3
1554: ARRAY
1555: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1556: LD_ADDR_OWVAR 38
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 4
1574: ARRAY
1575: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1576: LD_ADDR_OWVAR 40
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 5
1594: ARRAY
1595: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1596: LD_ADDR_OWVAR 41
1600: PUSH
1601: LD_INT 40
1603: ST_TO_ADDR
// veh = CreateVehicle ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1614: LD_VAR 0 4
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// end ;
1641: GO 1493
1643: POP
1644: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1645: LD_ADDR_VAR 0 6
1649: PUSH
1650: LD_INT 22
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 21
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 34
1672: PUSH
1673: LD_INT 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: ST_TO_ADDR
// if cargoList then
1690: LD_VAR 0 6
1694: IFFALSE 1823
// for i = 1 to cargoList do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_VAR 0 6
1710: PUSH
1711: FOR_TO
1712: IFFALSE 1821
// begin if resources then
1714: LD_EXP 24
1718: IFFALSE 1819
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1720: LD_VAR 0 6
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_EXP 24
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PPUSH
1749: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1753: LD_VAR 0 6
1757: PUSH
1758: LD_VAR 0 2
1762: ARRAY
1763: PPUSH
1764: LD_INT 2
1766: PPUSH
1767: LD_EXP 24
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: PUSH
1778: LD_INT 2
1780: ARRAY
1781: PPUSH
1782: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1786: LD_VAR 0 6
1790: PUSH
1791: LD_VAR 0 2
1795: ARRAY
1796: PPUSH
1797: LD_INT 3
1799: PPUSH
1800: LD_EXP 24
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: PUSH
1811: LD_INT 3
1813: ARRAY
1814: PPUSH
1815: CALL_OW 291
// end ; end ;
1819: GO 1711
1821: POP
1822: POP
// end ; end ;
1823: LD_VAR 0 1
1827: RET
// export function PowellSupport ; var i , veh , un ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
1833: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 4
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 2
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_OWVAR 67
1866: ARRAY
1867: PUSH
1868: FOR_TO
1869: IFFALSE 2133
// begin uc_nation := 1 ;
1871: LD_ADDR_OWVAR 21
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// uc_side := 1 ;
1879: LD_ADDR_OWVAR 20
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// vc_engine := engine_siberite ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// vc_control := control_manual ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: LD_INT 6
1913: PUSH
1914: LD_INT 9
1916: PUSH
1917: LD_INT 5
1919: PUSH
1920: LD_INT 5
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_OWVAR 67
1934: PUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL_OW 12
1945: PLUS
1946: ARRAY
1947: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1948: LD_OWVAR 40
1952: PUSH
1953: LD_INT 6
1955: EQUAL
1956: IFFALSE 1985
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 5
1965: PUSH
1966: LD_INT 4
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_OWVAR 67
1981: ARRAY
1982: ST_TO_ADDR
1983: GO 2020
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: CALL_OW 12
2018: ARRAY
2019: ST_TO_ADDR
// veh = CreateVehicle ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 45
2029: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 2
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// SetDir ( veh , 1 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 1
2052: PPUSH
2053: CALL_OW 233
// hc_gallery :=  ;
2057: LD_ADDR_OWVAR 33
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// hc_name :=  ;
2065: LD_ADDR_OWVAR 26
2069: PUSH
2070: LD_STRING 
2072: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 9
2081: PUSH
2082: LD_INT 8
2084: PUSH
2085: LD_INT 8
2087: PUSH
2088: LD_INT 7
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PPUSH
2103: CALL_OW 380
// un := CreateHuman ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: CALL_OW 44
2116: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2117: LD_VAR 0 4
2121: PPUSH
2122: LD_VAR 0 3
2126: PPUSH
2127: CALL_OW 52
// end ;
2131: GO 1868
2133: POP
2134: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2135: LD_ADDR_VAR 0 2
2139: PUSH
2140: DOUBLE
2141: LD_INT 1
2143: DEC
2144: ST_TO_ADDR
2145: LD_INT 2
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_OWVAR 67
2167: ARRAY
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2245
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 9
2180: PUSH
2181: LD_INT 8
2183: PUSH
2184: LD_INT 8
2186: PUSH
2187: LD_INT 7
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_OWVAR 67
2200: ARRAY
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 4
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2216: LD_VAR 0 4
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2228: LD_VAR 0 4
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// end ;
2243: GO 2169
2245: POP
2246: POP
// end ; end_of_file
2247: LD_VAR 0 1
2251: RET
// export function PrepareBurlak ; begin
2252: LD_INT 0
2254: PPUSH
// uc_side := 7 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 7
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_engine := engine_siberite ;
2271: LD_ADDR_OWVAR 39
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// vc_control := control_manual ;
2279: LD_ADDR_OWVAR 38
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2287: LD_ADDR_OWVAR 40
2291: PUSH
2292: LD_INT 44
2294: PUSH
2295: LD_INT 45
2297: PUSH
2298: LD_INT 46
2300: PUSH
2301: LD_INT 46
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_OWVAR 67
2314: ARRAY
2315: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2316: LD_ADDR_OWVAR 37
2320: PUSH
2321: LD_INT 24
2323: ST_TO_ADDR
// Masha := CreateVehicle ;
2324: LD_ADDR_EXP 18
2328: PUSH
2329: CALL_OW 45
2333: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2334: LD_EXP 18
2338: PPUSH
2339: LD_INT 2
2341: PPUSH
2342: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2346: LD_EXP 18
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2361: LD_EXP 18
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2373: LD_ADDR_EXP 17
2377: PUSH
2378: LD_STRING Burlak
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_STRING 
2386: PPUSH
2387: CALL 30922 0 3
2391: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2392: LD_EXP 17
2396: PPUSH
2397: LD_EXP 18
2401: PPUSH
2402: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2406: LD_EXP 18
2410: PPUSH
2411: LD_INT 107
2413: PPUSH
2414: LD_INT 118
2416: PPUSH
2417: CALL_OW 114
// spawnBurlak := 1 ;
2421: LD_ADDR_EXP 27
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// end ;
2429: LD_VAR 0 1
2433: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2434: LD_INT 0
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// uc_side := 7 ;
2441: LD_ADDR_OWVAR 20
2445: PUSH
2446: LD_INT 7
2448: ST_TO_ADDR
// uc_nation := 3 ;
2449: LD_ADDR_OWVAR 21
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2457: LD_ADDR_EXP 19
2461: PUSH
2462: LD_STRING Gnyevko
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 30922 0 3
2475: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2476: LD_ADDR_EXP 20
2480: PUSH
2481: LD_STRING Titov
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: LD_STRING 
2489: PPUSH
2490: CALL 30922 0 3
2494: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2495: LD_ADDR_EXP 21
2499: PUSH
2500: LD_STRING Xavier2
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_STRING 
2508: PPUSH
2509: CALL 30922 0 3
2513: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2514: LD_ADDR_EXP 22
2518: PUSH
2519: LD_STRING Belkov
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 30922 0 3
2532: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2533: LD_ADDR_EXP 23
2537: PUSH
2538: LD_STRING Lipshchin
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 30922 0 3
2551: ST_TO_ADDR
// for i = 1 to 5 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 5
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2691
// begin vc_engine := engine_siberite ;
2568: LD_ADDR_OWVAR 39
2572: PUSH
2573: LD_INT 3
2575: ST_TO_ADDR
// vc_control := control_manual ;
2576: LD_ADDR_OWVAR 38
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2584: LD_ADDR_OWVAR 40
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: LD_INT 45
2594: PUSH
2595: LD_INT 45
2597: PUSH
2598: LD_INT 44
2600: PUSH
2601: LD_INT 49
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 5
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2623: LD_ADDR_OWVAR 37
2627: PUSH
2628: LD_INT 22
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_INT 24
2636: PUSH
2637: LD_INT 24
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_OWVAR 67
2650: ARRAY
2651: ST_TO_ADDR
// veh = CreateVehicle ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: CALL_OW 45
2661: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2662: LD_VAR 0 3
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// end ;
2689: GO 2565
2691: POP
2692: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2693: LD_ADDR_VAR 0 4
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 7
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 58
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_INT 1
2746: ARRAY
2747: PPUSH
2748: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2752: LD_EXP 20
2756: PPUSH
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2770: LD_EXP 21
2774: PPUSH
2775: LD_VAR 0 4
2779: PUSH
2780: LD_INT 3
2782: ARRAY
2783: PPUSH
2784: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2788: LD_EXP 22
2792: PPUSH
2793: LD_VAR 0 4
2797: PUSH
2798: LD_INT 4
2800: ARRAY
2801: PPUSH
2802: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2806: LD_EXP 23
2810: PPUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 5
2818: ARRAY
2819: PPUSH
2820: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2824: LD_EXP 19
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2836: LD_EXP 20
2840: PUSH
2841: LD_EXP 23
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: LD_INT 9
2852: PPUSH
2853: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_INT 22
2864: PUSH
2865: LD_INT 7
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PPUSH
2872: CALL_OW 69
2876: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2877: LD_VAR 0 4
2881: PPUSH
2882: LD_INT 107
2884: PPUSH
2885: LD_INT 118
2887: PPUSH
2888: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2892: LD_INT 35
2894: PPUSH
2895: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2899: LD_VAR 0 4
2903: PPUSH
2904: LD_INT 34
2906: PUSH
2907: LD_INT 49
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 72
2918: PPUSH
2919: LD_EXP 18
2923: PPUSH
2924: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 34
2938: PUSH
2939: LD_INT 49
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PPUSH
2950: CALL_OW 72
2954: PPUSH
2955: LD_INT 107
2957: PPUSH
2958: LD_INT 118
2960: PPUSH
2961: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2965: LD_ADDR_VAR 0 5
2969: PUSH
2970: LD_EXP 20
2974: PUSH
2975: LD_EXP 23
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: LD_INT 50
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 54
2995: PUSH
2996: EMPTY
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 72
3011: ST_TO_ADDR
// if bazooka then
3012: LD_VAR 0 5
3016: IFFALSE 3058
// begin for i in bazooka do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 5
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3056
// if See ( 1 , i ) then
3031: LD_INT 1
3033: PPUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 292
3043: IFFALSE 3054
// ComSpaceTimeShoot ( i ) ;
3045: LD_VAR 0 2
3049: PPUSH
3050: CALL 31869 0 1
3054: GO 3028
3056: POP
3057: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_INT 34
3065: PUSH
3066: LD_INT 49
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 72
3077: PUSH
3078: LD_INT 0
3080: EQUAL
3081: PUSH
3082: LD_EXP 18
3086: PPUSH
3087: CALL_OW 303
3091: OR
3092: IFFALSE 2892
// repeat wait ( 0 0$1 ) ;
3094: LD_INT 35
3096: PPUSH
3097: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PUSH
3121: LD_EXP 17
3125: DIFF
3126: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 107
3134: PPUSH
3135: LD_INT 118
3137: PPUSH
3138: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_EXP 20
3151: PUSH
3152: LD_EXP 23
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: LD_INT 50
3163: PUSH
3164: EMPTY
3165: LIST
3166: PUSH
3167: LD_INT 3
3169: PUSH
3170: LD_INT 54
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: ST_TO_ADDR
// if bazooka then
3189: LD_VAR 0 5
3193: IFFALSE 3235
// begin for i in bazooka do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_VAR 0 5
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3233
// if See ( 1 , i ) then
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 292
3220: IFFALSE 3231
// ComSpaceTimeShoot ( i ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL 31869 0 1
3231: GO 3205
3233: POP
3234: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3235: LD_EXP 17
3239: PPUSH
3240: CALL_OW 302
3244: PUSH
3245: LD_EXP 17
3249: PPUSH
3250: CALL_OW 310
3254: NOT
3255: AND
3256: IFFALSE 3273
// ComMoveXY ( Burlak , 107 , 118 ) ;
3258: LD_EXP 17
3262: PPUSH
3263: LD_INT 107
3265: PPUSH
3266: LD_INT 118
3268: PPUSH
3269: CALL_OW 111
// until not tmp ;
3273: LD_VAR 0 4
3277: NOT
3278: IFFALSE 3094
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// result := [ ] ;
3293: LD_ADDR_VAR 0 1
3297: PUSH
3298: EMPTY
3299: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 2
3310: PPUSH
3311: CALL_OW 12
3315: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_INT 8
3323: PUSH
3324: LD_INT 9
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_VAR 0 6
3335: ARRAY
3336: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 6
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: LD_INT 10
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_OWVAR 67
3369: ARRAY
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3610
// begin uc_side := 3 ;
3374: LD_ADDR_OWVAR 20
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// uc_nation := 3 ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_INT 3
3389: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3390: LD_INT 24
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 1
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 1
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: CALL_OW 12
3416: ARRAY
3417: PPUSH
3418: LD_INT 46
3420: PUSH
3421: LD_INT 46
3423: PUSH
3424: LD_INT 45
3426: PUSH
3427: LD_INT 47
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 5
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: PPUSH
3452: LD_INT 100
3454: PPUSH
3455: CALL 35937 0 5
// veh := CreateVehicle ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: CALL_OW 45
3468: ST_TO_ADDR
// result := Join ( result , veh ) ;
3469: LD_ADDR_VAR 0 1
3473: PUSH
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_VAR 0 4
3483: PPUSH
3484: CALL 68298 0 2
3488: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 5
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_VAR 0 6
3508: ARRAY
3509: PPUSH
3510: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 49
// if vc_control = control_manual then
3531: LD_OWVAR 38
3535: PUSH
3536: LD_INT 1
3538: EQUAL
3539: IFFALSE 3586
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 10
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_OWVAR 67
3566: ARRAY
3567: PPUSH
3568: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3572: CALL_OW 44
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3586: LD_INT 18
3588: PPUSH
3589: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_INT 100
3600: PPUSH
3601: LD_INT 55
3603: PPUSH
3604: CALL_OW 114
// end ;
3608: GO 3371
3610: POP
3611: POP
// for i in result do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: PUSH
3622: FOR_IN
3623: IFFALSE 3639
// SetTag ( i , 10 ) ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_INT 10
3632: PPUSH
3633: CALL_OW 109
3637: GO 3622
3639: POP
3640: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3641: LD_EXP 44
3645: PPUSH
3646: CALL_OW 427
// end ; end_of_file
3650: LD_VAR 0 1
3654: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3655: LD_INT 0
3657: PPUSH
3658: PPUSH
3659: PPUSH
// rnd := 0 ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// uc_side := 8 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 8
3675: ST_TO_ADDR
// uc_nation := 2 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 2
3683: ST_TO_ADDR
// hc_name :=  ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_gallery :=  ;
3692: LD_ADDR_OWVAR 33
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3700: LD_ADDR_OWVAR 29
3704: PUSH
3705: LD_INT 10
3707: PUSH
3708: LD_INT 11
3710: PUSH
3711: LD_INT 12
3713: PUSH
3714: LD_INT 12
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_OWVAR 67
3727: ARRAY
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: LD_INT 11
3734: PUSH
3735: LD_INT 12
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3757: LD_INT 0
3759: PPUSH
3760: LD_INT 4
3762: PPUSH
3763: LD_INT 7
3765: PUSH
3766: LD_INT 8
3768: PUSH
3769: LD_INT 9
3771: PUSH
3772: LD_INT 10
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PPUSH
3787: CALL_OW 380
// un := CreateHuman ;
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: CALL_OW 44
3800: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3801: LD_VAR 0 2
3805: PPUSH
3806: LD_INT 8
3808: PUSH
3809: LD_INT 9
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// SetTag ( un , 1 ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_EXP 31
3859: PPUSH
3860: CALL_OW 12
3864: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3865: LD_EXP 45
3869: PPUSH
3870: LD_VAR 0 2
3874: PPUSH
3875: LD_EXP 31
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: LD_EXP 31
3894: PUSH
3895: LD_VAR 0 3
3899: ARRAY
3900: PUSH
3901: LD_INT 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 595
// end ;
3918: LD_VAR 0 1
3922: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3923: LD_INT 22
3925: PUSH
3926: LD_INT 8
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 61
3938: PUSH
3939: EMPTY
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 50
3948: PUSH
3949: EMPTY
3950: LIST
3951: PUSH
3952: LD_INT 33
3954: PUSH
3955: LD_INT 2
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PPUSH
3968: CALL_OW 69
3972: IFFALSE 4059
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
// begin enable ;
3980: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3981: LD_ADDR_VAR 0 1
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 8
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 61
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 50
4011: PUSH
4012: EMPTY
4013: LIST
4014: PUSH
4015: LD_INT 33
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PUSH
4036: FOR_IN
4037: IFFALSE 4057
// begin wait ( 0 0$0.3 ) ;
4039: LD_INT 10
4041: PPUSH
4042: CALL_OW 67
// Connect ( i ) ;
4046: LD_VAR 0 1
4050: PPUSH
4051: CALL 39028 0 1
// end ;
4055: GO 4036
4057: POP
4058: POP
// end ;
4059: PPOPN 1
4061: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
// result := [ ] ;
4073: LD_ADDR_VAR 0 1
4077: PUSH
4078: EMPTY
4079: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4080: LD_ADDR_EXP 33
4084: PUSH
4085: LD_EXP 33
4089: PUSH
4090: LD_INT 1
4092: PLUS
4093: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4094: LD_INT 22
4096: PUSH
4097: LD_INT 8
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 58
4109: PUSH
4110: EMPTY
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 34
4119: PUSH
4120: LD_INT 31
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: PPUSH
4132: CALL_OW 69
4136: PUSH
4137: LD_INT 2
4139: LESS
4140: IFFALSE 4384
// begin uc_side := 8 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 8
4149: ST_TO_ADDR
// uc_nation := 2 ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4158: LD_INT 14
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 31
4169: PPUSH
4170: LD_INT 100
4172: PPUSH
4173: CALL 35937 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4177: LD_ADDR_VAR 0 2
4181: PUSH
4182: DOUBLE
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 1
4228: PLUS
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 2
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4382
// begin veh := CreateVehicle ;
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4259: LD_ADDR_VAR 0 4
4263: PUSH
4264: LD_INT 181
4266: PUSH
4267: LD_INT 105
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 137
4276: PUSH
4277: LD_INT 6
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_INT 2
4295: MOD
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: ARRAY
4301: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 2
4323: ARRAY
4324: PPUSH
4325: LD_INT 12
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4335: LD_INT 0
4337: PPUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 9
4343: PUSH
4344: LD_INT 10
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_OWVAR 67
4360: ARRAY
4361: PPUSH
4362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4366: CALL_OW 44
4370: PPUSH
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 52
// end ;
4380: GO 4234
4382: POP
4383: POP
// end ; dir := rand ( 1 , 2 ) ;
4384: LD_ADDR_VAR 0 9
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 12
4399: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4400: LD_ADDR_VAR 0 6
4404: PUSH
4405: LD_INT 8
4407: PUSH
4408: LD_INT 9
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 9
4419: ARRAY
4420: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4421: LD_ADDR_VAR 0 7
4425: PUSH
4426: LD_INT 6
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: LD_INT 10
4434: PUSH
4435: LD_INT 11
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_OWVAR 67
4448: ARRAY
4449: PUSH
4450: LD_EXP 33
4454: PLUS
4455: ST_TO_ADDR
// if counter > 20 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 20
4463: GREATER
4464: IFFALSE 4474
// counter := 20 ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_INT 20
4473: ST_TO_ADDR
// for i := 1 to counter do
4474: LD_ADDR_VAR 0 2
4478: PUSH
4479: DOUBLE
4480: LD_INT 1
4482: DEC
4483: ST_TO_ADDR
4484: LD_VAR 0 7
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4823
// begin uc_side := 8 ;
4492: LD_ADDR_OWVAR 20
4496: PUSH
4497: LD_INT 8
4499: ST_TO_ADDR
// uc_nation := 2 ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_INT 2
4507: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4508: LD_INT 13
4510: PUSH
4511: LD_INT 14
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: CALL_OW 12
4528: ARRAY
4529: PPUSH
4530: LD_INT 3
4532: PPUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 3
4552: PPUSH
4553: CALL_OW 12
4557: ARRAY
4558: PPUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 28
4564: PUSH
4565: LD_INT 27
4567: PUSH
4568: LD_INT 92
4570: PUSH
4571: LD_INT 29
4573: PUSH
4574: LD_INT 25
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_INT 6
4590: PPUSH
4591: CALL_OW 12
4595: ARRAY
4596: PPUSH
4597: LD_INT 100
4599: PPUSH
4600: CALL 35937 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4604: LD_OWVAR 40
4608: PUSH
4609: LD_INT 29
4611: EQUAL
4612: IFFALSE 4622
// vc_control := control_remote ;
4614: LD_ADDR_OWVAR 38
4618: PUSH
4619: LD_INT 2
4621: ST_TO_ADDR
// veh := CreateVehicle ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: CALL_OW 45
4631: ST_TO_ADDR
// result := Join ( result , veh ) ;
4632: LD_ADDR_VAR 0 1
4636: PUSH
4637: LD_VAR 0 1
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 68298 0 2
4651: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 5
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: LD_VAR 0 9
4671: ARRAY
4672: PPUSH
4673: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 49
// if vc_control = control_manual then
4694: LD_OWVAR 38
4698: PUSH
4699: LD_INT 1
4701: EQUAL
4702: IFFALSE 4749
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4704: LD_INT 0
4706: PPUSH
4707: LD_INT 7
4709: PUSH
4710: LD_INT 8
4712: PUSH
4713: LD_INT 9
4715: PUSH
4716: LD_INT 10
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: PUSH
4725: LD_OWVAR 67
4729: ARRAY
4730: PPUSH
4731: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4735: CALL_OW 44
4739: PPUSH
4740: LD_VAR 0 3
4744: PPUSH
4745: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4749: LD_INT 10
4751: PPUSH
4752: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4756: LD_VAR 0 3
4760: PPUSH
4761: CALL_OW 263
4765: PUSH
4766: LD_INT 2
4768: EQUAL
4769: PUSH
4770: LD_VAR 0 3
4774: PPUSH
4775: CALL_OW 312
4779: NOT
4780: AND
4781: IFFALSE 4799
// begin Connect ( veh ) ;
4783: LD_VAR 0 3
4787: PPUSH
4788: CALL 39028 0 1
// wait ( 0 0$0.3 ) ;
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 100
4806: PPUSH
4807: LD_INT 55
4809: PPUSH
4810: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4814: LD_INT 18
4816: PPUSH
4817: CALL_OW 67
// end ;
4821: GO 4489
4823: POP
4824: POP
// if arabianAttacksCounter = 1 then
4825: LD_EXP 33
4829: PUSH
4830: LD_INT 1
4832: EQUAL
4833: IFFALSE 4839
// DestroySibDeposit ;
4835: CALL 3655 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4839: LD_EXP 33
4843: PUSH
4844: LD_INT 4
4846: PUSH
4847: LD_INT 3
4849: PUSH
4850: LD_INT 3
4852: PUSH
4853: LD_INT 2
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_OWVAR 67
4866: ARRAY
4867: MOD
4868: PUSH
4869: LD_INT 0
4871: EQUAL
4872: IFFALSE 5230
// begin tmp := rand ( 0 , 2 ) ;
4874: LD_ADDR_VAR 0 8
4878: PUSH
4879: LD_INT 0
4881: PPUSH
4882: LD_INT 2
4884: PPUSH
4885: CALL_OW 12
4889: ST_TO_ADDR
// if not tmp then
4890: LD_VAR 0 8
4894: NOT
4895: IFFALSE 5056
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 3
4909: PUSH
4910: LD_INT 4
4912: PUSH
4913: LD_INT 4
4915: PUSH
4916: LD_INT 5
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: LD_OWVAR 67
4929: ARRAY
4930: PUSH
4931: FOR_TO
4932: IFFALSE 5052
// begin uc_side := 8 ;
4934: LD_ADDR_OWVAR 20
4938: PUSH
4939: LD_INT 8
4941: ST_TO_ADDR
// uc_nation := 2 ;
4942: LD_ADDR_OWVAR 21
4946: PUSH
4947: LD_INT 2
4949: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4950: LD_INT 0
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: LD_INT 7
4958: PUSH
4959: LD_INT 8
4961: PUSH
4962: LD_INT 9
4964: PUSH
4965: LD_INT 10
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PUSH
4974: LD_OWVAR 67
4978: ARRAY
4979: PPUSH
4980: CALL_OW 380
// un := CreateHuman ;
4984: LD_ADDR_VAR 0 5
4988: PUSH
4989: CALL_OW 44
4993: ST_TO_ADDR
// result := Join ( result , un ) ;
4994: LD_ADDR_VAR 0 1
4998: PUSH
4999: LD_VAR 0 1
5003: PPUSH
5004: LD_VAR 0 5
5008: PPUSH
5009: CALL 68298 0 2
5013: ST_TO_ADDR
// if Prob ( 60 ) then
5014: LD_INT 60
5016: PPUSH
5017: CALL_OW 13
5021: IFFALSE 5035
// SetClass ( un , class_mortar ) ;
5023: LD_VAR 0 5
5027: PPUSH
5028: LD_INT 8
5030: PPUSH
5031: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5035: LD_VAR 0 5
5039: PPUSH
5040: LD_INT 16
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 49
// end ;
5050: GO 4931
5052: POP
5053: POP
// end else
5054: GO 5220
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5056: LD_ADDR_VAR 0 2
5060: PUSH
5061: DOUBLE
5062: LD_INT 1
5064: DEC
5065: ST_TO_ADDR
5066: LD_INT 2
5068: PUSH
5069: LD_INT 3
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 4
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: PUSH
5084: LD_OWVAR 67
5088: ARRAY
5089: PUSH
5090: FOR_TO
5091: IFFALSE 5218
// begin uc_side := 8 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 8
5100: ST_TO_ADDR
// uc_nation := 0 ;
5101: LD_ADDR_OWVAR 21
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5109: LD_ADDR_OWVAR 28
5113: PUSH
5114: LD_INT 17
5116: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5117: LD_ADDR_OWVAR 31
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: LD_INT 0
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5140: LD_ADDR_OWVAR 29
5144: PUSH
5145: LD_INT 10
5147: PUSH
5148: LD_INT 10
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: ST_TO_ADDR
// hc_gallery :=  ;
5155: LD_ADDR_OWVAR 33
5159: PUSH
5160: LD_STRING 
5162: ST_TO_ADDR
// hc_name :=  ;
5163: LD_ADDR_OWVAR 26
5167: PUSH
5168: LD_STRING 
5170: ST_TO_ADDR
// un := CreateHuman ;
5171: LD_ADDR_VAR 0 5
5175: PUSH
5176: CALL_OW 44
5180: ST_TO_ADDR
// result := Join ( result , un ) ;
5181: LD_ADDR_VAR 0 1
5185: PUSH
5186: LD_VAR 0 1
5190: PPUSH
5191: LD_VAR 0 5
5195: PPUSH
5196: CALL 68298 0 2
5200: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5201: LD_VAR 0 5
5205: PPUSH
5206: LD_INT 16
5208: PPUSH
5209: LD_INT 0
5211: PPUSH
5212: CALL_OW 49
// end ;
5216: GO 5090
5218: POP
5219: POP
// end ; if sibDeposits then
5220: LD_EXP 31
5224: IFFALSE 5230
// DestroySibDeposit ;
5226: CALL 3655 0 0
// end ; for i in result do
5230: LD_ADDR_VAR 0 2
5234: PUSH
5235: LD_VAR 0 1
5239: PUSH
5240: FOR_IN
5241: IFFALSE 5257
// SetTag ( i , 10 ) ;
5243: LD_VAR 0 2
5247: PPUSH
5248: LD_INT 10
5250: PPUSH
5251: CALL_OW 109
5255: GO 5240
5257: POP
5258: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5259: LD_EXP 43
5263: PPUSH
5264: CALL_OW 427
// end ; end_of_file
5268: LD_VAR 0 1
5272: RET
// export function Action ; var tmp ; begin
5273: LD_INT 0
5275: PPUSH
5276: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_INT 22
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: LD_INT 21
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: ST_TO_ADDR
// InGameOn ;
5311: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5315: LD_VAR 0 2
5319: PPUSH
5320: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: LD_INT 21
5336: PUSH
5337: LD_INT 2
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL_OW 69
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: LD_INT 94
5358: PPUSH
5359: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5363: LD_EXP 1
5367: PPUSH
5368: LD_STRING D2-JMM-1
5370: PPUSH
5371: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5375: LD_VAR 0 2
5379: PPUSH
5380: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5384: LD_EXP 2
5388: PPUSH
5389: LD_STRING D2-Huck-1
5391: PPUSH
5392: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5405: LD_EXP 1
5409: PPUSH
5410: LD_STRING D2-JMM-2
5412: PPUSH
5413: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5417: LD_VAR 0 2
5421: PPUSH
5422: CALL_OW 87
// InGameOff ;
5426: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5430: LD_STRING M1
5432: PPUSH
5433: CALL_OW 337
// SaveForQuickRestart ;
5437: CALL_OW 22
// wait ( 10 10$00 ) ;
5441: LD_INT 21000
5443: PPUSH
5444: CALL_OW 67
// DialogueOn ;
5448: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5452: LD_EXP 15
5456: PPUSH
5457: LD_STRING D3-Pow-1
5459: PPUSH
5460: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5464: LD_EXP 1
5468: PPUSH
5469: LD_STRING D3-JMM-1
5471: PPUSH
5472: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5476: LD_EXP 15
5480: PPUSH
5481: LD_STRING D3-Pow-2
5483: PPUSH
5484: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5488: LD_EXP 1
5492: PPUSH
5493: LD_STRING D3-JMM-2
5495: PPUSH
5496: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5500: LD_EXP 15
5504: PPUSH
5505: LD_STRING D3-Pow-3
5507: PPUSH
5508: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5512: LD_EXP 1
5516: PPUSH
5517: LD_STRING D3-JMM-3
5519: PPUSH
5520: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5524: LD_EXP 15
5528: PPUSH
5529: LD_STRING D3-Pow-4
5531: PPUSH
5532: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5536: LD_EXP 1
5540: PPUSH
5541: LD_STRING D3-JMM-4
5543: PPUSH
5544: CALL_OW 88
// DialogueOff ;
5548: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5552: LD_STRING M2
5554: PPUSH
5555: CALL_OW 337
// wait ( 2 2$30 ) ;
5559: LD_INT 5250
5561: PPUSH
5562: CALL_OW 67
// PrepareBurlak ;
5566: CALL 2252 0 0
// BurlakArmy ;
5570: CALL 2434 0 0
// end ;
5574: LD_VAR 0 1
5578: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5579: LD_INT 1
5581: PPUSH
5582: LD_EXP 18
5586: PPUSH
5587: CALL_OW 292
5591: IFFALSE 5750
5593: GO 5595
5595: DISABLE
// begin DialogueOn ;
5596: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5600: LD_EXP 18
5604: PPUSH
5605: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 26
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 25
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 25
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 25
5654: PUSH
5655: LD_INT 3
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 25
5664: PUSH
5665: LD_INT 4
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 5
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: CALL_OW 69
5699: PPUSH
5700: LD_STRING D5-Sol1-1
5702: PPUSH
5703: LD_STRING D5-FSol1-1
5705: PPUSH
5706: CALL 8208 0 3
// Say ( JMM , D5-JMM-1 ) ;
5710: LD_EXP 1
5714: PPUSH
5715: LD_STRING D5-JMM-1
5717: PPUSH
5718: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_STRING DAmer-Bur-1
5729: PPUSH
5730: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5734: LD_EXP 1
5738: PPUSH
5739: LD_STRING DAmer-JMM-1
5741: PPUSH
5742: CALL_OW 88
// DialogueOff ;
5746: CALL_OW 7
// end ;
5750: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5751: LD_INT 4
5753: PPUSH
5754: LD_INT 22
5756: PUSH
5757: LD_INT 7
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PPUSH
5764: CALL_OW 70
5768: IFFALSE 6167
5770: GO 5772
5772: DISABLE
5773: LD_INT 0
5775: PPUSH
// begin enable ;
5776: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5777: LD_ADDR_VAR 0 1
5781: PUSH
5782: LD_INT 4
5784: PPUSH
5785: LD_INT 22
5787: PUSH
5788: LD_INT 7
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 70
5799: PUSH
5800: FOR_IN
5801: IFFALSE 6165
// begin if i = Burlak or i = Masha then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_EXP 17
5812: EQUAL
5813: PUSH
5814: LD_VAR 0 1
5818: PUSH
5819: LD_EXP 18
5823: EQUAL
5824: OR
5825: IFFALSE 5972
// begin RemoveUnit ( i ) ;
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 64
// DialogueOn ;
5836: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5840: LD_EXP 1
5844: PPUSH
5845: LD_STRING D5a-JMM-1
5847: PPUSH
5848: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5852: LD_INT 22
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 26
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 2
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 25
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 25
5907: PUSH
5908: LD_INT 4
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 5
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: PPUSH
5938: CALL_OW 69
5942: PPUSH
5943: LD_STRING D5a-Sol1-1
5945: PPUSH
5946: LD_STRING D5-FSol1-1
5948: PPUSH
5949: CALL 8208 0 3
// DialogueOff ;
5953: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5957: LD_STRING M2b
5959: PPUSH
5960: CALL_OW 337
// spawnBurlak = 0 ;
5964: LD_ADDR_EXP 27
5968: PUSH
5969: LD_INT 0
5971: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 247
5981: PUSH
5982: LD_INT 2
5984: EQUAL
5985: PUSH
5986: LD_VAR 0 1
5990: PPUSH
5991: CALL_OW 263
5995: PUSH
5996: LD_INT 1
5998: EQUAL
5999: AND
6000: IFFALSE 6128
// begin case IsDrivenBy ( i ) of Gnyevko :
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 311
6011: PUSH
6012: LD_EXP 19
6016: DOUBLE
6017: EQUAL
6018: IFTRUE 6022
6020: GO 6035
6022: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6023: LD_INT 1
6025: PPUSH
6026: LD_STRING 13_Gnyevko_1
6028: PPUSH
6029: CALL_OW 39
6033: GO 6128
6035: LD_EXP 20
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6058
6045: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6046: LD_INT 1
6048: PPUSH
6049: LD_STRING 13_Titov_1
6051: PPUSH
6052: CALL_OW 39
6056: GO 6128
6058: LD_EXP 21
6062: DOUBLE
6063: EQUAL
6064: IFTRUE 6068
6066: GO 6081
6068: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6069: LD_INT 1
6071: PPUSH
6072: LD_STRING 13_Xavier_1
6074: PPUSH
6075: CALL_OW 39
6079: GO 6128
6081: LD_EXP 22
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6104
6091: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6092: LD_INT 1
6094: PPUSH
6095: LD_STRING 13_Belkov_1
6097: PPUSH
6098: CALL_OW 39
6102: GO 6128
6104: LD_EXP 23
6108: DOUBLE
6109: EQUAL
6110: IFTRUE 6114
6112: GO 6127
6114: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6115: LD_INT 1
6117: PPUSH
6118: LD_STRING 13_Lipshchin_1
6120: PPUSH
6121: CALL_OW 39
6125: GO 6128
6127: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 264
6137: PUSH
6138: LD_INT 49
6140: EQUAL
6141: IFFALSE 6154
// DestroyUnit ( i ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 65
6152: GO 6163
// RemoveUnit ( i ) ;
6154: LD_VAR 0 1
6158: PPUSH
6159: CALL_OW 64
// end ;
6163: GO 5800
6165: POP
6166: POP
// end ;
6167: PPOPN 1
6169: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6170: LD_EXP 17
6174: PPUSH
6175: CALL_OW 302
6179: PUSH
6180: LD_EXP 18
6184: PPUSH
6185: CALL_OW 256
6189: PUSH
6190: LD_INT 500
6192: LESS
6193: AND
6194: PUSH
6195: LD_EXP 18
6199: PPUSH
6200: CALL_OW 255
6204: PUSH
6205: LD_INT 7
6207: EQUAL
6208: AND
6209: IFFALSE 6229
6211: GO 6213
6213: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6214: LD_EXP 17
6218: PPUSH
6219: LD_INT 107
6221: PPUSH
6222: LD_INT 118
6224: PPUSH
6225: CALL_OW 111
6229: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6230: LD_EXP 17
6234: PPUSH
6235: CALL_OW 301
6239: PUSH
6240: LD_EXP 27
6244: PUSH
6245: LD_INT 1
6247: EQUAL
6248: AND
6249: IFFALSE 6382
6251: GO 6253
6253: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6254: LD_EXP 1
6258: PPUSH
6259: LD_STRING D5b-JMM-1
6261: PPUSH
6262: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6266: LD_INT 22
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 26
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 25
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 25
6311: PUSH
6312: LD_INT 3
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 25
6321: PUSH
6322: LD_INT 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 25
6331: PUSH
6332: LD_INT 5
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: PPUSH
6357: LD_STRING D5b-Sol1-1
6359: PPUSH
6360: LD_STRING 
6362: PPUSH
6363: CALL 8208 0 3
// ChangeMissionObjectives ( M2a ) ;
6367: LD_STRING M2a
6369: PPUSH
6370: CALL_OW 337
// burlakStatus := 1 ;
6374: LD_ADDR_EXP 28
6378: PUSH
6379: LD_INT 1
6381: ST_TO_ADDR
// end ;
6382: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6383: LD_EXP 2
6387: PPUSH
6388: CALL_OW 301
6392: IFFALSE 6529
6394: GO 6396
6396: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6397: LD_EXP 1
6401: PPUSH
6402: LD_STRING D6-JMM-1
6404: PPUSH
6405: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6409: LD_INT 22
6411: PUSH
6412: LD_INT 1
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 26
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 25
6434: PUSH
6435: LD_INT 1
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 25
6444: PUSH
6445: LD_INT 2
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 25
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 25
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: LD_INT 25
6474: PUSH
6475: LD_INT 5
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PPUSH
6500: LD_STRING D6-Sol1-1
6502: PPUSH
6503: LD_STRING 
6505: PPUSH
6506: CALL 8208 0 3
// Say ( JMM , D6-JMM-2 ) ;
6510: LD_EXP 1
6514: PPUSH
6515: LD_STRING D6-JMM-2
6517: PPUSH
6518: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6522: LD_STRING M1a
6524: PPUSH
6525: CALL_OW 337
// end ;
6529: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6530: LD_INT 25
6532: PPUSH
6533: LD_INT 1
6535: PPUSH
6536: CALL_OW 321
6540: PUSH
6541: LD_INT 2
6543: EQUAL
6544: IFFALSE 6561
6546: GO 6548
6548: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6549: LD_EXP 2
6553: PPUSH
6554: LD_STRING D6-Huck-2
6556: PPUSH
6557: CALL_OW 88
6561: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6562: LD_INT 22
6564: PUSH
6565: LD_INT 1
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 34
6577: PUSH
6578: LD_INT 8
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 35
6587: PUSH
6588: LD_INT 8
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 69
6608: PUSH
6609: LD_INT 5
6611: PPUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 1
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 21
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 1
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 57
6647: PUSH
6648: EMPTY
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 70
6665: AND
6666: PUSH
6667: LD_INT 5
6669: PPUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 21
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 30
6692: PUSH
6693: LD_INT 5
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: LD_INT 57
6705: PUSH
6706: EMPTY
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: PPUSH
6719: CALL_OW 70
6723: AND
6724: IFFALSE 6766
6726: GO 6728
6728: DISABLE
// begin DialogueOn ;
6729: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6733: LD_EXP 1
6737: PPUSH
6738: LD_STRING D7-JMM-1
6740: PPUSH
6741: CALL_OW 88
// DialogueOff ;
6745: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6749: LD_STRING M4
6751: PPUSH
6752: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6756: LD_INT 5
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 424
// end ;
6766: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6767: LD_INT 6
6769: PPUSH
6770: LD_INT 22
6772: PUSH
6773: LD_INT 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 25
6782: PUSH
6783: LD_INT 4
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PPUSH
6794: CALL_OW 70
6798: PUSH
6799: LD_EXP 37
6803: PUSH
6804: LD_INT 1
6806: EQUAL
6807: AND
6808: PUSH
6809: LD_EXP 29
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: AND
6818: IFFALSE 6883
6820: GO 6822
6822: DISABLE
// begin enable ;
6823: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6824: LD_ADDR_EXP 26
6828: PUSH
6829: LD_INT 6
6831: PPUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 1
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 25
6844: PUSH
6845: LD_INT 4
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 70
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6865: LD_INT 6
6867: PPUSH
6868: LD_INT 0
6870: PPUSH
6871: CALL_OW 424
// radationResearched := 1 ;
6875: LD_ADDR_EXP 29
6879: PUSH
6880: LD_INT 1
6882: ST_TO_ADDR
// end ;
6883: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6884: LD_EXP 26
6888: PPUSH
6889: CALL_OW 301
6893: PUSH
6894: LD_EXP 29
6898: PUSH
6899: LD_INT 1
6901: EQUAL
6902: AND
6903: IFFALSE 6939
6905: GO 6907
6907: DISABLE
// begin enable ;
6908: ENABLE
// radationResearched = 0 ;
6909: LD_ADDR_EXP 29
6913: PUSH
6914: LD_INT 0
6916: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6917: LD_INT 6
6919: PPUSH
6920: LD_INT 1
6922: PPUSH
6923: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6927: LD_EXP 1
6931: PPUSH
6932: LD_STRING D9a-JMM-1
6934: PPUSH
6935: CALL_OW 88
// end ; end_of_file
6939: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6940: LD_VAR 0 5
6944: PUSH
6945: LD_INT 8
6947: EQUAL
6948: PUSH
6949: LD_EXP 35
6953: PUSH
6954: LD_INT 0
6956: EQUAL
6957: AND
6958: IFFALSE 7011
// begin eventVar1 := 1 ;
6960: LD_ADDR_EXP 35
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// DialogueOn ;
6968: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6972: LD_EXP 1
6976: PPUSH
6977: LD_STRING D6a-JMM-1
6979: PPUSH
6980: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6984: LD_EXP 15
6988: PPUSH
6989: LD_STRING D6a-Pow-1
6991: PPUSH
6992: CALL_OW 94
// DialogueOff ;
6996: CALL_OW 7
// wait ( 3 3$0 ) ;
7000: LD_INT 6300
7002: PPUSH
7003: CALL_OW 67
// PowellSupport ;
7007: CALL 1828 0 0
// end ; end ;
7011: PPOPN 5
7013: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL 26633 0 1
// if un = JMM then
7023: LD_VAR 0 1
7027: PUSH
7028: LD_EXP 1
7032: EQUAL
7033: IFFALSE 7042
// YouLost ( JMM ) ;
7035: LD_STRING JMM
7037: PPUSH
7038: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7042: LD_VAR 0 1
7046: PPUSH
7047: CALL_OW 264
7051: PUSH
7052: LD_INT 31
7054: EQUAL
7055: IFFALSE 7071
// achivCounter := achivCounter + 1 ;
7057: LD_ADDR_EXP 41
7061: PUSH
7062: LD_EXP 41
7066: PUSH
7067: LD_INT 1
7069: PLUS
7070: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7071: LD_VAR 0 1
7075: PPUSH
7076: CALL_OW 255
7080: PUSH
7081: LD_INT 1
7083: NONEQUAL
7084: PUSH
7085: LD_VAR 0 1
7089: PPUSH
7090: CALL_OW 247
7094: PUSH
7095: LD_INT 2
7097: EQUAL
7098: AND
7099: IFFALSE 7115
// destroyCounter := destroyCounter + 1 ;
7101: LD_ADDR_EXP 42
7105: PUSH
7106: LD_EXP 42
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ST_TO_ADDR
// end ;
7115: PPOPN 1
7117: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7118: LD_VAR 0 2
7122: PUSH
7123: LD_EXP 18
7127: EQUAL
7128: IFFALSE 7137
// SetAchievement ( ACH_MASHA ) ;
7130: LD_STRING ACH_MASHA
7132: PPUSH
7133: CALL_OW 543
// end ;
7137: PPOPN 4
7139: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: LD_VAR 0 2
7149: PPUSH
7150: CALL 26753 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7154: LD_VAR 0 1
7158: PPUSH
7159: CALL_OW 264
7163: PUSH
7164: LD_INT 8
7166: EQUAL
7167: PUSH
7168: LD_EXP 36
7172: PUSH
7173: LD_INT 0
7175: EQUAL
7176: AND
7177: IFFALSE 7246
// begin eventVar2 := 1 ;
7179: LD_ADDR_EXP 36
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// DialogueOn ;
7187: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D6b-JMM-1
7198: PPUSH
7199: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7203: LD_EXP 15
7207: PPUSH
7208: LD_STRING D6b-Pow-1
7210: PPUSH
7211: CALL_OW 94
// DialogueOff ;
7215: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7219: LD_INT 5
7221: PPUSH
7222: LD_INT 1
7224: PPUSH
7225: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7229: LD_INT 7
7231: PPUSH
7232: LD_INT 1
7234: PPUSH
7235: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7239: LD_STRING M3
7241: PPUSH
7242: CALL_OW 337
// end ; end ;
7246: PPOPN 2
7248: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7249: LD_VAR 0 2
7253: PPUSH
7254: LD_VAR 0 3
7258: PPUSH
7259: LD_INT 5
7261: PPUSH
7262: CALL_OW 309
7266: PUSH
7267: LD_EXP 37
7271: PUSH
7272: LD_INT 0
7274: EQUAL
7275: AND
7276: IFFALSE 7501
// begin eventVar3 := 1 ;
7278: LD_ADDR_EXP 37
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7286: LD_INT 175
7288: PPUSH
7289: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7293: LD_INT 7
7295: PPUSH
7296: LD_INT 22
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 21
7308: PUSH
7309: LD_INT 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 34
7318: PUSH
7319: LD_INT 11
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: PPUSH
7331: CALL_OW 70
7335: IFFALSE 7354
// begin radarOnSpot := 1 ;
7337: LD_ADDR_EXP 30
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7345: LD_STRING M3a
7347: PPUSH
7348: CALL_OW 337
// end else
7352: GO 7361
// ChangeMissionObjectives ( M3b ) ;
7354: LD_STRING M3b
7356: PPUSH
7357: CALL_OW 337
// DialogueOn ;
7361: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7365: LD_EXP 2
7369: PPUSH
7370: LD_STRING D8-Huck-1
7372: PPUSH
7373: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7377: LD_EXP 1
7381: PPUSH
7382: LD_STRING D8-JMM-1
7384: PPUSH
7385: CALL_OW 88
// if IsOk ( Stevens ) then
7389: LD_EXP 2
7393: PPUSH
7394: CALL_OW 302
7398: IFFALSE 7460
// begin Say ( Stevens , D8-Huck-2 ) ;
7400: LD_EXP 2
7404: PPUSH
7405: LD_STRING D8-Huck-2
7407: PPUSH
7408: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7412: LD_EXP 1
7416: PPUSH
7417: LD_STRING D8-JMM-2
7419: PPUSH
7420: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7424: LD_EXP 2
7428: PPUSH
7429: LD_STRING D8-Huck-3
7431: PPUSH
7432: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D8-JMM-3
7443: PPUSH
7444: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7448: LD_EXP 2
7452: PPUSH
7453: LD_STRING D8-Huck-4
7455: PPUSH
7456: CALL_OW 88
// end ; DialogueOff ;
7460: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7464: LD_INT 5
7466: PPUSH
7467: LD_INT 0
7469: PPUSH
7470: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7474: LD_INT 7
7476: PPUSH
7477: LD_INT 0
7479: PPUSH
7480: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7484: LD_INT 6
7486: PPUSH
7487: LD_INT 1
7489: PPUSH
7490: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7494: LD_STRING M5
7496: PPUSH
7497: CALL_OW 337
// end ; end ;
7501: PPOPN 3
7503: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7504: LD_EXP 26
7508: PPUSH
7509: CALL_OW 302
7513: PUSH
7514: LD_VAR 0 2
7518: PUSH
7519: LD_EXP 26
7523: EQUAL
7524: AND
7525: PUSH
7526: LD_EXP 38
7530: PUSH
7531: LD_INT 0
7533: EQUAL
7534: AND
7535: PUSH
7536: LD_EXP 37
7540: PUSH
7541: LD_INT 1
7543: EQUAL
7544: AND
7545: PUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 268
7558: PUSH
7559: LD_INT 11
7561: EQUAL
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: OR
7580: AND
7581: IFFALSE 7591
// eventVar4 := 1 ;
7583: LD_ADDR_EXP 38
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 2
7593: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7598: LD_VAR 0 1
7602: PPUSH
7603: CALL_OW 248
7607: PUSH
7608: LD_INT 2
7610: EQUAL
7611: IFFALSE 7857
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7613: LD_ADDR_EXP 32
7617: PUSH
7618: LD_EXP 32
7622: PUSH
7623: LD_INT 1
7625: PLUS
7626: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7627: LD_ADDR_VAR 0 4
7631: PUSH
7632: DOUBLE
7633: LD_EXP 31
7637: INC
7638: ST_TO_ADDR
7639: LD_INT 1
7641: PUSH
7642: FOR_DOWNTO
7643: IFFALSE 7713
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7645: LD_EXP 31
7649: PUSH
7650: LD_VAR 0 4
7654: ARRAY
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PUSH
7660: LD_VAR 0 2
7664: EQUAL
7665: PUSH
7666: LD_EXP 31
7670: PUSH
7671: LD_VAR 0 4
7675: ARRAY
7676: PUSH
7677: LD_INT 2
7679: ARRAY
7680: PUSH
7681: LD_VAR 0 3
7685: EQUAL
7686: AND
7687: IFFALSE 7711
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7689: LD_ADDR_EXP 31
7693: PUSH
7694: LD_EXP 31
7698: PPUSH
7699: LD_VAR 0 4
7703: PPUSH
7704: CALL_OW 3
7708: ST_TO_ADDR
// break ;
7709: GO 7713
// end ;
7711: GO 7642
7713: POP
7714: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7715: LD_EXP 39
7719: PUSH
7720: LD_INT 0
7722: EQUAL
7723: PUSH
7724: LD_VAR 0 2
7728: PPUSH
7729: LD_VAR 0 3
7733: PPUSH
7734: CALL_OW 428
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PPUSH
7749: CALL_OW 69
7753: IN
7754: AND
7755: IFFALSE 7857
// begin eventVar5 := 1 ;
7757: LD_ADDR_EXP 39
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// DialogueOn ;
7765: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7769: LD_EXP 2
7773: PPUSH
7774: LD_STRING D4-Sci1-1
7776: PPUSH
7777: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7781: LD_EXP 1
7785: PPUSH
7786: LD_STRING D4-JMM-1
7788: PPUSH
7789: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7793: LD_EXP 2
7797: PPUSH
7798: LD_STRING D4-Sci1-2
7800: PPUSH
7801: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7805: LD_EXP 1
7809: PPUSH
7810: LD_STRING D4-JMM-2
7812: PPUSH
7813: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7817: LD_EXP 2
7821: PPUSH
7822: LD_STRING D4-Sci1-3
7824: PPUSH
7825: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7829: LD_EXP 1
7833: PPUSH
7834: LD_STRING D4-JMM-3
7836: PPUSH
7837: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7841: LD_EXP 1
7845: PPUSH
7846: LD_STRING D4-JMM-3a
7848: PPUSH
7849: CALL_OW 88
// DialogueOff ;
7853: CALL_OW 7
// end ; end ; end ;
7857: PPOPN 5
7859: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 255
7869: PUSH
7870: LD_INT 1
7872: EQUAL
7873: PUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 266
7883: PUSH
7884: LD_INT 0
7886: EQUAL
7887: AND
7888: PUSH
7889: LD_INT 22
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 21
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 2
7911: PUSH
7912: LD_INT 30
7914: PUSH
7915: LD_INT 0
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 30
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: PUSH
7947: LD_INT 1
7949: EQUAL
7950: AND
7951: IFFALSE 7965
// SetBName ( building , omega ) ;
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_STRING omega
7960: PPUSH
7961: CALL_OW 500
// end ;
7965: PPOPN 2
7967: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL 26737 0 1
// end ;
7977: PPOPN 1
7979: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7980: LD_VAR 0 1
7984: PUSH
7985: LD_EXP 43
7989: EQUAL
7990: IFFALSE 7996
// ArabianAttack ;
7992: CALL 10061 0 0
// if event = eventRussianAttack then
7996: LD_VAR 0 1
8000: PUSH
8001: LD_EXP 44
8005: EQUAL
8006: IFFALSE 8012
// RussianAttack ;
8008: CALL 10426 0 0
// end ;
8012: PPOPN 1
8014: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8015: LD_VAR 0 1
8019: PUSH
8020: LD_EXP 45
8024: EQUAL
8025: IFFALSE 8119
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8027: LD_VAR 0 2
8031: PPUSH
8032: CALL_OW 302
8036: PUSH
8037: LD_VAR 0 3
8041: PPUSH
8042: LD_VAR 0 4
8046: PPUSH
8047: CALL_OW 488
8051: AND
8052: IFFALSE 8119
// begin repeat wait ( 0 0$1 ) ;
8054: LD_INT 35
8056: PPUSH
8057: CALL_OW 67
// if not HasTask ( p1 ) then
8061: LD_VAR 0 2
8065: PPUSH
8066: CALL_OW 314
8070: NOT
8071: IFFALSE 8107
// begin ComContaminate ( p1 , p2 , p3 ) ;
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_VAR 0 3
8082: PPUSH
8083: LD_VAR 0 4
8087: PPUSH
8088: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8092: LD_VAR 0 2
8096: PPUSH
8097: LD_INT 42
8099: PPUSH
8100: LD_INT 3
8102: PPUSH
8103: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: CALL_OW 302
8116: NOT
8117: IFFALSE 8054
// end ; end ; end ;
8119: PPOPN 7
8121: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8122: LD_VAR 0 1
8126: PPUSH
8127: CALL_OW 255
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 8
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: IN
8142: IFFALSE 8205
// begin ComMoveXY ( driver , 41 , 2 ) ;
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_INT 41
8151: PPUSH
8152: LD_INT 2
8154: PPUSH
8155: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8159: LD_INT 35
8161: PPUSH
8162: CALL_OW 67
// if IsDead ( driver ) then
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 301
8175: IFFALSE 8179
// exit ;
8177: GO 8205
// until IsAt ( driver , 41 , 2 ) ;
8179: LD_VAR 0 1
8183: PPUSH
8184: LD_INT 41
8186: PPUSH
8187: LD_INT 2
8189: PPUSH
8190: CALL_OW 307
8194: IFFALSE 8159
// RemoveUnit ( driver ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 64
// end ; end ; end_of_file
8205: PPOPN 4
8207: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8208: LD_INT 0
8210: PPUSH
8211: PPUSH
8212: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 1
8222: PUSH
8223: LD_EXP 1
8227: PUSH
8228: LD_EXP 2
8232: PUSH
8233: LD_EXP 3
8237: PUSH
8238: LD_EXP 4
8242: PUSH
8243: LD_EXP 5
8247: PUSH
8248: LD_EXP 6
8252: PUSH
8253: LD_EXP 7
8257: PUSH
8258: LD_EXP 8
8262: PUSH
8263: LD_EXP 9
8267: PUSH
8268: LD_EXP 10
8272: PUSH
8273: LD_EXP 11
8277: PUSH
8278: LD_EXP 12
8282: PUSH
8283: LD_EXP 13
8287: PUSH
8288: LD_EXP 14
8292: PUSH
8293: LD_EXP 15
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: DIFF
8315: ST_TO_ADDR
// if not characters then
8316: LD_VAR 0 1
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8404
// speaker := characters [ rand ( 1 , characters ) ] ;
8325: LD_ADDR_VAR 0 6
8329: PUSH
8330: LD_VAR 0 1
8334: PUSH
8335: LD_INT 1
8337: PPUSH
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 12
8347: ARRAY
8348: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8349: LD_VAR 0 6
8353: PPUSH
8354: CALL_OW 258
8358: PUSH
8359: LD_INT 1
8361: EQUAL
8362: IFFALSE 8380
// Say ( speaker , dialogMID ) else
8364: LD_VAR 0 6
8368: PPUSH
8369: LD_VAR 0 2
8373: PPUSH
8374: CALL_OW 88
8378: GO 8394
// Say ( speaker , dialogFID ) ;
8380: LD_VAR 0 6
8384: PPUSH
8385: LD_VAR 0 3
8389: PPUSH
8390: CALL_OW 88
// result := speaker ;
8394: LD_ADDR_VAR 0 4
8398: PUSH
8399: LD_VAR 0 6
8403: ST_TO_ADDR
// end ;
8404: LD_VAR 0 4
8408: RET
// export function PrepareDifficulty ; begin
8409: LD_INT 0
8411: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8412: LD_INT 5
8414: PPUSH
8415: LD_INT 8
8417: PPUSH
8418: LD_INT 2
8420: PPUSH
8421: CALL_OW 322
// if Difficulty = 1 then
8425: LD_OWVAR 67
8429: PUSH
8430: LD_INT 1
8432: EQUAL
8433: IFFALSE 8552
// begin SetTech ( 66 , 8 , state_researched ) ;
8435: LD_INT 66
8437: PPUSH
8438: LD_INT 8
8440: PPUSH
8441: LD_INT 2
8443: PPUSH
8444: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8448: LD_INT 67
8450: PPUSH
8451: LD_INT 8
8453: PPUSH
8454: LD_INT 0
8456: PPUSH
8457: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8461: LD_INT 68
8463: PPUSH
8464: LD_INT 8
8466: PPUSH
8467: LD_INT 0
8469: PPUSH
8470: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8474: LD_INT 51
8476: PPUSH
8477: LD_INT 8
8479: PPUSH
8480: LD_INT 2
8482: PPUSH
8483: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8487: LD_INT 52
8489: PPUSH
8490: LD_INT 8
8492: PPUSH
8493: LD_INT 0
8495: PPUSH
8496: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8500: LD_INT 53
8502: PPUSH
8503: LD_INT 8
8505: PPUSH
8506: LD_INT 0
8508: PPUSH
8509: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8513: LD_INT 60
8515: PPUSH
8516: LD_INT 8
8518: PPUSH
8519: LD_INT 2
8521: PPUSH
8522: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8526: LD_INT 61
8528: PPUSH
8529: LD_INT 8
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8539: LD_INT 62
8541: PPUSH
8542: LD_INT 8
8544: PPUSH
8545: LD_INT 0
8547: PPUSH
8548: CALL_OW 322
// end ; if Difficulty = 2 then
8552: LD_OWVAR 67
8556: PUSH
8557: LD_INT 2
8559: EQUAL
8560: IFFALSE 8679
// begin SetTech ( 66 , 8 , state_researched ) ;
8562: LD_INT 66
8564: PPUSH
8565: LD_INT 8
8567: PPUSH
8568: LD_INT 2
8570: PPUSH
8571: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8575: LD_INT 67
8577: PPUSH
8578: LD_INT 8
8580: PPUSH
8581: LD_INT 2
8583: PPUSH
8584: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8588: LD_INT 68
8590: PPUSH
8591: LD_INT 8
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8601: LD_INT 51
8603: PPUSH
8604: LD_INT 8
8606: PPUSH
8607: LD_INT 2
8609: PPUSH
8610: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8614: LD_INT 52
8616: PPUSH
8617: LD_INT 8
8619: PPUSH
8620: LD_INT 2
8622: PPUSH
8623: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8627: LD_INT 53
8629: PPUSH
8630: LD_INT 8
8632: PPUSH
8633: LD_INT 2
8635: PPUSH
8636: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8640: LD_INT 60
8642: PPUSH
8643: LD_INT 8
8645: PPUSH
8646: LD_INT 2
8648: PPUSH
8649: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8653: LD_INT 61
8655: PPUSH
8656: LD_INT 8
8658: PPUSH
8659: LD_INT 2
8661: PPUSH
8662: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8666: LD_INT 62
8668: PPUSH
8669: LD_INT 8
8671: PPUSH
8672: LD_INT 0
8674: PPUSH
8675: CALL_OW 322
// end ; if Difficulty >= 3 then
8679: LD_OWVAR 67
8683: PUSH
8684: LD_INT 3
8686: GREATEREQUAL
8687: IFFALSE 8806
// begin SetTech ( 66 , 8 , state_researched ) ;
8689: LD_INT 66
8691: PPUSH
8692: LD_INT 8
8694: PPUSH
8695: LD_INT 2
8697: PPUSH
8698: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8702: LD_INT 67
8704: PPUSH
8705: LD_INT 8
8707: PPUSH
8708: LD_INT 2
8710: PPUSH
8711: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8715: LD_INT 68
8717: PPUSH
8718: LD_INT 8
8720: PPUSH
8721: LD_INT 0
8723: PPUSH
8724: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8728: LD_INT 51
8730: PPUSH
8731: LD_INT 8
8733: PPUSH
8734: LD_INT 2
8736: PPUSH
8737: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8741: LD_INT 52
8743: PPUSH
8744: LD_INT 8
8746: PPUSH
8747: LD_INT 2
8749: PPUSH
8750: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8754: LD_INT 53
8756: PPUSH
8757: LD_INT 8
8759: PPUSH
8760: LD_INT 2
8762: PPUSH
8763: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8767: LD_INT 60
8769: PPUSH
8770: LD_INT 8
8772: PPUSH
8773: LD_INT 2
8775: PPUSH
8776: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8780: LD_INT 61
8782: PPUSH
8783: LD_INT 8
8785: PPUSH
8786: LD_INT 2
8788: PPUSH
8789: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8793: LD_INT 62
8795: PPUSH
8796: LD_INT 8
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 322
// end ; end ;
8806: LD_VAR 0 1
8810: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8811: LD_INT 0
8813: PPUSH
8814: PPUSH
// for i in charactersList do
8815: LD_ADDR_VAR 0 4
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// SaveCharacters ( i , ident ) ;
8828: LD_VAR 0 4
8832: PPUSH
8833: LD_VAR 0 2
8837: PPUSH
8838: CALL_OW 38
8842: GO 8825
8844: POP
8845: POP
// end ; end_of_file
8846: LD_VAR 0 3
8850: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8851: LD_EXP 38
8855: PUSH
8856: LD_INT 1
8858: EQUAL
8859: IFFALSE 9765
8861: GO 8863
8863: DISABLE
8864: LD_INT 0
8866: PPUSH
8867: PPUSH
8868: PPUSH
// begin m1 := false ;
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// m2 := false ;
8877: LD_ADDR_VAR 0 2
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// m3 := false ;
8885: LD_ADDR_VAR 0 3
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// DialogueOn ;
8893: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8897: LD_EXP 1
8901: PPUSH
8902: LD_STRING D9b-JMM-1
8904: PPUSH
8905: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8909: LD_EXP 15
8913: PPUSH
8914: LD_STRING D9b-Pow-1
8916: PPUSH
8917: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8921: LD_EXP 1
8925: PPUSH
8926: LD_STRING D9b-JMM-2
8928: PPUSH
8929: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8933: LD_EXP 15
8937: PPUSH
8938: LD_STRING D9b-Pow-2
8940: PPUSH
8941: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8945: LD_EXP 1
8949: PPUSH
8950: LD_STRING D9b-JMM-3
8952: PPUSH
8953: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8957: LD_EXP 15
8961: PPUSH
8962: LD_STRING D9b-Pow-3
8964: PPUSH
8965: CALL_OW 94
// if tick <= 60 60$00 then
8969: LD_OWVAR 1
8973: PUSH
8974: LD_INT 126000
8976: LESSEQUAL
8977: IFFALSE 8986
// SetAchievement ( ACH_ASPEED_13 ) ;
8979: LD_STRING ACH_ASPEED_13
8981: PPUSH
8982: CALL_OW 543
// if burlakStatus = 1 then
8986: LD_EXP 28
8990: PUSH
8991: LD_INT 1
8993: EQUAL
8994: IFFALSE 9016
// begin m1 := true ;
8996: LD_ADDR_VAR 0 1
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9004: LD_STRING Burlak
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 101
// end else
9014: GO 9027
// begin AddMedal ( Burlak , - 1 ) ;
9016: LD_STRING Burlak
9018: PPUSH
9019: LD_INT 1
9021: NEG
9022: PPUSH
9023: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9027: LD_EXP 2
9031: PPUSH
9032: CALL_OW 302
9036: IFFALSE 9058
// begin m2 := true ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9046: LD_STRING Stevens
9048: PPUSH
9049: LD_INT 1
9051: PPUSH
9052: CALL_OW 101
// end else
9056: GO 9069
// begin AddMedal ( Stevens , - 1 ) ;
9058: LD_STRING Stevens
9060: PPUSH
9061: LD_INT 1
9063: NEG
9064: PPUSH
9065: CALL_OW 101
// end ; if radarOnSpot = 1 then
9069: LD_EXP 30
9073: PUSH
9074: LD_INT 1
9076: EQUAL
9077: IFFALSE 9099
// begin m3 := true ;
9079: LD_ADDR_VAR 0 3
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9087: LD_STRING Observation
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 101
// end else
9097: GO 9110
// begin AddMedal ( Observation , - 1 ) ;
9099: LD_STRING Observation
9101: PPUSH
9102: LD_INT 1
9104: NEG
9105: PPUSH
9106: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9110: LD_VAR 0 1
9114: PUSH
9115: LD_VAR 0 2
9119: AND
9120: PUSH
9121: LD_VAR 0 3
9125: AND
9126: PUSH
9127: LD_OWVAR 67
9131: PUSH
9132: LD_INT 3
9134: GREATEREQUAL
9135: AND
9136: IFFALSE 9148
// SetAchievementEX ( ACH_AMER , 13 ) ;
9138: LD_STRING ACH_AMER
9140: PPUSH
9141: LD_INT 13
9143: PPUSH
9144: CALL_OW 564
// GiveMedals ( MAIN ) ;
9148: LD_STRING MAIN
9150: PPUSH
9151: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9155: LD_EXP 28
9159: PPUSH
9160: LD_STRING 13_BurlakStatus_1
9162: PPUSH
9163: CALL_OW 39
// if IsLive ( Stevens ) then
9167: LD_EXP 2
9171: PPUSH
9172: CALL_OW 300
9176: IFFALSE 9190
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9178: LD_INT 1
9180: PPUSH
9181: LD_STRING 13_StevensStatus_1
9183: PPUSH
9184: CALL_OW 39
9188: GO 9200
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9190: LD_INT 0
9192: PPUSH
9193: LD_STRING 13_StevensStatus_1
9195: PPUSH
9196: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9200: LD_INT 22
9202: PUSH
9203: LD_INT 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 21
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 25
9225: PUSH
9226: LD_INT 1
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: LD_INT 25
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 25
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 5
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 8
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: PPUSH
9302: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9306: LD_EXP 1
9310: PPUSH
9311: LD_EXP 34
9315: PUSH
9316: LD_STRING JMM
9318: STR
9319: PPUSH
9320: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9324: LD_EXP 8
9328: PPUSH
9329: LD_EXP 34
9333: PUSH
9334: LD_STRING Brown
9336: STR
9337: PPUSH
9338: CALL 8811 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9342: LD_EXP 4
9346: PPUSH
9347: LD_EXP 34
9351: PUSH
9352: LD_STRING Donaldson
9354: STR
9355: PPUSH
9356: CALL 8811 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9360: LD_EXP 5
9364: PPUSH
9365: LD_EXP 34
9369: PUSH
9370: LD_STRING Bobby
9372: STR
9373: PPUSH
9374: CALL 8811 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9378: LD_EXP 6
9382: PPUSH
9383: LD_EXP 34
9387: PUSH
9388: LD_STRING Cyrus
9390: STR
9391: PPUSH
9392: CALL 8811 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9396: LD_EXP 3
9400: PPUSH
9401: LD_EXP 34
9405: PUSH
9406: LD_STRING Lisa
9408: STR
9409: PPUSH
9410: CALL 8811 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9414: LD_EXP 13
9418: PPUSH
9419: LD_EXP 34
9423: PUSH
9424: LD_STRING Frank
9426: STR
9427: PPUSH
9428: CALL 8811 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9432: LD_EXP 14
9436: PPUSH
9437: LD_EXP 34
9441: PUSH
9442: LD_STRING Kikuchi
9444: STR
9445: PPUSH
9446: CALL 8811 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9450: LD_EXP 10
9454: PPUSH
9455: LD_EXP 34
9459: PUSH
9460: LD_STRING Houten
9462: STR
9463: PPUSH
9464: CALL 8811 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9468: LD_EXP 12
9472: PPUSH
9473: LD_EXP 34
9477: PUSH
9478: LD_STRING Gary
9480: STR
9481: PPUSH
9482: CALL 8811 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9486: LD_EXP 11
9490: PPUSH
9491: LD_EXP 34
9495: PUSH
9496: LD_STRING Cornell
9498: STR
9499: PPUSH
9500: CALL 8811 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9504: LD_EXP 7
9508: PPUSH
9509: LD_EXP 34
9513: PUSH
9514: LD_STRING Denis
9516: STR
9517: PPUSH
9518: CALL 8811 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9522: LD_EXP 9
9526: PPUSH
9527: LD_EXP 34
9531: PUSH
9532: LD_STRING Gladstone
9534: STR
9535: PPUSH
9536: CALL 8811 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9540: LD_EXP 2
9544: PPUSH
9545: LD_EXP 34
9549: PUSH
9550: LD_STRING Stevens
9552: STR
9553: PPUSH
9554: CALL 8811 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 22
9566: PUSH
9567: LD_INT 1
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 21
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 4
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 25
9629: PUSH
9630: LD_INT 5
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 25
9639: PUSH
9640: LD_INT 8
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: LD_EXP 1
9671: PUSH
9672: LD_EXP 8
9676: PUSH
9677: LD_EXP 4
9681: PUSH
9682: LD_EXP 5
9686: PUSH
9687: LD_EXP 6
9691: PUSH
9692: LD_EXP 3
9696: PUSH
9697: LD_EXP 13
9701: PUSH
9702: LD_EXP 9
9706: PUSH
9707: LD_EXP 14
9711: PUSH
9712: LD_EXP 7
9716: PUSH
9717: LD_EXP 10
9721: PUSH
9722: LD_EXP 12
9726: PUSH
9727: LD_EXP 11
9731: PUSH
9732: LD_EXP 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: DIFF
9753: PPUSH
9754: LD_STRING 13_other_survivors
9756: PPUSH
9757: CALL_OW 38
// YouWin ;
9761: CALL_OW 103
// end ; end_of_file
9765: PPOPN 3
9767: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9768: LD_EXP 32
9772: PUSH
9773: LD_INT 2
9775: EQUAL
9776: PUSH
9777: LD_INT 34
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PPUSH
9787: CALL_OW 69
9791: NOT
9792: AND
9793: PUSH
9794: LD_INT 25
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 321
9804: PUSH
9805: LD_INT 1
9807: EQUAL
9808: AND
9809: IFFALSE 9945
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
9817: PPUSH
9818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9819: LD_ADDR_VAR 0 2
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 21
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: LD_INT 30
9849: PUSH
9850: LD_INT 0
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 30
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 69
9881: ST_TO_ADDR
// for i in tmp do
9882: LD_ADDR_VAR 0 1
9886: PUSH
9887: LD_VAR 0 2
9891: PUSH
9892: FOR_IN
9893: IFFALSE 9926
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9895: LD_ADDR_VAR 0 3
9899: PUSH
9900: LD_VAR 0 3
9904: PUSH
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 274
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: CALL_OW 275
9922: PLUS
9923: ST_TO_ADDR
9924: GO 9892
9926: POP
9927: POP
// if yourSiberite < 60 then
9928: LD_VAR 0 3
9932: PUSH
9933: LD_INT 60
9935: LESS
9936: IFFALSE 9945
// YouLost ( siberite ) ;
9938: LD_STRING siberite
9940: PPUSH
9941: CALL_OW 104
// end ; end_of_file
9945: PPOPN 3
9947: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9948: LD_INT 22
9950: PUSH
9951: LD_INT 8
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 1
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PPUSH
9972: CALL_OW 69
9976: PUSH
9977: LD_INT 6
9979: LESS
9980: IFFALSE 9990
9982: GO 9984
9984: DISABLE
// begin enable ;
9985: ENABLE
// PrepareArabianAttack ;
9986: CALL 4062 0 0
// end ;
9990: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9991: LD_EXP 35
9995: PUSH
9996: LD_INT 1
9998: EQUAL
9999: PUSH
10000: LD_INT 22
10002: PUSH
10003: LD_INT 8
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 21
10012: PUSH
10013: LD_INT 1
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 6
10031: LESS
10032: AND
10033: IFFALSE 10060
10035: GO 10037
10037: DISABLE
// begin wait ( 4 4$00 ) ;
10038: LD_INT 8400
10040: PPUSH
10041: CALL_OW 67
// PrepareRussianAttack ;
10045: CALL 3285 0 0
// wait ( 12 12$00 ) ;
10049: LD_INT 25200
10051: PPUSH
10052: CALL_OW 67
// PrepareRussianAttack ;
10056: CALL 3285 0 0
// end ;
10060: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10061: LD_INT 0
10063: PPUSH
10064: PPUSH
10065: PPUSH
10066: PPUSH
10067: PPUSH
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10072: LD_ADDR_VAR 0 8
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_INT 8
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 120
10089: PUSH
10090: LD_INT 10
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PPUSH
10101: CALL_OW 69
10105: ST_TO_ADDR
// if not units then
10106: LD_VAR 0 8
10110: NOT
10111: IFFALSE 10115
// exit ;
10113: GO 10421
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10115: LD_ADDR_VAR 0 4
10119: PUSH
10120: LD_INT 80
10122: PUSH
10123: LD_INT 60
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 54
10132: PUSH
10133: LD_INT 57
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 55
10142: PUSH
10143: LD_INT 74
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 61
10152: PUSH
10153: LD_INT 85
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10166: LD_ADDR_VAR 0 5
10170: PUSH
10171: LD_INT 93
10173: PUSH
10174: LD_INT 99
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 85
10183: PUSH
10184: LD_INT 99
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10195: LD_INT 35
10197: PPUSH
10198: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10202: LD_ADDR_VAR 0 6
10206: PUSH
10207: LD_VAR 0 8
10211: PPUSH
10212: LD_INT 21
10214: PUSH
10215: LD_INT 2
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL_OW 72
10226: ST_TO_ADDR
// if vehicles then
10227: LD_VAR 0 6
10231: IFFALSE 10247
// AgressiveMove ( vehicles , path ) ;
10233: LD_VAR 0 6
10237: PPUSH
10238: LD_VAR 0 4
10242: PPUSH
10243: CALL 70902 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10247: LD_ADDR_VAR 0 7
10251: PUSH
10252: LD_VAR 0 8
10256: PPUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 21
10269: PUSH
10270: LD_INT 1
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: ST_TO_ADDR
// if infantry then
10286: LD_VAR 0 7
10290: IFFALSE 10306
// AgressiveMove ( infantry , path2 ) ;
10292: LD_VAR 0 7
10296: PPUSH
10297: LD_VAR 0 5
10301: PPUSH
10302: CALL 70902 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10306: LD_ADDR_VAR 0 9
10310: PUSH
10311: LD_VAR 0 8
10315: PPUSH
10316: LD_INT 23
10318: PUSH
10319: LD_INT 0
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 72
10344: ST_TO_ADDR
// if apes then
10345: LD_VAR 0 9
10349: IFFALSE 10393
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10351: LD_VAR 0 9
10355: PUSH
10356: LD_INT 1
10358: ARRAY
10359: PPUSH
10360: LD_INT 22
10362: PUSH
10363: LD_INT 1
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: PPUSH
10375: LD_VAR 0 9
10379: PUSH
10380: LD_INT 1
10382: ARRAY
10383: PPUSH
10384: CALL_OW 74
10388: PPUSH
10389: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10393: LD_ADDR_VAR 0 8
10397: PUSH
10398: LD_VAR 0 8
10402: PPUSH
10403: LD_INT 50
10405: PUSH
10406: EMPTY
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: ST_TO_ADDR
// until not units ;
10414: LD_VAR 0 8
10418: NOT
10419: IFFALSE 10195
// end ;
10421: LD_VAR 0 1
10425: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10426: LD_INT 0
10428: PPUSH
10429: PPUSH
10430: PPUSH
10431: PPUSH
10432: PPUSH
10433: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10434: LD_ADDR_VAR 0 6
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 120
10451: PUSH
10452: LD_INT 10
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PPUSH
10463: CALL_OW 69
10467: ST_TO_ADDR
// if not units then
10468: LD_VAR 0 6
10472: NOT
10473: IFFALSE 10477
// exit ;
10475: GO 10608
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10477: LD_ADDR_VAR 0 4
10481: PUSH
10482: LD_INT 80
10484: PUSH
10485: LD_INT 60
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 54
10494: PUSH
10495: LD_INT 57
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 55
10504: PUSH
10505: LD_INT 74
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 61
10514: PUSH
10515: LD_INT 85
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10528: LD_INT 35
10530: PPUSH
10531: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: LD_VAR 0 6
10544: PPUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 72
10559: ST_TO_ADDR
// if vehicles then
10560: LD_VAR 0 5
10564: IFFALSE 10580
// AgressiveMove ( vehicles , path ) ;
10566: LD_VAR 0 5
10570: PPUSH
10571: LD_VAR 0 4
10575: PPUSH
10576: CALL 70902 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10580: LD_ADDR_VAR 0 6
10584: PUSH
10585: LD_VAR 0 6
10589: PPUSH
10590: LD_INT 50
10592: PUSH
10593: EMPTY
10594: LIST
10595: PPUSH
10596: CALL_OW 72
10600: ST_TO_ADDR
// until not units ;
10601: LD_VAR 0 6
10605: NOT
10606: IFFALSE 10528
// end ; end_of_file
10608: LD_VAR 0 1
10612: RET
// every 0 0$01 do var i , cratesSpawned ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin cratesSpawned := 0 ;
10620: LD_ADDR_VAR 0 2
10624: PUSH
10625: LD_INT 0
10627: ST_TO_ADDR
// for i := 1 to 6 do
10628: LD_ADDR_VAR 0 1
10632: PUSH
10633: DOUBLE
10634: LD_INT 1
10636: DEC
10637: ST_TO_ADDR
10638: LD_INT 6
10640: PUSH
10641: FOR_TO
10642: IFFALSE 10667
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 5
10649: PPUSH
10650: CALL_OW 12
10654: PPUSH
10655: LD_INT 17
10657: PPUSH
10658: LD_INT 0
10660: PPUSH
10661: CALL_OW 55
10665: GO 10641
10667: POP
10668: POP
// wait ( 0 0$20 ) ;
10669: LD_INT 700
10671: PPUSH
10672: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10676: LD_INT 280
10678: PPUSH
10679: CALL_OW 67
// if cratesSpawned < 12 then
10683: LD_VAR 0 2
10687: PUSH
10688: LD_INT 12
10690: LESS
10691: IFFALSE 10743
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10693: LD_INT 105
10695: PPUSH
10696: LD_INT 350
10698: PPUSH
10699: CALL_OW 12
10703: PPUSH
10704: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10708: LD_INT 3
10710: PPUSH
10711: LD_INT 5
10713: PPUSH
10714: CALL_OW 12
10718: PPUSH
10719: LD_INT 13
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 2
10738: PUSH
10739: LD_INT 1
10741: PLUS
10742: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10743: LD_VAR 0 2
10747: PUSH
10748: LD_INT 12
10750: GREATEREQUAL
10751: PUSH
10752: LD_VAR 0 2
10756: PUSH
10757: LD_INT 32
10759: LESS
10760: AND
10761: IFFALSE 10813
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10763: LD_INT 420
10765: PPUSH
10766: LD_INT 700
10768: PPUSH
10769: CALL_OW 12
10773: PPUSH
10774: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10778: LD_INT 3
10780: PPUSH
10781: LD_INT 5
10783: PPUSH
10784: CALL_OW 12
10788: PPUSH
10789: LD_INT 13
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10799: LD_ADDR_VAR 0 2
10803: PUSH
10804: LD_VAR 0 2
10808: PUSH
10809: LD_INT 1
10811: PLUS
10812: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10813: LD_VAR 0 2
10817: PUSH
10818: LD_INT 32
10820: GREATEREQUAL
10821: IFFALSE 10895
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10823: LD_INT 13
10825: PPUSH
10826: CALL_OW 435
10830: PUSH
10831: LD_INT 14
10833: LESS
10834: IFFALSE 10845
// wait ( 0 0$20 ) else
10836: LD_INT 700
10838: PPUSH
10839: CALL_OW 67
10843: GO 10860
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10845: LD_INT 1750
10847: PPUSH
10848: LD_INT 3150
10850: PPUSH
10851: CALL_OW 12
10855: PPUSH
10856: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10860: LD_INT 2
10862: PPUSH
10863: LD_INT 5
10865: PPUSH
10866: CALL_OW 12
10870: PPUSH
10871: LD_INT 13
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10881: LD_ADDR_VAR 0 2
10885: PUSH
10886: LD_VAR 0 2
10890: PUSH
10891: LD_INT 1
10893: PLUS
10894: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10895: LD_VAR 0 2
10899: PUSH
10900: LD_INT 120
10902: GREATEREQUAL
10903: IFFALSE 10977
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10905: LD_INT 13
10907: PPUSH
10908: CALL_OW 435
10912: PUSH
10913: LD_INT 14
10915: LESS
10916: IFFALSE 10927
// wait ( 0 0$40 ) else
10918: LD_INT 1400
10920: PPUSH
10921: CALL_OW 67
10925: GO 10942
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10927: LD_INT 2450
10929: PPUSH
10930: LD_INT 3850
10932: PPUSH
10933: CALL_OW 12
10937: PPUSH
10938: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 5
10947: PPUSH
10948: CALL_OW 12
10952: PPUSH
10953: LD_INT 13
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: LD_VAR 0 2
10972: PUSH
10973: LD_INT 1
10975: PLUS
10976: ST_TO_ADDR
// end ; until false ;
10977: LD_INT 0
10979: IFFALSE 10676
// end ; end_of_file end_of_file
10981: PPOPN 2
10983: END
// every 0 0$1 do
10984: GO 10986
10986: DISABLE
// begin enable ;
10987: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10988: LD_STRING updateTimer(
10990: PUSH
10991: LD_OWVAR 1
10995: STR
10996: PUSH
10997: LD_STRING );
10999: STR
11000: PPUSH
11001: CALL_OW 559
// end ;
11005: END
// export function SOS_MapStart ( ) ; begin
11006: LD_INT 0
11008: PPUSH
// if streamModeActive then
11009: LD_EXP 46
11013: IFFALSE 11022
// DefineStreamItems ( true ) ;
11015: LD_INT 1
11017: PPUSH
11018: CALL 12676 0 1
// UpdateFactoryWaypoints ( ) ;
11022: CALL 25537 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11026: CALL 25794 0 0
// end ;
11030: LD_VAR 0 1
11034: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11035: LD_INT 0
11037: PPUSH
// if p2 = 100 then
11038: LD_VAR 0 2
11042: PUSH
11043: LD_INT 100
11045: EQUAL
11046: IFFALSE 12049
// begin if not StreamModeActive then
11048: LD_EXP 46
11052: NOT
11053: IFFALSE 11063
// StreamModeActive := true ;
11055: LD_ADDR_EXP 46
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if p3 = 0 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 0
11070: EQUAL
11071: IFFALSE 11077
// InitStreamMode ;
11073: CALL 12212 0 0
// if p3 = 1 then
11077: LD_VAR 0 3
11081: PUSH
11082: LD_INT 1
11084: EQUAL
11085: IFFALSE 11095
// sRocket := true ;
11087: LD_ADDR_EXP 51
11091: PUSH
11092: LD_INT 1
11094: ST_TO_ADDR
// if p3 = 2 then
11095: LD_VAR 0 3
11099: PUSH
11100: LD_INT 2
11102: EQUAL
11103: IFFALSE 11113
// sSpeed := true ;
11105: LD_ADDR_EXP 50
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// if p3 = 3 then
11113: LD_VAR 0 3
11117: PUSH
11118: LD_INT 3
11120: EQUAL
11121: IFFALSE 11131
// sEngine := true ;
11123: LD_ADDR_EXP 52
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// if p3 = 4 then
11131: LD_VAR 0 3
11135: PUSH
11136: LD_INT 4
11138: EQUAL
11139: IFFALSE 11149
// sSpec := true ;
11141: LD_ADDR_EXP 49
11145: PUSH
11146: LD_INT 1
11148: ST_TO_ADDR
// if p3 = 5 then
11149: LD_VAR 0 3
11153: PUSH
11154: LD_INT 5
11156: EQUAL
11157: IFFALSE 11167
// sLevel := true ;
11159: LD_ADDR_EXP 53
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// if p3 = 6 then
11167: LD_VAR 0 3
11171: PUSH
11172: LD_INT 6
11174: EQUAL
11175: IFFALSE 11185
// sArmoury := true ;
11177: LD_ADDR_EXP 54
11181: PUSH
11182: LD_INT 1
11184: ST_TO_ADDR
// if p3 = 7 then
11185: LD_VAR 0 3
11189: PUSH
11190: LD_INT 7
11192: EQUAL
11193: IFFALSE 11203
// sRadar := true ;
11195: LD_ADDR_EXP 55
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
// if p3 = 8 then
11203: LD_VAR 0 3
11207: PUSH
11208: LD_INT 8
11210: EQUAL
11211: IFFALSE 11221
// sBunker := true ;
11213: LD_ADDR_EXP 56
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// if p3 = 9 then
11221: LD_VAR 0 3
11225: PUSH
11226: LD_INT 9
11228: EQUAL
11229: IFFALSE 11239
// sHack := true ;
11231: LD_ADDR_EXP 57
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// if p3 = 10 then
11239: LD_VAR 0 3
11243: PUSH
11244: LD_INT 10
11246: EQUAL
11247: IFFALSE 11257
// sFire := true ;
11249: LD_ADDR_EXP 58
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// if p3 = 11 then
11257: LD_VAR 0 3
11261: PUSH
11262: LD_INT 11
11264: EQUAL
11265: IFFALSE 11275
// sRefresh := true ;
11267: LD_ADDR_EXP 59
11271: PUSH
11272: LD_INT 1
11274: ST_TO_ADDR
// if p3 = 12 then
11275: LD_VAR 0 3
11279: PUSH
11280: LD_INT 12
11282: EQUAL
11283: IFFALSE 11293
// sExp := true ;
11285: LD_ADDR_EXP 60
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// if p3 = 13 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 13
11300: EQUAL
11301: IFFALSE 11311
// sDepot := true ;
11303: LD_ADDR_EXP 61
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 14 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 14
11318: EQUAL
11319: IFFALSE 11329
// sFlag := true ;
11321: LD_ADDR_EXP 62
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 15 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 15
11336: EQUAL
11337: IFFALSE 11347
// sKamikadze := true ;
11339: LD_ADDR_EXP 70
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// if p3 = 16 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 16
11354: EQUAL
11355: IFFALSE 11365
// sTroll := true ;
11357: LD_ADDR_EXP 71
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// if p3 = 17 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 17
11372: EQUAL
11373: IFFALSE 11383
// sSlow := true ;
11375: LD_ADDR_EXP 72
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 18 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 18
11390: EQUAL
11391: IFFALSE 11401
// sLack := true ;
11393: LD_ADDR_EXP 73
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 19 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 19
11408: EQUAL
11409: IFFALSE 11419
// sTank := true ;
11411: LD_ADDR_EXP 75
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 20 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 20
11426: EQUAL
11427: IFFALSE 11437
// sRemote := true ;
11429: LD_ADDR_EXP 76
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 21 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 21
11444: EQUAL
11445: IFFALSE 11455
// sPowell := true ;
11447: LD_ADDR_EXP 77
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 22 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 22
11462: EQUAL
11463: IFFALSE 11473
// sTeleport := true ;
11465: LD_ADDR_EXP 80
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 23 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 23
11480: EQUAL
11481: IFFALSE 11491
// sOilTower := true ;
11483: LD_ADDR_EXP 82
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 24 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 24
11498: EQUAL
11499: IFFALSE 11509
// sShovel := true ;
11501: LD_ADDR_EXP 83
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 25 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 25
11516: EQUAL
11517: IFFALSE 11527
// sSheik := true ;
11519: LD_ADDR_EXP 84
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 26 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 26
11534: EQUAL
11535: IFFALSE 11545
// sEarthquake := true ;
11537: LD_ADDR_EXP 86
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 27 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 27
11552: EQUAL
11553: IFFALSE 11563
// sAI := true ;
11555: LD_ADDR_EXP 87
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 28 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 28
11570: EQUAL
11571: IFFALSE 11581
// sCargo := true ;
11573: LD_ADDR_EXP 90
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 29 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 29
11588: EQUAL
11589: IFFALSE 11599
// sDLaser := true ;
11591: LD_ADDR_EXP 91
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 30 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 30
11606: EQUAL
11607: IFFALSE 11617
// sExchange := true ;
11609: LD_ADDR_EXP 92
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 31 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 31
11624: EQUAL
11625: IFFALSE 11635
// sFac := true ;
11627: LD_ADDR_EXP 93
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 32 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 32
11642: EQUAL
11643: IFFALSE 11653
// sPower := true ;
11645: LD_ADDR_EXP 94
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 33 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 33
11660: EQUAL
11661: IFFALSE 11671
// sRandom := true ;
11663: LD_ADDR_EXP 95
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 34 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 34
11678: EQUAL
11679: IFFALSE 11689
// sShield := true ;
11681: LD_ADDR_EXP 96
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 35 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 35
11696: EQUAL
11697: IFFALSE 11707
// sTime := true ;
11699: LD_ADDR_EXP 97
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 36 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 36
11714: EQUAL
11715: IFFALSE 11725
// sTools := true ;
11717: LD_ADDR_EXP 98
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 101 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 101
11732: EQUAL
11733: IFFALSE 11743
// sSold := true ;
11735: LD_ADDR_EXP 63
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 102 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 102
11750: EQUAL
11751: IFFALSE 11761
// sDiff := true ;
11753: LD_ADDR_EXP 64
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 103 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 103
11768: EQUAL
11769: IFFALSE 11779
// sFog := true ;
11771: LD_ADDR_EXP 67
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 104 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 104
11786: EQUAL
11787: IFFALSE 11797
// sReset := true ;
11789: LD_ADDR_EXP 68
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 105 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 105
11804: EQUAL
11805: IFFALSE 11815
// sSun := true ;
11807: LD_ADDR_EXP 69
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 106 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 106
11822: EQUAL
11823: IFFALSE 11833
// sTiger := true ;
11825: LD_ADDR_EXP 65
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 107 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 107
11840: EQUAL
11841: IFFALSE 11851
// sBomb := true ;
11843: LD_ADDR_EXP 66
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 108 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 108
11858: EQUAL
11859: IFFALSE 11869
// sWound := true ;
11861: LD_ADDR_EXP 74
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 109 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 109
11876: EQUAL
11877: IFFALSE 11887
// sBetray := true ;
11879: LD_ADDR_EXP 78
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 110 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 110
11894: EQUAL
11895: IFFALSE 11905
// sContamin := true ;
11897: LD_ADDR_EXP 79
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 111 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 111
11912: EQUAL
11913: IFFALSE 11923
// sOil := true ;
11915: LD_ADDR_EXP 81
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 112 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 112
11930: EQUAL
11931: IFFALSE 11941
// sStu := true ;
11933: LD_ADDR_EXP 85
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 113 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 113
11948: EQUAL
11949: IFFALSE 11959
// sBazooka := true ;
11951: LD_ADDR_EXP 88
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 114 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 114
11966: EQUAL
11967: IFFALSE 11977
// sMortar := true ;
11969: LD_ADDR_EXP 89
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 115 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 115
11984: EQUAL
11985: IFFALSE 11995
// sRanger := true ;
11987: LD_ADDR_EXP 99
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 116 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 116
12002: EQUAL
12003: IFFALSE 12013
// sComputer := true ;
12005: LD_ADDR_EXP 100
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 117 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 117
12020: EQUAL
12021: IFFALSE 12031
// s30 := true ;
12023: LD_ADDR_EXP 101
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 118 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 118
12038: EQUAL
12039: IFFALSE 12049
// s60 := true ;
12041: LD_ADDR_EXP 102
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// end ; if p2 = 101 then
12049: LD_VAR 0 2
12053: PUSH
12054: LD_INT 101
12056: EQUAL
12057: IFFALSE 12185
// begin case p3 of 1 :
12059: LD_VAR 0 3
12063: PUSH
12064: LD_INT 1
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12079
12072: POP
// hHackUnlimitedResources ; 2 :
12073: CALL 24283 0 0
12077: GO 12185
12079: LD_INT 2
12081: DOUBLE
12082: EQUAL
12083: IFTRUE 12087
12085: GO 12094
12087: POP
// hHackSetLevel10 ; 3 :
12088: CALL 24416 0 0
12092: GO 12185
12094: LD_INT 3
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12109
12102: POP
// hHackSetLevel10YourUnits ; 4 :
12103: CALL 24501 0 0
12107: GO 12185
12109: LD_INT 4
12111: DOUBLE
12112: EQUAL
12113: IFTRUE 12117
12115: GO 12124
12117: POP
// hHackInvincible ; 5 :
12118: CALL 24949 0 0
12122: GO 12185
12124: LD_INT 5
12126: DOUBLE
12127: EQUAL
12128: IFTRUE 12132
12130: GO 12139
12132: POP
// hHackInvisible ; 6 :
12133: CALL 25060 0 0
12137: GO 12185
12139: LD_INT 6
12141: DOUBLE
12142: EQUAL
12143: IFTRUE 12147
12145: GO 12154
12147: POP
// hHackChangeYourSide ; 7 :
12148: CALL 25117 0 0
12152: GO 12185
12154: LD_INT 7
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12169
12162: POP
// hHackChangeUnitSide ; 8 :
12163: CALL 25159 0 0
12167: GO 12185
12169: LD_INT 8
12171: DOUBLE
12172: EQUAL
12173: IFTRUE 12177
12175: GO 12184
12177: POP
// hHackFog ; end ;
12178: CALL 25260 0 0
12182: GO 12185
12184: POP
// end ; end ;
12185: LD_VAR 0 7
12189: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12190: GO 12192
12192: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12193: LD_STRING initStreamRollete();
12195: PPUSH
12196: CALL_OW 559
// InitStreamMode ;
12200: CALL 12212 0 0
// DefineStreamItems ( false ) ;
12204: LD_INT 0
12206: PPUSH
12207: CALL 12676 0 1
// end ;
12211: END
// function InitStreamMode ; begin
12212: LD_INT 0
12214: PPUSH
// streamModeActive := false ;
12215: LD_ADDR_EXP 46
12219: PUSH
12220: LD_INT 0
12222: ST_TO_ADDR
// normalCounter := 36 ;
12223: LD_ADDR_EXP 47
12227: PUSH
12228: LD_INT 36
12230: ST_TO_ADDR
// hardcoreCounter := 18 ;
12231: LD_ADDR_EXP 48
12235: PUSH
12236: LD_INT 18
12238: ST_TO_ADDR
// sRocket := false ;
12239: LD_ADDR_EXP 51
12243: PUSH
12244: LD_INT 0
12246: ST_TO_ADDR
// sSpeed := false ;
12247: LD_ADDR_EXP 50
12251: PUSH
12252: LD_INT 0
12254: ST_TO_ADDR
// sEngine := false ;
12255: LD_ADDR_EXP 52
12259: PUSH
12260: LD_INT 0
12262: ST_TO_ADDR
// sSpec := false ;
12263: LD_ADDR_EXP 49
12267: PUSH
12268: LD_INT 0
12270: ST_TO_ADDR
// sLevel := false ;
12271: LD_ADDR_EXP 53
12275: PUSH
12276: LD_INT 0
12278: ST_TO_ADDR
// sArmoury := false ;
12279: LD_ADDR_EXP 54
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// sRadar := false ;
12287: LD_ADDR_EXP 55
12291: PUSH
12292: LD_INT 0
12294: ST_TO_ADDR
// sBunker := false ;
12295: LD_ADDR_EXP 56
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// sHack := false ;
12303: LD_ADDR_EXP 57
12307: PUSH
12308: LD_INT 0
12310: ST_TO_ADDR
// sFire := false ;
12311: LD_ADDR_EXP 58
12315: PUSH
12316: LD_INT 0
12318: ST_TO_ADDR
// sRefresh := false ;
12319: LD_ADDR_EXP 59
12323: PUSH
12324: LD_INT 0
12326: ST_TO_ADDR
// sExp := false ;
12327: LD_ADDR_EXP 60
12331: PUSH
12332: LD_INT 0
12334: ST_TO_ADDR
// sDepot := false ;
12335: LD_ADDR_EXP 61
12339: PUSH
12340: LD_INT 0
12342: ST_TO_ADDR
// sFlag := false ;
12343: LD_ADDR_EXP 62
12347: PUSH
12348: LD_INT 0
12350: ST_TO_ADDR
// sKamikadze := false ;
12351: LD_ADDR_EXP 70
12355: PUSH
12356: LD_INT 0
12358: ST_TO_ADDR
// sTroll := false ;
12359: LD_ADDR_EXP 71
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// sSlow := false ;
12367: LD_ADDR_EXP 72
12371: PUSH
12372: LD_INT 0
12374: ST_TO_ADDR
// sLack := false ;
12375: LD_ADDR_EXP 73
12379: PUSH
12380: LD_INT 0
12382: ST_TO_ADDR
// sTank := false ;
12383: LD_ADDR_EXP 75
12387: PUSH
12388: LD_INT 0
12390: ST_TO_ADDR
// sRemote := false ;
12391: LD_ADDR_EXP 76
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// sPowell := false ;
12399: LD_ADDR_EXP 77
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// sTeleport := false ;
12407: LD_ADDR_EXP 80
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// sOilTower := false ;
12415: LD_ADDR_EXP 82
12419: PUSH
12420: LD_INT 0
12422: ST_TO_ADDR
// sShovel := false ;
12423: LD_ADDR_EXP 83
12427: PUSH
12428: LD_INT 0
12430: ST_TO_ADDR
// sSheik := false ;
12431: LD_ADDR_EXP 84
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// sEarthquake := false ;
12439: LD_ADDR_EXP 86
12443: PUSH
12444: LD_INT 0
12446: ST_TO_ADDR
// sAI := false ;
12447: LD_ADDR_EXP 87
12451: PUSH
12452: LD_INT 0
12454: ST_TO_ADDR
// sCargo := false ;
12455: LD_ADDR_EXP 90
12459: PUSH
12460: LD_INT 0
12462: ST_TO_ADDR
// sDLaser := false ;
12463: LD_ADDR_EXP 91
12467: PUSH
12468: LD_INT 0
12470: ST_TO_ADDR
// sExchange := false ;
12471: LD_ADDR_EXP 92
12475: PUSH
12476: LD_INT 0
12478: ST_TO_ADDR
// sFac := false ;
12479: LD_ADDR_EXP 93
12483: PUSH
12484: LD_INT 0
12486: ST_TO_ADDR
// sPower := false ;
12487: LD_ADDR_EXP 94
12491: PUSH
12492: LD_INT 0
12494: ST_TO_ADDR
// sRandom := false ;
12495: LD_ADDR_EXP 95
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// sShield := false ;
12503: LD_ADDR_EXP 96
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// sTime := false ;
12511: LD_ADDR_EXP 97
12515: PUSH
12516: LD_INT 0
12518: ST_TO_ADDR
// sTools := false ;
12519: LD_ADDR_EXP 98
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// sSold := false ;
12527: LD_ADDR_EXP 63
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// sDiff := false ;
12535: LD_ADDR_EXP 64
12539: PUSH
12540: LD_INT 0
12542: ST_TO_ADDR
// sFog := false ;
12543: LD_ADDR_EXP 67
12547: PUSH
12548: LD_INT 0
12550: ST_TO_ADDR
// sReset := false ;
12551: LD_ADDR_EXP 68
12555: PUSH
12556: LD_INT 0
12558: ST_TO_ADDR
// sSun := false ;
12559: LD_ADDR_EXP 69
12563: PUSH
12564: LD_INT 0
12566: ST_TO_ADDR
// sTiger := false ;
12567: LD_ADDR_EXP 65
12571: PUSH
12572: LD_INT 0
12574: ST_TO_ADDR
// sBomb := false ;
12575: LD_ADDR_EXP 66
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// sWound := false ;
12583: LD_ADDR_EXP 74
12587: PUSH
12588: LD_INT 0
12590: ST_TO_ADDR
// sBetray := false ;
12591: LD_ADDR_EXP 78
12595: PUSH
12596: LD_INT 0
12598: ST_TO_ADDR
// sContamin := false ;
12599: LD_ADDR_EXP 79
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// sOil := false ;
12607: LD_ADDR_EXP 81
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// sStu := false ;
12615: LD_ADDR_EXP 85
12619: PUSH
12620: LD_INT 0
12622: ST_TO_ADDR
// sBazooka := false ;
12623: LD_ADDR_EXP 88
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// sMortar := false ;
12631: LD_ADDR_EXP 89
12635: PUSH
12636: LD_INT 0
12638: ST_TO_ADDR
// sRanger := false ;
12639: LD_ADDR_EXP 99
12643: PUSH
12644: LD_INT 0
12646: ST_TO_ADDR
// sComputer := false ;
12647: LD_ADDR_EXP 100
12651: PUSH
12652: LD_INT 0
12654: ST_TO_ADDR
// s30 := false ;
12655: LD_ADDR_EXP 101
12659: PUSH
12660: LD_INT 0
12662: ST_TO_ADDR
// s60 := false ;
12663: LD_ADDR_EXP 102
12667: PUSH
12668: LD_INT 0
12670: ST_TO_ADDR
// end ;
12671: LD_VAR 0 1
12675: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12676: LD_INT 0
12678: PPUSH
12679: PPUSH
12680: PPUSH
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
// result := [ ] ;
12685: LD_ADDR_VAR 0 2
12689: PUSH
12690: EMPTY
12691: ST_TO_ADDR
// if campaign_id = 1 then
12692: LD_OWVAR 69
12696: PUSH
12697: LD_INT 1
12699: EQUAL
12700: IFFALSE 15866
// begin case mission_number of 1 :
12702: LD_OWVAR 70
12706: PUSH
12707: LD_INT 1
12709: DOUBLE
12710: EQUAL
12711: IFTRUE 12715
12713: GO 12791
12715: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12716: LD_ADDR_VAR 0 2
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: LD_INT 4
12726: PUSH
12727: LD_INT 11
12729: PUSH
12730: LD_INT 12
12732: PUSH
12733: LD_INT 15
12735: PUSH
12736: LD_INT 16
12738: PUSH
12739: LD_INT 22
12741: PUSH
12742: LD_INT 23
12744: PUSH
12745: LD_INT 26
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 101
12761: PUSH
12762: LD_INT 102
12764: PUSH
12765: LD_INT 106
12767: PUSH
12768: LD_INT 116
12770: PUSH
12771: LD_INT 117
12773: PUSH
12774: LD_INT 118
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: ST_TO_ADDR
12789: GO 15864
12791: LD_INT 2
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12883
12799: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12800: LD_ADDR_VAR 0 2
12804: PUSH
12805: LD_INT 2
12807: PUSH
12808: LD_INT 4
12810: PUSH
12811: LD_INT 11
12813: PUSH
12814: LD_INT 12
12816: PUSH
12817: LD_INT 15
12819: PUSH
12820: LD_INT 16
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 23
12828: PUSH
12829: LD_INT 26
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 101
12845: PUSH
12846: LD_INT 102
12848: PUSH
12849: LD_INT 105
12851: PUSH
12852: LD_INT 106
12854: PUSH
12855: LD_INT 108
12857: PUSH
12858: LD_INT 116
12860: PUSH
12861: LD_INT 117
12863: PUSH
12864: LD_INT 118
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: ST_TO_ADDR
12881: GO 15864
12883: LD_INT 3
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 12979
12891: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12892: LD_ADDR_VAR 0 2
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: LD_INT 4
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: LD_INT 11
12908: PUSH
12909: LD_INT 12
12911: PUSH
12912: LD_INT 15
12914: PUSH
12915: LD_INT 16
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 26
12923: PUSH
12924: LD_INT 36
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 101
12941: PUSH
12942: LD_INT 102
12944: PUSH
12945: LD_INT 105
12947: PUSH
12948: LD_INT 106
12950: PUSH
12951: LD_INT 108
12953: PUSH
12954: LD_INT 116
12956: PUSH
12957: LD_INT 117
12959: PUSH
12960: LD_INT 118
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: ST_TO_ADDR
12977: GO 15864
12979: LD_INT 4
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 13083
12987: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 4
12998: PUSH
12999: LD_INT 5
13001: PUSH
13002: LD_INT 8
13004: PUSH
13005: LD_INT 11
13007: PUSH
13008: LD_INT 12
13010: PUSH
13011: LD_INT 15
13013: PUSH
13014: LD_INT 16
13016: PUSH
13017: LD_INT 22
13019: PUSH
13020: LD_INT 23
13022: PUSH
13023: LD_INT 26
13025: PUSH
13026: LD_INT 36
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 105
13051: PUSH
13052: LD_INT 106
13054: PUSH
13055: LD_INT 108
13057: PUSH
13058: LD_INT 116
13060: PUSH
13061: LD_INT 117
13063: PUSH
13064: LD_INT 118
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: ST_TO_ADDR
13081: GO 15864
13083: LD_INT 5
13085: DOUBLE
13086: EQUAL
13087: IFTRUE 13091
13089: GO 13203
13091: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 4
13102: PUSH
13103: LD_INT 5
13105: PUSH
13106: LD_INT 6
13108: PUSH
13109: LD_INT 8
13111: PUSH
13112: LD_INT 11
13114: PUSH
13115: LD_INT 12
13117: PUSH
13118: LD_INT 15
13120: PUSH
13121: LD_INT 16
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: LD_INT 23
13129: PUSH
13130: LD_INT 25
13132: PUSH
13133: LD_INT 26
13135: PUSH
13136: LD_INT 36
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 101
13157: PUSH
13158: LD_INT 102
13160: PUSH
13161: LD_INT 105
13163: PUSH
13164: LD_INT 106
13166: PUSH
13167: LD_INT 108
13169: PUSH
13170: LD_INT 109
13172: PUSH
13173: LD_INT 112
13175: PUSH
13176: LD_INT 116
13178: PUSH
13179: LD_INT 117
13181: PUSH
13182: LD_INT 118
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: ST_TO_ADDR
13201: GO 15864
13203: LD_INT 6
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13343
13211: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13212: LD_ADDR_VAR 0 2
13216: PUSH
13217: LD_INT 2
13219: PUSH
13220: LD_INT 4
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: LD_INT 6
13228: PUSH
13229: LD_INT 8
13231: PUSH
13232: LD_INT 11
13234: PUSH
13235: LD_INT 12
13237: PUSH
13238: LD_INT 15
13240: PUSH
13241: LD_INT 16
13243: PUSH
13244: LD_INT 20
13246: PUSH
13247: LD_INT 21
13249: PUSH
13250: LD_INT 22
13252: PUSH
13253: LD_INT 23
13255: PUSH
13256: LD_INT 25
13258: PUSH
13259: LD_INT 26
13261: PUSH
13262: LD_INT 30
13264: PUSH
13265: LD_INT 31
13267: PUSH
13268: LD_INT 32
13270: PUSH
13271: LD_INT 36
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 101
13297: PUSH
13298: LD_INT 102
13300: PUSH
13301: LD_INT 105
13303: PUSH
13304: LD_INT 106
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 109
13312: PUSH
13313: LD_INT 112
13315: PUSH
13316: LD_INT 116
13318: PUSH
13319: LD_INT 117
13321: PUSH
13322: LD_INT 118
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 15864
13343: LD_INT 7
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13463
13351: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 4
13362: PUSH
13363: LD_INT 5
13365: PUSH
13366: LD_INT 7
13368: PUSH
13369: LD_INT 11
13371: PUSH
13372: LD_INT 12
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 16
13380: PUSH
13381: LD_INT 20
13383: PUSH
13384: LD_INT 21
13386: PUSH
13387: LD_INT 22
13389: PUSH
13390: LD_INT 23
13392: PUSH
13393: LD_INT 25
13395: PUSH
13396: LD_INT 26
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 101
13417: PUSH
13418: LD_INT 102
13420: PUSH
13421: LD_INT 103
13423: PUSH
13424: LD_INT 105
13426: PUSH
13427: LD_INT 106
13429: PUSH
13430: LD_INT 108
13432: PUSH
13433: LD_INT 112
13435: PUSH
13436: LD_INT 116
13438: PUSH
13439: LD_INT 117
13441: PUSH
13442: LD_INT 118
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
13461: GO 15864
13463: LD_INT 8
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13611
13471: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 4
13482: PUSH
13483: LD_INT 5
13485: PUSH
13486: LD_INT 6
13488: PUSH
13489: LD_INT 7
13491: PUSH
13492: LD_INT 8
13494: PUSH
13495: LD_INT 11
13497: PUSH
13498: LD_INT 12
13500: PUSH
13501: LD_INT 15
13503: PUSH
13504: LD_INT 16
13506: PUSH
13507: LD_INT 20
13509: PUSH
13510: LD_INT 21
13512: PUSH
13513: LD_INT 22
13515: PUSH
13516: LD_INT 23
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 26
13524: PUSH
13525: LD_INT 30
13527: PUSH
13528: LD_INT 31
13530: PUSH
13531: LD_INT 32
13533: PUSH
13534: LD_INT 36
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 101
13561: PUSH
13562: LD_INT 102
13564: PUSH
13565: LD_INT 103
13567: PUSH
13568: LD_INT 105
13570: PUSH
13571: LD_INT 106
13573: PUSH
13574: LD_INT 108
13576: PUSH
13577: LD_INT 109
13579: PUSH
13580: LD_INT 112
13582: PUSH
13583: LD_INT 116
13585: PUSH
13586: LD_INT 117
13588: PUSH
13589: LD_INT 118
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: ST_TO_ADDR
13609: GO 15864
13611: LD_INT 9
13613: DOUBLE
13614: EQUAL
13615: IFTRUE 13619
13617: GO 13767
13619: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13620: LD_ADDR_VAR 0 2
13624: PUSH
13625: LD_INT 2
13627: PUSH
13628: LD_INT 4
13630: PUSH
13631: LD_INT 5
13633: PUSH
13634: LD_INT 6
13636: PUSH
13637: LD_INT 7
13639: PUSH
13640: LD_INT 8
13642: PUSH
13643: LD_INT 11
13645: PUSH
13646: LD_INT 12
13648: PUSH
13649: LD_INT 15
13651: PUSH
13652: LD_INT 16
13654: PUSH
13655: LD_INT 20
13657: PUSH
13658: LD_INT 21
13660: PUSH
13661: LD_INT 22
13663: PUSH
13664: LD_INT 23
13666: PUSH
13667: LD_INT 25
13669: PUSH
13670: LD_INT 26
13672: PUSH
13673: LD_INT 28
13675: PUSH
13676: LD_INT 30
13678: PUSH
13679: LD_INT 31
13681: PUSH
13682: LD_INT 32
13684: PUSH
13685: LD_INT 36
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 101
13713: PUSH
13714: LD_INT 102
13716: PUSH
13717: LD_INT 103
13719: PUSH
13720: LD_INT 105
13722: PUSH
13723: LD_INT 106
13725: PUSH
13726: LD_INT 108
13728: PUSH
13729: LD_INT 109
13731: PUSH
13732: LD_INT 112
13734: PUSH
13735: LD_INT 114
13737: PUSH
13738: LD_INT 116
13740: PUSH
13741: LD_INT 117
13743: PUSH
13744: LD_INT 118
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: ST_TO_ADDR
13765: GO 15864
13767: LD_INT 10
13769: DOUBLE
13770: EQUAL
13771: IFTRUE 13775
13773: GO 13971
13775: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: LD_INT 4
13786: PUSH
13787: LD_INT 5
13789: PUSH
13790: LD_INT 6
13792: PUSH
13793: LD_INT 7
13795: PUSH
13796: LD_INT 8
13798: PUSH
13799: LD_INT 9
13801: PUSH
13802: LD_INT 10
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: LD_INT 12
13810: PUSH
13811: LD_INT 13
13813: PUSH
13814: LD_INT 14
13816: PUSH
13817: LD_INT 15
13819: PUSH
13820: LD_INT 16
13822: PUSH
13823: LD_INT 17
13825: PUSH
13826: LD_INT 18
13828: PUSH
13829: LD_INT 19
13831: PUSH
13832: LD_INT 20
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 22
13840: PUSH
13841: LD_INT 23
13843: PUSH
13844: LD_INT 24
13846: PUSH
13847: LD_INT 25
13849: PUSH
13850: LD_INT 26
13852: PUSH
13853: LD_INT 28
13855: PUSH
13856: LD_INT 30
13858: PUSH
13859: LD_INT 31
13861: PUSH
13862: LD_INT 32
13864: PUSH
13865: LD_INT 36
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 101
13901: PUSH
13902: LD_INT 102
13904: PUSH
13905: LD_INT 103
13907: PUSH
13908: LD_INT 104
13910: PUSH
13911: LD_INT 105
13913: PUSH
13914: LD_INT 106
13916: PUSH
13917: LD_INT 107
13919: PUSH
13920: LD_INT 108
13922: PUSH
13923: LD_INT 109
13925: PUSH
13926: LD_INT 110
13928: PUSH
13929: LD_INT 111
13931: PUSH
13932: LD_INT 112
13934: PUSH
13935: LD_INT 114
13937: PUSH
13938: LD_INT 116
13940: PUSH
13941: LD_INT 117
13943: PUSH
13944: LD_INT 118
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: ST_TO_ADDR
13969: GO 15864
13971: LD_INT 11
13973: DOUBLE
13974: EQUAL
13975: IFTRUE 13979
13977: GO 14183
13979: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13980: LD_ADDR_VAR 0 2
13984: PUSH
13985: LD_INT 2
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 4
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: LD_INT 6
13999: PUSH
14000: LD_INT 7
14002: PUSH
14003: LD_INT 8
14005: PUSH
14006: LD_INT 9
14008: PUSH
14009: LD_INT 10
14011: PUSH
14012: LD_INT 11
14014: PUSH
14015: LD_INT 12
14017: PUSH
14018: LD_INT 13
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: LD_INT 15
14026: PUSH
14027: LD_INT 16
14029: PUSH
14030: LD_INT 17
14032: PUSH
14033: LD_INT 18
14035: PUSH
14036: LD_INT 19
14038: PUSH
14039: LD_INT 20
14041: PUSH
14042: LD_INT 21
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 23
14050: PUSH
14051: LD_INT 24
14053: PUSH
14054: LD_INT 25
14056: PUSH
14057: LD_INT 26
14059: PUSH
14060: LD_INT 28
14062: PUSH
14063: LD_INT 30
14065: PUSH
14066: LD_INT 31
14068: PUSH
14069: LD_INT 32
14071: PUSH
14072: LD_INT 34
14074: PUSH
14075: LD_INT 36
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 101
14113: PUSH
14114: LD_INT 102
14116: PUSH
14117: LD_INT 103
14119: PUSH
14120: LD_INT 104
14122: PUSH
14123: LD_INT 105
14125: PUSH
14126: LD_INT 106
14128: PUSH
14129: LD_INT 107
14131: PUSH
14132: LD_INT 108
14134: PUSH
14135: LD_INT 109
14137: PUSH
14138: LD_INT 110
14140: PUSH
14141: LD_INT 111
14143: PUSH
14144: LD_INT 112
14146: PUSH
14147: LD_INT 114
14149: PUSH
14150: LD_INT 116
14152: PUSH
14153: LD_INT 117
14155: PUSH
14156: LD_INT 118
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: ST_TO_ADDR
14181: GO 15864
14183: LD_INT 12
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 14411
14191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: LD_INT 2
14202: PUSH
14203: LD_INT 3
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: LD_INT 5
14211: PUSH
14212: LD_INT 6
14214: PUSH
14215: LD_INT 7
14217: PUSH
14218: LD_INT 8
14220: PUSH
14221: LD_INT 9
14223: PUSH
14224: LD_INT 10
14226: PUSH
14227: LD_INT 11
14229: PUSH
14230: LD_INT 12
14232: PUSH
14233: LD_INT 13
14235: PUSH
14236: LD_INT 14
14238: PUSH
14239: LD_INT 15
14241: PUSH
14242: LD_INT 16
14244: PUSH
14245: LD_INT 17
14247: PUSH
14248: LD_INT 18
14250: PUSH
14251: LD_INT 19
14253: PUSH
14254: LD_INT 20
14256: PUSH
14257: LD_INT 21
14259: PUSH
14260: LD_INT 22
14262: PUSH
14263: LD_INT 23
14265: PUSH
14266: LD_INT 24
14268: PUSH
14269: LD_INT 25
14271: PUSH
14272: LD_INT 26
14274: PUSH
14275: LD_INT 27
14277: PUSH
14278: LD_INT 28
14280: PUSH
14281: LD_INT 30
14283: PUSH
14284: LD_INT 31
14286: PUSH
14287: LD_INT 32
14289: PUSH
14290: LD_INT 33
14292: PUSH
14293: LD_INT 34
14295: PUSH
14296: LD_INT 36
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 101
14337: PUSH
14338: LD_INT 102
14340: PUSH
14341: LD_INT 103
14343: PUSH
14344: LD_INT 104
14346: PUSH
14347: LD_INT 105
14349: PUSH
14350: LD_INT 106
14352: PUSH
14353: LD_INT 107
14355: PUSH
14356: LD_INT 108
14358: PUSH
14359: LD_INT 109
14361: PUSH
14362: LD_INT 110
14364: PUSH
14365: LD_INT 111
14367: PUSH
14368: LD_INT 112
14370: PUSH
14371: LD_INT 113
14373: PUSH
14374: LD_INT 114
14376: PUSH
14377: LD_INT 116
14379: PUSH
14380: LD_INT 117
14382: PUSH
14383: LD_INT 118
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: ST_TO_ADDR
14409: GO 15864
14411: LD_INT 13
14413: DOUBLE
14414: EQUAL
14415: IFTRUE 14419
14417: GO 14627
14419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14420: LD_ADDR_VAR 0 2
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: LD_INT 2
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: LD_INT 4
14436: PUSH
14437: LD_INT 5
14439: PUSH
14440: LD_INT 8
14442: PUSH
14443: LD_INT 9
14445: PUSH
14446: LD_INT 10
14448: PUSH
14449: LD_INT 11
14451: PUSH
14452: LD_INT 12
14454: PUSH
14455: LD_INT 14
14457: PUSH
14458: LD_INT 15
14460: PUSH
14461: LD_INT 16
14463: PUSH
14464: LD_INT 17
14466: PUSH
14467: LD_INT 18
14469: PUSH
14470: LD_INT 19
14472: PUSH
14473: LD_INT 20
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_INT 23
14484: PUSH
14485: LD_INT 24
14487: PUSH
14488: LD_INT 25
14490: PUSH
14491: LD_INT 26
14493: PUSH
14494: LD_INT 27
14496: PUSH
14497: LD_INT 28
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 31
14505: PUSH
14506: LD_INT 32
14508: PUSH
14509: LD_INT 33
14511: PUSH
14512: LD_INT 34
14514: PUSH
14515: LD_INT 36
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 101
14553: PUSH
14554: LD_INT 102
14556: PUSH
14557: LD_INT 103
14559: PUSH
14560: LD_INT 104
14562: PUSH
14563: LD_INT 105
14565: PUSH
14566: LD_INT 106
14568: PUSH
14569: LD_INT 107
14571: PUSH
14572: LD_INT 108
14574: PUSH
14575: LD_INT 109
14577: PUSH
14578: LD_INT 110
14580: PUSH
14581: LD_INT 111
14583: PUSH
14584: LD_INT 112
14586: PUSH
14587: LD_INT 113
14589: PUSH
14590: LD_INT 114
14592: PUSH
14593: LD_INT 116
14595: PUSH
14596: LD_INT 117
14598: PUSH
14599: LD_INT 118
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: ST_TO_ADDR
14625: GO 15864
14627: LD_INT 14
14629: DOUBLE
14630: EQUAL
14631: IFTRUE 14635
14633: GO 14859
14635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_INT 1
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: LD_INT 3
14649: PUSH
14650: LD_INT 4
14652: PUSH
14653: LD_INT 5
14655: PUSH
14656: LD_INT 6
14658: PUSH
14659: LD_INT 7
14661: PUSH
14662: LD_INT 8
14664: PUSH
14665: LD_INT 9
14667: PUSH
14668: LD_INT 10
14670: PUSH
14671: LD_INT 11
14673: PUSH
14674: LD_INT 12
14676: PUSH
14677: LD_INT 13
14679: PUSH
14680: LD_INT 14
14682: PUSH
14683: LD_INT 15
14685: PUSH
14686: LD_INT 16
14688: PUSH
14689: LD_INT 17
14691: PUSH
14692: LD_INT 18
14694: PUSH
14695: LD_INT 19
14697: PUSH
14698: LD_INT 20
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 22
14706: PUSH
14707: LD_INT 23
14709: PUSH
14710: LD_INT 24
14712: PUSH
14713: LD_INT 25
14715: PUSH
14716: LD_INT 26
14718: PUSH
14719: LD_INT 27
14721: PUSH
14722: LD_INT 28
14724: PUSH
14725: LD_INT 29
14727: PUSH
14728: LD_INT 30
14730: PUSH
14731: LD_INT 31
14733: PUSH
14734: LD_INT 32
14736: PUSH
14737: LD_INT 33
14739: PUSH
14740: LD_INT 34
14742: PUSH
14743: LD_INT 36
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 101
14785: PUSH
14786: LD_INT 102
14788: PUSH
14789: LD_INT 103
14791: PUSH
14792: LD_INT 104
14794: PUSH
14795: LD_INT 105
14797: PUSH
14798: LD_INT 106
14800: PUSH
14801: LD_INT 107
14803: PUSH
14804: LD_INT 108
14806: PUSH
14807: LD_INT 109
14809: PUSH
14810: LD_INT 110
14812: PUSH
14813: LD_INT 111
14815: PUSH
14816: LD_INT 112
14818: PUSH
14819: LD_INT 113
14821: PUSH
14822: LD_INT 114
14824: PUSH
14825: LD_INT 116
14827: PUSH
14828: LD_INT 117
14830: PUSH
14831: LD_INT 118
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: ST_TO_ADDR
14857: GO 15864
14859: LD_INT 15
14861: DOUBLE
14862: EQUAL
14863: IFTRUE 14867
14865: GO 15091
14867: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: LD_INT 5
14887: PUSH
14888: LD_INT 6
14890: PUSH
14891: LD_INT 7
14893: PUSH
14894: LD_INT 8
14896: PUSH
14897: LD_INT 9
14899: PUSH
14900: LD_INT 10
14902: PUSH
14903: LD_INT 11
14905: PUSH
14906: LD_INT 12
14908: PUSH
14909: LD_INT 13
14911: PUSH
14912: LD_INT 14
14914: PUSH
14915: LD_INT 15
14917: PUSH
14918: LD_INT 16
14920: PUSH
14921: LD_INT 17
14923: PUSH
14924: LD_INT 18
14926: PUSH
14927: LD_INT 19
14929: PUSH
14930: LD_INT 20
14932: PUSH
14933: LD_INT 21
14935: PUSH
14936: LD_INT 22
14938: PUSH
14939: LD_INT 23
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 25
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: LD_INT 27
14953: PUSH
14954: LD_INT 28
14956: PUSH
14957: LD_INT 29
14959: PUSH
14960: LD_INT 30
14962: PUSH
14963: LD_INT 31
14965: PUSH
14966: LD_INT 32
14968: PUSH
14969: LD_INT 33
14971: PUSH
14972: LD_INT 34
14974: PUSH
14975: LD_INT 36
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 101
15017: PUSH
15018: LD_INT 102
15020: PUSH
15021: LD_INT 103
15023: PUSH
15024: LD_INT 104
15026: PUSH
15027: LD_INT 105
15029: PUSH
15030: LD_INT 106
15032: PUSH
15033: LD_INT 107
15035: PUSH
15036: LD_INT 108
15038: PUSH
15039: LD_INT 109
15041: PUSH
15042: LD_INT 110
15044: PUSH
15045: LD_INT 111
15047: PUSH
15048: LD_INT 112
15050: PUSH
15051: LD_INT 113
15053: PUSH
15054: LD_INT 114
15056: PUSH
15057: LD_INT 116
15059: PUSH
15060: LD_INT 117
15062: PUSH
15063: LD_INT 118
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: ST_TO_ADDR
15089: GO 15864
15091: LD_INT 16
15093: DOUBLE
15094: EQUAL
15095: IFTRUE 15099
15097: GO 15235
15099: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: LD_INT 2
15107: PUSH
15108: LD_INT 4
15110: PUSH
15111: LD_INT 5
15113: PUSH
15114: LD_INT 7
15116: PUSH
15117: LD_INT 11
15119: PUSH
15120: LD_INT 12
15122: PUSH
15123: LD_INT 15
15125: PUSH
15126: LD_INT 16
15128: PUSH
15129: LD_INT 20
15131: PUSH
15132: LD_INT 21
15134: PUSH
15135: LD_INT 22
15137: PUSH
15138: LD_INT 23
15140: PUSH
15141: LD_INT 25
15143: PUSH
15144: LD_INT 26
15146: PUSH
15147: LD_INT 30
15149: PUSH
15150: LD_INT 31
15152: PUSH
15153: LD_INT 32
15155: PUSH
15156: LD_INT 33
15158: PUSH
15159: LD_INT 34
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 101
15185: PUSH
15186: LD_INT 102
15188: PUSH
15189: LD_INT 103
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 108
15197: PUSH
15198: LD_INT 112
15200: PUSH
15201: LD_INT 113
15203: PUSH
15204: LD_INT 114
15206: PUSH
15207: LD_INT 116
15209: PUSH
15210: LD_INT 117
15212: PUSH
15213: LD_INT 118
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: ST_TO_ADDR
15233: GO 15864
15235: LD_INT 17
15237: DOUBLE
15238: EQUAL
15239: IFTRUE 15243
15241: GO 15467
15243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15244: LD_ADDR_VAR 0 2
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: LD_INT 2
15254: PUSH
15255: LD_INT 3
15257: PUSH
15258: LD_INT 4
15260: PUSH
15261: LD_INT 5
15263: PUSH
15264: LD_INT 6
15266: PUSH
15267: LD_INT 7
15269: PUSH
15270: LD_INT 8
15272: PUSH
15273: LD_INT 9
15275: PUSH
15276: LD_INT 10
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 13
15287: PUSH
15288: LD_INT 14
15290: PUSH
15291: LD_INT 15
15293: PUSH
15294: LD_INT 16
15296: PUSH
15297: LD_INT 17
15299: PUSH
15300: LD_INT 18
15302: PUSH
15303: LD_INT 19
15305: PUSH
15306: LD_INT 20
15308: PUSH
15309: LD_INT 21
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_INT 23
15317: PUSH
15318: LD_INT 24
15320: PUSH
15321: LD_INT 25
15323: PUSH
15324: LD_INT 26
15326: PUSH
15327: LD_INT 27
15329: PUSH
15330: LD_INT 28
15332: PUSH
15333: LD_INT 29
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 31
15341: PUSH
15342: LD_INT 32
15344: PUSH
15345: LD_INT 33
15347: PUSH
15348: LD_INT 34
15350: PUSH
15351: LD_INT 36
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 101
15393: PUSH
15394: LD_INT 102
15396: PUSH
15397: LD_INT 103
15399: PUSH
15400: LD_INT 104
15402: PUSH
15403: LD_INT 105
15405: PUSH
15406: LD_INT 106
15408: PUSH
15409: LD_INT 107
15411: PUSH
15412: LD_INT 108
15414: PUSH
15415: LD_INT 109
15417: PUSH
15418: LD_INT 110
15420: PUSH
15421: LD_INT 111
15423: PUSH
15424: LD_INT 112
15426: PUSH
15427: LD_INT 113
15429: PUSH
15430: LD_INT 114
15432: PUSH
15433: LD_INT 116
15435: PUSH
15436: LD_INT 117
15438: PUSH
15439: LD_INT 118
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: ST_TO_ADDR
15465: GO 15864
15467: LD_INT 18
15469: DOUBLE
15470: EQUAL
15471: IFTRUE 15475
15473: GO 15623
15475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_INT 2
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: LD_INT 7
15492: PUSH
15493: LD_INT 11
15495: PUSH
15496: LD_INT 12
15498: PUSH
15499: LD_INT 15
15501: PUSH
15502: LD_INT 16
15504: PUSH
15505: LD_INT 20
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 22
15513: PUSH
15514: LD_INT 23
15516: PUSH
15517: LD_INT 25
15519: PUSH
15520: LD_INT 26
15522: PUSH
15523: LD_INT 30
15525: PUSH
15526: LD_INT 31
15528: PUSH
15529: LD_INT 32
15531: PUSH
15532: LD_INT 33
15534: PUSH
15535: LD_INT 34
15537: PUSH
15538: LD_INT 35
15540: PUSH
15541: LD_INT 36
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 101
15569: PUSH
15570: LD_INT 102
15572: PUSH
15573: LD_INT 103
15575: PUSH
15576: LD_INT 106
15578: PUSH
15579: LD_INT 108
15581: PUSH
15582: LD_INT 112
15584: PUSH
15585: LD_INT 113
15587: PUSH
15588: LD_INT 114
15590: PUSH
15591: LD_INT 115
15593: PUSH
15594: LD_INT 116
15596: PUSH
15597: LD_INT 117
15599: PUSH
15600: LD_INT 118
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: ST_TO_ADDR
15621: GO 15864
15623: LD_INT 19
15625: DOUBLE
15626: EQUAL
15627: IFTRUE 15631
15629: GO 15863
15631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15632: LD_ADDR_VAR 0 2
15636: PUSH
15637: LD_INT 1
15639: PUSH
15640: LD_INT 2
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: LD_INT 6
15654: PUSH
15655: LD_INT 7
15657: PUSH
15658: LD_INT 8
15660: PUSH
15661: LD_INT 9
15663: PUSH
15664: LD_INT 10
15666: PUSH
15667: LD_INT 11
15669: PUSH
15670: LD_INT 12
15672: PUSH
15673: LD_INT 13
15675: PUSH
15676: LD_INT 14
15678: PUSH
15679: LD_INT 15
15681: PUSH
15682: LD_INT 16
15684: PUSH
15685: LD_INT 17
15687: PUSH
15688: LD_INT 18
15690: PUSH
15691: LD_INT 19
15693: PUSH
15694: LD_INT 20
15696: PUSH
15697: LD_INT 21
15699: PUSH
15700: LD_INT 22
15702: PUSH
15703: LD_INT 23
15705: PUSH
15706: LD_INT 24
15708: PUSH
15709: LD_INT 25
15711: PUSH
15712: LD_INT 26
15714: PUSH
15715: LD_INT 27
15717: PUSH
15718: LD_INT 28
15720: PUSH
15721: LD_INT 29
15723: PUSH
15724: LD_INT 30
15726: PUSH
15727: LD_INT 31
15729: PUSH
15730: LD_INT 32
15732: PUSH
15733: LD_INT 33
15735: PUSH
15736: LD_INT 34
15738: PUSH
15739: LD_INT 35
15741: PUSH
15742: LD_INT 36
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 101
15785: PUSH
15786: LD_INT 102
15788: PUSH
15789: LD_INT 103
15791: PUSH
15792: LD_INT 104
15794: PUSH
15795: LD_INT 105
15797: PUSH
15798: LD_INT 106
15800: PUSH
15801: LD_INT 107
15803: PUSH
15804: LD_INT 108
15806: PUSH
15807: LD_INT 109
15809: PUSH
15810: LD_INT 110
15812: PUSH
15813: LD_INT 111
15815: PUSH
15816: LD_INT 112
15818: PUSH
15819: LD_INT 113
15821: PUSH
15822: LD_INT 114
15824: PUSH
15825: LD_INT 115
15827: PUSH
15828: LD_INT 116
15830: PUSH
15831: LD_INT 117
15833: PUSH
15834: LD_INT 118
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: ST_TO_ADDR
15861: GO 15864
15863: POP
// end else
15864: GO 16095
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15866: LD_ADDR_VAR 0 2
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: LD_INT 3
15879: PUSH
15880: LD_INT 4
15882: PUSH
15883: LD_INT 5
15885: PUSH
15886: LD_INT 6
15888: PUSH
15889: LD_INT 7
15891: PUSH
15892: LD_INT 8
15894: PUSH
15895: LD_INT 9
15897: PUSH
15898: LD_INT 10
15900: PUSH
15901: LD_INT 11
15903: PUSH
15904: LD_INT 12
15906: PUSH
15907: LD_INT 13
15909: PUSH
15910: LD_INT 14
15912: PUSH
15913: LD_INT 15
15915: PUSH
15916: LD_INT 16
15918: PUSH
15919: LD_INT 17
15921: PUSH
15922: LD_INT 18
15924: PUSH
15925: LD_INT 19
15927: PUSH
15928: LD_INT 20
15930: PUSH
15931: LD_INT 21
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_INT 23
15939: PUSH
15940: LD_INT 24
15942: PUSH
15943: LD_INT 25
15945: PUSH
15946: LD_INT 26
15948: PUSH
15949: LD_INT 27
15951: PUSH
15952: LD_INT 28
15954: PUSH
15955: LD_INT 29
15957: PUSH
15958: LD_INT 30
15960: PUSH
15961: LD_INT 31
15963: PUSH
15964: LD_INT 32
15966: PUSH
15967: LD_INT 33
15969: PUSH
15970: LD_INT 34
15972: PUSH
15973: LD_INT 35
15975: PUSH
15976: LD_INT 36
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 101
16019: PUSH
16020: LD_INT 102
16022: PUSH
16023: LD_INT 103
16025: PUSH
16026: LD_INT 104
16028: PUSH
16029: LD_INT 105
16031: PUSH
16032: LD_INT 106
16034: PUSH
16035: LD_INT 107
16037: PUSH
16038: LD_INT 108
16040: PUSH
16041: LD_INT 109
16043: PUSH
16044: LD_INT 110
16046: PUSH
16047: LD_INT 111
16049: PUSH
16050: LD_INT 112
16052: PUSH
16053: LD_INT 113
16055: PUSH
16056: LD_INT 114
16058: PUSH
16059: LD_INT 115
16061: PUSH
16062: LD_INT 116
16064: PUSH
16065: LD_INT 117
16067: PUSH
16068: LD_INT 118
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: ST_TO_ADDR
// if result then
16095: LD_VAR 0 2
16099: IFFALSE 16885
// begin normal :=  ;
16101: LD_ADDR_VAR 0 5
16105: PUSH
16106: LD_STRING 
16108: ST_TO_ADDR
// hardcore :=  ;
16109: LD_ADDR_VAR 0 6
16113: PUSH
16114: LD_STRING 
16116: ST_TO_ADDR
// active :=  ;
16117: LD_ADDR_VAR 0 7
16121: PUSH
16122: LD_STRING 
16124: ST_TO_ADDR
// for i = 1 to normalCounter do
16125: LD_ADDR_VAR 0 8
16129: PUSH
16130: DOUBLE
16131: LD_INT 1
16133: DEC
16134: ST_TO_ADDR
16135: LD_EXP 47
16139: PUSH
16140: FOR_TO
16141: IFFALSE 16242
// begin tmp := 0 ;
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_STRING 0
16150: ST_TO_ADDR
// if result [ 1 ] then
16151: LD_VAR 0 2
16155: PUSH
16156: LD_INT 1
16158: ARRAY
16159: IFFALSE 16224
// if result [ 1 ] [ 1 ] = i then
16161: LD_VAR 0 2
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PUSH
16170: LD_INT 1
16172: ARRAY
16173: PUSH
16174: LD_VAR 0 8
16178: EQUAL
16179: IFFALSE 16224
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: LD_VAR 0 2
16198: PUSH
16199: LD_INT 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 3
16210: PPUSH
16211: CALL_OW 1
16215: ST_TO_ADDR
// tmp := 1 ;
16216: LD_ADDR_VAR 0 3
16220: PUSH
16221: LD_STRING 1
16223: ST_TO_ADDR
// end ; normal := normal & tmp ;
16224: LD_ADDR_VAR 0 5
16228: PUSH
16229: LD_VAR 0 5
16233: PUSH
16234: LD_VAR 0 3
16238: STR
16239: ST_TO_ADDR
// end ;
16240: GO 16140
16242: POP
16243: POP
// for i = 1 to hardcoreCounter do
16244: LD_ADDR_VAR 0 8
16248: PUSH
16249: DOUBLE
16250: LD_INT 1
16252: DEC
16253: ST_TO_ADDR
16254: LD_EXP 48
16258: PUSH
16259: FOR_TO
16260: IFFALSE 16365
// begin tmp := 0 ;
16262: LD_ADDR_VAR 0 3
16266: PUSH
16267: LD_STRING 0
16269: ST_TO_ADDR
// if result [ 2 ] then
16270: LD_VAR 0 2
16274: PUSH
16275: LD_INT 2
16277: ARRAY
16278: IFFALSE 16347
// if result [ 2 ] [ 1 ] = 100 + i then
16280: LD_VAR 0 2
16284: PUSH
16285: LD_INT 2
16287: ARRAY
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PUSH
16293: LD_INT 100
16295: PUSH
16296: LD_VAR 0 8
16300: PLUS
16301: EQUAL
16302: IFFALSE 16347
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16304: LD_ADDR_VAR 0 2
16308: PUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_INT 2
16316: PPUSH
16317: LD_VAR 0 2
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: LD_INT 1
16328: PPUSH
16329: CALL_OW 3
16333: PPUSH
16334: CALL_OW 1
16338: ST_TO_ADDR
// tmp := 1 ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_STRING 1
16346: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16347: LD_ADDR_VAR 0 6
16351: PUSH
16352: LD_VAR 0 6
16356: PUSH
16357: LD_VAR 0 3
16361: STR
16362: ST_TO_ADDR
// end ;
16363: GO 16259
16365: POP
16366: POP
// if isGameLoad then
16367: LD_VAR 0 1
16371: IFFALSE 16846
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16373: LD_ADDR_VAR 0 4
16377: PUSH
16378: LD_EXP 51
16382: PUSH
16383: LD_EXP 50
16387: PUSH
16388: LD_EXP 52
16392: PUSH
16393: LD_EXP 49
16397: PUSH
16398: LD_EXP 53
16402: PUSH
16403: LD_EXP 54
16407: PUSH
16408: LD_EXP 55
16412: PUSH
16413: LD_EXP 56
16417: PUSH
16418: LD_EXP 57
16422: PUSH
16423: LD_EXP 58
16427: PUSH
16428: LD_EXP 59
16432: PUSH
16433: LD_EXP 60
16437: PUSH
16438: LD_EXP 61
16442: PUSH
16443: LD_EXP 62
16447: PUSH
16448: LD_EXP 70
16452: PUSH
16453: LD_EXP 71
16457: PUSH
16458: LD_EXP 72
16462: PUSH
16463: LD_EXP 73
16467: PUSH
16468: LD_EXP 75
16472: PUSH
16473: LD_EXP 76
16477: PUSH
16478: LD_EXP 77
16482: PUSH
16483: LD_EXP 80
16487: PUSH
16488: LD_EXP 82
16492: PUSH
16493: LD_EXP 83
16497: PUSH
16498: LD_EXP 84
16502: PUSH
16503: LD_EXP 86
16507: PUSH
16508: LD_EXP 87
16512: PUSH
16513: LD_EXP 90
16517: PUSH
16518: LD_EXP 91
16522: PUSH
16523: LD_EXP 92
16527: PUSH
16528: LD_EXP 93
16532: PUSH
16533: LD_EXP 94
16537: PUSH
16538: LD_EXP 95
16542: PUSH
16543: LD_EXP 96
16547: PUSH
16548: LD_EXP 97
16552: PUSH
16553: LD_EXP 98
16557: PUSH
16558: LD_EXP 63
16562: PUSH
16563: LD_EXP 64
16567: PUSH
16568: LD_EXP 67
16572: PUSH
16573: LD_EXP 68
16577: PUSH
16578: LD_EXP 69
16582: PUSH
16583: LD_EXP 65
16587: PUSH
16588: LD_EXP 66
16592: PUSH
16593: LD_EXP 74
16597: PUSH
16598: LD_EXP 78
16602: PUSH
16603: LD_EXP 79
16607: PUSH
16608: LD_EXP 81
16612: PUSH
16613: LD_EXP 85
16617: PUSH
16618: LD_EXP 88
16622: PUSH
16623: LD_EXP 89
16627: PUSH
16628: LD_EXP 99
16632: PUSH
16633: LD_EXP 100
16637: PUSH
16638: LD_EXP 101
16642: PUSH
16643: LD_EXP 102
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: ST_TO_ADDR
// tmp :=  ;
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: LD_STRING 
16711: ST_TO_ADDR
// for i = 1 to normalCounter do
16712: LD_ADDR_VAR 0 8
16716: PUSH
16717: DOUBLE
16718: LD_INT 1
16720: DEC
16721: ST_TO_ADDR
16722: LD_EXP 47
16726: PUSH
16727: FOR_TO
16728: IFFALSE 16764
// begin if flags [ i ] then
16730: LD_VAR 0 4
16734: PUSH
16735: LD_VAR 0 8
16739: ARRAY
16740: IFFALSE 16762
// tmp := tmp & i & ; ;
16742: LD_ADDR_VAR 0 3
16746: PUSH
16747: LD_VAR 0 3
16751: PUSH
16752: LD_VAR 0 8
16756: STR
16757: PUSH
16758: LD_STRING ;
16760: STR
16761: ST_TO_ADDR
// end ;
16762: GO 16727
16764: POP
16765: POP
// for i = 1 to hardcoreCounter do
16766: LD_ADDR_VAR 0 8
16770: PUSH
16771: DOUBLE
16772: LD_INT 1
16774: DEC
16775: ST_TO_ADDR
16776: LD_EXP 48
16780: PUSH
16781: FOR_TO
16782: IFFALSE 16828
// begin if flags [ normalCounter + i ] then
16784: LD_VAR 0 4
16788: PUSH
16789: LD_EXP 47
16793: PUSH
16794: LD_VAR 0 8
16798: PLUS
16799: ARRAY
16800: IFFALSE 16826
// tmp := tmp & ( 100 + i ) & ; ;
16802: LD_ADDR_VAR 0 3
16806: PUSH
16807: LD_VAR 0 3
16811: PUSH
16812: LD_INT 100
16814: PUSH
16815: LD_VAR 0 8
16819: PLUS
16820: STR
16821: PUSH
16822: LD_STRING ;
16824: STR
16825: ST_TO_ADDR
// end ;
16826: GO 16781
16828: POP
16829: POP
// if tmp then
16830: LD_VAR 0 3
16834: IFFALSE 16846
// active := tmp ;
16836: LD_ADDR_VAR 0 7
16840: PUSH
16841: LD_VAR 0 3
16845: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16846: LD_STRING getStreamItemsFromMission("
16848: PUSH
16849: LD_VAR 0 5
16853: STR
16854: PUSH
16855: LD_STRING ","
16857: STR
16858: PUSH
16859: LD_VAR 0 6
16863: STR
16864: PUSH
16865: LD_STRING ","
16867: STR
16868: PUSH
16869: LD_VAR 0 7
16873: STR
16874: PUSH
16875: LD_STRING ")
16877: STR
16878: PPUSH
16879: CALL_OW 559
// end else
16883: GO 16892
// ToLua ( getStreamItemsFromMission("","","") ) ;
16885: LD_STRING getStreamItemsFromMission("","","")
16887: PPUSH
16888: CALL_OW 559
// end ;
16892: LD_VAR 0 2
16896: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16897: LD_EXP 46
16901: PUSH
16902: LD_EXP 51
16906: AND
16907: IFFALSE 17031
16909: GO 16911
16911: DISABLE
16912: LD_INT 0
16914: PPUSH
16915: PPUSH
// begin enable ;
16916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16917: LD_ADDR_VAR 0 2
16921: PUSH
16922: LD_INT 22
16924: PUSH
16925: LD_OWVAR 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: LD_INT 34
16939: PUSH
16940: LD_INT 7
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 34
16949: PUSH
16950: LD_INT 45
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 34
16959: PUSH
16960: LD_INT 28
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 34
16969: PUSH
16970: LD_INT 47
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if not tmp then
16993: LD_VAR 0 2
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17031
// for i in tmp do
17002: LD_ADDR_VAR 0 1
17006: PUSH
17007: LD_VAR 0 2
17011: PUSH
17012: FOR_IN
17013: IFFALSE 17029
// begin SetLives ( i , 0 ) ;
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 0
17022: PPUSH
17023: CALL_OW 234
// end ;
17027: GO 17012
17029: POP
17030: POP
// end ;
17031: PPOPN 2
17033: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17034: LD_EXP 46
17038: PUSH
17039: LD_EXP 52
17043: AND
17044: IFFALSE 17128
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
17052: PPUSH
// begin enable ;
17053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17054: LD_ADDR_VAR 0 2
17058: PUSH
17059: LD_INT 22
17061: PUSH
17062: LD_OWVAR 2
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 32
17073: PUSH
17074: LD_INT 3
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: ST_TO_ADDR
// if not tmp then
17090: LD_VAR 0 2
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17128
// for i in tmp do
17099: LD_ADDR_VAR 0 1
17103: PUSH
17104: LD_VAR 0 2
17108: PUSH
17109: FOR_IN
17110: IFFALSE 17126
// begin SetLives ( i , 0 ) ;
17112: LD_VAR 0 1
17116: PPUSH
17117: LD_INT 0
17119: PPUSH
17120: CALL_OW 234
// end ;
17124: GO 17109
17126: POP
17127: POP
// end ;
17128: PPOPN 2
17130: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17131: LD_EXP 46
17135: PUSH
17136: LD_EXP 49
17140: AND
17141: IFFALSE 17234
17143: GO 17145
17145: DISABLE
17146: LD_INT 0
17148: PPUSH
// begin enable ;
17149: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17150: LD_ADDR_VAR 0 1
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_OWVAR 2
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 2
17169: PUSH
17170: LD_INT 25
17172: PUSH
17173: LD_INT 5
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 25
17182: PUSH
17183: LD_INT 9
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 25
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PUSH
17215: FOR_IN
17216: IFFALSE 17232
// begin SetClass ( i , 1 ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: CALL_OW 336
// end ;
17230: GO 17215
17232: POP
17233: POP
// end ;
17234: PPOPN 1
17236: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17237: LD_EXP 46
17241: PUSH
17242: LD_EXP 50
17246: AND
17247: PUSH
17248: LD_OWVAR 65
17252: PUSH
17253: LD_INT 7
17255: LESS
17256: AND
17257: IFFALSE 17271
17259: GO 17261
17261: DISABLE
// begin enable ;
17262: ENABLE
// game_speed := 7 ;
17263: LD_ADDR_OWVAR 65
17267: PUSH
17268: LD_INT 7
17270: ST_TO_ADDR
// end ;
17271: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17272: LD_EXP 46
17276: PUSH
17277: LD_EXP 53
17281: AND
17282: IFFALSE 17484
17284: GO 17286
17286: DISABLE
17287: LD_INT 0
17289: PPUSH
17290: PPUSH
17291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_INT 81
17299: PUSH
17300: LD_OWVAR 2
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 21
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: ST_TO_ADDR
// if not tmp then
17328: LD_VAR 0 3
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 17484
// if tmp > 5 then
17337: LD_VAR 0 3
17341: PUSH
17342: LD_INT 5
17344: GREATER
17345: IFFALSE 17357
// k := 5 else
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: LD_INT 5
17354: ST_TO_ADDR
17355: GO 17367
// k := tmp ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: LD_VAR 0 3
17366: ST_TO_ADDR
// for i := 1 to k do
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: DOUBLE
17373: LD_INT 1
17375: DEC
17376: ST_TO_ADDR
17377: LD_VAR 0 2
17381: PUSH
17382: FOR_TO
17383: IFFALSE 17482
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_VAR 0 1
17394: ARRAY
17395: PPUSH
17396: LD_VAR 0 1
17400: PUSH
17401: LD_INT 4
17403: MOD
17404: PUSH
17405: LD_INT 1
17407: PLUS
17408: PPUSH
17409: CALL_OW 259
17413: PUSH
17414: LD_INT 10
17416: LESS
17417: IFFALSE 17480
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17419: LD_VAR 0 3
17423: PUSH
17424: LD_VAR 0 1
17428: ARRAY
17429: PPUSH
17430: LD_VAR 0 1
17434: PUSH
17435: LD_INT 4
17437: MOD
17438: PUSH
17439: LD_INT 1
17441: PLUS
17442: PPUSH
17443: LD_VAR 0 3
17447: PUSH
17448: LD_VAR 0 1
17452: ARRAY
17453: PPUSH
17454: LD_VAR 0 1
17458: PUSH
17459: LD_INT 4
17461: MOD
17462: PUSH
17463: LD_INT 1
17465: PLUS
17466: PPUSH
17467: CALL_OW 259
17471: PUSH
17472: LD_INT 1
17474: PLUS
17475: PPUSH
17476: CALL_OW 237
17480: GO 17382
17482: POP
17483: POP
// end ;
17484: PPOPN 3
17486: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17487: LD_EXP 46
17491: PUSH
17492: LD_EXP 54
17496: AND
17497: IFFALSE 17517
17499: GO 17501
17501: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17502: LD_INT 4
17504: PPUSH
17505: LD_OWVAR 2
17509: PPUSH
17510: LD_INT 0
17512: PPUSH
17513: CALL_OW 324
17517: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17518: LD_EXP 46
17522: PUSH
17523: LD_EXP 83
17527: AND
17528: IFFALSE 17548
17530: GO 17532
17532: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17533: LD_INT 19
17535: PPUSH
17536: LD_OWVAR 2
17540: PPUSH
17541: LD_INT 0
17543: PPUSH
17544: CALL_OW 324
17548: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17549: LD_EXP 46
17553: PUSH
17554: LD_EXP 55
17558: AND
17559: IFFALSE 17661
17561: GO 17563
17563: DISABLE
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
// begin enable ;
17568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17569: LD_ADDR_VAR 0 2
17573: PUSH
17574: LD_INT 22
17576: PUSH
17577: LD_OWVAR 2
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 34
17591: PUSH
17592: LD_INT 11
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 34
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: ST_TO_ADDR
// if not tmp then
17623: LD_VAR 0 2
17627: NOT
17628: IFFALSE 17632
// exit ;
17630: GO 17661
// for i in tmp do
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: FOR_IN
17643: IFFALSE 17659
// begin SetLives ( i , 0 ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 0
17652: PPUSH
17653: CALL_OW 234
// end ;
17657: GO 17642
17659: POP
17660: POP
// end ;
17661: PPOPN 2
17663: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17664: LD_EXP 46
17668: PUSH
17669: LD_EXP 56
17673: AND
17674: IFFALSE 17694
17676: GO 17678
17678: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17679: LD_INT 32
17681: PPUSH
17682: LD_OWVAR 2
17686: PPUSH
17687: LD_INT 0
17689: PPUSH
17690: CALL_OW 324
17694: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17695: LD_EXP 46
17699: PUSH
17700: LD_EXP 57
17704: AND
17705: IFFALSE 17886
17707: GO 17709
17709: DISABLE
17710: LD_INT 0
17712: PPUSH
17713: PPUSH
17714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_OWVAR 2
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 33
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PPUSH
17746: CALL_OW 69
17750: ST_TO_ADDR
// if not tmp then
17751: LD_VAR 0 2
17755: NOT
17756: IFFALSE 17760
// exit ;
17758: GO 17886
// side := 0 ;
17760: LD_ADDR_VAR 0 3
17764: PUSH
17765: LD_INT 0
17767: ST_TO_ADDR
// for i := 1 to 8 do
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: DOUBLE
17774: LD_INT 1
17776: DEC
17777: ST_TO_ADDR
17778: LD_INT 8
17780: PUSH
17781: FOR_TO
17782: IFFALSE 17830
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17784: LD_OWVAR 2
17788: PUSH
17789: LD_VAR 0 1
17793: NONEQUAL
17794: PUSH
17795: LD_OWVAR 2
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 81
17809: PUSH
17810: LD_INT 2
17812: EQUAL
17813: AND
17814: IFFALSE 17828
// begin side := i ;
17816: LD_ADDR_VAR 0 3
17820: PUSH
17821: LD_VAR 0 1
17825: ST_TO_ADDR
// break ;
17826: GO 17830
// end ;
17828: GO 17781
17830: POP
17831: POP
// if not side then
17832: LD_VAR 0 3
17836: NOT
17837: IFFALSE 17841
// exit ;
17839: GO 17886
// for i := 1 to tmp do
17841: LD_ADDR_VAR 0 1
17845: PUSH
17846: DOUBLE
17847: LD_INT 1
17849: DEC
17850: ST_TO_ADDR
17851: LD_VAR 0 2
17855: PUSH
17856: FOR_TO
17857: IFFALSE 17884
// if Prob ( 60 ) then
17859: LD_INT 60
17861: PPUSH
17862: CALL_OW 13
17866: IFFALSE 17882
// SetSide ( i , side ) ;
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_VAR 0 3
17877: PPUSH
17878: CALL_OW 235
17882: GO 17856
17884: POP
17885: POP
// end ;
17886: PPOPN 3
17888: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17889: LD_EXP 46
17893: PUSH
17894: LD_EXP 59
17898: AND
17899: IFFALSE 18018
17901: GO 17903
17903: DISABLE
17904: LD_INT 0
17906: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17907: LD_ADDR_VAR 0 1
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 23
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: PUSH
17961: FOR_IN
17962: IFFALSE 18016
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 257
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: LD_INT 4
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: IN
17992: IFFALSE 18014
// SetClass ( un , rand ( 1 , 4 ) ) ;
17994: LD_VAR 0 1
17998: PPUSH
17999: LD_INT 1
18001: PPUSH
18002: LD_INT 4
18004: PPUSH
18005: CALL_OW 12
18009: PPUSH
18010: CALL_OW 336
18014: GO 17961
18016: POP
18017: POP
// end ;
18018: PPOPN 1
18020: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18021: LD_EXP 46
18025: PUSH
18026: LD_EXP 58
18030: AND
18031: IFFALSE 18110
18033: GO 18035
18035: DISABLE
18036: LD_INT 0
18038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_OWVAR 2
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 21
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: ST_TO_ADDR
// if not tmp then
18075: LD_VAR 0 1
18079: NOT
18080: IFFALSE 18084
// exit ;
18082: GO 18110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18084: LD_VAR 0 1
18088: PUSH
18089: LD_INT 1
18091: PPUSH
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 12
18101: ARRAY
18102: PPUSH
18103: LD_INT 100
18105: PPUSH
18106: CALL_OW 234
// end ;
18110: PPOPN 1
18112: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18113: LD_EXP 46
18117: PUSH
18118: LD_EXP 60
18122: AND
18123: IFFALSE 18221
18125: GO 18127
18127: DISABLE
18128: LD_INT 0
18130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18131: LD_ADDR_VAR 0 1
18135: PUSH
18136: LD_INT 22
18138: PUSH
18139: LD_OWVAR 2
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 21
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 69
18166: ST_TO_ADDR
// if not tmp then
18167: LD_VAR 0 1
18171: NOT
18172: IFFALSE 18176
// exit ;
18174: GO 18221
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 1
18183: PPUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 1
18197: PPUSH
18198: LD_INT 4
18200: PPUSH
18201: CALL_OW 12
18205: PPUSH
18206: LD_INT 3000
18208: PPUSH
18209: LD_INT 9000
18211: PPUSH
18212: CALL_OW 12
18216: PPUSH
18217: CALL_OW 492
// end ;
18221: PPOPN 1
18223: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18224: LD_EXP 46
18228: PUSH
18229: LD_EXP 61
18233: AND
18234: IFFALSE 18254
18236: GO 18238
18238: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18239: LD_INT 1
18241: PPUSH
18242: LD_OWVAR 2
18246: PPUSH
18247: LD_INT 0
18249: PPUSH
18250: CALL_OW 324
18254: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18255: LD_EXP 46
18259: PUSH
18260: LD_EXP 62
18264: AND
18265: IFFALSE 18348
18267: GO 18269
18269: DISABLE
18270: LD_INT 0
18272: PPUSH
18273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18274: LD_ADDR_VAR 0 2
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_OWVAR 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 21
18293: PUSH
18294: LD_INT 3
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: ST_TO_ADDR
// if not tmp then
18310: LD_VAR 0 2
18314: NOT
18315: IFFALSE 18319
// exit ;
18317: GO 18348
// for i in tmp do
18319: LD_ADDR_VAR 0 1
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: FOR_IN
18330: IFFALSE 18346
// SetBLevel ( i , 10 ) ;
18332: LD_VAR 0 1
18336: PPUSH
18337: LD_INT 10
18339: PPUSH
18340: CALL_OW 241
18344: GO 18329
18346: POP
18347: POP
// end ;
18348: PPOPN 2
18350: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18351: LD_EXP 46
18355: PUSH
18356: LD_EXP 63
18360: AND
18361: IFFALSE 18472
18363: GO 18365
18365: DISABLE
18366: LD_INT 0
18368: PPUSH
18369: PPUSH
18370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18371: LD_ADDR_VAR 0 3
18375: PUSH
18376: LD_INT 22
18378: PUSH
18379: LD_OWVAR 2
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 25
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: ST_TO_ADDR
// if not tmp then
18407: LD_VAR 0 3
18411: NOT
18412: IFFALSE 18416
// exit ;
18414: GO 18472
// un := tmp [ rand ( 1 , tmp ) ] ;
18416: LD_ADDR_VAR 0 2
18420: PUSH
18421: LD_VAR 0 3
18425: PUSH
18426: LD_INT 1
18428: PPUSH
18429: LD_VAR 0 3
18433: PPUSH
18434: CALL_OW 12
18438: ARRAY
18439: ST_TO_ADDR
// if Crawls ( un ) then
18440: LD_VAR 0 2
18444: PPUSH
18445: CALL_OW 318
18449: IFFALSE 18460
// ComWalk ( un ) ;
18451: LD_VAR 0 2
18455: PPUSH
18456: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_INT 5
18467: PPUSH
18468: CALL_OW 336
// end ;
18472: PPOPN 3
18474: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18475: LD_EXP 46
18479: PUSH
18480: LD_EXP 64
18484: AND
18485: PUSH
18486: LD_OWVAR 67
18490: PUSH
18491: LD_INT 4
18493: LESS
18494: AND
18495: IFFALSE 18514
18497: GO 18499
18499: DISABLE
// begin Difficulty := Difficulty + 1 ;
18500: LD_ADDR_OWVAR 67
18504: PUSH
18505: LD_OWVAR 67
18509: PUSH
18510: LD_INT 1
18512: PLUS
18513: ST_TO_ADDR
// end ;
18514: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18515: LD_EXP 46
18519: PUSH
18520: LD_EXP 65
18524: AND
18525: IFFALSE 18628
18527: GO 18529
18529: DISABLE
18530: LD_INT 0
18532: PPUSH
// begin for i := 1 to 5 do
18533: LD_ADDR_VAR 0 1
18537: PUSH
18538: DOUBLE
18539: LD_INT 1
18541: DEC
18542: ST_TO_ADDR
18543: LD_INT 5
18545: PUSH
18546: FOR_TO
18547: IFFALSE 18626
// begin uc_nation := nation_nature ;
18549: LD_ADDR_OWVAR 21
18553: PUSH
18554: LD_INT 0
18556: ST_TO_ADDR
// uc_side := 0 ;
18557: LD_ADDR_OWVAR 20
18561: PUSH
18562: LD_INT 0
18564: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18565: LD_ADDR_OWVAR 29
18569: PUSH
18570: LD_INT 12
18572: PUSH
18573: LD_INT 12
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: ST_TO_ADDR
// hc_agressivity := 20 ;
18580: LD_ADDR_OWVAR 35
18584: PUSH
18585: LD_INT 20
18587: ST_TO_ADDR
// hc_class := class_tiger ;
18588: LD_ADDR_OWVAR 28
18592: PUSH
18593: LD_INT 14
18595: ST_TO_ADDR
// hc_gallery :=  ;
18596: LD_ADDR_OWVAR 33
18600: PUSH
18601: LD_STRING 
18603: ST_TO_ADDR
// hc_name :=  ;
18604: LD_ADDR_OWVAR 26
18608: PUSH
18609: LD_STRING 
18611: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18612: CALL_OW 44
18616: PPUSH
18617: LD_INT 0
18619: PPUSH
18620: CALL_OW 51
// end ;
18624: GO 18546
18626: POP
18627: POP
// end ;
18628: PPOPN 1
18630: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18631: LD_EXP 46
18635: PUSH
18636: LD_EXP 66
18640: AND
18641: IFFALSE 18650
18643: GO 18645
18645: DISABLE
// StreamSibBomb ;
18646: CALL 18651 0 0
18650: END
// export function StreamSibBomb ; var i , x , y ; begin
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// result := false ;
18657: LD_ADDR_VAR 0 1
18661: PUSH
18662: LD_INT 0
18664: ST_TO_ADDR
// for i := 1 to 16 do
18665: LD_ADDR_VAR 0 2
18669: PUSH
18670: DOUBLE
18671: LD_INT 1
18673: DEC
18674: ST_TO_ADDR
18675: LD_INT 16
18677: PUSH
18678: FOR_TO
18679: IFFALSE 18878
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_INT 10
18688: PUSH
18689: LD_INT 20
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 40
18697: PUSH
18698: LD_INT 50
18700: PUSH
18701: LD_INT 60
18703: PUSH
18704: LD_INT 70
18706: PUSH
18707: LD_INT 80
18709: PUSH
18710: LD_INT 90
18712: PUSH
18713: LD_INT 100
18715: PUSH
18716: LD_INT 110
18718: PUSH
18719: LD_INT 120
18721: PUSH
18722: LD_INT 130
18724: PUSH
18725: LD_INT 140
18727: PUSH
18728: LD_INT 150
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PPUSH
18751: LD_INT 15
18753: PPUSH
18754: CALL_OW 12
18758: ARRAY
18759: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18760: LD_ADDR_VAR 0 4
18764: PUSH
18765: LD_INT 10
18767: PUSH
18768: LD_INT 20
18770: PUSH
18771: LD_INT 30
18773: PUSH
18774: LD_INT 40
18776: PUSH
18777: LD_INT 50
18779: PUSH
18780: LD_INT 60
18782: PUSH
18783: LD_INT 70
18785: PUSH
18786: LD_INT 80
18788: PUSH
18789: LD_INT 90
18791: PUSH
18792: LD_INT 100
18794: PUSH
18795: LD_INT 110
18797: PUSH
18798: LD_INT 120
18800: PUSH
18801: LD_INT 130
18803: PUSH
18804: LD_INT 140
18806: PUSH
18807: LD_INT 150
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: PPUSH
18830: LD_INT 15
18832: PPUSH
18833: CALL_OW 12
18837: ARRAY
18838: ST_TO_ADDR
// if ValidHex ( x , y ) then
18839: LD_VAR 0 3
18843: PPUSH
18844: LD_VAR 0 4
18848: PPUSH
18849: CALL_OW 488
18853: IFFALSE 18876
// begin result := [ x , y ] ;
18855: LD_ADDR_VAR 0 1
18859: PUSH
18860: LD_VAR 0 3
18864: PUSH
18865: LD_VAR 0 4
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: ST_TO_ADDR
// break ;
18874: GO 18878
// end ; end ;
18876: GO 18678
18878: POP
18879: POP
// if result then
18880: LD_VAR 0 1
18884: IFFALSE 18944
// begin ToLua ( playSibBomb() ) ;
18886: LD_STRING playSibBomb()
18888: PPUSH
18889: CALL_OW 559
// wait ( 0 0$14 ) ;
18893: LD_INT 490
18895: PPUSH
18896: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18900: LD_VAR 0 1
18904: PUSH
18905: LD_INT 1
18907: ARRAY
18908: PPUSH
18909: LD_VAR 0 1
18913: PUSH
18914: LD_INT 2
18916: ARRAY
18917: PPUSH
18918: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18922: LD_VAR 0 1
18926: PUSH
18927: LD_INT 1
18929: ARRAY
18930: PPUSH
18931: LD_VAR 0 1
18935: PUSH
18936: LD_INT 2
18938: ARRAY
18939: PPUSH
18940: CALL_OW 429
// end ; end ;
18944: LD_VAR 0 1
18948: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18949: LD_EXP 46
18953: PUSH
18954: LD_EXP 68
18958: AND
18959: IFFALSE 18971
18961: GO 18963
18963: DISABLE
// YouLost (  ) ;
18964: LD_STRING 
18966: PPUSH
18967: CALL_OW 104
18971: END
// every 0 0$1 trigger StreamModeActive and sFog do
18972: LD_EXP 46
18976: PUSH
18977: LD_EXP 67
18981: AND
18982: IFFALSE 18996
18984: GO 18986
18986: DISABLE
// FogOff ( your_side ) ;
18987: LD_OWVAR 2
18991: PPUSH
18992: CALL_OW 344
18996: END
// every 0 0$1 trigger StreamModeActive and sSun do
18997: LD_EXP 46
19001: PUSH
19002: LD_EXP 69
19006: AND
19007: IFFALSE 19035
19009: GO 19011
19011: DISABLE
// begin solar_recharge_percent := 0 ;
19012: LD_ADDR_OWVAR 79
19016: PUSH
19017: LD_INT 0
19019: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19020: LD_INT 10500
19022: PPUSH
19023: CALL_OW 67
// solar_recharge_percent := 100 ;
19027: LD_ADDR_OWVAR 79
19031: PUSH
19032: LD_INT 100
19034: ST_TO_ADDR
// end ;
19035: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19036: LD_EXP 46
19040: PUSH
19041: LD_EXP 70
19045: AND
19046: IFFALSE 19285
19048: GO 19050
19050: DISABLE
19051: LD_INT 0
19053: PPUSH
19054: PPUSH
19055: PPUSH
// begin tmp := [ ] ;
19056: LD_ADDR_VAR 0 3
19060: PUSH
19061: EMPTY
19062: ST_TO_ADDR
// for i := 1 to 6 do
19063: LD_ADDR_VAR 0 1
19067: PUSH
19068: DOUBLE
19069: LD_INT 1
19071: DEC
19072: ST_TO_ADDR
19073: LD_INT 6
19075: PUSH
19076: FOR_TO
19077: IFFALSE 19182
// begin uc_nation := nation_nature ;
19079: LD_ADDR_OWVAR 21
19083: PUSH
19084: LD_INT 0
19086: ST_TO_ADDR
// uc_side := 0 ;
19087: LD_ADDR_OWVAR 20
19091: PUSH
19092: LD_INT 0
19094: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19095: LD_ADDR_OWVAR 29
19099: PUSH
19100: LD_INT 12
19102: PUSH
19103: LD_INT 12
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: ST_TO_ADDR
// hc_agressivity := 20 ;
19110: LD_ADDR_OWVAR 35
19114: PUSH
19115: LD_INT 20
19117: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19118: LD_ADDR_OWVAR 28
19122: PUSH
19123: LD_INT 17
19125: ST_TO_ADDR
// hc_gallery :=  ;
19126: LD_ADDR_OWVAR 33
19130: PUSH
19131: LD_STRING 
19133: ST_TO_ADDR
// hc_name :=  ;
19134: LD_ADDR_OWVAR 26
19138: PUSH
19139: LD_STRING 
19141: ST_TO_ADDR
// un := CreateHuman ;
19142: LD_ADDR_VAR 0 2
19146: PUSH
19147: CALL_OW 44
19151: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19152: LD_VAR 0 2
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: CALL_OW 51
// tmp := tmp ^ un ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_VAR 0 3
19173: PUSH
19174: LD_VAR 0 2
19178: ADD
19179: ST_TO_ADDR
// end ;
19180: GO 19076
19182: POP
19183: POP
// repeat wait ( 0 0$1 ) ;
19184: LD_INT 35
19186: PPUSH
19187: CALL_OW 67
// for un in tmp do
19191: LD_ADDR_VAR 0 2
19195: PUSH
19196: LD_VAR 0 3
19200: PUSH
19201: FOR_IN
19202: IFFALSE 19276
// begin if IsDead ( un ) then
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL_OW 301
19213: IFFALSE 19233
// begin tmp := tmp diff un ;
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_VAR 0 3
19224: PUSH
19225: LD_VAR 0 2
19229: DIFF
19230: ST_TO_ADDR
// continue ;
19231: GO 19201
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19233: LD_VAR 0 2
19237: PPUSH
19238: LD_INT 3
19240: PUSH
19241: LD_INT 22
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PPUSH
19255: CALL_OW 69
19259: PPUSH
19260: LD_VAR 0 2
19264: PPUSH
19265: CALL_OW 74
19269: PPUSH
19270: CALL_OW 115
// end ;
19274: GO 19201
19276: POP
19277: POP
// until not tmp ;
19278: LD_VAR 0 3
19282: NOT
19283: IFFALSE 19184
// end ;
19285: PPOPN 3
19287: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19288: LD_EXP 46
19292: PUSH
19293: LD_EXP 71
19297: AND
19298: IFFALSE 19352
19300: GO 19302
19302: DISABLE
// begin ToLua ( displayTroll(); ) ;
19303: LD_STRING displayTroll();
19305: PPUSH
19306: CALL_OW 559
// wait ( 3 3$00 ) ;
19310: LD_INT 6300
19312: PPUSH
19313: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19317: LD_STRING hideTroll();
19319: PPUSH
19320: CALL_OW 559
// wait ( 1 1$00 ) ;
19324: LD_INT 2100
19326: PPUSH
19327: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19331: LD_STRING displayTroll();
19333: PPUSH
19334: CALL_OW 559
// wait ( 1 1$00 ) ;
19338: LD_INT 2100
19340: PPUSH
19341: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19345: LD_STRING hideTroll();
19347: PPUSH
19348: CALL_OW 559
// end ;
19352: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19353: LD_EXP 46
19357: PUSH
19358: LD_EXP 72
19362: AND
19363: IFFALSE 19426
19365: GO 19367
19367: DISABLE
19368: LD_INT 0
19370: PPUSH
// begin p := 0 ;
19371: LD_ADDR_VAR 0 1
19375: PUSH
19376: LD_INT 0
19378: ST_TO_ADDR
// repeat game_speed := 1 ;
19379: LD_ADDR_OWVAR 65
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19387: LD_INT 35
19389: PPUSH
19390: CALL_OW 67
// p := p + 1 ;
19394: LD_ADDR_VAR 0 1
19398: PUSH
19399: LD_VAR 0 1
19403: PUSH
19404: LD_INT 1
19406: PLUS
19407: ST_TO_ADDR
// until p >= 60 ;
19408: LD_VAR 0 1
19412: PUSH
19413: LD_INT 60
19415: GREATEREQUAL
19416: IFFALSE 19379
// game_speed := 4 ;
19418: LD_ADDR_OWVAR 65
19422: PUSH
19423: LD_INT 4
19425: ST_TO_ADDR
// end ;
19426: PPOPN 1
19428: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19429: LD_EXP 46
19433: PUSH
19434: LD_EXP 73
19438: AND
19439: IFFALSE 19585
19441: GO 19443
19443: DISABLE
19444: LD_INT 0
19446: PPUSH
19447: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19448: LD_ADDR_VAR 0 1
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: LD_OWVAR 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: LD_INT 30
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 30
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PPUSH
19497: CALL_OW 69
19501: ST_TO_ADDR
// if not depot then
19502: LD_VAR 0 1
19506: NOT
19507: IFFALSE 19511
// exit ;
19509: GO 19585
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_VAR 0 1
19520: PUSH
19521: LD_INT 1
19523: PPUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 12
19533: ARRAY
19534: PPUSH
19535: CALL_OW 274
19539: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19540: LD_VAR 0 2
19544: PPUSH
19545: LD_INT 1
19547: PPUSH
19548: LD_INT 0
19550: PPUSH
19551: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_INT 2
19562: PPUSH
19563: LD_INT 0
19565: PPUSH
19566: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19570: LD_VAR 0 2
19574: PPUSH
19575: LD_INT 3
19577: PPUSH
19578: LD_INT 0
19580: PPUSH
19581: CALL_OW 277
// end ;
19585: PPOPN 2
19587: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19588: LD_EXP 46
19592: PUSH
19593: LD_EXP 74
19597: AND
19598: IFFALSE 19695
19600: GO 19602
19602: DISABLE
19603: LD_INT 0
19605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19606: LD_ADDR_VAR 0 1
19610: PUSH
19611: LD_INT 22
19613: PUSH
19614: LD_OWVAR 2
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 21
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 3
19635: PUSH
19636: LD_INT 23
19638: PUSH
19639: LD_INT 0
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 69
19659: ST_TO_ADDR
// if not tmp then
19660: LD_VAR 0 1
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 1
19676: PPUSH
19677: LD_VAR 0 1
19681: PPUSH
19682: CALL_OW 12
19686: ARRAY
19687: PPUSH
19688: LD_INT 200
19690: PPUSH
19691: CALL_OW 234
// end ;
19695: PPOPN 1
19697: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19698: LD_EXP 46
19702: PUSH
19703: LD_EXP 75
19707: AND
19708: IFFALSE 19787
19710: GO 19712
19712: DISABLE
19713: LD_INT 0
19715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19716: LD_ADDR_VAR 0 1
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 21
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// if not tmp then
19752: LD_VAR 0 1
19756: NOT
19757: IFFALSE 19761
// exit ;
19759: GO 19787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19761: LD_VAR 0 1
19765: PUSH
19766: LD_INT 1
19768: PPUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 12
19778: ARRAY
19779: PPUSH
19780: LD_INT 60
19782: PPUSH
19783: CALL_OW 234
// end ;
19787: PPOPN 1
19789: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19790: LD_EXP 46
19794: PUSH
19795: LD_EXP 76
19799: AND
19800: IFFALSE 19899
19802: GO 19804
19804: DISABLE
19805: LD_INT 0
19807: PPUSH
19808: PPUSH
// begin enable ;
19809: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19810: LD_ADDR_VAR 0 1
19814: PUSH
19815: LD_INT 22
19817: PUSH
19818: LD_OWVAR 2
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 61
19829: PUSH
19830: EMPTY
19831: LIST
19832: PUSH
19833: LD_INT 33
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: ST_TO_ADDR
// if not tmp then
19853: LD_VAR 0 1
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 19899
// for i in tmp do
19862: LD_ADDR_VAR 0 2
19866: PUSH
19867: LD_VAR 0 1
19871: PUSH
19872: FOR_IN
19873: IFFALSE 19897
// if IsControledBy ( i ) then
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 312
19884: IFFALSE 19895
// ComUnlink ( i ) ;
19886: LD_VAR 0 2
19890: PPUSH
19891: CALL_OW 136
19895: GO 19872
19897: POP
19898: POP
// end ;
19899: PPOPN 2
19901: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19902: LD_EXP 46
19906: PUSH
19907: LD_EXP 77
19911: AND
19912: IFFALSE 20052
19914: GO 19916
19916: DISABLE
19917: LD_INT 0
19919: PPUSH
19920: PPUSH
// begin ToLua ( displayPowell(); ) ;
19921: LD_STRING displayPowell();
19923: PPUSH
19924: CALL_OW 559
// uc_side := 0 ;
19928: LD_ADDR_OWVAR 20
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// uc_nation := 2 ;
19936: LD_ADDR_OWVAR 21
19940: PUSH
19941: LD_INT 2
19943: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19944: LD_ADDR_OWVAR 37
19948: PUSH
19949: LD_INT 14
19951: ST_TO_ADDR
// vc_engine := engine_siberite ;
19952: LD_ADDR_OWVAR 39
19956: PUSH
19957: LD_INT 3
19959: ST_TO_ADDR
// vc_control := control_apeman ;
19960: LD_ADDR_OWVAR 38
19964: PUSH
19965: LD_INT 5
19967: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19968: LD_ADDR_OWVAR 40
19972: PUSH
19973: LD_INT 29
19975: ST_TO_ADDR
// un := CreateVehicle ;
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: CALL_OW 45
19985: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19986: LD_VAR 0 2
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19998: LD_INT 35
20000: PPUSH
20001: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20005: LD_VAR 0 2
20009: PPUSH
20010: LD_INT 22
20012: PUSH
20013: LD_OWVAR 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: PPUSH
20027: LD_VAR 0 2
20031: PPUSH
20032: CALL_OW 74
20036: PPUSH
20037: CALL_OW 115
// until IsDead ( un ) ;
20041: LD_VAR 0 2
20045: PPUSH
20046: CALL_OW 301
20050: IFFALSE 19998
// end ;
20052: PPOPN 2
20054: END
// every 0 0$1 trigger StreamModeActive and sStu do
20055: LD_EXP 46
20059: PUSH
20060: LD_EXP 85
20064: AND
20065: IFFALSE 20081
20067: GO 20069
20069: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20070: LD_STRING displayStucuk();
20072: PPUSH
20073: CALL_OW 559
// ResetFog ;
20077: CALL_OW 335
// end ;
20081: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20082: LD_EXP 46
20086: PUSH
20087: LD_EXP 78
20091: AND
20092: IFFALSE 20233
20094: GO 20096
20096: DISABLE
20097: LD_INT 0
20099: PPUSH
20100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20101: LD_ADDR_VAR 0 2
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_OWVAR 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 21
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PPUSH
20132: CALL_OW 69
20136: ST_TO_ADDR
// if not tmp then
20137: LD_VAR 0 2
20141: NOT
20142: IFFALSE 20146
// exit ;
20144: GO 20233
// un := tmp [ rand ( 1 , tmp ) ] ;
20146: LD_ADDR_VAR 0 1
20150: PUSH
20151: LD_VAR 0 2
20155: PUSH
20156: LD_INT 1
20158: PPUSH
20159: LD_VAR 0 2
20163: PPUSH
20164: CALL_OW 12
20168: ARRAY
20169: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20170: LD_VAR 0 1
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20182: LD_VAR 0 1
20186: PPUSH
20187: LD_OWVAR 3
20191: PUSH
20192: LD_VAR 0 1
20196: DIFF
20197: PPUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 74
20207: PPUSH
20208: CALL_OW 115
// wait ( 0 0$20 ) ;
20212: LD_INT 700
20214: PPUSH
20215: CALL_OW 67
// SetSide ( un , your_side ) ;
20219: LD_VAR 0 1
20223: PPUSH
20224: LD_OWVAR 2
20228: PPUSH
20229: CALL_OW 235
// end ;
20233: PPOPN 2
20235: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20236: LD_EXP 46
20240: PUSH
20241: LD_EXP 79
20245: AND
20246: IFFALSE 20352
20248: GO 20250
20250: DISABLE
20251: LD_INT 0
20253: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 30
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 30
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// if not depot then
20308: LD_VAR 0 1
20312: NOT
20313: IFFALSE 20317
// exit ;
20315: GO 20352
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20317: LD_VAR 0 1
20321: PUSH
20322: LD_INT 1
20324: ARRAY
20325: PPUSH
20326: CALL_OW 250
20330: PPUSH
20331: LD_VAR 0 1
20335: PUSH
20336: LD_INT 1
20338: ARRAY
20339: PPUSH
20340: CALL_OW 251
20344: PPUSH
20345: LD_INT 70
20347: PPUSH
20348: CALL_OW 495
// end ;
20352: PPOPN 1
20354: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20355: LD_EXP 46
20359: PUSH
20360: LD_EXP 80
20364: AND
20365: IFFALSE 20576
20367: GO 20369
20369: DISABLE
20370: LD_INT 0
20372: PPUSH
20373: PPUSH
20374: PPUSH
20375: PPUSH
20376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20377: LD_ADDR_VAR 0 5
20381: PUSH
20382: LD_INT 22
20384: PUSH
20385: LD_OWVAR 2
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 21
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PPUSH
20408: CALL_OW 69
20412: ST_TO_ADDR
// if not tmp then
20413: LD_VAR 0 5
20417: NOT
20418: IFFALSE 20422
// exit ;
20420: GO 20576
// for i in tmp do
20422: LD_ADDR_VAR 0 1
20426: PUSH
20427: LD_VAR 0 5
20431: PUSH
20432: FOR_IN
20433: IFFALSE 20574
// begin d := rand ( 0 , 5 ) ;
20435: LD_ADDR_VAR 0 4
20439: PUSH
20440: LD_INT 0
20442: PPUSH
20443: LD_INT 5
20445: PPUSH
20446: CALL_OW 12
20450: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20451: LD_ADDR_VAR 0 2
20455: PUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 250
20465: PPUSH
20466: LD_VAR 0 4
20470: PPUSH
20471: LD_INT 3
20473: PPUSH
20474: LD_INT 12
20476: PPUSH
20477: CALL_OW 12
20481: PPUSH
20482: CALL_OW 272
20486: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20487: LD_ADDR_VAR 0 3
20491: PUSH
20492: LD_VAR 0 1
20496: PPUSH
20497: CALL_OW 251
20501: PPUSH
20502: LD_VAR 0 4
20506: PPUSH
20507: LD_INT 3
20509: PPUSH
20510: LD_INT 12
20512: PPUSH
20513: CALL_OW 12
20517: PPUSH
20518: CALL_OW 273
20522: ST_TO_ADDR
// if ValidHex ( x , y ) then
20523: LD_VAR 0 2
20527: PPUSH
20528: LD_VAR 0 3
20532: PPUSH
20533: CALL_OW 488
20537: IFFALSE 20572
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20539: LD_VAR 0 1
20543: PPUSH
20544: LD_VAR 0 2
20548: PPUSH
20549: LD_VAR 0 3
20553: PPUSH
20554: LD_INT 3
20556: PPUSH
20557: LD_INT 6
20559: PPUSH
20560: CALL_OW 12
20564: PPUSH
20565: LD_INT 1
20567: PPUSH
20568: CALL_OW 483
// end ;
20572: GO 20432
20574: POP
20575: POP
// end ;
20576: PPOPN 5
20578: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20579: LD_EXP 46
20583: PUSH
20584: LD_EXP 81
20588: AND
20589: IFFALSE 20683
20591: GO 20593
20593: DISABLE
20594: LD_INT 0
20596: PPUSH
20597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20598: LD_ADDR_VAR 0 2
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_OWVAR 2
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 32
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: PPUSH
20640: CALL_OW 69
20644: ST_TO_ADDR
// if not tmp then
20645: LD_VAR 0 2
20649: NOT
20650: IFFALSE 20654
// exit ;
20652: GO 20683
// for i in tmp do
20654: LD_ADDR_VAR 0 1
20658: PUSH
20659: LD_VAR 0 2
20663: PUSH
20664: FOR_IN
20665: IFFALSE 20681
// SetFuel ( i , 0 ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_INT 0
20674: PPUSH
20675: CALL_OW 240
20679: GO 20664
20681: POP
20682: POP
// end ;
20683: PPOPN 2
20685: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20686: LD_EXP 46
20690: PUSH
20691: LD_EXP 82
20695: AND
20696: IFFALSE 20762
20698: GO 20700
20700: DISABLE
20701: LD_INT 0
20703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20704: LD_ADDR_VAR 0 1
20708: PUSH
20709: LD_INT 22
20711: PUSH
20712: LD_OWVAR 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 30
20723: PUSH
20724: LD_INT 29
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PPUSH
20735: CALL_OW 69
20739: ST_TO_ADDR
// if not tmp then
20740: LD_VAR 0 1
20744: NOT
20745: IFFALSE 20749
// exit ;
20747: GO 20762
// DestroyUnit ( tmp [ 1 ] ) ;
20749: LD_VAR 0 1
20753: PUSH
20754: LD_INT 1
20756: ARRAY
20757: PPUSH
20758: CALL_OW 65
// end ;
20762: PPOPN 1
20764: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20765: LD_EXP 46
20769: PUSH
20770: LD_EXP 84
20774: AND
20775: IFFALSE 20904
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
// begin uc_side := 0 ;
20783: LD_ADDR_OWVAR 20
20787: PUSH
20788: LD_INT 0
20790: ST_TO_ADDR
// uc_nation := nation_arabian ;
20791: LD_ADDR_OWVAR 21
20795: PUSH
20796: LD_INT 2
20798: ST_TO_ADDR
// hc_gallery :=  ;
20799: LD_ADDR_OWVAR 33
20803: PUSH
20804: LD_STRING 
20806: ST_TO_ADDR
// hc_name :=  ;
20807: LD_ADDR_OWVAR 26
20811: PUSH
20812: LD_STRING 
20814: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20815: LD_INT 1
20817: PPUSH
20818: LD_INT 11
20820: PPUSH
20821: LD_INT 10
20823: PPUSH
20824: CALL_OW 380
// un := CreateHuman ;
20828: LD_ADDR_VAR 0 1
20832: PUSH
20833: CALL_OW 44
20837: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20838: LD_VAR 0 1
20842: PPUSH
20843: LD_INT 1
20845: PPUSH
20846: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20850: LD_INT 35
20852: PPUSH
20853: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_INT 22
20864: PUSH
20865: LD_OWVAR 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PPUSH
20874: CALL_OW 69
20878: PPUSH
20879: LD_VAR 0 1
20883: PPUSH
20884: CALL_OW 74
20888: PPUSH
20889: CALL_OW 115
// until IsDead ( un ) ;
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL_OW 301
20902: IFFALSE 20850
// end ;
20904: PPOPN 1
20906: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20907: LD_EXP 46
20911: PUSH
20912: LD_EXP 86
20916: AND
20917: IFFALSE 20929
20919: GO 20921
20921: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20922: LD_STRING earthquake(getX(game), 0, 32)
20924: PPUSH
20925: CALL_OW 559
20929: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20930: LD_EXP 46
20934: PUSH
20935: LD_EXP 87
20939: AND
20940: IFFALSE 21031
20942: GO 20944
20944: DISABLE
20945: LD_INT 0
20947: PPUSH
// begin enable ;
20948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20949: LD_ADDR_VAR 0 1
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_OWVAR 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 21
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 33
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: ST_TO_ADDR
// if not tmp then
20996: LD_VAR 0 1
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21005: LD_VAR 0 1
21009: PUSH
21010: LD_INT 1
21012: PPUSH
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 12
21022: ARRAY
21023: PPUSH
21024: LD_INT 1
21026: PPUSH
21027: CALL_OW 234
// end ;
21031: PPOPN 1
21033: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21034: LD_EXP 46
21038: PUSH
21039: LD_EXP 88
21043: AND
21044: IFFALSE 21185
21046: GO 21048
21048: DISABLE
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21054: LD_ADDR_VAR 0 3
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_OWVAR 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 25
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PPUSH
21085: CALL_OW 69
21089: ST_TO_ADDR
// if not tmp then
21090: LD_VAR 0 3
21094: NOT
21095: IFFALSE 21099
// exit ;
21097: GO 21185
// un := tmp [ rand ( 1 , tmp ) ] ;
21099: LD_ADDR_VAR 0 2
21103: PUSH
21104: LD_VAR 0 3
21108: PUSH
21109: LD_INT 1
21111: PPUSH
21112: LD_VAR 0 3
21116: PPUSH
21117: CALL_OW 12
21121: ARRAY
21122: ST_TO_ADDR
// if Crawls ( un ) then
21123: LD_VAR 0 2
21127: PPUSH
21128: CALL_OW 318
21132: IFFALSE 21143
// ComWalk ( un ) ;
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21143: LD_VAR 0 2
21147: PPUSH
21148: LD_INT 9
21150: PPUSH
21151: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21155: LD_INT 28
21157: PPUSH
21158: LD_OWVAR 2
21162: PPUSH
21163: LD_INT 2
21165: PPUSH
21166: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21170: LD_INT 29
21172: PPUSH
21173: LD_OWVAR 2
21177: PPUSH
21178: LD_INT 2
21180: PPUSH
21181: CALL_OW 322
// end ;
21185: PPOPN 3
21187: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21188: LD_EXP 46
21192: PUSH
21193: LD_EXP 89
21197: AND
21198: IFFALSE 21309
21200: GO 21202
21202: DISABLE
21203: LD_INT 0
21205: PPUSH
21206: PPUSH
21207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21208: LD_ADDR_VAR 0 3
21212: PUSH
21213: LD_INT 22
21215: PUSH
21216: LD_OWVAR 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 25
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PPUSH
21239: CALL_OW 69
21243: ST_TO_ADDR
// if not tmp then
21244: LD_VAR 0 3
21248: NOT
21249: IFFALSE 21253
// exit ;
21251: GO 21309
// un := tmp [ rand ( 1 , tmp ) ] ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_VAR 0 3
21262: PUSH
21263: LD_INT 1
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 12
21275: ARRAY
21276: ST_TO_ADDR
// if Crawls ( un ) then
21277: LD_VAR 0 2
21281: PPUSH
21282: CALL_OW 318
21286: IFFALSE 21297
// ComWalk ( un ) ;
21288: LD_VAR 0 2
21292: PPUSH
21293: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21297: LD_VAR 0 2
21301: PPUSH
21302: LD_INT 8
21304: PPUSH
21305: CALL_OW 336
// end ;
21309: PPOPN 3
21311: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21312: LD_EXP 46
21316: PUSH
21317: LD_EXP 90
21321: AND
21322: IFFALSE 21466
21324: GO 21326
21326: DISABLE
21327: LD_INT 0
21329: PPUSH
21330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21331: LD_ADDR_VAR 0 2
21335: PUSH
21336: LD_INT 22
21338: PUSH
21339: LD_OWVAR 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 21
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 34
21363: PUSH
21364: LD_INT 12
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 34
21373: PUSH
21374: LD_INT 51
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 34
21383: PUSH
21384: LD_INT 32
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: PPUSH
21402: CALL_OW 69
21406: ST_TO_ADDR
// if not tmp then
21407: LD_VAR 0 2
21411: NOT
21412: IFFALSE 21416
// exit ;
21414: GO 21466
// for i in tmp do
21416: LD_ADDR_VAR 0 1
21420: PUSH
21421: LD_VAR 0 2
21425: PUSH
21426: FOR_IN
21427: IFFALSE 21464
// if GetCargo ( i , mat_artifact ) = 0 then
21429: LD_VAR 0 1
21433: PPUSH
21434: LD_INT 4
21436: PPUSH
21437: CALL_OW 289
21441: PUSH
21442: LD_INT 0
21444: EQUAL
21445: IFFALSE 21462
// SetCargo ( i , mat_siberit , 100 ) ;
21447: LD_VAR 0 1
21451: PPUSH
21452: LD_INT 3
21454: PPUSH
21455: LD_INT 100
21457: PPUSH
21458: CALL_OW 290
21462: GO 21426
21464: POP
21465: POP
// end ;
21466: PPOPN 2
21468: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21469: LD_EXP 46
21473: PUSH
21474: LD_EXP 91
21478: AND
21479: IFFALSE 21662
21481: GO 21483
21483: DISABLE
21484: LD_INT 0
21486: PPUSH
21487: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21488: LD_ADDR_VAR 0 2
21492: PUSH
21493: LD_INT 22
21495: PUSH
21496: LD_OWVAR 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PPUSH
21505: CALL_OW 69
21509: ST_TO_ADDR
// if not tmp then
21510: LD_VAR 0 2
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21662
// for i := 1 to 2 do
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: DOUBLE
21525: LD_INT 1
21527: DEC
21528: ST_TO_ADDR
21529: LD_INT 2
21531: PUSH
21532: FOR_TO
21533: IFFALSE 21660
// begin uc_side := your_side ;
21535: LD_ADDR_OWVAR 20
21539: PUSH
21540: LD_OWVAR 2
21544: ST_TO_ADDR
// uc_nation := nation_american ;
21545: LD_ADDR_OWVAR 21
21549: PUSH
21550: LD_INT 1
21552: ST_TO_ADDR
// vc_chassis := us_morphling ;
21553: LD_ADDR_OWVAR 37
21557: PUSH
21558: LD_INT 5
21560: ST_TO_ADDR
// vc_engine := engine_siberite ;
21561: LD_ADDR_OWVAR 39
21565: PUSH
21566: LD_INT 3
21568: ST_TO_ADDR
// vc_control := control_computer ;
21569: LD_ADDR_OWVAR 38
21573: PUSH
21574: LD_INT 3
21576: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21577: LD_ADDR_OWVAR 40
21581: PUSH
21582: LD_INT 10
21584: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21585: LD_VAR 0 2
21589: PUSH
21590: LD_INT 1
21592: ARRAY
21593: PPUSH
21594: CALL_OW 310
21598: NOT
21599: IFFALSE 21646
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21601: CALL_OW 45
21605: PPUSH
21606: LD_VAR 0 2
21610: PUSH
21611: LD_INT 1
21613: ARRAY
21614: PPUSH
21615: CALL_OW 250
21619: PPUSH
21620: LD_VAR 0 2
21624: PUSH
21625: LD_INT 1
21627: ARRAY
21628: PPUSH
21629: CALL_OW 251
21633: PPUSH
21634: LD_INT 12
21636: PPUSH
21637: LD_INT 1
21639: PPUSH
21640: CALL_OW 50
21644: GO 21658
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21646: CALL_OW 45
21650: PPUSH
21651: LD_INT 1
21653: PPUSH
21654: CALL_OW 51
// end ;
21658: GO 21532
21660: POP
21661: POP
// end ;
21662: PPOPN 2
21664: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21665: LD_EXP 46
21669: PUSH
21670: LD_EXP 92
21674: AND
21675: IFFALSE 21897
21677: GO 21679
21679: DISABLE
21680: LD_INT 0
21682: PPUSH
21683: PPUSH
21684: PPUSH
21685: PPUSH
21686: PPUSH
21687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21688: LD_ADDR_VAR 0 6
21692: PUSH
21693: LD_INT 22
21695: PUSH
21696: LD_OWVAR 2
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 21
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 3
21717: PUSH
21718: LD_INT 23
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: PPUSH
21737: CALL_OW 69
21741: ST_TO_ADDR
// if not tmp then
21742: LD_VAR 0 6
21746: NOT
21747: IFFALSE 21751
// exit ;
21749: GO 21897
// s1 := rand ( 1 , 4 ) ;
21751: LD_ADDR_VAR 0 2
21755: PUSH
21756: LD_INT 1
21758: PPUSH
21759: LD_INT 4
21761: PPUSH
21762: CALL_OW 12
21766: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21767: LD_ADDR_VAR 0 4
21771: PUSH
21772: LD_VAR 0 6
21776: PUSH
21777: LD_INT 1
21779: ARRAY
21780: PPUSH
21781: LD_VAR 0 2
21785: PPUSH
21786: CALL_OW 259
21790: ST_TO_ADDR
// if s1 = 1 then
21791: LD_VAR 0 2
21795: PUSH
21796: LD_INT 1
21798: EQUAL
21799: IFFALSE 21819
// s2 := rand ( 2 , 4 ) else
21801: LD_ADDR_VAR 0 3
21805: PUSH
21806: LD_INT 2
21808: PPUSH
21809: LD_INT 4
21811: PPUSH
21812: CALL_OW 12
21816: ST_TO_ADDR
21817: GO 21827
// s2 := 1 ;
21819: LD_ADDR_VAR 0 3
21823: PUSH
21824: LD_INT 1
21826: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21827: LD_ADDR_VAR 0 5
21831: PUSH
21832: LD_VAR 0 6
21836: PUSH
21837: LD_INT 1
21839: ARRAY
21840: PPUSH
21841: LD_VAR 0 3
21845: PPUSH
21846: CALL_OW 259
21850: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21851: LD_VAR 0 6
21855: PUSH
21856: LD_INT 1
21858: ARRAY
21859: PPUSH
21860: LD_VAR 0 2
21864: PPUSH
21865: LD_VAR 0 5
21869: PPUSH
21870: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21874: LD_VAR 0 6
21878: PUSH
21879: LD_INT 1
21881: ARRAY
21882: PPUSH
21883: LD_VAR 0 3
21887: PPUSH
21888: LD_VAR 0 4
21892: PPUSH
21893: CALL_OW 237
// end ;
21897: PPOPN 6
21899: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21900: LD_EXP 46
21904: PUSH
21905: LD_EXP 93
21909: AND
21910: IFFALSE 21989
21912: GO 21914
21914: DISABLE
21915: LD_INT 0
21917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21918: LD_ADDR_VAR 0 1
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_OWVAR 2
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 30
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 69
21953: ST_TO_ADDR
// if not tmp then
21954: LD_VAR 0 1
21958: NOT
21959: IFFALSE 21963
// exit ;
21961: GO 21989
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21963: LD_VAR 0 1
21967: PUSH
21968: LD_INT 1
21970: PPUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 12
21980: ARRAY
21981: PPUSH
21982: LD_INT 1
21984: PPUSH
21985: CALL_OW 234
// end ;
21989: PPOPN 1
21991: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21992: LD_EXP 46
21996: PUSH
21997: LD_EXP 94
22001: AND
22002: IFFALSE 22114
22004: GO 22006
22006: DISABLE
22007: LD_INT 0
22009: PPUSH
22010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: LD_INT 22
22018: PUSH
22019: LD_OWVAR 2
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: LD_INT 30
22033: PUSH
22034: LD_INT 27
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 30
22043: PUSH
22044: LD_INT 26
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 30
22053: PUSH
22054: LD_INT 28
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PPUSH
22071: CALL_OW 69
22075: ST_TO_ADDR
// if not tmp then
22076: LD_VAR 0 2
22080: NOT
22081: IFFALSE 22085
// exit ;
22083: GO 22114
// for i in tmp do
22085: LD_ADDR_VAR 0 1
22089: PUSH
22090: LD_VAR 0 2
22094: PUSH
22095: FOR_IN
22096: IFFALSE 22112
// SetLives ( i , 1 ) ;
22098: LD_VAR 0 1
22102: PPUSH
22103: LD_INT 1
22105: PPUSH
22106: CALL_OW 234
22110: GO 22095
22112: POP
22113: POP
// end ;
22114: PPOPN 2
22116: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22117: LD_EXP 46
22121: PUSH
22122: LD_EXP 95
22126: AND
22127: IFFALSE 22414
22129: GO 22131
22131: DISABLE
22132: LD_INT 0
22134: PPUSH
22135: PPUSH
22136: PPUSH
// begin i := rand ( 1 , 7 ) ;
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_INT 1
22144: PPUSH
22145: LD_INT 7
22147: PPUSH
22148: CALL_OW 12
22152: ST_TO_ADDR
// case i of 1 :
22153: LD_VAR 0 1
22157: PUSH
22158: LD_INT 1
22160: DOUBLE
22161: EQUAL
22162: IFTRUE 22166
22164: GO 22176
22166: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22167: LD_STRING earthquake(getX(game), 0, 32)
22169: PPUSH
22170: CALL_OW 559
22174: GO 22414
22176: LD_INT 2
22178: DOUBLE
22179: EQUAL
22180: IFTRUE 22184
22182: GO 22198
22184: POP
// begin ToLua ( displayStucuk(); ) ;
22185: LD_STRING displayStucuk();
22187: PPUSH
22188: CALL_OW 559
// ResetFog ;
22192: CALL_OW 335
// end ; 3 :
22196: GO 22414
22198: LD_INT 3
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22310
22206: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22207: LD_ADDR_VAR 0 2
22211: PUSH
22212: LD_INT 22
22214: PUSH
22215: LD_OWVAR 2
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL_OW 69
22242: ST_TO_ADDR
// if not tmp then
22243: LD_VAR 0 2
22247: NOT
22248: IFFALSE 22252
// exit ;
22250: GO 22414
// un := tmp [ rand ( 1 , tmp ) ] ;
22252: LD_ADDR_VAR 0 3
22256: PUSH
22257: LD_VAR 0 2
22261: PUSH
22262: LD_INT 1
22264: PPUSH
22265: LD_VAR 0 2
22269: PPUSH
22270: CALL_OW 12
22274: ARRAY
22275: ST_TO_ADDR
// if Crawls ( un ) then
22276: LD_VAR 0 3
22280: PPUSH
22281: CALL_OW 318
22285: IFFALSE 22296
// ComWalk ( un ) ;
22287: LD_VAR 0 3
22291: PPUSH
22292: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22296: LD_VAR 0 3
22300: PPUSH
22301: LD_INT 8
22303: PPUSH
22304: CALL_OW 336
// end ; 4 :
22308: GO 22414
22310: LD_INT 4
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22392
22318: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22319: LD_ADDR_VAR 0 2
22323: PUSH
22324: LD_INT 22
22326: PUSH
22327: LD_OWVAR 2
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 30
22338: PUSH
22339: LD_INT 29
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PPUSH
22350: CALL_OW 69
22354: ST_TO_ADDR
// if not tmp then
22355: LD_VAR 0 2
22359: NOT
22360: IFFALSE 22364
// exit ;
22362: GO 22414
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22364: LD_VAR 0 2
22368: PUSH
22369: LD_INT 1
22371: ARRAY
22372: PPUSH
22373: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22377: LD_VAR 0 2
22381: PUSH
22382: LD_INT 1
22384: ARRAY
22385: PPUSH
22386: CALL_OW 65
// end ; 5 .. 7 :
22390: GO 22414
22392: LD_INT 5
22394: DOUBLE
22395: GREATEREQUAL
22396: IFFALSE 22404
22398: LD_INT 7
22400: DOUBLE
22401: LESSEQUAL
22402: IFTRUE 22406
22404: GO 22413
22406: POP
// StreamSibBomb ; end ;
22407: CALL 18651 0 0
22411: GO 22414
22413: POP
// end ;
22414: PPOPN 3
22416: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22417: LD_EXP 46
22421: PUSH
22422: LD_EXP 96
22426: AND
22427: IFFALSE 22583
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
22436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_INT 81
22444: PUSH
22445: LD_OWVAR 2
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 21
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 21
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PPUSH
22486: CALL_OW 69
22490: ST_TO_ADDR
// if not tmp then
22491: LD_VAR 0 2
22495: NOT
22496: IFFALSE 22500
// exit ;
22498: GO 22583
// p := 0 ;
22500: LD_ADDR_VAR 0 3
22504: PUSH
22505: LD_INT 0
22507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22508: LD_INT 35
22510: PPUSH
22511: CALL_OW 67
// p := p + 1 ;
22515: LD_ADDR_VAR 0 3
22519: PUSH
22520: LD_VAR 0 3
22524: PUSH
22525: LD_INT 1
22527: PLUS
22528: ST_TO_ADDR
// for i in tmp do
22529: LD_ADDR_VAR 0 1
22533: PUSH
22534: LD_VAR 0 2
22538: PUSH
22539: FOR_IN
22540: IFFALSE 22571
// if GetLives ( i ) < 1000 then
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 256
22551: PUSH
22552: LD_INT 1000
22554: LESS
22555: IFFALSE 22569
// SetLives ( i , 1000 ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_INT 1000
22564: PPUSH
22565: CALL_OW 234
22569: GO 22539
22571: POP
22572: POP
// until p > 20 ;
22573: LD_VAR 0 3
22577: PUSH
22578: LD_INT 20
22580: GREATER
22581: IFFALSE 22508
// end ;
22583: PPOPN 3
22585: END
// every 0 0$1 trigger StreamModeActive and sTime do
22586: LD_EXP 46
22590: PUSH
22591: LD_EXP 97
22595: AND
22596: IFFALSE 22631
22598: GO 22600
22600: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22601: LD_INT 28
22603: PPUSH
22604: LD_OWVAR 2
22608: PPUSH
22609: LD_INT 2
22611: PPUSH
22612: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22616: LD_INT 30
22618: PPUSH
22619: LD_OWVAR 2
22623: PPUSH
22624: LD_INT 2
22626: PPUSH
22627: CALL_OW 322
// end ;
22631: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22632: LD_EXP 46
22636: PUSH
22637: LD_EXP 98
22641: AND
22642: IFFALSE 22763
22644: GO 22646
22646: DISABLE
22647: LD_INT 0
22649: PPUSH
22650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22651: LD_ADDR_VAR 0 2
22655: PUSH
22656: LD_INT 22
22658: PUSH
22659: LD_OWVAR 2
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 3
22680: PUSH
22681: LD_INT 23
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: PPUSH
22700: CALL_OW 69
22704: ST_TO_ADDR
// if not tmp then
22705: LD_VAR 0 2
22709: NOT
22710: IFFALSE 22714
// exit ;
22712: GO 22763
// for i in tmp do
22714: LD_ADDR_VAR 0 1
22718: PUSH
22719: LD_VAR 0 2
22723: PUSH
22724: FOR_IN
22725: IFFALSE 22761
// begin if Crawls ( i ) then
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 318
22736: IFFALSE 22747
// ComWalk ( i ) ;
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 138
// SetClass ( i , 2 ) ;
22747: LD_VAR 0 1
22751: PPUSH
22752: LD_INT 2
22754: PPUSH
22755: CALL_OW 336
// end ;
22759: GO 22724
22761: POP
22762: POP
// end ;
22763: PPOPN 2
22765: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22766: LD_EXP 46
22770: PUSH
22771: LD_EXP 99
22775: AND
22776: IFFALSE 23064
22778: GO 22780
22780: DISABLE
22781: LD_INT 0
22783: PPUSH
22784: PPUSH
22785: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22786: LD_OWVAR 2
22790: PPUSH
22791: LD_INT 9
22793: PPUSH
22794: LD_INT 1
22796: PPUSH
22797: LD_INT 1
22799: PPUSH
22800: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22804: LD_INT 9
22806: PPUSH
22807: LD_OWVAR 2
22811: PPUSH
22812: CALL_OW 343
// uc_side := 9 ;
22816: LD_ADDR_OWVAR 20
22820: PUSH
22821: LD_INT 9
22823: ST_TO_ADDR
// uc_nation := 2 ;
22824: LD_ADDR_OWVAR 21
22828: PUSH
22829: LD_INT 2
22831: ST_TO_ADDR
// hc_name := Dark Warrior ;
22832: LD_ADDR_OWVAR 26
22836: PUSH
22837: LD_STRING Dark Warrior
22839: ST_TO_ADDR
// hc_gallery :=  ;
22840: LD_ADDR_OWVAR 33
22844: PUSH
22845: LD_STRING 
22847: ST_TO_ADDR
// hc_noskilllimit := true ;
22848: LD_ADDR_OWVAR 76
22852: PUSH
22853: LD_INT 1
22855: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22856: LD_ADDR_OWVAR 31
22860: PUSH
22861: LD_INT 30
22863: PUSH
22864: LD_INT 30
22866: PUSH
22867: LD_INT 30
22869: PUSH
22870: LD_INT 30
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: ST_TO_ADDR
// un := CreateHuman ;
22879: LD_ADDR_VAR 0 3
22883: PUSH
22884: CALL_OW 44
22888: ST_TO_ADDR
// hc_noskilllimit := false ;
22889: LD_ADDR_OWVAR 76
22893: PUSH
22894: LD_INT 0
22896: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22897: LD_VAR 0 3
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 51
// ToLua ( playRanger() ) ;
22909: LD_STRING playRanger()
22911: PPUSH
22912: CALL_OW 559
// p := 0 ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_INT 0
22923: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22924: LD_INT 35
22926: PPUSH
22927: CALL_OW 67
// p := p + 1 ;
22931: LD_ADDR_VAR 0 2
22935: PUSH
22936: LD_VAR 0 2
22940: PUSH
22941: LD_INT 1
22943: PLUS
22944: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22945: LD_VAR 0 3
22949: PPUSH
22950: CALL_OW 256
22954: PUSH
22955: LD_INT 1000
22957: LESS
22958: IFFALSE 22972
// SetLives ( un , 1000 ) ;
22960: LD_VAR 0 3
22964: PPUSH
22965: LD_INT 1000
22967: PPUSH
22968: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22972: LD_VAR 0 3
22976: PPUSH
22977: LD_INT 81
22979: PUSH
22980: LD_OWVAR 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 91
22991: PUSH
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 30
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PPUSH
23009: CALL_OW 69
23013: PPUSH
23014: LD_VAR 0 3
23018: PPUSH
23019: CALL_OW 74
23023: PPUSH
23024: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23028: LD_VAR 0 2
23032: PUSH
23033: LD_INT 80
23035: GREATER
23036: PUSH
23037: LD_VAR 0 3
23041: PPUSH
23042: CALL_OW 301
23046: OR
23047: IFFALSE 22924
// if un then
23049: LD_VAR 0 3
23053: IFFALSE 23064
// RemoveUnit ( un ) ;
23055: LD_VAR 0 3
23059: PPUSH
23060: CALL_OW 64
// end ;
23064: PPOPN 3
23066: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23067: LD_EXP 100
23071: IFFALSE 23187
23073: GO 23075
23075: DISABLE
23076: LD_INT 0
23078: PPUSH
23079: PPUSH
23080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 81
23088: PUSH
23089: LD_OWVAR 2
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 21
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PPUSH
23112: CALL_OW 69
23116: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23117: LD_STRING playComputer()
23119: PPUSH
23120: CALL_OW 559
// if not tmp then
23124: LD_VAR 0 2
23128: NOT
23129: IFFALSE 23133
// exit ;
23131: GO 23187
// for i in tmp do
23133: LD_ADDR_VAR 0 1
23137: PUSH
23138: LD_VAR 0 2
23142: PUSH
23143: FOR_IN
23144: IFFALSE 23185
// for j := 1 to 4 do
23146: LD_ADDR_VAR 0 3
23150: PUSH
23151: DOUBLE
23152: LD_INT 1
23154: DEC
23155: ST_TO_ADDR
23156: LD_INT 4
23158: PUSH
23159: FOR_TO
23160: IFFALSE 23181
// SetSkill ( i , j , 10 ) ;
23162: LD_VAR 0 1
23166: PPUSH
23167: LD_VAR 0 3
23171: PPUSH
23172: LD_INT 10
23174: PPUSH
23175: CALL_OW 237
23179: GO 23159
23181: POP
23182: POP
23183: GO 23143
23185: POP
23186: POP
// end ;
23187: PPOPN 3
23189: END
// every 0 0$1 trigger s30 do var i , tmp ;
23190: LD_EXP 101
23194: IFFALSE 23263
23196: GO 23198
23198: DISABLE
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23203: LD_ADDR_VAR 0 2
23207: PUSH
23208: LD_INT 22
23210: PUSH
23211: LD_OWVAR 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: ST_TO_ADDR
// if not tmp then
23225: LD_VAR 0 2
23229: NOT
23230: IFFALSE 23234
// exit ;
23232: GO 23263
// for i in tmp do
23234: LD_ADDR_VAR 0 1
23238: PUSH
23239: LD_VAR 0 2
23243: PUSH
23244: FOR_IN
23245: IFFALSE 23261
// SetLives ( i , 300 ) ;
23247: LD_VAR 0 1
23251: PPUSH
23252: LD_INT 300
23254: PPUSH
23255: CALL_OW 234
23259: GO 23244
23261: POP
23262: POP
// end ;
23263: PPOPN 2
23265: END
// every 0 0$1 trigger s60 do var i , tmp ;
23266: LD_EXP 102
23270: IFFALSE 23339
23272: GO 23274
23274: DISABLE
23275: LD_INT 0
23277: PPUSH
23278: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23279: LD_ADDR_VAR 0 2
23283: PUSH
23284: LD_INT 22
23286: PUSH
23287: LD_OWVAR 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PPUSH
23296: CALL_OW 69
23300: ST_TO_ADDR
// if not tmp then
23301: LD_VAR 0 2
23305: NOT
23306: IFFALSE 23310
// exit ;
23308: GO 23339
// for i in tmp do
23310: LD_ADDR_VAR 0 1
23314: PUSH
23315: LD_VAR 0 2
23319: PUSH
23320: FOR_IN
23321: IFFALSE 23337
// SetLives ( i , 600 ) ;
23323: LD_VAR 0 1
23327: PPUSH
23328: LD_INT 600
23330: PPUSH
23331: CALL_OW 234
23335: GO 23320
23337: POP
23338: POP
// end ;
23339: PPOPN 2
23341: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23342: LD_INT 0
23344: PPUSH
// case cmd of 301 :
23345: LD_VAR 0 1
23349: PUSH
23350: LD_INT 301
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23390
23358: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23359: LD_VAR 0 6
23363: PPUSH
23364: LD_VAR 0 7
23368: PPUSH
23369: LD_VAR 0 8
23373: PPUSH
23374: LD_VAR 0 4
23378: PPUSH
23379: LD_VAR 0 5
23383: PPUSH
23384: CALL 24591 0 5
23388: GO 23511
23390: LD_INT 302
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23435
23398: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23399: LD_VAR 0 6
23403: PPUSH
23404: LD_VAR 0 7
23408: PPUSH
23409: LD_VAR 0 8
23413: PPUSH
23414: LD_VAR 0 9
23418: PPUSH
23419: LD_VAR 0 4
23423: PPUSH
23424: LD_VAR 0 5
23428: PPUSH
23429: CALL 24682 0 6
23433: GO 23511
23435: LD_INT 303
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23480
23443: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23444: LD_VAR 0 6
23448: PPUSH
23449: LD_VAR 0 7
23453: PPUSH
23454: LD_VAR 0 8
23458: PPUSH
23459: LD_VAR 0 9
23463: PPUSH
23464: LD_VAR 0 4
23468: PPUSH
23469: LD_VAR 0 5
23473: PPUSH
23474: CALL 23516 0 6
23478: GO 23511
23480: LD_INT 304
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23488
23486: GO 23510
23488: POP
// hHackTeleport ( unit , x , y ) ; end ;
23489: LD_VAR 0 2
23493: PPUSH
23494: LD_VAR 0 4
23498: PPUSH
23499: LD_VAR 0 5
23503: PPUSH
23504: CALL 25275 0 3
23508: GO 23511
23510: POP
// end ;
23511: LD_VAR 0 12
23515: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23516: LD_INT 0
23518: PPUSH
23519: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23520: LD_VAR 0 1
23524: PUSH
23525: LD_INT 1
23527: LESS
23528: PUSH
23529: LD_VAR 0 1
23533: PUSH
23534: LD_INT 3
23536: GREATER
23537: OR
23538: PUSH
23539: LD_VAR 0 5
23543: PPUSH
23544: LD_VAR 0 6
23548: PPUSH
23549: CALL_OW 428
23553: OR
23554: IFFALSE 23558
// exit ;
23556: GO 24278
// uc_side := your_side ;
23558: LD_ADDR_OWVAR 20
23562: PUSH
23563: LD_OWVAR 2
23567: ST_TO_ADDR
// uc_nation := nation ;
23568: LD_ADDR_OWVAR 21
23572: PUSH
23573: LD_VAR 0 1
23577: ST_TO_ADDR
// bc_level = 1 ;
23578: LD_ADDR_OWVAR 43
23582: PUSH
23583: LD_INT 1
23585: ST_TO_ADDR
// case btype of 1 :
23586: LD_VAR 0 2
23590: PUSH
23591: LD_INT 1
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23610
23599: POP
// bc_type := b_depot ; 2 :
23600: LD_ADDR_OWVAR 42
23604: PUSH
23605: LD_INT 0
23607: ST_TO_ADDR
23608: GO 24222
23610: LD_INT 2
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23629
23618: POP
// bc_type := b_warehouse ; 3 :
23619: LD_ADDR_OWVAR 42
23623: PUSH
23624: LD_INT 1
23626: ST_TO_ADDR
23627: GO 24222
23629: LD_INT 3
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23648
23637: POP
// bc_type := b_lab ; 4 .. 9 :
23638: LD_ADDR_OWVAR 42
23642: PUSH
23643: LD_INT 6
23645: ST_TO_ADDR
23646: GO 24222
23648: LD_INT 4
23650: DOUBLE
23651: GREATEREQUAL
23652: IFFALSE 23660
23654: LD_INT 9
23656: DOUBLE
23657: LESSEQUAL
23658: IFTRUE 23662
23660: GO 23714
23662: POP
// begin bc_type := b_lab_half ;
23663: LD_ADDR_OWVAR 42
23667: PUSH
23668: LD_INT 7
23670: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23671: LD_ADDR_OWVAR 44
23675: PUSH
23676: LD_INT 10
23678: PUSH
23679: LD_INT 11
23681: PUSH
23682: LD_INT 12
23684: PUSH
23685: LD_INT 15
23687: PUSH
23688: LD_INT 14
23690: PUSH
23691: LD_INT 13
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: LD_VAR 0 2
23706: PUSH
23707: LD_INT 3
23709: MINUS
23710: ARRAY
23711: ST_TO_ADDR
// end ; 10 .. 13 :
23712: GO 24222
23714: LD_INT 10
23716: DOUBLE
23717: GREATEREQUAL
23718: IFFALSE 23726
23720: LD_INT 13
23722: DOUBLE
23723: LESSEQUAL
23724: IFTRUE 23728
23726: GO 23805
23728: POP
// begin bc_type := b_lab_full ;
23729: LD_ADDR_OWVAR 42
23733: PUSH
23734: LD_INT 8
23736: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23737: LD_ADDR_OWVAR 44
23741: PUSH
23742: LD_INT 10
23744: PUSH
23745: LD_INT 12
23747: PUSH
23748: LD_INT 14
23750: PUSH
23751: LD_INT 13
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: PUSH
23760: LD_VAR 0 2
23764: PUSH
23765: LD_INT 9
23767: MINUS
23768: ARRAY
23769: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23770: LD_ADDR_OWVAR 45
23774: PUSH
23775: LD_INT 11
23777: PUSH
23778: LD_INT 15
23780: PUSH
23781: LD_INT 12
23783: PUSH
23784: LD_INT 15
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: LD_VAR 0 2
23797: PUSH
23798: LD_INT 9
23800: MINUS
23801: ARRAY
23802: ST_TO_ADDR
// end ; 14 :
23803: GO 24222
23805: LD_INT 14
23807: DOUBLE
23808: EQUAL
23809: IFTRUE 23813
23811: GO 23824
23813: POP
// bc_type := b_workshop ; 15 :
23814: LD_ADDR_OWVAR 42
23818: PUSH
23819: LD_INT 2
23821: ST_TO_ADDR
23822: GO 24222
23824: LD_INT 15
23826: DOUBLE
23827: EQUAL
23828: IFTRUE 23832
23830: GO 23843
23832: POP
// bc_type := b_factory ; 16 :
23833: LD_ADDR_OWVAR 42
23837: PUSH
23838: LD_INT 3
23840: ST_TO_ADDR
23841: GO 24222
23843: LD_INT 16
23845: DOUBLE
23846: EQUAL
23847: IFTRUE 23851
23849: GO 23862
23851: POP
// bc_type := b_ext_gun ; 17 :
23852: LD_ADDR_OWVAR 42
23856: PUSH
23857: LD_INT 17
23859: ST_TO_ADDR
23860: GO 24222
23862: LD_INT 17
23864: DOUBLE
23865: EQUAL
23866: IFTRUE 23870
23868: GO 23898
23870: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23871: LD_ADDR_OWVAR 42
23875: PUSH
23876: LD_INT 19
23878: PUSH
23879: LD_INT 23
23881: PUSH
23882: LD_INT 19
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: PUSH
23890: LD_VAR 0 1
23894: ARRAY
23895: ST_TO_ADDR
23896: GO 24222
23898: LD_INT 18
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 23917
23906: POP
// bc_type := b_ext_radar ; 19 :
23907: LD_ADDR_OWVAR 42
23911: PUSH
23912: LD_INT 20
23914: ST_TO_ADDR
23915: GO 24222
23917: LD_INT 19
23919: DOUBLE
23920: EQUAL
23921: IFTRUE 23925
23923: GO 23936
23925: POP
// bc_type := b_ext_radio ; 20 :
23926: LD_ADDR_OWVAR 42
23930: PUSH
23931: LD_INT 22
23933: ST_TO_ADDR
23934: GO 24222
23936: LD_INT 20
23938: DOUBLE
23939: EQUAL
23940: IFTRUE 23944
23942: GO 23955
23944: POP
// bc_type := b_ext_siberium ; 21 :
23945: LD_ADDR_OWVAR 42
23949: PUSH
23950: LD_INT 21
23952: ST_TO_ADDR
23953: GO 24222
23955: LD_INT 21
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 23974
23963: POP
// bc_type := b_ext_computer ; 22 :
23964: LD_ADDR_OWVAR 42
23968: PUSH
23969: LD_INT 24
23971: ST_TO_ADDR
23972: GO 24222
23974: LD_INT 22
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 23993
23982: POP
// bc_type := b_ext_track ; 23 :
23983: LD_ADDR_OWVAR 42
23987: PUSH
23988: LD_INT 16
23990: ST_TO_ADDR
23991: GO 24222
23993: LD_INT 23
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24001
23999: GO 24012
24001: POP
// bc_type := b_ext_laser ; 24 :
24002: LD_ADDR_OWVAR 42
24006: PUSH
24007: LD_INT 25
24009: ST_TO_ADDR
24010: GO 24222
24012: LD_INT 24
24014: DOUBLE
24015: EQUAL
24016: IFTRUE 24020
24018: GO 24031
24020: POP
// bc_type := b_control_tower ; 25 :
24021: LD_ADDR_OWVAR 42
24025: PUSH
24026: LD_INT 36
24028: ST_TO_ADDR
24029: GO 24222
24031: LD_INT 25
24033: DOUBLE
24034: EQUAL
24035: IFTRUE 24039
24037: GO 24050
24039: POP
// bc_type := b_breastwork ; 26 :
24040: LD_ADDR_OWVAR 42
24044: PUSH
24045: LD_INT 31
24047: ST_TO_ADDR
24048: GO 24222
24050: LD_INT 26
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24069
24058: POP
// bc_type := b_bunker ; 27 :
24059: LD_ADDR_OWVAR 42
24063: PUSH
24064: LD_INT 32
24066: ST_TO_ADDR
24067: GO 24222
24069: LD_INT 27
24071: DOUBLE
24072: EQUAL
24073: IFTRUE 24077
24075: GO 24088
24077: POP
// bc_type := b_turret ; 28 :
24078: LD_ADDR_OWVAR 42
24082: PUSH
24083: LD_INT 33
24085: ST_TO_ADDR
24086: GO 24222
24088: LD_INT 28
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24107
24096: POP
// bc_type := b_armoury ; 29 :
24097: LD_ADDR_OWVAR 42
24101: PUSH
24102: LD_INT 4
24104: ST_TO_ADDR
24105: GO 24222
24107: LD_INT 29
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24126
24115: POP
// bc_type := b_barracks ; 30 :
24116: LD_ADDR_OWVAR 42
24120: PUSH
24121: LD_INT 5
24123: ST_TO_ADDR
24124: GO 24222
24126: LD_INT 30
24128: DOUBLE
24129: EQUAL
24130: IFTRUE 24134
24132: GO 24145
24134: POP
// bc_type := b_solar_power ; 31 :
24135: LD_ADDR_OWVAR 42
24139: PUSH
24140: LD_INT 27
24142: ST_TO_ADDR
24143: GO 24222
24145: LD_INT 31
24147: DOUBLE
24148: EQUAL
24149: IFTRUE 24153
24151: GO 24164
24153: POP
// bc_type := b_oil_power ; 32 :
24154: LD_ADDR_OWVAR 42
24158: PUSH
24159: LD_INT 26
24161: ST_TO_ADDR
24162: GO 24222
24164: LD_INT 32
24166: DOUBLE
24167: EQUAL
24168: IFTRUE 24172
24170: GO 24183
24172: POP
// bc_type := b_siberite_power ; 33 :
24173: LD_ADDR_OWVAR 42
24177: PUSH
24178: LD_INT 28
24180: ST_TO_ADDR
24181: GO 24222
24183: LD_INT 33
24185: DOUBLE
24186: EQUAL
24187: IFTRUE 24191
24189: GO 24202
24191: POP
// bc_type := b_oil_mine ; 34 :
24192: LD_ADDR_OWVAR 42
24196: PUSH
24197: LD_INT 29
24199: ST_TO_ADDR
24200: GO 24222
24202: LD_INT 34
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24221
24210: POP
// bc_type := b_siberite_mine ; end ;
24211: LD_ADDR_OWVAR 42
24215: PUSH
24216: LD_INT 30
24218: ST_TO_ADDR
24219: GO 24222
24221: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24222: LD_ADDR_VAR 0 8
24226: PUSH
24227: LD_VAR 0 5
24231: PPUSH
24232: LD_VAR 0 6
24236: PPUSH
24237: LD_VAR 0 3
24241: PPUSH
24242: CALL_OW 47
24246: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24247: LD_OWVAR 42
24251: PUSH
24252: LD_INT 32
24254: PUSH
24255: LD_INT 33
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: IN
24262: IFFALSE 24278
// PlaceWeaponTurret ( b , weapon ) ;
24264: LD_VAR 0 8
24268: PPUSH
24269: LD_VAR 0 4
24273: PPUSH
24274: CALL_OW 431
// end ;
24278: LD_VAR 0 7
24282: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24283: LD_INT 0
24285: PPUSH
24286: PPUSH
24287: PPUSH
24288: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24289: LD_ADDR_VAR 0 4
24293: PUSH
24294: LD_INT 22
24296: PUSH
24297: LD_OWVAR 2
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: LD_INT 30
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 30
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PPUSH
24338: CALL_OW 69
24342: ST_TO_ADDR
// if not tmp then
24343: LD_VAR 0 4
24347: NOT
24348: IFFALSE 24352
// exit ;
24350: GO 24411
// for i in tmp do
24352: LD_ADDR_VAR 0 2
24356: PUSH
24357: LD_VAR 0 4
24361: PUSH
24362: FOR_IN
24363: IFFALSE 24409
// for j = 1 to 3 do
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: DOUBLE
24371: LD_INT 1
24373: DEC
24374: ST_TO_ADDR
24375: LD_INT 3
24377: PUSH
24378: FOR_TO
24379: IFFALSE 24405
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24381: LD_VAR 0 2
24385: PPUSH
24386: CALL_OW 274
24390: PPUSH
24391: LD_VAR 0 3
24395: PPUSH
24396: LD_INT 99999
24398: PPUSH
24399: CALL_OW 277
24403: GO 24378
24405: POP
24406: POP
24407: GO 24362
24409: POP
24410: POP
// end ;
24411: LD_VAR 0 1
24415: RET
// export function hHackSetLevel10 ; var i , j ; begin
24416: LD_INT 0
24418: PPUSH
24419: PPUSH
24420: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24421: LD_ADDR_VAR 0 2
24425: PUSH
24426: LD_INT 21
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PPUSH
24436: CALL_OW 69
24440: PUSH
24441: FOR_IN
24442: IFFALSE 24494
// if IsSelected ( i ) then
24444: LD_VAR 0 2
24448: PPUSH
24449: CALL_OW 306
24453: IFFALSE 24492
// begin for j := 1 to 4 do
24455: LD_ADDR_VAR 0 3
24459: PUSH
24460: DOUBLE
24461: LD_INT 1
24463: DEC
24464: ST_TO_ADDR
24465: LD_INT 4
24467: PUSH
24468: FOR_TO
24469: IFFALSE 24490
// SetSkill ( i , j , 10 ) ;
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_VAR 0 3
24480: PPUSH
24481: LD_INT 10
24483: PPUSH
24484: CALL_OW 237
24488: GO 24468
24490: POP
24491: POP
// end ;
24492: GO 24441
24494: POP
24495: POP
// end ;
24496: LD_VAR 0 1
24500: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24501: LD_INT 0
24503: PPUSH
24504: PPUSH
24505: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 22
24513: PUSH
24514: LD_OWVAR 2
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 21
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PPUSH
24537: CALL_OW 69
24541: PUSH
24542: FOR_IN
24543: IFFALSE 24584
// begin for j := 1 to 4 do
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_INT 4
24557: PUSH
24558: FOR_TO
24559: IFFALSE 24580
// SetSkill ( i , j , 10 ) ;
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_VAR 0 3
24570: PPUSH
24571: LD_INT 10
24573: PPUSH
24574: CALL_OW 237
24578: GO 24558
24580: POP
24581: POP
// end ;
24582: GO 24542
24584: POP
24585: POP
// end ;
24586: LD_VAR 0 1
24590: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24591: LD_INT 0
24593: PPUSH
// uc_side := your_side ;
24594: LD_ADDR_OWVAR 20
24598: PUSH
24599: LD_OWVAR 2
24603: ST_TO_ADDR
// uc_nation := nation ;
24604: LD_ADDR_OWVAR 21
24608: PUSH
24609: LD_VAR 0 1
24613: ST_TO_ADDR
// InitHc ;
24614: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24618: LD_INT 0
24620: PPUSH
24621: LD_VAR 0 2
24625: PPUSH
24626: LD_VAR 0 3
24630: PPUSH
24631: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24635: LD_VAR 0 4
24639: PPUSH
24640: LD_VAR 0 5
24644: PPUSH
24645: CALL_OW 428
24649: PUSH
24650: LD_INT 0
24652: EQUAL
24653: IFFALSE 24677
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24655: CALL_OW 44
24659: PPUSH
24660: LD_VAR 0 4
24664: PPUSH
24665: LD_VAR 0 5
24669: PPUSH
24670: LD_INT 1
24672: PPUSH
24673: CALL_OW 48
// end ;
24677: LD_VAR 0 6
24681: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24682: LD_INT 0
24684: PPUSH
24685: PPUSH
// uc_side := your_side ;
24686: LD_ADDR_OWVAR 20
24690: PUSH
24691: LD_OWVAR 2
24695: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24696: LD_VAR 0 1
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: LD_INT 3
24709: PUSH
24710: LD_INT 4
24712: PUSH
24713: LD_INT 5
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: IN
24723: IFFALSE 24735
// uc_nation := nation_american else
24725: LD_ADDR_OWVAR 21
24729: PUSH
24730: LD_INT 1
24732: ST_TO_ADDR
24733: GO 24778
// if chassis in [ 11 , 12 , 13 , 14 ] then
24735: LD_VAR 0 1
24739: PUSH
24740: LD_INT 11
24742: PUSH
24743: LD_INT 12
24745: PUSH
24746: LD_INT 13
24748: PUSH
24749: LD_INT 14
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: IN
24758: IFFALSE 24770
// uc_nation := nation_arabian else
24760: LD_ADDR_OWVAR 21
24764: PUSH
24765: LD_INT 2
24767: ST_TO_ADDR
24768: GO 24778
// uc_nation := nation_russian ;
24770: LD_ADDR_OWVAR 21
24774: PUSH
24775: LD_INT 3
24777: ST_TO_ADDR
// vc_chassis := chassis ;
24778: LD_ADDR_OWVAR 37
24782: PUSH
24783: LD_VAR 0 1
24787: ST_TO_ADDR
// vc_engine := engine ;
24788: LD_ADDR_OWVAR 39
24792: PUSH
24793: LD_VAR 0 2
24797: ST_TO_ADDR
// vc_control := control ;
24798: LD_ADDR_OWVAR 38
24802: PUSH
24803: LD_VAR 0 3
24807: ST_TO_ADDR
// vc_weapon := weapon ;
24808: LD_ADDR_OWVAR 40
24812: PUSH
24813: LD_VAR 0 4
24817: ST_TO_ADDR
// un := CreateVehicle ;
24818: LD_ADDR_VAR 0 8
24822: PUSH
24823: CALL_OW 45
24827: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24828: LD_VAR 0 8
24832: PPUSH
24833: LD_INT 0
24835: PPUSH
24836: LD_INT 5
24838: PPUSH
24839: CALL_OW 12
24843: PPUSH
24844: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24848: LD_VAR 0 8
24852: PPUSH
24853: LD_VAR 0 5
24857: PPUSH
24858: LD_VAR 0 6
24862: PPUSH
24863: LD_INT 1
24865: PPUSH
24866: CALL_OW 48
// end ;
24870: LD_VAR 0 7
24874: RET
// export hInvincible ; every 1 do
24875: GO 24877
24877: DISABLE
// hInvincible := [ ] ;
24878: LD_ADDR_EXP 103
24882: PUSH
24883: EMPTY
24884: ST_TO_ADDR
24885: END
// every 10 do var i ;
24886: GO 24888
24888: DISABLE
24889: LD_INT 0
24891: PPUSH
// begin enable ;
24892: ENABLE
// if not hInvincible then
24893: LD_EXP 103
24897: NOT
24898: IFFALSE 24902
// exit ;
24900: GO 24946
// for i in hInvincible do
24902: LD_ADDR_VAR 0 1
24906: PUSH
24907: LD_EXP 103
24911: PUSH
24912: FOR_IN
24913: IFFALSE 24944
// if GetLives ( i ) < 1000 then
24915: LD_VAR 0 1
24919: PPUSH
24920: CALL_OW 256
24924: PUSH
24925: LD_INT 1000
24927: LESS
24928: IFFALSE 24942
// SetLives ( i , 1000 ) ;
24930: LD_VAR 0 1
24934: PPUSH
24935: LD_INT 1000
24937: PPUSH
24938: CALL_OW 234
24942: GO 24912
24944: POP
24945: POP
// end ;
24946: PPOPN 1
24948: END
// export function hHackInvincible ; var i ; begin
24949: LD_INT 0
24951: PPUSH
24952: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24953: LD_ADDR_VAR 0 2
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 21
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 21
24973: PUSH
24974: LD_INT 2
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 69
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25053
// if IsSelected ( i ) then
24994: LD_VAR 0 2
24998: PPUSH
24999: CALL_OW 306
25003: IFFALSE 25051
// begin if i in hInvincible then
25005: LD_VAR 0 2
25009: PUSH
25010: LD_EXP 103
25014: IN
25015: IFFALSE 25035
// hInvincible := hInvincible diff i else
25017: LD_ADDR_EXP 103
25021: PUSH
25022: LD_EXP 103
25026: PUSH
25027: LD_VAR 0 2
25031: DIFF
25032: ST_TO_ADDR
25033: GO 25051
// hInvincible := hInvincible union i ;
25035: LD_ADDR_EXP 103
25039: PUSH
25040: LD_EXP 103
25044: PUSH
25045: LD_VAR 0 2
25049: UNION
25050: ST_TO_ADDR
// end ;
25051: GO 24991
25053: POP
25054: POP
// end ;
25055: LD_VAR 0 1
25059: RET
// export function hHackInvisible ; var i , j ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_INT 21
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PPUSH
25080: CALL_OW 69
25084: PUSH
25085: FOR_IN
25086: IFFALSE 25110
// if IsSelected ( i ) then
25088: LD_VAR 0 2
25092: PPUSH
25093: CALL_OW 306
25097: IFFALSE 25108
// ComForceInvisible ( i ) ;
25099: LD_VAR 0 2
25103: PPUSH
25104: CALL_OW 496
25108: GO 25085
25110: POP
25111: POP
// end ;
25112: LD_VAR 0 1
25116: RET
// export function hHackChangeYourSide ; begin
25117: LD_INT 0
25119: PPUSH
// if your_side = 8 then
25120: LD_OWVAR 2
25124: PUSH
25125: LD_INT 8
25127: EQUAL
25128: IFFALSE 25140
// your_side := 0 else
25130: LD_ADDR_OWVAR 2
25134: PUSH
25135: LD_INT 0
25137: ST_TO_ADDR
25138: GO 25154
// your_side := your_side + 1 ;
25140: LD_ADDR_OWVAR 2
25144: PUSH
25145: LD_OWVAR 2
25149: PUSH
25150: LD_INT 1
25152: PLUS
25153: ST_TO_ADDR
// end ;
25154: LD_VAR 0 1
25158: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25159: LD_INT 0
25161: PPUSH
25162: PPUSH
25163: PPUSH
// for i in all_units do
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_OWVAR 3
25173: PUSH
25174: FOR_IN
25175: IFFALSE 25253
// if IsSelected ( i ) then
25177: LD_VAR 0 2
25181: PPUSH
25182: CALL_OW 306
25186: IFFALSE 25251
// begin j := GetSide ( i ) ;
25188: LD_ADDR_VAR 0 3
25192: PUSH
25193: LD_VAR 0 2
25197: PPUSH
25198: CALL_OW 255
25202: ST_TO_ADDR
// if j = 8 then
25203: LD_VAR 0 3
25207: PUSH
25208: LD_INT 8
25210: EQUAL
25211: IFFALSE 25223
// j := 0 else
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_INT 0
25220: ST_TO_ADDR
25221: GO 25237
// j := j + 1 ;
25223: LD_ADDR_VAR 0 3
25227: PUSH
25228: LD_VAR 0 3
25232: PUSH
25233: LD_INT 1
25235: PLUS
25236: ST_TO_ADDR
// SetSide ( i , j ) ;
25237: LD_VAR 0 2
25241: PPUSH
25242: LD_VAR 0 3
25246: PPUSH
25247: CALL_OW 235
// end ;
25251: GO 25174
25253: POP
25254: POP
// end ;
25255: LD_VAR 0 1
25259: RET
// export function hHackFog ; begin
25260: LD_INT 0
25262: PPUSH
// FogOff ( true ) ;
25263: LD_INT 1
25265: PPUSH
25266: CALL_OW 344
// end ;
25270: LD_VAR 0 1
25274: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25275: LD_INT 0
25277: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25278: LD_VAR 0 1
25282: PPUSH
25283: LD_VAR 0 2
25287: PPUSH
25288: LD_VAR 0 3
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: LD_INT 1
25298: PPUSH
25299: CALL_OW 483
// CenterOnXY ( x , y ) ;
25303: LD_VAR 0 2
25307: PPUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: CALL_OW 84
// end ;
25317: LD_VAR 0 4
25321: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25322: LD_INT 0
25324: PPUSH
25325: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25326: LD_VAR 0 1
25330: NOT
25331: PUSH
25332: LD_VAR 0 2
25336: PPUSH
25337: LD_VAR 0 3
25341: PPUSH
25342: CALL_OW 488
25346: NOT
25347: OR
25348: PUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 266
25358: PUSH
25359: LD_INT 3
25361: NONEQUAL
25362: PUSH
25363: LD_VAR 0 1
25367: PPUSH
25368: CALL_OW 247
25372: PUSH
25373: LD_INT 1
25375: EQUAL
25376: NOT
25377: AND
25378: OR
25379: IFFALSE 25383
// exit ;
25381: GO 25532
// if GetType ( factory ) = unit_human then
25383: LD_VAR 0 1
25387: PPUSH
25388: CALL_OW 247
25392: PUSH
25393: LD_INT 1
25395: EQUAL
25396: IFFALSE 25413
// factory := IsInUnit ( factory ) ;
25398: LD_ADDR_VAR 0 1
25402: PUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 310
25412: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 266
25422: PUSH
25423: LD_INT 3
25425: NONEQUAL
25426: IFFALSE 25430
// exit ;
25428: GO 25532
// if HexInfo ( x , y ) = factory then
25430: LD_VAR 0 2
25434: PPUSH
25435: LD_VAR 0 3
25439: PPUSH
25440: CALL_OW 428
25444: PUSH
25445: LD_VAR 0 1
25449: EQUAL
25450: IFFALSE 25477
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25452: LD_ADDR_EXP 104
25456: PUSH
25457: LD_EXP 104
25461: PPUSH
25462: LD_VAR 0 1
25466: PPUSH
25467: LD_INT 0
25469: PPUSH
25470: CALL_OW 1
25474: ST_TO_ADDR
25475: GO 25528
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25477: LD_ADDR_EXP 104
25481: PUSH
25482: LD_EXP 104
25486: PPUSH
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_VAR 0 1
25496: PPUSH
25497: CALL_OW 255
25501: PUSH
25502: LD_VAR 0 1
25506: PUSH
25507: LD_VAR 0 2
25511: PUSH
25512: LD_VAR 0 3
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: PPUSH
25523: CALL_OW 1
25527: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25528: CALL 25537 0 0
// end ;
25532: LD_VAR 0 4
25536: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25537: LD_INT 0
25539: PPUSH
25540: PPUSH
25541: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25542: LD_STRING resetFactoryWaypoint();
25544: PPUSH
25545: CALL_OW 559
// if factoryWaypoints then
25549: LD_EXP 104
25553: IFFALSE 25679
// begin list := PrepareArray ( factoryWaypoints ) ;
25555: LD_ADDR_VAR 0 3
25559: PUSH
25560: LD_EXP 104
25564: PPUSH
25565: CALL 72056 0 1
25569: ST_TO_ADDR
// for i := 1 to list do
25570: LD_ADDR_VAR 0 2
25574: PUSH
25575: DOUBLE
25576: LD_INT 1
25578: DEC
25579: ST_TO_ADDR
25580: LD_VAR 0 3
25584: PUSH
25585: FOR_TO
25586: IFFALSE 25677
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25588: LD_STRING setFactoryWaypointXY(
25590: PUSH
25591: LD_VAR 0 3
25595: PUSH
25596: LD_VAR 0 2
25600: ARRAY
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: STR
25606: PUSH
25607: LD_STRING ,
25609: STR
25610: PUSH
25611: LD_VAR 0 3
25615: PUSH
25616: LD_VAR 0 2
25620: ARRAY
25621: PUSH
25622: LD_INT 2
25624: ARRAY
25625: STR
25626: PUSH
25627: LD_STRING ,
25629: STR
25630: PUSH
25631: LD_VAR 0 3
25635: PUSH
25636: LD_VAR 0 2
25640: ARRAY
25641: PUSH
25642: LD_INT 3
25644: ARRAY
25645: STR
25646: PUSH
25647: LD_STRING ,
25649: STR
25650: PUSH
25651: LD_VAR 0 3
25655: PUSH
25656: LD_VAR 0 2
25660: ARRAY
25661: PUSH
25662: LD_INT 4
25664: ARRAY
25665: STR
25666: PUSH
25667: LD_STRING )
25669: STR
25670: PPUSH
25671: CALL_OW 559
25675: GO 25585
25677: POP
25678: POP
// end ; end ;
25679: LD_VAR 0 1
25683: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25684: LD_INT 0
25686: PPUSH
// if HexInfo ( x , y ) = warehouse then
25687: LD_VAR 0 2
25691: PPUSH
25692: LD_VAR 0 3
25696: PPUSH
25697: CALL_OW 428
25701: PUSH
25702: LD_VAR 0 1
25706: EQUAL
25707: IFFALSE 25734
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25709: LD_ADDR_EXP 105
25713: PUSH
25714: LD_EXP 105
25718: PPUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: LD_INT 0
25726: PPUSH
25727: CALL_OW 1
25731: ST_TO_ADDR
25732: GO 25785
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25734: LD_ADDR_EXP 105
25738: PUSH
25739: LD_EXP 105
25743: PPUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 255
25758: PUSH
25759: LD_VAR 0 1
25763: PUSH
25764: LD_VAR 0 2
25768: PUSH
25769: LD_VAR 0 3
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 1
25784: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25785: CALL 25794 0 0
// end ;
25789: LD_VAR 0 4
25793: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25794: LD_INT 0
25796: PPUSH
25797: PPUSH
25798: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25799: LD_STRING resetWarehouseGatheringPoints();
25801: PPUSH
25802: CALL_OW 559
// if warehouseGatheringPoints then
25806: LD_EXP 105
25810: IFFALSE 25936
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25812: LD_ADDR_VAR 0 3
25816: PUSH
25817: LD_EXP 105
25821: PPUSH
25822: CALL 72056 0 1
25826: ST_TO_ADDR
// for i := 1 to list do
25827: LD_ADDR_VAR 0 2
25831: PUSH
25832: DOUBLE
25833: LD_INT 1
25835: DEC
25836: ST_TO_ADDR
25837: LD_VAR 0 3
25841: PUSH
25842: FOR_TO
25843: IFFALSE 25934
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25845: LD_STRING setWarehouseGatheringPointXY(
25847: PUSH
25848: LD_VAR 0 3
25852: PUSH
25853: LD_VAR 0 2
25857: ARRAY
25858: PUSH
25859: LD_INT 1
25861: ARRAY
25862: STR
25863: PUSH
25864: LD_STRING ,
25866: STR
25867: PUSH
25868: LD_VAR 0 3
25872: PUSH
25873: LD_VAR 0 2
25877: ARRAY
25878: PUSH
25879: LD_INT 2
25881: ARRAY
25882: STR
25883: PUSH
25884: LD_STRING ,
25886: STR
25887: PUSH
25888: LD_VAR 0 3
25892: PUSH
25893: LD_VAR 0 2
25897: ARRAY
25898: PUSH
25899: LD_INT 3
25901: ARRAY
25902: STR
25903: PUSH
25904: LD_STRING ,
25906: STR
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_VAR 0 2
25917: ARRAY
25918: PUSH
25919: LD_INT 4
25921: ARRAY
25922: STR
25923: PUSH
25924: LD_STRING )
25926: STR
25927: PPUSH
25928: CALL_OW 559
25932: GO 25842
25934: POP
25935: POP
// end ; end ;
25936: LD_VAR 0 1
25940: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25941: LD_EXP 105
25945: IFFALSE 26630
25947: GO 25949
25949: DISABLE
25950: LD_INT 0
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
// begin enable ;
25961: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_EXP 105
25971: PPUSH
25972: CALL 72056 0 1
25976: ST_TO_ADDR
// if not list then
25977: LD_VAR 0 3
25981: NOT
25982: IFFALSE 25986
// exit ;
25984: GO 26630
// for i := 1 to list do
25986: LD_ADDR_VAR 0 1
25990: PUSH
25991: DOUBLE
25992: LD_INT 1
25994: DEC
25995: ST_TO_ADDR
25996: LD_VAR 0 3
26000: PUSH
26001: FOR_TO
26002: IFFALSE 26628
// begin depot := list [ i ] [ 2 ] ;
26004: LD_ADDR_VAR 0 8
26008: PUSH
26009: LD_VAR 0 3
26013: PUSH
26014: LD_VAR 0 1
26018: ARRAY
26019: PUSH
26020: LD_INT 2
26022: ARRAY
26023: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26024: LD_ADDR_VAR 0 5
26028: PUSH
26029: LD_VAR 0 3
26033: PUSH
26034: LD_VAR 0 1
26038: ARRAY
26039: PUSH
26040: LD_INT 1
26042: ARRAY
26043: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26044: LD_VAR 0 8
26048: PPUSH
26049: CALL_OW 301
26053: PUSH
26054: LD_VAR 0 5
26058: PUSH
26059: LD_VAR 0 8
26063: PPUSH
26064: CALL_OW 255
26068: NONEQUAL
26069: OR
26070: IFFALSE 26099
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26072: LD_ADDR_EXP 105
26076: PUSH
26077: LD_EXP 105
26081: PPUSH
26082: LD_VAR 0 8
26086: PPUSH
26087: LD_INT 0
26089: PPUSH
26090: CALL_OW 1
26094: ST_TO_ADDR
// exit ;
26095: POP
26096: POP
26097: GO 26630
// end ; x := list [ i ] [ 3 ] ;
26099: LD_ADDR_VAR 0 6
26103: PUSH
26104: LD_VAR 0 3
26108: PUSH
26109: LD_VAR 0 1
26113: ARRAY
26114: PUSH
26115: LD_INT 3
26117: ARRAY
26118: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26119: LD_ADDR_VAR 0 7
26123: PUSH
26124: LD_VAR 0 3
26128: PUSH
26129: LD_VAR 0 1
26133: ARRAY
26134: PUSH
26135: LD_INT 4
26137: ARRAY
26138: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26139: LD_ADDR_VAR 0 9
26143: PUSH
26144: LD_VAR 0 6
26148: PPUSH
26149: LD_VAR 0 7
26153: PPUSH
26154: LD_INT 16
26156: PPUSH
26157: CALL 70644 0 3
26161: ST_TO_ADDR
// if not cratesNearbyPoint then
26162: LD_VAR 0 9
26166: NOT
26167: IFFALSE 26173
// exit ;
26169: POP
26170: POP
26171: GO 26630
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26173: LD_ADDR_VAR 0 4
26177: PUSH
26178: LD_INT 22
26180: PUSH
26181: LD_VAR 0 5
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 3
26192: PUSH
26193: LD_INT 60
26195: PUSH
26196: EMPTY
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 91
26205: PUSH
26206: LD_VAR 0 8
26210: PUSH
26211: LD_INT 6
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 25
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 25
26234: PUSH
26235: LD_INT 16
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: PUSH
26258: LD_VAR 0 8
26262: PPUSH
26263: CALL_OW 313
26267: PPUSH
26268: LD_INT 3
26270: PUSH
26271: LD_INT 60
26273: PUSH
26274: EMPTY
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 25
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 25
26296: PUSH
26297: LD_INT 16
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PPUSH
26313: CALL_OW 72
26317: UNION
26318: ST_TO_ADDR
// if tmp then
26319: LD_VAR 0 4
26323: IFFALSE 26403
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26325: LD_ADDR_VAR 0 4
26329: PUSH
26330: LD_VAR 0 4
26334: PPUSH
26335: LD_INT 3
26337: PPUSH
26338: CALL 68613 0 2
26342: ST_TO_ADDR
// for j in tmp do
26343: LD_ADDR_VAR 0 2
26347: PUSH
26348: LD_VAR 0 4
26352: PUSH
26353: FOR_IN
26354: IFFALSE 26397
// begin if IsInUnit ( j ) then
26356: LD_VAR 0 2
26360: PPUSH
26361: CALL_OW 310
26365: IFFALSE 26376
// ComExit ( j ) ;
26367: LD_VAR 0 2
26371: PPUSH
26372: CALL 68696 0 1
// AddComCollect ( j , x , y ) ;
26376: LD_VAR 0 2
26380: PPUSH
26381: LD_VAR 0 6
26385: PPUSH
26386: LD_VAR 0 7
26390: PPUSH
26391: CALL_OW 177
// end ;
26395: GO 26353
26397: POP
26398: POP
// exit ;
26399: POP
26400: POP
26401: GO 26630
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26403: LD_ADDR_VAR 0 4
26407: PUSH
26408: LD_INT 22
26410: PUSH
26411: LD_VAR 0 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 91
26422: PUSH
26423: LD_VAR 0 8
26427: PUSH
26428: LD_INT 8
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: LD_INT 34
26441: PUSH
26442: LD_INT 12
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 34
26451: PUSH
26452: LD_INT 51
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 34
26461: PUSH
26462: LD_INT 32
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 34
26471: PUSH
26472: LD_INT 89
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: ST_TO_ADDR
// if tmp then
26496: LD_VAR 0 4
26500: IFFALSE 26626
// begin for j in tmp do
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: LD_VAR 0 4
26511: PUSH
26512: FOR_IN
26513: IFFALSE 26624
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26515: LD_VAR 0 2
26519: PPUSH
26520: CALL_OW 262
26524: PUSH
26525: LD_INT 3
26527: EQUAL
26528: PUSH
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL_OW 261
26538: PUSH
26539: LD_INT 20
26541: GREATER
26542: OR
26543: PUSH
26544: LD_VAR 0 2
26548: PPUSH
26549: CALL_OW 314
26553: NOT
26554: AND
26555: PUSH
26556: LD_VAR 0 2
26560: PPUSH
26561: CALL_OW 263
26565: PUSH
26566: LD_INT 1
26568: NONEQUAL
26569: PUSH
26570: LD_VAR 0 2
26574: PPUSH
26575: CALL_OW 311
26579: OR
26580: AND
26581: IFFALSE 26622
// begin ComCollect ( j , x , y ) ;
26583: LD_VAR 0 2
26587: PPUSH
26588: LD_VAR 0 6
26592: PPUSH
26593: LD_VAR 0 7
26597: PPUSH
26598: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_VAR 0 8
26611: PPUSH
26612: CALL_OW 172
// exit ;
26616: POP
26617: POP
26618: POP
26619: POP
26620: GO 26630
// end ;
26622: GO 26512
26624: POP
26625: POP
// end ; end ;
26626: GO 26001
26628: POP
26629: POP
// end ; end_of_file
26630: PPOPN 9
26632: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26633: LD_INT 0
26635: PPUSH
26636: PPUSH
26637: PPUSH
26638: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26639: LD_VAR 0 1
26643: PPUSH
26644: CALL_OW 264
26648: PUSH
26649: LD_INT 91
26651: EQUAL
26652: IFFALSE 26724
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26654: LD_INT 68
26656: PPUSH
26657: LD_VAR 0 1
26661: PPUSH
26662: CALL_OW 255
26666: PPUSH
26667: CALL_OW 321
26671: PUSH
26672: LD_INT 2
26674: EQUAL
26675: IFFALSE 26687
// eff := 70 else
26677: LD_ADDR_VAR 0 4
26681: PUSH
26682: LD_INT 70
26684: ST_TO_ADDR
26685: GO 26695
// eff := 30 ;
26687: LD_ADDR_VAR 0 4
26691: PUSH
26692: LD_INT 30
26694: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26695: LD_VAR 0 1
26699: PPUSH
26700: CALL_OW 250
26704: PPUSH
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 251
26714: PPUSH
26715: LD_VAR 0 4
26719: PPUSH
26720: CALL_OW 495
// end ; end ;
26724: LD_VAR 0 2
26728: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26729: LD_INT 0
26731: PPUSH
// end ;
26732: LD_VAR 0 4
26736: RET
// export function SOS_Command ( cmd ) ; begin
26737: LD_INT 0
26739: PPUSH
// end ;
26740: LD_VAR 0 2
26744: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26745: LD_INT 0
26747: PPUSH
// end ;
26748: LD_VAR 0 6
26752: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26753: LD_INT 0
26755: PPUSH
26756: PPUSH
// if not vehicle or not factory then
26757: LD_VAR 0 1
26761: NOT
26762: PUSH
26763: LD_VAR 0 2
26767: NOT
26768: OR
26769: IFFALSE 26773
// exit ;
26771: GO 27004
// if factoryWaypoints >= factory then
26773: LD_EXP 104
26777: PUSH
26778: LD_VAR 0 2
26782: GREATEREQUAL
26783: IFFALSE 27004
// if factoryWaypoints [ factory ] then
26785: LD_EXP 104
26789: PUSH
26790: LD_VAR 0 2
26794: ARRAY
26795: IFFALSE 27004
// begin if GetControl ( vehicle ) = control_manual then
26797: LD_VAR 0 1
26801: PPUSH
26802: CALL_OW 263
26806: PUSH
26807: LD_INT 1
26809: EQUAL
26810: IFFALSE 26891
// begin driver := IsDrivenBy ( vehicle ) ;
26812: LD_ADDR_VAR 0 4
26816: PUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 311
26826: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26827: LD_VAR 0 4
26831: PPUSH
26832: LD_EXP 104
26836: PUSH
26837: LD_VAR 0 2
26841: ARRAY
26842: PUSH
26843: LD_INT 3
26845: ARRAY
26846: PPUSH
26847: LD_EXP 104
26851: PUSH
26852: LD_VAR 0 2
26856: ARRAY
26857: PUSH
26858: LD_INT 4
26860: ARRAY
26861: PPUSH
26862: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26866: LD_VAR 0 4
26870: PPUSH
26871: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26875: LD_VAR 0 4
26879: PPUSH
26880: LD_VAR 0 2
26884: PPUSH
26885: CALL_OW 180
// end else
26889: GO 27004
// if GetControl ( vehicle ) = control_remote then
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 263
26900: PUSH
26901: LD_INT 2
26903: EQUAL
26904: IFFALSE 26965
// begin wait ( 0 0$2 ) ;
26906: LD_INT 70
26908: PPUSH
26909: CALL_OW 67
// if Connect ( vehicle ) then
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL 39028 0 1
26922: IFFALSE 26963
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26924: LD_VAR 0 1
26928: PPUSH
26929: LD_EXP 104
26933: PUSH
26934: LD_VAR 0 2
26938: ARRAY
26939: PUSH
26940: LD_INT 3
26942: ARRAY
26943: PPUSH
26944: LD_EXP 104
26948: PUSH
26949: LD_VAR 0 2
26953: ARRAY
26954: PUSH
26955: LD_INT 4
26957: ARRAY
26958: PPUSH
26959: CALL_OW 171
// end else
26963: GO 27004
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26965: LD_VAR 0 1
26969: PPUSH
26970: LD_EXP 104
26974: PUSH
26975: LD_VAR 0 2
26979: ARRAY
26980: PUSH
26981: LD_INT 3
26983: ARRAY
26984: PPUSH
26985: LD_EXP 104
26989: PUSH
26990: LD_VAR 0 2
26994: ARRAY
26995: PUSH
26996: LD_INT 4
26998: ARRAY
26999: PPUSH
27000: CALL_OW 171
// end ; end ;
27004: LD_VAR 0 3
27008: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27009: LD_INT 0
27011: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27012: LD_VAR 0 1
27016: PUSH
27017: LD_INT 250
27019: EQUAL
27020: PUSH
27021: LD_VAR 0 2
27025: PPUSH
27026: CALL_OW 264
27030: PUSH
27031: LD_INT 81
27033: EQUAL
27034: AND
27035: IFFALSE 27056
// MinerPlaceMine ( unit , x , y ) ;
27037: LD_VAR 0 2
27041: PPUSH
27042: LD_VAR 0 4
27046: PPUSH
27047: LD_VAR 0 5
27051: PPUSH
27052: CALL 29441 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27056: LD_VAR 0 1
27060: PUSH
27061: LD_INT 251
27063: EQUAL
27064: PUSH
27065: LD_VAR 0 2
27069: PPUSH
27070: CALL_OW 264
27074: PUSH
27075: LD_INT 81
27077: EQUAL
27078: AND
27079: IFFALSE 27100
// MinerDetonateMine ( unit , x , y ) ;
27081: LD_VAR 0 2
27085: PPUSH
27086: LD_VAR 0 4
27090: PPUSH
27091: LD_VAR 0 5
27095: PPUSH
27096: CALL 29716 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27100: LD_VAR 0 1
27104: PUSH
27105: LD_INT 252
27107: EQUAL
27108: PUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: CALL_OW 264
27118: PUSH
27119: LD_INT 81
27121: EQUAL
27122: AND
27123: IFFALSE 27144
// MinerCreateMinefield ( unit , x , y ) ;
27125: LD_VAR 0 2
27129: PPUSH
27130: LD_VAR 0 4
27134: PPUSH
27135: LD_VAR 0 5
27139: PPUSH
27140: CALL 30133 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27144: LD_VAR 0 1
27148: PUSH
27149: LD_INT 253
27151: EQUAL
27152: PUSH
27153: LD_VAR 0 2
27157: PPUSH
27158: CALL_OW 257
27162: PUSH
27163: LD_INT 5
27165: EQUAL
27166: AND
27167: IFFALSE 27188
// ComBinocular ( unit , x , y ) ;
27169: LD_VAR 0 2
27173: PPUSH
27174: LD_VAR 0 4
27178: PPUSH
27179: LD_VAR 0 5
27183: PPUSH
27184: CALL 30502 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27188: LD_VAR 0 1
27192: PUSH
27193: LD_INT 254
27195: EQUAL
27196: PUSH
27197: LD_VAR 0 2
27201: PPUSH
27202: CALL_OW 264
27206: PUSH
27207: LD_INT 99
27209: EQUAL
27210: AND
27211: PUSH
27212: LD_VAR 0 3
27216: PPUSH
27217: CALL_OW 263
27221: PUSH
27222: LD_INT 3
27224: EQUAL
27225: AND
27226: IFFALSE 27242
// HackDestroyVehicle ( unit , selectedUnit ) ;
27228: LD_VAR 0 2
27232: PPUSH
27233: LD_VAR 0 3
27237: PPUSH
27238: CALL 28805 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27242: LD_VAR 0 1
27246: PUSH
27247: LD_INT 255
27249: EQUAL
27250: PUSH
27251: LD_VAR 0 2
27255: PPUSH
27256: CALL_OW 264
27260: PUSH
27261: LD_INT 14
27263: PUSH
27264: LD_INT 53
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: IN
27271: AND
27272: PUSH
27273: LD_VAR 0 4
27277: PPUSH
27278: LD_VAR 0 5
27282: PPUSH
27283: CALL_OW 488
27287: AND
27288: IFFALSE 27312
// CutTreeXYR ( unit , x , y , 12 ) ;
27290: LD_VAR 0 2
27294: PPUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: LD_VAR 0 5
27304: PPUSH
27305: LD_INT 12
27307: PPUSH
27308: CALL 27375 0 4
// if cmd = 256 then
27312: LD_VAR 0 1
27316: PUSH
27317: LD_INT 256
27319: EQUAL
27320: IFFALSE 27341
// SetFactoryWaypoint ( unit , x , y ) ;
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_VAR 0 4
27331: PPUSH
27332: LD_VAR 0 5
27336: PPUSH
27337: CALL 25322 0 3
// if cmd = 257 then
27341: LD_VAR 0 1
27345: PUSH
27346: LD_INT 257
27348: EQUAL
27349: IFFALSE 27370
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_VAR 0 4
27360: PPUSH
27361: LD_VAR 0 5
27365: PPUSH
27366: CALL 25684 0 3
// end ;
27370: LD_VAR 0 6
27374: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27375: LD_INT 0
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27386: LD_VAR 0 1
27390: NOT
27391: PUSH
27392: LD_VAR 0 2
27396: PPUSH
27397: LD_VAR 0 3
27401: PPUSH
27402: CALL_OW 488
27406: NOT
27407: OR
27408: PUSH
27409: LD_VAR 0 4
27413: NOT
27414: OR
27415: IFFALSE 27419
// exit ;
27417: GO 27759
// list := [ ] ;
27419: LD_ADDR_VAR 0 13
27423: PUSH
27424: EMPTY
27425: ST_TO_ADDR
// if x - r < 0 then
27426: LD_VAR 0 2
27430: PUSH
27431: LD_VAR 0 4
27435: MINUS
27436: PUSH
27437: LD_INT 0
27439: LESS
27440: IFFALSE 27452
// min_x := 0 else
27442: LD_ADDR_VAR 0 7
27446: PUSH
27447: LD_INT 0
27449: ST_TO_ADDR
27450: GO 27468
// min_x := x - r ;
27452: LD_ADDR_VAR 0 7
27456: PUSH
27457: LD_VAR 0 2
27461: PUSH
27462: LD_VAR 0 4
27466: MINUS
27467: ST_TO_ADDR
// if y - r < 0 then
27468: LD_VAR 0 3
27472: PUSH
27473: LD_VAR 0 4
27477: MINUS
27478: PUSH
27479: LD_INT 0
27481: LESS
27482: IFFALSE 27494
// min_y := 0 else
27484: LD_ADDR_VAR 0 8
27488: PUSH
27489: LD_INT 0
27491: ST_TO_ADDR
27492: GO 27510
// min_y := y - r ;
27494: LD_ADDR_VAR 0 8
27498: PUSH
27499: LD_VAR 0 3
27503: PUSH
27504: LD_VAR 0 4
27508: MINUS
27509: ST_TO_ADDR
// max_x := x + r ;
27510: LD_ADDR_VAR 0 9
27514: PUSH
27515: LD_VAR 0 2
27519: PUSH
27520: LD_VAR 0 4
27524: PLUS
27525: ST_TO_ADDR
// max_y := y + r ;
27526: LD_ADDR_VAR 0 10
27530: PUSH
27531: LD_VAR 0 3
27535: PUSH
27536: LD_VAR 0 4
27540: PLUS
27541: ST_TO_ADDR
// for _x = min_x to max_x do
27542: LD_ADDR_VAR 0 11
27546: PUSH
27547: DOUBLE
27548: LD_VAR 0 7
27552: DEC
27553: ST_TO_ADDR
27554: LD_VAR 0 9
27558: PUSH
27559: FOR_TO
27560: IFFALSE 27677
// for _y = min_y to max_y do
27562: LD_ADDR_VAR 0 12
27566: PUSH
27567: DOUBLE
27568: LD_VAR 0 8
27572: DEC
27573: ST_TO_ADDR
27574: LD_VAR 0 10
27578: PUSH
27579: FOR_TO
27580: IFFALSE 27673
// begin if not ValidHex ( _x , _y ) then
27582: LD_VAR 0 11
27586: PPUSH
27587: LD_VAR 0 12
27591: PPUSH
27592: CALL_OW 488
27596: NOT
27597: IFFALSE 27601
// continue ;
27599: GO 27579
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27601: LD_VAR 0 11
27605: PPUSH
27606: LD_VAR 0 12
27610: PPUSH
27611: CALL_OW 351
27615: PUSH
27616: LD_VAR 0 11
27620: PPUSH
27621: LD_VAR 0 12
27625: PPUSH
27626: CALL_OW 554
27630: AND
27631: IFFALSE 27671
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27633: LD_ADDR_VAR 0 13
27637: PUSH
27638: LD_VAR 0 13
27642: PPUSH
27643: LD_VAR 0 13
27647: PUSH
27648: LD_INT 1
27650: PLUS
27651: PPUSH
27652: LD_VAR 0 11
27656: PUSH
27657: LD_VAR 0 12
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PPUSH
27666: CALL_OW 2
27670: ST_TO_ADDR
// end ;
27671: GO 27579
27673: POP
27674: POP
27675: GO 27559
27677: POP
27678: POP
// if not list then
27679: LD_VAR 0 13
27683: NOT
27684: IFFALSE 27688
// exit ;
27686: GO 27759
// for i in list do
27688: LD_ADDR_VAR 0 6
27692: PUSH
27693: LD_VAR 0 13
27697: PUSH
27698: FOR_IN
27699: IFFALSE 27757
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27701: LD_VAR 0 1
27705: PPUSH
27706: LD_STRING M
27708: PUSH
27709: LD_VAR 0 6
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: PUSH
27718: LD_VAR 0 6
27722: PUSH
27723: LD_INT 2
27725: ARRAY
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: PPUSH
27751: CALL_OW 447
27755: GO 27698
27757: POP
27758: POP
// end ;
27759: LD_VAR 0 5
27763: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27764: LD_EXP 107
27768: NOT
27769: IFFALSE 27819
27771: GO 27773
27773: DISABLE
// begin initHack := true ;
27774: LD_ADDR_EXP 107
27778: PUSH
27779: LD_INT 1
27781: ST_TO_ADDR
// hackTanks := [ ] ;
27782: LD_ADDR_EXP 108
27786: PUSH
27787: EMPTY
27788: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27789: LD_ADDR_EXP 109
27793: PUSH
27794: EMPTY
27795: ST_TO_ADDR
// hackLimit := 3 ;
27796: LD_ADDR_EXP 110
27800: PUSH
27801: LD_INT 3
27803: ST_TO_ADDR
// hackDist := 12 ;
27804: LD_ADDR_EXP 111
27808: PUSH
27809: LD_INT 12
27811: ST_TO_ADDR
// hackCounter := [ ] ;
27812: LD_ADDR_EXP 112
27816: PUSH
27817: EMPTY
27818: ST_TO_ADDR
// end ;
27819: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27820: LD_EXP 107
27824: PUSH
27825: LD_INT 34
27827: PUSH
27828: LD_INT 99
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PPUSH
27835: CALL_OW 69
27839: AND
27840: IFFALSE 28093
27842: GO 27844
27844: DISABLE
27845: LD_INT 0
27847: PPUSH
27848: PPUSH
// begin enable ;
27849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27850: LD_ADDR_VAR 0 1
27854: PUSH
27855: LD_INT 34
27857: PUSH
27858: LD_INT 99
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PPUSH
27865: CALL_OW 69
27869: PUSH
27870: FOR_IN
27871: IFFALSE 28091
// begin if not i in hackTanks then
27873: LD_VAR 0 1
27877: PUSH
27878: LD_EXP 108
27882: IN
27883: NOT
27884: IFFALSE 27967
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27886: LD_ADDR_EXP 108
27890: PUSH
27891: LD_EXP 108
27895: PPUSH
27896: LD_EXP 108
27900: PUSH
27901: LD_INT 1
27903: PLUS
27904: PPUSH
27905: LD_VAR 0 1
27909: PPUSH
27910: CALL_OW 1
27914: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27915: LD_ADDR_EXP 109
27919: PUSH
27920: LD_EXP 109
27924: PPUSH
27925: LD_EXP 109
27929: PUSH
27930: LD_INT 1
27932: PLUS
27933: PPUSH
27934: EMPTY
27935: PPUSH
27936: CALL_OW 1
27940: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27941: LD_ADDR_EXP 112
27945: PUSH
27946: LD_EXP 112
27950: PPUSH
27951: LD_EXP 112
27955: PUSH
27956: LD_INT 1
27958: PLUS
27959: PPUSH
27960: EMPTY
27961: PPUSH
27962: CALL_OW 1
27966: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27967: LD_VAR 0 1
27971: PPUSH
27972: CALL_OW 302
27976: NOT
27977: IFFALSE 27990
// begin HackUnlinkAll ( i ) ;
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL 28096 0 1
// continue ;
27988: GO 27870
// end ; HackCheckCapturedStatus ( i ) ;
27990: LD_VAR 0 1
27994: PPUSH
27995: CALL 28539 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27999: LD_ADDR_VAR 0 2
28003: PUSH
28004: LD_INT 81
28006: PUSH
28007: LD_VAR 0 1
28011: PPUSH
28012: CALL_OW 255
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 33
28023: PUSH
28024: LD_INT 3
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 91
28033: PUSH
28034: LD_VAR 0 1
28038: PUSH
28039: LD_EXP 111
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 50
28051: PUSH
28052: EMPTY
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: PPUSH
28061: CALL_OW 69
28065: ST_TO_ADDR
// if not tmp then
28066: LD_VAR 0 2
28070: NOT
28071: IFFALSE 28075
// continue ;
28073: GO 27870
// HackLink ( i , tmp ) ;
28075: LD_VAR 0 1
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL 28232 0 2
// end ;
28089: GO 27870
28091: POP
28092: POP
// end ;
28093: PPOPN 2
28095: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28096: LD_INT 0
28098: PPUSH
28099: PPUSH
28100: PPUSH
// if not hack in hackTanks then
28101: LD_VAR 0 1
28105: PUSH
28106: LD_EXP 108
28110: IN
28111: NOT
28112: IFFALSE 28116
// exit ;
28114: GO 28227
// index := GetElementIndex ( hackTanks , hack ) ;
28116: LD_ADDR_VAR 0 4
28120: PUSH
28121: LD_EXP 108
28125: PPUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL 35844 0 2
28135: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28136: LD_EXP 109
28140: PUSH
28141: LD_VAR 0 4
28145: ARRAY
28146: IFFALSE 28227
// begin for i in hackTanksCaptured [ index ] do
28148: LD_ADDR_VAR 0 3
28152: PUSH
28153: LD_EXP 109
28157: PUSH
28158: LD_VAR 0 4
28162: ARRAY
28163: PUSH
28164: FOR_IN
28165: IFFALSE 28191
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28167: LD_VAR 0 3
28171: PUSH
28172: LD_INT 1
28174: ARRAY
28175: PPUSH
28176: LD_VAR 0 3
28180: PUSH
28181: LD_INT 2
28183: ARRAY
28184: PPUSH
28185: CALL_OW 235
28189: GO 28164
28191: POP
28192: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28193: LD_ADDR_EXP 109
28197: PUSH
28198: LD_EXP 109
28202: PPUSH
28203: LD_VAR 0 4
28207: PPUSH
28208: EMPTY
28209: PPUSH
28210: CALL_OW 1
28214: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28215: LD_VAR 0 1
28219: PPUSH
28220: LD_INT 0
28222: PPUSH
28223: CALL_OW 505
// end ; end ;
28227: LD_VAR 0 2
28231: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28232: LD_INT 0
28234: PPUSH
28235: PPUSH
28236: PPUSH
// if not hack in hackTanks or not vehicles then
28237: LD_VAR 0 1
28241: PUSH
28242: LD_EXP 108
28246: IN
28247: NOT
28248: PUSH
28249: LD_VAR 0 2
28253: NOT
28254: OR
28255: IFFALSE 28259
// exit ;
28257: GO 28534
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28259: LD_ADDR_VAR 0 2
28263: PUSH
28264: LD_VAR 0 1
28268: PPUSH
28269: LD_VAR 0 2
28273: PPUSH
28274: LD_INT 1
28276: PPUSH
28277: LD_INT 1
28279: PPUSH
28280: CALL 36494 0 4
28284: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28285: LD_ADDR_VAR 0 5
28289: PUSH
28290: LD_EXP 108
28294: PPUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL 35844 0 2
28304: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28305: LD_EXP 109
28309: PUSH
28310: LD_VAR 0 5
28314: ARRAY
28315: PUSH
28316: LD_EXP 110
28320: LESS
28321: IFFALSE 28510
// begin for i := 1 to vehicles do
28323: LD_ADDR_VAR 0 4
28327: PUSH
28328: DOUBLE
28329: LD_INT 1
28331: DEC
28332: ST_TO_ADDR
28333: LD_VAR 0 2
28337: PUSH
28338: FOR_TO
28339: IFFALSE 28508
// begin if hackTanksCaptured [ index ] = hackLimit then
28341: LD_EXP 109
28345: PUSH
28346: LD_VAR 0 5
28350: ARRAY
28351: PUSH
28352: LD_EXP 110
28356: EQUAL
28357: IFFALSE 28361
// break ;
28359: GO 28508
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28361: LD_ADDR_EXP 112
28365: PUSH
28366: LD_EXP 112
28370: PPUSH
28371: LD_VAR 0 5
28375: PPUSH
28376: LD_EXP 112
28380: PUSH
28381: LD_VAR 0 5
28385: ARRAY
28386: PUSH
28387: LD_INT 1
28389: PLUS
28390: PPUSH
28391: CALL_OW 1
28395: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28396: LD_ADDR_EXP 109
28400: PUSH
28401: LD_EXP 109
28405: PPUSH
28406: LD_VAR 0 5
28410: PUSH
28411: LD_EXP 109
28415: PUSH
28416: LD_VAR 0 5
28420: ARRAY
28421: PUSH
28422: LD_INT 1
28424: PLUS
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PPUSH
28430: LD_VAR 0 2
28434: PUSH
28435: LD_VAR 0 4
28439: ARRAY
28440: PUSH
28441: LD_VAR 0 2
28445: PUSH
28446: LD_VAR 0 4
28450: ARRAY
28451: PPUSH
28452: CALL_OW 255
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL 36059 0 3
28465: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28466: LD_VAR 0 2
28470: PUSH
28471: LD_VAR 0 4
28475: ARRAY
28476: PPUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 255
28486: PPUSH
28487: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28491: LD_VAR 0 2
28495: PUSH
28496: LD_VAR 0 4
28500: ARRAY
28501: PPUSH
28502: CALL_OW 141
// end ;
28506: GO 28338
28508: POP
28509: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28510: LD_VAR 0 1
28514: PPUSH
28515: LD_EXP 109
28519: PUSH
28520: LD_VAR 0 5
28524: ARRAY
28525: PUSH
28526: LD_INT 0
28528: PLUS
28529: PPUSH
28530: CALL_OW 505
// end ;
28534: LD_VAR 0 3
28538: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28539: LD_INT 0
28541: PPUSH
28542: PPUSH
28543: PPUSH
28544: PPUSH
// if not hack in hackTanks then
28545: LD_VAR 0 1
28549: PUSH
28550: LD_EXP 108
28554: IN
28555: NOT
28556: IFFALSE 28560
// exit ;
28558: GO 28800
// index := GetElementIndex ( hackTanks , hack ) ;
28560: LD_ADDR_VAR 0 4
28564: PUSH
28565: LD_EXP 108
28569: PPUSH
28570: LD_VAR 0 1
28574: PPUSH
28575: CALL 35844 0 2
28579: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28580: LD_ADDR_VAR 0 3
28584: PUSH
28585: DOUBLE
28586: LD_EXP 109
28590: PUSH
28591: LD_VAR 0 4
28595: ARRAY
28596: INC
28597: ST_TO_ADDR
28598: LD_INT 1
28600: PUSH
28601: FOR_DOWNTO
28602: IFFALSE 28774
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28604: LD_ADDR_VAR 0 5
28608: PUSH
28609: LD_EXP 109
28613: PUSH
28614: LD_VAR 0 4
28618: ARRAY
28619: PUSH
28620: LD_VAR 0 3
28624: ARRAY
28625: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28626: LD_VAR 0 5
28630: PUSH
28631: LD_INT 1
28633: ARRAY
28634: PPUSH
28635: CALL_OW 302
28639: NOT
28640: PUSH
28641: LD_VAR 0 5
28645: PUSH
28646: LD_INT 1
28648: ARRAY
28649: PPUSH
28650: CALL_OW 255
28654: PUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 255
28664: NONEQUAL
28665: OR
28666: IFFALSE 28772
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28668: LD_VAR 0 5
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: PPUSH
28677: CALL_OW 305
28681: PUSH
28682: LD_VAR 0 5
28686: PUSH
28687: LD_INT 1
28689: ARRAY
28690: PPUSH
28691: CALL_OW 255
28695: PUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 255
28705: EQUAL
28706: AND
28707: IFFALSE 28731
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28709: LD_VAR 0 5
28713: PUSH
28714: LD_INT 1
28716: ARRAY
28717: PPUSH
28718: LD_VAR 0 5
28722: PUSH
28723: LD_INT 2
28725: ARRAY
28726: PPUSH
28727: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28731: LD_ADDR_EXP 109
28735: PUSH
28736: LD_EXP 109
28740: PPUSH
28741: LD_VAR 0 4
28745: PPUSH
28746: LD_EXP 109
28750: PUSH
28751: LD_VAR 0 4
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 3
28761: PPUSH
28762: CALL_OW 3
28766: PPUSH
28767: CALL_OW 1
28771: ST_TO_ADDR
// end ; end ;
28772: GO 28601
28774: POP
28775: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28776: LD_VAR 0 1
28780: PPUSH
28781: LD_EXP 109
28785: PUSH
28786: LD_VAR 0 4
28790: ARRAY
28791: PUSH
28792: LD_INT 0
28794: PLUS
28795: PPUSH
28796: CALL_OW 505
// end ;
28800: LD_VAR 0 2
28804: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28805: LD_INT 0
28807: PPUSH
28808: PPUSH
28809: PPUSH
28810: PPUSH
// if not hack in hackTanks then
28811: LD_VAR 0 1
28815: PUSH
28816: LD_EXP 108
28820: IN
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 28911
// index := GetElementIndex ( hackTanks , hack ) ;
28826: LD_ADDR_VAR 0 5
28830: PUSH
28831: LD_EXP 108
28835: PPUSH
28836: LD_VAR 0 1
28840: PPUSH
28841: CALL 35844 0 2
28845: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28846: LD_ADDR_VAR 0 4
28850: PUSH
28851: DOUBLE
28852: LD_INT 1
28854: DEC
28855: ST_TO_ADDR
28856: LD_EXP 109
28860: PUSH
28861: LD_VAR 0 5
28865: ARRAY
28866: PUSH
28867: FOR_TO
28868: IFFALSE 28909
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28870: LD_EXP 109
28874: PUSH
28875: LD_VAR 0 5
28879: ARRAY
28880: PUSH
28881: LD_VAR 0 4
28885: ARRAY
28886: PUSH
28887: LD_INT 1
28889: ARRAY
28890: PUSH
28891: LD_VAR 0 2
28895: EQUAL
28896: IFFALSE 28907
// KillUnit ( vehicle ) ;
28898: LD_VAR 0 2
28902: PPUSH
28903: CALL_OW 66
28907: GO 28867
28909: POP
28910: POP
// end ;
28911: LD_VAR 0 3
28915: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28916: LD_EXP 113
28920: NOT
28921: IFFALSE 28956
28923: GO 28925
28925: DISABLE
// begin initMiner := true ;
28926: LD_ADDR_EXP 113
28930: PUSH
28931: LD_INT 1
28933: ST_TO_ADDR
// minersList := [ ] ;
28934: LD_ADDR_EXP 114
28938: PUSH
28939: EMPTY
28940: ST_TO_ADDR
// minerMinesList := [ ] ;
28941: LD_ADDR_EXP 115
28945: PUSH
28946: EMPTY
28947: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28948: LD_ADDR_EXP 116
28952: PUSH
28953: LD_INT 5
28955: ST_TO_ADDR
// end ;
28956: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28957: LD_EXP 113
28961: PUSH
28962: LD_INT 34
28964: PUSH
28965: LD_INT 81
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PPUSH
28972: CALL_OW 69
28976: AND
28977: IFFALSE 29438
28979: GO 28981
28981: DISABLE
28982: LD_INT 0
28984: PPUSH
28985: PPUSH
28986: PPUSH
28987: PPUSH
// begin enable ;
28988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28989: LD_ADDR_VAR 0 1
28993: PUSH
28994: LD_INT 34
28996: PUSH
28997: LD_INT 81
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PPUSH
29004: CALL_OW 69
29008: PUSH
29009: FOR_IN
29010: IFFALSE 29082
// begin if not i in minersList then
29012: LD_VAR 0 1
29016: PUSH
29017: LD_EXP 114
29021: IN
29022: NOT
29023: IFFALSE 29080
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29025: LD_ADDR_EXP 114
29029: PUSH
29030: LD_EXP 114
29034: PPUSH
29035: LD_EXP 114
29039: PUSH
29040: LD_INT 1
29042: PLUS
29043: PPUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: CALL_OW 1
29053: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29054: LD_ADDR_EXP 115
29058: PUSH
29059: LD_EXP 115
29063: PPUSH
29064: LD_EXP 115
29068: PUSH
29069: LD_INT 1
29071: PLUS
29072: PPUSH
29073: EMPTY
29074: PPUSH
29075: CALL_OW 1
29079: ST_TO_ADDR
// end end ;
29080: GO 29009
29082: POP
29083: POP
// for i := minerMinesList downto 1 do
29084: LD_ADDR_VAR 0 1
29088: PUSH
29089: DOUBLE
29090: LD_EXP 115
29094: INC
29095: ST_TO_ADDR
29096: LD_INT 1
29098: PUSH
29099: FOR_DOWNTO
29100: IFFALSE 29436
// begin if IsLive ( minersList [ i ] ) then
29102: LD_EXP 114
29106: PUSH
29107: LD_VAR 0 1
29111: ARRAY
29112: PPUSH
29113: CALL_OW 300
29117: IFFALSE 29145
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29119: LD_EXP 114
29123: PUSH
29124: LD_VAR 0 1
29128: ARRAY
29129: PPUSH
29130: LD_EXP 115
29134: PUSH
29135: LD_VAR 0 1
29139: ARRAY
29140: PPUSH
29141: CALL_OW 505
// if not minerMinesList [ i ] then
29145: LD_EXP 115
29149: PUSH
29150: LD_VAR 0 1
29154: ARRAY
29155: NOT
29156: IFFALSE 29160
// continue ;
29158: GO 29099
// for j := minerMinesList [ i ] downto 1 do
29160: LD_ADDR_VAR 0 2
29164: PUSH
29165: DOUBLE
29166: LD_EXP 115
29170: PUSH
29171: LD_VAR 0 1
29175: ARRAY
29176: INC
29177: ST_TO_ADDR
29178: LD_INT 1
29180: PUSH
29181: FOR_DOWNTO
29182: IFFALSE 29432
// begin side := GetSide ( minersList [ i ] ) ;
29184: LD_ADDR_VAR 0 3
29188: PUSH
29189: LD_EXP 114
29193: PUSH
29194: LD_VAR 0 1
29198: ARRAY
29199: PPUSH
29200: CALL_OW 255
29204: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29205: LD_ADDR_VAR 0 4
29209: PUSH
29210: LD_EXP 115
29214: PUSH
29215: LD_VAR 0 1
29219: ARRAY
29220: PUSH
29221: LD_VAR 0 2
29225: ARRAY
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: PPUSH
29231: LD_EXP 115
29235: PUSH
29236: LD_VAR 0 1
29240: ARRAY
29241: PUSH
29242: LD_VAR 0 2
29246: ARRAY
29247: PUSH
29248: LD_INT 2
29250: ARRAY
29251: PPUSH
29252: CALL_OW 428
29256: ST_TO_ADDR
// if not tmp then
29257: LD_VAR 0 4
29261: NOT
29262: IFFALSE 29266
// continue ;
29264: GO 29181
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29266: LD_VAR 0 4
29270: PUSH
29271: LD_INT 81
29273: PUSH
29274: LD_VAR 0 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PPUSH
29283: CALL_OW 69
29287: IN
29288: PUSH
29289: LD_EXP 115
29293: PUSH
29294: LD_VAR 0 1
29298: ARRAY
29299: PUSH
29300: LD_VAR 0 2
29304: ARRAY
29305: PUSH
29306: LD_INT 1
29308: ARRAY
29309: PPUSH
29310: LD_EXP 115
29314: PUSH
29315: LD_VAR 0 1
29319: ARRAY
29320: PUSH
29321: LD_VAR 0 2
29325: ARRAY
29326: PUSH
29327: LD_INT 2
29329: ARRAY
29330: PPUSH
29331: CALL_OW 458
29335: AND
29336: IFFALSE 29430
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29338: LD_EXP 115
29342: PUSH
29343: LD_VAR 0 1
29347: ARRAY
29348: PUSH
29349: LD_VAR 0 2
29353: ARRAY
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: PPUSH
29359: LD_EXP 115
29363: PUSH
29364: LD_VAR 0 1
29368: ARRAY
29369: PUSH
29370: LD_VAR 0 2
29374: ARRAY
29375: PUSH
29376: LD_INT 2
29378: ARRAY
29379: PPUSH
29380: LD_VAR 0 3
29384: PPUSH
29385: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29389: LD_ADDR_EXP 115
29393: PUSH
29394: LD_EXP 115
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: LD_EXP 115
29408: PUSH
29409: LD_VAR 0 1
29413: ARRAY
29414: PPUSH
29415: LD_VAR 0 2
29419: PPUSH
29420: CALL_OW 3
29424: PPUSH
29425: CALL_OW 1
29429: ST_TO_ADDR
// end ; end ;
29430: GO 29181
29432: POP
29433: POP
// end ;
29434: GO 29099
29436: POP
29437: POP
// end ;
29438: PPOPN 4
29440: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
// result := false ;
29445: LD_ADDR_VAR 0 4
29449: PUSH
29450: LD_INT 0
29452: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29453: LD_VAR 0 1
29457: PPUSH
29458: CALL_OW 264
29462: PUSH
29463: LD_INT 81
29465: EQUAL
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29711
// index := GetElementIndex ( minersList , unit ) ;
29471: LD_ADDR_VAR 0 5
29475: PUSH
29476: LD_EXP 114
29480: PPUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL 35844 0 2
29490: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29491: LD_EXP 115
29495: PUSH
29496: LD_VAR 0 5
29500: ARRAY
29501: PUSH
29502: LD_EXP 116
29506: GREATEREQUAL
29507: IFFALSE 29511
// exit ;
29509: GO 29711
// ComMoveXY ( unit , x , y ) ;
29511: LD_VAR 0 1
29515: PPUSH
29516: LD_VAR 0 2
29520: PPUSH
29521: LD_VAR 0 3
29525: PPUSH
29526: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29530: LD_INT 35
29532: PPUSH
29533: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29537: LD_VAR 0 1
29541: PPUSH
29542: LD_VAR 0 2
29546: PPUSH
29547: LD_VAR 0 3
29551: PPUSH
29552: CALL 67107 0 3
29556: NOT
29557: PUSH
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 314
29567: AND
29568: IFFALSE 29572
// exit ;
29570: GO 29711
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29572: LD_VAR 0 2
29576: PPUSH
29577: LD_VAR 0 3
29581: PPUSH
29582: CALL_OW 428
29586: PUSH
29587: LD_VAR 0 1
29591: EQUAL
29592: PUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 314
29602: NOT
29603: AND
29604: IFFALSE 29530
// PlaySoundXY ( x , y , PlantMine ) ;
29606: LD_VAR 0 2
29610: PPUSH
29611: LD_VAR 0 3
29615: PPUSH
29616: LD_STRING PlantMine
29618: PPUSH
29619: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29623: LD_VAR 0 2
29627: PPUSH
29628: LD_VAR 0 3
29632: PPUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 255
29642: PPUSH
29643: LD_INT 0
29645: PPUSH
29646: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29650: LD_ADDR_EXP 115
29654: PUSH
29655: LD_EXP 115
29659: PPUSH
29660: LD_VAR 0 5
29664: PUSH
29665: LD_EXP 115
29669: PUSH
29670: LD_VAR 0 5
29674: ARRAY
29675: PUSH
29676: LD_INT 1
29678: PLUS
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: LD_VAR 0 2
29688: PUSH
29689: LD_VAR 0 3
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PPUSH
29698: CALL 36059 0 3
29702: ST_TO_ADDR
// result := true ;
29703: LD_ADDR_VAR 0 4
29707: PUSH
29708: LD_INT 1
29710: ST_TO_ADDR
// end ;
29711: LD_VAR 0 4
29715: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
29720: PPUSH
// if not unit in minersList then
29721: LD_VAR 0 1
29725: PUSH
29726: LD_EXP 114
29730: IN
29731: NOT
29732: IFFALSE 29736
// exit ;
29734: GO 30128
// index := GetElementIndex ( minersList , unit ) ;
29736: LD_ADDR_VAR 0 6
29740: PUSH
29741: LD_EXP 114
29745: PPUSH
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL 35844 0 2
29755: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29756: LD_ADDR_VAR 0 5
29760: PUSH
29761: DOUBLE
29762: LD_EXP 115
29766: PUSH
29767: LD_VAR 0 6
29771: ARRAY
29772: INC
29773: ST_TO_ADDR
29774: LD_INT 1
29776: PUSH
29777: FOR_DOWNTO
29778: IFFALSE 29939
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29780: LD_EXP 115
29784: PUSH
29785: LD_VAR 0 6
29789: ARRAY
29790: PUSH
29791: LD_VAR 0 5
29795: ARRAY
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: PUSH
29801: LD_VAR 0 2
29805: EQUAL
29806: PUSH
29807: LD_EXP 115
29811: PUSH
29812: LD_VAR 0 6
29816: ARRAY
29817: PUSH
29818: LD_VAR 0 5
29822: ARRAY
29823: PUSH
29824: LD_INT 2
29826: ARRAY
29827: PUSH
29828: LD_VAR 0 3
29832: EQUAL
29833: AND
29834: IFFALSE 29937
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29836: LD_EXP 115
29840: PUSH
29841: LD_VAR 0 6
29845: ARRAY
29846: PUSH
29847: LD_VAR 0 5
29851: ARRAY
29852: PUSH
29853: LD_INT 1
29855: ARRAY
29856: PPUSH
29857: LD_EXP 115
29861: PUSH
29862: LD_VAR 0 6
29866: ARRAY
29867: PUSH
29868: LD_VAR 0 5
29872: ARRAY
29873: PUSH
29874: LD_INT 2
29876: ARRAY
29877: PPUSH
29878: LD_VAR 0 1
29882: PPUSH
29883: CALL_OW 255
29887: PPUSH
29888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29892: LD_ADDR_EXP 115
29896: PUSH
29897: LD_EXP 115
29901: PPUSH
29902: LD_VAR 0 6
29906: PPUSH
29907: LD_EXP 115
29911: PUSH
29912: LD_VAR 0 6
29916: ARRAY
29917: PPUSH
29918: LD_VAR 0 5
29922: PPUSH
29923: CALL_OW 3
29927: PPUSH
29928: CALL_OW 1
29932: ST_TO_ADDR
// exit ;
29933: POP
29934: POP
29935: GO 30128
// end ; end ;
29937: GO 29777
29939: POP
29940: POP
// for i := minerMinesList [ index ] downto 1 do
29941: LD_ADDR_VAR 0 5
29945: PUSH
29946: DOUBLE
29947: LD_EXP 115
29951: PUSH
29952: LD_VAR 0 6
29956: ARRAY
29957: INC
29958: ST_TO_ADDR
29959: LD_INT 1
29961: PUSH
29962: FOR_DOWNTO
29963: IFFALSE 30126
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29965: LD_EXP 115
29969: PUSH
29970: LD_VAR 0 6
29974: ARRAY
29975: PUSH
29976: LD_VAR 0 5
29980: ARRAY
29981: PUSH
29982: LD_INT 1
29984: ARRAY
29985: PPUSH
29986: LD_EXP 115
29990: PUSH
29991: LD_VAR 0 6
29995: ARRAY
29996: PUSH
29997: LD_VAR 0 5
30001: ARRAY
30002: PUSH
30003: LD_INT 2
30005: ARRAY
30006: PPUSH
30007: LD_VAR 0 2
30011: PPUSH
30012: LD_VAR 0 3
30016: PPUSH
30017: CALL_OW 298
30021: PUSH
30022: LD_INT 6
30024: LESS
30025: IFFALSE 30124
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30027: LD_EXP 115
30031: PUSH
30032: LD_VAR 0 6
30036: ARRAY
30037: PUSH
30038: LD_VAR 0 5
30042: ARRAY
30043: PUSH
30044: LD_INT 1
30046: ARRAY
30047: PPUSH
30048: LD_EXP 115
30052: PUSH
30053: LD_VAR 0 6
30057: ARRAY
30058: PUSH
30059: LD_VAR 0 5
30063: ARRAY
30064: PUSH
30065: LD_INT 2
30067: ARRAY
30068: PPUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 255
30078: PPUSH
30079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30083: LD_ADDR_EXP 115
30087: PUSH
30088: LD_EXP 115
30092: PPUSH
30093: LD_VAR 0 6
30097: PPUSH
30098: LD_EXP 115
30102: PUSH
30103: LD_VAR 0 6
30107: ARRAY
30108: PPUSH
30109: LD_VAR 0 5
30113: PPUSH
30114: CALL_OW 3
30118: PPUSH
30119: CALL_OW 1
30123: ST_TO_ADDR
// end ; end ;
30124: GO 29962
30126: POP
30127: POP
// end ;
30128: LD_VAR 0 4
30132: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30133: LD_INT 0
30135: PPUSH
30136: PPUSH
30137: PPUSH
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 264
30153: PUSH
30154: LD_INT 81
30156: EQUAL
30157: NOT
30158: PUSH
30159: LD_VAR 0 1
30163: PUSH
30164: LD_EXP 114
30168: IN
30169: NOT
30170: OR
30171: IFFALSE 30175
// exit ;
30173: GO 30497
// index := GetElementIndex ( minersList , unit ) ;
30175: LD_ADDR_VAR 0 6
30179: PUSH
30180: LD_EXP 114
30184: PPUSH
30185: LD_VAR 0 1
30189: PPUSH
30190: CALL 35844 0 2
30194: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30195: LD_ADDR_VAR 0 8
30199: PUSH
30200: LD_EXP 116
30204: PUSH
30205: LD_EXP 115
30209: PUSH
30210: LD_VAR 0 6
30214: ARRAY
30215: MINUS
30216: ST_TO_ADDR
// if not minesFreeAmount then
30217: LD_VAR 0 8
30221: NOT
30222: IFFALSE 30226
// exit ;
30224: GO 30497
// tmp := [ ] ;
30226: LD_ADDR_VAR 0 7
30230: PUSH
30231: EMPTY
30232: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: DOUBLE
30239: LD_INT 1
30241: DEC
30242: ST_TO_ADDR
30243: LD_VAR 0 8
30247: PUSH
30248: FOR_TO
30249: IFFALSE 30444
// begin _d := rand ( 0 , 5 ) ;
30251: LD_ADDR_VAR 0 11
30255: PUSH
30256: LD_INT 0
30258: PPUSH
30259: LD_INT 5
30261: PPUSH
30262: CALL_OW 12
30266: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30267: LD_ADDR_VAR 0 12
30271: PUSH
30272: LD_INT 2
30274: PPUSH
30275: LD_INT 6
30277: PPUSH
30278: CALL_OW 12
30282: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30283: LD_ADDR_VAR 0 9
30287: PUSH
30288: LD_VAR 0 2
30292: PPUSH
30293: LD_VAR 0 11
30297: PPUSH
30298: LD_VAR 0 12
30302: PPUSH
30303: CALL_OW 272
30307: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30308: LD_ADDR_VAR 0 10
30312: PUSH
30313: LD_VAR 0 3
30317: PPUSH
30318: LD_VAR 0 11
30322: PPUSH
30323: LD_VAR 0 12
30327: PPUSH
30328: CALL_OW 273
30332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30333: LD_VAR 0 9
30337: PPUSH
30338: LD_VAR 0 10
30342: PPUSH
30343: CALL_OW 488
30347: PUSH
30348: LD_VAR 0 9
30352: PUSH
30353: LD_VAR 0 10
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_VAR 0 7
30366: IN
30367: NOT
30368: AND
30369: PUSH
30370: LD_VAR 0 9
30374: PPUSH
30375: LD_VAR 0 10
30379: PPUSH
30380: CALL_OW 458
30384: NOT
30385: AND
30386: IFFALSE 30428
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30388: LD_ADDR_VAR 0 7
30392: PUSH
30393: LD_VAR 0 7
30397: PPUSH
30398: LD_VAR 0 7
30402: PUSH
30403: LD_INT 1
30405: PLUS
30406: PPUSH
30407: LD_VAR 0 9
30411: PUSH
30412: LD_VAR 0 10
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PPUSH
30421: CALL_OW 1
30425: ST_TO_ADDR
30426: GO 30442
// i := i - 1 ;
30428: LD_ADDR_VAR 0 5
30432: PUSH
30433: LD_VAR 0 5
30437: PUSH
30438: LD_INT 1
30440: MINUS
30441: ST_TO_ADDR
// end ;
30442: GO 30248
30444: POP
30445: POP
// for i in tmp do
30446: LD_ADDR_VAR 0 5
30450: PUSH
30451: LD_VAR 0 7
30455: PUSH
30456: FOR_IN
30457: IFFALSE 30495
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30459: LD_VAR 0 1
30463: PPUSH
30464: LD_VAR 0 5
30468: PUSH
30469: LD_INT 1
30471: ARRAY
30472: PPUSH
30473: LD_VAR 0 5
30477: PUSH
30478: LD_INT 2
30480: ARRAY
30481: PPUSH
30482: CALL 29441 0 3
30486: NOT
30487: IFFALSE 30493
// exit ;
30489: POP
30490: POP
30491: GO 30497
30493: GO 30456
30495: POP
30496: POP
// end ;
30497: LD_VAR 0 4
30501: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
// if not GetClass ( unit ) = class_sniper then
30511: LD_VAR 0 1
30515: PPUSH
30516: CALL_OW 257
30520: PUSH
30521: LD_INT 5
30523: EQUAL
30524: NOT
30525: IFFALSE 30529
// exit ;
30527: GO 30917
// dist := 8 ;
30529: LD_ADDR_VAR 0 5
30533: PUSH
30534: LD_INT 8
30536: ST_TO_ADDR
// viewRange := 12 ;
30537: LD_ADDR_VAR 0 7
30541: PUSH
30542: LD_INT 12
30544: ST_TO_ADDR
// side := GetSide ( unit ) ;
30545: LD_ADDR_VAR 0 6
30549: PUSH
30550: LD_VAR 0 1
30554: PPUSH
30555: CALL_OW 255
30559: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30560: LD_INT 61
30562: PPUSH
30563: LD_VAR 0 6
30567: PPUSH
30568: CALL_OW 321
30572: PUSH
30573: LD_INT 2
30575: EQUAL
30576: IFFALSE 30586
// viewRange := 16 ;
30578: LD_ADDR_VAR 0 7
30582: PUSH
30583: LD_INT 16
30585: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30586: LD_VAR 0 1
30590: PPUSH
30591: LD_VAR 0 2
30595: PPUSH
30596: LD_VAR 0 3
30600: PPUSH
30601: CALL_OW 297
30605: PUSH
30606: LD_VAR 0 5
30610: GREATER
30611: IFFALSE 30690
// begin ComMoveXY ( unit , x , y ) ;
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_VAR 0 2
30622: PPUSH
30623: LD_VAR 0 3
30627: PPUSH
30628: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30632: LD_INT 35
30634: PPUSH
30635: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30639: LD_VAR 0 1
30643: PPUSH
30644: LD_VAR 0 2
30648: PPUSH
30649: LD_VAR 0 3
30653: PPUSH
30654: CALL 67107 0 3
30658: NOT
30659: IFFALSE 30663
// exit ;
30661: GO 30917
// until GetDistUnitXY ( unit , x , y ) < dist ;
30663: LD_VAR 0 1
30667: PPUSH
30668: LD_VAR 0 2
30672: PPUSH
30673: LD_VAR 0 3
30677: PPUSH
30678: CALL_OW 297
30682: PUSH
30683: LD_VAR 0 5
30687: LESS
30688: IFFALSE 30632
// end ; ComTurnXY ( unit , x , y ) ;
30690: LD_VAR 0 1
30694: PPUSH
30695: LD_VAR 0 2
30699: PPUSH
30700: LD_VAR 0 3
30704: PPUSH
30705: CALL_OW 118
// wait ( 5 ) ;
30709: LD_INT 5
30711: PPUSH
30712: CALL_OW 67
// _d := GetDir ( unit ) ;
30716: LD_ADDR_VAR 0 10
30720: PUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 254
30730: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30731: LD_ADDR_VAR 0 8
30735: PUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 250
30745: PPUSH
30746: LD_VAR 0 10
30750: PPUSH
30751: LD_VAR 0 5
30755: PPUSH
30756: CALL_OW 272
30760: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30761: LD_ADDR_VAR 0 9
30765: PUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 251
30775: PPUSH
30776: LD_VAR 0 10
30780: PPUSH
30781: LD_VAR 0 5
30785: PPUSH
30786: CALL_OW 273
30790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30791: LD_VAR 0 8
30795: PPUSH
30796: LD_VAR 0 9
30800: PPUSH
30801: CALL_OW 488
30805: NOT
30806: IFFALSE 30810
// exit ;
30808: GO 30917
// ComAnimCustom ( unit , 1 ) ;
30810: LD_VAR 0 1
30814: PPUSH
30815: LD_INT 1
30817: PPUSH
30818: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30822: LD_VAR 0 8
30826: PPUSH
30827: LD_VAR 0 9
30831: PPUSH
30832: LD_VAR 0 6
30836: PPUSH
30837: LD_VAR 0 7
30841: PPUSH
30842: CALL_OW 330
// repeat wait ( 1 ) ;
30846: LD_INT 1
30848: PPUSH
30849: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 316
30862: PUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 314
30872: OR
30873: PUSH
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL_OW 302
30883: NOT
30884: OR
30885: PUSH
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 301
30895: OR
30896: IFFALSE 30846
// RemoveSeeing ( _x , _y , side ) ;
30898: LD_VAR 0 8
30902: PPUSH
30903: LD_VAR 0 9
30907: PPUSH
30908: LD_VAR 0 6
30912: PPUSH
30913: CALL_OW 331
// end ; end_of_file
30917: LD_VAR 0 4
30921: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30922: LD_INT 0
30924: PPUSH
30925: PPUSH
// if exist_mode then
30926: LD_VAR 0 2
30930: IFFALSE 30955
// unit := CreateCharacter ( prefix & ident ) else
30932: LD_ADDR_VAR 0 5
30936: PUSH
30937: LD_VAR 0 3
30941: PUSH
30942: LD_VAR 0 1
30946: STR
30947: PPUSH
30948: CALL_OW 34
30952: ST_TO_ADDR
30953: GO 30970
// unit := NewCharacter ( ident ) ;
30955: LD_ADDR_VAR 0 5
30959: PUSH
30960: LD_VAR 0 1
30964: PPUSH
30965: CALL_OW 25
30969: ST_TO_ADDR
// result := unit ;
30970: LD_ADDR_VAR 0 4
30974: PUSH
30975: LD_VAR 0 5
30979: ST_TO_ADDR
// end ;
30980: LD_VAR 0 4
30984: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
// if not side or not nation then
30989: LD_VAR 0 1
30993: NOT
30994: PUSH
30995: LD_VAR 0 2
30999: NOT
31000: OR
31001: IFFALSE 31005
// exit ;
31003: GO 31773
// case nation of nation_american :
31005: LD_VAR 0 2
31009: PUSH
31010: LD_INT 1
31012: DOUBLE
31013: EQUAL
31014: IFTRUE 31018
31016: GO 31232
31018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31019: LD_ADDR_VAR 0 4
31023: PUSH
31024: LD_INT 35
31026: PUSH
31027: LD_INT 45
31029: PUSH
31030: LD_INT 46
31032: PUSH
31033: LD_INT 47
31035: PUSH
31036: LD_INT 82
31038: PUSH
31039: LD_INT 83
31041: PUSH
31042: LD_INT 84
31044: PUSH
31045: LD_INT 85
31047: PUSH
31048: LD_INT 86
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 6
31059: PUSH
31060: LD_INT 15
31062: PUSH
31063: LD_INT 16
31065: PUSH
31066: LD_INT 7
31068: PUSH
31069: LD_INT 12
31071: PUSH
31072: LD_INT 13
31074: PUSH
31075: LD_INT 10
31077: PUSH
31078: LD_INT 14
31080: PUSH
31081: LD_INT 20
31083: PUSH
31084: LD_INT 21
31086: PUSH
31087: LD_INT 22
31089: PUSH
31090: LD_INT 25
31092: PUSH
31093: LD_INT 32
31095: PUSH
31096: LD_INT 27
31098: PUSH
31099: LD_INT 36
31101: PUSH
31102: LD_INT 69
31104: PUSH
31105: LD_INT 39
31107: PUSH
31108: LD_INT 34
31110: PUSH
31111: LD_INT 40
31113: PUSH
31114: LD_INT 48
31116: PUSH
31117: LD_INT 49
31119: PUSH
31120: LD_INT 50
31122: PUSH
31123: LD_INT 51
31125: PUSH
31126: LD_INT 52
31128: PUSH
31129: LD_INT 53
31131: PUSH
31132: LD_INT 54
31134: PUSH
31135: LD_INT 55
31137: PUSH
31138: LD_INT 56
31140: PUSH
31141: LD_INT 57
31143: PUSH
31144: LD_INT 58
31146: PUSH
31147: LD_INT 59
31149: PUSH
31150: LD_INT 60
31152: PUSH
31153: LD_INT 61
31155: PUSH
31156: LD_INT 62
31158: PUSH
31159: LD_INT 80
31161: PUSH
31162: LD_INT 82
31164: PUSH
31165: LD_INT 83
31167: PUSH
31168: LD_INT 84
31170: PUSH
31171: LD_INT 85
31173: PUSH
31174: LD_INT 86
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
31230: GO 31697
31232: LD_INT 2
31234: DOUBLE
31235: EQUAL
31236: IFTRUE 31240
31238: GO 31466
31240: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31241: LD_ADDR_VAR 0 4
31245: PUSH
31246: LD_INT 35
31248: PUSH
31249: LD_INT 45
31251: PUSH
31252: LD_INT 46
31254: PUSH
31255: LD_INT 47
31257: PUSH
31258: LD_INT 82
31260: PUSH
31261: LD_INT 83
31263: PUSH
31264: LD_INT 84
31266: PUSH
31267: LD_INT 85
31269: PUSH
31270: LD_INT 87
31272: PUSH
31273: LD_INT 70
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 11
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: LD_INT 5
31290: PUSH
31291: LD_INT 6
31293: PUSH
31294: LD_INT 15
31296: PUSH
31297: LD_INT 18
31299: PUSH
31300: LD_INT 7
31302: PUSH
31303: LD_INT 17
31305: PUSH
31306: LD_INT 8
31308: PUSH
31309: LD_INT 20
31311: PUSH
31312: LD_INT 21
31314: PUSH
31315: LD_INT 22
31317: PUSH
31318: LD_INT 72
31320: PUSH
31321: LD_INT 26
31323: PUSH
31324: LD_INT 69
31326: PUSH
31327: LD_INT 39
31329: PUSH
31330: LD_INT 40
31332: PUSH
31333: LD_INT 41
31335: PUSH
31336: LD_INT 42
31338: PUSH
31339: LD_INT 43
31341: PUSH
31342: LD_INT 48
31344: PUSH
31345: LD_INT 49
31347: PUSH
31348: LD_INT 50
31350: PUSH
31351: LD_INT 51
31353: PUSH
31354: LD_INT 52
31356: PUSH
31357: LD_INT 53
31359: PUSH
31360: LD_INT 54
31362: PUSH
31363: LD_INT 55
31365: PUSH
31366: LD_INT 56
31368: PUSH
31369: LD_INT 60
31371: PUSH
31372: LD_INT 61
31374: PUSH
31375: LD_INT 62
31377: PUSH
31378: LD_INT 66
31380: PUSH
31381: LD_INT 67
31383: PUSH
31384: LD_INT 68
31386: PUSH
31387: LD_INT 81
31389: PUSH
31390: LD_INT 82
31392: PUSH
31393: LD_INT 83
31395: PUSH
31396: LD_INT 84
31398: PUSH
31399: LD_INT 85
31401: PUSH
31402: LD_INT 87
31404: PUSH
31405: LD_INT 88
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
31464: GO 31697
31466: LD_INT 3
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31696
31474: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31475: LD_ADDR_VAR 0 4
31479: PUSH
31480: LD_INT 46
31482: PUSH
31483: LD_INT 47
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 82
31494: PUSH
31495: LD_INT 83
31497: PUSH
31498: LD_INT 84
31500: PUSH
31501: LD_INT 85
31503: PUSH
31504: LD_INT 86
31506: PUSH
31507: LD_INT 11
31509: PUSH
31510: LD_INT 9
31512: PUSH
31513: LD_INT 20
31515: PUSH
31516: LD_INT 19
31518: PUSH
31519: LD_INT 21
31521: PUSH
31522: LD_INT 24
31524: PUSH
31525: LD_INT 22
31527: PUSH
31528: LD_INT 25
31530: PUSH
31531: LD_INT 28
31533: PUSH
31534: LD_INT 29
31536: PUSH
31537: LD_INT 30
31539: PUSH
31540: LD_INT 31
31542: PUSH
31543: LD_INT 37
31545: PUSH
31546: LD_INT 38
31548: PUSH
31549: LD_INT 32
31551: PUSH
31552: LD_INT 27
31554: PUSH
31555: LD_INT 33
31557: PUSH
31558: LD_INT 69
31560: PUSH
31561: LD_INT 39
31563: PUSH
31564: LD_INT 34
31566: PUSH
31567: LD_INT 40
31569: PUSH
31570: LD_INT 71
31572: PUSH
31573: LD_INT 23
31575: PUSH
31576: LD_INT 44
31578: PUSH
31579: LD_INT 48
31581: PUSH
31582: LD_INT 49
31584: PUSH
31585: LD_INT 50
31587: PUSH
31588: LD_INT 51
31590: PUSH
31591: LD_INT 52
31593: PUSH
31594: LD_INT 53
31596: PUSH
31597: LD_INT 54
31599: PUSH
31600: LD_INT 55
31602: PUSH
31603: LD_INT 56
31605: PUSH
31606: LD_INT 57
31608: PUSH
31609: LD_INT 58
31611: PUSH
31612: LD_INT 59
31614: PUSH
31615: LD_INT 63
31617: PUSH
31618: LD_INT 64
31620: PUSH
31621: LD_INT 65
31623: PUSH
31624: LD_INT 82
31626: PUSH
31627: LD_INT 83
31629: PUSH
31630: LD_INT 84
31632: PUSH
31633: LD_INT 85
31635: PUSH
31636: LD_INT 86
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
31694: GO 31697
31696: POP
// if state > - 1 and state < 3 then
31697: LD_VAR 0 3
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: GREATER
31706: PUSH
31707: LD_VAR 0 3
31711: PUSH
31712: LD_INT 3
31714: LESS
31715: AND
31716: IFFALSE 31773
// for i in result do
31718: LD_ADDR_VAR 0 5
31722: PUSH
31723: LD_VAR 0 4
31727: PUSH
31728: FOR_IN
31729: IFFALSE 31771
// if GetTech ( i , side ) <> state then
31731: LD_VAR 0 5
31735: PPUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL_OW 321
31745: PUSH
31746: LD_VAR 0 3
31750: NONEQUAL
31751: IFFALSE 31769
// result := result diff i ;
31753: LD_ADDR_VAR 0 4
31757: PUSH
31758: LD_VAR 0 4
31762: PUSH
31763: LD_VAR 0 5
31767: DIFF
31768: ST_TO_ADDR
31769: GO 31728
31771: POP
31772: POP
// end ;
31773: LD_VAR 0 4
31777: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31778: LD_INT 0
31780: PPUSH
31781: PPUSH
31782: PPUSH
// result := true ;
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_INT 1
31790: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31791: LD_ADDR_VAR 0 5
31795: PUSH
31796: LD_VAR 0 2
31800: PPUSH
31801: CALL_OW 480
31805: ST_TO_ADDR
// if not tmp then
31806: LD_VAR 0 5
31810: NOT
31811: IFFALSE 31815
// exit ;
31813: GO 31864
// for i in tmp do
31815: LD_ADDR_VAR 0 4
31819: PUSH
31820: LD_VAR 0 5
31824: PUSH
31825: FOR_IN
31826: IFFALSE 31862
// if GetTech ( i , side ) <> state_researched then
31828: LD_VAR 0 4
31832: PPUSH
31833: LD_VAR 0 1
31837: PPUSH
31838: CALL_OW 321
31842: PUSH
31843: LD_INT 2
31845: NONEQUAL
31846: IFFALSE 31860
// begin result := false ;
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_INT 0
31855: ST_TO_ADDR
// exit ;
31856: POP
31857: POP
31858: GO 31864
// end ;
31860: GO 31825
31862: POP
31863: POP
// end ;
31864: LD_VAR 0 3
31868: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31869: LD_INT 0
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
31875: PPUSH
31876: PPUSH
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31884: LD_VAR 0 1
31888: NOT
31889: PUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 257
31899: PUSH
31900: LD_INT 9
31902: NONEQUAL
31903: OR
31904: IFFALSE 31908
// exit ;
31906: GO 32481
// side := GetSide ( unit ) ;
31908: LD_ADDR_VAR 0 9
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL_OW 255
31922: ST_TO_ADDR
// tech_space := tech_spacanom ;
31923: LD_ADDR_VAR 0 12
31927: PUSH
31928: LD_INT 29
31930: ST_TO_ADDR
// tech_time := tech_taurad ;
31931: LD_ADDR_VAR 0 13
31935: PUSH
31936: LD_INT 28
31938: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31939: LD_ADDR_VAR 0 11
31943: PUSH
31944: LD_VAR 0 1
31948: PPUSH
31949: CALL_OW 310
31953: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31954: LD_VAR 0 11
31958: PPUSH
31959: CALL_OW 247
31963: PUSH
31964: LD_INT 2
31966: EQUAL
31967: IFFALSE 31971
// exit ;
31969: GO 32481
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31971: LD_ADDR_VAR 0 8
31975: PUSH
31976: LD_INT 81
31978: PUSH
31979: LD_VAR 0 9
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 3
31990: PUSH
31991: LD_INT 21
31993: PUSH
31994: LD_INT 3
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PPUSH
32009: CALL_OW 69
32013: ST_TO_ADDR
// if not tmp then
32014: LD_VAR 0 8
32018: NOT
32019: IFFALSE 32023
// exit ;
32021: GO 32481
// if in_unit then
32023: LD_VAR 0 11
32027: IFFALSE 32051
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32029: LD_ADDR_VAR 0 10
32033: PUSH
32034: LD_VAR 0 8
32038: PPUSH
32039: LD_VAR 0 11
32043: PPUSH
32044: CALL_OW 74
32048: ST_TO_ADDR
32049: GO 32071
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32051: LD_ADDR_VAR 0 10
32055: PUSH
32056: LD_VAR 0 8
32060: PPUSH
32061: LD_VAR 0 1
32065: PPUSH
32066: CALL_OW 74
32070: ST_TO_ADDR
// if not enemy then
32071: LD_VAR 0 10
32075: NOT
32076: IFFALSE 32080
// exit ;
32078: GO 32481
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32080: LD_VAR 0 11
32084: PUSH
32085: LD_VAR 0 11
32089: PPUSH
32090: LD_VAR 0 10
32094: PPUSH
32095: CALL_OW 296
32099: PUSH
32100: LD_INT 13
32102: GREATER
32103: AND
32104: PUSH
32105: LD_VAR 0 1
32109: PPUSH
32110: LD_VAR 0 10
32114: PPUSH
32115: CALL_OW 296
32119: PUSH
32120: LD_INT 12
32122: GREATER
32123: OR
32124: IFFALSE 32128
// exit ;
32126: GO 32481
// missile := [ 1 ] ;
32128: LD_ADDR_VAR 0 14
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32139: LD_VAR 0 9
32143: PPUSH
32144: LD_VAR 0 12
32148: PPUSH
32149: CALL_OW 325
32153: IFFALSE 32182
// missile := Replace ( missile , missile + 1 , 2 ) ;
32155: LD_ADDR_VAR 0 14
32159: PUSH
32160: LD_VAR 0 14
32164: PPUSH
32165: LD_VAR 0 14
32169: PUSH
32170: LD_INT 1
32172: PLUS
32173: PPUSH
32174: LD_INT 2
32176: PPUSH
32177: CALL_OW 1
32181: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32182: LD_VAR 0 9
32186: PPUSH
32187: LD_VAR 0 13
32191: PPUSH
32192: CALL_OW 325
32196: PUSH
32197: LD_VAR 0 10
32201: PPUSH
32202: CALL_OW 255
32206: PPUSH
32207: LD_VAR 0 13
32211: PPUSH
32212: CALL_OW 325
32216: NOT
32217: AND
32218: IFFALSE 32247
// missile := Replace ( missile , missile + 1 , 3 ) ;
32220: LD_ADDR_VAR 0 14
32224: PUSH
32225: LD_VAR 0 14
32229: PPUSH
32230: LD_VAR 0 14
32234: PUSH
32235: LD_INT 1
32237: PLUS
32238: PPUSH
32239: LD_INT 3
32241: PPUSH
32242: CALL_OW 1
32246: ST_TO_ADDR
// if missile < 2 then
32247: LD_VAR 0 14
32251: PUSH
32252: LD_INT 2
32254: LESS
32255: IFFALSE 32259
// exit ;
32257: GO 32481
// x := GetX ( enemy ) ;
32259: LD_ADDR_VAR 0 4
32263: PUSH
32264: LD_VAR 0 10
32268: PPUSH
32269: CALL_OW 250
32273: ST_TO_ADDR
// y := GetY ( enemy ) ;
32274: LD_ADDR_VAR 0 5
32278: PUSH
32279: LD_VAR 0 10
32283: PPUSH
32284: CALL_OW 251
32288: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32289: LD_ADDR_VAR 0 6
32293: PUSH
32294: LD_VAR 0 4
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PPUSH
32303: LD_INT 1
32305: PPUSH
32306: CALL_OW 12
32310: PLUS
32311: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32312: LD_ADDR_VAR 0 7
32316: PUSH
32317: LD_VAR 0 5
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PPUSH
32326: LD_INT 1
32328: PPUSH
32329: CALL_OW 12
32333: PLUS
32334: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32335: LD_VAR 0 6
32339: PPUSH
32340: LD_VAR 0 7
32344: PPUSH
32345: CALL_OW 488
32349: NOT
32350: IFFALSE 32372
// begin _x := x ;
32352: LD_ADDR_VAR 0 6
32356: PUSH
32357: LD_VAR 0 4
32361: ST_TO_ADDR
// _y := y ;
32362: LD_ADDR_VAR 0 7
32366: PUSH
32367: LD_VAR 0 5
32371: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32372: LD_ADDR_VAR 0 3
32376: PUSH
32377: LD_INT 1
32379: PPUSH
32380: LD_VAR 0 14
32384: PPUSH
32385: CALL_OW 12
32389: ST_TO_ADDR
// case i of 1 :
32390: LD_VAR 0 3
32394: PUSH
32395: LD_INT 1
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32420
32403: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32404: LD_VAR 0 1
32408: PPUSH
32409: LD_VAR 0 10
32413: PPUSH
32414: CALL_OW 115
32418: GO 32481
32420: LD_INT 2
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32428
32426: GO 32450
32428: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_VAR 0 6
32438: PPUSH
32439: LD_VAR 0 7
32443: PPUSH
32444: CALL_OW 153
32448: GO 32481
32450: LD_INT 3
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32480
32458: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32459: LD_VAR 0 1
32463: PPUSH
32464: LD_VAR 0 6
32468: PPUSH
32469: LD_VAR 0 7
32473: PPUSH
32474: CALL_OW 154
32478: GO 32481
32480: POP
// end ;
32481: LD_VAR 0 2
32485: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32486: LD_INT 0
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
// if not unit or not building then
32494: LD_VAR 0 1
32498: NOT
32499: PUSH
32500: LD_VAR 0 2
32504: NOT
32505: OR
32506: IFFALSE 32510
// exit ;
32508: GO 32668
// x := GetX ( building ) ;
32510: LD_ADDR_VAR 0 5
32514: PUSH
32515: LD_VAR 0 2
32519: PPUSH
32520: CALL_OW 250
32524: ST_TO_ADDR
// y := GetY ( building ) ;
32525: LD_ADDR_VAR 0 6
32529: PUSH
32530: LD_VAR 0 2
32534: PPUSH
32535: CALL_OW 251
32539: ST_TO_ADDR
// for i = 0 to 5 do
32540: LD_ADDR_VAR 0 4
32544: PUSH
32545: DOUBLE
32546: LD_INT 0
32548: DEC
32549: ST_TO_ADDR
32550: LD_INT 5
32552: PUSH
32553: FOR_TO
32554: IFFALSE 32666
// begin _x := ShiftX ( x , i , 3 ) ;
32556: LD_ADDR_VAR 0 7
32560: PUSH
32561: LD_VAR 0 5
32565: PPUSH
32566: LD_VAR 0 4
32570: PPUSH
32571: LD_INT 3
32573: PPUSH
32574: CALL_OW 272
32578: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32579: LD_ADDR_VAR 0 8
32583: PUSH
32584: LD_VAR 0 6
32588: PPUSH
32589: LD_VAR 0 4
32593: PPUSH
32594: LD_INT 3
32596: PPUSH
32597: CALL_OW 273
32601: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32602: LD_VAR 0 7
32606: PPUSH
32607: LD_VAR 0 8
32611: PPUSH
32612: CALL_OW 488
32616: NOT
32617: IFFALSE 32621
// continue ;
32619: GO 32553
// if HexInfo ( _x , _y ) = 0 then
32621: LD_VAR 0 7
32625: PPUSH
32626: LD_VAR 0 8
32630: PPUSH
32631: CALL_OW 428
32635: PUSH
32636: LD_INT 0
32638: EQUAL
32639: IFFALSE 32664
// begin ComMoveXY ( unit , _x , _y ) ;
32641: LD_VAR 0 1
32645: PPUSH
32646: LD_VAR 0 7
32650: PPUSH
32651: LD_VAR 0 8
32655: PPUSH
32656: CALL_OW 111
// exit ;
32660: POP
32661: POP
32662: GO 32668
// end ; end ;
32664: GO 32553
32666: POP
32667: POP
// end ;
32668: LD_VAR 0 3
32672: RET
// export function ScanBase ( side , base_area ) ; begin
32673: LD_INT 0
32675: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_VAR 0 2
32685: PPUSH
32686: LD_INT 81
32688: PUSH
32689: LD_VAR 0 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PPUSH
32698: CALL_OW 70
32702: ST_TO_ADDR
// end ;
32703: LD_VAR 0 3
32707: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32708: LD_INT 0
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
// result := false ;
32714: LD_ADDR_VAR 0 2
32718: PUSH
32719: LD_INT 0
32721: ST_TO_ADDR
// side := GetSide ( unit ) ;
32722: LD_ADDR_VAR 0 3
32726: PUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 255
32736: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32737: LD_ADDR_VAR 0 4
32741: PUSH
32742: LD_VAR 0 1
32746: PPUSH
32747: CALL_OW 248
32751: ST_TO_ADDR
// case nat of 1 :
32752: LD_VAR 0 4
32756: PUSH
32757: LD_INT 1
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32776
32765: POP
// tech := tech_lassight ; 2 :
32766: LD_ADDR_VAR 0 5
32770: PUSH
32771: LD_INT 12
32773: ST_TO_ADDR
32774: GO 32815
32776: LD_INT 2
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32795
32784: POP
// tech := tech_mortar ; 3 :
32785: LD_ADDR_VAR 0 5
32789: PUSH
32790: LD_INT 41
32792: ST_TO_ADDR
32793: GO 32815
32795: LD_INT 3
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32814
32803: POP
// tech := tech_bazooka ; end ;
32804: LD_ADDR_VAR 0 5
32808: PUSH
32809: LD_INT 44
32811: ST_TO_ADDR
32812: GO 32815
32814: POP
// if Researched ( side , tech ) then
32815: LD_VAR 0 3
32819: PPUSH
32820: LD_VAR 0 5
32824: PPUSH
32825: CALL_OW 325
32829: IFFALSE 32856
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32831: LD_ADDR_VAR 0 2
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: LD_INT 8
32841: PUSH
32842: LD_INT 9
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: PUSH
32850: LD_VAR 0 4
32854: ARRAY
32855: ST_TO_ADDR
// end ;
32856: LD_VAR 0 2
32860: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32861: LD_INT 0
32863: PPUSH
32864: PPUSH
32865: PPUSH
// if not mines then
32866: LD_VAR 0 2
32870: NOT
32871: IFFALSE 32875
// exit ;
32873: GO 33019
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32875: LD_ADDR_VAR 0 5
32879: PUSH
32880: LD_INT 81
32882: PUSH
32883: LD_VAR 0 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 21
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: ST_TO_ADDR
// for i in mines do
32918: LD_ADDR_VAR 0 4
32922: PUSH
32923: LD_VAR 0 2
32927: PUSH
32928: FOR_IN
32929: IFFALSE 33017
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32931: LD_VAR 0 4
32935: PUSH
32936: LD_INT 1
32938: ARRAY
32939: PPUSH
32940: LD_VAR 0 4
32944: PUSH
32945: LD_INT 2
32947: ARRAY
32948: PPUSH
32949: CALL_OW 458
32953: NOT
32954: IFFALSE 32958
// continue ;
32956: GO 32928
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32958: LD_VAR 0 4
32962: PUSH
32963: LD_INT 1
32965: ARRAY
32966: PPUSH
32967: LD_VAR 0 4
32971: PUSH
32972: LD_INT 2
32974: ARRAY
32975: PPUSH
32976: CALL_OW 428
32980: PUSH
32981: LD_VAR 0 5
32985: IN
32986: IFFALSE 33015
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32988: LD_VAR 0 4
32992: PUSH
32993: LD_INT 1
32995: ARRAY
32996: PPUSH
32997: LD_VAR 0 4
33001: PUSH
33002: LD_INT 2
33004: ARRAY
33005: PPUSH
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 456
// end ;
33015: GO 32928
33017: POP
33018: POP
// end ;
33019: LD_VAR 0 3
33023: RET
// export function Count ( array ) ; var i ; begin
33024: LD_INT 0
33026: PPUSH
33027: PPUSH
// result := 0 ;
33028: LD_ADDR_VAR 0 2
33032: PUSH
33033: LD_INT 0
33035: ST_TO_ADDR
// for i in array do
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_VAR 0 1
33045: PUSH
33046: FOR_IN
33047: IFFALSE 33071
// if i then
33049: LD_VAR 0 3
33053: IFFALSE 33069
// result := result + 1 ;
33055: LD_ADDR_VAR 0 2
33059: PUSH
33060: LD_VAR 0 2
33064: PUSH
33065: LD_INT 1
33067: PLUS
33068: ST_TO_ADDR
33069: GO 33046
33071: POP
33072: POP
// end ;
33073: LD_VAR 0 2
33077: RET
// export function IsEmpty ( building ) ; begin
33078: LD_INT 0
33080: PPUSH
// if not building then
33081: LD_VAR 0 1
33085: NOT
33086: IFFALSE 33090
// exit ;
33088: GO 33133
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33090: LD_ADDR_VAR 0 2
33094: PUSH
33095: LD_VAR 0 1
33099: PUSH
33100: LD_INT 22
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 255
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 58
33119: PUSH
33120: EMPTY
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PPUSH
33127: CALL_OW 69
33131: IN
33132: ST_TO_ADDR
// end ;
33133: LD_VAR 0 2
33137: RET
// export function IsNotFull ( building ) ; var places ; begin
33138: LD_INT 0
33140: PPUSH
33141: PPUSH
// if not building then
33142: LD_VAR 0 1
33146: NOT
33147: IFFALSE 33151
// exit ;
33149: GO 33322
// result := false ;
33151: LD_ADDR_VAR 0 2
33155: PUSH
33156: LD_INT 0
33158: ST_TO_ADDR
// places := 0 ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_INT 0
33166: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33167: LD_VAR 0 1
33171: PPUSH
33172: CALL_OW 266
33176: PUSH
33177: LD_INT 0
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33239
33183: LD_INT 1
33185: DOUBLE
33186: EQUAL
33187: IFTRUE 33239
33189: LD_INT 6
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33239
33195: LD_INT 7
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33239
33201: LD_INT 8
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33239
33207: LD_INT 4
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33239
33213: LD_INT 5
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33239
33219: LD_INT 2
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33239
33225: LD_INT 3
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33239
33231: LD_INT 35
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33239
33237: GO 33250
33239: POP
// places := 6 ; b_bunker , b_breastwork :
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: LD_INT 6
33247: ST_TO_ADDR
33248: GO 33295
33250: LD_INT 32
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33264
33256: LD_INT 31
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33264
33262: GO 33275
33264: POP
// places := 1 ; b_control_tower :
33265: LD_ADDR_VAR 0 3
33269: PUSH
33270: LD_INT 1
33272: ST_TO_ADDR
33273: GO 33295
33275: LD_INT 36
33277: DOUBLE
33278: EQUAL
33279: IFTRUE 33283
33281: GO 33294
33283: POP
// places := 3 ; end ;
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_INT 3
33291: ST_TO_ADDR
33292: GO 33295
33294: POP
// if places then
33295: LD_VAR 0 3
33299: IFFALSE 33322
// result := UnitsInside ( building ) < places ;
33301: LD_ADDR_VAR 0 2
33305: PUSH
33306: LD_VAR 0 1
33310: PPUSH
33311: CALL_OW 313
33315: PUSH
33316: LD_VAR 0 3
33320: LESS
33321: ST_TO_ADDR
// end ;
33322: LD_VAR 0 2
33326: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33327: LD_INT 0
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
// tmp := [ ] ;
33333: LD_ADDR_VAR 0 3
33337: PUSH
33338: EMPTY
33339: ST_TO_ADDR
// list := [ ] ;
33340: LD_ADDR_VAR 0 5
33344: PUSH
33345: EMPTY
33346: ST_TO_ADDR
// for i = 16 to 25 do
33347: LD_ADDR_VAR 0 4
33351: PUSH
33352: DOUBLE
33353: LD_INT 16
33355: DEC
33356: ST_TO_ADDR
33357: LD_INT 25
33359: PUSH
33360: FOR_TO
33361: IFFALSE 33434
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33363: LD_ADDR_VAR 0 3
33367: PUSH
33368: LD_VAR 0 3
33372: PUSH
33373: LD_INT 22
33375: PUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 255
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 91
33392: PUSH
33393: LD_VAR 0 1
33397: PUSH
33398: LD_INT 6
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 30
33408: PUSH
33409: LD_VAR 0 4
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: PUSH
33423: EMPTY
33424: LIST
33425: PPUSH
33426: CALL_OW 69
33430: ADD
33431: ST_TO_ADDR
33432: GO 33360
33434: POP
33435: POP
// for i = 1 to tmp do
33436: LD_ADDR_VAR 0 4
33440: PUSH
33441: DOUBLE
33442: LD_INT 1
33444: DEC
33445: ST_TO_ADDR
33446: LD_VAR 0 3
33450: PUSH
33451: FOR_TO
33452: IFFALSE 33540
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33454: LD_ADDR_VAR 0 5
33458: PUSH
33459: LD_VAR 0 5
33463: PUSH
33464: LD_VAR 0 3
33468: PUSH
33469: LD_VAR 0 4
33473: ARRAY
33474: PPUSH
33475: CALL_OW 266
33479: PUSH
33480: LD_VAR 0 3
33484: PUSH
33485: LD_VAR 0 4
33489: ARRAY
33490: PPUSH
33491: CALL_OW 250
33495: PUSH
33496: LD_VAR 0 3
33500: PUSH
33501: LD_VAR 0 4
33505: ARRAY
33506: PPUSH
33507: CALL_OW 251
33511: PUSH
33512: LD_VAR 0 3
33516: PUSH
33517: LD_VAR 0 4
33521: ARRAY
33522: PPUSH
33523: CALL_OW 254
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: ADD
33537: ST_TO_ADDR
33538: GO 33451
33540: POP
33541: POP
// result := list ;
33542: LD_ADDR_VAR 0 2
33546: PUSH
33547: LD_VAR 0 5
33551: ST_TO_ADDR
// end ;
33552: LD_VAR 0 2
33556: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33557: LD_INT 0
33559: PPUSH
33560: PPUSH
33561: PPUSH
33562: PPUSH
33563: PPUSH
33564: PPUSH
33565: PPUSH
// if not factory then
33566: LD_VAR 0 1
33570: NOT
33571: IFFALSE 33575
// exit ;
33573: GO 34168
// if control = control_apeman then
33575: LD_VAR 0 4
33579: PUSH
33580: LD_INT 5
33582: EQUAL
33583: IFFALSE 33692
// begin tmp := UnitsInside ( factory ) ;
33585: LD_ADDR_VAR 0 8
33589: PUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 313
33599: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33600: LD_VAR 0 8
33604: PPUSH
33605: LD_INT 25
33607: PUSH
33608: LD_INT 12
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PPUSH
33615: CALL_OW 72
33619: NOT
33620: IFFALSE 33630
// control := control_manual ;
33622: LD_ADDR_VAR 0 4
33626: PUSH
33627: LD_INT 1
33629: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33630: LD_ADDR_VAR 0 8
33634: PUSH
33635: LD_VAR 0 1
33639: PPUSH
33640: CALL 33327 0 1
33644: ST_TO_ADDR
// if tmp then
33645: LD_VAR 0 8
33649: IFFALSE 33692
// begin for i in tmp do
33651: LD_ADDR_VAR 0 7
33655: PUSH
33656: LD_VAR 0 8
33660: PUSH
33661: FOR_IN
33662: IFFALSE 33690
// if i [ 1 ] = b_ext_radio then
33664: LD_VAR 0 7
33668: PUSH
33669: LD_INT 1
33671: ARRAY
33672: PUSH
33673: LD_INT 22
33675: EQUAL
33676: IFFALSE 33688
// begin control := control_remote ;
33678: LD_ADDR_VAR 0 4
33682: PUSH
33683: LD_INT 2
33685: ST_TO_ADDR
// break ;
33686: GO 33690
// end ;
33688: GO 33661
33690: POP
33691: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33692: LD_VAR 0 1
33696: PPUSH
33697: LD_VAR 0 2
33701: PPUSH
33702: LD_VAR 0 3
33706: PPUSH
33707: LD_VAR 0 4
33711: PPUSH
33712: LD_VAR 0 5
33716: PPUSH
33717: CALL_OW 448
33721: IFFALSE 33756
// begin result := [ chassis , engine , control , weapon ] ;
33723: LD_ADDR_VAR 0 6
33727: PUSH
33728: LD_VAR 0 2
33732: PUSH
33733: LD_VAR 0 3
33737: PUSH
33738: LD_VAR 0 4
33742: PUSH
33743: LD_VAR 0 5
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: ST_TO_ADDR
// exit ;
33754: GO 34168
// end ; _chassis := AvailableChassisList ( factory ) ;
33756: LD_ADDR_VAR 0 9
33760: PUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL_OW 475
33770: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33771: LD_ADDR_VAR 0 11
33775: PUSH
33776: LD_VAR 0 1
33780: PPUSH
33781: CALL_OW 476
33785: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33786: LD_ADDR_VAR 0 12
33790: PUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 477
33800: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33801: LD_ADDR_VAR 0 10
33805: PUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 478
33815: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33816: LD_VAR 0 9
33820: NOT
33821: PUSH
33822: LD_VAR 0 11
33826: NOT
33827: OR
33828: PUSH
33829: LD_VAR 0 12
33833: NOT
33834: OR
33835: PUSH
33836: LD_VAR 0 10
33840: NOT
33841: OR
33842: IFFALSE 33877
// begin result := [ chassis , engine , control , weapon ] ;
33844: LD_ADDR_VAR 0 6
33848: PUSH
33849: LD_VAR 0 2
33853: PUSH
33854: LD_VAR 0 3
33858: PUSH
33859: LD_VAR 0 4
33863: PUSH
33864: LD_VAR 0 5
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: ST_TO_ADDR
// exit ;
33875: GO 34168
// end ; if not chassis in _chassis then
33877: LD_VAR 0 2
33881: PUSH
33882: LD_VAR 0 9
33886: IN
33887: NOT
33888: IFFALSE 33914
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33890: LD_ADDR_VAR 0 2
33894: PUSH
33895: LD_VAR 0 9
33899: PUSH
33900: LD_INT 1
33902: PPUSH
33903: LD_VAR 0 9
33907: PPUSH
33908: CALL_OW 12
33912: ARRAY
33913: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33914: LD_VAR 0 2
33918: PPUSH
33919: LD_VAR 0 3
33923: PPUSH
33924: CALL 34173 0 2
33928: NOT
33929: IFFALSE 33988
// repeat engine := _engine [ 1 ] ;
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: LD_VAR 0 11
33940: PUSH
33941: LD_INT 1
33943: ARRAY
33944: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33945: LD_ADDR_VAR 0 11
33949: PUSH
33950: LD_VAR 0 11
33954: PPUSH
33955: LD_INT 1
33957: PPUSH
33958: CALL_OW 3
33962: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33963: LD_VAR 0 2
33967: PPUSH
33968: LD_VAR 0 3
33972: PPUSH
33973: CALL 34173 0 2
33977: PUSH
33978: LD_VAR 0 11
33982: PUSH
33983: EMPTY
33984: EQUAL
33985: OR
33986: IFFALSE 33931
// if not control in _control then
33988: LD_VAR 0 4
33992: PUSH
33993: LD_VAR 0 12
33997: IN
33998: NOT
33999: IFFALSE 34025
// control := _control [ rand ( 1 , _control ) ] ;
34001: LD_ADDR_VAR 0 4
34005: PUSH
34006: LD_VAR 0 12
34010: PUSH
34011: LD_INT 1
34013: PPUSH
34014: LD_VAR 0 12
34018: PPUSH
34019: CALL_OW 12
34023: ARRAY
34024: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34025: LD_VAR 0 2
34029: PPUSH
34030: LD_VAR 0 5
34034: PPUSH
34035: CALL 34393 0 2
34039: NOT
34040: IFFALSE 34099
// repeat weapon := _weapon [ 1 ] ;
34042: LD_ADDR_VAR 0 5
34046: PUSH
34047: LD_VAR 0 10
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34056: LD_ADDR_VAR 0 10
34060: PUSH
34061: LD_VAR 0 10
34065: PPUSH
34066: LD_INT 1
34068: PPUSH
34069: CALL_OW 3
34073: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34074: LD_VAR 0 2
34078: PPUSH
34079: LD_VAR 0 5
34083: PPUSH
34084: CALL 34393 0 2
34088: PUSH
34089: LD_VAR 0 10
34093: PUSH
34094: EMPTY
34095: EQUAL
34096: OR
34097: IFFALSE 34042
// result := [ ] ;
34099: LD_ADDR_VAR 0 6
34103: PUSH
34104: EMPTY
34105: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34106: LD_VAR 0 1
34110: PPUSH
34111: LD_VAR 0 2
34115: PPUSH
34116: LD_VAR 0 3
34120: PPUSH
34121: LD_VAR 0 4
34125: PPUSH
34126: LD_VAR 0 5
34130: PPUSH
34131: CALL_OW 448
34135: IFFALSE 34168
// result := [ chassis , engine , control , weapon ] ;
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: LD_VAR 0 2
34146: PUSH
34147: LD_VAR 0 3
34151: PUSH
34152: LD_VAR 0 4
34156: PUSH
34157: LD_VAR 0 5
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
// end ;
34168: LD_VAR 0 6
34172: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34173: LD_INT 0
34175: PPUSH
// if not chassis or not engine then
34176: LD_VAR 0 1
34180: NOT
34181: PUSH
34182: LD_VAR 0 2
34186: NOT
34187: OR
34188: IFFALSE 34192
// exit ;
34190: GO 34388
// case engine of engine_solar :
34192: LD_VAR 0 2
34196: PUSH
34197: LD_INT 2
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34243
34205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34206: LD_ADDR_VAR 0 3
34210: PUSH
34211: LD_INT 11
34213: PUSH
34214: LD_INT 12
34216: PUSH
34217: LD_INT 13
34219: PUSH
34220: LD_INT 14
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
34241: GO 34372
34243: LD_INT 1
34245: DOUBLE
34246: EQUAL
34247: IFTRUE 34251
34249: GO 34313
34251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34252: LD_ADDR_VAR 0 3
34256: PUSH
34257: LD_INT 11
34259: PUSH
34260: LD_INT 12
34262: PUSH
34263: LD_INT 13
34265: PUSH
34266: LD_INT 14
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 4
34280: PUSH
34281: LD_INT 5
34283: PUSH
34284: LD_INT 21
34286: PUSH
34287: LD_INT 23
34289: PUSH
34290: LD_INT 22
34292: PUSH
34293: LD_INT 24
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34372
34313: LD_INT 3
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34371
34321: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 13
34329: PUSH
34330: LD_INT 14
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: LD_INT 4
34341: PUSH
34342: LD_INT 5
34344: PUSH
34345: LD_INT 21
34347: PUSH
34348: LD_INT 22
34350: PUSH
34351: LD_INT 23
34353: PUSH
34354: LD_INT 24
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
34369: GO 34372
34371: POP
// result := ( chassis in result ) ;
34372: LD_ADDR_VAR 0 3
34376: PUSH
34377: LD_VAR 0 1
34381: PUSH
34382: LD_VAR 0 3
34386: IN
34387: ST_TO_ADDR
// end ;
34388: LD_VAR 0 3
34392: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34393: LD_INT 0
34395: PPUSH
// if not chassis or not weapon then
34396: LD_VAR 0 1
34400: NOT
34401: PUSH
34402: LD_VAR 0 2
34406: NOT
34407: OR
34408: IFFALSE 34412
// exit ;
34410: GO 35472
// case weapon of us_machine_gun :
34412: LD_VAR 0 2
34416: PUSH
34417: LD_INT 2
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34425
34423: GO 34455
34425: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: LD_INT 4
34442: PUSH
34443: LD_INT 5
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: ST_TO_ADDR
34453: GO 35456
34455: LD_INT 3
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34463
34461: GO 34493
34463: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34464: LD_ADDR_VAR 0 3
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: LD_INT 3
34477: PUSH
34478: LD_INT 4
34480: PUSH
34481: LD_INT 5
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
34491: GO 35456
34493: LD_INT 11
34495: DOUBLE
34496: EQUAL
34497: IFTRUE 34501
34499: GO 34531
34501: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34502: LD_ADDR_VAR 0 3
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: LD_INT 5
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: ST_TO_ADDR
34529: GO 35456
34531: LD_INT 4
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34565
34539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34540: LD_ADDR_VAR 0 3
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: LD_INT 5
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
34563: GO 35456
34565: LD_INT 5
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34573
34571: GO 34599
34573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 4
34587: PUSH
34588: LD_INT 5
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
34597: GO 35456
34599: LD_INT 9
34601: DOUBLE
34602: EQUAL
34603: IFTRUE 34607
34605: GO 34633
34607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34608: LD_ADDR_VAR 0 3
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 3
34618: PUSH
34619: LD_INT 4
34621: PUSH
34622: LD_INT 5
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
34631: GO 35456
34633: LD_INT 7
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34667
34641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34642: LD_ADDR_VAR 0 3
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: LD_INT 4
34655: PUSH
34656: LD_INT 5
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
34665: GO 35456
34667: LD_INT 12
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34701
34675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34676: LD_ADDR_VAR 0 3
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: LD_INT 4
34689: PUSH
34690: LD_INT 5
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
34699: GO 35456
34701: LD_INT 13
34703: DOUBLE
34704: EQUAL
34705: IFTRUE 34709
34707: GO 34735
34709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: LD_INT 5
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: ST_TO_ADDR
34733: GO 35456
34735: LD_INT 14
34737: DOUBLE
34738: EQUAL
34739: IFTRUE 34743
34741: GO 34761
34743: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34744: LD_ADDR_VAR 0 3
34748: PUSH
34749: LD_INT 4
34751: PUSH
34752: LD_INT 5
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: ST_TO_ADDR
34759: GO 35456
34761: LD_INT 6
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34787
34769: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 4
34777: PUSH
34778: LD_INT 5
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: ST_TO_ADDR
34785: GO 35456
34787: LD_INT 10
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34813
34795: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_INT 4
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: ST_TO_ADDR
34811: GO 35456
34813: LD_INT 22
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34821
34819: GO 34847
34821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_INT 11
34829: PUSH
34830: LD_INT 12
34832: PUSH
34833: LD_INT 13
34835: PUSH
34836: LD_INT 14
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
34845: GO 35456
34847: LD_INT 23
34849: DOUBLE
34850: EQUAL
34851: IFTRUE 34855
34853: GO 34881
34855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 11
34863: PUSH
34864: LD_INT 12
34866: PUSH
34867: LD_INT 13
34869: PUSH
34870: LD_INT 14
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: ST_TO_ADDR
34879: GO 35456
34881: LD_INT 24
34883: DOUBLE
34884: EQUAL
34885: IFTRUE 34889
34887: GO 34915
34889: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34890: LD_ADDR_VAR 0 3
34894: PUSH
34895: LD_INT 11
34897: PUSH
34898: LD_INT 12
34900: PUSH
34901: LD_INT 13
34903: PUSH
34904: LD_INT 14
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: ST_TO_ADDR
34913: GO 35456
34915: LD_INT 30
34917: DOUBLE
34918: EQUAL
34919: IFTRUE 34923
34921: GO 34949
34923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_INT 11
34931: PUSH
34932: LD_INT 12
34934: PUSH
34935: LD_INT 13
34937: PUSH
34938: LD_INT 14
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: ST_TO_ADDR
34947: GO 35456
34949: LD_INT 25
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 34957
34955: GO 34975
34957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_INT 13
34965: PUSH
34966: LD_INT 14
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: ST_TO_ADDR
34973: GO 35456
34975: LD_INT 27
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34983
34981: GO 35001
34983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34984: LD_ADDR_VAR 0 3
34988: PUSH
34989: LD_INT 13
34991: PUSH
34992: LD_INT 14
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: ST_TO_ADDR
34999: GO 35456
35001: LD_INT 92
35003: DOUBLE
35004: EQUAL
35005: IFTRUE 35009
35007: GO 35035
35009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 11
35017: PUSH
35018: LD_INT 12
35020: PUSH
35021: LD_INT 13
35023: PUSH
35024: LD_INT 14
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
35033: GO 35456
35035: LD_INT 28
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35043
35041: GO 35061
35043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35044: LD_ADDR_VAR 0 3
35048: PUSH
35049: LD_INT 13
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: ST_TO_ADDR
35059: GO 35456
35061: LD_INT 29
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35087
35069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 13
35077: PUSH
35078: LD_INT 14
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: ST_TO_ADDR
35085: GO 35456
35087: LD_INT 31
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35113
35095: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_INT 13
35103: PUSH
35104: LD_INT 14
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: ST_TO_ADDR
35111: GO 35456
35113: LD_INT 26
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35139
35121: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 13
35129: PUSH
35130: LD_INT 14
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: ST_TO_ADDR
35137: GO 35456
35139: LD_INT 42
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35173
35147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_INT 21
35155: PUSH
35156: LD_INT 22
35158: PUSH
35159: LD_INT 23
35161: PUSH
35162: LD_INT 24
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: ST_TO_ADDR
35171: GO 35456
35173: LD_INT 43
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35207
35181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35182: LD_ADDR_VAR 0 3
35186: PUSH
35187: LD_INT 21
35189: PUSH
35190: LD_INT 22
35192: PUSH
35193: LD_INT 23
35195: PUSH
35196: LD_INT 24
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
35205: GO 35456
35207: LD_INT 44
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35215
35213: GO 35241
35215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35216: LD_ADDR_VAR 0 3
35220: PUSH
35221: LD_INT 21
35223: PUSH
35224: LD_INT 22
35226: PUSH
35227: LD_INT 23
35229: PUSH
35230: LD_INT 24
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: ST_TO_ADDR
35239: GO 35456
35241: LD_INT 45
35243: DOUBLE
35244: EQUAL
35245: IFTRUE 35249
35247: GO 35275
35249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35250: LD_ADDR_VAR 0 3
35254: PUSH
35255: LD_INT 21
35257: PUSH
35258: LD_INT 22
35260: PUSH
35261: LD_INT 23
35263: PUSH
35264: LD_INT 24
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: ST_TO_ADDR
35273: GO 35456
35275: LD_INT 49
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35309
35283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 21
35291: PUSH
35292: LD_INT 22
35294: PUSH
35295: LD_INT 23
35297: PUSH
35298: LD_INT 24
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: ST_TO_ADDR
35307: GO 35456
35309: LD_INT 51
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35317
35315: GO 35343
35317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35318: LD_ADDR_VAR 0 3
35322: PUSH
35323: LD_INT 21
35325: PUSH
35326: LD_INT 22
35328: PUSH
35329: LD_INT 23
35331: PUSH
35332: LD_INT 24
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
35341: GO 35456
35343: LD_INT 52
35345: DOUBLE
35346: EQUAL
35347: IFTRUE 35351
35349: GO 35377
35351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35352: LD_ADDR_VAR 0 3
35356: PUSH
35357: LD_INT 21
35359: PUSH
35360: LD_INT 22
35362: PUSH
35363: LD_INT 23
35365: PUSH
35366: LD_INT 24
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: ST_TO_ADDR
35375: GO 35456
35377: LD_INT 53
35379: DOUBLE
35380: EQUAL
35381: IFTRUE 35385
35383: GO 35403
35385: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35386: LD_ADDR_VAR 0 3
35390: PUSH
35391: LD_INT 23
35393: PUSH
35394: LD_INT 24
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: ST_TO_ADDR
35401: GO 35456
35403: LD_INT 46
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35429
35411: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35412: LD_ADDR_VAR 0 3
35416: PUSH
35417: LD_INT 23
35419: PUSH
35420: LD_INT 24
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: ST_TO_ADDR
35427: GO 35456
35429: LD_INT 47
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35437
35435: GO 35455
35437: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35438: LD_ADDR_VAR 0 3
35442: PUSH
35443: LD_INT 23
35445: PUSH
35446: LD_INT 24
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: ST_TO_ADDR
35453: GO 35456
35455: POP
// result := ( chassis in result ) ;
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: LD_VAR 0 1
35465: PUSH
35466: LD_VAR 0 3
35470: IN
35471: ST_TO_ADDR
// end ;
35472: LD_VAR 0 3
35476: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35477: LD_INT 0
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
// result := array ;
35486: LD_ADDR_VAR 0 5
35490: PUSH
35491: LD_VAR 0 1
35495: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35496: LD_VAR 0 1
35500: NOT
35501: PUSH
35502: LD_VAR 0 2
35506: NOT
35507: OR
35508: PUSH
35509: LD_VAR 0 3
35513: NOT
35514: OR
35515: PUSH
35516: LD_VAR 0 2
35520: PUSH
35521: LD_VAR 0 1
35525: GREATER
35526: OR
35527: PUSH
35528: LD_VAR 0 3
35532: PUSH
35533: LD_VAR 0 1
35537: GREATER
35538: OR
35539: IFFALSE 35543
// exit ;
35541: GO 35839
// if direction then
35543: LD_VAR 0 4
35547: IFFALSE 35611
// begin d := 1 ;
35549: LD_ADDR_VAR 0 9
35553: PUSH
35554: LD_INT 1
35556: ST_TO_ADDR
// if i_from > i_to then
35557: LD_VAR 0 2
35561: PUSH
35562: LD_VAR 0 3
35566: GREATER
35567: IFFALSE 35593
// length := ( array - i_from ) + i_to else
35569: LD_ADDR_VAR 0 11
35573: PUSH
35574: LD_VAR 0 1
35578: PUSH
35579: LD_VAR 0 2
35583: MINUS
35584: PUSH
35585: LD_VAR 0 3
35589: PLUS
35590: ST_TO_ADDR
35591: GO 35609
// length := i_to - i_from ;
35593: LD_ADDR_VAR 0 11
35597: PUSH
35598: LD_VAR 0 3
35602: PUSH
35603: LD_VAR 0 2
35607: MINUS
35608: ST_TO_ADDR
// end else
35609: GO 35672
// begin d := - 1 ;
35611: LD_ADDR_VAR 0 9
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: ST_TO_ADDR
// if i_from > i_to then
35620: LD_VAR 0 2
35624: PUSH
35625: LD_VAR 0 3
35629: GREATER
35630: IFFALSE 35650
// length := i_from - i_to else
35632: LD_ADDR_VAR 0 11
35636: PUSH
35637: LD_VAR 0 2
35641: PUSH
35642: LD_VAR 0 3
35646: MINUS
35647: ST_TO_ADDR
35648: GO 35672
// length := ( array - i_to ) + i_from ;
35650: LD_ADDR_VAR 0 11
35654: PUSH
35655: LD_VAR 0 1
35659: PUSH
35660: LD_VAR 0 3
35664: MINUS
35665: PUSH
35666: LD_VAR 0 2
35670: PLUS
35671: ST_TO_ADDR
// end ; if not length then
35672: LD_VAR 0 11
35676: NOT
35677: IFFALSE 35681
// exit ;
35679: GO 35839
// tmp := array ;
35681: LD_ADDR_VAR 0 10
35685: PUSH
35686: LD_VAR 0 1
35690: ST_TO_ADDR
// for i = 1 to length do
35691: LD_ADDR_VAR 0 6
35695: PUSH
35696: DOUBLE
35697: LD_INT 1
35699: DEC
35700: ST_TO_ADDR
35701: LD_VAR 0 11
35705: PUSH
35706: FOR_TO
35707: IFFALSE 35827
// begin for j = 1 to array do
35709: LD_ADDR_VAR 0 7
35713: PUSH
35714: DOUBLE
35715: LD_INT 1
35717: DEC
35718: ST_TO_ADDR
35719: LD_VAR 0 1
35723: PUSH
35724: FOR_TO
35725: IFFALSE 35813
// begin k := j + d ;
35727: LD_ADDR_VAR 0 8
35731: PUSH
35732: LD_VAR 0 7
35736: PUSH
35737: LD_VAR 0 9
35741: PLUS
35742: ST_TO_ADDR
// if k > array then
35743: LD_VAR 0 8
35747: PUSH
35748: LD_VAR 0 1
35752: GREATER
35753: IFFALSE 35763
// k := 1 ;
35755: LD_ADDR_VAR 0 8
35759: PUSH
35760: LD_INT 1
35762: ST_TO_ADDR
// if not k then
35763: LD_VAR 0 8
35767: NOT
35768: IFFALSE 35780
// k := array ;
35770: LD_ADDR_VAR 0 8
35774: PUSH
35775: LD_VAR 0 1
35779: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35780: LD_ADDR_VAR 0 10
35784: PUSH
35785: LD_VAR 0 10
35789: PPUSH
35790: LD_VAR 0 8
35794: PPUSH
35795: LD_VAR 0 1
35799: PUSH
35800: LD_VAR 0 7
35804: ARRAY
35805: PPUSH
35806: CALL_OW 1
35810: ST_TO_ADDR
// end ;
35811: GO 35724
35813: POP
35814: POP
// array := tmp ;
35815: LD_ADDR_VAR 0 1
35819: PUSH
35820: LD_VAR 0 10
35824: ST_TO_ADDR
// end ;
35825: GO 35706
35827: POP
35828: POP
// result := array ;
35829: LD_ADDR_VAR 0 5
35833: PUSH
35834: LD_VAR 0 1
35838: ST_TO_ADDR
// end ;
35839: LD_VAR 0 5
35843: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35844: LD_INT 0
35846: PPUSH
35847: PPUSH
// result := 0 ;
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_INT 0
35855: ST_TO_ADDR
// if not array or not value in array then
35856: LD_VAR 0 1
35860: NOT
35861: PUSH
35862: LD_VAR 0 2
35866: PUSH
35867: LD_VAR 0 1
35871: IN
35872: NOT
35873: OR
35874: IFFALSE 35878
// exit ;
35876: GO 35932
// for i = 1 to array do
35878: LD_ADDR_VAR 0 4
35882: PUSH
35883: DOUBLE
35884: LD_INT 1
35886: DEC
35887: ST_TO_ADDR
35888: LD_VAR 0 1
35892: PUSH
35893: FOR_TO
35894: IFFALSE 35930
// if value = array [ i ] then
35896: LD_VAR 0 2
35900: PUSH
35901: LD_VAR 0 1
35905: PUSH
35906: LD_VAR 0 4
35910: ARRAY
35911: EQUAL
35912: IFFALSE 35928
// begin result := i ;
35914: LD_ADDR_VAR 0 3
35918: PUSH
35919: LD_VAR 0 4
35923: ST_TO_ADDR
// exit ;
35924: POP
35925: POP
35926: GO 35932
// end ;
35928: GO 35893
35930: POP
35931: POP
// end ;
35932: LD_VAR 0 3
35936: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35937: LD_INT 0
35939: PPUSH
// vc_chassis := chassis ;
35940: LD_ADDR_OWVAR 37
35944: PUSH
35945: LD_VAR 0 1
35949: ST_TO_ADDR
// vc_engine := engine ;
35950: LD_ADDR_OWVAR 39
35954: PUSH
35955: LD_VAR 0 2
35959: ST_TO_ADDR
// vc_control := control ;
35960: LD_ADDR_OWVAR 38
35964: PUSH
35965: LD_VAR 0 3
35969: ST_TO_ADDR
// vc_weapon := weapon ;
35970: LD_ADDR_OWVAR 40
35974: PUSH
35975: LD_VAR 0 4
35979: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35980: LD_ADDR_OWVAR 41
35984: PUSH
35985: LD_VAR 0 5
35989: ST_TO_ADDR
// end ;
35990: LD_VAR 0 6
35994: RET
// export function WantPlant ( unit ) ; var task ; begin
35995: LD_INT 0
35997: PPUSH
35998: PPUSH
// result := false ;
35999: LD_ADDR_VAR 0 2
36003: PUSH
36004: LD_INT 0
36006: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36007: LD_ADDR_VAR 0 3
36011: PUSH
36012: LD_VAR 0 1
36016: PPUSH
36017: CALL_OW 437
36021: ST_TO_ADDR
// if task then
36022: LD_VAR 0 3
36026: IFFALSE 36054
// if task [ 1 ] [ 1 ] = p then
36028: LD_VAR 0 3
36032: PUSH
36033: LD_INT 1
36035: ARRAY
36036: PUSH
36037: LD_INT 1
36039: ARRAY
36040: PUSH
36041: LD_STRING p
36043: EQUAL
36044: IFFALSE 36054
// result := true ;
36046: LD_ADDR_VAR 0 2
36050: PUSH
36051: LD_INT 1
36053: ST_TO_ADDR
// end ;
36054: LD_VAR 0 2
36058: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36059: LD_INT 0
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
// if pos < 1 then
36065: LD_VAR 0 2
36069: PUSH
36070: LD_INT 1
36072: LESS
36073: IFFALSE 36077
// exit ;
36075: GO 36380
// if pos = 1 then
36077: LD_VAR 0 2
36081: PUSH
36082: LD_INT 1
36084: EQUAL
36085: IFFALSE 36118
// result := Replace ( arr , pos [ 1 ] , value ) else
36087: LD_ADDR_VAR 0 4
36091: PUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: LD_VAR 0 2
36101: PUSH
36102: LD_INT 1
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: CALL_OW 1
36115: ST_TO_ADDR
36116: GO 36380
// begin tmp := arr ;
36118: LD_ADDR_VAR 0 6
36122: PUSH
36123: LD_VAR 0 1
36127: ST_TO_ADDR
// s_arr := [ tmp ] ;
36128: LD_ADDR_VAR 0 7
36132: PUSH
36133: LD_VAR 0 6
36137: PUSH
36138: EMPTY
36139: LIST
36140: ST_TO_ADDR
// for i = 1 to pos - 1 do
36141: LD_ADDR_VAR 0 5
36145: PUSH
36146: DOUBLE
36147: LD_INT 1
36149: DEC
36150: ST_TO_ADDR
36151: LD_VAR 0 2
36155: PUSH
36156: LD_INT 1
36158: MINUS
36159: PUSH
36160: FOR_TO
36161: IFFALSE 36206
// begin tmp := tmp [ pos [ i ] ] ;
36163: LD_ADDR_VAR 0 6
36167: PUSH
36168: LD_VAR 0 6
36172: PUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_VAR 0 5
36182: ARRAY
36183: ARRAY
36184: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36185: LD_ADDR_VAR 0 7
36189: PUSH
36190: LD_VAR 0 7
36194: PUSH
36195: LD_VAR 0 6
36199: PUSH
36200: EMPTY
36201: LIST
36202: ADD
36203: ST_TO_ADDR
// end ;
36204: GO 36160
36206: POP
36207: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36208: LD_ADDR_VAR 0 6
36212: PUSH
36213: LD_VAR 0 6
36217: PPUSH
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 2
36227: ARRAY
36228: PPUSH
36229: LD_VAR 0 3
36233: PPUSH
36234: CALL_OW 1
36238: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36239: LD_ADDR_VAR 0 7
36243: PUSH
36244: LD_VAR 0 7
36248: PPUSH
36249: LD_VAR 0 7
36253: PPUSH
36254: LD_VAR 0 6
36258: PPUSH
36259: CALL_OW 1
36263: ST_TO_ADDR
// for i = s_arr downto 2 do
36264: LD_ADDR_VAR 0 5
36268: PUSH
36269: DOUBLE
36270: LD_VAR 0 7
36274: INC
36275: ST_TO_ADDR
36276: LD_INT 2
36278: PUSH
36279: FOR_DOWNTO
36280: IFFALSE 36364
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36282: LD_ADDR_VAR 0 6
36286: PUSH
36287: LD_VAR 0 7
36291: PUSH
36292: LD_VAR 0 5
36296: PUSH
36297: LD_INT 1
36299: MINUS
36300: ARRAY
36301: PPUSH
36302: LD_VAR 0 2
36306: PUSH
36307: LD_VAR 0 5
36311: PUSH
36312: LD_INT 1
36314: MINUS
36315: ARRAY
36316: PPUSH
36317: LD_VAR 0 7
36321: PUSH
36322: LD_VAR 0 5
36326: ARRAY
36327: PPUSH
36328: CALL_OW 1
36332: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36333: LD_ADDR_VAR 0 7
36337: PUSH
36338: LD_VAR 0 7
36342: PPUSH
36343: LD_VAR 0 5
36347: PUSH
36348: LD_INT 1
36350: MINUS
36351: PPUSH
36352: LD_VAR 0 6
36356: PPUSH
36357: CALL_OW 1
36361: ST_TO_ADDR
// end ;
36362: GO 36279
36364: POP
36365: POP
// result := s_arr [ 1 ] ;
36366: LD_ADDR_VAR 0 4
36370: PUSH
36371: LD_VAR 0 7
36375: PUSH
36376: LD_INT 1
36378: ARRAY
36379: ST_TO_ADDR
// end ; end ;
36380: LD_VAR 0 4
36384: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36385: LD_INT 0
36387: PPUSH
36388: PPUSH
// if not list then
36389: LD_VAR 0 1
36393: NOT
36394: IFFALSE 36398
// exit ;
36396: GO 36489
// i := list [ pos1 ] ;
36398: LD_ADDR_VAR 0 5
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: LD_VAR 0 2
36412: ARRAY
36413: ST_TO_ADDR
// if not i then
36414: LD_VAR 0 5
36418: NOT
36419: IFFALSE 36423
// exit ;
36421: GO 36489
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36423: LD_ADDR_VAR 0 1
36427: PUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: LD_VAR 0 1
36442: PUSH
36443: LD_VAR 0 3
36447: ARRAY
36448: PPUSH
36449: CALL_OW 1
36453: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36454: LD_ADDR_VAR 0 1
36458: PUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: LD_VAR 0 3
36468: PPUSH
36469: LD_VAR 0 5
36473: PPUSH
36474: CALL_OW 1
36478: ST_TO_ADDR
// result := list ;
36479: LD_ADDR_VAR 0 4
36483: PUSH
36484: LD_VAR 0 1
36488: ST_TO_ADDR
// end ;
36489: LD_VAR 0 4
36493: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36494: LD_INT 0
36496: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36497: LD_ADDR_VAR 0 5
36501: PUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 250
36511: PPUSH
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL_OW 251
36521: PPUSH
36522: LD_VAR 0 2
36526: PPUSH
36527: LD_VAR 0 3
36531: PPUSH
36532: LD_VAR 0 4
36536: PPUSH
36537: CALL 36547 0 5
36541: ST_TO_ADDR
// end ;
36542: LD_VAR 0 5
36546: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36547: LD_INT 0
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
// if not list then
36553: LD_VAR 0 3
36557: NOT
36558: IFFALSE 36562
// exit ;
36560: GO 36950
// result := [ ] ;
36562: LD_ADDR_VAR 0 6
36566: PUSH
36567: EMPTY
36568: ST_TO_ADDR
// for i in list do
36569: LD_ADDR_VAR 0 7
36573: PUSH
36574: LD_VAR 0 3
36578: PUSH
36579: FOR_IN
36580: IFFALSE 36782
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36582: LD_ADDR_VAR 0 9
36586: PUSH
36587: LD_VAR 0 7
36591: PPUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: LD_VAR 0 2
36601: PPUSH
36602: CALL_OW 297
36606: ST_TO_ADDR
// if not result then
36607: LD_VAR 0 6
36611: NOT
36612: IFFALSE 36638
// result := [ [ i , tmp ] ] else
36614: LD_ADDR_VAR 0 6
36618: PUSH
36619: LD_VAR 0 7
36623: PUSH
36624: LD_VAR 0 9
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: ST_TO_ADDR
36636: GO 36780
// begin if result [ result ] [ 2 ] < tmp then
36638: LD_VAR 0 6
36642: PUSH
36643: LD_VAR 0 6
36647: ARRAY
36648: PUSH
36649: LD_INT 2
36651: ARRAY
36652: PUSH
36653: LD_VAR 0 9
36657: LESS
36658: IFFALSE 36700
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36660: LD_ADDR_VAR 0 6
36664: PUSH
36665: LD_VAR 0 6
36669: PPUSH
36670: LD_VAR 0 6
36674: PUSH
36675: LD_INT 1
36677: PLUS
36678: PPUSH
36679: LD_VAR 0 7
36683: PUSH
36684: LD_VAR 0 9
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PPUSH
36693: CALL_OW 2
36697: ST_TO_ADDR
36698: GO 36780
// for j = 1 to result do
36700: LD_ADDR_VAR 0 8
36704: PUSH
36705: DOUBLE
36706: LD_INT 1
36708: DEC
36709: ST_TO_ADDR
36710: LD_VAR 0 6
36714: PUSH
36715: FOR_TO
36716: IFFALSE 36778
// begin if tmp < result [ j ] [ 2 ] then
36718: LD_VAR 0 9
36722: PUSH
36723: LD_VAR 0 6
36727: PUSH
36728: LD_VAR 0 8
36732: ARRAY
36733: PUSH
36734: LD_INT 2
36736: ARRAY
36737: LESS
36738: IFFALSE 36776
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36740: LD_ADDR_VAR 0 6
36744: PUSH
36745: LD_VAR 0 6
36749: PPUSH
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_VAR 0 7
36759: PUSH
36760: LD_VAR 0 9
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PPUSH
36769: CALL_OW 2
36773: ST_TO_ADDR
// break ;
36774: GO 36778
// end ; end ;
36776: GO 36715
36778: POP
36779: POP
// end ; end ;
36780: GO 36579
36782: POP
36783: POP
// if result and not asc then
36784: LD_VAR 0 6
36788: PUSH
36789: LD_VAR 0 4
36793: NOT
36794: AND
36795: IFFALSE 36870
// begin tmp := result ;
36797: LD_ADDR_VAR 0 9
36801: PUSH
36802: LD_VAR 0 6
36806: ST_TO_ADDR
// for i = tmp downto 1 do
36807: LD_ADDR_VAR 0 7
36811: PUSH
36812: DOUBLE
36813: LD_VAR 0 9
36817: INC
36818: ST_TO_ADDR
36819: LD_INT 1
36821: PUSH
36822: FOR_DOWNTO
36823: IFFALSE 36868
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36825: LD_ADDR_VAR 0 6
36829: PUSH
36830: LD_VAR 0 6
36834: PPUSH
36835: LD_VAR 0 9
36839: PUSH
36840: LD_VAR 0 7
36844: MINUS
36845: PUSH
36846: LD_INT 1
36848: PLUS
36849: PPUSH
36850: LD_VAR 0 9
36854: PUSH
36855: LD_VAR 0 7
36859: ARRAY
36860: PPUSH
36861: CALL_OW 1
36865: ST_TO_ADDR
36866: GO 36822
36868: POP
36869: POP
// end ; tmp := [ ] ;
36870: LD_ADDR_VAR 0 9
36874: PUSH
36875: EMPTY
36876: ST_TO_ADDR
// if mode then
36877: LD_VAR 0 5
36881: IFFALSE 36950
// begin for i = 1 to result do
36883: LD_ADDR_VAR 0 7
36887: PUSH
36888: DOUBLE
36889: LD_INT 1
36891: DEC
36892: ST_TO_ADDR
36893: LD_VAR 0 6
36897: PUSH
36898: FOR_TO
36899: IFFALSE 36938
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36901: LD_ADDR_VAR 0 9
36905: PUSH
36906: LD_VAR 0 9
36910: PPUSH
36911: LD_VAR 0 7
36915: PPUSH
36916: LD_VAR 0 6
36920: PUSH
36921: LD_VAR 0 7
36925: ARRAY
36926: PUSH
36927: LD_INT 1
36929: ARRAY
36930: PPUSH
36931: CALL_OW 1
36935: ST_TO_ADDR
36936: GO 36898
36938: POP
36939: POP
// result := tmp ;
36940: LD_ADDR_VAR 0 6
36944: PUSH
36945: LD_VAR 0 9
36949: ST_TO_ADDR
// end ; end ;
36950: LD_VAR 0 6
36954: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36963: LD_ADDR_VAR 0 5
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// if not x or not y then
36985: LD_VAR 0 2
36989: NOT
36990: PUSH
36991: LD_VAR 0 3
36995: NOT
36996: OR
36997: IFFALSE 37001
// exit ;
36999: GO 38651
// if not range then
37001: LD_VAR 0 4
37005: NOT
37006: IFFALSE 37016
// range := 10 ;
37008: LD_ADDR_VAR 0 4
37012: PUSH
37013: LD_INT 10
37015: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37016: LD_ADDR_VAR 0 8
37020: PUSH
37021: LD_INT 81
37023: PUSH
37024: LD_VAR 0 1
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 92
37035: PUSH
37036: LD_VAR 0 2
37040: PUSH
37041: LD_VAR 0 3
37045: PUSH
37046: LD_VAR 0 4
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: LD_INT 21
37062: PUSH
37063: LD_INT 3
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: PPUSH
37079: CALL_OW 69
37083: ST_TO_ADDR
// if not tmp then
37084: LD_VAR 0 8
37088: NOT
37089: IFFALSE 37093
// exit ;
37091: GO 38651
// for i in tmp do
37093: LD_ADDR_VAR 0 6
37097: PUSH
37098: LD_VAR 0 8
37102: PUSH
37103: FOR_IN
37104: IFFALSE 38626
// begin points := [ 0 , 0 , 0 ] ;
37106: LD_ADDR_VAR 0 9
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// bpoints := 1 ;
37125: LD_ADDR_VAR 0 10
37129: PUSH
37130: LD_INT 1
37132: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37133: LD_VAR 0 6
37137: PPUSH
37138: CALL_OW 247
37142: PUSH
37143: LD_INT 1
37145: DOUBLE
37146: EQUAL
37147: IFTRUE 37151
37149: GO 37729
37151: POP
// begin if GetClass ( i ) = 1 then
37152: LD_VAR 0 6
37156: PPUSH
37157: CALL_OW 257
37161: PUSH
37162: LD_INT 1
37164: EQUAL
37165: IFFALSE 37186
// points := [ 10 , 5 , 3 ] ;
37167: LD_ADDR_VAR 0 9
37171: PUSH
37172: LD_INT 10
37174: PUSH
37175: LD_INT 5
37177: PUSH
37178: LD_INT 3
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37186: LD_VAR 0 6
37190: PPUSH
37191: CALL_OW 257
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: LD_INT 4
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: IN
37210: IFFALSE 37231
// points := [ 3 , 2 , 1 ] ;
37212: LD_ADDR_VAR 0 9
37216: PUSH
37217: LD_INT 3
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37231: LD_VAR 0 6
37235: PPUSH
37236: CALL_OW 257
37240: PUSH
37241: LD_INT 5
37243: EQUAL
37244: IFFALSE 37265
// points := [ 130 , 5 , 2 ] ;
37246: LD_ADDR_VAR 0 9
37250: PUSH
37251: LD_INT 130
37253: PUSH
37254: LD_INT 5
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37265: LD_VAR 0 6
37269: PPUSH
37270: CALL_OW 257
37274: PUSH
37275: LD_INT 8
37277: EQUAL
37278: IFFALSE 37299
// points := [ 35 , 35 , 30 ] ;
37280: LD_ADDR_VAR 0 9
37284: PUSH
37285: LD_INT 35
37287: PUSH
37288: LD_INT 35
37290: PUSH
37291: LD_INT 30
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37299: LD_VAR 0 6
37303: PPUSH
37304: CALL_OW 257
37308: PUSH
37309: LD_INT 9
37311: EQUAL
37312: IFFALSE 37333
// points := [ 20 , 55 , 40 ] ;
37314: LD_ADDR_VAR 0 9
37318: PUSH
37319: LD_INT 20
37321: PUSH
37322: LD_INT 55
37324: PUSH
37325: LD_INT 40
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 257
37342: PUSH
37343: LD_INT 12
37345: PUSH
37346: LD_INT 16
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: IN
37353: IFFALSE 37374
// points := [ 5 , 3 , 2 ] ;
37355: LD_ADDR_VAR 0 9
37359: PUSH
37360: LD_INT 5
37362: PUSH
37363: LD_INT 3
37365: PUSH
37366: LD_INT 2
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37374: LD_VAR 0 6
37378: PPUSH
37379: CALL_OW 257
37383: PUSH
37384: LD_INT 17
37386: EQUAL
37387: IFFALSE 37408
// points := [ 100 , 50 , 75 ] ;
37389: LD_ADDR_VAR 0 9
37393: PUSH
37394: LD_INT 100
37396: PUSH
37397: LD_INT 50
37399: PUSH
37400: LD_INT 75
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37408: LD_VAR 0 6
37412: PPUSH
37413: CALL_OW 257
37417: PUSH
37418: LD_INT 15
37420: EQUAL
37421: IFFALSE 37442
// points := [ 10 , 5 , 3 ] ;
37423: LD_ADDR_VAR 0 9
37427: PUSH
37428: LD_INT 10
37430: PUSH
37431: LD_INT 5
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37442: LD_VAR 0 6
37446: PPUSH
37447: CALL_OW 257
37451: PUSH
37452: LD_INT 14
37454: EQUAL
37455: IFFALSE 37476
// points := [ 10 , 0 , 0 ] ;
37457: LD_ADDR_VAR 0 9
37461: PUSH
37462: LD_INT 10
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37476: LD_VAR 0 6
37480: PPUSH
37481: CALL_OW 257
37485: PUSH
37486: LD_INT 11
37488: EQUAL
37489: IFFALSE 37510
// points := [ 30 , 10 , 5 ] ;
37491: LD_ADDR_VAR 0 9
37495: PUSH
37496: LD_INT 30
37498: PUSH
37499: LD_INT 10
37501: PUSH
37502: LD_INT 5
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37510: LD_VAR 0 1
37514: PPUSH
37515: LD_INT 5
37517: PPUSH
37518: CALL_OW 321
37522: PUSH
37523: LD_INT 2
37525: EQUAL
37526: IFFALSE 37543
// bpoints := bpoints * 1.8 ;
37528: LD_ADDR_VAR 0 10
37532: PUSH
37533: LD_VAR 0 10
37537: PUSH
37538: LD_REAL  1.80000000000000E+0000
37541: MUL
37542: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37543: LD_VAR 0 6
37547: PPUSH
37548: CALL_OW 257
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: LD_INT 3
37561: PUSH
37562: LD_INT 4
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: IN
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: LD_INT 51
37579: PPUSH
37580: CALL_OW 321
37584: PUSH
37585: LD_INT 2
37587: EQUAL
37588: AND
37589: IFFALSE 37606
// bpoints := bpoints * 1.2 ;
37591: LD_ADDR_VAR 0 10
37595: PUSH
37596: LD_VAR 0 10
37600: PUSH
37601: LD_REAL  1.20000000000000E+0000
37604: MUL
37605: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37606: LD_VAR 0 6
37610: PPUSH
37611: CALL_OW 257
37615: PUSH
37616: LD_INT 5
37618: PUSH
37619: LD_INT 7
37621: PUSH
37622: LD_INT 9
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: IN
37630: PUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_INT 52
37638: PPUSH
37639: CALL_OW 321
37643: PUSH
37644: LD_INT 2
37646: EQUAL
37647: AND
37648: IFFALSE 37665
// bpoints := bpoints * 1.5 ;
37650: LD_ADDR_VAR 0 10
37654: PUSH
37655: LD_VAR 0 10
37659: PUSH
37660: LD_REAL  1.50000000000000E+0000
37663: MUL
37664: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37665: LD_VAR 0 1
37669: PPUSH
37670: LD_INT 66
37672: PPUSH
37673: CALL_OW 321
37677: PUSH
37678: LD_INT 2
37680: EQUAL
37681: IFFALSE 37698
// bpoints := bpoints * 1.1 ;
37683: LD_ADDR_VAR 0 10
37687: PUSH
37688: LD_VAR 0 10
37692: PUSH
37693: LD_REAL  1.10000000000000E+0000
37696: MUL
37697: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37698: LD_ADDR_VAR 0 10
37702: PUSH
37703: LD_VAR 0 10
37707: PUSH
37708: LD_VAR 0 6
37712: PPUSH
37713: LD_INT 1
37715: PPUSH
37716: CALL_OW 259
37720: PUSH
37721: LD_REAL  1.15000000000000E+0000
37724: MUL
37725: MUL
37726: ST_TO_ADDR
// end ; unit_vehicle :
37727: GO 38555
37729: LD_INT 2
37731: DOUBLE
37732: EQUAL
37733: IFTRUE 37737
37735: GO 38543
37737: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37738: LD_VAR 0 6
37742: PPUSH
37743: CALL_OW 264
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: LD_INT 42
37753: PUSH
37754: LD_INT 24
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: IN
37762: IFFALSE 37783
// points := [ 25 , 5 , 3 ] ;
37764: LD_ADDR_VAR 0 9
37768: PUSH
37769: LD_INT 25
37771: PUSH
37772: LD_INT 5
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37783: LD_VAR 0 6
37787: PPUSH
37788: CALL_OW 264
37792: PUSH
37793: LD_INT 4
37795: PUSH
37796: LD_INT 43
37798: PUSH
37799: LD_INT 25
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: IN
37807: IFFALSE 37828
// points := [ 40 , 15 , 5 ] ;
37809: LD_ADDR_VAR 0 9
37813: PUSH
37814: LD_INT 40
37816: PUSH
37817: LD_INT 15
37819: PUSH
37820: LD_INT 5
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37828: LD_VAR 0 6
37832: PPUSH
37833: CALL_OW 264
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 23
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: IN
37848: IFFALSE 37869
// points := [ 7 , 25 , 8 ] ;
37850: LD_ADDR_VAR 0 9
37854: PUSH
37855: LD_INT 7
37857: PUSH
37858: LD_INT 25
37860: PUSH
37861: LD_INT 8
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37869: LD_VAR 0 6
37873: PPUSH
37874: CALL_OW 264
37878: PUSH
37879: LD_INT 5
37881: PUSH
37882: LD_INT 27
37884: PUSH
37885: LD_INT 44
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: IN
37893: IFFALSE 37914
// points := [ 14 , 50 , 16 ] ;
37895: LD_ADDR_VAR 0 9
37899: PUSH
37900: LD_INT 14
37902: PUSH
37903: LD_INT 50
37905: PUSH
37906: LD_INT 16
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37914: LD_VAR 0 6
37918: PPUSH
37919: CALL_OW 264
37923: PUSH
37924: LD_INT 6
37926: PUSH
37927: LD_INT 46
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: IN
37934: IFFALSE 37955
// points := [ 32 , 120 , 70 ] ;
37936: LD_ADDR_VAR 0 9
37940: PUSH
37941: LD_INT 32
37943: PUSH
37944: LD_INT 120
37946: PUSH
37947: LD_INT 70
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37955: LD_VAR 0 6
37959: PPUSH
37960: CALL_OW 264
37964: PUSH
37965: LD_INT 7
37967: PUSH
37968: LD_INT 28
37970: PUSH
37971: LD_INT 45
37973: PUSH
37974: LD_INT 92
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: IN
37983: IFFALSE 38004
// points := [ 35 , 20 , 45 ] ;
37985: LD_ADDR_VAR 0 9
37989: PUSH
37990: LD_INT 35
37992: PUSH
37993: LD_INT 20
37995: PUSH
37996: LD_INT 45
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38004: LD_VAR 0 6
38008: PPUSH
38009: CALL_OW 264
38013: PUSH
38014: LD_INT 47
38016: PUSH
38017: EMPTY
38018: LIST
38019: IN
38020: IFFALSE 38041
// points := [ 67 , 45 , 75 ] ;
38022: LD_ADDR_VAR 0 9
38026: PUSH
38027: LD_INT 67
38029: PUSH
38030: LD_INT 45
38032: PUSH
38033: LD_INT 75
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38041: LD_VAR 0 6
38045: PPUSH
38046: CALL_OW 264
38050: PUSH
38051: LD_INT 26
38053: PUSH
38054: EMPTY
38055: LIST
38056: IN
38057: IFFALSE 38078
// points := [ 120 , 30 , 80 ] ;
38059: LD_ADDR_VAR 0 9
38063: PUSH
38064: LD_INT 120
38066: PUSH
38067: LD_INT 30
38069: PUSH
38070: LD_INT 80
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38078: LD_VAR 0 6
38082: PPUSH
38083: CALL_OW 264
38087: PUSH
38088: LD_INT 22
38090: PUSH
38091: EMPTY
38092: LIST
38093: IN
38094: IFFALSE 38115
// points := [ 40 , 1 , 1 ] ;
38096: LD_ADDR_VAR 0 9
38100: PUSH
38101: LD_INT 40
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38115: LD_VAR 0 6
38119: PPUSH
38120: CALL_OW 264
38124: PUSH
38125: LD_INT 29
38127: PUSH
38128: EMPTY
38129: LIST
38130: IN
38131: IFFALSE 38152
// points := [ 70 , 200 , 400 ] ;
38133: LD_ADDR_VAR 0 9
38137: PUSH
38138: LD_INT 70
38140: PUSH
38141: LD_INT 200
38143: PUSH
38144: LD_INT 400
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38152: LD_VAR 0 6
38156: PPUSH
38157: CALL_OW 264
38161: PUSH
38162: LD_INT 14
38164: PUSH
38165: LD_INT 53
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: IN
38172: IFFALSE 38193
// points := [ 40 , 10 , 20 ] ;
38174: LD_ADDR_VAR 0 9
38178: PUSH
38179: LD_INT 40
38181: PUSH
38182: LD_INT 10
38184: PUSH
38185: LD_INT 20
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38193: LD_VAR 0 6
38197: PPUSH
38198: CALL_OW 264
38202: PUSH
38203: LD_INT 9
38205: PUSH
38206: EMPTY
38207: LIST
38208: IN
38209: IFFALSE 38230
// points := [ 5 , 70 , 20 ] ;
38211: LD_ADDR_VAR 0 9
38215: PUSH
38216: LD_INT 5
38218: PUSH
38219: LD_INT 70
38221: PUSH
38222: LD_INT 20
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38230: LD_VAR 0 6
38234: PPUSH
38235: CALL_OW 264
38239: PUSH
38240: LD_INT 10
38242: PUSH
38243: EMPTY
38244: LIST
38245: IN
38246: IFFALSE 38267
// points := [ 35 , 110 , 70 ] ;
38248: LD_ADDR_VAR 0 9
38252: PUSH
38253: LD_INT 35
38255: PUSH
38256: LD_INT 110
38258: PUSH
38259: LD_INT 70
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38267: LD_VAR 0 6
38271: PPUSH
38272: CALL_OW 265
38276: PUSH
38277: LD_INT 25
38279: EQUAL
38280: IFFALSE 38301
// points := [ 80 , 65 , 100 ] ;
38282: LD_ADDR_VAR 0 9
38286: PUSH
38287: LD_INT 80
38289: PUSH
38290: LD_INT 65
38292: PUSH
38293: LD_INT 100
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38301: LD_VAR 0 6
38305: PPUSH
38306: CALL_OW 263
38310: PUSH
38311: LD_INT 1
38313: EQUAL
38314: IFFALSE 38349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38316: LD_ADDR_VAR 0 10
38320: PUSH
38321: LD_VAR 0 10
38325: PUSH
38326: LD_VAR 0 6
38330: PPUSH
38331: CALL_OW 311
38335: PPUSH
38336: LD_INT 3
38338: PPUSH
38339: CALL_OW 259
38343: PUSH
38344: LD_INT 4
38346: MUL
38347: MUL
38348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38349: LD_VAR 0 6
38353: PPUSH
38354: CALL_OW 263
38358: PUSH
38359: LD_INT 2
38361: EQUAL
38362: IFFALSE 38413
// begin j := IsControledBy ( i ) ;
38364: LD_ADDR_VAR 0 7
38368: PUSH
38369: LD_VAR 0 6
38373: PPUSH
38374: CALL_OW 312
38378: ST_TO_ADDR
// if j then
38379: LD_VAR 0 7
38383: IFFALSE 38413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38385: LD_ADDR_VAR 0 10
38389: PUSH
38390: LD_VAR 0 10
38394: PUSH
38395: LD_VAR 0 7
38399: PPUSH
38400: LD_INT 3
38402: PPUSH
38403: CALL_OW 259
38407: PUSH
38408: LD_INT 3
38410: MUL
38411: MUL
38412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38413: LD_VAR 0 6
38417: PPUSH
38418: CALL_OW 264
38422: PUSH
38423: LD_INT 5
38425: PUSH
38426: LD_INT 6
38428: PUSH
38429: LD_INT 46
38431: PUSH
38432: LD_INT 44
38434: PUSH
38435: LD_INT 47
38437: PUSH
38438: LD_INT 45
38440: PUSH
38441: LD_INT 28
38443: PUSH
38444: LD_INT 7
38446: PUSH
38447: LD_INT 27
38449: PUSH
38450: LD_INT 29
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: IN
38465: PUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: LD_INT 52
38473: PPUSH
38474: CALL_OW 321
38478: PUSH
38479: LD_INT 2
38481: EQUAL
38482: AND
38483: IFFALSE 38500
// bpoints := bpoints * 1.2 ;
38485: LD_ADDR_VAR 0 10
38489: PUSH
38490: LD_VAR 0 10
38494: PUSH
38495: LD_REAL  1.20000000000000E+0000
38498: MUL
38499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38500: LD_VAR 0 6
38504: PPUSH
38505: CALL_OW 264
38509: PUSH
38510: LD_INT 6
38512: PUSH
38513: LD_INT 46
38515: PUSH
38516: LD_INT 47
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: IN
38524: IFFALSE 38541
// bpoints := bpoints * 1.2 ;
38526: LD_ADDR_VAR 0 10
38530: PUSH
38531: LD_VAR 0 10
38535: PUSH
38536: LD_REAL  1.20000000000000E+0000
38539: MUL
38540: ST_TO_ADDR
// end ; unit_building :
38541: GO 38555
38543: LD_INT 3
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38554
38551: POP
// ; end ;
38552: GO 38555
38554: POP
// for j = 1 to 3 do
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: DOUBLE
38561: LD_INT 1
38563: DEC
38564: ST_TO_ADDR
38565: LD_INT 3
38567: PUSH
38568: FOR_TO
38569: IFFALSE 38622
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38571: LD_ADDR_VAR 0 5
38575: PUSH
38576: LD_VAR 0 5
38580: PPUSH
38581: LD_VAR 0 7
38585: PPUSH
38586: LD_VAR 0 5
38590: PUSH
38591: LD_VAR 0 7
38595: ARRAY
38596: PUSH
38597: LD_VAR 0 9
38601: PUSH
38602: LD_VAR 0 7
38606: ARRAY
38607: PUSH
38608: LD_VAR 0 10
38612: MUL
38613: PLUS
38614: PPUSH
38615: CALL_OW 1
38619: ST_TO_ADDR
38620: GO 38568
38622: POP
38623: POP
// end ;
38624: GO 37103
38626: POP
38627: POP
// result := Replace ( result , 4 , tmp ) ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_VAR 0 5
38637: PPUSH
38638: LD_INT 4
38640: PPUSH
38641: LD_VAR 0 8
38645: PPUSH
38646: CALL_OW 1
38650: ST_TO_ADDR
// end ;
38651: LD_VAR 0 5
38655: RET
// export function DangerAtRange ( unit , range ) ; begin
38656: LD_INT 0
38658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38659: LD_ADDR_VAR 0 3
38663: PUSH
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 255
38673: PPUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 250
38683: PPUSH
38684: LD_VAR 0 1
38688: PPUSH
38689: CALL_OW 251
38693: PPUSH
38694: LD_VAR 0 2
38698: PPUSH
38699: CALL 36955 0 4
38703: ST_TO_ADDR
// end ;
38704: LD_VAR 0 3
38708: RET
// export function DangerInArea ( side , area ) ; begin
38709: LD_INT 0
38711: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38712: LD_ADDR_VAR 0 3
38716: PUSH
38717: LD_VAR 0 2
38721: PPUSH
38722: LD_INT 81
38724: PUSH
38725: LD_VAR 0 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PPUSH
38734: CALL_OW 70
38738: ST_TO_ADDR
// end ;
38739: LD_VAR 0 3
38743: RET
// export function IsExtension ( b ) ; begin
38744: LD_INT 0
38746: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38747: LD_ADDR_VAR 0 2
38751: PUSH
38752: LD_VAR 0 1
38756: PUSH
38757: LD_INT 23
38759: PUSH
38760: LD_INT 20
38762: PUSH
38763: LD_INT 22
38765: PUSH
38766: LD_INT 17
38768: PUSH
38769: LD_INT 24
38771: PUSH
38772: LD_INT 21
38774: PUSH
38775: LD_INT 19
38777: PUSH
38778: LD_INT 16
38780: PUSH
38781: LD_INT 25
38783: PUSH
38784: LD_INT 18
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: IN
38799: ST_TO_ADDR
// end ;
38800: LD_VAR 0 2
38804: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38805: LD_INT 0
38807: PPUSH
38808: PPUSH
38809: PPUSH
// result := [ ] ;
38810: LD_ADDR_VAR 0 4
38814: PUSH
38815: EMPTY
38816: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38817: LD_ADDR_VAR 0 5
38821: PUSH
38822: LD_VAR 0 2
38826: PPUSH
38827: LD_INT 21
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PPUSH
38837: CALL_OW 70
38841: ST_TO_ADDR
// if not tmp then
38842: LD_VAR 0 5
38846: NOT
38847: IFFALSE 38851
// exit ;
38849: GO 38915
// if checkLink then
38851: LD_VAR 0 3
38855: IFFALSE 38905
// begin for i in tmp do
38857: LD_ADDR_VAR 0 6
38861: PUSH
38862: LD_VAR 0 5
38866: PUSH
38867: FOR_IN
38868: IFFALSE 38903
// if GetBase ( i ) <> base then
38870: LD_VAR 0 6
38874: PPUSH
38875: CALL_OW 274
38879: PUSH
38880: LD_VAR 0 1
38884: NONEQUAL
38885: IFFALSE 38901
// ComLinkToBase ( base , i ) ;
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_VAR 0 6
38896: PPUSH
38897: CALL_OW 169
38901: GO 38867
38903: POP
38904: POP
// end ; result := tmp ;
38905: LD_ADDR_VAR 0 4
38909: PUSH
38910: LD_VAR 0 5
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 4
38919: RET
// export function ComComplete ( units , b ) ; var i ; begin
38920: LD_INT 0
38922: PPUSH
38923: PPUSH
// if not units then
38924: LD_VAR 0 1
38928: NOT
38929: IFFALSE 38933
// exit ;
38931: GO 39023
// for i in units do
38933: LD_ADDR_VAR 0 4
38937: PUSH
38938: LD_VAR 0 1
38942: PUSH
38943: FOR_IN
38944: IFFALSE 39021
// if BuildingStatus ( b ) = bs_build then
38946: LD_VAR 0 2
38950: PPUSH
38951: CALL_OW 461
38955: PUSH
38956: LD_INT 1
38958: EQUAL
38959: IFFALSE 39019
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38961: LD_VAR 0 4
38965: PPUSH
38966: LD_STRING h
38968: PUSH
38969: LD_VAR 0 2
38973: PPUSH
38974: CALL_OW 250
38978: PUSH
38979: LD_VAR 0 2
38983: PPUSH
38984: CALL_OW 251
38988: PUSH
38989: LD_VAR 0 2
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: PPUSH
39015: CALL_OW 446
39019: GO 38943
39021: POP
39022: POP
// end ;
39023: LD_VAR 0 3
39027: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39028: LD_INT 0
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39036: LD_VAR 0 1
39040: NOT
39041: PUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 263
39051: PUSH
39052: LD_INT 2
39054: NONEQUAL
39055: OR
39056: IFFALSE 39060
// exit ;
39058: GO 39376
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39060: LD_ADDR_VAR 0 6
39064: PUSH
39065: LD_INT 22
39067: PUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 255
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 30
39087: PUSH
39088: LD_INT 36
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 34
39097: PUSH
39098: LD_INT 31
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 69
39118: ST_TO_ADDR
// if not tmp then
39119: LD_VAR 0 6
39123: NOT
39124: IFFALSE 39128
// exit ;
39126: GO 39376
// result := [ ] ;
39128: LD_ADDR_VAR 0 2
39132: PUSH
39133: EMPTY
39134: ST_TO_ADDR
// for i in tmp do
39135: LD_ADDR_VAR 0 3
39139: PUSH
39140: LD_VAR 0 6
39144: PUSH
39145: FOR_IN
39146: IFFALSE 39217
// begin t := UnitsInside ( i ) ;
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_VAR 0 3
39157: PPUSH
39158: CALL_OW 313
39162: ST_TO_ADDR
// if t then
39163: LD_VAR 0 4
39167: IFFALSE 39215
// for j in t do
39169: LD_ADDR_VAR 0 7
39173: PUSH
39174: LD_VAR 0 4
39178: PUSH
39179: FOR_IN
39180: IFFALSE 39213
// result := Replace ( result , result + 1 , j ) ;
39182: LD_ADDR_VAR 0 2
39186: PUSH
39187: LD_VAR 0 2
39191: PPUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_INT 1
39199: PLUS
39200: PPUSH
39201: LD_VAR 0 7
39205: PPUSH
39206: CALL_OW 1
39210: ST_TO_ADDR
39211: GO 39179
39213: POP
39214: POP
// end ;
39215: GO 39145
39217: POP
39218: POP
// if not result then
39219: LD_VAR 0 2
39223: NOT
39224: IFFALSE 39228
// exit ;
39226: GO 39376
// mech := result [ 1 ] ;
39228: LD_ADDR_VAR 0 5
39232: PUSH
39233: LD_VAR 0 2
39237: PUSH
39238: LD_INT 1
39240: ARRAY
39241: ST_TO_ADDR
// if result > 1 then
39242: LD_VAR 0 2
39246: PUSH
39247: LD_INT 1
39249: GREATER
39250: IFFALSE 39362
// begin for i = 2 to result do
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: DOUBLE
39258: LD_INT 2
39260: DEC
39261: ST_TO_ADDR
39262: LD_VAR 0 2
39266: PUSH
39267: FOR_TO
39268: IFFALSE 39360
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39270: LD_ADDR_VAR 0 4
39274: PUSH
39275: LD_VAR 0 2
39279: PUSH
39280: LD_VAR 0 3
39284: ARRAY
39285: PPUSH
39286: LD_INT 3
39288: PPUSH
39289: CALL_OW 259
39293: PUSH
39294: LD_VAR 0 2
39298: PUSH
39299: LD_VAR 0 3
39303: ARRAY
39304: PPUSH
39305: CALL_OW 432
39309: MINUS
39310: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39311: LD_VAR 0 4
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: LD_INT 3
39323: PPUSH
39324: CALL_OW 259
39328: PUSH
39329: LD_VAR 0 5
39333: PPUSH
39334: CALL_OW 432
39338: MINUS
39339: GREATEREQUAL
39340: IFFALSE 39358
// mech := result [ i ] ;
39342: LD_ADDR_VAR 0 5
39346: PUSH
39347: LD_VAR 0 2
39351: PUSH
39352: LD_VAR 0 3
39356: ARRAY
39357: ST_TO_ADDR
// end ;
39358: GO 39267
39360: POP
39361: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39362: LD_VAR 0 1
39366: PPUSH
39367: LD_VAR 0 5
39371: PPUSH
39372: CALL_OW 135
// end ;
39376: LD_VAR 0 2
39380: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
// result := [ ] ;
39396: LD_ADDR_VAR 0 7
39400: PUSH
39401: EMPTY
39402: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 266
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: IN
39423: NOT
39424: IFFALSE 39428
// exit ;
39426: GO 41062
// if name then
39428: LD_VAR 0 3
39432: IFFALSE 39448
// SetBName ( base_dep , name ) ;
39434: LD_VAR 0 1
39438: PPUSH
39439: LD_VAR 0 3
39443: PPUSH
39444: CALL_OW 500
// base := GetBase ( base_dep ) ;
39448: LD_ADDR_VAR 0 15
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 274
39462: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39463: LD_ADDR_VAR 0 16
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 255
39477: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39478: LD_ADDR_VAR 0 17
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 248
39492: ST_TO_ADDR
// if sources then
39493: LD_VAR 0 5
39497: IFFALSE 39544
// for i = 1 to 3 do
39499: LD_ADDR_VAR 0 8
39503: PUSH
39504: DOUBLE
39505: LD_INT 1
39507: DEC
39508: ST_TO_ADDR
39509: LD_INT 3
39511: PUSH
39512: FOR_TO
39513: IFFALSE 39542
// AddResourceType ( base , i , sources [ i ] ) ;
39515: LD_VAR 0 15
39519: PPUSH
39520: LD_VAR 0 8
39524: PPUSH
39525: LD_VAR 0 5
39529: PUSH
39530: LD_VAR 0 8
39534: ARRAY
39535: PPUSH
39536: CALL_OW 276
39540: GO 39512
39542: POP
39543: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39544: LD_ADDR_VAR 0 18
39548: PUSH
39549: LD_VAR 0 15
39553: PPUSH
39554: LD_VAR 0 2
39558: PPUSH
39559: LD_INT 1
39561: PPUSH
39562: CALL 38805 0 3
39566: ST_TO_ADDR
// InitHc ;
39567: CALL_OW 19
// InitUc ;
39571: CALL_OW 18
// uc_side := side ;
39575: LD_ADDR_OWVAR 20
39579: PUSH
39580: LD_VAR 0 16
39584: ST_TO_ADDR
// uc_nation := nation ;
39585: LD_ADDR_OWVAR 21
39589: PUSH
39590: LD_VAR 0 17
39594: ST_TO_ADDR
// if buildings then
39595: LD_VAR 0 18
39599: IFFALSE 40921
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39601: LD_ADDR_VAR 0 19
39605: PUSH
39606: LD_VAR 0 18
39610: PPUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 30
39616: PUSH
39617: LD_INT 29
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 30
39626: PUSH
39627: LD_INT 30
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: PPUSH
39639: CALL_OW 72
39643: ST_TO_ADDR
// if tmp then
39644: LD_VAR 0 19
39648: IFFALSE 39696
// for i in tmp do
39650: LD_ADDR_VAR 0 8
39654: PUSH
39655: LD_VAR 0 19
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39694
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39663: LD_VAR 0 8
39667: PPUSH
39668: CALL_OW 250
39672: PPUSH
39673: LD_VAR 0 8
39677: PPUSH
39678: CALL_OW 251
39682: PPUSH
39683: LD_VAR 0 16
39687: PPUSH
39688: CALL_OW 441
39692: GO 39660
39694: POP
39695: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39696: LD_VAR 0 18
39700: PPUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 32
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 33
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PPUSH
39729: CALL_OW 72
39733: IFFALSE 39821
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39735: LD_ADDR_VAR 0 8
39739: PUSH
39740: LD_VAR 0 18
39744: PPUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 30
39750: PUSH
39751: LD_INT 32
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 30
39760: PUSH
39761: LD_INT 33
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: PPUSH
39773: CALL_OW 72
39777: PUSH
39778: FOR_IN
39779: IFFALSE 39819
// begin if not GetBWeapon ( i ) then
39781: LD_VAR 0 8
39785: PPUSH
39786: CALL_OW 269
39790: NOT
39791: IFFALSE 39817
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39793: LD_VAR 0 8
39797: PPUSH
39798: LD_VAR 0 8
39802: PPUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: CALL 41067 0 2
39812: PPUSH
39813: CALL_OW 431
// end ;
39817: GO 39778
39819: POP
39820: POP
// end ; for i = 1 to personel do
39821: LD_ADDR_VAR 0 8
39825: PUSH
39826: DOUBLE
39827: LD_INT 1
39829: DEC
39830: ST_TO_ADDR
39831: LD_VAR 0 6
39835: PUSH
39836: FOR_TO
39837: IFFALSE 40901
// begin if i > 4 then
39839: LD_VAR 0 8
39843: PUSH
39844: LD_INT 4
39846: GREATER
39847: IFFALSE 39851
// break ;
39849: GO 40901
// case i of 1 :
39851: LD_VAR 0 8
39855: PUSH
39856: LD_INT 1
39858: DOUBLE
39859: EQUAL
39860: IFTRUE 39864
39862: GO 39944
39864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39865: LD_ADDR_VAR 0 12
39869: PUSH
39870: LD_VAR 0 18
39874: PPUSH
39875: LD_INT 22
39877: PUSH
39878: LD_VAR 0 16
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 58
39889: PUSH
39890: EMPTY
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 30
39898: PUSH
39899: LD_INT 32
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 30
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 30
39918: PUSH
39919: LD_INT 5
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PPUSH
39937: CALL_OW 72
39941: ST_TO_ADDR
39942: GO 40166
39944: LD_INT 2
39946: DOUBLE
39947: EQUAL
39948: IFTRUE 39952
39950: GO 40014
39952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39953: LD_ADDR_VAR 0 12
39957: PUSH
39958: LD_VAR 0 18
39962: PPUSH
39963: LD_INT 22
39965: PUSH
39966: LD_VAR 0 16
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 30
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 30
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PPUSH
40007: CALL_OW 72
40011: ST_TO_ADDR
40012: GO 40166
40014: LD_INT 3
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40084
40022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40023: LD_ADDR_VAR 0 12
40027: PUSH
40028: LD_VAR 0 18
40032: PPUSH
40033: LD_INT 22
40035: PUSH
40036: LD_VAR 0 16
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 30
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 72
40081: ST_TO_ADDR
40082: GO 40166
40084: LD_INT 4
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40165
40092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40093: LD_ADDR_VAR 0 12
40097: PUSH
40098: LD_VAR 0 18
40102: PPUSH
40103: LD_INT 22
40105: PUSH
40106: LD_VAR 0 16
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 30
40120: PUSH
40121: LD_INT 6
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 7
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_INT 8
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PPUSH
40158: CALL_OW 72
40162: ST_TO_ADDR
40163: GO 40166
40165: POP
// if i = 1 then
40166: LD_VAR 0 8
40170: PUSH
40171: LD_INT 1
40173: EQUAL
40174: IFFALSE 40285
// begin tmp := [ ] ;
40176: LD_ADDR_VAR 0 19
40180: PUSH
40181: EMPTY
40182: ST_TO_ADDR
// for j in f do
40183: LD_ADDR_VAR 0 9
40187: PUSH
40188: LD_VAR 0 12
40192: PUSH
40193: FOR_IN
40194: IFFALSE 40267
// if GetBType ( j ) = b_bunker then
40196: LD_VAR 0 9
40200: PPUSH
40201: CALL_OW 266
40205: PUSH
40206: LD_INT 32
40208: EQUAL
40209: IFFALSE 40236
// tmp := Insert ( tmp , 1 , j ) else
40211: LD_ADDR_VAR 0 19
40215: PUSH
40216: LD_VAR 0 19
40220: PPUSH
40221: LD_INT 1
40223: PPUSH
40224: LD_VAR 0 9
40228: PPUSH
40229: CALL_OW 2
40233: ST_TO_ADDR
40234: GO 40265
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40236: LD_ADDR_VAR 0 19
40240: PUSH
40241: LD_VAR 0 19
40245: PPUSH
40246: LD_VAR 0 19
40250: PUSH
40251: LD_INT 1
40253: PLUS
40254: PPUSH
40255: LD_VAR 0 9
40259: PPUSH
40260: CALL_OW 2
40264: ST_TO_ADDR
40265: GO 40193
40267: POP
40268: POP
// if tmp then
40269: LD_VAR 0 19
40273: IFFALSE 40285
// f := tmp ;
40275: LD_ADDR_VAR 0 12
40279: PUSH
40280: LD_VAR 0 19
40284: ST_TO_ADDR
// end ; x := personel [ i ] ;
40285: LD_ADDR_VAR 0 13
40289: PUSH
40290: LD_VAR 0 6
40294: PUSH
40295: LD_VAR 0 8
40299: ARRAY
40300: ST_TO_ADDR
// if x = - 1 then
40301: LD_VAR 0 13
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: EQUAL
40310: IFFALSE 40519
// begin for j in f do
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_VAR 0 12
40321: PUSH
40322: FOR_IN
40323: IFFALSE 40515
// repeat InitHc ;
40325: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40329: LD_VAR 0 9
40333: PPUSH
40334: CALL_OW 266
40338: PUSH
40339: LD_INT 5
40341: EQUAL
40342: IFFALSE 40412
// begin if UnitsInside ( j ) < 3 then
40344: LD_VAR 0 9
40348: PPUSH
40349: CALL_OW 313
40353: PUSH
40354: LD_INT 3
40356: LESS
40357: IFFALSE 40393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40359: LD_INT 0
40361: PPUSH
40362: LD_INT 5
40364: PUSH
40365: LD_INT 8
40367: PUSH
40368: LD_INT 9
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: PUSH
40376: LD_VAR 0 17
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 4
40386: PPUSH
40387: CALL_OW 380
40391: GO 40410
// PrepareHuman ( false , i , skill ) ;
40393: LD_INT 0
40395: PPUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: CALL_OW 380
// end else
40410: GO 40429
// PrepareHuman ( false , i , skill ) ;
40412: LD_INT 0
40414: PPUSH
40415: LD_VAR 0 8
40419: PPUSH
40420: LD_VAR 0 4
40424: PPUSH
40425: CALL_OW 380
// un := CreateHuman ;
40429: LD_ADDR_VAR 0 14
40433: PUSH
40434: CALL_OW 44
40438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40439: LD_ADDR_VAR 0 7
40443: PUSH
40444: LD_VAR 0 7
40448: PPUSH
40449: LD_INT 1
40451: PPUSH
40452: LD_VAR 0 14
40456: PPUSH
40457: CALL_OW 2
40461: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40462: LD_VAR 0 14
40466: PPUSH
40467: LD_VAR 0 9
40471: PPUSH
40472: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40476: LD_VAR 0 9
40480: PPUSH
40481: CALL_OW 313
40485: PUSH
40486: LD_INT 6
40488: EQUAL
40489: PUSH
40490: LD_VAR 0 9
40494: PPUSH
40495: CALL_OW 266
40499: PUSH
40500: LD_INT 32
40502: PUSH
40503: LD_INT 31
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: IN
40510: OR
40511: IFFALSE 40325
40513: GO 40322
40515: POP
40516: POP
// end else
40517: GO 40899
// for j = 1 to x do
40519: LD_ADDR_VAR 0 9
40523: PUSH
40524: DOUBLE
40525: LD_INT 1
40527: DEC
40528: ST_TO_ADDR
40529: LD_VAR 0 13
40533: PUSH
40534: FOR_TO
40535: IFFALSE 40897
// begin InitHc ;
40537: CALL_OW 19
// if not f then
40541: LD_VAR 0 12
40545: NOT
40546: IFFALSE 40635
// begin PrepareHuman ( false , i , skill ) ;
40548: LD_INT 0
40550: PPUSH
40551: LD_VAR 0 8
40555: PPUSH
40556: LD_VAR 0 4
40560: PPUSH
40561: CALL_OW 380
// un := CreateHuman ;
40565: LD_ADDR_VAR 0 14
40569: PUSH
40570: CALL_OW 44
40574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40575: LD_ADDR_VAR 0 7
40579: PUSH
40580: LD_VAR 0 7
40584: PPUSH
40585: LD_INT 1
40587: PPUSH
40588: LD_VAR 0 14
40592: PPUSH
40593: CALL_OW 2
40597: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40598: LD_VAR 0 14
40602: PPUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 250
40612: PPUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 251
40622: PPUSH
40623: LD_INT 10
40625: PPUSH
40626: LD_INT 0
40628: PPUSH
40629: CALL_OW 50
// continue ;
40633: GO 40534
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40635: LD_VAR 0 12
40639: PUSH
40640: LD_INT 1
40642: ARRAY
40643: PPUSH
40644: CALL_OW 313
40648: PUSH
40649: LD_VAR 0 12
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PPUSH
40658: CALL_OW 266
40662: PUSH
40663: LD_INT 32
40665: PUSH
40666: LD_INT 31
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: IN
40673: AND
40674: PUSH
40675: LD_VAR 0 12
40679: PUSH
40680: LD_INT 1
40682: ARRAY
40683: PPUSH
40684: CALL_OW 313
40688: PUSH
40689: LD_INT 6
40691: EQUAL
40692: OR
40693: IFFALSE 40713
// f := Delete ( f , 1 ) ;
40695: LD_ADDR_VAR 0 12
40699: PUSH
40700: LD_VAR 0 12
40704: PPUSH
40705: LD_INT 1
40707: PPUSH
40708: CALL_OW 3
40712: ST_TO_ADDR
// if not f then
40713: LD_VAR 0 12
40717: NOT
40718: IFFALSE 40736
// begin x := x + 2 ;
40720: LD_ADDR_VAR 0 13
40724: PUSH
40725: LD_VAR 0 13
40729: PUSH
40730: LD_INT 2
40732: PLUS
40733: ST_TO_ADDR
// continue ;
40734: GO 40534
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40736: LD_VAR 0 12
40740: PUSH
40741: LD_INT 1
40743: ARRAY
40744: PPUSH
40745: CALL_OW 266
40749: PUSH
40750: LD_INT 5
40752: EQUAL
40753: IFFALSE 40827
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40755: LD_VAR 0 12
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: PPUSH
40764: CALL_OW 313
40768: PUSH
40769: LD_INT 3
40771: LESS
40772: IFFALSE 40808
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40774: LD_INT 0
40776: PPUSH
40777: LD_INT 5
40779: PUSH
40780: LD_INT 8
40782: PUSH
40783: LD_INT 9
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: PUSH
40791: LD_VAR 0 17
40795: ARRAY
40796: PPUSH
40797: LD_VAR 0 4
40801: PPUSH
40802: CALL_OW 380
40806: GO 40825
// PrepareHuman ( false , i , skill ) ;
40808: LD_INT 0
40810: PPUSH
40811: LD_VAR 0 8
40815: PPUSH
40816: LD_VAR 0 4
40820: PPUSH
40821: CALL_OW 380
// end else
40825: GO 40844
// PrepareHuman ( false , i , skill ) ;
40827: LD_INT 0
40829: PPUSH
40830: LD_VAR 0 8
40834: PPUSH
40835: LD_VAR 0 4
40839: PPUSH
40840: CALL_OW 380
// un := CreateHuman ;
40844: LD_ADDR_VAR 0 14
40848: PUSH
40849: CALL_OW 44
40853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40854: LD_ADDR_VAR 0 7
40858: PUSH
40859: LD_VAR 0 7
40863: PPUSH
40864: LD_INT 1
40866: PPUSH
40867: LD_VAR 0 14
40871: PPUSH
40872: CALL_OW 2
40876: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40877: LD_VAR 0 14
40881: PPUSH
40882: LD_VAR 0 12
40886: PUSH
40887: LD_INT 1
40889: ARRAY
40890: PPUSH
40891: CALL_OW 52
// end ;
40895: GO 40534
40897: POP
40898: POP
// end ;
40899: GO 39836
40901: POP
40902: POP
// result := result ^ buildings ;
40903: LD_ADDR_VAR 0 7
40907: PUSH
40908: LD_VAR 0 7
40912: PUSH
40913: LD_VAR 0 18
40917: ADD
40918: ST_TO_ADDR
// end else
40919: GO 41062
// begin for i = 1 to personel do
40921: LD_ADDR_VAR 0 8
40925: PUSH
40926: DOUBLE
40927: LD_INT 1
40929: DEC
40930: ST_TO_ADDR
40931: LD_VAR 0 6
40935: PUSH
40936: FOR_TO
40937: IFFALSE 41060
// begin if i > 4 then
40939: LD_VAR 0 8
40943: PUSH
40944: LD_INT 4
40946: GREATER
40947: IFFALSE 40951
// break ;
40949: GO 41060
// x := personel [ i ] ;
40951: LD_ADDR_VAR 0 13
40955: PUSH
40956: LD_VAR 0 6
40960: PUSH
40961: LD_VAR 0 8
40965: ARRAY
40966: ST_TO_ADDR
// if x = - 1 then
40967: LD_VAR 0 13
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: EQUAL
40976: IFFALSE 40980
// continue ;
40978: GO 40936
// PrepareHuman ( false , i , skill ) ;
40980: LD_INT 0
40982: PPUSH
40983: LD_VAR 0 8
40987: PPUSH
40988: LD_VAR 0 4
40992: PPUSH
40993: CALL_OW 380
// un := CreateHuman ;
40997: LD_ADDR_VAR 0 14
41001: PUSH
41002: CALL_OW 44
41006: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41007: LD_VAR 0 14
41011: PPUSH
41012: LD_VAR 0 1
41016: PPUSH
41017: CALL_OW 250
41021: PPUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 251
41031: PPUSH
41032: LD_INT 10
41034: PPUSH
41035: LD_INT 0
41037: PPUSH
41038: CALL_OW 50
// result := result ^ un ;
41042: LD_ADDR_VAR 0 7
41046: PUSH
41047: LD_VAR 0 7
41051: PUSH
41052: LD_VAR 0 14
41056: ADD
41057: ST_TO_ADDR
// end ;
41058: GO 40936
41060: POP
41061: POP
// end ; end ;
41062: LD_VAR 0 7
41066: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
// result := false ;
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: LD_INT 0
41092: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41093: LD_VAR 0 1
41097: NOT
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 266
41108: PUSH
41109: LD_INT 32
41111: PUSH
41112: LD_INT 33
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: IN
41119: NOT
41120: OR
41121: IFFALSE 41125
// exit ;
41123: GO 42234
// nat := GetNation ( tower ) ;
41125: LD_ADDR_VAR 0 12
41129: PUSH
41130: LD_VAR 0 1
41134: PPUSH
41135: CALL_OW 248
41139: ST_TO_ADDR
// side := GetSide ( tower ) ;
41140: LD_ADDR_VAR 0 16
41144: PUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 255
41154: ST_TO_ADDR
// x := GetX ( tower ) ;
41155: LD_ADDR_VAR 0 10
41159: PUSH
41160: LD_VAR 0 1
41164: PPUSH
41165: CALL_OW 250
41169: ST_TO_ADDR
// y := GetY ( tower ) ;
41170: LD_ADDR_VAR 0 11
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 251
41184: ST_TO_ADDR
// if not x or not y then
41185: LD_VAR 0 10
41189: NOT
41190: PUSH
41191: LD_VAR 0 11
41195: NOT
41196: OR
41197: IFFALSE 41201
// exit ;
41199: GO 42234
// weapon := 0 ;
41201: LD_ADDR_VAR 0 18
41205: PUSH
41206: LD_INT 0
41208: ST_TO_ADDR
// fac_list := [ ] ;
41209: LD_ADDR_VAR 0 17
41213: PUSH
41214: EMPTY
41215: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41216: LD_ADDR_VAR 0 6
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 274
41230: PPUSH
41231: LD_VAR 0 2
41235: PPUSH
41236: LD_INT 0
41238: PPUSH
41239: CALL 38805 0 3
41243: PPUSH
41244: LD_INT 30
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PPUSH
41254: CALL_OW 72
41258: ST_TO_ADDR
// if not factories then
41259: LD_VAR 0 6
41263: NOT
41264: IFFALSE 41268
// exit ;
41266: GO 42234
// for i in factories do
41268: LD_ADDR_VAR 0 8
41272: PUSH
41273: LD_VAR 0 6
41277: PUSH
41278: FOR_IN
41279: IFFALSE 41304
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41281: LD_ADDR_VAR 0 17
41285: PUSH
41286: LD_VAR 0 17
41290: PUSH
41291: LD_VAR 0 8
41295: PPUSH
41296: CALL_OW 478
41300: UNION
41301: ST_TO_ADDR
41302: GO 41278
41304: POP
41305: POP
// if not fac_list then
41306: LD_VAR 0 17
41310: NOT
41311: IFFALSE 41315
// exit ;
41313: GO 42234
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_INT 4
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: LD_INT 9
41328: PUSH
41329: LD_INT 10
41331: PUSH
41332: LD_INT 6
41334: PUSH
41335: LD_INT 7
41337: PUSH
41338: LD_INT 11
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 27
41352: PUSH
41353: LD_INT 28
41355: PUSH
41356: LD_INT 26
41358: PUSH
41359: LD_INT 30
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 43
41370: PUSH
41371: LD_INT 44
41373: PUSH
41374: LD_INT 46
41376: PUSH
41377: LD_INT 45
41379: PUSH
41380: LD_INT 47
41382: PUSH
41383: LD_INT 49
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: PUSH
41399: LD_VAR 0 12
41403: ARRAY
41404: ST_TO_ADDR
// list := list isect fac_list ;
41405: LD_ADDR_VAR 0 5
41409: PUSH
41410: LD_VAR 0 5
41414: PUSH
41415: LD_VAR 0 17
41419: ISECT
41420: ST_TO_ADDR
// if not list then
41421: LD_VAR 0 5
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 42234
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41430: LD_VAR 0 12
41434: PUSH
41435: LD_INT 3
41437: EQUAL
41438: PUSH
41439: LD_INT 49
41441: PUSH
41442: LD_VAR 0 5
41446: IN
41447: AND
41448: PUSH
41449: LD_INT 31
41451: PPUSH
41452: LD_VAR 0 16
41456: PPUSH
41457: CALL_OW 321
41461: PUSH
41462: LD_INT 2
41464: EQUAL
41465: AND
41466: IFFALSE 41526
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41468: LD_INT 22
41470: PUSH
41471: LD_VAR 0 16
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 35
41482: PUSH
41483: LD_INT 49
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 91
41492: PUSH
41493: LD_VAR 0 1
41497: PUSH
41498: LD_INT 10
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: PPUSH
41511: CALL_OW 69
41515: NOT
41516: IFFALSE 41526
// weapon := ru_time_lapser ;
41518: LD_ADDR_VAR 0 18
41522: PUSH
41523: LD_INT 49
41525: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41526: LD_VAR 0 12
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: IN
41541: PUSH
41542: LD_INT 11
41544: PUSH
41545: LD_VAR 0 5
41549: IN
41550: PUSH
41551: LD_INT 30
41553: PUSH
41554: LD_VAR 0 5
41558: IN
41559: OR
41560: AND
41561: PUSH
41562: LD_INT 6
41564: PPUSH
41565: LD_VAR 0 16
41569: PPUSH
41570: CALL_OW 321
41574: PUSH
41575: LD_INT 2
41577: EQUAL
41578: AND
41579: IFFALSE 41744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41581: LD_INT 22
41583: PUSH
41584: LD_VAR 0 16
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 35
41598: PUSH
41599: LD_INT 11
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 35
41608: PUSH
41609: LD_INT 30
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 91
41623: PUSH
41624: LD_VAR 0 1
41628: PUSH
41629: LD_INT 18
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: PPUSH
41642: CALL_OW 69
41646: NOT
41647: PUSH
41648: LD_INT 22
41650: PUSH
41651: LD_VAR 0 16
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 30
41665: PUSH
41666: LD_INT 32
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 30
41675: PUSH
41676: LD_INT 33
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 91
41690: PUSH
41691: LD_VAR 0 1
41695: PUSH
41696: LD_INT 12
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: PPUSH
41712: CALL_OW 69
41716: PUSH
41717: LD_INT 2
41719: GREATER
41720: AND
41721: IFFALSE 41744
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41723: LD_ADDR_VAR 0 18
41727: PUSH
41728: LD_INT 11
41730: PUSH
41731: LD_INT 30
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_VAR 0 12
41742: ARRAY
41743: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41744: LD_VAR 0 18
41748: NOT
41749: PUSH
41750: LD_INT 40
41752: PPUSH
41753: LD_VAR 0 16
41757: PPUSH
41758: CALL_OW 321
41762: PUSH
41763: LD_INT 2
41765: EQUAL
41766: AND
41767: PUSH
41768: LD_INT 7
41770: PUSH
41771: LD_VAR 0 5
41775: IN
41776: PUSH
41777: LD_INT 28
41779: PUSH
41780: LD_VAR 0 5
41784: IN
41785: OR
41786: PUSH
41787: LD_INT 45
41789: PUSH
41790: LD_VAR 0 5
41794: IN
41795: OR
41796: AND
41797: IFFALSE 42051
// begin hex := GetHexInfo ( x , y ) ;
41799: LD_ADDR_VAR 0 4
41803: PUSH
41804: LD_VAR 0 10
41808: PPUSH
41809: LD_VAR 0 11
41813: PPUSH
41814: CALL_OW 546
41818: ST_TO_ADDR
// if hex [ 1 ] then
41819: LD_VAR 0 4
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: IFFALSE 41831
// exit ;
41829: GO 42234
// height := hex [ 2 ] ;
41831: LD_ADDR_VAR 0 15
41835: PUSH
41836: LD_VAR 0 4
41840: PUSH
41841: LD_INT 2
41843: ARRAY
41844: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41845: LD_ADDR_VAR 0 14
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 3
41858: PUSH
41859: LD_INT 5
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// for i in tmp do
41868: LD_ADDR_VAR 0 8
41872: PUSH
41873: LD_VAR 0 14
41877: PUSH
41878: FOR_IN
41879: IFFALSE 42049
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41881: LD_ADDR_VAR 0 9
41885: PUSH
41886: LD_VAR 0 10
41890: PPUSH
41891: LD_VAR 0 8
41895: PPUSH
41896: LD_INT 5
41898: PPUSH
41899: CALL_OW 272
41903: PUSH
41904: LD_VAR 0 11
41908: PPUSH
41909: LD_VAR 0 8
41913: PPUSH
41914: LD_INT 5
41916: PPUSH
41917: CALL_OW 273
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41926: LD_VAR 0 9
41930: PUSH
41931: LD_INT 1
41933: ARRAY
41934: PPUSH
41935: LD_VAR 0 9
41939: PUSH
41940: LD_INT 2
41942: ARRAY
41943: PPUSH
41944: CALL_OW 488
41948: IFFALSE 42047
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 9
41959: PUSH
41960: LD_INT 1
41962: ARRAY
41963: PPUSH
41964: LD_VAR 0 9
41968: PUSH
41969: LD_INT 2
41971: ARRAY
41972: PPUSH
41973: CALL_OW 546
41977: ST_TO_ADDR
// if hex [ 1 ] then
41978: LD_VAR 0 4
41982: PUSH
41983: LD_INT 1
41985: ARRAY
41986: IFFALSE 41990
// continue ;
41988: GO 41878
// h := hex [ 2 ] ;
41990: LD_ADDR_VAR 0 13
41994: PUSH
41995: LD_VAR 0 4
41999: PUSH
42000: LD_INT 2
42002: ARRAY
42003: ST_TO_ADDR
// if h + 7 < height then
42004: LD_VAR 0 13
42008: PUSH
42009: LD_INT 7
42011: PLUS
42012: PUSH
42013: LD_VAR 0 15
42017: LESS
42018: IFFALSE 42047
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42020: LD_ADDR_VAR 0 18
42024: PUSH
42025: LD_INT 7
42027: PUSH
42028: LD_INT 28
42030: PUSH
42031: LD_INT 45
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: PUSH
42039: LD_VAR 0 12
42043: ARRAY
42044: ST_TO_ADDR
// break ;
42045: GO 42049
// end ; end ; end ;
42047: GO 41878
42049: POP
42050: POP
// end ; if not weapon then
42051: LD_VAR 0 18
42055: NOT
42056: IFFALSE 42116
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42058: LD_ADDR_VAR 0 5
42062: PUSH
42063: LD_VAR 0 5
42067: PUSH
42068: LD_INT 11
42070: PUSH
42071: LD_INT 30
42073: PUSH
42074: LD_INT 49
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: DIFF
42082: ST_TO_ADDR
// if not list then
42083: LD_VAR 0 5
42087: NOT
42088: IFFALSE 42092
// exit ;
42090: GO 42234
// weapon := list [ rand ( 1 , list ) ] ;
42092: LD_ADDR_VAR 0 18
42096: PUSH
42097: LD_VAR 0 5
42101: PUSH
42102: LD_INT 1
42104: PPUSH
42105: LD_VAR 0 5
42109: PPUSH
42110: CALL_OW 12
42114: ARRAY
42115: ST_TO_ADDR
// end ; if weapon then
42116: LD_VAR 0 18
42120: IFFALSE 42234
// begin tmp := CostOfWeapon ( weapon ) ;
42122: LD_ADDR_VAR 0 14
42126: PUSH
42127: LD_VAR 0 18
42131: PPUSH
42132: CALL_OW 451
42136: ST_TO_ADDR
// j := GetBase ( tower ) ;
42137: LD_ADDR_VAR 0 9
42141: PUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: CALL_OW 274
42151: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42152: LD_VAR 0 9
42156: PPUSH
42157: LD_INT 1
42159: PPUSH
42160: CALL_OW 275
42164: PUSH
42165: LD_VAR 0 14
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: GREATEREQUAL
42174: PUSH
42175: LD_VAR 0 9
42179: PPUSH
42180: LD_INT 2
42182: PPUSH
42183: CALL_OW 275
42187: PUSH
42188: LD_VAR 0 14
42192: PUSH
42193: LD_INT 2
42195: ARRAY
42196: GREATEREQUAL
42197: AND
42198: PUSH
42199: LD_VAR 0 9
42203: PPUSH
42204: LD_INT 3
42206: PPUSH
42207: CALL_OW 275
42211: PUSH
42212: LD_VAR 0 14
42216: PUSH
42217: LD_INT 3
42219: ARRAY
42220: GREATEREQUAL
42221: AND
42222: IFFALSE 42234
// result := weapon ;
42224: LD_ADDR_VAR 0 3
42228: PUSH
42229: LD_VAR 0 18
42233: ST_TO_ADDR
// end ; end ;
42234: LD_VAR 0 3
42238: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42239: LD_INT 0
42241: PPUSH
42242: PPUSH
// result := true ;
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_INT 1
42250: ST_TO_ADDR
// if array1 = array2 then
42251: LD_VAR 0 1
42255: PUSH
42256: LD_VAR 0 2
42260: EQUAL
42261: IFFALSE 42321
// begin for i = 1 to array1 do
42263: LD_ADDR_VAR 0 4
42267: PUSH
42268: DOUBLE
42269: LD_INT 1
42271: DEC
42272: ST_TO_ADDR
42273: LD_VAR 0 1
42277: PUSH
42278: FOR_TO
42279: IFFALSE 42317
// if array1 [ i ] <> array2 [ i ] then
42281: LD_VAR 0 1
42285: PUSH
42286: LD_VAR 0 4
42290: ARRAY
42291: PUSH
42292: LD_VAR 0 2
42296: PUSH
42297: LD_VAR 0 4
42301: ARRAY
42302: NONEQUAL
42303: IFFALSE 42315
// begin result := false ;
42305: LD_ADDR_VAR 0 3
42309: PUSH
42310: LD_INT 0
42312: ST_TO_ADDR
// break ;
42313: GO 42317
// end ;
42315: GO 42278
42317: POP
42318: POP
// end else
42319: GO 42329
// result := false ;
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_INT 0
42328: ST_TO_ADDR
// end ;
42329: LD_VAR 0 3
42333: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42334: LD_INT 0
42336: PPUSH
42337: PPUSH
// if not array1 or not array2 then
42338: LD_VAR 0 1
42342: NOT
42343: PUSH
42344: LD_VAR 0 2
42348: NOT
42349: OR
42350: IFFALSE 42354
// exit ;
42352: GO 42418
// result := true ;
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_INT 1
42361: ST_TO_ADDR
// for i = 1 to array1 do
42362: LD_ADDR_VAR 0 4
42366: PUSH
42367: DOUBLE
42368: LD_INT 1
42370: DEC
42371: ST_TO_ADDR
42372: LD_VAR 0 1
42376: PUSH
42377: FOR_TO
42378: IFFALSE 42416
// if array1 [ i ] <> array2 [ i ] then
42380: LD_VAR 0 1
42384: PUSH
42385: LD_VAR 0 4
42389: ARRAY
42390: PUSH
42391: LD_VAR 0 2
42395: PUSH
42396: LD_VAR 0 4
42400: ARRAY
42401: NONEQUAL
42402: IFFALSE 42414
// begin result := false ;
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_INT 0
42411: ST_TO_ADDR
// break ;
42412: GO 42416
// end ;
42414: GO 42377
42416: POP
42417: POP
// end ;
42418: LD_VAR 0 3
42422: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
42427: PPUSH
// pom := GetBase ( fac ) ;
42428: LD_ADDR_VAR 0 5
42432: PUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL_OW 274
42442: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42443: LD_ADDR_VAR 0 4
42447: PUSH
42448: LD_VAR 0 2
42452: PUSH
42453: LD_INT 1
42455: ARRAY
42456: PPUSH
42457: LD_VAR 0 2
42461: PUSH
42462: LD_INT 2
42464: ARRAY
42465: PPUSH
42466: LD_VAR 0 2
42470: PUSH
42471: LD_INT 3
42473: ARRAY
42474: PPUSH
42475: LD_VAR 0 2
42479: PUSH
42480: LD_INT 4
42482: ARRAY
42483: PPUSH
42484: CALL_OW 449
42488: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42489: LD_ADDR_VAR 0 3
42493: PUSH
42494: LD_VAR 0 5
42498: PPUSH
42499: LD_INT 1
42501: PPUSH
42502: CALL_OW 275
42506: PUSH
42507: LD_VAR 0 4
42511: PUSH
42512: LD_INT 1
42514: ARRAY
42515: GREATEREQUAL
42516: PUSH
42517: LD_VAR 0 5
42521: PPUSH
42522: LD_INT 2
42524: PPUSH
42525: CALL_OW 275
42529: PUSH
42530: LD_VAR 0 4
42534: PUSH
42535: LD_INT 2
42537: ARRAY
42538: GREATEREQUAL
42539: AND
42540: PUSH
42541: LD_VAR 0 5
42545: PPUSH
42546: LD_INT 3
42548: PPUSH
42549: CALL_OW 275
42553: PUSH
42554: LD_VAR 0 4
42558: PUSH
42559: LD_INT 3
42561: ARRAY
42562: GREATEREQUAL
42563: AND
42564: ST_TO_ADDR
// end ;
42565: LD_VAR 0 3
42569: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42570: LD_INT 0
42572: PPUSH
42573: PPUSH
42574: PPUSH
42575: PPUSH
// pom := GetBase ( building ) ;
42576: LD_ADDR_VAR 0 3
42580: PUSH
42581: LD_VAR 0 1
42585: PPUSH
42586: CALL_OW 274
42590: ST_TO_ADDR
// if not pom then
42591: LD_VAR 0 3
42595: NOT
42596: IFFALSE 42600
// exit ;
42598: GO 42770
// btype := GetBType ( building ) ;
42600: LD_ADDR_VAR 0 5
42604: PUSH
42605: LD_VAR 0 1
42609: PPUSH
42610: CALL_OW 266
42614: ST_TO_ADDR
// if btype = b_armoury then
42615: LD_VAR 0 5
42619: PUSH
42620: LD_INT 4
42622: EQUAL
42623: IFFALSE 42633
// btype := b_barracks ;
42625: LD_ADDR_VAR 0 5
42629: PUSH
42630: LD_INT 5
42632: ST_TO_ADDR
// if btype = b_depot then
42633: LD_VAR 0 5
42637: PUSH
42638: LD_INT 0
42640: EQUAL
42641: IFFALSE 42651
// btype := b_warehouse ;
42643: LD_ADDR_VAR 0 5
42647: PUSH
42648: LD_INT 1
42650: ST_TO_ADDR
// if btype = b_workshop then
42651: LD_VAR 0 5
42655: PUSH
42656: LD_INT 2
42658: EQUAL
42659: IFFALSE 42669
// btype := b_factory ;
42661: LD_ADDR_VAR 0 5
42665: PUSH
42666: LD_INT 3
42668: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42669: LD_ADDR_VAR 0 4
42673: PUSH
42674: LD_VAR 0 5
42678: PPUSH
42679: LD_VAR 0 1
42683: PPUSH
42684: CALL_OW 248
42688: PPUSH
42689: CALL_OW 450
42693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42694: LD_ADDR_VAR 0 2
42698: PUSH
42699: LD_VAR 0 3
42703: PPUSH
42704: LD_INT 1
42706: PPUSH
42707: CALL_OW 275
42711: PUSH
42712: LD_VAR 0 4
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: GREATEREQUAL
42721: PUSH
42722: LD_VAR 0 3
42726: PPUSH
42727: LD_INT 2
42729: PPUSH
42730: CALL_OW 275
42734: PUSH
42735: LD_VAR 0 4
42739: PUSH
42740: LD_INT 2
42742: ARRAY
42743: GREATEREQUAL
42744: AND
42745: PUSH
42746: LD_VAR 0 3
42750: PPUSH
42751: LD_INT 3
42753: PPUSH
42754: CALL_OW 275
42758: PUSH
42759: LD_VAR 0 4
42763: PUSH
42764: LD_INT 3
42766: ARRAY
42767: GREATEREQUAL
42768: AND
42769: ST_TO_ADDR
// end ;
42770: LD_VAR 0 2
42774: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42775: LD_INT 0
42777: PPUSH
42778: PPUSH
42779: PPUSH
// pom := GetBase ( building ) ;
42780: LD_ADDR_VAR 0 4
42784: PUSH
42785: LD_VAR 0 1
42789: PPUSH
42790: CALL_OW 274
42794: ST_TO_ADDR
// if not pom then
42795: LD_VAR 0 4
42799: NOT
42800: IFFALSE 42804
// exit ;
42802: GO 42905
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42804: LD_ADDR_VAR 0 5
42808: PUSH
42809: LD_VAR 0 2
42813: PPUSH
42814: LD_VAR 0 1
42818: PPUSH
42819: CALL_OW 248
42823: PPUSH
42824: CALL_OW 450
42828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42829: LD_ADDR_VAR 0 3
42833: PUSH
42834: LD_VAR 0 4
42838: PPUSH
42839: LD_INT 1
42841: PPUSH
42842: CALL_OW 275
42846: PUSH
42847: LD_VAR 0 5
42851: PUSH
42852: LD_INT 1
42854: ARRAY
42855: GREATEREQUAL
42856: PUSH
42857: LD_VAR 0 4
42861: PPUSH
42862: LD_INT 2
42864: PPUSH
42865: CALL_OW 275
42869: PUSH
42870: LD_VAR 0 5
42874: PUSH
42875: LD_INT 2
42877: ARRAY
42878: GREATEREQUAL
42879: AND
42880: PUSH
42881: LD_VAR 0 4
42885: PPUSH
42886: LD_INT 3
42888: PPUSH
42889: CALL_OW 275
42893: PUSH
42894: LD_VAR 0 5
42898: PUSH
42899: LD_INT 3
42901: ARRAY
42902: GREATEREQUAL
42903: AND
42904: ST_TO_ADDR
// end ;
42905: LD_VAR 0 3
42909: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42910: LD_INT 0
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
// result := false ;
42923: LD_ADDR_VAR 0 8
42927: PUSH
42928: LD_INT 0
42930: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42931: LD_VAR 0 5
42935: NOT
42936: PUSH
42937: LD_VAR 0 1
42941: NOT
42942: OR
42943: PUSH
42944: LD_VAR 0 2
42948: NOT
42949: OR
42950: PUSH
42951: LD_VAR 0 3
42955: NOT
42956: OR
42957: IFFALSE 42961
// exit ;
42959: GO 43775
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42961: LD_ADDR_VAR 0 14
42965: PUSH
42966: LD_VAR 0 1
42970: PPUSH
42971: LD_VAR 0 2
42975: PPUSH
42976: LD_VAR 0 3
42980: PPUSH
42981: LD_VAR 0 4
42985: PPUSH
42986: LD_VAR 0 5
42990: PUSH
42991: LD_INT 1
42993: ARRAY
42994: PPUSH
42995: CALL_OW 248
42999: PPUSH
43000: LD_INT 0
43002: PPUSH
43003: CALL 45008 0 6
43007: ST_TO_ADDR
// if not hexes then
43008: LD_VAR 0 14
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 43775
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43017: LD_ADDR_VAR 0 17
43021: PUSH
43022: LD_VAR 0 5
43026: PPUSH
43027: LD_INT 22
43029: PUSH
43030: LD_VAR 0 13
43034: PPUSH
43035: CALL_OW 255
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 30
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 30
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PPUSH
43076: CALL_OW 72
43080: ST_TO_ADDR
// for i = 1 to hexes do
43081: LD_ADDR_VAR 0 9
43085: PUSH
43086: DOUBLE
43087: LD_INT 1
43089: DEC
43090: ST_TO_ADDR
43091: LD_VAR 0 14
43095: PUSH
43096: FOR_TO
43097: IFFALSE 43773
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43099: LD_ADDR_VAR 0 13
43103: PUSH
43104: LD_VAR 0 14
43108: PUSH
43109: LD_VAR 0 9
43113: ARRAY
43114: PUSH
43115: LD_INT 1
43117: ARRAY
43118: PPUSH
43119: LD_VAR 0 14
43123: PUSH
43124: LD_VAR 0 9
43128: ARRAY
43129: PUSH
43130: LD_INT 2
43132: ARRAY
43133: PPUSH
43134: CALL_OW 428
43138: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43139: LD_VAR 0 14
43143: PUSH
43144: LD_VAR 0 9
43148: ARRAY
43149: PUSH
43150: LD_INT 1
43152: ARRAY
43153: PPUSH
43154: LD_VAR 0 14
43158: PUSH
43159: LD_VAR 0 9
43163: ARRAY
43164: PUSH
43165: LD_INT 2
43167: ARRAY
43168: PPUSH
43169: CALL_OW 351
43173: PUSH
43174: LD_VAR 0 14
43178: PUSH
43179: LD_VAR 0 9
43183: ARRAY
43184: PUSH
43185: LD_INT 1
43187: ARRAY
43188: PPUSH
43189: LD_VAR 0 14
43193: PUSH
43194: LD_VAR 0 9
43198: ARRAY
43199: PUSH
43200: LD_INT 2
43202: ARRAY
43203: PPUSH
43204: CALL_OW 488
43208: NOT
43209: OR
43210: PUSH
43211: LD_VAR 0 13
43215: PPUSH
43216: CALL_OW 247
43220: PUSH
43221: LD_INT 3
43223: EQUAL
43224: OR
43225: IFFALSE 43231
// exit ;
43227: POP
43228: POP
43229: GO 43775
// if not tmp then
43231: LD_VAR 0 13
43235: NOT
43236: IFFALSE 43240
// continue ;
43238: GO 43096
// result := true ;
43240: LD_ADDR_VAR 0 8
43244: PUSH
43245: LD_INT 1
43247: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43248: LD_VAR 0 6
43252: PUSH
43253: LD_VAR 0 13
43257: PPUSH
43258: CALL_OW 247
43262: PUSH
43263: LD_INT 2
43265: EQUAL
43266: AND
43267: PUSH
43268: LD_VAR 0 13
43272: PPUSH
43273: CALL_OW 263
43277: PUSH
43278: LD_INT 1
43280: EQUAL
43281: AND
43282: IFFALSE 43446
// begin if IsDrivenBy ( tmp ) then
43284: LD_VAR 0 13
43288: PPUSH
43289: CALL_OW 311
43293: IFFALSE 43297
// continue ;
43295: GO 43096
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43297: LD_VAR 0 6
43301: PPUSH
43302: LD_INT 3
43304: PUSH
43305: LD_INT 60
43307: PUSH
43308: EMPTY
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: PUSH
43318: LD_INT 55
43320: PUSH
43321: EMPTY
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PPUSH
43332: CALL_OW 72
43336: IFFALSE 43444
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43338: LD_ADDR_VAR 0 18
43342: PUSH
43343: LD_VAR 0 6
43347: PPUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 60
43353: PUSH
43354: EMPTY
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: LD_INT 55
43366: PUSH
43367: EMPTY
43368: LIST
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PPUSH
43378: CALL_OW 72
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: ST_TO_ADDR
// if IsInUnit ( driver ) then
43387: LD_VAR 0 18
43391: PPUSH
43392: CALL_OW 310
43396: IFFALSE 43407
// ComExit ( driver ) ;
43398: LD_VAR 0 18
43402: PPUSH
43403: CALL 68696 0 1
// AddComEnterUnit ( driver , tmp ) ;
43407: LD_VAR 0 18
43411: PPUSH
43412: LD_VAR 0 13
43416: PPUSH
43417: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43421: LD_VAR 0 18
43425: PPUSH
43426: LD_VAR 0 7
43430: PPUSH
43431: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43435: LD_VAR 0 18
43439: PPUSH
43440: CALL_OW 181
// end ; continue ;
43444: GO 43096
// end ; if not cleaners or not tmp in cleaners then
43446: LD_VAR 0 6
43450: NOT
43451: PUSH
43452: LD_VAR 0 13
43456: PUSH
43457: LD_VAR 0 6
43461: IN
43462: NOT
43463: OR
43464: IFFALSE 43771
// begin if dep then
43466: LD_VAR 0 17
43470: IFFALSE 43606
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43472: LD_ADDR_VAR 0 16
43476: PUSH
43477: LD_VAR 0 17
43481: PUSH
43482: LD_INT 1
43484: ARRAY
43485: PPUSH
43486: CALL_OW 250
43490: PPUSH
43491: LD_VAR 0 17
43495: PUSH
43496: LD_INT 1
43498: ARRAY
43499: PPUSH
43500: CALL_OW 254
43504: PPUSH
43505: LD_INT 5
43507: PPUSH
43508: CALL_OW 272
43512: PUSH
43513: LD_VAR 0 17
43517: PUSH
43518: LD_INT 1
43520: ARRAY
43521: PPUSH
43522: CALL_OW 251
43526: PPUSH
43527: LD_VAR 0 17
43531: PUSH
43532: LD_INT 1
43534: ARRAY
43535: PPUSH
43536: CALL_OW 254
43540: PPUSH
43541: LD_INT 5
43543: PPUSH
43544: CALL_OW 273
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43553: LD_VAR 0 16
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: PPUSH
43562: LD_VAR 0 16
43566: PUSH
43567: LD_INT 2
43569: ARRAY
43570: PPUSH
43571: CALL_OW 488
43575: IFFALSE 43606
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43577: LD_VAR 0 13
43581: PPUSH
43582: LD_VAR 0 16
43586: PUSH
43587: LD_INT 1
43589: ARRAY
43590: PPUSH
43591: LD_VAR 0 16
43595: PUSH
43596: LD_INT 2
43598: ARRAY
43599: PPUSH
43600: CALL_OW 111
// continue ;
43604: GO 43096
// end ; end ; r := GetDir ( tmp ) ;
43606: LD_ADDR_VAR 0 15
43610: PUSH
43611: LD_VAR 0 13
43615: PPUSH
43616: CALL_OW 254
43620: ST_TO_ADDR
// if r = 5 then
43621: LD_VAR 0 15
43625: PUSH
43626: LD_INT 5
43628: EQUAL
43629: IFFALSE 43639
// r := 0 ;
43631: LD_ADDR_VAR 0 15
43635: PUSH
43636: LD_INT 0
43638: ST_TO_ADDR
// for j = r to 5 do
43639: LD_ADDR_VAR 0 10
43643: PUSH
43644: DOUBLE
43645: LD_VAR 0 15
43649: DEC
43650: ST_TO_ADDR
43651: LD_INT 5
43653: PUSH
43654: FOR_TO
43655: IFFALSE 43769
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43657: LD_ADDR_VAR 0 11
43661: PUSH
43662: LD_VAR 0 13
43666: PPUSH
43667: CALL_OW 250
43671: PPUSH
43672: LD_VAR 0 10
43676: PPUSH
43677: LD_INT 2
43679: PPUSH
43680: CALL_OW 272
43684: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43685: LD_ADDR_VAR 0 12
43689: PUSH
43690: LD_VAR 0 13
43694: PPUSH
43695: CALL_OW 251
43699: PPUSH
43700: LD_VAR 0 10
43704: PPUSH
43705: LD_INT 2
43707: PPUSH
43708: CALL_OW 273
43712: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43713: LD_VAR 0 11
43717: PPUSH
43718: LD_VAR 0 12
43722: PPUSH
43723: CALL_OW 488
43727: PUSH
43728: LD_VAR 0 11
43732: PPUSH
43733: LD_VAR 0 12
43737: PPUSH
43738: CALL_OW 428
43742: NOT
43743: AND
43744: IFFALSE 43767
// begin ComMoveXY ( tmp , _x , _y ) ;
43746: LD_VAR 0 13
43750: PPUSH
43751: LD_VAR 0 11
43755: PPUSH
43756: LD_VAR 0 12
43760: PPUSH
43761: CALL_OW 111
// break ;
43765: GO 43769
// end ; end ;
43767: GO 43654
43769: POP
43770: POP
// end ; end ;
43771: GO 43096
43773: POP
43774: POP
// end ;
43775: LD_VAR 0 8
43779: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43780: LD_INT 0
43782: PPUSH
// result := true ;
43783: LD_ADDR_VAR 0 3
43787: PUSH
43788: LD_INT 1
43790: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43791: LD_VAR 0 2
43795: PUSH
43796: LD_INT 24
43798: DOUBLE
43799: EQUAL
43800: IFTRUE 43810
43802: LD_INT 33
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43835
43810: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 32
43818: PPUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 321
43828: PUSH
43829: LD_INT 2
43831: EQUAL
43832: ST_TO_ADDR
43833: GO 44151
43835: LD_INT 20
43837: DOUBLE
43838: EQUAL
43839: IFTRUE 43843
43841: GO 43868
43843: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43844: LD_ADDR_VAR 0 3
43848: PUSH
43849: LD_INT 6
43851: PPUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 321
43861: PUSH
43862: LD_INT 2
43864: EQUAL
43865: ST_TO_ADDR
43866: GO 44151
43868: LD_INT 22
43870: DOUBLE
43871: EQUAL
43872: IFTRUE 43882
43874: LD_INT 36
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43907
43882: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 15
43890: PPUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 321
43900: PUSH
43901: LD_INT 2
43903: EQUAL
43904: ST_TO_ADDR
43905: GO 44151
43907: LD_INT 30
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 43940
43915: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 20
43923: PPUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 321
43933: PUSH
43934: LD_INT 2
43936: EQUAL
43937: ST_TO_ADDR
43938: GO 44151
43940: LD_INT 28
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43954
43946: LD_INT 21
43948: DOUBLE
43949: EQUAL
43950: IFTRUE 43954
43952: GO 43979
43954: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_INT 21
43962: PPUSH
43963: LD_VAR 0 1
43967: PPUSH
43968: CALL_OW 321
43972: PUSH
43973: LD_INT 2
43975: EQUAL
43976: ST_TO_ADDR
43977: GO 44151
43979: LD_INT 16
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 43987
43985: GO 44012
43987: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43988: LD_ADDR_VAR 0 3
43992: PUSH
43993: LD_INT 84
43995: PPUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: CALL_OW 321
44005: PUSH
44006: LD_INT 2
44008: EQUAL
44009: ST_TO_ADDR
44010: GO 44151
44012: LD_INT 19
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44026
44018: LD_INT 23
44020: DOUBLE
44021: EQUAL
44022: IFTRUE 44026
44024: GO 44051
44026: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44027: LD_ADDR_VAR 0 3
44031: PUSH
44032: LD_INT 83
44034: PPUSH
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL_OW 321
44044: PUSH
44045: LD_INT 2
44047: EQUAL
44048: ST_TO_ADDR
44049: GO 44151
44051: LD_INT 17
44053: DOUBLE
44054: EQUAL
44055: IFTRUE 44059
44057: GO 44084
44059: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44060: LD_ADDR_VAR 0 3
44064: PUSH
44065: LD_INT 39
44067: PPUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: CALL_OW 321
44077: PUSH
44078: LD_INT 2
44080: EQUAL
44081: ST_TO_ADDR
44082: GO 44151
44084: LD_INT 18
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 44117
44092: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44093: LD_ADDR_VAR 0 3
44097: PUSH
44098: LD_INT 40
44100: PPUSH
44101: LD_VAR 0 1
44105: PPUSH
44106: CALL_OW 321
44110: PUSH
44111: LD_INT 2
44113: EQUAL
44114: ST_TO_ADDR
44115: GO 44151
44117: LD_INT 27
44119: DOUBLE
44120: EQUAL
44121: IFTRUE 44125
44123: GO 44150
44125: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44126: LD_ADDR_VAR 0 3
44130: PUSH
44131: LD_INT 35
44133: PPUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 321
44143: PUSH
44144: LD_INT 2
44146: EQUAL
44147: ST_TO_ADDR
44148: GO 44151
44150: POP
// end ;
44151: LD_VAR 0 3
44155: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44156: LD_INT 0
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
// result := false ;
44169: LD_ADDR_VAR 0 6
44173: PUSH
44174: LD_INT 0
44176: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44177: LD_VAR 0 1
44181: NOT
44182: PUSH
44183: LD_VAR 0 1
44187: PPUSH
44188: CALL_OW 266
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: IN
44203: NOT
44204: OR
44205: PUSH
44206: LD_VAR 0 2
44210: NOT
44211: OR
44212: PUSH
44213: LD_VAR 0 5
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 4
44232: PUSH
44233: LD_INT 5
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: IN
44244: NOT
44245: OR
44246: PUSH
44247: LD_VAR 0 3
44251: PPUSH
44252: LD_VAR 0 4
44256: PPUSH
44257: CALL_OW 488
44261: NOT
44262: OR
44263: IFFALSE 44267
// exit ;
44265: GO 45003
// side := GetSide ( depot ) ;
44267: LD_ADDR_VAR 0 9
44271: PUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 255
44281: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44282: LD_VAR 0 9
44286: PPUSH
44287: LD_VAR 0 2
44291: PPUSH
44292: CALL 43780 0 2
44296: NOT
44297: IFFALSE 44301
// exit ;
44299: GO 45003
// pom := GetBase ( depot ) ;
44301: LD_ADDR_VAR 0 10
44305: PUSH
44306: LD_VAR 0 1
44310: PPUSH
44311: CALL_OW 274
44315: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44316: LD_ADDR_VAR 0 11
44320: PUSH
44321: LD_VAR 0 2
44325: PPUSH
44326: LD_VAR 0 1
44330: PPUSH
44331: CALL_OW 248
44335: PPUSH
44336: CALL_OW 450
44340: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44341: LD_VAR 0 10
44345: PPUSH
44346: LD_INT 1
44348: PPUSH
44349: CALL_OW 275
44353: PUSH
44354: LD_VAR 0 11
44358: PUSH
44359: LD_INT 1
44361: ARRAY
44362: GREATEREQUAL
44363: PUSH
44364: LD_VAR 0 10
44368: PPUSH
44369: LD_INT 2
44371: PPUSH
44372: CALL_OW 275
44376: PUSH
44377: LD_VAR 0 11
44381: PUSH
44382: LD_INT 2
44384: ARRAY
44385: GREATEREQUAL
44386: AND
44387: PUSH
44388: LD_VAR 0 10
44392: PPUSH
44393: LD_INT 3
44395: PPUSH
44396: CALL_OW 275
44400: PUSH
44401: LD_VAR 0 11
44405: PUSH
44406: LD_INT 3
44408: ARRAY
44409: GREATEREQUAL
44410: AND
44411: NOT
44412: IFFALSE 44416
// exit ;
44414: GO 45003
// if GetBType ( depot ) = b_depot then
44416: LD_VAR 0 1
44420: PPUSH
44421: CALL_OW 266
44425: PUSH
44426: LD_INT 0
44428: EQUAL
44429: IFFALSE 44441
// dist := 28 else
44431: LD_ADDR_VAR 0 14
44435: PUSH
44436: LD_INT 28
44438: ST_TO_ADDR
44439: GO 44449
// dist := 36 ;
44441: LD_ADDR_VAR 0 14
44445: PUSH
44446: LD_INT 36
44448: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44449: LD_VAR 0 1
44453: PPUSH
44454: LD_VAR 0 3
44458: PPUSH
44459: LD_VAR 0 4
44463: PPUSH
44464: CALL_OW 297
44468: PUSH
44469: LD_VAR 0 14
44473: GREATER
44474: IFFALSE 44478
// exit ;
44476: GO 45003
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44478: LD_ADDR_VAR 0 12
44482: PUSH
44483: LD_VAR 0 2
44487: PPUSH
44488: LD_VAR 0 3
44492: PPUSH
44493: LD_VAR 0 4
44497: PPUSH
44498: LD_VAR 0 5
44502: PPUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 248
44512: PPUSH
44513: LD_INT 0
44515: PPUSH
44516: CALL 45008 0 6
44520: ST_TO_ADDR
// if not hexes then
44521: LD_VAR 0 12
44525: NOT
44526: IFFALSE 44530
// exit ;
44528: GO 45003
// hex := GetHexInfo ( x , y ) ;
44530: LD_ADDR_VAR 0 15
44534: PUSH
44535: LD_VAR 0 3
44539: PPUSH
44540: LD_VAR 0 4
44544: PPUSH
44545: CALL_OW 546
44549: ST_TO_ADDR
// if hex [ 1 ] then
44550: LD_VAR 0 15
44554: PUSH
44555: LD_INT 1
44557: ARRAY
44558: IFFALSE 44562
// exit ;
44560: GO 45003
// height := hex [ 2 ] ;
44562: LD_ADDR_VAR 0 13
44566: PUSH
44567: LD_VAR 0 15
44571: PUSH
44572: LD_INT 2
44574: ARRAY
44575: ST_TO_ADDR
// for i = 1 to hexes do
44576: LD_ADDR_VAR 0 7
44580: PUSH
44581: DOUBLE
44582: LD_INT 1
44584: DEC
44585: ST_TO_ADDR
44586: LD_VAR 0 12
44590: PUSH
44591: FOR_TO
44592: IFFALSE 44922
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44594: LD_VAR 0 12
44598: PUSH
44599: LD_VAR 0 7
44603: ARRAY
44604: PUSH
44605: LD_INT 1
44607: ARRAY
44608: PPUSH
44609: LD_VAR 0 12
44613: PUSH
44614: LD_VAR 0 7
44618: ARRAY
44619: PUSH
44620: LD_INT 2
44622: ARRAY
44623: PPUSH
44624: CALL_OW 488
44628: NOT
44629: PUSH
44630: LD_VAR 0 12
44634: PUSH
44635: LD_VAR 0 7
44639: ARRAY
44640: PUSH
44641: LD_INT 1
44643: ARRAY
44644: PPUSH
44645: LD_VAR 0 12
44649: PUSH
44650: LD_VAR 0 7
44654: ARRAY
44655: PUSH
44656: LD_INT 2
44658: ARRAY
44659: PPUSH
44660: CALL_OW 428
44664: PUSH
44665: LD_INT 0
44667: GREATER
44668: OR
44669: PUSH
44670: LD_VAR 0 12
44674: PUSH
44675: LD_VAR 0 7
44679: ARRAY
44680: PUSH
44681: LD_INT 1
44683: ARRAY
44684: PPUSH
44685: LD_VAR 0 12
44689: PUSH
44690: LD_VAR 0 7
44694: ARRAY
44695: PUSH
44696: LD_INT 2
44698: ARRAY
44699: PPUSH
44700: CALL_OW 351
44704: OR
44705: IFFALSE 44711
// exit ;
44707: POP
44708: POP
44709: GO 45003
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44711: LD_ADDR_VAR 0 8
44715: PUSH
44716: LD_VAR 0 12
44720: PUSH
44721: LD_VAR 0 7
44725: ARRAY
44726: PUSH
44727: LD_INT 1
44729: ARRAY
44730: PPUSH
44731: LD_VAR 0 12
44735: PUSH
44736: LD_VAR 0 7
44740: ARRAY
44741: PUSH
44742: LD_INT 2
44744: ARRAY
44745: PPUSH
44746: CALL_OW 546
44750: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44751: LD_VAR 0 8
44755: PUSH
44756: LD_INT 1
44758: ARRAY
44759: PUSH
44760: LD_VAR 0 8
44764: PUSH
44765: LD_INT 2
44767: ARRAY
44768: PUSH
44769: LD_VAR 0 13
44773: PUSH
44774: LD_INT 2
44776: PLUS
44777: GREATER
44778: OR
44779: PUSH
44780: LD_VAR 0 8
44784: PUSH
44785: LD_INT 2
44787: ARRAY
44788: PUSH
44789: LD_VAR 0 13
44793: PUSH
44794: LD_INT 2
44796: MINUS
44797: LESS
44798: OR
44799: PUSH
44800: LD_VAR 0 8
44804: PUSH
44805: LD_INT 3
44807: ARRAY
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 8
44814: PUSH
44815: LD_INT 9
44817: PUSH
44818: LD_INT 10
44820: PUSH
44821: LD_INT 11
44823: PUSH
44824: LD_INT 12
44826: PUSH
44827: LD_INT 13
44829: PUSH
44830: LD_INT 16
44832: PUSH
44833: LD_INT 17
44835: PUSH
44836: LD_INT 18
44838: PUSH
44839: LD_INT 19
44841: PUSH
44842: LD_INT 20
44844: PUSH
44845: LD_INT 21
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: IN
44863: NOT
44864: OR
44865: PUSH
44866: LD_VAR 0 8
44870: PUSH
44871: LD_INT 5
44873: ARRAY
44874: NOT
44875: OR
44876: PUSH
44877: LD_VAR 0 8
44881: PUSH
44882: LD_INT 6
44884: ARRAY
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 7
44894: PUSH
44895: LD_INT 9
44897: PUSH
44898: LD_INT 10
44900: PUSH
44901: LD_INT 11
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: IN
44912: NOT
44913: OR
44914: IFFALSE 44920
// exit ;
44916: POP
44917: POP
44918: GO 45003
// end ;
44920: GO 44591
44922: POP
44923: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44924: LD_VAR 0 9
44928: PPUSH
44929: LD_VAR 0 3
44933: PPUSH
44934: LD_VAR 0 4
44938: PPUSH
44939: LD_INT 20
44941: PPUSH
44942: CALL 36955 0 4
44946: PUSH
44947: LD_INT 4
44949: ARRAY
44950: IFFALSE 44954
// exit ;
44952: GO 45003
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44954: LD_VAR 0 2
44958: PUSH
44959: LD_INT 29
44961: PUSH
44962: LD_INT 30
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: IN
44969: PUSH
44970: LD_VAR 0 3
44974: PPUSH
44975: LD_VAR 0 4
44979: PPUSH
44980: LD_VAR 0 9
44984: PPUSH
44985: CALL_OW 440
44989: NOT
44990: AND
44991: IFFALSE 44995
// exit ;
44993: GO 45003
// result := true ;
44995: LD_ADDR_VAR 0 6
44999: PUSH
45000: LD_INT 1
45002: ST_TO_ADDR
// end ;
45003: LD_VAR 0 6
45007: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45008: LD_INT 0
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
45051: PPUSH
45052: PPUSH
45053: PPUSH
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
// result = [ ] ;
45068: LD_ADDR_VAR 0 7
45072: PUSH
45073: EMPTY
45074: ST_TO_ADDR
// temp_list = [ ] ;
45075: LD_ADDR_VAR 0 9
45079: PUSH
45080: EMPTY
45081: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45082: LD_VAR 0 4
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: LD_INT 4
45101: PUSH
45102: LD_INT 5
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: IN
45113: NOT
45114: PUSH
45115: LD_VAR 0 1
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: IN
45130: PUSH
45131: LD_VAR 0 5
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: IN
45150: NOT
45151: AND
45152: OR
45153: IFFALSE 45157
// exit ;
45155: GO 63548
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45157: LD_VAR 0 1
45161: PUSH
45162: LD_INT 6
45164: PUSH
45165: LD_INT 7
45167: PUSH
45168: LD_INT 8
45170: PUSH
45171: LD_INT 13
45173: PUSH
45174: LD_INT 12
45176: PUSH
45177: LD_INT 15
45179: PUSH
45180: LD_INT 11
45182: PUSH
45183: LD_INT 14
45185: PUSH
45186: LD_INT 10
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: IN
45200: IFFALSE 45210
// btype = b_lab ;
45202: LD_ADDR_VAR 0 1
45206: PUSH
45207: LD_INT 6
45209: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45210: LD_VAR 0 6
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: IN
45229: NOT
45230: PUSH
45231: LD_VAR 0 1
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: LD_INT 3
45247: PUSH
45248: LD_INT 6
45250: PUSH
45251: LD_INT 36
45253: PUSH
45254: LD_INT 4
45256: PUSH
45257: LD_INT 5
45259: PUSH
45260: LD_INT 31
45262: PUSH
45263: LD_INT 32
45265: PUSH
45266: LD_INT 33
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: IN
45282: NOT
45283: PUSH
45284: LD_VAR 0 6
45288: PUSH
45289: LD_INT 1
45291: EQUAL
45292: AND
45293: OR
45294: PUSH
45295: LD_VAR 0 1
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: IN
45310: NOT
45311: PUSH
45312: LD_VAR 0 6
45316: PUSH
45317: LD_INT 2
45319: EQUAL
45320: AND
45321: OR
45322: IFFALSE 45332
// mode = 0 ;
45324: LD_ADDR_VAR 0 6
45328: PUSH
45329: LD_INT 0
45331: ST_TO_ADDR
// case mode of 0 :
45332: LD_VAR 0 6
45336: PUSH
45337: LD_INT 0
45339: DOUBLE
45340: EQUAL
45341: IFTRUE 45345
45343: GO 56798
45345: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45346: LD_ADDR_VAR 0 11
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45539: LD_ADDR_VAR 0 12
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45735: LD_ADDR_VAR 0 13
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 3
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45934: LD_ADDR_VAR 0 14
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 2
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46130: LD_ADDR_VAR 0 15
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46323: LD_ADDR_VAR 0 16
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: LD_INT 3
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46516: LD_ADDR_VAR 0 17
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46746: LD_ADDR_VAR 0 18
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46976: LD_ADDR_VAR 0 19
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47206: LD_ADDR_VAR 0 20
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47436: LD_ADDR_VAR 0 21
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47666: LD_ADDR_VAR 0 22
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47896: LD_ADDR_VAR 0 23
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 3
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48176: LD_ADDR_VAR 0 24
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48452: LD_ADDR_VAR 0 25
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48726: LD_ADDR_VAR 0 26
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: NEG
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49002: LD_ADDR_VAR 0 27
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49282: LD_ADDR_VAR 0 28
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49564: LD_ADDR_VAR 0 29
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49843: LD_ADDR_VAR 0 30
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 3
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50121: LD_ADDR_VAR 0 31
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50399: LD_ADDR_VAR 0 32
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50677: LD_ADDR_VAR 0 33
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 3
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50956: LD_ADDR_VAR 0 34
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51236: LD_ADDR_VAR 0 35
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51348: LD_ADDR_VAR 0 36
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51460: LD_ADDR_VAR 0 37
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51572: LD_ADDR_VAR 0 38
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51684: LD_ADDR_VAR 0 39
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51796: LD_ADDR_VAR 0 40
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51908: LD_ADDR_VAR 0 41
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52258: LD_ADDR_VAR 0 42
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 3
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 3
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52608: LD_ADDR_VAR 0 43
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52956: LD_ADDR_VAR 0 44
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 3
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53306: LD_ADDR_VAR 0 45
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 3
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53656: LD_ADDR_VAR 0 46
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54004: LD_ADDR_VAR 0 47
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54155: LD_ADDR_VAR 0 48
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54302: LD_ADDR_VAR 0 49
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54446: LD_ADDR_VAR 0 50
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54590: LD_ADDR_VAR 0 51
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54737: LD_ADDR_VAR 0 52
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54888: LD_ADDR_VAR 0 53
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55118: LD_ADDR_VAR 0 54
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55348: LD_ADDR_VAR 0 55
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55578: LD_ADDR_VAR 0 56
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55808: LD_ADDR_VAR 0 57
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56038: LD_ADDR_VAR 0 58
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56268: LD_ADDR_VAR 0 59
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56356: LD_ADDR_VAR 0 60
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56444: LD_ADDR_VAR 0 61
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56532: LD_ADDR_VAR 0 62
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56620: LD_ADDR_VAR 0 63
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56708: LD_ADDR_VAR 0 64
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// end ; 1 :
56796: GO 62693
56798: LD_INT 1
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56806
56804: GO 59429
56806: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56807: LD_ADDR_VAR 0 11
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: LIST
56850: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56851: LD_ADDR_VAR 0 12
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56892: LD_ADDR_VAR 0 13
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56932: LD_ADDR_VAR 0 14
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56973: LD_ADDR_VAR 0 15
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 3
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57017: LD_ADDR_VAR 0 16
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57063: LD_ADDR_VAR 0 17
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57107: LD_ADDR_VAR 0 18
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 3
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57148: LD_ADDR_VAR 0 19
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57188: LD_ADDR_VAR 0 20
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57229: LD_ADDR_VAR 0 21
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: LIST
57272: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57273: LD_ADDR_VAR 0 22
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 3
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: NEG
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57319: LD_ADDR_VAR 0 23
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57363: LD_ADDR_VAR 0 24
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 4
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57404: LD_ADDR_VAR 0 25
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57444: LD_ADDR_VAR 0 26
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57485: LD_ADDR_VAR 0 27
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57529: LD_ADDR_VAR 0 28
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57575: LD_ADDR_VAR 0 29
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 4
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 5
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 5
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 4
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 6
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 6
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 5
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57730: LD_ADDR_VAR 0 30
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 4
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 4
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 5
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 5
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 5
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 6
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 6
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57873: LD_ADDR_VAR 0 31
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 4
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: PUSH
57921: LD_INT 4
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: LD_INT 4
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 5
57940: PUSH
57941: LD_INT 4
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: LD_INT 5
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 4
57960: PUSH
57961: LD_INT 5
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 6
57970: PUSH
57971: LD_INT 5
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 6
57980: PUSH
57981: LD_INT 6
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 5
57990: PUSH
57991: LD_INT 6
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58012: LD_ADDR_VAR 0 32
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 6
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 6
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 5
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58155: LD_ADDR_VAR 0 33
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 4
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 4
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 5
58241: NEG
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 5
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 5
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 6
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 6
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58310: LD_ADDR_VAR 0 34
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 4
58365: NEG
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 4
58377: NEG
58378: PUSH
58379: LD_INT 4
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: LD_INT 5
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 5
58401: NEG
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 5
58413: NEG
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 5
58425: NEG
58426: PUSH
58427: LD_INT 6
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 6
58437: NEG
58438: PUSH
58439: LD_INT 5
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 6
58449: NEG
58450: PUSH
58451: LD_INT 6
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58473: LD_ADDR_VAR 0 41
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58517: LD_ADDR_VAR 0 42
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58558: LD_ADDR_VAR 0 43
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58598: LD_ADDR_VAR 0 44
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58639: LD_ADDR_VAR 0 45
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58683: LD_ADDR_VAR 0 46
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58729: LD_ADDR_VAR 0 47
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58762: LD_ADDR_VAR 0 48
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58793: LD_ADDR_VAR 0 49
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58822: LD_ADDR_VAR 0 50
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 3
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58851: LD_ADDR_VAR 0 51
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58882: LD_ADDR_VAR 0 52
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58915: LD_ADDR_VAR 0 53
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58959: LD_ADDR_VAR 0 54
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59000: LD_ADDR_VAR 0 55
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 3
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59040: LD_ADDR_VAR 0 56
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59081: LD_ADDR_VAR 0 57
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59125: LD_ADDR_VAR 0 58
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59171: LD_ADDR_VAR 0 59
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59215: LD_ADDR_VAR 0 60
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59256: LD_ADDR_VAR 0 61
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59296: LD_ADDR_VAR 0 62
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59337: LD_ADDR_VAR 0 63
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59381: LD_ADDR_VAR 0 64
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
// end ; 2 :
59427: GO 62693
59429: LD_INT 2
59431: DOUBLE
59432: EQUAL
59433: IFTRUE 59437
59435: GO 62692
59437: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59438: LD_ADDR_VAR 0 29
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 4
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 5
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 5
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 5
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 4
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 4
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 5
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 5
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 3
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: LD_INT 5
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 3
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: NEG
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 3
59766: NEG
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 4
59777: NEG
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 4
59823: NEG
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: LD_INT 5
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: LD_INT 4
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: LD_INT 5
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 5
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 5
59919: NEG
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59976: LD_ADDR_VAR 0 30
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: LD_INT 4
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 5
60013: PUSH
60014: LD_INT 5
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 4
60023: PUSH
60024: LD_INT 5
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: LD_INT 4
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: LD_INT 5
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 4
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 4
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 4
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: NEG
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: NEG
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 5
60222: NEG
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 5
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 4
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 4
60340: NEG
60341: PUSH
60342: LD_INT 4
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 4
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 5
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: LD_INT 4
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 4
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 5
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60523: LD_ADDR_VAR 0 31
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 4
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 5
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 5
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 3
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: LD_INT 5
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 4
60702: NEG
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: NEG
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: LD_INT 5
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: NEG
60750: PUSH
60751: LD_INT 4
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 4
60773: NEG
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 5
60785: NEG
60786: PUSH
60787: LD_INT 4
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 5
60797: NEG
60798: PUSH
60799: LD_INT 5
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: LD_INT 5
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 5
60821: NEG
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: LD_INT 4
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 5
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61073: LD_ADDR_VAR 0 32
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 5
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 5
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 5
61159: NEG
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 4
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 4
61254: NEG
61255: PUSH
61256: LD_INT 4
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: LD_INT 4
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 4
61278: NEG
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 4
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 5
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 4
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 4
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 5
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: LD_INT 5
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 4
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: LD_INT 4
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 5
61515: PUSH
61516: LD_INT 5
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: LD_INT 5
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 5
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 5
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61620: LD_ADDR_VAR 0 33
61624: PUSH
61625: LD_INT 4
61627: NEG
61628: PUSH
61629: LD_INT 4
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 4
61639: NEG
61640: PUSH
61641: LD_INT 5
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: LD_INT 4
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 4
61675: NEG
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 5
61687: NEG
61688: PUSH
61689: LD_INT 4
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 5
61699: NEG
61700: PUSH
61701: LD_INT 5
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: LD_INT 5
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 5
61723: NEG
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 3
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 3
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: LD_INT 4
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 4
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 4
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 4
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 5
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 5
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 4
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: LD_INT 2
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 5
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: LD_INT 3
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: LD_INT 4
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: LD_INT 4
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 4
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: LD_INT 4
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 5
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62158: LD_ADDR_VAR 0 34
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 4
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 5
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 4
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 4
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 5
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: LD_INT 3
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: LD_INT 5
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 3
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 3
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 4
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 4
62370: PUSH
62371: LD_INT 3
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 5
62380: PUSH
62381: LD_INT 4
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 5
62390: PUSH
62391: LD_INT 5
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 4
62400: PUSH
62401: LD_INT 5
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: LD_INT 4
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 5
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 3
62440: PUSH
62441: LD_INT 5
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: LD_INT 4
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 4
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 4
62588: NEG
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 5
62599: NEG
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 5
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 5
62622: NEG
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// end ; end ;
62690: GO 62693
62692: POP
// case btype of b_depot , b_warehouse :
62693: LD_VAR 0 1
62697: PUSH
62698: LD_INT 0
62700: DOUBLE
62701: EQUAL
62702: IFTRUE 62712
62704: LD_INT 1
62706: DOUBLE
62707: EQUAL
62708: IFTRUE 62712
62710: GO 62913
62712: POP
// case nation of nation_american :
62713: LD_VAR 0 5
62717: PUSH
62718: LD_INT 1
62720: DOUBLE
62721: EQUAL
62722: IFTRUE 62726
62724: GO 62782
62726: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62727: LD_ADDR_VAR 0 9
62731: PUSH
62732: LD_VAR 0 11
62736: PUSH
62737: LD_VAR 0 12
62741: PUSH
62742: LD_VAR 0 13
62746: PUSH
62747: LD_VAR 0 14
62751: PUSH
62752: LD_VAR 0 15
62756: PUSH
62757: LD_VAR 0 16
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: LD_VAR 0 4
62774: PUSH
62775: LD_INT 1
62777: PLUS
62778: ARRAY
62779: ST_TO_ADDR
62780: GO 62911
62782: LD_INT 2
62784: DOUBLE
62785: EQUAL
62786: IFTRUE 62790
62788: GO 62846
62790: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62791: LD_ADDR_VAR 0 9
62795: PUSH
62796: LD_VAR 0 17
62800: PUSH
62801: LD_VAR 0 18
62805: PUSH
62806: LD_VAR 0 19
62810: PUSH
62811: LD_VAR 0 20
62815: PUSH
62816: LD_VAR 0 21
62820: PUSH
62821: LD_VAR 0 22
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: PUSH
62834: LD_VAR 0 4
62838: PUSH
62839: LD_INT 1
62841: PLUS
62842: ARRAY
62843: ST_TO_ADDR
62844: GO 62911
62846: LD_INT 3
62848: DOUBLE
62849: EQUAL
62850: IFTRUE 62854
62852: GO 62910
62854: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62855: LD_ADDR_VAR 0 9
62859: PUSH
62860: LD_VAR 0 23
62864: PUSH
62865: LD_VAR 0 24
62869: PUSH
62870: LD_VAR 0 25
62874: PUSH
62875: LD_VAR 0 26
62879: PUSH
62880: LD_VAR 0 27
62884: PUSH
62885: LD_VAR 0 28
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: LD_VAR 0 4
62902: PUSH
62903: LD_INT 1
62905: PLUS
62906: ARRAY
62907: ST_TO_ADDR
62908: GO 62911
62910: POP
62911: GO 63466
62913: LD_INT 2
62915: DOUBLE
62916: EQUAL
62917: IFTRUE 62927
62919: LD_INT 3
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62927
62925: GO 62983
62927: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62928: LD_ADDR_VAR 0 9
62932: PUSH
62933: LD_VAR 0 29
62937: PUSH
62938: LD_VAR 0 30
62942: PUSH
62943: LD_VAR 0 31
62947: PUSH
62948: LD_VAR 0 32
62952: PUSH
62953: LD_VAR 0 33
62957: PUSH
62958: LD_VAR 0 34
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: PUSH
62971: LD_VAR 0 4
62975: PUSH
62976: LD_INT 1
62978: PLUS
62979: ARRAY
62980: ST_TO_ADDR
62981: GO 63466
62983: LD_INT 16
62985: DOUBLE
62986: EQUAL
62987: IFTRUE 63045
62989: LD_INT 17
62991: DOUBLE
62992: EQUAL
62993: IFTRUE 63045
62995: LD_INT 18
62997: DOUBLE
62998: EQUAL
62999: IFTRUE 63045
63001: LD_INT 19
63003: DOUBLE
63004: EQUAL
63005: IFTRUE 63045
63007: LD_INT 22
63009: DOUBLE
63010: EQUAL
63011: IFTRUE 63045
63013: LD_INT 20
63015: DOUBLE
63016: EQUAL
63017: IFTRUE 63045
63019: LD_INT 21
63021: DOUBLE
63022: EQUAL
63023: IFTRUE 63045
63025: LD_INT 23
63027: DOUBLE
63028: EQUAL
63029: IFTRUE 63045
63031: LD_INT 24
63033: DOUBLE
63034: EQUAL
63035: IFTRUE 63045
63037: LD_INT 25
63039: DOUBLE
63040: EQUAL
63041: IFTRUE 63045
63043: GO 63101
63045: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63046: LD_ADDR_VAR 0 9
63050: PUSH
63051: LD_VAR 0 35
63055: PUSH
63056: LD_VAR 0 36
63060: PUSH
63061: LD_VAR 0 37
63065: PUSH
63066: LD_VAR 0 38
63070: PUSH
63071: LD_VAR 0 39
63075: PUSH
63076: LD_VAR 0 40
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: PUSH
63089: LD_VAR 0 4
63093: PUSH
63094: LD_INT 1
63096: PLUS
63097: ARRAY
63098: ST_TO_ADDR
63099: GO 63466
63101: LD_INT 6
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63157
63107: LD_INT 7
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63157
63113: LD_INT 8
63115: DOUBLE
63116: EQUAL
63117: IFTRUE 63157
63119: LD_INT 13
63121: DOUBLE
63122: EQUAL
63123: IFTRUE 63157
63125: LD_INT 12
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63157
63131: LD_INT 15
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63157
63137: LD_INT 11
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63157
63143: LD_INT 14
63145: DOUBLE
63146: EQUAL
63147: IFTRUE 63157
63149: LD_INT 10
63151: DOUBLE
63152: EQUAL
63153: IFTRUE 63157
63155: GO 63213
63157: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63158: LD_ADDR_VAR 0 9
63162: PUSH
63163: LD_VAR 0 41
63167: PUSH
63168: LD_VAR 0 42
63172: PUSH
63173: LD_VAR 0 43
63177: PUSH
63178: LD_VAR 0 44
63182: PUSH
63183: LD_VAR 0 45
63187: PUSH
63188: LD_VAR 0 46
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: PUSH
63201: LD_VAR 0 4
63205: PUSH
63206: LD_INT 1
63208: PLUS
63209: ARRAY
63210: ST_TO_ADDR
63211: GO 63466
63213: LD_INT 36
63215: DOUBLE
63216: EQUAL
63217: IFTRUE 63221
63219: GO 63277
63221: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63222: LD_ADDR_VAR 0 9
63226: PUSH
63227: LD_VAR 0 47
63231: PUSH
63232: LD_VAR 0 48
63236: PUSH
63237: LD_VAR 0 49
63241: PUSH
63242: LD_VAR 0 50
63246: PUSH
63247: LD_VAR 0 51
63251: PUSH
63252: LD_VAR 0 52
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: PUSH
63265: LD_VAR 0 4
63269: PUSH
63270: LD_INT 1
63272: PLUS
63273: ARRAY
63274: ST_TO_ADDR
63275: GO 63466
63277: LD_INT 4
63279: DOUBLE
63280: EQUAL
63281: IFTRUE 63303
63283: LD_INT 5
63285: DOUBLE
63286: EQUAL
63287: IFTRUE 63303
63289: LD_INT 34
63291: DOUBLE
63292: EQUAL
63293: IFTRUE 63303
63295: LD_INT 37
63297: DOUBLE
63298: EQUAL
63299: IFTRUE 63303
63301: GO 63359
63303: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63304: LD_ADDR_VAR 0 9
63308: PUSH
63309: LD_VAR 0 53
63313: PUSH
63314: LD_VAR 0 54
63318: PUSH
63319: LD_VAR 0 55
63323: PUSH
63324: LD_VAR 0 56
63328: PUSH
63329: LD_VAR 0 57
63333: PUSH
63334: LD_VAR 0 58
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: PUSH
63347: LD_VAR 0 4
63351: PUSH
63352: LD_INT 1
63354: PLUS
63355: ARRAY
63356: ST_TO_ADDR
63357: GO 63466
63359: LD_INT 31
63361: DOUBLE
63362: EQUAL
63363: IFTRUE 63409
63365: LD_INT 32
63367: DOUBLE
63368: EQUAL
63369: IFTRUE 63409
63371: LD_INT 33
63373: DOUBLE
63374: EQUAL
63375: IFTRUE 63409
63377: LD_INT 27
63379: DOUBLE
63380: EQUAL
63381: IFTRUE 63409
63383: LD_INT 26
63385: DOUBLE
63386: EQUAL
63387: IFTRUE 63409
63389: LD_INT 28
63391: DOUBLE
63392: EQUAL
63393: IFTRUE 63409
63395: LD_INT 29
63397: DOUBLE
63398: EQUAL
63399: IFTRUE 63409
63401: LD_INT 30
63403: DOUBLE
63404: EQUAL
63405: IFTRUE 63409
63407: GO 63465
63409: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63410: LD_ADDR_VAR 0 9
63414: PUSH
63415: LD_VAR 0 59
63419: PUSH
63420: LD_VAR 0 60
63424: PUSH
63425: LD_VAR 0 61
63429: PUSH
63430: LD_VAR 0 62
63434: PUSH
63435: LD_VAR 0 63
63439: PUSH
63440: LD_VAR 0 64
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: PUSH
63453: LD_VAR 0 4
63457: PUSH
63458: LD_INT 1
63460: PLUS
63461: ARRAY
63462: ST_TO_ADDR
63463: GO 63466
63465: POP
// temp_list2 = [ ] ;
63466: LD_ADDR_VAR 0 10
63470: PUSH
63471: EMPTY
63472: ST_TO_ADDR
// for i in temp_list do
63473: LD_ADDR_VAR 0 8
63477: PUSH
63478: LD_VAR 0 9
63482: PUSH
63483: FOR_IN
63484: IFFALSE 63536
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63486: LD_ADDR_VAR 0 10
63490: PUSH
63491: LD_VAR 0 10
63495: PUSH
63496: LD_VAR 0 8
63500: PUSH
63501: LD_INT 1
63503: ARRAY
63504: PUSH
63505: LD_VAR 0 2
63509: PLUS
63510: PUSH
63511: LD_VAR 0 8
63515: PUSH
63516: LD_INT 2
63518: ARRAY
63519: PUSH
63520: LD_VAR 0 3
63524: PLUS
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: EMPTY
63531: LIST
63532: ADD
63533: ST_TO_ADDR
63534: GO 63483
63536: POP
63537: POP
// result = temp_list2 ;
63538: LD_ADDR_VAR 0 7
63542: PUSH
63543: LD_VAR 0 10
63547: ST_TO_ADDR
// end ;
63548: LD_VAR 0 7
63552: RET
// export function EnemyInRange ( unit , dist ) ; begin
63553: LD_INT 0
63555: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63556: LD_ADDR_VAR 0 3
63560: PUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 255
63570: PPUSH
63571: LD_VAR 0 1
63575: PPUSH
63576: CALL_OW 250
63580: PPUSH
63581: LD_VAR 0 1
63585: PPUSH
63586: CALL_OW 251
63590: PPUSH
63591: LD_VAR 0 2
63595: PPUSH
63596: CALL 36955 0 4
63600: PUSH
63601: LD_INT 4
63603: ARRAY
63604: ST_TO_ADDR
// end ;
63605: LD_VAR 0 3
63609: RET
// export function PlayerSeeMe ( unit ) ; begin
63610: LD_INT 0
63612: PPUSH
// result := See ( your_side , unit ) ;
63613: LD_ADDR_VAR 0 2
63617: PUSH
63618: LD_OWVAR 2
63622: PPUSH
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 292
63632: ST_TO_ADDR
// end ;
63633: LD_VAR 0 2
63637: RET
// export function ReverseDir ( unit ) ; begin
63638: LD_INT 0
63640: PPUSH
// if not unit then
63641: LD_VAR 0 1
63645: NOT
63646: IFFALSE 63650
// exit ;
63648: GO 63673
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63650: LD_ADDR_VAR 0 2
63654: PUSH
63655: LD_VAR 0 1
63659: PPUSH
63660: CALL_OW 254
63664: PUSH
63665: LD_INT 3
63667: PLUS
63668: PUSH
63669: LD_INT 6
63671: MOD
63672: ST_TO_ADDR
// end ;
63673: LD_VAR 0 2
63677: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63678: LD_INT 0
63680: PPUSH
63681: PPUSH
63682: PPUSH
63683: PPUSH
63684: PPUSH
63685: PPUSH
// if not unit or not hexes then
63686: LD_VAR 0 1
63690: NOT
63691: PUSH
63692: LD_VAR 0 2
63696: NOT
63697: OR
63698: IFFALSE 63702
// exit ;
63700: GO 63825
// dist := 9999 ;
63702: LD_ADDR_VAR 0 5
63706: PUSH
63707: LD_INT 9999
63709: ST_TO_ADDR
// for i = 1 to hexes do
63710: LD_ADDR_VAR 0 4
63714: PUSH
63715: DOUBLE
63716: LD_INT 1
63718: DEC
63719: ST_TO_ADDR
63720: LD_VAR 0 2
63724: PUSH
63725: FOR_TO
63726: IFFALSE 63813
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63728: LD_ADDR_VAR 0 6
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: LD_VAR 0 2
63742: PUSH
63743: LD_VAR 0 4
63747: ARRAY
63748: PUSH
63749: LD_INT 1
63751: ARRAY
63752: PPUSH
63753: LD_VAR 0 2
63757: PUSH
63758: LD_VAR 0 4
63762: ARRAY
63763: PUSH
63764: LD_INT 2
63766: ARRAY
63767: PPUSH
63768: CALL_OW 297
63772: ST_TO_ADDR
// if tdist < dist then
63773: LD_VAR 0 6
63777: PUSH
63778: LD_VAR 0 5
63782: LESS
63783: IFFALSE 63811
// begin hex := hexes [ i ] ;
63785: LD_ADDR_VAR 0 8
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_VAR 0 4
63799: ARRAY
63800: ST_TO_ADDR
// dist := tdist ;
63801: LD_ADDR_VAR 0 5
63805: PUSH
63806: LD_VAR 0 6
63810: ST_TO_ADDR
// end ; end ;
63811: GO 63725
63813: POP
63814: POP
// result := hex ;
63815: LD_ADDR_VAR 0 3
63819: PUSH
63820: LD_VAR 0 8
63824: ST_TO_ADDR
// end ;
63825: LD_VAR 0 3
63829: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63830: LD_INT 0
63832: PPUSH
63833: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63834: LD_VAR 0 1
63838: NOT
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 21
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 23
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PPUSH
63869: CALL_OW 69
63873: IN
63874: NOT
63875: OR
63876: IFFALSE 63880
// exit ;
63878: GO 63927
// for i = 1 to 3 do
63880: LD_ADDR_VAR 0 3
63884: PUSH
63885: DOUBLE
63886: LD_INT 1
63888: DEC
63889: ST_TO_ADDR
63890: LD_INT 3
63892: PUSH
63893: FOR_TO
63894: IFFALSE 63925
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63896: LD_VAR 0 1
63900: PPUSH
63901: CALL_OW 250
63905: PPUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: CALL_OW 251
63915: PPUSH
63916: LD_INT 1
63918: PPUSH
63919: CALL_OW 453
63923: GO 63893
63925: POP
63926: POP
// end ;
63927: LD_VAR 0 2
63931: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63932: LD_INT 0
63934: PPUSH
63935: PPUSH
63936: PPUSH
63937: PPUSH
63938: PPUSH
63939: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63940: LD_VAR 0 1
63944: NOT
63945: PUSH
63946: LD_VAR 0 2
63950: NOT
63951: OR
63952: PUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 314
63962: OR
63963: IFFALSE 63967
// exit ;
63965: GO 64408
// x := GetX ( enemy_unit ) ;
63967: LD_ADDR_VAR 0 7
63971: PUSH
63972: LD_VAR 0 2
63976: PPUSH
63977: CALL_OW 250
63981: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63982: LD_ADDR_VAR 0 8
63986: PUSH
63987: LD_VAR 0 2
63991: PPUSH
63992: CALL_OW 251
63996: ST_TO_ADDR
// if not x or not y then
63997: LD_VAR 0 7
64001: NOT
64002: PUSH
64003: LD_VAR 0 8
64007: NOT
64008: OR
64009: IFFALSE 64013
// exit ;
64011: GO 64408
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64013: LD_ADDR_VAR 0 6
64017: PUSH
64018: LD_VAR 0 7
64022: PPUSH
64023: LD_INT 0
64025: PPUSH
64026: LD_INT 4
64028: PPUSH
64029: CALL_OW 272
64033: PUSH
64034: LD_VAR 0 8
64038: PPUSH
64039: LD_INT 0
64041: PPUSH
64042: LD_INT 4
64044: PPUSH
64045: CALL_OW 273
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 7
64058: PPUSH
64059: LD_INT 1
64061: PPUSH
64062: LD_INT 4
64064: PPUSH
64065: CALL_OW 272
64069: PUSH
64070: LD_VAR 0 8
64074: PPUSH
64075: LD_INT 1
64077: PPUSH
64078: LD_INT 4
64080: PPUSH
64081: CALL_OW 273
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_VAR 0 7
64094: PPUSH
64095: LD_INT 2
64097: PPUSH
64098: LD_INT 4
64100: PPUSH
64101: CALL_OW 272
64105: PUSH
64106: LD_VAR 0 8
64110: PPUSH
64111: LD_INT 2
64113: PPUSH
64114: LD_INT 4
64116: PPUSH
64117: CALL_OW 273
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_VAR 0 7
64130: PPUSH
64131: LD_INT 3
64133: PPUSH
64134: LD_INT 4
64136: PPUSH
64137: CALL_OW 272
64141: PUSH
64142: LD_VAR 0 8
64146: PPUSH
64147: LD_INT 3
64149: PPUSH
64150: LD_INT 4
64152: PPUSH
64153: CALL_OW 273
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_VAR 0 7
64166: PPUSH
64167: LD_INT 4
64169: PPUSH
64170: LD_INT 4
64172: PPUSH
64173: CALL_OW 272
64177: PUSH
64178: LD_VAR 0 8
64182: PPUSH
64183: LD_INT 4
64185: PPUSH
64186: LD_INT 4
64188: PPUSH
64189: CALL_OW 273
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_VAR 0 7
64202: PPUSH
64203: LD_INT 5
64205: PPUSH
64206: LD_INT 4
64208: PPUSH
64209: CALL_OW 272
64213: PUSH
64214: LD_VAR 0 8
64218: PPUSH
64219: LD_INT 5
64221: PPUSH
64222: LD_INT 4
64224: PPUSH
64225: CALL_OW 273
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// for i = tmp downto 1 do
64242: LD_ADDR_VAR 0 4
64246: PUSH
64247: DOUBLE
64248: LD_VAR 0 6
64252: INC
64253: ST_TO_ADDR
64254: LD_INT 1
64256: PUSH
64257: FOR_DOWNTO
64258: IFFALSE 64359
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64260: LD_VAR 0 6
64264: PUSH
64265: LD_VAR 0 4
64269: ARRAY
64270: PUSH
64271: LD_INT 1
64273: ARRAY
64274: PPUSH
64275: LD_VAR 0 6
64279: PUSH
64280: LD_VAR 0 4
64284: ARRAY
64285: PUSH
64286: LD_INT 2
64288: ARRAY
64289: PPUSH
64290: CALL_OW 488
64294: NOT
64295: PUSH
64296: LD_VAR 0 6
64300: PUSH
64301: LD_VAR 0 4
64305: ARRAY
64306: PUSH
64307: LD_INT 1
64309: ARRAY
64310: PPUSH
64311: LD_VAR 0 6
64315: PUSH
64316: LD_VAR 0 4
64320: ARRAY
64321: PUSH
64322: LD_INT 2
64324: ARRAY
64325: PPUSH
64326: CALL_OW 428
64330: PUSH
64331: LD_INT 0
64333: NONEQUAL
64334: OR
64335: IFFALSE 64357
// tmp := Delete ( tmp , i ) ;
64337: LD_ADDR_VAR 0 6
64341: PUSH
64342: LD_VAR 0 6
64346: PPUSH
64347: LD_VAR 0 4
64351: PPUSH
64352: CALL_OW 3
64356: ST_TO_ADDR
64357: GO 64257
64359: POP
64360: POP
// j := GetClosestHex ( unit , tmp ) ;
64361: LD_ADDR_VAR 0 5
64365: PUSH
64366: LD_VAR 0 1
64370: PPUSH
64371: LD_VAR 0 6
64375: PPUSH
64376: CALL 63678 0 2
64380: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64381: LD_VAR 0 1
64385: PPUSH
64386: LD_VAR 0 5
64390: PUSH
64391: LD_INT 1
64393: ARRAY
64394: PPUSH
64395: LD_VAR 0 5
64399: PUSH
64400: LD_INT 2
64402: ARRAY
64403: PPUSH
64404: CALL_OW 111
// end ;
64408: LD_VAR 0 3
64412: RET
// export function PrepareApemanSoldier ( ) ; begin
64413: LD_INT 0
64415: PPUSH
// uc_nation := 0 ;
64416: LD_ADDR_OWVAR 21
64420: PUSH
64421: LD_INT 0
64423: ST_TO_ADDR
// hc_sex := sex_male ;
64424: LD_ADDR_OWVAR 27
64428: PUSH
64429: LD_INT 1
64431: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64432: LD_ADDR_OWVAR 28
64436: PUSH
64437: LD_INT 15
64439: ST_TO_ADDR
// hc_gallery :=  ;
64440: LD_ADDR_OWVAR 33
64444: PUSH
64445: LD_STRING 
64447: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64448: LD_ADDR_OWVAR 31
64452: PUSH
64453: LD_INT 0
64455: PPUSH
64456: LD_INT 3
64458: PPUSH
64459: CALL_OW 12
64463: PUSH
64464: LD_INT 0
64466: PPUSH
64467: LD_INT 3
64469: PPUSH
64470: CALL_OW 12
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: ST_TO_ADDR
// end ;
64487: LD_VAR 0 1
64491: RET
// export function PrepareApemanEngineer ( ) ; begin
64492: LD_INT 0
64494: PPUSH
// uc_nation := 0 ;
64495: LD_ADDR_OWVAR 21
64499: PUSH
64500: LD_INT 0
64502: ST_TO_ADDR
// hc_sex := sex_male ;
64503: LD_ADDR_OWVAR 27
64507: PUSH
64508: LD_INT 1
64510: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64511: LD_ADDR_OWVAR 28
64515: PUSH
64516: LD_INT 16
64518: ST_TO_ADDR
// hc_gallery :=  ;
64519: LD_ADDR_OWVAR 33
64523: PUSH
64524: LD_STRING 
64526: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64527: LD_ADDR_OWVAR 31
64531: PUSH
64532: LD_INT 0
64534: PPUSH
64535: LD_INT 3
64537: PPUSH
64538: CALL_OW 12
64542: PUSH
64543: LD_INT 0
64545: PPUSH
64546: LD_INT 3
64548: PPUSH
64549: CALL_OW 12
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: ST_TO_ADDR
// end ;
64566: LD_VAR 0 1
64570: RET
// export function PrepareApeman ( agressivity ) ; begin
64571: LD_INT 0
64573: PPUSH
// uc_side := 0 ;
64574: LD_ADDR_OWVAR 20
64578: PUSH
64579: LD_INT 0
64581: ST_TO_ADDR
// uc_nation := 0 ;
64582: LD_ADDR_OWVAR 21
64586: PUSH
64587: LD_INT 0
64589: ST_TO_ADDR
// hc_sex := sex_male ;
64590: LD_ADDR_OWVAR 27
64594: PUSH
64595: LD_INT 1
64597: ST_TO_ADDR
// hc_class := class_apeman ;
64598: LD_ADDR_OWVAR 28
64602: PUSH
64603: LD_INT 12
64605: ST_TO_ADDR
// hc_gallery :=  ;
64606: LD_ADDR_OWVAR 33
64610: PUSH
64611: LD_STRING 
64613: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64614: LD_ADDR_OWVAR 35
64618: PUSH
64619: LD_VAR 0 1
64623: NEG
64624: PPUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: CALL_OW 12
64634: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64635: LD_ADDR_OWVAR 31
64639: PUSH
64640: LD_INT 0
64642: PPUSH
64643: LD_INT 3
64645: PPUSH
64646: CALL_OW 12
64650: PUSH
64651: LD_INT 0
64653: PPUSH
64654: LD_INT 3
64656: PPUSH
64657: CALL_OW 12
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: ST_TO_ADDR
// end ;
64674: LD_VAR 0 2
64678: RET
// export function PrepareTiger ( agressivity ) ; begin
64679: LD_INT 0
64681: PPUSH
// uc_side := 0 ;
64682: LD_ADDR_OWVAR 20
64686: PUSH
64687: LD_INT 0
64689: ST_TO_ADDR
// uc_nation := 0 ;
64690: LD_ADDR_OWVAR 21
64694: PUSH
64695: LD_INT 0
64697: ST_TO_ADDR
// hc_class := class_tiger ;
64698: LD_ADDR_OWVAR 28
64702: PUSH
64703: LD_INT 14
64705: ST_TO_ADDR
// hc_gallery :=  ;
64706: LD_ADDR_OWVAR 33
64710: PUSH
64711: LD_STRING 
64713: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64714: LD_ADDR_OWVAR 35
64718: PUSH
64719: LD_VAR 0 1
64723: NEG
64724: PPUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: CALL_OW 12
64734: ST_TO_ADDR
// end ;
64735: LD_VAR 0 2
64739: RET
// export function PrepareEnchidna ( ) ; begin
64740: LD_INT 0
64742: PPUSH
// uc_side := 0 ;
64743: LD_ADDR_OWVAR 20
64747: PUSH
64748: LD_INT 0
64750: ST_TO_ADDR
// uc_nation := 0 ;
64751: LD_ADDR_OWVAR 21
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// hc_class := class_baggie ;
64759: LD_ADDR_OWVAR 28
64763: PUSH
64764: LD_INT 13
64766: ST_TO_ADDR
// hc_gallery :=  ;
64767: LD_ADDR_OWVAR 33
64771: PUSH
64772: LD_STRING 
64774: ST_TO_ADDR
// end ;
64775: LD_VAR 0 1
64779: RET
// export function PrepareFrog ( ) ; begin
64780: LD_INT 0
64782: PPUSH
// uc_side := 0 ;
64783: LD_ADDR_OWVAR 20
64787: PUSH
64788: LD_INT 0
64790: ST_TO_ADDR
// uc_nation := 0 ;
64791: LD_ADDR_OWVAR 21
64795: PUSH
64796: LD_INT 0
64798: ST_TO_ADDR
// hc_class := class_frog ;
64799: LD_ADDR_OWVAR 28
64803: PUSH
64804: LD_INT 19
64806: ST_TO_ADDR
// hc_gallery :=  ;
64807: LD_ADDR_OWVAR 33
64811: PUSH
64812: LD_STRING 
64814: ST_TO_ADDR
// end ;
64815: LD_VAR 0 1
64819: RET
// export function PrepareFish ( ) ; begin
64820: LD_INT 0
64822: PPUSH
// uc_side := 0 ;
64823: LD_ADDR_OWVAR 20
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// uc_nation := 0 ;
64831: LD_ADDR_OWVAR 21
64835: PUSH
64836: LD_INT 0
64838: ST_TO_ADDR
// hc_class := class_fish ;
64839: LD_ADDR_OWVAR 28
64843: PUSH
64844: LD_INT 20
64846: ST_TO_ADDR
// hc_gallery :=  ;
64847: LD_ADDR_OWVAR 33
64851: PUSH
64852: LD_STRING 
64854: ST_TO_ADDR
// end ;
64855: LD_VAR 0 1
64859: RET
// export function PrepareBird ( ) ; begin
64860: LD_INT 0
64862: PPUSH
// uc_side := 0 ;
64863: LD_ADDR_OWVAR 20
64867: PUSH
64868: LD_INT 0
64870: ST_TO_ADDR
// uc_nation := 0 ;
64871: LD_ADDR_OWVAR 21
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// hc_class := class_phororhacos ;
64879: LD_ADDR_OWVAR 28
64883: PUSH
64884: LD_INT 18
64886: ST_TO_ADDR
// hc_gallery :=  ;
64887: LD_ADDR_OWVAR 33
64891: PUSH
64892: LD_STRING 
64894: ST_TO_ADDR
// end ;
64895: LD_VAR 0 1
64899: RET
// export function PrepareHorse ( ) ; begin
64900: LD_INT 0
64902: PPUSH
// uc_side := 0 ;
64903: LD_ADDR_OWVAR 20
64907: PUSH
64908: LD_INT 0
64910: ST_TO_ADDR
// uc_nation := 0 ;
64911: LD_ADDR_OWVAR 21
64915: PUSH
64916: LD_INT 0
64918: ST_TO_ADDR
// hc_class := class_horse ;
64919: LD_ADDR_OWVAR 28
64923: PUSH
64924: LD_INT 21
64926: ST_TO_ADDR
// hc_gallery :=  ;
64927: LD_ADDR_OWVAR 33
64931: PUSH
64932: LD_STRING 
64934: ST_TO_ADDR
// end ;
64935: LD_VAR 0 1
64939: RET
// export function PrepareMastodont ( ) ; begin
64940: LD_INT 0
64942: PPUSH
// uc_side := 0 ;
64943: LD_ADDR_OWVAR 20
64947: PUSH
64948: LD_INT 0
64950: ST_TO_ADDR
// uc_nation := 0 ;
64951: LD_ADDR_OWVAR 21
64955: PUSH
64956: LD_INT 0
64958: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64959: LD_ADDR_OWVAR 37
64963: PUSH
64964: LD_INT 31
64966: ST_TO_ADDR
// vc_control := control_rider ;
64967: LD_ADDR_OWVAR 38
64971: PUSH
64972: LD_INT 4
64974: ST_TO_ADDR
// end ;
64975: LD_VAR 0 1
64979: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64980: LD_INT 0
64982: PPUSH
64983: PPUSH
64984: PPUSH
// uc_side = 0 ;
64985: LD_ADDR_OWVAR 20
64989: PUSH
64990: LD_INT 0
64992: ST_TO_ADDR
// uc_nation = 0 ;
64993: LD_ADDR_OWVAR 21
64997: PUSH
64998: LD_INT 0
65000: ST_TO_ADDR
// InitHc_All ( ) ;
65001: CALL_OW 584
// InitVc ;
65005: CALL_OW 20
// if mastodonts then
65009: LD_VAR 0 6
65013: IFFALSE 65080
// for i = 1 to mastodonts do
65015: LD_ADDR_VAR 0 11
65019: PUSH
65020: DOUBLE
65021: LD_INT 1
65023: DEC
65024: ST_TO_ADDR
65025: LD_VAR 0 6
65029: PUSH
65030: FOR_TO
65031: IFFALSE 65078
// begin vc_chassis := 31 ;
65033: LD_ADDR_OWVAR 37
65037: PUSH
65038: LD_INT 31
65040: ST_TO_ADDR
// vc_control := control_rider ;
65041: LD_ADDR_OWVAR 38
65045: PUSH
65046: LD_INT 4
65048: ST_TO_ADDR
// animal := CreateVehicle ;
65049: LD_ADDR_VAR 0 12
65053: PUSH
65054: CALL_OW 45
65058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65059: LD_VAR 0 12
65063: PPUSH
65064: LD_VAR 0 8
65068: PPUSH
65069: LD_INT 0
65071: PPUSH
65072: CALL 67215 0 3
// end ;
65076: GO 65030
65078: POP
65079: POP
// if horses then
65080: LD_VAR 0 5
65084: IFFALSE 65151
// for i = 1 to horses do
65086: LD_ADDR_VAR 0 11
65090: PUSH
65091: DOUBLE
65092: LD_INT 1
65094: DEC
65095: ST_TO_ADDR
65096: LD_VAR 0 5
65100: PUSH
65101: FOR_TO
65102: IFFALSE 65149
// begin hc_class := 21 ;
65104: LD_ADDR_OWVAR 28
65108: PUSH
65109: LD_INT 21
65111: ST_TO_ADDR
// hc_gallery :=  ;
65112: LD_ADDR_OWVAR 33
65116: PUSH
65117: LD_STRING 
65119: ST_TO_ADDR
// animal := CreateHuman ;
65120: LD_ADDR_VAR 0 12
65124: PUSH
65125: CALL_OW 44
65129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65130: LD_VAR 0 12
65134: PPUSH
65135: LD_VAR 0 8
65139: PPUSH
65140: LD_INT 0
65142: PPUSH
65143: CALL 67215 0 3
// end ;
65147: GO 65101
65149: POP
65150: POP
// if birds then
65151: LD_VAR 0 1
65155: IFFALSE 65222
// for i = 1 to birds do
65157: LD_ADDR_VAR 0 11
65161: PUSH
65162: DOUBLE
65163: LD_INT 1
65165: DEC
65166: ST_TO_ADDR
65167: LD_VAR 0 1
65171: PUSH
65172: FOR_TO
65173: IFFALSE 65220
// begin hc_class = 18 ;
65175: LD_ADDR_OWVAR 28
65179: PUSH
65180: LD_INT 18
65182: ST_TO_ADDR
// hc_gallery =  ;
65183: LD_ADDR_OWVAR 33
65187: PUSH
65188: LD_STRING 
65190: ST_TO_ADDR
// animal := CreateHuman ;
65191: LD_ADDR_VAR 0 12
65195: PUSH
65196: CALL_OW 44
65200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65201: LD_VAR 0 12
65205: PPUSH
65206: LD_VAR 0 8
65210: PPUSH
65211: LD_INT 0
65213: PPUSH
65214: CALL 67215 0 3
// end ;
65218: GO 65172
65220: POP
65221: POP
// if tigers then
65222: LD_VAR 0 2
65226: IFFALSE 65310
// for i = 1 to tigers do
65228: LD_ADDR_VAR 0 11
65232: PUSH
65233: DOUBLE
65234: LD_INT 1
65236: DEC
65237: ST_TO_ADDR
65238: LD_VAR 0 2
65242: PUSH
65243: FOR_TO
65244: IFFALSE 65308
// begin hc_class = class_tiger ;
65246: LD_ADDR_OWVAR 28
65250: PUSH
65251: LD_INT 14
65253: ST_TO_ADDR
// hc_gallery =  ;
65254: LD_ADDR_OWVAR 33
65258: PUSH
65259: LD_STRING 
65261: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65262: LD_ADDR_OWVAR 35
65266: PUSH
65267: LD_INT 7
65269: NEG
65270: PPUSH
65271: LD_INT 7
65273: PPUSH
65274: CALL_OW 12
65278: ST_TO_ADDR
// animal := CreateHuman ;
65279: LD_ADDR_VAR 0 12
65283: PUSH
65284: CALL_OW 44
65288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65289: LD_VAR 0 12
65293: PPUSH
65294: LD_VAR 0 8
65298: PPUSH
65299: LD_INT 0
65301: PPUSH
65302: CALL 67215 0 3
// end ;
65306: GO 65243
65308: POP
65309: POP
// if apemans then
65310: LD_VAR 0 3
65314: IFFALSE 65437
// for i = 1 to apemans do
65316: LD_ADDR_VAR 0 11
65320: PUSH
65321: DOUBLE
65322: LD_INT 1
65324: DEC
65325: ST_TO_ADDR
65326: LD_VAR 0 3
65330: PUSH
65331: FOR_TO
65332: IFFALSE 65435
// begin hc_class = class_apeman ;
65334: LD_ADDR_OWVAR 28
65338: PUSH
65339: LD_INT 12
65341: ST_TO_ADDR
// hc_gallery =  ;
65342: LD_ADDR_OWVAR 33
65346: PUSH
65347: LD_STRING 
65349: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65350: LD_ADDR_OWVAR 35
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PPUSH
65359: LD_INT 2
65361: PPUSH
65362: CALL_OW 12
65366: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65367: LD_ADDR_OWVAR 31
65371: PUSH
65372: LD_INT 1
65374: PPUSH
65375: LD_INT 3
65377: PPUSH
65378: CALL_OW 12
65382: PUSH
65383: LD_INT 1
65385: PPUSH
65386: LD_INT 3
65388: PPUSH
65389: CALL_OW 12
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: ST_TO_ADDR
// animal := CreateHuman ;
65406: LD_ADDR_VAR 0 12
65410: PUSH
65411: CALL_OW 44
65415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65416: LD_VAR 0 12
65420: PPUSH
65421: LD_VAR 0 8
65425: PPUSH
65426: LD_INT 0
65428: PPUSH
65429: CALL 67215 0 3
// end ;
65433: GO 65331
65435: POP
65436: POP
// if enchidnas then
65437: LD_VAR 0 4
65441: IFFALSE 65508
// for i = 1 to enchidnas do
65443: LD_ADDR_VAR 0 11
65447: PUSH
65448: DOUBLE
65449: LD_INT 1
65451: DEC
65452: ST_TO_ADDR
65453: LD_VAR 0 4
65457: PUSH
65458: FOR_TO
65459: IFFALSE 65506
// begin hc_class = 13 ;
65461: LD_ADDR_OWVAR 28
65465: PUSH
65466: LD_INT 13
65468: ST_TO_ADDR
// hc_gallery =  ;
65469: LD_ADDR_OWVAR 33
65473: PUSH
65474: LD_STRING 
65476: ST_TO_ADDR
// animal := CreateHuman ;
65477: LD_ADDR_VAR 0 12
65481: PUSH
65482: CALL_OW 44
65486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65487: LD_VAR 0 12
65491: PPUSH
65492: LD_VAR 0 8
65496: PPUSH
65497: LD_INT 0
65499: PPUSH
65500: CALL 67215 0 3
// end ;
65504: GO 65458
65506: POP
65507: POP
// if fishes then
65508: LD_VAR 0 7
65512: IFFALSE 65579
// for i = 1 to fishes do
65514: LD_ADDR_VAR 0 11
65518: PUSH
65519: DOUBLE
65520: LD_INT 1
65522: DEC
65523: ST_TO_ADDR
65524: LD_VAR 0 7
65528: PUSH
65529: FOR_TO
65530: IFFALSE 65577
// begin hc_class = 20 ;
65532: LD_ADDR_OWVAR 28
65536: PUSH
65537: LD_INT 20
65539: ST_TO_ADDR
// hc_gallery =  ;
65540: LD_ADDR_OWVAR 33
65544: PUSH
65545: LD_STRING 
65547: ST_TO_ADDR
// animal := CreateHuman ;
65548: LD_ADDR_VAR 0 12
65552: PUSH
65553: CALL_OW 44
65557: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65558: LD_VAR 0 12
65562: PPUSH
65563: LD_VAR 0 9
65567: PPUSH
65568: LD_INT 0
65570: PPUSH
65571: CALL 67215 0 3
// end ;
65575: GO 65529
65577: POP
65578: POP
// end ;
65579: LD_VAR 0 10
65583: RET
// export function WantHeal ( sci , unit ) ; begin
65584: LD_INT 0
65586: PPUSH
// if GetTaskList ( sci ) > 0 then
65587: LD_VAR 0 1
65591: PPUSH
65592: CALL_OW 437
65596: PUSH
65597: LD_INT 0
65599: GREATER
65600: IFFALSE 65670
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65602: LD_VAR 0 1
65606: PPUSH
65607: CALL_OW 437
65611: PUSH
65612: LD_INT 1
65614: ARRAY
65615: PUSH
65616: LD_INT 1
65618: ARRAY
65619: PUSH
65620: LD_STRING l
65622: EQUAL
65623: PUSH
65624: LD_VAR 0 1
65628: PPUSH
65629: CALL_OW 437
65633: PUSH
65634: LD_INT 1
65636: ARRAY
65637: PUSH
65638: LD_INT 4
65640: ARRAY
65641: PUSH
65642: LD_VAR 0 2
65646: EQUAL
65647: AND
65648: IFFALSE 65660
// result := true else
65650: LD_ADDR_VAR 0 3
65654: PUSH
65655: LD_INT 1
65657: ST_TO_ADDR
65658: GO 65668
// result := false ;
65660: LD_ADDR_VAR 0 3
65664: PUSH
65665: LD_INT 0
65667: ST_TO_ADDR
// end else
65668: GO 65678
// result := false ;
65670: LD_ADDR_VAR 0 3
65674: PUSH
65675: LD_INT 0
65677: ST_TO_ADDR
// end ;
65678: LD_VAR 0 3
65682: RET
// export function HealTarget ( sci ) ; begin
65683: LD_INT 0
65685: PPUSH
// if not sci then
65686: LD_VAR 0 1
65690: NOT
65691: IFFALSE 65695
// exit ;
65693: GO 65760
// result := 0 ;
65695: LD_ADDR_VAR 0 2
65699: PUSH
65700: LD_INT 0
65702: ST_TO_ADDR
// if GetTaskList ( sci ) then
65703: LD_VAR 0 1
65707: PPUSH
65708: CALL_OW 437
65712: IFFALSE 65760
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65714: LD_VAR 0 1
65718: PPUSH
65719: CALL_OW 437
65723: PUSH
65724: LD_INT 1
65726: ARRAY
65727: PUSH
65728: LD_INT 1
65730: ARRAY
65731: PUSH
65732: LD_STRING l
65734: EQUAL
65735: IFFALSE 65760
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65737: LD_ADDR_VAR 0 2
65741: PUSH
65742: LD_VAR 0 1
65746: PPUSH
65747: CALL_OW 437
65751: PUSH
65752: LD_INT 1
65754: ARRAY
65755: PUSH
65756: LD_INT 4
65758: ARRAY
65759: ST_TO_ADDR
// end ;
65760: LD_VAR 0 2
65764: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65765: LD_INT 0
65767: PPUSH
65768: PPUSH
65769: PPUSH
65770: PPUSH
// if not base_units then
65771: LD_VAR 0 1
65775: NOT
65776: IFFALSE 65780
// exit ;
65778: GO 65867
// result := false ;
65780: LD_ADDR_VAR 0 2
65784: PUSH
65785: LD_INT 0
65787: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65788: LD_ADDR_VAR 0 5
65792: PUSH
65793: LD_VAR 0 1
65797: PPUSH
65798: LD_INT 21
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PPUSH
65808: CALL_OW 72
65812: ST_TO_ADDR
// if not tmp then
65813: LD_VAR 0 5
65817: NOT
65818: IFFALSE 65822
// exit ;
65820: GO 65867
// for i in tmp do
65822: LD_ADDR_VAR 0 3
65826: PUSH
65827: LD_VAR 0 5
65831: PUSH
65832: FOR_IN
65833: IFFALSE 65865
// begin result := EnemyInRange ( i , 22 ) ;
65835: LD_ADDR_VAR 0 2
65839: PUSH
65840: LD_VAR 0 3
65844: PPUSH
65845: LD_INT 22
65847: PPUSH
65848: CALL 63553 0 2
65852: ST_TO_ADDR
// if result then
65853: LD_VAR 0 2
65857: IFFALSE 65863
// exit ;
65859: POP
65860: POP
65861: GO 65867
// end ;
65863: GO 65832
65865: POP
65866: POP
// end ;
65867: LD_VAR 0 2
65871: RET
// export function FilterByTag ( units , tag ) ; begin
65872: LD_INT 0
65874: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: LD_INT 120
65887: PUSH
65888: LD_VAR 0 2
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PPUSH
65897: CALL_OW 72
65901: ST_TO_ADDR
// end ;
65902: LD_VAR 0 3
65906: RET
// export function IsDriver ( un ) ; begin
65907: LD_INT 0
65909: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65910: LD_ADDR_VAR 0 2
65914: PUSH
65915: LD_VAR 0 1
65919: PUSH
65920: LD_INT 55
65922: PUSH
65923: EMPTY
65924: LIST
65925: PPUSH
65926: CALL_OW 69
65930: IN
65931: ST_TO_ADDR
// end ;
65932: LD_VAR 0 2
65936: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65937: LD_INT 0
65939: PPUSH
65940: PPUSH
// list := [ ] ;
65941: LD_ADDR_VAR 0 5
65945: PUSH
65946: EMPTY
65947: ST_TO_ADDR
// case d of 0 :
65948: LD_VAR 0 3
65952: PUSH
65953: LD_INT 0
65955: DOUBLE
65956: EQUAL
65957: IFTRUE 65961
65959: GO 66094
65961: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65962: LD_ADDR_VAR 0 5
65966: PUSH
65967: LD_VAR 0 1
65971: PUSH
65972: LD_INT 4
65974: MINUS
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: LD_INT 4
65983: MINUS
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: PUSH
65993: LD_VAR 0 1
65997: PUSH
65998: LD_INT 3
66000: MINUS
66001: PUSH
66002: LD_VAR 0 2
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_VAR 0 1
66019: PUSH
66020: LD_INT 4
66022: PLUS
66023: PUSH
66024: LD_VAR 0 2
66028: PUSH
66029: LD_INT 4
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: PUSH
66037: LD_VAR 0 1
66041: PUSH
66042: LD_INT 3
66044: PLUS
66045: PUSH
66046: LD_VAR 0 2
66050: PUSH
66051: LD_INT 3
66053: PLUS
66054: PUSH
66055: LD_INT 5
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: LIST
66062: PUSH
66063: LD_VAR 0 1
66067: PUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_INT 4
66075: PLUS
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: ST_TO_ADDR
// end ; 1 :
66092: GO 66792
66094: LD_INT 1
66096: DOUBLE
66097: EQUAL
66098: IFTRUE 66102
66100: GO 66235
66102: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66103: LD_ADDR_VAR 0 5
66107: PUSH
66108: LD_VAR 0 1
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_INT 4
66120: MINUS
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: PUSH
66130: LD_VAR 0 1
66134: PUSH
66135: LD_INT 3
66137: MINUS
66138: PUSH
66139: LD_VAR 0 2
66143: PUSH
66144: LD_INT 3
66146: MINUS
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: PUSH
66156: LD_VAR 0 1
66160: PUSH
66161: LD_INT 4
66163: MINUS
66164: PUSH
66165: LD_VAR 0 2
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: PUSH
66178: LD_VAR 0 1
66182: PUSH
66183: LD_VAR 0 2
66187: PUSH
66188: LD_INT 3
66190: PLUS
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: PUSH
66200: LD_VAR 0 1
66204: PUSH
66205: LD_INT 4
66207: PLUS
66208: PUSH
66209: LD_VAR 0 2
66213: PUSH
66214: LD_INT 4
66216: PLUS
66217: PUSH
66218: LD_INT 5
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: ST_TO_ADDR
// end ; 2 :
66233: GO 66792
66235: LD_INT 2
66237: DOUBLE
66238: EQUAL
66239: IFTRUE 66243
66241: GO 66372
66243: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66244: LD_ADDR_VAR 0 5
66248: PUSH
66249: LD_VAR 0 1
66253: PUSH
66254: LD_VAR 0 2
66258: PUSH
66259: LD_INT 3
66261: MINUS
66262: PUSH
66263: LD_INT 3
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: PUSH
66271: LD_VAR 0 1
66275: PUSH
66276: LD_INT 4
66278: PLUS
66279: PUSH
66280: LD_VAR 0 2
66284: PUSH
66285: LD_INT 4
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: PUSH
66293: LD_VAR 0 1
66297: PUSH
66298: LD_VAR 0 2
66302: PUSH
66303: LD_INT 4
66305: PLUS
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: PUSH
66315: LD_VAR 0 1
66319: PUSH
66320: LD_INT 3
66322: MINUS
66323: PUSH
66324: LD_VAR 0 2
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: PUSH
66337: LD_VAR 0 1
66341: PUSH
66342: LD_INT 4
66344: MINUS
66345: PUSH
66346: LD_VAR 0 2
66350: PUSH
66351: LD_INT 4
66353: MINUS
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: ST_TO_ADDR
// end ; 3 :
66370: GO 66792
66372: LD_INT 3
66374: DOUBLE
66375: EQUAL
66376: IFTRUE 66380
66378: GO 66513
66380: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66381: LD_ADDR_VAR 0 5
66385: PUSH
66386: LD_VAR 0 1
66390: PUSH
66391: LD_INT 3
66393: PLUS
66394: PUSH
66395: LD_VAR 0 2
66399: PUSH
66400: LD_INT 4
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: LIST
66407: PUSH
66408: LD_VAR 0 1
66412: PUSH
66413: LD_INT 4
66415: PLUS
66416: PUSH
66417: LD_VAR 0 2
66421: PUSH
66422: LD_INT 4
66424: PLUS
66425: PUSH
66426: LD_INT 5
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: LIST
66433: PUSH
66434: LD_VAR 0 1
66438: PUSH
66439: LD_INT 4
66441: MINUS
66442: PUSH
66443: LD_VAR 0 2
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: PUSH
66456: LD_VAR 0 1
66460: PUSH
66461: LD_VAR 0 2
66465: PUSH
66466: LD_INT 4
66468: MINUS
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: PUSH
66478: LD_VAR 0 1
66482: PUSH
66483: LD_INT 3
66485: MINUS
66486: PUSH
66487: LD_VAR 0 2
66491: PUSH
66492: LD_INT 3
66494: MINUS
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: ST_TO_ADDR
// end ; 4 :
66511: GO 66792
66513: LD_INT 4
66515: DOUBLE
66516: EQUAL
66517: IFTRUE 66521
66519: GO 66654
66521: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66522: LD_ADDR_VAR 0 5
66526: PUSH
66527: LD_VAR 0 1
66531: PUSH
66532: LD_VAR 0 2
66536: PUSH
66537: LD_INT 4
66539: PLUS
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: PUSH
66549: LD_VAR 0 1
66553: PUSH
66554: LD_INT 3
66556: PLUS
66557: PUSH
66558: LD_VAR 0 2
66562: PUSH
66563: LD_INT 3
66565: PLUS
66566: PUSH
66567: LD_INT 5
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: LIST
66574: PUSH
66575: LD_VAR 0 1
66579: PUSH
66580: LD_INT 4
66582: PLUS
66583: PUSH
66584: LD_VAR 0 2
66588: PUSH
66589: LD_INT 4
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: PUSH
66597: LD_VAR 0 1
66601: PUSH
66602: LD_VAR 0 2
66606: PUSH
66607: LD_INT 3
66609: MINUS
66610: PUSH
66611: LD_INT 3
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: LD_VAR 0 1
66623: PUSH
66624: LD_INT 4
66626: MINUS
66627: PUSH
66628: LD_VAR 0 2
66632: PUSH
66633: LD_INT 4
66635: MINUS
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// end ; 5 :
66652: GO 66792
66654: LD_INT 5
66656: DOUBLE
66657: EQUAL
66658: IFTRUE 66662
66660: GO 66791
66662: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66663: LD_ADDR_VAR 0 5
66667: PUSH
66668: LD_VAR 0 1
66672: PUSH
66673: LD_INT 4
66675: MINUS
66676: PUSH
66677: LD_VAR 0 2
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_VAR 0 2
66699: PUSH
66700: LD_INT 4
66702: MINUS
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: PUSH
66712: LD_VAR 0 1
66716: PUSH
66717: LD_INT 4
66719: PLUS
66720: PUSH
66721: LD_VAR 0 2
66725: PUSH
66726: LD_INT 4
66728: PLUS
66729: PUSH
66730: LD_INT 5
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_INT 3
66745: PLUS
66746: PUSH
66747: LD_VAR 0 2
66751: PUSH
66752: LD_INT 4
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: PUSH
66760: LD_VAR 0 1
66764: PUSH
66765: LD_VAR 0 2
66769: PUSH
66770: LD_INT 3
66772: PLUS
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: ST_TO_ADDR
// end ; end ;
66789: GO 66792
66791: POP
// result := list ;
66792: LD_ADDR_VAR 0 4
66796: PUSH
66797: LD_VAR 0 5
66801: ST_TO_ADDR
// end ;
66802: LD_VAR 0 4
66806: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66807: LD_INT 0
66809: PPUSH
66810: PPUSH
66811: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66812: LD_VAR 0 1
66816: NOT
66817: PUSH
66818: LD_VAR 0 2
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: LD_INT 4
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: IN
66841: NOT
66842: OR
66843: IFFALSE 66847
// exit ;
66845: GO 66939
// tmp := [ ] ;
66847: LD_ADDR_VAR 0 5
66851: PUSH
66852: EMPTY
66853: ST_TO_ADDR
// for i in units do
66854: LD_ADDR_VAR 0 4
66858: PUSH
66859: LD_VAR 0 1
66863: PUSH
66864: FOR_IN
66865: IFFALSE 66908
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66867: LD_ADDR_VAR 0 5
66871: PUSH
66872: LD_VAR 0 5
66876: PPUSH
66877: LD_VAR 0 5
66881: PUSH
66882: LD_INT 1
66884: PLUS
66885: PPUSH
66886: LD_VAR 0 4
66890: PPUSH
66891: LD_VAR 0 2
66895: PPUSH
66896: CALL_OW 259
66900: PPUSH
66901: CALL_OW 2
66905: ST_TO_ADDR
66906: GO 66864
66908: POP
66909: POP
// if not tmp then
66910: LD_VAR 0 5
66914: NOT
66915: IFFALSE 66919
// exit ;
66917: GO 66939
// result := SortListByListDesc ( units , tmp ) ;
66919: LD_ADDR_VAR 0 3
66923: PUSH
66924: LD_VAR 0 1
66928: PPUSH
66929: LD_VAR 0 5
66933: PPUSH
66934: CALL_OW 77
66938: ST_TO_ADDR
// end ;
66939: LD_VAR 0 3
66943: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66944: LD_INT 0
66946: PPUSH
66947: PPUSH
66948: PPUSH
// result := false ;
66949: LD_ADDR_VAR 0 3
66953: PUSH
66954: LD_INT 0
66956: ST_TO_ADDR
// x := GetX ( building ) ;
66957: LD_ADDR_VAR 0 4
66961: PUSH
66962: LD_VAR 0 2
66966: PPUSH
66967: CALL_OW 250
66971: ST_TO_ADDR
// y := GetY ( building ) ;
66972: LD_ADDR_VAR 0 5
66976: PUSH
66977: LD_VAR 0 2
66981: PPUSH
66982: CALL_OW 251
66986: ST_TO_ADDR
// if not building or not x or not y then
66987: LD_VAR 0 2
66991: NOT
66992: PUSH
66993: LD_VAR 0 4
66997: NOT
66998: OR
66999: PUSH
67000: LD_VAR 0 5
67004: NOT
67005: OR
67006: IFFALSE 67010
// exit ;
67008: GO 67102
// if GetTaskList ( unit ) then
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 437
67019: IFFALSE 67102
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67021: LD_STRING e
67023: PUSH
67024: LD_VAR 0 1
67028: PPUSH
67029: CALL_OW 437
67033: PUSH
67034: LD_INT 1
67036: ARRAY
67037: PUSH
67038: LD_INT 1
67040: ARRAY
67041: EQUAL
67042: PUSH
67043: LD_VAR 0 4
67047: PUSH
67048: LD_VAR 0 1
67052: PPUSH
67053: CALL_OW 437
67057: PUSH
67058: LD_INT 1
67060: ARRAY
67061: PUSH
67062: LD_INT 2
67064: ARRAY
67065: EQUAL
67066: AND
67067: PUSH
67068: LD_VAR 0 5
67072: PUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 437
67082: PUSH
67083: LD_INT 1
67085: ARRAY
67086: PUSH
67087: LD_INT 3
67089: ARRAY
67090: EQUAL
67091: AND
67092: IFFALSE 67102
// result := true end ;
67094: LD_ADDR_VAR 0 3
67098: PUSH
67099: LD_INT 1
67101: ST_TO_ADDR
// end ;
67102: LD_VAR 0 3
67106: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67107: LD_INT 0
67109: PPUSH
// result := false ;
67110: LD_ADDR_VAR 0 4
67114: PUSH
67115: LD_INT 0
67117: ST_TO_ADDR
// if GetTaskList ( unit ) then
67118: LD_VAR 0 1
67122: PPUSH
67123: CALL_OW 437
67127: IFFALSE 67210
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67129: LD_STRING M
67131: PUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: CALL_OW 437
67141: PUSH
67142: LD_INT 1
67144: ARRAY
67145: PUSH
67146: LD_INT 1
67148: ARRAY
67149: EQUAL
67150: PUSH
67151: LD_VAR 0 2
67155: PUSH
67156: LD_VAR 0 1
67160: PPUSH
67161: CALL_OW 437
67165: PUSH
67166: LD_INT 1
67168: ARRAY
67169: PUSH
67170: LD_INT 2
67172: ARRAY
67173: EQUAL
67174: AND
67175: PUSH
67176: LD_VAR 0 3
67180: PUSH
67181: LD_VAR 0 1
67185: PPUSH
67186: CALL_OW 437
67190: PUSH
67191: LD_INT 1
67193: ARRAY
67194: PUSH
67195: LD_INT 3
67197: ARRAY
67198: EQUAL
67199: AND
67200: IFFALSE 67210
// result := true ;
67202: LD_ADDR_VAR 0 4
67206: PUSH
67207: LD_INT 1
67209: ST_TO_ADDR
// end ; end ;
67210: LD_VAR 0 4
67214: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67215: LD_INT 0
67217: PPUSH
67218: PPUSH
67219: PPUSH
67220: PPUSH
// if not unit or not area then
67221: LD_VAR 0 1
67225: NOT
67226: PUSH
67227: LD_VAR 0 2
67231: NOT
67232: OR
67233: IFFALSE 67237
// exit ;
67235: GO 67401
// tmp := AreaToList ( area , i ) ;
67237: LD_ADDR_VAR 0 6
67241: PUSH
67242: LD_VAR 0 2
67246: PPUSH
67247: LD_VAR 0 5
67251: PPUSH
67252: CALL_OW 517
67256: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67257: LD_ADDR_VAR 0 5
67261: PUSH
67262: DOUBLE
67263: LD_INT 1
67265: DEC
67266: ST_TO_ADDR
67267: LD_VAR 0 6
67271: PUSH
67272: LD_INT 1
67274: ARRAY
67275: PUSH
67276: FOR_TO
67277: IFFALSE 67399
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67279: LD_ADDR_VAR 0 7
67283: PUSH
67284: LD_VAR 0 6
67288: PUSH
67289: LD_INT 1
67291: ARRAY
67292: PUSH
67293: LD_VAR 0 5
67297: ARRAY
67298: PUSH
67299: LD_VAR 0 6
67303: PUSH
67304: LD_INT 2
67306: ARRAY
67307: PUSH
67308: LD_VAR 0 5
67312: ARRAY
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67318: LD_VAR 0 7
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: PPUSH
67327: LD_VAR 0 7
67331: PUSH
67332: LD_INT 2
67334: ARRAY
67335: PPUSH
67336: CALL_OW 428
67340: PUSH
67341: LD_INT 0
67343: EQUAL
67344: IFFALSE 67397
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67346: LD_VAR 0 1
67350: PPUSH
67351: LD_VAR 0 7
67355: PUSH
67356: LD_INT 1
67358: ARRAY
67359: PPUSH
67360: LD_VAR 0 7
67364: PUSH
67365: LD_INT 2
67367: ARRAY
67368: PPUSH
67369: LD_VAR 0 3
67373: PPUSH
67374: CALL_OW 48
// result := IsPlaced ( unit ) ;
67378: LD_ADDR_VAR 0 4
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: CALL_OW 305
67392: ST_TO_ADDR
// exit ;
67393: POP
67394: POP
67395: GO 67401
// end ; end ;
67397: GO 67276
67399: POP
67400: POP
// end ;
67401: LD_VAR 0 4
67405: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67406: LD_INT 0
67408: PPUSH
67409: PPUSH
67410: PPUSH
// if not side or side > 8 then
67411: LD_VAR 0 1
67415: NOT
67416: PUSH
67417: LD_VAR 0 1
67421: PUSH
67422: LD_INT 8
67424: GREATER
67425: OR
67426: IFFALSE 67430
// exit ;
67428: GO 67617
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67430: LD_ADDR_VAR 0 4
67434: PUSH
67435: LD_INT 22
67437: PUSH
67438: LD_VAR 0 1
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 21
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PPUSH
67461: CALL_OW 69
67465: ST_TO_ADDR
// if not tmp then
67466: LD_VAR 0 4
67470: NOT
67471: IFFALSE 67475
// exit ;
67473: GO 67617
// enable_addtolog := true ;
67475: LD_ADDR_OWVAR 81
67479: PUSH
67480: LD_INT 1
67482: ST_TO_ADDR
// AddToLog ( [ ) ;
67483: LD_STRING [
67485: PPUSH
67486: CALL_OW 561
// for i in tmp do
67490: LD_ADDR_VAR 0 3
67494: PUSH
67495: LD_VAR 0 4
67499: PUSH
67500: FOR_IN
67501: IFFALSE 67608
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67503: LD_STRING [
67505: PUSH
67506: LD_VAR 0 3
67510: PPUSH
67511: CALL_OW 266
67515: STR
67516: PUSH
67517: LD_STRING , 
67519: STR
67520: PUSH
67521: LD_VAR 0 3
67525: PPUSH
67526: CALL_OW 250
67530: STR
67531: PUSH
67532: LD_STRING , 
67534: STR
67535: PUSH
67536: LD_VAR 0 3
67540: PPUSH
67541: CALL_OW 251
67545: STR
67546: PUSH
67547: LD_STRING , 
67549: STR
67550: PUSH
67551: LD_VAR 0 3
67555: PPUSH
67556: CALL_OW 254
67560: STR
67561: PUSH
67562: LD_STRING , 
67564: STR
67565: PUSH
67566: LD_VAR 0 3
67570: PPUSH
67571: LD_INT 1
67573: PPUSH
67574: CALL_OW 268
67578: STR
67579: PUSH
67580: LD_STRING , 
67582: STR
67583: PUSH
67584: LD_VAR 0 3
67588: PPUSH
67589: LD_INT 2
67591: PPUSH
67592: CALL_OW 268
67596: STR
67597: PUSH
67598: LD_STRING ],
67600: STR
67601: PPUSH
67602: CALL_OW 561
// end ;
67606: GO 67500
67608: POP
67609: POP
// AddToLog ( ]; ) ;
67610: LD_STRING ];
67612: PPUSH
67613: CALL_OW 561
// end ;
67617: LD_VAR 0 2
67621: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67622: LD_INT 0
67624: PPUSH
67625: PPUSH
67626: PPUSH
67627: PPUSH
67628: PPUSH
// if not area or not rate or not max then
67629: LD_VAR 0 1
67633: NOT
67634: PUSH
67635: LD_VAR 0 2
67639: NOT
67640: OR
67641: PUSH
67642: LD_VAR 0 4
67646: NOT
67647: OR
67648: IFFALSE 67652
// exit ;
67650: GO 67841
// while 1 do
67652: LD_INT 1
67654: IFFALSE 67841
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67656: LD_ADDR_VAR 0 9
67660: PUSH
67661: LD_VAR 0 1
67665: PPUSH
67666: LD_INT 1
67668: PPUSH
67669: CALL_OW 287
67673: PUSH
67674: LD_INT 10
67676: MUL
67677: ST_TO_ADDR
// r := rate / 10 ;
67678: LD_ADDR_VAR 0 7
67682: PUSH
67683: LD_VAR 0 2
67687: PUSH
67688: LD_INT 10
67690: DIVREAL
67691: ST_TO_ADDR
// time := 1 1$00 ;
67692: LD_ADDR_VAR 0 8
67696: PUSH
67697: LD_INT 2100
67699: ST_TO_ADDR
// if amount < min then
67700: LD_VAR 0 9
67704: PUSH
67705: LD_VAR 0 3
67709: LESS
67710: IFFALSE 67728
// r := r * 2 else
67712: LD_ADDR_VAR 0 7
67716: PUSH
67717: LD_VAR 0 7
67721: PUSH
67722: LD_INT 2
67724: MUL
67725: ST_TO_ADDR
67726: GO 67754
// if amount > max then
67728: LD_VAR 0 9
67732: PUSH
67733: LD_VAR 0 4
67737: GREATER
67738: IFFALSE 67754
// r := r / 2 ;
67740: LD_ADDR_VAR 0 7
67744: PUSH
67745: LD_VAR 0 7
67749: PUSH
67750: LD_INT 2
67752: DIVREAL
67753: ST_TO_ADDR
// time := time / r ;
67754: LD_ADDR_VAR 0 8
67758: PUSH
67759: LD_VAR 0 8
67763: PUSH
67764: LD_VAR 0 7
67768: DIVREAL
67769: ST_TO_ADDR
// if time < 0 then
67770: LD_VAR 0 8
67774: PUSH
67775: LD_INT 0
67777: LESS
67778: IFFALSE 67795
// time := time * - 1 ;
67780: LD_ADDR_VAR 0 8
67784: PUSH
67785: LD_VAR 0 8
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: MUL
67794: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67795: LD_VAR 0 8
67799: PUSH
67800: LD_INT 35
67802: PPUSH
67803: LD_INT 875
67805: PPUSH
67806: CALL_OW 12
67810: PLUS
67811: PPUSH
67812: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67816: LD_INT 1
67818: PPUSH
67819: LD_INT 5
67821: PPUSH
67822: CALL_OW 12
67826: PPUSH
67827: LD_VAR 0 1
67831: PPUSH
67832: LD_INT 1
67834: PPUSH
67835: CALL_OW 55
// end ;
67839: GO 67652
// end ;
67841: LD_VAR 0 5
67845: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67846: LD_INT 0
67848: PPUSH
67849: PPUSH
67850: PPUSH
67851: PPUSH
67852: PPUSH
67853: PPUSH
67854: PPUSH
67855: PPUSH
// if not turrets or not factories then
67856: LD_VAR 0 1
67860: NOT
67861: PUSH
67862: LD_VAR 0 2
67866: NOT
67867: OR
67868: IFFALSE 67872
// exit ;
67870: GO 68179
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67872: LD_ADDR_VAR 0 10
67876: PUSH
67877: LD_INT 5
67879: PUSH
67880: LD_INT 6
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 2
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 24
67914: PUSH
67915: LD_INT 25
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 23
67924: PUSH
67925: LD_INT 27
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 42
67938: PUSH
67939: LD_INT 43
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 44
67948: PUSH
67949: LD_INT 46
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 45
67958: PUSH
67959: LD_INT 47
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: LIST
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: LIST
67975: ST_TO_ADDR
// result := [ ] ;
67976: LD_ADDR_VAR 0 3
67980: PUSH
67981: EMPTY
67982: ST_TO_ADDR
// for i in turrets do
67983: LD_ADDR_VAR 0 4
67987: PUSH
67988: LD_VAR 0 1
67992: PUSH
67993: FOR_IN
67994: IFFALSE 68177
// begin nat := GetNation ( i ) ;
67996: LD_ADDR_VAR 0 7
68000: PUSH
68001: LD_VAR 0 4
68005: PPUSH
68006: CALL_OW 248
68010: ST_TO_ADDR
// weapon := 0 ;
68011: LD_ADDR_VAR 0 8
68015: PUSH
68016: LD_INT 0
68018: ST_TO_ADDR
// if not nat then
68019: LD_VAR 0 7
68023: NOT
68024: IFFALSE 68028
// continue ;
68026: GO 67993
// for j in list [ nat ] do
68028: LD_ADDR_VAR 0 5
68032: PUSH
68033: LD_VAR 0 10
68037: PUSH
68038: LD_VAR 0 7
68042: ARRAY
68043: PUSH
68044: FOR_IN
68045: IFFALSE 68086
// if GetBWeapon ( i ) = j [ 1 ] then
68047: LD_VAR 0 4
68051: PPUSH
68052: CALL_OW 269
68056: PUSH
68057: LD_VAR 0 5
68061: PUSH
68062: LD_INT 1
68064: ARRAY
68065: EQUAL
68066: IFFALSE 68084
// begin weapon := j [ 2 ] ;
68068: LD_ADDR_VAR 0 8
68072: PUSH
68073: LD_VAR 0 5
68077: PUSH
68078: LD_INT 2
68080: ARRAY
68081: ST_TO_ADDR
// break ;
68082: GO 68086
// end ;
68084: GO 68044
68086: POP
68087: POP
// if not weapon then
68088: LD_VAR 0 8
68092: NOT
68093: IFFALSE 68097
// continue ;
68095: GO 67993
// for k in factories do
68097: LD_ADDR_VAR 0 6
68101: PUSH
68102: LD_VAR 0 2
68106: PUSH
68107: FOR_IN
68108: IFFALSE 68173
// begin weapons := AvailableWeaponList ( k ) ;
68110: LD_ADDR_VAR 0 9
68114: PUSH
68115: LD_VAR 0 6
68119: PPUSH
68120: CALL_OW 478
68124: ST_TO_ADDR
// if not weapons then
68125: LD_VAR 0 9
68129: NOT
68130: IFFALSE 68134
// continue ;
68132: GO 68107
// if weapon in weapons then
68134: LD_VAR 0 8
68138: PUSH
68139: LD_VAR 0 9
68143: IN
68144: IFFALSE 68171
// begin result := [ i , weapon ] ;
68146: LD_ADDR_VAR 0 3
68150: PUSH
68151: LD_VAR 0 4
68155: PUSH
68156: LD_VAR 0 8
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// exit ;
68165: POP
68166: POP
68167: POP
68168: POP
68169: GO 68179
// end ; end ;
68171: GO 68107
68173: POP
68174: POP
// end ;
68175: GO 67993
68177: POP
68178: POP
// end ;
68179: LD_VAR 0 3
68183: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68184: LD_INT 0
68186: PPUSH
// if not side or side > 8 then
68187: LD_VAR 0 3
68191: NOT
68192: PUSH
68193: LD_VAR 0 3
68197: PUSH
68198: LD_INT 8
68200: GREATER
68201: OR
68202: IFFALSE 68206
// exit ;
68204: GO 68265
// if not range then
68206: LD_VAR 0 4
68210: NOT
68211: IFFALSE 68222
// range := - 12 ;
68213: LD_ADDR_VAR 0 4
68217: PUSH
68218: LD_INT 12
68220: NEG
68221: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68222: LD_VAR 0 1
68226: PPUSH
68227: LD_VAR 0 2
68231: PPUSH
68232: LD_VAR 0 3
68236: PPUSH
68237: LD_VAR 0 4
68241: PPUSH
68242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68246: LD_VAR 0 1
68250: PPUSH
68251: LD_VAR 0 2
68255: PPUSH
68256: LD_VAR 0 3
68260: PPUSH
68261: CALL_OW 331
// end ;
68265: LD_VAR 0 5
68269: RET
// export function Video ( mode ) ; begin
68270: LD_INT 0
68272: PPUSH
// ingame_video = mode ;
68273: LD_ADDR_OWVAR 52
68277: PUSH
68278: LD_VAR 0 1
68282: ST_TO_ADDR
// interface_hidden = mode ;
68283: LD_ADDR_OWVAR 54
68287: PUSH
68288: LD_VAR 0 1
68292: ST_TO_ADDR
// end ;
68293: LD_VAR 0 2
68297: RET
// export function Join ( array , element ) ; begin
68298: LD_INT 0
68300: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68301: LD_ADDR_VAR 0 3
68305: PUSH
68306: LD_VAR 0 1
68310: PPUSH
68311: LD_VAR 0 1
68315: PUSH
68316: LD_INT 1
68318: PLUS
68319: PPUSH
68320: LD_VAR 0 2
68324: PPUSH
68325: CALL_OW 1
68329: ST_TO_ADDR
// end ;
68330: LD_VAR 0 3
68334: RET
// export function JoinUnion ( array , element ) ; begin
68335: LD_INT 0
68337: PPUSH
// result := array union element ;
68338: LD_ADDR_VAR 0 3
68342: PUSH
68343: LD_VAR 0 1
68347: PUSH
68348: LD_VAR 0 2
68352: UNION
68353: ST_TO_ADDR
// end ;
68354: LD_VAR 0 3
68358: RET
// export function GetBehemoths ( side ) ; begin
68359: LD_INT 0
68361: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68362: LD_ADDR_VAR 0 2
68366: PUSH
68367: LD_INT 22
68369: PUSH
68370: LD_VAR 0 1
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 31
68381: PUSH
68382: LD_INT 25
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PPUSH
68393: CALL_OW 69
68397: ST_TO_ADDR
// end ;
68398: LD_VAR 0 2
68402: RET
// export function Shuffle ( array ) ; var i , index ; begin
68403: LD_INT 0
68405: PPUSH
68406: PPUSH
68407: PPUSH
// result := [ ] ;
68408: LD_ADDR_VAR 0 2
68412: PUSH
68413: EMPTY
68414: ST_TO_ADDR
// if not array then
68415: LD_VAR 0 1
68419: NOT
68420: IFFALSE 68424
// exit ;
68422: GO 68523
// Randomize ;
68424: CALL_OW 10
// for i = array downto 1 do
68428: LD_ADDR_VAR 0 3
68432: PUSH
68433: DOUBLE
68434: LD_VAR 0 1
68438: INC
68439: ST_TO_ADDR
68440: LD_INT 1
68442: PUSH
68443: FOR_DOWNTO
68444: IFFALSE 68521
// begin index := rand ( 1 , array ) ;
68446: LD_ADDR_VAR 0 4
68450: PUSH
68451: LD_INT 1
68453: PPUSH
68454: LD_VAR 0 1
68458: PPUSH
68459: CALL_OW 12
68463: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68464: LD_ADDR_VAR 0 2
68468: PUSH
68469: LD_VAR 0 2
68473: PPUSH
68474: LD_VAR 0 2
68478: PUSH
68479: LD_INT 1
68481: PLUS
68482: PPUSH
68483: LD_VAR 0 1
68487: PUSH
68488: LD_VAR 0 4
68492: ARRAY
68493: PPUSH
68494: CALL_OW 2
68498: ST_TO_ADDR
// array := Delete ( array , index ) ;
68499: LD_ADDR_VAR 0 1
68503: PUSH
68504: LD_VAR 0 1
68508: PPUSH
68509: LD_VAR 0 4
68513: PPUSH
68514: CALL_OW 3
68518: ST_TO_ADDR
// end ;
68519: GO 68443
68521: POP
68522: POP
// end ;
68523: LD_VAR 0 2
68527: RET
// export function GetBaseMaterials ( base ) ; begin
68528: LD_INT 0
68530: PPUSH
// result := [ 0 , 0 , 0 ] ;
68531: LD_ADDR_VAR 0 2
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: LIST
68549: ST_TO_ADDR
// if not base then
68550: LD_VAR 0 1
68554: NOT
68555: IFFALSE 68559
// exit ;
68557: GO 68608
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68559: LD_ADDR_VAR 0 2
68563: PUSH
68564: LD_VAR 0 1
68568: PPUSH
68569: LD_INT 1
68571: PPUSH
68572: CALL_OW 275
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: LD_INT 2
68584: PPUSH
68585: CALL_OW 275
68589: PUSH
68590: LD_VAR 0 1
68594: PPUSH
68595: LD_INT 3
68597: PPUSH
68598: CALL_OW 275
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: LIST
68607: ST_TO_ADDR
// end ;
68608: LD_VAR 0 2
68612: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68613: LD_INT 0
68615: PPUSH
68616: PPUSH
// result := array ;
68617: LD_ADDR_VAR 0 3
68621: PUSH
68622: LD_VAR 0 1
68626: ST_TO_ADDR
// if size >= result then
68627: LD_VAR 0 2
68631: PUSH
68632: LD_VAR 0 3
68636: GREATEREQUAL
68637: IFFALSE 68641
// exit ;
68639: GO 68691
// if size then
68641: LD_VAR 0 2
68645: IFFALSE 68691
// for i := array downto size do
68647: LD_ADDR_VAR 0 4
68651: PUSH
68652: DOUBLE
68653: LD_VAR 0 1
68657: INC
68658: ST_TO_ADDR
68659: LD_VAR 0 2
68663: PUSH
68664: FOR_DOWNTO
68665: IFFALSE 68689
// result := Delete ( result , result ) ;
68667: LD_ADDR_VAR 0 3
68671: PUSH
68672: LD_VAR 0 3
68676: PPUSH
68677: LD_VAR 0 3
68681: PPUSH
68682: CALL_OW 3
68686: ST_TO_ADDR
68687: GO 68664
68689: POP
68690: POP
// end ;
68691: LD_VAR 0 3
68695: RET
// export function ComExit ( unit ) ; var tmp ; begin
68696: LD_INT 0
68698: PPUSH
68699: PPUSH
// if not IsInUnit ( unit ) then
68700: LD_VAR 0 1
68704: PPUSH
68705: CALL_OW 310
68709: NOT
68710: IFFALSE 68714
// exit ;
68712: GO 68774
// tmp := IsInUnit ( unit ) ;
68714: LD_ADDR_VAR 0 3
68718: PUSH
68719: LD_VAR 0 1
68723: PPUSH
68724: CALL_OW 310
68728: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68729: LD_VAR 0 3
68733: PPUSH
68734: CALL_OW 247
68738: PUSH
68739: LD_INT 2
68741: EQUAL
68742: IFFALSE 68755
// ComExitVehicle ( unit ) else
68744: LD_VAR 0 1
68748: PPUSH
68749: CALL_OW 121
68753: GO 68764
// ComExitBuilding ( unit ) ;
68755: LD_VAR 0 1
68759: PPUSH
68760: CALL_OW 122
// result := tmp ;
68764: LD_ADDR_VAR 0 2
68768: PUSH
68769: LD_VAR 0 3
68773: ST_TO_ADDR
// end ;
68774: LD_VAR 0 2
68778: RET
// export function ComExitAll ( units ) ; var i ; begin
68779: LD_INT 0
68781: PPUSH
68782: PPUSH
// if not units then
68783: LD_VAR 0 1
68787: NOT
68788: IFFALSE 68792
// exit ;
68790: GO 68818
// for i in units do
68792: LD_ADDR_VAR 0 3
68796: PUSH
68797: LD_VAR 0 1
68801: PUSH
68802: FOR_IN
68803: IFFALSE 68816
// ComExit ( i ) ;
68805: LD_VAR 0 3
68809: PPUSH
68810: CALL 68696 0 1
68814: GO 68802
68816: POP
68817: POP
// end ;
68818: LD_VAR 0 2
68822: RET
// export function ResetHc ; begin
68823: LD_INT 0
68825: PPUSH
// InitHc ;
68826: CALL_OW 19
// hc_importance := 0 ;
68830: LD_ADDR_OWVAR 32
68834: PUSH
68835: LD_INT 0
68837: ST_TO_ADDR
// end ;
68838: LD_VAR 0 1
68842: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68843: LD_INT 0
68845: PPUSH
68846: PPUSH
68847: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68848: LD_ADDR_VAR 0 6
68852: PUSH
68853: LD_VAR 0 1
68857: PUSH
68858: LD_VAR 0 3
68862: PLUS
68863: PUSH
68864: LD_INT 2
68866: DIV
68867: ST_TO_ADDR
// if _x < 0 then
68868: LD_VAR 0 6
68872: PUSH
68873: LD_INT 0
68875: LESS
68876: IFFALSE 68893
// _x := _x * - 1 ;
68878: LD_ADDR_VAR 0 6
68882: PUSH
68883: LD_VAR 0 6
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: MUL
68892: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68893: LD_ADDR_VAR 0 7
68897: PUSH
68898: LD_VAR 0 2
68902: PUSH
68903: LD_VAR 0 4
68907: PLUS
68908: PUSH
68909: LD_INT 2
68911: DIV
68912: ST_TO_ADDR
// if _y < 0 then
68913: LD_VAR 0 7
68917: PUSH
68918: LD_INT 0
68920: LESS
68921: IFFALSE 68938
// _y := _y * - 1 ;
68923: LD_ADDR_VAR 0 7
68927: PUSH
68928: LD_VAR 0 7
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: MUL
68937: ST_TO_ADDR
// result := [ _x , _y ] ;
68938: LD_ADDR_VAR 0 5
68942: PUSH
68943: LD_VAR 0 6
68947: PUSH
68948: LD_VAR 0 7
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: ST_TO_ADDR
// end ;
68957: LD_VAR 0 5
68961: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68962: LD_INT 0
68964: PPUSH
68965: PPUSH
68966: PPUSH
68967: PPUSH
// task := GetTaskList ( unit ) ;
68968: LD_ADDR_VAR 0 7
68972: PUSH
68973: LD_VAR 0 1
68977: PPUSH
68978: CALL_OW 437
68982: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68983: LD_VAR 0 7
68987: NOT
68988: PUSH
68989: LD_VAR 0 1
68993: PPUSH
68994: LD_VAR 0 2
68998: PPUSH
68999: CALL_OW 308
69003: NOT
69004: AND
69005: IFFALSE 69009
// exit ;
69007: GO 69127
// if IsInArea ( unit , area ) then
69009: LD_VAR 0 1
69013: PPUSH
69014: LD_VAR 0 2
69018: PPUSH
69019: CALL_OW 308
69023: IFFALSE 69041
// begin ComMoveToArea ( unit , goAway ) ;
69025: LD_VAR 0 1
69029: PPUSH
69030: LD_VAR 0 3
69034: PPUSH
69035: CALL_OW 113
// exit ;
69039: GO 69127
// end ; if task [ 1 ] [ 1 ] <> M then
69041: LD_VAR 0 7
69045: PUSH
69046: LD_INT 1
69048: ARRAY
69049: PUSH
69050: LD_INT 1
69052: ARRAY
69053: PUSH
69054: LD_STRING M
69056: NONEQUAL
69057: IFFALSE 69061
// exit ;
69059: GO 69127
// x := task [ 1 ] [ 2 ] ;
69061: LD_ADDR_VAR 0 5
69065: PUSH
69066: LD_VAR 0 7
69070: PUSH
69071: LD_INT 1
69073: ARRAY
69074: PUSH
69075: LD_INT 2
69077: ARRAY
69078: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69079: LD_ADDR_VAR 0 6
69083: PUSH
69084: LD_VAR 0 7
69088: PUSH
69089: LD_INT 1
69091: ARRAY
69092: PUSH
69093: LD_INT 3
69095: ARRAY
69096: ST_TO_ADDR
// if InArea ( x , y , area ) then
69097: LD_VAR 0 5
69101: PPUSH
69102: LD_VAR 0 6
69106: PPUSH
69107: LD_VAR 0 2
69111: PPUSH
69112: CALL_OW 309
69116: IFFALSE 69127
// ComStop ( unit ) ;
69118: LD_VAR 0 1
69122: PPUSH
69123: CALL_OW 141
// end ;
69127: LD_VAR 0 4
69131: RET
// export function Abs ( value ) ; begin
69132: LD_INT 0
69134: PPUSH
// result := value ;
69135: LD_ADDR_VAR 0 2
69139: PUSH
69140: LD_VAR 0 1
69144: ST_TO_ADDR
// if value < 0 then
69145: LD_VAR 0 1
69149: PUSH
69150: LD_INT 0
69152: LESS
69153: IFFALSE 69170
// result := value * - 1 ;
69155: LD_ADDR_VAR 0 2
69159: PUSH
69160: LD_VAR 0 1
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: MUL
69169: ST_TO_ADDR
// end ;
69170: LD_VAR 0 2
69174: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69175: LD_INT 0
69177: PPUSH
69178: PPUSH
69179: PPUSH
69180: PPUSH
69181: PPUSH
69182: PPUSH
69183: PPUSH
69184: PPUSH
// if not unit or not building then
69185: LD_VAR 0 1
69189: NOT
69190: PUSH
69191: LD_VAR 0 2
69195: NOT
69196: OR
69197: IFFALSE 69201
// exit ;
69199: GO 69427
// x := GetX ( building ) ;
69201: LD_ADDR_VAR 0 4
69205: PUSH
69206: LD_VAR 0 2
69210: PPUSH
69211: CALL_OW 250
69215: ST_TO_ADDR
// y := GetY ( building ) ;
69216: LD_ADDR_VAR 0 6
69220: PUSH
69221: LD_VAR 0 2
69225: PPUSH
69226: CALL_OW 251
69230: ST_TO_ADDR
// d := GetDir ( building ) ;
69231: LD_ADDR_VAR 0 8
69235: PUSH
69236: LD_VAR 0 2
69240: PPUSH
69241: CALL_OW 254
69245: ST_TO_ADDR
// r := 4 ;
69246: LD_ADDR_VAR 0 9
69250: PUSH
69251: LD_INT 4
69253: ST_TO_ADDR
// for i := 1 to 5 do
69254: LD_ADDR_VAR 0 10
69258: PUSH
69259: DOUBLE
69260: LD_INT 1
69262: DEC
69263: ST_TO_ADDR
69264: LD_INT 5
69266: PUSH
69267: FOR_TO
69268: IFFALSE 69425
// begin _x := ShiftX ( x , d , r + i ) ;
69270: LD_ADDR_VAR 0 5
69274: PUSH
69275: LD_VAR 0 4
69279: PPUSH
69280: LD_VAR 0 8
69284: PPUSH
69285: LD_VAR 0 9
69289: PUSH
69290: LD_VAR 0 10
69294: PLUS
69295: PPUSH
69296: CALL_OW 272
69300: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69301: LD_ADDR_VAR 0 7
69305: PUSH
69306: LD_VAR 0 6
69310: PPUSH
69311: LD_VAR 0 8
69315: PPUSH
69316: LD_VAR 0 9
69320: PUSH
69321: LD_VAR 0 10
69325: PLUS
69326: PPUSH
69327: CALL_OW 273
69331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69332: LD_VAR 0 5
69336: PPUSH
69337: LD_VAR 0 7
69341: PPUSH
69342: CALL_OW 488
69346: PUSH
69347: LD_VAR 0 5
69351: PPUSH
69352: LD_VAR 0 7
69356: PPUSH
69357: CALL_OW 428
69361: PPUSH
69362: CALL_OW 247
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: IN
69377: NOT
69378: AND
69379: IFFALSE 69423
// begin ComMoveXY ( unit , _x , _y ) ;
69381: LD_VAR 0 1
69385: PPUSH
69386: LD_VAR 0 5
69390: PPUSH
69391: LD_VAR 0 7
69395: PPUSH
69396: CALL_OW 111
// result := [ _x , _y ] ;
69400: LD_ADDR_VAR 0 3
69404: PUSH
69405: LD_VAR 0 5
69409: PUSH
69410: LD_VAR 0 7
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: ST_TO_ADDR
// exit ;
69419: POP
69420: POP
69421: GO 69427
// end ; end ;
69423: GO 69267
69425: POP
69426: POP
// end ;
69427: LD_VAR 0 3
69431: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69432: LD_INT 0
69434: PPUSH
69435: PPUSH
69436: PPUSH
// result := 0 ;
69437: LD_ADDR_VAR 0 3
69441: PUSH
69442: LD_INT 0
69444: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69445: LD_VAR 0 1
69449: PUSH
69450: LD_INT 0
69452: LESS
69453: PUSH
69454: LD_VAR 0 1
69458: PUSH
69459: LD_INT 8
69461: GREATER
69462: OR
69463: PUSH
69464: LD_VAR 0 2
69468: PUSH
69469: LD_INT 0
69471: LESS
69472: OR
69473: PUSH
69474: LD_VAR 0 2
69478: PUSH
69479: LD_INT 8
69481: GREATER
69482: OR
69483: IFFALSE 69487
// exit ;
69485: GO 69562
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69487: LD_ADDR_VAR 0 4
69491: PUSH
69492: LD_INT 22
69494: PUSH
69495: LD_VAR 0 2
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PPUSH
69504: CALL_OW 69
69508: PUSH
69509: FOR_IN
69510: IFFALSE 69560
// begin un := UnitShoot ( i ) ;
69512: LD_ADDR_VAR 0 5
69516: PUSH
69517: LD_VAR 0 4
69521: PPUSH
69522: CALL_OW 504
69526: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69527: LD_VAR 0 5
69531: PPUSH
69532: CALL_OW 255
69536: PUSH
69537: LD_VAR 0 1
69541: EQUAL
69542: IFFALSE 69558
// begin result := un ;
69544: LD_ADDR_VAR 0 3
69548: PUSH
69549: LD_VAR 0 5
69553: ST_TO_ADDR
// exit ;
69554: POP
69555: POP
69556: GO 69562
// end ; end ;
69558: GO 69509
69560: POP
69561: POP
// end ;
69562: LD_VAR 0 3
69566: RET
// export function GetCargoBay ( units ) ; begin
69567: LD_INT 0
69569: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69570: LD_ADDR_VAR 0 2
69574: PUSH
69575: LD_VAR 0 1
69579: PPUSH
69580: LD_INT 2
69582: PUSH
69583: LD_INT 34
69585: PUSH
69586: LD_INT 12
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 34
69595: PUSH
69596: LD_INT 51
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 34
69605: PUSH
69606: LD_INT 32
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 34
69615: PUSH
69616: LD_INT 89
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: PPUSH
69630: CALL_OW 72
69634: ST_TO_ADDR
// end ;
69635: LD_VAR 0 2
69639: RET
// export function Negate ( value ) ; begin
69640: LD_INT 0
69642: PPUSH
// result := not value ;
69643: LD_ADDR_VAR 0 2
69647: PUSH
69648: LD_VAR 0 1
69652: NOT
69653: ST_TO_ADDR
// end ;
69654: LD_VAR 0 2
69658: RET
// export function Inc ( value ) ; begin
69659: LD_INT 0
69661: PPUSH
// result := value + 1 ;
69662: LD_ADDR_VAR 0 2
69666: PUSH
69667: LD_VAR 0 1
69671: PUSH
69672: LD_INT 1
69674: PLUS
69675: ST_TO_ADDR
// end ;
69676: LD_VAR 0 2
69680: RET
// export function Dec ( value ) ; begin
69681: LD_INT 0
69683: PPUSH
// result := value - 1 ;
69684: LD_ADDR_VAR 0 2
69688: PUSH
69689: LD_VAR 0 1
69693: PUSH
69694: LD_INT 1
69696: MINUS
69697: ST_TO_ADDR
// end ;
69698: LD_VAR 0 2
69702: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69703: LD_INT 0
69705: PPUSH
69706: PPUSH
69707: PPUSH
69708: PPUSH
69709: PPUSH
69710: PPUSH
69711: PPUSH
69712: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69713: LD_VAR 0 1
69717: PPUSH
69718: LD_VAR 0 2
69722: PPUSH
69723: CALL_OW 488
69727: NOT
69728: PUSH
69729: LD_VAR 0 3
69733: PPUSH
69734: LD_VAR 0 4
69738: PPUSH
69739: CALL_OW 488
69743: NOT
69744: OR
69745: IFFALSE 69758
// begin result := - 1 ;
69747: LD_ADDR_VAR 0 5
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: ST_TO_ADDR
// exit ;
69756: GO 69993
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69758: LD_ADDR_VAR 0 12
69762: PUSH
69763: LD_VAR 0 1
69767: PPUSH
69768: LD_VAR 0 2
69772: PPUSH
69773: LD_VAR 0 3
69777: PPUSH
69778: LD_VAR 0 4
69782: PPUSH
69783: CALL 68843 0 4
69787: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69788: LD_ADDR_VAR 0 11
69792: PUSH
69793: LD_VAR 0 1
69797: PPUSH
69798: LD_VAR 0 2
69802: PPUSH
69803: LD_VAR 0 12
69807: PUSH
69808: LD_INT 1
69810: ARRAY
69811: PPUSH
69812: LD_VAR 0 12
69816: PUSH
69817: LD_INT 2
69819: ARRAY
69820: PPUSH
69821: CALL_OW 298
69825: ST_TO_ADDR
// distance := 9999 ;
69826: LD_ADDR_VAR 0 10
69830: PUSH
69831: LD_INT 9999
69833: ST_TO_ADDR
// for i := 0 to 5 do
69834: LD_ADDR_VAR 0 6
69838: PUSH
69839: DOUBLE
69840: LD_INT 0
69842: DEC
69843: ST_TO_ADDR
69844: LD_INT 5
69846: PUSH
69847: FOR_TO
69848: IFFALSE 69991
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69850: LD_ADDR_VAR 0 7
69854: PUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: LD_VAR 0 6
69864: PPUSH
69865: LD_VAR 0 11
69869: PPUSH
69870: CALL_OW 272
69874: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69875: LD_ADDR_VAR 0 8
69879: PUSH
69880: LD_VAR 0 2
69884: PPUSH
69885: LD_VAR 0 6
69889: PPUSH
69890: LD_VAR 0 11
69894: PPUSH
69895: CALL_OW 273
69899: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69900: LD_VAR 0 7
69904: PPUSH
69905: LD_VAR 0 8
69909: PPUSH
69910: CALL_OW 488
69914: NOT
69915: IFFALSE 69919
// continue ;
69917: GO 69847
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69919: LD_ADDR_VAR 0 9
69923: PUSH
69924: LD_VAR 0 12
69928: PUSH
69929: LD_INT 1
69931: ARRAY
69932: PPUSH
69933: LD_VAR 0 12
69937: PUSH
69938: LD_INT 2
69940: ARRAY
69941: PPUSH
69942: LD_VAR 0 7
69946: PPUSH
69947: LD_VAR 0 8
69951: PPUSH
69952: CALL_OW 298
69956: ST_TO_ADDR
// if tmp < distance then
69957: LD_VAR 0 9
69961: PUSH
69962: LD_VAR 0 10
69966: LESS
69967: IFFALSE 69989
// begin result := i ;
69969: LD_ADDR_VAR 0 5
69973: PUSH
69974: LD_VAR 0 6
69978: ST_TO_ADDR
// distance := tmp ;
69979: LD_ADDR_VAR 0 10
69983: PUSH
69984: LD_VAR 0 9
69988: ST_TO_ADDR
// end ; end ;
69989: GO 69847
69991: POP
69992: POP
// end ;
69993: LD_VAR 0 5
69997: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69998: LD_INT 0
70000: PPUSH
70001: PPUSH
// if not driver or not IsInUnit ( driver ) then
70002: LD_VAR 0 1
70006: NOT
70007: PUSH
70008: LD_VAR 0 1
70012: PPUSH
70013: CALL_OW 310
70017: NOT
70018: OR
70019: IFFALSE 70023
// exit ;
70021: GO 70113
// vehicle := IsInUnit ( driver ) ;
70023: LD_ADDR_VAR 0 3
70027: PUSH
70028: LD_VAR 0 1
70032: PPUSH
70033: CALL_OW 310
70037: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70038: LD_VAR 0 1
70042: PPUSH
70043: LD_STRING \
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: PUSH
70073: LD_STRING E
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_VAR 0 3
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PPUSH
70109: CALL_OW 446
// end ;
70113: LD_VAR 0 2
70117: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70118: LD_INT 0
70120: PPUSH
70121: PPUSH
// if not driver or not IsInUnit ( driver ) then
70122: LD_VAR 0 1
70126: NOT
70127: PUSH
70128: LD_VAR 0 1
70132: PPUSH
70133: CALL_OW 310
70137: NOT
70138: OR
70139: IFFALSE 70143
// exit ;
70141: GO 70233
// vehicle := IsInUnit ( driver ) ;
70143: LD_ADDR_VAR 0 3
70147: PUSH
70148: LD_VAR 0 1
70152: PPUSH
70153: CALL_OW 310
70157: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70158: LD_VAR 0 1
70162: PPUSH
70163: LD_STRING \
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: LD_INT 0
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: PUSH
70193: LD_STRING E
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: LD_INT 0
70201: PUSH
70202: LD_VAR 0 3
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PPUSH
70229: CALL_OW 447
// end ;
70233: LD_VAR 0 2
70237: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70238: LD_INT 0
70240: PPUSH
70241: PPUSH
70242: PPUSH
// tmp := [ ] ;
70243: LD_ADDR_VAR 0 5
70247: PUSH
70248: EMPTY
70249: ST_TO_ADDR
// for i in units do
70250: LD_ADDR_VAR 0 4
70254: PUSH
70255: LD_VAR 0 1
70259: PUSH
70260: FOR_IN
70261: IFFALSE 70299
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70263: LD_ADDR_VAR 0 5
70267: PUSH
70268: LD_VAR 0 5
70272: PPUSH
70273: LD_VAR 0 5
70277: PUSH
70278: LD_INT 1
70280: PLUS
70281: PPUSH
70282: LD_VAR 0 4
70286: PPUSH
70287: CALL_OW 256
70291: PPUSH
70292: CALL_OW 2
70296: ST_TO_ADDR
70297: GO 70260
70299: POP
70300: POP
// if not tmp then
70301: LD_VAR 0 5
70305: NOT
70306: IFFALSE 70310
// exit ;
70308: GO 70358
// if asc then
70310: LD_VAR 0 2
70314: IFFALSE 70338
// result := SortListByListAsc ( units , tmp ) else
70316: LD_ADDR_VAR 0 3
70320: PUSH
70321: LD_VAR 0 1
70325: PPUSH
70326: LD_VAR 0 5
70330: PPUSH
70331: CALL_OW 76
70335: ST_TO_ADDR
70336: GO 70358
// result := SortListByListDesc ( units , tmp ) ;
70338: LD_ADDR_VAR 0 3
70342: PUSH
70343: LD_VAR 0 1
70347: PPUSH
70348: LD_VAR 0 5
70352: PPUSH
70353: CALL_OW 77
70357: ST_TO_ADDR
// end ;
70358: LD_VAR 0 3
70362: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70363: LD_INT 0
70365: PPUSH
70366: PPUSH
// task := GetTaskList ( mech ) ;
70367: LD_ADDR_VAR 0 4
70371: PUSH
70372: LD_VAR 0 1
70376: PPUSH
70377: CALL_OW 437
70381: ST_TO_ADDR
// if not task then
70382: LD_VAR 0 4
70386: NOT
70387: IFFALSE 70391
// exit ;
70389: GO 70433
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70391: LD_ADDR_VAR 0 3
70395: PUSH
70396: LD_VAR 0 4
70400: PUSH
70401: LD_INT 1
70403: ARRAY
70404: PUSH
70405: LD_INT 1
70407: ARRAY
70408: PUSH
70409: LD_STRING r
70411: EQUAL
70412: PUSH
70413: LD_VAR 0 4
70417: PUSH
70418: LD_INT 1
70420: ARRAY
70421: PUSH
70422: LD_INT 4
70424: ARRAY
70425: PUSH
70426: LD_VAR 0 2
70430: EQUAL
70431: AND
70432: ST_TO_ADDR
// end ;
70433: LD_VAR 0 3
70437: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70438: LD_INT 0
70440: PPUSH
// SetDir ( unit , d ) ;
70441: LD_VAR 0 1
70445: PPUSH
70446: LD_VAR 0 4
70450: PPUSH
70451: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70455: LD_VAR 0 1
70459: PPUSH
70460: LD_VAR 0 2
70464: PPUSH
70465: LD_VAR 0 3
70469: PPUSH
70470: LD_VAR 0 5
70474: PPUSH
70475: CALL_OW 48
// end ;
70479: LD_VAR 0 6
70483: RET
// export function ToNaturalNumber ( number ) ; begin
70484: LD_INT 0
70486: PPUSH
// result := number div 1 ;
70487: LD_ADDR_VAR 0 2
70491: PUSH
70492: LD_VAR 0 1
70496: PUSH
70497: LD_INT 1
70499: DIV
70500: ST_TO_ADDR
// if number < 0 then
70501: LD_VAR 0 1
70505: PUSH
70506: LD_INT 0
70508: LESS
70509: IFFALSE 70519
// result := 0 ;
70511: LD_ADDR_VAR 0 2
70515: PUSH
70516: LD_INT 0
70518: ST_TO_ADDR
// end ;
70519: LD_VAR 0 2
70523: RET
// export function SortByClass ( units , class ) ; var un ; begin
70524: LD_INT 0
70526: PPUSH
70527: PPUSH
// if not units or not class then
70528: LD_VAR 0 1
70532: NOT
70533: PUSH
70534: LD_VAR 0 2
70538: NOT
70539: OR
70540: IFFALSE 70544
// exit ;
70542: GO 70639
// result := [ ] ;
70544: LD_ADDR_VAR 0 3
70548: PUSH
70549: EMPTY
70550: ST_TO_ADDR
// for un in units do
70551: LD_ADDR_VAR 0 4
70555: PUSH
70556: LD_VAR 0 1
70560: PUSH
70561: FOR_IN
70562: IFFALSE 70637
// if GetClass ( un ) = class then
70564: LD_VAR 0 4
70568: PPUSH
70569: CALL_OW 257
70573: PUSH
70574: LD_VAR 0 2
70578: EQUAL
70579: IFFALSE 70606
// result := Insert ( result , 1 , un ) else
70581: LD_ADDR_VAR 0 3
70585: PUSH
70586: LD_VAR 0 3
70590: PPUSH
70591: LD_INT 1
70593: PPUSH
70594: LD_VAR 0 4
70598: PPUSH
70599: CALL_OW 2
70603: ST_TO_ADDR
70604: GO 70635
// result := Replace ( result , result + 1 , un ) ;
70606: LD_ADDR_VAR 0 3
70610: PUSH
70611: LD_VAR 0 3
70615: PPUSH
70616: LD_VAR 0 3
70620: PUSH
70621: LD_INT 1
70623: PLUS
70624: PPUSH
70625: LD_VAR 0 4
70629: PPUSH
70630: CALL_OW 1
70634: ST_TO_ADDR
70635: GO 70561
70637: POP
70638: POP
// end ;
70639: LD_VAR 0 3
70643: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70644: LD_INT 0
70646: PPUSH
70647: PPUSH
70648: PPUSH
70649: PPUSH
70650: PPUSH
70651: PPUSH
70652: PPUSH
// result := [ ] ;
70653: LD_ADDR_VAR 0 4
70657: PUSH
70658: EMPTY
70659: ST_TO_ADDR
// if x - r < 0 then
70660: LD_VAR 0 1
70664: PUSH
70665: LD_VAR 0 3
70669: MINUS
70670: PUSH
70671: LD_INT 0
70673: LESS
70674: IFFALSE 70686
// min_x := 0 else
70676: LD_ADDR_VAR 0 8
70680: PUSH
70681: LD_INT 0
70683: ST_TO_ADDR
70684: GO 70702
// min_x := x - r ;
70686: LD_ADDR_VAR 0 8
70690: PUSH
70691: LD_VAR 0 1
70695: PUSH
70696: LD_VAR 0 3
70700: MINUS
70701: ST_TO_ADDR
// if y - r < 0 then
70702: LD_VAR 0 2
70706: PUSH
70707: LD_VAR 0 3
70711: MINUS
70712: PUSH
70713: LD_INT 0
70715: LESS
70716: IFFALSE 70728
// min_y := 0 else
70718: LD_ADDR_VAR 0 7
70722: PUSH
70723: LD_INT 0
70725: ST_TO_ADDR
70726: GO 70744
// min_y := y - r ;
70728: LD_ADDR_VAR 0 7
70732: PUSH
70733: LD_VAR 0 2
70737: PUSH
70738: LD_VAR 0 3
70742: MINUS
70743: ST_TO_ADDR
// max_x := x + r ;
70744: LD_ADDR_VAR 0 9
70748: PUSH
70749: LD_VAR 0 1
70753: PUSH
70754: LD_VAR 0 3
70758: PLUS
70759: ST_TO_ADDR
// max_y := y + r ;
70760: LD_ADDR_VAR 0 10
70764: PUSH
70765: LD_VAR 0 2
70769: PUSH
70770: LD_VAR 0 3
70774: PLUS
70775: ST_TO_ADDR
// for _x = min_x to max_x do
70776: LD_ADDR_VAR 0 5
70780: PUSH
70781: DOUBLE
70782: LD_VAR 0 8
70786: DEC
70787: ST_TO_ADDR
70788: LD_VAR 0 9
70792: PUSH
70793: FOR_TO
70794: IFFALSE 70895
// for _y = min_y to max_y do
70796: LD_ADDR_VAR 0 6
70800: PUSH
70801: DOUBLE
70802: LD_VAR 0 7
70806: DEC
70807: ST_TO_ADDR
70808: LD_VAR 0 10
70812: PUSH
70813: FOR_TO
70814: IFFALSE 70891
// begin if not ValidHex ( _x , _y ) then
70816: LD_VAR 0 5
70820: PPUSH
70821: LD_VAR 0 6
70825: PPUSH
70826: CALL_OW 488
70830: NOT
70831: IFFALSE 70835
// continue ;
70833: GO 70813
// if GetResourceTypeXY ( _x , _y ) then
70835: LD_VAR 0 5
70839: PPUSH
70840: LD_VAR 0 6
70844: PPUSH
70845: CALL_OW 283
70849: IFFALSE 70889
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70851: LD_ADDR_VAR 0 4
70855: PUSH
70856: LD_VAR 0 4
70860: PPUSH
70861: LD_VAR 0 4
70865: PUSH
70866: LD_INT 1
70868: PLUS
70869: PPUSH
70870: LD_VAR 0 5
70874: PUSH
70875: LD_VAR 0 6
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PPUSH
70884: CALL_OW 1
70888: ST_TO_ADDR
// end ;
70889: GO 70813
70891: POP
70892: POP
70893: GO 70793
70895: POP
70896: POP
// end ;
70897: LD_VAR 0 4
70901: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70902: LD_INT 0
70904: PPUSH
70905: PPUSH
70906: PPUSH
70907: PPUSH
70908: PPUSH
70909: PPUSH
70910: PPUSH
70911: PPUSH
// if not units then
70912: LD_VAR 0 1
70916: NOT
70917: IFFALSE 70921
// exit ;
70919: GO 71445
// result := UnitFilter ( units , [ f_ok ] ) ;
70921: LD_ADDR_VAR 0 3
70925: PUSH
70926: LD_VAR 0 1
70930: PPUSH
70931: LD_INT 50
70933: PUSH
70934: EMPTY
70935: LIST
70936: PPUSH
70937: CALL_OW 72
70941: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70942: LD_ADDR_VAR 0 8
70946: PUSH
70947: LD_VAR 0 1
70951: PUSH
70952: LD_INT 1
70954: ARRAY
70955: PPUSH
70956: CALL_OW 255
70960: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70961: LD_ADDR_VAR 0 10
70965: PUSH
70966: LD_INT 29
70968: PUSH
70969: LD_INT 91
70971: PUSH
70972: LD_INT 49
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: LIST
70979: ST_TO_ADDR
// if not result then
70980: LD_VAR 0 3
70984: NOT
70985: IFFALSE 70989
// exit ;
70987: GO 71445
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70989: LD_ADDR_VAR 0 5
70993: PUSH
70994: LD_INT 81
70996: PUSH
70997: LD_VAR 0 8
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PPUSH
71006: CALL_OW 69
71010: ST_TO_ADDR
// for i in result do
71011: LD_ADDR_VAR 0 4
71015: PUSH
71016: LD_VAR 0 3
71020: PUSH
71021: FOR_IN
71022: IFFALSE 71443
// begin tag := GetTag ( i ) + 1 ;
71024: LD_ADDR_VAR 0 9
71028: PUSH
71029: LD_VAR 0 4
71033: PPUSH
71034: CALL_OW 110
71038: PUSH
71039: LD_INT 1
71041: PLUS
71042: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71043: LD_ADDR_VAR 0 7
71047: PUSH
71048: LD_VAR 0 4
71052: PPUSH
71053: CALL_OW 250
71057: PPUSH
71058: LD_VAR 0 4
71062: PPUSH
71063: CALL_OW 251
71067: PPUSH
71068: LD_INT 6
71070: PPUSH
71071: CALL 70644 0 3
71075: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71076: LD_VAR 0 4
71080: PPUSH
71081: CALL_OW 247
71085: PUSH
71086: LD_INT 2
71088: EQUAL
71089: PUSH
71090: LD_VAR 0 7
71094: AND
71095: PUSH
71096: LD_VAR 0 4
71100: PPUSH
71101: CALL_OW 264
71105: PUSH
71106: LD_VAR 0 10
71110: IN
71111: NOT
71112: AND
71113: IFFALSE 71152
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71115: LD_VAR 0 4
71119: PPUSH
71120: LD_VAR 0 7
71124: PUSH
71125: LD_INT 1
71127: ARRAY
71128: PUSH
71129: LD_INT 1
71131: ARRAY
71132: PPUSH
71133: LD_VAR 0 7
71137: PUSH
71138: LD_INT 1
71140: ARRAY
71141: PUSH
71142: LD_INT 2
71144: ARRAY
71145: PPUSH
71146: CALL_OW 116
71150: GO 71441
// if path > tag then
71152: LD_VAR 0 2
71156: PUSH
71157: LD_VAR 0 9
71161: GREATER
71162: IFFALSE 71370
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71164: LD_ADDR_VAR 0 6
71168: PUSH
71169: LD_VAR 0 5
71173: PPUSH
71174: LD_INT 91
71176: PUSH
71177: LD_VAR 0 4
71181: PUSH
71182: LD_INT 8
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: PPUSH
71190: CALL_OW 72
71194: ST_TO_ADDR
// if nearEnemy then
71195: LD_VAR 0 6
71199: IFFALSE 71268
// begin if GetWeapon ( i ) = ru_time_lapser then
71201: LD_VAR 0 4
71205: PPUSH
71206: CALL_OW 264
71210: PUSH
71211: LD_INT 49
71213: EQUAL
71214: IFFALSE 71242
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71216: LD_VAR 0 4
71220: PPUSH
71221: LD_VAR 0 6
71225: PPUSH
71226: LD_VAR 0 4
71230: PPUSH
71231: CALL_OW 74
71235: PPUSH
71236: CALL_OW 112
71240: GO 71266
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71242: LD_VAR 0 4
71246: PPUSH
71247: LD_VAR 0 6
71251: PPUSH
71252: LD_VAR 0 4
71256: PPUSH
71257: CALL_OW 74
71261: PPUSH
71262: CALL_OW 115
// end else
71266: GO 71368
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71268: LD_VAR 0 4
71272: PPUSH
71273: LD_VAR 0 2
71277: PUSH
71278: LD_VAR 0 9
71282: ARRAY
71283: PUSH
71284: LD_INT 1
71286: ARRAY
71287: PPUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_VAR 0 9
71297: ARRAY
71298: PUSH
71299: LD_INT 2
71301: ARRAY
71302: PPUSH
71303: CALL_OW 297
71307: PUSH
71308: LD_INT 6
71310: GREATER
71311: IFFALSE 71354
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71313: LD_VAR 0 4
71317: PPUSH
71318: LD_VAR 0 2
71322: PUSH
71323: LD_VAR 0 9
71327: ARRAY
71328: PUSH
71329: LD_INT 1
71331: ARRAY
71332: PPUSH
71333: LD_VAR 0 2
71337: PUSH
71338: LD_VAR 0 9
71342: ARRAY
71343: PUSH
71344: LD_INT 2
71346: ARRAY
71347: PPUSH
71348: CALL_OW 114
71352: GO 71368
// SetTag ( i , tag ) ;
71354: LD_VAR 0 4
71358: PPUSH
71359: LD_VAR 0 9
71363: PPUSH
71364: CALL_OW 109
// end else
71368: GO 71441
// if enemy then
71370: LD_VAR 0 5
71374: IFFALSE 71441
// begin if GetWeapon ( i ) = ru_time_lapser then
71376: LD_VAR 0 4
71380: PPUSH
71381: CALL_OW 264
71385: PUSH
71386: LD_INT 49
71388: EQUAL
71389: IFFALSE 71417
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71391: LD_VAR 0 4
71395: PPUSH
71396: LD_VAR 0 5
71400: PPUSH
71401: LD_VAR 0 4
71405: PPUSH
71406: CALL_OW 74
71410: PPUSH
71411: CALL_OW 112
71415: GO 71441
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71417: LD_VAR 0 4
71421: PPUSH
71422: LD_VAR 0 5
71426: PPUSH
71427: LD_VAR 0 4
71431: PPUSH
71432: CALL_OW 74
71436: PPUSH
71437: CALL_OW 115
// end ; end ;
71441: GO 71021
71443: POP
71444: POP
// end ;
71445: LD_VAR 0 3
71449: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71450: LD_INT 0
71452: PPUSH
71453: PPUSH
71454: PPUSH
// if not unit or IsInUnit ( unit ) then
71455: LD_VAR 0 1
71459: NOT
71460: PUSH
71461: LD_VAR 0 1
71465: PPUSH
71466: CALL_OW 310
71470: OR
71471: IFFALSE 71475
// exit ;
71473: GO 71566
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71475: LD_ADDR_VAR 0 4
71479: PUSH
71480: LD_VAR 0 1
71484: PPUSH
71485: CALL_OW 250
71489: PPUSH
71490: LD_VAR 0 2
71494: PPUSH
71495: LD_INT 1
71497: PPUSH
71498: CALL_OW 272
71502: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71503: LD_ADDR_VAR 0 5
71507: PUSH
71508: LD_VAR 0 1
71512: PPUSH
71513: CALL_OW 251
71517: PPUSH
71518: LD_VAR 0 2
71522: PPUSH
71523: LD_INT 1
71525: PPUSH
71526: CALL_OW 273
71530: ST_TO_ADDR
// if ValidHex ( x , y ) then
71531: LD_VAR 0 4
71535: PPUSH
71536: LD_VAR 0 5
71540: PPUSH
71541: CALL_OW 488
71545: IFFALSE 71566
// ComTurnXY ( unit , x , y ) ;
71547: LD_VAR 0 1
71551: PPUSH
71552: LD_VAR 0 4
71556: PPUSH
71557: LD_VAR 0 5
71561: PPUSH
71562: CALL_OW 118
// end ;
71566: LD_VAR 0 3
71570: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71571: LD_INT 0
71573: PPUSH
71574: PPUSH
// result := false ;
71575: LD_ADDR_VAR 0 3
71579: PUSH
71580: LD_INT 0
71582: ST_TO_ADDR
// if not units then
71583: LD_VAR 0 2
71587: NOT
71588: IFFALSE 71592
// exit ;
71590: GO 71637
// for i in units do
71592: LD_ADDR_VAR 0 4
71596: PUSH
71597: LD_VAR 0 2
71601: PUSH
71602: FOR_IN
71603: IFFALSE 71635
// if See ( side , i ) then
71605: LD_VAR 0 1
71609: PPUSH
71610: LD_VAR 0 4
71614: PPUSH
71615: CALL_OW 292
71619: IFFALSE 71633
// begin result := true ;
71621: LD_ADDR_VAR 0 3
71625: PUSH
71626: LD_INT 1
71628: ST_TO_ADDR
// exit ;
71629: POP
71630: POP
71631: GO 71637
// end ;
71633: GO 71602
71635: POP
71636: POP
// end ;
71637: LD_VAR 0 3
71641: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71642: LD_INT 0
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
// if not unit or not points then
71648: LD_VAR 0 1
71652: NOT
71653: PUSH
71654: LD_VAR 0 2
71658: NOT
71659: OR
71660: IFFALSE 71664
// exit ;
71662: GO 71754
// dist := 99999 ;
71664: LD_ADDR_VAR 0 5
71668: PUSH
71669: LD_INT 99999
71671: ST_TO_ADDR
// for i in points do
71672: LD_ADDR_VAR 0 4
71676: PUSH
71677: LD_VAR 0 2
71681: PUSH
71682: FOR_IN
71683: IFFALSE 71752
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71685: LD_ADDR_VAR 0 6
71689: PUSH
71690: LD_VAR 0 1
71694: PPUSH
71695: LD_VAR 0 4
71699: PUSH
71700: LD_INT 1
71702: ARRAY
71703: PPUSH
71704: LD_VAR 0 4
71708: PUSH
71709: LD_INT 2
71711: ARRAY
71712: PPUSH
71713: CALL_OW 297
71717: ST_TO_ADDR
// if tmpDist < dist then
71718: LD_VAR 0 6
71722: PUSH
71723: LD_VAR 0 5
71727: LESS
71728: IFFALSE 71750
// begin result := i ;
71730: LD_ADDR_VAR 0 3
71734: PUSH
71735: LD_VAR 0 4
71739: ST_TO_ADDR
// dist := tmpDist ;
71740: LD_ADDR_VAR 0 5
71744: PUSH
71745: LD_VAR 0 6
71749: ST_TO_ADDR
// end ; end ;
71750: GO 71682
71752: POP
71753: POP
// end ;
71754: LD_VAR 0 3
71758: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71759: LD_INT 0
71761: PPUSH
// uc_side := side ;
71762: LD_ADDR_OWVAR 20
71766: PUSH
71767: LD_VAR 0 1
71771: ST_TO_ADDR
// uc_nation := 3 ;
71772: LD_ADDR_OWVAR 21
71776: PUSH
71777: LD_INT 3
71779: ST_TO_ADDR
// vc_chassis := 25 ;
71780: LD_ADDR_OWVAR 37
71784: PUSH
71785: LD_INT 25
71787: ST_TO_ADDR
// vc_engine := engine_siberite ;
71788: LD_ADDR_OWVAR 39
71792: PUSH
71793: LD_INT 3
71795: ST_TO_ADDR
// vc_control := control_computer ;
71796: LD_ADDR_OWVAR 38
71800: PUSH
71801: LD_INT 3
71803: ST_TO_ADDR
// vc_weapon := 59 ;
71804: LD_ADDR_OWVAR 40
71808: PUSH
71809: LD_INT 59
71811: ST_TO_ADDR
// result := CreateVehicle ;
71812: LD_ADDR_VAR 0 5
71816: PUSH
71817: CALL_OW 45
71821: ST_TO_ADDR
// SetDir ( result , d ) ;
71822: LD_VAR 0 5
71826: PPUSH
71827: LD_VAR 0 4
71831: PPUSH
71832: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71836: LD_VAR 0 5
71840: PPUSH
71841: LD_VAR 0 2
71845: PPUSH
71846: LD_VAR 0 3
71850: PPUSH
71851: LD_INT 0
71853: PPUSH
71854: CALL_OW 48
// end ;
71858: LD_VAR 0 5
71862: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71863: LD_INT 0
71865: PPUSH
71866: PPUSH
71867: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71868: LD_ADDR_VAR 0 2
71872: PUSH
71873: LD_INT 0
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: LD_INT 0
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71891: LD_VAR 0 1
71895: NOT
71896: PUSH
71897: LD_VAR 0 1
71901: PPUSH
71902: CALL_OW 264
71906: PUSH
71907: LD_INT 12
71909: PUSH
71910: LD_INT 51
71912: PUSH
71913: LD_INT 32
71915: PUSH
71916: LD_INT 89
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: IN
71925: NOT
71926: OR
71927: IFFALSE 71931
// exit ;
71929: GO 72029
// for i := 1 to 3 do
71931: LD_ADDR_VAR 0 3
71935: PUSH
71936: DOUBLE
71937: LD_INT 1
71939: DEC
71940: ST_TO_ADDR
71941: LD_INT 3
71943: PUSH
71944: FOR_TO
71945: IFFALSE 72027
// begin tmp := GetCargo ( cargo , i ) ;
71947: LD_ADDR_VAR 0 4
71951: PUSH
71952: LD_VAR 0 1
71956: PPUSH
71957: LD_VAR 0 3
71961: PPUSH
71962: CALL_OW 289
71966: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71967: LD_ADDR_VAR 0 2
71971: PUSH
71972: LD_VAR 0 2
71976: PPUSH
71977: LD_VAR 0 3
71981: PPUSH
71982: LD_VAR 0 4
71986: PPUSH
71987: CALL_OW 1
71991: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71992: LD_ADDR_VAR 0 2
71996: PUSH
71997: LD_VAR 0 2
72001: PPUSH
72002: LD_INT 4
72004: PPUSH
72005: LD_VAR 0 2
72009: PUSH
72010: LD_INT 4
72012: ARRAY
72013: PUSH
72014: LD_VAR 0 4
72018: PLUS
72019: PPUSH
72020: CALL_OW 1
72024: ST_TO_ADDR
// end ;
72025: GO 71944
72027: POP
72028: POP
// end ;
72029: LD_VAR 0 2
72033: RET
// export function Length ( array ) ; begin
72034: LD_INT 0
72036: PPUSH
// result := array + 0 ;
72037: LD_ADDR_VAR 0 2
72041: PUSH
72042: LD_VAR 0 1
72046: PUSH
72047: LD_INT 0
72049: PLUS
72050: ST_TO_ADDR
// end ;
72051: LD_VAR 0 2
72055: RET
// export function PrepareArray ( array ) ; begin
72056: LD_INT 0
72058: PPUSH
// result := array diff 0 ;
72059: LD_ADDR_VAR 0 2
72063: PUSH
72064: LD_VAR 0 1
72068: PUSH
72069: LD_INT 0
72071: DIFF
72072: ST_TO_ADDR
// if not result [ 1 ] then
72073: LD_VAR 0 2
72077: PUSH
72078: LD_INT 1
72080: ARRAY
72081: NOT
72082: IFFALSE 72102
// result := Delete ( result , 1 ) ;
72084: LD_ADDR_VAR 0 2
72088: PUSH
72089: LD_VAR 0 2
72093: PPUSH
72094: LD_INT 1
72096: PPUSH
72097: CALL_OW 3
72101: ST_TO_ADDR
// end ; end_of_file
72102: LD_VAR 0 2
72106: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72107: LD_VAR 0 1
72111: PUSH
72112: LD_INT 200
72114: DOUBLE
72115: GREATEREQUAL
72116: IFFALSE 72124
72118: LD_INT 299
72120: DOUBLE
72121: LESSEQUAL
72122: IFTRUE 72126
72124: GO 72158
72126: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72127: LD_VAR 0 1
72131: PPUSH
72132: LD_VAR 0 2
72136: PPUSH
72137: LD_VAR 0 3
72141: PPUSH
72142: LD_VAR 0 4
72146: PPUSH
72147: LD_VAR 0 5
72151: PPUSH
72152: CALL 27009 0 5
72156: GO 72235
72158: LD_INT 300
72160: DOUBLE
72161: GREATEREQUAL
72162: IFFALSE 72170
72164: LD_INT 399
72166: DOUBLE
72167: LESSEQUAL
72168: IFTRUE 72172
72170: GO 72234
72172: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72173: LD_VAR 0 1
72177: PPUSH
72178: LD_VAR 0 2
72182: PPUSH
72183: LD_VAR 0 3
72187: PPUSH
72188: LD_VAR 0 4
72192: PPUSH
72193: LD_VAR 0 5
72197: PPUSH
72198: LD_VAR 0 6
72202: PPUSH
72203: LD_VAR 0 7
72207: PPUSH
72208: LD_VAR 0 8
72212: PPUSH
72213: LD_VAR 0 9
72217: PPUSH
72218: LD_VAR 0 10
72222: PPUSH
72223: LD_VAR 0 11
72227: PPUSH
72228: CALL 23342 0 11
72232: GO 72235
72234: POP
// end ;
72235: PPOPN 11
72237: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72238: LD_VAR 0 1
72242: PPUSH
72243: LD_VAR 0 2
72247: PPUSH
72248: LD_VAR 0 3
72252: PPUSH
72253: LD_VAR 0 4
72257: PPUSH
72258: LD_VAR 0 5
72262: PPUSH
72263: CALL 26745 0 5
// end ; end_of_file
72267: PPOPN 5
72269: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72270: LD_VAR 0 1
72274: PPUSH
72275: LD_VAR 0 2
72279: PPUSH
72280: LD_VAR 0 3
72284: PPUSH
72285: LD_VAR 0 4
72289: PPUSH
72290: LD_VAR 0 5
72294: PPUSH
72295: LD_VAR 0 6
72299: PPUSH
72300: CALL 11035 0 6
// end ;
72304: PPOPN 6
72306: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72307: LD_INT 0
72309: PPUSH
// begin if not units then
72310: LD_VAR 0 1
72314: NOT
72315: IFFALSE 72319
// exit ;
72317: GO 72319
// end ;
72319: PPOPN 7
72321: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72322: CALL 11006 0 0
// end ;
72326: PPOPN 1
72328: END
