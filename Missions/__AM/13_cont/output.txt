// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1220 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1124 0 0
// PrepareDifficulty ;
 248: CALL 8426 0 0
// Action ;
 252: CALL 5290 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 40
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 41
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 42
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 40
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31761 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 40
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31761 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 40
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31761 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 40
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31761 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 40
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31761 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 40
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31761 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 40
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31761 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 40
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31761 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31761 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31761 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31761 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31761 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31761 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31761 0 3
 780: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING Powell
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 31761 0 3
 799: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 800: LD_ADDR_VAR 0 2
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_EXP 2
 814: PUSH
 815: LD_EXP 3
 819: PUSH
 820: LD_EXP 4
 824: PUSH
 825: LD_EXP 5
 829: PUSH
 830: LD_EXP 6
 834: PUSH
 835: LD_EXP 7
 839: PUSH
 840: LD_EXP 8
 844: PUSH
 845: LD_EXP 9
 849: PUSH
 850: LD_EXP 10
 854: PUSH
 855: LD_EXP 11
 859: PUSH
 860: LD_EXP 12
 864: PUSH
 865: LD_EXP 13
 869: PUSH
 870: LD_EXP 14
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 891: LD_ADDR_VAR 0 3
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 33
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PPUSH
 931: CALL_OW 69
 935: ST_TO_ADDR
// for i = tmp downto 1 do
 936: LD_ADDR_VAR 0 4
 940: PUSH
 941: DOUBLE
 942: LD_VAR 0 2
 946: INC
 947: ST_TO_ADDR
 948: LD_INT 1
 950: PUSH
 951: FOR_DOWNTO
 952: IFFALSE 989
// if not tmp [ i ] then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_VAR 0 4
 963: ARRAY
 964: NOT
 965: IFFALSE 987
// tmp := Delete ( tmp , i ) ;
 967: LD_ADDR_VAR 0 2
 971: PUSH
 972: LD_VAR 0 2
 976: PPUSH
 977: LD_VAR 0 4
 981: PPUSH
 982: CALL_OW 3
 986: ST_TO_ADDR
 987: GO 951
 989: POP
 990: POP
// for i = 1 to tmp do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1037
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1009: LD_VAR 0 2
1013: PUSH
1014: LD_VAR 0 4
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 3
1024: PUSH
1025: LD_VAR 0 4
1029: ARRAY
1030: PPUSH
1031: CALL_OW 52
1035: GO 1006
1037: POP
1038: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 25
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 34
1084: PUSH
1085: LD_INT 13
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: PUSH
1101: LD_INT 0
1103: EQUAL
1104: AND
1105: IFFALSE 1119
// SetClass ( JMM , 2 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 336
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareAmericansRandom ; var i ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1136: LD_ADDR_EXP 16
1140: PUSH
1141: LD_STRING 13c_others
1143: PPUSH
1144: CALL_OW 31
1148: ST_TO_ADDR
// for i in others13 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: LD_EXP 16
1158: PUSH
1159: FOR_IN
1160: IFFALSE 1213
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_INT 22
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 58
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 69
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 52
1211: GO 1159
1213: POP
1214: POP
// end ;
1215: LD_VAR 0 1
1219: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1228: LD_ADDR_VAR 0 5
1232: PUSH
1233: LD_STRING 13_VehiclesIn13_1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_INT 100
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 3
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 6
1276: PUSH
1277: LD_INT 100
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 5
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 6
1302: PUSH
1303: LD_INT 100
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 6
1328: PUSH
1329: LD_INT 100
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 100
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 6
1380: PUSH
1381: LD_INT 100
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 5
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 6
1406: PUSH
1407: LD_INT 100
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 5
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 6
1432: PUSH
1433: LD_INT 100
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1459: LD_ADDR_EXP 24
1463: PUSH
1464: LD_STRING 13_ResourcesInCargo13_1
1466: PPUSH
1467: EMPTY
1468: PPUSH
1469: CALL_OW 30
1473: ST_TO_ADDR
// cargoList = [ ] ;
1474: LD_ADDR_VAR 0 6
1478: PUSH
1479: EMPTY
1480: ST_TO_ADDR
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// if vehicles then
1489: LD_VAR 0 5
1493: IFFALSE 1840
// begin for i := 1 to vehicles do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_VAR 0 5
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: ARRAY
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1533: LD_ADDR_OWVAR 37
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: PUSH
1549: LD_INT 2
1551: ARRAY
1552: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1553: LD_ADDR_OWVAR 39
1557: PUSH
1558: LD_VAR 0 5
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_VAR 0 5
1582: PUSH
1583: LD_VAR 0 2
1587: ARRAY
1588: PUSH
1589: LD_INT 4
1591: ARRAY
1592: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1593: LD_ADDR_OWVAR 40
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 5
1611: ARRAY
1612: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1613: LD_ADDR_OWVAR 41
1617: PUSH
1618: LD_INT 40
1620: ST_TO_ADDR
// veh = CreateVehicle ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: CALL_OW 45
1630: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1631: LD_VAR 0 4
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// end ;
1658: GO 1510
1660: POP
1661: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1662: LD_ADDR_VAR 0 6
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: ST_TO_ADDR
// if cargoList then
1707: LD_VAR 0 6
1711: IFFALSE 1840
// for i = 1 to cargoList do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_VAR 0 6
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1838
// begin if resources then
1731: LD_EXP 24
1735: IFFALSE 1836
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1737: LD_VAR 0 6
1741: PUSH
1742: LD_VAR 0 2
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_EXP 24
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: PPUSH
1766: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_EXP 24
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_EXP 24
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 3
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// end ; end ;
1836: GO 1728
1838: POP
1839: POP
// end ; end ;
1840: LD_VAR 0 1
1844: RET
// export function PowellSupport ; var i , veh , un ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
1850: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 4
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_OWVAR 67
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2150
// begin uc_nation := 1 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// uc_side := 1 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// vc_engine := engine_siberite ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control := control_manual ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: LD_INT 6
1930: PUSH
1931: LD_INT 9
1933: PUSH
1934: LD_INT 5
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_OWVAR 67
1951: PUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: CALL_OW 12
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1965: LD_OWVAR 40
1969: PUSH
1970: LD_INT 6
1972: EQUAL
1973: IFFALSE 2002
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1975: LD_ADDR_OWVAR 37
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: ST_TO_ADDR
2000: GO 2037
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: ST_TO_ADDR
// veh = CreateVehicle ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: CALL_OW 45
2046: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetDir ( veh , 1 ) ;
2062: LD_VAR 0 3
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 233
// hc_gallery :=  ;
2074: LD_ADDR_OWVAR 33
2078: PUSH
2079: LD_STRING 
2081: ST_TO_ADDR
// hc_name :=  ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 8
2101: PUSH
2102: LD_INT 8
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_OWVAR 67
2118: ARRAY
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2134: LD_VAR 0 4
2138: PPUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1885
2150: POP
2151: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 2
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_OWVAR 67
2184: ARRAY
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2262
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 9
2197: PUSH
2198: LD_INT 8
2200: PUSH
2201: LD_INT 8
2203: PUSH
2204: LD_INT 7
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_OWVAR 67
2217: ARRAY
2218: PPUSH
2219: CALL_OW 380
// un := CreateHuman ;
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: CALL_OW 44
2232: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2233: LD_VAR 0 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2245: LD_VAR 0 4
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: GO 2186
2262: POP
2263: POP
// end ; end_of_file
2264: LD_VAR 0 1
2268: RET
// export function PrepareBurlak ; begin
2269: LD_INT 0
2271: PPUSH
// uc_side := 7 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 7
2279: ST_TO_ADDR
// uc_nation := 3 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// vc_engine := engine_siberite ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 3
2295: ST_TO_ADDR
// vc_control := control_manual ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: LD_INT 45
2314: PUSH
2315: LD_INT 46
2317: PUSH
2318: LD_INT 46
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_OWVAR 67
2331: ARRAY
2332: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2333: LD_ADDR_OWVAR 37
2337: PUSH
2338: LD_INT 24
2340: ST_TO_ADDR
// Masha := CreateVehicle ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: CALL_OW 45
2350: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2351: LD_EXP 18
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2363: LD_EXP 18
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2378: LD_EXP 18
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2390: LD_ADDR_EXP 17
2394: PUSH
2395: LD_STRING Burlak
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_STRING 
2403: PPUSH
2404: CALL 31761 0 3
2408: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_EXP 18
2418: PPUSH
2419: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2423: LD_EXP 18
2427: PPUSH
2428: LD_INT 107
2430: PPUSH
2431: LD_INT 118
2433: PPUSH
2434: CALL_OW 114
// spawnBurlak := 1 ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 1
2450: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// uc_side := 7 ;
2458: LD_ADDR_OWVAR 20
2462: PUSH
2463: LD_INT 7
2465: ST_TO_ADDR
// uc_nation := 3 ;
2466: LD_ADDR_OWVAR 21
2470: PUSH
2471: LD_INT 3
2473: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2474: LD_ADDR_EXP 19
2478: PUSH
2479: LD_STRING Gnyevko
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_STRING 
2487: PPUSH
2488: CALL 31761 0 3
2492: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2493: LD_ADDR_EXP 20
2497: PUSH
2498: LD_STRING Titov
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 31761 0 3
2511: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2512: LD_ADDR_EXP 21
2516: PUSH
2517: LD_STRING Xavier2
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_STRING 
2525: PPUSH
2526: CALL 31761 0 3
2530: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2531: LD_ADDR_EXP 22
2535: PUSH
2536: LD_STRING Belkov
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: LD_STRING 
2544: PPUSH
2545: CALL 31761 0 3
2549: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2550: LD_ADDR_EXP 23
2554: PUSH
2555: LD_STRING Lipshchin
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: LD_STRING 
2563: PPUSH
2564: CALL 31761 0 3
2568: ST_TO_ADDR
// for i = 1 to 5 do
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: DOUBLE
2575: LD_INT 1
2577: DEC
2578: ST_TO_ADDR
2579: LD_INT 5
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2708
// begin vc_engine := engine_siberite ;
2585: LD_ADDR_OWVAR 39
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// vc_control := control_manual ;
2593: LD_ADDR_OWVAR 38
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2601: LD_ADDR_OWVAR 40
2605: PUSH
2606: LD_INT 43
2608: PUSH
2609: LD_INT 45
2611: PUSH
2612: LD_INT 45
2614: PUSH
2615: LD_INT 44
2617: PUSH
2618: LD_INT 49
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2640: LD_ADDR_OWVAR 37
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 24
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: ST_TO_ADDR
// veh = CreateVehicle ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// end ;
2706: GO 2582
2708: POP
2709: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 7
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 58
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2787: LD_EXP 21
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2805: LD_EXP 22
2809: PPUSH
2810: LD_VAR 0 4
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2823: LD_EXP 23
2827: PPUSH
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 5
2835: ARRAY
2836: PPUSH
2837: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2841: LD_EXP 19
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2853: LD_EXP 20
2857: PUSH
2858: LD_EXP 23
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: LD_INT 9
2869: PPUSH
2870: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2894: LD_VAR 0 4
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 118
2904: PPUSH
2905: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2909: LD_INT 35
2911: PPUSH
2912: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_INT 34
2923: PUSH
2924: LD_INT 49
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 72
2935: PPUSH
2936: LD_EXP 18
2940: PPUSH
2941: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 34
2955: PUSH
2956: LD_INT 49
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PPUSH
2972: LD_INT 107
2974: PPUSH
2975: LD_INT 118
2977: PPUSH
2978: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_EXP 20
2991: PUSH
2992: LD_EXP 23
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: LD_INT 50
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 54
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 72
3028: ST_TO_ADDR
// if bazooka then
3029: LD_VAR 0 5
3033: IFFALSE 3075
// begin for i in bazooka do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3073
// if See ( 1 , i ) then
3048: LD_INT 1
3050: PPUSH
3051: LD_VAR 0 2
3055: PPUSH
3056: CALL_OW 292
3060: IFFALSE 3071
// ComSpaceTimeShoot ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL 32708 0 1
3071: GO 3045
3073: POP
3074: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 49
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: PUSH
3095: LD_INT 0
3097: EQUAL
3098: PUSH
3099: LD_EXP 18
3103: PPUSH
3104: CALL_OW 303
3108: OR
3109: IFFALSE 2909
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: LD_EXP 17
3142: DIFF
3143: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3144: LD_VAR 0 4
3148: PPUSH
3149: LD_INT 107
3151: PPUSH
3152: LD_INT 118
3154: PPUSH
3155: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_EXP 20
3168: PUSH
3169: LD_EXP 23
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: LD_INT 50
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 54
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: ST_TO_ADDR
// if bazooka then
3206: LD_VAR 0 5
3210: IFFALSE 3252
// begin for i in bazooka do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: LD_VAR 0 5
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3250
// if See ( 1 , i ) then
3225: LD_INT 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 292
3237: IFFALSE 3248
// ComSpaceTimeShoot ( i ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: CALL 32708 0 1
3248: GO 3222
3250: POP
3251: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3252: LD_EXP 17
3256: PPUSH
3257: CALL_OW 302
3261: PUSH
3262: LD_EXP 17
3266: PPUSH
3267: CALL_OW 310
3271: NOT
3272: AND
3273: IFFALSE 3290
// ComMoveXY ( Burlak , 107 , 118 ) ;
3275: LD_EXP 17
3279: PPUSH
3280: LD_INT 107
3282: PPUSH
3283: LD_INT 118
3285: PPUSH
3286: CALL_OW 111
// until not tmp ;
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3111
// end ;
3297: LD_VAR 0 1
3301: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
// result := [ ] ;
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_INT 8
3340: PUSH
3341: LD_INT 9
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_VAR 0 6
3352: ARRAY
3353: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: DOUBLE
3360: LD_INT 1
3362: DEC
3363: ST_TO_ADDR
3364: LD_INT 6
3366: PUSH
3367: LD_INT 8
3369: PUSH
3370: LD_INT 10
3372: PUSH
3373: LD_INT 11
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3627
// begin uc_side := 3 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 3
3398: ST_TO_ADDR
// uc_nation := 3 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 3
3406: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3407: LD_INT 24
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 1
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: CALL_OW 12
3433: ARRAY
3434: PPUSH
3435: LD_INT 46
3437: PUSH
3438: LD_INT 46
3440: PUSH
3441: LD_INT 45
3443: PUSH
3444: LD_INT 47
3446: PUSH
3447: LD_INT 49
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 5
3462: PPUSH
3463: CALL_OW 12
3467: ARRAY
3468: PPUSH
3469: LD_INT 100
3471: PPUSH
3472: CALL 36601 0 5
// veh := CreateVehicle ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: CALL_OW 45
3485: ST_TO_ADDR
// result := Join ( result , veh ) ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_VAR 0 4
3500: PPUSH
3501: CALL 69452 0 2
3505: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 5
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 6
3525: ARRAY
3526: PPUSH
3527: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// if vc_control = control_manual then
3548: LD_OWVAR 38
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3603
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 7
3563: PUSH
3564: LD_INT 8
3566: PUSH
3567: LD_INT 9
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_OWVAR 67
3583: ARRAY
3584: PPUSH
3585: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3589: CALL_OW 44
3593: PPUSH
3594: LD_VAR 0 4
3598: PPUSH
3599: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3603: LD_INT 18
3605: PPUSH
3606: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_INT 100
3617: PPUSH
3618: LD_INT 55
3620: PPUSH
3621: CALL_OW 114
// end ;
3625: GO 3388
3627: POP
3628: POP
// for i in result do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3656
// SetTag ( i , 10 ) ;
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_INT 10
3649: PPUSH
3650: CALL_OW 109
3654: GO 3639
3656: POP
3657: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3658: LD_EXP 44
3662: PPUSH
3663: CALL_OW 427
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// rnd := 0 ;
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// uc_side := 8 ;
3685: LD_ADDR_OWVAR 20
3689: PUSH
3690: LD_INT 8
3692: ST_TO_ADDR
// uc_nation := 2 ;
3693: LD_ADDR_OWVAR 21
3697: PUSH
3698: LD_INT 2
3700: ST_TO_ADDR
// hc_name :=  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// hc_gallery :=  ;
3709: LD_ADDR_OWVAR 33
3713: PUSH
3714: LD_STRING 
3716: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3717: LD_ADDR_OWVAR 29
3721: PUSH
3722: LD_INT 10
3724: PUSH
3725: LD_INT 11
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_OWVAR 67
3768: ARRAY
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 7
3782: PUSH
3783: LD_INT 8
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: PPUSH
3804: CALL_OW 380
// un := CreateHuman ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 9
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// SetTag ( un , 1 ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_EXP 31
3876: PPUSH
3877: CALL_OW 12
3881: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3882: LD_EXP 45
3886: PPUSH
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_EXP 31
3896: PUSH
3897: LD_VAR 0 3
3901: ARRAY
3902: PUSH
3903: LD_INT 1
3905: ARRAY
3906: PPUSH
3907: LD_EXP 31
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 595
// end ;
3935: LD_VAR 0 1
3939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3940: LD_INT 22
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: LD_INT 61
3955: PUSH
3956: EMPTY
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 50
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: LD_INT 33
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: IFFALSE 4076
3991: GO 3993
3993: DISABLE
3994: LD_INT 0
3996: PPUSH
// begin enable ;
3997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 22
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 61
4018: PUSH
4019: EMPTY
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: LD_INT 33
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4074
// begin wait ( 0 0$0.3 ) ;
4056: LD_INT 10
4058: PPUSH
4059: CALL_OW 67
// Connect ( i ) ;
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL 40069 0 1
// end ;
4072: GO 4053
4074: POP
4075: POP
// end ;
4076: PPOPN 1
4078: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// result := [ ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4097: LD_ADDR_EXP 33
4101: PUSH
4102: LD_EXP 33
4106: PUSH
4107: LD_INT 1
4109: PLUS
4110: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4111: LD_INT 22
4113: PUSH
4114: LD_INT 8
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 58
4126: PUSH
4127: EMPTY
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 34
4136: PUSH
4137: LD_INT 31
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_INT 2
4156: LESS
4157: IFFALSE 4401
// begin uc_side := 8 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 8
4166: ST_TO_ADDR
// uc_nation := 2 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 2
4174: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4175: LD_INT 14
4177: PPUSH
4178: LD_INT 3
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 31
4186: PPUSH
4187: LD_INT 100
4189: PPUSH
4190: CALL 36601 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 22
4202: PUSH
4203: LD_INT 8
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: LD_INT 58
4215: PUSH
4216: EMPTY
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 34
4225: PUSH
4226: LD_INT 31
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: PLUS
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 2
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4399
// begin veh := CreateVehicle ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 181
4283: PUSH
4284: LD_INT 105
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 137
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_INT 2
4312: MOD
4313: PUSH
4314: LD_INT 1
4316: PLUS
4317: ARRAY
4318: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: LD_INT 12
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 7
4357: PUSH
4358: LD_INT 9
4360: PUSH
4361: LD_INT 10
4363: PUSH
4364: LD_INT 10
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4383: CALL_OW 44
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 52
// end ;
4397: GO 4251
4399: POP
4400: POP
// end ; dir := rand ( 1 , 2 ) ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: LD_INT 1
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 12
4416: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_VAR 0 9
4436: ARRAY
4437: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_INT 6
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PUSH
4467: LD_EXP 33
4471: PLUS
4472: ST_TO_ADDR
// if counter > 20 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 20
4480: GREATER
4481: IFFALSE 4491
// counter := 20 ;
4483: LD_ADDR_VAR 0 7
4487: PUSH
4488: LD_INT 20
4490: ST_TO_ADDR
// for i := 1 to counter do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 7
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4840
// begin uc_side := 8 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 8
4516: ST_TO_ADDR
// uc_nation := 2 ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 2
4524: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 12
4545: ARRAY
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 12
4574: ARRAY
4575: PPUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 92
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: PPUSH
4614: LD_INT 100
4616: PPUSH
4617: CALL 36601 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4621: LD_OWVAR 40
4625: PUSH
4626: LD_INT 29
4628: EQUAL
4629: IFFALSE 4639
// vc_control := control_remote ;
4631: LD_ADDR_OWVAR 38
4635: PUSH
4636: LD_INT 2
4638: ST_TO_ADDR
// veh := CreateVehicle ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: CALL_OW 45
4648: ST_TO_ADDR
// result := Join ( result , veh ) ;
4649: LD_ADDR_VAR 0 1
4653: PUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL 69452 0 2
4668: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_VAR 0 9
4688: ARRAY
4689: PPUSH
4690: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 6
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if vc_control = control_manual then
4711: LD_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4766
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 7
4726: PUSH
4727: LD_INT 8
4729: PUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_OWVAR 67
4746: ARRAY
4747: PPUSH
4748: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4752: CALL_OW 44
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4766: LD_INT 10
4768: PPUSH
4769: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 263
4782: PUSH
4783: LD_INT 2
4785: EQUAL
4786: PUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 312
4796: NOT
4797: AND
4798: IFFALSE 4816
// begin Connect ( veh ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL 40069 0 1
// wait ( 0 0$0.3 ) ;
4809: LD_INT 10
4811: PPUSH
4812: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4831: LD_INT 18
4833: PPUSH
4834: CALL_OW 67
// end ;
4838: GO 4506
4840: POP
4841: POP
// if arabianAttacksCounter = 1 then
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4856
// DestroySibDeposit ;
4852: CALL 3672 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4856: LD_EXP 33
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: MOD
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 5247
// begin tmp := rand ( 0 , 2 ) ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 2
4901: PPUSH
4902: CALL_OW 12
4906: ST_TO_ADDR
// if not tmp then
4907: LD_VAR 0 8
4911: NOT
4912: IFFALSE 5073
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4914: LD_ADDR_VAR 0 2
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_INT 3
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5069
// begin uc_side := 8 ;
4951: LD_ADDR_OWVAR 20
4955: PUSH
4956: LD_INT 8
4958: ST_TO_ADDR
// uc_nation := 2 ;
4959: LD_ADDR_OWVAR 21
4963: PUSH
4964: LD_INT 2
4966: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 7
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: LD_INT 10
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PPUSH
4997: CALL_OW 380
// un := CreateHuman ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// result := Join ( result , un ) ;
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL 69452 0 2
5030: ST_TO_ADDR
// if Prob ( 60 ) then
5031: LD_INT 60
5033: PPUSH
5034: CALL_OW 13
5038: IFFALSE 5052
// SetClass ( un , class_mortar ) ;
5040: LD_VAR 0 5
5044: PPUSH
5045: LD_INT 8
5047: PPUSH
5048: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5052: LD_VAR 0 5
5056: PPUSH
5057: LD_INT 16
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4948
5069: POP
5070: POP
// end else
5071: GO 5237
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 2
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5235
// begin uc_side := 8 ;
5110: LD_ADDR_OWVAR 20
5114: PUSH
5115: LD_INT 8
5117: ST_TO_ADDR
// uc_nation := 0 ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5126: LD_ADDR_OWVAR 28
5130: PUSH
5131: LD_INT 17
5133: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5134: LD_ADDR_OWVAR 31
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 0
5144: PUSH
5145: LD_INT 0
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5157: LD_ADDR_OWVAR 29
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: LD_INT 10
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// hc_gallery :=  ;
5172: LD_ADDR_OWVAR 33
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_name :=  ;
5180: LD_ADDR_OWVAR 26
5184: PUSH
5185: LD_STRING 
5187: ST_TO_ADDR
// un := CreateHuman ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: CALL_OW 44
5197: ST_TO_ADDR
// result := Join ( result , un ) ;
5198: LD_ADDR_VAR 0 1
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 5
5212: PPUSH
5213: CALL 69452 0 2
5217: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5218: LD_VAR 0 5
5222: PPUSH
5223: LD_INT 16
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5107
5235: POP
5236: POP
// end ; if sibDeposits then
5237: LD_EXP 31
5241: IFFALSE 5247
// DestroySibDeposit ;
5243: CALL 3672 0 0
// end ; for i in result do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_VAR 0 1
5256: PUSH
5257: FOR_IN
5258: IFFALSE 5274
// SetTag ( i , 10 ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_INT 10
5267: PPUSH
5268: CALL_OW 109
5272: GO 5257
5274: POP
5275: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5276: LD_EXP 43
5280: PPUSH
5281: CALL_OW 427
// end ; end_of_file
5285: LD_VAR 0 1
5289: RET
// export function Action ; var tmp ; begin
5290: LD_INT 0
5292: PPUSH
5293: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: ST_TO_ADDR
// InGameOn ;
5328: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5341: LD_INT 22
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_INT 69
5372: PPUSH
5373: LD_INT 94
5375: PPUSH
5376: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2-JMM-1
5387: PPUSH
5388: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D2-Huck-1
5408: PPUSH
5409: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D2-JMM-2
5429: PPUSH
5430: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 87
// InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5447: LD_STRING M1
5449: PPUSH
5450: CALL_OW 337
// SaveForQuickRestart ;
5454: CALL_OW 22
// wait ( 10 10$00 ) ;
5458: LD_INT 21000
5460: PPUSH
5461: CALL_OW 67
// DialogueOn ;
5465: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING D3-Pow-1
5476: PPUSH
5477: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D3-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5493: LD_EXP 15
5497: PPUSH
5498: LD_STRING D3-Pow-2
5500: PPUSH
5501: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-2
5512: PPUSH
5513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5517: LD_EXP 15
5521: PPUSH
5522: LD_STRING D3-Pow-3
5524: PPUSH
5525: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_STRING D3-JMM-3
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5541: LD_EXP 15
5545: PPUSH
5546: LD_STRING D3-Pow-4
5548: PPUSH
5549: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5553: LD_EXP 1
5557: PPUSH
5558: LD_STRING D3-JMM-4
5560: PPUSH
5561: CALL_OW 88
// DialogueOff ;
5565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5569: LD_STRING M2
5571: PPUSH
5572: CALL_OW 337
// wait ( 2 2$30 ) ;
5576: LD_INT 5250
5578: PPUSH
5579: CALL_OW 67
// PrepareBurlak ;
5583: CALL 2269 0 0
// BurlakArmy ;
5587: CALL 2451 0 0
// end ;
5591: LD_VAR 0 1
5595: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5596: LD_INT 1
5598: PPUSH
5599: LD_EXP 18
5603: PPUSH
5604: CALL_OW 292
5608: IFFALSE 5767
5610: GO 5612
5612: DISABLE
// begin DialogueOn ;
5613: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5617: LD_EXP 18
5621: PPUSH
5622: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5626: LD_INT 22
5628: PUSH
5629: LD_INT 1
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: LD_INT 26
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 25
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 25
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_STRING D5-Sol1-1
5719: PPUSH
5720: LD_STRING D5-FSol1-1
5722: PPUSH
5723: CALL 8225 0 3
// Say ( JMM , D5-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D5-JMM-1
5734: PPUSH
5735: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_STRING DAmer-Bur-1
5746: PPUSH
5747: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING DAmer-JMM-1
5758: PPUSH
5759: CALL_OW 88
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 7
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 70
5785: IFFALSE 6184
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
// begin enable ;
5793: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 70
5816: PUSH
5817: FOR_IN
5818: IFFALSE 6182
// begin if i = Burlak or i = Masha then
5820: LD_VAR 0 1
5824: PUSH
5825: LD_EXP 17
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_EXP 18
5840: EQUAL
5841: OR
5842: IFFALSE 5989
// begin RemoveUnit ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 64
// DialogueOn ;
5853: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D5a-JMM-1
5864: PPUSH
5865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: CALL_OW 69
5959: PPUSH
5960: LD_STRING D5a-Sol1-1
5962: PPUSH
5963: LD_STRING D5-FSol1-1
5965: PPUSH
5966: CALL 8225 0 3
// DialogueOff ;
5970: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5974: LD_STRING M2b
5976: PPUSH
5977: CALL_OW 337
// spawnBurlak = 0 ;
5981: LD_ADDR_EXP 27
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 247
5998: PUSH
5999: LD_INT 2
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 263
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6145
// begin case IsDrivenBy ( i ) of Gnyevko :
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 311
6028: PUSH
6029: LD_EXP 19
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6052
6039: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6040: LD_INT 1
6042: PPUSH
6043: LD_STRING 13_Gnyevko_1
6045: PPUSH
6046: CALL_OW 39
6050: GO 6145
6052: LD_EXP 20
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6075
6062: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6063: LD_INT 1
6065: PPUSH
6066: LD_STRING 13_Titov_1
6068: PPUSH
6069: CALL_OW 39
6073: GO 6145
6075: LD_EXP 21
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6098
6085: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6086: LD_INT 1
6088: PPUSH
6089: LD_STRING 13_Xavier_1
6091: PPUSH
6092: CALL_OW 39
6096: GO 6145
6098: LD_EXP 22
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6121
6108: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6109: LD_INT 1
6111: PPUSH
6112: LD_STRING 13_Belkov_1
6114: PPUSH
6115: CALL_OW 39
6119: GO 6145
6121: LD_EXP 23
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6144
6131: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6132: LD_INT 1
6134: PPUSH
6135: LD_STRING 13_Lipshchin_1
6137: PPUSH
6138: CALL_OW 39
6142: GO 6145
6144: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 49
6157: EQUAL
6158: IFFALSE 6171
// DestroyUnit ( i ) else
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 65
6169: GO 6180
// RemoveUnit ( i ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 64
// end ;
6180: GO 5817
6182: POP
6183: POP
// end ;
6184: PPOPN 1
6186: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 500
6209: LESS
6210: AND
6211: PUSH
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 255
6221: PUSH
6222: LD_INT 7
6224: EQUAL
6225: AND
6226: IFFALSE 6246
6228: GO 6230
6230: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6231: LD_EXP 17
6235: PPUSH
6236: LD_INT 107
6238: PPUSH
6239: LD_INT 118
6241: PPUSH
6242: CALL_OW 111
6246: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6247: LD_EXP 17
6251: PPUSH
6252: CALL_OW 301
6256: PUSH
6257: LD_EXP 27
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: IFFALSE 6399
6268: GO 6270
6270: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6271: LD_EXP 1
6275: PPUSH
6276: LD_STRING D5b-JMM-1
6278: PPUSH
6279: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 25
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 25
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: PPUSH
6374: LD_STRING D5b-Sol1-1
6376: PPUSH
6377: LD_STRING 
6379: PPUSH
6380: CALL 8225 0 3
// ChangeMissionObjectives ( M2a ) ;
6384: LD_STRING M2a
6386: PPUSH
6387: CALL_OW 337
// burlakStatus := 1 ;
6391: LD_ADDR_EXP 28
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// end ;
6399: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6400: LD_EXP 2
6404: PPUSH
6405: CALL_OW 301
6409: IFFALSE 6546
6411: GO 6413
6413: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D6-JMM-1
6421: PPUSH
6422: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6426: LD_INT 22
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 2
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 25
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: LD_STRING D6-Sol1-1
6519: PPUSH
6520: LD_STRING 
6522: PPUSH
6523: CALL 8225 0 3
// Say ( JMM , D6-JMM-2 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D6-JMM-2
6534: PPUSH
6535: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6539: LD_STRING M1a
6541: PPUSH
6542: CALL_OW 337
// end ;
6546: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6547: LD_INT 25
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 321
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6578
6563: GO 6565
6565: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6566: LD_EXP 2
6570: PPUSH
6571: LD_STRING D6-Huck-2
6573: PPUSH
6574: CALL_OW 88
6578: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6579: LD_INT 22
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 34
6594: PUSH
6595: LD_INT 8
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 35
6604: PUSH
6605: LD_INT 8
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PUSH
6626: LD_INT 5
6628: PPUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 57
6664: PUSH
6665: EMPTY
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 70
6682: AND
6683: PUSH
6684: LD_INT 5
6686: PPUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 21
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 57
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 70
6740: AND
6741: IFFALSE 6783
6743: GO 6745
6745: DISABLE
// begin DialogueOn ;
6746: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D7-JMM-1
6757: PPUSH
6758: CALL_OW 88
// DialogueOff ;
6762: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6766: LD_STRING M4
6768: PPUSH
6769: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 424
// end ;
6783: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6784: LD_INT 6
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 70
6815: PUSH
6816: LD_EXP 37
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 29
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: AND
6835: IFFALSE 6900
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6841: LD_ADDR_EXP 26
6845: PUSH
6846: LD_INT 6
6848: PPUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6882: LD_INT 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// radationResearched := 1 ;
6892: LD_ADDR_EXP 29
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 301
6910: PUSH
6911: LD_EXP 29
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: IFFALSE 6956
6922: GO 6924
6924: DISABLE
// begin enable ;
6925: ENABLE
// radationResearched = 0 ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6934: LD_INT 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6944: LD_EXP 1
6948: PPUSH
6949: LD_STRING D9a-JMM-1
6951: PPUSH
6952: CALL_OW 88
// end ; end_of_file
6956: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 8
6964: EQUAL
6965: PUSH
6966: LD_EXP 35
6970: PUSH
6971: LD_INT 0
6973: EQUAL
6974: AND
6975: IFFALSE 7028
// begin eventVar1 := 1 ;
6977: LD_ADDR_EXP 35
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// DialogueOn ;
6985: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D6a-JMM-1
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7001: LD_EXP 15
7005: PPUSH
7006: LD_STRING D6a-Pow-1
7008: PPUSH
7009: CALL_OW 94
// DialogueOff ;
7013: CALL_OW 7
// wait ( 3 3$0 ) ;
7017: LD_INT 6300
7019: PPUSH
7020: CALL_OW 67
// PowellSupport ;
7024: CALL 1845 0 0
// end ; end ;
7028: PPOPN 5
7030: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL 26867 0 1
// if un = JMM then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_EXP 1
7049: EQUAL
7050: IFFALSE 7059
// YouLost ( JMM ) ;
7052: LD_STRING JMM
7054: PPUSH
7055: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7059: LD_VAR 0 1
7063: PPUSH
7064: CALL_OW 264
7068: PUSH
7069: LD_INT 31
7071: EQUAL
7072: IFFALSE 7088
// achivCounter := achivCounter + 1 ;
7074: LD_ADDR_EXP 41
7078: PUSH
7079: LD_EXP 41
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 255
7097: PUSH
7098: LD_INT 1
7100: NONEQUAL
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 247
7111: PUSH
7112: LD_INT 2
7114: EQUAL
7115: AND
7116: IFFALSE 7132
// destroyCounter := destroyCounter + 1 ;
7118: LD_ADDR_EXP 42
7122: PUSH
7123: LD_EXP 42
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ST_TO_ADDR
// end ;
7132: PPOPN 1
7134: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7135: LD_VAR 0 2
7139: PUSH
7140: LD_EXP 18
7144: EQUAL
7145: IFFALSE 7154
// SetAchievement ( ACH_MASHA ) ;
7147: LD_STRING ACH_MASHA
7149: PPUSH
7150: CALL_OW 543
// end ;
7154: PPOPN 4
7156: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 26987 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 264
7180: PUSH
7181: LD_INT 8
7183: EQUAL
7184: PUSH
7185: LD_EXP 36
7189: PUSH
7190: LD_INT 0
7192: EQUAL
7193: AND
7194: IFFALSE 7263
// begin eventVar2 := 1 ;
7196: LD_ADDR_EXP 36
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// DialogueOn ;
7204: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D6b-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7220: LD_EXP 15
7224: PPUSH
7225: LD_STRING D6b-Pow-1
7227: PPUSH
7228: CALL_OW 94
// DialogueOff ;
7232: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7236: LD_INT 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7256: LD_STRING M3
7258: PPUSH
7259: CALL_OW 337
// end ; end ;
7263: PPOPN 2
7265: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 309
7283: PUSH
7284: LD_EXP 37
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: AND
7293: IFFALSE 7518
// begin eventVar3 := 1 ;
7295: LD_ADDR_EXP 37
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7303: LD_INT 175
7305: PPUSH
7306: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7310: LD_INT 7
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: IFFALSE 7371
// begin radarOnSpot := 1 ;
7354: LD_ADDR_EXP 30
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7362: LD_STRING M3a
7364: PPUSH
7365: CALL_OW 337
// end else
7369: GO 7378
// ChangeMissionObjectives ( M3b ) ;
7371: LD_STRING M3b
7373: PPUSH
7374: CALL_OW 337
// DialogueOn ;
7378: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-1
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-1
7401: PPUSH
7402: CALL_OW 88
// if IsOk ( Stevens ) then
7406: LD_EXP 2
7410: PPUSH
7411: CALL_OW 302
7415: IFFALSE 7477
// begin Say ( Stevens , D8-Huck-2 ) ;
7417: LD_EXP 2
7421: PPUSH
7422: LD_STRING D8-Huck-2
7424: PPUSH
7425: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D8-JMM-2
7436: PPUSH
7437: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7441: LD_EXP 2
7445: PPUSH
7446: LD_STRING D8-Huck-3
7448: PPUSH
7449: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D8-JMM-3
7460: PPUSH
7461: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7465: LD_EXP 2
7469: PPUSH
7470: LD_STRING D8-Huck-4
7472: PPUSH
7473: CALL_OW 88
// end ; DialogueOff ;
7477: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 0
7496: PPUSH
7497: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7511: LD_STRING M5
7513: PPUSH
7514: CALL_OW 337
// end ; end ;
7518: PPOPN 3
7520: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7521: LD_EXP 26
7525: PPUSH
7526: CALL_OW 302
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 26
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_EXP 38
7547: PUSH
7548: LD_INT 0
7550: EQUAL
7551: AND
7552: PUSH
7553: LD_EXP 37
7557: PUSH
7558: LD_INT 1
7560: EQUAL
7561: AND
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 268
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: OR
7597: AND
7598: IFFALSE 7608
// eventVar4 := 1 ;
7600: LD_ADDR_EXP 38
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// end ;
7608: PPOPN 2
7610: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 248
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7874
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_EXP 32
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: DOUBLE
7650: LD_EXP 31
7654: INC
7655: ST_TO_ADDR
7656: LD_INT 1
7658: PUSH
7659: FOR_DOWNTO
7660: IFFALSE 7730
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7662: LD_EXP 31
7666: PUSH
7667: LD_VAR 0 4
7671: ARRAY
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PUSH
7677: LD_VAR 0 2
7681: EQUAL
7682: PUSH
7683: LD_EXP 31
7687: PUSH
7688: LD_VAR 0 4
7692: ARRAY
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PUSH
7698: LD_VAR 0 3
7702: EQUAL
7703: AND
7704: IFFALSE 7728
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7706: LD_ADDR_EXP 31
7710: PUSH
7711: LD_EXP 31
7715: PPUSH
7716: LD_VAR 0 4
7720: PPUSH
7721: CALL_OW 3
7725: ST_TO_ADDR
// break ;
7726: GO 7730
// end ;
7728: GO 7659
7730: POP
7731: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7732: LD_EXP 39
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 3
7750: PPUSH
7751: CALL_OW 428
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: IN
7771: AND
7772: IFFALSE 7874
// begin eventVar5 := 1 ;
7774: LD_ADDR_EXP 39
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// DialogueOn ;
7782: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7786: LD_EXP 2
7790: PPUSH
7791: LD_STRING D4-Sci1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D4-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7810: LD_EXP 2
7814: PPUSH
7815: LD_STRING D4-Sci1-2
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D4-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_STRING D4-Sci1-3
7841: PPUSH
7842: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7846: LD_EXP 1
7850: PPUSH
7851: LD_STRING D4-JMM-3
7853: PPUSH
7854: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7858: LD_EXP 1
7862: PPUSH
7863: LD_STRING D4-JMM-3a
7865: PPUSH
7866: CALL_OW 88
// DialogueOff ;
7870: CALL_OW 7
// end ; end ; end ;
7874: PPOPN 5
7876: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: AND
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: AND
7968: IFFALSE 7982
// SetBName ( building , omega ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING omega
7977: PPUSH
7978: CALL_OW 500
// end ;
7982: PPOPN 2
7984: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL 26971 0 1
// end ;
7994: PPOPN 1
7996: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 43
8006: EQUAL
8007: IFFALSE 8013
// ArabianAttack ;
8009: CALL 10142 0 0
// if event = eventRussianAttack then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 44
8022: EQUAL
8023: IFFALSE 8029
// RussianAttack ;
8025: CALL 10507 0 0
// end ;
8029: PPOPN 1
8031: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8032: LD_VAR 0 1
8036: PUSH
8037: LD_EXP 45
8041: EQUAL
8042: IFFALSE 8136
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 302
8053: PUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 488
8068: AND
8069: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// if not HasTask ( p1 ) then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 314
8087: NOT
8088: IFFALSE 8124
// begin ComContaminate ( p1 , p2 , p3 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 42
8116: PPUSH
8117: LD_INT 3
8119: PPUSH
8120: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8071
// end ; end ; end ;
8136: PPOPN 7
8138: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8222
// begin ComMoveXY ( driver , 41 , 2 ) ;
8161: LD_VAR 0 1
8165: PPUSH
8166: LD_INT 41
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8176: LD_INT 35
8178: PPUSH
8179: CALL_OW 67
// if IsDead ( driver ) then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 301
8192: IFFALSE 8196
// exit ;
8194: GO 8222
// until IsAt ( driver , 41 , 2 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 41
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 307
8211: IFFALSE 8176
// RemoveUnit ( driver ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 64
// end ; end ; end_of_file
8222: PPOPN 4
8224: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_EXP 3
8254: PUSH
8255: LD_EXP 4
8259: PUSH
8260: LD_EXP 5
8264: PUSH
8265: LD_EXP 6
8269: PUSH
8270: LD_EXP 7
8274: PUSH
8275: LD_EXP 8
8279: PUSH
8280: LD_EXP 9
8284: PUSH
8285: LD_EXP 10
8289: PUSH
8290: LD_EXP 11
8294: PUSH
8295: LD_EXP 12
8299: PUSH
8300: LD_EXP 13
8304: PUSH
8305: LD_EXP 14
8309: PUSH
8310: LD_EXP 15
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// if not characters then
8333: LD_VAR 0 1
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8421
// speaker := characters [ rand ( 1 , characters ) ] ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 12
8364: ARRAY
8365: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8397
// Say ( speaker , dialogMID ) else
8381: LD_VAR 0 6
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 88
8395: GO 8411
// Say ( speaker , dialogFID ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: CALL_OW 88
// result := speaker ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 6
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 4
8425: RET
// export function PrepareDifficulty ; begin
8426: LD_INT 0
8428: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8429: LD_INT 5
8431: PPUSH
8432: LD_INT 8
8434: PPUSH
8435: LD_INT 2
8437: PPUSH
8438: CALL_OW 322
// if Difficulty = 1 then
8442: LD_OWVAR 67
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: IFFALSE 8569
// begin SetTech ( 66 , 8 , state_researched ) ;
8452: LD_INT 66
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8465: LD_INT 67
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 0
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8478: LD_INT 68
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8491: LD_INT 51
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8504: LD_INT 52
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 0
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8517: LD_INT 53
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8530: LD_INT 60
8532: PPUSH
8533: LD_INT 8
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8543: LD_INT 61
8545: PPUSH
8546: LD_INT 8
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8556: LD_INT 62
8558: PPUSH
8559: LD_INT 8
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 322
// end ; if Difficulty = 2 then
8569: LD_OWVAR 67
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8696
// begin SetTech ( 66 , 8 , state_researched ) ;
8579: LD_INT 66
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8592: LD_INT 67
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8605: LD_INT 68
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8618: LD_INT 51
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8644: LD_INT 53
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 2
8652: PPUSH
8653: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8657: LD_INT 60
8659: PPUSH
8660: LD_INT 8
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8670: LD_INT 61
8672: PPUSH
8673: LD_INT 8
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8683: LD_INT 62
8685: PPUSH
8686: LD_INT 8
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 322
// end ; if Difficulty >= 3 then
8696: LD_OWVAR 67
8700: PUSH
8701: LD_INT 3
8703: GREATEREQUAL
8704: IFFALSE 8823
// begin SetTech ( 66 , 8 , state_researched ) ;
8706: LD_INT 66
8708: PPUSH
8709: LD_INT 8
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8719: LD_INT 67
8721: PPUSH
8722: LD_INT 8
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8732: LD_INT 68
8734: PPUSH
8735: LD_INT 8
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8745: LD_INT 51
8747: PPUSH
8748: LD_INT 8
8750: PPUSH
8751: LD_INT 2
8753: PPUSH
8754: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8758: LD_INT 52
8760: PPUSH
8761: LD_INT 8
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8771: LD_INT 53
8773: PPUSH
8774: LD_INT 8
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8784: LD_INT 60
8786: PPUSH
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8797: LD_INT 61
8799: PPUSH
8800: LD_INT 8
8802: PPUSH
8803: LD_INT 2
8805: PPUSH
8806: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8810: LD_INT 62
8812: PPUSH
8813: LD_INT 8
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 322
// end ; end ;
8823: LD_VAR 0 1
8827: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
// for i in charactersList do
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// SaveCharacters ( i , ident ) ;
8845: LD_VAR 0 4
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 38
8859: GO 8842
8861: POP
8862: POP
// end ; end_of_file
8863: LD_VAR 0 3
8867: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8868: LD_EXP 38
8872: PUSH
8873: LD_INT 1
8875: EQUAL
8876: IFFALSE 9846
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin m1 := false ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// m2 := false ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// m3 := false ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
8910: LD_INT 22
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 23
8932: PUSH
8933: LD_INT 1
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 50
8942: PUSH
8943: EMPTY
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: PPUSH
8957: CALL 33863 0 1
8961: PUSH
8962: LD_INT 5
8964: LESS
8965: IFFALSE 8974
// YouLost ( Troops ) ;
8967: LD_STRING Troops
8969: PPUSH
8970: CALL_OW 104
// DialogueOn ;
8974: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8978: LD_EXP 1
8982: PPUSH
8983: LD_STRING D9b-JMM-1
8985: PPUSH
8986: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8990: LD_EXP 15
8994: PPUSH
8995: LD_STRING D9b-Pow-1
8997: PPUSH
8998: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9002: LD_EXP 1
9006: PPUSH
9007: LD_STRING D9b-JMM-2
9009: PPUSH
9010: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9014: LD_EXP 15
9018: PPUSH
9019: LD_STRING D9b-Pow-2
9021: PPUSH
9022: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9026: LD_EXP 1
9030: PPUSH
9031: LD_STRING D9b-JMM-3
9033: PPUSH
9034: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9038: LD_EXP 15
9042: PPUSH
9043: LD_STRING D9b-Pow-3
9045: PPUSH
9046: CALL_OW 94
// if tick <= 60 60$00 then
9050: LD_OWVAR 1
9054: PUSH
9055: LD_INT 126000
9057: LESSEQUAL
9058: IFFALSE 9067
// SetAchievement ( ACH_ASPEED_13 ) ;
9060: LD_STRING ACH_ASPEED_13
9062: PPUSH
9063: CALL_OW 543
// if burlakStatus = 1 then
9067: LD_EXP 28
9071: PUSH
9072: LD_INT 1
9074: EQUAL
9075: IFFALSE 9097
// begin m1 := true ;
9077: LD_ADDR_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9085: LD_STRING Burlak
9087: PPUSH
9088: LD_INT 1
9090: PPUSH
9091: CALL_OW 101
// end else
9095: GO 9108
// begin AddMedal ( Burlak , - 1 ) ;
9097: LD_STRING Burlak
9099: PPUSH
9100: LD_INT 1
9102: NEG
9103: PPUSH
9104: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9108: LD_EXP 2
9112: PPUSH
9113: CALL_OW 302
9117: IFFALSE 9139
// begin m2 := true ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9127: LD_STRING Stevens
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 101
// end else
9137: GO 9150
// begin AddMedal ( Stevens , - 1 ) ;
9139: LD_STRING Stevens
9141: PPUSH
9142: LD_INT 1
9144: NEG
9145: PPUSH
9146: CALL_OW 101
// end ; if radarOnSpot = 1 then
9150: LD_EXP 30
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: IFFALSE 9180
// begin m3 := true ;
9160: LD_ADDR_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9168: LD_STRING Observation
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 101
// end else
9178: GO 9191
// begin AddMedal ( Observation , - 1 ) ;
9180: LD_STRING Observation
9182: PPUSH
9183: LD_INT 1
9185: NEG
9186: PPUSH
9187: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9191: LD_VAR 0 1
9195: PUSH
9196: LD_VAR 0 2
9200: AND
9201: PUSH
9202: LD_VAR 0 3
9206: AND
9207: PUSH
9208: LD_OWVAR 67
9212: PUSH
9213: LD_INT 3
9215: GREATEREQUAL
9216: AND
9217: IFFALSE 9229
// SetAchievementEX ( ACH_AMER , 13 ) ;
9219: LD_STRING ACH_AMER
9221: PPUSH
9222: LD_INT 13
9224: PPUSH
9225: CALL_OW 564
// GiveMedals ( MAIN ) ;
9229: LD_STRING MAIN
9231: PPUSH
9232: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9236: LD_EXP 28
9240: PPUSH
9241: LD_STRING 13_BurlakStatus_1
9243: PPUSH
9244: CALL_OW 39
// if IsLive ( Stevens ) then
9248: LD_EXP 2
9252: PPUSH
9253: CALL_OW 300
9257: IFFALSE 9271
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9259: LD_INT 1
9261: PPUSH
9262: LD_STRING 13_StevensStatus_1
9264: PPUSH
9265: CALL_OW 39
9269: GO 9281
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9271: LD_INT 0
9273: PPUSH
9274: LD_STRING 13_StevensStatus_1
9276: PPUSH
9277: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9281: LD_INT 22
9283: PUSH
9284: LD_INT 1
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 21
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: LD_INT 25
9306: PUSH
9307: LD_INT 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 25
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 25
9326: PUSH
9327: LD_INT 3
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 25
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 25
9346: PUSH
9347: LD_INT 5
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 25
9356: PUSH
9357: LD_INT 8
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: PPUSH
9378: CALL_OW 69
9382: PPUSH
9383: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9387: LD_EXP 1
9391: PPUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_STRING JMM
9399: STR
9400: PPUSH
9401: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9405: LD_EXP 8
9409: PPUSH
9410: LD_EXP 34
9414: PUSH
9415: LD_STRING Brown
9417: STR
9418: PPUSH
9419: CALL 8828 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9423: LD_EXP 4
9427: PPUSH
9428: LD_EXP 34
9432: PUSH
9433: LD_STRING Donaldson
9435: STR
9436: PPUSH
9437: CALL 8828 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9441: LD_EXP 5
9445: PPUSH
9446: LD_EXP 34
9450: PUSH
9451: LD_STRING Bobby
9453: STR
9454: PPUSH
9455: CALL 8828 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9459: LD_EXP 6
9463: PPUSH
9464: LD_EXP 34
9468: PUSH
9469: LD_STRING Cyrus
9471: STR
9472: PPUSH
9473: CALL 8828 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9477: LD_EXP 3
9481: PPUSH
9482: LD_EXP 34
9486: PUSH
9487: LD_STRING Lisa
9489: STR
9490: PPUSH
9491: CALL 8828 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9495: LD_EXP 13
9499: PPUSH
9500: LD_EXP 34
9504: PUSH
9505: LD_STRING Frank
9507: STR
9508: PPUSH
9509: CALL 8828 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9513: LD_EXP 14
9517: PPUSH
9518: LD_EXP 34
9522: PUSH
9523: LD_STRING Kikuchi
9525: STR
9526: PPUSH
9527: CALL 8828 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9531: LD_EXP 10
9535: PPUSH
9536: LD_EXP 34
9540: PUSH
9541: LD_STRING Houten
9543: STR
9544: PPUSH
9545: CALL 8828 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9549: LD_EXP 12
9553: PPUSH
9554: LD_EXP 34
9558: PUSH
9559: LD_STRING Gary
9561: STR
9562: PPUSH
9563: CALL 8828 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9567: LD_EXP 11
9571: PPUSH
9572: LD_EXP 34
9576: PUSH
9577: LD_STRING Cornell
9579: STR
9580: PPUSH
9581: CALL 8828 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9585: LD_EXP 7
9589: PPUSH
9590: LD_EXP 34
9594: PUSH
9595: LD_STRING Denis
9597: STR
9598: PPUSH
9599: CALL 8828 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9603: LD_EXP 9
9607: PPUSH
9608: LD_EXP 34
9612: PUSH
9613: LD_STRING Gladstone
9615: STR
9616: PPUSH
9617: CALL 8828 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9621: LD_EXP 2
9625: PPUSH
9626: LD_EXP 34
9630: PUSH
9631: LD_STRING Stevens
9633: STR
9634: PPUSH
9635: CALL 8828 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9639: LD_INT 50
9641: PUSH
9642: EMPTY
9643: LIST
9644: PUSH
9645: LD_INT 22
9647: PUSH
9648: LD_INT 1
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 21
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: LD_INT 25
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 25
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 25
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 25
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 25
9710: PUSH
9711: LD_INT 5
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 25
9720: PUSH
9721: LD_INT 8
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 69
9747: PUSH
9748: LD_EXP 1
9752: PUSH
9753: LD_EXP 8
9757: PUSH
9758: LD_EXP 4
9762: PUSH
9763: LD_EXP 5
9767: PUSH
9768: LD_EXP 6
9772: PUSH
9773: LD_EXP 3
9777: PUSH
9778: LD_EXP 13
9782: PUSH
9783: LD_EXP 9
9787: PUSH
9788: LD_EXP 14
9792: PUSH
9793: LD_EXP 7
9797: PUSH
9798: LD_EXP 10
9802: PUSH
9803: LD_EXP 12
9807: PUSH
9808: LD_EXP 11
9812: PUSH
9813: LD_EXP 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING 13_other_survivors
9837: PPUSH
9838: CALL_OW 38
// YouWin ;
9842: CALL_OW 103
// end ; end_of_file
9846: PPOPN 3
9848: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9849: LD_EXP 32
9853: PUSH
9854: LD_INT 2
9856: EQUAL
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 8
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PPUSH
9868: CALL_OW 69
9872: NOT
9873: AND
9874: PUSH
9875: LD_INT 25
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 321
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 10026
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
9898: PPUSH
9899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_INT 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 30
9940: PUSH
9941: LD_INT 1
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: PPUSH
9958: CALL_OW 69
9962: ST_TO_ADDR
// for i in tmp do
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: FOR_IN
9974: IFFALSE 10007
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9976: LD_ADDR_VAR 0 3
9980: PUSH
9981: LD_VAR 0 3
9985: PUSH
9986: LD_VAR 0 1
9990: PPUSH
9991: CALL_OW 274
9995: PPUSH
9996: LD_INT 3
9998: PPUSH
9999: CALL_OW 275
10003: PLUS
10004: ST_TO_ADDR
10005: GO 9973
10007: POP
10008: POP
// if yourSiberite < 60 then
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 60
10016: LESS
10017: IFFALSE 10026
// YouLost ( siberite ) ;
10019: LD_STRING siberite
10021: PPUSH
10022: CALL_OW 104
// end ; end_of_file
10026: PPOPN 3
10028: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10029: LD_INT 22
10031: PUSH
10032: LD_INT 8
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 21
10041: PUSH
10042: LD_INT 1
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PUSH
10058: LD_INT 6
10060: LESS
10061: IFFALSE 10071
10063: GO 10065
10065: DISABLE
// begin enable ;
10066: ENABLE
// PrepareArabianAttack ;
10067: CALL 4079 0 0
// end ;
10071: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10072: LD_EXP 35
10076: PUSH
10077: LD_INT 1
10079: EQUAL
10080: PUSH
10081: LD_INT 22
10083: PUSH
10084: LD_INT 8
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 21
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PPUSH
10105: CALL_OW 69
10109: PUSH
10110: LD_INT 6
10112: LESS
10113: AND
10114: IFFALSE 10141
10116: GO 10118
10118: DISABLE
// begin wait ( 4 4$00 ) ;
10119: LD_INT 8400
10121: PPUSH
10122: CALL_OW 67
// PrepareRussianAttack ;
10126: CALL 3302 0 0
// wait ( 12 12$00 ) ;
10130: LD_INT 25200
10132: PPUSH
10133: CALL_OW 67
// PrepareRussianAttack ;
10137: CALL 3302 0 0
// end ;
10141: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10142: LD_INT 0
10144: PPUSH
10145: PPUSH
10146: PPUSH
10147: PPUSH
10148: PPUSH
10149: PPUSH
10150: PPUSH
10151: PPUSH
10152: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10153: LD_ADDR_VAR 0 8
10157: PUSH
10158: LD_INT 22
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 120
10170: PUSH
10171: LD_INT 10
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: ST_TO_ADDR
// if not units then
10187: LD_VAR 0 8
10191: NOT
10192: IFFALSE 10196
// exit ;
10194: GO 10502
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10196: LD_ADDR_VAR 0 4
10200: PUSH
10201: LD_INT 80
10203: PUSH
10204: LD_INT 60
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 54
10213: PUSH
10214: LD_INT 57
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 55
10223: PUSH
10224: LD_INT 74
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 61
10233: PUSH
10234: LD_INT 85
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10247: LD_ADDR_VAR 0 5
10251: PUSH
10252: LD_INT 93
10254: PUSH
10255: LD_INT 99
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 85
10264: PUSH
10265: LD_INT 99
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10276: LD_INT 35
10278: PPUSH
10279: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10283: LD_ADDR_VAR 0 6
10287: PUSH
10288: LD_VAR 0 8
10292: PPUSH
10293: LD_INT 21
10295: PUSH
10296: LD_INT 2
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 72
10307: ST_TO_ADDR
// if vehicles then
10308: LD_VAR 0 6
10312: IFFALSE 10328
// AgressiveMove ( vehicles , path ) ;
10314: LD_VAR 0 6
10318: PPUSH
10319: LD_VAR 0 4
10323: PPUSH
10324: CALL 72056 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10328: LD_ADDR_VAR 0 7
10332: PUSH
10333: LD_VAR 0 8
10337: PPUSH
10338: LD_INT 23
10340: PUSH
10341: LD_INT 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 72
10366: ST_TO_ADDR
// if infantry then
10367: LD_VAR 0 7
10371: IFFALSE 10387
// AgressiveMove ( infantry , path2 ) ;
10373: LD_VAR 0 7
10377: PPUSH
10378: LD_VAR 0 5
10382: PPUSH
10383: CALL 72056 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10387: LD_ADDR_VAR 0 9
10391: PUSH
10392: LD_VAR 0 8
10396: PPUSH
10397: LD_INT 23
10399: PUSH
10400: LD_INT 0
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 72
10425: ST_TO_ADDR
// if apes then
10426: LD_VAR 0 9
10430: IFFALSE 10474
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10432: LD_VAR 0 9
10436: PUSH
10437: LD_INT 1
10439: ARRAY
10440: PPUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PPUSH
10451: CALL_OW 69
10455: PPUSH
10456: LD_VAR 0 9
10460: PUSH
10461: LD_INT 1
10463: ARRAY
10464: PPUSH
10465: CALL_OW 74
10469: PPUSH
10470: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10474: LD_ADDR_VAR 0 8
10478: PUSH
10479: LD_VAR 0 8
10483: PPUSH
10484: LD_INT 50
10486: PUSH
10487: EMPTY
10488: LIST
10489: PPUSH
10490: CALL_OW 72
10494: ST_TO_ADDR
// until not units ;
10495: LD_VAR 0 8
10499: NOT
10500: IFFALSE 10276
// end ;
10502: LD_VAR 0 1
10506: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10507: LD_INT 0
10509: PPUSH
10510: PPUSH
10511: PPUSH
10512: PPUSH
10513: PPUSH
10514: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10515: LD_ADDR_VAR 0 6
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 3
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 120
10532: PUSH
10533: LD_INT 10
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PPUSH
10544: CALL_OW 69
10548: ST_TO_ADDR
// if not units then
10549: LD_VAR 0 6
10553: NOT
10554: IFFALSE 10558
// exit ;
10556: GO 10689
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10558: LD_ADDR_VAR 0 4
10562: PUSH
10563: LD_INT 80
10565: PUSH
10566: LD_INT 60
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 54
10575: PUSH
10576: LD_INT 57
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 55
10585: PUSH
10586: LD_INT 74
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 61
10595: PUSH
10596: LD_INT 85
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10609: LD_INT 35
10611: PPUSH
10612: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: LD_VAR 0 6
10625: PPUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 72
10640: ST_TO_ADDR
// if vehicles then
10641: LD_VAR 0 5
10645: IFFALSE 10661
// AgressiveMove ( vehicles , path ) ;
10647: LD_VAR 0 5
10651: PPUSH
10652: LD_VAR 0 4
10656: PPUSH
10657: CALL 72056 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10661: LD_ADDR_VAR 0 6
10665: PUSH
10666: LD_VAR 0 6
10670: PPUSH
10671: LD_INT 50
10673: PUSH
10674: EMPTY
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: ST_TO_ADDR
// until not units ;
10682: LD_VAR 0 6
10686: NOT
10687: IFFALSE 10609
// end ; end_of_file
10689: LD_VAR 0 1
10693: RET
// every 0 0$01 do var i , cratesSpawned ;
10694: GO 10696
10696: DISABLE
10697: LD_INT 0
10699: PPUSH
10700: PPUSH
// begin cratesSpawned := 0 ;
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// for i := 1 to 6 do
10709: LD_ADDR_VAR 0 1
10713: PUSH
10714: DOUBLE
10715: LD_INT 1
10717: DEC
10718: ST_TO_ADDR
10719: LD_INT 6
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10748
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10725: LD_INT 2
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 17
10738: PPUSH
10739: LD_INT 0
10741: PPUSH
10742: CALL_OW 55
10746: GO 10722
10748: POP
10749: POP
// wait ( 0 0$20 ) ;
10750: LD_INT 700
10752: PPUSH
10753: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10757: LD_INT 280
10759: PPUSH
10760: CALL_OW 67
// if cratesSpawned < 12 then
10764: LD_VAR 0 2
10768: PUSH
10769: LD_INT 12
10771: LESS
10772: IFFALSE 10824
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10774: LD_INT 105
10776: PPUSH
10777: LD_INT 350
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10789: LD_INT 3
10791: PPUSH
10792: LD_INT 5
10794: PPUSH
10795: CALL_OW 12
10799: PPUSH
10800: LD_INT 13
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10810: LD_ADDR_VAR 0 2
10814: PUSH
10815: LD_VAR 0 2
10819: PUSH
10820: LD_INT 1
10822: PLUS
10823: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10824: LD_VAR 0 2
10828: PUSH
10829: LD_INT 12
10831: GREATEREQUAL
10832: PUSH
10833: LD_VAR 0 2
10837: PUSH
10838: LD_INT 32
10840: LESS
10841: AND
10842: IFFALSE 10894
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10844: LD_INT 420
10846: PPUSH
10847: LD_INT 700
10849: PPUSH
10850: CALL_OW 12
10854: PPUSH
10855: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10859: LD_INT 3
10861: PPUSH
10862: LD_INT 5
10864: PPUSH
10865: CALL_OW 12
10869: PPUSH
10870: LD_INT 13
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10880: LD_ADDR_VAR 0 2
10884: PUSH
10885: LD_VAR 0 2
10889: PUSH
10890: LD_INT 1
10892: PLUS
10893: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10894: LD_VAR 0 2
10898: PUSH
10899: LD_INT 32
10901: GREATEREQUAL
10902: IFFALSE 10976
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10904: LD_INT 13
10906: PPUSH
10907: CALL_OW 435
10911: PUSH
10912: LD_INT 14
10914: LESS
10915: IFFALSE 10926
// wait ( 0 0$20 ) else
10917: LD_INT 700
10919: PPUSH
10920: CALL_OW 67
10924: GO 10941
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10926: LD_INT 1750
10928: PPUSH
10929: LD_INT 3150
10931: PPUSH
10932: CALL_OW 12
10936: PPUSH
10937: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10941: LD_INT 2
10943: PPUSH
10944: LD_INT 5
10946: PPUSH
10947: CALL_OW 12
10951: PPUSH
10952: LD_INT 13
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10962: LD_ADDR_VAR 0 2
10966: PUSH
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 1
10974: PLUS
10975: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10976: LD_VAR 0 2
10980: PUSH
10981: LD_INT 120
10983: GREATEREQUAL
10984: IFFALSE 11058
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10986: LD_INT 13
10988: PPUSH
10989: CALL_OW 435
10993: PUSH
10994: LD_INT 14
10996: LESS
10997: IFFALSE 11008
// wait ( 0 0$40 ) else
10999: LD_INT 1400
11001: PPUSH
11002: CALL_OW 67
11006: GO 11023
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11008: LD_INT 2450
11010: PPUSH
11011: LD_INT 3850
11013: PPUSH
11014: CALL_OW 12
11018: PPUSH
11019: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11023: LD_INT 1
11025: PPUSH
11026: LD_INT 5
11028: PPUSH
11029: CALL_OW 12
11033: PPUSH
11034: LD_INT 13
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11044: LD_ADDR_VAR 0 2
11048: PUSH
11049: LD_VAR 0 2
11053: PUSH
11054: LD_INT 1
11056: PLUS
11057: ST_TO_ADDR
// end ; until false ;
11058: LD_INT 0
11060: IFFALSE 10757
// end ; end_of_file end_of_file
11062: PPOPN 2
11064: END
// export globalGameSaveCounter ; every 0 0$1 do
11065: GO 11067
11067: DISABLE
// begin enable ;
11068: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11069: LD_STRING updateTimer(
11071: PUSH
11072: LD_OWVAR 1
11076: STR
11077: PUSH
11078: LD_STRING );
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ;
11086: END
// every 0 0$1 do
11087: GO 11089
11089: DISABLE
// begin globalGameSaveCounter := 0 ;
11090: LD_ADDR_EXP 46
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11098: LD_STRING setGameSaveCounter(0)
11100: PPUSH
11101: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11105: LD_STRING initStreamRollete();
11107: PPUSH
11108: CALL_OW 559
// InitStreamMode ;
11112: CALL 12438 0 0
// DefineStreamItems ( false ) ;
11116: LD_INT 0
11118: PPUSH
11119: CALL 12902 0 1
// end ;
11123: END
// export function SOS_MapStart ( ) ; begin
11124: LD_INT 0
11126: PPUSH
// if streamModeActive then
11127: LD_EXP 47
11131: IFFALSE 11140
// DefineStreamItems ( true ) ;
11133: LD_INT 1
11135: PPUSH
11136: CALL 12902 0 1
// UpdateLuaVariables ( ) ;
11140: CALL 11157 0 0
// UpdateFactoryWaypoints ( ) ;
11144: CALL 25771 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11148: CALL 26028 0 0
// end ;
11152: LD_VAR 0 1
11156: RET
// function UpdateLuaVariables ( ) ; begin
11157: LD_INT 0
11159: PPUSH
// if globalGameSaveCounter then
11160: LD_EXP 46
11164: IFFALSE 11198
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11166: LD_ADDR_EXP 46
11170: PUSH
11171: LD_EXP 46
11175: PPUSH
11176: CALL 70813 0 1
11180: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11181: LD_STRING setGameSaveCounter(
11183: PUSH
11184: LD_EXP 46
11188: STR
11189: PUSH
11190: LD_STRING )
11192: STR
11193: PPUSH
11194: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11198: LD_STRING setGameDifficulty(
11200: PUSH
11201: LD_OWVAR 67
11205: STR
11206: PUSH
11207: LD_STRING )
11209: STR
11210: PPUSH
11211: CALL_OW 559
// end ;
11215: LD_VAR 0 1
11219: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11220: LD_INT 0
11222: PPUSH
// if p2 = stream_mode then
11223: LD_VAR 0 2
11227: PUSH
11228: LD_INT 100
11230: EQUAL
11231: IFFALSE 12234
// begin if not StreamModeActive then
11233: LD_EXP 47
11237: NOT
11238: IFFALSE 11248
// StreamModeActive := true ;
11240: LD_ADDR_EXP 47
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if p3 = 0 then
11248: LD_VAR 0 3
11252: PUSH
11253: LD_INT 0
11255: EQUAL
11256: IFFALSE 11262
// InitStreamMode ;
11258: CALL 12438 0 0
// if p3 = 1 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 1
11269: EQUAL
11270: IFFALSE 11280
// sRocket := true ;
11272: LD_ADDR_EXP 52
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if p3 = 2 then
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 2
11287: EQUAL
11288: IFFALSE 11298
// sSpeed := true ;
11290: LD_ADDR_EXP 51
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// if p3 = 3 then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_INT 3
11305: EQUAL
11306: IFFALSE 11316
// sEngine := true ;
11308: LD_ADDR_EXP 53
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 4 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 4
11323: EQUAL
11324: IFFALSE 11334
// sSpec := true ;
11326: LD_ADDR_EXP 50
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// if p3 = 5 then
11334: LD_VAR 0 3
11338: PUSH
11339: LD_INT 5
11341: EQUAL
11342: IFFALSE 11352
// sLevel := true ;
11344: LD_ADDR_EXP 54
11348: PUSH
11349: LD_INT 1
11351: ST_TO_ADDR
// if p3 = 6 then
11352: LD_VAR 0 3
11356: PUSH
11357: LD_INT 6
11359: EQUAL
11360: IFFALSE 11370
// sArmoury := true ;
11362: LD_ADDR_EXP 55
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// if p3 = 7 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 7
11377: EQUAL
11378: IFFALSE 11388
// sRadar := true ;
11380: LD_ADDR_EXP 56
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 8 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 8
11395: EQUAL
11396: IFFALSE 11406
// sBunker := true ;
11398: LD_ADDR_EXP 57
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 9 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 9
11413: EQUAL
11414: IFFALSE 11424
// sHack := true ;
11416: LD_ADDR_EXP 58
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 10 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 10
11431: EQUAL
11432: IFFALSE 11442
// sFire := true ;
11434: LD_ADDR_EXP 59
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 11 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 11
11449: EQUAL
11450: IFFALSE 11460
// sRefresh := true ;
11452: LD_ADDR_EXP 60
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 12 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 12
11467: EQUAL
11468: IFFALSE 11478
// sExp := true ;
11470: LD_ADDR_EXP 61
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 13 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 13
11485: EQUAL
11486: IFFALSE 11496
// sDepot := true ;
11488: LD_ADDR_EXP 62
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 14 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 14
11503: EQUAL
11504: IFFALSE 11514
// sFlag := true ;
11506: LD_ADDR_EXP 63
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 15 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 15
11521: EQUAL
11522: IFFALSE 11532
// sKamikadze := true ;
11524: LD_ADDR_EXP 71
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 16 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 16
11539: EQUAL
11540: IFFALSE 11550
// sTroll := true ;
11542: LD_ADDR_EXP 72
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 17 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 17
11557: EQUAL
11558: IFFALSE 11568
// sSlow := true ;
11560: LD_ADDR_EXP 73
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 18 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 18
11575: EQUAL
11576: IFFALSE 11586
// sLack := true ;
11578: LD_ADDR_EXP 74
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 19 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 19
11593: EQUAL
11594: IFFALSE 11604
// sTank := true ;
11596: LD_ADDR_EXP 76
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// if p3 = 20 then
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 20
11611: EQUAL
11612: IFFALSE 11622
// sRemote := true ;
11614: LD_ADDR_EXP 77
11618: PUSH
11619: LD_INT 1
11621: ST_TO_ADDR
// if p3 = 21 then
11622: LD_VAR 0 3
11626: PUSH
11627: LD_INT 21
11629: EQUAL
11630: IFFALSE 11640
// sPowell := true ;
11632: LD_ADDR_EXP 78
11636: PUSH
11637: LD_INT 1
11639: ST_TO_ADDR
// if p3 = 22 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 22
11647: EQUAL
11648: IFFALSE 11658
// sTeleport := true ;
11650: LD_ADDR_EXP 81
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// if p3 = 23 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 23
11665: EQUAL
11666: IFFALSE 11676
// sOilTower := true ;
11668: LD_ADDR_EXP 83
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 24 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 24
11683: EQUAL
11684: IFFALSE 11694
// sShovel := true ;
11686: LD_ADDR_EXP 84
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 25 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 25
11701: EQUAL
11702: IFFALSE 11712
// sSheik := true ;
11704: LD_ADDR_EXP 85
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 26 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 26
11719: EQUAL
11720: IFFALSE 11730
// sEarthquake := true ;
11722: LD_ADDR_EXP 87
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 27 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 27
11737: EQUAL
11738: IFFALSE 11748
// sAI := true ;
11740: LD_ADDR_EXP 88
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 28 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 28
11755: EQUAL
11756: IFFALSE 11766
// sCargo := true ;
11758: LD_ADDR_EXP 91
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 29 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 29
11773: EQUAL
11774: IFFALSE 11784
// sDLaser := true ;
11776: LD_ADDR_EXP 92
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 30 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 30
11791: EQUAL
11792: IFFALSE 11802
// sExchange := true ;
11794: LD_ADDR_EXP 93
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 31 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 31
11809: EQUAL
11810: IFFALSE 11820
// sFac := true ;
11812: LD_ADDR_EXP 94
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 32 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 32
11827: EQUAL
11828: IFFALSE 11838
// sPower := true ;
11830: LD_ADDR_EXP 95
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 33 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 33
11845: EQUAL
11846: IFFALSE 11856
// sRandom := true ;
11848: LD_ADDR_EXP 96
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 34 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 34
11863: EQUAL
11864: IFFALSE 11874
// sShield := true ;
11866: LD_ADDR_EXP 97
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 35 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 35
11881: EQUAL
11882: IFFALSE 11892
// sTime := true ;
11884: LD_ADDR_EXP 98
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 36 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 36
11899: EQUAL
11900: IFFALSE 11910
// sTools := true ;
11902: LD_ADDR_EXP 99
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 101 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 101
11917: EQUAL
11918: IFFALSE 11928
// sSold := true ;
11920: LD_ADDR_EXP 64
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 102 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 102
11935: EQUAL
11936: IFFALSE 11946
// sDiff := true ;
11938: LD_ADDR_EXP 65
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 103 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 103
11953: EQUAL
11954: IFFALSE 11964
// sFog := true ;
11956: LD_ADDR_EXP 68
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 104 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 104
11971: EQUAL
11972: IFFALSE 11982
// sReset := true ;
11974: LD_ADDR_EXP 69
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 105 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 105
11989: EQUAL
11990: IFFALSE 12000
// sSun := true ;
11992: LD_ADDR_EXP 70
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 106 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 106
12007: EQUAL
12008: IFFALSE 12018
// sTiger := true ;
12010: LD_ADDR_EXP 66
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 107 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 107
12025: EQUAL
12026: IFFALSE 12036
// sBomb := true ;
12028: LD_ADDR_EXP 67
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 108 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 108
12043: EQUAL
12044: IFFALSE 12054
// sWound := true ;
12046: LD_ADDR_EXP 75
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 109 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 109
12061: EQUAL
12062: IFFALSE 12072
// sBetray := true ;
12064: LD_ADDR_EXP 79
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 110 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 110
12079: EQUAL
12080: IFFALSE 12090
// sContamin := true ;
12082: LD_ADDR_EXP 80
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 111 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 111
12097: EQUAL
12098: IFFALSE 12108
// sOil := true ;
12100: LD_ADDR_EXP 82
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 112 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 112
12115: EQUAL
12116: IFFALSE 12126
// sStu := true ;
12118: LD_ADDR_EXP 86
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// if p3 = 113 then
12126: LD_VAR 0 3
12130: PUSH
12131: LD_INT 113
12133: EQUAL
12134: IFFALSE 12144
// sBazooka := true ;
12136: LD_ADDR_EXP 89
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if p3 = 114 then
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 114
12151: EQUAL
12152: IFFALSE 12162
// sMortar := true ;
12154: LD_ADDR_EXP 90
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// if p3 = 115 then
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 115
12169: EQUAL
12170: IFFALSE 12180
// sRanger := true ;
12172: LD_ADDR_EXP 100
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// if p3 = 116 then
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 116
12187: EQUAL
12188: IFFALSE 12198
// sComputer := true ;
12190: LD_ADDR_EXP 101
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// if p3 = 117 then
12198: LD_VAR 0 3
12202: PUSH
12203: LD_INT 117
12205: EQUAL
12206: IFFALSE 12216
// s30 := true ;
12208: LD_ADDR_EXP 102
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// if p3 = 118 then
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 118
12223: EQUAL
12224: IFFALSE 12234
// s60 := true ;
12226: LD_ADDR_EXP 103
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// end ; if p2 = hack_mode then
12234: LD_VAR 0 2
12238: PUSH
12239: LD_INT 101
12241: EQUAL
12242: IFFALSE 12370
// begin case p3 of 1 :
12244: LD_VAR 0 3
12248: PUSH
12249: LD_INT 1
12251: DOUBLE
12252: EQUAL
12253: IFTRUE 12257
12255: GO 12264
12257: POP
// hHackUnlimitedResources ; 2 :
12258: CALL 24517 0 0
12262: GO 12370
12264: LD_INT 2
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12279
12272: POP
// hHackSetLevel10 ; 3 :
12273: CALL 24650 0 0
12277: GO 12370
12279: LD_INT 3
12281: DOUBLE
12282: EQUAL
12283: IFTRUE 12287
12285: GO 12294
12287: POP
// hHackSetLevel10YourUnits ; 4 :
12288: CALL 24735 0 0
12292: GO 12370
12294: LD_INT 4
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12309
12302: POP
// hHackInvincible ; 5 :
12303: CALL 25183 0 0
12307: GO 12370
12309: LD_INT 5
12311: DOUBLE
12312: EQUAL
12313: IFTRUE 12317
12315: GO 12324
12317: POP
// hHackInvisible ; 6 :
12318: CALL 25294 0 0
12322: GO 12370
12324: LD_INT 6
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12339
12332: POP
// hHackChangeYourSide ; 7 :
12333: CALL 25351 0 0
12337: GO 12370
12339: LD_INT 7
12341: DOUBLE
12342: EQUAL
12343: IFTRUE 12347
12345: GO 12354
12347: POP
// hHackChangeUnitSide ; 8 :
12348: CALL 25393 0 0
12352: GO 12370
12354: LD_INT 8
12356: DOUBLE
12357: EQUAL
12358: IFTRUE 12362
12360: GO 12369
12362: POP
// hHackFog ; end ;
12363: CALL 25494 0 0
12367: GO 12370
12369: POP
// end ; if p2 = game_save_mode then
12370: LD_VAR 0 2
12374: PUSH
12375: LD_INT 102
12377: EQUAL
12378: IFFALSE 12433
// begin if p3 = 1 then
12380: LD_VAR 0 3
12384: PUSH
12385: LD_INT 1
12387: EQUAL
12388: IFFALSE 12400
// globalGameSaveCounter := p4 ;
12390: LD_ADDR_EXP 46
12394: PUSH
12395: LD_VAR 0 4
12399: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12400: LD_VAR 0 3
12404: PUSH
12405: LD_INT 2
12407: EQUAL
12408: PUSH
12409: LD_EXP 46
12413: AND
12414: IFFALSE 12433
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12416: LD_STRING setGameSaveCounter(
12418: PUSH
12419: LD_EXP 46
12423: STR
12424: PUSH
12425: LD_STRING )
12427: STR
12428: PPUSH
12429: CALL_OW 559
// end ; end ;
12433: LD_VAR 0 7
12437: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12438: LD_INT 0
12440: PPUSH
// streamModeActive := false ;
12441: LD_ADDR_EXP 47
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// normalCounter := 36 ;
12449: LD_ADDR_EXP 48
12453: PUSH
12454: LD_INT 36
12456: ST_TO_ADDR
// hardcoreCounter := 18 ;
12457: LD_ADDR_EXP 49
12461: PUSH
12462: LD_INT 18
12464: ST_TO_ADDR
// sRocket := false ;
12465: LD_ADDR_EXP 52
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sSpeed := false ;
12473: LD_ADDR_EXP 51
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sEngine := false ;
12481: LD_ADDR_EXP 53
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sSpec := false ;
12489: LD_ADDR_EXP 50
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sLevel := false ;
12497: LD_ADDR_EXP 54
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sArmoury := false ;
12505: LD_ADDR_EXP 55
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sRadar := false ;
12513: LD_ADDR_EXP 56
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sBunker := false ;
12521: LD_ADDR_EXP 57
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sHack := false ;
12529: LD_ADDR_EXP 58
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sFire := false ;
12537: LD_ADDR_EXP 59
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sRefresh := false ;
12545: LD_ADDR_EXP 60
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sExp := false ;
12553: LD_ADDR_EXP 61
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sDepot := false ;
12561: LD_ADDR_EXP 62
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sFlag := false ;
12569: LD_ADDR_EXP 63
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sKamikadze := false ;
12577: LD_ADDR_EXP 71
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sTroll := false ;
12585: LD_ADDR_EXP 72
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sSlow := false ;
12593: LD_ADDR_EXP 73
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sLack := false ;
12601: LD_ADDR_EXP 74
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sTank := false ;
12609: LD_ADDR_EXP 76
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sRemote := false ;
12617: LD_ADDR_EXP 77
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sPowell := false ;
12625: LD_ADDR_EXP 78
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sTeleport := false ;
12633: LD_ADDR_EXP 81
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sOilTower := false ;
12641: LD_ADDR_EXP 83
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sShovel := false ;
12649: LD_ADDR_EXP 84
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sSheik := false ;
12657: LD_ADDR_EXP 85
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sEarthquake := false ;
12665: LD_ADDR_EXP 87
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sAI := false ;
12673: LD_ADDR_EXP 88
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sCargo := false ;
12681: LD_ADDR_EXP 91
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sDLaser := false ;
12689: LD_ADDR_EXP 92
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sExchange := false ;
12697: LD_ADDR_EXP 93
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sFac := false ;
12705: LD_ADDR_EXP 94
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sPower := false ;
12713: LD_ADDR_EXP 95
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sRandom := false ;
12721: LD_ADDR_EXP 96
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sShield := false ;
12729: LD_ADDR_EXP 97
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sTime := false ;
12737: LD_ADDR_EXP 98
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sTools := false ;
12745: LD_ADDR_EXP 99
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sSold := false ;
12753: LD_ADDR_EXP 64
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sDiff := false ;
12761: LD_ADDR_EXP 65
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sFog := false ;
12769: LD_ADDR_EXP 68
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sReset := false ;
12777: LD_ADDR_EXP 69
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sSun := false ;
12785: LD_ADDR_EXP 70
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sTiger := false ;
12793: LD_ADDR_EXP 66
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sBomb := false ;
12801: LD_ADDR_EXP 67
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sWound := false ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// sBetray := false ;
12817: LD_ADDR_EXP 79
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// sContamin := false ;
12825: LD_ADDR_EXP 80
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// sOil := false ;
12833: LD_ADDR_EXP 82
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// sStu := false ;
12841: LD_ADDR_EXP 86
12845: PUSH
12846: LD_INT 0
12848: ST_TO_ADDR
// sBazooka := false ;
12849: LD_ADDR_EXP 89
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// sMortar := false ;
12857: LD_ADDR_EXP 90
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// sRanger := false ;
12865: LD_ADDR_EXP 100
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// sComputer := false ;
12873: LD_ADDR_EXP 101
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// s30 := false ;
12881: LD_ADDR_EXP 102
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// s60 := false ;
12889: LD_ADDR_EXP 103
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// end ;
12897: LD_VAR 0 1
12901: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12902: LD_INT 0
12904: PPUSH
12905: PPUSH
12906: PPUSH
12907: PPUSH
12908: PPUSH
12909: PPUSH
12910: PPUSH
// result := [ ] ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: EMPTY
12917: ST_TO_ADDR
// if campaign_id = 1 then
12918: LD_OWVAR 69
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: IFFALSE 16092
// begin case mission_number of 1 :
12928: LD_OWVAR 70
12932: PUSH
12933: LD_INT 1
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 13017
12941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12942: LD_ADDR_VAR 0 2
12946: PUSH
12947: LD_INT 2
12949: PUSH
12950: LD_INT 4
12952: PUSH
12953: LD_INT 11
12955: PUSH
12956: LD_INT 12
12958: PUSH
12959: LD_INT 15
12961: PUSH
12962: LD_INT 16
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 26
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 101
12987: PUSH
12988: LD_INT 102
12990: PUSH
12991: LD_INT 106
12993: PUSH
12994: LD_INT 116
12996: PUSH
12997: LD_INT 117
12999: PUSH
13000: LD_INT 118
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 16090
13017: LD_INT 2
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13109
13025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: LD_INT 11
13039: PUSH
13040: LD_INT 12
13042: PUSH
13043: LD_INT 15
13045: PUSH
13046: LD_INT 16
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_INT 23
13054: PUSH
13055: LD_INT 26
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 101
13071: PUSH
13072: LD_INT 102
13074: PUSH
13075: LD_INT 105
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: LD_INT 108
13083: PUSH
13084: LD_INT 116
13086: PUSH
13087: LD_INT 117
13089: PUSH
13090: LD_INT 118
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: ST_TO_ADDR
13107: GO 16090
13109: LD_INT 3
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13205
13117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13118: LD_ADDR_VAR 0 2
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: LD_INT 4
13128: PUSH
13129: LD_INT 5
13131: PUSH
13132: LD_INT 11
13134: PUSH
13135: LD_INT 12
13137: PUSH
13138: LD_INT 15
13140: PUSH
13141: LD_INT 16
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_INT 26
13149: PUSH
13150: LD_INT 36
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 101
13167: PUSH
13168: LD_INT 102
13170: PUSH
13171: LD_INT 105
13173: PUSH
13174: LD_INT 106
13176: PUSH
13177: LD_INT 108
13179: PUSH
13180: LD_INT 116
13182: PUSH
13183: LD_INT 117
13185: PUSH
13186: LD_INT 118
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: ST_TO_ADDR
13203: GO 16090
13205: LD_INT 4
13207: DOUBLE
13208: EQUAL
13209: IFTRUE 13213
13211: GO 13309
13213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: LD_INT 2
13221: PUSH
13222: LD_INT 4
13224: PUSH
13225: LD_INT 5
13227: PUSH
13228: LD_INT 8
13230: PUSH
13231: LD_INT 11
13233: PUSH
13234: LD_INT 12
13236: PUSH
13237: LD_INT 15
13239: PUSH
13240: LD_INT 16
13242: PUSH
13243: LD_INT 22
13245: PUSH
13246: LD_INT 23
13248: PUSH
13249: LD_INT 26
13251: PUSH
13252: LD_INT 36
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 101
13271: PUSH
13272: LD_INT 102
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 116
13286: PUSH
13287: LD_INT 117
13289: PUSH
13290: LD_INT 118
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: ST_TO_ADDR
13307: GO 16090
13309: LD_INT 5
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13429
13317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13318: LD_ADDR_VAR 0 2
13322: PUSH
13323: LD_INT 2
13325: PUSH
13326: LD_INT 4
13328: PUSH
13329: LD_INT 5
13331: PUSH
13332: LD_INT 6
13334: PUSH
13335: LD_INT 8
13337: PUSH
13338: LD_INT 11
13340: PUSH
13341: LD_INT 12
13343: PUSH
13344: LD_INT 15
13346: PUSH
13347: LD_INT 16
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_INT 23
13355: PUSH
13356: LD_INT 25
13358: PUSH
13359: LD_INT 26
13361: PUSH
13362: LD_INT 36
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 101
13383: PUSH
13384: LD_INT 102
13386: PUSH
13387: LD_INT 105
13389: PUSH
13390: LD_INT 106
13392: PUSH
13393: LD_INT 108
13395: PUSH
13396: LD_INT 109
13398: PUSH
13399: LD_INT 112
13401: PUSH
13402: LD_INT 116
13404: PUSH
13405: LD_INT 117
13407: PUSH
13408: LD_INT 118
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: ST_TO_ADDR
13427: GO 16090
13429: LD_INT 6
13431: DOUBLE
13432: EQUAL
13433: IFTRUE 13437
13435: GO 13569
13437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13438: LD_ADDR_VAR 0 2
13442: PUSH
13443: LD_INT 2
13445: PUSH
13446: LD_INT 4
13448: PUSH
13449: LD_INT 5
13451: PUSH
13452: LD_INT 6
13454: PUSH
13455: LD_INT 8
13457: PUSH
13458: LD_INT 11
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 15
13466: PUSH
13467: LD_INT 16
13469: PUSH
13470: LD_INT 20
13472: PUSH
13473: LD_INT 21
13475: PUSH
13476: LD_INT 22
13478: PUSH
13479: LD_INT 23
13481: PUSH
13482: LD_INT 25
13484: PUSH
13485: LD_INT 26
13487: PUSH
13488: LD_INT 30
13490: PUSH
13491: LD_INT 31
13493: PUSH
13494: LD_INT 32
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 101
13523: PUSH
13524: LD_INT 102
13526: PUSH
13527: LD_INT 105
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 108
13535: PUSH
13536: LD_INT 109
13538: PUSH
13539: LD_INT 112
13541: PUSH
13542: LD_INT 116
13544: PUSH
13545: LD_INT 117
13547: PUSH
13548: LD_INT 118
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: ST_TO_ADDR
13567: GO 16090
13569: LD_INT 7
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13689
13577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 2
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: LD_INT 5
13591: PUSH
13592: LD_INT 7
13594: PUSH
13595: LD_INT 11
13597: PUSH
13598: LD_INT 12
13600: PUSH
13601: LD_INT 15
13603: PUSH
13604: LD_INT 16
13606: PUSH
13607: LD_INT 20
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 22
13615: PUSH
13616: LD_INT 23
13618: PUSH
13619: LD_INT 25
13621: PUSH
13622: LD_INT 26
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 101
13643: PUSH
13644: LD_INT 102
13646: PUSH
13647: LD_INT 103
13649: PUSH
13650: LD_INT 105
13652: PUSH
13653: LD_INT 106
13655: PUSH
13656: LD_INT 108
13658: PUSH
13659: LD_INT 112
13661: PUSH
13662: LD_INT 116
13664: PUSH
13665: LD_INT 117
13667: PUSH
13668: LD_INT 118
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: ST_TO_ADDR
13687: GO 16090
13689: LD_INT 8
13691: DOUBLE
13692: EQUAL
13693: IFTRUE 13697
13695: GO 13837
13697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13698: LD_ADDR_VAR 0 2
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 6
13714: PUSH
13715: LD_INT 7
13717: PUSH
13718: LD_INT 8
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 31
13756: PUSH
13757: LD_INT 32
13759: PUSH
13760: LD_INT 36
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 101
13787: PUSH
13788: LD_INT 102
13790: PUSH
13791: LD_INT 103
13793: PUSH
13794: LD_INT 105
13796: PUSH
13797: LD_INT 106
13799: PUSH
13800: LD_INT 108
13802: PUSH
13803: LD_INT 109
13805: PUSH
13806: LD_INT 112
13808: PUSH
13809: LD_INT 116
13811: PUSH
13812: LD_INT 117
13814: PUSH
13815: LD_INT 118
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: ST_TO_ADDR
13835: GO 16090
13837: LD_INT 9
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 13993
13845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13846: LD_ADDR_VAR 0 2
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 4
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: LD_INT 6
13862: PUSH
13863: LD_INT 7
13865: PUSH
13866: LD_INT 8
13868: PUSH
13869: LD_INT 11
13871: PUSH
13872: LD_INT 12
13874: PUSH
13875: LD_INT 15
13877: PUSH
13878: LD_INT 16
13880: PUSH
13881: LD_INT 20
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_INT 23
13892: PUSH
13893: LD_INT 25
13895: PUSH
13896: LD_INT 26
13898: PUSH
13899: LD_INT 28
13901: PUSH
13902: LD_INT 30
13904: PUSH
13905: LD_INT 31
13907: PUSH
13908: LD_INT 32
13910: PUSH
13911: LD_INT 36
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 101
13939: PUSH
13940: LD_INT 102
13942: PUSH
13943: LD_INT 103
13945: PUSH
13946: LD_INT 105
13948: PUSH
13949: LD_INT 106
13951: PUSH
13952: LD_INT 108
13954: PUSH
13955: LD_INT 109
13957: PUSH
13958: LD_INT 112
13960: PUSH
13961: LD_INT 114
13963: PUSH
13964: LD_INT 116
13966: PUSH
13967: LD_INT 117
13969: PUSH
13970: LD_INT 118
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: ST_TO_ADDR
13991: GO 16090
13993: LD_INT 10
13995: DOUBLE
13996: EQUAL
13997: IFTRUE 14001
13999: GO 14197
14001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14002: LD_ADDR_VAR 0 2
14006: PUSH
14007: LD_INT 2
14009: PUSH
14010: LD_INT 4
14012: PUSH
14013: LD_INT 5
14015: PUSH
14016: LD_INT 6
14018: PUSH
14019: LD_INT 7
14021: PUSH
14022: LD_INT 8
14024: PUSH
14025: LD_INT 9
14027: PUSH
14028: LD_INT 10
14030: PUSH
14031: LD_INT 11
14033: PUSH
14034: LD_INT 12
14036: PUSH
14037: LD_INT 13
14039: PUSH
14040: LD_INT 14
14042: PUSH
14043: LD_INT 15
14045: PUSH
14046: LD_INT 16
14048: PUSH
14049: LD_INT 17
14051: PUSH
14052: LD_INT 18
14054: PUSH
14055: LD_INT 19
14057: PUSH
14058: LD_INT 20
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 23
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 26
14078: PUSH
14079: LD_INT 28
14081: PUSH
14082: LD_INT 30
14084: PUSH
14085: LD_INT 31
14087: PUSH
14088: LD_INT 32
14090: PUSH
14091: LD_INT 36
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 101
14127: PUSH
14128: LD_INT 102
14130: PUSH
14131: LD_INT 103
14133: PUSH
14134: LD_INT 104
14136: PUSH
14137: LD_INT 105
14139: PUSH
14140: LD_INT 106
14142: PUSH
14143: LD_INT 107
14145: PUSH
14146: LD_INT 108
14148: PUSH
14149: LD_INT 109
14151: PUSH
14152: LD_INT 110
14154: PUSH
14155: LD_INT 111
14157: PUSH
14158: LD_INT 112
14160: PUSH
14161: LD_INT 114
14163: PUSH
14164: LD_INT 116
14166: PUSH
14167: LD_INT 117
14169: PUSH
14170: LD_INT 118
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 16090
14197: LD_INT 11
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14409
14205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 3
14216: PUSH
14217: LD_INT 4
14219: PUSH
14220: LD_INT 5
14222: PUSH
14223: LD_INT 6
14225: PUSH
14226: LD_INT 7
14228: PUSH
14229: LD_INT 8
14231: PUSH
14232: LD_INT 9
14234: PUSH
14235: LD_INT 10
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_INT 12
14243: PUSH
14244: LD_INT 13
14246: PUSH
14247: LD_INT 14
14249: PUSH
14250: LD_INT 15
14252: PUSH
14253: LD_INT 16
14255: PUSH
14256: LD_INT 17
14258: PUSH
14259: LD_INT 18
14261: PUSH
14262: LD_INT 19
14264: PUSH
14265: LD_INT 20
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 23
14276: PUSH
14277: LD_INT 24
14279: PUSH
14280: LD_INT 25
14282: PUSH
14283: LD_INT 26
14285: PUSH
14286: LD_INT 28
14288: PUSH
14289: LD_INT 30
14291: PUSH
14292: LD_INT 31
14294: PUSH
14295: LD_INT 32
14297: PUSH
14298: LD_INT 34
14300: PUSH
14301: LD_INT 36
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 101
14339: PUSH
14340: LD_INT 102
14342: PUSH
14343: LD_INT 103
14345: PUSH
14346: LD_INT 104
14348: PUSH
14349: LD_INT 105
14351: PUSH
14352: LD_INT 106
14354: PUSH
14355: LD_INT 107
14357: PUSH
14358: LD_INT 108
14360: PUSH
14361: LD_INT 109
14363: PUSH
14364: LD_INT 110
14366: PUSH
14367: LD_INT 111
14369: PUSH
14370: LD_INT 112
14372: PUSH
14373: LD_INT 114
14375: PUSH
14376: LD_INT 116
14378: PUSH
14379: LD_INT 117
14381: PUSH
14382: LD_INT 118
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: ST_TO_ADDR
14407: GO 16090
14409: LD_INT 12
14411: DOUBLE
14412: EQUAL
14413: IFTRUE 14417
14415: GO 14637
14417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14418: LD_ADDR_VAR 0 2
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: LD_INT 4
14434: PUSH
14435: LD_INT 5
14437: PUSH
14438: LD_INT 6
14440: PUSH
14441: LD_INT 7
14443: PUSH
14444: LD_INT 8
14446: PUSH
14447: LD_INT 9
14449: PUSH
14450: LD_INT 10
14452: PUSH
14453: LD_INT 11
14455: PUSH
14456: LD_INT 12
14458: PUSH
14459: LD_INT 13
14461: PUSH
14462: LD_INT 14
14464: PUSH
14465: LD_INT 15
14467: PUSH
14468: LD_INT 16
14470: PUSH
14471: LD_INT 17
14473: PUSH
14474: LD_INT 18
14476: PUSH
14477: LD_INT 19
14479: PUSH
14480: LD_INT 20
14482: PUSH
14483: LD_INT 21
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_INT 23
14491: PUSH
14492: LD_INT 24
14494: PUSH
14495: LD_INT 25
14497: PUSH
14498: LD_INT 26
14500: PUSH
14501: LD_INT 27
14503: PUSH
14504: LD_INT 28
14506: PUSH
14507: LD_INT 30
14509: PUSH
14510: LD_INT 31
14512: PUSH
14513: LD_INT 32
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: LD_INT 34
14521: PUSH
14522: LD_INT 36
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 101
14563: PUSH
14564: LD_INT 102
14566: PUSH
14567: LD_INT 103
14569: PUSH
14570: LD_INT 104
14572: PUSH
14573: LD_INT 105
14575: PUSH
14576: LD_INT 106
14578: PUSH
14579: LD_INT 107
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 110
14590: PUSH
14591: LD_INT 111
14593: PUSH
14594: LD_INT 112
14596: PUSH
14597: LD_INT 113
14599: PUSH
14600: LD_INT 114
14602: PUSH
14603: LD_INT 116
14605: PUSH
14606: LD_INT 117
14608: PUSH
14609: LD_INT 118
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: ST_TO_ADDR
14635: GO 16090
14637: LD_INT 13
14639: DOUBLE
14640: EQUAL
14641: IFTRUE 14645
14643: GO 14853
14645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14646: LD_ADDR_VAR 0 2
14650: PUSH
14651: LD_INT 1
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: LD_INT 3
14659: PUSH
14660: LD_INT 4
14662: PUSH
14663: LD_INT 5
14665: PUSH
14666: LD_INT 8
14668: PUSH
14669: LD_INT 9
14671: PUSH
14672: LD_INT 10
14674: PUSH
14675: LD_INT 11
14677: PUSH
14678: LD_INT 12
14680: PUSH
14681: LD_INT 14
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: LD_INT 16
14689: PUSH
14690: LD_INT 17
14692: PUSH
14693: LD_INT 18
14695: PUSH
14696: LD_INT 19
14698: PUSH
14699: LD_INT 20
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_INT 23
14710: PUSH
14711: LD_INT 24
14713: PUSH
14714: LD_INT 25
14716: PUSH
14717: LD_INT 26
14719: PUSH
14720: LD_INT 27
14722: PUSH
14723: LD_INT 28
14725: PUSH
14726: LD_INT 30
14728: PUSH
14729: LD_INT 31
14731: PUSH
14732: LD_INT 32
14734: PUSH
14735: LD_INT 33
14737: PUSH
14738: LD_INT 34
14740: PUSH
14741: LD_INT 36
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 101
14779: PUSH
14780: LD_INT 102
14782: PUSH
14783: LD_INT 103
14785: PUSH
14786: LD_INT 104
14788: PUSH
14789: LD_INT 105
14791: PUSH
14792: LD_INT 106
14794: PUSH
14795: LD_INT 107
14797: PUSH
14798: LD_INT 108
14800: PUSH
14801: LD_INT 109
14803: PUSH
14804: LD_INT 110
14806: PUSH
14807: LD_INT 111
14809: PUSH
14810: LD_INT 112
14812: PUSH
14813: LD_INT 113
14815: PUSH
14816: LD_INT 114
14818: PUSH
14819: LD_INT 116
14821: PUSH
14822: LD_INT 117
14824: PUSH
14825: LD_INT 118
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: ST_TO_ADDR
14851: GO 16090
14853: LD_INT 14
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 15085
14861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14862: LD_ADDR_VAR 0 2
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: LD_INT 2
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: LD_INT 4
14878: PUSH
14879: LD_INT 5
14881: PUSH
14882: LD_INT 6
14884: PUSH
14885: LD_INT 7
14887: PUSH
14888: LD_INT 8
14890: PUSH
14891: LD_INT 9
14893: PUSH
14894: LD_INT 10
14896: PUSH
14897: LD_INT 11
14899: PUSH
14900: LD_INT 12
14902: PUSH
14903: LD_INT 13
14905: PUSH
14906: LD_INT 14
14908: PUSH
14909: LD_INT 15
14911: PUSH
14912: LD_INT 16
14914: PUSH
14915: LD_INT 17
14917: PUSH
14918: LD_INT 18
14920: PUSH
14921: LD_INT 19
14923: PUSH
14924: LD_INT 20
14926: PUSH
14927: LD_INT 21
14929: PUSH
14930: LD_INT 22
14932: PUSH
14933: LD_INT 23
14935: PUSH
14936: LD_INT 24
14938: PUSH
14939: LD_INT 25
14941: PUSH
14942: LD_INT 26
14944: PUSH
14945: LD_INT 27
14947: PUSH
14948: LD_INT 28
14950: PUSH
14951: LD_INT 29
14953: PUSH
14954: LD_INT 30
14956: PUSH
14957: LD_INT 31
14959: PUSH
14960: LD_INT 32
14962: PUSH
14963: LD_INT 33
14965: PUSH
14966: LD_INT 34
14968: PUSH
14969: LD_INT 36
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 101
15011: PUSH
15012: LD_INT 102
15014: PUSH
15015: LD_INT 103
15017: PUSH
15018: LD_INT 104
15020: PUSH
15021: LD_INT 105
15023: PUSH
15024: LD_INT 106
15026: PUSH
15027: LD_INT 107
15029: PUSH
15030: LD_INT 108
15032: PUSH
15033: LD_INT 109
15035: PUSH
15036: LD_INT 110
15038: PUSH
15039: LD_INT 111
15041: PUSH
15042: LD_INT 112
15044: PUSH
15045: LD_INT 113
15047: PUSH
15048: LD_INT 114
15050: PUSH
15051: LD_INT 116
15053: PUSH
15054: LD_INT 117
15056: PUSH
15057: LD_INT 118
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: ST_TO_ADDR
15083: GO 16090
15085: LD_INT 15
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15317
15093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: LD_INT 2
15104: PUSH
15105: LD_INT 3
15107: PUSH
15108: LD_INT 4
15110: PUSH
15111: LD_INT 5
15113: PUSH
15114: LD_INT 6
15116: PUSH
15117: LD_INT 7
15119: PUSH
15120: LD_INT 8
15122: PUSH
15123: LD_INT 9
15125: PUSH
15126: LD_INT 10
15128: PUSH
15129: LD_INT 11
15131: PUSH
15132: LD_INT 12
15134: PUSH
15135: LD_INT 13
15137: PUSH
15138: LD_INT 14
15140: PUSH
15141: LD_INT 15
15143: PUSH
15144: LD_INT 16
15146: PUSH
15147: LD_INT 17
15149: PUSH
15150: LD_INT 18
15152: PUSH
15153: LD_INT 19
15155: PUSH
15156: LD_INT 20
15158: PUSH
15159: LD_INT 21
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_INT 23
15167: PUSH
15168: LD_INT 24
15170: PUSH
15171: LD_INT 25
15173: PUSH
15174: LD_INT 26
15176: PUSH
15177: LD_INT 27
15179: PUSH
15180: LD_INT 28
15182: PUSH
15183: LD_INT 29
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: LD_INT 31
15191: PUSH
15192: LD_INT 32
15194: PUSH
15195: LD_INT 33
15197: PUSH
15198: LD_INT 34
15200: PUSH
15201: LD_INT 36
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 101
15243: PUSH
15244: LD_INT 102
15246: PUSH
15247: LD_INT 103
15249: PUSH
15250: LD_INT 104
15252: PUSH
15253: LD_INT 105
15255: PUSH
15256: LD_INT 106
15258: PUSH
15259: LD_INT 107
15261: PUSH
15262: LD_INT 108
15264: PUSH
15265: LD_INT 109
15267: PUSH
15268: LD_INT 110
15270: PUSH
15271: LD_INT 111
15273: PUSH
15274: LD_INT 112
15276: PUSH
15277: LD_INT 113
15279: PUSH
15280: LD_INT 114
15282: PUSH
15283: LD_INT 116
15285: PUSH
15286: LD_INT 117
15288: PUSH
15289: LD_INT 118
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: ST_TO_ADDR
15315: GO 16090
15317: LD_INT 16
15319: DOUBLE
15320: EQUAL
15321: IFTRUE 15325
15323: GO 15461
15325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: LD_INT 7
15342: PUSH
15343: LD_INT 11
15345: PUSH
15346: LD_INT 12
15348: PUSH
15349: LD_INT 15
15351: PUSH
15352: LD_INT 16
15354: PUSH
15355: LD_INT 20
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 22
15363: PUSH
15364: LD_INT 23
15366: PUSH
15367: LD_INT 25
15369: PUSH
15370: LD_INT 26
15372: PUSH
15373: LD_INT 30
15375: PUSH
15376: LD_INT 31
15378: PUSH
15379: LD_INT 32
15381: PUSH
15382: LD_INT 33
15384: PUSH
15385: LD_INT 34
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 101
15411: PUSH
15412: LD_INT 102
15414: PUSH
15415: LD_INT 103
15417: PUSH
15418: LD_INT 106
15420: PUSH
15421: LD_INT 108
15423: PUSH
15424: LD_INT 112
15426: PUSH
15427: LD_INT 113
15429: PUSH
15430: LD_INT 114
15432: PUSH
15433: LD_INT 116
15435: PUSH
15436: LD_INT 117
15438: PUSH
15439: LD_INT 118
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: ST_TO_ADDR
15459: GO 16090
15461: LD_INT 17
15463: DOUBLE
15464: EQUAL
15465: IFTRUE 15469
15467: GO 15693
15469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15470: LD_ADDR_VAR 0 2
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 3
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: LD_INT 6
15492: PUSH
15493: LD_INT 7
15495: PUSH
15496: LD_INT 8
15498: PUSH
15499: LD_INT 9
15501: PUSH
15502: LD_INT 10
15504: PUSH
15505: LD_INT 11
15507: PUSH
15508: LD_INT 12
15510: PUSH
15511: LD_INT 13
15513: PUSH
15514: LD_INT 14
15516: PUSH
15517: LD_INT 15
15519: PUSH
15520: LD_INT 16
15522: PUSH
15523: LD_INT 17
15525: PUSH
15526: LD_INT 18
15528: PUSH
15529: LD_INT 19
15531: PUSH
15532: LD_INT 20
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 22
15540: PUSH
15541: LD_INT 23
15543: PUSH
15544: LD_INT 24
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 26
15552: PUSH
15553: LD_INT 27
15555: PUSH
15556: LD_INT 28
15558: PUSH
15559: LD_INT 29
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 31
15567: PUSH
15568: LD_INT 32
15570: PUSH
15571: LD_INT 33
15573: PUSH
15574: LD_INT 34
15576: PUSH
15577: LD_INT 36
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 101
15619: PUSH
15620: LD_INT 102
15622: PUSH
15623: LD_INT 103
15625: PUSH
15626: LD_INT 104
15628: PUSH
15629: LD_INT 105
15631: PUSH
15632: LD_INT 106
15634: PUSH
15635: LD_INT 107
15637: PUSH
15638: LD_INT 108
15640: PUSH
15641: LD_INT 109
15643: PUSH
15644: LD_INT 110
15646: PUSH
15647: LD_INT 111
15649: PUSH
15650: LD_INT 112
15652: PUSH
15653: LD_INT 113
15655: PUSH
15656: LD_INT 114
15658: PUSH
15659: LD_INT 116
15661: PUSH
15662: LD_INT 117
15664: PUSH
15665: LD_INT 118
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
15691: GO 16090
15693: LD_INT 18
15695: DOUBLE
15696: EQUAL
15697: IFTRUE 15701
15699: GO 15849
15701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 7
15718: PUSH
15719: LD_INT 11
15721: PUSH
15722: LD_INT 12
15724: PUSH
15725: LD_INT 15
15727: PUSH
15728: LD_INT 16
15730: PUSH
15731: LD_INT 20
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_INT 23
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 26
15748: PUSH
15749: LD_INT 30
15751: PUSH
15752: LD_INT 31
15754: PUSH
15755: LD_INT 32
15757: PUSH
15758: LD_INT 33
15760: PUSH
15761: LD_INT 34
15763: PUSH
15764: LD_INT 35
15766: PUSH
15767: LD_INT 36
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 101
15795: PUSH
15796: LD_INT 102
15798: PUSH
15799: LD_INT 103
15801: PUSH
15802: LD_INT 106
15804: PUSH
15805: LD_INT 108
15807: PUSH
15808: LD_INT 112
15810: PUSH
15811: LD_INT 113
15813: PUSH
15814: LD_INT 114
15816: PUSH
15817: LD_INT 115
15819: PUSH
15820: LD_INT 116
15822: PUSH
15823: LD_INT 117
15825: PUSH
15826: LD_INT 118
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: ST_TO_ADDR
15847: GO 16090
15849: LD_INT 19
15851: DOUBLE
15852: EQUAL
15853: IFTRUE 15857
15855: GO 16089
15857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: LD_INT 4
15874: PUSH
15875: LD_INT 5
15877: PUSH
15878: LD_INT 6
15880: PUSH
15881: LD_INT 7
15883: PUSH
15884: LD_INT 8
15886: PUSH
15887: LD_INT 9
15889: PUSH
15890: LD_INT 10
15892: PUSH
15893: LD_INT 11
15895: PUSH
15896: LD_INT 12
15898: PUSH
15899: LD_INT 13
15901: PUSH
15902: LD_INT 14
15904: PUSH
15905: LD_INT 15
15907: PUSH
15908: LD_INT 16
15910: PUSH
15911: LD_INT 17
15913: PUSH
15914: LD_INT 18
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: LD_INT 20
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_INT 23
15931: PUSH
15932: LD_INT 24
15934: PUSH
15935: LD_INT 25
15937: PUSH
15938: LD_INT 26
15940: PUSH
15941: LD_INT 27
15943: PUSH
15944: LD_INT 28
15946: PUSH
15947: LD_INT 29
15949: PUSH
15950: LD_INT 30
15952: PUSH
15953: LD_INT 31
15955: PUSH
15956: LD_INT 32
15958: PUSH
15959: LD_INT 33
15961: PUSH
15962: LD_INT 34
15964: PUSH
15965: LD_INT 35
15967: PUSH
15968: LD_INT 36
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 101
16011: PUSH
16012: LD_INT 102
16014: PUSH
16015: LD_INT 103
16017: PUSH
16018: LD_INT 104
16020: PUSH
16021: LD_INT 105
16023: PUSH
16024: LD_INT 106
16026: PUSH
16027: LD_INT 107
16029: PUSH
16030: LD_INT 108
16032: PUSH
16033: LD_INT 109
16035: PUSH
16036: LD_INT 110
16038: PUSH
16039: LD_INT 111
16041: PUSH
16042: LD_INT 112
16044: PUSH
16045: LD_INT 113
16047: PUSH
16048: LD_INT 114
16050: PUSH
16051: LD_INT 115
16053: PUSH
16054: LD_INT 116
16056: PUSH
16057: LD_INT 117
16059: PUSH
16060: LD_INT 118
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: ST_TO_ADDR
16087: GO 16090
16089: POP
// end else
16090: GO 16321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16092: LD_ADDR_VAR 0 2
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: LD_INT 2
16102: PUSH
16103: LD_INT 3
16105: PUSH
16106: LD_INT 4
16108: PUSH
16109: LD_INT 5
16111: PUSH
16112: LD_INT 6
16114: PUSH
16115: LD_INT 7
16117: PUSH
16118: LD_INT 8
16120: PUSH
16121: LD_INT 9
16123: PUSH
16124: LD_INT 10
16126: PUSH
16127: LD_INT 11
16129: PUSH
16130: LD_INT 12
16132: PUSH
16133: LD_INT 13
16135: PUSH
16136: LD_INT 14
16138: PUSH
16139: LD_INT 15
16141: PUSH
16142: LD_INT 16
16144: PUSH
16145: LD_INT 17
16147: PUSH
16148: LD_INT 18
16150: PUSH
16151: LD_INT 19
16153: PUSH
16154: LD_INT 20
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 22
16162: PUSH
16163: LD_INT 23
16165: PUSH
16166: LD_INT 24
16168: PUSH
16169: LD_INT 25
16171: PUSH
16172: LD_INT 26
16174: PUSH
16175: LD_INT 27
16177: PUSH
16178: LD_INT 28
16180: PUSH
16181: LD_INT 29
16183: PUSH
16184: LD_INT 30
16186: PUSH
16187: LD_INT 31
16189: PUSH
16190: LD_INT 32
16192: PUSH
16193: LD_INT 33
16195: PUSH
16196: LD_INT 34
16198: PUSH
16199: LD_INT 35
16201: PUSH
16202: LD_INT 36
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 101
16245: PUSH
16246: LD_INT 102
16248: PUSH
16249: LD_INT 103
16251: PUSH
16252: LD_INT 104
16254: PUSH
16255: LD_INT 105
16257: PUSH
16258: LD_INT 106
16260: PUSH
16261: LD_INT 107
16263: PUSH
16264: LD_INT 108
16266: PUSH
16267: LD_INT 109
16269: PUSH
16270: LD_INT 110
16272: PUSH
16273: LD_INT 111
16275: PUSH
16276: LD_INT 112
16278: PUSH
16279: LD_INT 113
16281: PUSH
16282: LD_INT 114
16284: PUSH
16285: LD_INT 115
16287: PUSH
16288: LD_INT 116
16290: PUSH
16291: LD_INT 117
16293: PUSH
16294: LD_INT 118
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: ST_TO_ADDR
// if result then
16321: LD_VAR 0 2
16325: IFFALSE 17111
// begin normal :=  ;
16327: LD_ADDR_VAR 0 5
16331: PUSH
16332: LD_STRING 
16334: ST_TO_ADDR
// hardcore :=  ;
16335: LD_ADDR_VAR 0 6
16339: PUSH
16340: LD_STRING 
16342: ST_TO_ADDR
// active :=  ;
16343: LD_ADDR_VAR 0 7
16347: PUSH
16348: LD_STRING 
16350: ST_TO_ADDR
// for i = 1 to normalCounter do
16351: LD_ADDR_VAR 0 8
16355: PUSH
16356: DOUBLE
16357: LD_INT 1
16359: DEC
16360: ST_TO_ADDR
16361: LD_EXP 48
16365: PUSH
16366: FOR_TO
16367: IFFALSE 16468
// begin tmp := 0 ;
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: LD_STRING 0
16376: ST_TO_ADDR
// if result [ 1 ] then
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: IFFALSE 16450
// if result [ 1 ] [ 1 ] = i then
16387: LD_VAR 0 2
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PUSH
16400: LD_VAR 0 8
16404: EQUAL
16405: IFFALSE 16450
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16407: LD_ADDR_VAR 0 2
16411: PUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: LD_VAR 0 2
16424: PUSH
16425: LD_INT 1
16427: ARRAY
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 3
16436: PPUSH
16437: CALL_OW 1
16441: ST_TO_ADDR
// tmp := 1 ;
16442: LD_ADDR_VAR 0 3
16446: PUSH
16447: LD_STRING 1
16449: ST_TO_ADDR
// end ; normal := normal & tmp ;
16450: LD_ADDR_VAR 0 5
16454: PUSH
16455: LD_VAR 0 5
16459: PUSH
16460: LD_VAR 0 3
16464: STR
16465: ST_TO_ADDR
// end ;
16466: GO 16366
16468: POP
16469: POP
// for i = 1 to hardcoreCounter do
16470: LD_ADDR_VAR 0 8
16474: PUSH
16475: DOUBLE
16476: LD_INT 1
16478: DEC
16479: ST_TO_ADDR
16480: LD_EXP 49
16484: PUSH
16485: FOR_TO
16486: IFFALSE 16591
// begin tmp := 0 ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_STRING 0
16495: ST_TO_ADDR
// if result [ 2 ] then
16496: LD_VAR 0 2
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: IFFALSE 16573
// if result [ 2 ] [ 1 ] = 100 + i then
16506: LD_VAR 0 2
16510: PUSH
16511: LD_INT 2
16513: ARRAY
16514: PUSH
16515: LD_INT 1
16517: ARRAY
16518: PUSH
16519: LD_INT 100
16521: PUSH
16522: LD_VAR 0 8
16526: PLUS
16527: EQUAL
16528: IFFALSE 16573
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16530: LD_ADDR_VAR 0 2
16534: PUSH
16535: LD_VAR 0 2
16539: PPUSH
16540: LD_INT 2
16542: PPUSH
16543: LD_VAR 0 2
16547: PUSH
16548: LD_INT 2
16550: ARRAY
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 3
16559: PPUSH
16560: CALL_OW 1
16564: ST_TO_ADDR
// tmp := 1 ;
16565: LD_ADDR_VAR 0 3
16569: PUSH
16570: LD_STRING 1
16572: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16573: LD_ADDR_VAR 0 6
16577: PUSH
16578: LD_VAR 0 6
16582: PUSH
16583: LD_VAR 0 3
16587: STR
16588: ST_TO_ADDR
// end ;
16589: GO 16485
16591: POP
16592: POP
// if isGameLoad then
16593: LD_VAR 0 1
16597: IFFALSE 17072
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16599: LD_ADDR_VAR 0 4
16603: PUSH
16604: LD_EXP 52
16608: PUSH
16609: LD_EXP 51
16613: PUSH
16614: LD_EXP 53
16618: PUSH
16619: LD_EXP 50
16623: PUSH
16624: LD_EXP 54
16628: PUSH
16629: LD_EXP 55
16633: PUSH
16634: LD_EXP 56
16638: PUSH
16639: LD_EXP 57
16643: PUSH
16644: LD_EXP 58
16648: PUSH
16649: LD_EXP 59
16653: PUSH
16654: LD_EXP 60
16658: PUSH
16659: LD_EXP 61
16663: PUSH
16664: LD_EXP 62
16668: PUSH
16669: LD_EXP 63
16673: PUSH
16674: LD_EXP 71
16678: PUSH
16679: LD_EXP 72
16683: PUSH
16684: LD_EXP 73
16688: PUSH
16689: LD_EXP 74
16693: PUSH
16694: LD_EXP 76
16698: PUSH
16699: LD_EXP 77
16703: PUSH
16704: LD_EXP 78
16708: PUSH
16709: LD_EXP 81
16713: PUSH
16714: LD_EXP 83
16718: PUSH
16719: LD_EXP 84
16723: PUSH
16724: LD_EXP 85
16728: PUSH
16729: LD_EXP 87
16733: PUSH
16734: LD_EXP 88
16738: PUSH
16739: LD_EXP 91
16743: PUSH
16744: LD_EXP 92
16748: PUSH
16749: LD_EXP 93
16753: PUSH
16754: LD_EXP 94
16758: PUSH
16759: LD_EXP 95
16763: PUSH
16764: LD_EXP 96
16768: PUSH
16769: LD_EXP 97
16773: PUSH
16774: LD_EXP 98
16778: PUSH
16779: LD_EXP 99
16783: PUSH
16784: LD_EXP 64
16788: PUSH
16789: LD_EXP 65
16793: PUSH
16794: LD_EXP 68
16798: PUSH
16799: LD_EXP 69
16803: PUSH
16804: LD_EXP 70
16808: PUSH
16809: LD_EXP 66
16813: PUSH
16814: LD_EXP 67
16818: PUSH
16819: LD_EXP 75
16823: PUSH
16824: LD_EXP 79
16828: PUSH
16829: LD_EXP 80
16833: PUSH
16834: LD_EXP 82
16838: PUSH
16839: LD_EXP 86
16843: PUSH
16844: LD_EXP 89
16848: PUSH
16849: LD_EXP 90
16853: PUSH
16854: LD_EXP 100
16858: PUSH
16859: LD_EXP 101
16863: PUSH
16864: LD_EXP 102
16868: PUSH
16869: LD_EXP 103
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: ST_TO_ADDR
// tmp :=  ;
16930: LD_ADDR_VAR 0 3
16934: PUSH
16935: LD_STRING 
16937: ST_TO_ADDR
// for i = 1 to normalCounter do
16938: LD_ADDR_VAR 0 8
16942: PUSH
16943: DOUBLE
16944: LD_INT 1
16946: DEC
16947: ST_TO_ADDR
16948: LD_EXP 48
16952: PUSH
16953: FOR_TO
16954: IFFALSE 16990
// begin if flags [ i ] then
16956: LD_VAR 0 4
16960: PUSH
16961: LD_VAR 0 8
16965: ARRAY
16966: IFFALSE 16988
// tmp := tmp & i & ; ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_VAR 0 3
16977: PUSH
16978: LD_VAR 0 8
16982: STR
16983: PUSH
16984: LD_STRING ;
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16953
16990: POP
16991: POP
// for i = 1 to hardcoreCounter do
16992: LD_ADDR_VAR 0 8
16996: PUSH
16997: DOUBLE
16998: LD_INT 1
17000: DEC
17001: ST_TO_ADDR
17002: LD_EXP 49
17006: PUSH
17007: FOR_TO
17008: IFFALSE 17054
// begin if flags [ normalCounter + i ] then
17010: LD_VAR 0 4
17014: PUSH
17015: LD_EXP 48
17019: PUSH
17020: LD_VAR 0 8
17024: PLUS
17025: ARRAY
17026: IFFALSE 17052
// tmp := tmp & ( 100 + i ) & ; ;
17028: LD_ADDR_VAR 0 3
17032: PUSH
17033: LD_VAR 0 3
17037: PUSH
17038: LD_INT 100
17040: PUSH
17041: LD_VAR 0 8
17045: PLUS
17046: STR
17047: PUSH
17048: LD_STRING ;
17050: STR
17051: ST_TO_ADDR
// end ;
17052: GO 17007
17054: POP
17055: POP
// if tmp then
17056: LD_VAR 0 3
17060: IFFALSE 17072
// active := tmp ;
17062: LD_ADDR_VAR 0 7
17066: PUSH
17067: LD_VAR 0 3
17071: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17072: LD_STRING getStreamItemsFromMission("
17074: PUSH
17075: LD_VAR 0 5
17079: STR
17080: PUSH
17081: LD_STRING ","
17083: STR
17084: PUSH
17085: LD_VAR 0 6
17089: STR
17090: PUSH
17091: LD_STRING ","
17093: STR
17094: PUSH
17095: LD_VAR 0 7
17099: STR
17100: PUSH
17101: LD_STRING ")
17103: STR
17104: PPUSH
17105: CALL_OW 559
// end else
17109: GO 17118
// ToLua ( getStreamItemsFromMission("","","") ) ;
17111: LD_STRING getStreamItemsFromMission("","","")
17113: PPUSH
17114: CALL_OW 559
// end ;
17118: LD_VAR 0 2
17122: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17123: LD_EXP 47
17127: PUSH
17128: LD_EXP 52
17132: AND
17133: IFFALSE 17257
17135: GO 17137
17137: DISABLE
17138: LD_INT 0
17140: PPUSH
17141: PPUSH
// begin enable ;
17142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_INT 22
17150: PUSH
17151: LD_OWVAR 2
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: LD_INT 34
17165: PUSH
17166: LD_INT 7
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 34
17175: PUSH
17176: LD_INT 45
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 34
17185: PUSH
17186: LD_INT 28
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 34
17195: PUSH
17196: LD_INT 47
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: ST_TO_ADDR
// if not tmp then
17219: LD_VAR 0 2
17223: NOT
17224: IFFALSE 17228
// exit ;
17226: GO 17257
// for i in tmp do
17228: LD_ADDR_VAR 0 1
17232: PUSH
17233: LD_VAR 0 2
17237: PUSH
17238: FOR_IN
17239: IFFALSE 17255
// begin SetLives ( i , 0 ) ;
17241: LD_VAR 0 1
17245: PPUSH
17246: LD_INT 0
17248: PPUSH
17249: CALL_OW 234
// end ;
17253: GO 17238
17255: POP
17256: POP
// end ;
17257: PPOPN 2
17259: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17260: LD_EXP 47
17264: PUSH
17265: LD_EXP 53
17269: AND
17270: IFFALSE 17354
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
// begin enable ;
17279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_OWVAR 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 32
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PPUSH
17311: CALL_OW 69
17315: ST_TO_ADDR
// if not tmp then
17316: LD_VAR 0 2
17320: NOT
17321: IFFALSE 17325
// exit ;
17323: GO 17354
// for i in tmp do
17325: LD_ADDR_VAR 0 1
17329: PUSH
17330: LD_VAR 0 2
17334: PUSH
17335: FOR_IN
17336: IFFALSE 17352
// begin SetLives ( i , 0 ) ;
17338: LD_VAR 0 1
17342: PPUSH
17343: LD_INT 0
17345: PPUSH
17346: CALL_OW 234
// end ;
17350: GO 17335
17352: POP
17353: POP
// end ;
17354: PPOPN 2
17356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17357: LD_EXP 47
17361: PUSH
17362: LD_EXP 50
17366: AND
17367: IFFALSE 17460
17369: GO 17371
17371: DISABLE
17372: LD_INT 0
17374: PPUSH
// begin enable ;
17375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17376: LD_ADDR_VAR 0 1
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_OWVAR 2
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 2
17395: PUSH
17396: LD_INT 25
17398: PUSH
17399: LD_INT 5
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 25
17408: PUSH
17409: LD_INT 9
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 25
17418: PUSH
17419: LD_INT 8
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: PUSH
17441: FOR_IN
17442: IFFALSE 17458
// begin SetClass ( i , 1 ) ;
17444: LD_VAR 0 1
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 336
// end ;
17456: GO 17441
17458: POP
17459: POP
// end ;
17460: PPOPN 1
17462: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17463: LD_EXP 47
17467: PUSH
17468: LD_EXP 51
17472: AND
17473: PUSH
17474: LD_OWVAR 65
17478: PUSH
17479: LD_INT 7
17481: LESS
17482: AND
17483: IFFALSE 17497
17485: GO 17487
17487: DISABLE
// begin enable ;
17488: ENABLE
// game_speed := 7 ;
17489: LD_ADDR_OWVAR 65
17493: PUSH
17494: LD_INT 7
17496: ST_TO_ADDR
// end ;
17497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17498: LD_EXP 47
17502: PUSH
17503: LD_EXP 54
17507: AND
17508: IFFALSE 17710
17510: GO 17512
17512: DISABLE
17513: LD_INT 0
17515: PPUSH
17516: PPUSH
17517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: LD_INT 81
17525: PUSH
17526: LD_OWVAR 2
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: ST_TO_ADDR
// if not tmp then
17554: LD_VAR 0 3
17558: NOT
17559: IFFALSE 17563
// exit ;
17561: GO 17710
// if tmp > 5 then
17563: LD_VAR 0 3
17567: PUSH
17568: LD_INT 5
17570: GREATER
17571: IFFALSE 17583
// k := 5 else
17573: LD_ADDR_VAR 0 2
17577: PUSH
17578: LD_INT 5
17580: ST_TO_ADDR
17581: GO 17593
// k := tmp ;
17583: LD_ADDR_VAR 0 2
17587: PUSH
17588: LD_VAR 0 3
17592: ST_TO_ADDR
// for i := 1 to k do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: DOUBLE
17599: LD_INT 1
17601: DEC
17602: ST_TO_ADDR
17603: LD_VAR 0 2
17607: PUSH
17608: FOR_TO
17609: IFFALSE 17708
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17611: LD_VAR 0 3
17615: PUSH
17616: LD_VAR 0 1
17620: ARRAY
17621: PPUSH
17622: LD_VAR 0 1
17626: PUSH
17627: LD_INT 4
17629: MOD
17630: PUSH
17631: LD_INT 1
17633: PLUS
17634: PPUSH
17635: CALL_OW 259
17639: PUSH
17640: LD_INT 10
17642: LESS
17643: IFFALSE 17706
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17645: LD_VAR 0 3
17649: PUSH
17650: LD_VAR 0 1
17654: ARRAY
17655: PPUSH
17656: LD_VAR 0 1
17660: PUSH
17661: LD_INT 4
17663: MOD
17664: PUSH
17665: LD_INT 1
17667: PLUS
17668: PPUSH
17669: LD_VAR 0 3
17673: PUSH
17674: LD_VAR 0 1
17678: ARRAY
17679: PPUSH
17680: LD_VAR 0 1
17684: PUSH
17685: LD_INT 4
17687: MOD
17688: PUSH
17689: LD_INT 1
17691: PLUS
17692: PPUSH
17693: CALL_OW 259
17697: PUSH
17698: LD_INT 1
17700: PLUS
17701: PPUSH
17702: CALL_OW 237
17706: GO 17608
17708: POP
17709: POP
// end ;
17710: PPOPN 3
17712: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17713: LD_EXP 47
17717: PUSH
17718: LD_EXP 55
17722: AND
17723: IFFALSE 17743
17725: GO 17727
17727: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17728: LD_INT 4
17730: PPUSH
17731: LD_OWVAR 2
17735: PPUSH
17736: LD_INT 0
17738: PPUSH
17739: CALL_OW 324
17743: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17744: LD_EXP 47
17748: PUSH
17749: LD_EXP 84
17753: AND
17754: IFFALSE 17774
17756: GO 17758
17758: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17759: LD_INT 19
17761: PPUSH
17762: LD_OWVAR 2
17766: PPUSH
17767: LD_INT 0
17769: PPUSH
17770: CALL_OW 324
17774: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17775: LD_EXP 47
17779: PUSH
17780: LD_EXP 56
17784: AND
17785: IFFALSE 17887
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
// begin enable ;
17794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17795: LD_ADDR_VAR 0 2
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_OWVAR 2
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 2
17814: PUSH
17815: LD_INT 34
17817: PUSH
17818: LD_INT 11
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 34
17827: PUSH
17828: LD_INT 30
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: ST_TO_ADDR
// if not tmp then
17849: LD_VAR 0 2
17853: NOT
17854: IFFALSE 17858
// exit ;
17856: GO 17887
// for i in tmp do
17858: LD_ADDR_VAR 0 1
17862: PUSH
17863: LD_VAR 0 2
17867: PUSH
17868: FOR_IN
17869: IFFALSE 17885
// begin SetLives ( i , 0 ) ;
17871: LD_VAR 0 1
17875: PPUSH
17876: LD_INT 0
17878: PPUSH
17879: CALL_OW 234
// end ;
17883: GO 17868
17885: POP
17886: POP
// end ;
17887: PPOPN 2
17889: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17890: LD_EXP 47
17894: PUSH
17895: LD_EXP 57
17899: AND
17900: IFFALSE 17920
17902: GO 17904
17904: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17905: LD_INT 32
17907: PPUSH
17908: LD_OWVAR 2
17912: PPUSH
17913: LD_INT 0
17915: PPUSH
17916: CALL_OW 324
17920: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17921: LD_EXP 47
17925: PUSH
17926: LD_EXP 58
17930: AND
17931: IFFALSE 18112
17933: GO 17935
17935: DISABLE
17936: LD_INT 0
17938: PPUSH
17939: PPUSH
17940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17941: LD_ADDR_VAR 0 2
17945: PUSH
17946: LD_INT 22
17948: PUSH
17949: LD_OWVAR 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 33
17960: PUSH
17961: LD_INT 3
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 69
17976: ST_TO_ADDR
// if not tmp then
17977: LD_VAR 0 2
17981: NOT
17982: IFFALSE 17986
// exit ;
17984: GO 18112
// side := 0 ;
17986: LD_ADDR_VAR 0 3
17990: PUSH
17991: LD_INT 0
17993: ST_TO_ADDR
// for i := 1 to 8 do
17994: LD_ADDR_VAR 0 1
17998: PUSH
17999: DOUBLE
18000: LD_INT 1
18002: DEC
18003: ST_TO_ADDR
18004: LD_INT 8
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18056
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18010: LD_OWVAR 2
18014: PUSH
18015: LD_VAR 0 1
18019: NONEQUAL
18020: PUSH
18021: LD_OWVAR 2
18025: PPUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 81
18035: PUSH
18036: LD_INT 2
18038: EQUAL
18039: AND
18040: IFFALSE 18054
// begin side := i ;
18042: LD_ADDR_VAR 0 3
18046: PUSH
18047: LD_VAR 0 1
18051: ST_TO_ADDR
// break ;
18052: GO 18056
// end ;
18054: GO 18007
18056: POP
18057: POP
// if not side then
18058: LD_VAR 0 3
18062: NOT
18063: IFFALSE 18067
// exit ;
18065: GO 18112
// for i := 1 to tmp do
18067: LD_ADDR_VAR 0 1
18071: PUSH
18072: DOUBLE
18073: LD_INT 1
18075: DEC
18076: ST_TO_ADDR
18077: LD_VAR 0 2
18081: PUSH
18082: FOR_TO
18083: IFFALSE 18110
// if Prob ( 60 ) then
18085: LD_INT 60
18087: PPUSH
18088: CALL_OW 13
18092: IFFALSE 18108
// SetSide ( i , side ) ;
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: CALL_OW 235
18108: GO 18082
18110: POP
18111: POP
// end ;
18112: PPOPN 3
18114: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18115: LD_EXP 47
18119: PUSH
18120: LD_EXP 60
18124: AND
18125: IFFALSE 18244
18127: GO 18129
18129: DISABLE
18130: LD_INT 0
18132: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18133: LD_ADDR_VAR 0 1
18137: PUSH
18138: LD_INT 22
18140: PUSH
18141: LD_OWVAR 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 21
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 3
18162: PUSH
18163: LD_INT 23
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: PUSH
18187: FOR_IN
18188: IFFALSE 18242
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 257
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: LD_INT 3
18208: PUSH
18209: LD_INT 4
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: IN
18218: IFFALSE 18240
// SetClass ( un , rand ( 1 , 4 ) ) ;
18220: LD_VAR 0 1
18224: PPUSH
18225: LD_INT 1
18227: PPUSH
18228: LD_INT 4
18230: PPUSH
18231: CALL_OW 12
18235: PPUSH
18236: CALL_OW 336
18240: GO 18187
18242: POP
18243: POP
// end ;
18244: PPOPN 1
18246: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18247: LD_EXP 47
18251: PUSH
18252: LD_EXP 59
18256: AND
18257: IFFALSE 18336
18259: GO 18261
18261: DISABLE
18262: LD_INT 0
18264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18265: LD_ADDR_VAR 0 1
18269: PUSH
18270: LD_INT 22
18272: PUSH
18273: LD_OWVAR 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 3
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PPUSH
18296: CALL_OW 69
18300: ST_TO_ADDR
// if not tmp then
18301: LD_VAR 0 1
18305: NOT
18306: IFFALSE 18310
// exit ;
18308: GO 18336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18310: LD_VAR 0 1
18314: PUSH
18315: LD_INT 1
18317: PPUSH
18318: LD_VAR 0 1
18322: PPUSH
18323: CALL_OW 12
18327: ARRAY
18328: PPUSH
18329: LD_INT 100
18331: PPUSH
18332: CALL_OW 234
// end ;
18336: PPOPN 1
18338: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18339: LD_EXP 47
18343: PUSH
18344: LD_EXP 61
18348: AND
18349: IFFALSE 18447
18351: GO 18353
18353: DISABLE
18354: LD_INT 0
18356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18357: LD_ADDR_VAR 0 1
18361: PUSH
18362: LD_INT 22
18364: PUSH
18365: LD_OWVAR 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 69
18392: ST_TO_ADDR
// if not tmp then
18393: LD_VAR 0 1
18397: NOT
18398: IFFALSE 18402
// exit ;
18400: GO 18447
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 12
18419: ARRAY
18420: PPUSH
18421: LD_INT 1
18423: PPUSH
18424: LD_INT 4
18426: PPUSH
18427: CALL_OW 12
18431: PPUSH
18432: LD_INT 3000
18434: PPUSH
18435: LD_INT 9000
18437: PPUSH
18438: CALL_OW 12
18442: PPUSH
18443: CALL_OW 492
// end ;
18447: PPOPN 1
18449: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18450: LD_EXP 47
18454: PUSH
18455: LD_EXP 62
18459: AND
18460: IFFALSE 18480
18462: GO 18464
18464: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18465: LD_INT 1
18467: PPUSH
18468: LD_OWVAR 2
18472: PPUSH
18473: LD_INT 0
18475: PPUSH
18476: CALL_OW 324
18480: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18481: LD_EXP 47
18485: PUSH
18486: LD_EXP 63
18490: AND
18491: IFFALSE 18574
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18500: LD_ADDR_VAR 0 2
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_OWVAR 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 21
18519: PUSH
18520: LD_INT 3
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PPUSH
18531: CALL_OW 69
18535: ST_TO_ADDR
// if not tmp then
18536: LD_VAR 0 2
18540: NOT
18541: IFFALSE 18545
// exit ;
18543: GO 18574
// for i in tmp do
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_VAR 0 2
18554: PUSH
18555: FOR_IN
18556: IFFALSE 18572
// SetBLevel ( i , 10 ) ;
18558: LD_VAR 0 1
18562: PPUSH
18563: LD_INT 10
18565: PPUSH
18566: CALL_OW 241
18570: GO 18555
18572: POP
18573: POP
// end ;
18574: PPOPN 2
18576: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18577: LD_EXP 47
18581: PUSH
18582: LD_EXP 64
18586: AND
18587: IFFALSE 18698
18589: GO 18591
18591: DISABLE
18592: LD_INT 0
18594: PPUSH
18595: PPUSH
18596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18597: LD_ADDR_VAR 0 3
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 25
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: ST_TO_ADDR
// if not tmp then
18633: LD_VAR 0 3
18637: NOT
18638: IFFALSE 18642
// exit ;
18640: GO 18698
// un := tmp [ rand ( 1 , tmp ) ] ;
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_VAR 0 3
18651: PUSH
18652: LD_INT 1
18654: PPUSH
18655: LD_VAR 0 3
18659: PPUSH
18660: CALL_OW 12
18664: ARRAY
18665: ST_TO_ADDR
// if Crawls ( un ) then
18666: LD_VAR 0 2
18670: PPUSH
18671: CALL_OW 318
18675: IFFALSE 18686
// ComWalk ( un ) ;
18677: LD_VAR 0 2
18681: PPUSH
18682: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18686: LD_VAR 0 2
18690: PPUSH
18691: LD_INT 5
18693: PPUSH
18694: CALL_OW 336
// end ;
18698: PPOPN 3
18700: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18701: LD_EXP 47
18705: PUSH
18706: LD_EXP 65
18710: AND
18711: PUSH
18712: LD_OWVAR 67
18716: PUSH
18717: LD_INT 4
18719: LESS
18720: AND
18721: IFFALSE 18740
18723: GO 18725
18725: DISABLE
// begin Difficulty := Difficulty + 1 ;
18726: LD_ADDR_OWVAR 67
18730: PUSH
18731: LD_OWVAR 67
18735: PUSH
18736: LD_INT 1
18738: PLUS
18739: ST_TO_ADDR
// end ;
18740: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18741: LD_EXP 47
18745: PUSH
18746: LD_EXP 66
18750: AND
18751: IFFALSE 18854
18753: GO 18755
18755: DISABLE
18756: LD_INT 0
18758: PPUSH
// begin for i := 1 to 5 do
18759: LD_ADDR_VAR 0 1
18763: PUSH
18764: DOUBLE
18765: LD_INT 1
18767: DEC
18768: ST_TO_ADDR
18769: LD_INT 5
18771: PUSH
18772: FOR_TO
18773: IFFALSE 18852
// begin uc_nation := nation_nature ;
18775: LD_ADDR_OWVAR 21
18779: PUSH
18780: LD_INT 0
18782: ST_TO_ADDR
// uc_side := 0 ;
18783: LD_ADDR_OWVAR 20
18787: PUSH
18788: LD_INT 0
18790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18791: LD_ADDR_OWVAR 29
18795: PUSH
18796: LD_INT 12
18798: PUSH
18799: LD_INT 12
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: ST_TO_ADDR
// hc_agressivity := 20 ;
18806: LD_ADDR_OWVAR 35
18810: PUSH
18811: LD_INT 20
18813: ST_TO_ADDR
// hc_class := class_tiger ;
18814: LD_ADDR_OWVAR 28
18818: PUSH
18819: LD_INT 14
18821: ST_TO_ADDR
// hc_gallery :=  ;
18822: LD_ADDR_OWVAR 33
18826: PUSH
18827: LD_STRING 
18829: ST_TO_ADDR
// hc_name :=  ;
18830: LD_ADDR_OWVAR 26
18834: PUSH
18835: LD_STRING 
18837: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18838: CALL_OW 44
18842: PPUSH
18843: LD_INT 0
18845: PPUSH
18846: CALL_OW 51
// end ;
18850: GO 18772
18852: POP
18853: POP
// end ;
18854: PPOPN 1
18856: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18857: LD_EXP 47
18861: PUSH
18862: LD_EXP 67
18866: AND
18867: IFFALSE 18876
18869: GO 18871
18871: DISABLE
// StreamSibBomb ;
18872: CALL 18877 0 0
18876: END
// export function StreamSibBomb ; var i , x , y ; begin
18877: LD_INT 0
18879: PPUSH
18880: PPUSH
18881: PPUSH
18882: PPUSH
// result := false ;
18883: LD_ADDR_VAR 0 1
18887: PUSH
18888: LD_INT 0
18890: ST_TO_ADDR
// for i := 1 to 16 do
18891: LD_ADDR_VAR 0 2
18895: PUSH
18896: DOUBLE
18897: LD_INT 1
18899: DEC
18900: ST_TO_ADDR
18901: LD_INT 16
18903: PUSH
18904: FOR_TO
18905: IFFALSE 19104
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_INT 10
18914: PUSH
18915: LD_INT 20
18917: PUSH
18918: LD_INT 30
18920: PUSH
18921: LD_INT 40
18923: PUSH
18924: LD_INT 50
18926: PUSH
18927: LD_INT 60
18929: PUSH
18930: LD_INT 70
18932: PUSH
18933: LD_INT 80
18935: PUSH
18936: LD_INT 90
18938: PUSH
18939: LD_INT 100
18941: PUSH
18942: LD_INT 110
18944: PUSH
18945: LD_INT 120
18947: PUSH
18948: LD_INT 130
18950: PUSH
18951: LD_INT 140
18953: PUSH
18954: LD_INT 150
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PPUSH
18977: LD_INT 15
18979: PPUSH
18980: CALL_OW 12
18984: ARRAY
18985: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18986: LD_ADDR_VAR 0 4
18990: PUSH
18991: LD_INT 10
18993: PUSH
18994: LD_INT 20
18996: PUSH
18997: LD_INT 30
18999: PUSH
19000: LD_INT 40
19002: PUSH
19003: LD_INT 50
19005: PUSH
19006: LD_INT 60
19008: PUSH
19009: LD_INT 70
19011: PUSH
19012: LD_INT 80
19014: PUSH
19015: LD_INT 90
19017: PUSH
19018: LD_INT 100
19020: PUSH
19021: LD_INT 110
19023: PUSH
19024: LD_INT 120
19026: PUSH
19027: LD_INT 130
19029: PUSH
19030: LD_INT 140
19032: PUSH
19033: LD_INT 150
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: PPUSH
19056: LD_INT 15
19058: PPUSH
19059: CALL_OW 12
19063: ARRAY
19064: ST_TO_ADDR
// if ValidHex ( x , y ) then
19065: LD_VAR 0 3
19069: PPUSH
19070: LD_VAR 0 4
19074: PPUSH
19075: CALL_OW 488
19079: IFFALSE 19102
// begin result := [ x , y ] ;
19081: LD_ADDR_VAR 0 1
19085: PUSH
19086: LD_VAR 0 3
19090: PUSH
19091: LD_VAR 0 4
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: ST_TO_ADDR
// break ;
19100: GO 19104
// end ; end ;
19102: GO 18904
19104: POP
19105: POP
// if result then
19106: LD_VAR 0 1
19110: IFFALSE 19170
// begin ToLua ( playSibBomb() ) ;
19112: LD_STRING playSibBomb()
19114: PPUSH
19115: CALL_OW 559
// wait ( 0 0$14 ) ;
19119: LD_INT 490
19121: PPUSH
19122: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19126: LD_VAR 0 1
19130: PUSH
19131: LD_INT 1
19133: ARRAY
19134: PPUSH
19135: LD_VAR 0 1
19139: PUSH
19140: LD_INT 2
19142: ARRAY
19143: PPUSH
19144: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19148: LD_VAR 0 1
19152: PUSH
19153: LD_INT 1
19155: ARRAY
19156: PPUSH
19157: LD_VAR 0 1
19161: PUSH
19162: LD_INT 2
19164: ARRAY
19165: PPUSH
19166: CALL_OW 429
// end ; end ;
19170: LD_VAR 0 1
19174: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19175: LD_EXP 47
19179: PUSH
19180: LD_EXP 69
19184: AND
19185: IFFALSE 19197
19187: GO 19189
19189: DISABLE
// YouLost (  ) ;
19190: LD_STRING 
19192: PPUSH
19193: CALL_OW 104
19197: END
// every 0 0$1 trigger StreamModeActive and sFog do
19198: LD_EXP 47
19202: PUSH
19203: LD_EXP 68
19207: AND
19208: IFFALSE 19222
19210: GO 19212
19212: DISABLE
// FogOff ( your_side ) ;
19213: LD_OWVAR 2
19217: PPUSH
19218: CALL_OW 344
19222: END
// every 0 0$1 trigger StreamModeActive and sSun do
19223: LD_EXP 47
19227: PUSH
19228: LD_EXP 70
19232: AND
19233: IFFALSE 19261
19235: GO 19237
19237: DISABLE
// begin solar_recharge_percent := 0 ;
19238: LD_ADDR_OWVAR 79
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19246: LD_INT 10500
19248: PPUSH
19249: CALL_OW 67
// solar_recharge_percent := 100 ;
19253: LD_ADDR_OWVAR 79
19257: PUSH
19258: LD_INT 100
19260: ST_TO_ADDR
// end ;
19261: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19262: LD_EXP 47
19266: PUSH
19267: LD_EXP 71
19271: AND
19272: IFFALSE 19511
19274: GO 19276
19276: DISABLE
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
19281: PPUSH
// begin tmp := [ ] ;
19282: LD_ADDR_VAR 0 3
19286: PUSH
19287: EMPTY
19288: ST_TO_ADDR
// for i := 1 to 6 do
19289: LD_ADDR_VAR 0 1
19293: PUSH
19294: DOUBLE
19295: LD_INT 1
19297: DEC
19298: ST_TO_ADDR
19299: LD_INT 6
19301: PUSH
19302: FOR_TO
19303: IFFALSE 19408
// begin uc_nation := nation_nature ;
19305: LD_ADDR_OWVAR 21
19309: PUSH
19310: LD_INT 0
19312: ST_TO_ADDR
// uc_side := 0 ;
19313: LD_ADDR_OWVAR 20
19317: PUSH
19318: LD_INT 0
19320: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19321: LD_ADDR_OWVAR 29
19325: PUSH
19326: LD_INT 12
19328: PUSH
19329: LD_INT 12
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: ST_TO_ADDR
// hc_agressivity := 20 ;
19336: LD_ADDR_OWVAR 35
19340: PUSH
19341: LD_INT 20
19343: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19344: LD_ADDR_OWVAR 28
19348: PUSH
19349: LD_INT 17
19351: ST_TO_ADDR
// hc_gallery :=  ;
19352: LD_ADDR_OWVAR 33
19356: PUSH
19357: LD_STRING 
19359: ST_TO_ADDR
// hc_name :=  ;
19360: LD_ADDR_OWVAR 26
19364: PUSH
19365: LD_STRING 
19367: ST_TO_ADDR
// un := CreateHuman ;
19368: LD_ADDR_VAR 0 2
19372: PUSH
19373: CALL_OW 44
19377: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19378: LD_VAR 0 2
19382: PPUSH
19383: LD_INT 1
19385: PPUSH
19386: CALL_OW 51
// tmp := tmp ^ un ;
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: LD_VAR 0 3
19399: PUSH
19400: LD_VAR 0 2
19404: ADD
19405: ST_TO_ADDR
// end ;
19406: GO 19302
19408: POP
19409: POP
// repeat wait ( 0 0$1 ) ;
19410: LD_INT 35
19412: PPUSH
19413: CALL_OW 67
// for un in tmp do
19417: LD_ADDR_VAR 0 2
19421: PUSH
19422: LD_VAR 0 3
19426: PUSH
19427: FOR_IN
19428: IFFALSE 19502
// begin if IsDead ( un ) then
19430: LD_VAR 0 2
19434: PPUSH
19435: CALL_OW 301
19439: IFFALSE 19459
// begin tmp := tmp diff un ;
19441: LD_ADDR_VAR 0 3
19445: PUSH
19446: LD_VAR 0 3
19450: PUSH
19451: LD_VAR 0 2
19455: DIFF
19456: ST_TO_ADDR
// continue ;
19457: GO 19427
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19459: LD_VAR 0 2
19463: PPUSH
19464: LD_INT 3
19466: PUSH
19467: LD_INT 22
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PPUSH
19481: CALL_OW 69
19485: PPUSH
19486: LD_VAR 0 2
19490: PPUSH
19491: CALL_OW 74
19495: PPUSH
19496: CALL_OW 115
// end ;
19500: GO 19427
19502: POP
19503: POP
// until not tmp ;
19504: LD_VAR 0 3
19508: NOT
19509: IFFALSE 19410
// end ;
19511: PPOPN 3
19513: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19514: LD_EXP 47
19518: PUSH
19519: LD_EXP 72
19523: AND
19524: IFFALSE 19578
19526: GO 19528
19528: DISABLE
// begin ToLua ( displayTroll(); ) ;
19529: LD_STRING displayTroll();
19531: PPUSH
19532: CALL_OW 559
// wait ( 3 3$00 ) ;
19536: LD_INT 6300
19538: PPUSH
19539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19543: LD_STRING hideTroll();
19545: PPUSH
19546: CALL_OW 559
// wait ( 1 1$00 ) ;
19550: LD_INT 2100
19552: PPUSH
19553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19557: LD_STRING displayTroll();
19559: PPUSH
19560: CALL_OW 559
// wait ( 1 1$00 ) ;
19564: LD_INT 2100
19566: PPUSH
19567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19571: LD_STRING hideTroll();
19573: PPUSH
19574: CALL_OW 559
// end ;
19578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19579: LD_EXP 47
19583: PUSH
19584: LD_EXP 73
19588: AND
19589: IFFALSE 19652
19591: GO 19593
19593: DISABLE
19594: LD_INT 0
19596: PPUSH
// begin p := 0 ;
19597: LD_ADDR_VAR 0 1
19601: PUSH
19602: LD_INT 0
19604: ST_TO_ADDR
// repeat game_speed := 1 ;
19605: LD_ADDR_OWVAR 65
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19613: LD_INT 35
19615: PPUSH
19616: CALL_OW 67
// p := p + 1 ;
19620: LD_ADDR_VAR 0 1
19624: PUSH
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 1
19632: PLUS
19633: ST_TO_ADDR
// until p >= 60 ;
19634: LD_VAR 0 1
19638: PUSH
19639: LD_INT 60
19641: GREATEREQUAL
19642: IFFALSE 19605
// game_speed := 4 ;
19644: LD_ADDR_OWVAR 65
19648: PUSH
19649: LD_INT 4
19651: ST_TO_ADDR
// end ;
19652: PPOPN 1
19654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19655: LD_EXP 47
19659: PUSH
19660: LD_EXP 74
19664: AND
19665: IFFALSE 19811
19667: GO 19669
19669: DISABLE
19670: LD_INT 0
19672: PPUSH
19673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19674: LD_ADDR_VAR 0 1
19678: PUSH
19679: LD_INT 22
19681: PUSH
19682: LD_OWVAR 2
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 30
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 30
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PPUSH
19723: CALL_OW 69
19727: ST_TO_ADDR
// if not depot then
19728: LD_VAR 0 1
19732: NOT
19733: IFFALSE 19737
// exit ;
19735: GO 19811
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19737: LD_ADDR_VAR 0 2
19741: PUSH
19742: LD_VAR 0 1
19746: PUSH
19747: LD_INT 1
19749: PPUSH
19750: LD_VAR 0 1
19754: PPUSH
19755: CALL_OW 12
19759: ARRAY
19760: PPUSH
19761: CALL_OW 274
19765: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: LD_INT 0
19776: PPUSH
19777: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19781: LD_VAR 0 2
19785: PPUSH
19786: LD_INT 2
19788: PPUSH
19789: LD_INT 0
19791: PPUSH
19792: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19796: LD_VAR 0 2
19800: PPUSH
19801: LD_INT 3
19803: PPUSH
19804: LD_INT 0
19806: PPUSH
19807: CALL_OW 277
// end ;
19811: PPOPN 2
19813: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19814: LD_EXP 47
19818: PUSH
19819: LD_EXP 75
19823: AND
19824: IFFALSE 19921
19826: GO 19828
19828: DISABLE
19829: LD_INT 0
19831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19832: LD_ADDR_VAR 0 1
19836: PUSH
19837: LD_INT 22
19839: PUSH
19840: LD_OWVAR 2
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 21
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: LD_INT 23
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL_OW 69
19885: ST_TO_ADDR
// if not tmp then
19886: LD_VAR 0 1
19890: NOT
19891: IFFALSE 19895
// exit ;
19893: GO 19921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19895: LD_VAR 0 1
19899: PUSH
19900: LD_INT 1
19902: PPUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 12
19912: ARRAY
19913: PPUSH
19914: LD_INT 200
19916: PPUSH
19917: CALL_OW 234
// end ;
19921: PPOPN 1
19923: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19924: LD_EXP 47
19928: PUSH
19929: LD_EXP 76
19933: AND
19934: IFFALSE 20013
19936: GO 19938
19938: DISABLE
19939: LD_INT 0
19941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19942: LD_ADDR_VAR 0 1
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_OWVAR 2
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 21
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PPUSH
19973: CALL_OW 69
19977: ST_TO_ADDR
// if not tmp then
19978: LD_VAR 0 1
19982: NOT
19983: IFFALSE 19987
// exit ;
19985: GO 20013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19987: LD_VAR 0 1
19991: PUSH
19992: LD_INT 1
19994: PPUSH
19995: LD_VAR 0 1
19999: PPUSH
20000: CALL_OW 12
20004: ARRAY
20005: PPUSH
20006: LD_INT 60
20008: PPUSH
20009: CALL_OW 234
// end ;
20013: PPOPN 1
20015: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20016: LD_EXP 47
20020: PUSH
20021: LD_EXP 77
20025: AND
20026: IFFALSE 20125
20028: GO 20030
20030: DISABLE
20031: LD_INT 0
20033: PPUSH
20034: PPUSH
// begin enable ;
20035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20036: LD_ADDR_VAR 0 1
20040: PUSH
20041: LD_INT 22
20043: PUSH
20044: LD_OWVAR 2
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 61
20055: PUSH
20056: EMPTY
20057: LIST
20058: PUSH
20059: LD_INT 33
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: PPUSH
20074: CALL_OW 69
20078: ST_TO_ADDR
// if not tmp then
20079: LD_VAR 0 1
20083: NOT
20084: IFFALSE 20088
// exit ;
20086: GO 20125
// for i in tmp do
20088: LD_ADDR_VAR 0 2
20092: PUSH
20093: LD_VAR 0 1
20097: PUSH
20098: FOR_IN
20099: IFFALSE 20123
// if IsControledBy ( i ) then
20101: LD_VAR 0 2
20105: PPUSH
20106: CALL_OW 312
20110: IFFALSE 20121
// ComUnlink ( i ) ;
20112: LD_VAR 0 2
20116: PPUSH
20117: CALL_OW 136
20121: GO 20098
20123: POP
20124: POP
// end ;
20125: PPOPN 2
20127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20128: LD_EXP 47
20132: PUSH
20133: LD_EXP 78
20137: AND
20138: IFFALSE 20278
20140: GO 20142
20142: DISABLE
20143: LD_INT 0
20145: PPUSH
20146: PPUSH
// begin ToLua ( displayPowell(); ) ;
20147: LD_STRING displayPowell();
20149: PPUSH
20150: CALL_OW 559
// uc_side := 0 ;
20154: LD_ADDR_OWVAR 20
20158: PUSH
20159: LD_INT 0
20161: ST_TO_ADDR
// uc_nation := 2 ;
20162: LD_ADDR_OWVAR 21
20166: PUSH
20167: LD_INT 2
20169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20170: LD_ADDR_OWVAR 37
20174: PUSH
20175: LD_INT 14
20177: ST_TO_ADDR
// vc_engine := engine_siberite ;
20178: LD_ADDR_OWVAR 39
20182: PUSH
20183: LD_INT 3
20185: ST_TO_ADDR
// vc_control := control_apeman ;
20186: LD_ADDR_OWVAR 38
20190: PUSH
20191: LD_INT 5
20193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20194: LD_ADDR_OWVAR 40
20198: PUSH
20199: LD_INT 29
20201: ST_TO_ADDR
// un := CreateVehicle ;
20202: LD_ADDR_VAR 0 2
20206: PUSH
20207: CALL_OW 45
20211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20212: LD_VAR 0 2
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20224: LD_INT 35
20226: PPUSH
20227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20231: LD_VAR 0 2
20235: PPUSH
20236: LD_INT 22
20238: PUSH
20239: LD_OWVAR 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PPUSH
20248: CALL_OW 69
20252: PPUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 74
20262: PPUSH
20263: CALL_OW 115
// until IsDead ( un ) ;
20267: LD_VAR 0 2
20271: PPUSH
20272: CALL_OW 301
20276: IFFALSE 20224
// end ;
20278: PPOPN 2
20280: END
// every 0 0$1 trigger StreamModeActive and sStu do
20281: LD_EXP 47
20285: PUSH
20286: LD_EXP 86
20290: AND
20291: IFFALSE 20307
20293: GO 20295
20295: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20296: LD_STRING displayStucuk();
20298: PPUSH
20299: CALL_OW 559
// ResetFog ;
20303: CALL_OW 335
// end ;
20307: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20308: LD_EXP 47
20312: PUSH
20313: LD_EXP 79
20317: AND
20318: IFFALSE 20459
20320: GO 20322
20322: DISABLE
20323: LD_INT 0
20325: PPUSH
20326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 21
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: ST_TO_ADDR
// if not tmp then
20363: LD_VAR 0 2
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20459
// un := tmp [ rand ( 1 , tmp ) ] ;
20372: LD_ADDR_VAR 0 1
20376: PUSH
20377: LD_VAR 0 2
20381: PUSH
20382: LD_INT 1
20384: PPUSH
20385: LD_VAR 0 2
20389: PPUSH
20390: CALL_OW 12
20394: ARRAY
20395: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20396: LD_VAR 0 1
20400: PPUSH
20401: LD_INT 0
20403: PPUSH
20404: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20408: LD_VAR 0 1
20412: PPUSH
20413: LD_OWVAR 3
20417: PUSH
20418: LD_VAR 0 1
20422: DIFF
20423: PPUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 74
20433: PPUSH
20434: CALL_OW 115
// wait ( 0 0$20 ) ;
20438: LD_INT 700
20440: PPUSH
20441: CALL_OW 67
// SetSide ( un , your_side ) ;
20445: LD_VAR 0 1
20449: PPUSH
20450: LD_OWVAR 2
20454: PPUSH
20455: CALL_OW 235
// end ;
20459: PPOPN 2
20461: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20462: LD_EXP 47
20466: PUSH
20467: LD_EXP 80
20471: AND
20472: IFFALSE 20578
20474: GO 20476
20476: DISABLE
20477: LD_INT 0
20479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20480: LD_ADDR_VAR 0 1
20484: PUSH
20485: LD_INT 22
20487: PUSH
20488: LD_OWVAR 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 30
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 30
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PPUSH
20529: CALL_OW 69
20533: ST_TO_ADDR
// if not depot then
20534: LD_VAR 0 1
20538: NOT
20539: IFFALSE 20543
// exit ;
20541: GO 20578
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20543: LD_VAR 0 1
20547: PUSH
20548: LD_INT 1
20550: ARRAY
20551: PPUSH
20552: CALL_OW 250
20556: PPUSH
20557: LD_VAR 0 1
20561: PUSH
20562: LD_INT 1
20564: ARRAY
20565: PPUSH
20566: CALL_OW 251
20570: PPUSH
20571: LD_INT 70
20573: PPUSH
20574: CALL_OW 495
// end ;
20578: PPOPN 1
20580: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20581: LD_EXP 47
20585: PUSH
20586: LD_EXP 81
20590: AND
20591: IFFALSE 20802
20593: GO 20595
20595: DISABLE
20596: LD_INT 0
20598: PPUSH
20599: PPUSH
20600: PPUSH
20601: PPUSH
20602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20603: LD_ADDR_VAR 0 5
20607: PUSH
20608: LD_INT 22
20610: PUSH
20611: LD_OWVAR 2
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 21
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 69
20638: ST_TO_ADDR
// if not tmp then
20639: LD_VAR 0 5
20643: NOT
20644: IFFALSE 20648
// exit ;
20646: GO 20802
// for i in tmp do
20648: LD_ADDR_VAR 0 1
20652: PUSH
20653: LD_VAR 0 5
20657: PUSH
20658: FOR_IN
20659: IFFALSE 20800
// begin d := rand ( 0 , 5 ) ;
20661: LD_ADDR_VAR 0 4
20665: PUSH
20666: LD_INT 0
20668: PPUSH
20669: LD_INT 5
20671: PPUSH
20672: CALL_OW 12
20676: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20677: LD_ADDR_VAR 0 2
20681: PUSH
20682: LD_VAR 0 1
20686: PPUSH
20687: CALL_OW 250
20691: PPUSH
20692: LD_VAR 0 4
20696: PPUSH
20697: LD_INT 3
20699: PPUSH
20700: LD_INT 12
20702: PPUSH
20703: CALL_OW 12
20707: PPUSH
20708: CALL_OW 272
20712: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20713: LD_ADDR_VAR 0 3
20717: PUSH
20718: LD_VAR 0 1
20722: PPUSH
20723: CALL_OW 251
20727: PPUSH
20728: LD_VAR 0 4
20732: PPUSH
20733: LD_INT 3
20735: PPUSH
20736: LD_INT 12
20738: PPUSH
20739: CALL_OW 12
20743: PPUSH
20744: CALL_OW 273
20748: ST_TO_ADDR
// if ValidHex ( x , y ) then
20749: LD_VAR 0 2
20753: PPUSH
20754: LD_VAR 0 3
20758: PPUSH
20759: CALL_OW 488
20763: IFFALSE 20798
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: LD_VAR 0 2
20774: PPUSH
20775: LD_VAR 0 3
20779: PPUSH
20780: LD_INT 3
20782: PPUSH
20783: LD_INT 6
20785: PPUSH
20786: CALL_OW 12
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 483
// end ;
20798: GO 20658
20800: POP
20801: POP
// end ;
20802: PPOPN 5
20804: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20805: LD_EXP 47
20809: PUSH
20810: LD_EXP 82
20814: AND
20815: IFFALSE 20909
20817: GO 20819
20819: DISABLE
20820: LD_INT 0
20822: PPUSH
20823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20824: LD_ADDR_VAR 0 2
20828: PUSH
20829: LD_INT 22
20831: PUSH
20832: LD_OWVAR 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 32
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: ST_TO_ADDR
// if not tmp then
20871: LD_VAR 0 2
20875: NOT
20876: IFFALSE 20880
// exit ;
20878: GO 20909
// for i in tmp do
20880: LD_ADDR_VAR 0 1
20884: PUSH
20885: LD_VAR 0 2
20889: PUSH
20890: FOR_IN
20891: IFFALSE 20907
// SetFuel ( i , 0 ) ;
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_INT 0
20900: PPUSH
20901: CALL_OW 240
20905: GO 20890
20907: POP
20908: POP
// end ;
20909: PPOPN 2
20911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20912: LD_EXP 47
20916: PUSH
20917: LD_EXP 83
20921: AND
20922: IFFALSE 20988
20924: GO 20926
20926: DISABLE
20927: LD_INT 0
20929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20930: LD_ADDR_VAR 0 1
20934: PUSH
20935: LD_INT 22
20937: PUSH
20938: LD_OWVAR 2
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 30
20949: PUSH
20950: LD_INT 29
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL_OW 69
20965: ST_TO_ADDR
// if not tmp then
20966: LD_VAR 0 1
20970: NOT
20971: IFFALSE 20975
// exit ;
20973: GO 20988
// DestroyUnit ( tmp [ 1 ] ) ;
20975: LD_VAR 0 1
20979: PUSH
20980: LD_INT 1
20982: ARRAY
20983: PPUSH
20984: CALL_OW 65
// end ;
20988: PPOPN 1
20990: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20991: LD_EXP 47
20995: PUSH
20996: LD_EXP 85
21000: AND
21001: IFFALSE 21130
21003: GO 21005
21005: DISABLE
21006: LD_INT 0
21008: PPUSH
// begin uc_side := 0 ;
21009: LD_ADDR_OWVAR 20
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// uc_nation := nation_arabian ;
21017: LD_ADDR_OWVAR 21
21021: PUSH
21022: LD_INT 2
21024: ST_TO_ADDR
// hc_gallery :=  ;
21025: LD_ADDR_OWVAR 33
21029: PUSH
21030: LD_STRING 
21032: ST_TO_ADDR
// hc_name :=  ;
21033: LD_ADDR_OWVAR 26
21037: PUSH
21038: LD_STRING 
21040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21041: LD_INT 1
21043: PPUSH
21044: LD_INT 11
21046: PPUSH
21047: LD_INT 10
21049: PPUSH
21050: CALL_OW 380
// un := CreateHuman ;
21054: LD_ADDR_VAR 0 1
21058: PUSH
21059: CALL_OW 44
21063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: LD_INT 1
21071: PPUSH
21072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21076: LD_INT 35
21078: PPUSH
21079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21083: LD_VAR 0 1
21087: PPUSH
21088: LD_INT 22
21090: PUSH
21091: LD_OWVAR 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PPUSH
21100: CALL_OW 69
21104: PPUSH
21105: LD_VAR 0 1
21109: PPUSH
21110: CALL_OW 74
21114: PPUSH
21115: CALL_OW 115
// until IsDead ( un ) ;
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 301
21128: IFFALSE 21076
// end ;
21130: PPOPN 1
21132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21133: LD_EXP 47
21137: PUSH
21138: LD_EXP 87
21142: AND
21143: IFFALSE 21155
21145: GO 21147
21147: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21148: LD_STRING earthquake(getX(game), 0, 32)
21150: PPUSH
21151: CALL_OW 559
21155: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21156: LD_EXP 47
21160: PUSH
21161: LD_EXP 88
21165: AND
21166: IFFALSE 21257
21168: GO 21170
21170: DISABLE
21171: LD_INT 0
21173: PPUSH
// begin enable ;
21174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21175: LD_ADDR_VAR 0 1
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_OWVAR 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 21
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 33
21204: PUSH
21205: LD_INT 3
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: PPUSH
21217: CALL_OW 69
21221: ST_TO_ADDR
// if not tmp then
21222: LD_VAR 0 1
21226: NOT
21227: IFFALSE 21231
// exit ;
21229: GO 21257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21231: LD_VAR 0 1
21235: PUSH
21236: LD_INT 1
21238: PPUSH
21239: LD_VAR 0 1
21243: PPUSH
21244: CALL_OW 12
21248: ARRAY
21249: PPUSH
21250: LD_INT 1
21252: PPUSH
21253: CALL_OW 234
// end ;
21257: PPOPN 1
21259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21260: LD_EXP 47
21264: PUSH
21265: LD_EXP 89
21269: AND
21270: IFFALSE 21411
21272: GO 21274
21274: DISABLE
21275: LD_INT 0
21277: PPUSH
21278: PPUSH
21279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21280: LD_ADDR_VAR 0 3
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_OWVAR 2
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 25
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PPUSH
21311: CALL_OW 69
21315: ST_TO_ADDR
// if not tmp then
21316: LD_VAR 0 3
21320: NOT
21321: IFFALSE 21325
// exit ;
21323: GO 21411
// un := tmp [ rand ( 1 , tmp ) ] ;
21325: LD_ADDR_VAR 0 2
21329: PUSH
21330: LD_VAR 0 3
21334: PUSH
21335: LD_INT 1
21337: PPUSH
21338: LD_VAR 0 3
21342: PPUSH
21343: CALL_OW 12
21347: ARRAY
21348: ST_TO_ADDR
// if Crawls ( un ) then
21349: LD_VAR 0 2
21353: PPUSH
21354: CALL_OW 318
21358: IFFALSE 21369
// ComWalk ( un ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21369: LD_VAR 0 2
21373: PPUSH
21374: LD_INT 9
21376: PPUSH
21377: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21381: LD_INT 28
21383: PPUSH
21384: LD_OWVAR 2
21388: PPUSH
21389: LD_INT 2
21391: PPUSH
21392: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21396: LD_INT 29
21398: PPUSH
21399: LD_OWVAR 2
21403: PPUSH
21404: LD_INT 2
21406: PPUSH
21407: CALL_OW 322
// end ;
21411: PPOPN 3
21413: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21414: LD_EXP 47
21418: PUSH
21419: LD_EXP 90
21423: AND
21424: IFFALSE 21535
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 25
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PPUSH
21465: CALL_OW 69
21469: ST_TO_ADDR
// if not tmp then
21470: LD_VAR 0 3
21474: NOT
21475: IFFALSE 21479
// exit ;
21477: GO 21535
// un := tmp [ rand ( 1 , tmp ) ] ;
21479: LD_ADDR_VAR 0 2
21483: PUSH
21484: LD_VAR 0 3
21488: PUSH
21489: LD_INT 1
21491: PPUSH
21492: LD_VAR 0 3
21496: PPUSH
21497: CALL_OW 12
21501: ARRAY
21502: ST_TO_ADDR
// if Crawls ( un ) then
21503: LD_VAR 0 2
21507: PPUSH
21508: CALL_OW 318
21512: IFFALSE 21523
// ComWalk ( un ) ;
21514: LD_VAR 0 2
21518: PPUSH
21519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21523: LD_VAR 0 2
21527: PPUSH
21528: LD_INT 8
21530: PPUSH
21531: CALL_OW 336
// end ;
21535: PPOPN 3
21537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21538: LD_EXP 47
21542: PUSH
21543: LD_EXP 91
21547: AND
21548: IFFALSE 21692
21550: GO 21552
21552: DISABLE
21553: LD_INT 0
21555: PPUSH
21556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21557: LD_ADDR_VAR 0 2
21561: PUSH
21562: LD_INT 22
21564: PUSH
21565: LD_OWVAR 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 21
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 34
21589: PUSH
21590: LD_INT 12
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 34
21599: PUSH
21600: LD_INT 51
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 34
21609: PUSH
21610: LD_INT 32
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: ST_TO_ADDR
// if not tmp then
21633: LD_VAR 0 2
21637: NOT
21638: IFFALSE 21642
// exit ;
21640: GO 21692
// for i in tmp do
21642: LD_ADDR_VAR 0 1
21646: PUSH
21647: LD_VAR 0 2
21651: PUSH
21652: FOR_IN
21653: IFFALSE 21690
// if GetCargo ( i , mat_artifact ) = 0 then
21655: LD_VAR 0 1
21659: PPUSH
21660: LD_INT 4
21662: PPUSH
21663: CALL_OW 289
21667: PUSH
21668: LD_INT 0
21670: EQUAL
21671: IFFALSE 21688
// SetCargo ( i , mat_siberit , 100 ) ;
21673: LD_VAR 0 1
21677: PPUSH
21678: LD_INT 3
21680: PPUSH
21681: LD_INT 100
21683: PPUSH
21684: CALL_OW 290
21688: GO 21652
21690: POP
21691: POP
// end ;
21692: PPOPN 2
21694: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21695: LD_EXP 47
21699: PUSH
21700: LD_EXP 92
21704: AND
21705: IFFALSE 21888
21707: GO 21709
21709: DISABLE
21710: LD_INT 0
21712: PPUSH
21713: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_INT 22
21721: PUSH
21722: LD_OWVAR 2
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PPUSH
21731: CALL_OW 69
21735: ST_TO_ADDR
// if not tmp then
21736: LD_VAR 0 2
21740: NOT
21741: IFFALSE 21745
// exit ;
21743: GO 21888
// for i := 1 to 2 do
21745: LD_ADDR_VAR 0 1
21749: PUSH
21750: DOUBLE
21751: LD_INT 1
21753: DEC
21754: ST_TO_ADDR
21755: LD_INT 2
21757: PUSH
21758: FOR_TO
21759: IFFALSE 21886
// begin uc_side := your_side ;
21761: LD_ADDR_OWVAR 20
21765: PUSH
21766: LD_OWVAR 2
21770: ST_TO_ADDR
// uc_nation := nation_american ;
21771: LD_ADDR_OWVAR 21
21775: PUSH
21776: LD_INT 1
21778: ST_TO_ADDR
// vc_chassis := us_morphling ;
21779: LD_ADDR_OWVAR 37
21783: PUSH
21784: LD_INT 5
21786: ST_TO_ADDR
// vc_engine := engine_siberite ;
21787: LD_ADDR_OWVAR 39
21791: PUSH
21792: LD_INT 3
21794: ST_TO_ADDR
// vc_control := control_computer ;
21795: LD_ADDR_OWVAR 38
21799: PUSH
21800: LD_INT 3
21802: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21803: LD_ADDR_OWVAR 40
21807: PUSH
21808: LD_INT 10
21810: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21811: LD_VAR 0 2
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PPUSH
21820: CALL_OW 310
21824: NOT
21825: IFFALSE 21872
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21827: CALL_OW 45
21831: PPUSH
21832: LD_VAR 0 2
21836: PUSH
21837: LD_INT 1
21839: ARRAY
21840: PPUSH
21841: CALL_OW 250
21845: PPUSH
21846: LD_VAR 0 2
21850: PUSH
21851: LD_INT 1
21853: ARRAY
21854: PPUSH
21855: CALL_OW 251
21859: PPUSH
21860: LD_INT 12
21862: PPUSH
21863: LD_INT 1
21865: PPUSH
21866: CALL_OW 50
21870: GO 21884
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21872: CALL_OW 45
21876: PPUSH
21877: LD_INT 1
21879: PPUSH
21880: CALL_OW 51
// end ;
21884: GO 21758
21886: POP
21887: POP
// end ;
21888: PPOPN 2
21890: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21891: LD_EXP 47
21895: PUSH
21896: LD_EXP 93
21900: AND
21901: IFFALSE 22123
21903: GO 21905
21905: DISABLE
21906: LD_INT 0
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21914: LD_ADDR_VAR 0 6
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_OWVAR 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 21
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: LD_INT 23
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: PPUSH
21963: CALL_OW 69
21967: ST_TO_ADDR
// if not tmp then
21968: LD_VAR 0 6
21972: NOT
21973: IFFALSE 21977
// exit ;
21975: GO 22123
// s1 := rand ( 1 , 4 ) ;
21977: LD_ADDR_VAR 0 2
21981: PUSH
21982: LD_INT 1
21984: PPUSH
21985: LD_INT 4
21987: PPUSH
21988: CALL_OW 12
21992: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21993: LD_ADDR_VAR 0 4
21997: PUSH
21998: LD_VAR 0 6
22002: PUSH
22003: LD_INT 1
22005: ARRAY
22006: PPUSH
22007: LD_VAR 0 2
22011: PPUSH
22012: CALL_OW 259
22016: ST_TO_ADDR
// if s1 = 1 then
22017: LD_VAR 0 2
22021: PUSH
22022: LD_INT 1
22024: EQUAL
22025: IFFALSE 22045
// s2 := rand ( 2 , 4 ) else
22027: LD_ADDR_VAR 0 3
22031: PUSH
22032: LD_INT 2
22034: PPUSH
22035: LD_INT 4
22037: PPUSH
22038: CALL_OW 12
22042: ST_TO_ADDR
22043: GO 22053
// s2 := 1 ;
22045: LD_ADDR_VAR 0 3
22049: PUSH
22050: LD_INT 1
22052: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22053: LD_ADDR_VAR 0 5
22057: PUSH
22058: LD_VAR 0 6
22062: PUSH
22063: LD_INT 1
22065: ARRAY
22066: PPUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: CALL_OW 259
22076: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22077: LD_VAR 0 6
22081: PUSH
22082: LD_INT 1
22084: ARRAY
22085: PPUSH
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_VAR 0 5
22095: PPUSH
22096: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22100: LD_VAR 0 6
22104: PUSH
22105: LD_INT 1
22107: ARRAY
22108: PPUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: LD_VAR 0 4
22118: PPUSH
22119: CALL_OW 237
// end ;
22123: PPOPN 6
22125: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22126: LD_EXP 47
22130: PUSH
22131: LD_EXP 94
22135: AND
22136: IFFALSE 22215
22138: GO 22140
22140: DISABLE
22141: LD_INT 0
22143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22144: LD_ADDR_VAR 0 1
22148: PUSH
22149: LD_INT 22
22151: PUSH
22152: LD_OWVAR 2
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 30
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PPUSH
22175: CALL_OW 69
22179: ST_TO_ADDR
// if not tmp then
22180: LD_VAR 0 1
22184: NOT
22185: IFFALSE 22189
// exit ;
22187: GO 22215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22189: LD_VAR 0 1
22193: PUSH
22194: LD_INT 1
22196: PPUSH
22197: LD_VAR 0 1
22201: PPUSH
22202: CALL_OW 12
22206: ARRAY
22207: PPUSH
22208: LD_INT 1
22210: PPUSH
22211: CALL_OW 234
// end ;
22215: PPOPN 1
22217: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22218: LD_EXP 47
22222: PUSH
22223: LD_EXP 95
22227: AND
22228: IFFALSE 22340
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
22236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22237: LD_ADDR_VAR 0 2
22241: PUSH
22242: LD_INT 22
22244: PUSH
22245: LD_OWVAR 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 2
22256: PUSH
22257: LD_INT 30
22259: PUSH
22260: LD_INT 27
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 30
22269: PUSH
22270: LD_INT 26
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 30
22279: PUSH
22280: LD_INT 28
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PPUSH
22297: CALL_OW 69
22301: ST_TO_ADDR
// if not tmp then
22302: LD_VAR 0 2
22306: NOT
22307: IFFALSE 22311
// exit ;
22309: GO 22340
// for i in tmp do
22311: LD_ADDR_VAR 0 1
22315: PUSH
22316: LD_VAR 0 2
22320: PUSH
22321: FOR_IN
22322: IFFALSE 22338
// SetLives ( i , 1 ) ;
22324: LD_VAR 0 1
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 234
22336: GO 22321
22338: POP
22339: POP
// end ;
22340: PPOPN 2
22342: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22343: LD_EXP 47
22347: PUSH
22348: LD_EXP 96
22352: AND
22353: IFFALSE 22640
22355: GO 22357
22357: DISABLE
22358: LD_INT 0
22360: PPUSH
22361: PPUSH
22362: PPUSH
// begin i := rand ( 1 , 7 ) ;
22363: LD_ADDR_VAR 0 1
22367: PUSH
22368: LD_INT 1
22370: PPUSH
22371: LD_INT 7
22373: PPUSH
22374: CALL_OW 12
22378: ST_TO_ADDR
// case i of 1 :
22379: LD_VAR 0 1
22383: PUSH
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22402
22392: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22393: LD_STRING earthquake(getX(game), 0, 32)
22395: PPUSH
22396: CALL_OW 559
22400: GO 22640
22402: LD_INT 2
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22424
22410: POP
// begin ToLua ( displayStucuk(); ) ;
22411: LD_STRING displayStucuk();
22413: PPUSH
22414: CALL_OW 559
// ResetFog ;
22418: CALL_OW 335
// end ; 3 :
22422: GO 22640
22424: LD_INT 3
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22536
22432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_INT 22
22440: PUSH
22441: LD_OWVAR 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 25
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 69
22468: ST_TO_ADDR
// if not tmp then
22469: LD_VAR 0 2
22473: NOT
22474: IFFALSE 22478
// exit ;
22476: GO 22640
// un := tmp [ rand ( 1 , tmp ) ] ;
22478: LD_ADDR_VAR 0 3
22482: PUSH
22483: LD_VAR 0 2
22487: PUSH
22488: LD_INT 1
22490: PPUSH
22491: LD_VAR 0 2
22495: PPUSH
22496: CALL_OW 12
22500: ARRAY
22501: ST_TO_ADDR
// if Crawls ( un ) then
22502: LD_VAR 0 3
22506: PPUSH
22507: CALL_OW 318
22511: IFFALSE 22522
// ComWalk ( un ) ;
22513: LD_VAR 0 3
22517: PPUSH
22518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22522: LD_VAR 0 3
22526: PPUSH
22527: LD_INT 8
22529: PPUSH
22530: CALL_OW 336
// end ; 4 :
22534: GO 22640
22536: LD_INT 4
22538: DOUBLE
22539: EQUAL
22540: IFTRUE 22544
22542: GO 22618
22544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22545: LD_ADDR_VAR 0 2
22549: PUSH
22550: LD_INT 22
22552: PUSH
22553: LD_OWVAR 2
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 30
22564: PUSH
22565: LD_INT 29
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: ST_TO_ADDR
// if not tmp then
22581: LD_VAR 0 2
22585: NOT
22586: IFFALSE 22590
// exit ;
22588: GO 22640
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22590: LD_VAR 0 2
22594: PUSH
22595: LD_INT 1
22597: ARRAY
22598: PPUSH
22599: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22603: LD_VAR 0 2
22607: PUSH
22608: LD_INT 1
22610: ARRAY
22611: PPUSH
22612: CALL_OW 65
// end ; 5 .. 7 :
22616: GO 22640
22618: LD_INT 5
22620: DOUBLE
22621: GREATEREQUAL
22622: IFFALSE 22630
22624: LD_INT 7
22626: DOUBLE
22627: LESSEQUAL
22628: IFTRUE 22632
22630: GO 22639
22632: POP
// StreamSibBomb ; end ;
22633: CALL 18877 0 0
22637: GO 22640
22639: POP
// end ;
22640: PPOPN 3
22642: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22643: LD_EXP 47
22647: PUSH
22648: LD_EXP 97
22652: AND
22653: IFFALSE 22809
22655: GO 22657
22657: DISABLE
22658: LD_INT 0
22660: PPUSH
22661: PPUSH
22662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_INT 81
22670: PUSH
22671: LD_OWVAR 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: LD_INT 21
22685: PUSH
22686: LD_INT 1
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 21
22695: PUSH
22696: LD_INT 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: LIST
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 69
22716: ST_TO_ADDR
// if not tmp then
22717: LD_VAR 0 2
22721: NOT
22722: IFFALSE 22726
// exit ;
22724: GO 22809
// p := 0 ;
22726: LD_ADDR_VAR 0 3
22730: PUSH
22731: LD_INT 0
22733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22734: LD_INT 35
22736: PPUSH
22737: CALL_OW 67
// p := p + 1 ;
22741: LD_ADDR_VAR 0 3
22745: PUSH
22746: LD_VAR 0 3
22750: PUSH
22751: LD_INT 1
22753: PLUS
22754: ST_TO_ADDR
// for i in tmp do
22755: LD_ADDR_VAR 0 1
22759: PUSH
22760: LD_VAR 0 2
22764: PUSH
22765: FOR_IN
22766: IFFALSE 22797
// if GetLives ( i ) < 1000 then
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 256
22777: PUSH
22778: LD_INT 1000
22780: LESS
22781: IFFALSE 22795
// SetLives ( i , 1000 ) ;
22783: LD_VAR 0 1
22787: PPUSH
22788: LD_INT 1000
22790: PPUSH
22791: CALL_OW 234
22795: GO 22765
22797: POP
22798: POP
// until p > 20 ;
22799: LD_VAR 0 3
22803: PUSH
22804: LD_INT 20
22806: GREATER
22807: IFFALSE 22734
// end ;
22809: PPOPN 3
22811: END
// every 0 0$1 trigger StreamModeActive and sTime do
22812: LD_EXP 47
22816: PUSH
22817: LD_EXP 98
22821: AND
22822: IFFALSE 22857
22824: GO 22826
22826: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22827: LD_INT 28
22829: PPUSH
22830: LD_OWVAR 2
22834: PPUSH
22835: LD_INT 2
22837: PPUSH
22838: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22842: LD_INT 30
22844: PPUSH
22845: LD_OWVAR 2
22849: PPUSH
22850: LD_INT 2
22852: PPUSH
22853: CALL_OW 322
// end ;
22857: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22858: LD_EXP 47
22862: PUSH
22863: LD_EXP 99
22867: AND
22868: IFFALSE 22989
22870: GO 22872
22872: DISABLE
22873: LD_INT 0
22875: PPUSH
22876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22877: LD_ADDR_VAR 0 2
22881: PUSH
22882: LD_INT 22
22884: PUSH
22885: LD_OWVAR 2
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 21
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 3
22906: PUSH
22907: LD_INT 23
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL_OW 69
22930: ST_TO_ADDR
// if not tmp then
22931: LD_VAR 0 2
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 22989
// for i in tmp do
22940: LD_ADDR_VAR 0 1
22944: PUSH
22945: LD_VAR 0 2
22949: PUSH
22950: FOR_IN
22951: IFFALSE 22987
// begin if Crawls ( i ) then
22953: LD_VAR 0 1
22957: PPUSH
22958: CALL_OW 318
22962: IFFALSE 22973
// ComWalk ( i ) ;
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 138
// SetClass ( i , 2 ) ;
22973: LD_VAR 0 1
22977: PPUSH
22978: LD_INT 2
22980: PPUSH
22981: CALL_OW 336
// end ;
22985: GO 22950
22987: POP
22988: POP
// end ;
22989: PPOPN 2
22991: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22992: LD_EXP 47
22996: PUSH
22997: LD_EXP 100
23001: AND
23002: IFFALSE 23290
23004: GO 23006
23006: DISABLE
23007: LD_INT 0
23009: PPUSH
23010: PPUSH
23011: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23012: LD_OWVAR 2
23016: PPUSH
23017: LD_INT 9
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: LD_INT 1
23025: PPUSH
23026: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23030: LD_INT 9
23032: PPUSH
23033: LD_OWVAR 2
23037: PPUSH
23038: CALL_OW 343
// uc_side := 9 ;
23042: LD_ADDR_OWVAR 20
23046: PUSH
23047: LD_INT 9
23049: ST_TO_ADDR
// uc_nation := 2 ;
23050: LD_ADDR_OWVAR 21
23054: PUSH
23055: LD_INT 2
23057: ST_TO_ADDR
// hc_name := Dark Warrior ;
23058: LD_ADDR_OWVAR 26
23062: PUSH
23063: LD_STRING Dark Warrior
23065: ST_TO_ADDR
// hc_gallery :=  ;
23066: LD_ADDR_OWVAR 33
23070: PUSH
23071: LD_STRING 
23073: ST_TO_ADDR
// hc_noskilllimit := true ;
23074: LD_ADDR_OWVAR 76
23078: PUSH
23079: LD_INT 1
23081: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23082: LD_ADDR_OWVAR 31
23086: PUSH
23087: LD_INT 30
23089: PUSH
23090: LD_INT 30
23092: PUSH
23093: LD_INT 30
23095: PUSH
23096: LD_INT 30
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: ST_TO_ADDR
// un := CreateHuman ;
23105: LD_ADDR_VAR 0 3
23109: PUSH
23110: CALL_OW 44
23114: ST_TO_ADDR
// hc_noskilllimit := false ;
23115: LD_ADDR_OWVAR 76
23119: PUSH
23120: LD_INT 0
23122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23123: LD_VAR 0 3
23127: PPUSH
23128: LD_INT 1
23130: PPUSH
23131: CALL_OW 51
// ToLua ( playRanger() ) ;
23135: LD_STRING playRanger()
23137: PPUSH
23138: CALL_OW 559
// p := 0 ;
23142: LD_ADDR_VAR 0 2
23146: PUSH
23147: LD_INT 0
23149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23150: LD_INT 35
23152: PPUSH
23153: CALL_OW 67
// p := p + 1 ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_VAR 0 2
23166: PUSH
23167: LD_INT 1
23169: PLUS
23170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23171: LD_VAR 0 3
23175: PPUSH
23176: CALL_OW 256
23180: PUSH
23181: LD_INT 1000
23183: LESS
23184: IFFALSE 23198
// SetLives ( un , 1000 ) ;
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1000
23193: PPUSH
23194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23198: LD_VAR 0 3
23202: PPUSH
23203: LD_INT 81
23205: PUSH
23206: LD_OWVAR 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 91
23217: PUSH
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PPUSH
23235: CALL_OW 69
23239: PPUSH
23240: LD_VAR 0 3
23244: PPUSH
23245: CALL_OW 74
23249: PPUSH
23250: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23254: LD_VAR 0 2
23258: PUSH
23259: LD_INT 80
23261: GREATER
23262: PUSH
23263: LD_VAR 0 3
23267: PPUSH
23268: CALL_OW 301
23272: OR
23273: IFFALSE 23150
// if un then
23275: LD_VAR 0 3
23279: IFFALSE 23290
// RemoveUnit ( un ) ;
23281: LD_VAR 0 3
23285: PPUSH
23286: CALL_OW 64
// end ;
23290: PPOPN 3
23292: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23293: LD_EXP 101
23297: IFFALSE 23413
23299: GO 23301
23301: DISABLE
23302: LD_INT 0
23304: PPUSH
23305: PPUSH
23306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23307: LD_ADDR_VAR 0 2
23311: PUSH
23312: LD_INT 81
23314: PUSH
23315: LD_OWVAR 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 21
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PPUSH
23338: CALL_OW 69
23342: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23343: LD_STRING playComputer()
23345: PPUSH
23346: CALL_OW 559
// if not tmp then
23350: LD_VAR 0 2
23354: NOT
23355: IFFALSE 23359
// exit ;
23357: GO 23413
// for i in tmp do
23359: LD_ADDR_VAR 0 1
23363: PUSH
23364: LD_VAR 0 2
23368: PUSH
23369: FOR_IN
23370: IFFALSE 23411
// for j := 1 to 4 do
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: DOUBLE
23378: LD_INT 1
23380: DEC
23381: ST_TO_ADDR
23382: LD_INT 4
23384: PUSH
23385: FOR_TO
23386: IFFALSE 23407
// SetSkill ( i , j , 10 ) ;
23388: LD_VAR 0 1
23392: PPUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: LD_INT 10
23400: PPUSH
23401: CALL_OW 237
23405: GO 23385
23407: POP
23408: POP
23409: GO 23369
23411: POP
23412: POP
// end ;
23413: PPOPN 3
23415: END
// every 0 0$1 trigger s30 do var i , tmp ;
23416: LD_EXP 102
23420: IFFALSE 23489
23422: GO 23424
23424: DISABLE
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 22
23436: PUSH
23437: LD_OWVAR 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PPUSH
23446: CALL_OW 69
23450: ST_TO_ADDR
// if not tmp then
23451: LD_VAR 0 2
23455: NOT
23456: IFFALSE 23460
// exit ;
23458: GO 23489
// for i in tmp do
23460: LD_ADDR_VAR 0 1
23464: PUSH
23465: LD_VAR 0 2
23469: PUSH
23470: FOR_IN
23471: IFFALSE 23487
// SetLives ( i , 300 ) ;
23473: LD_VAR 0 1
23477: PPUSH
23478: LD_INT 300
23480: PPUSH
23481: CALL_OW 234
23485: GO 23470
23487: POP
23488: POP
// end ;
23489: PPOPN 2
23491: END
// every 0 0$1 trigger s60 do var i , tmp ;
23492: LD_EXP 103
23496: IFFALSE 23565
23498: GO 23500
23500: DISABLE
23501: LD_INT 0
23503: PPUSH
23504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: LD_INT 22
23512: PUSH
23513: LD_OWVAR 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 69
23526: ST_TO_ADDR
// if not tmp then
23527: LD_VAR 0 2
23531: NOT
23532: IFFALSE 23536
// exit ;
23534: GO 23565
// for i in tmp do
23536: LD_ADDR_VAR 0 1
23540: PUSH
23541: LD_VAR 0 2
23545: PUSH
23546: FOR_IN
23547: IFFALSE 23563
// SetLives ( i , 600 ) ;
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_INT 600
23556: PPUSH
23557: CALL_OW 234
23561: GO 23546
23563: POP
23564: POP
// end ;
23565: PPOPN 2
23567: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23568: LD_INT 0
23570: PPUSH
// case cmd of 301 :
23571: LD_VAR 0 1
23575: PUSH
23576: LD_INT 301
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23616
23584: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23585: LD_VAR 0 6
23589: PPUSH
23590: LD_VAR 0 7
23594: PPUSH
23595: LD_VAR 0 8
23599: PPUSH
23600: LD_VAR 0 4
23604: PPUSH
23605: LD_VAR 0 5
23609: PPUSH
23610: CALL 24825 0 5
23614: GO 23737
23616: LD_INT 302
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23661
23624: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23625: LD_VAR 0 6
23629: PPUSH
23630: LD_VAR 0 7
23634: PPUSH
23635: LD_VAR 0 8
23639: PPUSH
23640: LD_VAR 0 9
23644: PPUSH
23645: LD_VAR 0 4
23649: PPUSH
23650: LD_VAR 0 5
23654: PPUSH
23655: CALL 24916 0 6
23659: GO 23737
23661: LD_INT 303
23663: DOUBLE
23664: EQUAL
23665: IFTRUE 23669
23667: GO 23706
23669: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23670: LD_VAR 0 6
23674: PPUSH
23675: LD_VAR 0 7
23679: PPUSH
23680: LD_VAR 0 8
23684: PPUSH
23685: LD_VAR 0 9
23689: PPUSH
23690: LD_VAR 0 4
23694: PPUSH
23695: LD_VAR 0 5
23699: PPUSH
23700: CALL 23742 0 6
23704: GO 23737
23706: LD_INT 304
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23736
23714: POP
// hHackTeleport ( unit , x , y ) ; end ;
23715: LD_VAR 0 2
23719: PPUSH
23720: LD_VAR 0 4
23724: PPUSH
23725: LD_VAR 0 5
23729: PPUSH
23730: CALL 25509 0 3
23734: GO 23737
23736: POP
// end ;
23737: LD_VAR 0 12
23741: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23742: LD_INT 0
23744: PPUSH
23745: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23746: LD_VAR 0 1
23750: PUSH
23751: LD_INT 1
23753: LESS
23754: PUSH
23755: LD_VAR 0 1
23759: PUSH
23760: LD_INT 3
23762: GREATER
23763: OR
23764: PUSH
23765: LD_VAR 0 5
23769: PPUSH
23770: LD_VAR 0 6
23774: PPUSH
23775: CALL_OW 428
23779: OR
23780: IFFALSE 23784
// exit ;
23782: GO 24512
// uc_side := your_side ;
23784: LD_ADDR_OWVAR 20
23788: PUSH
23789: LD_OWVAR 2
23793: ST_TO_ADDR
// uc_nation := nation ;
23794: LD_ADDR_OWVAR 21
23798: PUSH
23799: LD_VAR 0 1
23803: ST_TO_ADDR
// bc_level = 1 ;
23804: LD_ADDR_OWVAR 43
23808: PUSH
23809: LD_INT 1
23811: ST_TO_ADDR
// case btype of 1 :
23812: LD_VAR 0 2
23816: PUSH
23817: LD_INT 1
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 23836
23825: POP
// bc_type := b_depot ; 2 :
23826: LD_ADDR_OWVAR 42
23830: PUSH
23831: LD_INT 0
23833: ST_TO_ADDR
23834: GO 24456
23836: LD_INT 2
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 23855
23844: POP
// bc_type := b_warehouse ; 3 :
23845: LD_ADDR_OWVAR 42
23849: PUSH
23850: LD_INT 1
23852: ST_TO_ADDR
23853: GO 24456
23855: LD_INT 3
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 23874
23863: POP
// bc_type := b_lab ; 4 .. 9 :
23864: LD_ADDR_OWVAR 42
23868: PUSH
23869: LD_INT 6
23871: ST_TO_ADDR
23872: GO 24456
23874: LD_INT 4
23876: DOUBLE
23877: GREATEREQUAL
23878: IFFALSE 23886
23880: LD_INT 9
23882: DOUBLE
23883: LESSEQUAL
23884: IFTRUE 23888
23886: GO 23948
23888: POP
// begin bc_type := b_lab_half ;
23889: LD_ADDR_OWVAR 42
23893: PUSH
23894: LD_INT 7
23896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23897: LD_ADDR_OWVAR 44
23901: PUSH
23902: LD_INT 10
23904: PUSH
23905: LD_INT 11
23907: PUSH
23908: LD_INT 12
23910: PUSH
23911: LD_INT 15
23913: PUSH
23914: LD_INT 14
23916: PUSH
23917: LD_INT 13
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: LD_VAR 0 2
23932: PUSH
23933: LD_INT 3
23935: MINUS
23936: ARRAY
23937: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23938: LD_ADDR_OWVAR 45
23942: PUSH
23943: LD_INT 9
23945: ST_TO_ADDR
// end ; 10 .. 13 :
23946: GO 24456
23948: LD_INT 10
23950: DOUBLE
23951: GREATEREQUAL
23952: IFFALSE 23960
23954: LD_INT 13
23956: DOUBLE
23957: LESSEQUAL
23958: IFTRUE 23962
23960: GO 24039
23962: POP
// begin bc_type := b_lab_full ;
23963: LD_ADDR_OWVAR 42
23967: PUSH
23968: LD_INT 8
23970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23971: LD_ADDR_OWVAR 44
23975: PUSH
23976: LD_INT 10
23978: PUSH
23979: LD_INT 12
23981: PUSH
23982: LD_INT 14
23984: PUSH
23985: LD_INT 13
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: PUSH
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 9
24001: MINUS
24002: ARRAY
24003: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24004: LD_ADDR_OWVAR 45
24008: PUSH
24009: LD_INT 11
24011: PUSH
24012: LD_INT 15
24014: PUSH
24015: LD_INT 12
24017: PUSH
24018: LD_INT 15
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: PUSH
24027: LD_VAR 0 2
24031: PUSH
24032: LD_INT 9
24034: MINUS
24035: ARRAY
24036: ST_TO_ADDR
// end ; 14 :
24037: GO 24456
24039: LD_INT 14
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24058
24047: POP
// bc_type := b_workshop ; 15 :
24048: LD_ADDR_OWVAR 42
24052: PUSH
24053: LD_INT 2
24055: ST_TO_ADDR
24056: GO 24456
24058: LD_INT 15
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24077
24066: POP
// bc_type := b_factory ; 16 :
24067: LD_ADDR_OWVAR 42
24071: PUSH
24072: LD_INT 3
24074: ST_TO_ADDR
24075: GO 24456
24077: LD_INT 16
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24096
24085: POP
// bc_type := b_ext_gun ; 17 :
24086: LD_ADDR_OWVAR 42
24090: PUSH
24091: LD_INT 17
24093: ST_TO_ADDR
24094: GO 24456
24096: LD_INT 17
24098: DOUBLE
24099: EQUAL
24100: IFTRUE 24104
24102: GO 24132
24104: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24105: LD_ADDR_OWVAR 42
24109: PUSH
24110: LD_INT 19
24112: PUSH
24113: LD_INT 23
24115: PUSH
24116: LD_INT 19
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: PUSH
24124: LD_VAR 0 1
24128: ARRAY
24129: ST_TO_ADDR
24130: GO 24456
24132: LD_INT 18
24134: DOUBLE
24135: EQUAL
24136: IFTRUE 24140
24138: GO 24151
24140: POP
// bc_type := b_ext_radar ; 19 :
24141: LD_ADDR_OWVAR 42
24145: PUSH
24146: LD_INT 20
24148: ST_TO_ADDR
24149: GO 24456
24151: LD_INT 19
24153: DOUBLE
24154: EQUAL
24155: IFTRUE 24159
24157: GO 24170
24159: POP
// bc_type := b_ext_radio ; 20 :
24160: LD_ADDR_OWVAR 42
24164: PUSH
24165: LD_INT 22
24167: ST_TO_ADDR
24168: GO 24456
24170: LD_INT 20
24172: DOUBLE
24173: EQUAL
24174: IFTRUE 24178
24176: GO 24189
24178: POP
// bc_type := b_ext_siberium ; 21 :
24179: LD_ADDR_OWVAR 42
24183: PUSH
24184: LD_INT 21
24186: ST_TO_ADDR
24187: GO 24456
24189: LD_INT 21
24191: DOUBLE
24192: EQUAL
24193: IFTRUE 24197
24195: GO 24208
24197: POP
// bc_type := b_ext_computer ; 22 :
24198: LD_ADDR_OWVAR 42
24202: PUSH
24203: LD_INT 24
24205: ST_TO_ADDR
24206: GO 24456
24208: LD_INT 22
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24227
24216: POP
// bc_type := b_ext_track ; 23 :
24217: LD_ADDR_OWVAR 42
24221: PUSH
24222: LD_INT 16
24224: ST_TO_ADDR
24225: GO 24456
24227: LD_INT 23
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24246
24235: POP
// bc_type := b_ext_laser ; 24 :
24236: LD_ADDR_OWVAR 42
24240: PUSH
24241: LD_INT 25
24243: ST_TO_ADDR
24244: GO 24456
24246: LD_INT 24
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24265
24254: POP
// bc_type := b_control_tower ; 25 :
24255: LD_ADDR_OWVAR 42
24259: PUSH
24260: LD_INT 36
24262: ST_TO_ADDR
24263: GO 24456
24265: LD_INT 25
24267: DOUBLE
24268: EQUAL
24269: IFTRUE 24273
24271: GO 24284
24273: POP
// bc_type := b_breastwork ; 26 :
24274: LD_ADDR_OWVAR 42
24278: PUSH
24279: LD_INT 31
24281: ST_TO_ADDR
24282: GO 24456
24284: LD_INT 26
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24303
24292: POP
// bc_type := b_bunker ; 27 :
24293: LD_ADDR_OWVAR 42
24297: PUSH
24298: LD_INT 32
24300: ST_TO_ADDR
24301: GO 24456
24303: LD_INT 27
24305: DOUBLE
24306: EQUAL
24307: IFTRUE 24311
24309: GO 24322
24311: POP
// bc_type := b_turret ; 28 :
24312: LD_ADDR_OWVAR 42
24316: PUSH
24317: LD_INT 33
24319: ST_TO_ADDR
24320: GO 24456
24322: LD_INT 28
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24341
24330: POP
// bc_type := b_armoury ; 29 :
24331: LD_ADDR_OWVAR 42
24335: PUSH
24336: LD_INT 4
24338: ST_TO_ADDR
24339: GO 24456
24341: LD_INT 29
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24360
24349: POP
// bc_type := b_barracks ; 30 :
24350: LD_ADDR_OWVAR 42
24354: PUSH
24355: LD_INT 5
24357: ST_TO_ADDR
24358: GO 24456
24360: LD_INT 30
24362: DOUBLE
24363: EQUAL
24364: IFTRUE 24368
24366: GO 24379
24368: POP
// bc_type := b_solar_power ; 31 :
24369: LD_ADDR_OWVAR 42
24373: PUSH
24374: LD_INT 27
24376: ST_TO_ADDR
24377: GO 24456
24379: LD_INT 31
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24398
24387: POP
// bc_type := b_oil_power ; 32 :
24388: LD_ADDR_OWVAR 42
24392: PUSH
24393: LD_INT 26
24395: ST_TO_ADDR
24396: GO 24456
24398: LD_INT 32
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24406
24404: GO 24417
24406: POP
// bc_type := b_siberite_power ; 33 :
24407: LD_ADDR_OWVAR 42
24411: PUSH
24412: LD_INT 28
24414: ST_TO_ADDR
24415: GO 24456
24417: LD_INT 33
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24436
24425: POP
// bc_type := b_oil_mine ; 34 :
24426: LD_ADDR_OWVAR 42
24430: PUSH
24431: LD_INT 29
24433: ST_TO_ADDR
24434: GO 24456
24436: LD_INT 34
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24455
24444: POP
// bc_type := b_siberite_mine ; end ;
24445: LD_ADDR_OWVAR 42
24449: PUSH
24450: LD_INT 30
24452: ST_TO_ADDR
24453: GO 24456
24455: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24456: LD_ADDR_VAR 0 8
24460: PUSH
24461: LD_VAR 0 5
24465: PPUSH
24466: LD_VAR 0 6
24470: PPUSH
24471: LD_VAR 0 3
24475: PPUSH
24476: CALL_OW 47
24480: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24481: LD_OWVAR 42
24485: PUSH
24486: LD_INT 32
24488: PUSH
24489: LD_INT 33
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: IN
24496: IFFALSE 24512
// PlaceWeaponTurret ( b , weapon ) ;
24498: LD_VAR 0 8
24502: PPUSH
24503: LD_VAR 0 4
24507: PPUSH
24508: CALL_OW 431
// end ;
24512: LD_VAR 0 7
24516: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24517: LD_INT 0
24519: PPUSH
24520: PPUSH
24521: PPUSH
24522: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24523: LD_ADDR_VAR 0 4
24527: PUSH
24528: LD_INT 22
24530: PUSH
24531: LD_OWVAR 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: LD_INT 30
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 30
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: ST_TO_ADDR
// if not tmp then
24577: LD_VAR 0 4
24581: NOT
24582: IFFALSE 24586
// exit ;
24584: GO 24645
// for i in tmp do
24586: LD_ADDR_VAR 0 2
24590: PUSH
24591: LD_VAR 0 4
24595: PUSH
24596: FOR_IN
24597: IFFALSE 24643
// for j = 1 to 3 do
24599: LD_ADDR_VAR 0 3
24603: PUSH
24604: DOUBLE
24605: LD_INT 1
24607: DEC
24608: ST_TO_ADDR
24609: LD_INT 3
24611: PUSH
24612: FOR_TO
24613: IFFALSE 24639
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24615: LD_VAR 0 2
24619: PPUSH
24620: CALL_OW 274
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: LD_INT 99999
24632: PPUSH
24633: CALL_OW 277
24637: GO 24612
24639: POP
24640: POP
24641: GO 24596
24643: POP
24644: POP
// end ;
24645: LD_VAR 0 1
24649: RET
// export function hHackSetLevel10 ; var i , j ; begin
24650: LD_INT 0
24652: PPUSH
24653: PPUSH
24654: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24655: LD_ADDR_VAR 0 2
24659: PUSH
24660: LD_INT 21
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PPUSH
24670: CALL_OW 69
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24728
// if IsSelected ( i ) then
24678: LD_VAR 0 2
24682: PPUSH
24683: CALL_OW 306
24687: IFFALSE 24726
// begin for j := 1 to 4 do
24689: LD_ADDR_VAR 0 3
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_INT 4
24701: PUSH
24702: FOR_TO
24703: IFFALSE 24724
// SetSkill ( i , j , 10 ) ;
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 10
24717: PPUSH
24718: CALL_OW 237
24722: GO 24702
24724: POP
24725: POP
// end ;
24726: GO 24675
24728: POP
24729: POP
// end ;
24730: LD_VAR 0 1
24734: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24735: LD_INT 0
24737: PPUSH
24738: PPUSH
24739: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 22
24747: PUSH
24748: LD_OWVAR 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 21
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PPUSH
24771: CALL_OW 69
24775: PUSH
24776: FOR_IN
24777: IFFALSE 24818
// begin for j := 1 to 4 do
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: DOUBLE
24785: LD_INT 1
24787: DEC
24788: ST_TO_ADDR
24789: LD_INT 4
24791: PUSH
24792: FOR_TO
24793: IFFALSE 24814
// SetSkill ( i , j , 10 ) ;
24795: LD_VAR 0 2
24799: PPUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: LD_INT 10
24807: PPUSH
24808: CALL_OW 237
24812: GO 24792
24814: POP
24815: POP
// end ;
24816: GO 24776
24818: POP
24819: POP
// end ;
24820: LD_VAR 0 1
24824: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24825: LD_INT 0
24827: PPUSH
// uc_side := your_side ;
24828: LD_ADDR_OWVAR 20
24832: PUSH
24833: LD_OWVAR 2
24837: ST_TO_ADDR
// uc_nation := nation ;
24838: LD_ADDR_OWVAR 21
24842: PUSH
24843: LD_VAR 0 1
24847: ST_TO_ADDR
// InitHc ;
24848: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24852: LD_INT 0
24854: PPUSH
24855: LD_VAR 0 2
24859: PPUSH
24860: LD_VAR 0 3
24864: PPUSH
24865: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24869: LD_VAR 0 4
24873: PPUSH
24874: LD_VAR 0 5
24878: PPUSH
24879: CALL_OW 428
24883: PUSH
24884: LD_INT 0
24886: EQUAL
24887: IFFALSE 24911
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24889: CALL_OW 44
24893: PPUSH
24894: LD_VAR 0 4
24898: PPUSH
24899: LD_VAR 0 5
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 48
// end ;
24911: LD_VAR 0 6
24915: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24916: LD_INT 0
24918: PPUSH
24919: PPUSH
// uc_side := your_side ;
24920: LD_ADDR_OWVAR 20
24924: PUSH
24925: LD_OWVAR 2
24929: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24930: LD_VAR 0 1
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 3
24943: PUSH
24944: LD_INT 4
24946: PUSH
24947: LD_INT 5
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: IN
24957: IFFALSE 24969
// uc_nation := nation_american else
24959: LD_ADDR_OWVAR 21
24963: PUSH
24964: LD_INT 1
24966: ST_TO_ADDR
24967: GO 25012
// if chassis in [ 11 , 12 , 13 , 14 ] then
24969: LD_VAR 0 1
24973: PUSH
24974: LD_INT 11
24976: PUSH
24977: LD_INT 12
24979: PUSH
24980: LD_INT 13
24982: PUSH
24983: LD_INT 14
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: IN
24992: IFFALSE 25004
// uc_nation := nation_arabian else
24994: LD_ADDR_OWVAR 21
24998: PUSH
24999: LD_INT 2
25001: ST_TO_ADDR
25002: GO 25012
// uc_nation := nation_russian ;
25004: LD_ADDR_OWVAR 21
25008: PUSH
25009: LD_INT 3
25011: ST_TO_ADDR
// vc_chassis := chassis ;
25012: LD_ADDR_OWVAR 37
25016: PUSH
25017: LD_VAR 0 1
25021: ST_TO_ADDR
// vc_engine := engine ;
25022: LD_ADDR_OWVAR 39
25026: PUSH
25027: LD_VAR 0 2
25031: ST_TO_ADDR
// vc_control := control ;
25032: LD_ADDR_OWVAR 38
25036: PUSH
25037: LD_VAR 0 3
25041: ST_TO_ADDR
// vc_weapon := weapon ;
25042: LD_ADDR_OWVAR 40
25046: PUSH
25047: LD_VAR 0 4
25051: ST_TO_ADDR
// un := CreateVehicle ;
25052: LD_ADDR_VAR 0 8
25056: PUSH
25057: CALL_OW 45
25061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25062: LD_VAR 0 8
25066: PPUSH
25067: LD_INT 0
25069: PPUSH
25070: LD_INT 5
25072: PPUSH
25073: CALL_OW 12
25077: PPUSH
25078: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25082: LD_VAR 0 8
25086: PPUSH
25087: LD_VAR 0 5
25091: PPUSH
25092: LD_VAR 0 6
25096: PPUSH
25097: LD_INT 1
25099: PPUSH
25100: CALL_OW 48
// end ;
25104: LD_VAR 0 7
25108: RET
// export hInvincible ; every 1 do
25109: GO 25111
25111: DISABLE
// hInvincible := [ ] ;
25112: LD_ADDR_EXP 104
25116: PUSH
25117: EMPTY
25118: ST_TO_ADDR
25119: END
// every 10 do var i ;
25120: GO 25122
25122: DISABLE
25123: LD_INT 0
25125: PPUSH
// begin enable ;
25126: ENABLE
// if not hInvincible then
25127: LD_EXP 104
25131: NOT
25132: IFFALSE 25136
// exit ;
25134: GO 25180
// for i in hInvincible do
25136: LD_ADDR_VAR 0 1
25140: PUSH
25141: LD_EXP 104
25145: PUSH
25146: FOR_IN
25147: IFFALSE 25178
// if GetLives ( i ) < 1000 then
25149: LD_VAR 0 1
25153: PPUSH
25154: CALL_OW 256
25158: PUSH
25159: LD_INT 1000
25161: LESS
25162: IFFALSE 25176
// SetLives ( i , 1000 ) ;
25164: LD_VAR 0 1
25168: PPUSH
25169: LD_INT 1000
25171: PPUSH
25172: CALL_OW 234
25176: GO 25146
25178: POP
25179: POP
// end ;
25180: PPOPN 1
25182: END
// export function hHackInvincible ; var i ; begin
25183: LD_INT 0
25185: PPUSH
25186: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_INT 2
25194: PUSH
25195: LD_INT 21
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 21
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: PPUSH
25220: CALL_OW 69
25224: PUSH
25225: FOR_IN
25226: IFFALSE 25287
// if IsSelected ( i ) then
25228: LD_VAR 0 2
25232: PPUSH
25233: CALL_OW 306
25237: IFFALSE 25285
// begin if i in hInvincible then
25239: LD_VAR 0 2
25243: PUSH
25244: LD_EXP 104
25248: IN
25249: IFFALSE 25269
// hInvincible := hInvincible diff i else
25251: LD_ADDR_EXP 104
25255: PUSH
25256: LD_EXP 104
25260: PUSH
25261: LD_VAR 0 2
25265: DIFF
25266: ST_TO_ADDR
25267: GO 25285
// hInvincible := hInvincible union i ;
25269: LD_ADDR_EXP 104
25273: PUSH
25274: LD_EXP 104
25278: PUSH
25279: LD_VAR 0 2
25283: UNION
25284: ST_TO_ADDR
// end ;
25285: GO 25225
25287: POP
25288: POP
// end ;
25289: LD_VAR 0 1
25293: RET
// export function hHackInvisible ; var i , j ; begin
25294: LD_INT 0
25296: PPUSH
25297: PPUSH
25298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25299: LD_ADDR_VAR 0 2
25303: PUSH
25304: LD_INT 21
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: PUSH
25319: FOR_IN
25320: IFFALSE 25344
// if IsSelected ( i ) then
25322: LD_VAR 0 2
25326: PPUSH
25327: CALL_OW 306
25331: IFFALSE 25342
// ComForceInvisible ( i ) ;
25333: LD_VAR 0 2
25337: PPUSH
25338: CALL_OW 496
25342: GO 25319
25344: POP
25345: POP
// end ;
25346: LD_VAR 0 1
25350: RET
// export function hHackChangeYourSide ; begin
25351: LD_INT 0
25353: PPUSH
// if your_side = 8 then
25354: LD_OWVAR 2
25358: PUSH
25359: LD_INT 8
25361: EQUAL
25362: IFFALSE 25374
// your_side := 0 else
25364: LD_ADDR_OWVAR 2
25368: PUSH
25369: LD_INT 0
25371: ST_TO_ADDR
25372: GO 25388
// your_side := your_side + 1 ;
25374: LD_ADDR_OWVAR 2
25378: PUSH
25379: LD_OWVAR 2
25383: PUSH
25384: LD_INT 1
25386: PLUS
25387: ST_TO_ADDR
// end ;
25388: LD_VAR 0 1
25392: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25393: LD_INT 0
25395: PPUSH
25396: PPUSH
25397: PPUSH
// for i in all_units do
25398: LD_ADDR_VAR 0 2
25402: PUSH
25403: LD_OWVAR 3
25407: PUSH
25408: FOR_IN
25409: IFFALSE 25487
// if IsSelected ( i ) then
25411: LD_VAR 0 2
25415: PPUSH
25416: CALL_OW 306
25420: IFFALSE 25485
// begin j := GetSide ( i ) ;
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_VAR 0 2
25431: PPUSH
25432: CALL_OW 255
25436: ST_TO_ADDR
// if j = 8 then
25437: LD_VAR 0 3
25441: PUSH
25442: LD_INT 8
25444: EQUAL
25445: IFFALSE 25457
// j := 0 else
25447: LD_ADDR_VAR 0 3
25451: PUSH
25452: LD_INT 0
25454: ST_TO_ADDR
25455: GO 25471
// j := j + 1 ;
25457: LD_ADDR_VAR 0 3
25461: PUSH
25462: LD_VAR 0 3
25466: PUSH
25467: LD_INT 1
25469: PLUS
25470: ST_TO_ADDR
// SetSide ( i , j ) ;
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: CALL_OW 235
// end ;
25485: GO 25408
25487: POP
25488: POP
// end ;
25489: LD_VAR 0 1
25493: RET
// export function hHackFog ; begin
25494: LD_INT 0
25496: PPUSH
// FogOff ( true ) ;
25497: LD_INT 1
25499: PPUSH
25500: CALL_OW 344
// end ;
25504: LD_VAR 0 1
25508: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25509: LD_INT 0
25511: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_VAR 0 2
25521: PPUSH
25522: LD_VAR 0 3
25526: PPUSH
25527: LD_INT 1
25529: PPUSH
25530: LD_INT 1
25532: PPUSH
25533: CALL_OW 483
// CenterOnXY ( x , y ) ;
25537: LD_VAR 0 2
25541: PPUSH
25542: LD_VAR 0 3
25546: PPUSH
25547: CALL_OW 84
// end ;
25551: LD_VAR 0 4
25555: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25556: LD_INT 0
25558: PPUSH
25559: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25560: LD_VAR 0 1
25564: NOT
25565: PUSH
25566: LD_VAR 0 2
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: CALL_OW 488
25580: NOT
25581: OR
25582: PUSH
25583: LD_VAR 0 1
25587: PPUSH
25588: CALL_OW 266
25592: PUSH
25593: LD_INT 3
25595: NONEQUAL
25596: PUSH
25597: LD_VAR 0 1
25601: PPUSH
25602: CALL_OW 247
25606: PUSH
25607: LD_INT 1
25609: EQUAL
25610: NOT
25611: AND
25612: OR
25613: IFFALSE 25617
// exit ;
25615: GO 25766
// if GetType ( factory ) = unit_human then
25617: LD_VAR 0 1
25621: PPUSH
25622: CALL_OW 247
25626: PUSH
25627: LD_INT 1
25629: EQUAL
25630: IFFALSE 25647
// factory := IsInUnit ( factory ) ;
25632: LD_ADDR_VAR 0 1
25636: PUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 310
25646: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 266
25656: PUSH
25657: LD_INT 3
25659: NONEQUAL
25660: IFFALSE 25664
// exit ;
25662: GO 25766
// if HexInfo ( x , y ) = factory then
25664: LD_VAR 0 2
25668: PPUSH
25669: LD_VAR 0 3
25673: PPUSH
25674: CALL_OW 428
25678: PUSH
25679: LD_VAR 0 1
25683: EQUAL
25684: IFFALSE 25711
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25686: LD_ADDR_EXP 105
25690: PUSH
25691: LD_EXP 105
25695: PPUSH
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_INT 0
25703: PPUSH
25704: CALL_OW 1
25708: ST_TO_ADDR
25709: GO 25762
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25711: LD_ADDR_EXP 105
25715: PUSH
25716: LD_EXP 105
25720: PPUSH
25721: LD_VAR 0 1
25725: PPUSH
25726: LD_VAR 0 1
25730: PPUSH
25731: CALL_OW 255
25735: PUSH
25736: LD_VAR 0 1
25740: PUSH
25741: LD_VAR 0 2
25745: PUSH
25746: LD_VAR 0 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: PPUSH
25757: CALL_OW 1
25761: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25762: CALL 25771 0 0
// end ;
25766: LD_VAR 0 4
25770: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25771: LD_INT 0
25773: PPUSH
25774: PPUSH
25775: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25776: LD_STRING resetFactoryWaypoint();
25778: PPUSH
25779: CALL_OW 559
// if factoryWaypoints then
25783: LD_EXP 105
25787: IFFALSE 25913
// begin list := PrepareArray ( factoryWaypoints ) ;
25789: LD_ADDR_VAR 0 3
25793: PUSH
25794: LD_EXP 105
25798: PPUSH
25799: CALL 73210 0 1
25803: ST_TO_ADDR
// for i := 1 to list do
25804: LD_ADDR_VAR 0 2
25808: PUSH
25809: DOUBLE
25810: LD_INT 1
25812: DEC
25813: ST_TO_ADDR
25814: LD_VAR 0 3
25818: PUSH
25819: FOR_TO
25820: IFFALSE 25911
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25822: LD_STRING setFactoryWaypointXY(
25824: PUSH
25825: LD_VAR 0 3
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: STR
25840: PUSH
25841: LD_STRING ,
25843: STR
25844: PUSH
25845: LD_VAR 0 3
25849: PUSH
25850: LD_VAR 0 2
25854: ARRAY
25855: PUSH
25856: LD_INT 2
25858: ARRAY
25859: STR
25860: PUSH
25861: LD_STRING ,
25863: STR
25864: PUSH
25865: LD_VAR 0 3
25869: PUSH
25870: LD_VAR 0 2
25874: ARRAY
25875: PUSH
25876: LD_INT 3
25878: ARRAY
25879: STR
25880: PUSH
25881: LD_STRING ,
25883: STR
25884: PUSH
25885: LD_VAR 0 3
25889: PUSH
25890: LD_VAR 0 2
25894: ARRAY
25895: PUSH
25896: LD_INT 4
25898: ARRAY
25899: STR
25900: PUSH
25901: LD_STRING )
25903: STR
25904: PPUSH
25905: CALL_OW 559
25909: GO 25819
25911: POP
25912: POP
// end ; end ;
25913: LD_VAR 0 1
25917: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25918: LD_INT 0
25920: PPUSH
// if HexInfo ( x , y ) = warehouse then
25921: LD_VAR 0 2
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: CALL_OW 428
25935: PUSH
25936: LD_VAR 0 1
25940: EQUAL
25941: IFFALSE 25968
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25943: LD_ADDR_EXP 106
25947: PUSH
25948: LD_EXP 106
25952: PPUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_INT 0
25960: PPUSH
25961: CALL_OW 1
25965: ST_TO_ADDR
25966: GO 26019
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25968: LD_ADDR_EXP 106
25972: PUSH
25973: LD_EXP 106
25977: PPUSH
25978: LD_VAR 0 1
25982: PPUSH
25983: LD_VAR 0 1
25987: PPUSH
25988: CALL_OW 255
25992: PUSH
25993: LD_VAR 0 1
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_VAR 0 3
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: PPUSH
26014: CALL_OW 1
26018: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26019: CALL 26028 0 0
// end ;
26023: LD_VAR 0 4
26027: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26028: LD_INT 0
26030: PPUSH
26031: PPUSH
26032: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26033: LD_STRING resetWarehouseGatheringPoints();
26035: PPUSH
26036: CALL_OW 559
// if warehouseGatheringPoints then
26040: LD_EXP 106
26044: IFFALSE 26170
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26046: LD_ADDR_VAR 0 3
26050: PUSH
26051: LD_EXP 106
26055: PPUSH
26056: CALL 73210 0 1
26060: ST_TO_ADDR
// for i := 1 to list do
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: DOUBLE
26067: LD_INT 1
26069: DEC
26070: ST_TO_ADDR
26071: LD_VAR 0 3
26075: PUSH
26076: FOR_TO
26077: IFFALSE 26168
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26079: LD_STRING setWarehouseGatheringPointXY(
26081: PUSH
26082: LD_VAR 0 3
26086: PUSH
26087: LD_VAR 0 2
26091: ARRAY
26092: PUSH
26093: LD_INT 1
26095: ARRAY
26096: STR
26097: PUSH
26098: LD_STRING ,
26100: STR
26101: PUSH
26102: LD_VAR 0 3
26106: PUSH
26107: LD_VAR 0 2
26111: ARRAY
26112: PUSH
26113: LD_INT 2
26115: ARRAY
26116: STR
26117: PUSH
26118: LD_STRING ,
26120: STR
26121: PUSH
26122: LD_VAR 0 3
26126: PUSH
26127: LD_VAR 0 2
26131: ARRAY
26132: PUSH
26133: LD_INT 3
26135: ARRAY
26136: STR
26137: PUSH
26138: LD_STRING ,
26140: STR
26141: PUSH
26142: LD_VAR 0 3
26146: PUSH
26147: LD_VAR 0 2
26151: ARRAY
26152: PUSH
26153: LD_INT 4
26155: ARRAY
26156: STR
26157: PUSH
26158: LD_STRING )
26160: STR
26161: PPUSH
26162: CALL_OW 559
26166: GO 26076
26168: POP
26169: POP
// end ; end ;
26170: LD_VAR 0 1
26174: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26175: LD_EXP 106
26179: IFFALSE 26864
26181: GO 26183
26183: DISABLE
26184: LD_INT 0
26186: PPUSH
26187: PPUSH
26188: PPUSH
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
// begin enable ;
26195: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26196: LD_ADDR_VAR 0 3
26200: PUSH
26201: LD_EXP 106
26205: PPUSH
26206: CALL 73210 0 1
26210: ST_TO_ADDR
// if not list then
26211: LD_VAR 0 3
26215: NOT
26216: IFFALSE 26220
// exit ;
26218: GO 26864
// for i := 1 to list do
26220: LD_ADDR_VAR 0 1
26224: PUSH
26225: DOUBLE
26226: LD_INT 1
26228: DEC
26229: ST_TO_ADDR
26230: LD_VAR 0 3
26234: PUSH
26235: FOR_TO
26236: IFFALSE 26862
// begin depot := list [ i ] [ 2 ] ;
26238: LD_ADDR_VAR 0 8
26242: PUSH
26243: LD_VAR 0 3
26247: PUSH
26248: LD_VAR 0 1
26252: ARRAY
26253: PUSH
26254: LD_INT 2
26256: ARRAY
26257: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26258: LD_ADDR_VAR 0 5
26262: PUSH
26263: LD_VAR 0 3
26267: PUSH
26268: LD_VAR 0 1
26272: ARRAY
26273: PUSH
26274: LD_INT 1
26276: ARRAY
26277: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26278: LD_VAR 0 8
26282: PPUSH
26283: CALL_OW 301
26287: PUSH
26288: LD_VAR 0 5
26292: PUSH
26293: LD_VAR 0 8
26297: PPUSH
26298: CALL_OW 255
26302: NONEQUAL
26303: OR
26304: IFFALSE 26333
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26306: LD_ADDR_EXP 106
26310: PUSH
26311: LD_EXP 106
26315: PPUSH
26316: LD_VAR 0 8
26320: PPUSH
26321: LD_INT 0
26323: PPUSH
26324: CALL_OW 1
26328: ST_TO_ADDR
// exit ;
26329: POP
26330: POP
26331: GO 26864
// end ; x := list [ i ] [ 3 ] ;
26333: LD_ADDR_VAR 0 6
26337: PUSH
26338: LD_VAR 0 3
26342: PUSH
26343: LD_VAR 0 1
26347: ARRAY
26348: PUSH
26349: LD_INT 3
26351: ARRAY
26352: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26353: LD_ADDR_VAR 0 7
26357: PUSH
26358: LD_VAR 0 3
26362: PUSH
26363: LD_VAR 0 1
26367: ARRAY
26368: PUSH
26369: LD_INT 4
26371: ARRAY
26372: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26373: LD_ADDR_VAR 0 9
26377: PUSH
26378: LD_VAR 0 6
26382: PPUSH
26383: LD_VAR 0 7
26387: PPUSH
26388: LD_INT 16
26390: PPUSH
26391: CALL 71798 0 3
26395: ST_TO_ADDR
// if not cratesNearbyPoint then
26396: LD_VAR 0 9
26400: NOT
26401: IFFALSE 26407
// exit ;
26403: POP
26404: POP
26405: GO 26864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26407: LD_ADDR_VAR 0 4
26411: PUSH
26412: LD_INT 22
26414: PUSH
26415: LD_VAR 0 5
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: LD_INT 60
26429: PUSH
26430: EMPTY
26431: LIST
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 91
26439: PUSH
26440: LD_VAR 0 8
26444: PUSH
26445: LD_INT 6
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 25
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 25
26468: PUSH
26469: LD_INT 16
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: PPUSH
26487: CALL_OW 69
26491: PUSH
26492: LD_VAR 0 8
26496: PPUSH
26497: CALL_OW 313
26501: PPUSH
26502: LD_INT 3
26504: PUSH
26505: LD_INT 60
26507: PUSH
26508: EMPTY
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 25
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 25
26530: PUSH
26531: LD_INT 16
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PPUSH
26547: CALL_OW 72
26551: UNION
26552: ST_TO_ADDR
// if tmp then
26553: LD_VAR 0 4
26557: IFFALSE 26637
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26559: LD_ADDR_VAR 0 4
26563: PUSH
26564: LD_VAR 0 4
26568: PPUSH
26569: LD_INT 3
26571: PPUSH
26572: CALL 69767 0 2
26576: ST_TO_ADDR
// for j in tmp do
26577: LD_ADDR_VAR 0 2
26581: PUSH
26582: LD_VAR 0 4
26586: PUSH
26587: FOR_IN
26588: IFFALSE 26631
// begin if IsInUnit ( j ) then
26590: LD_VAR 0 2
26594: PPUSH
26595: CALL_OW 310
26599: IFFALSE 26610
// ComExit ( j ) ;
26601: LD_VAR 0 2
26605: PPUSH
26606: CALL 69850 0 1
// AddComCollect ( j , x , y ) ;
26610: LD_VAR 0 2
26614: PPUSH
26615: LD_VAR 0 6
26619: PPUSH
26620: LD_VAR 0 7
26624: PPUSH
26625: CALL_OW 177
// end ;
26629: GO 26587
26631: POP
26632: POP
// exit ;
26633: POP
26634: POP
26635: GO 26864
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26637: LD_ADDR_VAR 0 4
26641: PUSH
26642: LD_INT 22
26644: PUSH
26645: LD_VAR 0 5
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 91
26656: PUSH
26657: LD_VAR 0 8
26661: PUSH
26662: LD_INT 8
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 34
26675: PUSH
26676: LD_INT 12
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 34
26685: PUSH
26686: LD_INT 51
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 34
26695: PUSH
26696: LD_INT 32
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 34
26705: PUSH
26706: LD_INT 89
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: PPUSH
26725: CALL_OW 69
26729: ST_TO_ADDR
// if tmp then
26730: LD_VAR 0 4
26734: IFFALSE 26860
// begin for j in tmp do
26736: LD_ADDR_VAR 0 2
26740: PUSH
26741: LD_VAR 0 4
26745: PUSH
26746: FOR_IN
26747: IFFALSE 26858
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26749: LD_VAR 0 2
26753: PPUSH
26754: CALL_OW 262
26758: PUSH
26759: LD_INT 3
26761: EQUAL
26762: PUSH
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 261
26772: PUSH
26773: LD_INT 20
26775: GREATER
26776: OR
26777: PUSH
26778: LD_VAR 0 2
26782: PPUSH
26783: CALL_OW 314
26787: NOT
26788: AND
26789: PUSH
26790: LD_VAR 0 2
26794: PPUSH
26795: CALL_OW 263
26799: PUSH
26800: LD_INT 1
26802: NONEQUAL
26803: PUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: CALL_OW 311
26813: OR
26814: AND
26815: IFFALSE 26856
// begin ComCollect ( j , x , y ) ;
26817: LD_VAR 0 2
26821: PPUSH
26822: LD_VAR 0 6
26826: PPUSH
26827: LD_VAR 0 7
26831: PPUSH
26832: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26836: LD_VAR 0 2
26840: PPUSH
26841: LD_VAR 0 8
26845: PPUSH
26846: CALL_OW 172
// exit ;
26850: POP
26851: POP
26852: POP
26853: POP
26854: GO 26864
// end ;
26856: GO 26746
26858: POP
26859: POP
// end ; end ;
26860: GO 26235
26862: POP
26863: POP
// end ; end_of_file
26864: PPOPN 9
26866: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26867: LD_INT 0
26869: PPUSH
26870: PPUSH
26871: PPUSH
26872: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26873: LD_VAR 0 1
26877: PPUSH
26878: CALL_OW 264
26882: PUSH
26883: LD_INT 91
26885: EQUAL
26886: IFFALSE 26958
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26888: LD_INT 68
26890: PPUSH
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 255
26900: PPUSH
26901: CALL_OW 321
26905: PUSH
26906: LD_INT 2
26908: EQUAL
26909: IFFALSE 26921
// eff := 70 else
26911: LD_ADDR_VAR 0 4
26915: PUSH
26916: LD_INT 70
26918: ST_TO_ADDR
26919: GO 26929
// eff := 30 ;
26921: LD_ADDR_VAR 0 4
26925: PUSH
26926: LD_INT 30
26928: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 250
26938: PPUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 251
26948: PPUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: CALL_OW 495
// end ; end ;
26958: LD_VAR 0 2
26962: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26963: LD_INT 0
26965: PPUSH
// end ;
26966: LD_VAR 0 4
26970: RET
// export function SOS_Command ( cmd ) ; begin
26971: LD_INT 0
26973: PPUSH
// end ;
26974: LD_VAR 0 2
26978: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26979: LD_INT 0
26981: PPUSH
// end ;
26982: LD_VAR 0 6
26986: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26987: LD_INT 0
26989: PPUSH
26990: PPUSH
// if not vehicle or not factory then
26991: LD_VAR 0 1
26995: NOT
26996: PUSH
26997: LD_VAR 0 2
27001: NOT
27002: OR
27003: IFFALSE 27007
// exit ;
27005: GO 27238
// if factoryWaypoints >= factory then
27007: LD_EXP 105
27011: PUSH
27012: LD_VAR 0 2
27016: GREATEREQUAL
27017: IFFALSE 27238
// if factoryWaypoints [ factory ] then
27019: LD_EXP 105
27023: PUSH
27024: LD_VAR 0 2
27028: ARRAY
27029: IFFALSE 27238
// begin if GetControl ( vehicle ) = control_manual then
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL_OW 263
27040: PUSH
27041: LD_INT 1
27043: EQUAL
27044: IFFALSE 27125
// begin driver := IsDrivenBy ( vehicle ) ;
27046: LD_ADDR_VAR 0 4
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 311
27060: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27061: LD_VAR 0 4
27065: PPUSH
27066: LD_EXP 105
27070: PUSH
27071: LD_VAR 0 2
27075: ARRAY
27076: PUSH
27077: LD_INT 3
27079: ARRAY
27080: PPUSH
27081: LD_EXP 105
27085: PUSH
27086: LD_VAR 0 2
27090: ARRAY
27091: PUSH
27092: LD_INT 4
27094: ARRAY
27095: PPUSH
27096: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27100: LD_VAR 0 4
27104: PPUSH
27105: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27109: LD_VAR 0 4
27113: PPUSH
27114: LD_VAR 0 2
27118: PPUSH
27119: CALL_OW 180
// end else
27123: GO 27238
// if GetControl ( vehicle ) = control_remote then
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 263
27134: PUSH
27135: LD_INT 2
27137: EQUAL
27138: IFFALSE 27199
// begin wait ( 0 0$2 ) ;
27140: LD_INT 70
27142: PPUSH
27143: CALL_OW 67
// if Connect ( vehicle ) then
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL 40069 0 1
27156: IFFALSE 27197
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27158: LD_VAR 0 1
27162: PPUSH
27163: LD_EXP 105
27167: PUSH
27168: LD_VAR 0 2
27172: ARRAY
27173: PUSH
27174: LD_INT 3
27176: ARRAY
27177: PPUSH
27178: LD_EXP 105
27182: PUSH
27183: LD_VAR 0 2
27187: ARRAY
27188: PUSH
27189: LD_INT 4
27191: ARRAY
27192: PPUSH
27193: CALL_OW 171
// end else
27197: GO 27238
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27199: LD_VAR 0 1
27203: PPUSH
27204: LD_EXP 105
27208: PUSH
27209: LD_VAR 0 2
27213: ARRAY
27214: PUSH
27215: LD_INT 3
27217: ARRAY
27218: PPUSH
27219: LD_EXP 105
27223: PUSH
27224: LD_VAR 0 2
27228: ARRAY
27229: PUSH
27230: LD_INT 4
27232: ARRAY
27233: PPUSH
27234: CALL_OW 171
// end ; end ;
27238: LD_VAR 0 3
27242: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27243: LD_INT 0
27245: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27246: LD_VAR 0 1
27250: PUSH
27251: LD_INT 250
27253: EQUAL
27254: PUSH
27255: LD_VAR 0 2
27259: PPUSH
27260: CALL_OW 264
27264: PUSH
27265: LD_INT 81
27267: EQUAL
27268: AND
27269: IFFALSE 27290
// MinerPlaceMine ( unit , x , y ) ;
27271: LD_VAR 0 2
27275: PPUSH
27276: LD_VAR 0 4
27280: PPUSH
27281: LD_VAR 0 5
27285: PPUSH
27286: CALL 30280 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27290: LD_VAR 0 1
27294: PUSH
27295: LD_INT 251
27297: EQUAL
27298: PUSH
27299: LD_VAR 0 2
27303: PPUSH
27304: CALL_OW 264
27308: PUSH
27309: LD_INT 81
27311: EQUAL
27312: AND
27313: IFFALSE 27334
// MinerDetonateMine ( unit , x , y ) ;
27315: LD_VAR 0 2
27319: PPUSH
27320: LD_VAR 0 4
27324: PPUSH
27325: LD_VAR 0 5
27329: PPUSH
27330: CALL 30555 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27334: LD_VAR 0 1
27338: PUSH
27339: LD_INT 252
27341: EQUAL
27342: PUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 264
27352: PUSH
27353: LD_INT 81
27355: EQUAL
27356: AND
27357: IFFALSE 27378
// MinerCreateMinefield ( unit , x , y ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_VAR 0 4
27368: PPUSH
27369: LD_VAR 0 5
27373: PPUSH
27374: CALL 30972 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27378: LD_VAR 0 1
27382: PUSH
27383: LD_INT 253
27385: EQUAL
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: CALL_OW 257
27396: PUSH
27397: LD_INT 5
27399: EQUAL
27400: AND
27401: IFFALSE 27422
// ComBinocular ( unit , x , y ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_VAR 0 4
27412: PPUSH
27413: LD_VAR 0 5
27417: PPUSH
27418: CALL 31341 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 254
27429: EQUAL
27430: PUSH
27431: LD_VAR 0 2
27435: PPUSH
27436: CALL_OW 264
27440: PUSH
27441: LD_INT 99
27443: EQUAL
27444: AND
27445: PUSH
27446: LD_VAR 0 3
27450: PPUSH
27451: CALL_OW 263
27455: PUSH
27456: LD_INT 3
27458: EQUAL
27459: AND
27460: IFFALSE 27476
// HackDestroyVehicle ( unit , selectedUnit ) ;
27462: LD_VAR 0 2
27466: PPUSH
27467: LD_VAR 0 3
27471: PPUSH
27472: CALL 29644 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27476: LD_VAR 0 1
27480: PUSH
27481: LD_INT 255
27483: EQUAL
27484: PUSH
27485: LD_VAR 0 2
27489: PPUSH
27490: CALL_OW 264
27494: PUSH
27495: LD_INT 14
27497: PUSH
27498: LD_INT 53
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: IN
27505: AND
27506: PUSH
27507: LD_VAR 0 4
27511: PPUSH
27512: LD_VAR 0 5
27516: PPUSH
27517: CALL_OW 488
27521: AND
27522: IFFALSE 27546
// CutTreeXYR ( unit , x , y , 12 ) ;
27524: LD_VAR 0 2
27528: PPUSH
27529: LD_VAR 0 4
27533: PPUSH
27534: LD_VAR 0 5
27538: PPUSH
27539: LD_INT 12
27541: PPUSH
27542: CALL 27641 0 4
// if cmd = 256 then
27546: LD_VAR 0 1
27550: PUSH
27551: LD_INT 256
27553: EQUAL
27554: IFFALSE 27575
// SetFactoryWaypoint ( unit , x , y ) ;
27556: LD_VAR 0 2
27560: PPUSH
27561: LD_VAR 0 4
27565: PPUSH
27566: LD_VAR 0 5
27570: PPUSH
27571: CALL 25556 0 3
// if cmd = 257 then
27575: LD_VAR 0 1
27579: PUSH
27580: LD_INT 257
27582: EQUAL
27583: IFFALSE 27604
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27585: LD_VAR 0 2
27589: PPUSH
27590: LD_VAR 0 4
27594: PPUSH
27595: LD_VAR 0 5
27599: PPUSH
27600: CALL 25918 0 3
// if cmd = 258 then
27604: LD_VAR 0 1
27608: PUSH
27609: LD_INT 258
27611: EQUAL
27612: IFFALSE 27636
// BurnTreeXYR ( unit , x , y , 8 ) ;
27614: LD_VAR 0 2
27618: PPUSH
27619: LD_VAR 0 4
27623: PPUSH
27624: LD_VAR 0 5
27628: PPUSH
27629: LD_INT 8
27631: PPUSH
27632: CALL 28035 0 4
// end ;
27636: LD_VAR 0 6
27640: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27641: LD_INT 0
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 302
27661: NOT
27662: PUSH
27663: LD_VAR 0 2
27667: PPUSH
27668: LD_VAR 0 3
27672: PPUSH
27673: CALL_OW 488
27677: NOT
27678: OR
27679: PUSH
27680: LD_VAR 0 4
27684: NOT
27685: OR
27686: IFFALSE 27690
// exit ;
27688: GO 28030
// list := [ ] ;
27690: LD_ADDR_VAR 0 13
27694: PUSH
27695: EMPTY
27696: ST_TO_ADDR
// if x - r < 0 then
27697: LD_VAR 0 2
27701: PUSH
27702: LD_VAR 0 4
27706: MINUS
27707: PUSH
27708: LD_INT 0
27710: LESS
27711: IFFALSE 27723
// min_x := 0 else
27713: LD_ADDR_VAR 0 7
27717: PUSH
27718: LD_INT 0
27720: ST_TO_ADDR
27721: GO 27739
// min_x := x - r ;
27723: LD_ADDR_VAR 0 7
27727: PUSH
27728: LD_VAR 0 2
27732: PUSH
27733: LD_VAR 0 4
27737: MINUS
27738: ST_TO_ADDR
// if y - r < 0 then
27739: LD_VAR 0 3
27743: PUSH
27744: LD_VAR 0 4
27748: MINUS
27749: PUSH
27750: LD_INT 0
27752: LESS
27753: IFFALSE 27765
// min_y := 0 else
27755: LD_ADDR_VAR 0 8
27759: PUSH
27760: LD_INT 0
27762: ST_TO_ADDR
27763: GO 27781
// min_y := y - r ;
27765: LD_ADDR_VAR 0 8
27769: PUSH
27770: LD_VAR 0 3
27774: PUSH
27775: LD_VAR 0 4
27779: MINUS
27780: ST_TO_ADDR
// max_x := x + r ;
27781: LD_ADDR_VAR 0 9
27785: PUSH
27786: LD_VAR 0 2
27790: PUSH
27791: LD_VAR 0 4
27795: PLUS
27796: ST_TO_ADDR
// max_y := y + r ;
27797: LD_ADDR_VAR 0 10
27801: PUSH
27802: LD_VAR 0 3
27806: PUSH
27807: LD_VAR 0 4
27811: PLUS
27812: ST_TO_ADDR
// for _x = min_x to max_x do
27813: LD_ADDR_VAR 0 11
27817: PUSH
27818: DOUBLE
27819: LD_VAR 0 7
27823: DEC
27824: ST_TO_ADDR
27825: LD_VAR 0 9
27829: PUSH
27830: FOR_TO
27831: IFFALSE 27948
// for _y = min_y to max_y do
27833: LD_ADDR_VAR 0 12
27837: PUSH
27838: DOUBLE
27839: LD_VAR 0 8
27843: DEC
27844: ST_TO_ADDR
27845: LD_VAR 0 10
27849: PUSH
27850: FOR_TO
27851: IFFALSE 27944
// begin if not ValidHex ( _x , _y ) then
27853: LD_VAR 0 11
27857: PPUSH
27858: LD_VAR 0 12
27862: PPUSH
27863: CALL_OW 488
27867: NOT
27868: IFFALSE 27872
// continue ;
27870: GO 27850
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27872: LD_VAR 0 11
27876: PPUSH
27877: LD_VAR 0 12
27881: PPUSH
27882: CALL_OW 351
27886: PUSH
27887: LD_VAR 0 11
27891: PPUSH
27892: LD_VAR 0 12
27896: PPUSH
27897: CALL_OW 554
27901: AND
27902: IFFALSE 27942
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27904: LD_ADDR_VAR 0 13
27908: PUSH
27909: LD_VAR 0 13
27913: PPUSH
27914: LD_VAR 0 13
27918: PUSH
27919: LD_INT 1
27921: PLUS
27922: PPUSH
27923: LD_VAR 0 11
27927: PUSH
27928: LD_VAR 0 12
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PPUSH
27937: CALL_OW 2
27941: ST_TO_ADDR
// end ;
27942: GO 27850
27944: POP
27945: POP
27946: GO 27830
27948: POP
27949: POP
// if not list then
27950: LD_VAR 0 13
27954: NOT
27955: IFFALSE 27959
// exit ;
27957: GO 28030
// for i in list do
27959: LD_ADDR_VAR 0 6
27963: PUSH
27964: LD_VAR 0 13
27968: PUSH
27969: FOR_IN
27970: IFFALSE 28028
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27972: LD_VAR 0 1
27976: PPUSH
27977: LD_STRING M
27979: PUSH
27980: LD_VAR 0 6
27984: PUSH
27985: LD_INT 1
27987: ARRAY
27988: PUSH
27989: LD_VAR 0 6
27993: PUSH
27994: LD_INT 2
27996: ARRAY
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: PPUSH
28022: CALL_OW 447
28026: GO 27969
28028: POP
28029: POP
// end ;
28030: LD_VAR 0 5
28034: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28035: LD_INT 0
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
28043: PPUSH
28044: PPUSH
28045: PPUSH
28046: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28047: LD_VAR 0 1
28051: PPUSH
28052: CALL_OW 302
28056: NOT
28057: PUSH
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_VAR 0 3
28067: PPUSH
28068: CALL_OW 488
28072: NOT
28073: OR
28074: PUSH
28075: LD_VAR 0 4
28079: NOT
28080: OR
28081: IFFALSE 28085
// exit ;
28083: GO 28598
// list := [ ] ;
28085: LD_ADDR_VAR 0 13
28089: PUSH
28090: EMPTY
28091: ST_TO_ADDR
// if x - r < 0 then
28092: LD_VAR 0 2
28096: PUSH
28097: LD_VAR 0 4
28101: MINUS
28102: PUSH
28103: LD_INT 0
28105: LESS
28106: IFFALSE 28118
// min_x := 0 else
28108: LD_ADDR_VAR 0 7
28112: PUSH
28113: LD_INT 0
28115: ST_TO_ADDR
28116: GO 28134
// min_x := x - r ;
28118: LD_ADDR_VAR 0 7
28122: PUSH
28123: LD_VAR 0 2
28127: PUSH
28128: LD_VAR 0 4
28132: MINUS
28133: ST_TO_ADDR
// if y - r < 0 then
28134: LD_VAR 0 3
28138: PUSH
28139: LD_VAR 0 4
28143: MINUS
28144: PUSH
28145: LD_INT 0
28147: LESS
28148: IFFALSE 28160
// min_y := 0 else
28150: LD_ADDR_VAR 0 8
28154: PUSH
28155: LD_INT 0
28157: ST_TO_ADDR
28158: GO 28176
// min_y := y - r ;
28160: LD_ADDR_VAR 0 8
28164: PUSH
28165: LD_VAR 0 3
28169: PUSH
28170: LD_VAR 0 4
28174: MINUS
28175: ST_TO_ADDR
// max_x := x + r ;
28176: LD_ADDR_VAR 0 9
28180: PUSH
28181: LD_VAR 0 2
28185: PUSH
28186: LD_VAR 0 4
28190: PLUS
28191: ST_TO_ADDR
// max_y := y + r ;
28192: LD_ADDR_VAR 0 10
28196: PUSH
28197: LD_VAR 0 3
28201: PUSH
28202: LD_VAR 0 4
28206: PLUS
28207: ST_TO_ADDR
// for _x = min_x to max_x do
28208: LD_ADDR_VAR 0 11
28212: PUSH
28213: DOUBLE
28214: LD_VAR 0 7
28218: DEC
28219: ST_TO_ADDR
28220: LD_VAR 0 9
28224: PUSH
28225: FOR_TO
28226: IFFALSE 28343
// for _y = min_y to max_y do
28228: LD_ADDR_VAR 0 12
28232: PUSH
28233: DOUBLE
28234: LD_VAR 0 8
28238: DEC
28239: ST_TO_ADDR
28240: LD_VAR 0 10
28244: PUSH
28245: FOR_TO
28246: IFFALSE 28339
// begin if not ValidHex ( _x , _y ) then
28248: LD_VAR 0 11
28252: PPUSH
28253: LD_VAR 0 12
28257: PPUSH
28258: CALL_OW 488
28262: NOT
28263: IFFALSE 28267
// continue ;
28265: GO 28245
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28267: LD_VAR 0 11
28271: PPUSH
28272: LD_VAR 0 12
28276: PPUSH
28277: CALL_OW 351
28281: PUSH
28282: LD_VAR 0 11
28286: PPUSH
28287: LD_VAR 0 12
28291: PPUSH
28292: CALL_OW 554
28296: AND
28297: IFFALSE 28337
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28299: LD_ADDR_VAR 0 13
28303: PUSH
28304: LD_VAR 0 13
28308: PPUSH
28309: LD_VAR 0 13
28313: PUSH
28314: LD_INT 1
28316: PLUS
28317: PPUSH
28318: LD_VAR 0 11
28322: PUSH
28323: LD_VAR 0 12
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PPUSH
28332: CALL_OW 2
28336: ST_TO_ADDR
// end ;
28337: GO 28245
28339: POP
28340: POP
28341: GO 28225
28343: POP
28344: POP
// if not list then
28345: LD_VAR 0 13
28349: NOT
28350: IFFALSE 28354
// exit ;
28352: GO 28598
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28354: LD_ADDR_VAR 0 13
28358: PUSH
28359: LD_VAR 0 1
28363: PPUSH
28364: LD_VAR 0 13
28368: PPUSH
28369: LD_INT 1
28371: PPUSH
28372: LD_INT 1
28374: PPUSH
28375: CALL 37211 0 4
28379: ST_TO_ADDR
// ComStop ( flame ) ;
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 141
// for i in list do
28389: LD_ADDR_VAR 0 6
28393: PUSH
28394: LD_VAR 0 13
28398: PUSH
28399: FOR_IN
28400: IFFALSE 28431
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: LD_VAR 0 6
28411: PUSH
28412: LD_INT 1
28414: ARRAY
28415: PPUSH
28416: LD_VAR 0 6
28420: PUSH
28421: LD_INT 2
28423: ARRAY
28424: PPUSH
28425: CALL_OW 176
28429: GO 28399
28431: POP
28432: POP
// repeat wait ( 0 0$1 ) ;
28433: LD_INT 35
28435: PPUSH
28436: CALL_OW 67
// task := GetTaskList ( flame ) ;
28440: LD_ADDR_VAR 0 14
28444: PUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 437
28454: ST_TO_ADDR
// if not task then
28455: LD_VAR 0 14
28459: NOT
28460: IFFALSE 28464
// exit ;
28462: GO 28598
// if task [ 1 ] [ 1 ] <> | then
28464: LD_VAR 0 14
28468: PUSH
28469: LD_INT 1
28471: ARRAY
28472: PUSH
28473: LD_INT 1
28475: ARRAY
28476: PUSH
28477: LD_STRING |
28479: NONEQUAL
28480: IFFALSE 28484
// exit ;
28482: GO 28598
// _x := task [ 1 ] [ 2 ] ;
28484: LD_ADDR_VAR 0 11
28488: PUSH
28489: LD_VAR 0 14
28493: PUSH
28494: LD_INT 1
28496: ARRAY
28497: PUSH
28498: LD_INT 2
28500: ARRAY
28501: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28502: LD_ADDR_VAR 0 12
28506: PUSH
28507: LD_VAR 0 14
28511: PUSH
28512: LD_INT 1
28514: ARRAY
28515: PUSH
28516: LD_INT 3
28518: ARRAY
28519: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28520: LD_VAR 0 11
28524: PPUSH
28525: LD_VAR 0 12
28529: PPUSH
28530: CALL_OW 351
28534: NOT
28535: PUSH
28536: LD_VAR 0 11
28540: PPUSH
28541: LD_VAR 0 12
28545: PPUSH
28546: CALL_OW 554
28550: NOT
28551: OR
28552: IFFALSE 28586
// begin task := Delete ( task , 1 ) ;
28554: LD_ADDR_VAR 0 14
28558: PUSH
28559: LD_VAR 0 14
28563: PPUSH
28564: LD_INT 1
28566: PPUSH
28567: CALL_OW 3
28571: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28572: LD_VAR 0 1
28576: PPUSH
28577: LD_VAR 0 14
28581: PPUSH
28582: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28586: LD_VAR 0 1
28590: PPUSH
28591: CALL_OW 314
28595: NOT
28596: IFFALSE 28433
// end ;
28598: LD_VAR 0 5
28602: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28603: LD_EXP 108
28607: NOT
28608: IFFALSE 28658
28610: GO 28612
28612: DISABLE
// begin initHack := true ;
28613: LD_ADDR_EXP 108
28617: PUSH
28618: LD_INT 1
28620: ST_TO_ADDR
// hackTanks := [ ] ;
28621: LD_ADDR_EXP 109
28625: PUSH
28626: EMPTY
28627: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28628: LD_ADDR_EXP 110
28632: PUSH
28633: EMPTY
28634: ST_TO_ADDR
// hackLimit := 3 ;
28635: LD_ADDR_EXP 111
28639: PUSH
28640: LD_INT 3
28642: ST_TO_ADDR
// hackDist := 12 ;
28643: LD_ADDR_EXP 112
28647: PUSH
28648: LD_INT 12
28650: ST_TO_ADDR
// hackCounter := [ ] ;
28651: LD_ADDR_EXP 113
28655: PUSH
28656: EMPTY
28657: ST_TO_ADDR
// end ;
28658: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28659: LD_EXP 108
28663: PUSH
28664: LD_INT 34
28666: PUSH
28667: LD_INT 99
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PPUSH
28674: CALL_OW 69
28678: AND
28679: IFFALSE 28932
28681: GO 28683
28683: DISABLE
28684: LD_INT 0
28686: PPUSH
28687: PPUSH
// begin enable ;
28688: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28689: LD_ADDR_VAR 0 1
28693: PUSH
28694: LD_INT 34
28696: PUSH
28697: LD_INT 99
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 69
28708: PUSH
28709: FOR_IN
28710: IFFALSE 28930
// begin if not i in hackTanks then
28712: LD_VAR 0 1
28716: PUSH
28717: LD_EXP 109
28721: IN
28722: NOT
28723: IFFALSE 28806
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28725: LD_ADDR_EXP 109
28729: PUSH
28730: LD_EXP 109
28734: PPUSH
28735: LD_EXP 109
28739: PUSH
28740: LD_INT 1
28742: PLUS
28743: PPUSH
28744: LD_VAR 0 1
28748: PPUSH
28749: CALL_OW 1
28753: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28754: LD_ADDR_EXP 110
28758: PUSH
28759: LD_EXP 110
28763: PPUSH
28764: LD_EXP 110
28768: PUSH
28769: LD_INT 1
28771: PLUS
28772: PPUSH
28773: EMPTY
28774: PPUSH
28775: CALL_OW 1
28779: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28780: LD_ADDR_EXP 113
28784: PUSH
28785: LD_EXP 113
28789: PPUSH
28790: LD_EXP 113
28794: PUSH
28795: LD_INT 1
28797: PLUS
28798: PPUSH
28799: EMPTY
28800: PPUSH
28801: CALL_OW 1
28805: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28806: LD_VAR 0 1
28810: PPUSH
28811: CALL_OW 302
28815: NOT
28816: IFFALSE 28829
// begin HackUnlinkAll ( i ) ;
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL 28935 0 1
// continue ;
28827: GO 28709
// end ; HackCheckCapturedStatus ( i ) ;
28829: LD_VAR 0 1
28833: PPUSH
28834: CALL 29378 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28838: LD_ADDR_VAR 0 2
28842: PUSH
28843: LD_INT 81
28845: PUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL_OW 255
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 33
28862: PUSH
28863: LD_INT 3
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 91
28872: PUSH
28873: LD_VAR 0 1
28877: PUSH
28878: LD_EXP 112
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 50
28890: PUSH
28891: EMPTY
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 2
28909: NOT
28910: IFFALSE 28914
// continue ;
28912: GO 28709
// HackLink ( i , tmp ) ;
28914: LD_VAR 0 1
28918: PPUSH
28919: LD_VAR 0 2
28923: PPUSH
28924: CALL 29071 0 2
// end ;
28928: GO 28709
28930: POP
28931: POP
// end ;
28932: PPOPN 2
28934: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28935: LD_INT 0
28937: PPUSH
28938: PPUSH
28939: PPUSH
// if not hack in hackTanks then
28940: LD_VAR 0 1
28944: PUSH
28945: LD_EXP 109
28949: IN
28950: NOT
28951: IFFALSE 28955
// exit ;
28953: GO 29066
// index := GetElementIndex ( hackTanks , hack ) ;
28955: LD_ADDR_VAR 0 4
28959: PUSH
28960: LD_EXP 109
28964: PPUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: CALL 36508 0 2
28974: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28975: LD_EXP 110
28979: PUSH
28980: LD_VAR 0 4
28984: ARRAY
28985: IFFALSE 29066
// begin for i in hackTanksCaptured [ index ] do
28987: LD_ADDR_VAR 0 3
28991: PUSH
28992: LD_EXP 110
28996: PUSH
28997: LD_VAR 0 4
29001: ARRAY
29002: PUSH
29003: FOR_IN
29004: IFFALSE 29030
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29006: LD_VAR 0 3
29010: PUSH
29011: LD_INT 1
29013: ARRAY
29014: PPUSH
29015: LD_VAR 0 3
29019: PUSH
29020: LD_INT 2
29022: ARRAY
29023: PPUSH
29024: CALL_OW 235
29028: GO 29003
29030: POP
29031: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29032: LD_ADDR_EXP 110
29036: PUSH
29037: LD_EXP 110
29041: PPUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: EMPTY
29048: PPUSH
29049: CALL_OW 1
29053: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29054: LD_VAR 0 1
29058: PPUSH
29059: LD_INT 0
29061: PPUSH
29062: CALL_OW 505
// end ; end ;
29066: LD_VAR 0 2
29070: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29071: LD_INT 0
29073: PPUSH
29074: PPUSH
29075: PPUSH
// if not hack in hackTanks or not vehicles then
29076: LD_VAR 0 1
29080: PUSH
29081: LD_EXP 109
29085: IN
29086: NOT
29087: PUSH
29088: LD_VAR 0 2
29092: NOT
29093: OR
29094: IFFALSE 29098
// exit ;
29096: GO 29373
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29098: LD_ADDR_VAR 0 2
29102: PUSH
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: LD_INT 1
29115: PPUSH
29116: LD_INT 1
29118: PPUSH
29119: CALL 37158 0 4
29123: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29124: LD_ADDR_VAR 0 5
29128: PUSH
29129: LD_EXP 109
29133: PPUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL 36508 0 2
29143: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29144: LD_EXP 110
29148: PUSH
29149: LD_VAR 0 5
29153: ARRAY
29154: PUSH
29155: LD_EXP 111
29159: LESS
29160: IFFALSE 29349
// begin for i := 1 to vehicles do
29162: LD_ADDR_VAR 0 4
29166: PUSH
29167: DOUBLE
29168: LD_INT 1
29170: DEC
29171: ST_TO_ADDR
29172: LD_VAR 0 2
29176: PUSH
29177: FOR_TO
29178: IFFALSE 29347
// begin if hackTanksCaptured [ index ] = hackLimit then
29180: LD_EXP 110
29184: PUSH
29185: LD_VAR 0 5
29189: ARRAY
29190: PUSH
29191: LD_EXP 111
29195: EQUAL
29196: IFFALSE 29200
// break ;
29198: GO 29347
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29200: LD_ADDR_EXP 113
29204: PUSH
29205: LD_EXP 113
29209: PPUSH
29210: LD_VAR 0 5
29214: PPUSH
29215: LD_EXP 113
29219: PUSH
29220: LD_VAR 0 5
29224: ARRAY
29225: PUSH
29226: LD_INT 1
29228: PLUS
29229: PPUSH
29230: CALL_OW 1
29234: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29235: LD_ADDR_EXP 110
29239: PUSH
29240: LD_EXP 110
29244: PPUSH
29245: LD_VAR 0 5
29249: PUSH
29250: LD_EXP 110
29254: PUSH
29255: LD_VAR 0 5
29259: ARRAY
29260: PUSH
29261: LD_INT 1
29263: PLUS
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: LD_VAR 0 2
29273: PUSH
29274: LD_VAR 0 4
29278: ARRAY
29279: PUSH
29280: LD_VAR 0 2
29284: PUSH
29285: LD_VAR 0 4
29289: ARRAY
29290: PPUSH
29291: CALL_OW 255
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL 36723 0 3
29304: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29305: LD_VAR 0 2
29309: PUSH
29310: LD_VAR 0 4
29314: ARRAY
29315: PPUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 255
29325: PPUSH
29326: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29330: LD_VAR 0 2
29334: PUSH
29335: LD_VAR 0 4
29339: ARRAY
29340: PPUSH
29341: CALL_OW 141
// end ;
29345: GO 29177
29347: POP
29348: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29349: LD_VAR 0 1
29353: PPUSH
29354: LD_EXP 110
29358: PUSH
29359: LD_VAR 0 5
29363: ARRAY
29364: PUSH
29365: LD_INT 0
29367: PLUS
29368: PPUSH
29369: CALL_OW 505
// end ;
29373: LD_VAR 0 3
29377: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
// if not hack in hackTanks then
29384: LD_VAR 0 1
29388: PUSH
29389: LD_EXP 109
29393: IN
29394: NOT
29395: IFFALSE 29399
// exit ;
29397: GO 29639
// index := GetElementIndex ( hackTanks , hack ) ;
29399: LD_ADDR_VAR 0 4
29403: PUSH
29404: LD_EXP 109
29408: PPUSH
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL 36508 0 2
29418: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: DOUBLE
29425: LD_EXP 110
29429: PUSH
29430: LD_VAR 0 4
29434: ARRAY
29435: INC
29436: ST_TO_ADDR
29437: LD_INT 1
29439: PUSH
29440: FOR_DOWNTO
29441: IFFALSE 29613
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29443: LD_ADDR_VAR 0 5
29447: PUSH
29448: LD_EXP 110
29452: PUSH
29453: LD_VAR 0 4
29457: ARRAY
29458: PUSH
29459: LD_VAR 0 3
29463: ARRAY
29464: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29465: LD_VAR 0 5
29469: PUSH
29470: LD_INT 1
29472: ARRAY
29473: PPUSH
29474: CALL_OW 302
29478: NOT
29479: PUSH
29480: LD_VAR 0 5
29484: PUSH
29485: LD_INT 1
29487: ARRAY
29488: PPUSH
29489: CALL_OW 255
29493: PUSH
29494: LD_VAR 0 1
29498: PPUSH
29499: CALL_OW 255
29503: NONEQUAL
29504: OR
29505: IFFALSE 29611
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29507: LD_VAR 0 5
29511: PUSH
29512: LD_INT 1
29514: ARRAY
29515: PPUSH
29516: CALL_OW 305
29520: PUSH
29521: LD_VAR 0 5
29525: PUSH
29526: LD_INT 1
29528: ARRAY
29529: PPUSH
29530: CALL_OW 255
29534: PUSH
29535: LD_VAR 0 1
29539: PPUSH
29540: CALL_OW 255
29544: EQUAL
29545: AND
29546: IFFALSE 29570
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29548: LD_VAR 0 5
29552: PUSH
29553: LD_INT 1
29555: ARRAY
29556: PPUSH
29557: LD_VAR 0 5
29561: PUSH
29562: LD_INT 2
29564: ARRAY
29565: PPUSH
29566: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29570: LD_ADDR_EXP 110
29574: PUSH
29575: LD_EXP 110
29579: PPUSH
29580: LD_VAR 0 4
29584: PPUSH
29585: LD_EXP 110
29589: PUSH
29590: LD_VAR 0 4
29594: ARRAY
29595: PPUSH
29596: LD_VAR 0 3
29600: PPUSH
29601: CALL_OW 3
29605: PPUSH
29606: CALL_OW 1
29610: ST_TO_ADDR
// end ; end ;
29611: GO 29440
29613: POP
29614: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29615: LD_VAR 0 1
29619: PPUSH
29620: LD_EXP 110
29624: PUSH
29625: LD_VAR 0 4
29629: ARRAY
29630: PUSH
29631: LD_INT 0
29633: PLUS
29634: PPUSH
29635: CALL_OW 505
// end ;
29639: LD_VAR 0 2
29643: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29644: LD_INT 0
29646: PPUSH
29647: PPUSH
29648: PPUSH
29649: PPUSH
// if not hack in hackTanks then
29650: LD_VAR 0 1
29654: PUSH
29655: LD_EXP 109
29659: IN
29660: NOT
29661: IFFALSE 29665
// exit ;
29663: GO 29750
// index := GetElementIndex ( hackTanks , hack ) ;
29665: LD_ADDR_VAR 0 5
29669: PUSH
29670: LD_EXP 109
29674: PPUSH
29675: LD_VAR 0 1
29679: PPUSH
29680: CALL 36508 0 2
29684: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29685: LD_ADDR_VAR 0 4
29689: PUSH
29690: DOUBLE
29691: LD_INT 1
29693: DEC
29694: ST_TO_ADDR
29695: LD_EXP 110
29699: PUSH
29700: LD_VAR 0 5
29704: ARRAY
29705: PUSH
29706: FOR_TO
29707: IFFALSE 29748
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29709: LD_EXP 110
29713: PUSH
29714: LD_VAR 0 5
29718: ARRAY
29719: PUSH
29720: LD_VAR 0 4
29724: ARRAY
29725: PUSH
29726: LD_INT 1
29728: ARRAY
29729: PUSH
29730: LD_VAR 0 2
29734: EQUAL
29735: IFFALSE 29746
// KillUnit ( vehicle ) ;
29737: LD_VAR 0 2
29741: PPUSH
29742: CALL_OW 66
29746: GO 29706
29748: POP
29749: POP
// end ;
29750: LD_VAR 0 3
29754: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29755: LD_EXP 114
29759: NOT
29760: IFFALSE 29795
29762: GO 29764
29764: DISABLE
// begin initMiner := true ;
29765: LD_ADDR_EXP 114
29769: PUSH
29770: LD_INT 1
29772: ST_TO_ADDR
// minersList := [ ] ;
29773: LD_ADDR_EXP 115
29777: PUSH
29778: EMPTY
29779: ST_TO_ADDR
// minerMinesList := [ ] ;
29780: LD_ADDR_EXP 116
29784: PUSH
29785: EMPTY
29786: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29787: LD_ADDR_EXP 117
29791: PUSH
29792: LD_INT 5
29794: ST_TO_ADDR
// end ;
29795: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29796: LD_EXP 114
29800: PUSH
29801: LD_INT 34
29803: PUSH
29804: LD_INT 81
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: AND
29816: IFFALSE 30277
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
// begin enable ;
29827: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29828: LD_ADDR_VAR 0 1
29832: PUSH
29833: LD_INT 34
29835: PUSH
29836: LD_INT 81
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 69
29847: PUSH
29848: FOR_IN
29849: IFFALSE 29921
// begin if not i in minersList then
29851: LD_VAR 0 1
29855: PUSH
29856: LD_EXP 115
29860: IN
29861: NOT
29862: IFFALSE 29919
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29864: LD_ADDR_EXP 115
29868: PUSH
29869: LD_EXP 115
29873: PPUSH
29874: LD_EXP 115
29878: PUSH
29879: LD_INT 1
29881: PLUS
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 1
29892: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29893: LD_ADDR_EXP 116
29897: PUSH
29898: LD_EXP 116
29902: PPUSH
29903: LD_EXP 116
29907: PUSH
29908: LD_INT 1
29910: PLUS
29911: PPUSH
29912: EMPTY
29913: PPUSH
29914: CALL_OW 1
29918: ST_TO_ADDR
// end end ;
29919: GO 29848
29921: POP
29922: POP
// for i := minerMinesList downto 1 do
29923: LD_ADDR_VAR 0 1
29927: PUSH
29928: DOUBLE
29929: LD_EXP 116
29933: INC
29934: ST_TO_ADDR
29935: LD_INT 1
29937: PUSH
29938: FOR_DOWNTO
29939: IFFALSE 30275
// begin if IsLive ( minersList [ i ] ) then
29941: LD_EXP 115
29945: PUSH
29946: LD_VAR 0 1
29950: ARRAY
29951: PPUSH
29952: CALL_OW 300
29956: IFFALSE 29984
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29958: LD_EXP 115
29962: PUSH
29963: LD_VAR 0 1
29967: ARRAY
29968: PPUSH
29969: LD_EXP 116
29973: PUSH
29974: LD_VAR 0 1
29978: ARRAY
29979: PPUSH
29980: CALL_OW 505
// if not minerMinesList [ i ] then
29984: LD_EXP 116
29988: PUSH
29989: LD_VAR 0 1
29993: ARRAY
29994: NOT
29995: IFFALSE 29999
// continue ;
29997: GO 29938
// for j := minerMinesList [ i ] downto 1 do
29999: LD_ADDR_VAR 0 2
30003: PUSH
30004: DOUBLE
30005: LD_EXP 116
30009: PUSH
30010: LD_VAR 0 1
30014: ARRAY
30015: INC
30016: ST_TO_ADDR
30017: LD_INT 1
30019: PUSH
30020: FOR_DOWNTO
30021: IFFALSE 30271
// begin side := GetSide ( minersList [ i ] ) ;
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_EXP 115
30032: PUSH
30033: LD_VAR 0 1
30037: ARRAY
30038: PPUSH
30039: CALL_OW 255
30043: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30044: LD_ADDR_VAR 0 4
30048: PUSH
30049: LD_EXP 116
30053: PUSH
30054: LD_VAR 0 1
30058: ARRAY
30059: PUSH
30060: LD_VAR 0 2
30064: ARRAY
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: PPUSH
30070: LD_EXP 116
30074: PUSH
30075: LD_VAR 0 1
30079: ARRAY
30080: PUSH
30081: LD_VAR 0 2
30085: ARRAY
30086: PUSH
30087: LD_INT 2
30089: ARRAY
30090: PPUSH
30091: CALL_OW 428
30095: ST_TO_ADDR
// if not tmp then
30096: LD_VAR 0 4
30100: NOT
30101: IFFALSE 30105
// continue ;
30103: GO 30020
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30105: LD_VAR 0 4
30109: PUSH
30110: LD_INT 81
30112: PUSH
30113: LD_VAR 0 3
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 69
30126: IN
30127: PUSH
30128: LD_EXP 116
30132: PUSH
30133: LD_VAR 0 1
30137: ARRAY
30138: PUSH
30139: LD_VAR 0 2
30143: ARRAY
30144: PUSH
30145: LD_INT 1
30147: ARRAY
30148: PPUSH
30149: LD_EXP 116
30153: PUSH
30154: LD_VAR 0 1
30158: ARRAY
30159: PUSH
30160: LD_VAR 0 2
30164: ARRAY
30165: PUSH
30166: LD_INT 2
30168: ARRAY
30169: PPUSH
30170: CALL_OW 458
30174: AND
30175: IFFALSE 30269
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30177: LD_EXP 116
30181: PUSH
30182: LD_VAR 0 1
30186: ARRAY
30187: PUSH
30188: LD_VAR 0 2
30192: ARRAY
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: LD_EXP 116
30202: PUSH
30203: LD_VAR 0 1
30207: ARRAY
30208: PUSH
30209: LD_VAR 0 2
30213: ARRAY
30214: PUSH
30215: LD_INT 2
30217: ARRAY
30218: PPUSH
30219: LD_VAR 0 3
30223: PPUSH
30224: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30228: LD_ADDR_EXP 116
30232: PUSH
30233: LD_EXP 116
30237: PPUSH
30238: LD_VAR 0 1
30242: PPUSH
30243: LD_EXP 116
30247: PUSH
30248: LD_VAR 0 1
30252: ARRAY
30253: PPUSH
30254: LD_VAR 0 2
30258: PPUSH
30259: CALL_OW 3
30263: PPUSH
30264: CALL_OW 1
30268: ST_TO_ADDR
// end ; end ;
30269: GO 30020
30271: POP
30272: POP
// end ;
30273: GO 29938
30275: POP
30276: POP
// end ;
30277: PPOPN 4
30279: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30280: LD_INT 0
30282: PPUSH
30283: PPUSH
// result := false ;
30284: LD_ADDR_VAR 0 4
30288: PUSH
30289: LD_INT 0
30291: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30292: LD_VAR 0 1
30296: PPUSH
30297: CALL_OW 264
30301: PUSH
30302: LD_INT 81
30304: EQUAL
30305: NOT
30306: IFFALSE 30310
// exit ;
30308: GO 30550
// index := GetElementIndex ( minersList , unit ) ;
30310: LD_ADDR_VAR 0 5
30314: PUSH
30315: LD_EXP 115
30319: PPUSH
30320: LD_VAR 0 1
30324: PPUSH
30325: CALL 36508 0 2
30329: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30330: LD_EXP 116
30334: PUSH
30335: LD_VAR 0 5
30339: ARRAY
30340: PUSH
30341: LD_EXP 117
30345: GREATEREQUAL
30346: IFFALSE 30350
// exit ;
30348: GO 30550
// ComMoveXY ( unit , x , y ) ;
30350: LD_VAR 0 1
30354: PPUSH
30355: LD_VAR 0 2
30359: PPUSH
30360: LD_VAR 0 3
30364: PPUSH
30365: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30369: LD_INT 35
30371: PPUSH
30372: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30376: LD_VAR 0 1
30380: PPUSH
30381: LD_VAR 0 2
30385: PPUSH
30386: LD_VAR 0 3
30390: PPUSH
30391: CALL 68249 0 3
30395: NOT
30396: PUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 314
30406: AND
30407: IFFALSE 30411
// exit ;
30409: GO 30550
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30411: LD_VAR 0 2
30415: PPUSH
30416: LD_VAR 0 3
30420: PPUSH
30421: CALL_OW 428
30425: PUSH
30426: LD_VAR 0 1
30430: EQUAL
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL_OW 314
30441: NOT
30442: AND
30443: IFFALSE 30369
// PlaySoundXY ( x , y , PlantMine ) ;
30445: LD_VAR 0 2
30449: PPUSH
30450: LD_VAR 0 3
30454: PPUSH
30455: LD_STRING PlantMine
30457: PPUSH
30458: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30462: LD_VAR 0 2
30466: PPUSH
30467: LD_VAR 0 3
30471: PPUSH
30472: LD_VAR 0 1
30476: PPUSH
30477: CALL_OW 255
30481: PPUSH
30482: LD_INT 0
30484: PPUSH
30485: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30489: LD_ADDR_EXP 116
30493: PUSH
30494: LD_EXP 116
30498: PPUSH
30499: LD_VAR 0 5
30503: PUSH
30504: LD_EXP 116
30508: PUSH
30509: LD_VAR 0 5
30513: ARRAY
30514: PUSH
30515: LD_INT 1
30517: PLUS
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PPUSH
30523: LD_VAR 0 2
30527: PUSH
30528: LD_VAR 0 3
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PPUSH
30537: CALL 36723 0 3
30541: ST_TO_ADDR
// result := true ;
30542: LD_ADDR_VAR 0 4
30546: PUSH
30547: LD_INT 1
30549: ST_TO_ADDR
// end ;
30550: LD_VAR 0 4
30554: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30555: LD_INT 0
30557: PPUSH
30558: PPUSH
30559: PPUSH
// if not unit in minersList then
30560: LD_VAR 0 1
30564: PUSH
30565: LD_EXP 115
30569: IN
30570: NOT
30571: IFFALSE 30575
// exit ;
30573: GO 30967
// index := GetElementIndex ( minersList , unit ) ;
30575: LD_ADDR_VAR 0 6
30579: PUSH
30580: LD_EXP 115
30584: PPUSH
30585: LD_VAR 0 1
30589: PPUSH
30590: CALL 36508 0 2
30594: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30595: LD_ADDR_VAR 0 5
30599: PUSH
30600: DOUBLE
30601: LD_EXP 116
30605: PUSH
30606: LD_VAR 0 6
30610: ARRAY
30611: INC
30612: ST_TO_ADDR
30613: LD_INT 1
30615: PUSH
30616: FOR_DOWNTO
30617: IFFALSE 30778
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30619: LD_EXP 116
30623: PUSH
30624: LD_VAR 0 6
30628: ARRAY
30629: PUSH
30630: LD_VAR 0 5
30634: ARRAY
30635: PUSH
30636: LD_INT 1
30638: ARRAY
30639: PUSH
30640: LD_VAR 0 2
30644: EQUAL
30645: PUSH
30646: LD_EXP 116
30650: PUSH
30651: LD_VAR 0 6
30655: ARRAY
30656: PUSH
30657: LD_VAR 0 5
30661: ARRAY
30662: PUSH
30663: LD_INT 2
30665: ARRAY
30666: PUSH
30667: LD_VAR 0 3
30671: EQUAL
30672: AND
30673: IFFALSE 30776
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30675: LD_EXP 116
30679: PUSH
30680: LD_VAR 0 6
30684: ARRAY
30685: PUSH
30686: LD_VAR 0 5
30690: ARRAY
30691: PUSH
30692: LD_INT 1
30694: ARRAY
30695: PPUSH
30696: LD_EXP 116
30700: PUSH
30701: LD_VAR 0 6
30705: ARRAY
30706: PUSH
30707: LD_VAR 0 5
30711: ARRAY
30712: PUSH
30713: LD_INT 2
30715: ARRAY
30716: PPUSH
30717: LD_VAR 0 1
30721: PPUSH
30722: CALL_OW 255
30726: PPUSH
30727: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30731: LD_ADDR_EXP 116
30735: PUSH
30736: LD_EXP 116
30740: PPUSH
30741: LD_VAR 0 6
30745: PPUSH
30746: LD_EXP 116
30750: PUSH
30751: LD_VAR 0 6
30755: ARRAY
30756: PPUSH
30757: LD_VAR 0 5
30761: PPUSH
30762: CALL_OW 3
30766: PPUSH
30767: CALL_OW 1
30771: ST_TO_ADDR
// exit ;
30772: POP
30773: POP
30774: GO 30967
// end ; end ;
30776: GO 30616
30778: POP
30779: POP
// for i := minerMinesList [ index ] downto 1 do
30780: LD_ADDR_VAR 0 5
30784: PUSH
30785: DOUBLE
30786: LD_EXP 116
30790: PUSH
30791: LD_VAR 0 6
30795: ARRAY
30796: INC
30797: ST_TO_ADDR
30798: LD_INT 1
30800: PUSH
30801: FOR_DOWNTO
30802: IFFALSE 30965
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30804: LD_EXP 116
30808: PUSH
30809: LD_VAR 0 6
30813: ARRAY
30814: PUSH
30815: LD_VAR 0 5
30819: ARRAY
30820: PUSH
30821: LD_INT 1
30823: ARRAY
30824: PPUSH
30825: LD_EXP 116
30829: PUSH
30830: LD_VAR 0 6
30834: ARRAY
30835: PUSH
30836: LD_VAR 0 5
30840: ARRAY
30841: PUSH
30842: LD_INT 2
30844: ARRAY
30845: PPUSH
30846: LD_VAR 0 2
30850: PPUSH
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 298
30860: PUSH
30861: LD_INT 6
30863: LESS
30864: IFFALSE 30963
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30866: LD_EXP 116
30870: PUSH
30871: LD_VAR 0 6
30875: ARRAY
30876: PUSH
30877: LD_VAR 0 5
30881: ARRAY
30882: PUSH
30883: LD_INT 1
30885: ARRAY
30886: PPUSH
30887: LD_EXP 116
30891: PUSH
30892: LD_VAR 0 6
30896: ARRAY
30897: PUSH
30898: LD_VAR 0 5
30902: ARRAY
30903: PUSH
30904: LD_INT 2
30906: ARRAY
30907: PPUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 255
30917: PPUSH
30918: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30922: LD_ADDR_EXP 116
30926: PUSH
30927: LD_EXP 116
30931: PPUSH
30932: LD_VAR 0 6
30936: PPUSH
30937: LD_EXP 116
30941: PUSH
30942: LD_VAR 0 6
30946: ARRAY
30947: PPUSH
30948: LD_VAR 0 5
30952: PPUSH
30953: CALL_OW 3
30957: PPUSH
30958: CALL_OW 1
30962: ST_TO_ADDR
// end ; end ;
30963: GO 30801
30965: POP
30966: POP
// end ;
30967: LD_VAR 0 4
30971: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30972: LD_INT 0
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30983: LD_VAR 0 1
30987: PPUSH
30988: CALL_OW 264
30992: PUSH
30993: LD_INT 81
30995: EQUAL
30996: NOT
30997: PUSH
30998: LD_VAR 0 1
31002: PUSH
31003: LD_EXP 115
31007: IN
31008: NOT
31009: OR
31010: IFFALSE 31014
// exit ;
31012: GO 31336
// index := GetElementIndex ( minersList , unit ) ;
31014: LD_ADDR_VAR 0 6
31018: PUSH
31019: LD_EXP 115
31023: PPUSH
31024: LD_VAR 0 1
31028: PPUSH
31029: CALL 36508 0 2
31033: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31034: LD_ADDR_VAR 0 8
31038: PUSH
31039: LD_EXP 117
31043: PUSH
31044: LD_EXP 116
31048: PUSH
31049: LD_VAR 0 6
31053: ARRAY
31054: MINUS
31055: ST_TO_ADDR
// if not minesFreeAmount then
31056: LD_VAR 0 8
31060: NOT
31061: IFFALSE 31065
// exit ;
31063: GO 31336
// tmp := [ ] ;
31065: LD_ADDR_VAR 0 7
31069: PUSH
31070: EMPTY
31071: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31072: LD_ADDR_VAR 0 5
31076: PUSH
31077: DOUBLE
31078: LD_INT 1
31080: DEC
31081: ST_TO_ADDR
31082: LD_VAR 0 8
31086: PUSH
31087: FOR_TO
31088: IFFALSE 31283
// begin _d := rand ( 0 , 5 ) ;
31090: LD_ADDR_VAR 0 11
31094: PUSH
31095: LD_INT 0
31097: PPUSH
31098: LD_INT 5
31100: PPUSH
31101: CALL_OW 12
31105: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31106: LD_ADDR_VAR 0 12
31110: PUSH
31111: LD_INT 2
31113: PPUSH
31114: LD_INT 6
31116: PPUSH
31117: CALL_OW 12
31121: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: LD_VAR 0 2
31131: PPUSH
31132: LD_VAR 0 11
31136: PPUSH
31137: LD_VAR 0 12
31141: PPUSH
31142: CALL_OW 272
31146: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31147: LD_ADDR_VAR 0 10
31151: PUSH
31152: LD_VAR 0 3
31156: PPUSH
31157: LD_VAR 0 11
31161: PPUSH
31162: LD_VAR 0 12
31166: PPUSH
31167: CALL_OW 273
31171: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31172: LD_VAR 0 9
31176: PPUSH
31177: LD_VAR 0 10
31181: PPUSH
31182: CALL_OW 488
31186: PUSH
31187: LD_VAR 0 9
31191: PUSH
31192: LD_VAR 0 10
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_VAR 0 7
31205: IN
31206: NOT
31207: AND
31208: PUSH
31209: LD_VAR 0 9
31213: PPUSH
31214: LD_VAR 0 10
31218: PPUSH
31219: CALL_OW 458
31223: NOT
31224: AND
31225: IFFALSE 31267
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31227: LD_ADDR_VAR 0 7
31231: PUSH
31232: LD_VAR 0 7
31236: PPUSH
31237: LD_VAR 0 7
31241: PUSH
31242: LD_INT 1
31244: PLUS
31245: PPUSH
31246: LD_VAR 0 9
31250: PUSH
31251: LD_VAR 0 10
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PPUSH
31260: CALL_OW 1
31264: ST_TO_ADDR
31265: GO 31281
// i := i - 1 ;
31267: LD_ADDR_VAR 0 5
31271: PUSH
31272: LD_VAR 0 5
31276: PUSH
31277: LD_INT 1
31279: MINUS
31280: ST_TO_ADDR
// end ;
31281: GO 31087
31283: POP
31284: POP
// for i in tmp do
31285: LD_ADDR_VAR 0 5
31289: PUSH
31290: LD_VAR 0 7
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31334
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31298: LD_VAR 0 1
31302: PPUSH
31303: LD_VAR 0 5
31307: PUSH
31308: LD_INT 1
31310: ARRAY
31311: PPUSH
31312: LD_VAR 0 5
31316: PUSH
31317: LD_INT 2
31319: ARRAY
31320: PPUSH
31321: CALL 30280 0 3
31325: NOT
31326: IFFALSE 31332
// exit ;
31328: POP
31329: POP
31330: GO 31336
31332: GO 31295
31334: POP
31335: POP
// end ;
31336: LD_VAR 0 4
31340: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
// if not GetClass ( unit ) = class_sniper then
31350: LD_VAR 0 1
31354: PPUSH
31355: CALL_OW 257
31359: PUSH
31360: LD_INT 5
31362: EQUAL
31363: NOT
31364: IFFALSE 31368
// exit ;
31366: GO 31756
// dist := 8 ;
31368: LD_ADDR_VAR 0 5
31372: PUSH
31373: LD_INT 8
31375: ST_TO_ADDR
// viewRange := 12 ;
31376: LD_ADDR_VAR 0 7
31380: PUSH
31381: LD_INT 12
31383: ST_TO_ADDR
// side := GetSide ( unit ) ;
31384: LD_ADDR_VAR 0 6
31388: PUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: CALL_OW 255
31398: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31399: LD_INT 61
31401: PPUSH
31402: LD_VAR 0 6
31406: PPUSH
31407: CALL_OW 321
31411: PUSH
31412: LD_INT 2
31414: EQUAL
31415: IFFALSE 31425
// viewRange := 16 ;
31417: LD_ADDR_VAR 0 7
31421: PUSH
31422: LD_INT 16
31424: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31425: LD_VAR 0 1
31429: PPUSH
31430: LD_VAR 0 2
31434: PPUSH
31435: LD_VAR 0 3
31439: PPUSH
31440: CALL_OW 297
31444: PUSH
31445: LD_VAR 0 5
31449: GREATER
31450: IFFALSE 31529
// begin ComMoveXY ( unit , x , y ) ;
31452: LD_VAR 0 1
31456: PPUSH
31457: LD_VAR 0 2
31461: PPUSH
31462: LD_VAR 0 3
31466: PPUSH
31467: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31471: LD_INT 35
31473: PPUSH
31474: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31478: LD_VAR 0 1
31482: PPUSH
31483: LD_VAR 0 2
31487: PPUSH
31488: LD_VAR 0 3
31492: PPUSH
31493: CALL 68249 0 3
31497: NOT
31498: IFFALSE 31502
// exit ;
31500: GO 31756
// until GetDistUnitXY ( unit , x , y ) < dist ;
31502: LD_VAR 0 1
31506: PPUSH
31507: LD_VAR 0 2
31511: PPUSH
31512: LD_VAR 0 3
31516: PPUSH
31517: CALL_OW 297
31521: PUSH
31522: LD_VAR 0 5
31526: LESS
31527: IFFALSE 31471
// end ; ComTurnXY ( unit , x , y ) ;
31529: LD_VAR 0 1
31533: PPUSH
31534: LD_VAR 0 2
31538: PPUSH
31539: LD_VAR 0 3
31543: PPUSH
31544: CALL_OW 118
// wait ( 5 ) ;
31548: LD_INT 5
31550: PPUSH
31551: CALL_OW 67
// _d := GetDir ( unit ) ;
31555: LD_ADDR_VAR 0 10
31559: PUSH
31560: LD_VAR 0 1
31564: PPUSH
31565: CALL_OW 254
31569: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31570: LD_ADDR_VAR 0 8
31574: PUSH
31575: LD_VAR 0 1
31579: PPUSH
31580: CALL_OW 250
31584: PPUSH
31585: LD_VAR 0 10
31589: PPUSH
31590: LD_VAR 0 5
31594: PPUSH
31595: CALL_OW 272
31599: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31600: LD_ADDR_VAR 0 9
31604: PUSH
31605: LD_VAR 0 1
31609: PPUSH
31610: CALL_OW 251
31614: PPUSH
31615: LD_VAR 0 10
31619: PPUSH
31620: LD_VAR 0 5
31624: PPUSH
31625: CALL_OW 273
31629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31630: LD_VAR 0 8
31634: PPUSH
31635: LD_VAR 0 9
31639: PPUSH
31640: CALL_OW 488
31644: NOT
31645: IFFALSE 31649
// exit ;
31647: GO 31756
// ComAnimCustom ( unit , 1 ) ;
31649: LD_VAR 0 1
31653: PPUSH
31654: LD_INT 1
31656: PPUSH
31657: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31661: LD_VAR 0 8
31665: PPUSH
31666: LD_VAR 0 9
31670: PPUSH
31671: LD_VAR 0 6
31675: PPUSH
31676: LD_VAR 0 7
31680: PPUSH
31681: CALL_OW 330
// repeat wait ( 1 ) ;
31685: LD_INT 1
31687: PPUSH
31688: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: CALL_OW 316
31701: PUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 314
31711: OR
31712: PUSH
31713: LD_VAR 0 1
31717: PPUSH
31718: CALL_OW 302
31722: NOT
31723: OR
31724: PUSH
31725: LD_VAR 0 1
31729: PPUSH
31730: CALL_OW 301
31734: OR
31735: IFFALSE 31685
// RemoveSeeing ( _x , _y , side ) ;
31737: LD_VAR 0 8
31741: PPUSH
31742: LD_VAR 0 9
31746: PPUSH
31747: LD_VAR 0 6
31751: PPUSH
31752: CALL_OW 331
// end ; end_of_file
31756: LD_VAR 0 4
31760: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31761: LD_INT 0
31763: PPUSH
31764: PPUSH
// if exist_mode then
31765: LD_VAR 0 2
31769: IFFALSE 31794
// unit := CreateCharacter ( prefix & ident ) else
31771: LD_ADDR_VAR 0 5
31775: PUSH
31776: LD_VAR 0 3
31780: PUSH
31781: LD_VAR 0 1
31785: STR
31786: PPUSH
31787: CALL_OW 34
31791: ST_TO_ADDR
31792: GO 31809
// unit := NewCharacter ( ident ) ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: LD_VAR 0 1
31803: PPUSH
31804: CALL_OW 25
31808: ST_TO_ADDR
// result := unit ;
31809: LD_ADDR_VAR 0 4
31813: PUSH
31814: LD_VAR 0 5
31818: ST_TO_ADDR
// end ;
31819: LD_VAR 0 4
31823: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31824: LD_INT 0
31826: PPUSH
31827: PPUSH
// if not side or not nation then
31828: LD_VAR 0 1
31832: NOT
31833: PUSH
31834: LD_VAR 0 2
31838: NOT
31839: OR
31840: IFFALSE 31844
// exit ;
31842: GO 32612
// case nation of nation_american :
31844: LD_VAR 0 2
31848: PUSH
31849: LD_INT 1
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 32071
31857: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31858: LD_ADDR_VAR 0 4
31862: PUSH
31863: LD_INT 35
31865: PUSH
31866: LD_INT 45
31868: PUSH
31869: LD_INT 46
31871: PUSH
31872: LD_INT 47
31874: PUSH
31875: LD_INT 82
31877: PUSH
31878: LD_INT 83
31880: PUSH
31881: LD_INT 84
31883: PUSH
31884: LD_INT 85
31886: PUSH
31887: LD_INT 86
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 2
31895: PUSH
31896: LD_INT 6
31898: PUSH
31899: LD_INT 15
31901: PUSH
31902: LD_INT 16
31904: PUSH
31905: LD_INT 7
31907: PUSH
31908: LD_INT 12
31910: PUSH
31911: LD_INT 13
31913: PUSH
31914: LD_INT 10
31916: PUSH
31917: LD_INT 14
31919: PUSH
31920: LD_INT 20
31922: PUSH
31923: LD_INT 21
31925: PUSH
31926: LD_INT 22
31928: PUSH
31929: LD_INT 25
31931: PUSH
31932: LD_INT 32
31934: PUSH
31935: LD_INT 27
31937: PUSH
31938: LD_INT 36
31940: PUSH
31941: LD_INT 69
31943: PUSH
31944: LD_INT 39
31946: PUSH
31947: LD_INT 34
31949: PUSH
31950: LD_INT 40
31952: PUSH
31953: LD_INT 48
31955: PUSH
31956: LD_INT 49
31958: PUSH
31959: LD_INT 50
31961: PUSH
31962: LD_INT 51
31964: PUSH
31965: LD_INT 52
31967: PUSH
31968: LD_INT 53
31970: PUSH
31971: LD_INT 54
31973: PUSH
31974: LD_INT 55
31976: PUSH
31977: LD_INT 56
31979: PUSH
31980: LD_INT 57
31982: PUSH
31983: LD_INT 58
31985: PUSH
31986: LD_INT 59
31988: PUSH
31989: LD_INT 60
31991: PUSH
31992: LD_INT 61
31994: PUSH
31995: LD_INT 62
31997: PUSH
31998: LD_INT 80
32000: PUSH
32001: LD_INT 82
32003: PUSH
32004: LD_INT 83
32006: PUSH
32007: LD_INT 84
32009: PUSH
32010: LD_INT 85
32012: PUSH
32013: LD_INT 86
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: ST_TO_ADDR
32069: GO 32536
32071: LD_INT 2
32073: DOUBLE
32074: EQUAL
32075: IFTRUE 32079
32077: GO 32305
32079: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32080: LD_ADDR_VAR 0 4
32084: PUSH
32085: LD_INT 35
32087: PUSH
32088: LD_INT 45
32090: PUSH
32091: LD_INT 46
32093: PUSH
32094: LD_INT 47
32096: PUSH
32097: LD_INT 82
32099: PUSH
32100: LD_INT 83
32102: PUSH
32103: LD_INT 84
32105: PUSH
32106: LD_INT 85
32108: PUSH
32109: LD_INT 87
32111: PUSH
32112: LD_INT 70
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 11
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: LD_INT 5
32129: PUSH
32130: LD_INT 6
32132: PUSH
32133: LD_INT 15
32135: PUSH
32136: LD_INT 18
32138: PUSH
32139: LD_INT 7
32141: PUSH
32142: LD_INT 17
32144: PUSH
32145: LD_INT 8
32147: PUSH
32148: LD_INT 20
32150: PUSH
32151: LD_INT 21
32153: PUSH
32154: LD_INT 22
32156: PUSH
32157: LD_INT 72
32159: PUSH
32160: LD_INT 26
32162: PUSH
32163: LD_INT 69
32165: PUSH
32166: LD_INT 39
32168: PUSH
32169: LD_INT 40
32171: PUSH
32172: LD_INT 41
32174: PUSH
32175: LD_INT 42
32177: PUSH
32178: LD_INT 43
32180: PUSH
32181: LD_INT 48
32183: PUSH
32184: LD_INT 49
32186: PUSH
32187: LD_INT 50
32189: PUSH
32190: LD_INT 51
32192: PUSH
32193: LD_INT 52
32195: PUSH
32196: LD_INT 53
32198: PUSH
32199: LD_INT 54
32201: PUSH
32202: LD_INT 55
32204: PUSH
32205: LD_INT 56
32207: PUSH
32208: LD_INT 60
32210: PUSH
32211: LD_INT 61
32213: PUSH
32214: LD_INT 62
32216: PUSH
32217: LD_INT 66
32219: PUSH
32220: LD_INT 67
32222: PUSH
32223: LD_INT 68
32225: PUSH
32226: LD_INT 81
32228: PUSH
32229: LD_INT 82
32231: PUSH
32232: LD_INT 83
32234: PUSH
32235: LD_INT 84
32237: PUSH
32238: LD_INT 85
32240: PUSH
32241: LD_INT 87
32243: PUSH
32244: LD_INT 88
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: ST_TO_ADDR
32303: GO 32536
32305: LD_INT 3
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32535
32313: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32314: LD_ADDR_VAR 0 4
32318: PUSH
32319: LD_INT 46
32321: PUSH
32322: LD_INT 47
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 82
32333: PUSH
32334: LD_INT 83
32336: PUSH
32337: LD_INT 84
32339: PUSH
32340: LD_INT 85
32342: PUSH
32343: LD_INT 86
32345: PUSH
32346: LD_INT 11
32348: PUSH
32349: LD_INT 9
32351: PUSH
32352: LD_INT 20
32354: PUSH
32355: LD_INT 19
32357: PUSH
32358: LD_INT 21
32360: PUSH
32361: LD_INT 24
32363: PUSH
32364: LD_INT 22
32366: PUSH
32367: LD_INT 25
32369: PUSH
32370: LD_INT 28
32372: PUSH
32373: LD_INT 29
32375: PUSH
32376: LD_INT 30
32378: PUSH
32379: LD_INT 31
32381: PUSH
32382: LD_INT 37
32384: PUSH
32385: LD_INT 38
32387: PUSH
32388: LD_INT 32
32390: PUSH
32391: LD_INT 27
32393: PUSH
32394: LD_INT 33
32396: PUSH
32397: LD_INT 69
32399: PUSH
32400: LD_INT 39
32402: PUSH
32403: LD_INT 34
32405: PUSH
32406: LD_INT 40
32408: PUSH
32409: LD_INT 71
32411: PUSH
32412: LD_INT 23
32414: PUSH
32415: LD_INT 44
32417: PUSH
32418: LD_INT 48
32420: PUSH
32421: LD_INT 49
32423: PUSH
32424: LD_INT 50
32426: PUSH
32427: LD_INT 51
32429: PUSH
32430: LD_INT 52
32432: PUSH
32433: LD_INT 53
32435: PUSH
32436: LD_INT 54
32438: PUSH
32439: LD_INT 55
32441: PUSH
32442: LD_INT 56
32444: PUSH
32445: LD_INT 57
32447: PUSH
32448: LD_INT 58
32450: PUSH
32451: LD_INT 59
32453: PUSH
32454: LD_INT 63
32456: PUSH
32457: LD_INT 64
32459: PUSH
32460: LD_INT 65
32462: PUSH
32463: LD_INT 82
32465: PUSH
32466: LD_INT 83
32468: PUSH
32469: LD_INT 84
32471: PUSH
32472: LD_INT 85
32474: PUSH
32475: LD_INT 86
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
32533: GO 32536
32535: POP
// if state > - 1 and state < 3 then
32536: LD_VAR 0 3
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: GREATER
32545: PUSH
32546: LD_VAR 0 3
32550: PUSH
32551: LD_INT 3
32553: LESS
32554: AND
32555: IFFALSE 32612
// for i in result do
32557: LD_ADDR_VAR 0 5
32561: PUSH
32562: LD_VAR 0 4
32566: PUSH
32567: FOR_IN
32568: IFFALSE 32610
// if GetTech ( i , side ) <> state then
32570: LD_VAR 0 5
32574: PPUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 321
32584: PUSH
32585: LD_VAR 0 3
32589: NONEQUAL
32590: IFFALSE 32608
// result := result diff i ;
32592: LD_ADDR_VAR 0 4
32596: PUSH
32597: LD_VAR 0 4
32601: PUSH
32602: LD_VAR 0 5
32606: DIFF
32607: ST_TO_ADDR
32608: GO 32567
32610: POP
32611: POP
// end ;
32612: LD_VAR 0 4
32616: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32617: LD_INT 0
32619: PPUSH
32620: PPUSH
32621: PPUSH
// result := true ;
32622: LD_ADDR_VAR 0 3
32626: PUSH
32627: LD_INT 1
32629: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32630: LD_ADDR_VAR 0 5
32634: PUSH
32635: LD_VAR 0 2
32639: PPUSH
32640: CALL_OW 480
32644: ST_TO_ADDR
// if not tmp then
32645: LD_VAR 0 5
32649: NOT
32650: IFFALSE 32654
// exit ;
32652: GO 32703
// for i in tmp do
32654: LD_ADDR_VAR 0 4
32658: PUSH
32659: LD_VAR 0 5
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32701
// if GetTech ( i , side ) <> state_researched then
32667: LD_VAR 0 4
32671: PPUSH
32672: LD_VAR 0 1
32676: PPUSH
32677: CALL_OW 321
32681: PUSH
32682: LD_INT 2
32684: NONEQUAL
32685: IFFALSE 32699
// begin result := false ;
32687: LD_ADDR_VAR 0 3
32691: PUSH
32692: LD_INT 0
32694: ST_TO_ADDR
// exit ;
32695: POP
32696: POP
32697: GO 32703
// end ;
32699: GO 32664
32701: POP
32702: POP
// end ;
32703: LD_VAR 0 3
32707: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32708: LD_INT 0
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32723: LD_VAR 0 1
32727: NOT
32728: PUSH
32729: LD_VAR 0 1
32733: PPUSH
32734: CALL_OW 257
32738: PUSH
32739: LD_INT 9
32741: NONEQUAL
32742: OR
32743: IFFALSE 32747
// exit ;
32745: GO 33320
// side := GetSide ( unit ) ;
32747: LD_ADDR_VAR 0 9
32751: PUSH
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 255
32761: ST_TO_ADDR
// tech_space := tech_spacanom ;
32762: LD_ADDR_VAR 0 12
32766: PUSH
32767: LD_INT 29
32769: ST_TO_ADDR
// tech_time := tech_taurad ;
32770: LD_ADDR_VAR 0 13
32774: PUSH
32775: LD_INT 28
32777: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32778: LD_ADDR_VAR 0 11
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 310
32792: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32793: LD_VAR 0 11
32797: PPUSH
32798: CALL_OW 247
32802: PUSH
32803: LD_INT 2
32805: EQUAL
32806: IFFALSE 32810
// exit ;
32808: GO 33320
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32810: LD_ADDR_VAR 0 8
32814: PUSH
32815: LD_INT 81
32817: PUSH
32818: LD_VAR 0 9
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 3
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PPUSH
32848: CALL_OW 69
32852: ST_TO_ADDR
// if not tmp then
32853: LD_VAR 0 8
32857: NOT
32858: IFFALSE 32862
// exit ;
32860: GO 33320
// if in_unit then
32862: LD_VAR 0 11
32866: IFFALSE 32890
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32868: LD_ADDR_VAR 0 10
32872: PUSH
32873: LD_VAR 0 8
32877: PPUSH
32878: LD_VAR 0 11
32882: PPUSH
32883: CALL_OW 74
32887: ST_TO_ADDR
32888: GO 32910
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32890: LD_ADDR_VAR 0 10
32894: PUSH
32895: LD_VAR 0 8
32899: PPUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL_OW 74
32909: ST_TO_ADDR
// if not enemy then
32910: LD_VAR 0 10
32914: NOT
32915: IFFALSE 32919
// exit ;
32917: GO 33320
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32919: LD_VAR 0 11
32923: PUSH
32924: LD_VAR 0 11
32928: PPUSH
32929: LD_VAR 0 10
32933: PPUSH
32934: CALL_OW 296
32938: PUSH
32939: LD_INT 13
32941: GREATER
32942: AND
32943: PUSH
32944: LD_VAR 0 1
32948: PPUSH
32949: LD_VAR 0 10
32953: PPUSH
32954: CALL_OW 296
32958: PUSH
32959: LD_INT 12
32961: GREATER
32962: OR
32963: IFFALSE 32967
// exit ;
32965: GO 33320
// missile := [ 1 ] ;
32967: LD_ADDR_VAR 0 14
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32978: LD_VAR 0 9
32982: PPUSH
32983: LD_VAR 0 12
32987: PPUSH
32988: CALL_OW 325
32992: IFFALSE 33021
// missile := Replace ( missile , missile + 1 , 2 ) ;
32994: LD_ADDR_VAR 0 14
32998: PUSH
32999: LD_VAR 0 14
33003: PPUSH
33004: LD_VAR 0 14
33008: PUSH
33009: LD_INT 1
33011: PLUS
33012: PPUSH
33013: LD_INT 2
33015: PPUSH
33016: CALL_OW 1
33020: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33021: LD_VAR 0 9
33025: PPUSH
33026: LD_VAR 0 13
33030: PPUSH
33031: CALL_OW 325
33035: PUSH
33036: LD_VAR 0 10
33040: PPUSH
33041: CALL_OW 255
33045: PPUSH
33046: LD_VAR 0 13
33050: PPUSH
33051: CALL_OW 325
33055: NOT
33056: AND
33057: IFFALSE 33086
// missile := Replace ( missile , missile + 1 , 3 ) ;
33059: LD_ADDR_VAR 0 14
33063: PUSH
33064: LD_VAR 0 14
33068: PPUSH
33069: LD_VAR 0 14
33073: PUSH
33074: LD_INT 1
33076: PLUS
33077: PPUSH
33078: LD_INT 3
33080: PPUSH
33081: CALL_OW 1
33085: ST_TO_ADDR
// if missile < 2 then
33086: LD_VAR 0 14
33090: PUSH
33091: LD_INT 2
33093: LESS
33094: IFFALSE 33098
// exit ;
33096: GO 33320
// x := GetX ( enemy ) ;
33098: LD_ADDR_VAR 0 4
33102: PUSH
33103: LD_VAR 0 10
33107: PPUSH
33108: CALL_OW 250
33112: ST_TO_ADDR
// y := GetY ( enemy ) ;
33113: LD_ADDR_VAR 0 5
33117: PUSH
33118: LD_VAR 0 10
33122: PPUSH
33123: CALL_OW 251
33127: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33128: LD_ADDR_VAR 0 6
33132: PUSH
33133: LD_VAR 0 4
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PPUSH
33142: LD_INT 1
33144: PPUSH
33145: CALL_OW 12
33149: PLUS
33150: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33151: LD_ADDR_VAR 0 7
33155: PUSH
33156: LD_VAR 0 5
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PPUSH
33165: LD_INT 1
33167: PPUSH
33168: CALL_OW 12
33172: PLUS
33173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33174: LD_VAR 0 6
33178: PPUSH
33179: LD_VAR 0 7
33183: PPUSH
33184: CALL_OW 488
33188: NOT
33189: IFFALSE 33211
// begin _x := x ;
33191: LD_ADDR_VAR 0 6
33195: PUSH
33196: LD_VAR 0 4
33200: ST_TO_ADDR
// _y := y ;
33201: LD_ADDR_VAR 0 7
33205: PUSH
33206: LD_VAR 0 5
33210: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_INT 1
33218: PPUSH
33219: LD_VAR 0 14
33223: PPUSH
33224: CALL_OW 12
33228: ST_TO_ADDR
// case i of 1 :
33229: LD_VAR 0 3
33233: PUSH
33234: LD_INT 1
33236: DOUBLE
33237: EQUAL
33238: IFTRUE 33242
33240: GO 33259
33242: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33243: LD_VAR 0 1
33247: PPUSH
33248: LD_VAR 0 10
33252: PPUSH
33253: CALL_OW 115
33257: GO 33320
33259: LD_INT 2
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33289
33267: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33268: LD_VAR 0 1
33272: PPUSH
33273: LD_VAR 0 6
33277: PPUSH
33278: LD_VAR 0 7
33282: PPUSH
33283: CALL_OW 153
33287: GO 33320
33289: LD_INT 3
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33319
33297: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33298: LD_VAR 0 1
33302: PPUSH
33303: LD_VAR 0 6
33307: PPUSH
33308: LD_VAR 0 7
33312: PPUSH
33313: CALL_OW 154
33317: GO 33320
33319: POP
// end ;
33320: LD_VAR 0 2
33324: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33325: LD_INT 0
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
// if not unit or not building then
33333: LD_VAR 0 1
33337: NOT
33338: PUSH
33339: LD_VAR 0 2
33343: NOT
33344: OR
33345: IFFALSE 33349
// exit ;
33347: GO 33507
// x := GetX ( building ) ;
33349: LD_ADDR_VAR 0 5
33353: PUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: CALL_OW 250
33363: ST_TO_ADDR
// y := GetY ( building ) ;
33364: LD_ADDR_VAR 0 6
33368: PUSH
33369: LD_VAR 0 2
33373: PPUSH
33374: CALL_OW 251
33378: ST_TO_ADDR
// for i = 0 to 5 do
33379: LD_ADDR_VAR 0 4
33383: PUSH
33384: DOUBLE
33385: LD_INT 0
33387: DEC
33388: ST_TO_ADDR
33389: LD_INT 5
33391: PUSH
33392: FOR_TO
33393: IFFALSE 33505
// begin _x := ShiftX ( x , i , 3 ) ;
33395: LD_ADDR_VAR 0 7
33399: PUSH
33400: LD_VAR 0 5
33404: PPUSH
33405: LD_VAR 0 4
33409: PPUSH
33410: LD_INT 3
33412: PPUSH
33413: CALL_OW 272
33417: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33418: LD_ADDR_VAR 0 8
33422: PUSH
33423: LD_VAR 0 6
33427: PPUSH
33428: LD_VAR 0 4
33432: PPUSH
33433: LD_INT 3
33435: PPUSH
33436: CALL_OW 273
33440: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33441: LD_VAR 0 7
33445: PPUSH
33446: LD_VAR 0 8
33450: PPUSH
33451: CALL_OW 488
33455: NOT
33456: IFFALSE 33460
// continue ;
33458: GO 33392
// if HexInfo ( _x , _y ) = 0 then
33460: LD_VAR 0 7
33464: PPUSH
33465: LD_VAR 0 8
33469: PPUSH
33470: CALL_OW 428
33474: PUSH
33475: LD_INT 0
33477: EQUAL
33478: IFFALSE 33503
// begin ComMoveXY ( unit , _x , _y ) ;
33480: LD_VAR 0 1
33484: PPUSH
33485: LD_VAR 0 7
33489: PPUSH
33490: LD_VAR 0 8
33494: PPUSH
33495: CALL_OW 111
// exit ;
33499: POP
33500: POP
33501: GO 33507
// end ; end ;
33503: GO 33392
33505: POP
33506: POP
// end ;
33507: LD_VAR 0 3
33511: RET
// export function ScanBase ( side , base_area ) ; begin
33512: LD_INT 0
33514: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_INT 81
33527: PUSH
33528: LD_VAR 0 1
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PPUSH
33537: CALL_OW 70
33541: ST_TO_ADDR
// end ;
33542: LD_VAR 0 3
33546: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
// result := false ;
33553: LD_ADDR_VAR 0 2
33557: PUSH
33558: LD_INT 0
33560: ST_TO_ADDR
// side := GetSide ( unit ) ;
33561: LD_ADDR_VAR 0 3
33565: PUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 255
33575: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33576: LD_ADDR_VAR 0 4
33580: PUSH
33581: LD_VAR 0 1
33585: PPUSH
33586: CALL_OW 248
33590: ST_TO_ADDR
// case nat of 1 :
33591: LD_VAR 0 4
33595: PUSH
33596: LD_INT 1
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33604
33602: GO 33615
33604: POP
// tech := tech_lassight ; 2 :
33605: LD_ADDR_VAR 0 5
33609: PUSH
33610: LD_INT 12
33612: ST_TO_ADDR
33613: GO 33654
33615: LD_INT 2
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33634
33623: POP
// tech := tech_mortar ; 3 :
33624: LD_ADDR_VAR 0 5
33628: PUSH
33629: LD_INT 41
33631: ST_TO_ADDR
33632: GO 33654
33634: LD_INT 3
33636: DOUBLE
33637: EQUAL
33638: IFTRUE 33642
33640: GO 33653
33642: POP
// tech := tech_bazooka ; end ;
33643: LD_ADDR_VAR 0 5
33647: PUSH
33648: LD_INT 44
33650: ST_TO_ADDR
33651: GO 33654
33653: POP
// if Researched ( side , tech ) then
33654: LD_VAR 0 3
33658: PPUSH
33659: LD_VAR 0 5
33663: PPUSH
33664: CALL_OW 325
33668: IFFALSE 33695
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33670: LD_ADDR_VAR 0 2
33674: PUSH
33675: LD_INT 5
33677: PUSH
33678: LD_INT 8
33680: PUSH
33681: LD_INT 9
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: PUSH
33689: LD_VAR 0 4
33693: ARRAY
33694: ST_TO_ADDR
// end ;
33695: LD_VAR 0 2
33699: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
// if not mines then
33705: LD_VAR 0 2
33709: NOT
33710: IFFALSE 33714
// exit ;
33712: GO 33858
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33714: LD_ADDR_VAR 0 5
33718: PUSH
33719: LD_INT 81
33721: PUSH
33722: LD_VAR 0 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: LD_INT 21
33736: PUSH
33737: LD_INT 3
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PPUSH
33752: CALL_OW 69
33756: ST_TO_ADDR
// for i in mines do
33757: LD_ADDR_VAR 0 4
33761: PUSH
33762: LD_VAR 0 2
33766: PUSH
33767: FOR_IN
33768: IFFALSE 33856
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33770: LD_VAR 0 4
33774: PUSH
33775: LD_INT 1
33777: ARRAY
33778: PPUSH
33779: LD_VAR 0 4
33783: PUSH
33784: LD_INT 2
33786: ARRAY
33787: PPUSH
33788: CALL_OW 458
33792: NOT
33793: IFFALSE 33797
// continue ;
33795: GO 33767
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33797: LD_VAR 0 4
33801: PUSH
33802: LD_INT 1
33804: ARRAY
33805: PPUSH
33806: LD_VAR 0 4
33810: PUSH
33811: LD_INT 2
33813: ARRAY
33814: PPUSH
33815: CALL_OW 428
33819: PUSH
33820: LD_VAR 0 5
33824: IN
33825: IFFALSE 33854
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33827: LD_VAR 0 4
33831: PUSH
33832: LD_INT 1
33834: ARRAY
33835: PPUSH
33836: LD_VAR 0 4
33840: PUSH
33841: LD_INT 2
33843: ARRAY
33844: PPUSH
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 456
// end ;
33854: GO 33767
33856: POP
33857: POP
// end ;
33858: LD_VAR 0 3
33862: RET
// export function Count ( array ) ; begin
33863: LD_INT 0
33865: PPUSH
// result := array + 0 ;
33866: LD_ADDR_VAR 0 2
33870: PUSH
33871: LD_VAR 0 1
33875: PUSH
33876: LD_INT 0
33878: PLUS
33879: ST_TO_ADDR
// end ;
33880: LD_VAR 0 2
33884: RET
// export function IsEmpty ( building ) ; begin
33885: LD_INT 0
33887: PPUSH
// if not building then
33888: LD_VAR 0 1
33892: NOT
33893: IFFALSE 33897
// exit ;
33895: GO 33940
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33897: LD_ADDR_VAR 0 2
33901: PUSH
33902: LD_VAR 0 1
33906: PUSH
33907: LD_INT 22
33909: PUSH
33910: LD_VAR 0 1
33914: PPUSH
33915: CALL_OW 255
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 58
33926: PUSH
33927: EMPTY
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PPUSH
33934: CALL_OW 69
33938: IN
33939: ST_TO_ADDR
// end ;
33940: LD_VAR 0 2
33944: RET
// export function IsNotFull ( building ) ; var places ; begin
33945: LD_INT 0
33947: PPUSH
33948: PPUSH
// if not building then
33949: LD_VAR 0 1
33953: NOT
33954: IFFALSE 33958
// exit ;
33956: GO 33986
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33958: LD_ADDR_VAR 0 2
33962: PUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: LD_INT 3
33970: PUSH
33971: LD_INT 62
33973: PUSH
33974: EMPTY
33975: LIST
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PPUSH
33981: CALL_OW 72
33985: ST_TO_ADDR
// end ;
33986: LD_VAR 0 2
33990: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33991: LD_INT 0
33993: PPUSH
33994: PPUSH
33995: PPUSH
33996: PPUSH
// tmp := [ ] ;
33997: LD_ADDR_VAR 0 3
34001: PUSH
34002: EMPTY
34003: ST_TO_ADDR
// list := [ ] ;
34004: LD_ADDR_VAR 0 5
34008: PUSH
34009: EMPTY
34010: ST_TO_ADDR
// for i = 16 to 25 do
34011: LD_ADDR_VAR 0 4
34015: PUSH
34016: DOUBLE
34017: LD_INT 16
34019: DEC
34020: ST_TO_ADDR
34021: LD_INT 25
34023: PUSH
34024: FOR_TO
34025: IFFALSE 34098
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34027: LD_ADDR_VAR 0 3
34031: PUSH
34032: LD_VAR 0 3
34036: PUSH
34037: LD_INT 22
34039: PUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 255
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 91
34056: PUSH
34057: LD_VAR 0 1
34061: PUSH
34062: LD_INT 6
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 30
34072: PUSH
34073: LD_VAR 0 4
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PUSH
34087: EMPTY
34088: LIST
34089: PPUSH
34090: CALL_OW 69
34094: ADD
34095: ST_TO_ADDR
34096: GO 34024
34098: POP
34099: POP
// for i = 1 to tmp do
34100: LD_ADDR_VAR 0 4
34104: PUSH
34105: DOUBLE
34106: LD_INT 1
34108: DEC
34109: ST_TO_ADDR
34110: LD_VAR 0 3
34114: PUSH
34115: FOR_TO
34116: IFFALSE 34204
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34118: LD_ADDR_VAR 0 5
34122: PUSH
34123: LD_VAR 0 5
34127: PUSH
34128: LD_VAR 0 3
34132: PUSH
34133: LD_VAR 0 4
34137: ARRAY
34138: PPUSH
34139: CALL_OW 266
34143: PUSH
34144: LD_VAR 0 3
34148: PUSH
34149: LD_VAR 0 4
34153: ARRAY
34154: PPUSH
34155: CALL_OW 250
34159: PUSH
34160: LD_VAR 0 3
34164: PUSH
34165: LD_VAR 0 4
34169: ARRAY
34170: PPUSH
34171: CALL_OW 251
34175: PUSH
34176: LD_VAR 0 3
34180: PUSH
34181: LD_VAR 0 4
34185: ARRAY
34186: PPUSH
34187: CALL_OW 254
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: PUSH
34198: EMPTY
34199: LIST
34200: ADD
34201: ST_TO_ADDR
34202: GO 34115
34204: POP
34205: POP
// result := list ;
34206: LD_ADDR_VAR 0 2
34210: PUSH
34211: LD_VAR 0 5
34215: ST_TO_ADDR
// end ;
34216: LD_VAR 0 2
34220: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
// if not factory then
34230: LD_VAR 0 1
34234: NOT
34235: IFFALSE 34239
// exit ;
34237: GO 34832
// if control = control_apeman then
34239: LD_VAR 0 4
34243: PUSH
34244: LD_INT 5
34246: EQUAL
34247: IFFALSE 34356
// begin tmp := UnitsInside ( factory ) ;
34249: LD_ADDR_VAR 0 8
34253: PUSH
34254: LD_VAR 0 1
34258: PPUSH
34259: CALL_OW 313
34263: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34264: LD_VAR 0 8
34268: PPUSH
34269: LD_INT 25
34271: PUSH
34272: LD_INT 12
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PPUSH
34279: CALL_OW 72
34283: NOT
34284: IFFALSE 34294
// control := control_manual ;
34286: LD_ADDR_VAR 0 4
34290: PUSH
34291: LD_INT 1
34293: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34294: LD_ADDR_VAR 0 8
34298: PUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL 33991 0 1
34308: ST_TO_ADDR
// if tmp then
34309: LD_VAR 0 8
34313: IFFALSE 34356
// begin for i in tmp do
34315: LD_ADDR_VAR 0 7
34319: PUSH
34320: LD_VAR 0 8
34324: PUSH
34325: FOR_IN
34326: IFFALSE 34354
// if i [ 1 ] = b_ext_radio then
34328: LD_VAR 0 7
34332: PUSH
34333: LD_INT 1
34335: ARRAY
34336: PUSH
34337: LD_INT 22
34339: EQUAL
34340: IFFALSE 34352
// begin control := control_remote ;
34342: LD_ADDR_VAR 0 4
34346: PUSH
34347: LD_INT 2
34349: ST_TO_ADDR
// break ;
34350: GO 34354
// end ;
34352: GO 34325
34354: POP
34355: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34356: LD_VAR 0 1
34360: PPUSH
34361: LD_VAR 0 2
34365: PPUSH
34366: LD_VAR 0 3
34370: PPUSH
34371: LD_VAR 0 4
34375: PPUSH
34376: LD_VAR 0 5
34380: PPUSH
34381: CALL_OW 448
34385: IFFALSE 34420
// begin result := [ chassis , engine , control , weapon ] ;
34387: LD_ADDR_VAR 0 6
34391: PUSH
34392: LD_VAR 0 2
34396: PUSH
34397: LD_VAR 0 3
34401: PUSH
34402: LD_VAR 0 4
34406: PUSH
34407: LD_VAR 0 5
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: ST_TO_ADDR
// exit ;
34418: GO 34832
// end ; _chassis := AvailableChassisList ( factory ) ;
34420: LD_ADDR_VAR 0 9
34424: PUSH
34425: LD_VAR 0 1
34429: PPUSH
34430: CALL_OW 475
34434: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34435: LD_ADDR_VAR 0 11
34439: PUSH
34440: LD_VAR 0 1
34444: PPUSH
34445: CALL_OW 476
34449: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34450: LD_ADDR_VAR 0 12
34454: PUSH
34455: LD_VAR 0 1
34459: PPUSH
34460: CALL_OW 477
34464: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34465: LD_ADDR_VAR 0 10
34469: PUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 478
34479: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34480: LD_VAR 0 9
34484: NOT
34485: PUSH
34486: LD_VAR 0 11
34490: NOT
34491: OR
34492: PUSH
34493: LD_VAR 0 12
34497: NOT
34498: OR
34499: PUSH
34500: LD_VAR 0 10
34504: NOT
34505: OR
34506: IFFALSE 34541
// begin result := [ chassis , engine , control , weapon ] ;
34508: LD_ADDR_VAR 0 6
34512: PUSH
34513: LD_VAR 0 2
34517: PUSH
34518: LD_VAR 0 3
34522: PUSH
34523: LD_VAR 0 4
34527: PUSH
34528: LD_VAR 0 5
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: ST_TO_ADDR
// exit ;
34539: GO 34832
// end ; if not chassis in _chassis then
34541: LD_VAR 0 2
34545: PUSH
34546: LD_VAR 0 9
34550: IN
34551: NOT
34552: IFFALSE 34578
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34554: LD_ADDR_VAR 0 2
34558: PUSH
34559: LD_VAR 0 9
34563: PUSH
34564: LD_INT 1
34566: PPUSH
34567: LD_VAR 0 9
34571: PPUSH
34572: CALL_OW 12
34576: ARRAY
34577: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34578: LD_VAR 0 2
34582: PPUSH
34583: LD_VAR 0 3
34587: PPUSH
34588: CALL 34837 0 2
34592: NOT
34593: IFFALSE 34652
// repeat engine := _engine [ 1 ] ;
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_VAR 0 11
34604: PUSH
34605: LD_INT 1
34607: ARRAY
34608: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34609: LD_ADDR_VAR 0 11
34613: PUSH
34614: LD_VAR 0 11
34618: PPUSH
34619: LD_INT 1
34621: PPUSH
34622: CALL_OW 3
34626: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34627: LD_VAR 0 2
34631: PPUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: CALL 34837 0 2
34641: PUSH
34642: LD_VAR 0 11
34646: PUSH
34647: EMPTY
34648: EQUAL
34649: OR
34650: IFFALSE 34595
// if not control in _control then
34652: LD_VAR 0 4
34656: PUSH
34657: LD_VAR 0 12
34661: IN
34662: NOT
34663: IFFALSE 34689
// control := _control [ rand ( 1 , _control ) ] ;
34665: LD_ADDR_VAR 0 4
34669: PUSH
34670: LD_VAR 0 12
34674: PUSH
34675: LD_INT 1
34677: PPUSH
34678: LD_VAR 0 12
34682: PPUSH
34683: CALL_OW 12
34687: ARRAY
34688: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34689: LD_VAR 0 2
34693: PPUSH
34694: LD_VAR 0 5
34698: PPUSH
34699: CALL 35057 0 2
34703: NOT
34704: IFFALSE 34763
// repeat weapon := _weapon [ 1 ] ;
34706: LD_ADDR_VAR 0 5
34710: PUSH
34711: LD_VAR 0 10
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34720: LD_ADDR_VAR 0 10
34724: PUSH
34725: LD_VAR 0 10
34729: PPUSH
34730: LD_INT 1
34732: PPUSH
34733: CALL_OW 3
34737: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34738: LD_VAR 0 2
34742: PPUSH
34743: LD_VAR 0 5
34747: PPUSH
34748: CALL 35057 0 2
34752: PUSH
34753: LD_VAR 0 10
34757: PUSH
34758: EMPTY
34759: EQUAL
34760: OR
34761: IFFALSE 34706
// result := [ ] ;
34763: LD_ADDR_VAR 0 6
34767: PUSH
34768: EMPTY
34769: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34770: LD_VAR 0 1
34774: PPUSH
34775: LD_VAR 0 2
34779: PPUSH
34780: LD_VAR 0 3
34784: PPUSH
34785: LD_VAR 0 4
34789: PPUSH
34790: LD_VAR 0 5
34794: PPUSH
34795: CALL_OW 448
34799: IFFALSE 34832
// result := [ chassis , engine , control , weapon ] ;
34801: LD_ADDR_VAR 0 6
34805: PUSH
34806: LD_VAR 0 2
34810: PUSH
34811: LD_VAR 0 3
34815: PUSH
34816: LD_VAR 0 4
34820: PUSH
34821: LD_VAR 0 5
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: ST_TO_ADDR
// end ;
34832: LD_VAR 0 6
34836: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34837: LD_INT 0
34839: PPUSH
// if not chassis or not engine then
34840: LD_VAR 0 1
34844: NOT
34845: PUSH
34846: LD_VAR 0 2
34850: NOT
34851: OR
34852: IFFALSE 34856
// exit ;
34854: GO 35052
// case engine of engine_solar :
34856: LD_VAR 0 2
34860: PUSH
34861: LD_INT 2
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34869
34867: GO 34907
34869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_INT 11
34877: PUSH
34878: LD_INT 12
34880: PUSH
34881: LD_INT 13
34883: PUSH
34884: LD_INT 14
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: ST_TO_ADDR
34905: GO 35036
34907: LD_INT 1
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 34977
34915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34916: LD_ADDR_VAR 0 3
34920: PUSH
34921: LD_INT 11
34923: PUSH
34924: LD_INT 12
34926: PUSH
34927: LD_INT 13
34929: PUSH
34930: LD_INT 14
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: LD_INT 4
34944: PUSH
34945: LD_INT 5
34947: PUSH
34948: LD_INT 21
34950: PUSH
34951: LD_INT 23
34953: PUSH
34954: LD_INT 22
34956: PUSH
34957: LD_INT 24
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: ST_TO_ADDR
34975: GO 35036
34977: LD_INT 3
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 34985
34983: GO 35035
34985: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_INT 13
34993: PUSH
34994: LD_INT 14
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 5
35008: PUSH
35009: LD_INT 21
35011: PUSH
35012: LD_INT 22
35014: PUSH
35015: LD_INT 23
35017: PUSH
35018: LD_INT 24
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
35033: GO 35036
35035: POP
// result := ( chassis in result ) ;
35036: LD_ADDR_VAR 0 3
35040: PUSH
35041: LD_VAR 0 1
35045: PUSH
35046: LD_VAR 0 3
35050: IN
35051: ST_TO_ADDR
// end ;
35052: LD_VAR 0 3
35056: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35057: LD_INT 0
35059: PPUSH
// if not chassis or not weapon then
35060: LD_VAR 0 1
35064: NOT
35065: PUSH
35066: LD_VAR 0 2
35070: NOT
35071: OR
35072: IFFALSE 35076
// exit ;
35074: GO 36136
// case weapon of us_machine_gun :
35076: LD_VAR 0 2
35080: PUSH
35081: LD_INT 2
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35119
35089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: LD_INT 4
35106: PUSH
35107: LD_INT 5
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
35117: GO 36120
35119: LD_INT 3
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35157
35127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35128: LD_ADDR_VAR 0 3
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: LD_INT 3
35141: PUSH
35142: LD_INT 4
35144: PUSH
35145: LD_INT 5
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: ST_TO_ADDR
35155: GO 36120
35157: LD_INT 11
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35165
35163: GO 35195
35165: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 3
35179: PUSH
35180: LD_INT 4
35182: PUSH
35183: LD_INT 5
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: ST_TO_ADDR
35193: GO 36120
35195: LD_INT 4
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35229
35203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35204: LD_ADDR_VAR 0 3
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: LD_INT 3
35214: PUSH
35215: LD_INT 4
35217: PUSH
35218: LD_INT 5
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: ST_TO_ADDR
35227: GO 36120
35229: LD_INT 5
35231: DOUBLE
35232: EQUAL
35233: IFTRUE 35237
35235: GO 35263
35237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35238: LD_ADDR_VAR 0 3
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 3
35248: PUSH
35249: LD_INT 4
35251: PUSH
35252: LD_INT 5
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: ST_TO_ADDR
35261: GO 36120
35263: LD_INT 9
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35297
35271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35272: LD_ADDR_VAR 0 3
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 3
35282: PUSH
35283: LD_INT 4
35285: PUSH
35286: LD_INT 5
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: ST_TO_ADDR
35295: GO 36120
35297: LD_INT 7
35299: DOUBLE
35300: EQUAL
35301: IFTRUE 35305
35303: GO 35331
35305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35306: LD_ADDR_VAR 0 3
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: LD_INT 4
35319: PUSH
35320: LD_INT 5
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: ST_TO_ADDR
35329: GO 36120
35331: LD_INT 12
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35339
35337: GO 35365
35339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35340: LD_ADDR_VAR 0 3
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: LD_INT 3
35350: PUSH
35351: LD_INT 4
35353: PUSH
35354: LD_INT 5
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: ST_TO_ADDR
35363: GO 36120
35365: LD_INT 13
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35399
35373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35374: LD_ADDR_VAR 0 3
35378: PUSH
35379: LD_INT 2
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: LD_INT 4
35387: PUSH
35388: LD_INT 5
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: ST_TO_ADDR
35397: GO 36120
35399: LD_INT 14
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35425
35407: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_INT 4
35415: PUSH
35416: LD_INT 5
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: ST_TO_ADDR
35423: GO 36120
35425: LD_INT 6
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35451
35433: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: ST_TO_ADDR
35449: GO 36120
35451: LD_INT 10
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35459
35457: GO 35477
35459: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35460: LD_ADDR_VAR 0 3
35464: PUSH
35465: LD_INT 4
35467: PUSH
35468: LD_INT 5
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: ST_TO_ADDR
35475: GO 36120
35477: LD_INT 22
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35485
35483: GO 35511
35485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35486: LD_ADDR_VAR 0 3
35490: PUSH
35491: LD_INT 11
35493: PUSH
35494: LD_INT 12
35496: PUSH
35497: LD_INT 13
35499: PUSH
35500: LD_INT 14
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: ST_TO_ADDR
35509: GO 36120
35511: LD_INT 23
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35519
35517: GO 35545
35519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35520: LD_ADDR_VAR 0 3
35524: PUSH
35525: LD_INT 11
35527: PUSH
35528: LD_INT 12
35530: PUSH
35531: LD_INT 13
35533: PUSH
35534: LD_INT 14
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: ST_TO_ADDR
35543: GO 36120
35545: LD_INT 24
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35553
35551: GO 35579
35553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35554: LD_ADDR_VAR 0 3
35558: PUSH
35559: LD_INT 11
35561: PUSH
35562: LD_INT 12
35564: PUSH
35565: LD_INT 13
35567: PUSH
35568: LD_INT 14
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
35577: GO 36120
35579: LD_INT 30
35581: DOUBLE
35582: EQUAL
35583: IFTRUE 35587
35585: GO 35613
35587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35588: LD_ADDR_VAR 0 3
35592: PUSH
35593: LD_INT 11
35595: PUSH
35596: LD_INT 12
35598: PUSH
35599: LD_INT 13
35601: PUSH
35602: LD_INT 14
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: ST_TO_ADDR
35611: GO 36120
35613: LD_INT 25
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35621
35619: GO 35639
35621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35622: LD_ADDR_VAR 0 3
35626: PUSH
35627: LD_INT 13
35629: PUSH
35630: LD_INT 14
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: ST_TO_ADDR
35637: GO 36120
35639: LD_INT 27
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35647
35645: GO 35665
35647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35648: LD_ADDR_VAR 0 3
35652: PUSH
35653: LD_INT 13
35655: PUSH
35656: LD_INT 14
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: ST_TO_ADDR
35663: GO 36120
35665: LD_INT 92
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35699
35673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 11
35681: PUSH
35682: LD_INT 12
35684: PUSH
35685: LD_INT 13
35687: PUSH
35688: LD_INT 14
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
35697: GO 36120
35699: LD_INT 28
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35725
35707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_INT 13
35715: PUSH
35716: LD_INT 14
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: ST_TO_ADDR
35723: GO 36120
35725: LD_INT 29
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35733
35731: GO 35751
35733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_INT 13
35741: PUSH
35742: LD_INT 14
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: ST_TO_ADDR
35749: GO 36120
35751: LD_INT 31
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35759
35757: GO 35777
35759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_INT 13
35767: PUSH
35768: LD_INT 14
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: ST_TO_ADDR
35775: GO 36120
35777: LD_INT 26
35779: DOUBLE
35780: EQUAL
35781: IFTRUE 35785
35783: GO 35803
35785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_INT 13
35793: PUSH
35794: LD_INT 14
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: ST_TO_ADDR
35801: GO 36120
35803: LD_INT 42
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35811
35809: GO 35837
35811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35812: LD_ADDR_VAR 0 3
35816: PUSH
35817: LD_INT 21
35819: PUSH
35820: LD_INT 22
35822: PUSH
35823: LD_INT 23
35825: PUSH
35826: LD_INT 24
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
35835: GO 36120
35837: LD_INT 43
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35845
35843: GO 35871
35845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35846: LD_ADDR_VAR 0 3
35850: PUSH
35851: LD_INT 21
35853: PUSH
35854: LD_INT 22
35856: PUSH
35857: LD_INT 23
35859: PUSH
35860: LD_INT 24
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
35869: GO 36120
35871: LD_INT 44
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35905
35879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35880: LD_ADDR_VAR 0 3
35884: PUSH
35885: LD_INT 21
35887: PUSH
35888: LD_INT 22
35890: PUSH
35891: LD_INT 23
35893: PUSH
35894: LD_INT 24
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: ST_TO_ADDR
35903: GO 36120
35905: LD_INT 45
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35913
35911: GO 35939
35913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35914: LD_ADDR_VAR 0 3
35918: PUSH
35919: LD_INT 21
35921: PUSH
35922: LD_INT 22
35924: PUSH
35925: LD_INT 23
35927: PUSH
35928: LD_INT 24
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
35937: GO 36120
35939: LD_INT 49
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35947
35945: GO 35973
35947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35948: LD_ADDR_VAR 0 3
35952: PUSH
35953: LD_INT 21
35955: PUSH
35956: LD_INT 22
35958: PUSH
35959: LD_INT 23
35961: PUSH
35962: LD_INT 24
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
35971: GO 36120
35973: LD_INT 51
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35981
35979: GO 36007
35981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_INT 21
35989: PUSH
35990: LD_INT 22
35992: PUSH
35993: LD_INT 23
35995: PUSH
35996: LD_INT 24
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: ST_TO_ADDR
36005: GO 36120
36007: LD_INT 52
36009: DOUBLE
36010: EQUAL
36011: IFTRUE 36015
36013: GO 36041
36015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36016: LD_ADDR_VAR 0 3
36020: PUSH
36021: LD_INT 21
36023: PUSH
36024: LD_INT 22
36026: PUSH
36027: LD_INT 23
36029: PUSH
36030: LD_INT 24
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
36039: GO 36120
36041: LD_INT 53
36043: DOUBLE
36044: EQUAL
36045: IFTRUE 36049
36047: GO 36067
36049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36050: LD_ADDR_VAR 0 3
36054: PUSH
36055: LD_INT 23
36057: PUSH
36058: LD_INT 24
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: ST_TO_ADDR
36065: GO 36120
36067: LD_INT 46
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36093
36075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_INT 23
36083: PUSH
36084: LD_INT 24
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: ST_TO_ADDR
36091: GO 36120
36093: LD_INT 47
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36101
36099: GO 36119
36101: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36102: LD_ADDR_VAR 0 3
36106: PUSH
36107: LD_INT 23
36109: PUSH
36110: LD_INT 24
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: ST_TO_ADDR
36117: GO 36120
36119: POP
// result := ( chassis in result ) ;
36120: LD_ADDR_VAR 0 3
36124: PUSH
36125: LD_VAR 0 1
36129: PUSH
36130: LD_VAR 0 3
36134: IN
36135: ST_TO_ADDR
// end ;
36136: LD_VAR 0 3
36140: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36141: LD_INT 0
36143: PPUSH
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
// result := array ;
36150: LD_ADDR_VAR 0 5
36154: PUSH
36155: LD_VAR 0 1
36159: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36160: LD_VAR 0 1
36164: NOT
36165: PUSH
36166: LD_VAR 0 2
36170: NOT
36171: OR
36172: PUSH
36173: LD_VAR 0 3
36177: NOT
36178: OR
36179: PUSH
36180: LD_VAR 0 2
36184: PUSH
36185: LD_VAR 0 1
36189: GREATER
36190: OR
36191: PUSH
36192: LD_VAR 0 3
36196: PUSH
36197: LD_VAR 0 1
36201: GREATER
36202: OR
36203: IFFALSE 36207
// exit ;
36205: GO 36503
// if direction then
36207: LD_VAR 0 4
36211: IFFALSE 36275
// begin d := 1 ;
36213: LD_ADDR_VAR 0 9
36217: PUSH
36218: LD_INT 1
36220: ST_TO_ADDR
// if i_from > i_to then
36221: LD_VAR 0 2
36225: PUSH
36226: LD_VAR 0 3
36230: GREATER
36231: IFFALSE 36257
// length := ( array - i_from ) + i_to else
36233: LD_ADDR_VAR 0 11
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: LD_VAR 0 2
36247: MINUS
36248: PUSH
36249: LD_VAR 0 3
36253: PLUS
36254: ST_TO_ADDR
36255: GO 36273
// length := i_to - i_from ;
36257: LD_ADDR_VAR 0 11
36261: PUSH
36262: LD_VAR 0 3
36266: PUSH
36267: LD_VAR 0 2
36271: MINUS
36272: ST_TO_ADDR
// end else
36273: GO 36336
// begin d := - 1 ;
36275: LD_ADDR_VAR 0 9
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: ST_TO_ADDR
// if i_from > i_to then
36284: LD_VAR 0 2
36288: PUSH
36289: LD_VAR 0 3
36293: GREATER
36294: IFFALSE 36314
// length := i_from - i_to else
36296: LD_ADDR_VAR 0 11
36300: PUSH
36301: LD_VAR 0 2
36305: PUSH
36306: LD_VAR 0 3
36310: MINUS
36311: ST_TO_ADDR
36312: GO 36336
// length := ( array - i_to ) + i_from ;
36314: LD_ADDR_VAR 0 11
36318: PUSH
36319: LD_VAR 0 1
36323: PUSH
36324: LD_VAR 0 3
36328: MINUS
36329: PUSH
36330: LD_VAR 0 2
36334: PLUS
36335: ST_TO_ADDR
// end ; if not length then
36336: LD_VAR 0 11
36340: NOT
36341: IFFALSE 36345
// exit ;
36343: GO 36503
// tmp := array ;
36345: LD_ADDR_VAR 0 10
36349: PUSH
36350: LD_VAR 0 1
36354: ST_TO_ADDR
// for i = 1 to length do
36355: LD_ADDR_VAR 0 6
36359: PUSH
36360: DOUBLE
36361: LD_INT 1
36363: DEC
36364: ST_TO_ADDR
36365: LD_VAR 0 11
36369: PUSH
36370: FOR_TO
36371: IFFALSE 36491
// begin for j = 1 to array do
36373: LD_ADDR_VAR 0 7
36377: PUSH
36378: DOUBLE
36379: LD_INT 1
36381: DEC
36382: ST_TO_ADDR
36383: LD_VAR 0 1
36387: PUSH
36388: FOR_TO
36389: IFFALSE 36477
// begin k := j + d ;
36391: LD_ADDR_VAR 0 8
36395: PUSH
36396: LD_VAR 0 7
36400: PUSH
36401: LD_VAR 0 9
36405: PLUS
36406: ST_TO_ADDR
// if k > array then
36407: LD_VAR 0 8
36411: PUSH
36412: LD_VAR 0 1
36416: GREATER
36417: IFFALSE 36427
// k := 1 ;
36419: LD_ADDR_VAR 0 8
36423: PUSH
36424: LD_INT 1
36426: ST_TO_ADDR
// if not k then
36427: LD_VAR 0 8
36431: NOT
36432: IFFALSE 36444
// k := array ;
36434: LD_ADDR_VAR 0 8
36438: PUSH
36439: LD_VAR 0 1
36443: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36444: LD_ADDR_VAR 0 10
36448: PUSH
36449: LD_VAR 0 10
36453: PPUSH
36454: LD_VAR 0 8
36458: PPUSH
36459: LD_VAR 0 1
36463: PUSH
36464: LD_VAR 0 7
36468: ARRAY
36469: PPUSH
36470: CALL_OW 1
36474: ST_TO_ADDR
// end ;
36475: GO 36388
36477: POP
36478: POP
// array := tmp ;
36479: LD_ADDR_VAR 0 1
36483: PUSH
36484: LD_VAR 0 10
36488: ST_TO_ADDR
// end ;
36489: GO 36370
36491: POP
36492: POP
// result := array ;
36493: LD_ADDR_VAR 0 5
36497: PUSH
36498: LD_VAR 0 1
36502: ST_TO_ADDR
// end ;
36503: LD_VAR 0 5
36507: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36508: LD_INT 0
36510: PPUSH
36511: PPUSH
// result := 0 ;
36512: LD_ADDR_VAR 0 3
36516: PUSH
36517: LD_INT 0
36519: ST_TO_ADDR
// if not array or not value in array then
36520: LD_VAR 0 1
36524: NOT
36525: PUSH
36526: LD_VAR 0 2
36530: PUSH
36531: LD_VAR 0 1
36535: IN
36536: NOT
36537: OR
36538: IFFALSE 36542
// exit ;
36540: GO 36596
// for i = 1 to array do
36542: LD_ADDR_VAR 0 4
36546: PUSH
36547: DOUBLE
36548: LD_INT 1
36550: DEC
36551: ST_TO_ADDR
36552: LD_VAR 0 1
36556: PUSH
36557: FOR_TO
36558: IFFALSE 36594
// if value = array [ i ] then
36560: LD_VAR 0 2
36564: PUSH
36565: LD_VAR 0 1
36569: PUSH
36570: LD_VAR 0 4
36574: ARRAY
36575: EQUAL
36576: IFFALSE 36592
// begin result := i ;
36578: LD_ADDR_VAR 0 3
36582: PUSH
36583: LD_VAR 0 4
36587: ST_TO_ADDR
// exit ;
36588: POP
36589: POP
36590: GO 36596
// end ;
36592: GO 36557
36594: POP
36595: POP
// end ;
36596: LD_VAR 0 3
36600: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36601: LD_INT 0
36603: PPUSH
// vc_chassis := chassis ;
36604: LD_ADDR_OWVAR 37
36608: PUSH
36609: LD_VAR 0 1
36613: ST_TO_ADDR
// vc_engine := engine ;
36614: LD_ADDR_OWVAR 39
36618: PUSH
36619: LD_VAR 0 2
36623: ST_TO_ADDR
// vc_control := control ;
36624: LD_ADDR_OWVAR 38
36628: PUSH
36629: LD_VAR 0 3
36633: ST_TO_ADDR
// vc_weapon := weapon ;
36634: LD_ADDR_OWVAR 40
36638: PUSH
36639: LD_VAR 0 4
36643: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36644: LD_ADDR_OWVAR 41
36648: PUSH
36649: LD_VAR 0 5
36653: ST_TO_ADDR
// end ;
36654: LD_VAR 0 6
36658: RET
// export function WantPlant ( unit ) ; var task ; begin
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
// result := false ;
36663: LD_ADDR_VAR 0 2
36667: PUSH
36668: LD_INT 0
36670: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36671: LD_ADDR_VAR 0 3
36675: PUSH
36676: LD_VAR 0 1
36680: PPUSH
36681: CALL_OW 437
36685: ST_TO_ADDR
// if task then
36686: LD_VAR 0 3
36690: IFFALSE 36718
// if task [ 1 ] [ 1 ] = p then
36692: LD_VAR 0 3
36696: PUSH
36697: LD_INT 1
36699: ARRAY
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: PUSH
36705: LD_STRING p
36707: EQUAL
36708: IFFALSE 36718
// result := true ;
36710: LD_ADDR_VAR 0 2
36714: PUSH
36715: LD_INT 1
36717: ST_TO_ADDR
// end ;
36718: LD_VAR 0 2
36722: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36723: LD_INT 0
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
// if pos < 1 then
36729: LD_VAR 0 2
36733: PUSH
36734: LD_INT 1
36736: LESS
36737: IFFALSE 36741
// exit ;
36739: GO 37044
// if pos = 1 then
36741: LD_VAR 0 2
36745: PUSH
36746: LD_INT 1
36748: EQUAL
36749: IFFALSE 36782
// result := Replace ( arr , pos [ 1 ] , value ) else
36751: LD_ADDR_VAR 0 4
36755: PUSH
36756: LD_VAR 0 1
36760: PPUSH
36761: LD_VAR 0 2
36765: PUSH
36766: LD_INT 1
36768: ARRAY
36769: PPUSH
36770: LD_VAR 0 3
36774: PPUSH
36775: CALL_OW 1
36779: ST_TO_ADDR
36780: GO 37044
// begin tmp := arr ;
36782: LD_ADDR_VAR 0 6
36786: PUSH
36787: LD_VAR 0 1
36791: ST_TO_ADDR
// s_arr := [ tmp ] ;
36792: LD_ADDR_VAR 0 7
36796: PUSH
36797: LD_VAR 0 6
36801: PUSH
36802: EMPTY
36803: LIST
36804: ST_TO_ADDR
// for i = 1 to pos - 1 do
36805: LD_ADDR_VAR 0 5
36809: PUSH
36810: DOUBLE
36811: LD_INT 1
36813: DEC
36814: ST_TO_ADDR
36815: LD_VAR 0 2
36819: PUSH
36820: LD_INT 1
36822: MINUS
36823: PUSH
36824: FOR_TO
36825: IFFALSE 36870
// begin tmp := tmp [ pos [ i ] ] ;
36827: LD_ADDR_VAR 0 6
36831: PUSH
36832: LD_VAR 0 6
36836: PUSH
36837: LD_VAR 0 2
36841: PUSH
36842: LD_VAR 0 5
36846: ARRAY
36847: ARRAY
36848: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36849: LD_ADDR_VAR 0 7
36853: PUSH
36854: LD_VAR 0 7
36858: PUSH
36859: LD_VAR 0 6
36863: PUSH
36864: EMPTY
36865: LIST
36866: ADD
36867: ST_TO_ADDR
// end ;
36868: GO 36824
36870: POP
36871: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36872: LD_ADDR_VAR 0 6
36876: PUSH
36877: LD_VAR 0 6
36881: PPUSH
36882: LD_VAR 0 2
36886: PUSH
36887: LD_VAR 0 2
36891: ARRAY
36892: PPUSH
36893: LD_VAR 0 3
36897: PPUSH
36898: CALL_OW 1
36902: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36903: LD_ADDR_VAR 0 7
36907: PUSH
36908: LD_VAR 0 7
36912: PPUSH
36913: LD_VAR 0 7
36917: PPUSH
36918: LD_VAR 0 6
36922: PPUSH
36923: CALL_OW 1
36927: ST_TO_ADDR
// for i = s_arr downto 2 do
36928: LD_ADDR_VAR 0 5
36932: PUSH
36933: DOUBLE
36934: LD_VAR 0 7
36938: INC
36939: ST_TO_ADDR
36940: LD_INT 2
36942: PUSH
36943: FOR_DOWNTO
36944: IFFALSE 37028
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36946: LD_ADDR_VAR 0 6
36950: PUSH
36951: LD_VAR 0 7
36955: PUSH
36956: LD_VAR 0 5
36960: PUSH
36961: LD_INT 1
36963: MINUS
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 2
36970: PUSH
36971: LD_VAR 0 5
36975: PUSH
36976: LD_INT 1
36978: MINUS
36979: ARRAY
36980: PPUSH
36981: LD_VAR 0 7
36985: PUSH
36986: LD_VAR 0 5
36990: ARRAY
36991: PPUSH
36992: CALL_OW 1
36996: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36997: LD_ADDR_VAR 0 7
37001: PUSH
37002: LD_VAR 0 7
37006: PPUSH
37007: LD_VAR 0 5
37011: PUSH
37012: LD_INT 1
37014: MINUS
37015: PPUSH
37016: LD_VAR 0 6
37020: PPUSH
37021: CALL_OW 1
37025: ST_TO_ADDR
// end ;
37026: GO 36943
37028: POP
37029: POP
// result := s_arr [ 1 ] ;
37030: LD_ADDR_VAR 0 4
37034: PUSH
37035: LD_VAR 0 7
37039: PUSH
37040: LD_INT 1
37042: ARRAY
37043: ST_TO_ADDR
// end ; end ;
37044: LD_VAR 0 4
37048: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37049: LD_INT 0
37051: PPUSH
37052: PPUSH
// if not list then
37053: LD_VAR 0 1
37057: NOT
37058: IFFALSE 37062
// exit ;
37060: GO 37153
// i := list [ pos1 ] ;
37062: LD_ADDR_VAR 0 5
37066: PUSH
37067: LD_VAR 0 1
37071: PUSH
37072: LD_VAR 0 2
37076: ARRAY
37077: ST_TO_ADDR
// if not i then
37078: LD_VAR 0 5
37082: NOT
37083: IFFALSE 37087
// exit ;
37085: GO 37153
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37087: LD_ADDR_VAR 0 1
37091: PUSH
37092: LD_VAR 0 1
37096: PPUSH
37097: LD_VAR 0 2
37101: PPUSH
37102: LD_VAR 0 1
37106: PUSH
37107: LD_VAR 0 3
37111: ARRAY
37112: PPUSH
37113: CALL_OW 1
37117: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37118: LD_ADDR_VAR 0 1
37122: PUSH
37123: LD_VAR 0 1
37127: PPUSH
37128: LD_VAR 0 3
37132: PPUSH
37133: LD_VAR 0 5
37137: PPUSH
37138: CALL_OW 1
37142: ST_TO_ADDR
// result := list ;
37143: LD_ADDR_VAR 0 4
37147: PUSH
37148: LD_VAR 0 1
37152: ST_TO_ADDR
// end ;
37153: LD_VAR 0 4
37157: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37158: LD_INT 0
37160: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37161: LD_ADDR_VAR 0 5
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 250
37175: PPUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 251
37185: PPUSH
37186: LD_VAR 0 2
37190: PPUSH
37191: LD_VAR 0 3
37195: PPUSH
37196: LD_VAR 0 4
37200: PPUSH
37201: CALL 37579 0 5
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 5
37210: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
// if not list or not unit then
37217: LD_VAR 0 2
37221: NOT
37222: PUSH
37223: LD_VAR 0 1
37227: NOT
37228: OR
37229: IFFALSE 37233
// exit ;
37231: GO 37574
// result := [ ] ;
37233: LD_ADDR_VAR 0 5
37237: PUSH
37238: EMPTY
37239: ST_TO_ADDR
// for i in list do
37240: LD_ADDR_VAR 0 6
37244: PUSH
37245: LD_VAR 0 2
37249: PUSH
37250: FOR_IN
37251: IFFALSE 37469
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37253: LD_ADDR_VAR 0 8
37257: PUSH
37258: LD_VAR 0 1
37262: PPUSH
37263: LD_VAR 0 6
37267: PUSH
37268: LD_INT 1
37270: ARRAY
37271: PPUSH
37272: LD_VAR 0 6
37276: PUSH
37277: LD_INT 2
37279: ARRAY
37280: PPUSH
37281: CALL_OW 297
37285: ST_TO_ADDR
// if not Count ( result ) then
37286: LD_VAR 0 5
37290: PPUSH
37291: CALL 33863 0 1
37295: NOT
37296: IFFALSE 37329
// begin result := Join ( result , [ i , tmp ] ) ;
37298: LD_ADDR_VAR 0 5
37302: PUSH
37303: LD_VAR 0 5
37307: PPUSH
37308: LD_VAR 0 6
37312: PUSH
37313: LD_VAR 0 8
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PPUSH
37322: CALL 69452 0 2
37326: ST_TO_ADDR
// continue ;
37327: GO 37250
// end ; if result [ result ] [ 2 ] <= tmp then
37329: LD_VAR 0 5
37333: PUSH
37334: LD_VAR 0 5
37338: ARRAY
37339: PUSH
37340: LD_INT 2
37342: ARRAY
37343: PUSH
37344: LD_VAR 0 8
37348: LESSEQUAL
37349: IFFALSE 37382
// result := Join ( result , [ i , tmp ] ) else
37351: LD_ADDR_VAR 0 5
37355: PUSH
37356: LD_VAR 0 5
37360: PPUSH
37361: LD_VAR 0 6
37365: PUSH
37366: LD_VAR 0 8
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PPUSH
37375: CALL 69452 0 2
37379: ST_TO_ADDR
37380: GO 37467
// begin for j := 1 to Count ( result ) do
37382: LD_ADDR_VAR 0 7
37386: PUSH
37387: DOUBLE
37388: LD_INT 1
37390: DEC
37391: ST_TO_ADDR
37392: LD_VAR 0 5
37396: PPUSH
37397: CALL 33863 0 1
37401: PUSH
37402: FOR_TO
37403: IFFALSE 37465
// begin if tmp < result [ j ] [ 2 ] then
37405: LD_VAR 0 8
37409: PUSH
37410: LD_VAR 0 5
37414: PUSH
37415: LD_VAR 0 7
37419: ARRAY
37420: PUSH
37421: LD_INT 2
37423: ARRAY
37424: LESS
37425: IFFALSE 37463
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_VAR 0 5
37436: PPUSH
37437: LD_VAR 0 7
37441: PPUSH
37442: LD_VAR 0 6
37446: PUSH
37447: LD_VAR 0 8
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 2
37460: ST_TO_ADDR
// break ;
37461: GO 37465
// end ; end ;
37463: GO 37402
37465: POP
37466: POP
// end ; end ;
37467: GO 37250
37469: POP
37470: POP
// if result and not asc then
37471: LD_VAR 0 5
37475: PUSH
37476: LD_VAR 0 3
37480: NOT
37481: AND
37482: IFFALSE 37499
// result := ReverseArray ( result ) ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_VAR 0 5
37493: PPUSH
37494: CALL 64739 0 1
37498: ST_TO_ADDR
// tmp := [ ] ;
37499: LD_ADDR_VAR 0 8
37503: PUSH
37504: EMPTY
37505: ST_TO_ADDR
// if mode then
37506: LD_VAR 0 4
37510: IFFALSE 37574
// begin for i := 1 to result do
37512: LD_ADDR_VAR 0 6
37516: PUSH
37517: DOUBLE
37518: LD_INT 1
37520: DEC
37521: ST_TO_ADDR
37522: LD_VAR 0 5
37526: PUSH
37527: FOR_TO
37528: IFFALSE 37562
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37530: LD_ADDR_VAR 0 8
37534: PUSH
37535: LD_VAR 0 8
37539: PPUSH
37540: LD_VAR 0 5
37544: PUSH
37545: LD_VAR 0 6
37549: ARRAY
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: PPUSH
37555: CALL 69452 0 2
37559: ST_TO_ADDR
37560: GO 37527
37562: POP
37563: POP
// result := tmp ;
37564: LD_ADDR_VAR 0 5
37568: PUSH
37569: LD_VAR 0 8
37573: ST_TO_ADDR
// end ; end ;
37574: LD_VAR 0 5
37578: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
// if not list then
37585: LD_VAR 0 3
37589: NOT
37590: IFFALSE 37594
// exit ;
37592: GO 37982
// result := [ ] ;
37594: LD_ADDR_VAR 0 6
37598: PUSH
37599: EMPTY
37600: ST_TO_ADDR
// for i in list do
37601: LD_ADDR_VAR 0 7
37605: PUSH
37606: LD_VAR 0 3
37610: PUSH
37611: FOR_IN
37612: IFFALSE 37814
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37614: LD_ADDR_VAR 0 9
37618: PUSH
37619: LD_VAR 0 7
37623: PPUSH
37624: LD_VAR 0 1
37628: PPUSH
37629: LD_VAR 0 2
37633: PPUSH
37634: CALL_OW 297
37638: ST_TO_ADDR
// if not result then
37639: LD_VAR 0 6
37643: NOT
37644: IFFALSE 37670
// result := [ [ i , tmp ] ] else
37646: LD_ADDR_VAR 0 6
37650: PUSH
37651: LD_VAR 0 7
37655: PUSH
37656: LD_VAR 0 9
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: EMPTY
37666: LIST
37667: ST_TO_ADDR
37668: GO 37812
// begin if result [ result ] [ 2 ] < tmp then
37670: LD_VAR 0 6
37674: PUSH
37675: LD_VAR 0 6
37679: ARRAY
37680: PUSH
37681: LD_INT 2
37683: ARRAY
37684: PUSH
37685: LD_VAR 0 9
37689: LESS
37690: IFFALSE 37732
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37692: LD_ADDR_VAR 0 6
37696: PUSH
37697: LD_VAR 0 6
37701: PPUSH
37702: LD_VAR 0 6
37706: PUSH
37707: LD_INT 1
37709: PLUS
37710: PPUSH
37711: LD_VAR 0 7
37715: PUSH
37716: LD_VAR 0 9
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PPUSH
37725: CALL_OW 2
37729: ST_TO_ADDR
37730: GO 37812
// for j = 1 to result do
37732: LD_ADDR_VAR 0 8
37736: PUSH
37737: DOUBLE
37738: LD_INT 1
37740: DEC
37741: ST_TO_ADDR
37742: LD_VAR 0 6
37746: PUSH
37747: FOR_TO
37748: IFFALSE 37810
// begin if tmp < result [ j ] [ 2 ] then
37750: LD_VAR 0 9
37754: PUSH
37755: LD_VAR 0 6
37759: PUSH
37760: LD_VAR 0 8
37764: ARRAY
37765: PUSH
37766: LD_INT 2
37768: ARRAY
37769: LESS
37770: IFFALSE 37808
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37772: LD_ADDR_VAR 0 6
37776: PUSH
37777: LD_VAR 0 6
37781: PPUSH
37782: LD_VAR 0 8
37786: PPUSH
37787: LD_VAR 0 7
37791: PUSH
37792: LD_VAR 0 9
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PPUSH
37801: CALL_OW 2
37805: ST_TO_ADDR
// break ;
37806: GO 37810
// end ; end ;
37808: GO 37747
37810: POP
37811: POP
// end ; end ;
37812: GO 37611
37814: POP
37815: POP
// if result and not asc then
37816: LD_VAR 0 6
37820: PUSH
37821: LD_VAR 0 4
37825: NOT
37826: AND
37827: IFFALSE 37902
// begin tmp := result ;
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_VAR 0 6
37838: ST_TO_ADDR
// for i = tmp downto 1 do
37839: LD_ADDR_VAR 0 7
37843: PUSH
37844: DOUBLE
37845: LD_VAR 0 9
37849: INC
37850: ST_TO_ADDR
37851: LD_INT 1
37853: PUSH
37854: FOR_DOWNTO
37855: IFFALSE 37900
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37857: LD_ADDR_VAR 0 6
37861: PUSH
37862: LD_VAR 0 6
37866: PPUSH
37867: LD_VAR 0 9
37871: PUSH
37872: LD_VAR 0 7
37876: MINUS
37877: PUSH
37878: LD_INT 1
37880: PLUS
37881: PPUSH
37882: LD_VAR 0 9
37886: PUSH
37887: LD_VAR 0 7
37891: ARRAY
37892: PPUSH
37893: CALL_OW 1
37897: ST_TO_ADDR
37898: GO 37854
37900: POP
37901: POP
// end ; tmp := [ ] ;
37902: LD_ADDR_VAR 0 9
37906: PUSH
37907: EMPTY
37908: ST_TO_ADDR
// if mode then
37909: LD_VAR 0 5
37913: IFFALSE 37982
// begin for i = 1 to result do
37915: LD_ADDR_VAR 0 7
37919: PUSH
37920: DOUBLE
37921: LD_INT 1
37923: DEC
37924: ST_TO_ADDR
37925: LD_VAR 0 6
37929: PUSH
37930: FOR_TO
37931: IFFALSE 37970
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37933: LD_ADDR_VAR 0 9
37937: PUSH
37938: LD_VAR 0 9
37942: PPUSH
37943: LD_VAR 0 7
37947: PPUSH
37948: LD_VAR 0 6
37952: PUSH
37953: LD_VAR 0 7
37957: ARRAY
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PPUSH
37963: CALL_OW 1
37967: ST_TO_ADDR
37968: GO 37930
37970: POP
37971: POP
// result := tmp ;
37972: LD_ADDR_VAR 0 6
37976: PUSH
37977: LD_VAR 0 9
37981: ST_TO_ADDR
// end ; end ;
37982: LD_VAR 0 6
37986: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37987: LD_INT 0
37989: PPUSH
37990: PPUSH
37991: PPUSH
37992: PPUSH
37993: PPUSH
37994: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37995: LD_ADDR_VAR 0 5
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// if not x or not y then
38017: LD_VAR 0 2
38021: NOT
38022: PUSH
38023: LD_VAR 0 3
38027: NOT
38028: OR
38029: IFFALSE 38033
// exit ;
38031: GO 39683
// if not range then
38033: LD_VAR 0 4
38037: NOT
38038: IFFALSE 38048
// range := 10 ;
38040: LD_ADDR_VAR 0 4
38044: PUSH
38045: LD_INT 10
38047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38048: LD_ADDR_VAR 0 8
38052: PUSH
38053: LD_INT 81
38055: PUSH
38056: LD_VAR 0 1
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 92
38067: PUSH
38068: LD_VAR 0 2
38072: PUSH
38073: LD_VAR 0 3
38077: PUSH
38078: LD_VAR 0 4
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 3
38091: PUSH
38092: LD_INT 21
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 69
38115: ST_TO_ADDR
// if not tmp then
38116: LD_VAR 0 8
38120: NOT
38121: IFFALSE 38125
// exit ;
38123: GO 39683
// for i in tmp do
38125: LD_ADDR_VAR 0 6
38129: PUSH
38130: LD_VAR 0 8
38134: PUSH
38135: FOR_IN
38136: IFFALSE 39658
// begin points := [ 0 , 0 , 0 ] ;
38138: LD_ADDR_VAR 0 9
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: ST_TO_ADDR
// bpoints := 1 ;
38157: LD_ADDR_VAR 0 10
38161: PUSH
38162: LD_INT 1
38164: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38165: LD_VAR 0 6
38169: PPUSH
38170: CALL_OW 247
38174: PUSH
38175: LD_INT 1
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38761
38183: POP
// begin if GetClass ( i ) = 1 then
38184: LD_VAR 0 6
38188: PPUSH
38189: CALL_OW 257
38193: PUSH
38194: LD_INT 1
38196: EQUAL
38197: IFFALSE 38218
// points := [ 10 , 5 , 3 ] ;
38199: LD_ADDR_VAR 0 9
38203: PUSH
38204: LD_INT 10
38206: PUSH
38207: LD_INT 5
38209: PUSH
38210: LD_INT 3
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38218: LD_VAR 0 6
38222: PPUSH
38223: CALL_OW 257
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: LD_INT 4
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: IN
38242: IFFALSE 38263
// points := [ 3 , 2 , 1 ] ;
38244: LD_ADDR_VAR 0 9
38248: PUSH
38249: LD_INT 3
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38263: LD_VAR 0 6
38267: PPUSH
38268: CALL_OW 257
38272: PUSH
38273: LD_INT 5
38275: EQUAL
38276: IFFALSE 38297
// points := [ 130 , 5 , 2 ] ;
38278: LD_ADDR_VAR 0 9
38282: PUSH
38283: LD_INT 130
38285: PUSH
38286: LD_INT 5
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38297: LD_VAR 0 6
38301: PPUSH
38302: CALL_OW 257
38306: PUSH
38307: LD_INT 8
38309: EQUAL
38310: IFFALSE 38331
// points := [ 35 , 35 , 30 ] ;
38312: LD_ADDR_VAR 0 9
38316: PUSH
38317: LD_INT 35
38319: PUSH
38320: LD_INT 35
38322: PUSH
38323: LD_INT 30
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38331: LD_VAR 0 6
38335: PPUSH
38336: CALL_OW 257
38340: PUSH
38341: LD_INT 9
38343: EQUAL
38344: IFFALSE 38365
// points := [ 20 , 55 , 40 ] ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_INT 20
38353: PUSH
38354: LD_INT 55
38356: PUSH
38357: LD_INT 40
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 257
38374: PUSH
38375: LD_INT 12
38377: PUSH
38378: LD_INT 16
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: IN
38385: IFFALSE 38406
// points := [ 5 , 3 , 2 ] ;
38387: LD_ADDR_VAR 0 9
38391: PUSH
38392: LD_INT 5
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38406: LD_VAR 0 6
38410: PPUSH
38411: CALL_OW 257
38415: PUSH
38416: LD_INT 17
38418: EQUAL
38419: IFFALSE 38440
// points := [ 100 , 50 , 75 ] ;
38421: LD_ADDR_VAR 0 9
38425: PUSH
38426: LD_INT 100
38428: PUSH
38429: LD_INT 50
38431: PUSH
38432: LD_INT 75
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38440: LD_VAR 0 6
38444: PPUSH
38445: CALL_OW 257
38449: PUSH
38450: LD_INT 15
38452: EQUAL
38453: IFFALSE 38474
// points := [ 10 , 5 , 3 ] ;
38455: LD_ADDR_VAR 0 9
38459: PUSH
38460: LD_INT 10
38462: PUSH
38463: LD_INT 5
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38474: LD_VAR 0 6
38478: PPUSH
38479: CALL_OW 257
38483: PUSH
38484: LD_INT 14
38486: EQUAL
38487: IFFALSE 38508
// points := [ 10 , 0 , 0 ] ;
38489: LD_ADDR_VAR 0 9
38493: PUSH
38494: LD_INT 10
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38508: LD_VAR 0 6
38512: PPUSH
38513: CALL_OW 257
38517: PUSH
38518: LD_INT 11
38520: EQUAL
38521: IFFALSE 38542
// points := [ 30 , 10 , 5 ] ;
38523: LD_ADDR_VAR 0 9
38527: PUSH
38528: LD_INT 30
38530: PUSH
38531: LD_INT 10
38533: PUSH
38534: LD_INT 5
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38542: LD_VAR 0 1
38546: PPUSH
38547: LD_INT 5
38549: PPUSH
38550: CALL_OW 321
38554: PUSH
38555: LD_INT 2
38557: EQUAL
38558: IFFALSE 38575
// bpoints := bpoints * 1.8 ;
38560: LD_ADDR_VAR 0 10
38564: PUSH
38565: LD_VAR 0 10
38569: PUSH
38570: LD_REAL  1.80000000000000E+0000
38573: MUL
38574: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38575: LD_VAR 0 6
38579: PPUSH
38580: CALL_OW 257
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 4
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: IN
38603: PUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: LD_INT 51
38611: PPUSH
38612: CALL_OW 321
38616: PUSH
38617: LD_INT 2
38619: EQUAL
38620: AND
38621: IFFALSE 38638
// bpoints := bpoints * 1.2 ;
38623: LD_ADDR_VAR 0 10
38627: PUSH
38628: LD_VAR 0 10
38632: PUSH
38633: LD_REAL  1.20000000000000E+0000
38636: MUL
38637: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38638: LD_VAR 0 6
38642: PPUSH
38643: CALL_OW 257
38647: PUSH
38648: LD_INT 5
38650: PUSH
38651: LD_INT 7
38653: PUSH
38654: LD_INT 9
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: IN
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: LD_INT 52
38670: PPUSH
38671: CALL_OW 321
38675: PUSH
38676: LD_INT 2
38678: EQUAL
38679: AND
38680: IFFALSE 38697
// bpoints := bpoints * 1.5 ;
38682: LD_ADDR_VAR 0 10
38686: PUSH
38687: LD_VAR 0 10
38691: PUSH
38692: LD_REAL  1.50000000000000E+0000
38695: MUL
38696: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38697: LD_VAR 0 1
38701: PPUSH
38702: LD_INT 66
38704: PPUSH
38705: CALL_OW 321
38709: PUSH
38710: LD_INT 2
38712: EQUAL
38713: IFFALSE 38730
// bpoints := bpoints * 1.1 ;
38715: LD_ADDR_VAR 0 10
38719: PUSH
38720: LD_VAR 0 10
38724: PUSH
38725: LD_REAL  1.10000000000000E+0000
38728: MUL
38729: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38730: LD_ADDR_VAR 0 10
38734: PUSH
38735: LD_VAR 0 10
38739: PUSH
38740: LD_VAR 0 6
38744: PPUSH
38745: LD_INT 1
38747: PPUSH
38748: CALL_OW 259
38752: PUSH
38753: LD_REAL  1.15000000000000E+0000
38756: MUL
38757: MUL
38758: ST_TO_ADDR
// end ; unit_vehicle :
38759: GO 39587
38761: LD_INT 2
38763: DOUBLE
38764: EQUAL
38765: IFTRUE 38769
38767: GO 39575
38769: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38770: LD_VAR 0 6
38774: PPUSH
38775: CALL_OW 264
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 42
38785: PUSH
38786: LD_INT 24
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: IN
38794: IFFALSE 38815
// points := [ 25 , 5 , 3 ] ;
38796: LD_ADDR_VAR 0 9
38800: PUSH
38801: LD_INT 25
38803: PUSH
38804: LD_INT 5
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38815: LD_VAR 0 6
38819: PPUSH
38820: CALL_OW 264
38824: PUSH
38825: LD_INT 4
38827: PUSH
38828: LD_INT 43
38830: PUSH
38831: LD_INT 25
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: IN
38839: IFFALSE 38860
// points := [ 40 , 15 , 5 ] ;
38841: LD_ADDR_VAR 0 9
38845: PUSH
38846: LD_INT 40
38848: PUSH
38849: LD_INT 15
38851: PUSH
38852: LD_INT 5
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38860: LD_VAR 0 6
38864: PPUSH
38865: CALL_OW 264
38869: PUSH
38870: LD_INT 3
38872: PUSH
38873: LD_INT 23
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: IN
38880: IFFALSE 38901
// points := [ 7 , 25 , 8 ] ;
38882: LD_ADDR_VAR 0 9
38886: PUSH
38887: LD_INT 7
38889: PUSH
38890: LD_INT 25
38892: PUSH
38893: LD_INT 8
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38901: LD_VAR 0 6
38905: PPUSH
38906: CALL_OW 264
38910: PUSH
38911: LD_INT 5
38913: PUSH
38914: LD_INT 27
38916: PUSH
38917: LD_INT 44
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: IN
38925: IFFALSE 38946
// points := [ 14 , 50 , 16 ] ;
38927: LD_ADDR_VAR 0 9
38931: PUSH
38932: LD_INT 14
38934: PUSH
38935: LD_INT 50
38937: PUSH
38938: LD_INT 16
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38946: LD_VAR 0 6
38950: PPUSH
38951: CALL_OW 264
38955: PUSH
38956: LD_INT 6
38958: PUSH
38959: LD_INT 46
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: IN
38966: IFFALSE 38987
// points := [ 32 , 120 , 70 ] ;
38968: LD_ADDR_VAR 0 9
38972: PUSH
38973: LD_INT 32
38975: PUSH
38976: LD_INT 120
38978: PUSH
38979: LD_INT 70
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38987: LD_VAR 0 6
38991: PPUSH
38992: CALL_OW 264
38996: PUSH
38997: LD_INT 7
38999: PUSH
39000: LD_INT 28
39002: PUSH
39003: LD_INT 45
39005: PUSH
39006: LD_INT 92
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: IN
39015: IFFALSE 39036
// points := [ 35 , 20 , 45 ] ;
39017: LD_ADDR_VAR 0 9
39021: PUSH
39022: LD_INT 35
39024: PUSH
39025: LD_INT 20
39027: PUSH
39028: LD_INT 45
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39036: LD_VAR 0 6
39040: PPUSH
39041: CALL_OW 264
39045: PUSH
39046: LD_INT 47
39048: PUSH
39049: EMPTY
39050: LIST
39051: IN
39052: IFFALSE 39073
// points := [ 67 , 45 , 75 ] ;
39054: LD_ADDR_VAR 0 9
39058: PUSH
39059: LD_INT 67
39061: PUSH
39062: LD_INT 45
39064: PUSH
39065: LD_INT 75
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39073: LD_VAR 0 6
39077: PPUSH
39078: CALL_OW 264
39082: PUSH
39083: LD_INT 26
39085: PUSH
39086: EMPTY
39087: LIST
39088: IN
39089: IFFALSE 39110
// points := [ 120 , 30 , 80 ] ;
39091: LD_ADDR_VAR 0 9
39095: PUSH
39096: LD_INT 120
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: LD_INT 80
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39110: LD_VAR 0 6
39114: PPUSH
39115: CALL_OW 264
39119: PUSH
39120: LD_INT 22
39122: PUSH
39123: EMPTY
39124: LIST
39125: IN
39126: IFFALSE 39147
// points := [ 40 , 1 , 1 ] ;
39128: LD_ADDR_VAR 0 9
39132: PUSH
39133: LD_INT 40
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39147: LD_VAR 0 6
39151: PPUSH
39152: CALL_OW 264
39156: PUSH
39157: LD_INT 29
39159: PUSH
39160: EMPTY
39161: LIST
39162: IN
39163: IFFALSE 39184
// points := [ 70 , 200 , 400 ] ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_INT 70
39172: PUSH
39173: LD_INT 200
39175: PUSH
39176: LD_INT 400
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39184: LD_VAR 0 6
39188: PPUSH
39189: CALL_OW 264
39193: PUSH
39194: LD_INT 14
39196: PUSH
39197: LD_INT 53
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: IN
39204: IFFALSE 39225
// points := [ 40 , 10 , 20 ] ;
39206: LD_ADDR_VAR 0 9
39210: PUSH
39211: LD_INT 40
39213: PUSH
39214: LD_INT 10
39216: PUSH
39217: LD_INT 20
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39225: LD_VAR 0 6
39229: PPUSH
39230: CALL_OW 264
39234: PUSH
39235: LD_INT 9
39237: PUSH
39238: EMPTY
39239: LIST
39240: IN
39241: IFFALSE 39262
// points := [ 5 , 70 , 20 ] ;
39243: LD_ADDR_VAR 0 9
39247: PUSH
39248: LD_INT 5
39250: PUSH
39251: LD_INT 70
39253: PUSH
39254: LD_INT 20
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39262: LD_VAR 0 6
39266: PPUSH
39267: CALL_OW 264
39271: PUSH
39272: LD_INT 10
39274: PUSH
39275: EMPTY
39276: LIST
39277: IN
39278: IFFALSE 39299
// points := [ 35 , 110 , 70 ] ;
39280: LD_ADDR_VAR 0 9
39284: PUSH
39285: LD_INT 35
39287: PUSH
39288: LD_INT 110
39290: PUSH
39291: LD_INT 70
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39299: LD_VAR 0 6
39303: PPUSH
39304: CALL_OW 265
39308: PUSH
39309: LD_INT 25
39311: EQUAL
39312: IFFALSE 39333
// points := [ 80 , 65 , 100 ] ;
39314: LD_ADDR_VAR 0 9
39318: PUSH
39319: LD_INT 80
39321: PUSH
39322: LD_INT 65
39324: PUSH
39325: LD_INT 100
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39333: LD_VAR 0 6
39337: PPUSH
39338: CALL_OW 263
39342: PUSH
39343: LD_INT 1
39345: EQUAL
39346: IFFALSE 39381
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39348: LD_ADDR_VAR 0 10
39352: PUSH
39353: LD_VAR 0 10
39357: PUSH
39358: LD_VAR 0 6
39362: PPUSH
39363: CALL_OW 311
39367: PPUSH
39368: LD_INT 3
39370: PPUSH
39371: CALL_OW 259
39375: PUSH
39376: LD_INT 4
39378: MUL
39379: MUL
39380: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39381: LD_VAR 0 6
39385: PPUSH
39386: CALL_OW 263
39390: PUSH
39391: LD_INT 2
39393: EQUAL
39394: IFFALSE 39445
// begin j := IsControledBy ( i ) ;
39396: LD_ADDR_VAR 0 7
39400: PUSH
39401: LD_VAR 0 6
39405: PPUSH
39406: CALL_OW 312
39410: ST_TO_ADDR
// if j then
39411: LD_VAR 0 7
39415: IFFALSE 39445
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39417: LD_ADDR_VAR 0 10
39421: PUSH
39422: LD_VAR 0 10
39426: PUSH
39427: LD_VAR 0 7
39431: PPUSH
39432: LD_INT 3
39434: PPUSH
39435: CALL_OW 259
39439: PUSH
39440: LD_INT 3
39442: MUL
39443: MUL
39444: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39445: LD_VAR 0 6
39449: PPUSH
39450: CALL_OW 264
39454: PUSH
39455: LD_INT 5
39457: PUSH
39458: LD_INT 6
39460: PUSH
39461: LD_INT 46
39463: PUSH
39464: LD_INT 44
39466: PUSH
39467: LD_INT 47
39469: PUSH
39470: LD_INT 45
39472: PUSH
39473: LD_INT 28
39475: PUSH
39476: LD_INT 7
39478: PUSH
39479: LD_INT 27
39481: PUSH
39482: LD_INT 29
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: IN
39497: PUSH
39498: LD_VAR 0 1
39502: PPUSH
39503: LD_INT 52
39505: PPUSH
39506: CALL_OW 321
39510: PUSH
39511: LD_INT 2
39513: EQUAL
39514: AND
39515: IFFALSE 39532
// bpoints := bpoints * 1.2 ;
39517: LD_ADDR_VAR 0 10
39521: PUSH
39522: LD_VAR 0 10
39526: PUSH
39527: LD_REAL  1.20000000000000E+0000
39530: MUL
39531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39532: LD_VAR 0 6
39536: PPUSH
39537: CALL_OW 264
39541: PUSH
39542: LD_INT 6
39544: PUSH
39545: LD_INT 46
39547: PUSH
39548: LD_INT 47
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: IN
39556: IFFALSE 39573
// bpoints := bpoints * 1.2 ;
39558: LD_ADDR_VAR 0 10
39562: PUSH
39563: LD_VAR 0 10
39567: PUSH
39568: LD_REAL  1.20000000000000E+0000
39571: MUL
39572: ST_TO_ADDR
// end ; unit_building :
39573: GO 39587
39575: LD_INT 3
39577: DOUBLE
39578: EQUAL
39579: IFTRUE 39583
39581: GO 39586
39583: POP
// ; end ;
39584: GO 39587
39586: POP
// for j = 1 to 3 do
39587: LD_ADDR_VAR 0 7
39591: PUSH
39592: DOUBLE
39593: LD_INT 1
39595: DEC
39596: ST_TO_ADDR
39597: LD_INT 3
39599: PUSH
39600: FOR_TO
39601: IFFALSE 39654
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39603: LD_ADDR_VAR 0 5
39607: PUSH
39608: LD_VAR 0 5
39612: PPUSH
39613: LD_VAR 0 7
39617: PPUSH
39618: LD_VAR 0 5
39622: PUSH
39623: LD_VAR 0 7
39627: ARRAY
39628: PUSH
39629: LD_VAR 0 9
39633: PUSH
39634: LD_VAR 0 7
39638: ARRAY
39639: PUSH
39640: LD_VAR 0 10
39644: MUL
39645: PLUS
39646: PPUSH
39647: CALL_OW 1
39651: ST_TO_ADDR
39652: GO 39600
39654: POP
39655: POP
// end ;
39656: GO 38135
39658: POP
39659: POP
// result := Replace ( result , 4 , tmp ) ;
39660: LD_ADDR_VAR 0 5
39664: PUSH
39665: LD_VAR 0 5
39669: PPUSH
39670: LD_INT 4
39672: PPUSH
39673: LD_VAR 0 8
39677: PPUSH
39678: CALL_OW 1
39682: ST_TO_ADDR
// end ;
39683: LD_VAR 0 5
39687: RET
// export function DangerAtRange ( unit , range ) ; begin
39688: LD_INT 0
39690: PPUSH
// if not unit then
39691: LD_VAR 0 1
39695: NOT
39696: IFFALSE 39700
// exit ;
39698: GO 39745
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 255
39714: PPUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 250
39724: PPUSH
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 251
39734: PPUSH
39735: LD_VAR 0 2
39739: PPUSH
39740: CALL 37987 0 4
39744: ST_TO_ADDR
// end ;
39745: LD_VAR 0 3
39749: RET
// export function DangerInArea ( side , area ) ; begin
39750: LD_INT 0
39752: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39753: LD_ADDR_VAR 0 3
39757: PUSH
39758: LD_VAR 0 2
39762: PPUSH
39763: LD_INT 81
39765: PUSH
39766: LD_VAR 0 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PPUSH
39775: CALL_OW 70
39779: ST_TO_ADDR
// end ;
39780: LD_VAR 0 3
39784: RET
// export function IsExtension ( b ) ; begin
39785: LD_INT 0
39787: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39788: LD_ADDR_VAR 0 2
39792: PUSH
39793: LD_VAR 0 1
39797: PUSH
39798: LD_INT 23
39800: PUSH
39801: LD_INT 20
39803: PUSH
39804: LD_INT 22
39806: PUSH
39807: LD_INT 17
39809: PUSH
39810: LD_INT 24
39812: PUSH
39813: LD_INT 21
39815: PUSH
39816: LD_INT 19
39818: PUSH
39819: LD_INT 16
39821: PUSH
39822: LD_INT 25
39824: PUSH
39825: LD_INT 18
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: IN
39840: ST_TO_ADDR
// end ;
39841: LD_VAR 0 2
39845: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39846: LD_INT 0
39848: PPUSH
39849: PPUSH
39850: PPUSH
// result := [ ] ;
39851: LD_ADDR_VAR 0 4
39855: PUSH
39856: EMPTY
39857: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39858: LD_ADDR_VAR 0 5
39862: PUSH
39863: LD_VAR 0 2
39867: PPUSH
39868: LD_INT 21
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PPUSH
39878: CALL_OW 70
39882: ST_TO_ADDR
// if not tmp then
39883: LD_VAR 0 5
39887: NOT
39888: IFFALSE 39892
// exit ;
39890: GO 39956
// if checkLink then
39892: LD_VAR 0 3
39896: IFFALSE 39946
// begin for i in tmp do
39898: LD_ADDR_VAR 0 6
39902: PUSH
39903: LD_VAR 0 5
39907: PUSH
39908: FOR_IN
39909: IFFALSE 39944
// if GetBase ( i ) <> base then
39911: LD_VAR 0 6
39915: PPUSH
39916: CALL_OW 274
39920: PUSH
39921: LD_VAR 0 1
39925: NONEQUAL
39926: IFFALSE 39942
// ComLinkToBase ( base , i ) ;
39928: LD_VAR 0 1
39932: PPUSH
39933: LD_VAR 0 6
39937: PPUSH
39938: CALL_OW 169
39942: GO 39908
39944: POP
39945: POP
// end ; result := tmp ;
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: LD_VAR 0 5
39955: ST_TO_ADDR
// end ;
39956: LD_VAR 0 4
39960: RET
// export function ComComplete ( units , b ) ; var i ; begin
39961: LD_INT 0
39963: PPUSH
39964: PPUSH
// if not units then
39965: LD_VAR 0 1
39969: NOT
39970: IFFALSE 39974
// exit ;
39972: GO 40064
// for i in units do
39974: LD_ADDR_VAR 0 4
39978: PUSH
39979: LD_VAR 0 1
39983: PUSH
39984: FOR_IN
39985: IFFALSE 40062
// if BuildingStatus ( b ) = bs_build then
39987: LD_VAR 0 2
39991: PPUSH
39992: CALL_OW 461
39996: PUSH
39997: LD_INT 1
39999: EQUAL
40000: IFFALSE 40060
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40002: LD_VAR 0 4
40006: PPUSH
40007: LD_STRING h
40009: PUSH
40010: LD_VAR 0 2
40014: PPUSH
40015: CALL_OW 250
40019: PUSH
40020: LD_VAR 0 2
40024: PPUSH
40025: CALL_OW 251
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: EMPTY
40054: LIST
40055: PPUSH
40056: CALL_OW 446
40060: GO 39984
40062: POP
40063: POP
// end ;
40064: LD_VAR 0 3
40068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40069: LD_INT 0
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40077: LD_VAR 0 1
40081: NOT
40082: PUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL_OW 263
40092: PUSH
40093: LD_INT 2
40095: NONEQUAL
40096: OR
40097: IFFALSE 40101
// exit ;
40099: GO 40417
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40101: LD_ADDR_VAR 0 6
40105: PUSH
40106: LD_INT 22
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: CALL_OW 255
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 30
40128: PUSH
40129: LD_INT 36
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 34
40138: PUSH
40139: LD_INT 31
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PPUSH
40155: CALL_OW 69
40159: ST_TO_ADDR
// if not tmp then
40160: LD_VAR 0 6
40164: NOT
40165: IFFALSE 40169
// exit ;
40167: GO 40417
// result := [ ] ;
40169: LD_ADDR_VAR 0 2
40173: PUSH
40174: EMPTY
40175: ST_TO_ADDR
// for i in tmp do
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_VAR 0 6
40185: PUSH
40186: FOR_IN
40187: IFFALSE 40258
// begin t := UnitsInside ( i ) ;
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: LD_VAR 0 3
40198: PPUSH
40199: CALL_OW 313
40203: ST_TO_ADDR
// if t then
40204: LD_VAR 0 4
40208: IFFALSE 40256
// for j in t do
40210: LD_ADDR_VAR 0 7
40214: PUSH
40215: LD_VAR 0 4
40219: PUSH
40220: FOR_IN
40221: IFFALSE 40254
// result := Replace ( result , result + 1 , j ) ;
40223: LD_ADDR_VAR 0 2
40227: PUSH
40228: LD_VAR 0 2
40232: PPUSH
40233: LD_VAR 0 2
40237: PUSH
40238: LD_INT 1
40240: PLUS
40241: PPUSH
40242: LD_VAR 0 7
40246: PPUSH
40247: CALL_OW 1
40251: ST_TO_ADDR
40252: GO 40220
40254: POP
40255: POP
// end ;
40256: GO 40186
40258: POP
40259: POP
// if not result then
40260: LD_VAR 0 2
40264: NOT
40265: IFFALSE 40269
// exit ;
40267: GO 40417
// mech := result [ 1 ] ;
40269: LD_ADDR_VAR 0 5
40273: PUSH
40274: LD_VAR 0 2
40278: PUSH
40279: LD_INT 1
40281: ARRAY
40282: ST_TO_ADDR
// if result > 1 then
40283: LD_VAR 0 2
40287: PUSH
40288: LD_INT 1
40290: GREATER
40291: IFFALSE 40403
// begin for i = 2 to result do
40293: LD_ADDR_VAR 0 3
40297: PUSH
40298: DOUBLE
40299: LD_INT 2
40301: DEC
40302: ST_TO_ADDR
40303: LD_VAR 0 2
40307: PUSH
40308: FOR_TO
40309: IFFALSE 40401
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40311: LD_ADDR_VAR 0 4
40315: PUSH
40316: LD_VAR 0 2
40320: PUSH
40321: LD_VAR 0 3
40325: ARRAY
40326: PPUSH
40327: LD_INT 3
40329: PPUSH
40330: CALL_OW 259
40334: PUSH
40335: LD_VAR 0 2
40339: PUSH
40340: LD_VAR 0 3
40344: ARRAY
40345: PPUSH
40346: CALL_OW 432
40350: MINUS
40351: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40352: LD_VAR 0 4
40356: PUSH
40357: LD_VAR 0 5
40361: PPUSH
40362: LD_INT 3
40364: PPUSH
40365: CALL_OW 259
40369: PUSH
40370: LD_VAR 0 5
40374: PPUSH
40375: CALL_OW 432
40379: MINUS
40380: GREATEREQUAL
40381: IFFALSE 40399
// mech := result [ i ] ;
40383: LD_ADDR_VAR 0 5
40387: PUSH
40388: LD_VAR 0 2
40392: PUSH
40393: LD_VAR 0 3
40397: ARRAY
40398: ST_TO_ADDR
// end ;
40399: GO 40308
40401: POP
40402: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 5
40412: PPUSH
40413: CALL_OW 135
// end ;
40417: LD_VAR 0 2
40421: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
// result := [ ] ;
40437: LD_ADDR_VAR 0 7
40441: PUSH
40442: EMPTY
40443: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL_OW 266
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: IN
40464: NOT
40465: IFFALSE 40469
// exit ;
40467: GO 42103
// if name then
40469: LD_VAR 0 3
40473: IFFALSE 40489
// SetBName ( base_dep , name ) ;
40475: LD_VAR 0 1
40479: PPUSH
40480: LD_VAR 0 3
40484: PPUSH
40485: CALL_OW 500
// base := GetBase ( base_dep ) ;
40489: LD_ADDR_VAR 0 15
40493: PUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 274
40503: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40504: LD_ADDR_VAR 0 16
40508: PUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 255
40518: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40519: LD_ADDR_VAR 0 17
40523: PUSH
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 248
40533: ST_TO_ADDR
// if sources then
40534: LD_VAR 0 5
40538: IFFALSE 40585
// for i = 1 to 3 do
40540: LD_ADDR_VAR 0 8
40544: PUSH
40545: DOUBLE
40546: LD_INT 1
40548: DEC
40549: ST_TO_ADDR
40550: LD_INT 3
40552: PUSH
40553: FOR_TO
40554: IFFALSE 40583
// AddResourceType ( base , i , sources [ i ] ) ;
40556: LD_VAR 0 15
40560: PPUSH
40561: LD_VAR 0 8
40565: PPUSH
40566: LD_VAR 0 5
40570: PUSH
40571: LD_VAR 0 8
40575: ARRAY
40576: PPUSH
40577: CALL_OW 276
40581: GO 40553
40583: POP
40584: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40585: LD_ADDR_VAR 0 18
40589: PUSH
40590: LD_VAR 0 15
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_INT 1
40602: PPUSH
40603: CALL 39846 0 3
40607: ST_TO_ADDR
// InitHc ;
40608: CALL_OW 19
// InitUc ;
40612: CALL_OW 18
// uc_side := side ;
40616: LD_ADDR_OWVAR 20
40620: PUSH
40621: LD_VAR 0 16
40625: ST_TO_ADDR
// uc_nation := nation ;
40626: LD_ADDR_OWVAR 21
40630: PUSH
40631: LD_VAR 0 17
40635: ST_TO_ADDR
// if buildings then
40636: LD_VAR 0 18
40640: IFFALSE 41962
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40642: LD_ADDR_VAR 0 19
40646: PUSH
40647: LD_VAR 0 18
40651: PPUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 30
40657: PUSH
40658: LD_INT 29
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 30
40667: PUSH
40668: LD_INT 30
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: PPUSH
40680: CALL_OW 72
40684: ST_TO_ADDR
// if tmp then
40685: LD_VAR 0 19
40689: IFFALSE 40737
// for i in tmp do
40691: LD_ADDR_VAR 0 8
40695: PUSH
40696: LD_VAR 0 19
40700: PUSH
40701: FOR_IN
40702: IFFALSE 40735
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40704: LD_VAR 0 8
40708: PPUSH
40709: CALL_OW 250
40713: PPUSH
40714: LD_VAR 0 8
40718: PPUSH
40719: CALL_OW 251
40723: PPUSH
40724: LD_VAR 0 16
40728: PPUSH
40729: CALL_OW 441
40733: GO 40701
40735: POP
40736: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40737: LD_VAR 0 18
40741: PPUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 30
40747: PUSH
40748: LD_INT 32
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 30
40757: PUSH
40758: LD_INT 33
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: IFFALSE 40862
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40776: LD_ADDR_VAR 0 8
40780: PUSH
40781: LD_VAR 0 18
40785: PPUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 30
40791: PUSH
40792: LD_INT 32
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 30
40801: PUSH
40802: LD_INT 33
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: PPUSH
40814: CALL_OW 72
40818: PUSH
40819: FOR_IN
40820: IFFALSE 40860
// begin if not GetBWeapon ( i ) then
40822: LD_VAR 0 8
40826: PPUSH
40827: CALL_OW 269
40831: NOT
40832: IFFALSE 40858
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40834: LD_VAR 0 8
40838: PPUSH
40839: LD_VAR 0 8
40843: PPUSH
40844: LD_VAR 0 2
40848: PPUSH
40849: CALL 42108 0 2
40853: PPUSH
40854: CALL_OW 431
// end ;
40858: GO 40819
40860: POP
40861: POP
// end ; for i = 1 to personel do
40862: LD_ADDR_VAR 0 8
40866: PUSH
40867: DOUBLE
40868: LD_INT 1
40870: DEC
40871: ST_TO_ADDR
40872: LD_VAR 0 6
40876: PUSH
40877: FOR_TO
40878: IFFALSE 41942
// begin if i > 4 then
40880: LD_VAR 0 8
40884: PUSH
40885: LD_INT 4
40887: GREATER
40888: IFFALSE 40892
// break ;
40890: GO 41942
// case i of 1 :
40892: LD_VAR 0 8
40896: PUSH
40897: LD_INT 1
40899: DOUBLE
40900: EQUAL
40901: IFTRUE 40905
40903: GO 40985
40905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40906: LD_ADDR_VAR 0 12
40910: PUSH
40911: LD_VAR 0 18
40915: PPUSH
40916: LD_INT 22
40918: PUSH
40919: LD_VAR 0 16
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 58
40930: PUSH
40931: EMPTY
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 30
40939: PUSH
40940: LD_INT 32
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 30
40949: PUSH
40950: LD_INT 4
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 30
40959: PUSH
40960: LD_INT 5
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: PPUSH
40978: CALL_OW 72
40982: ST_TO_ADDR
40983: GO 41207
40985: LD_INT 2
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41055
40993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40994: LD_ADDR_VAR 0 12
40998: PUSH
40999: LD_VAR 0 18
41003: PPUSH
41004: LD_INT 22
41006: PUSH
41007: LD_VAR 0 16
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 30
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 30
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 72
41052: ST_TO_ADDR
41053: GO 41207
41055: LD_INT 3
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41125
41063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41064: LD_ADDR_VAR 0 12
41068: PUSH
41069: LD_VAR 0 18
41073: PPUSH
41074: LD_INT 22
41076: PUSH
41077: LD_VAR 0 16
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 30
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 30
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PPUSH
41118: CALL_OW 72
41122: ST_TO_ADDR
41123: GO 41207
41125: LD_INT 4
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41133
41131: GO 41206
41133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41134: LD_ADDR_VAR 0 12
41138: PUSH
41139: LD_VAR 0 18
41143: PPUSH
41144: LD_INT 22
41146: PUSH
41147: LD_VAR 0 16
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: LD_INT 6
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 7
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 8
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PPUSH
41199: CALL_OW 72
41203: ST_TO_ADDR
41204: GO 41207
41206: POP
// if i = 1 then
41207: LD_VAR 0 8
41211: PUSH
41212: LD_INT 1
41214: EQUAL
41215: IFFALSE 41326
// begin tmp := [ ] ;
41217: LD_ADDR_VAR 0 19
41221: PUSH
41222: EMPTY
41223: ST_TO_ADDR
// for j in f do
41224: LD_ADDR_VAR 0 9
41228: PUSH
41229: LD_VAR 0 12
41233: PUSH
41234: FOR_IN
41235: IFFALSE 41308
// if GetBType ( j ) = b_bunker then
41237: LD_VAR 0 9
41241: PPUSH
41242: CALL_OW 266
41246: PUSH
41247: LD_INT 32
41249: EQUAL
41250: IFFALSE 41277
// tmp := Insert ( tmp , 1 , j ) else
41252: LD_ADDR_VAR 0 19
41256: PUSH
41257: LD_VAR 0 19
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: LD_VAR 0 9
41269: PPUSH
41270: CALL_OW 2
41274: ST_TO_ADDR
41275: GO 41306
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41277: LD_ADDR_VAR 0 19
41281: PUSH
41282: LD_VAR 0 19
41286: PPUSH
41287: LD_VAR 0 19
41291: PUSH
41292: LD_INT 1
41294: PLUS
41295: PPUSH
41296: LD_VAR 0 9
41300: PPUSH
41301: CALL_OW 2
41305: ST_TO_ADDR
41306: GO 41234
41308: POP
41309: POP
// if tmp then
41310: LD_VAR 0 19
41314: IFFALSE 41326
// f := tmp ;
41316: LD_ADDR_VAR 0 12
41320: PUSH
41321: LD_VAR 0 19
41325: ST_TO_ADDR
// end ; x := personel [ i ] ;
41326: LD_ADDR_VAR 0 13
41330: PUSH
41331: LD_VAR 0 6
41335: PUSH
41336: LD_VAR 0 8
41340: ARRAY
41341: ST_TO_ADDR
// if x = - 1 then
41342: LD_VAR 0 13
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: EQUAL
41351: IFFALSE 41560
// begin for j in f do
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 12
41362: PUSH
41363: FOR_IN
41364: IFFALSE 41556
// repeat InitHc ;
41366: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41370: LD_VAR 0 9
41374: PPUSH
41375: CALL_OW 266
41379: PUSH
41380: LD_INT 5
41382: EQUAL
41383: IFFALSE 41453
// begin if UnitsInside ( j ) < 3 then
41385: LD_VAR 0 9
41389: PPUSH
41390: CALL_OW 313
41394: PUSH
41395: LD_INT 3
41397: LESS
41398: IFFALSE 41434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41400: LD_INT 0
41402: PPUSH
41403: LD_INT 5
41405: PUSH
41406: LD_INT 8
41408: PUSH
41409: LD_INT 9
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: PUSH
41417: LD_VAR 0 17
41421: ARRAY
41422: PPUSH
41423: LD_VAR 0 4
41427: PPUSH
41428: CALL_OW 380
41432: GO 41451
// PrepareHuman ( false , i , skill ) ;
41434: LD_INT 0
41436: PPUSH
41437: LD_VAR 0 8
41441: PPUSH
41442: LD_VAR 0 4
41446: PPUSH
41447: CALL_OW 380
// end else
41451: GO 41470
// PrepareHuman ( false , i , skill ) ;
41453: LD_INT 0
41455: PPUSH
41456: LD_VAR 0 8
41460: PPUSH
41461: LD_VAR 0 4
41465: PPUSH
41466: CALL_OW 380
// un := CreateHuman ;
41470: LD_ADDR_VAR 0 14
41474: PUSH
41475: CALL_OW 44
41479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41480: LD_ADDR_VAR 0 7
41484: PUSH
41485: LD_VAR 0 7
41489: PPUSH
41490: LD_INT 1
41492: PPUSH
41493: LD_VAR 0 14
41497: PPUSH
41498: CALL_OW 2
41502: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41503: LD_VAR 0 14
41507: PPUSH
41508: LD_VAR 0 9
41512: PPUSH
41513: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41517: LD_VAR 0 9
41521: PPUSH
41522: CALL_OW 313
41526: PUSH
41527: LD_INT 6
41529: EQUAL
41530: PUSH
41531: LD_VAR 0 9
41535: PPUSH
41536: CALL_OW 266
41540: PUSH
41541: LD_INT 32
41543: PUSH
41544: LD_INT 31
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: IN
41551: OR
41552: IFFALSE 41366
41554: GO 41363
41556: POP
41557: POP
// end else
41558: GO 41940
// for j = 1 to x do
41560: LD_ADDR_VAR 0 9
41564: PUSH
41565: DOUBLE
41566: LD_INT 1
41568: DEC
41569: ST_TO_ADDR
41570: LD_VAR 0 13
41574: PUSH
41575: FOR_TO
41576: IFFALSE 41938
// begin InitHc ;
41578: CALL_OW 19
// if not f then
41582: LD_VAR 0 12
41586: NOT
41587: IFFALSE 41676
// begin PrepareHuman ( false , i , skill ) ;
41589: LD_INT 0
41591: PPUSH
41592: LD_VAR 0 8
41596: PPUSH
41597: LD_VAR 0 4
41601: PPUSH
41602: CALL_OW 380
// un := CreateHuman ;
41606: LD_ADDR_VAR 0 14
41610: PUSH
41611: CALL_OW 44
41615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41616: LD_ADDR_VAR 0 7
41620: PUSH
41621: LD_VAR 0 7
41625: PPUSH
41626: LD_INT 1
41628: PPUSH
41629: LD_VAR 0 14
41633: PPUSH
41634: CALL_OW 2
41638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41639: LD_VAR 0 14
41643: PPUSH
41644: LD_VAR 0 1
41648: PPUSH
41649: CALL_OW 250
41653: PPUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 251
41663: PPUSH
41664: LD_INT 10
41666: PPUSH
41667: LD_INT 0
41669: PPUSH
41670: CALL_OW 50
// continue ;
41674: GO 41575
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41676: LD_VAR 0 12
41680: PUSH
41681: LD_INT 1
41683: ARRAY
41684: PPUSH
41685: CALL_OW 313
41689: PUSH
41690: LD_VAR 0 12
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: PPUSH
41699: CALL_OW 266
41703: PUSH
41704: LD_INT 32
41706: PUSH
41707: LD_INT 31
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: IN
41714: AND
41715: PUSH
41716: LD_VAR 0 12
41720: PUSH
41721: LD_INT 1
41723: ARRAY
41724: PPUSH
41725: CALL_OW 313
41729: PUSH
41730: LD_INT 6
41732: EQUAL
41733: OR
41734: IFFALSE 41754
// f := Delete ( f , 1 ) ;
41736: LD_ADDR_VAR 0 12
41740: PUSH
41741: LD_VAR 0 12
41745: PPUSH
41746: LD_INT 1
41748: PPUSH
41749: CALL_OW 3
41753: ST_TO_ADDR
// if not f then
41754: LD_VAR 0 12
41758: NOT
41759: IFFALSE 41777
// begin x := x + 2 ;
41761: LD_ADDR_VAR 0 13
41765: PUSH
41766: LD_VAR 0 13
41770: PUSH
41771: LD_INT 2
41773: PLUS
41774: ST_TO_ADDR
// continue ;
41775: GO 41575
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41777: LD_VAR 0 12
41781: PUSH
41782: LD_INT 1
41784: ARRAY
41785: PPUSH
41786: CALL_OW 266
41790: PUSH
41791: LD_INT 5
41793: EQUAL
41794: IFFALSE 41868
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41796: LD_VAR 0 12
41800: PUSH
41801: LD_INT 1
41803: ARRAY
41804: PPUSH
41805: CALL_OW 313
41809: PUSH
41810: LD_INT 3
41812: LESS
41813: IFFALSE 41849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41815: LD_INT 0
41817: PPUSH
41818: LD_INT 5
41820: PUSH
41821: LD_INT 8
41823: PUSH
41824: LD_INT 9
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: PUSH
41832: LD_VAR 0 17
41836: ARRAY
41837: PPUSH
41838: LD_VAR 0 4
41842: PPUSH
41843: CALL_OW 380
41847: GO 41866
// PrepareHuman ( false , i , skill ) ;
41849: LD_INT 0
41851: PPUSH
41852: LD_VAR 0 8
41856: PPUSH
41857: LD_VAR 0 4
41861: PPUSH
41862: CALL_OW 380
// end else
41866: GO 41885
// PrepareHuman ( false , i , skill ) ;
41868: LD_INT 0
41870: PPUSH
41871: LD_VAR 0 8
41875: PPUSH
41876: LD_VAR 0 4
41880: PPUSH
41881: CALL_OW 380
// un := CreateHuman ;
41885: LD_ADDR_VAR 0 14
41889: PUSH
41890: CALL_OW 44
41894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41895: LD_ADDR_VAR 0 7
41899: PUSH
41900: LD_VAR 0 7
41904: PPUSH
41905: LD_INT 1
41907: PPUSH
41908: LD_VAR 0 14
41912: PPUSH
41913: CALL_OW 2
41917: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41918: LD_VAR 0 14
41922: PPUSH
41923: LD_VAR 0 12
41927: PUSH
41928: LD_INT 1
41930: ARRAY
41931: PPUSH
41932: CALL_OW 52
// end ;
41936: GO 41575
41938: POP
41939: POP
// end ;
41940: GO 40877
41942: POP
41943: POP
// result := result ^ buildings ;
41944: LD_ADDR_VAR 0 7
41948: PUSH
41949: LD_VAR 0 7
41953: PUSH
41954: LD_VAR 0 18
41958: ADD
41959: ST_TO_ADDR
// end else
41960: GO 42103
// begin for i = 1 to personel do
41962: LD_ADDR_VAR 0 8
41966: PUSH
41967: DOUBLE
41968: LD_INT 1
41970: DEC
41971: ST_TO_ADDR
41972: LD_VAR 0 6
41976: PUSH
41977: FOR_TO
41978: IFFALSE 42101
// begin if i > 4 then
41980: LD_VAR 0 8
41984: PUSH
41985: LD_INT 4
41987: GREATER
41988: IFFALSE 41992
// break ;
41990: GO 42101
// x := personel [ i ] ;
41992: LD_ADDR_VAR 0 13
41996: PUSH
41997: LD_VAR 0 6
42001: PUSH
42002: LD_VAR 0 8
42006: ARRAY
42007: ST_TO_ADDR
// if x = - 1 then
42008: LD_VAR 0 13
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: EQUAL
42017: IFFALSE 42021
// continue ;
42019: GO 41977
// PrepareHuman ( false , i , skill ) ;
42021: LD_INT 0
42023: PPUSH
42024: LD_VAR 0 8
42028: PPUSH
42029: LD_VAR 0 4
42033: PPUSH
42034: CALL_OW 380
// un := CreateHuman ;
42038: LD_ADDR_VAR 0 14
42042: PUSH
42043: CALL_OW 44
42047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42048: LD_VAR 0 14
42052: PPUSH
42053: LD_VAR 0 1
42057: PPUSH
42058: CALL_OW 250
42062: PPUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: CALL_OW 251
42072: PPUSH
42073: LD_INT 10
42075: PPUSH
42076: LD_INT 0
42078: PPUSH
42079: CALL_OW 50
// result := result ^ un ;
42083: LD_ADDR_VAR 0 7
42087: PUSH
42088: LD_VAR 0 7
42092: PUSH
42093: LD_VAR 0 14
42097: ADD
42098: ST_TO_ADDR
// end ;
42099: GO 41977
42101: POP
42102: POP
// end ; end ;
42103: LD_VAR 0 7
42107: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42108: LD_INT 0
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
// result := false ;
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_INT 0
42133: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42134: LD_VAR 0 1
42138: NOT
42139: PUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: CALL_OW 266
42149: PUSH
42150: LD_INT 32
42152: PUSH
42153: LD_INT 33
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: IN
42160: NOT
42161: OR
42162: IFFALSE 42166
// exit ;
42164: GO 43275
// nat := GetNation ( tower ) ;
42166: LD_ADDR_VAR 0 12
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: CALL_OW 248
42180: ST_TO_ADDR
// side := GetSide ( tower ) ;
42181: LD_ADDR_VAR 0 16
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 255
42195: ST_TO_ADDR
// x := GetX ( tower ) ;
42196: LD_ADDR_VAR 0 10
42200: PUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 250
42210: ST_TO_ADDR
// y := GetY ( tower ) ;
42211: LD_ADDR_VAR 0 11
42215: PUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 251
42225: ST_TO_ADDR
// if not x or not y then
42226: LD_VAR 0 10
42230: NOT
42231: PUSH
42232: LD_VAR 0 11
42236: NOT
42237: OR
42238: IFFALSE 42242
// exit ;
42240: GO 43275
// weapon := 0 ;
42242: LD_ADDR_VAR 0 18
42246: PUSH
42247: LD_INT 0
42249: ST_TO_ADDR
// fac_list := [ ] ;
42250: LD_ADDR_VAR 0 17
42254: PUSH
42255: EMPTY
42256: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42257: LD_ADDR_VAR 0 6
42261: PUSH
42262: LD_VAR 0 1
42266: PPUSH
42267: CALL_OW 274
42271: PPUSH
42272: LD_VAR 0 2
42276: PPUSH
42277: LD_INT 0
42279: PPUSH
42280: CALL 39846 0 3
42284: PPUSH
42285: LD_INT 30
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 72
42299: ST_TO_ADDR
// if not factories then
42300: LD_VAR 0 6
42304: NOT
42305: IFFALSE 42309
// exit ;
42307: GO 43275
// for i in factories do
42309: LD_ADDR_VAR 0 8
42313: PUSH
42314: LD_VAR 0 6
42318: PUSH
42319: FOR_IN
42320: IFFALSE 42345
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42322: LD_ADDR_VAR 0 17
42326: PUSH
42327: LD_VAR 0 17
42331: PUSH
42332: LD_VAR 0 8
42336: PPUSH
42337: CALL_OW 478
42341: UNION
42342: ST_TO_ADDR
42343: GO 42319
42345: POP
42346: POP
// if not fac_list then
42347: LD_VAR 0 17
42351: NOT
42352: IFFALSE 42356
// exit ;
42354: GO 43275
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42356: LD_ADDR_VAR 0 5
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: LD_INT 9
42369: PUSH
42370: LD_INT 10
42372: PUSH
42373: LD_INT 6
42375: PUSH
42376: LD_INT 7
42378: PUSH
42379: LD_INT 11
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 27
42393: PUSH
42394: LD_INT 28
42396: PUSH
42397: LD_INT 26
42399: PUSH
42400: LD_INT 30
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 43
42411: PUSH
42412: LD_INT 44
42414: PUSH
42415: LD_INT 46
42417: PUSH
42418: LD_INT 45
42420: PUSH
42421: LD_INT 47
42423: PUSH
42424: LD_INT 49
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: PUSH
42440: LD_VAR 0 12
42444: ARRAY
42445: ST_TO_ADDR
// list := list isect fac_list ;
42446: LD_ADDR_VAR 0 5
42450: PUSH
42451: LD_VAR 0 5
42455: PUSH
42456: LD_VAR 0 17
42460: ISECT
42461: ST_TO_ADDR
// if not list then
42462: LD_VAR 0 5
42466: NOT
42467: IFFALSE 42471
// exit ;
42469: GO 43275
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42471: LD_VAR 0 12
42475: PUSH
42476: LD_INT 3
42478: EQUAL
42479: PUSH
42480: LD_INT 49
42482: PUSH
42483: LD_VAR 0 5
42487: IN
42488: AND
42489: PUSH
42490: LD_INT 31
42492: PPUSH
42493: LD_VAR 0 16
42497: PPUSH
42498: CALL_OW 321
42502: PUSH
42503: LD_INT 2
42505: EQUAL
42506: AND
42507: IFFALSE 42567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42509: LD_INT 22
42511: PUSH
42512: LD_VAR 0 16
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 35
42523: PUSH
42524: LD_INT 49
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 91
42533: PUSH
42534: LD_VAR 0 1
42538: PUSH
42539: LD_INT 10
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: PPUSH
42552: CALL_OW 69
42556: NOT
42557: IFFALSE 42567
// weapon := ru_time_lapser ;
42559: LD_ADDR_VAR 0 18
42563: PUSH
42564: LD_INT 49
42566: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42567: LD_VAR 0 12
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: IN
42582: PUSH
42583: LD_INT 11
42585: PUSH
42586: LD_VAR 0 5
42590: IN
42591: PUSH
42592: LD_INT 30
42594: PUSH
42595: LD_VAR 0 5
42599: IN
42600: OR
42601: AND
42602: PUSH
42603: LD_INT 6
42605: PPUSH
42606: LD_VAR 0 16
42610: PPUSH
42611: CALL_OW 321
42615: PUSH
42616: LD_INT 2
42618: EQUAL
42619: AND
42620: IFFALSE 42785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42622: LD_INT 22
42624: PUSH
42625: LD_VAR 0 16
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 35
42639: PUSH
42640: LD_INT 11
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 35
42649: PUSH
42650: LD_INT 30
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 91
42664: PUSH
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 18
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: PPUSH
42683: CALL_OW 69
42687: NOT
42688: PUSH
42689: LD_INT 22
42691: PUSH
42692: LD_VAR 0 16
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 30
42706: PUSH
42707: LD_INT 32
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 30
42716: PUSH
42717: LD_INT 33
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 91
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_INT 12
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: PUSH
42750: EMPTY
42751: LIST
42752: PPUSH
42753: CALL_OW 69
42757: PUSH
42758: LD_INT 2
42760: GREATER
42761: AND
42762: IFFALSE 42785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42764: LD_ADDR_VAR 0 18
42768: PUSH
42769: LD_INT 11
42771: PUSH
42772: LD_INT 30
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_VAR 0 12
42783: ARRAY
42784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42785: LD_VAR 0 18
42789: NOT
42790: PUSH
42791: LD_INT 40
42793: PPUSH
42794: LD_VAR 0 16
42798: PPUSH
42799: CALL_OW 321
42803: PUSH
42804: LD_INT 2
42806: EQUAL
42807: AND
42808: PUSH
42809: LD_INT 7
42811: PUSH
42812: LD_VAR 0 5
42816: IN
42817: PUSH
42818: LD_INT 28
42820: PUSH
42821: LD_VAR 0 5
42825: IN
42826: OR
42827: PUSH
42828: LD_INT 45
42830: PUSH
42831: LD_VAR 0 5
42835: IN
42836: OR
42837: AND
42838: IFFALSE 43092
// begin hex := GetHexInfo ( x , y ) ;
42840: LD_ADDR_VAR 0 4
42844: PUSH
42845: LD_VAR 0 10
42849: PPUSH
42850: LD_VAR 0 11
42854: PPUSH
42855: CALL_OW 546
42859: ST_TO_ADDR
// if hex [ 1 ] then
42860: LD_VAR 0 4
42864: PUSH
42865: LD_INT 1
42867: ARRAY
42868: IFFALSE 42872
// exit ;
42870: GO 43275
// height := hex [ 2 ] ;
42872: LD_ADDR_VAR 0 15
42876: PUSH
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 2
42884: ARRAY
42885: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42886: LD_ADDR_VAR 0 14
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: LD_INT 5
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// for i in tmp do
42909: LD_ADDR_VAR 0 8
42913: PUSH
42914: LD_VAR 0 14
42918: PUSH
42919: FOR_IN
42920: IFFALSE 43090
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42922: LD_ADDR_VAR 0 9
42926: PUSH
42927: LD_VAR 0 10
42931: PPUSH
42932: LD_VAR 0 8
42936: PPUSH
42937: LD_INT 5
42939: PPUSH
42940: CALL_OW 272
42944: PUSH
42945: LD_VAR 0 11
42949: PPUSH
42950: LD_VAR 0 8
42954: PPUSH
42955: LD_INT 5
42957: PPUSH
42958: CALL_OW 273
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42967: LD_VAR 0 9
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PPUSH
42976: LD_VAR 0 9
42980: PUSH
42981: LD_INT 2
42983: ARRAY
42984: PPUSH
42985: CALL_OW 488
42989: IFFALSE 43088
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: LD_VAR 0 9
43000: PUSH
43001: LD_INT 1
43003: ARRAY
43004: PPUSH
43005: LD_VAR 0 9
43009: PUSH
43010: LD_INT 2
43012: ARRAY
43013: PPUSH
43014: CALL_OW 546
43018: ST_TO_ADDR
// if hex [ 1 ] then
43019: LD_VAR 0 4
43023: PUSH
43024: LD_INT 1
43026: ARRAY
43027: IFFALSE 43031
// continue ;
43029: GO 42919
// h := hex [ 2 ] ;
43031: LD_ADDR_VAR 0 13
43035: PUSH
43036: LD_VAR 0 4
43040: PUSH
43041: LD_INT 2
43043: ARRAY
43044: ST_TO_ADDR
// if h + 7 < height then
43045: LD_VAR 0 13
43049: PUSH
43050: LD_INT 7
43052: PLUS
43053: PUSH
43054: LD_VAR 0 15
43058: LESS
43059: IFFALSE 43088
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43061: LD_ADDR_VAR 0 18
43065: PUSH
43066: LD_INT 7
43068: PUSH
43069: LD_INT 28
43071: PUSH
43072: LD_INT 45
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: PUSH
43080: LD_VAR 0 12
43084: ARRAY
43085: ST_TO_ADDR
// break ;
43086: GO 43090
// end ; end ; end ;
43088: GO 42919
43090: POP
43091: POP
// end ; if not weapon then
43092: LD_VAR 0 18
43096: NOT
43097: IFFALSE 43157
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43099: LD_ADDR_VAR 0 5
43103: PUSH
43104: LD_VAR 0 5
43108: PUSH
43109: LD_INT 11
43111: PUSH
43112: LD_INT 30
43114: PUSH
43115: LD_INT 49
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: DIFF
43123: ST_TO_ADDR
// if not list then
43124: LD_VAR 0 5
43128: NOT
43129: IFFALSE 43133
// exit ;
43131: GO 43275
// weapon := list [ rand ( 1 , list ) ] ;
43133: LD_ADDR_VAR 0 18
43137: PUSH
43138: LD_VAR 0 5
43142: PUSH
43143: LD_INT 1
43145: PPUSH
43146: LD_VAR 0 5
43150: PPUSH
43151: CALL_OW 12
43155: ARRAY
43156: ST_TO_ADDR
// end ; if weapon then
43157: LD_VAR 0 18
43161: IFFALSE 43275
// begin tmp := CostOfWeapon ( weapon ) ;
43163: LD_ADDR_VAR 0 14
43167: PUSH
43168: LD_VAR 0 18
43172: PPUSH
43173: CALL_OW 451
43177: ST_TO_ADDR
// j := GetBase ( tower ) ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 274
43192: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43193: LD_VAR 0 9
43197: PPUSH
43198: LD_INT 1
43200: PPUSH
43201: CALL_OW 275
43205: PUSH
43206: LD_VAR 0 14
43210: PUSH
43211: LD_INT 1
43213: ARRAY
43214: GREATEREQUAL
43215: PUSH
43216: LD_VAR 0 9
43220: PPUSH
43221: LD_INT 2
43223: PPUSH
43224: CALL_OW 275
43228: PUSH
43229: LD_VAR 0 14
43233: PUSH
43234: LD_INT 2
43236: ARRAY
43237: GREATEREQUAL
43238: AND
43239: PUSH
43240: LD_VAR 0 9
43244: PPUSH
43245: LD_INT 3
43247: PPUSH
43248: CALL_OW 275
43252: PUSH
43253: LD_VAR 0 14
43257: PUSH
43258: LD_INT 3
43260: ARRAY
43261: GREATEREQUAL
43262: AND
43263: IFFALSE 43275
// result := weapon ;
43265: LD_ADDR_VAR 0 3
43269: PUSH
43270: LD_VAR 0 18
43274: ST_TO_ADDR
// end ; end ;
43275: LD_VAR 0 3
43279: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43280: LD_INT 0
43282: PPUSH
43283: PPUSH
// result := true ;
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 1
43291: ST_TO_ADDR
// if array1 = array2 then
43292: LD_VAR 0 1
43296: PUSH
43297: LD_VAR 0 2
43301: EQUAL
43302: IFFALSE 43362
// begin for i = 1 to array1 do
43304: LD_ADDR_VAR 0 4
43308: PUSH
43309: DOUBLE
43310: LD_INT 1
43312: DEC
43313: ST_TO_ADDR
43314: LD_VAR 0 1
43318: PUSH
43319: FOR_TO
43320: IFFALSE 43358
// if array1 [ i ] <> array2 [ i ] then
43322: LD_VAR 0 1
43326: PUSH
43327: LD_VAR 0 4
43331: ARRAY
43332: PUSH
43333: LD_VAR 0 2
43337: PUSH
43338: LD_VAR 0 4
43342: ARRAY
43343: NONEQUAL
43344: IFFALSE 43356
// begin result := false ;
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 0
43353: ST_TO_ADDR
// break ;
43354: GO 43358
// end ;
43356: GO 43319
43358: POP
43359: POP
// end else
43360: GO 43370
// result := false ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_INT 0
43369: ST_TO_ADDR
// end ;
43370: LD_VAR 0 3
43374: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43375: LD_INT 0
43377: PPUSH
43378: PPUSH
// if not array1 or not array2 then
43379: LD_VAR 0 1
43383: NOT
43384: PUSH
43385: LD_VAR 0 2
43389: NOT
43390: OR
43391: IFFALSE 43395
// exit ;
43393: GO 43459
// result := true ;
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_INT 1
43402: ST_TO_ADDR
// for i = 1 to array1 do
43403: LD_ADDR_VAR 0 4
43407: PUSH
43408: DOUBLE
43409: LD_INT 1
43411: DEC
43412: ST_TO_ADDR
43413: LD_VAR 0 1
43417: PUSH
43418: FOR_TO
43419: IFFALSE 43457
// if array1 [ i ] <> array2 [ i ] then
43421: LD_VAR 0 1
43425: PUSH
43426: LD_VAR 0 4
43430: ARRAY
43431: PUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_VAR 0 4
43441: ARRAY
43442: NONEQUAL
43443: IFFALSE 43455
// begin result := false ;
43445: LD_ADDR_VAR 0 3
43449: PUSH
43450: LD_INT 0
43452: ST_TO_ADDR
// break ;
43453: GO 43457
// end ;
43455: GO 43418
43457: POP
43458: POP
// end ;
43459: LD_VAR 0 3
43463: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43464: LD_INT 0
43466: PPUSH
43467: PPUSH
43468: PPUSH
// pom := GetBase ( fac ) ;
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_VAR 0 1
43478: PPUSH
43479: CALL_OW 274
43483: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43484: LD_ADDR_VAR 0 4
43488: PUSH
43489: LD_VAR 0 2
43493: PUSH
43494: LD_INT 1
43496: ARRAY
43497: PPUSH
43498: LD_VAR 0 2
43502: PUSH
43503: LD_INT 2
43505: ARRAY
43506: PPUSH
43507: LD_VAR 0 2
43511: PUSH
43512: LD_INT 3
43514: ARRAY
43515: PPUSH
43516: LD_VAR 0 2
43520: PUSH
43521: LD_INT 4
43523: ARRAY
43524: PPUSH
43525: CALL_OW 449
43529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_VAR 0 5
43539: PPUSH
43540: LD_INT 1
43542: PPUSH
43543: CALL_OW 275
43547: PUSH
43548: LD_VAR 0 4
43552: PUSH
43553: LD_INT 1
43555: ARRAY
43556: GREATEREQUAL
43557: PUSH
43558: LD_VAR 0 5
43562: PPUSH
43563: LD_INT 2
43565: PPUSH
43566: CALL_OW 275
43570: PUSH
43571: LD_VAR 0 4
43575: PUSH
43576: LD_INT 2
43578: ARRAY
43579: GREATEREQUAL
43580: AND
43581: PUSH
43582: LD_VAR 0 5
43586: PPUSH
43587: LD_INT 3
43589: PPUSH
43590: CALL_OW 275
43594: PUSH
43595: LD_VAR 0 4
43599: PUSH
43600: LD_INT 3
43602: ARRAY
43603: GREATEREQUAL
43604: AND
43605: ST_TO_ADDR
// end ;
43606: LD_VAR 0 3
43610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43611: LD_INT 0
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
// pom := GetBase ( building ) ;
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: LD_VAR 0 1
43626: PPUSH
43627: CALL_OW 274
43631: ST_TO_ADDR
// if not pom then
43632: LD_VAR 0 3
43636: NOT
43637: IFFALSE 43641
// exit ;
43639: GO 43811
// btype := GetBType ( building ) ;
43641: LD_ADDR_VAR 0 5
43645: PUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 266
43655: ST_TO_ADDR
// if btype = b_armoury then
43656: LD_VAR 0 5
43660: PUSH
43661: LD_INT 4
43663: EQUAL
43664: IFFALSE 43674
// btype := b_barracks ;
43666: LD_ADDR_VAR 0 5
43670: PUSH
43671: LD_INT 5
43673: ST_TO_ADDR
// if btype = b_depot then
43674: LD_VAR 0 5
43678: PUSH
43679: LD_INT 0
43681: EQUAL
43682: IFFALSE 43692
// btype := b_warehouse ;
43684: LD_ADDR_VAR 0 5
43688: PUSH
43689: LD_INT 1
43691: ST_TO_ADDR
// if btype = b_workshop then
43692: LD_VAR 0 5
43696: PUSH
43697: LD_INT 2
43699: EQUAL
43700: IFFALSE 43710
// btype := b_factory ;
43702: LD_ADDR_VAR 0 5
43706: PUSH
43707: LD_INT 3
43709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43710: LD_ADDR_VAR 0 4
43714: PUSH
43715: LD_VAR 0 5
43719: PPUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 248
43729: PPUSH
43730: CALL_OW 450
43734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43735: LD_ADDR_VAR 0 2
43739: PUSH
43740: LD_VAR 0 3
43744: PPUSH
43745: LD_INT 1
43747: PPUSH
43748: CALL_OW 275
43752: PUSH
43753: LD_VAR 0 4
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: GREATEREQUAL
43762: PUSH
43763: LD_VAR 0 3
43767: PPUSH
43768: LD_INT 2
43770: PPUSH
43771: CALL_OW 275
43775: PUSH
43776: LD_VAR 0 4
43780: PUSH
43781: LD_INT 2
43783: ARRAY
43784: GREATEREQUAL
43785: AND
43786: PUSH
43787: LD_VAR 0 3
43791: PPUSH
43792: LD_INT 3
43794: PPUSH
43795: CALL_OW 275
43799: PUSH
43800: LD_VAR 0 4
43804: PUSH
43805: LD_INT 3
43807: ARRAY
43808: GREATEREQUAL
43809: AND
43810: ST_TO_ADDR
// end ;
43811: LD_VAR 0 2
43815: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43816: LD_INT 0
43818: PPUSH
43819: PPUSH
43820: PPUSH
// pom := GetBase ( building ) ;
43821: LD_ADDR_VAR 0 4
43825: PUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: CALL_OW 274
43835: ST_TO_ADDR
// if not pom then
43836: LD_VAR 0 4
43840: NOT
43841: IFFALSE 43845
// exit ;
43843: GO 43946
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43845: LD_ADDR_VAR 0 5
43849: PUSH
43850: LD_VAR 0 2
43854: PPUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 248
43864: PPUSH
43865: CALL_OW 450
43869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_VAR 0 4
43879: PPUSH
43880: LD_INT 1
43882: PPUSH
43883: CALL_OW 275
43887: PUSH
43888: LD_VAR 0 5
43892: PUSH
43893: LD_INT 1
43895: ARRAY
43896: GREATEREQUAL
43897: PUSH
43898: LD_VAR 0 4
43902: PPUSH
43903: LD_INT 2
43905: PPUSH
43906: CALL_OW 275
43910: PUSH
43911: LD_VAR 0 5
43915: PUSH
43916: LD_INT 2
43918: ARRAY
43919: GREATEREQUAL
43920: AND
43921: PUSH
43922: LD_VAR 0 4
43926: PPUSH
43927: LD_INT 3
43929: PPUSH
43930: CALL_OW 275
43934: PUSH
43935: LD_VAR 0 5
43939: PUSH
43940: LD_INT 3
43942: ARRAY
43943: GREATEREQUAL
43944: AND
43945: ST_TO_ADDR
// end ;
43946: LD_VAR 0 3
43950: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43951: LD_INT 0
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
// result := false ;
43964: LD_ADDR_VAR 0 8
43968: PUSH
43969: LD_INT 0
43971: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43972: LD_VAR 0 5
43976: NOT
43977: PUSH
43978: LD_VAR 0 1
43982: NOT
43983: OR
43984: PUSH
43985: LD_VAR 0 2
43989: NOT
43990: OR
43991: PUSH
43992: LD_VAR 0 3
43996: NOT
43997: OR
43998: IFFALSE 44002
// exit ;
44000: GO 44816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44002: LD_ADDR_VAR 0 14
44006: PUSH
44007: LD_VAR 0 1
44011: PPUSH
44012: LD_VAR 0 2
44016: PPUSH
44017: LD_VAR 0 3
44021: PPUSH
44022: LD_VAR 0 4
44026: PPUSH
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 1
44034: ARRAY
44035: PPUSH
44036: CALL_OW 248
44040: PPUSH
44041: LD_INT 0
44043: PPUSH
44044: CALL 46069 0 6
44048: ST_TO_ADDR
// if not hexes then
44049: LD_VAR 0 14
44053: NOT
44054: IFFALSE 44058
// exit ;
44056: GO 44816
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44058: LD_ADDR_VAR 0 17
44062: PUSH
44063: LD_VAR 0 5
44067: PPUSH
44068: LD_INT 22
44070: PUSH
44071: LD_VAR 0 13
44075: PPUSH
44076: CALL_OW 255
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 30
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 30
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PPUSH
44117: CALL_OW 72
44121: ST_TO_ADDR
// for i = 1 to hexes do
44122: LD_ADDR_VAR 0 9
44126: PUSH
44127: DOUBLE
44128: LD_INT 1
44130: DEC
44131: ST_TO_ADDR
44132: LD_VAR 0 14
44136: PUSH
44137: FOR_TO
44138: IFFALSE 44814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44140: LD_ADDR_VAR 0 13
44144: PUSH
44145: LD_VAR 0 14
44149: PUSH
44150: LD_VAR 0 9
44154: ARRAY
44155: PUSH
44156: LD_INT 1
44158: ARRAY
44159: PPUSH
44160: LD_VAR 0 14
44164: PUSH
44165: LD_VAR 0 9
44169: ARRAY
44170: PUSH
44171: LD_INT 2
44173: ARRAY
44174: PPUSH
44175: CALL_OW 428
44179: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44180: LD_VAR 0 14
44184: PUSH
44185: LD_VAR 0 9
44189: ARRAY
44190: PUSH
44191: LD_INT 1
44193: ARRAY
44194: PPUSH
44195: LD_VAR 0 14
44199: PUSH
44200: LD_VAR 0 9
44204: ARRAY
44205: PUSH
44206: LD_INT 2
44208: ARRAY
44209: PPUSH
44210: CALL_OW 351
44214: PUSH
44215: LD_VAR 0 14
44219: PUSH
44220: LD_VAR 0 9
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PPUSH
44230: LD_VAR 0 14
44234: PUSH
44235: LD_VAR 0 9
44239: ARRAY
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PPUSH
44245: CALL_OW 488
44249: NOT
44250: OR
44251: PUSH
44252: LD_VAR 0 13
44256: PPUSH
44257: CALL_OW 247
44261: PUSH
44262: LD_INT 3
44264: EQUAL
44265: OR
44266: IFFALSE 44272
// exit ;
44268: POP
44269: POP
44270: GO 44816
// if not tmp then
44272: LD_VAR 0 13
44276: NOT
44277: IFFALSE 44281
// continue ;
44279: GO 44137
// result := true ;
44281: LD_ADDR_VAR 0 8
44285: PUSH
44286: LD_INT 1
44288: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44289: LD_VAR 0 6
44293: PUSH
44294: LD_VAR 0 13
44298: PPUSH
44299: CALL_OW 247
44303: PUSH
44304: LD_INT 2
44306: EQUAL
44307: AND
44308: PUSH
44309: LD_VAR 0 13
44313: PPUSH
44314: CALL_OW 263
44318: PUSH
44319: LD_INT 1
44321: EQUAL
44322: AND
44323: IFFALSE 44487
// begin if IsDrivenBy ( tmp ) then
44325: LD_VAR 0 13
44329: PPUSH
44330: CALL_OW 311
44334: IFFALSE 44338
// continue ;
44336: GO 44137
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44338: LD_VAR 0 6
44342: PPUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 60
44348: PUSH
44349: EMPTY
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 55
44361: PUSH
44362: EMPTY
44363: LIST
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PPUSH
44373: CALL_OW 72
44377: IFFALSE 44485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44379: LD_ADDR_VAR 0 18
44383: PUSH
44384: LD_VAR 0 6
44388: PPUSH
44389: LD_INT 3
44391: PUSH
44392: LD_INT 60
44394: PUSH
44395: EMPTY
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: LD_INT 55
44407: PUSH
44408: EMPTY
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PPUSH
44419: CALL_OW 72
44423: PUSH
44424: LD_INT 1
44426: ARRAY
44427: ST_TO_ADDR
// if IsInUnit ( driver ) then
44428: LD_VAR 0 18
44432: PPUSH
44433: CALL_OW 310
44437: IFFALSE 44448
// ComExit ( driver ) ;
44439: LD_VAR 0 18
44443: PPUSH
44444: CALL 69850 0 1
// AddComEnterUnit ( driver , tmp ) ;
44448: LD_VAR 0 18
44452: PPUSH
44453: LD_VAR 0 13
44457: PPUSH
44458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44462: LD_VAR 0 18
44466: PPUSH
44467: LD_VAR 0 7
44471: PPUSH
44472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44476: LD_VAR 0 18
44480: PPUSH
44481: CALL_OW 181
// end ; continue ;
44485: GO 44137
// end ; if not cleaners or not tmp in cleaners then
44487: LD_VAR 0 6
44491: NOT
44492: PUSH
44493: LD_VAR 0 13
44497: PUSH
44498: LD_VAR 0 6
44502: IN
44503: NOT
44504: OR
44505: IFFALSE 44812
// begin if dep then
44507: LD_VAR 0 17
44511: IFFALSE 44647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44513: LD_ADDR_VAR 0 16
44517: PUSH
44518: LD_VAR 0 17
44522: PUSH
44523: LD_INT 1
44525: ARRAY
44526: PPUSH
44527: CALL_OW 250
44531: PPUSH
44532: LD_VAR 0 17
44536: PUSH
44537: LD_INT 1
44539: ARRAY
44540: PPUSH
44541: CALL_OW 254
44545: PPUSH
44546: LD_INT 5
44548: PPUSH
44549: CALL_OW 272
44553: PUSH
44554: LD_VAR 0 17
44558: PUSH
44559: LD_INT 1
44561: ARRAY
44562: PPUSH
44563: CALL_OW 251
44567: PPUSH
44568: LD_VAR 0 17
44572: PUSH
44573: LD_INT 1
44575: ARRAY
44576: PPUSH
44577: CALL_OW 254
44581: PPUSH
44582: LD_INT 5
44584: PPUSH
44585: CALL_OW 273
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44594: LD_VAR 0 16
44598: PUSH
44599: LD_INT 1
44601: ARRAY
44602: PPUSH
44603: LD_VAR 0 16
44607: PUSH
44608: LD_INT 2
44610: ARRAY
44611: PPUSH
44612: CALL_OW 488
44616: IFFALSE 44647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44618: LD_VAR 0 13
44622: PPUSH
44623: LD_VAR 0 16
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PPUSH
44632: LD_VAR 0 16
44636: PUSH
44637: LD_INT 2
44639: ARRAY
44640: PPUSH
44641: CALL_OW 111
// continue ;
44645: GO 44137
// end ; end ; r := GetDir ( tmp ) ;
44647: LD_ADDR_VAR 0 15
44651: PUSH
44652: LD_VAR 0 13
44656: PPUSH
44657: CALL_OW 254
44661: ST_TO_ADDR
// if r = 5 then
44662: LD_VAR 0 15
44666: PUSH
44667: LD_INT 5
44669: EQUAL
44670: IFFALSE 44680
// r := 0 ;
44672: LD_ADDR_VAR 0 15
44676: PUSH
44677: LD_INT 0
44679: ST_TO_ADDR
// for j = r to 5 do
44680: LD_ADDR_VAR 0 10
44684: PUSH
44685: DOUBLE
44686: LD_VAR 0 15
44690: DEC
44691: ST_TO_ADDR
44692: LD_INT 5
44694: PUSH
44695: FOR_TO
44696: IFFALSE 44810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44698: LD_ADDR_VAR 0 11
44702: PUSH
44703: LD_VAR 0 13
44707: PPUSH
44708: CALL_OW 250
44712: PPUSH
44713: LD_VAR 0 10
44717: PPUSH
44718: LD_INT 2
44720: PPUSH
44721: CALL_OW 272
44725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44726: LD_ADDR_VAR 0 12
44730: PUSH
44731: LD_VAR 0 13
44735: PPUSH
44736: CALL_OW 251
44740: PPUSH
44741: LD_VAR 0 10
44745: PPUSH
44746: LD_INT 2
44748: PPUSH
44749: CALL_OW 273
44753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44754: LD_VAR 0 11
44758: PPUSH
44759: LD_VAR 0 12
44763: PPUSH
44764: CALL_OW 488
44768: PUSH
44769: LD_VAR 0 11
44773: PPUSH
44774: LD_VAR 0 12
44778: PPUSH
44779: CALL_OW 428
44783: NOT
44784: AND
44785: IFFALSE 44808
// begin ComMoveXY ( tmp , _x , _y ) ;
44787: LD_VAR 0 13
44791: PPUSH
44792: LD_VAR 0 11
44796: PPUSH
44797: LD_VAR 0 12
44801: PPUSH
44802: CALL_OW 111
// break ;
44806: GO 44810
// end ; end ;
44808: GO 44695
44810: POP
44811: POP
// end ; end ;
44812: GO 44137
44814: POP
44815: POP
// end ;
44816: LD_VAR 0 8
44820: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44821: LD_INT 0
44823: PPUSH
// result := true ;
44824: LD_ADDR_VAR 0 3
44828: PUSH
44829: LD_INT 1
44831: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44832: LD_VAR 0 2
44836: PUSH
44837: LD_INT 24
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44851
44843: LD_INT 33
44845: DOUBLE
44846: EQUAL
44847: IFTRUE 44851
44849: GO 44876
44851: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44852: LD_ADDR_VAR 0 3
44856: PUSH
44857: LD_INT 32
44859: PPUSH
44860: LD_VAR 0 1
44864: PPUSH
44865: CALL_OW 321
44869: PUSH
44870: LD_INT 2
44872: EQUAL
44873: ST_TO_ADDR
44874: GO 45192
44876: LD_INT 20
44878: DOUBLE
44879: EQUAL
44880: IFTRUE 44884
44882: GO 44909
44884: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44885: LD_ADDR_VAR 0 3
44889: PUSH
44890: LD_INT 6
44892: PPUSH
44893: LD_VAR 0 1
44897: PPUSH
44898: CALL_OW 321
44902: PUSH
44903: LD_INT 2
44905: EQUAL
44906: ST_TO_ADDR
44907: GO 45192
44909: LD_INT 22
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44923
44915: LD_INT 36
44917: DOUBLE
44918: EQUAL
44919: IFTRUE 44923
44921: GO 44948
44923: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 15
44931: PPUSH
44932: LD_VAR 0 1
44936: PPUSH
44937: CALL_OW 321
44941: PUSH
44942: LD_INT 2
44944: EQUAL
44945: ST_TO_ADDR
44946: GO 45192
44948: LD_INT 30
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44956
44954: GO 44981
44956: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 20
44964: PPUSH
44965: LD_VAR 0 1
44969: PPUSH
44970: CALL_OW 321
44974: PUSH
44975: LD_INT 2
44977: EQUAL
44978: ST_TO_ADDR
44979: GO 45192
44981: LD_INT 28
44983: DOUBLE
44984: EQUAL
44985: IFTRUE 44995
44987: LD_INT 21
44989: DOUBLE
44990: EQUAL
44991: IFTRUE 44995
44993: GO 45020
44995: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44996: LD_ADDR_VAR 0 3
45000: PUSH
45001: LD_INT 21
45003: PPUSH
45004: LD_VAR 0 1
45008: PPUSH
45009: CALL_OW 321
45013: PUSH
45014: LD_INT 2
45016: EQUAL
45017: ST_TO_ADDR
45018: GO 45192
45020: LD_INT 16
45022: DOUBLE
45023: EQUAL
45024: IFTRUE 45028
45026: GO 45053
45028: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45029: LD_ADDR_VAR 0 3
45033: PUSH
45034: LD_INT 84
45036: PPUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 321
45046: PUSH
45047: LD_INT 2
45049: EQUAL
45050: ST_TO_ADDR
45051: GO 45192
45053: LD_INT 19
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45067
45059: LD_INT 23
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45092
45067: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45068: LD_ADDR_VAR 0 3
45072: PUSH
45073: LD_INT 83
45075: PPUSH
45076: LD_VAR 0 1
45080: PPUSH
45081: CALL_OW 321
45085: PUSH
45086: LD_INT 2
45088: EQUAL
45089: ST_TO_ADDR
45090: GO 45192
45092: LD_INT 17
45094: DOUBLE
45095: EQUAL
45096: IFTRUE 45100
45098: GO 45125
45100: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45101: LD_ADDR_VAR 0 3
45105: PUSH
45106: LD_INT 39
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 321
45118: PUSH
45119: LD_INT 2
45121: EQUAL
45122: ST_TO_ADDR
45123: GO 45192
45125: LD_INT 18
45127: DOUBLE
45128: EQUAL
45129: IFTRUE 45133
45131: GO 45158
45133: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45134: LD_ADDR_VAR 0 3
45138: PUSH
45139: LD_INT 40
45141: PPUSH
45142: LD_VAR 0 1
45146: PPUSH
45147: CALL_OW 321
45151: PUSH
45152: LD_INT 2
45154: EQUAL
45155: ST_TO_ADDR
45156: GO 45192
45158: LD_INT 27
45160: DOUBLE
45161: EQUAL
45162: IFTRUE 45166
45164: GO 45191
45166: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45167: LD_ADDR_VAR 0 3
45171: PUSH
45172: LD_INT 35
45174: PPUSH
45175: LD_VAR 0 1
45179: PPUSH
45180: CALL_OW 321
45184: PUSH
45185: LD_INT 2
45187: EQUAL
45188: ST_TO_ADDR
45189: GO 45192
45191: POP
// end ;
45192: LD_VAR 0 3
45196: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45197: LD_INT 0
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
// result := false ;
45210: LD_ADDR_VAR 0 6
45214: PUSH
45215: LD_INT 0
45217: ST_TO_ADDR
// if btype = b_depot then
45218: LD_VAR 0 2
45222: PUSH
45223: LD_INT 0
45225: EQUAL
45226: IFFALSE 45238
// begin result := true ;
45228: LD_ADDR_VAR 0 6
45232: PUSH
45233: LD_INT 1
45235: ST_TO_ADDR
// exit ;
45236: GO 46064
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45238: LD_VAR 0 1
45242: NOT
45243: PUSH
45244: LD_VAR 0 1
45248: PPUSH
45249: CALL_OW 266
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: IN
45264: NOT
45265: OR
45266: PUSH
45267: LD_VAR 0 2
45271: NOT
45272: OR
45273: PUSH
45274: LD_VAR 0 5
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 3
45290: PUSH
45291: LD_INT 4
45293: PUSH
45294: LD_INT 5
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: IN
45305: NOT
45306: OR
45307: PUSH
45308: LD_VAR 0 3
45312: PPUSH
45313: LD_VAR 0 4
45317: PPUSH
45318: CALL_OW 488
45322: NOT
45323: OR
45324: IFFALSE 45328
// exit ;
45326: GO 46064
// side := GetSide ( depot ) ;
45328: LD_ADDR_VAR 0 9
45332: PUSH
45333: LD_VAR 0 1
45337: PPUSH
45338: CALL_OW 255
45342: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45343: LD_VAR 0 9
45347: PPUSH
45348: LD_VAR 0 2
45352: PPUSH
45353: CALL 44821 0 2
45357: NOT
45358: IFFALSE 45362
// exit ;
45360: GO 46064
// pom := GetBase ( depot ) ;
45362: LD_ADDR_VAR 0 10
45366: PUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 274
45376: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45377: LD_ADDR_VAR 0 11
45381: PUSH
45382: LD_VAR 0 2
45386: PPUSH
45387: LD_VAR 0 1
45391: PPUSH
45392: CALL_OW 248
45396: PPUSH
45397: CALL_OW 450
45401: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45402: LD_VAR 0 10
45406: PPUSH
45407: LD_INT 1
45409: PPUSH
45410: CALL_OW 275
45414: PUSH
45415: LD_VAR 0 11
45419: PUSH
45420: LD_INT 1
45422: ARRAY
45423: GREATEREQUAL
45424: PUSH
45425: LD_VAR 0 10
45429: PPUSH
45430: LD_INT 2
45432: PPUSH
45433: CALL_OW 275
45437: PUSH
45438: LD_VAR 0 11
45442: PUSH
45443: LD_INT 2
45445: ARRAY
45446: GREATEREQUAL
45447: AND
45448: PUSH
45449: LD_VAR 0 10
45453: PPUSH
45454: LD_INT 3
45456: PPUSH
45457: CALL_OW 275
45461: PUSH
45462: LD_VAR 0 11
45466: PUSH
45467: LD_INT 3
45469: ARRAY
45470: GREATEREQUAL
45471: AND
45472: NOT
45473: IFFALSE 45477
// exit ;
45475: GO 46064
// if GetBType ( depot ) = b_depot then
45477: LD_VAR 0 1
45481: PPUSH
45482: CALL_OW 266
45486: PUSH
45487: LD_INT 0
45489: EQUAL
45490: IFFALSE 45502
// dist := 28 else
45492: LD_ADDR_VAR 0 14
45496: PUSH
45497: LD_INT 28
45499: ST_TO_ADDR
45500: GO 45510
// dist := 36 ;
45502: LD_ADDR_VAR 0 14
45506: PUSH
45507: LD_INT 36
45509: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45510: LD_VAR 0 1
45514: PPUSH
45515: LD_VAR 0 3
45519: PPUSH
45520: LD_VAR 0 4
45524: PPUSH
45525: CALL_OW 297
45529: PUSH
45530: LD_VAR 0 14
45534: GREATER
45535: IFFALSE 45539
// exit ;
45537: GO 46064
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45539: LD_ADDR_VAR 0 12
45543: PUSH
45544: LD_VAR 0 2
45548: PPUSH
45549: LD_VAR 0 3
45553: PPUSH
45554: LD_VAR 0 4
45558: PPUSH
45559: LD_VAR 0 5
45563: PPUSH
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 248
45573: PPUSH
45574: LD_INT 0
45576: PPUSH
45577: CALL 46069 0 6
45581: ST_TO_ADDR
// if not hexes then
45582: LD_VAR 0 12
45586: NOT
45587: IFFALSE 45591
// exit ;
45589: GO 46064
// hex := GetHexInfo ( x , y ) ;
45591: LD_ADDR_VAR 0 15
45595: PUSH
45596: LD_VAR 0 3
45600: PPUSH
45601: LD_VAR 0 4
45605: PPUSH
45606: CALL_OW 546
45610: ST_TO_ADDR
// if hex [ 1 ] then
45611: LD_VAR 0 15
45615: PUSH
45616: LD_INT 1
45618: ARRAY
45619: IFFALSE 45623
// exit ;
45621: GO 46064
// height := hex [ 2 ] ;
45623: LD_ADDR_VAR 0 13
45627: PUSH
45628: LD_VAR 0 15
45632: PUSH
45633: LD_INT 2
45635: ARRAY
45636: ST_TO_ADDR
// for i = 1 to hexes do
45637: LD_ADDR_VAR 0 7
45641: PUSH
45642: DOUBLE
45643: LD_INT 1
45645: DEC
45646: ST_TO_ADDR
45647: LD_VAR 0 12
45651: PUSH
45652: FOR_TO
45653: IFFALSE 45983
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45655: LD_VAR 0 12
45659: PUSH
45660: LD_VAR 0 7
45664: ARRAY
45665: PUSH
45666: LD_INT 1
45668: ARRAY
45669: PPUSH
45670: LD_VAR 0 12
45674: PUSH
45675: LD_VAR 0 7
45679: ARRAY
45680: PUSH
45681: LD_INT 2
45683: ARRAY
45684: PPUSH
45685: CALL_OW 488
45689: NOT
45690: PUSH
45691: LD_VAR 0 12
45695: PUSH
45696: LD_VAR 0 7
45700: ARRAY
45701: PUSH
45702: LD_INT 1
45704: ARRAY
45705: PPUSH
45706: LD_VAR 0 12
45710: PUSH
45711: LD_VAR 0 7
45715: ARRAY
45716: PUSH
45717: LD_INT 2
45719: ARRAY
45720: PPUSH
45721: CALL_OW 428
45725: PUSH
45726: LD_INT 0
45728: GREATER
45729: OR
45730: PUSH
45731: LD_VAR 0 12
45735: PUSH
45736: LD_VAR 0 7
45740: ARRAY
45741: PUSH
45742: LD_INT 1
45744: ARRAY
45745: PPUSH
45746: LD_VAR 0 12
45750: PUSH
45751: LD_VAR 0 7
45755: ARRAY
45756: PUSH
45757: LD_INT 2
45759: ARRAY
45760: PPUSH
45761: CALL_OW 351
45765: OR
45766: IFFALSE 45772
// exit ;
45768: POP
45769: POP
45770: GO 46064
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45772: LD_ADDR_VAR 0 8
45776: PUSH
45777: LD_VAR 0 12
45781: PUSH
45782: LD_VAR 0 7
45786: ARRAY
45787: PUSH
45788: LD_INT 1
45790: ARRAY
45791: PPUSH
45792: LD_VAR 0 12
45796: PUSH
45797: LD_VAR 0 7
45801: ARRAY
45802: PUSH
45803: LD_INT 2
45805: ARRAY
45806: PPUSH
45807: CALL_OW 546
45811: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45812: LD_VAR 0 8
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: PUSH
45821: LD_VAR 0 8
45825: PUSH
45826: LD_INT 2
45828: ARRAY
45829: PUSH
45830: LD_VAR 0 13
45834: PUSH
45835: LD_INT 2
45837: PLUS
45838: GREATER
45839: OR
45840: PUSH
45841: LD_VAR 0 8
45845: PUSH
45846: LD_INT 2
45848: ARRAY
45849: PUSH
45850: LD_VAR 0 13
45854: PUSH
45855: LD_INT 2
45857: MINUS
45858: LESS
45859: OR
45860: PUSH
45861: LD_VAR 0 8
45865: PUSH
45866: LD_INT 3
45868: ARRAY
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 8
45875: PUSH
45876: LD_INT 9
45878: PUSH
45879: LD_INT 10
45881: PUSH
45882: LD_INT 11
45884: PUSH
45885: LD_INT 12
45887: PUSH
45888: LD_INT 13
45890: PUSH
45891: LD_INT 16
45893: PUSH
45894: LD_INT 17
45896: PUSH
45897: LD_INT 18
45899: PUSH
45900: LD_INT 19
45902: PUSH
45903: LD_INT 20
45905: PUSH
45906: LD_INT 21
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: IN
45924: NOT
45925: OR
45926: PUSH
45927: LD_VAR 0 8
45931: PUSH
45932: LD_INT 5
45934: ARRAY
45935: NOT
45936: OR
45937: PUSH
45938: LD_VAR 0 8
45942: PUSH
45943: LD_INT 6
45945: ARRAY
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 7
45955: PUSH
45956: LD_INT 9
45958: PUSH
45959: LD_INT 10
45961: PUSH
45962: LD_INT 11
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: IN
45973: NOT
45974: OR
45975: IFFALSE 45981
// exit ;
45977: POP
45978: POP
45979: GO 46064
// end ;
45981: GO 45652
45983: POP
45984: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45985: LD_VAR 0 9
45989: PPUSH
45990: LD_VAR 0 3
45994: PPUSH
45995: LD_VAR 0 4
45999: PPUSH
46000: LD_INT 20
46002: PPUSH
46003: CALL 37987 0 4
46007: PUSH
46008: LD_INT 4
46010: ARRAY
46011: IFFALSE 46015
// exit ;
46013: GO 46064
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46015: LD_VAR 0 2
46019: PUSH
46020: LD_INT 29
46022: PUSH
46023: LD_INT 30
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: IN
46030: PUSH
46031: LD_VAR 0 3
46035: PPUSH
46036: LD_VAR 0 4
46040: PPUSH
46041: LD_VAR 0 9
46045: PPUSH
46046: CALL_OW 440
46050: NOT
46051: AND
46052: IFFALSE 46056
// exit ;
46054: GO 46064
// result := true ;
46056: LD_ADDR_VAR 0 6
46060: PUSH
46061: LD_INT 1
46063: ST_TO_ADDR
// end ;
46064: LD_VAR 0 6
46068: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46069: LD_INT 0
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
46099: PPUSH
46100: PPUSH
46101: PPUSH
46102: PPUSH
46103: PPUSH
46104: PPUSH
46105: PPUSH
46106: PPUSH
46107: PPUSH
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
// result = [ ] ;
46129: LD_ADDR_VAR 0 7
46133: PUSH
46134: EMPTY
46135: ST_TO_ADDR
// temp_list = [ ] ;
46136: LD_ADDR_VAR 0 9
46140: PUSH
46141: EMPTY
46142: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46143: LD_VAR 0 4
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: LD_INT 3
46159: PUSH
46160: LD_INT 4
46162: PUSH
46163: LD_INT 5
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: IN
46174: NOT
46175: PUSH
46176: LD_VAR 0 1
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: IN
46191: PUSH
46192: LD_VAR 0 5
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 3
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: IN
46211: NOT
46212: AND
46213: OR
46214: IFFALSE 46218
// exit ;
46216: GO 64609
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46218: LD_VAR 0 1
46222: PUSH
46223: LD_INT 6
46225: PUSH
46226: LD_INT 7
46228: PUSH
46229: LD_INT 8
46231: PUSH
46232: LD_INT 13
46234: PUSH
46235: LD_INT 12
46237: PUSH
46238: LD_INT 15
46240: PUSH
46241: LD_INT 11
46243: PUSH
46244: LD_INT 14
46246: PUSH
46247: LD_INT 10
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: IN
46261: IFFALSE 46271
// btype = b_lab ;
46263: LD_ADDR_VAR 0 1
46267: PUSH
46268: LD_INT 6
46270: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46271: LD_VAR 0 6
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: IN
46290: NOT
46291: PUSH
46292: LD_VAR 0 1
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: LD_INT 6
46311: PUSH
46312: LD_INT 36
46314: PUSH
46315: LD_INT 4
46317: PUSH
46318: LD_INT 5
46320: PUSH
46321: LD_INT 31
46323: PUSH
46324: LD_INT 32
46326: PUSH
46327: LD_INT 33
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: IN
46343: NOT
46344: PUSH
46345: LD_VAR 0 6
46349: PUSH
46350: LD_INT 1
46352: EQUAL
46353: AND
46354: OR
46355: PUSH
46356: LD_VAR 0 1
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: IN
46371: NOT
46372: PUSH
46373: LD_VAR 0 6
46377: PUSH
46378: LD_INT 2
46380: EQUAL
46381: AND
46382: OR
46383: IFFALSE 46393
// mode = 0 ;
46385: LD_ADDR_VAR 0 6
46389: PUSH
46390: LD_INT 0
46392: ST_TO_ADDR
// case mode of 0 :
46393: LD_VAR 0 6
46397: PUSH
46398: LD_INT 0
46400: DOUBLE
46401: EQUAL
46402: IFTRUE 46406
46404: GO 57859
46406: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46407: LD_ADDR_VAR 0 11
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46600: LD_ADDR_VAR 0 12
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46796: LD_ADDR_VAR 0 13
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46995: LD_ADDR_VAR 0 14
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 3
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 3
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47191: LD_ADDR_VAR 0 15
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47384: LD_ADDR_VAR 0 16
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47577: LD_ADDR_VAR 0 17
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47807: LD_ADDR_VAR 0 18
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48037: LD_ADDR_VAR 0 19
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48267: LD_ADDR_VAR 0 20
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48497: LD_ADDR_VAR 0 21
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48727: LD_ADDR_VAR 0 22
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48957: LD_ADDR_VAR 0 23
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49237: LD_ADDR_VAR 0 24
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49513: LD_ADDR_VAR 0 25
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49787: LD_ADDR_VAR 0 26
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50063: LD_ADDR_VAR 0 27
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50343: LD_ADDR_VAR 0 28
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50625: LD_ADDR_VAR 0 29
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50904: LD_ADDR_VAR 0 30
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51182: LD_ADDR_VAR 0 31
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51460: LD_ADDR_VAR 0 32
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51738: LD_ADDR_VAR 0 33
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52017: LD_ADDR_VAR 0 34
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52297: LD_ADDR_VAR 0 35
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52409: LD_ADDR_VAR 0 36
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52521: LD_ADDR_VAR 0 37
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52633: LD_ADDR_VAR 0 38
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52745: LD_ADDR_VAR 0 39
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52857: LD_ADDR_VAR 0 40
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52969: LD_ADDR_VAR 0 41
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 3
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53319: LD_ADDR_VAR 0 42
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53669: LD_ADDR_VAR 0 43
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54017: LD_ADDR_VAR 0 44
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: LD_INT 3
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54367: LD_ADDR_VAR 0 45
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: NEG
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54717: LD_ADDR_VAR 0 46
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: NEG
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55065: LD_ADDR_VAR 0 47
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55216: LD_ADDR_VAR 0 48
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55363: LD_ADDR_VAR 0 49
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55507: LD_ADDR_VAR 0 50
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55651: LD_ADDR_VAR 0 51
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55798: LD_ADDR_VAR 0 52
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55949: LD_ADDR_VAR 0 53
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56179: LD_ADDR_VAR 0 54
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56409: LD_ADDR_VAR 0 55
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56639: LD_ADDR_VAR 0 56
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56869: LD_ADDR_VAR 0 57
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57099: LD_ADDR_VAR 0 58
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57329: LD_ADDR_VAR 0 59
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57417: LD_ADDR_VAR 0 60
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57505: LD_ADDR_VAR 0 61
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57593: LD_ADDR_VAR 0 62
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57681: LD_ADDR_VAR 0 63
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57769: LD_ADDR_VAR 0 64
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// end ; 1 :
57857: GO 63754
57859: LD_INT 1
57861: DOUBLE
57862: EQUAL
57863: IFTRUE 57867
57865: GO 60490
57867: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57868: LD_ADDR_VAR 0 11
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57912: LD_ADDR_VAR 0 12
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57953: LD_ADDR_VAR 0 13
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57993: LD_ADDR_VAR 0 14
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58034: LD_ADDR_VAR 0 15
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58078: LD_ADDR_VAR 0 16
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58124: LD_ADDR_VAR 0 17
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58168: LD_ADDR_VAR 0 18
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58209: LD_ADDR_VAR 0 19
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58249: LD_ADDR_VAR 0 20
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58290: LD_ADDR_VAR 0 21
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: NEG
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58334: LD_ADDR_VAR 0 22
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58380: LD_ADDR_VAR 0 23
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 4
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58424: LD_ADDR_VAR 0 24
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58465: LD_ADDR_VAR 0 25
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 4
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58505: LD_ADDR_VAR 0 26
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 4
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58546: LD_ADDR_VAR 0 27
58550: PUSH
58551: LD_INT 3
58553: NEG
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 4
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58590: LD_ADDR_VAR 0 28
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: LD_INT 4
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58636: LD_ADDR_VAR 0 29
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 3
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 4
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 4
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 5
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 5
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 6
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 6
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58791: LD_ADDR_VAR 0 30
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 4
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 4
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 6
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 6
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58934: LD_ADDR_VAR 0 31
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 4
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: LD_INT 4
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 5
59001: PUSH
59002: LD_INT 4
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 5
59011: PUSH
59012: LD_INT 5
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: PUSH
59022: LD_INT 5
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 6
59031: PUSH
59032: LD_INT 5
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 6
59041: PUSH
59042: LD_INT 6
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: LD_INT 6
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59073: LD_ADDR_VAR 0 32
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 4
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 5
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 5
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 6
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 6
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59216: LD_ADDR_VAR 0 33
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 3
59257: NEG
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 4
59268: NEG
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 4
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 5
59302: NEG
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 5
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 5
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 6
59336: NEG
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 6
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59371: LD_ADDR_VAR 0 34
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 3
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 4
59438: NEG
59439: PUSH
59440: LD_INT 4
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 5
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 5
59462: NEG
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 5
59474: NEG
59475: PUSH
59476: LD_INT 5
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: LD_INT 6
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 6
59498: NEG
59499: PUSH
59500: LD_INT 5
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 6
59510: NEG
59511: PUSH
59512: LD_INT 6
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59534: LD_ADDR_VAR 0 41
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59578: LD_ADDR_VAR 0 42
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59619: LD_ADDR_VAR 0 43
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59659: LD_ADDR_VAR 0 44
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59700: LD_ADDR_VAR 0 45
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59744: LD_ADDR_VAR 0 46
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 3
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59790: LD_ADDR_VAR 0 47
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59823: LD_ADDR_VAR 0 48
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59854: LD_ADDR_VAR 0 49
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59883: LD_ADDR_VAR 0 50
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 3
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59912: LD_ADDR_VAR 0 51
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59943: LD_ADDR_VAR 0 52
59947: PUSH
59948: LD_INT 3
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 3
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59976: LD_ADDR_VAR 0 53
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60020: LD_ADDR_VAR 0 54
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60061: LD_ADDR_VAR 0 55
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: LIST
60100: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60101: LD_ADDR_VAR 0 56
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60142: LD_ADDR_VAR 0 57
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 3
60160: NEG
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60186: LD_ADDR_VAR 0 58
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60232: LD_ADDR_VAR 0 59
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60276: LD_ADDR_VAR 0 60
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60317: LD_ADDR_VAR 0 61
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60357: LD_ADDR_VAR 0 62
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60398: LD_ADDR_VAR 0 63
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60442: LD_ADDR_VAR 0 64
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// end ; 2 :
60488: GO 63754
60490: LD_INT 2
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60498
60496: GO 63753
60498: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60499: LD_ADDR_VAR 0 29
60503: PUSH
60504: LD_INT 4
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 4
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 5
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 5
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 5
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 4
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: LD_INT 4
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 4
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 5
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 5
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 4
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 5
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 4
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 4
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 4
60884: NEG
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: LD_INT 5
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 5
60944: NEG
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 5
60956: NEG
60957: PUSH
60958: LD_INT 5
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: LD_INT 5
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 5
60980: NEG
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61037: LD_ADDR_VAR 0 30
61041: PUSH
61042: LD_INT 4
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 5
61064: PUSH
61065: LD_INT 4
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 5
61074: PUSH
61075: LD_INT 5
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 5
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: LD_INT 5
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: LD_INT 4
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 4
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: LD_INT 4
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: NEG
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 4
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 4
61272: NEG
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 5
61283: NEG
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 5
61294: NEG
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 5
61306: NEG
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: LD_INT 3
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: LD_INT 4
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: NEG
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: LD_INT 4
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 4
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 4
61425: NEG
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 5
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 3
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 4
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 5
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: LD_INT 3
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: LD_INT 5
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61584: LD_ADDR_VAR 0 31
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 4
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 5
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 5
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 4
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 5
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 4
61751: NEG
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 4
61763: NEG
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 4
61786: NEG
61787: PUSH
61788: LD_INT 4
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: LD_INT 5
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: LD_INT 4
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 5
61846: NEG
61847: PUSH
61848: LD_INT 4
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 5
61858: NEG
61859: PUSH
61860: LD_INT 5
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: LD_INT 5
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 5
61882: NEG
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 4
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 5
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 5
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 4
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 5
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62134: LD_ADDR_VAR 0 32
62138: PUSH
62139: LD_INT 4
62141: NEG
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 4
62152: NEG
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 4
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 5
62197: NEG
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 5
62208: NEG
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 5
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 3
62232: NEG
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: NEG
62244: PUSH
62245: LD_INT 3
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: NEG
62256: PUSH
62257: LD_INT 4
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 4
62303: NEG
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: LD_INT 4
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 4
62339: NEG
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: LD_INT 4
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 5
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 4
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: LD_INT 4
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: LD_INT 5
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 2
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 4
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 4
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 4
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: PUSH
62567: LD_INT 4
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 5
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: LD_INT 5
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: LD_INT 4
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 5
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 5
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62681: LD_ADDR_VAR 0 33
62685: PUSH
62686: LD_INT 4
62688: NEG
62689: PUSH
62690: LD_INT 4
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: NEG
62701: PUSH
62702: LD_INT 5
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: LD_INT 4
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 4
62736: NEG
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 5
62748: NEG
62749: PUSH
62750: LD_INT 4
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 5
62760: NEG
62761: PUSH
62762: LD_INT 5
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: LD_INT 5
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 5
62784: NEG
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 4
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 3
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 2
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 4
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: NEG
62887: PUSH
62888: LD_INT 4
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 4
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 5
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 5
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 4
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 5
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 4
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 4
63021: PUSH
63022: LD_INT 4
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: LD_INT 4
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 4
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: LD_INT 5
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 5
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63219: LD_ADDR_VAR 0 34
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 4
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: LD_INT 5
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 4
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 4
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: LD_INT 5
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 3
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 2
63316: NEG
63317: PUSH
63318: LD_INT 5
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 3
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 4
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 3
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 2
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 4
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 4
63421: PUSH
63422: LD_INT 4
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 4
63431: PUSH
63432: LD_INT 3
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 5
63441: PUSH
63442: LD_INT 4
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 5
63451: PUSH
63452: LD_INT 5
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 4
63461: PUSH
63462: LD_INT 5
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 3
63471: PUSH
63472: LD_INT 4
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 5
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 5
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 4
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 4
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 4
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: NEG
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 4
63615: NEG
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 4
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 5
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 5
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 5
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: ST_TO_ADDR
// end ; end ;
63751: GO 63754
63753: POP
// case btype of b_depot , b_warehouse :
63754: LD_VAR 0 1
63758: PUSH
63759: LD_INT 0
63761: DOUBLE
63762: EQUAL
63763: IFTRUE 63773
63765: LD_INT 1
63767: DOUBLE
63768: EQUAL
63769: IFTRUE 63773
63771: GO 63974
63773: POP
// case nation of nation_american :
63774: LD_VAR 0 5
63778: PUSH
63779: LD_INT 1
63781: DOUBLE
63782: EQUAL
63783: IFTRUE 63787
63785: GO 63843
63787: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63788: LD_ADDR_VAR 0 9
63792: PUSH
63793: LD_VAR 0 11
63797: PUSH
63798: LD_VAR 0 12
63802: PUSH
63803: LD_VAR 0 13
63807: PUSH
63808: LD_VAR 0 14
63812: PUSH
63813: LD_VAR 0 15
63817: PUSH
63818: LD_VAR 0 16
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: PUSH
63831: LD_VAR 0 4
63835: PUSH
63836: LD_INT 1
63838: PLUS
63839: ARRAY
63840: ST_TO_ADDR
63841: GO 63972
63843: LD_INT 2
63845: DOUBLE
63846: EQUAL
63847: IFTRUE 63851
63849: GO 63907
63851: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63852: LD_ADDR_VAR 0 9
63856: PUSH
63857: LD_VAR 0 17
63861: PUSH
63862: LD_VAR 0 18
63866: PUSH
63867: LD_VAR 0 19
63871: PUSH
63872: LD_VAR 0 20
63876: PUSH
63877: LD_VAR 0 21
63881: PUSH
63882: LD_VAR 0 22
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 4
63899: PUSH
63900: LD_INT 1
63902: PLUS
63903: ARRAY
63904: ST_TO_ADDR
63905: GO 63972
63907: LD_INT 3
63909: DOUBLE
63910: EQUAL
63911: IFTRUE 63915
63913: GO 63971
63915: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63916: LD_ADDR_VAR 0 9
63920: PUSH
63921: LD_VAR 0 23
63925: PUSH
63926: LD_VAR 0 24
63930: PUSH
63931: LD_VAR 0 25
63935: PUSH
63936: LD_VAR 0 26
63940: PUSH
63941: LD_VAR 0 27
63945: PUSH
63946: LD_VAR 0 28
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 4
63963: PUSH
63964: LD_INT 1
63966: PLUS
63967: ARRAY
63968: ST_TO_ADDR
63969: GO 63972
63971: POP
63972: GO 64527
63974: LD_INT 2
63976: DOUBLE
63977: EQUAL
63978: IFTRUE 63988
63980: LD_INT 3
63982: DOUBLE
63983: EQUAL
63984: IFTRUE 63988
63986: GO 64044
63988: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63989: LD_ADDR_VAR 0 9
63993: PUSH
63994: LD_VAR 0 29
63998: PUSH
63999: LD_VAR 0 30
64003: PUSH
64004: LD_VAR 0 31
64008: PUSH
64009: LD_VAR 0 32
64013: PUSH
64014: LD_VAR 0 33
64018: PUSH
64019: LD_VAR 0 34
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: PUSH
64032: LD_VAR 0 4
64036: PUSH
64037: LD_INT 1
64039: PLUS
64040: ARRAY
64041: ST_TO_ADDR
64042: GO 64527
64044: LD_INT 16
64046: DOUBLE
64047: EQUAL
64048: IFTRUE 64106
64050: LD_INT 17
64052: DOUBLE
64053: EQUAL
64054: IFTRUE 64106
64056: LD_INT 18
64058: DOUBLE
64059: EQUAL
64060: IFTRUE 64106
64062: LD_INT 19
64064: DOUBLE
64065: EQUAL
64066: IFTRUE 64106
64068: LD_INT 22
64070: DOUBLE
64071: EQUAL
64072: IFTRUE 64106
64074: LD_INT 20
64076: DOUBLE
64077: EQUAL
64078: IFTRUE 64106
64080: LD_INT 21
64082: DOUBLE
64083: EQUAL
64084: IFTRUE 64106
64086: LD_INT 23
64088: DOUBLE
64089: EQUAL
64090: IFTRUE 64106
64092: LD_INT 24
64094: DOUBLE
64095: EQUAL
64096: IFTRUE 64106
64098: LD_INT 25
64100: DOUBLE
64101: EQUAL
64102: IFTRUE 64106
64104: GO 64162
64106: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64107: LD_ADDR_VAR 0 9
64111: PUSH
64112: LD_VAR 0 35
64116: PUSH
64117: LD_VAR 0 36
64121: PUSH
64122: LD_VAR 0 37
64126: PUSH
64127: LD_VAR 0 38
64131: PUSH
64132: LD_VAR 0 39
64136: PUSH
64137: LD_VAR 0 40
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: PUSH
64150: LD_VAR 0 4
64154: PUSH
64155: LD_INT 1
64157: PLUS
64158: ARRAY
64159: ST_TO_ADDR
64160: GO 64527
64162: LD_INT 6
64164: DOUBLE
64165: EQUAL
64166: IFTRUE 64218
64168: LD_INT 7
64170: DOUBLE
64171: EQUAL
64172: IFTRUE 64218
64174: LD_INT 8
64176: DOUBLE
64177: EQUAL
64178: IFTRUE 64218
64180: LD_INT 13
64182: DOUBLE
64183: EQUAL
64184: IFTRUE 64218
64186: LD_INT 12
64188: DOUBLE
64189: EQUAL
64190: IFTRUE 64218
64192: LD_INT 15
64194: DOUBLE
64195: EQUAL
64196: IFTRUE 64218
64198: LD_INT 11
64200: DOUBLE
64201: EQUAL
64202: IFTRUE 64218
64204: LD_INT 14
64206: DOUBLE
64207: EQUAL
64208: IFTRUE 64218
64210: LD_INT 10
64212: DOUBLE
64213: EQUAL
64214: IFTRUE 64218
64216: GO 64274
64218: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64219: LD_ADDR_VAR 0 9
64223: PUSH
64224: LD_VAR 0 41
64228: PUSH
64229: LD_VAR 0 42
64233: PUSH
64234: LD_VAR 0 43
64238: PUSH
64239: LD_VAR 0 44
64243: PUSH
64244: LD_VAR 0 45
64248: PUSH
64249: LD_VAR 0 46
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: PUSH
64262: LD_VAR 0 4
64266: PUSH
64267: LD_INT 1
64269: PLUS
64270: ARRAY
64271: ST_TO_ADDR
64272: GO 64527
64274: LD_INT 36
64276: DOUBLE
64277: EQUAL
64278: IFTRUE 64282
64280: GO 64338
64282: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64283: LD_ADDR_VAR 0 9
64287: PUSH
64288: LD_VAR 0 47
64292: PUSH
64293: LD_VAR 0 48
64297: PUSH
64298: LD_VAR 0 49
64302: PUSH
64303: LD_VAR 0 50
64307: PUSH
64308: LD_VAR 0 51
64312: PUSH
64313: LD_VAR 0 52
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: PUSH
64326: LD_VAR 0 4
64330: PUSH
64331: LD_INT 1
64333: PLUS
64334: ARRAY
64335: ST_TO_ADDR
64336: GO 64527
64338: LD_INT 4
64340: DOUBLE
64341: EQUAL
64342: IFTRUE 64364
64344: LD_INT 5
64346: DOUBLE
64347: EQUAL
64348: IFTRUE 64364
64350: LD_INT 34
64352: DOUBLE
64353: EQUAL
64354: IFTRUE 64364
64356: LD_INT 37
64358: DOUBLE
64359: EQUAL
64360: IFTRUE 64364
64362: GO 64420
64364: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64365: LD_ADDR_VAR 0 9
64369: PUSH
64370: LD_VAR 0 53
64374: PUSH
64375: LD_VAR 0 54
64379: PUSH
64380: LD_VAR 0 55
64384: PUSH
64385: LD_VAR 0 56
64389: PUSH
64390: LD_VAR 0 57
64394: PUSH
64395: LD_VAR 0 58
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: LD_VAR 0 4
64412: PUSH
64413: LD_INT 1
64415: PLUS
64416: ARRAY
64417: ST_TO_ADDR
64418: GO 64527
64420: LD_INT 31
64422: DOUBLE
64423: EQUAL
64424: IFTRUE 64470
64426: LD_INT 32
64428: DOUBLE
64429: EQUAL
64430: IFTRUE 64470
64432: LD_INT 33
64434: DOUBLE
64435: EQUAL
64436: IFTRUE 64470
64438: LD_INT 27
64440: DOUBLE
64441: EQUAL
64442: IFTRUE 64470
64444: LD_INT 26
64446: DOUBLE
64447: EQUAL
64448: IFTRUE 64470
64450: LD_INT 28
64452: DOUBLE
64453: EQUAL
64454: IFTRUE 64470
64456: LD_INT 29
64458: DOUBLE
64459: EQUAL
64460: IFTRUE 64470
64462: LD_INT 30
64464: DOUBLE
64465: EQUAL
64466: IFTRUE 64470
64468: GO 64526
64470: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64471: LD_ADDR_VAR 0 9
64475: PUSH
64476: LD_VAR 0 59
64480: PUSH
64481: LD_VAR 0 60
64485: PUSH
64486: LD_VAR 0 61
64490: PUSH
64491: LD_VAR 0 62
64495: PUSH
64496: LD_VAR 0 63
64500: PUSH
64501: LD_VAR 0 64
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: PUSH
64514: LD_VAR 0 4
64518: PUSH
64519: LD_INT 1
64521: PLUS
64522: ARRAY
64523: ST_TO_ADDR
64524: GO 64527
64526: POP
// temp_list2 = [ ] ;
64527: LD_ADDR_VAR 0 10
64531: PUSH
64532: EMPTY
64533: ST_TO_ADDR
// for i in temp_list do
64534: LD_ADDR_VAR 0 8
64538: PUSH
64539: LD_VAR 0 9
64543: PUSH
64544: FOR_IN
64545: IFFALSE 64597
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64547: LD_ADDR_VAR 0 10
64551: PUSH
64552: LD_VAR 0 10
64556: PUSH
64557: LD_VAR 0 8
64561: PUSH
64562: LD_INT 1
64564: ARRAY
64565: PUSH
64566: LD_VAR 0 2
64570: PLUS
64571: PUSH
64572: LD_VAR 0 8
64576: PUSH
64577: LD_INT 2
64579: ARRAY
64580: PUSH
64581: LD_VAR 0 3
64585: PLUS
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: EMPTY
64592: LIST
64593: ADD
64594: ST_TO_ADDR
64595: GO 64544
64597: POP
64598: POP
// result = temp_list2 ;
64599: LD_ADDR_VAR 0 7
64603: PUSH
64604: LD_VAR 0 10
64608: ST_TO_ADDR
// end ;
64609: LD_VAR 0 7
64613: RET
// export function EnemyInRange ( unit , dist ) ; begin
64614: LD_INT 0
64616: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64617: LD_ADDR_VAR 0 3
64621: PUSH
64622: LD_VAR 0 1
64626: PPUSH
64627: CALL_OW 255
64631: PPUSH
64632: LD_VAR 0 1
64636: PPUSH
64637: CALL_OW 250
64641: PPUSH
64642: LD_VAR 0 1
64646: PPUSH
64647: CALL_OW 251
64651: PPUSH
64652: LD_VAR 0 2
64656: PPUSH
64657: CALL 37987 0 4
64661: PUSH
64662: LD_INT 4
64664: ARRAY
64665: ST_TO_ADDR
// end ;
64666: LD_VAR 0 3
64670: RET
// export function PlayerSeeMe ( unit ) ; begin
64671: LD_INT 0
64673: PPUSH
// result := See ( your_side , unit ) ;
64674: LD_ADDR_VAR 0 2
64678: PUSH
64679: LD_OWVAR 2
64683: PPUSH
64684: LD_VAR 0 1
64688: PPUSH
64689: CALL_OW 292
64693: ST_TO_ADDR
// end ;
64694: LD_VAR 0 2
64698: RET
// export function ReverseDir ( unit ) ; begin
64699: LD_INT 0
64701: PPUSH
// if not unit then
64702: LD_VAR 0 1
64706: NOT
64707: IFFALSE 64711
// exit ;
64709: GO 64734
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64711: LD_ADDR_VAR 0 2
64715: PUSH
64716: LD_VAR 0 1
64720: PPUSH
64721: CALL_OW 254
64725: PUSH
64726: LD_INT 3
64728: PLUS
64729: PUSH
64730: LD_INT 6
64732: MOD
64733: ST_TO_ADDR
// end ;
64734: LD_VAR 0 2
64738: RET
// export function ReverseArray ( array ) ; var i ; begin
64739: LD_INT 0
64741: PPUSH
64742: PPUSH
// if not array then
64743: LD_VAR 0 1
64747: NOT
64748: IFFALSE 64752
// exit ;
64750: GO 64807
// result := [ ] ;
64752: LD_ADDR_VAR 0 2
64756: PUSH
64757: EMPTY
64758: ST_TO_ADDR
// for i := array downto 1 do
64759: LD_ADDR_VAR 0 3
64763: PUSH
64764: DOUBLE
64765: LD_VAR 0 1
64769: INC
64770: ST_TO_ADDR
64771: LD_INT 1
64773: PUSH
64774: FOR_DOWNTO
64775: IFFALSE 64805
// result := Join ( result , array [ i ] ) ;
64777: LD_ADDR_VAR 0 2
64781: PUSH
64782: LD_VAR 0 2
64786: PPUSH
64787: LD_VAR 0 1
64791: PUSH
64792: LD_VAR 0 3
64796: ARRAY
64797: PPUSH
64798: CALL 69452 0 2
64802: ST_TO_ADDR
64803: GO 64774
64805: POP
64806: POP
// end ;
64807: LD_VAR 0 2
64811: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64812: LD_INT 0
64814: PPUSH
64815: PPUSH
64816: PPUSH
64817: PPUSH
64818: PPUSH
64819: PPUSH
// if not unit or not hexes then
64820: LD_VAR 0 1
64824: NOT
64825: PUSH
64826: LD_VAR 0 2
64830: NOT
64831: OR
64832: IFFALSE 64836
// exit ;
64834: GO 64959
// dist := 9999 ;
64836: LD_ADDR_VAR 0 5
64840: PUSH
64841: LD_INT 9999
64843: ST_TO_ADDR
// for i = 1 to hexes do
64844: LD_ADDR_VAR 0 4
64848: PUSH
64849: DOUBLE
64850: LD_INT 1
64852: DEC
64853: ST_TO_ADDR
64854: LD_VAR 0 2
64858: PUSH
64859: FOR_TO
64860: IFFALSE 64947
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64862: LD_ADDR_VAR 0 6
64866: PUSH
64867: LD_VAR 0 1
64871: PPUSH
64872: LD_VAR 0 2
64876: PUSH
64877: LD_VAR 0 4
64881: ARRAY
64882: PUSH
64883: LD_INT 1
64885: ARRAY
64886: PPUSH
64887: LD_VAR 0 2
64891: PUSH
64892: LD_VAR 0 4
64896: ARRAY
64897: PUSH
64898: LD_INT 2
64900: ARRAY
64901: PPUSH
64902: CALL_OW 297
64906: ST_TO_ADDR
// if tdist < dist then
64907: LD_VAR 0 6
64911: PUSH
64912: LD_VAR 0 5
64916: LESS
64917: IFFALSE 64945
// begin hex := hexes [ i ] ;
64919: LD_ADDR_VAR 0 8
64923: PUSH
64924: LD_VAR 0 2
64928: PUSH
64929: LD_VAR 0 4
64933: ARRAY
64934: ST_TO_ADDR
// dist := tdist ;
64935: LD_ADDR_VAR 0 5
64939: PUSH
64940: LD_VAR 0 6
64944: ST_TO_ADDR
// end ; end ;
64945: GO 64859
64947: POP
64948: POP
// result := hex ;
64949: LD_ADDR_VAR 0 3
64953: PUSH
64954: LD_VAR 0 8
64958: ST_TO_ADDR
// end ;
64959: LD_VAR 0 3
64963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64968: LD_VAR 0 1
64972: NOT
64973: PUSH
64974: LD_VAR 0 1
64978: PUSH
64979: LD_INT 21
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 23
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PPUSH
65003: CALL_OW 69
65007: IN
65008: NOT
65009: OR
65010: IFFALSE 65014
// exit ;
65012: GO 65061
// for i = 1 to 3 do
65014: LD_ADDR_VAR 0 3
65018: PUSH
65019: DOUBLE
65020: LD_INT 1
65022: DEC
65023: ST_TO_ADDR
65024: LD_INT 3
65026: PUSH
65027: FOR_TO
65028: IFFALSE 65059
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 250
65039: PPUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: CALL_OW 251
65049: PPUSH
65050: LD_INT 1
65052: PPUSH
65053: CALL_OW 453
65057: GO 65027
65059: POP
65060: POP
// end ;
65061: LD_VAR 0 2
65065: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65066: LD_INT 0
65068: PPUSH
65069: PPUSH
65070: PPUSH
65071: PPUSH
65072: PPUSH
65073: PPUSH
// if not unit or not enemy_unit then
65074: LD_VAR 0 1
65078: NOT
65079: PUSH
65080: LD_VAR 0 2
65084: NOT
65085: OR
65086: IFFALSE 65090
// exit ;
65088: GO 65557
// if GetLives ( i ) < 250 then
65090: LD_VAR 0 4
65094: PPUSH
65095: CALL_OW 256
65099: PUSH
65100: LD_INT 250
65102: LESS
65103: IFFALSE 65116
// begin ComAutodestruct ( i ) ;
65105: LD_VAR 0 4
65109: PPUSH
65110: CALL 64964 0 1
// exit ;
65114: GO 65557
// end ; x := GetX ( enemy_unit ) ;
65116: LD_ADDR_VAR 0 7
65120: PUSH
65121: LD_VAR 0 2
65125: PPUSH
65126: CALL_OW 250
65130: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65131: LD_ADDR_VAR 0 8
65135: PUSH
65136: LD_VAR 0 2
65140: PPUSH
65141: CALL_OW 251
65145: ST_TO_ADDR
// if not x or not y then
65146: LD_VAR 0 7
65150: NOT
65151: PUSH
65152: LD_VAR 0 8
65156: NOT
65157: OR
65158: IFFALSE 65162
// exit ;
65160: GO 65557
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65162: LD_ADDR_VAR 0 6
65166: PUSH
65167: LD_VAR 0 7
65171: PPUSH
65172: LD_INT 0
65174: PPUSH
65175: LD_INT 4
65177: PPUSH
65178: CALL_OW 272
65182: PUSH
65183: LD_VAR 0 8
65187: PPUSH
65188: LD_INT 0
65190: PPUSH
65191: LD_INT 4
65193: PPUSH
65194: CALL_OW 273
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_VAR 0 7
65207: PPUSH
65208: LD_INT 1
65210: PPUSH
65211: LD_INT 4
65213: PPUSH
65214: CALL_OW 272
65218: PUSH
65219: LD_VAR 0 8
65223: PPUSH
65224: LD_INT 1
65226: PPUSH
65227: LD_INT 4
65229: PPUSH
65230: CALL_OW 273
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_VAR 0 7
65243: PPUSH
65244: LD_INT 2
65246: PPUSH
65247: LD_INT 4
65249: PPUSH
65250: CALL_OW 272
65254: PUSH
65255: LD_VAR 0 8
65259: PPUSH
65260: LD_INT 2
65262: PPUSH
65263: LD_INT 4
65265: PPUSH
65266: CALL_OW 273
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_VAR 0 7
65279: PPUSH
65280: LD_INT 3
65282: PPUSH
65283: LD_INT 4
65285: PPUSH
65286: CALL_OW 272
65290: PUSH
65291: LD_VAR 0 8
65295: PPUSH
65296: LD_INT 3
65298: PPUSH
65299: LD_INT 4
65301: PPUSH
65302: CALL_OW 273
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_VAR 0 7
65315: PPUSH
65316: LD_INT 4
65318: PPUSH
65319: LD_INT 4
65321: PPUSH
65322: CALL_OW 272
65326: PUSH
65327: LD_VAR 0 8
65331: PPUSH
65332: LD_INT 4
65334: PPUSH
65335: LD_INT 4
65337: PPUSH
65338: CALL_OW 273
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_VAR 0 7
65351: PPUSH
65352: LD_INT 5
65354: PPUSH
65355: LD_INT 4
65357: PPUSH
65358: CALL_OW 272
65362: PUSH
65363: LD_VAR 0 8
65367: PPUSH
65368: LD_INT 5
65370: PPUSH
65371: LD_INT 4
65373: PPUSH
65374: CALL_OW 273
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: ST_TO_ADDR
// for i = tmp downto 1 do
65391: LD_ADDR_VAR 0 4
65395: PUSH
65396: DOUBLE
65397: LD_VAR 0 6
65401: INC
65402: ST_TO_ADDR
65403: LD_INT 1
65405: PUSH
65406: FOR_DOWNTO
65407: IFFALSE 65508
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65409: LD_VAR 0 6
65413: PUSH
65414: LD_VAR 0 4
65418: ARRAY
65419: PUSH
65420: LD_INT 1
65422: ARRAY
65423: PPUSH
65424: LD_VAR 0 6
65428: PUSH
65429: LD_VAR 0 4
65433: ARRAY
65434: PUSH
65435: LD_INT 2
65437: ARRAY
65438: PPUSH
65439: CALL_OW 488
65443: NOT
65444: PUSH
65445: LD_VAR 0 6
65449: PUSH
65450: LD_VAR 0 4
65454: ARRAY
65455: PUSH
65456: LD_INT 1
65458: ARRAY
65459: PPUSH
65460: LD_VAR 0 6
65464: PUSH
65465: LD_VAR 0 4
65469: ARRAY
65470: PUSH
65471: LD_INT 2
65473: ARRAY
65474: PPUSH
65475: CALL_OW 428
65479: PUSH
65480: LD_INT 0
65482: NONEQUAL
65483: OR
65484: IFFALSE 65506
// tmp := Delete ( tmp , i ) ;
65486: LD_ADDR_VAR 0 6
65490: PUSH
65491: LD_VAR 0 6
65495: PPUSH
65496: LD_VAR 0 4
65500: PPUSH
65501: CALL_OW 3
65505: ST_TO_ADDR
65506: GO 65406
65508: POP
65509: POP
// j := GetClosestHex ( unit , tmp ) ;
65510: LD_ADDR_VAR 0 5
65514: PUSH
65515: LD_VAR 0 1
65519: PPUSH
65520: LD_VAR 0 6
65524: PPUSH
65525: CALL 64812 0 2
65529: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65530: LD_VAR 0 1
65534: PPUSH
65535: LD_VAR 0 5
65539: PUSH
65540: LD_INT 1
65542: ARRAY
65543: PPUSH
65544: LD_VAR 0 5
65548: PUSH
65549: LD_INT 2
65551: ARRAY
65552: PPUSH
65553: CALL_OW 111
// end ;
65557: LD_VAR 0 3
65561: RET
// export function PrepareApemanSoldier ( ) ; begin
65562: LD_INT 0
65564: PPUSH
// uc_nation := 0 ;
65565: LD_ADDR_OWVAR 21
65569: PUSH
65570: LD_INT 0
65572: ST_TO_ADDR
// hc_sex := sex_male ;
65573: LD_ADDR_OWVAR 27
65577: PUSH
65578: LD_INT 1
65580: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65581: LD_ADDR_OWVAR 28
65585: PUSH
65586: LD_INT 15
65588: ST_TO_ADDR
// hc_gallery :=  ;
65589: LD_ADDR_OWVAR 33
65593: PUSH
65594: LD_STRING 
65596: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65597: LD_ADDR_OWVAR 31
65601: PUSH
65602: LD_INT 0
65604: PPUSH
65605: LD_INT 3
65607: PPUSH
65608: CALL_OW 12
65612: PUSH
65613: LD_INT 0
65615: PPUSH
65616: LD_INT 3
65618: PPUSH
65619: CALL_OW 12
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// end ;
65636: LD_VAR 0 1
65640: RET
// export function PrepareApemanEngineer ( ) ; begin
65641: LD_INT 0
65643: PPUSH
// uc_nation := 0 ;
65644: LD_ADDR_OWVAR 21
65648: PUSH
65649: LD_INT 0
65651: ST_TO_ADDR
// hc_sex := sex_male ;
65652: LD_ADDR_OWVAR 27
65656: PUSH
65657: LD_INT 1
65659: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65660: LD_ADDR_OWVAR 28
65664: PUSH
65665: LD_INT 16
65667: ST_TO_ADDR
// hc_gallery :=  ;
65668: LD_ADDR_OWVAR 33
65672: PUSH
65673: LD_STRING 
65675: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65676: LD_ADDR_OWVAR 31
65680: PUSH
65681: LD_INT 0
65683: PPUSH
65684: LD_INT 3
65686: PPUSH
65687: CALL_OW 12
65691: PUSH
65692: LD_INT 0
65694: PPUSH
65695: LD_INT 3
65697: PPUSH
65698: CALL_OW 12
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: ST_TO_ADDR
// end ;
65715: LD_VAR 0 1
65719: RET
// export function PrepareApeman ( agressivity ) ; begin
65720: LD_INT 0
65722: PPUSH
// uc_side := 0 ;
65723: LD_ADDR_OWVAR 20
65727: PUSH
65728: LD_INT 0
65730: ST_TO_ADDR
// uc_nation := 0 ;
65731: LD_ADDR_OWVAR 21
65735: PUSH
65736: LD_INT 0
65738: ST_TO_ADDR
// hc_sex := sex_male ;
65739: LD_ADDR_OWVAR 27
65743: PUSH
65744: LD_INT 1
65746: ST_TO_ADDR
// hc_class := class_apeman ;
65747: LD_ADDR_OWVAR 28
65751: PUSH
65752: LD_INT 12
65754: ST_TO_ADDR
// hc_gallery :=  ;
65755: LD_ADDR_OWVAR 33
65759: PUSH
65760: LD_STRING 
65762: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65763: LD_ADDR_OWVAR 35
65767: PUSH
65768: LD_VAR 0 1
65772: NEG
65773: PPUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: CALL_OW 12
65783: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65784: LD_ADDR_OWVAR 31
65788: PUSH
65789: LD_INT 0
65791: PPUSH
65792: LD_INT 3
65794: PPUSH
65795: CALL_OW 12
65799: PUSH
65800: LD_INT 0
65802: PPUSH
65803: LD_INT 3
65805: PPUSH
65806: CALL_OW 12
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// end ;
65823: LD_VAR 0 2
65827: RET
// export function PrepareTiger ( agressivity ) ; begin
65828: LD_INT 0
65830: PPUSH
// uc_side := 0 ;
65831: LD_ADDR_OWVAR 20
65835: PUSH
65836: LD_INT 0
65838: ST_TO_ADDR
// uc_nation := 0 ;
65839: LD_ADDR_OWVAR 21
65843: PUSH
65844: LD_INT 0
65846: ST_TO_ADDR
// hc_class := class_tiger ;
65847: LD_ADDR_OWVAR 28
65851: PUSH
65852: LD_INT 14
65854: ST_TO_ADDR
// hc_gallery :=  ;
65855: LD_ADDR_OWVAR 33
65859: PUSH
65860: LD_STRING 
65862: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65863: LD_ADDR_OWVAR 35
65867: PUSH
65868: LD_VAR 0 1
65872: NEG
65873: PPUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: CALL_OW 12
65883: ST_TO_ADDR
// end ;
65884: LD_VAR 0 2
65888: RET
// export function PrepareEnchidna ( ) ; begin
65889: LD_INT 0
65891: PPUSH
// uc_side := 0 ;
65892: LD_ADDR_OWVAR 20
65896: PUSH
65897: LD_INT 0
65899: ST_TO_ADDR
// uc_nation := 0 ;
65900: LD_ADDR_OWVAR 21
65904: PUSH
65905: LD_INT 0
65907: ST_TO_ADDR
// hc_class := class_baggie ;
65908: LD_ADDR_OWVAR 28
65912: PUSH
65913: LD_INT 13
65915: ST_TO_ADDR
// hc_gallery :=  ;
65916: LD_ADDR_OWVAR 33
65920: PUSH
65921: LD_STRING 
65923: ST_TO_ADDR
// end ;
65924: LD_VAR 0 1
65928: RET
// export function PrepareFrog ( ) ; begin
65929: LD_INT 0
65931: PPUSH
// uc_side := 0 ;
65932: LD_ADDR_OWVAR 20
65936: PUSH
65937: LD_INT 0
65939: ST_TO_ADDR
// uc_nation := 0 ;
65940: LD_ADDR_OWVAR 21
65944: PUSH
65945: LD_INT 0
65947: ST_TO_ADDR
// hc_class := class_frog ;
65948: LD_ADDR_OWVAR 28
65952: PUSH
65953: LD_INT 19
65955: ST_TO_ADDR
// hc_gallery :=  ;
65956: LD_ADDR_OWVAR 33
65960: PUSH
65961: LD_STRING 
65963: ST_TO_ADDR
// end ;
65964: LD_VAR 0 1
65968: RET
// export function PrepareFish ( ) ; begin
65969: LD_INT 0
65971: PPUSH
// uc_side := 0 ;
65972: LD_ADDR_OWVAR 20
65976: PUSH
65977: LD_INT 0
65979: ST_TO_ADDR
// uc_nation := 0 ;
65980: LD_ADDR_OWVAR 21
65984: PUSH
65985: LD_INT 0
65987: ST_TO_ADDR
// hc_class := class_fish ;
65988: LD_ADDR_OWVAR 28
65992: PUSH
65993: LD_INT 20
65995: ST_TO_ADDR
// hc_gallery :=  ;
65996: LD_ADDR_OWVAR 33
66000: PUSH
66001: LD_STRING 
66003: ST_TO_ADDR
// end ;
66004: LD_VAR 0 1
66008: RET
// export function PrepareBird ( ) ; begin
66009: LD_INT 0
66011: PPUSH
// uc_side := 0 ;
66012: LD_ADDR_OWVAR 20
66016: PUSH
66017: LD_INT 0
66019: ST_TO_ADDR
// uc_nation := 0 ;
66020: LD_ADDR_OWVAR 21
66024: PUSH
66025: LD_INT 0
66027: ST_TO_ADDR
// hc_class := class_phororhacos ;
66028: LD_ADDR_OWVAR 28
66032: PUSH
66033: LD_INT 18
66035: ST_TO_ADDR
// hc_gallery :=  ;
66036: LD_ADDR_OWVAR 33
66040: PUSH
66041: LD_STRING 
66043: ST_TO_ADDR
// end ;
66044: LD_VAR 0 1
66048: RET
// export function PrepareHorse ( ) ; begin
66049: LD_INT 0
66051: PPUSH
// uc_side := 0 ;
66052: LD_ADDR_OWVAR 20
66056: PUSH
66057: LD_INT 0
66059: ST_TO_ADDR
// uc_nation := 0 ;
66060: LD_ADDR_OWVAR 21
66064: PUSH
66065: LD_INT 0
66067: ST_TO_ADDR
// hc_class := class_horse ;
66068: LD_ADDR_OWVAR 28
66072: PUSH
66073: LD_INT 21
66075: ST_TO_ADDR
// hc_gallery :=  ;
66076: LD_ADDR_OWVAR 33
66080: PUSH
66081: LD_STRING 
66083: ST_TO_ADDR
// end ;
66084: LD_VAR 0 1
66088: RET
// export function PrepareMastodont ( ) ; begin
66089: LD_INT 0
66091: PPUSH
// uc_side := 0 ;
66092: LD_ADDR_OWVAR 20
66096: PUSH
66097: LD_INT 0
66099: ST_TO_ADDR
// uc_nation := 0 ;
66100: LD_ADDR_OWVAR 21
66104: PUSH
66105: LD_INT 0
66107: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66108: LD_ADDR_OWVAR 37
66112: PUSH
66113: LD_INT 31
66115: ST_TO_ADDR
// vc_control := control_rider ;
66116: LD_ADDR_OWVAR 38
66120: PUSH
66121: LD_INT 4
66123: ST_TO_ADDR
// end ;
66124: LD_VAR 0 1
66128: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66129: LD_INT 0
66131: PPUSH
66132: PPUSH
66133: PPUSH
// uc_side = 0 ;
66134: LD_ADDR_OWVAR 20
66138: PUSH
66139: LD_INT 0
66141: ST_TO_ADDR
// uc_nation = 0 ;
66142: LD_ADDR_OWVAR 21
66146: PUSH
66147: LD_INT 0
66149: ST_TO_ADDR
// InitHc_All ( ) ;
66150: CALL_OW 584
// InitVc ;
66154: CALL_OW 20
// if mastodonts then
66158: LD_VAR 0 6
66162: IFFALSE 66229
// for i = 1 to mastodonts do
66164: LD_ADDR_VAR 0 11
66168: PUSH
66169: DOUBLE
66170: LD_INT 1
66172: DEC
66173: ST_TO_ADDR
66174: LD_VAR 0 6
66178: PUSH
66179: FOR_TO
66180: IFFALSE 66227
// begin vc_chassis := 31 ;
66182: LD_ADDR_OWVAR 37
66186: PUSH
66187: LD_INT 31
66189: ST_TO_ADDR
// vc_control := control_rider ;
66190: LD_ADDR_OWVAR 38
66194: PUSH
66195: LD_INT 4
66197: ST_TO_ADDR
// animal := CreateVehicle ;
66198: LD_ADDR_VAR 0 12
66202: PUSH
66203: CALL_OW 45
66207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66208: LD_VAR 0 12
66212: PPUSH
66213: LD_VAR 0 8
66217: PPUSH
66218: LD_INT 0
66220: PPUSH
66221: CALL 68357 0 3
// end ;
66225: GO 66179
66227: POP
66228: POP
// if horses then
66229: LD_VAR 0 5
66233: IFFALSE 66300
// for i = 1 to horses do
66235: LD_ADDR_VAR 0 11
66239: PUSH
66240: DOUBLE
66241: LD_INT 1
66243: DEC
66244: ST_TO_ADDR
66245: LD_VAR 0 5
66249: PUSH
66250: FOR_TO
66251: IFFALSE 66298
// begin hc_class := 21 ;
66253: LD_ADDR_OWVAR 28
66257: PUSH
66258: LD_INT 21
66260: ST_TO_ADDR
// hc_gallery :=  ;
66261: LD_ADDR_OWVAR 33
66265: PUSH
66266: LD_STRING 
66268: ST_TO_ADDR
// animal := CreateHuman ;
66269: LD_ADDR_VAR 0 12
66273: PUSH
66274: CALL_OW 44
66278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66279: LD_VAR 0 12
66283: PPUSH
66284: LD_VAR 0 8
66288: PPUSH
66289: LD_INT 0
66291: PPUSH
66292: CALL 68357 0 3
// end ;
66296: GO 66250
66298: POP
66299: POP
// if birds then
66300: LD_VAR 0 1
66304: IFFALSE 66371
// for i = 1 to birds do
66306: LD_ADDR_VAR 0 11
66310: PUSH
66311: DOUBLE
66312: LD_INT 1
66314: DEC
66315: ST_TO_ADDR
66316: LD_VAR 0 1
66320: PUSH
66321: FOR_TO
66322: IFFALSE 66369
// begin hc_class := 18 ;
66324: LD_ADDR_OWVAR 28
66328: PUSH
66329: LD_INT 18
66331: ST_TO_ADDR
// hc_gallery =  ;
66332: LD_ADDR_OWVAR 33
66336: PUSH
66337: LD_STRING 
66339: ST_TO_ADDR
// animal := CreateHuman ;
66340: LD_ADDR_VAR 0 12
66344: PUSH
66345: CALL_OW 44
66349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66350: LD_VAR 0 12
66354: PPUSH
66355: LD_VAR 0 8
66359: PPUSH
66360: LD_INT 0
66362: PPUSH
66363: CALL 68357 0 3
// end ;
66367: GO 66321
66369: POP
66370: POP
// if tigers then
66371: LD_VAR 0 2
66375: IFFALSE 66459
// for i = 1 to tigers do
66377: LD_ADDR_VAR 0 11
66381: PUSH
66382: DOUBLE
66383: LD_INT 1
66385: DEC
66386: ST_TO_ADDR
66387: LD_VAR 0 2
66391: PUSH
66392: FOR_TO
66393: IFFALSE 66457
// begin hc_class = class_tiger ;
66395: LD_ADDR_OWVAR 28
66399: PUSH
66400: LD_INT 14
66402: ST_TO_ADDR
// hc_gallery =  ;
66403: LD_ADDR_OWVAR 33
66407: PUSH
66408: LD_STRING 
66410: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66411: LD_ADDR_OWVAR 35
66415: PUSH
66416: LD_INT 7
66418: NEG
66419: PPUSH
66420: LD_INT 7
66422: PPUSH
66423: CALL_OW 12
66427: ST_TO_ADDR
// animal := CreateHuman ;
66428: LD_ADDR_VAR 0 12
66432: PUSH
66433: CALL_OW 44
66437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66438: LD_VAR 0 12
66442: PPUSH
66443: LD_VAR 0 8
66447: PPUSH
66448: LD_INT 0
66450: PPUSH
66451: CALL 68357 0 3
// end ;
66455: GO 66392
66457: POP
66458: POP
// if apemans then
66459: LD_VAR 0 3
66463: IFFALSE 66586
// for i = 1 to apemans do
66465: LD_ADDR_VAR 0 11
66469: PUSH
66470: DOUBLE
66471: LD_INT 1
66473: DEC
66474: ST_TO_ADDR
66475: LD_VAR 0 3
66479: PUSH
66480: FOR_TO
66481: IFFALSE 66584
// begin hc_class = class_apeman ;
66483: LD_ADDR_OWVAR 28
66487: PUSH
66488: LD_INT 12
66490: ST_TO_ADDR
// hc_gallery =  ;
66491: LD_ADDR_OWVAR 33
66495: PUSH
66496: LD_STRING 
66498: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66499: LD_ADDR_OWVAR 35
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PPUSH
66508: LD_INT 2
66510: PPUSH
66511: CALL_OW 12
66515: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66516: LD_ADDR_OWVAR 31
66520: PUSH
66521: LD_INT 1
66523: PPUSH
66524: LD_INT 3
66526: PPUSH
66527: CALL_OW 12
66531: PUSH
66532: LD_INT 1
66534: PPUSH
66535: LD_INT 3
66537: PPUSH
66538: CALL_OW 12
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// animal := CreateHuman ;
66555: LD_ADDR_VAR 0 12
66559: PUSH
66560: CALL_OW 44
66564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66565: LD_VAR 0 12
66569: PPUSH
66570: LD_VAR 0 8
66574: PPUSH
66575: LD_INT 0
66577: PPUSH
66578: CALL 68357 0 3
// end ;
66582: GO 66480
66584: POP
66585: POP
// if enchidnas then
66586: LD_VAR 0 4
66590: IFFALSE 66657
// for i = 1 to enchidnas do
66592: LD_ADDR_VAR 0 11
66596: PUSH
66597: DOUBLE
66598: LD_INT 1
66600: DEC
66601: ST_TO_ADDR
66602: LD_VAR 0 4
66606: PUSH
66607: FOR_TO
66608: IFFALSE 66655
// begin hc_class = 13 ;
66610: LD_ADDR_OWVAR 28
66614: PUSH
66615: LD_INT 13
66617: ST_TO_ADDR
// hc_gallery =  ;
66618: LD_ADDR_OWVAR 33
66622: PUSH
66623: LD_STRING 
66625: ST_TO_ADDR
// animal := CreateHuman ;
66626: LD_ADDR_VAR 0 12
66630: PUSH
66631: CALL_OW 44
66635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66636: LD_VAR 0 12
66640: PPUSH
66641: LD_VAR 0 8
66645: PPUSH
66646: LD_INT 0
66648: PPUSH
66649: CALL 68357 0 3
// end ;
66653: GO 66607
66655: POP
66656: POP
// if fishes then
66657: LD_VAR 0 7
66661: IFFALSE 66728
// for i = 1 to fishes do
66663: LD_ADDR_VAR 0 11
66667: PUSH
66668: DOUBLE
66669: LD_INT 1
66671: DEC
66672: ST_TO_ADDR
66673: LD_VAR 0 7
66677: PUSH
66678: FOR_TO
66679: IFFALSE 66726
// begin hc_class = 20 ;
66681: LD_ADDR_OWVAR 28
66685: PUSH
66686: LD_INT 20
66688: ST_TO_ADDR
// hc_gallery =  ;
66689: LD_ADDR_OWVAR 33
66693: PUSH
66694: LD_STRING 
66696: ST_TO_ADDR
// animal := CreateHuman ;
66697: LD_ADDR_VAR 0 12
66701: PUSH
66702: CALL_OW 44
66706: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66707: LD_VAR 0 12
66711: PPUSH
66712: LD_VAR 0 9
66716: PPUSH
66717: LD_INT 0
66719: PPUSH
66720: CALL 68357 0 3
// end ;
66724: GO 66678
66726: POP
66727: POP
// end ;
66728: LD_VAR 0 10
66732: RET
// export function WantHeal ( sci , unit ) ; begin
66733: LD_INT 0
66735: PPUSH
// if GetTaskList ( sci ) > 0 then
66736: LD_VAR 0 1
66740: PPUSH
66741: CALL_OW 437
66745: PUSH
66746: LD_INT 0
66748: GREATER
66749: IFFALSE 66819
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66751: LD_VAR 0 1
66755: PPUSH
66756: CALL_OW 437
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PUSH
66765: LD_INT 1
66767: ARRAY
66768: PUSH
66769: LD_STRING l
66771: EQUAL
66772: PUSH
66773: LD_VAR 0 1
66777: PPUSH
66778: CALL_OW 437
66782: PUSH
66783: LD_INT 1
66785: ARRAY
66786: PUSH
66787: LD_INT 4
66789: ARRAY
66790: PUSH
66791: LD_VAR 0 2
66795: EQUAL
66796: AND
66797: IFFALSE 66809
// result := true else
66799: LD_ADDR_VAR 0 3
66803: PUSH
66804: LD_INT 1
66806: ST_TO_ADDR
66807: GO 66817
// result := false ;
66809: LD_ADDR_VAR 0 3
66813: PUSH
66814: LD_INT 0
66816: ST_TO_ADDR
// end else
66817: GO 66827
// result := false ;
66819: LD_ADDR_VAR 0 3
66823: PUSH
66824: LD_INT 0
66826: ST_TO_ADDR
// end ;
66827: LD_VAR 0 3
66831: RET
// export function HealTarget ( sci ) ; begin
66832: LD_INT 0
66834: PPUSH
// if not sci then
66835: LD_VAR 0 1
66839: NOT
66840: IFFALSE 66844
// exit ;
66842: GO 66909
// result := 0 ;
66844: LD_ADDR_VAR 0 2
66848: PUSH
66849: LD_INT 0
66851: ST_TO_ADDR
// if GetTaskList ( sci ) then
66852: LD_VAR 0 1
66856: PPUSH
66857: CALL_OW 437
66861: IFFALSE 66909
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66863: LD_VAR 0 1
66867: PPUSH
66868: CALL_OW 437
66872: PUSH
66873: LD_INT 1
66875: ARRAY
66876: PUSH
66877: LD_INT 1
66879: ARRAY
66880: PUSH
66881: LD_STRING l
66883: EQUAL
66884: IFFALSE 66909
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66886: LD_ADDR_VAR 0 2
66890: PUSH
66891: LD_VAR 0 1
66895: PPUSH
66896: CALL_OW 437
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PUSH
66905: LD_INT 4
66907: ARRAY
66908: ST_TO_ADDR
// end ;
66909: LD_VAR 0 2
66913: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66914: LD_INT 0
66916: PPUSH
66917: PPUSH
66918: PPUSH
66919: PPUSH
// if not base_units then
66920: LD_VAR 0 1
66924: NOT
66925: IFFALSE 66929
// exit ;
66927: GO 67016
// result := false ;
66929: LD_ADDR_VAR 0 2
66933: PUSH
66934: LD_INT 0
66936: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66937: LD_ADDR_VAR 0 5
66941: PUSH
66942: LD_VAR 0 1
66946: PPUSH
66947: LD_INT 21
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PPUSH
66957: CALL_OW 72
66961: ST_TO_ADDR
// if not tmp then
66962: LD_VAR 0 5
66966: NOT
66967: IFFALSE 66971
// exit ;
66969: GO 67016
// for i in tmp do
66971: LD_ADDR_VAR 0 3
66975: PUSH
66976: LD_VAR 0 5
66980: PUSH
66981: FOR_IN
66982: IFFALSE 67014
// begin result := EnemyInRange ( i , 22 ) ;
66984: LD_ADDR_VAR 0 2
66988: PUSH
66989: LD_VAR 0 3
66993: PPUSH
66994: LD_INT 22
66996: PPUSH
66997: CALL 64614 0 2
67001: ST_TO_ADDR
// if result then
67002: LD_VAR 0 2
67006: IFFALSE 67012
// exit ;
67008: POP
67009: POP
67010: GO 67016
// end ;
67012: GO 66981
67014: POP
67015: POP
// end ;
67016: LD_VAR 0 2
67020: RET
// export function FilterByTag ( units , tag ) ; begin
67021: LD_INT 0
67023: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67024: LD_ADDR_VAR 0 3
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: LD_INT 120
67036: PUSH
67037: LD_VAR 0 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PPUSH
67046: CALL_OW 72
67050: ST_TO_ADDR
// end ;
67051: LD_VAR 0 3
67055: RET
// export function IsDriver ( un ) ; begin
67056: LD_INT 0
67058: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67059: LD_ADDR_VAR 0 2
67063: PUSH
67064: LD_VAR 0 1
67068: PUSH
67069: LD_INT 55
67071: PUSH
67072: EMPTY
67073: LIST
67074: PPUSH
67075: CALL_OW 69
67079: IN
67080: ST_TO_ADDR
// end ;
67081: LD_VAR 0 2
67085: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67086: LD_INT 0
67088: PPUSH
67089: PPUSH
// list := [ ] ;
67090: LD_ADDR_VAR 0 5
67094: PUSH
67095: EMPTY
67096: ST_TO_ADDR
// case d of 0 :
67097: LD_VAR 0 3
67101: PUSH
67102: LD_INT 0
67104: DOUBLE
67105: EQUAL
67106: IFTRUE 67110
67108: GO 67243
67110: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67111: LD_ADDR_VAR 0 5
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: LD_INT 4
67123: MINUS
67124: PUSH
67125: LD_VAR 0 2
67129: PUSH
67130: LD_INT 4
67132: MINUS
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: PUSH
67142: LD_VAR 0 1
67146: PUSH
67147: LD_INT 3
67149: MINUS
67150: PUSH
67151: LD_VAR 0 2
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: LIST
67163: PUSH
67164: LD_VAR 0 1
67168: PUSH
67169: LD_INT 4
67171: PLUS
67172: PUSH
67173: LD_VAR 0 2
67177: PUSH
67178: LD_INT 4
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: PUSH
67186: LD_VAR 0 1
67190: PUSH
67191: LD_INT 3
67193: PLUS
67194: PUSH
67195: LD_VAR 0 2
67199: PUSH
67200: LD_INT 3
67202: PLUS
67203: PUSH
67204: LD_INT 5
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: LIST
67211: PUSH
67212: LD_VAR 0 1
67216: PUSH
67217: LD_VAR 0 2
67221: PUSH
67222: LD_INT 4
67224: PLUS
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: ST_TO_ADDR
// end ; 1 :
67241: GO 67941
67243: LD_INT 1
67245: DOUBLE
67246: EQUAL
67247: IFTRUE 67251
67249: GO 67384
67251: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67252: LD_ADDR_VAR 0 5
67256: PUSH
67257: LD_VAR 0 1
67261: PUSH
67262: LD_VAR 0 2
67266: PUSH
67267: LD_INT 4
67269: MINUS
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: PUSH
67279: LD_VAR 0 1
67283: PUSH
67284: LD_INT 3
67286: MINUS
67287: PUSH
67288: LD_VAR 0 2
67292: PUSH
67293: LD_INT 3
67295: MINUS
67296: PUSH
67297: LD_INT 2
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: LIST
67304: PUSH
67305: LD_VAR 0 1
67309: PUSH
67310: LD_INT 4
67312: MINUS
67313: PUSH
67314: LD_VAR 0 2
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: PUSH
67327: LD_VAR 0 1
67331: PUSH
67332: LD_VAR 0 2
67336: PUSH
67337: LD_INT 3
67339: PLUS
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: LIST
67348: PUSH
67349: LD_VAR 0 1
67353: PUSH
67354: LD_INT 4
67356: PLUS
67357: PUSH
67358: LD_VAR 0 2
67362: PUSH
67363: LD_INT 4
67365: PLUS
67366: PUSH
67367: LD_INT 5
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: ST_TO_ADDR
// end ; 2 :
67382: GO 67941
67384: LD_INT 2
67386: DOUBLE
67387: EQUAL
67388: IFTRUE 67392
67390: GO 67521
67392: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67393: LD_ADDR_VAR 0 5
67397: PUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_VAR 0 2
67407: PUSH
67408: LD_INT 3
67410: MINUS
67411: PUSH
67412: LD_INT 3
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: PUSH
67420: LD_VAR 0 1
67424: PUSH
67425: LD_INT 4
67427: PLUS
67428: PUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_INT 4
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: PUSH
67442: LD_VAR 0 1
67446: PUSH
67447: LD_VAR 0 2
67451: PUSH
67452: LD_INT 4
67454: PLUS
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: LIST
67463: PUSH
67464: LD_VAR 0 1
67468: PUSH
67469: LD_INT 3
67471: MINUS
67472: PUSH
67473: LD_VAR 0 2
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: LD_VAR 0 1
67490: PUSH
67491: LD_INT 4
67493: MINUS
67494: PUSH
67495: LD_VAR 0 2
67499: PUSH
67500: LD_INT 4
67502: MINUS
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: ST_TO_ADDR
// end ; 3 :
67519: GO 67941
67521: LD_INT 3
67523: DOUBLE
67524: EQUAL
67525: IFTRUE 67529
67527: GO 67662
67529: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67530: LD_ADDR_VAR 0 5
67534: PUSH
67535: LD_VAR 0 1
67539: PUSH
67540: LD_INT 3
67542: PLUS
67543: PUSH
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: PUSH
67557: LD_VAR 0 1
67561: PUSH
67562: LD_INT 4
67564: PLUS
67565: PUSH
67566: LD_VAR 0 2
67570: PUSH
67571: LD_INT 4
67573: PLUS
67574: PUSH
67575: LD_INT 5
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: PUSH
67583: LD_VAR 0 1
67587: PUSH
67588: LD_INT 4
67590: MINUS
67591: PUSH
67592: LD_VAR 0 2
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: LIST
67604: PUSH
67605: LD_VAR 0 1
67609: PUSH
67610: LD_VAR 0 2
67614: PUSH
67615: LD_INT 4
67617: MINUS
67618: PUSH
67619: LD_INT 3
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: PUSH
67627: LD_VAR 0 1
67631: PUSH
67632: LD_INT 3
67634: MINUS
67635: PUSH
67636: LD_VAR 0 2
67640: PUSH
67641: LD_INT 3
67643: MINUS
67644: PUSH
67645: LD_INT 2
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// end ; 4 :
67660: GO 67941
67662: LD_INT 4
67664: DOUBLE
67665: EQUAL
67666: IFTRUE 67670
67668: GO 67803
67670: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67671: LD_ADDR_VAR 0 5
67675: PUSH
67676: LD_VAR 0 1
67680: PUSH
67681: LD_VAR 0 2
67685: PUSH
67686: LD_INT 4
67688: PLUS
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: PUSH
67698: LD_VAR 0 1
67702: PUSH
67703: LD_INT 3
67705: PLUS
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 3
67714: PLUS
67715: PUSH
67716: LD_INT 5
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: LIST
67723: PUSH
67724: LD_VAR 0 1
67728: PUSH
67729: LD_INT 4
67731: PLUS
67732: PUSH
67733: LD_VAR 0 2
67737: PUSH
67738: LD_INT 4
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: PUSH
67746: LD_VAR 0 1
67750: PUSH
67751: LD_VAR 0 2
67755: PUSH
67756: LD_INT 3
67758: MINUS
67759: PUSH
67760: LD_INT 3
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: LIST
67767: PUSH
67768: LD_VAR 0 1
67772: PUSH
67773: LD_INT 4
67775: MINUS
67776: PUSH
67777: LD_VAR 0 2
67781: PUSH
67782: LD_INT 4
67784: MINUS
67785: PUSH
67786: LD_INT 2
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: ST_TO_ADDR
// end ; 5 :
67801: GO 67941
67803: LD_INT 5
67805: DOUBLE
67806: EQUAL
67807: IFTRUE 67811
67809: GO 67940
67811: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67812: LD_ADDR_VAR 0 5
67816: PUSH
67817: LD_VAR 0 1
67821: PUSH
67822: LD_INT 4
67824: MINUS
67825: PUSH
67826: LD_VAR 0 2
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: PUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_VAR 0 2
67848: PUSH
67849: LD_INT 4
67851: MINUS
67852: PUSH
67853: LD_INT 3
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: PUSH
67861: LD_VAR 0 1
67865: PUSH
67866: LD_INT 4
67868: PLUS
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_INT 4
67877: PLUS
67878: PUSH
67879: LD_INT 5
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: PUSH
67887: LD_VAR 0 1
67891: PUSH
67892: LD_INT 3
67894: PLUS
67895: PUSH
67896: LD_VAR 0 2
67900: PUSH
67901: LD_INT 4
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: PUSH
67909: LD_VAR 0 1
67913: PUSH
67914: LD_VAR 0 2
67918: PUSH
67919: LD_INT 3
67921: PLUS
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: ST_TO_ADDR
// end ; end ;
67938: GO 67941
67940: POP
// result := list ;
67941: LD_ADDR_VAR 0 4
67945: PUSH
67946: LD_VAR 0 5
67950: ST_TO_ADDR
// end ;
67951: LD_VAR 0 4
67955: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67956: LD_INT 0
67958: PPUSH
67959: PPUSH
67960: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67961: LD_VAR 0 1
67965: NOT
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: LD_INT 2
67977: PUSH
67978: LD_INT 3
67980: PUSH
67981: LD_INT 4
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: IN
67990: NOT
67991: OR
67992: IFFALSE 67996
// exit ;
67994: GO 68079
// tmp := [ ] ;
67996: LD_ADDR_VAR 0 5
68000: PUSH
68001: EMPTY
68002: ST_TO_ADDR
// for i in units do
68003: LD_ADDR_VAR 0 4
68007: PUSH
68008: LD_VAR 0 1
68012: PUSH
68013: FOR_IN
68014: IFFALSE 68048
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68016: LD_ADDR_VAR 0 5
68020: PUSH
68021: LD_VAR 0 5
68025: PPUSH
68026: LD_VAR 0 4
68030: PPUSH
68031: LD_VAR 0 2
68035: PPUSH
68036: CALL_OW 259
68040: PPUSH
68041: CALL 69452 0 2
68045: ST_TO_ADDR
68046: GO 68013
68048: POP
68049: POP
// if not tmp then
68050: LD_VAR 0 5
68054: NOT
68055: IFFALSE 68059
// exit ;
68057: GO 68079
// result := SortListByListDesc ( units , tmp ) ;
68059: LD_ADDR_VAR 0 3
68063: PUSH
68064: LD_VAR 0 1
68068: PPUSH
68069: LD_VAR 0 5
68073: PPUSH
68074: CALL_OW 77
68078: ST_TO_ADDR
// end ;
68079: LD_VAR 0 3
68083: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68084: LD_INT 0
68086: PPUSH
68087: PPUSH
68088: PPUSH
// result := false ;
68089: LD_ADDR_VAR 0 3
68093: PUSH
68094: LD_INT 0
68096: ST_TO_ADDR
// if not building then
68097: LD_VAR 0 2
68101: NOT
68102: IFFALSE 68106
// exit ;
68104: GO 68244
// x := GetX ( building ) ;
68106: LD_ADDR_VAR 0 4
68110: PUSH
68111: LD_VAR 0 2
68115: PPUSH
68116: CALL_OW 250
68120: ST_TO_ADDR
// y := GetY ( building ) ;
68121: LD_ADDR_VAR 0 5
68125: PUSH
68126: LD_VAR 0 2
68130: PPUSH
68131: CALL_OW 251
68135: ST_TO_ADDR
// if not x or not y then
68136: LD_VAR 0 4
68140: NOT
68141: PUSH
68142: LD_VAR 0 5
68146: NOT
68147: OR
68148: IFFALSE 68152
// exit ;
68150: GO 68244
// if GetTaskList ( unit ) then
68152: LD_VAR 0 1
68156: PPUSH
68157: CALL_OW 437
68161: IFFALSE 68244
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68163: LD_STRING e
68165: PUSH
68166: LD_VAR 0 1
68170: PPUSH
68171: CALL_OW 437
68175: PUSH
68176: LD_INT 1
68178: ARRAY
68179: PUSH
68180: LD_INT 1
68182: ARRAY
68183: EQUAL
68184: PUSH
68185: LD_VAR 0 4
68189: PUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: CALL_OW 437
68199: PUSH
68200: LD_INT 1
68202: ARRAY
68203: PUSH
68204: LD_INT 2
68206: ARRAY
68207: EQUAL
68208: AND
68209: PUSH
68210: LD_VAR 0 5
68214: PUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 437
68224: PUSH
68225: LD_INT 1
68227: ARRAY
68228: PUSH
68229: LD_INT 3
68231: ARRAY
68232: EQUAL
68233: AND
68234: IFFALSE 68244
// result := true end ;
68236: LD_ADDR_VAR 0 3
68240: PUSH
68241: LD_INT 1
68243: ST_TO_ADDR
// end ;
68244: LD_VAR 0 3
68248: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68249: LD_INT 0
68251: PPUSH
// result := false ;
68252: LD_ADDR_VAR 0 4
68256: PUSH
68257: LD_INT 0
68259: ST_TO_ADDR
// if GetTaskList ( unit ) then
68260: LD_VAR 0 1
68264: PPUSH
68265: CALL_OW 437
68269: IFFALSE 68352
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68271: LD_STRING M
68273: PUSH
68274: LD_VAR 0 1
68278: PPUSH
68279: CALL_OW 437
68283: PUSH
68284: LD_INT 1
68286: ARRAY
68287: PUSH
68288: LD_INT 1
68290: ARRAY
68291: EQUAL
68292: PUSH
68293: LD_VAR 0 2
68297: PUSH
68298: LD_VAR 0 1
68302: PPUSH
68303: CALL_OW 437
68307: PUSH
68308: LD_INT 1
68310: ARRAY
68311: PUSH
68312: LD_INT 2
68314: ARRAY
68315: EQUAL
68316: AND
68317: PUSH
68318: LD_VAR 0 3
68322: PUSH
68323: LD_VAR 0 1
68327: PPUSH
68328: CALL_OW 437
68332: PUSH
68333: LD_INT 1
68335: ARRAY
68336: PUSH
68337: LD_INT 3
68339: ARRAY
68340: EQUAL
68341: AND
68342: IFFALSE 68352
// result := true ;
68344: LD_ADDR_VAR 0 4
68348: PUSH
68349: LD_INT 1
68351: ST_TO_ADDR
// end ; end ;
68352: LD_VAR 0 4
68356: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68357: LD_INT 0
68359: PPUSH
68360: PPUSH
68361: PPUSH
68362: PPUSH
// if not unit or not area then
68363: LD_VAR 0 1
68367: NOT
68368: PUSH
68369: LD_VAR 0 2
68373: NOT
68374: OR
68375: IFFALSE 68379
// exit ;
68377: GO 68555
// tmp := AreaToList ( area , i ) ;
68379: LD_ADDR_VAR 0 6
68383: PUSH
68384: LD_VAR 0 2
68388: PPUSH
68389: LD_VAR 0 5
68393: PPUSH
68394: CALL_OW 517
68398: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68399: LD_ADDR_VAR 0 5
68403: PUSH
68404: DOUBLE
68405: LD_INT 1
68407: DEC
68408: ST_TO_ADDR
68409: LD_VAR 0 6
68413: PUSH
68414: LD_INT 1
68416: ARRAY
68417: PUSH
68418: FOR_TO
68419: IFFALSE 68553
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68421: LD_ADDR_VAR 0 7
68425: PUSH
68426: LD_VAR 0 6
68430: PUSH
68431: LD_INT 1
68433: ARRAY
68434: PUSH
68435: LD_VAR 0 5
68439: ARRAY
68440: PUSH
68441: LD_VAR 0 6
68445: PUSH
68446: LD_INT 2
68448: ARRAY
68449: PUSH
68450: LD_VAR 0 5
68454: ARRAY
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68460: LD_INT 92
68462: PUSH
68463: LD_VAR 0 7
68467: PUSH
68468: LD_INT 1
68470: ARRAY
68471: PUSH
68472: LD_VAR 0 7
68476: PUSH
68477: LD_INT 2
68479: ARRAY
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: PPUSH
68490: CALL_OW 69
68494: PUSH
68495: LD_INT 0
68497: EQUAL
68498: IFFALSE 68551
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68500: LD_VAR 0 1
68504: PPUSH
68505: LD_VAR 0 7
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PPUSH
68514: LD_VAR 0 7
68518: PUSH
68519: LD_INT 2
68521: ARRAY
68522: PPUSH
68523: LD_VAR 0 3
68527: PPUSH
68528: CALL_OW 48
// result := IsPlaced ( unit ) ;
68532: LD_ADDR_VAR 0 4
68536: PUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: CALL_OW 305
68546: ST_TO_ADDR
// exit ;
68547: POP
68548: POP
68549: GO 68555
// end ; end ;
68551: GO 68418
68553: POP
68554: POP
// end ;
68555: LD_VAR 0 4
68559: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68560: LD_INT 0
68562: PPUSH
68563: PPUSH
68564: PPUSH
// if not side or side > 8 then
68565: LD_VAR 0 1
68569: NOT
68570: PUSH
68571: LD_VAR 0 1
68575: PUSH
68576: LD_INT 8
68578: GREATER
68579: OR
68580: IFFALSE 68584
// exit ;
68582: GO 68771
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68584: LD_ADDR_VAR 0 4
68588: PUSH
68589: LD_INT 22
68591: PUSH
68592: LD_VAR 0 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 21
68603: PUSH
68604: LD_INT 3
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PPUSH
68615: CALL_OW 69
68619: ST_TO_ADDR
// if not tmp then
68620: LD_VAR 0 4
68624: NOT
68625: IFFALSE 68629
// exit ;
68627: GO 68771
// enable_addtolog := true ;
68629: LD_ADDR_OWVAR 81
68633: PUSH
68634: LD_INT 1
68636: ST_TO_ADDR
// AddToLog ( [ ) ;
68637: LD_STRING [
68639: PPUSH
68640: CALL_OW 561
// for i in tmp do
68644: LD_ADDR_VAR 0 3
68648: PUSH
68649: LD_VAR 0 4
68653: PUSH
68654: FOR_IN
68655: IFFALSE 68762
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68657: LD_STRING [
68659: PUSH
68660: LD_VAR 0 3
68664: PPUSH
68665: CALL_OW 266
68669: STR
68670: PUSH
68671: LD_STRING , 
68673: STR
68674: PUSH
68675: LD_VAR 0 3
68679: PPUSH
68680: CALL_OW 250
68684: STR
68685: PUSH
68686: LD_STRING , 
68688: STR
68689: PUSH
68690: LD_VAR 0 3
68694: PPUSH
68695: CALL_OW 251
68699: STR
68700: PUSH
68701: LD_STRING , 
68703: STR
68704: PUSH
68705: LD_VAR 0 3
68709: PPUSH
68710: CALL_OW 254
68714: STR
68715: PUSH
68716: LD_STRING , 
68718: STR
68719: PUSH
68720: LD_VAR 0 3
68724: PPUSH
68725: LD_INT 1
68727: PPUSH
68728: CALL_OW 268
68732: STR
68733: PUSH
68734: LD_STRING , 
68736: STR
68737: PUSH
68738: LD_VAR 0 3
68742: PPUSH
68743: LD_INT 2
68745: PPUSH
68746: CALL_OW 268
68750: STR
68751: PUSH
68752: LD_STRING ],
68754: STR
68755: PPUSH
68756: CALL_OW 561
// end ;
68760: GO 68654
68762: POP
68763: POP
// AddToLog ( ]; ) ;
68764: LD_STRING ];
68766: PPUSH
68767: CALL_OW 561
// end ;
68771: LD_VAR 0 2
68775: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68776: LD_INT 0
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
68782: PPUSH
// if not area or not rate or not max then
68783: LD_VAR 0 1
68787: NOT
68788: PUSH
68789: LD_VAR 0 2
68793: NOT
68794: OR
68795: PUSH
68796: LD_VAR 0 4
68800: NOT
68801: OR
68802: IFFALSE 68806
// exit ;
68804: GO 68995
// while 1 do
68806: LD_INT 1
68808: IFFALSE 68995
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68810: LD_ADDR_VAR 0 9
68814: PUSH
68815: LD_VAR 0 1
68819: PPUSH
68820: LD_INT 1
68822: PPUSH
68823: CALL_OW 287
68827: PUSH
68828: LD_INT 10
68830: MUL
68831: ST_TO_ADDR
// r := rate / 10 ;
68832: LD_ADDR_VAR 0 7
68836: PUSH
68837: LD_VAR 0 2
68841: PUSH
68842: LD_INT 10
68844: DIVREAL
68845: ST_TO_ADDR
// time := 1 1$00 ;
68846: LD_ADDR_VAR 0 8
68850: PUSH
68851: LD_INT 2100
68853: ST_TO_ADDR
// if amount < min then
68854: LD_VAR 0 9
68858: PUSH
68859: LD_VAR 0 3
68863: LESS
68864: IFFALSE 68882
// r := r * 2 else
68866: LD_ADDR_VAR 0 7
68870: PUSH
68871: LD_VAR 0 7
68875: PUSH
68876: LD_INT 2
68878: MUL
68879: ST_TO_ADDR
68880: GO 68908
// if amount > max then
68882: LD_VAR 0 9
68886: PUSH
68887: LD_VAR 0 4
68891: GREATER
68892: IFFALSE 68908
// r := r / 2 ;
68894: LD_ADDR_VAR 0 7
68898: PUSH
68899: LD_VAR 0 7
68903: PUSH
68904: LD_INT 2
68906: DIVREAL
68907: ST_TO_ADDR
// time := time / r ;
68908: LD_ADDR_VAR 0 8
68912: PUSH
68913: LD_VAR 0 8
68917: PUSH
68918: LD_VAR 0 7
68922: DIVREAL
68923: ST_TO_ADDR
// if time < 0 then
68924: LD_VAR 0 8
68928: PUSH
68929: LD_INT 0
68931: LESS
68932: IFFALSE 68949
// time := time * - 1 ;
68934: LD_ADDR_VAR 0 8
68938: PUSH
68939: LD_VAR 0 8
68943: PUSH
68944: LD_INT 1
68946: NEG
68947: MUL
68948: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68949: LD_VAR 0 8
68953: PUSH
68954: LD_INT 35
68956: PPUSH
68957: LD_INT 875
68959: PPUSH
68960: CALL_OW 12
68964: PLUS
68965: PPUSH
68966: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68970: LD_INT 1
68972: PPUSH
68973: LD_INT 5
68975: PPUSH
68976: CALL_OW 12
68980: PPUSH
68981: LD_VAR 0 1
68985: PPUSH
68986: LD_INT 1
68988: PPUSH
68989: CALL_OW 55
// end ;
68993: GO 68806
// end ;
68995: LD_VAR 0 5
68999: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69000: LD_INT 0
69002: PPUSH
69003: PPUSH
69004: PPUSH
69005: PPUSH
69006: PPUSH
69007: PPUSH
69008: PPUSH
69009: PPUSH
// if not turrets or not factories then
69010: LD_VAR 0 1
69014: NOT
69015: PUSH
69016: LD_VAR 0 2
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69333
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69026: LD_ADDR_VAR 0 10
69030: PUSH
69031: LD_INT 5
69033: PUSH
69034: LD_INT 6
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 2
69043: PUSH
69044: LD_INT 4
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 3
69053: PUSH
69054: LD_INT 5
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 24
69068: PUSH
69069: LD_INT 25
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 23
69078: PUSH
69079: LD_INT 27
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 42
69092: PUSH
69093: LD_INT 43
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 44
69102: PUSH
69103: LD_INT 46
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 45
69112: PUSH
69113: LD_INT 47
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: LIST
69129: ST_TO_ADDR
// result := [ ] ;
69130: LD_ADDR_VAR 0 3
69134: PUSH
69135: EMPTY
69136: ST_TO_ADDR
// for i in turrets do
69137: LD_ADDR_VAR 0 4
69141: PUSH
69142: LD_VAR 0 1
69146: PUSH
69147: FOR_IN
69148: IFFALSE 69331
// begin nat := GetNation ( i ) ;
69150: LD_ADDR_VAR 0 7
69154: PUSH
69155: LD_VAR 0 4
69159: PPUSH
69160: CALL_OW 248
69164: ST_TO_ADDR
// weapon := 0 ;
69165: LD_ADDR_VAR 0 8
69169: PUSH
69170: LD_INT 0
69172: ST_TO_ADDR
// if not nat then
69173: LD_VAR 0 7
69177: NOT
69178: IFFALSE 69182
// continue ;
69180: GO 69147
// for j in list [ nat ] do
69182: LD_ADDR_VAR 0 5
69186: PUSH
69187: LD_VAR 0 10
69191: PUSH
69192: LD_VAR 0 7
69196: ARRAY
69197: PUSH
69198: FOR_IN
69199: IFFALSE 69240
// if GetBWeapon ( i ) = j [ 1 ] then
69201: LD_VAR 0 4
69205: PPUSH
69206: CALL_OW 269
69210: PUSH
69211: LD_VAR 0 5
69215: PUSH
69216: LD_INT 1
69218: ARRAY
69219: EQUAL
69220: IFFALSE 69238
// begin weapon := j [ 2 ] ;
69222: LD_ADDR_VAR 0 8
69226: PUSH
69227: LD_VAR 0 5
69231: PUSH
69232: LD_INT 2
69234: ARRAY
69235: ST_TO_ADDR
// break ;
69236: GO 69240
// end ;
69238: GO 69198
69240: POP
69241: POP
// if not weapon then
69242: LD_VAR 0 8
69246: NOT
69247: IFFALSE 69251
// continue ;
69249: GO 69147
// for k in factories do
69251: LD_ADDR_VAR 0 6
69255: PUSH
69256: LD_VAR 0 2
69260: PUSH
69261: FOR_IN
69262: IFFALSE 69327
// begin weapons := AvailableWeaponList ( k ) ;
69264: LD_ADDR_VAR 0 9
69268: PUSH
69269: LD_VAR 0 6
69273: PPUSH
69274: CALL_OW 478
69278: ST_TO_ADDR
// if not weapons then
69279: LD_VAR 0 9
69283: NOT
69284: IFFALSE 69288
// continue ;
69286: GO 69261
// if weapon in weapons then
69288: LD_VAR 0 8
69292: PUSH
69293: LD_VAR 0 9
69297: IN
69298: IFFALSE 69325
// begin result := [ i , weapon ] ;
69300: LD_ADDR_VAR 0 3
69304: PUSH
69305: LD_VAR 0 4
69309: PUSH
69310: LD_VAR 0 8
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: ST_TO_ADDR
// exit ;
69319: POP
69320: POP
69321: POP
69322: POP
69323: GO 69333
// end ; end ;
69325: GO 69261
69327: POP
69328: POP
// end ;
69329: GO 69147
69331: POP
69332: POP
// end ;
69333: LD_VAR 0 3
69337: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69338: LD_INT 0
69340: PPUSH
// if not side or side > 8 then
69341: LD_VAR 0 3
69345: NOT
69346: PUSH
69347: LD_VAR 0 3
69351: PUSH
69352: LD_INT 8
69354: GREATER
69355: OR
69356: IFFALSE 69360
// exit ;
69358: GO 69419
// if not range then
69360: LD_VAR 0 4
69364: NOT
69365: IFFALSE 69376
// range := - 12 ;
69367: LD_ADDR_VAR 0 4
69371: PUSH
69372: LD_INT 12
69374: NEG
69375: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69376: LD_VAR 0 1
69380: PPUSH
69381: LD_VAR 0 2
69385: PPUSH
69386: LD_VAR 0 3
69390: PPUSH
69391: LD_VAR 0 4
69395: PPUSH
69396: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69400: LD_VAR 0 1
69404: PPUSH
69405: LD_VAR 0 2
69409: PPUSH
69410: LD_VAR 0 3
69414: PPUSH
69415: CALL_OW 331
// end ;
69419: LD_VAR 0 5
69423: RET
// export function Video ( mode ) ; begin
69424: LD_INT 0
69426: PPUSH
// ingame_video = mode ;
69427: LD_ADDR_OWVAR 52
69431: PUSH
69432: LD_VAR 0 1
69436: ST_TO_ADDR
// interface_hidden = mode ;
69437: LD_ADDR_OWVAR 54
69441: PUSH
69442: LD_VAR 0 1
69446: ST_TO_ADDR
// end ;
69447: LD_VAR 0 2
69451: RET
// export function Join ( array , element ) ; begin
69452: LD_INT 0
69454: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69455: LD_ADDR_VAR 0 3
69459: PUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_VAR 0 1
69469: PUSH
69470: LD_INT 1
69472: PLUS
69473: PPUSH
69474: LD_VAR 0 2
69478: PPUSH
69479: CALL_OW 1
69483: ST_TO_ADDR
// end ;
69484: LD_VAR 0 3
69488: RET
// export function JoinUnion ( array , element ) ; begin
69489: LD_INT 0
69491: PPUSH
// result := array union element ;
69492: LD_ADDR_VAR 0 3
69496: PUSH
69497: LD_VAR 0 1
69501: PUSH
69502: LD_VAR 0 2
69506: UNION
69507: ST_TO_ADDR
// end ;
69508: LD_VAR 0 3
69512: RET
// export function GetBehemoths ( side ) ; begin
69513: LD_INT 0
69515: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69516: LD_ADDR_VAR 0 2
69520: PUSH
69521: LD_INT 22
69523: PUSH
69524: LD_VAR 0 1
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 31
69535: PUSH
69536: LD_INT 25
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PPUSH
69547: CALL_OW 69
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 2
69556: RET
// export function Shuffle ( array ) ; var i , index ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
// result := [ ] ;
69562: LD_ADDR_VAR 0 2
69566: PUSH
69567: EMPTY
69568: ST_TO_ADDR
// if not array then
69569: LD_VAR 0 1
69573: NOT
69574: IFFALSE 69578
// exit ;
69576: GO 69677
// Randomize ;
69578: CALL_OW 10
// for i = array downto 1 do
69582: LD_ADDR_VAR 0 3
69586: PUSH
69587: DOUBLE
69588: LD_VAR 0 1
69592: INC
69593: ST_TO_ADDR
69594: LD_INT 1
69596: PUSH
69597: FOR_DOWNTO
69598: IFFALSE 69675
// begin index := rand ( 1 , array ) ;
69600: LD_ADDR_VAR 0 4
69604: PUSH
69605: LD_INT 1
69607: PPUSH
69608: LD_VAR 0 1
69612: PPUSH
69613: CALL_OW 12
69617: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69618: LD_ADDR_VAR 0 2
69622: PUSH
69623: LD_VAR 0 2
69627: PPUSH
69628: LD_VAR 0 2
69632: PUSH
69633: LD_INT 1
69635: PLUS
69636: PPUSH
69637: LD_VAR 0 1
69641: PUSH
69642: LD_VAR 0 4
69646: ARRAY
69647: PPUSH
69648: CALL_OW 2
69652: ST_TO_ADDR
// array := Delete ( array , index ) ;
69653: LD_ADDR_VAR 0 1
69657: PUSH
69658: LD_VAR 0 1
69662: PPUSH
69663: LD_VAR 0 4
69667: PPUSH
69668: CALL_OW 3
69672: ST_TO_ADDR
// end ;
69673: GO 69597
69675: POP
69676: POP
// end ;
69677: LD_VAR 0 2
69681: RET
// export function GetBaseMaterials ( base ) ; begin
69682: LD_INT 0
69684: PPUSH
// result := [ 0 , 0 , 0 ] ;
69685: LD_ADDR_VAR 0 2
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: LIST
69703: ST_TO_ADDR
// if not base then
69704: LD_VAR 0 1
69708: NOT
69709: IFFALSE 69713
// exit ;
69711: GO 69762
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69713: LD_ADDR_VAR 0 2
69717: PUSH
69718: LD_VAR 0 1
69722: PPUSH
69723: LD_INT 1
69725: PPUSH
69726: CALL_OW 275
69730: PUSH
69731: LD_VAR 0 1
69735: PPUSH
69736: LD_INT 2
69738: PPUSH
69739: CALL_OW 275
69743: PUSH
69744: LD_VAR 0 1
69748: PPUSH
69749: LD_INT 3
69751: PPUSH
69752: CALL_OW 275
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: LIST
69761: ST_TO_ADDR
// end ;
69762: LD_VAR 0 2
69766: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69767: LD_INT 0
69769: PPUSH
69770: PPUSH
// result := array ;
69771: LD_ADDR_VAR 0 3
69775: PUSH
69776: LD_VAR 0 1
69780: ST_TO_ADDR
// if size >= result then
69781: LD_VAR 0 2
69785: PUSH
69786: LD_VAR 0 3
69790: GREATEREQUAL
69791: IFFALSE 69795
// exit ;
69793: GO 69845
// if size then
69795: LD_VAR 0 2
69799: IFFALSE 69845
// for i := array downto size do
69801: LD_ADDR_VAR 0 4
69805: PUSH
69806: DOUBLE
69807: LD_VAR 0 1
69811: INC
69812: ST_TO_ADDR
69813: LD_VAR 0 2
69817: PUSH
69818: FOR_DOWNTO
69819: IFFALSE 69843
// result := Delete ( result , result ) ;
69821: LD_ADDR_VAR 0 3
69825: PUSH
69826: LD_VAR 0 3
69830: PPUSH
69831: LD_VAR 0 3
69835: PPUSH
69836: CALL_OW 3
69840: ST_TO_ADDR
69841: GO 69818
69843: POP
69844: POP
// end ;
69845: LD_VAR 0 3
69849: RET
// export function ComExit ( unit ) ; var tmp ; begin
69850: LD_INT 0
69852: PPUSH
69853: PPUSH
// if not IsInUnit ( unit ) then
69854: LD_VAR 0 1
69858: PPUSH
69859: CALL_OW 310
69863: NOT
69864: IFFALSE 69868
// exit ;
69866: GO 69928
// tmp := IsInUnit ( unit ) ;
69868: LD_ADDR_VAR 0 3
69872: PUSH
69873: LD_VAR 0 1
69877: PPUSH
69878: CALL_OW 310
69882: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69883: LD_VAR 0 3
69887: PPUSH
69888: CALL_OW 247
69892: PUSH
69893: LD_INT 2
69895: EQUAL
69896: IFFALSE 69909
// ComExitVehicle ( unit ) else
69898: LD_VAR 0 1
69902: PPUSH
69903: CALL_OW 121
69907: GO 69918
// ComExitBuilding ( unit ) ;
69909: LD_VAR 0 1
69913: PPUSH
69914: CALL_OW 122
// result := tmp ;
69918: LD_ADDR_VAR 0 2
69922: PUSH
69923: LD_VAR 0 3
69927: ST_TO_ADDR
// end ;
69928: LD_VAR 0 2
69932: RET
// export function ComExitAll ( units ) ; var i ; begin
69933: LD_INT 0
69935: PPUSH
69936: PPUSH
// if not units then
69937: LD_VAR 0 1
69941: NOT
69942: IFFALSE 69946
// exit ;
69944: GO 69972
// for i in units do
69946: LD_ADDR_VAR 0 3
69950: PUSH
69951: LD_VAR 0 1
69955: PUSH
69956: FOR_IN
69957: IFFALSE 69970
// ComExit ( i ) ;
69959: LD_VAR 0 3
69963: PPUSH
69964: CALL 69850 0 1
69968: GO 69956
69970: POP
69971: POP
// end ;
69972: LD_VAR 0 2
69976: RET
// export function ResetHc ; begin
69977: LD_INT 0
69979: PPUSH
// InitHc ;
69980: CALL_OW 19
// hc_importance := 0 ;
69984: LD_ADDR_OWVAR 32
69988: PUSH
69989: LD_INT 0
69991: ST_TO_ADDR
// end ;
69992: LD_VAR 0 1
69996: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69997: LD_INT 0
69999: PPUSH
70000: PPUSH
70001: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70002: LD_ADDR_VAR 0 6
70006: PUSH
70007: LD_VAR 0 1
70011: PUSH
70012: LD_VAR 0 3
70016: PLUS
70017: PUSH
70018: LD_INT 2
70020: DIV
70021: ST_TO_ADDR
// if _x < 0 then
70022: LD_VAR 0 6
70026: PUSH
70027: LD_INT 0
70029: LESS
70030: IFFALSE 70047
// _x := _x * - 1 ;
70032: LD_ADDR_VAR 0 6
70036: PUSH
70037: LD_VAR 0 6
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: MUL
70046: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70047: LD_ADDR_VAR 0 7
70051: PUSH
70052: LD_VAR 0 2
70056: PUSH
70057: LD_VAR 0 4
70061: PLUS
70062: PUSH
70063: LD_INT 2
70065: DIV
70066: ST_TO_ADDR
// if _y < 0 then
70067: LD_VAR 0 7
70071: PUSH
70072: LD_INT 0
70074: LESS
70075: IFFALSE 70092
// _y := _y * - 1 ;
70077: LD_ADDR_VAR 0 7
70081: PUSH
70082: LD_VAR 0 7
70086: PUSH
70087: LD_INT 1
70089: NEG
70090: MUL
70091: ST_TO_ADDR
// result := [ _x , _y ] ;
70092: LD_ADDR_VAR 0 5
70096: PUSH
70097: LD_VAR 0 6
70101: PUSH
70102: LD_VAR 0 7
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: ST_TO_ADDR
// end ;
70111: LD_VAR 0 5
70115: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70116: LD_INT 0
70118: PPUSH
70119: PPUSH
70120: PPUSH
70121: PPUSH
// task := GetTaskList ( unit ) ;
70122: LD_ADDR_VAR 0 7
70126: PUSH
70127: LD_VAR 0 1
70131: PPUSH
70132: CALL_OW 437
70136: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70137: LD_VAR 0 7
70141: NOT
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: LD_VAR 0 2
70152: PPUSH
70153: CALL_OW 308
70157: NOT
70158: AND
70159: IFFALSE 70163
// exit ;
70161: GO 70281
// if IsInArea ( unit , area ) then
70163: LD_VAR 0 1
70167: PPUSH
70168: LD_VAR 0 2
70172: PPUSH
70173: CALL_OW 308
70177: IFFALSE 70195
// begin ComMoveToArea ( unit , goAway ) ;
70179: LD_VAR 0 1
70183: PPUSH
70184: LD_VAR 0 3
70188: PPUSH
70189: CALL_OW 113
// exit ;
70193: GO 70281
// end ; if task [ 1 ] [ 1 ] <> M then
70195: LD_VAR 0 7
70199: PUSH
70200: LD_INT 1
70202: ARRAY
70203: PUSH
70204: LD_INT 1
70206: ARRAY
70207: PUSH
70208: LD_STRING M
70210: NONEQUAL
70211: IFFALSE 70215
// exit ;
70213: GO 70281
// x := task [ 1 ] [ 2 ] ;
70215: LD_ADDR_VAR 0 5
70219: PUSH
70220: LD_VAR 0 7
70224: PUSH
70225: LD_INT 1
70227: ARRAY
70228: PUSH
70229: LD_INT 2
70231: ARRAY
70232: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70233: LD_ADDR_VAR 0 6
70237: PUSH
70238: LD_VAR 0 7
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PUSH
70247: LD_INT 3
70249: ARRAY
70250: ST_TO_ADDR
// if InArea ( x , y , area ) then
70251: LD_VAR 0 5
70255: PPUSH
70256: LD_VAR 0 6
70260: PPUSH
70261: LD_VAR 0 2
70265: PPUSH
70266: CALL_OW 309
70270: IFFALSE 70281
// ComStop ( unit ) ;
70272: LD_VAR 0 1
70276: PPUSH
70277: CALL_OW 141
// end ;
70281: LD_VAR 0 4
70285: RET
// export function Abs ( value ) ; begin
70286: LD_INT 0
70288: PPUSH
// result := value ;
70289: LD_ADDR_VAR 0 2
70293: PUSH
70294: LD_VAR 0 1
70298: ST_TO_ADDR
// if value < 0 then
70299: LD_VAR 0 1
70303: PUSH
70304: LD_INT 0
70306: LESS
70307: IFFALSE 70324
// result := value * - 1 ;
70309: LD_ADDR_VAR 0 2
70313: PUSH
70314: LD_VAR 0 1
70318: PUSH
70319: LD_INT 1
70321: NEG
70322: MUL
70323: ST_TO_ADDR
// end ;
70324: LD_VAR 0 2
70328: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70329: LD_INT 0
70331: PPUSH
70332: PPUSH
70333: PPUSH
70334: PPUSH
70335: PPUSH
70336: PPUSH
70337: PPUSH
70338: PPUSH
// if not unit or not building then
70339: LD_VAR 0 1
70343: NOT
70344: PUSH
70345: LD_VAR 0 2
70349: NOT
70350: OR
70351: IFFALSE 70355
// exit ;
70353: GO 70581
// x := GetX ( building ) ;
70355: LD_ADDR_VAR 0 4
70359: PUSH
70360: LD_VAR 0 2
70364: PPUSH
70365: CALL_OW 250
70369: ST_TO_ADDR
// y := GetY ( building ) ;
70370: LD_ADDR_VAR 0 6
70374: PUSH
70375: LD_VAR 0 2
70379: PPUSH
70380: CALL_OW 251
70384: ST_TO_ADDR
// d := GetDir ( building ) ;
70385: LD_ADDR_VAR 0 8
70389: PUSH
70390: LD_VAR 0 2
70394: PPUSH
70395: CALL_OW 254
70399: ST_TO_ADDR
// r := 4 ;
70400: LD_ADDR_VAR 0 9
70404: PUSH
70405: LD_INT 4
70407: ST_TO_ADDR
// for i := 1 to 5 do
70408: LD_ADDR_VAR 0 10
70412: PUSH
70413: DOUBLE
70414: LD_INT 1
70416: DEC
70417: ST_TO_ADDR
70418: LD_INT 5
70420: PUSH
70421: FOR_TO
70422: IFFALSE 70579
// begin _x := ShiftX ( x , d , r + i ) ;
70424: LD_ADDR_VAR 0 5
70428: PUSH
70429: LD_VAR 0 4
70433: PPUSH
70434: LD_VAR 0 8
70438: PPUSH
70439: LD_VAR 0 9
70443: PUSH
70444: LD_VAR 0 10
70448: PLUS
70449: PPUSH
70450: CALL_OW 272
70454: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70455: LD_ADDR_VAR 0 7
70459: PUSH
70460: LD_VAR 0 6
70464: PPUSH
70465: LD_VAR 0 8
70469: PPUSH
70470: LD_VAR 0 9
70474: PUSH
70475: LD_VAR 0 10
70479: PLUS
70480: PPUSH
70481: CALL_OW 273
70485: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70486: LD_VAR 0 5
70490: PPUSH
70491: LD_VAR 0 7
70495: PPUSH
70496: CALL_OW 488
70500: PUSH
70501: LD_VAR 0 5
70505: PPUSH
70506: LD_VAR 0 7
70510: PPUSH
70511: CALL_OW 428
70515: PPUSH
70516: CALL_OW 247
70520: PUSH
70521: LD_INT 3
70523: PUSH
70524: LD_INT 2
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: IN
70531: NOT
70532: AND
70533: IFFALSE 70577
// begin ComMoveXY ( unit , _x , _y ) ;
70535: LD_VAR 0 1
70539: PPUSH
70540: LD_VAR 0 5
70544: PPUSH
70545: LD_VAR 0 7
70549: PPUSH
70550: CALL_OW 111
// result := [ _x , _y ] ;
70554: LD_ADDR_VAR 0 3
70558: PUSH
70559: LD_VAR 0 5
70563: PUSH
70564: LD_VAR 0 7
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: ST_TO_ADDR
// exit ;
70573: POP
70574: POP
70575: GO 70581
// end ; end ;
70577: GO 70421
70579: POP
70580: POP
// end ;
70581: LD_VAR 0 3
70585: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70586: LD_INT 0
70588: PPUSH
70589: PPUSH
70590: PPUSH
// result := 0 ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_INT 0
70598: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70599: LD_VAR 0 1
70603: PUSH
70604: LD_INT 0
70606: LESS
70607: PUSH
70608: LD_VAR 0 1
70612: PUSH
70613: LD_INT 8
70615: GREATER
70616: OR
70617: PUSH
70618: LD_VAR 0 2
70622: PUSH
70623: LD_INT 0
70625: LESS
70626: OR
70627: PUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_INT 8
70635: GREATER
70636: OR
70637: IFFALSE 70641
// exit ;
70639: GO 70716
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70641: LD_ADDR_VAR 0 4
70645: PUSH
70646: LD_INT 22
70648: PUSH
70649: LD_VAR 0 2
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PPUSH
70658: CALL_OW 69
70662: PUSH
70663: FOR_IN
70664: IFFALSE 70714
// begin un := UnitShoot ( i ) ;
70666: LD_ADDR_VAR 0 5
70670: PUSH
70671: LD_VAR 0 4
70675: PPUSH
70676: CALL_OW 504
70680: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70681: LD_VAR 0 5
70685: PPUSH
70686: CALL_OW 255
70690: PUSH
70691: LD_VAR 0 1
70695: EQUAL
70696: IFFALSE 70712
// begin result := un ;
70698: LD_ADDR_VAR 0 3
70702: PUSH
70703: LD_VAR 0 5
70707: ST_TO_ADDR
// exit ;
70708: POP
70709: POP
70710: GO 70716
// end ; end ;
70712: GO 70663
70714: POP
70715: POP
// end ;
70716: LD_VAR 0 3
70720: RET
// export function GetCargoBay ( units ) ; begin
70721: LD_INT 0
70723: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70724: LD_ADDR_VAR 0 2
70728: PUSH
70729: LD_VAR 0 1
70733: PPUSH
70734: LD_INT 2
70736: PUSH
70737: LD_INT 34
70739: PUSH
70740: LD_INT 12
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 34
70749: PUSH
70750: LD_INT 51
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 34
70759: PUSH
70760: LD_INT 32
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 34
70769: PUSH
70770: LD_INT 89
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: PPUSH
70784: CALL_OW 72
70788: ST_TO_ADDR
// end ;
70789: LD_VAR 0 2
70793: RET
// export function Negate ( value ) ; begin
70794: LD_INT 0
70796: PPUSH
// result := not value ;
70797: LD_ADDR_VAR 0 2
70801: PUSH
70802: LD_VAR 0 1
70806: NOT
70807: ST_TO_ADDR
// end ;
70808: LD_VAR 0 2
70812: RET
// export function Inc ( value ) ; begin
70813: LD_INT 0
70815: PPUSH
// result := value + 1 ;
70816: LD_ADDR_VAR 0 2
70820: PUSH
70821: LD_VAR 0 1
70825: PUSH
70826: LD_INT 1
70828: PLUS
70829: ST_TO_ADDR
// end ;
70830: LD_VAR 0 2
70834: RET
// export function Dec ( value ) ; begin
70835: LD_INT 0
70837: PPUSH
// result := value - 1 ;
70838: LD_ADDR_VAR 0 2
70842: PUSH
70843: LD_VAR 0 1
70847: PUSH
70848: LD_INT 1
70850: MINUS
70851: ST_TO_ADDR
// end ;
70852: LD_VAR 0 2
70856: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70857: LD_INT 0
70859: PPUSH
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
70865: PPUSH
70866: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70867: LD_VAR 0 1
70871: PPUSH
70872: LD_VAR 0 2
70876: PPUSH
70877: CALL_OW 488
70881: NOT
70882: PUSH
70883: LD_VAR 0 3
70887: PPUSH
70888: LD_VAR 0 4
70892: PPUSH
70893: CALL_OW 488
70897: NOT
70898: OR
70899: IFFALSE 70912
// begin result := - 1 ;
70901: LD_ADDR_VAR 0 5
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: ST_TO_ADDR
// exit ;
70910: GO 71147
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70912: LD_ADDR_VAR 0 12
70916: PUSH
70917: LD_VAR 0 1
70921: PPUSH
70922: LD_VAR 0 2
70926: PPUSH
70927: LD_VAR 0 3
70931: PPUSH
70932: LD_VAR 0 4
70936: PPUSH
70937: CALL 69997 0 4
70941: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70942: LD_ADDR_VAR 0 11
70946: PUSH
70947: LD_VAR 0 1
70951: PPUSH
70952: LD_VAR 0 2
70956: PPUSH
70957: LD_VAR 0 12
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PPUSH
70966: LD_VAR 0 12
70970: PUSH
70971: LD_INT 2
70973: ARRAY
70974: PPUSH
70975: CALL_OW 298
70979: ST_TO_ADDR
// distance := 9999 ;
70980: LD_ADDR_VAR 0 10
70984: PUSH
70985: LD_INT 9999
70987: ST_TO_ADDR
// for i := 0 to 5 do
70988: LD_ADDR_VAR 0 6
70992: PUSH
70993: DOUBLE
70994: LD_INT 0
70996: DEC
70997: ST_TO_ADDR
70998: LD_INT 5
71000: PUSH
71001: FOR_TO
71002: IFFALSE 71145
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71004: LD_ADDR_VAR 0 7
71008: PUSH
71009: LD_VAR 0 1
71013: PPUSH
71014: LD_VAR 0 6
71018: PPUSH
71019: LD_VAR 0 11
71023: PPUSH
71024: CALL_OW 272
71028: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71029: LD_ADDR_VAR 0 8
71033: PUSH
71034: LD_VAR 0 2
71038: PPUSH
71039: LD_VAR 0 6
71043: PPUSH
71044: LD_VAR 0 11
71048: PPUSH
71049: CALL_OW 273
71053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71054: LD_VAR 0 7
71058: PPUSH
71059: LD_VAR 0 8
71063: PPUSH
71064: CALL_OW 488
71068: NOT
71069: IFFALSE 71073
// continue ;
71071: GO 71001
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71073: LD_ADDR_VAR 0 9
71077: PUSH
71078: LD_VAR 0 12
71082: PUSH
71083: LD_INT 1
71085: ARRAY
71086: PPUSH
71087: LD_VAR 0 12
71091: PUSH
71092: LD_INT 2
71094: ARRAY
71095: PPUSH
71096: LD_VAR 0 7
71100: PPUSH
71101: LD_VAR 0 8
71105: PPUSH
71106: CALL_OW 298
71110: ST_TO_ADDR
// if tmp < distance then
71111: LD_VAR 0 9
71115: PUSH
71116: LD_VAR 0 10
71120: LESS
71121: IFFALSE 71143
// begin result := i ;
71123: LD_ADDR_VAR 0 5
71127: PUSH
71128: LD_VAR 0 6
71132: ST_TO_ADDR
// distance := tmp ;
71133: LD_ADDR_VAR 0 10
71137: PUSH
71138: LD_VAR 0 9
71142: ST_TO_ADDR
// end ; end ;
71143: GO 71001
71145: POP
71146: POP
// end ;
71147: LD_VAR 0 5
71151: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71152: LD_INT 0
71154: PPUSH
71155: PPUSH
// if not driver or not IsInUnit ( driver ) then
71156: LD_VAR 0 1
71160: NOT
71161: PUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: CALL_OW 310
71171: NOT
71172: OR
71173: IFFALSE 71177
// exit ;
71175: GO 71267
// vehicle := IsInUnit ( driver ) ;
71177: LD_ADDR_VAR 0 3
71181: PUSH
71182: LD_VAR 0 1
71186: PPUSH
71187: CALL_OW 310
71191: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71192: LD_VAR 0 1
71196: PPUSH
71197: LD_STRING \
71199: PUSH
71200: LD_INT 0
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: LD_INT 0
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: PUSH
71227: LD_STRING E
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: LD_VAR 0 3
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PPUSH
71263: CALL_OW 446
// end ;
71267: LD_VAR 0 2
71271: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71272: LD_INT 0
71274: PPUSH
71275: PPUSH
// if not driver or not IsInUnit ( driver ) then
71276: LD_VAR 0 1
71280: NOT
71281: PUSH
71282: LD_VAR 0 1
71286: PPUSH
71287: CALL_OW 310
71291: NOT
71292: OR
71293: IFFALSE 71297
// exit ;
71295: GO 71387
// vehicle := IsInUnit ( driver ) ;
71297: LD_ADDR_VAR 0 3
71301: PUSH
71302: LD_VAR 0 1
71306: PPUSH
71307: CALL_OW 310
71311: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71312: LD_VAR 0 1
71316: PPUSH
71317: LD_STRING \
71319: PUSH
71320: LD_INT 0
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: LD_INT 0
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: LD_INT 0
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: PUSH
71347: LD_STRING E
71349: PUSH
71350: LD_INT 0
71352: PUSH
71353: LD_INT 0
71355: PUSH
71356: LD_VAR 0 3
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PPUSH
71383: CALL_OW 447
// end ;
71387: LD_VAR 0 2
71391: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71392: LD_INT 0
71394: PPUSH
71395: PPUSH
71396: PPUSH
// tmp := [ ] ;
71397: LD_ADDR_VAR 0 5
71401: PUSH
71402: EMPTY
71403: ST_TO_ADDR
// for i in units do
71404: LD_ADDR_VAR 0 4
71408: PUSH
71409: LD_VAR 0 1
71413: PUSH
71414: FOR_IN
71415: IFFALSE 71453
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71417: LD_ADDR_VAR 0 5
71421: PUSH
71422: LD_VAR 0 5
71426: PPUSH
71427: LD_VAR 0 5
71431: PUSH
71432: LD_INT 1
71434: PLUS
71435: PPUSH
71436: LD_VAR 0 4
71440: PPUSH
71441: CALL_OW 256
71445: PPUSH
71446: CALL_OW 2
71450: ST_TO_ADDR
71451: GO 71414
71453: POP
71454: POP
// if not tmp then
71455: LD_VAR 0 5
71459: NOT
71460: IFFALSE 71464
// exit ;
71462: GO 71512
// if asc then
71464: LD_VAR 0 2
71468: IFFALSE 71492
// result := SortListByListAsc ( units , tmp ) else
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: LD_VAR 0 1
71479: PPUSH
71480: LD_VAR 0 5
71484: PPUSH
71485: CALL_OW 76
71489: ST_TO_ADDR
71490: GO 71512
// result := SortListByListDesc ( units , tmp ) ;
71492: LD_ADDR_VAR 0 3
71496: PUSH
71497: LD_VAR 0 1
71501: PPUSH
71502: LD_VAR 0 5
71506: PPUSH
71507: CALL_OW 77
71511: ST_TO_ADDR
// end ;
71512: LD_VAR 0 3
71516: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71517: LD_INT 0
71519: PPUSH
71520: PPUSH
// task := GetTaskList ( mech ) ;
71521: LD_ADDR_VAR 0 4
71525: PUSH
71526: LD_VAR 0 1
71530: PPUSH
71531: CALL_OW 437
71535: ST_TO_ADDR
// if not task then
71536: LD_VAR 0 4
71540: NOT
71541: IFFALSE 71545
// exit ;
71543: GO 71587
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71545: LD_ADDR_VAR 0 3
71549: PUSH
71550: LD_VAR 0 4
71554: PUSH
71555: LD_INT 1
71557: ARRAY
71558: PUSH
71559: LD_INT 1
71561: ARRAY
71562: PUSH
71563: LD_STRING r
71565: EQUAL
71566: PUSH
71567: LD_VAR 0 4
71571: PUSH
71572: LD_INT 1
71574: ARRAY
71575: PUSH
71576: LD_INT 4
71578: ARRAY
71579: PUSH
71580: LD_VAR 0 2
71584: EQUAL
71585: AND
71586: ST_TO_ADDR
// end ;
71587: LD_VAR 0 3
71591: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71592: LD_INT 0
71594: PPUSH
// SetDir ( unit , d ) ;
71595: LD_VAR 0 1
71599: PPUSH
71600: LD_VAR 0 4
71604: PPUSH
71605: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71609: LD_VAR 0 1
71613: PPUSH
71614: LD_VAR 0 2
71618: PPUSH
71619: LD_VAR 0 3
71623: PPUSH
71624: LD_VAR 0 5
71628: PPUSH
71629: CALL_OW 48
// end ;
71633: LD_VAR 0 6
71637: RET
// export function ToNaturalNumber ( number ) ; begin
71638: LD_INT 0
71640: PPUSH
// result := number div 1 ;
71641: LD_ADDR_VAR 0 2
71645: PUSH
71646: LD_VAR 0 1
71650: PUSH
71651: LD_INT 1
71653: DIV
71654: ST_TO_ADDR
// if number < 0 then
71655: LD_VAR 0 1
71659: PUSH
71660: LD_INT 0
71662: LESS
71663: IFFALSE 71673
// result := 0 ;
71665: LD_ADDR_VAR 0 2
71669: PUSH
71670: LD_INT 0
71672: ST_TO_ADDR
// end ;
71673: LD_VAR 0 2
71677: RET
// export function SortByClass ( units , class ) ; var un ; begin
71678: LD_INT 0
71680: PPUSH
71681: PPUSH
// if not units or not class then
71682: LD_VAR 0 1
71686: NOT
71687: PUSH
71688: LD_VAR 0 2
71692: NOT
71693: OR
71694: IFFALSE 71698
// exit ;
71696: GO 71793
// result := [ ] ;
71698: LD_ADDR_VAR 0 3
71702: PUSH
71703: EMPTY
71704: ST_TO_ADDR
// for un in units do
71705: LD_ADDR_VAR 0 4
71709: PUSH
71710: LD_VAR 0 1
71714: PUSH
71715: FOR_IN
71716: IFFALSE 71791
// if GetClass ( un ) = class then
71718: LD_VAR 0 4
71722: PPUSH
71723: CALL_OW 257
71727: PUSH
71728: LD_VAR 0 2
71732: EQUAL
71733: IFFALSE 71760
// result := Insert ( result , 1 , un ) else
71735: LD_ADDR_VAR 0 3
71739: PUSH
71740: LD_VAR 0 3
71744: PPUSH
71745: LD_INT 1
71747: PPUSH
71748: LD_VAR 0 4
71752: PPUSH
71753: CALL_OW 2
71757: ST_TO_ADDR
71758: GO 71789
// result := Replace ( result , result + 1 , un ) ;
71760: LD_ADDR_VAR 0 3
71764: PUSH
71765: LD_VAR 0 3
71769: PPUSH
71770: LD_VAR 0 3
71774: PUSH
71775: LD_INT 1
71777: PLUS
71778: PPUSH
71779: LD_VAR 0 4
71783: PPUSH
71784: CALL_OW 1
71788: ST_TO_ADDR
71789: GO 71715
71791: POP
71792: POP
// end ;
71793: LD_VAR 0 3
71797: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71798: LD_INT 0
71800: PPUSH
71801: PPUSH
71802: PPUSH
71803: PPUSH
71804: PPUSH
71805: PPUSH
71806: PPUSH
// result := [ ] ;
71807: LD_ADDR_VAR 0 4
71811: PUSH
71812: EMPTY
71813: ST_TO_ADDR
// if x - r < 0 then
71814: LD_VAR 0 1
71818: PUSH
71819: LD_VAR 0 3
71823: MINUS
71824: PUSH
71825: LD_INT 0
71827: LESS
71828: IFFALSE 71840
// min_x := 0 else
71830: LD_ADDR_VAR 0 8
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
71838: GO 71856
// min_x := x - r ;
71840: LD_ADDR_VAR 0 8
71844: PUSH
71845: LD_VAR 0 1
71849: PUSH
71850: LD_VAR 0 3
71854: MINUS
71855: ST_TO_ADDR
// if y - r < 0 then
71856: LD_VAR 0 2
71860: PUSH
71861: LD_VAR 0 3
71865: MINUS
71866: PUSH
71867: LD_INT 0
71869: LESS
71870: IFFALSE 71882
// min_y := 0 else
71872: LD_ADDR_VAR 0 7
71876: PUSH
71877: LD_INT 0
71879: ST_TO_ADDR
71880: GO 71898
// min_y := y - r ;
71882: LD_ADDR_VAR 0 7
71886: PUSH
71887: LD_VAR 0 2
71891: PUSH
71892: LD_VAR 0 3
71896: MINUS
71897: ST_TO_ADDR
// max_x := x + r ;
71898: LD_ADDR_VAR 0 9
71902: PUSH
71903: LD_VAR 0 1
71907: PUSH
71908: LD_VAR 0 3
71912: PLUS
71913: ST_TO_ADDR
// max_y := y + r ;
71914: LD_ADDR_VAR 0 10
71918: PUSH
71919: LD_VAR 0 2
71923: PUSH
71924: LD_VAR 0 3
71928: PLUS
71929: ST_TO_ADDR
// for _x = min_x to max_x do
71930: LD_ADDR_VAR 0 5
71934: PUSH
71935: DOUBLE
71936: LD_VAR 0 8
71940: DEC
71941: ST_TO_ADDR
71942: LD_VAR 0 9
71946: PUSH
71947: FOR_TO
71948: IFFALSE 72049
// for _y = min_y to max_y do
71950: LD_ADDR_VAR 0 6
71954: PUSH
71955: DOUBLE
71956: LD_VAR 0 7
71960: DEC
71961: ST_TO_ADDR
71962: LD_VAR 0 10
71966: PUSH
71967: FOR_TO
71968: IFFALSE 72045
// begin if not ValidHex ( _x , _y ) then
71970: LD_VAR 0 5
71974: PPUSH
71975: LD_VAR 0 6
71979: PPUSH
71980: CALL_OW 488
71984: NOT
71985: IFFALSE 71989
// continue ;
71987: GO 71967
// if GetResourceTypeXY ( _x , _y ) then
71989: LD_VAR 0 5
71993: PPUSH
71994: LD_VAR 0 6
71998: PPUSH
71999: CALL_OW 283
72003: IFFALSE 72043
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72005: LD_ADDR_VAR 0 4
72009: PUSH
72010: LD_VAR 0 4
72014: PPUSH
72015: LD_VAR 0 4
72019: PUSH
72020: LD_INT 1
72022: PLUS
72023: PPUSH
72024: LD_VAR 0 5
72028: PUSH
72029: LD_VAR 0 6
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PPUSH
72038: CALL_OW 1
72042: ST_TO_ADDR
// end ;
72043: GO 71967
72045: POP
72046: POP
72047: GO 71947
72049: POP
72050: POP
// end ;
72051: LD_VAR 0 4
72055: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72056: LD_INT 0
72058: PPUSH
72059: PPUSH
72060: PPUSH
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
72065: PPUSH
// if not units then
72066: LD_VAR 0 1
72070: NOT
72071: IFFALSE 72075
// exit ;
72073: GO 72599
// result := UnitFilter ( units , [ f_ok ] ) ;
72075: LD_ADDR_VAR 0 3
72079: PUSH
72080: LD_VAR 0 1
72084: PPUSH
72085: LD_INT 50
72087: PUSH
72088: EMPTY
72089: LIST
72090: PPUSH
72091: CALL_OW 72
72095: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72096: LD_ADDR_VAR 0 8
72100: PUSH
72101: LD_VAR 0 1
72105: PUSH
72106: LD_INT 1
72108: ARRAY
72109: PPUSH
72110: CALL_OW 255
72114: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72115: LD_ADDR_VAR 0 10
72119: PUSH
72120: LD_INT 29
72122: PUSH
72123: LD_INT 91
72125: PUSH
72126: LD_INT 49
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: LIST
72133: ST_TO_ADDR
// if not result then
72134: LD_VAR 0 3
72138: NOT
72139: IFFALSE 72143
// exit ;
72141: GO 72599
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72143: LD_ADDR_VAR 0 5
72147: PUSH
72148: LD_INT 81
72150: PUSH
72151: LD_VAR 0 8
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PPUSH
72160: CALL_OW 69
72164: ST_TO_ADDR
// for i in result do
72165: LD_ADDR_VAR 0 4
72169: PUSH
72170: LD_VAR 0 3
72174: PUSH
72175: FOR_IN
72176: IFFALSE 72597
// begin tag := GetTag ( i ) + 1 ;
72178: LD_ADDR_VAR 0 9
72182: PUSH
72183: LD_VAR 0 4
72187: PPUSH
72188: CALL_OW 110
72192: PUSH
72193: LD_INT 1
72195: PLUS
72196: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72197: LD_ADDR_VAR 0 7
72201: PUSH
72202: LD_VAR 0 4
72206: PPUSH
72207: CALL_OW 250
72211: PPUSH
72212: LD_VAR 0 4
72216: PPUSH
72217: CALL_OW 251
72221: PPUSH
72222: LD_INT 6
72224: PPUSH
72225: CALL 71798 0 3
72229: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72230: LD_VAR 0 4
72234: PPUSH
72235: CALL_OW 247
72239: PUSH
72240: LD_INT 2
72242: EQUAL
72243: PUSH
72244: LD_VAR 0 7
72248: AND
72249: PUSH
72250: LD_VAR 0 4
72254: PPUSH
72255: CALL_OW 264
72259: PUSH
72260: LD_VAR 0 10
72264: IN
72265: NOT
72266: AND
72267: IFFALSE 72306
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72269: LD_VAR 0 4
72273: PPUSH
72274: LD_VAR 0 7
72278: PUSH
72279: LD_INT 1
72281: ARRAY
72282: PUSH
72283: LD_INT 1
72285: ARRAY
72286: PPUSH
72287: LD_VAR 0 7
72291: PUSH
72292: LD_INT 1
72294: ARRAY
72295: PUSH
72296: LD_INT 2
72298: ARRAY
72299: PPUSH
72300: CALL_OW 116
72304: GO 72595
// if path > tag then
72306: LD_VAR 0 2
72310: PUSH
72311: LD_VAR 0 9
72315: GREATER
72316: IFFALSE 72524
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72318: LD_ADDR_VAR 0 6
72322: PUSH
72323: LD_VAR 0 5
72327: PPUSH
72328: LD_INT 91
72330: PUSH
72331: LD_VAR 0 4
72335: PUSH
72336: LD_INT 8
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: LIST
72343: PPUSH
72344: CALL_OW 72
72348: ST_TO_ADDR
// if nearEnemy then
72349: LD_VAR 0 6
72353: IFFALSE 72422
// begin if GetWeapon ( i ) = ru_time_lapser then
72355: LD_VAR 0 4
72359: PPUSH
72360: CALL_OW 264
72364: PUSH
72365: LD_INT 49
72367: EQUAL
72368: IFFALSE 72396
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72370: LD_VAR 0 4
72374: PPUSH
72375: LD_VAR 0 6
72379: PPUSH
72380: LD_VAR 0 4
72384: PPUSH
72385: CALL_OW 74
72389: PPUSH
72390: CALL_OW 112
72394: GO 72420
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72396: LD_VAR 0 4
72400: PPUSH
72401: LD_VAR 0 6
72405: PPUSH
72406: LD_VAR 0 4
72410: PPUSH
72411: CALL_OW 74
72415: PPUSH
72416: CALL 73524 0 2
// end else
72420: GO 72522
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72422: LD_VAR 0 4
72426: PPUSH
72427: LD_VAR 0 2
72431: PUSH
72432: LD_VAR 0 9
72436: ARRAY
72437: PUSH
72438: LD_INT 1
72440: ARRAY
72441: PPUSH
72442: LD_VAR 0 2
72446: PUSH
72447: LD_VAR 0 9
72451: ARRAY
72452: PUSH
72453: LD_INT 2
72455: ARRAY
72456: PPUSH
72457: CALL_OW 297
72461: PUSH
72462: LD_INT 6
72464: GREATER
72465: IFFALSE 72508
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72467: LD_VAR 0 4
72471: PPUSH
72472: LD_VAR 0 2
72476: PUSH
72477: LD_VAR 0 9
72481: ARRAY
72482: PUSH
72483: LD_INT 1
72485: ARRAY
72486: PPUSH
72487: LD_VAR 0 2
72491: PUSH
72492: LD_VAR 0 9
72496: ARRAY
72497: PUSH
72498: LD_INT 2
72500: ARRAY
72501: PPUSH
72502: CALL_OW 114
72506: GO 72522
// SetTag ( i , tag ) ;
72508: LD_VAR 0 4
72512: PPUSH
72513: LD_VAR 0 9
72517: PPUSH
72518: CALL_OW 109
// end else
72522: GO 72595
// if enemy then
72524: LD_VAR 0 5
72528: IFFALSE 72595
// begin if GetWeapon ( i ) = ru_time_lapser then
72530: LD_VAR 0 4
72534: PPUSH
72535: CALL_OW 264
72539: PUSH
72540: LD_INT 49
72542: EQUAL
72543: IFFALSE 72571
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72545: LD_VAR 0 4
72549: PPUSH
72550: LD_VAR 0 5
72554: PPUSH
72555: LD_VAR 0 4
72559: PPUSH
72560: CALL_OW 74
72564: PPUSH
72565: CALL_OW 112
72569: GO 72595
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72571: LD_VAR 0 4
72575: PPUSH
72576: LD_VAR 0 5
72580: PPUSH
72581: LD_VAR 0 4
72585: PPUSH
72586: CALL_OW 74
72590: PPUSH
72591: CALL 73524 0 2
// end ; end ;
72595: GO 72175
72597: POP
72598: POP
// end ;
72599: LD_VAR 0 3
72603: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72604: LD_INT 0
72606: PPUSH
72607: PPUSH
72608: PPUSH
// if not unit or IsInUnit ( unit ) then
72609: LD_VAR 0 1
72613: NOT
72614: PUSH
72615: LD_VAR 0 1
72619: PPUSH
72620: CALL_OW 310
72624: OR
72625: IFFALSE 72629
// exit ;
72627: GO 72720
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72629: LD_ADDR_VAR 0 4
72633: PUSH
72634: LD_VAR 0 1
72638: PPUSH
72639: CALL_OW 250
72643: PPUSH
72644: LD_VAR 0 2
72648: PPUSH
72649: LD_INT 1
72651: PPUSH
72652: CALL_OW 272
72656: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72657: LD_ADDR_VAR 0 5
72661: PUSH
72662: LD_VAR 0 1
72666: PPUSH
72667: CALL_OW 251
72671: PPUSH
72672: LD_VAR 0 2
72676: PPUSH
72677: LD_INT 1
72679: PPUSH
72680: CALL_OW 273
72684: ST_TO_ADDR
// if ValidHex ( x , y ) then
72685: LD_VAR 0 4
72689: PPUSH
72690: LD_VAR 0 5
72694: PPUSH
72695: CALL_OW 488
72699: IFFALSE 72720
// ComTurnXY ( unit , x , y ) ;
72701: LD_VAR 0 1
72705: PPUSH
72706: LD_VAR 0 4
72710: PPUSH
72711: LD_VAR 0 5
72715: PPUSH
72716: CALL_OW 118
// end ;
72720: LD_VAR 0 3
72724: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72725: LD_INT 0
72727: PPUSH
72728: PPUSH
// result := false ;
72729: LD_ADDR_VAR 0 3
72733: PUSH
72734: LD_INT 0
72736: ST_TO_ADDR
// if not units then
72737: LD_VAR 0 2
72741: NOT
72742: IFFALSE 72746
// exit ;
72744: GO 72791
// for i in units do
72746: LD_ADDR_VAR 0 4
72750: PUSH
72751: LD_VAR 0 2
72755: PUSH
72756: FOR_IN
72757: IFFALSE 72789
// if See ( side , i ) then
72759: LD_VAR 0 1
72763: PPUSH
72764: LD_VAR 0 4
72768: PPUSH
72769: CALL_OW 292
72773: IFFALSE 72787
// begin result := true ;
72775: LD_ADDR_VAR 0 3
72779: PUSH
72780: LD_INT 1
72782: ST_TO_ADDR
// exit ;
72783: POP
72784: POP
72785: GO 72791
// end ;
72787: GO 72756
72789: POP
72790: POP
// end ;
72791: LD_VAR 0 3
72795: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72796: LD_INT 0
72798: PPUSH
72799: PPUSH
72800: PPUSH
72801: PPUSH
// if not unit or not points then
72802: LD_VAR 0 1
72806: NOT
72807: PUSH
72808: LD_VAR 0 2
72812: NOT
72813: OR
72814: IFFALSE 72818
// exit ;
72816: GO 72908
// dist := 99999 ;
72818: LD_ADDR_VAR 0 5
72822: PUSH
72823: LD_INT 99999
72825: ST_TO_ADDR
// for i in points do
72826: LD_ADDR_VAR 0 4
72830: PUSH
72831: LD_VAR 0 2
72835: PUSH
72836: FOR_IN
72837: IFFALSE 72906
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72839: LD_ADDR_VAR 0 6
72843: PUSH
72844: LD_VAR 0 1
72848: PPUSH
72849: LD_VAR 0 4
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PPUSH
72858: LD_VAR 0 4
72862: PUSH
72863: LD_INT 2
72865: ARRAY
72866: PPUSH
72867: CALL_OW 297
72871: ST_TO_ADDR
// if tmpDist < dist then
72872: LD_VAR 0 6
72876: PUSH
72877: LD_VAR 0 5
72881: LESS
72882: IFFALSE 72904
// begin result := i ;
72884: LD_ADDR_VAR 0 3
72888: PUSH
72889: LD_VAR 0 4
72893: ST_TO_ADDR
// dist := tmpDist ;
72894: LD_ADDR_VAR 0 5
72898: PUSH
72899: LD_VAR 0 6
72903: ST_TO_ADDR
// end ; end ;
72904: GO 72836
72906: POP
72907: POP
// end ;
72908: LD_VAR 0 3
72912: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72913: LD_INT 0
72915: PPUSH
// uc_side := side ;
72916: LD_ADDR_OWVAR 20
72920: PUSH
72921: LD_VAR 0 1
72925: ST_TO_ADDR
// uc_nation := 3 ;
72926: LD_ADDR_OWVAR 21
72930: PUSH
72931: LD_INT 3
72933: ST_TO_ADDR
// vc_chassis := 25 ;
72934: LD_ADDR_OWVAR 37
72938: PUSH
72939: LD_INT 25
72941: ST_TO_ADDR
// vc_engine := engine_siberite ;
72942: LD_ADDR_OWVAR 39
72946: PUSH
72947: LD_INT 3
72949: ST_TO_ADDR
// vc_control := control_computer ;
72950: LD_ADDR_OWVAR 38
72954: PUSH
72955: LD_INT 3
72957: ST_TO_ADDR
// vc_weapon := 59 ;
72958: LD_ADDR_OWVAR 40
72962: PUSH
72963: LD_INT 59
72965: ST_TO_ADDR
// result := CreateVehicle ;
72966: LD_ADDR_VAR 0 5
72970: PUSH
72971: CALL_OW 45
72975: ST_TO_ADDR
// SetDir ( result , d ) ;
72976: LD_VAR 0 5
72980: PPUSH
72981: LD_VAR 0 4
72985: PPUSH
72986: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72990: LD_VAR 0 5
72994: PPUSH
72995: LD_VAR 0 2
72999: PPUSH
73000: LD_VAR 0 3
73004: PPUSH
73005: LD_INT 0
73007: PPUSH
73008: CALL_OW 48
// end ;
73012: LD_VAR 0 5
73016: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73017: LD_INT 0
73019: PPUSH
73020: PPUSH
73021: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73022: LD_ADDR_VAR 0 2
73026: PUSH
73027: LD_INT 0
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: LD_INT 0
73035: PUSH
73036: LD_INT 0
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73045: LD_VAR 0 1
73049: NOT
73050: PUSH
73051: LD_VAR 0 1
73055: PPUSH
73056: CALL_OW 264
73060: PUSH
73061: LD_INT 12
73063: PUSH
73064: LD_INT 51
73066: PUSH
73067: LD_INT 32
73069: PUSH
73070: LD_INT 89
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: IN
73079: NOT
73080: OR
73081: IFFALSE 73085
// exit ;
73083: GO 73183
// for i := 1 to 3 do
73085: LD_ADDR_VAR 0 3
73089: PUSH
73090: DOUBLE
73091: LD_INT 1
73093: DEC
73094: ST_TO_ADDR
73095: LD_INT 3
73097: PUSH
73098: FOR_TO
73099: IFFALSE 73181
// begin tmp := GetCargo ( cargo , i ) ;
73101: LD_ADDR_VAR 0 4
73105: PUSH
73106: LD_VAR 0 1
73110: PPUSH
73111: LD_VAR 0 3
73115: PPUSH
73116: CALL_OW 289
73120: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73121: LD_ADDR_VAR 0 2
73125: PUSH
73126: LD_VAR 0 2
73130: PPUSH
73131: LD_VAR 0 3
73135: PPUSH
73136: LD_VAR 0 4
73140: PPUSH
73141: CALL_OW 1
73145: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73146: LD_ADDR_VAR 0 2
73150: PUSH
73151: LD_VAR 0 2
73155: PPUSH
73156: LD_INT 4
73158: PPUSH
73159: LD_VAR 0 2
73163: PUSH
73164: LD_INT 4
73166: ARRAY
73167: PUSH
73168: LD_VAR 0 4
73172: PLUS
73173: PPUSH
73174: CALL_OW 1
73178: ST_TO_ADDR
// end ;
73179: GO 73098
73181: POP
73182: POP
// end ;
73183: LD_VAR 0 2
73187: RET
// export function Length ( array ) ; begin
73188: LD_INT 0
73190: PPUSH
// result := array + 0 ;
73191: LD_ADDR_VAR 0 2
73195: PUSH
73196: LD_VAR 0 1
73200: PUSH
73201: LD_INT 0
73203: PLUS
73204: ST_TO_ADDR
// end ;
73205: LD_VAR 0 2
73209: RET
// export function PrepareArray ( array ) ; begin
73210: LD_INT 0
73212: PPUSH
// result := array diff 0 ;
73213: LD_ADDR_VAR 0 2
73217: PUSH
73218: LD_VAR 0 1
73222: PUSH
73223: LD_INT 0
73225: DIFF
73226: ST_TO_ADDR
// if not result [ 1 ] then
73227: LD_VAR 0 2
73231: PUSH
73232: LD_INT 1
73234: ARRAY
73235: NOT
73236: IFFALSE 73256
// result := Delete ( result , 1 ) ;
73238: LD_ADDR_VAR 0 2
73242: PUSH
73243: LD_VAR 0 2
73247: PPUSH
73248: LD_INT 1
73250: PPUSH
73251: CALL_OW 3
73255: ST_TO_ADDR
// end ;
73256: LD_VAR 0 2
73260: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73261: LD_INT 0
73263: PPUSH
73264: PPUSH
73265: PPUSH
73266: PPUSH
// sibRocketRange := 25 ;
73267: LD_ADDR_VAR 0 6
73271: PUSH
73272: LD_INT 25
73274: ST_TO_ADDR
// result := false ;
73275: LD_ADDR_VAR 0 4
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
// for i := 0 to 5 do
73283: LD_ADDR_VAR 0 5
73287: PUSH
73288: DOUBLE
73289: LD_INT 0
73291: DEC
73292: ST_TO_ADDR
73293: LD_INT 5
73295: PUSH
73296: FOR_TO
73297: IFFALSE 73364
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73299: LD_VAR 0 1
73303: PPUSH
73304: LD_VAR 0 5
73308: PPUSH
73309: LD_VAR 0 6
73313: PPUSH
73314: CALL_OW 272
73318: PPUSH
73319: LD_VAR 0 2
73323: PPUSH
73324: LD_VAR 0 5
73328: PPUSH
73329: LD_VAR 0 6
73333: PPUSH
73334: CALL_OW 273
73338: PPUSH
73339: LD_VAR 0 3
73343: PPUSH
73344: CALL_OW 309
73348: IFFALSE 73362
// begin result := true ;
73350: LD_ADDR_VAR 0 4
73354: PUSH
73355: LD_INT 1
73357: ST_TO_ADDR
// exit ;
73358: POP
73359: POP
73360: GO 73366
// end ;
73362: GO 73296
73364: POP
73365: POP
// end ;
73366: LD_VAR 0 4
73370: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73371: LD_INT 0
73373: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73374: LD_VAR 0 1
73378: PPUSH
73379: LD_VAR 0 2
73383: PPUSH
73384: LD_INT 0
73386: PPUSH
73387: LD_INT 0
73389: PPUSH
73390: LD_INT 1
73392: PPUSH
73393: LD_INT 0
73395: PPUSH
73396: CALL_OW 587
// end ;
73400: LD_VAR 0 3
73404: RET
// export function CenterOnNow ( unit ) ; begin
73405: LD_INT 0
73407: PPUSH
// result := IsInUnit ( unit ) ;
73408: LD_ADDR_VAR 0 2
73412: PUSH
73413: LD_VAR 0 1
73417: PPUSH
73418: CALL_OW 310
73422: ST_TO_ADDR
// if not result then
73423: LD_VAR 0 2
73427: NOT
73428: IFFALSE 73440
// result := unit ;
73430: LD_ADDR_VAR 0 2
73434: PUSH
73435: LD_VAR 0 1
73439: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73440: LD_VAR 0 1
73444: PPUSH
73445: CALL_OW 87
// end ;
73449: LD_VAR 0 2
73453: RET
// export function ComMoveHex ( unit , hex ) ; begin
73454: LD_INT 0
73456: PPUSH
// if not hex then
73457: LD_VAR 0 2
73461: NOT
73462: IFFALSE 73466
// exit ;
73464: GO 73519
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73466: LD_VAR 0 2
73470: PUSH
73471: LD_INT 1
73473: ARRAY
73474: PPUSH
73475: LD_VAR 0 2
73479: PUSH
73480: LD_INT 2
73482: ARRAY
73483: PPUSH
73484: CALL_OW 428
73488: IFFALSE 73492
// exit ;
73490: GO 73519
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73492: LD_VAR 0 1
73496: PPUSH
73497: LD_VAR 0 2
73501: PUSH
73502: LD_INT 1
73504: ARRAY
73505: PPUSH
73506: LD_VAR 0 2
73510: PUSH
73511: LD_INT 2
73513: ARRAY
73514: PPUSH
73515: CALL_OW 111
// end ;
73519: LD_VAR 0 3
73523: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73524: LD_INT 0
73526: PPUSH
73527: PPUSH
73528: PPUSH
// if not unit or not enemy then
73529: LD_VAR 0 1
73533: NOT
73534: PUSH
73535: LD_VAR 0 2
73539: NOT
73540: OR
73541: IFFALSE 73545
// exit ;
73543: GO 73669
// x := GetX ( enemy ) ;
73545: LD_ADDR_VAR 0 4
73549: PUSH
73550: LD_VAR 0 2
73554: PPUSH
73555: CALL_OW 250
73559: ST_TO_ADDR
// y := GetY ( enemy ) ;
73560: LD_ADDR_VAR 0 5
73564: PUSH
73565: LD_VAR 0 2
73569: PPUSH
73570: CALL_OW 251
73574: ST_TO_ADDR
// if ValidHex ( x , y ) then
73575: LD_VAR 0 4
73579: PPUSH
73580: LD_VAR 0 5
73584: PPUSH
73585: CALL_OW 488
73589: IFFALSE 73669
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73591: LD_VAR 0 2
73595: PPUSH
73596: CALL_OW 247
73600: PUSH
73601: LD_INT 3
73603: PUSH
73604: LD_INT 2
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: IN
73611: PUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: CALL_OW 255
73621: PPUSH
73622: LD_VAR 0 2
73626: PPUSH
73627: CALL_OW 292
73631: AND
73632: IFFALSE 73650
// ComAttackUnit ( unit , enemy ) else
73634: LD_VAR 0 1
73638: PPUSH
73639: LD_VAR 0 2
73643: PPUSH
73644: CALL_OW 115
73648: GO 73669
// ComAgressiveMove ( unit , x , y ) ;
73650: LD_VAR 0 1
73654: PPUSH
73655: LD_VAR 0 4
73659: PPUSH
73660: LD_VAR 0 5
73664: PPUSH
73665: CALL_OW 114
// end ;
73669: LD_VAR 0 3
73673: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73674: LD_INT 0
73676: PPUSH
73677: PPUSH
73678: PPUSH
// list := AreaToList ( area , 0 ) ;
73679: LD_ADDR_VAR 0 5
73683: PUSH
73684: LD_VAR 0 1
73688: PPUSH
73689: LD_INT 0
73691: PPUSH
73692: CALL_OW 517
73696: ST_TO_ADDR
// if not list then
73697: LD_VAR 0 5
73701: NOT
73702: IFFALSE 73706
// exit ;
73704: GO 73836
// if all then
73706: LD_VAR 0 2
73710: IFFALSE 73798
// begin for i := 1 to list [ 1 ] do
73712: LD_ADDR_VAR 0 4
73716: PUSH
73717: DOUBLE
73718: LD_INT 1
73720: DEC
73721: ST_TO_ADDR
73722: LD_VAR 0 5
73726: PUSH
73727: LD_INT 1
73729: ARRAY
73730: PUSH
73731: FOR_TO
73732: IFFALSE 73794
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73734: LD_ADDR_VAR 0 3
73738: PUSH
73739: LD_VAR 0 3
73743: PPUSH
73744: LD_VAR 0 3
73748: PUSH
73749: LD_INT 1
73751: PLUS
73752: PPUSH
73753: LD_VAR 0 5
73757: PUSH
73758: LD_INT 1
73760: ARRAY
73761: PUSH
73762: LD_VAR 0 4
73766: ARRAY
73767: PUSH
73768: LD_VAR 0 5
73772: PUSH
73773: LD_INT 2
73775: ARRAY
73776: PUSH
73777: LD_VAR 0 4
73781: ARRAY
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PPUSH
73787: CALL_OW 1
73791: ST_TO_ADDR
73792: GO 73731
73794: POP
73795: POP
// exit ;
73796: GO 73836
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73798: LD_ADDR_VAR 0 3
73802: PUSH
73803: LD_VAR 0 5
73807: PUSH
73808: LD_INT 1
73810: ARRAY
73811: PUSH
73812: LD_INT 1
73814: ARRAY
73815: PUSH
73816: LD_VAR 0 5
73820: PUSH
73821: LD_INT 2
73823: ARRAY
73824: PUSH
73825: LD_INT 1
73827: ARRAY
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PUSH
73833: EMPTY
73834: LIST
73835: ST_TO_ADDR
// end ;
73836: LD_VAR 0 3
73840: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73841: LD_INT 0
73843: PPUSH
73844: PPUSH
// list := AreaToList ( area , 0 ) ;
73845: LD_ADDR_VAR 0 4
73849: PUSH
73850: LD_VAR 0 1
73854: PPUSH
73855: LD_INT 0
73857: PPUSH
73858: CALL_OW 517
73862: ST_TO_ADDR
// if not list then
73863: LD_VAR 0 4
73867: NOT
73868: IFFALSE 73872
// exit ;
73870: GO 73913
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73872: LD_ADDR_VAR 0 3
73876: PUSH
73877: LD_VAR 0 4
73881: PUSH
73882: LD_INT 1
73884: ARRAY
73885: PUSH
73886: LD_INT 1
73888: ARRAY
73889: PUSH
73890: LD_VAR 0 4
73894: PUSH
73895: LD_INT 2
73897: ARRAY
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: PUSH
73903: LD_VAR 0 2
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: LIST
73912: ST_TO_ADDR
// end ;
73913: LD_VAR 0 3
73917: RET
// export function First ( array ) ; begin
73918: LD_INT 0
73920: PPUSH
// if not array then
73921: LD_VAR 0 1
73925: NOT
73926: IFFALSE 73930
// exit ;
73928: GO 73944
// result := array [ 1 ] ;
73930: LD_ADDR_VAR 0 2
73934: PUSH
73935: LD_VAR 0 1
73939: PUSH
73940: LD_INT 1
73942: ARRAY
73943: ST_TO_ADDR
// end ;
73944: LD_VAR 0 2
73948: RET
// export function Last ( array ) ; begin
73949: LD_INT 0
73951: PPUSH
// if not array then
73952: LD_VAR 0 1
73956: NOT
73957: IFFALSE 73961
// exit ;
73959: GO 73977
// result := array [ array ] ;
73961: LD_ADDR_VAR 0 2
73965: PUSH
73966: LD_VAR 0 1
73970: PUSH
73971: LD_VAR 0 1
73975: ARRAY
73976: ST_TO_ADDR
// end ;
73977: LD_VAR 0 2
73981: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73982: LD_INT 0
73984: PPUSH
73985: PPUSH
// result := [ ] ;
73986: LD_ADDR_VAR 0 5
73990: PUSH
73991: EMPTY
73992: ST_TO_ADDR
// if not array then
73993: LD_VAR 0 1
73997: NOT
73998: IFFALSE 74002
// exit ;
74000: GO 74114
// for i := 1 to array do
74002: LD_ADDR_VAR 0 6
74006: PUSH
74007: DOUBLE
74008: LD_INT 1
74010: DEC
74011: ST_TO_ADDR
74012: LD_VAR 0 1
74016: PUSH
74017: FOR_TO
74018: IFFALSE 74112
// if array [ i ] [ index ] = value then
74020: LD_VAR 0 1
74024: PUSH
74025: LD_VAR 0 6
74029: ARRAY
74030: PUSH
74031: LD_VAR 0 2
74035: ARRAY
74036: PUSH
74037: LD_VAR 0 3
74041: EQUAL
74042: IFFALSE 74110
// begin if indexColumn then
74044: LD_VAR 0 4
74048: IFFALSE 74084
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74050: LD_ADDR_VAR 0 5
74054: PUSH
74055: LD_VAR 0 5
74059: PPUSH
74060: LD_VAR 0 1
74064: PUSH
74065: LD_VAR 0 6
74069: ARRAY
74070: PUSH
74071: LD_VAR 0 4
74075: ARRAY
74076: PPUSH
74077: CALL 69452 0 2
74081: ST_TO_ADDR
74082: GO 74110
// result := Join ( result , array [ i ] ) ;
74084: LD_ADDR_VAR 0 5
74088: PUSH
74089: LD_VAR 0 5
74093: PPUSH
74094: LD_VAR 0 1
74098: PUSH
74099: LD_VAR 0 6
74103: ARRAY
74104: PPUSH
74105: CALL 69452 0 2
74109: ST_TO_ADDR
// end ;
74110: GO 74017
74112: POP
74113: POP
// end ;
74114: LD_VAR 0 5
74118: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74119: LD_INT 0
74121: PPUSH
74122: PPUSH
74123: PPUSH
// if btype = b_depot then
74124: LD_VAR 0 2
74128: PUSH
74129: LD_INT 0
74131: EQUAL
74132: IFFALSE 74144
// begin result := true ;
74134: LD_ADDR_VAR 0 3
74138: PUSH
74139: LD_INT 1
74141: ST_TO_ADDR
// exit ;
74142: GO 74260
// end ; pom := GetBase ( depot ) ;
74144: LD_ADDR_VAR 0 4
74148: PUSH
74149: LD_VAR 0 1
74153: PPUSH
74154: CALL_OW 274
74158: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74159: LD_ADDR_VAR 0 5
74163: PUSH
74164: LD_VAR 0 2
74168: PPUSH
74169: LD_VAR 0 1
74173: PPUSH
74174: CALL_OW 248
74178: PPUSH
74179: CALL_OW 450
74183: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74184: LD_ADDR_VAR 0 3
74188: PUSH
74189: LD_VAR 0 4
74193: PPUSH
74194: LD_INT 1
74196: PPUSH
74197: CALL_OW 275
74201: PUSH
74202: LD_VAR 0 5
74206: PUSH
74207: LD_INT 1
74209: ARRAY
74210: GREATEREQUAL
74211: PUSH
74212: LD_VAR 0 4
74216: PPUSH
74217: LD_INT 2
74219: PPUSH
74220: CALL_OW 275
74224: PUSH
74225: LD_VAR 0 5
74229: PUSH
74230: LD_INT 2
74232: ARRAY
74233: GREATEREQUAL
74234: AND
74235: PUSH
74236: LD_VAR 0 4
74240: PPUSH
74241: LD_INT 3
74243: PPUSH
74244: CALL_OW 275
74248: PUSH
74249: LD_VAR 0 5
74253: PUSH
74254: LD_INT 3
74256: ARRAY
74257: GREATEREQUAL
74258: AND
74259: ST_TO_ADDR
// end ;
74260: LD_VAR 0 3
74264: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74265: LD_INT 0
74267: PPUSH
// if not vehicles or not parkingPoint then
74268: LD_VAR 0 1
74272: NOT
74273: PUSH
74274: LD_VAR 0 2
74278: NOT
74279: OR
74280: IFFALSE 74284
// exit ;
74282: GO 74382
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74284: LD_ADDR_VAR 0 1
74288: PUSH
74289: LD_VAR 0 1
74293: PPUSH
74294: LD_INT 50
74296: PUSH
74297: EMPTY
74298: LIST
74299: PUSH
74300: LD_INT 3
74302: PUSH
74303: LD_INT 92
74305: PUSH
74306: LD_VAR 0 2
74310: PUSH
74311: LD_INT 1
74313: ARRAY
74314: PUSH
74315: LD_VAR 0 2
74319: PUSH
74320: LD_INT 2
74322: ARRAY
74323: PUSH
74324: LD_INT 8
74326: PUSH
74327: EMPTY
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PPUSH
74341: CALL_OW 72
74345: ST_TO_ADDR
// if not vehicles then
74346: LD_VAR 0 1
74350: NOT
74351: IFFALSE 74355
// exit ;
74353: GO 74382
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74355: LD_VAR 0 1
74359: PPUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 1
74367: ARRAY
74368: PPUSH
74369: LD_VAR 0 2
74373: PUSH
74374: LD_INT 2
74376: ARRAY
74377: PPUSH
74378: CALL_OW 111
// end ; end_of_file
74382: LD_VAR 0 3
74386: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74387: LD_VAR 0 1
74391: PUSH
74392: LD_INT 200
74394: DOUBLE
74395: GREATEREQUAL
74396: IFFALSE 74404
74398: LD_INT 299
74400: DOUBLE
74401: LESSEQUAL
74402: IFTRUE 74406
74404: GO 74438
74406: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74407: LD_VAR 0 1
74411: PPUSH
74412: LD_VAR 0 2
74416: PPUSH
74417: LD_VAR 0 3
74421: PPUSH
74422: LD_VAR 0 4
74426: PPUSH
74427: LD_VAR 0 5
74431: PPUSH
74432: CALL 27243 0 5
74436: GO 74515
74438: LD_INT 300
74440: DOUBLE
74441: GREATEREQUAL
74442: IFFALSE 74450
74444: LD_INT 399
74446: DOUBLE
74447: LESSEQUAL
74448: IFTRUE 74452
74450: GO 74514
74452: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74453: LD_VAR 0 1
74457: PPUSH
74458: LD_VAR 0 2
74462: PPUSH
74463: LD_VAR 0 3
74467: PPUSH
74468: LD_VAR 0 4
74472: PPUSH
74473: LD_VAR 0 5
74477: PPUSH
74478: LD_VAR 0 6
74482: PPUSH
74483: LD_VAR 0 7
74487: PPUSH
74488: LD_VAR 0 8
74492: PPUSH
74493: LD_VAR 0 9
74497: PPUSH
74498: LD_VAR 0 10
74502: PPUSH
74503: LD_VAR 0 11
74507: PPUSH
74508: CALL 23568 0 11
74512: GO 74515
74514: POP
// end ;
74515: PPOPN 11
74517: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74518: LD_VAR 0 1
74522: PPUSH
74523: LD_VAR 0 2
74527: PPUSH
74528: LD_VAR 0 3
74532: PPUSH
74533: LD_VAR 0 4
74537: PPUSH
74538: LD_VAR 0 5
74542: PPUSH
74543: CALL 26979 0 5
// end ; end_of_file
74547: PPOPN 5
74549: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74550: LD_VAR 0 1
74554: PPUSH
74555: LD_VAR 0 2
74559: PPUSH
74560: LD_VAR 0 3
74564: PPUSH
74565: LD_VAR 0 4
74569: PPUSH
74570: LD_VAR 0 5
74574: PPUSH
74575: LD_VAR 0 6
74579: PPUSH
74580: CALL 11220 0 6
// end ;
74584: PPOPN 6
74586: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74587: LD_INT 0
74589: PPUSH
// begin if not units then
74590: LD_VAR 0 1
74594: NOT
74595: IFFALSE 74599
// exit ;
74597: GO 74599
// end ;
74599: PPOPN 7
74601: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74602: CALL 11124 0 0
// end ;
74606: PPOPN 1
74608: END
