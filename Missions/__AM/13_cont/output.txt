// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6279 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 30890 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 30890 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 30890 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 30890 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 30890 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 30890 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 30890 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 30890 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 30890 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 30890 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 30890 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 30890 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 30890 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 30890 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 30890 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 30890 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 30890 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 30890 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 30890 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 30890 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 30890 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3241
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3239
// Connect ( i ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL 38847 0 1
3237: GO 3225
3239: POP
3240: POP
// end ; end_of_file
3241: PPOPN 1
3243: END
// every 1 do
3244: GO 3246
3246: DISABLE
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3251: LD_INT 22
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 21
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PPUSH
3317: LD_INT 69
3319: PPUSH
3320: LD_INT 94
3322: PPUSH
3323: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3327: LD_EXP 1
3331: PPUSH
3332: LD_STRING D2-JMM-1
3334: PPUSH
3335: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3376: LD_EXP 2
3380: PPUSH
3381: LD_STRING D2-Huck-1
3383: PPUSH
3384: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3388: LD_INT 22
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 69
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D2-JMM-2
3432: PPUSH
3433: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3437: LD_INT 22
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: CALL_OW 87
// InGameOff ;
3474: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3478: LD_STRING M1
3480: PPUSH
3481: CALL_OW 337
// SaveForQuickRestart ;
3485: CALL_OW 22
// end ;
3489: END
// every 10 10$0 do
3490: GO 3492
3492: DISABLE
// begin DialogueOn ;
3493: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_STRING D3-Pow-1
3504: PPUSH
3505: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3509: LD_EXP 1
3513: PPUSH
3514: LD_STRING D3-JMM-1
3516: PPUSH
3517: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_STRING D3-Pow-2
3528: PPUSH
3529: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D3-JMM-2
3540: PPUSH
3541: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING D3-Pow-3
3552: PPUSH
3553: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D3-JMM-3
3564: PPUSH
3565: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3569: LD_EXP 15
3573: PPUSH
3574: LD_STRING D3-Pow-4
3576: PPUSH
3577: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D3-JMM-4
3588: PPUSH
3589: CALL_OW 88
// DialogueOff ;
3593: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3597: LD_STRING M2
3599: PPUSH
3600: CALL_OW 337
// wait ( 2 2$30 ) ;
3604: LD_INT 5250
3606: PPUSH
3607: CALL_OW 67
// PrepareBurlak ;
3611: CALL 2167 0 0
// BurlakArmy ;
3615: CALL 2316 0 0
// end ;
3619: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3620: LD_INT 1
3622: PPUSH
3623: LD_EXP 18
3627: PPUSH
3628: CALL_OW 292
3632: IFFALSE 3791
3634: GO 3636
3636: DISABLE
// begin DialogueOn ;
3637: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3641: LD_EXP 18
3645: PPUSH
3646: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3650: LD_INT 22
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 25
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 25
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 69
3740: PPUSH
3741: LD_STRING D5-Sol1-1
3743: PPUSH
3744: LD_STRING D5-FSol1-1
3746: PPUSH
3747: CALL 6078 0 3
// Say ( JMM , D5-JMM-1 ) ;
3751: LD_EXP 1
3755: PPUSH
3756: LD_STRING D5-JMM-1
3758: PPUSH
3759: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DAmer-Bur-1
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING DAmer-JMM-1
3782: PPUSH
3783: CALL_OW 88
// DialogueOff ;
3787: CALL_OW 7
// end ;
3791: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3792: LD_INT 4
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 70
3809: IFFALSE 4208
3811: GO 3813
3813: DISABLE
3814: LD_INT 0
3816: PPUSH
// begin enable ;
3817: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: LD_INT 4
3825: PPUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 70
3840: PUSH
3841: FOR_IN
3842: IFFALSE 4206
// begin if i = Burlak or i = Masha then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_EXP 17
3853: EQUAL
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: LD_EXP 18
3864: EQUAL
3865: OR
3866: IFFALSE 4013
// begin RemoveUnit ( i ) ;
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 64
// DialogueOn ;
3877: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D5a-JMM-1
3888: PPUSH
3889: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3893: LD_INT 22
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 26
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 25
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PPUSH
3984: LD_STRING D5a-Sol1-1
3986: PPUSH
3987: LD_STRING D5-FSol1-1
3989: PPUSH
3990: CALL 6078 0 3
// DialogueOff ;
3994: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3998: LD_STRING M2b
4000: PPUSH
4001: CALL_OW 337
// spawnBurlak = 0 ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 263
4036: PUSH
4037: LD_INT 1
4039: EQUAL
4040: AND
4041: IFFALSE 4169
// begin case IsDrivenBy ( i ) of Gnyevko :
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 311
4052: PUSH
4053: LD_EXP 19
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4076
4063: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4064: LD_INT 1
4066: PPUSH
4067: LD_STRING 13_Gnyevko_1
4069: PPUSH
4070: CALL_OW 39
4074: GO 4169
4076: LD_EXP 20
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4099
4086: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4087: LD_INT 1
4089: PPUSH
4090: LD_STRING 13_Titov_1
4092: PPUSH
4093: CALL_OW 39
4097: GO 4169
4099: LD_EXP 21
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4122
4109: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4110: LD_INT 1
4112: PPUSH
4113: LD_STRING 13_Xavier_1
4115: PPUSH
4116: CALL_OW 39
4120: GO 4169
4122: LD_EXP 22
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4145
4132: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4133: LD_INT 1
4135: PPUSH
4136: LD_STRING 13_Belkov_1
4138: PPUSH
4139: CALL_OW 39
4143: GO 4169
4145: LD_EXP 23
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4168
4155: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4156: LD_INT 1
4158: PPUSH
4159: LD_STRING 13_Lipshchin_1
4161: PPUSH
4162: CALL_OW 39
4166: GO 4169
4168: POP
// end ; if GetWeapon ( i ) = 49 then
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 264
4178: PUSH
4179: LD_INT 49
4181: EQUAL
4182: IFFALSE 4195
// DestroyUnit ( i ) else
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 65
4193: GO 4204
// RemoveUnit ( i ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 64
// end ;
4204: GO 3841
4206: POP
4207: POP
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4211: LD_EXP 17
4215: PPUSH
4216: CALL_OW 302
4220: PUSH
4221: LD_EXP 18
4225: PPUSH
4226: CALL_OW 256
4230: PUSH
4231: LD_INT 500
4233: LESS
4234: AND
4235: PUSH
4236: LD_EXP 18
4240: PPUSH
4241: CALL_OW 255
4245: PUSH
4246: LD_INT 7
4248: EQUAL
4249: AND
4250: IFFALSE 4270
4252: GO 4254
4254: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4255: LD_EXP 17
4259: PPUSH
4260: LD_INT 107
4262: PPUSH
4263: LD_INT 118
4265: PPUSH
4266: CALL_OW 111
4270: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4271: LD_EXP 17
4275: PPUSH
4276: CALL_OW 301
4280: PUSH
4281: LD_EXP 27
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4423
4292: GO 4294
4294: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4295: LD_EXP 1
4299: PPUSH
4300: LD_STRING D5b-JMM-1
4302: PPUSH
4303: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PPUSH
4398: LD_STRING D5b-Sol1-1
4400: PPUSH
4401: LD_STRING 
4403: PPUSH
4404: CALL 6078 0 3
// ChangeMissionObjectives ( M2a ) ;
4408: LD_STRING M2a
4410: PPUSH
4411: CALL_OW 337
// burlakStatus = 1 ;
4415: LD_ADDR_EXP 28
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// end ;
4423: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4424: LD_EXP 2
4428: PPUSH
4429: CALL_OW 301
4433: IFFALSE 4570
4435: GO 4437
4437: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_STRING D6-JMM-1
4445: PPUSH
4446: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_STRING D6-Sol1-1
4543: PPUSH
4544: LD_STRING 
4546: PPUSH
4547: CALL 6078 0 3
// Say ( JMM , D6-JMM-2 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D6-JMM-2
4558: PPUSH
4559: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4563: LD_STRING M1a
4565: PPUSH
4566: CALL_OW 337
// end ;
4570: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4571: LD_INT 25
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 321
4581: PUSH
4582: LD_INT 2
4584: EQUAL
4585: IFFALSE 4602
4587: GO 4589
4589: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4590: LD_EXP 2
4594: PPUSH
4595: LD_STRING D6-Huck-2
4597: PPUSH
4598: CALL_OW 88
// end ;
4602: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 34
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 8
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: IFFALSE 4845
4655: GO 4657
4657: DISABLE
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
// begin enable ;
4662: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 22
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 57
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 70
4724: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 5
4732: PPUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 57
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4787: LD_VAR 0 1
4791: PUSH
4792: LD_INT 0
4794: GREATER
4795: PUSH
4796: LD_VAR 0 2
4800: PUSH
4801: LD_INT 0
4803: GREATER
4804: AND
4805: IFFALSE 4845
// begin disable ;
4807: DISABLE
// DialogueOn ;
4808: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_STRING D7-JMM-1
4819: PPUSH
4820: CALL_OW 88
// DialogueOff ;
4824: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4828: LD_STRING M4
4830: PPUSH
4831: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4835: LD_INT 5
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 424
// end ; end ;
4845: PPOPN 2
4847: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 25
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 37
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: AND
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: AND
4903: IFFALSE 4968
4905: GO 4907
4907: DISABLE
// begin enable ;
4908: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4909: LD_ADDR_EXP 26
4913: PUSH
4914: LD_INT 6
4916: PPUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 25
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4950: LD_INT 6
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 424
// radationResearched = 1 ;
4960: LD_ADDR_EXP 29
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ;
4968: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4969: LD_EXP 26
4973: PPUSH
4974: CALL_OW 301
4978: PUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5024
4990: GO 4992
4992: DISABLE
// begin enable ;
4993: ENABLE
// radationResearched = 0 ;
4994: LD_ADDR_EXP 29
4998: PUSH
4999: LD_INT 0
5001: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5002: LD_INT 6
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5012: LD_EXP 1
5016: PPUSH
5017: LD_STRING D9a-JMM-1
5019: PPUSH
5020: CALL_OW 88
// end ; end_of_file
5024: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5025: LD_VAR 0 5
5029: PUSH
5030: LD_INT 8
5032: EQUAL
5033: PUSH
5034: LD_EXP 35
5038: PUSH
5039: LD_INT 0
5041: EQUAL
5042: AND
5043: IFFALSE 5096
// begin eventVar1 = 1 ;
5045: LD_ADDR_EXP 35
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// DialogueOn ;
5053: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D6a-JMM-1
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING D6a-Pow-1
5076: PPUSH
5077: CALL_OW 94
// DialogueOff ;
5081: CALL_OW 7
// wait ( 3 3$0 ) ;
5085: LD_INT 6300
5087: PPUSH
5088: CALL_OW 67
// PowellSupport ;
5092: CALL 1939 0 0
// end ; end ;
5096: PPOPN 5
5098: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5099: LD_VAR 0 1
5103: PUSH
5104: LD_EXP 1
5108: EQUAL
5109: IFFALSE 5118
// YouLost ( JMM ) ;
5111: LD_STRING JMM
5113: PPUSH
5114: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 264
5127: PUSH
5128: LD_INT 31
5130: EQUAL
5131: IFFALSE 5147
// achivCounter := achivCounter + 1 ;
5133: LD_ADDR_EXP 41
5137: PUSH
5138: LD_EXP 41
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 1
5159: NONEQUAL
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 247
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: IFFALSE 5191
// destroyCounter := destroyCounter + 1 ;
5177: LD_ADDR_EXP 42
5181: PUSH
5182: LD_EXP 42
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// end ;
5191: PPOPN 1
5193: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5194: LD_VAR 0 2
5198: PUSH
5199: LD_EXP 18
5203: EQUAL
5204: IFFALSE 5213
// SetAchievement ( ACH_MASHA ) ;
5206: LD_STRING ACH_MASHA
5208: PPUSH
5209: CALL_OW 543
// end ;
5213: PPOPN 4
5215: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 264
5225: PUSH
5226: LD_INT 8
5228: EQUAL
5229: PUSH
5230: LD_EXP 36
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5308
// begin eventVar2 = 1 ;
5241: LD_ADDR_EXP 36
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// DialogueOn ;
5249: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_STRING D6b-JMM-1
5260: PPUSH
5261: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5265: LD_EXP 15
5269: PPUSH
5270: LD_STRING D6b-Pow-1
5272: PPUSH
5273: CALL_OW 94
// DialogueOff ;
5277: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5281: LD_INT 5
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5301: LD_STRING M3
5303: PPUSH
5304: CALL_OW 337
// end ; end ;
5308: PPOPN 2
5310: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: LD_INT 5
5323: PPUSH
5324: CALL_OW 309
5328: PUSH
5329: LD_EXP 37
5333: PUSH
5334: LD_INT 0
5336: EQUAL
5337: AND
5338: IFFALSE 5567
// begin eventVar3 = 1 ;
5340: LD_ADDR_EXP 37
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5348: LD_INT 175
5350: PPUSH
5351: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5355: LD_INT 7
5357: PPUSH
5358: LD_INT 22
5360: PUSH
5361: LD_INT 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 21
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 34
5380: PUSH
5381: LD_INT 11
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: GREATER
5401: IFFALSE 5420
// begin radarOnSpot = 1 ;
5403: LD_ADDR_EXP 30
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5411: LD_STRING M3a
5413: PPUSH
5414: CALL_OW 337
// end else
5418: GO 5427
// begin ChangeMissionObjectives ( M3b ) ;
5420: LD_STRING M3b
5422: PPUSH
5423: CALL_OW 337
// end ; DialogueOn ;
5427: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D8-Huck-1
5438: PPUSH
5439: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D8-JMM-1
5450: PPUSH
5451: CALL_OW 88
// if IsOk ( Stevens ) then
5455: LD_EXP 2
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5526
// begin Say ( Stevens , D8-Huck-2 ) ;
5466: LD_EXP 2
5470: PPUSH
5471: LD_STRING D8-Huck-2
5473: PPUSH
5474: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5478: LD_EXP 1
5482: PPUSH
5483: LD_STRING D8-JMM-2
5485: PPUSH
5486: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5490: LD_EXP 2
5494: PPUSH
5495: LD_STRING D8-Huck-3
5497: PPUSH
5498: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5502: LD_EXP 1
5506: PPUSH
5507: LD_STRING D8-JMM-3
5509: PPUSH
5510: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5514: LD_EXP 2
5518: PPUSH
5519: LD_STRING D8-Huck-4
5521: PPUSH
5522: CALL_OW 88
// end ; DialogueOff ;
5526: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5540: LD_INT 7
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5550: LD_INT 6
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5560: LD_STRING M5
5562: PPUSH
5563: CALL_OW 337
// end ; end ;
5567: PPOPN 3
5569: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5570: LD_EXP 26
5574: PPUSH
5575: CALL_OW 302
5579: PUSH
5580: LD_VAR 0 2
5584: PUSH
5585: LD_EXP 26
5589: EQUAL
5590: AND
5591: PUSH
5592: LD_EXP 38
5596: PUSH
5597: LD_INT 0
5599: EQUAL
5600: AND
5601: PUSH
5602: LD_EXP 37
5606: PUSH
5607: LD_INT 1
5609: EQUAL
5610: AND
5611: IFFALSE 5657
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5613: LD_VAR 0 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 268
5625: PUSH
5626: LD_INT 11
5628: EQUAL
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 268
5642: PUSH
5643: LD_INT 11
5645: EQUAL
5646: OR
5647: IFFALSE 5657
// eventVar4 = 1 ;
5649: LD_ADDR_EXP 38
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// end ;
5657: PPOPN 2
5659: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// begin if GetNation ( unit ) = 2 then
5664: LD_VAR 0 1
5668: PPUSH
5669: CALL_OW 248
5673: PUSH
5674: LD_INT 2
5676: EQUAL
5677: IFFALSE 5955
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5679: LD_ADDR_EXP 32
5683: PUSH
5684: LD_EXP 32
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: ST_TO_ADDR
// for i := 1 to sibDeposits do
5693: LD_ADDR_VAR 0 4
5697: PUSH
5698: DOUBLE
5699: LD_INT 1
5701: DEC
5702: ST_TO_ADDR
5703: LD_EXP 31
5707: PUSH
5708: FOR_TO
5709: IFFALSE 5811
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5711: LD_EXP 31
5715: PUSH
5716: LD_VAR 0 4
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PUSH
5726: LD_VAR 0 2
5730: EQUAL
5731: PUSH
5732: LD_EXP 31
5736: PUSH
5737: LD_VAR 0 4
5741: ARRAY
5742: PUSH
5743: LD_INT 2
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 3
5751: EQUAL
5752: AND
5753: IFFALSE 5809
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5755: LD_ADDR_EXP 31
5759: PUSH
5760: LD_EXP 31
5764: PPUSH
5765: LD_VAR 0 4
5769: PUSH
5770: EMPTY
5771: LIST
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: CALL_OW 3
5781: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5782: LD_ADDR_EXP 31
5786: PUSH
5787: LD_EXP 31
5791: PPUSH
5792: LD_VAR 0 4
5796: PUSH
5797: EMPTY
5798: LIST
5799: PUSH
5800: LD_INT 2
5802: ARRAY
5803: PPUSH
5804: CALL_OW 3
5808: ST_TO_ADDR
// end ;
5809: GO 5708
5811: POP
5812: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5813: LD_EXP 39
5817: PUSH
5818: LD_INT 0
5820: EQUAL
5821: PUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: IN
5852: AND
5853: IFFALSE 5955
// begin eventVar5 = 1 ;
5855: LD_ADDR_EXP 39
5859: PUSH
5860: LD_INT 1
5862: ST_TO_ADDR
// DialogueOn ;
5863: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5867: LD_EXP 2
5871: PPUSH
5872: LD_STRING D4-Sci1-1
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4-JMM-1
5886: PPUSH
5887: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5891: LD_EXP 2
5895: PPUSH
5896: LD_STRING D4-Sci1-2
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4-JMM-2
5910: PPUSH
5911: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5915: LD_EXP 2
5919: PPUSH
5920: LD_STRING D4-Sci1-3
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4-JMM-3
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4-JMM-3a
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// end ; end ; end ;
5955: PPOPN 5
5957: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5958: LD_VAR 0 1
5962: PPUSH
5963: CALL_OW 255
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 266
5981: PUSH
5982: LD_INT 0
5984: EQUAL
5985: AND
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: AND
6049: IFFALSE 6063
// SetBName ( building , omega ) ;
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_STRING omega
6058: PPUSH
6059: CALL_OW 500
// end ;
6063: PPOPN 2
6065: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL 26991 0 1
// end ; end_of_file
6075: PPOPN 1
6077: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_EXP 1
6097: PUSH
6098: LD_EXP 2
6102: PUSH
6103: LD_EXP 3
6107: PUSH
6108: LD_EXP 4
6112: PUSH
6113: LD_EXP 5
6117: PUSH
6118: LD_EXP 6
6122: PUSH
6123: LD_EXP 7
6127: PUSH
6128: LD_EXP 8
6132: PUSH
6133: LD_EXP 9
6137: PUSH
6138: LD_EXP 10
6142: PUSH
6143: LD_EXP 11
6147: PUSH
6148: LD_EXP 12
6152: PUSH
6153: LD_EXP 13
6157: PUSH
6158: LD_EXP 14
6162: PUSH
6163: LD_EXP 15
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: DIFF
6185: ST_TO_ADDR
// if not characters then
6186: LD_VAR 0 1
6190: NOT
6191: IFFALSE 6195
// exit ;
6193: GO 6274
// speaker := characters [ rand ( 1 , characters ) ] ;
6195: LD_ADDR_VAR 0 6
6199: PUSH
6200: LD_VAR 0 1
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6219: LD_VAR 0 6
6223: PPUSH
6224: CALL_OW 258
6228: PUSH
6229: LD_INT 1
6231: EQUAL
6232: IFFALSE 6250
// Say ( speaker , dialogMID ) else
6234: LD_VAR 0 6
6238: PPUSH
6239: LD_VAR 0 2
6243: PPUSH
6244: CALL_OW 88
6248: GO 6264
// Say ( speaker , dialogFID ) ;
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: CALL_OW 88
// result := speaker ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 6
6273: ST_TO_ADDR
// end ;
6274: LD_VAR 0 4
6278: RET
// export function PrepareDifficulty ; begin
6279: LD_INT 0
6281: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6282: LD_INT 5
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// if difficulty = 1 then
6295: LD_OWVAR 67
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6422
// begin SetTech ( 66 , 8 , state_researched ) ;
6305: LD_INT 66
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 2
6313: PPUSH
6314: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6318: LD_INT 67
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6331: LD_INT 68
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6344: LD_INT 51
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6357: LD_INT 52
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6370: LD_INT 53
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 0
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6383: LD_INT 60
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6396: LD_INT 61
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6409: LD_INT 62
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 322
// end ; if difficulty = 2 then
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 2
6429: EQUAL
6430: IFFALSE 6549
// begin SetTech ( 66 , 8 , state_researched ) ;
6432: LD_INT 66
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 2
6440: PPUSH
6441: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6445: LD_INT 67
6447: PPUSH
6448: LD_INT 8
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6458: LD_INT 68
6460: PPUSH
6461: LD_INT 8
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6471: LD_INT 51
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6484: LD_INT 52
6486: PPUSH
6487: LD_INT 8
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6497: LD_INT 53
6499: PPUSH
6500: LD_INT 8
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6510: LD_INT 60
6512: PPUSH
6513: LD_INT 8
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6523: LD_INT 61
6525: PPUSH
6526: LD_INT 8
6528: PPUSH
6529: LD_INT 2
6531: PPUSH
6532: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6536: LD_INT 62
6538: PPUSH
6539: LD_INT 8
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 322
// end ; if difficulty >= 3 then
6549: LD_OWVAR 67
6553: PUSH
6554: LD_INT 3
6556: GREATEREQUAL
6557: IFFALSE 6676
// begin SetTech ( 66 , 8 , state_researched ) ;
6559: LD_INT 66
6561: PPUSH
6562: LD_INT 8
6564: PPUSH
6565: LD_INT 2
6567: PPUSH
6568: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6572: LD_INT 67
6574: PPUSH
6575: LD_INT 8
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6585: LD_INT 68
6587: PPUSH
6588: LD_INT 8
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 8
6603: PPUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6611: LD_INT 52
6613: PPUSH
6614: LD_INT 8
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6624: LD_INT 53
6626: PPUSH
6627: LD_INT 8
6629: PPUSH
6630: LD_INT 2
6632: PPUSH
6633: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6637: LD_INT 60
6639: PPUSH
6640: LD_INT 8
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6650: LD_INT 61
6652: PPUSH
6653: LD_INT 8
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6663: LD_INT 62
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: LD_INT 0
6671: PPUSH
6672: CALL_OW 322
// end ; end ;
6676: LD_VAR 0 1
6680: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6689: LD_ADDR_VAR 0 7
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 25
6708: PUSH
6709: LD_INT 9
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6725: LD_ADDR_VAR 0 8
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 12
6783: ST_TO_ADDR
// for i = 1 to list do
6784: LD_ADDR_VAR 0 6
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 7
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6982
// for ta in filter do
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_VAR 0 8
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6978
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_VAR 0 6
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: CALL_OW 296
6835: PUSH
6836: LD_INT 13
6838: LESSEQUAL
6839: IFFALSE 6976
// begin case c of 1 :
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 1
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6892
6854: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6855: LD_VAR 0 7
6859: PUSH
6860: LD_VAR 0 6
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 4
6870: PPUSH
6871: CALL_OW 250
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 251
6885: PPUSH
6886: CALL_OW 154
6890: GO 6976
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6964
6900: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6901: LD_VAR 0 7
6905: PUSH
6906: LD_VAR 0 6
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 250
6921: PUSH
6922: LD_INT 1
6924: NEG
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 12
6933: PLUS
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 251
6944: PUSH
6945: LD_INT 1
6947: NEG
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 12
6956: PLUS
6957: PPUSH
6958: CALL_OW 153
6962: GO 6976
6964: LD_INT 3
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6975
6972: POP
// ; end ;
6973: GO 6976
6975: POP
// end ; end ;
6976: GO 6812
6978: POP
6979: POP
6980: GO 6799
6982: POP
6983: POP
// end ;
6984: LD_VAR 0 3
6988: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// for i in charactersList do
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7022
// SaveCharacters ( i , ident ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 38
7020: GO 7003
7022: POP
7023: POP
// end ;
7024: LD_VAR 0 3
7028: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// for i = 1 to medicCount do
7042: LD_ADDR_VAR 0 13
7046: PUSH
7047: DOUBLE
7048: LD_INT 1
7050: DEC
7051: ST_TO_ADDR
7052: LD_VAR 0 7
7056: PUSH
7057: FOR_TO
7058: IFFALSE 7140
// begin uc_side = side ;
7060: LD_ADDR_OWVAR 20
7064: PUSH
7065: LD_VAR 0 1
7069: ST_TO_ADDR
// uc_nation = nation ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// hc_name =  ;
7080: LD_ADDR_OWVAR 26
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// hc_gallery =  ;
7088: LD_ADDR_OWVAR 33
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7096: LD_INT 0
7098: PPUSH
7099: LD_INT 4
7101: PPUSH
7102: LD_VAR 0 8
7106: PPUSH
7107: CALL_OW 380
// un = CreateHuman ;
7111: LD_ADDR_VAR 0 15
7115: PUSH
7116: CALL_OW 44
7120: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7121: LD_VAR 0 15
7125: PPUSH
7126: LD_VAR 0 9
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 49
// end ;
7138: GO 7057
7140: POP
7141: POP
// for i = 1 to soldierCount do
7142: LD_ADDR_VAR 0 13
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_VAR 0 3
7156: PUSH
7157: FOR_TO
7158: IFFALSE 7240
// begin uc_side = side ;
7160: LD_ADDR_OWVAR 20
7164: PUSH
7165: LD_VAR 0 1
7169: ST_TO_ADDR
// uc_nation = nation ;
7170: LD_ADDR_OWVAR 21
7174: PUSH
7175: LD_VAR 0 2
7179: ST_TO_ADDR
// hc_name =  ;
7180: LD_ADDR_OWVAR 26
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_gallery =  ;
7188: LD_ADDR_OWVAR 33
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_VAR 0 8
7206: PPUSH
7207: CALL_OW 380
// un = CreateHuman ;
7211: LD_ADDR_VAR 0 15
7215: PUSH
7216: CALL_OW 44
7220: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7221: LD_VAR 0 15
7225: PPUSH
7226: LD_VAR 0 9
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 49
// end ;
7238: GO 7157
7240: POP
7241: POP
// for i = 1 to sniperCount do
7242: LD_ADDR_VAR 0 13
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7340
// begin uc_side = side ;
7260: LD_ADDR_OWVAR 20
7264: PUSH
7265: LD_VAR 0 1
7269: ST_TO_ADDR
// uc_nation = nation ;
7270: LD_ADDR_OWVAR 21
7274: PUSH
7275: LD_VAR 0 2
7279: ST_TO_ADDR
// hc_name =  ;
7280: LD_ADDR_OWVAR 26
7284: PUSH
7285: LD_STRING 
7287: ST_TO_ADDR
// hc_gallery =  ;
7288: LD_ADDR_OWVAR 33
7292: PUSH
7293: LD_STRING 
7295: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7296: LD_INT 0
7298: PPUSH
7299: LD_INT 5
7301: PPUSH
7302: LD_VAR 0 8
7306: PPUSH
7307: CALL_OW 380
// un = CreateHuman ;
7311: LD_ADDR_VAR 0 15
7315: PUSH
7316: CALL_OW 44
7320: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7321: LD_VAR 0 15
7325: PPUSH
7326: LD_VAR 0 9
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 49
// end ;
7338: GO 7257
7340: POP
7341: POP
// for i = 1 to bazookCount do
7342: LD_ADDR_VAR 0 13
7346: PUSH
7347: DOUBLE
7348: LD_INT 1
7350: DEC
7351: ST_TO_ADDR
7352: LD_VAR 0 5
7356: PUSH
7357: FOR_TO
7358: IFFALSE 7440
// begin uc_side = side ;
7360: LD_ADDR_OWVAR 20
7364: PUSH
7365: LD_VAR 0 1
7369: ST_TO_ADDR
// uc_nation = nation ;
7370: LD_ADDR_OWVAR 21
7374: PUSH
7375: LD_VAR 0 2
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_gallery =  ;
7388: LD_ADDR_OWVAR 33
7392: PUSH
7393: LD_STRING 
7395: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7396: LD_INT 0
7398: PPUSH
7399: LD_INT 9
7401: PPUSH
7402: LD_VAR 0 8
7406: PPUSH
7407: CALL_OW 380
// un = CreateHuman ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: CALL_OW 44
7420: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7421: LD_VAR 0 15
7425: PPUSH
7426: LD_VAR 0 9
7430: PPUSH
7431: LD_INT 0
7433: PPUSH
7434: CALL_OW 49
// end ;
7438: GO 7357
7440: POP
7441: POP
// for i = 1 to mortalCount do
7442: LD_ADDR_VAR 0 13
7446: PUSH
7447: DOUBLE
7448: LD_INT 1
7450: DEC
7451: ST_TO_ADDR
7452: LD_VAR 0 6
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7540
// begin uc_side = side ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_VAR 0 1
7469: ST_TO_ADDR
// uc_nation = nation ;
7470: LD_ADDR_OWVAR 21
7474: PUSH
7475: LD_VAR 0 2
7479: ST_TO_ADDR
// hc_name =  ;
7480: LD_ADDR_OWVAR 26
7484: PUSH
7485: LD_STRING 
7487: ST_TO_ADDR
// hc_gallery =  ;
7488: LD_ADDR_OWVAR 33
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7496: LD_INT 0
7498: PPUSH
7499: LD_INT 8
7501: PPUSH
7502: LD_VAR 0 8
7506: PPUSH
7507: CALL_OW 380
// un = CreateHuman ;
7511: LD_ADDR_VAR 0 15
7515: PUSH
7516: CALL_OW 44
7520: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 9
7530: PPUSH
7531: LD_INT 0
7533: PPUSH
7534: CALL_OW 49
// end ;
7538: GO 7457
7540: POP
7541: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7542: LD_ADDR_VAR 0 17
7546: PUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: ST_TO_ADDR
// for i in medic_list do
7578: LD_ADDR_VAR 0 13
7582: PUSH
7583: LD_VAR 0 17
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7624
// if GetTag ( i ) = 1 then
7591: LD_VAR 0 13
7595: PPUSH
7596: CALL_OW 110
7600: PUSH
7601: LD_INT 1
7603: EQUAL
7604: IFFALSE 7622
// medic_list := medic_list diff i ;
7606: LD_ADDR_VAR 0 17
7610: PUSH
7611: LD_VAR 0 17
7615: PUSH
7616: LD_VAR 0 13
7620: DIFF
7621: ST_TO_ADDR
7622: GO 7588
7624: POP
7625: POP
// for i in medic_list do
7626: LD_ADDR_VAR 0 13
7630: PUSH
7631: LD_VAR 0 17
7635: PUSH
7636: FOR_IN
7637: IFFALSE 7655
// ComMoveToArea ( i , healArea ) ;
7639: LD_VAR 0 13
7643: PPUSH
7644: LD_VAR 0 10
7648: PPUSH
7649: CALL_OW 113
7653: GO 7636
7655: POP
7656: POP
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7664: LD_ADDR_VAR 0 16
7668: PUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 550
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 250
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7725: LD_ADDR_VAR 0 18
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_VAR 0 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// if medicCount > 0 then
7812: LD_VAR 0 7
7816: PUSH
7817: LD_INT 0
7819: GREATER
7820: IFFALSE 7894
// begin if damageUnit_list > 0 then
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 0
7829: GREATER
7830: IFFALSE 7894
// begin for i in damageUnit_list do
7832: LD_ADDR_VAR 0 13
7836: PUSH
7837: LD_VAR 0 16
7841: PUSH
7842: FOR_IN
7843: IFFALSE 7892
// begin ComMoveToArea ( i , healArea ) ;
7845: LD_VAR 0 13
7849: PPUSH
7850: LD_VAR 0 10
7854: PPUSH
7855: CALL_OW 113
// for j in medic_list do
7859: LD_ADDR_VAR 0 14
7863: PUSH
7864: LD_VAR 0 17
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7888
// AddComHeal ( j , i ) ;
7872: LD_VAR 0 14
7876: PPUSH
7877: LD_VAR 0 13
7881: PPUSH
7882: CALL_OW 188
7886: GO 7869
7888: POP
7889: POP
// end ;
7890: GO 7842
7892: POP
7893: POP
// end ; end ; for i in soldiersOK_list do
7894: LD_ADDR_VAR 0 13
7898: PUSH
7899: LD_VAR 0 18
7903: PUSH
7904: FOR_IN
7905: IFFALSE 8081
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7907: LD_ADDR_VAR 0 21
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_VAR 0 11
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_VAR 0 13
7933: PPUSH
7934: CALL_OW 74
7938: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7939: LD_ADDR_VAR 0 22
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 11
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 59
7961: PUSH
7962: EMPTY
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 21
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PPUSH
8003: LD_VAR 0 13
8007: PPUSH
8008: CALL_OW 74
8012: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8013: LD_VAR 0 13
8017: PPUSH
8018: LD_VAR 0 21
8022: PPUSH
8023: CALL_OW 296
8027: PUSH
8028: LD_INT 8
8030: PLUS
8031: PUSH
8032: LD_VAR 0 13
8036: PPUSH
8037: LD_VAR 0 22
8041: PPUSH
8042: CALL_OW 296
8046: LESS
8047: IFFALSE 8065
// begin ComAttackUnit ( i , target1 ) ;
8049: LD_VAR 0 13
8053: PPUSH
8054: LD_VAR 0 21
8058: PPUSH
8059: CALL_OW 115
// end else
8063: GO 8079
// begin ComAttackUnit ( i , target2 ) ;
8065: LD_VAR 0 13
8069: PPUSH
8070: LD_VAR 0 22
8074: PPUSH
8075: CALL_OW 115
// end ; end ;
8079: GO 7904
8081: POP
8082: POP
// until soldiersOK_list = [ ] ;
8083: LD_VAR 0 18
8087: PUSH
8088: EMPTY
8089: EQUAL
8090: IFFALSE 7657
// end ;
8092: LD_VAR 0 12
8096: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
// amChassisTab = [ ] ;
8110: LD_ADDR_VAR 0 19
8114: PUSH
8115: EMPTY
8116: ST_TO_ADDR
// arChassisTab = [ ] ;
8117: LD_ADDR_VAR 0 18
8121: PUSH
8122: EMPTY
8123: ST_TO_ADDR
// ruChassisTab = [ ] ;
8124: LD_ADDR_VAR 0 17
8128: PUSH
8129: EMPTY
8130: ST_TO_ADDR
// for i = 1 to vehCount do
8131: LD_ADDR_VAR 0 13
8135: PUSH
8136: DOUBLE
8137: LD_INT 1
8139: DEC
8140: ST_TO_ADDR
8141: LD_VAR 0 3
8145: PUSH
8146: FOR_TO
8147: IFFALSE 9571
// begin wait ( 0 0$01 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// if nation = 1 then
8156: LD_VAR 0 5
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 8645
// begin uc_side = side ;
8166: LD_ADDR_OWVAR 20
8170: PUSH
8171: LD_VAR 0 2
8175: ST_TO_ADDR
// uc_nation = nation ;
8176: LD_ADDR_OWVAR 21
8180: PUSH
8181: LD_VAR 0 5
8185: ST_TO_ADDR
// vc_engine = vehengine ;
8186: LD_ADDR_OWVAR 39
8190: PUSH
8191: LD_VAR 0 6
8195: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8196: LD_ADDR_OWVAR 40
8200: PUSH
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 10
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// for j = 1 to AMWeapon do
8220: LD_ADDR_VAR 0 14
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_VAR 0 10
8234: PUSH
8235: FOR_TO
8236: IFFALSE 8537
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 3
8266: EQUAL
8267: OR
8268: IFFALSE 8321
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8270: LD_ADDR_VAR 0 19
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8297: LD_ADDR_OWVAR 37
8301: PUSH
8302: LD_VAR 0 19
8306: PUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 19
8314: PPUSH
8315: CALL_OW 12
8319: ARRAY
8320: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8321: LD_VAR 0 10
8325: PUSH
8326: LD_VAR 0 14
8330: ARRAY
8331: PUSH
8332: LD_INT 4
8334: EQUAL
8335: PUSH
8336: LD_VAR 0 10
8340: PUSH
8341: LD_VAR 0 14
8345: ARRAY
8346: PUSH
8347: LD_INT 5
8349: EQUAL
8350: OR
8351: PUSH
8352: LD_VAR 0 10
8356: PUSH
8357: LD_VAR 0 14
8361: ARRAY
8362: PUSH
8363: LD_INT 9
8365: EQUAL
8366: OR
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_VAR 0 14
8377: ARRAY
8378: PUSH
8379: LD_INT 11
8381: EQUAL
8382: OR
8383: PUSH
8384: LD_VAR 0 10
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PUSH
8395: LD_INT 7
8397: EQUAL
8398: OR
8399: IFFALSE 8448
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8401: LD_ADDR_VAR 0 19
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8424: LD_ADDR_OWVAR 37
8428: PUSH
8429: LD_VAR 0 19
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 19
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8448: LD_VAR 0 10
8452: PUSH
8453: LD_VAR 0 14
8457: ARRAY
8458: PUSH
8459: LD_INT 8
8461: EQUAL
8462: PUSH
8463: LD_VAR 0 10
8467: PUSH
8468: LD_VAR 0 14
8472: ARRAY
8473: PUSH
8474: LD_INT 6
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 10
8483: PUSH
8484: LD_VAR 0 14
8488: ARRAY
8489: PUSH
8490: LD_INT 10
8492: EQUAL
8493: OR
8494: IFFALSE 8535
// begin amChassisTab = [ 4 , 5 ] ;
8496: LD_ADDR_VAR 0 19
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8511: LD_ADDR_OWVAR 37
8515: PUSH
8516: LD_VAR 0 19
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 19
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
// end ; end ;
8535: GO 8235
8537: POP
8538: POP
// veh = CreateVehicle ;
8539: LD_ADDR_VAR 0 16
8543: PUSH
8544: CALL_OW 45
8548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8549: LD_VAR 0 16
8553: PPUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 49
// if vc_control = 1 then
8566: LD_OWVAR 38
8570: PUSH
8571: LD_INT 1
8573: EQUAL
8574: IFFALSE 8631
// begin hc_gallery =  ;
8576: LD_ADDR_OWVAR 33
8580: PUSH
8581: LD_STRING 
8583: ST_TO_ADDR
// hc_name =  ;
8584: LD_ADDR_OWVAR 26
8588: PUSH
8589: LD_STRING 
8591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8592: LD_INT 0
8594: PPUSH
8595: LD_INT 3
8597: PPUSH
8598: LD_VAR 0 4
8602: PPUSH
8603: CALL_OW 380
// un = CreateHuman ;
8607: LD_ADDR_VAR 0 15
8611: PUSH
8612: CALL_OW 44
8616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8617: LD_VAR 0 15
8621: PPUSH
8622: LD_VAR 0 16
8626: PPUSH
8627: CALL_OW 52
// end ; i = i + 1 ;
8631: LD_ADDR_VAR 0 13
8635: PUSH
8636: LD_VAR 0 13
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: ST_TO_ADDR
// end ; if nation = 2 then
8645: LD_VAR 0 5
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: IFFALSE 9155
// begin uc_side = side ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_VAR 0 2
8664: ST_TO_ADDR
// uc_nation = nation ;
8665: LD_ADDR_OWVAR 21
8669: PUSH
8670: LD_VAR 0 5
8674: ST_TO_ADDR
// vc_engine = vehengine ;
8675: LD_ADDR_OWVAR 39
8679: PUSH
8680: LD_VAR 0 6
8684: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 50
8719: PUSH
8720: EMPTY
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 69
8733: PUSH
8734: LD_INT 8
8736: LESSEQUAL
8737: IFFALSE 8765
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_VAR 0 7
8748: PUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 7
8756: PPUSH
8757: CALL_OW 12
8761: ARRAY
8762: ST_TO_ADDR
8763: GO 8773
// vc_control = control_apeman ;
8765: LD_ADDR_OWVAR 38
8769: PUSH
8770: LD_INT 5
8772: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8773: LD_ADDR_OWVAR 40
8777: PUSH
8778: LD_VAR 0 9
8782: PUSH
8783: LD_INT 1
8785: PPUSH
8786: LD_VAR 0 9
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: ST_TO_ADDR
// for j = 1 to ARWeapons do
8797: LD_ADDR_VAR 0 14
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 9
8811: PUSH
8812: FOR_TO
8813: IFFALSE 9047
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 14
8824: ARRAY
8825: PUSH
8826: LD_INT 24
8828: EQUAL
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PUSH
8841: LD_INT 22
8843: EQUAL
8844: OR
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 23
8859: EQUAL
8860: OR
8861: PUSH
8862: LD_VAR 0 9
8866: PUSH
8867: LD_VAR 0 14
8871: ARRAY
8872: PUSH
8873: LD_INT 30
8875: EQUAL
8876: OR
8877: IFFALSE 8926
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8879: LD_ADDR_VAR 0 18
8883: PUSH
8884: LD_INT 11
8886: PUSH
8887: LD_INT 12
8889: PUSH
8890: LD_INT 13
8892: PUSH
8893: LD_INT 14
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8902: LD_ADDR_OWVAR 37
8906: PUSH
8907: LD_VAR 0 18
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 18
8919: PPUSH
8920: CALL_OW 12
8924: ARRAY
8925: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8926: LD_VAR 0 9
8930: PUSH
8931: LD_VAR 0 14
8935: ARRAY
8936: PUSH
8937: LD_INT 29
8939: EQUAL
8940: PUSH
8941: LD_VAR 0 9
8945: PUSH
8946: LD_VAR 0 14
8950: ARRAY
8951: PUSH
8952: LD_INT 28
8954: EQUAL
8955: OR
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 14
8966: ARRAY
8967: PUSH
8968: LD_INT 27
8970: EQUAL
8971: OR
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: LD_VAR 0 14
8982: ARRAY
8983: PUSH
8984: LD_INT 26
8986: EQUAL
8987: OR
8988: PUSH
8989: LD_VAR 0 9
8993: PUSH
8994: LD_VAR 0 14
8998: ARRAY
8999: PUSH
9000: LD_INT 25
9002: EQUAL
9003: OR
9004: IFFALSE 9045
// begin arChassisTab = [ 13 , 14 ] ;
9006: LD_ADDR_VAR 0 18
9010: PUSH
9011: LD_INT 13
9013: PUSH
9014: LD_INT 14
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9021: LD_ADDR_OWVAR 37
9025: PUSH
9026: LD_VAR 0 18
9030: PUSH
9031: LD_INT 1
9033: PPUSH
9034: LD_VAR 0 18
9038: PPUSH
9039: CALL_OW 12
9043: ARRAY
9044: ST_TO_ADDR
// end ; end ;
9045: GO 8812
9047: POP
9048: POP
// veh = CreateVehicle ;
9049: LD_ADDR_VAR 0 16
9053: PUSH
9054: CALL_OW 45
9058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9059: LD_VAR 0 16
9063: PPUSH
9064: LD_VAR 0 1
9068: PPUSH
9069: LD_INT 0
9071: PPUSH
9072: CALL_OW 49
// if vc_control = 1 then
9076: LD_OWVAR 38
9080: PUSH
9081: LD_INT 1
9083: EQUAL
9084: IFFALSE 9141
// begin hc_gallery =  ;
9086: LD_ADDR_OWVAR 33
9090: PUSH
9091: LD_STRING 
9093: ST_TO_ADDR
// hc_name =  ;
9094: LD_ADDR_OWVAR 26
9098: PUSH
9099: LD_STRING 
9101: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9102: LD_INT 0
9104: PPUSH
9105: LD_INT 3
9107: PPUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 380
// un = CreateHuman ;
9117: LD_ADDR_VAR 0 15
9121: PUSH
9122: CALL_OW 44
9126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9127: LD_VAR 0 15
9131: PPUSH
9132: LD_VAR 0 16
9136: PPUSH
9137: CALL_OW 52
// end ; i = i + 1 ;
9141: LD_ADDR_VAR 0 13
9145: PUSH
9146: LD_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PLUS
9154: ST_TO_ADDR
// end ; if nation = 3 then
9155: LD_VAR 0 5
9159: PUSH
9160: LD_INT 3
9162: EQUAL
9163: IFFALSE 9569
// begin uc_side = side ;
9165: LD_ADDR_OWVAR 20
9169: PUSH
9170: LD_VAR 0 2
9174: ST_TO_ADDR
// uc_nation = nation ;
9175: LD_ADDR_OWVAR 21
9179: PUSH
9180: LD_VAR 0 5
9184: ST_TO_ADDR
// vc_engine = vehengine ;
9185: LD_ADDR_OWVAR 39
9189: PUSH
9190: LD_VAR 0 6
9194: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9195: LD_ADDR_OWVAR 38
9199: PUSH
9200: LD_VAR 0 7
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9219: LD_ADDR_OWVAR 40
9223: PUSH
9224: LD_VAR 0 8
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: ST_TO_ADDR
// for j = 1 to RuWeapons do
9243: LD_ADDR_VAR 0 14
9247: PUSH
9248: DOUBLE
9249: LD_INT 1
9251: DEC
9252: ST_TO_ADDR
9253: LD_VAR 0 8
9257: PUSH
9258: FOR_TO
9259: IFFALSE 9445
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9261: LD_VAR 0 8
9265: PUSH
9266: LD_VAR 0 14
9270: ARRAY
9271: PUSH
9272: LD_INT 42
9274: EQUAL
9275: PUSH
9276: LD_VAR 0 8
9280: PUSH
9281: LD_VAR 0 14
9285: ARRAY
9286: PUSH
9287: LD_INT 43
9289: EQUAL
9290: OR
9291: PUSH
9292: LD_VAR 0 8
9296: PUSH
9297: LD_VAR 0 14
9301: ARRAY
9302: PUSH
9303: LD_INT 44
9305: EQUAL
9306: OR
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: LD_VAR 0 14
9317: ARRAY
9318: PUSH
9319: LD_INT 45
9321: EQUAL
9322: OR
9323: PUSH
9324: LD_VAR 0 8
9328: PUSH
9329: LD_VAR 0 14
9333: ARRAY
9334: PUSH
9335: LD_INT 49
9337: EQUAL
9338: OR
9339: IFFALSE 9376
// begin ruChassisTab = [ 24 ] ;
9341: LD_ADDR_VAR 0 17
9345: PUSH
9346: LD_INT 24
9348: PUSH
9349: EMPTY
9350: LIST
9351: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9352: LD_ADDR_OWVAR 37
9356: PUSH
9357: LD_VAR 0 17
9361: PUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 17
9369: PPUSH
9370: CALL_OW 12
9374: ARRAY
9375: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9376: LD_VAR 0 8
9380: PUSH
9381: LD_VAR 0 14
9385: ARRAY
9386: PUSH
9387: LD_INT 46
9389: EQUAL
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_VAR 0 14
9400: ARRAY
9401: PUSH
9402: LD_INT 47
9404: EQUAL
9405: OR
9406: IFFALSE 9443
// begin ruChassisTab = [ 24 ] ;
9408: LD_ADDR_VAR 0 17
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: EMPTY
9417: LIST
9418: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9419: LD_ADDR_OWVAR 37
9423: PUSH
9424: LD_VAR 0 17
9428: PUSH
9429: LD_INT 1
9431: PPUSH
9432: LD_VAR 0 17
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// end ; end ;
9443: GO 9258
9445: POP
9446: POP
// veh = CreateVehicle ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 45
9456: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// if vc_control = 1 then
9474: LD_OWVAR 38
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 9569
// begin if uc_side = 8 then
9484: LD_OWVAR 20
9488: PUSH
9489: LD_INT 8
9491: EQUAL
9492: IFFALSE 9504
// uc_nation = 2 else
9494: LD_ADDR_OWVAR 21
9498: PUSH
9499: LD_INT 2
9501: ST_TO_ADDR
9502: GO 9514
// uc_nation = nation ;
9504: LD_ADDR_OWVAR 21
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// hc_gallery =  ;
9514: LD_ADDR_OWVAR 33
9518: PUSH
9519: LD_STRING 
9521: ST_TO_ADDR
// hc_name =  ;
9522: LD_ADDR_OWVAR 26
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9530: LD_INT 0
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 380
// un = CreateHuman ;
9545: LD_ADDR_VAR 0 15
9549: PUSH
9550: CALL_OW 44
9554: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9555: LD_VAR 0 15
9559: PPUSH
9560: LD_VAR 0 16
9564: PPUSH
9565: CALL_OW 52
// end ; end ; end ;
9569: GO 8146
9571: POP
9572: POP
// repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9580: LD_ADDR_VAR 0 20
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 24
9609: PUSH
9610: LD_INT 250
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 34
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 27
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 28
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 34
9662: PUSH
9663: LD_INT 29
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 46
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 34
9682: PUSH
9683: LD_INT 44
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 47
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if vehicleOK_list > 0 then
9733: LD_VAR 0 20
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9960
// begin for i in vehicleOK_list do
9743: LD_ADDR_VAR 0 13
9747: PUSH
9748: LD_VAR 0 20
9752: PUSH
9753: FOR_IN
9754: IFFALSE 9958
// begin if GetSide ( i ) <> side then
9756: LD_VAR 0 13
9760: PPUSH
9761: CALL_OW 255
9765: PUSH
9766: LD_VAR 0 2
9770: NONEQUAL
9771: IFFALSE 9784
// begin ComStop ( i ) ;
9773: LD_VAR 0 13
9777: PPUSH
9778: CALL_OW 141
// continue ;
9782: GO 9753
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9784: LD_ADDR_VAR 0 21
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 11
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PPUSH
9806: LD_VAR 0 13
9810: PPUSH
9811: CALL_OW 74
9815: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9816: LD_ADDR_VAR 0 22
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_VAR 0 11
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 59
9838: PUSH
9839: EMPTY
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 1
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 21
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PPUSH
9880: LD_VAR 0 13
9884: PPUSH
9885: CALL_OW 74
9889: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9890: LD_VAR 0 13
9894: PPUSH
9895: LD_VAR 0 21
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: PLUS
9908: PUSH
9909: LD_VAR 0 13
9913: PPUSH
9914: LD_VAR 0 22
9918: PPUSH
9919: CALL_OW 296
9923: LESS
9924: IFFALSE 9942
// begin ComAttackUnit ( i , target1 ) ;
9926: LD_VAR 0 13
9930: PPUSH
9931: LD_VAR 0 21
9935: PPUSH
9936: CALL_OW 115
// end else
9940: GO 9956
// begin ComAttackUnit ( i , target2 ) ;
9942: LD_VAR 0 13
9946: PPUSH
9947: LD_VAR 0 22
9951: PPUSH
9952: CALL_OW 115
// end ; end ;
9956: GO 9753
9958: POP
9959: POP
// end ; until vehicleOK_list = 0 ;
9960: LD_VAR 0 20
9964: PUSH
9965: LD_INT 0
9967: EQUAL
9968: IFFALSE 9573
// end ;
9970: LD_VAR 0 12
9974: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9975: LD_INT 0
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 34
10002: PUSH
10003: LD_INT 29
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: ST_TO_ADDR
// if veh_list = 0 then
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 0
10026: EQUAL
10027: IFFALSE 10031
// exit ;
10029: GO 10236
// if veh_list > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: IFFALSE 10236
// begin for i in veh_List do
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_VAR 0 6
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10054: LD_ADDR_VAR 0 7
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_VAR 0 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 24
10073: PUSH
10074: LD_INT 250
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 59
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: PPUSH
10124: CALL_OW 69
10128: PPUSH
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 74
10138: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 7
10148: PPUSH
10149: CALL_OW 115
// if not HasTask ( i ) then
10153: LD_VAR 0 4
10157: PPUSH
10158: CALL_OW 314
10162: NOT
10163: IFFALSE 10232
// begin wait ( 0 0$0.1 ) ;
10165: LD_INT 4
10167: PPUSH
10168: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10172: LD_ADDR_VAR 0 8
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 250
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: CALL_OW 74
10217: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 8
10227: PPUSH
10228: CALL_OW 115
// end ; end ;
10232: GO 10051
10234: POP
10235: POP
// end ; end ; end_of_file
10236: LD_VAR 0 3
10240: RET
// every 0 0$1 do
10241: GO 10243
10243: DISABLE
// begin enable ;
10244: ENABLE
// IntBazooka ( 7 , 1 ) ;
10245: LD_INT 7
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL 6681 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10255: LD_INT 8
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL 9975 0 2
// end ;
10265: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10266: LD_INT 22
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 50
10288: PUSH
10289: EMPTY
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 34
10297: PUSH
10298: LD_INT 46
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 44
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 34
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 34
10327: PUSH
10328: LD_INT 47
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PUSH
10353: LD_INT 0
10355: GREATER
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 50
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: LD_INT 34
10385: PUSH
10386: LD_INT 49
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PUSH
10404: LD_INT 0
10406: GREATER
10407: AND
10408: IFFALSE 10580
10410: GO 10412
10412: DISABLE
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// begin enable ;
10417: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 3
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 50
10445: PUSH
10446: EMPTY
10447: LIST
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 44
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 45
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 47
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 50
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: LD_INT 34
10543: PUSH
10544: LD_INT 49
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: CALL_OW 112
// end ; end_of_file
10580: PPOPN 2
10582: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10583: LD_EXP 38
10587: PUSH
10588: LD_INT 1
10590: EQUAL
10591: IFFALSE 11493
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
10599: PPUSH
10600: PPUSH
// begin m1 := false ;
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
// m2 := false ;
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// m3 := false ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: LD_INT 0
10624: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10625: LD_EXP 1
10629: PPUSH
10630: LD_STRING D9b-JMM-1
10632: PPUSH
10633: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10637: LD_EXP 15
10641: PPUSH
10642: LD_STRING D9b-Pow-1
10644: PPUSH
10645: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10649: LD_EXP 1
10653: PPUSH
10654: LD_STRING D9b-JMM-2
10656: PPUSH
10657: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10661: LD_EXP 15
10665: PPUSH
10666: LD_STRING D9b-Pow-2
10668: PPUSH
10669: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10673: LD_EXP 1
10677: PPUSH
10678: LD_STRING D9b-JMM-3
10680: PPUSH
10681: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10685: LD_EXP 15
10689: PPUSH
10690: LD_STRING D9b-Pow-3
10692: PPUSH
10693: CALL_OW 94
// if tick <= 60 60$00 then
10697: LD_OWVAR 1
10701: PUSH
10702: LD_INT 126000
10704: LESSEQUAL
10705: IFFALSE 10714
// SetAchievement ( ACH_ASPEED_13 ) ;
10707: LD_STRING ACH_ASPEED_13
10709: PPUSH
10710: CALL_OW 543
// if burlakStatus = 1 then
10714: LD_EXP 28
10718: PUSH
10719: LD_INT 1
10721: EQUAL
10722: IFFALSE 10744
// begin m1 := true ;
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10732: LD_STRING Burlak
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 101
// end else
10742: GO 10755
// begin AddMedal ( Burlak , - 1 ) ;
10744: LD_STRING Burlak
10746: PPUSH
10747: LD_INT 1
10749: NEG
10750: PPUSH
10751: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10755: LD_EXP 2
10759: PPUSH
10760: CALL_OW 302
10764: IFFALSE 10786
// begin m2 := true ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10774: LD_STRING Stevens
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
// end else
10784: GO 10797
// begin AddMedal ( Stevens , - 1 ) ;
10786: LD_STRING Stevens
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// end ; if radarOnSpot = 1 then
10797: LD_EXP 30
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10827
// begin m3 := true ;
10807: LD_ADDR_VAR 0 3
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10815: LD_STRING Observation
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 101
// end else
10825: GO 10838
// begin AddMedal ( Observation , - 1 ) ;
10827: LD_STRING Observation
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10838: LD_VAR 0 1
10842: PUSH
10843: LD_VAR 0 2
10847: AND
10848: PUSH
10849: LD_VAR 0 3
10853: AND
10854: PUSH
10855: LD_OWVAR 67
10859: PUSH
10860: LD_INT 3
10862: GREATEREQUAL
10863: AND
10864: IFFALSE 10876
// SetAchievementEX ( ACH_AMER , 13 ) ;
10866: LD_STRING ACH_AMER
10868: PPUSH
10869: LD_INT 13
10871: PPUSH
10872: CALL_OW 564
// GiveMedals ( MAIN ) ;
10876: LD_STRING MAIN
10878: PPUSH
10879: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10883: LD_EXP 28
10887: PPUSH
10888: LD_STRING 13_BurlakStatus_1
10890: PPUSH
10891: CALL_OW 39
// if IsLive ( Stevens ) then
10895: LD_EXP 2
10899: PPUSH
10900: CALL_OW 300
10904: IFFALSE 10918
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10906: LD_INT 1
10908: PPUSH
10909: LD_STRING 13_StevensStatus_1
10911: PPUSH
10912: CALL_OW 39
10916: GO 10928
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10918: LD_INT 0
10920: PPUSH
10921: LD_STRING 13_StevensStatus_1
10923: PPUSH
10924: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 3
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 4
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 8
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 69
11029: PPUSH
11030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11034: LD_EXP 1
11038: PPUSH
11039: LD_EXP 34
11043: PUSH
11044: LD_STRING JMM
11046: STR
11047: PPUSH
11048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11052: LD_EXP 8
11056: PPUSH
11057: LD_EXP 34
11061: PUSH
11062: LD_STRING Brown
11064: STR
11065: PPUSH
11066: CALL 6989 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11070: LD_EXP 4
11074: PPUSH
11075: LD_EXP 34
11079: PUSH
11080: LD_STRING Donaldson
11082: STR
11083: PPUSH
11084: CALL 6989 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11088: LD_EXP 5
11092: PPUSH
11093: LD_EXP 34
11097: PUSH
11098: LD_STRING Bobby
11100: STR
11101: PPUSH
11102: CALL 6989 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11106: LD_EXP 6
11110: PPUSH
11111: LD_EXP 34
11115: PUSH
11116: LD_STRING Cyrus
11118: STR
11119: PPUSH
11120: CALL 6989 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 3
11128: PPUSH
11129: LD_EXP 34
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL 6989 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11142: LD_EXP 13
11146: PPUSH
11147: LD_EXP 34
11151: PUSH
11152: LD_STRING Frank
11154: STR
11155: PPUSH
11156: CALL 6989 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_EXP 34
11169: PUSH
11170: LD_STRING Kikuchi
11172: STR
11173: PPUSH
11174: CALL 6989 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11178: LD_EXP 10
11182: PPUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_STRING Houten
11190: STR
11191: PPUSH
11192: CALL 6989 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11196: LD_EXP 12
11200: PPUSH
11201: LD_EXP 34
11205: PUSH
11206: LD_STRING Gary
11208: STR
11209: PPUSH
11210: CALL 6989 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11214: LD_EXP 11
11218: PPUSH
11219: LD_EXP 34
11223: PUSH
11224: LD_STRING Cornell
11226: STR
11227: PPUSH
11228: CALL 6989 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11232: LD_EXP 7
11236: PPUSH
11237: LD_EXP 34
11241: PUSH
11242: LD_STRING Denis
11244: STR
11245: PPUSH
11246: CALL 6989 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11250: LD_EXP 9
11254: PPUSH
11255: LD_EXP 34
11259: PUSH
11260: LD_STRING Gladstone
11262: STR
11263: PPUSH
11264: CALL 6989 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_EXP 34
11277: PUSH
11278: LD_STRING Stevens
11280: STR
11281: PPUSH
11282: CALL 6989 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11286: LD_INT 50
11288: PUSH
11289: EMPTY
11290: LIST
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: PUSH
11395: LD_EXP 1
11399: PUSH
11400: LD_EXP 8
11404: PUSH
11405: LD_EXP 4
11409: PUSH
11410: LD_EXP 5
11414: PUSH
11415: LD_EXP 6
11419: PUSH
11420: LD_EXP 3
11424: PUSH
11425: LD_EXP 13
11429: PUSH
11430: LD_EXP 9
11434: PUSH
11435: LD_EXP 14
11439: PUSH
11440: LD_EXP 7
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 12
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: DIFF
11481: PPUSH
11482: LD_STRING 13_other_survivors
11484: PPUSH
11485: CALL_OW 38
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 3
11495: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11496: LD_EXP 32
11500: PUSH
11501: LD_INT 2
11503: EQUAL
11504: PUSH
11505: LD_INT 34
11507: PUSH
11508: LD_INT 8
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: NOT
11520: AND
11521: IFFALSE 11657
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
11530: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: ST_TO_ADDR
// for i in tmp do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11638
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 3
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 274
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 275
11634: PLUS
11635: ST_TO_ADDR
11636: GO 11604
11638: POP
11639: POP
// if yourSiberite < 79 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 79
11647: LESS
11648: IFFALSE 11657
// YouLost ( siberite ) ;
11650: LD_STRING siberite
11652: PPUSH
11653: CALL_OW 104
// end ; end_of_file
11657: PPOPN 3
11659: END
// every 8 8$0 + 7 7$0 do
11660: GO 11662
11662: DISABLE
// begin enable ;
11663: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11664: LD_INT 8
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: LD_INT 3
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 0
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: LD_INT 2
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: LD_INT 5
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_OWVAR 67
11709: ARRAY
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: LD_INT 10
11716: PPUSH
11717: LD_INT 8
11719: PUSH
11720: LD_INT 9
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 12
11737: ARRAY
11738: PPUSH
11739: LD_INT 12
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL 7029 0 11
// end ;
11749: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
11757: PPUSH
// begin enable ;
11758: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11759: LD_ADDR_EXP 33
11763: PUSH
11764: LD_EXP 33
11768: PUSH
11769: LD_INT 1
11771: PLUS
11772: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11773: LD_INT 22
11775: PUSH
11776: LD_INT 8
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: LD_INT 58
11788: PUSH
11789: EMPTY
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 34
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: PUSH
11816: LD_INT 2
11818: LESS
11819: IFFALSE 12063
// begin uc_side := 8 ;
11821: LD_ADDR_OWVAR 20
11825: PUSH
11826: LD_INT 8
11828: ST_TO_ADDR
// uc_nation := 2 ;
11829: LD_ADDR_OWVAR 21
11833: PUSH
11834: LD_INT 2
11836: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11837: LD_INT 14
11839: PPUSH
11840: LD_INT 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 31
11848: PPUSH
11849: LD_INT 100
11851: PPUSH
11852: CALL 35754 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11856: LD_ADDR_VAR 0 1
11860: PUSH
11861: DOUBLE
11862: LD_INT 22
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 3
11874: PUSH
11875: LD_INT 58
11877: PUSH
11878: EMPTY
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 34
11887: PUSH
11888: LD_INT 31
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: PUSH
11905: LD_INT 1
11907: PLUS
11908: DEC
11909: ST_TO_ADDR
11910: LD_INT 2
11912: PUSH
11913: FOR_TO
11914: IFFALSE 12061
// begin veh := CreateVehicle ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: CALL_OW 45
11925: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11926: LD_VAR 0 2
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_INT 181
11945: PUSH
11946: LD_INT 105
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 137
11955: PUSH
11956: LD_INT 6
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 2
11974: MOD
11975: PUSH
11976: LD_INT 1
11978: PLUS
11979: ARRAY
11980: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PPUSH
12004: LD_INT 12
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12014: LD_INT 0
12016: PPUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: LD_INT 10
12025: PUSH
12026: LD_INT 10
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_OWVAR 67
12039: ARRAY
12040: PPUSH
12041: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12045: CALL_OW 44
12049: PPUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 52
// end ;
12059: GO 11913
12061: POP
12062: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) , 10 ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12063: LD_INT 8
12065: PUSH
12066: LD_INT 9
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 1
12075: PPUSH
12076: LD_INT 2
12078: PPUSH
12079: CALL_OW 12
12083: ARRAY
12084: PPUSH
12085: LD_INT 8
12087: PPUSH
12088: LD_INT 4
12090: PPUSH
12091: LD_INT 6
12093: PPUSH
12094: CALL_OW 12
12098: PUSH
12099: LD_INT 6
12101: PPUSH
12102: LD_INT 9
12104: PPUSH
12105: CALL_OW 12
12109: PUSH
12110: LD_INT 7
12112: PPUSH
12113: LD_INT 10
12115: PPUSH
12116: CALL_OW 12
12120: PUSH
12121: LD_INT 10
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_OWVAR 67
12134: ARRAY
12135: PPUSH
12136: LD_INT 10
12138: PPUSH
12139: LD_INT 2
12141: PPUSH
12142: LD_INT 3
12144: PPUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: EMPTY
12156: PPUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 26
12162: PUSH
12163: LD_INT 27
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 29
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PPUSH
12179: EMPTY
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL 8097 0 11
// end ;
12188: PPOPN 3
12190: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12191: LD_EXP 33
12195: PUSH
12196: LD_INT 4
12198: GREATEREQUAL
12199: IFFALSE 12547
12201: GO 12203
12203: DISABLE
12204: LD_INT 0
12206: PPUSH
12207: PPUSH
// begin enable ;
12208: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12209: LD_ADDR_EXP 33
12213: PUSH
12214: LD_EXP 33
12218: PUSH
12219: LD_INT 1
12221: PLUS
12222: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12223: LD_INT 22
12225: PUSH
12226: LD_INT 8
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: LD_INT 58
12238: PUSH
12239: EMPTY
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 34
12248: PUSH
12249: LD_INT 31
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 69
12265: PUSH
12266: LD_INT 2
12268: LESS
12269: IFFALSE 12458
// begin uc_side := 8 ;
12271: LD_ADDR_OWVAR 20
12275: PUSH
12276: LD_INT 8
12278: ST_TO_ADDR
// uc_nation := 2 ;
12279: LD_ADDR_OWVAR 21
12283: PUSH
12284: LD_INT 2
12286: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12287: LD_INT 14
12289: PPUSH
12290: LD_INT 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 31
12298: PPUSH
12299: LD_INT 100
12301: PPUSH
12302: CALL 35754 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: DOUBLE
12312: LD_INT 22
12314: PUSH
12315: LD_INT 8
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 58
12327: PUSH
12328: EMPTY
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 34
12337: PUSH
12338: LD_INT 31
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_INT 1
12357: PLUS
12358: DEC
12359: ST_TO_ADDR
12360: LD_INT 2
12362: PUSH
12363: FOR_TO
12364: IFFALSE 12456
// begin veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 2
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12376: LD_VAR 0 2
12380: PPUSH
12381: LD_INT 5
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_INT 181
12395: PPUSH
12396: LD_INT 105
12398: PPUSH
12399: LD_INT 12
12401: PPUSH
12402: LD_INT 0
12404: PPUSH
12405: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12409: LD_INT 0
12411: PPUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 9
12417: PUSH
12418: LD_INT 10
12420: PUSH
12421: LD_INT 10
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: LD_OWVAR 67
12434: ARRAY
12435: PPUSH
12436: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12440: CALL_OW 44
12444: PPUSH
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 52
// end ;
12454: GO 12363
12456: POP
12457: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12458: LD_INT 8
12460: PUSH
12461: LD_INT 9
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_INT 2
12473: PPUSH
12474: CALL_OW 12
12478: ARRAY
12479: PPUSH
12480: LD_INT 8
12482: PPUSH
12483: LD_INT 1
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_OWVAR 67
12505: ARRAY
12506: PPUSH
12507: LD_INT 10
12509: PPUSH
12510: LD_INT 3
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: LD_INT 1
12518: PUSH
12519: LD_INT 1
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: LD_INT 47
12528: PUSH
12529: LD_INT 47
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: EMPTY
12537: PPUSH
12538: EMPTY
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL 8097 0 11
// end ;
12547: PPOPN 2
12549: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12550: LD_EXP 36
12554: PUSH
12555: LD_INT 1
12557: EQUAL
12558: IFFALSE 12903
12560: GO 12562
12562: DISABLE
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12567: LD_INT 22
12569: PUSH
12570: LD_INT 8
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: LD_INT 58
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 34
12592: PUSH
12593: LD_INT 31
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_INT 2
12612: LESS
12613: IFFALSE 12802
// begin uc_side := 8 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 8
12622: ST_TO_ADDR
// uc_nation := 2 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 2
12630: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12631: LD_INT 14
12633: PPUSH
12634: LD_INT 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: LD_INT 31
12642: PPUSH
12643: LD_INT 100
12645: PPUSH
12646: CALL 35754 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: DOUBLE
12656: LD_INT 22
12658: PUSH
12659: LD_INT 8
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 3
12668: PUSH
12669: LD_INT 58
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 34
12681: PUSH
12682: LD_INT 31
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_INT 1
12701: PLUS
12702: DEC
12703: ST_TO_ADDR
12704: LD_INT 2
12706: PUSH
12707: FOR_TO
12708: IFFALSE 12800
// begin veh := CreateVehicle ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: CALL_OW 45
12719: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_INT 5
12727: PPUSH
12728: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12732: LD_VAR 0 2
12736: PPUSH
12737: LD_INT 181
12739: PPUSH
12740: LD_INT 105
12742: PPUSH
12743: LD_INT 12
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_INT 8
12758: PUSH
12759: LD_INT 9
12761: PUSH
12762: LD_INT 10
12764: PUSH
12765: LD_INT 10
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_OWVAR 67
12778: ARRAY
12779: PPUSH
12780: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12784: CALL_OW 44
12788: PPUSH
12789: LD_VAR 0 2
12793: PPUSH
12794: CALL_OW 52
// end ;
12798: GO 12707
12800: POP
12801: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 , 9 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12802: LD_INT 8
12804: PUSH
12805: LD_INT 9
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 1
12814: PPUSH
12815: LD_INT 2
12817: PPUSH
12818: CALL_OW 12
12822: ARRAY
12823: PPUSH
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 7
12832: PUSH
12833: LD_INT 8
12835: PUSH
12836: LD_INT 9
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_OWVAR 67
12849: ARRAY
12850: PPUSH
12851: LD_INT 10
12853: PPUSH
12854: LD_INT 3
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: LD_INT 3
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: LD_INT 46
12872: PUSH
12873: LD_INT 44
12875: PUSH
12876: LD_INT 45
12878: PUSH
12879: LD_INT 47
12881: PUSH
12882: LD_INT 49
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PPUSH
12892: EMPTY
12893: PPUSH
12894: EMPTY
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL 8097 0 11
// end ; end_of_file
12903: PPOPN 2
12905: END
// every 1 1$0 do
12906: GO 12908
12908: DISABLE
// begin enable ;
12909: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12910: LD_INT 3
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: LD_INT 13
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 55
// end ; end_of_file
12931: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12932: LD_INT 0
12934: PPUSH
// ar_miner := 81 ;
12935: LD_ADDR_EXP 50
12939: PUSH
12940: LD_INT 81
12942: ST_TO_ADDR
// ar_crane := 88 ;
12943: LD_ADDR_EXP 49
12947: PUSH
12948: LD_INT 88
12950: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12951: LD_ADDR_EXP 44
12955: PUSH
12956: LD_INT 89
12958: ST_TO_ADDR
// us_hack := 99 ;
12959: LD_ADDR_EXP 45
12963: PUSH
12964: LD_INT 99
12966: ST_TO_ADDR
// us_artillery := 97 ;
12967: LD_ADDR_EXP 46
12971: PUSH
12972: LD_INT 97
12974: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12975: LD_ADDR_EXP 47
12979: PUSH
12980: LD_INT 91
12982: ST_TO_ADDR
// ar_mortar := 92 ;
12983: LD_ADDR_EXP 48
12987: PUSH
12988: LD_INT 92
12990: ST_TO_ADDR
// ru_radar := 98 ;
12991: LD_ADDR_EXP 43
12995: PUSH
12996: LD_INT 98
12998: ST_TO_ADDR
// tech_Artillery := 80 ;
12999: LD_ADDR_EXP 51
13003: PUSH
13004: LD_INT 80
13006: ST_TO_ADDR
// tech_RadMat := 81 ;
13007: LD_ADDR_EXP 52
13011: PUSH
13012: LD_INT 81
13014: ST_TO_ADDR
// tech_BasicTools := 82 ;
13015: LD_ADDR_EXP 53
13019: PUSH
13020: LD_INT 82
13022: ST_TO_ADDR
// tech_Cargo := 83 ;
13023: LD_ADDR_EXP 54
13027: PUSH
13028: LD_INT 83
13030: ST_TO_ADDR
// tech_Track := 84 ;
13031: LD_ADDR_EXP 55
13035: PUSH
13036: LD_INT 84
13038: ST_TO_ADDR
// tech_Crane := 85 ;
13039: LD_ADDR_EXP 56
13043: PUSH
13044: LD_INT 85
13046: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13047: LD_ADDR_EXP 57
13051: PUSH
13052: LD_INT 86
13054: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13055: LD_ADDR_EXP 58
13059: PUSH
13060: LD_INT 87
13062: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13063: LD_ADDR_EXP 59
13067: PUSH
13068: LD_INT 88
13070: ST_TO_ADDR
// class_mastodont := 31 ;
13071: LD_ADDR_EXP 60
13075: PUSH
13076: LD_INT 31
13078: ST_TO_ADDR
// class_horse := 21 ;
13079: LD_ADDR_EXP 61
13083: PUSH
13084: LD_INT 21
13086: ST_TO_ADDR
// end ;
13087: LD_VAR 0 1
13091: RET
// every 1 do
13092: GO 13094
13094: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13095: CALL 12932 0 0
13099: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13100: LD_INT 0
13102: PPUSH
// if p2 = 100 then
13103: LD_VAR 0 2
13107: PUSH
13108: LD_INT 100
13110: EQUAL
13111: IFFALSE 14114
// begin if not StreamModeActive then
13113: LD_EXP 62
13117: NOT
13118: IFFALSE 13128
// StreamModeActive := true ;
13120: LD_ADDR_EXP 62
13124: PUSH
13125: LD_INT 1
13127: ST_TO_ADDR
// if p3 = 0 then
13128: LD_VAR 0 3
13132: PUSH
13133: LD_INT 0
13135: EQUAL
13136: IFFALSE 13142
// InitStreamMode ;
13138: CALL 14274 0 0
// if p3 = 1 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 1
13149: EQUAL
13150: IFFALSE 13160
// sRocket := true ;
13152: LD_ADDR_EXP 67
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 2 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 2
13167: EQUAL
13168: IFFALSE 13178
// sSpeed := true ;
13170: LD_ADDR_EXP 66
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 3 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 3
13185: EQUAL
13186: IFFALSE 13196
// sEngine := true ;
13188: LD_ADDR_EXP 68
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 4 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 4
13203: EQUAL
13204: IFFALSE 13214
// sSpec := true ;
13206: LD_ADDR_EXP 65
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 5 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 5
13221: EQUAL
13222: IFFALSE 13232
// sLevel := true ;
13224: LD_ADDR_EXP 69
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// if p3 = 6 then
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 6
13239: EQUAL
13240: IFFALSE 13250
// sArmoury := true ;
13242: LD_ADDR_EXP 70
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if p3 = 7 then
13250: LD_VAR 0 3
13254: PUSH
13255: LD_INT 7
13257: EQUAL
13258: IFFALSE 13268
// sRadar := true ;
13260: LD_ADDR_EXP 71
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// if p3 = 8 then
13268: LD_VAR 0 3
13272: PUSH
13273: LD_INT 8
13275: EQUAL
13276: IFFALSE 13286
// sBunker := true ;
13278: LD_ADDR_EXP 72
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// if p3 = 9 then
13286: LD_VAR 0 3
13290: PUSH
13291: LD_INT 9
13293: EQUAL
13294: IFFALSE 13304
// sHack := true ;
13296: LD_ADDR_EXP 73
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if p3 = 10 then
13304: LD_VAR 0 3
13308: PUSH
13309: LD_INT 10
13311: EQUAL
13312: IFFALSE 13322
// sFire := true ;
13314: LD_ADDR_EXP 74
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if p3 = 11 then
13322: LD_VAR 0 3
13326: PUSH
13327: LD_INT 11
13329: EQUAL
13330: IFFALSE 13340
// sRefresh := true ;
13332: LD_ADDR_EXP 75
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// if p3 = 12 then
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 12
13347: EQUAL
13348: IFFALSE 13358
// sExp := true ;
13350: LD_ADDR_EXP 76
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// if p3 = 13 then
13358: LD_VAR 0 3
13362: PUSH
13363: LD_INT 13
13365: EQUAL
13366: IFFALSE 13376
// sDepot := true ;
13368: LD_ADDR_EXP 77
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// if p3 = 14 then
13376: LD_VAR 0 3
13380: PUSH
13381: LD_INT 14
13383: EQUAL
13384: IFFALSE 13394
// sFlag := true ;
13386: LD_ADDR_EXP 78
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// if p3 = 15 then
13394: LD_VAR 0 3
13398: PUSH
13399: LD_INT 15
13401: EQUAL
13402: IFFALSE 13412
// sKamikadze := true ;
13404: LD_ADDR_EXP 86
13408: PUSH
13409: LD_INT 1
13411: ST_TO_ADDR
// if p3 = 16 then
13412: LD_VAR 0 3
13416: PUSH
13417: LD_INT 16
13419: EQUAL
13420: IFFALSE 13430
// sTroll := true ;
13422: LD_ADDR_EXP 87
13426: PUSH
13427: LD_INT 1
13429: ST_TO_ADDR
// if p3 = 17 then
13430: LD_VAR 0 3
13434: PUSH
13435: LD_INT 17
13437: EQUAL
13438: IFFALSE 13448
// sSlow := true ;
13440: LD_ADDR_EXP 88
13444: PUSH
13445: LD_INT 1
13447: ST_TO_ADDR
// if p3 = 18 then
13448: LD_VAR 0 3
13452: PUSH
13453: LD_INT 18
13455: EQUAL
13456: IFFALSE 13466
// sLack := true ;
13458: LD_ADDR_EXP 89
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if p3 = 19 then
13466: LD_VAR 0 3
13470: PUSH
13471: LD_INT 19
13473: EQUAL
13474: IFFALSE 13484
// sTank := true ;
13476: LD_ADDR_EXP 91
13480: PUSH
13481: LD_INT 1
13483: ST_TO_ADDR
// if p3 = 20 then
13484: LD_VAR 0 3
13488: PUSH
13489: LD_INT 20
13491: EQUAL
13492: IFFALSE 13502
// sRemote := true ;
13494: LD_ADDR_EXP 92
13498: PUSH
13499: LD_INT 1
13501: ST_TO_ADDR
// if p3 = 21 then
13502: LD_VAR 0 3
13506: PUSH
13507: LD_INT 21
13509: EQUAL
13510: IFFALSE 13520
// sPowell := true ;
13512: LD_ADDR_EXP 93
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// if p3 = 22 then
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 22
13527: EQUAL
13528: IFFALSE 13538
// sTeleport := true ;
13530: LD_ADDR_EXP 96
13534: PUSH
13535: LD_INT 1
13537: ST_TO_ADDR
// if p3 = 23 then
13538: LD_VAR 0 3
13542: PUSH
13543: LD_INT 23
13545: EQUAL
13546: IFFALSE 13556
// sOilTower := true ;
13548: LD_ADDR_EXP 98
13552: PUSH
13553: LD_INT 1
13555: ST_TO_ADDR
// if p3 = 24 then
13556: LD_VAR 0 3
13560: PUSH
13561: LD_INT 24
13563: EQUAL
13564: IFFALSE 13574
// sShovel := true ;
13566: LD_ADDR_EXP 99
13570: PUSH
13571: LD_INT 1
13573: ST_TO_ADDR
// if p3 = 25 then
13574: LD_VAR 0 3
13578: PUSH
13579: LD_INT 25
13581: EQUAL
13582: IFFALSE 13592
// sSheik := true ;
13584: LD_ADDR_EXP 100
13588: PUSH
13589: LD_INT 1
13591: ST_TO_ADDR
// if p3 = 26 then
13592: LD_VAR 0 3
13596: PUSH
13597: LD_INT 26
13599: EQUAL
13600: IFFALSE 13610
// sEarthquake := true ;
13602: LD_ADDR_EXP 102
13606: PUSH
13607: LD_INT 1
13609: ST_TO_ADDR
// if p3 = 27 then
13610: LD_VAR 0 3
13614: PUSH
13615: LD_INT 27
13617: EQUAL
13618: IFFALSE 13628
// sAI := true ;
13620: LD_ADDR_EXP 103
13624: PUSH
13625: LD_INT 1
13627: ST_TO_ADDR
// if p3 = 28 then
13628: LD_VAR 0 3
13632: PUSH
13633: LD_INT 28
13635: EQUAL
13636: IFFALSE 13646
// sCargo := true ;
13638: LD_ADDR_EXP 106
13642: PUSH
13643: LD_INT 1
13645: ST_TO_ADDR
// if p3 = 29 then
13646: LD_VAR 0 3
13650: PUSH
13651: LD_INT 29
13653: EQUAL
13654: IFFALSE 13664
// sDLaser := true ;
13656: LD_ADDR_EXP 107
13660: PUSH
13661: LD_INT 1
13663: ST_TO_ADDR
// if p3 = 30 then
13664: LD_VAR 0 3
13668: PUSH
13669: LD_INT 30
13671: EQUAL
13672: IFFALSE 13682
// sExchange := true ;
13674: LD_ADDR_EXP 108
13678: PUSH
13679: LD_INT 1
13681: ST_TO_ADDR
// if p3 = 31 then
13682: LD_VAR 0 3
13686: PUSH
13687: LD_INT 31
13689: EQUAL
13690: IFFALSE 13700
// sFac := true ;
13692: LD_ADDR_EXP 109
13696: PUSH
13697: LD_INT 1
13699: ST_TO_ADDR
// if p3 = 32 then
13700: LD_VAR 0 3
13704: PUSH
13705: LD_INT 32
13707: EQUAL
13708: IFFALSE 13718
// sPower := true ;
13710: LD_ADDR_EXP 110
13714: PUSH
13715: LD_INT 1
13717: ST_TO_ADDR
// if p3 = 33 then
13718: LD_VAR 0 3
13722: PUSH
13723: LD_INT 33
13725: EQUAL
13726: IFFALSE 13736
// sRandom := true ;
13728: LD_ADDR_EXP 111
13732: PUSH
13733: LD_INT 1
13735: ST_TO_ADDR
// if p3 = 34 then
13736: LD_VAR 0 3
13740: PUSH
13741: LD_INT 34
13743: EQUAL
13744: IFFALSE 13754
// sShield := true ;
13746: LD_ADDR_EXP 112
13750: PUSH
13751: LD_INT 1
13753: ST_TO_ADDR
// if p3 = 35 then
13754: LD_VAR 0 3
13758: PUSH
13759: LD_INT 35
13761: EQUAL
13762: IFFALSE 13772
// sTime := true ;
13764: LD_ADDR_EXP 113
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// if p3 = 36 then
13772: LD_VAR 0 3
13776: PUSH
13777: LD_INT 36
13779: EQUAL
13780: IFFALSE 13790
// sTools := true ;
13782: LD_ADDR_EXP 114
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// if p3 = 101 then
13790: LD_VAR 0 3
13794: PUSH
13795: LD_INT 101
13797: EQUAL
13798: IFFALSE 13808
// sSold := true ;
13800: LD_ADDR_EXP 79
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// if p3 = 102 then
13808: LD_VAR 0 3
13812: PUSH
13813: LD_INT 102
13815: EQUAL
13816: IFFALSE 13826
// sDiff := true ;
13818: LD_ADDR_EXP 80
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// if p3 = 103 then
13826: LD_VAR 0 3
13830: PUSH
13831: LD_INT 103
13833: EQUAL
13834: IFFALSE 13844
// sFog := true ;
13836: LD_ADDR_EXP 83
13840: PUSH
13841: LD_INT 1
13843: ST_TO_ADDR
// if p3 = 104 then
13844: LD_VAR 0 3
13848: PUSH
13849: LD_INT 104
13851: EQUAL
13852: IFFALSE 13862
// sReset := true ;
13854: LD_ADDR_EXP 84
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
// if p3 = 105 then
13862: LD_VAR 0 3
13866: PUSH
13867: LD_INT 105
13869: EQUAL
13870: IFFALSE 13880
// sSun := true ;
13872: LD_ADDR_EXP 85
13876: PUSH
13877: LD_INT 1
13879: ST_TO_ADDR
// if p3 = 106 then
13880: LD_VAR 0 3
13884: PUSH
13885: LD_INT 106
13887: EQUAL
13888: IFFALSE 13898
// sTiger := true ;
13890: LD_ADDR_EXP 81
13894: PUSH
13895: LD_INT 1
13897: ST_TO_ADDR
// if p3 = 107 then
13898: LD_VAR 0 3
13902: PUSH
13903: LD_INT 107
13905: EQUAL
13906: IFFALSE 13916
// sBomb := true ;
13908: LD_ADDR_EXP 82
13912: PUSH
13913: LD_INT 1
13915: ST_TO_ADDR
// if p3 = 108 then
13916: LD_VAR 0 3
13920: PUSH
13921: LD_INT 108
13923: EQUAL
13924: IFFALSE 13934
// sWound := true ;
13926: LD_ADDR_EXP 90
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
// if p3 = 109 then
13934: LD_VAR 0 3
13938: PUSH
13939: LD_INT 109
13941: EQUAL
13942: IFFALSE 13952
// sBetray := true ;
13944: LD_ADDR_EXP 94
13948: PUSH
13949: LD_INT 1
13951: ST_TO_ADDR
// if p3 = 110 then
13952: LD_VAR 0 3
13956: PUSH
13957: LD_INT 110
13959: EQUAL
13960: IFFALSE 13970
// sContamin := true ;
13962: LD_ADDR_EXP 95
13966: PUSH
13967: LD_INT 1
13969: ST_TO_ADDR
// if p3 = 111 then
13970: LD_VAR 0 3
13974: PUSH
13975: LD_INT 111
13977: EQUAL
13978: IFFALSE 13988
// sOil := true ;
13980: LD_ADDR_EXP 97
13984: PUSH
13985: LD_INT 1
13987: ST_TO_ADDR
// if p3 = 112 then
13988: LD_VAR 0 3
13992: PUSH
13993: LD_INT 112
13995: EQUAL
13996: IFFALSE 14006
// sStu := true ;
13998: LD_ADDR_EXP 101
14002: PUSH
14003: LD_INT 1
14005: ST_TO_ADDR
// if p3 = 113 then
14006: LD_VAR 0 3
14010: PUSH
14011: LD_INT 113
14013: EQUAL
14014: IFFALSE 14024
// sBazooka := true ;
14016: LD_ADDR_EXP 104
14020: PUSH
14021: LD_INT 1
14023: ST_TO_ADDR
// if p3 = 114 then
14024: LD_VAR 0 3
14028: PUSH
14029: LD_INT 114
14031: EQUAL
14032: IFFALSE 14042
// sMortar := true ;
14034: LD_ADDR_EXP 105
14038: PUSH
14039: LD_INT 1
14041: ST_TO_ADDR
// if p3 = 115 then
14042: LD_VAR 0 3
14046: PUSH
14047: LD_INT 115
14049: EQUAL
14050: IFFALSE 14060
// sRanger := true ;
14052: LD_ADDR_EXP 115
14056: PUSH
14057: LD_INT 1
14059: ST_TO_ADDR
// if p3 = 116 then
14060: LD_VAR 0 3
14064: PUSH
14065: LD_INT 116
14067: EQUAL
14068: IFFALSE 14078
// sComputer := true ;
14070: LD_ADDR_EXP 116
14074: PUSH
14075: LD_INT 1
14077: ST_TO_ADDR
// if p3 = 117 then
14078: LD_VAR 0 3
14082: PUSH
14083: LD_INT 117
14085: EQUAL
14086: IFFALSE 14096
// s30 := true ;
14088: LD_ADDR_EXP 117
14092: PUSH
14093: LD_INT 1
14095: ST_TO_ADDR
// if p3 = 118 then
14096: LD_VAR 0 3
14100: PUSH
14101: LD_INT 118
14103: EQUAL
14104: IFFALSE 14114
// s60 := true ;
14106: LD_ADDR_EXP 118
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// end ; if p2 = 101 then
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 101
14121: EQUAL
14122: IFFALSE 14250
// begin case p3 of 1 :
14124: LD_VAR 0 3
14128: PUSH
14129: LD_INT 1
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14144
14137: POP
// hHackUnlimitedResources ; 2 :
14138: CALL 25846 0 0
14142: GO 14250
14144: LD_INT 2
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14159
14152: POP
// hHackSetLevel10 ; 3 :
14153: CALL 25979 0 0
14157: GO 14250
14159: LD_INT 3
14161: DOUBLE
14162: EQUAL
14163: IFTRUE 14167
14165: GO 14174
14167: POP
// hHackSetLevel10YourUnits ; 4 :
14168: CALL 26064 0 0
14172: GO 14250
14174: LD_INT 4
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14189
14182: POP
// hHackInvincible ; 5 :
14183: CALL 26512 0 0
14187: GO 14250
14189: LD_INT 5
14191: DOUBLE
14192: EQUAL
14193: IFTRUE 14197
14195: GO 14204
14197: POP
// hHackInvisible ; 6 :
14198: CALL 26623 0 0
14202: GO 14250
14204: LD_INT 6
14206: DOUBLE
14207: EQUAL
14208: IFTRUE 14212
14210: GO 14219
14212: POP
// hHackChangeYourSide ; 7 :
14213: CALL 26680 0 0
14217: GO 14250
14219: LD_INT 7
14221: DOUBLE
14222: EQUAL
14223: IFTRUE 14227
14225: GO 14234
14227: POP
// hHackChangeUnitSide ; 8 :
14228: CALL 26722 0 0
14232: GO 14250
14234: LD_INT 8
14236: DOUBLE
14237: EQUAL
14238: IFTRUE 14242
14240: GO 14249
14242: POP
// hHackFog ; end ;
14243: CALL 26823 0 0
14247: GO 14250
14249: POP
// end ; end ;
14250: LD_VAR 0 7
14254: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14255: GO 14257
14257: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14258: LD_STRING initStreamRollete();
14260: PPUSH
14261: CALL_OW 559
// InitStreamMode ;
14265: CALL 14274 0 0
// DefineStreamItems ( ) ;
14269: CALL 14738 0 0
// end ;
14273: END
// function InitStreamMode ; begin
14274: LD_INT 0
14276: PPUSH
// streamModeActive := false ;
14277: LD_ADDR_EXP 62
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// normalCounter := 36 ;
14285: LD_ADDR_EXP 63
14289: PUSH
14290: LD_INT 36
14292: ST_TO_ADDR
// hardcoreCounter := 16 ;
14293: LD_ADDR_EXP 64
14297: PUSH
14298: LD_INT 16
14300: ST_TO_ADDR
// sRocket := false ;
14301: LD_ADDR_EXP 67
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sSpeed := false ;
14309: LD_ADDR_EXP 66
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sEngine := false ;
14317: LD_ADDR_EXP 68
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sSpec := false ;
14325: LD_ADDR_EXP 65
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sLevel := false ;
14333: LD_ADDR_EXP 69
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sArmoury := false ;
14341: LD_ADDR_EXP 70
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sRadar := false ;
14349: LD_ADDR_EXP 71
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sBunker := false ;
14357: LD_ADDR_EXP 72
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// sHack := false ;
14365: LD_ADDR_EXP 73
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// sFire := false ;
14373: LD_ADDR_EXP 74
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// sRefresh := false ;
14381: LD_ADDR_EXP 75
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// sExp := false ;
14389: LD_ADDR_EXP 76
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sDepot := false ;
14397: LD_ADDR_EXP 77
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sFlag := false ;
14405: LD_ADDR_EXP 78
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sKamikadze := false ;
14413: LD_ADDR_EXP 86
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sTroll := false ;
14421: LD_ADDR_EXP 87
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sSlow := false ;
14429: LD_ADDR_EXP 88
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sLack := false ;
14437: LD_ADDR_EXP 89
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sTank := false ;
14445: LD_ADDR_EXP 91
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sRemote := false ;
14453: LD_ADDR_EXP 92
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sPowell := false ;
14461: LD_ADDR_EXP 93
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sTeleport := false ;
14469: LD_ADDR_EXP 96
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sOilTower := false ;
14477: LD_ADDR_EXP 98
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sShovel := false ;
14485: LD_ADDR_EXP 99
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sSheik := false ;
14493: LD_ADDR_EXP 100
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sEarthquake := false ;
14501: LD_ADDR_EXP 102
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sAI := false ;
14509: LD_ADDR_EXP 103
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sCargo := false ;
14517: LD_ADDR_EXP 106
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// sDLaser := false ;
14525: LD_ADDR_EXP 107
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// sExchange := false ;
14533: LD_ADDR_EXP 108
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// sFac := false ;
14541: LD_ADDR_EXP 109
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// sPower := false ;
14549: LD_ADDR_EXP 110
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// sRandom := false ;
14557: LD_ADDR_EXP 111
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// sShield := false ;
14565: LD_ADDR_EXP 112
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// sTime := false ;
14573: LD_ADDR_EXP 113
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// sTools := false ;
14581: LD_ADDR_EXP 114
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// sSold := false ;
14589: LD_ADDR_EXP 79
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// sDiff := false ;
14597: LD_ADDR_EXP 80
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// sFog := false ;
14605: LD_ADDR_EXP 83
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// sReset := false ;
14613: LD_ADDR_EXP 84
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// sSun := false ;
14621: LD_ADDR_EXP 85
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// sTiger := false ;
14629: LD_ADDR_EXP 81
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// sBomb := false ;
14637: LD_ADDR_EXP 82
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// sWound := false ;
14645: LD_ADDR_EXP 90
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// sBetray := false ;
14653: LD_ADDR_EXP 94
14657: PUSH
14658: LD_INT 0
14660: ST_TO_ADDR
// sContamin := false ;
14661: LD_ADDR_EXP 95
14665: PUSH
14666: LD_INT 0
14668: ST_TO_ADDR
// sOil := false ;
14669: LD_ADDR_EXP 97
14673: PUSH
14674: LD_INT 0
14676: ST_TO_ADDR
// sStu := false ;
14677: LD_ADDR_EXP 101
14681: PUSH
14682: LD_INT 0
14684: ST_TO_ADDR
// sBazooka := false ;
14685: LD_ADDR_EXP 104
14689: PUSH
14690: LD_INT 0
14692: ST_TO_ADDR
// sMortar := false ;
14693: LD_ADDR_EXP 105
14697: PUSH
14698: LD_INT 0
14700: ST_TO_ADDR
// sRanger := false ;
14701: LD_ADDR_EXP 115
14705: PUSH
14706: LD_INT 0
14708: ST_TO_ADDR
// sComputer := false ;
14709: LD_ADDR_EXP 116
14713: PUSH
14714: LD_INT 0
14716: ST_TO_ADDR
// s30 := false ;
14717: LD_ADDR_EXP 117
14721: PUSH
14722: LD_INT 0
14724: ST_TO_ADDR
// s60 := false ;
14725: LD_ADDR_EXP 118
14729: PUSH
14730: LD_INT 0
14732: ST_TO_ADDR
// end ;
14733: LD_VAR 0 1
14737: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14738: LD_INT 0
14740: PPUSH
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
// result := [ ] ;
14745: LD_ADDR_VAR 0 1
14749: PUSH
14750: EMPTY
14751: ST_TO_ADDR
// if campaign_id = 1 then
14752: LD_OWVAR 69
14756: PUSH
14757: LD_INT 1
14759: EQUAL
14760: IFFALSE 17926
// begin case mission_number of 1 :
14762: LD_OWVAR 70
14766: PUSH
14767: LD_INT 1
14769: DOUBLE
14770: EQUAL
14771: IFTRUE 14775
14773: GO 14851
14775: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14776: LD_ADDR_VAR 0 1
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: LD_INT 4
14786: PUSH
14787: LD_INT 11
14789: PUSH
14790: LD_INT 12
14792: PUSH
14793: LD_INT 15
14795: PUSH
14796: LD_INT 16
14798: PUSH
14799: LD_INT 22
14801: PUSH
14802: LD_INT 23
14804: PUSH
14805: LD_INT 26
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 102
14824: PUSH
14825: LD_INT 106
14827: PUSH
14828: LD_INT 116
14830: PUSH
14831: LD_INT 117
14833: PUSH
14834: LD_INT 118
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: ST_TO_ADDR
14849: GO 17924
14851: LD_INT 2
14853: DOUBLE
14854: EQUAL
14855: IFTRUE 14859
14857: GO 14943
14859: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14860: LD_ADDR_VAR 0 1
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: LD_INT 11
14873: PUSH
14874: LD_INT 12
14876: PUSH
14877: LD_INT 15
14879: PUSH
14880: LD_INT 16
14882: PUSH
14883: LD_INT 22
14885: PUSH
14886: LD_INT 23
14888: PUSH
14889: LD_INT 26
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 101
14905: PUSH
14906: LD_INT 102
14908: PUSH
14909: LD_INT 105
14911: PUSH
14912: LD_INT 106
14914: PUSH
14915: LD_INT 108
14917: PUSH
14918: LD_INT 116
14920: PUSH
14921: LD_INT 117
14923: PUSH
14924: LD_INT 118
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: ST_TO_ADDR
14941: GO 17924
14943: LD_INT 3
14945: DOUBLE
14946: EQUAL
14947: IFTRUE 14951
14949: GO 15039
14951: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: LD_INT 2
14959: PUSH
14960: LD_INT 4
14962: PUSH
14963: LD_INT 5
14965: PUSH
14966: LD_INT 11
14968: PUSH
14969: LD_INT 12
14971: PUSH
14972: LD_INT 15
14974: PUSH
14975: LD_INT 16
14977: PUSH
14978: LD_INT 22
14980: PUSH
14981: LD_INT 26
14983: PUSH
14984: LD_INT 36
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 101
15001: PUSH
15002: LD_INT 102
15004: PUSH
15005: LD_INT 105
15007: PUSH
15008: LD_INT 106
15010: PUSH
15011: LD_INT 108
15013: PUSH
15014: LD_INT 116
15016: PUSH
15017: LD_INT 117
15019: PUSH
15020: LD_INT 118
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: ST_TO_ADDR
15037: GO 17924
15039: LD_INT 4
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15143
15047: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15048: LD_ADDR_VAR 0 1
15052: PUSH
15053: LD_INT 2
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: LD_INT 5
15061: PUSH
15062: LD_INT 8
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 15
15073: PUSH
15074: LD_INT 16
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_INT 23
15082: PUSH
15083: LD_INT 26
15085: PUSH
15086: LD_INT 36
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 101
15105: PUSH
15106: LD_INT 102
15108: PUSH
15109: LD_INT 105
15111: PUSH
15112: LD_INT 106
15114: PUSH
15115: LD_INT 108
15117: PUSH
15118: LD_INT 116
15120: PUSH
15121: LD_INT 117
15123: PUSH
15124: LD_INT 118
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: ST_TO_ADDR
15141: GO 17924
15143: LD_INT 5
15145: DOUBLE
15146: EQUAL
15147: IFTRUE 15151
15149: GO 15263
15151: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15152: LD_ADDR_VAR 0 1
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: LD_INT 4
15162: PUSH
15163: LD_INT 5
15165: PUSH
15166: LD_INT 6
15168: PUSH
15169: LD_INT 8
15171: PUSH
15172: LD_INT 11
15174: PUSH
15175: LD_INT 12
15177: PUSH
15178: LD_INT 15
15180: PUSH
15181: LD_INT 16
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_INT 23
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 26
15195: PUSH
15196: LD_INT 36
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 101
15217: PUSH
15218: LD_INT 102
15220: PUSH
15221: LD_INT 105
15223: PUSH
15224: LD_INT 106
15226: PUSH
15227: LD_INT 108
15229: PUSH
15230: LD_INT 109
15232: PUSH
15233: LD_INT 112
15235: PUSH
15236: LD_INT 116
15238: PUSH
15239: LD_INT 117
15241: PUSH
15242: LD_INT 118
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: ST_TO_ADDR
15261: GO 17924
15263: LD_INT 6
15265: DOUBLE
15266: EQUAL
15267: IFTRUE 15271
15269: GO 15403
15271: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15272: LD_ADDR_VAR 0 1
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: LD_INT 4
15282: PUSH
15283: LD_INT 5
15285: PUSH
15286: LD_INT 6
15288: PUSH
15289: LD_INT 8
15291: PUSH
15292: LD_INT 11
15294: PUSH
15295: LD_INT 12
15297: PUSH
15298: LD_INT 15
15300: PUSH
15301: LD_INT 16
15303: PUSH
15304: LD_INT 20
15306: PUSH
15307: LD_INT 21
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_INT 23
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 26
15321: PUSH
15322: LD_INT 30
15324: PUSH
15325: LD_INT 31
15327: PUSH
15328: LD_INT 32
15330: PUSH
15331: LD_INT 36
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 101
15357: PUSH
15358: LD_INT 102
15360: PUSH
15361: LD_INT 105
15363: PUSH
15364: LD_INT 106
15366: PUSH
15367: LD_INT 108
15369: PUSH
15370: LD_INT 109
15372: PUSH
15373: LD_INT 112
15375: PUSH
15376: LD_INT 116
15378: PUSH
15379: LD_INT 117
15381: PUSH
15382: LD_INT 118
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: ST_TO_ADDR
15401: GO 17924
15403: LD_INT 7
15405: DOUBLE
15406: EQUAL
15407: IFTRUE 15411
15409: GO 15523
15411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15412: LD_ADDR_VAR 0 1
15416: PUSH
15417: LD_INT 2
15419: PUSH
15420: LD_INT 4
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 7
15428: PUSH
15429: LD_INT 11
15431: PUSH
15432: LD_INT 12
15434: PUSH
15435: LD_INT 15
15437: PUSH
15438: LD_INT 16
15440: PUSH
15441: LD_INT 20
15443: PUSH
15444: LD_INT 21
15446: PUSH
15447: LD_INT 22
15449: PUSH
15450: LD_INT 23
15452: PUSH
15453: LD_INT 25
15455: PUSH
15456: LD_INT 26
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 101
15477: PUSH
15478: LD_INT 102
15480: PUSH
15481: LD_INT 103
15483: PUSH
15484: LD_INT 105
15486: PUSH
15487: LD_INT 106
15489: PUSH
15490: LD_INT 108
15492: PUSH
15493: LD_INT 112
15495: PUSH
15496: LD_INT 116
15498: PUSH
15499: LD_INT 117
15501: PUSH
15502: LD_INT 118
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: ST_TO_ADDR
15521: GO 17924
15523: LD_INT 8
15525: DOUBLE
15526: EQUAL
15527: IFTRUE 15531
15529: GO 15671
15531: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15532: LD_ADDR_VAR 0 1
15536: PUSH
15537: LD_INT 2
15539: PUSH
15540: LD_INT 4
15542: PUSH
15543: LD_INT 5
15545: PUSH
15546: LD_INT 6
15548: PUSH
15549: LD_INT 7
15551: PUSH
15552: LD_INT 8
15554: PUSH
15555: LD_INT 11
15557: PUSH
15558: LD_INT 12
15560: PUSH
15561: LD_INT 15
15563: PUSH
15564: LD_INT 16
15566: PUSH
15567: LD_INT 20
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 22
15575: PUSH
15576: LD_INT 23
15578: PUSH
15579: LD_INT 25
15581: PUSH
15582: LD_INT 26
15584: PUSH
15585: LD_INT 30
15587: PUSH
15588: LD_INT 31
15590: PUSH
15591: LD_INT 32
15593: PUSH
15594: LD_INT 36
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 101
15621: PUSH
15622: LD_INT 102
15624: PUSH
15625: LD_INT 103
15627: PUSH
15628: LD_INT 105
15630: PUSH
15631: LD_INT 106
15633: PUSH
15634: LD_INT 108
15636: PUSH
15637: LD_INT 109
15639: PUSH
15640: LD_INT 112
15642: PUSH
15643: LD_INT 116
15645: PUSH
15646: LD_INT 117
15648: PUSH
15649: LD_INT 118
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: ST_TO_ADDR
15669: GO 17924
15671: LD_INT 9
15673: DOUBLE
15674: EQUAL
15675: IFTRUE 15679
15677: GO 15827
15679: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 6
15696: PUSH
15697: LD_INT 7
15699: PUSH
15700: LD_INT 8
15702: PUSH
15703: LD_INT 11
15705: PUSH
15706: LD_INT 12
15708: PUSH
15709: LD_INT 15
15711: PUSH
15712: LD_INT 16
15714: PUSH
15715: LD_INT 20
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 23
15726: PUSH
15727: LD_INT 25
15729: PUSH
15730: LD_INT 26
15732: PUSH
15733: LD_INT 28
15735: PUSH
15736: LD_INT 30
15738: PUSH
15739: LD_INT 31
15741: PUSH
15742: LD_INT 32
15744: PUSH
15745: LD_INT 36
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 101
15773: PUSH
15774: LD_INT 102
15776: PUSH
15777: LD_INT 103
15779: PUSH
15780: LD_INT 105
15782: PUSH
15783: LD_INT 106
15785: PUSH
15786: LD_INT 108
15788: PUSH
15789: LD_INT 109
15791: PUSH
15792: LD_INT 112
15794: PUSH
15795: LD_INT 114
15797: PUSH
15798: LD_INT 116
15800: PUSH
15801: LD_INT 117
15803: PUSH
15804: LD_INT 118
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: ST_TO_ADDR
15825: GO 17924
15827: LD_INT 10
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 16031
15835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_INT 2
15843: PUSH
15844: LD_INT 4
15846: PUSH
15847: LD_INT 5
15849: PUSH
15850: LD_INT 6
15852: PUSH
15853: LD_INT 7
15855: PUSH
15856: LD_INT 8
15858: PUSH
15859: LD_INT 9
15861: PUSH
15862: LD_INT 10
15864: PUSH
15865: LD_INT 11
15867: PUSH
15868: LD_INT 12
15870: PUSH
15871: LD_INT 13
15873: PUSH
15874: LD_INT 14
15876: PUSH
15877: LD_INT 15
15879: PUSH
15880: LD_INT 16
15882: PUSH
15883: LD_INT 17
15885: PUSH
15886: LD_INT 18
15888: PUSH
15889: LD_INT 19
15891: PUSH
15892: LD_INT 20
15894: PUSH
15895: LD_INT 21
15897: PUSH
15898: LD_INT 22
15900: PUSH
15901: LD_INT 23
15903: PUSH
15904: LD_INT 24
15906: PUSH
15907: LD_INT 25
15909: PUSH
15910: LD_INT 26
15912: PUSH
15913: LD_INT 28
15915: PUSH
15916: LD_INT 30
15918: PUSH
15919: LD_INT 31
15921: PUSH
15922: LD_INT 32
15924: PUSH
15925: LD_INT 36
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 101
15961: PUSH
15962: LD_INT 102
15964: PUSH
15965: LD_INT 103
15967: PUSH
15968: LD_INT 104
15970: PUSH
15971: LD_INT 105
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 107
15979: PUSH
15980: LD_INT 108
15982: PUSH
15983: LD_INT 109
15985: PUSH
15986: LD_INT 110
15988: PUSH
15989: LD_INT 111
15991: PUSH
15992: LD_INT 112
15994: PUSH
15995: LD_INT 114
15997: PUSH
15998: LD_INT 116
16000: PUSH
16001: LD_INT 117
16003: PUSH
16004: LD_INT 118
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: ST_TO_ADDR
16029: GO 17924
16031: LD_INT 11
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16243
16039: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16040: LD_ADDR_VAR 0 1
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: LD_INT 4
16053: PUSH
16054: LD_INT 5
16056: PUSH
16057: LD_INT 6
16059: PUSH
16060: LD_INT 7
16062: PUSH
16063: LD_INT 8
16065: PUSH
16066: LD_INT 9
16068: PUSH
16069: LD_INT 10
16071: PUSH
16072: LD_INT 11
16074: PUSH
16075: LD_INT 12
16077: PUSH
16078: LD_INT 13
16080: PUSH
16081: LD_INT 14
16083: PUSH
16084: LD_INT 15
16086: PUSH
16087: LD_INT 16
16089: PUSH
16090: LD_INT 17
16092: PUSH
16093: LD_INT 18
16095: PUSH
16096: LD_INT 19
16098: PUSH
16099: LD_INT 20
16101: PUSH
16102: LD_INT 21
16104: PUSH
16105: LD_INT 22
16107: PUSH
16108: LD_INT 23
16110: PUSH
16111: LD_INT 24
16113: PUSH
16114: LD_INT 25
16116: PUSH
16117: LD_INT 26
16119: PUSH
16120: LD_INT 28
16122: PUSH
16123: LD_INT 30
16125: PUSH
16126: LD_INT 31
16128: PUSH
16129: LD_INT 32
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 36
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 101
16173: PUSH
16174: LD_INT 102
16176: PUSH
16177: LD_INT 103
16179: PUSH
16180: LD_INT 104
16182: PUSH
16183: LD_INT 105
16185: PUSH
16186: LD_INT 106
16188: PUSH
16189: LD_INT 107
16191: PUSH
16192: LD_INT 108
16194: PUSH
16195: LD_INT 109
16197: PUSH
16198: LD_INT 110
16200: PUSH
16201: LD_INT 111
16203: PUSH
16204: LD_INT 112
16206: PUSH
16207: LD_INT 114
16209: PUSH
16210: LD_INT 116
16212: PUSH
16213: LD_INT 117
16215: PUSH
16216: LD_INT 118
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: ST_TO_ADDR
16241: GO 17924
16243: LD_INT 12
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16471
16251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16252: LD_ADDR_VAR 0 1
16256: PUSH
16257: LD_INT 1
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: LD_INT 4
16268: PUSH
16269: LD_INT 5
16271: PUSH
16272: LD_INT 6
16274: PUSH
16275: LD_INT 7
16277: PUSH
16278: LD_INT 8
16280: PUSH
16281: LD_INT 9
16283: PUSH
16284: LD_INT 10
16286: PUSH
16287: LD_INT 11
16289: PUSH
16290: LD_INT 12
16292: PUSH
16293: LD_INT 13
16295: PUSH
16296: LD_INT 14
16298: PUSH
16299: LD_INT 15
16301: PUSH
16302: LD_INT 16
16304: PUSH
16305: LD_INT 17
16307: PUSH
16308: LD_INT 18
16310: PUSH
16311: LD_INT 19
16313: PUSH
16314: LD_INT 20
16316: PUSH
16317: LD_INT 21
16319: PUSH
16320: LD_INT 22
16322: PUSH
16323: LD_INT 23
16325: PUSH
16326: LD_INT 24
16328: PUSH
16329: LD_INT 25
16331: PUSH
16332: LD_INT 26
16334: PUSH
16335: LD_INT 27
16337: PUSH
16338: LD_INT 28
16340: PUSH
16341: LD_INT 30
16343: PUSH
16344: LD_INT 31
16346: PUSH
16347: LD_INT 32
16349: PUSH
16350: LD_INT 33
16352: PUSH
16353: LD_INT 34
16355: PUSH
16356: LD_INT 36
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 101
16397: PUSH
16398: LD_INT 102
16400: PUSH
16401: LD_INT 103
16403: PUSH
16404: LD_INT 104
16406: PUSH
16407: LD_INT 105
16409: PUSH
16410: LD_INT 106
16412: PUSH
16413: LD_INT 107
16415: PUSH
16416: LD_INT 108
16418: PUSH
16419: LD_INT 109
16421: PUSH
16422: LD_INT 110
16424: PUSH
16425: LD_INT 111
16427: PUSH
16428: LD_INT 112
16430: PUSH
16431: LD_INT 113
16433: PUSH
16434: LD_INT 114
16436: PUSH
16437: LD_INT 116
16439: PUSH
16440: LD_INT 117
16442: PUSH
16443: LD_INT 118
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: ST_TO_ADDR
16469: GO 17924
16471: LD_INT 13
16473: DOUBLE
16474: EQUAL
16475: IFTRUE 16479
16477: GO 16687
16479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 3
16493: PUSH
16494: LD_INT 4
16496: PUSH
16497: LD_INT 5
16499: PUSH
16500: LD_INT 8
16502: PUSH
16503: LD_INT 9
16505: PUSH
16506: LD_INT 10
16508: PUSH
16509: LD_INT 11
16511: PUSH
16512: LD_INT 12
16514: PUSH
16515: LD_INT 14
16517: PUSH
16518: LD_INT 15
16520: PUSH
16521: LD_INT 16
16523: PUSH
16524: LD_INT 17
16526: PUSH
16527: LD_INT 18
16529: PUSH
16530: LD_INT 19
16532: PUSH
16533: LD_INT 20
16535: PUSH
16536: LD_INT 21
16538: PUSH
16539: LD_INT 22
16541: PUSH
16542: LD_INT 23
16544: PUSH
16545: LD_INT 24
16547: PUSH
16548: LD_INT 25
16550: PUSH
16551: LD_INT 26
16553: PUSH
16554: LD_INT 27
16556: PUSH
16557: LD_INT 28
16559: PUSH
16560: LD_INT 30
16562: PUSH
16563: LD_INT 31
16565: PUSH
16566: LD_INT 32
16568: PUSH
16569: LD_INT 33
16571: PUSH
16572: LD_INT 34
16574: PUSH
16575: LD_INT 36
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 101
16613: PUSH
16614: LD_INT 102
16616: PUSH
16617: LD_INT 103
16619: PUSH
16620: LD_INT 104
16622: PUSH
16623: LD_INT 105
16625: PUSH
16626: LD_INT 106
16628: PUSH
16629: LD_INT 107
16631: PUSH
16632: LD_INT 108
16634: PUSH
16635: LD_INT 109
16637: PUSH
16638: LD_INT 110
16640: PUSH
16641: LD_INT 111
16643: PUSH
16644: LD_INT 112
16646: PUSH
16647: LD_INT 113
16649: PUSH
16650: LD_INT 114
16652: PUSH
16653: LD_INT 116
16655: PUSH
16656: LD_INT 117
16658: PUSH
16659: LD_INT 118
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: ST_TO_ADDR
16685: GO 17924
16687: LD_INT 14
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16919
16695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 2
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: LD_INT 4
16712: PUSH
16713: LD_INT 5
16715: PUSH
16716: LD_INT 6
16718: PUSH
16719: LD_INT 7
16721: PUSH
16722: LD_INT 8
16724: PUSH
16725: LD_INT 9
16727: PUSH
16728: LD_INT 10
16730: PUSH
16731: LD_INT 11
16733: PUSH
16734: LD_INT 12
16736: PUSH
16737: LD_INT 13
16739: PUSH
16740: LD_INT 14
16742: PUSH
16743: LD_INT 15
16745: PUSH
16746: LD_INT 16
16748: PUSH
16749: LD_INT 17
16751: PUSH
16752: LD_INT 18
16754: PUSH
16755: LD_INT 19
16757: PUSH
16758: LD_INT 20
16760: PUSH
16761: LD_INT 21
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_INT 23
16769: PUSH
16770: LD_INT 24
16772: PUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 26
16778: PUSH
16779: LD_INT 27
16781: PUSH
16782: LD_INT 28
16784: PUSH
16785: LD_INT 29
16787: PUSH
16788: LD_INT 30
16790: PUSH
16791: LD_INT 31
16793: PUSH
16794: LD_INT 32
16796: PUSH
16797: LD_INT 33
16799: PUSH
16800: LD_INT 34
16802: PUSH
16803: LD_INT 36
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 101
16845: PUSH
16846: LD_INT 102
16848: PUSH
16849: LD_INT 103
16851: PUSH
16852: LD_INT 104
16854: PUSH
16855: LD_INT 105
16857: PUSH
16858: LD_INT 106
16860: PUSH
16861: LD_INT 107
16863: PUSH
16864: LD_INT 108
16866: PUSH
16867: LD_INT 109
16869: PUSH
16870: LD_INT 110
16872: PUSH
16873: LD_INT 111
16875: PUSH
16876: LD_INT 112
16878: PUSH
16879: LD_INT 113
16881: PUSH
16882: LD_INT 114
16884: PUSH
16885: LD_INT 116
16887: PUSH
16888: LD_INT 117
16890: PUSH
16891: LD_INT 118
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: ST_TO_ADDR
16917: GO 17924
16919: LD_INT 15
16921: DOUBLE
16922: EQUAL
16923: IFTRUE 16927
16925: GO 17151
16927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16928: LD_ADDR_VAR 0 1
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: LD_INT 2
16938: PUSH
16939: LD_INT 3
16941: PUSH
16942: LD_INT 4
16944: PUSH
16945: LD_INT 5
16947: PUSH
16948: LD_INT 6
16950: PUSH
16951: LD_INT 7
16953: PUSH
16954: LD_INT 8
16956: PUSH
16957: LD_INT 9
16959: PUSH
16960: LD_INT 10
16962: PUSH
16963: LD_INT 11
16965: PUSH
16966: LD_INT 12
16968: PUSH
16969: LD_INT 13
16971: PUSH
16972: LD_INT 14
16974: PUSH
16975: LD_INT 15
16977: PUSH
16978: LD_INT 16
16980: PUSH
16981: LD_INT 17
16983: PUSH
16984: LD_INT 18
16986: PUSH
16987: LD_INT 19
16989: PUSH
16990: LD_INT 20
16992: PUSH
16993: LD_INT 21
16995: PUSH
16996: LD_INT 22
16998: PUSH
16999: LD_INT 23
17001: PUSH
17002: LD_INT 24
17004: PUSH
17005: LD_INT 25
17007: PUSH
17008: LD_INT 26
17010: PUSH
17011: LD_INT 27
17013: PUSH
17014: LD_INT 28
17016: PUSH
17017: LD_INT 29
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 31
17025: PUSH
17026: LD_INT 32
17028: PUSH
17029: LD_INT 33
17031: PUSH
17032: LD_INT 34
17034: PUSH
17035: LD_INT 36
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 101
17077: PUSH
17078: LD_INT 102
17080: PUSH
17081: LD_INT 103
17083: PUSH
17084: LD_INT 104
17086: PUSH
17087: LD_INT 105
17089: PUSH
17090: LD_INT 106
17092: PUSH
17093: LD_INT 107
17095: PUSH
17096: LD_INT 108
17098: PUSH
17099: LD_INT 109
17101: PUSH
17102: LD_INT 110
17104: PUSH
17105: LD_INT 111
17107: PUSH
17108: LD_INT 112
17110: PUSH
17111: LD_INT 113
17113: PUSH
17114: LD_INT 114
17116: PUSH
17117: LD_INT 116
17119: PUSH
17120: LD_INT 117
17122: PUSH
17123: LD_INT 118
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: ST_TO_ADDR
17149: GO 17924
17151: LD_INT 16
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17295
17159: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17160: LD_ADDR_VAR 0 1
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: LD_INT 4
17170: PUSH
17171: LD_INT 5
17173: PUSH
17174: LD_INT 7
17176: PUSH
17177: LD_INT 11
17179: PUSH
17180: LD_INT 12
17182: PUSH
17183: LD_INT 15
17185: PUSH
17186: LD_INT 16
17188: PUSH
17189: LD_INT 20
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_INT 23
17200: PUSH
17201: LD_INT 25
17203: PUSH
17204: LD_INT 26
17206: PUSH
17207: LD_INT 30
17209: PUSH
17210: LD_INT 31
17212: PUSH
17213: LD_INT 32
17215: PUSH
17216: LD_INT 33
17218: PUSH
17219: LD_INT 34
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 101
17245: PUSH
17246: LD_INT 102
17248: PUSH
17249: LD_INT 103
17251: PUSH
17252: LD_INT 106
17254: PUSH
17255: LD_INT 108
17257: PUSH
17258: LD_INT 112
17260: PUSH
17261: LD_INT 113
17263: PUSH
17264: LD_INT 114
17266: PUSH
17267: LD_INT 116
17269: PUSH
17270: LD_INT 117
17272: PUSH
17273: LD_INT 118
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: ST_TO_ADDR
17293: GO 17924
17295: LD_INT 17
17297: DOUBLE
17298: EQUAL
17299: IFTRUE 17303
17301: GO 17527
17303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 4
17320: PUSH
17321: LD_INT 5
17323: PUSH
17324: LD_INT 6
17326: PUSH
17327: LD_INT 7
17329: PUSH
17330: LD_INT 8
17332: PUSH
17333: LD_INT 9
17335: PUSH
17336: LD_INT 10
17338: PUSH
17339: LD_INT 11
17341: PUSH
17342: LD_INT 12
17344: PUSH
17345: LD_INT 13
17347: PUSH
17348: LD_INT 14
17350: PUSH
17351: LD_INT 15
17353: PUSH
17354: LD_INT 16
17356: PUSH
17357: LD_INT 17
17359: PUSH
17360: LD_INT 18
17362: PUSH
17363: LD_INT 19
17365: PUSH
17366: LD_INT 20
17368: PUSH
17369: LD_INT 21
17371: PUSH
17372: LD_INT 22
17374: PUSH
17375: LD_INT 23
17377: PUSH
17378: LD_INT 24
17380: PUSH
17381: LD_INT 25
17383: PUSH
17384: LD_INT 26
17386: PUSH
17387: LD_INT 27
17389: PUSH
17390: LD_INT 28
17392: PUSH
17393: LD_INT 29
17395: PUSH
17396: LD_INT 30
17398: PUSH
17399: LD_INT 31
17401: PUSH
17402: LD_INT 32
17404: PUSH
17405: LD_INT 33
17407: PUSH
17408: LD_INT 34
17410: PUSH
17411: LD_INT 36
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 101
17453: PUSH
17454: LD_INT 102
17456: PUSH
17457: LD_INT 103
17459: PUSH
17460: LD_INT 104
17462: PUSH
17463: LD_INT 105
17465: PUSH
17466: LD_INT 106
17468: PUSH
17469: LD_INT 107
17471: PUSH
17472: LD_INT 108
17474: PUSH
17475: LD_INT 109
17477: PUSH
17478: LD_INT 110
17480: PUSH
17481: LD_INT 111
17483: PUSH
17484: LD_INT 112
17486: PUSH
17487: LD_INT 113
17489: PUSH
17490: LD_INT 114
17492: PUSH
17493: LD_INT 116
17495: PUSH
17496: LD_INT 117
17498: PUSH
17499: LD_INT 118
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: ST_TO_ADDR
17525: GO 17924
17527: LD_INT 18
17529: DOUBLE
17530: EQUAL
17531: IFTRUE 17535
17533: GO 17683
17535: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17536: LD_ADDR_VAR 0 1
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: LD_INT 4
17546: PUSH
17547: LD_INT 5
17549: PUSH
17550: LD_INT 7
17552: PUSH
17553: LD_INT 11
17555: PUSH
17556: LD_INT 12
17558: PUSH
17559: LD_INT 15
17561: PUSH
17562: LD_INT 16
17564: PUSH
17565: LD_INT 20
17567: PUSH
17568: LD_INT 21
17570: PUSH
17571: LD_INT 22
17573: PUSH
17574: LD_INT 23
17576: PUSH
17577: LD_INT 25
17579: PUSH
17580: LD_INT 26
17582: PUSH
17583: LD_INT 30
17585: PUSH
17586: LD_INT 31
17588: PUSH
17589: LD_INT 32
17591: PUSH
17592: LD_INT 33
17594: PUSH
17595: LD_INT 34
17597: PUSH
17598: LD_INT 35
17600: PUSH
17601: LD_INT 36
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 101
17629: PUSH
17630: LD_INT 102
17632: PUSH
17633: LD_INT 103
17635: PUSH
17636: LD_INT 106
17638: PUSH
17639: LD_INT 108
17641: PUSH
17642: LD_INT 112
17644: PUSH
17645: LD_INT 113
17647: PUSH
17648: LD_INT 114
17650: PUSH
17651: LD_INT 115
17653: PUSH
17654: LD_INT 116
17656: PUSH
17657: LD_INT 117
17659: PUSH
17660: LD_INT 118
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: ST_TO_ADDR
17681: GO 17924
17683: LD_INT 19
17685: DOUBLE
17686: EQUAL
17687: IFTRUE 17691
17689: GO 17923
17691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17692: LD_ADDR_VAR 0 1
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: LD_INT 3
17705: PUSH
17706: LD_INT 4
17708: PUSH
17709: LD_INT 5
17711: PUSH
17712: LD_INT 6
17714: PUSH
17715: LD_INT 7
17717: PUSH
17718: LD_INT 8
17720: PUSH
17721: LD_INT 9
17723: PUSH
17724: LD_INT 10
17726: PUSH
17727: LD_INT 11
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 13
17735: PUSH
17736: LD_INT 14
17738: PUSH
17739: LD_INT 15
17741: PUSH
17742: LD_INT 16
17744: PUSH
17745: LD_INT 17
17747: PUSH
17748: LD_INT 18
17750: PUSH
17751: LD_INT 19
17753: PUSH
17754: LD_INT 20
17756: PUSH
17757: LD_INT 21
17759: PUSH
17760: LD_INT 22
17762: PUSH
17763: LD_INT 23
17765: PUSH
17766: LD_INT 24
17768: PUSH
17769: LD_INT 25
17771: PUSH
17772: LD_INT 26
17774: PUSH
17775: LD_INT 27
17777: PUSH
17778: LD_INT 28
17780: PUSH
17781: LD_INT 29
17783: PUSH
17784: LD_INT 30
17786: PUSH
17787: LD_INT 31
17789: PUSH
17790: LD_INT 32
17792: PUSH
17793: LD_INT 33
17795: PUSH
17796: LD_INT 34
17798: PUSH
17799: LD_INT 35
17801: PUSH
17802: LD_INT 36
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 101
17845: PUSH
17846: LD_INT 102
17848: PUSH
17849: LD_INT 103
17851: PUSH
17852: LD_INT 104
17854: PUSH
17855: LD_INT 105
17857: PUSH
17858: LD_INT 106
17860: PUSH
17861: LD_INT 107
17863: PUSH
17864: LD_INT 108
17866: PUSH
17867: LD_INT 109
17869: PUSH
17870: LD_INT 110
17872: PUSH
17873: LD_INT 111
17875: PUSH
17876: LD_INT 112
17878: PUSH
17879: LD_INT 113
17881: PUSH
17882: LD_INT 114
17884: PUSH
17885: LD_INT 115
17887: PUSH
17888: LD_INT 116
17890: PUSH
17891: LD_INT 117
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: ST_TO_ADDR
17921: GO 17924
17923: POP
// end else
17924: GO 18155
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: LD_INT 3
17939: PUSH
17940: LD_INT 4
17942: PUSH
17943: LD_INT 5
17945: PUSH
17946: LD_INT 6
17948: PUSH
17949: LD_INT 7
17951: PUSH
17952: LD_INT 8
17954: PUSH
17955: LD_INT 9
17957: PUSH
17958: LD_INT 10
17960: PUSH
17961: LD_INT 11
17963: PUSH
17964: LD_INT 12
17966: PUSH
17967: LD_INT 13
17969: PUSH
17970: LD_INT 14
17972: PUSH
17973: LD_INT 15
17975: PUSH
17976: LD_INT 16
17978: PUSH
17979: LD_INT 17
17981: PUSH
17982: LD_INT 18
17984: PUSH
17985: LD_INT 19
17987: PUSH
17988: LD_INT 20
17990: PUSH
17991: LD_INT 21
17993: PUSH
17994: LD_INT 22
17996: PUSH
17997: LD_INT 23
17999: PUSH
18000: LD_INT 24
18002: PUSH
18003: LD_INT 25
18005: PUSH
18006: LD_INT 26
18008: PUSH
18009: LD_INT 27
18011: PUSH
18012: LD_INT 28
18014: PUSH
18015: LD_INT 29
18017: PUSH
18018: LD_INT 30
18020: PUSH
18021: LD_INT 31
18023: PUSH
18024: LD_INT 32
18026: PUSH
18027: LD_INT 33
18029: PUSH
18030: LD_INT 34
18032: PUSH
18033: LD_INT 35
18035: PUSH
18036: LD_INT 36
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 101
18079: PUSH
18080: LD_INT 102
18082: PUSH
18083: LD_INT 103
18085: PUSH
18086: LD_INT 104
18088: PUSH
18089: LD_INT 105
18091: PUSH
18092: LD_INT 106
18094: PUSH
18095: LD_INT 107
18097: PUSH
18098: LD_INT 108
18100: PUSH
18101: LD_INT 109
18103: PUSH
18104: LD_INT 110
18106: PUSH
18107: LD_INT 111
18109: PUSH
18110: LD_INT 112
18112: PUSH
18113: LD_INT 113
18115: PUSH
18116: LD_INT 114
18118: PUSH
18119: LD_INT 115
18121: PUSH
18122: LD_INT 116
18124: PUSH
18125: LD_INT 117
18127: PUSH
18128: LD_INT 118
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: ST_TO_ADDR
// if result then
18155: LD_VAR 0 1
18159: IFFALSE 18448
// begin normal :=  ;
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_STRING 
18168: ST_TO_ADDR
// hardcore :=  ;
18169: LD_ADDR_VAR 0 4
18173: PUSH
18174: LD_STRING 
18176: ST_TO_ADDR
// for i = 1 to normalCounter do
18177: LD_ADDR_VAR 0 5
18181: PUSH
18182: DOUBLE
18183: LD_INT 1
18185: DEC
18186: ST_TO_ADDR
18187: LD_EXP 63
18191: PUSH
18192: FOR_TO
18193: IFFALSE 18294
// begin tmp := 0 ;
18195: LD_ADDR_VAR 0 2
18199: PUSH
18200: LD_STRING 0
18202: ST_TO_ADDR
// if result [ 1 ] then
18203: LD_VAR 0 1
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: IFFALSE 18276
// if result [ 1 ] [ 1 ] = i then
18213: LD_VAR 0 1
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_VAR 0 5
18230: EQUAL
18231: IFFALSE 18276
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18233: LD_ADDR_VAR 0 1
18237: PUSH
18238: LD_VAR 0 1
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: ARRAY
18254: PPUSH
18255: LD_INT 1
18257: PPUSH
18258: CALL_OW 3
18262: PPUSH
18263: CALL_OW 1
18267: ST_TO_ADDR
// tmp := 1 ;
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_STRING 1
18275: ST_TO_ADDR
// end ; normal := normal & tmp ;
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_VAR 0 3
18285: PUSH
18286: LD_VAR 0 2
18290: STR
18291: ST_TO_ADDR
// end ;
18292: GO 18192
18294: POP
18295: POP
// for i = 1 to hardcoreCounter do
18296: LD_ADDR_VAR 0 5
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_EXP 64
18310: PUSH
18311: FOR_TO
18312: IFFALSE 18417
// begin tmp := 0 ;
18314: LD_ADDR_VAR 0 2
18318: PUSH
18319: LD_STRING 0
18321: ST_TO_ADDR
// if result [ 2 ] then
18322: LD_VAR 0 1
18326: PUSH
18327: LD_INT 2
18329: ARRAY
18330: IFFALSE 18399
// if result [ 2 ] [ 1 ] = 100 + i then
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 2
18339: ARRAY
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PUSH
18345: LD_INT 100
18347: PUSH
18348: LD_VAR 0 5
18352: PLUS
18353: EQUAL
18354: IFFALSE 18399
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18356: LD_ADDR_VAR 0 1
18360: PUSH
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 2
18368: PPUSH
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 2
18376: ARRAY
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: CALL_OW 3
18385: PPUSH
18386: CALL_OW 1
18390: ST_TO_ADDR
// tmp := 1 ;
18391: LD_ADDR_VAR 0 2
18395: PUSH
18396: LD_STRING 1
18398: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18399: LD_ADDR_VAR 0 4
18403: PUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_VAR 0 2
18413: STR
18414: ST_TO_ADDR
// end ;
18415: GO 18311
18417: POP
18418: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
18419: LD_STRING getStreamItemsFromMission("
18421: PUSH
18422: LD_VAR 0 3
18426: STR
18427: PUSH
18428: LD_STRING ","
18430: STR
18431: PUSH
18432: LD_VAR 0 4
18436: STR
18437: PUSH
18438: LD_STRING ")
18440: STR
18441: PPUSH
18442: CALL_OW 559
// end else
18446: GO 18455
// ToLua ( getStreamItemsFromMission("","") ) ;
18448: LD_STRING getStreamItemsFromMission("","")
18450: PPUSH
18451: CALL_OW 559
// end ;
18455: LD_VAR 0 1
18459: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18460: LD_EXP 62
18464: PUSH
18465: LD_EXP 67
18469: AND
18470: IFFALSE 18594
18472: GO 18474
18474: DISABLE
18475: LD_INT 0
18477: PPUSH
18478: PPUSH
// begin enable ;
18479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18480: LD_ADDR_VAR 0 2
18484: PUSH
18485: LD_INT 22
18487: PUSH
18488: LD_OWVAR 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 34
18502: PUSH
18503: LD_INT 7
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 34
18512: PUSH
18513: LD_INT 45
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 34
18522: PUSH
18523: LD_INT 28
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 34
18532: PUSH
18533: LD_INT 47
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PPUSH
18551: CALL_OW 69
18555: ST_TO_ADDR
// if not tmp then
18556: LD_VAR 0 2
18560: NOT
18561: IFFALSE 18565
// exit ;
18563: GO 18594
// for i in tmp do
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_VAR 0 2
18574: PUSH
18575: FOR_IN
18576: IFFALSE 18592
// begin SetLives ( i , 0 ) ;
18578: LD_VAR 0 1
18582: PPUSH
18583: LD_INT 0
18585: PPUSH
18586: CALL_OW 234
// end ;
18590: GO 18575
18592: POP
18593: POP
// end ;
18594: PPOPN 2
18596: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18597: LD_EXP 62
18601: PUSH
18602: LD_EXP 68
18606: AND
18607: IFFALSE 18691
18609: GO 18611
18611: DISABLE
18612: LD_INT 0
18614: PPUSH
18615: PPUSH
// begin enable ;
18616: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18617: LD_ADDR_VAR 0 2
18621: PUSH
18622: LD_INT 22
18624: PUSH
18625: LD_OWVAR 2
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 32
18636: PUSH
18637: LD_INT 3
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PPUSH
18648: CALL_OW 69
18652: ST_TO_ADDR
// if not tmp then
18653: LD_VAR 0 2
18657: NOT
18658: IFFALSE 18662
// exit ;
18660: GO 18691
// for i in tmp do
18662: LD_ADDR_VAR 0 1
18666: PUSH
18667: LD_VAR 0 2
18671: PUSH
18672: FOR_IN
18673: IFFALSE 18689
// begin SetLives ( i , 0 ) ;
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_INT 0
18682: PPUSH
18683: CALL_OW 234
// end ;
18687: GO 18672
18689: POP
18690: POP
// end ;
18691: PPOPN 2
18693: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18694: LD_EXP 62
18698: PUSH
18699: LD_EXP 65
18703: AND
18704: IFFALSE 18797
18706: GO 18708
18708: DISABLE
18709: LD_INT 0
18711: PPUSH
// begin enable ;
18712: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_INT 22
18720: PUSH
18721: LD_OWVAR 2
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: LD_INT 25
18735: PUSH
18736: LD_INT 5
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 25
18745: PUSH
18746: LD_INT 9
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 25
18755: PUSH
18756: LD_INT 8
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: PUSH
18778: FOR_IN
18779: IFFALSE 18795
// begin SetClass ( i , 1 ) ;
18781: LD_VAR 0 1
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 336
// end ;
18793: GO 18778
18795: POP
18796: POP
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18800: LD_EXP 62
18804: PUSH
18805: LD_EXP 66
18809: AND
18810: PUSH
18811: LD_OWVAR 65
18815: PUSH
18816: LD_INT 7
18818: LESS
18819: AND
18820: IFFALSE 18834
18822: GO 18824
18824: DISABLE
// begin enable ;
18825: ENABLE
// game_speed := 7 ;
18826: LD_ADDR_OWVAR 65
18830: PUSH
18831: LD_INT 7
18833: ST_TO_ADDR
// end ;
18834: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18835: LD_EXP 62
18839: PUSH
18840: LD_EXP 69
18844: AND
18845: IFFALSE 19047
18847: GO 18849
18849: DISABLE
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
18854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_INT 81
18862: PUSH
18863: LD_OWVAR 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 21
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: ST_TO_ADDR
// if not tmp then
18891: LD_VAR 0 3
18895: NOT
18896: IFFALSE 18900
// exit ;
18898: GO 19047
// if tmp > 5 then
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 5
18907: GREATER
18908: IFFALSE 18920
// k := 5 else
18910: LD_ADDR_VAR 0 2
18914: PUSH
18915: LD_INT 5
18917: ST_TO_ADDR
18918: GO 18930
// k := tmp ;
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_VAR 0 3
18929: ST_TO_ADDR
// for i := 1 to k do
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: DOUBLE
18936: LD_INT 1
18938: DEC
18939: ST_TO_ADDR
18940: LD_VAR 0 2
18944: PUSH
18945: FOR_TO
18946: IFFALSE 19045
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18948: LD_VAR 0 3
18952: PUSH
18953: LD_VAR 0 1
18957: ARRAY
18958: PPUSH
18959: LD_VAR 0 1
18963: PUSH
18964: LD_INT 4
18966: MOD
18967: PUSH
18968: LD_INT 1
18970: PLUS
18971: PPUSH
18972: CALL_OW 259
18976: PUSH
18977: LD_INT 10
18979: LESS
18980: IFFALSE 19043
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18982: LD_VAR 0 3
18986: PUSH
18987: LD_VAR 0 1
18991: ARRAY
18992: PPUSH
18993: LD_VAR 0 1
18997: PUSH
18998: LD_INT 4
19000: MOD
19001: PUSH
19002: LD_INT 1
19004: PLUS
19005: PPUSH
19006: LD_VAR 0 3
19010: PUSH
19011: LD_VAR 0 1
19015: ARRAY
19016: PPUSH
19017: LD_VAR 0 1
19021: PUSH
19022: LD_INT 4
19024: MOD
19025: PUSH
19026: LD_INT 1
19028: PLUS
19029: PPUSH
19030: CALL_OW 259
19034: PUSH
19035: LD_INT 1
19037: PLUS
19038: PPUSH
19039: CALL_OW 237
19043: GO 18945
19045: POP
19046: POP
// end ;
19047: PPOPN 3
19049: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19050: LD_EXP 62
19054: PUSH
19055: LD_EXP 70
19059: AND
19060: IFFALSE 19080
19062: GO 19064
19064: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19065: LD_INT 4
19067: PPUSH
19068: LD_OWVAR 2
19072: PPUSH
19073: LD_INT 0
19075: PPUSH
19076: CALL_OW 324
19080: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19081: LD_EXP 62
19085: PUSH
19086: LD_EXP 99
19090: AND
19091: IFFALSE 19111
19093: GO 19095
19095: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19096: LD_INT 19
19098: PPUSH
19099: LD_OWVAR 2
19103: PPUSH
19104: LD_INT 0
19106: PPUSH
19107: CALL_OW 324
19111: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19112: LD_EXP 62
19116: PUSH
19117: LD_EXP 71
19121: AND
19122: IFFALSE 19224
19124: GO 19126
19126: DISABLE
19127: LD_INT 0
19129: PPUSH
19130: PPUSH
// begin enable ;
19131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_OWVAR 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 34
19154: PUSH
19155: LD_INT 11
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 34
19164: PUSH
19165: LD_INT 30
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PPUSH
19181: CALL_OW 69
19185: ST_TO_ADDR
// if not tmp then
19186: LD_VAR 0 2
19190: NOT
19191: IFFALSE 19195
// exit ;
19193: GO 19224
// for i in tmp do
19195: LD_ADDR_VAR 0 1
19199: PUSH
19200: LD_VAR 0 2
19204: PUSH
19205: FOR_IN
19206: IFFALSE 19222
// begin SetLives ( i , 0 ) ;
19208: LD_VAR 0 1
19212: PPUSH
19213: LD_INT 0
19215: PPUSH
19216: CALL_OW 234
// end ;
19220: GO 19205
19222: POP
19223: POP
// end ;
19224: PPOPN 2
19226: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19227: LD_EXP 62
19231: PUSH
19232: LD_EXP 72
19236: AND
19237: IFFALSE 19257
19239: GO 19241
19241: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19242: LD_INT 32
19244: PPUSH
19245: LD_OWVAR 2
19249: PPUSH
19250: LD_INT 0
19252: PPUSH
19253: CALL_OW 324
19257: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19258: LD_EXP 62
19262: PUSH
19263: LD_EXP 73
19267: AND
19268: IFFALSE 19449
19270: GO 19272
19272: DISABLE
19273: LD_INT 0
19275: PPUSH
19276: PPUSH
19277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19278: LD_ADDR_VAR 0 2
19282: PUSH
19283: LD_INT 22
19285: PUSH
19286: LD_OWVAR 2
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: LD_INT 3
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 69
19313: ST_TO_ADDR
// if not tmp then
19314: LD_VAR 0 2
19318: NOT
19319: IFFALSE 19323
// exit ;
19321: GO 19449
// side := 0 ;
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: LD_INT 0
19330: ST_TO_ADDR
// for i := 1 to 8 do
19331: LD_ADDR_VAR 0 1
19335: PUSH
19336: DOUBLE
19337: LD_INT 1
19339: DEC
19340: ST_TO_ADDR
19341: LD_INT 8
19343: PUSH
19344: FOR_TO
19345: IFFALSE 19393
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19347: LD_OWVAR 2
19351: PUSH
19352: LD_VAR 0 1
19356: NONEQUAL
19357: PUSH
19358: LD_OWVAR 2
19362: PPUSH
19363: LD_VAR 0 1
19367: PPUSH
19368: CALL_OW 81
19372: PUSH
19373: LD_INT 2
19375: EQUAL
19376: AND
19377: IFFALSE 19391
// begin side := i ;
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_VAR 0 1
19388: ST_TO_ADDR
// break ;
19389: GO 19393
// end ;
19391: GO 19344
19393: POP
19394: POP
// if not side then
19395: LD_VAR 0 3
19399: NOT
19400: IFFALSE 19404
// exit ;
19402: GO 19449
// for i := 1 to tmp do
19404: LD_ADDR_VAR 0 1
19408: PUSH
19409: DOUBLE
19410: LD_INT 1
19412: DEC
19413: ST_TO_ADDR
19414: LD_VAR 0 2
19418: PUSH
19419: FOR_TO
19420: IFFALSE 19447
// if Prob ( 60 ) then
19422: LD_INT 60
19424: PPUSH
19425: CALL_OW 13
19429: IFFALSE 19445
// SetSide ( i , side ) ;
19431: LD_VAR 0 1
19435: PPUSH
19436: LD_VAR 0 3
19440: PPUSH
19441: CALL_OW 235
19445: GO 19419
19447: POP
19448: POP
// end ;
19449: PPOPN 3
19451: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19452: LD_EXP 62
19456: PUSH
19457: LD_EXP 75
19461: AND
19462: IFFALSE 19581
19464: GO 19466
19466: DISABLE
19467: LD_INT 0
19469: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_OWVAR 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: LD_INT 23
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: PUSH
19524: FOR_IN
19525: IFFALSE 19579
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19527: LD_VAR 0 1
19531: PPUSH
19532: CALL_OW 257
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: LD_INT 2
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: LD_INT 4
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: IN
19555: IFFALSE 19577
// SetClass ( un , rand ( 1 , 4 ) ) ;
19557: LD_VAR 0 1
19561: PPUSH
19562: LD_INT 1
19564: PPUSH
19565: LD_INT 4
19567: PPUSH
19568: CALL_OW 12
19572: PPUSH
19573: CALL_OW 336
19577: GO 19524
19579: POP
19580: POP
// end ;
19581: PPOPN 1
19583: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19584: LD_EXP 62
19588: PUSH
19589: LD_EXP 74
19593: AND
19594: IFFALSE 19673
19596: GO 19598
19598: DISABLE
19599: LD_INT 0
19601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19602: LD_ADDR_VAR 0 1
19606: PUSH
19607: LD_INT 22
19609: PUSH
19610: LD_OWVAR 2
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 21
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: ST_TO_ADDR
// if not tmp then
19638: LD_VAR 0 1
19642: NOT
19643: IFFALSE 19647
// exit ;
19645: GO 19673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19647: LD_VAR 0 1
19651: PUSH
19652: LD_INT 1
19654: PPUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 12
19664: ARRAY
19665: PPUSH
19666: LD_INT 100
19668: PPUSH
19669: CALL_OW 234
// end ;
19673: PPOPN 1
19675: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19676: LD_EXP 62
19680: PUSH
19681: LD_EXP 76
19685: AND
19686: IFFALSE 19784
19688: GO 19690
19690: DISABLE
19691: LD_INT 0
19693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19694: LD_ADDR_VAR 0 1
19698: PUSH
19699: LD_INT 22
19701: PUSH
19702: LD_OWVAR 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 21
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PPUSH
19725: CALL_OW 69
19729: ST_TO_ADDR
// if not tmp then
19730: LD_VAR 0 1
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 19784
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19739: LD_VAR 0 1
19743: PUSH
19744: LD_INT 1
19746: PPUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 12
19756: ARRAY
19757: PPUSH
19758: LD_INT 1
19760: PPUSH
19761: LD_INT 4
19763: PPUSH
19764: CALL_OW 12
19768: PPUSH
19769: LD_INT 3000
19771: PPUSH
19772: LD_INT 9000
19774: PPUSH
19775: CALL_OW 12
19779: PPUSH
19780: CALL_OW 492
// end ;
19784: PPOPN 1
19786: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19787: LD_EXP 62
19791: PUSH
19792: LD_EXP 77
19796: AND
19797: IFFALSE 19817
19799: GO 19801
19801: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19802: LD_INT 1
19804: PPUSH
19805: LD_OWVAR 2
19809: PPUSH
19810: LD_INT 0
19812: PPUSH
19813: CALL_OW 324
19817: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19818: LD_EXP 62
19822: PUSH
19823: LD_EXP 78
19827: AND
19828: IFFALSE 19911
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_OWVAR 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 21
19856: PUSH
19857: LD_INT 3
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not tmp then
19873: LD_VAR 0 2
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 19911
// for i in tmp do
19882: LD_ADDR_VAR 0 1
19886: PUSH
19887: LD_VAR 0 2
19891: PUSH
19892: FOR_IN
19893: IFFALSE 19909
// SetBLevel ( i , 10 ) ;
19895: LD_VAR 0 1
19899: PPUSH
19900: LD_INT 10
19902: PPUSH
19903: CALL_OW 241
19907: GO 19892
19909: POP
19910: POP
// end ;
19911: PPOPN 2
19913: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19914: LD_EXP 62
19918: PUSH
19919: LD_EXP 79
19923: AND
19924: IFFALSE 20035
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19934: LD_ADDR_VAR 0 3
19938: PUSH
19939: LD_INT 22
19941: PUSH
19942: LD_OWVAR 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 25
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PPUSH
19965: CALL_OW 69
19969: ST_TO_ADDR
// if not tmp then
19970: LD_VAR 0 3
19974: NOT
19975: IFFALSE 19979
// exit ;
19977: GO 20035
// un := tmp [ rand ( 1 , tmp ) ] ;
19979: LD_ADDR_VAR 0 2
19983: PUSH
19984: LD_VAR 0 3
19988: PUSH
19989: LD_INT 1
19991: PPUSH
19992: LD_VAR 0 3
19996: PPUSH
19997: CALL_OW 12
20001: ARRAY
20002: ST_TO_ADDR
// if Crawls ( un ) then
20003: LD_VAR 0 2
20007: PPUSH
20008: CALL_OW 318
20012: IFFALSE 20023
// ComWalk ( un ) ;
20014: LD_VAR 0 2
20018: PPUSH
20019: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20023: LD_VAR 0 2
20027: PPUSH
20028: LD_INT 5
20030: PPUSH
20031: CALL_OW 336
// end ;
20035: PPOPN 3
20037: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20038: LD_EXP 62
20042: PUSH
20043: LD_EXP 80
20047: AND
20048: PUSH
20049: LD_OWVAR 67
20053: PUSH
20054: LD_INT 4
20056: LESS
20057: AND
20058: IFFALSE 20077
20060: GO 20062
20062: DISABLE
// begin Difficulty := Difficulty + 1 ;
20063: LD_ADDR_OWVAR 67
20067: PUSH
20068: LD_OWVAR 67
20072: PUSH
20073: LD_INT 1
20075: PLUS
20076: ST_TO_ADDR
// end ;
20077: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20078: LD_EXP 62
20082: PUSH
20083: LD_EXP 81
20087: AND
20088: IFFALSE 20191
20090: GO 20092
20092: DISABLE
20093: LD_INT 0
20095: PPUSH
// begin for i := 1 to 5 do
20096: LD_ADDR_VAR 0 1
20100: PUSH
20101: DOUBLE
20102: LD_INT 1
20104: DEC
20105: ST_TO_ADDR
20106: LD_INT 5
20108: PUSH
20109: FOR_TO
20110: IFFALSE 20189
// begin uc_nation := nation_nature ;
20112: LD_ADDR_OWVAR 21
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// uc_side := 0 ;
20120: LD_ADDR_OWVAR 20
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20128: LD_ADDR_OWVAR 29
20132: PUSH
20133: LD_INT 12
20135: PUSH
20136: LD_INT 12
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: ST_TO_ADDR
// hc_agressivity := 20 ;
20143: LD_ADDR_OWVAR 35
20147: PUSH
20148: LD_INT 20
20150: ST_TO_ADDR
// hc_class := class_tiger ;
20151: LD_ADDR_OWVAR 28
20155: PUSH
20156: LD_INT 14
20158: ST_TO_ADDR
// hc_gallery :=  ;
20159: LD_ADDR_OWVAR 33
20163: PUSH
20164: LD_STRING 
20166: ST_TO_ADDR
// hc_name :=  ;
20167: LD_ADDR_OWVAR 26
20171: PUSH
20172: LD_STRING 
20174: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20175: CALL_OW 44
20179: PPUSH
20180: LD_INT 0
20182: PPUSH
20183: CALL_OW 51
// end ;
20187: GO 20109
20189: POP
20190: POP
// end ;
20191: PPOPN 1
20193: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20194: LD_EXP 62
20198: PUSH
20199: LD_EXP 82
20203: AND
20204: IFFALSE 20213
20206: GO 20208
20208: DISABLE
// StreamSibBomb ;
20209: CALL 20214 0 0
20213: END
// export function StreamSibBomb ; var i , x , y ; begin
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
// result := false ;
20220: LD_ADDR_VAR 0 1
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// for i := 1 to 16 do
20228: LD_ADDR_VAR 0 2
20232: PUSH
20233: DOUBLE
20234: LD_INT 1
20236: DEC
20237: ST_TO_ADDR
20238: LD_INT 16
20240: PUSH
20241: FOR_TO
20242: IFFALSE 20441
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20244: LD_ADDR_VAR 0 3
20248: PUSH
20249: LD_INT 10
20251: PUSH
20252: LD_INT 20
20254: PUSH
20255: LD_INT 30
20257: PUSH
20258: LD_INT 40
20260: PUSH
20261: LD_INT 50
20263: PUSH
20264: LD_INT 60
20266: PUSH
20267: LD_INT 70
20269: PUSH
20270: LD_INT 80
20272: PUSH
20273: LD_INT 90
20275: PUSH
20276: LD_INT 100
20278: PUSH
20279: LD_INT 110
20281: PUSH
20282: LD_INT 120
20284: PUSH
20285: LD_INT 130
20287: PUSH
20288: LD_INT 140
20290: PUSH
20291: LD_INT 150
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PPUSH
20314: LD_INT 15
20316: PPUSH
20317: CALL_OW 12
20321: ARRAY
20322: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20323: LD_ADDR_VAR 0 4
20327: PUSH
20328: LD_INT 10
20330: PUSH
20331: LD_INT 20
20333: PUSH
20334: LD_INT 30
20336: PUSH
20337: LD_INT 40
20339: PUSH
20340: LD_INT 50
20342: PUSH
20343: LD_INT 60
20345: PUSH
20346: LD_INT 70
20348: PUSH
20349: LD_INT 80
20351: PUSH
20352: LD_INT 90
20354: PUSH
20355: LD_INT 100
20357: PUSH
20358: LD_INT 110
20360: PUSH
20361: LD_INT 120
20363: PUSH
20364: LD_INT 130
20366: PUSH
20367: LD_INT 140
20369: PUSH
20370: LD_INT 150
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_INT 15
20395: PPUSH
20396: CALL_OW 12
20400: ARRAY
20401: ST_TO_ADDR
// if ValidHex ( x , y ) then
20402: LD_VAR 0 3
20406: PPUSH
20407: LD_VAR 0 4
20411: PPUSH
20412: CALL_OW 488
20416: IFFALSE 20439
// begin result := [ x , y ] ;
20418: LD_ADDR_VAR 0 1
20422: PUSH
20423: LD_VAR 0 3
20427: PUSH
20428: LD_VAR 0 4
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: ST_TO_ADDR
// break ;
20437: GO 20441
// end ; end ;
20439: GO 20241
20441: POP
20442: POP
// if result then
20443: LD_VAR 0 1
20447: IFFALSE 20507
// begin ToLua ( playSibBomb() ) ;
20449: LD_STRING playSibBomb()
20451: PPUSH
20452: CALL_OW 559
// wait ( 0 0$14 ) ;
20456: LD_INT 490
20458: PPUSH
20459: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20463: LD_VAR 0 1
20467: PUSH
20468: LD_INT 1
20470: ARRAY
20471: PPUSH
20472: LD_VAR 0 1
20476: PUSH
20477: LD_INT 2
20479: ARRAY
20480: PPUSH
20481: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20485: LD_VAR 0 1
20489: PUSH
20490: LD_INT 1
20492: ARRAY
20493: PPUSH
20494: LD_VAR 0 1
20498: PUSH
20499: LD_INT 2
20501: ARRAY
20502: PPUSH
20503: CALL_OW 429
// end ; end ;
20507: LD_VAR 0 1
20511: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20512: LD_EXP 62
20516: PUSH
20517: LD_EXP 84
20521: AND
20522: IFFALSE 20534
20524: GO 20526
20526: DISABLE
// YouLost (  ) ;
20527: LD_STRING 
20529: PPUSH
20530: CALL_OW 104
20534: END
// every 0 0$1 trigger StreamModeActive and sFog do
20535: LD_EXP 62
20539: PUSH
20540: LD_EXP 83
20544: AND
20545: IFFALSE 20559
20547: GO 20549
20549: DISABLE
// FogOff ( your_side ) ;
20550: LD_OWVAR 2
20554: PPUSH
20555: CALL_OW 344
20559: END
// every 0 0$1 trigger StreamModeActive and sSun do
20560: LD_EXP 62
20564: PUSH
20565: LD_EXP 85
20569: AND
20570: IFFALSE 20598
20572: GO 20574
20574: DISABLE
// begin solar_recharge_percent := 0 ;
20575: LD_ADDR_OWVAR 79
20579: PUSH
20580: LD_INT 0
20582: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20583: LD_INT 10500
20585: PPUSH
20586: CALL_OW 67
// solar_recharge_percent := 100 ;
20590: LD_ADDR_OWVAR 79
20594: PUSH
20595: LD_INT 100
20597: ST_TO_ADDR
// end ;
20598: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20599: LD_EXP 62
20603: PUSH
20604: LD_EXP 86
20608: AND
20609: IFFALSE 20848
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
20618: PPUSH
// begin tmp := [ ] ;
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: EMPTY
20625: ST_TO_ADDR
// for i := 1 to 6 do
20626: LD_ADDR_VAR 0 1
20630: PUSH
20631: DOUBLE
20632: LD_INT 1
20634: DEC
20635: ST_TO_ADDR
20636: LD_INT 6
20638: PUSH
20639: FOR_TO
20640: IFFALSE 20745
// begin uc_nation := nation_nature ;
20642: LD_ADDR_OWVAR 21
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// uc_side := 0 ;
20650: LD_ADDR_OWVAR 20
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20658: LD_ADDR_OWVAR 29
20662: PUSH
20663: LD_INT 12
20665: PUSH
20666: LD_INT 12
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: ST_TO_ADDR
// hc_agressivity := 20 ;
20673: LD_ADDR_OWVAR 35
20677: PUSH
20678: LD_INT 20
20680: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20681: LD_ADDR_OWVAR 28
20685: PUSH
20686: LD_INT 17
20688: ST_TO_ADDR
// hc_gallery :=  ;
20689: LD_ADDR_OWVAR 33
20693: PUSH
20694: LD_STRING 
20696: ST_TO_ADDR
// hc_name :=  ;
20697: LD_ADDR_OWVAR 26
20701: PUSH
20702: LD_STRING 
20704: ST_TO_ADDR
// un := CreateHuman ;
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: CALL_OW 44
20714: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_INT 1
20722: PPUSH
20723: CALL_OW 51
// tmp := tmp ^ un ;
20727: LD_ADDR_VAR 0 3
20731: PUSH
20732: LD_VAR 0 3
20736: PUSH
20737: LD_VAR 0 2
20741: ADD
20742: ST_TO_ADDR
// end ;
20743: GO 20639
20745: POP
20746: POP
// repeat wait ( 0 0$1 ) ;
20747: LD_INT 35
20749: PPUSH
20750: CALL_OW 67
// for un in tmp do
20754: LD_ADDR_VAR 0 2
20758: PUSH
20759: LD_VAR 0 3
20763: PUSH
20764: FOR_IN
20765: IFFALSE 20839
// begin if IsDead ( un ) then
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL_OW 301
20776: IFFALSE 20796
// begin tmp := tmp diff un ;
20778: LD_ADDR_VAR 0 3
20782: PUSH
20783: LD_VAR 0 3
20787: PUSH
20788: LD_VAR 0 2
20792: DIFF
20793: ST_TO_ADDR
// continue ;
20794: GO 20764
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_INT 3
20803: PUSH
20804: LD_INT 22
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL_OW 69
20822: PPUSH
20823: LD_VAR 0 2
20827: PPUSH
20828: CALL_OW 74
20832: PPUSH
20833: CALL_OW 115
// end ;
20837: GO 20764
20839: POP
20840: POP
// until not tmp ;
20841: LD_VAR 0 3
20845: NOT
20846: IFFALSE 20747
// end ;
20848: PPOPN 3
20850: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20851: LD_EXP 62
20855: PUSH
20856: LD_EXP 87
20860: AND
20861: IFFALSE 20915
20863: GO 20865
20865: DISABLE
// begin ToLua ( displayTroll(); ) ;
20866: LD_STRING displayTroll();
20868: PPUSH
20869: CALL_OW 559
// wait ( 3 3$00 ) ;
20873: LD_INT 6300
20875: PPUSH
20876: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20880: LD_STRING hideTroll();
20882: PPUSH
20883: CALL_OW 559
// wait ( 1 1$00 ) ;
20887: LD_INT 2100
20889: PPUSH
20890: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20894: LD_STRING displayTroll();
20896: PPUSH
20897: CALL_OW 559
// wait ( 1 1$00 ) ;
20901: LD_INT 2100
20903: PPUSH
20904: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20908: LD_STRING hideTroll();
20910: PPUSH
20911: CALL_OW 559
// end ;
20915: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20916: LD_EXP 62
20920: PUSH
20921: LD_EXP 88
20925: AND
20926: IFFALSE 20989
20928: GO 20930
20930: DISABLE
20931: LD_INT 0
20933: PPUSH
// begin p := 0 ;
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_INT 0
20941: ST_TO_ADDR
// repeat game_speed := 1 ;
20942: LD_ADDR_OWVAR 65
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20950: LD_INT 35
20952: PPUSH
20953: CALL_OW 67
// p := p + 1 ;
20957: LD_ADDR_VAR 0 1
20961: PUSH
20962: LD_VAR 0 1
20966: PUSH
20967: LD_INT 1
20969: PLUS
20970: ST_TO_ADDR
// until p >= 60 ;
20971: LD_VAR 0 1
20975: PUSH
20976: LD_INT 60
20978: GREATEREQUAL
20979: IFFALSE 20942
// game_speed := 4 ;
20981: LD_ADDR_OWVAR 65
20985: PUSH
20986: LD_INT 4
20988: ST_TO_ADDR
// end ;
20989: PPOPN 1
20991: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20992: LD_EXP 62
20996: PUSH
20997: LD_EXP 89
21001: AND
21002: IFFALSE 21148
21004: GO 21006
21006: DISABLE
21007: LD_INT 0
21009: PPUSH
21010: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: LD_INT 22
21018: PUSH
21019: LD_OWVAR 2
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: LD_INT 30
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 30
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 69
21064: ST_TO_ADDR
// if not depot then
21065: LD_VAR 0 1
21069: NOT
21070: IFFALSE 21074
// exit ;
21072: GO 21148
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21074: LD_ADDR_VAR 0 2
21078: PUSH
21079: LD_VAR 0 1
21083: PUSH
21084: LD_INT 1
21086: PPUSH
21087: LD_VAR 0 1
21091: PPUSH
21092: CALL_OW 12
21096: ARRAY
21097: PPUSH
21098: CALL_OW 274
21102: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_INT 1
21110: PPUSH
21111: LD_INT 0
21113: PPUSH
21114: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21118: LD_VAR 0 2
21122: PPUSH
21123: LD_INT 2
21125: PPUSH
21126: LD_INT 0
21128: PPUSH
21129: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21133: LD_VAR 0 2
21137: PPUSH
21138: LD_INT 3
21140: PPUSH
21141: LD_INT 0
21143: PPUSH
21144: CALL_OW 277
// end ;
21148: PPOPN 2
21150: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21151: LD_EXP 62
21155: PUSH
21156: LD_EXP 90
21160: AND
21161: IFFALSE 21258
21163: GO 21165
21165: DISABLE
21166: LD_INT 0
21168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21169: LD_ADDR_VAR 0 1
21173: PUSH
21174: LD_INT 22
21176: PUSH
21177: LD_OWVAR 2
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 21
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 3
21198: PUSH
21199: LD_INT 23
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: PPUSH
21218: CALL_OW 69
21222: ST_TO_ADDR
// if not tmp then
21223: LD_VAR 0 1
21227: NOT
21228: IFFALSE 21232
// exit ;
21230: GO 21258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21232: LD_VAR 0 1
21236: PUSH
21237: LD_INT 1
21239: PPUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 12
21249: ARRAY
21250: PPUSH
21251: LD_INT 200
21253: PPUSH
21254: CALL_OW 234
// end ;
21258: PPOPN 1
21260: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21261: LD_EXP 62
21265: PUSH
21266: LD_EXP 91
21270: AND
21271: IFFALSE 21350
21273: GO 21275
21275: DISABLE
21276: LD_INT 0
21278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21279: LD_ADDR_VAR 0 1
21283: PUSH
21284: LD_INT 22
21286: PUSH
21287: LD_OWVAR 2
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 21
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: ST_TO_ADDR
// if not tmp then
21315: LD_VAR 0 1
21319: NOT
21320: IFFALSE 21324
// exit ;
21322: GO 21350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21324: LD_VAR 0 1
21328: PUSH
21329: LD_INT 1
21331: PPUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: CALL_OW 12
21341: ARRAY
21342: PPUSH
21343: LD_INT 60
21345: PPUSH
21346: CALL_OW 234
// end ;
21350: PPOPN 1
21352: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21353: LD_EXP 62
21357: PUSH
21358: LD_EXP 92
21362: AND
21363: IFFALSE 21462
21365: GO 21367
21367: DISABLE
21368: LD_INT 0
21370: PPUSH
21371: PPUSH
// begin enable ;
21372: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21373: LD_ADDR_VAR 0 1
21377: PUSH
21378: LD_INT 22
21380: PUSH
21381: LD_OWVAR 2
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 61
21392: PUSH
21393: EMPTY
21394: LIST
21395: PUSH
21396: LD_INT 33
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: LIST
21410: PPUSH
21411: CALL_OW 69
21415: ST_TO_ADDR
// if not tmp then
21416: LD_VAR 0 1
21420: NOT
21421: IFFALSE 21425
// exit ;
21423: GO 21462
// for i in tmp do
21425: LD_ADDR_VAR 0 2
21429: PUSH
21430: LD_VAR 0 1
21434: PUSH
21435: FOR_IN
21436: IFFALSE 21460
// if IsControledBy ( i ) then
21438: LD_VAR 0 2
21442: PPUSH
21443: CALL_OW 312
21447: IFFALSE 21458
// ComUnlink ( i ) ;
21449: LD_VAR 0 2
21453: PPUSH
21454: CALL_OW 136
21458: GO 21435
21460: POP
21461: POP
// end ;
21462: PPOPN 2
21464: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21465: LD_EXP 62
21469: PUSH
21470: LD_EXP 93
21474: AND
21475: IFFALSE 21615
21477: GO 21479
21479: DISABLE
21480: LD_INT 0
21482: PPUSH
21483: PPUSH
// begin ToLua ( displayPowell(); ) ;
21484: LD_STRING displayPowell();
21486: PPUSH
21487: CALL_OW 559
// uc_side := 0 ;
21491: LD_ADDR_OWVAR 20
21495: PUSH
21496: LD_INT 0
21498: ST_TO_ADDR
// uc_nation := 2 ;
21499: LD_ADDR_OWVAR 21
21503: PUSH
21504: LD_INT 2
21506: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21507: LD_ADDR_OWVAR 37
21511: PUSH
21512: LD_INT 14
21514: ST_TO_ADDR
// vc_engine := engine_siberite ;
21515: LD_ADDR_OWVAR 39
21519: PUSH
21520: LD_INT 3
21522: ST_TO_ADDR
// vc_control := control_apeman ;
21523: LD_ADDR_OWVAR 38
21527: PUSH
21528: LD_INT 5
21530: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21531: LD_ADDR_OWVAR 40
21535: PUSH
21536: LD_INT 29
21538: ST_TO_ADDR
// un := CreateVehicle ;
21539: LD_ADDR_VAR 0 2
21543: PUSH
21544: CALL_OW 45
21548: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21549: LD_VAR 0 2
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21561: LD_INT 35
21563: PPUSH
21564: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21568: LD_VAR 0 2
21572: PPUSH
21573: LD_INT 22
21575: PUSH
21576: LD_OWVAR 2
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PPUSH
21585: CALL_OW 69
21589: PPUSH
21590: LD_VAR 0 2
21594: PPUSH
21595: CALL_OW 74
21599: PPUSH
21600: CALL_OW 115
// until IsDead ( un ) ;
21604: LD_VAR 0 2
21608: PPUSH
21609: CALL_OW 301
21613: IFFALSE 21561
// end ;
21615: PPOPN 2
21617: END
// every 0 0$1 trigger StreamModeActive and sStu do
21618: LD_EXP 62
21622: PUSH
21623: LD_EXP 101
21627: AND
21628: IFFALSE 21644
21630: GO 21632
21632: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21633: LD_STRING displayStucuk();
21635: PPUSH
21636: CALL_OW 559
// ResetFog ;
21640: CALL_OW 335
// end ;
21644: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21645: LD_EXP 62
21649: PUSH
21650: LD_EXP 94
21654: AND
21655: IFFALSE 21796
21657: GO 21659
21659: DISABLE
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 22
21671: PUSH
21672: LD_OWVAR 2
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 21
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: ST_TO_ADDR
// if not tmp then
21700: LD_VAR 0 2
21704: NOT
21705: IFFALSE 21709
// exit ;
21707: GO 21796
// un := tmp [ rand ( 1 , tmp ) ] ;
21709: LD_ADDR_VAR 0 1
21713: PUSH
21714: LD_VAR 0 2
21718: PUSH
21719: LD_INT 1
21721: PPUSH
21722: LD_VAR 0 2
21726: PPUSH
21727: CALL_OW 12
21731: ARRAY
21732: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21733: LD_VAR 0 1
21737: PPUSH
21738: LD_INT 0
21740: PPUSH
21741: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_OWVAR 3
21754: PUSH
21755: LD_VAR 0 1
21759: DIFF
21760: PPUSH
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 74
21770: PPUSH
21771: CALL_OW 115
// wait ( 0 0$20 ) ;
21775: LD_INT 700
21777: PPUSH
21778: CALL_OW 67
// SetSide ( un , your_side ) ;
21782: LD_VAR 0 1
21786: PPUSH
21787: LD_OWVAR 2
21791: PPUSH
21792: CALL_OW 235
// end ;
21796: PPOPN 2
21798: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21799: LD_EXP 62
21803: PUSH
21804: LD_EXP 95
21808: AND
21809: IFFALSE 21915
21811: GO 21813
21813: DISABLE
21814: LD_INT 0
21816: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21817: LD_ADDR_VAR 0 1
21821: PUSH
21822: LD_INT 22
21824: PUSH
21825: LD_OWVAR 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 30
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 69
21870: ST_TO_ADDR
// if not depot then
21871: LD_VAR 0 1
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 21915
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21880: LD_VAR 0 1
21884: PUSH
21885: LD_INT 1
21887: ARRAY
21888: PPUSH
21889: CALL_OW 250
21893: PPUSH
21894: LD_VAR 0 1
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: PPUSH
21903: CALL_OW 251
21907: PPUSH
21908: LD_INT 70
21910: PPUSH
21911: CALL_OW 495
// end ;
21915: PPOPN 1
21917: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21918: LD_EXP 62
21922: PUSH
21923: LD_EXP 96
21927: AND
21928: IFFALSE 22139
21930: GO 21932
21932: DISABLE
21933: LD_INT 0
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21940: LD_ADDR_VAR 0 5
21944: PUSH
21945: LD_INT 22
21947: PUSH
21948: LD_OWVAR 2
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 21
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PPUSH
21971: CALL_OW 69
21975: ST_TO_ADDR
// if not tmp then
21976: LD_VAR 0 5
21980: NOT
21981: IFFALSE 21985
// exit ;
21983: GO 22139
// for i in tmp do
21985: LD_ADDR_VAR 0 1
21989: PUSH
21990: LD_VAR 0 5
21994: PUSH
21995: FOR_IN
21996: IFFALSE 22137
// begin d := rand ( 0 , 5 ) ;
21998: LD_ADDR_VAR 0 4
22002: PUSH
22003: LD_INT 0
22005: PPUSH
22006: LD_INT 5
22008: PPUSH
22009: CALL_OW 12
22013: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22014: LD_ADDR_VAR 0 2
22018: PUSH
22019: LD_VAR 0 1
22023: PPUSH
22024: CALL_OW 250
22028: PPUSH
22029: LD_VAR 0 4
22033: PPUSH
22034: LD_INT 3
22036: PPUSH
22037: LD_INT 12
22039: PPUSH
22040: CALL_OW 12
22044: PPUSH
22045: CALL_OW 272
22049: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22050: LD_ADDR_VAR 0 3
22054: PUSH
22055: LD_VAR 0 1
22059: PPUSH
22060: CALL_OW 251
22064: PPUSH
22065: LD_VAR 0 4
22069: PPUSH
22070: LD_INT 3
22072: PPUSH
22073: LD_INT 12
22075: PPUSH
22076: CALL_OW 12
22080: PPUSH
22081: CALL_OW 273
22085: ST_TO_ADDR
// if ValidHex ( x , y ) then
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_VAR 0 3
22095: PPUSH
22096: CALL_OW 488
22100: IFFALSE 22135
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22102: LD_VAR 0 1
22106: PPUSH
22107: LD_VAR 0 2
22111: PPUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_INT 3
22119: PPUSH
22120: LD_INT 6
22122: PPUSH
22123: CALL_OW 12
22127: PPUSH
22128: LD_INT 1
22130: PPUSH
22131: CALL_OW 483
// end ;
22135: GO 21995
22137: POP
22138: POP
// end ;
22139: PPOPN 5
22141: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22142: LD_EXP 62
22146: PUSH
22147: LD_EXP 97
22151: AND
22152: IFFALSE 22246
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22161: LD_ADDR_VAR 0 2
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_OWVAR 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 32
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 21
22190: PUSH
22191: LD_INT 2
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: PPUSH
22203: CALL_OW 69
22207: ST_TO_ADDR
// if not tmp then
22208: LD_VAR 0 2
22212: NOT
22213: IFFALSE 22217
// exit ;
22215: GO 22246
// for i in tmp do
22217: LD_ADDR_VAR 0 1
22221: PUSH
22222: LD_VAR 0 2
22226: PUSH
22227: FOR_IN
22228: IFFALSE 22244
// SetFuel ( i , 0 ) ;
22230: LD_VAR 0 1
22234: PPUSH
22235: LD_INT 0
22237: PPUSH
22238: CALL_OW 240
22242: GO 22227
22244: POP
22245: POP
// end ;
22246: PPOPN 2
22248: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22249: LD_EXP 62
22253: PUSH
22254: LD_EXP 98
22258: AND
22259: IFFALSE 22325
22261: GO 22263
22263: DISABLE
22264: LD_INT 0
22266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22267: LD_ADDR_VAR 0 1
22271: PUSH
22272: LD_INT 22
22274: PUSH
22275: LD_OWVAR 2
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 29
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PPUSH
22298: CALL_OW 69
22302: ST_TO_ADDR
// if not tmp then
22303: LD_VAR 0 1
22307: NOT
22308: IFFALSE 22312
// exit ;
22310: GO 22325
// DestroyUnit ( tmp [ 1 ] ) ;
22312: LD_VAR 0 1
22316: PUSH
22317: LD_INT 1
22319: ARRAY
22320: PPUSH
22321: CALL_OW 65
// end ;
22325: PPOPN 1
22327: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22328: LD_EXP 62
22332: PUSH
22333: LD_EXP 100
22337: AND
22338: IFFALSE 22467
22340: GO 22342
22342: DISABLE
22343: LD_INT 0
22345: PPUSH
// begin uc_side := 0 ;
22346: LD_ADDR_OWVAR 20
22350: PUSH
22351: LD_INT 0
22353: ST_TO_ADDR
// uc_nation := nation_arabian ;
22354: LD_ADDR_OWVAR 21
22358: PUSH
22359: LD_INT 2
22361: ST_TO_ADDR
// hc_gallery :=  ;
22362: LD_ADDR_OWVAR 33
22366: PUSH
22367: LD_STRING 
22369: ST_TO_ADDR
// hc_name :=  ;
22370: LD_ADDR_OWVAR 26
22374: PUSH
22375: LD_STRING 
22377: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22378: LD_INT 1
22380: PPUSH
22381: LD_INT 11
22383: PPUSH
22384: LD_INT 10
22386: PPUSH
22387: CALL_OW 380
// un := CreateHuman ;
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: CALL_OW 44
22400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_INT 1
22408: PPUSH
22409: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22413: LD_INT 35
22415: PPUSH
22416: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22420: LD_VAR 0 1
22424: PPUSH
22425: LD_INT 22
22427: PUSH
22428: LD_OWVAR 2
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PPUSH
22437: CALL_OW 69
22441: PPUSH
22442: LD_VAR 0 1
22446: PPUSH
22447: CALL_OW 74
22451: PPUSH
22452: CALL_OW 115
// until IsDead ( un ) ;
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 301
22465: IFFALSE 22413
// end ;
22467: PPOPN 1
22469: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22470: LD_EXP 62
22474: PUSH
22475: LD_EXP 102
22479: AND
22480: IFFALSE 22492
22482: GO 22484
22484: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22485: LD_STRING earthquake(getX(game), 0, 32)
22487: PPUSH
22488: CALL_OW 559
22492: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22493: LD_EXP 62
22497: PUSH
22498: LD_EXP 103
22502: AND
22503: IFFALSE 22594
22505: GO 22507
22507: DISABLE
22508: LD_INT 0
22510: PPUSH
// begin enable ;
22511: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22512: LD_ADDR_VAR 0 1
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_OWVAR 2
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 21
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 33
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: PPUSH
22554: CALL_OW 69
22558: ST_TO_ADDR
// if not tmp then
22559: LD_VAR 0 1
22563: NOT
22564: IFFALSE 22568
// exit ;
22566: GO 22594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22568: LD_VAR 0 1
22572: PUSH
22573: LD_INT 1
22575: PPUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: CALL_OW 12
22585: ARRAY
22586: PPUSH
22587: LD_INT 1
22589: PPUSH
22590: CALL_OW 234
// end ;
22594: PPOPN 1
22596: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22597: LD_EXP 62
22601: PUSH
22602: LD_EXP 104
22606: AND
22607: IFFALSE 22748
22609: GO 22611
22611: DISABLE
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
22616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22617: LD_ADDR_VAR 0 3
22621: PUSH
22622: LD_INT 22
22624: PUSH
22625: LD_OWVAR 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 25
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 3
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22748
// un := tmp [ rand ( 1 , tmp ) ] ;
22662: LD_ADDR_VAR 0 2
22666: PUSH
22667: LD_VAR 0 3
22671: PUSH
22672: LD_INT 1
22674: PPUSH
22675: LD_VAR 0 3
22679: PPUSH
22680: CALL_OW 12
22684: ARRAY
22685: ST_TO_ADDR
// if Crawls ( un ) then
22686: LD_VAR 0 2
22690: PPUSH
22691: CALL_OW 318
22695: IFFALSE 22706
// ComWalk ( un ) ;
22697: LD_VAR 0 2
22701: PPUSH
22702: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22706: LD_VAR 0 2
22710: PPUSH
22711: LD_INT 9
22713: PPUSH
22714: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22718: LD_INT 28
22720: PPUSH
22721: LD_OWVAR 2
22725: PPUSH
22726: LD_INT 2
22728: PPUSH
22729: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22733: LD_INT 29
22735: PPUSH
22736: LD_OWVAR 2
22740: PPUSH
22741: LD_INT 2
22743: PPUSH
22744: CALL_OW 322
// end ;
22748: PPOPN 3
22750: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22751: LD_EXP 62
22755: PUSH
22756: LD_EXP 105
22760: AND
22761: IFFALSE 22872
22763: GO 22765
22765: DISABLE
22766: LD_INT 0
22768: PPUSH
22769: PPUSH
22770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22771: LD_ADDR_VAR 0 3
22775: PUSH
22776: LD_INT 22
22778: PUSH
22779: LD_OWVAR 2
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 25
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PPUSH
22802: CALL_OW 69
22806: ST_TO_ADDR
// if not tmp then
22807: LD_VAR 0 3
22811: NOT
22812: IFFALSE 22816
// exit ;
22814: GO 22872
// un := tmp [ rand ( 1 , tmp ) ] ;
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_VAR 0 3
22825: PUSH
22826: LD_INT 1
22828: PPUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: CALL_OW 12
22838: ARRAY
22839: ST_TO_ADDR
// if Crawls ( un ) then
22840: LD_VAR 0 2
22844: PPUSH
22845: CALL_OW 318
22849: IFFALSE 22860
// ComWalk ( un ) ;
22851: LD_VAR 0 2
22855: PPUSH
22856: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22860: LD_VAR 0 2
22864: PPUSH
22865: LD_INT 8
22867: PPUSH
22868: CALL_OW 336
// end ;
22872: PPOPN 3
22874: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22875: LD_EXP 62
22879: PUSH
22880: LD_EXP 106
22884: AND
22885: IFFALSE 23029
22887: GO 22889
22889: DISABLE
22890: LD_INT 0
22892: PPUSH
22893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22894: LD_ADDR_VAR 0 2
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_OWVAR 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: LD_INT 34
22926: PUSH
22927: LD_INT 12
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 34
22936: PUSH
22937: LD_INT 51
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 34
22946: PUSH
22947: LD_INT 32
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: PPUSH
22965: CALL_OW 69
22969: ST_TO_ADDR
// if not tmp then
22970: LD_VAR 0 2
22974: NOT
22975: IFFALSE 22979
// exit ;
22977: GO 23029
// for i in tmp do
22979: LD_ADDR_VAR 0 1
22983: PUSH
22984: LD_VAR 0 2
22988: PUSH
22989: FOR_IN
22990: IFFALSE 23027
// if GetCargo ( i , mat_artifact ) = 0 then
22992: LD_VAR 0 1
22996: PPUSH
22997: LD_INT 4
22999: PPUSH
23000: CALL_OW 289
23004: PUSH
23005: LD_INT 0
23007: EQUAL
23008: IFFALSE 23025
// SetCargo ( i , mat_siberit , 100 ) ;
23010: LD_VAR 0 1
23014: PPUSH
23015: LD_INT 3
23017: PPUSH
23018: LD_INT 100
23020: PPUSH
23021: CALL_OW 290
23025: GO 22989
23027: POP
23028: POP
// end ;
23029: PPOPN 2
23031: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23032: LD_EXP 62
23036: PUSH
23037: LD_EXP 107
23041: AND
23042: IFFALSE 23225
23044: GO 23046
23046: DISABLE
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23051: LD_ADDR_VAR 0 2
23055: PUSH
23056: LD_INT 22
23058: PUSH
23059: LD_OWVAR 2
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PPUSH
23068: CALL_OW 69
23072: ST_TO_ADDR
// if not tmp then
23073: LD_VAR 0 2
23077: NOT
23078: IFFALSE 23082
// exit ;
23080: GO 23225
// for i := 1 to 2 do
23082: LD_ADDR_VAR 0 1
23086: PUSH
23087: DOUBLE
23088: LD_INT 1
23090: DEC
23091: ST_TO_ADDR
23092: LD_INT 2
23094: PUSH
23095: FOR_TO
23096: IFFALSE 23223
// begin uc_side := your_side ;
23098: LD_ADDR_OWVAR 20
23102: PUSH
23103: LD_OWVAR 2
23107: ST_TO_ADDR
// uc_nation := nation_american ;
23108: LD_ADDR_OWVAR 21
23112: PUSH
23113: LD_INT 1
23115: ST_TO_ADDR
// vc_chassis := us_morphling ;
23116: LD_ADDR_OWVAR 37
23120: PUSH
23121: LD_INT 5
23123: ST_TO_ADDR
// vc_engine := engine_siberite ;
23124: LD_ADDR_OWVAR 39
23128: PUSH
23129: LD_INT 3
23131: ST_TO_ADDR
// vc_control := control_computer ;
23132: LD_ADDR_OWVAR 38
23136: PUSH
23137: LD_INT 3
23139: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23140: LD_ADDR_OWVAR 40
23144: PUSH
23145: LD_INT 10
23147: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23148: LD_VAR 0 2
23152: PUSH
23153: LD_INT 1
23155: ARRAY
23156: PPUSH
23157: CALL_OW 310
23161: NOT
23162: IFFALSE 23209
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23164: CALL_OW 45
23168: PPUSH
23169: LD_VAR 0 2
23173: PUSH
23174: LD_INT 1
23176: ARRAY
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 2
23187: PUSH
23188: LD_INT 1
23190: ARRAY
23191: PPUSH
23192: CALL_OW 251
23196: PPUSH
23197: LD_INT 12
23199: PPUSH
23200: LD_INT 1
23202: PPUSH
23203: CALL_OW 50
23207: GO 23221
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23209: CALL_OW 45
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: CALL_OW 51
// end ;
23221: GO 23095
23223: POP
23224: POP
// end ;
23225: PPOPN 2
23227: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23228: LD_EXP 62
23232: PUSH
23233: LD_EXP 108
23237: AND
23238: IFFALSE 23460
23240: GO 23242
23242: DISABLE
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23251: LD_ADDR_VAR 0 6
23255: PUSH
23256: LD_INT 22
23258: PUSH
23259: LD_OWVAR 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 21
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 23
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: PPUSH
23300: CALL_OW 69
23304: ST_TO_ADDR
// if not tmp then
23305: LD_VAR 0 6
23309: NOT
23310: IFFALSE 23314
// exit ;
23312: GO 23460
// s1 := rand ( 1 , 4 ) ;
23314: LD_ADDR_VAR 0 2
23318: PUSH
23319: LD_INT 1
23321: PPUSH
23322: LD_INT 4
23324: PPUSH
23325: CALL_OW 12
23329: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23330: LD_ADDR_VAR 0 4
23334: PUSH
23335: LD_VAR 0 6
23339: PUSH
23340: LD_INT 1
23342: ARRAY
23343: PPUSH
23344: LD_VAR 0 2
23348: PPUSH
23349: CALL_OW 259
23353: ST_TO_ADDR
// if s1 = 1 then
23354: LD_VAR 0 2
23358: PUSH
23359: LD_INT 1
23361: EQUAL
23362: IFFALSE 23382
// s2 := rand ( 2 , 4 ) else
23364: LD_ADDR_VAR 0 3
23368: PUSH
23369: LD_INT 2
23371: PPUSH
23372: LD_INT 4
23374: PPUSH
23375: CALL_OW 12
23379: ST_TO_ADDR
23380: GO 23390
// s2 := 1 ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_INT 1
23389: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23390: LD_ADDR_VAR 0 5
23394: PUSH
23395: LD_VAR 0 6
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PPUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: CALL_OW 259
23413: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23414: LD_VAR 0 6
23418: PUSH
23419: LD_INT 1
23421: ARRAY
23422: PPUSH
23423: LD_VAR 0 2
23427: PPUSH
23428: LD_VAR 0 5
23432: PPUSH
23433: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23437: LD_VAR 0 6
23441: PUSH
23442: LD_INT 1
23444: ARRAY
23445: PPUSH
23446: LD_VAR 0 3
23450: PPUSH
23451: LD_VAR 0 4
23455: PPUSH
23456: CALL_OW 237
// end ;
23460: PPOPN 6
23462: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23463: LD_EXP 62
23467: PUSH
23468: LD_EXP 109
23472: AND
23473: IFFALSE 23552
23475: GO 23477
23477: DISABLE
23478: LD_INT 0
23480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23481: LD_ADDR_VAR 0 1
23485: PUSH
23486: LD_INT 22
23488: PUSH
23489: LD_OWVAR 2
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 30
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: ST_TO_ADDR
// if not tmp then
23517: LD_VAR 0 1
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 23552
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23526: LD_VAR 0 1
23530: PUSH
23531: LD_INT 1
23533: PPUSH
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 12
23543: ARRAY
23544: PPUSH
23545: LD_INT 1
23547: PPUSH
23548: CALL_OW 234
// end ;
23552: PPOPN 1
23554: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23555: LD_EXP 62
23559: PUSH
23560: LD_EXP 110
23564: AND
23565: IFFALSE 23677
23567: GO 23569
23569: DISABLE
23570: LD_INT 0
23572: PPUSH
23573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23574: LD_ADDR_VAR 0 2
23578: PUSH
23579: LD_INT 22
23581: PUSH
23582: LD_OWVAR 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: LD_INT 30
23596: PUSH
23597: LD_INT 27
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 30
23606: PUSH
23607: LD_INT 26
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 30
23616: PUSH
23617: LD_INT 28
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PPUSH
23634: CALL_OW 69
23638: ST_TO_ADDR
// if not tmp then
23639: LD_VAR 0 2
23643: NOT
23644: IFFALSE 23648
// exit ;
23646: GO 23677
// for i in tmp do
23648: LD_ADDR_VAR 0 1
23652: PUSH
23653: LD_VAR 0 2
23657: PUSH
23658: FOR_IN
23659: IFFALSE 23675
// SetLives ( i , 1 ) ;
23661: LD_VAR 0 1
23665: PPUSH
23666: LD_INT 1
23668: PPUSH
23669: CALL_OW 234
23673: GO 23658
23675: POP
23676: POP
// end ;
23677: PPOPN 2
23679: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23680: LD_EXP 62
23684: PUSH
23685: LD_EXP 111
23689: AND
23690: IFFALSE 23977
23692: GO 23694
23694: DISABLE
23695: LD_INT 0
23697: PPUSH
23698: PPUSH
23699: PPUSH
// begin i := rand ( 1 , 7 ) ;
23700: LD_ADDR_VAR 0 1
23704: PUSH
23705: LD_INT 1
23707: PPUSH
23708: LD_INT 7
23710: PPUSH
23711: CALL_OW 12
23715: ST_TO_ADDR
// case i of 1 :
23716: LD_VAR 0 1
23720: PUSH
23721: LD_INT 1
23723: DOUBLE
23724: EQUAL
23725: IFTRUE 23729
23727: GO 23739
23729: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23730: LD_STRING earthquake(getX(game), 0, 32)
23732: PPUSH
23733: CALL_OW 559
23737: GO 23977
23739: LD_INT 2
23741: DOUBLE
23742: EQUAL
23743: IFTRUE 23747
23745: GO 23761
23747: POP
// begin ToLua ( displayStucuk(); ) ;
23748: LD_STRING displayStucuk();
23750: PPUSH
23751: CALL_OW 559
// ResetFog ;
23755: CALL_OW 335
// end ; 3 :
23759: GO 23977
23761: LD_INT 3
23763: DOUBLE
23764: EQUAL
23765: IFTRUE 23769
23767: GO 23873
23769: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23770: LD_ADDR_VAR 0 2
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_OWVAR 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 25
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: ST_TO_ADDR
// if not tmp then
23806: LD_VAR 0 2
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23977
// un := tmp [ rand ( 1 , tmp ) ] ;
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: LD_VAR 0 2
23824: PUSH
23825: LD_INT 1
23827: PPUSH
23828: LD_VAR 0 2
23832: PPUSH
23833: CALL_OW 12
23837: ARRAY
23838: ST_TO_ADDR
// if Crawls ( un ) then
23839: LD_VAR 0 3
23843: PPUSH
23844: CALL_OW 318
23848: IFFALSE 23859
// ComWalk ( un ) ;
23850: LD_VAR 0 3
23854: PPUSH
23855: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23859: LD_VAR 0 3
23863: PPUSH
23864: LD_INT 8
23866: PPUSH
23867: CALL_OW 336
// end ; 4 :
23871: GO 23977
23873: LD_INT 4
23875: DOUBLE
23876: EQUAL
23877: IFTRUE 23881
23879: GO 23955
23881: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23882: LD_ADDR_VAR 0 2
23886: PUSH
23887: LD_INT 22
23889: PUSH
23890: LD_OWVAR 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 30
23901: PUSH
23902: LD_INT 29
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 69
23917: ST_TO_ADDR
// if not tmp then
23918: LD_VAR 0 2
23922: NOT
23923: IFFALSE 23927
// exit ;
23925: GO 23977
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23927: LD_VAR 0 2
23931: PUSH
23932: LD_INT 1
23934: ARRAY
23935: PPUSH
23936: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23940: LD_VAR 0 2
23944: PUSH
23945: LD_INT 1
23947: ARRAY
23948: PPUSH
23949: CALL_OW 65
// end ; 5 .. 7 :
23953: GO 23977
23955: LD_INT 5
23957: DOUBLE
23958: GREATEREQUAL
23959: IFFALSE 23967
23961: LD_INT 7
23963: DOUBLE
23964: LESSEQUAL
23965: IFTRUE 23969
23967: GO 23976
23969: POP
// StreamSibBomb ; end ;
23970: CALL 20214 0 0
23974: GO 23977
23976: POP
// end ;
23977: PPOPN 3
23979: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23980: LD_EXP 62
23984: PUSH
23985: LD_EXP 112
23989: AND
23990: IFFALSE 24146
23992: GO 23994
23994: DISABLE
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
23999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24000: LD_ADDR_VAR 0 2
24004: PUSH
24005: LD_INT 81
24007: PUSH
24008: LD_OWVAR 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: LD_INT 21
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 21
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PPUSH
24049: CALL_OW 69
24053: ST_TO_ADDR
// if not tmp then
24054: LD_VAR 0 2
24058: NOT
24059: IFFALSE 24063
// exit ;
24061: GO 24146
// p := 0 ;
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 0
24070: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24071: LD_INT 35
24073: PPUSH
24074: CALL_OW 67
// p := p + 1 ;
24078: LD_ADDR_VAR 0 3
24082: PUSH
24083: LD_VAR 0 3
24087: PUSH
24088: LD_INT 1
24090: PLUS
24091: ST_TO_ADDR
// for i in tmp do
24092: LD_ADDR_VAR 0 1
24096: PUSH
24097: LD_VAR 0 2
24101: PUSH
24102: FOR_IN
24103: IFFALSE 24134
// if GetLives ( i ) < 1000 then
24105: LD_VAR 0 1
24109: PPUSH
24110: CALL_OW 256
24114: PUSH
24115: LD_INT 1000
24117: LESS
24118: IFFALSE 24132
// SetLives ( i , 1000 ) ;
24120: LD_VAR 0 1
24124: PPUSH
24125: LD_INT 1000
24127: PPUSH
24128: CALL_OW 234
24132: GO 24102
24134: POP
24135: POP
// until p > 20 ;
24136: LD_VAR 0 3
24140: PUSH
24141: LD_INT 20
24143: GREATER
24144: IFFALSE 24071
// end ;
24146: PPOPN 3
24148: END
// every 0 0$1 trigger StreamModeActive and sTime do
24149: LD_EXP 62
24153: PUSH
24154: LD_EXP 113
24158: AND
24159: IFFALSE 24194
24161: GO 24163
24163: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24164: LD_INT 28
24166: PPUSH
24167: LD_OWVAR 2
24171: PPUSH
24172: LD_INT 2
24174: PPUSH
24175: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24179: LD_INT 30
24181: PPUSH
24182: LD_OWVAR 2
24186: PPUSH
24187: LD_INT 2
24189: PPUSH
24190: CALL_OW 322
// end ;
24194: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24195: LD_EXP 62
24199: PUSH
24200: LD_EXP 114
24204: AND
24205: IFFALSE 24326
24207: GO 24209
24209: DISABLE
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24214: LD_ADDR_VAR 0 2
24218: PUSH
24219: LD_INT 22
24221: PUSH
24222: LD_OWVAR 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: LD_INT 23
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: PPUSH
24263: CALL_OW 69
24267: ST_TO_ADDR
// if not tmp then
24268: LD_VAR 0 2
24272: NOT
24273: IFFALSE 24277
// exit ;
24275: GO 24326
// for i in tmp do
24277: LD_ADDR_VAR 0 1
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: FOR_IN
24288: IFFALSE 24324
// begin if Crawls ( i ) then
24290: LD_VAR 0 1
24294: PPUSH
24295: CALL_OW 318
24299: IFFALSE 24310
// ComWalk ( i ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 138
// SetClass ( i , 2 ) ;
24310: LD_VAR 0 1
24314: PPUSH
24315: LD_INT 2
24317: PPUSH
24318: CALL_OW 336
// end ;
24322: GO 24287
24324: POP
24325: POP
// end ;
24326: PPOPN 2
24328: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24329: LD_EXP 62
24333: PUSH
24334: LD_EXP 115
24338: AND
24339: IFFALSE 24627
24341: GO 24343
24343: DISABLE
24344: LD_INT 0
24346: PPUSH
24347: PPUSH
24348: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24349: LD_OWVAR 2
24353: PPUSH
24354: LD_INT 9
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: LD_INT 1
24362: PPUSH
24363: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24367: LD_INT 9
24369: PPUSH
24370: LD_OWVAR 2
24374: PPUSH
24375: CALL_OW 343
// uc_side := 9 ;
24379: LD_ADDR_OWVAR 20
24383: PUSH
24384: LD_INT 9
24386: ST_TO_ADDR
// uc_nation := 2 ;
24387: LD_ADDR_OWVAR 21
24391: PUSH
24392: LD_INT 2
24394: ST_TO_ADDR
// hc_name := Dark Warrior ;
24395: LD_ADDR_OWVAR 26
24399: PUSH
24400: LD_STRING Dark Warrior
24402: ST_TO_ADDR
// hc_gallery :=  ;
24403: LD_ADDR_OWVAR 33
24407: PUSH
24408: LD_STRING 
24410: ST_TO_ADDR
// hc_noskilllimit := true ;
24411: LD_ADDR_OWVAR 76
24415: PUSH
24416: LD_INT 1
24418: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24419: LD_ADDR_OWVAR 31
24423: PUSH
24424: LD_INT 30
24426: PUSH
24427: LD_INT 30
24429: PUSH
24430: LD_INT 30
24432: PUSH
24433: LD_INT 30
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: ST_TO_ADDR
// un := CreateHuman ;
24442: LD_ADDR_VAR 0 3
24446: PUSH
24447: CALL_OW 44
24451: ST_TO_ADDR
// hc_noskilllimit := false ;
24452: LD_ADDR_OWVAR 76
24456: PUSH
24457: LD_INT 0
24459: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24460: LD_VAR 0 3
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 51
// ToLua ( playRanger() ) ;
24472: LD_STRING playRanger()
24474: PPUSH
24475: CALL_OW 559
// p := 0 ;
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24487: LD_INT 35
24489: PPUSH
24490: CALL_OW 67
// p := p + 1 ;
24494: LD_ADDR_VAR 0 2
24498: PUSH
24499: LD_VAR 0 2
24503: PUSH
24504: LD_INT 1
24506: PLUS
24507: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24508: LD_VAR 0 3
24512: PPUSH
24513: CALL_OW 256
24517: PUSH
24518: LD_INT 1000
24520: LESS
24521: IFFALSE 24535
// SetLives ( un , 1000 ) ;
24523: LD_VAR 0 3
24527: PPUSH
24528: LD_INT 1000
24530: PPUSH
24531: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24535: LD_VAR 0 3
24539: PPUSH
24540: LD_INT 81
24542: PUSH
24543: LD_OWVAR 2
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 91
24554: PUSH
24555: LD_VAR 0 3
24559: PUSH
24560: LD_INT 30
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: CALL_OW 74
24586: PPUSH
24587: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24591: LD_VAR 0 2
24595: PUSH
24596: LD_INT 80
24598: GREATER
24599: PUSH
24600: LD_VAR 0 3
24604: PPUSH
24605: CALL_OW 301
24609: OR
24610: IFFALSE 24487
// if un then
24612: LD_VAR 0 3
24616: IFFALSE 24627
// RemoveUnit ( un ) ;
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL_OW 64
// end ;
24627: PPOPN 3
24629: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24630: LD_EXP 116
24634: IFFALSE 24750
24636: GO 24638
24638: DISABLE
24639: LD_INT 0
24641: PPUSH
24642: PPUSH
24643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24644: LD_ADDR_VAR 0 2
24648: PUSH
24649: LD_INT 81
24651: PUSH
24652: LD_OWVAR 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PPUSH
24675: CALL_OW 69
24679: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24680: LD_STRING playComputer()
24682: PPUSH
24683: CALL_OW 559
// if not tmp then
24687: LD_VAR 0 2
24691: NOT
24692: IFFALSE 24696
// exit ;
24694: GO 24750
// for i in tmp do
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24748
// for j := 1 to 4 do
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: DOUBLE
24715: LD_INT 1
24717: DEC
24718: ST_TO_ADDR
24719: LD_INT 4
24721: PUSH
24722: FOR_TO
24723: IFFALSE 24744
// SetSkill ( i , j , 10 ) ;
24725: LD_VAR 0 1
24729: PPUSH
24730: LD_VAR 0 3
24734: PPUSH
24735: LD_INT 10
24737: PPUSH
24738: CALL_OW 237
24742: GO 24722
24744: POP
24745: POP
24746: GO 24706
24748: POP
24749: POP
// end ;
24750: PPOPN 3
24752: END
// every 0 0$1 trigger s30 do var i , tmp ;
24753: LD_EXP 117
24757: IFFALSE 24826
24759: GO 24761
24761: DISABLE
24762: LD_INT 0
24764: PPUSH
24765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24766: LD_ADDR_VAR 0 2
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_OWVAR 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PPUSH
24783: CALL_OW 69
24787: ST_TO_ADDR
// if not tmp then
24788: LD_VAR 0 2
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 24826
// for i in tmp do
24797: LD_ADDR_VAR 0 1
24801: PUSH
24802: LD_VAR 0 2
24806: PUSH
24807: FOR_IN
24808: IFFALSE 24824
// SetLives ( i , 300 ) ;
24810: LD_VAR 0 1
24814: PPUSH
24815: LD_INT 300
24817: PPUSH
24818: CALL_OW 234
24822: GO 24807
24824: POP
24825: POP
// end ;
24826: PPOPN 2
24828: END
// every 0 0$1 trigger s60 do var i , tmp ;
24829: LD_EXP 118
24833: IFFALSE 24902
24835: GO 24837
24837: DISABLE
24838: LD_INT 0
24840: PPUSH
24841: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24842: LD_ADDR_VAR 0 2
24846: PUSH
24847: LD_INT 22
24849: PUSH
24850: LD_OWVAR 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PPUSH
24859: CALL_OW 69
24863: ST_TO_ADDR
// if not tmp then
24864: LD_VAR 0 2
24868: NOT
24869: IFFALSE 24873
// exit ;
24871: GO 24902
// for i in tmp do
24873: LD_ADDR_VAR 0 1
24877: PUSH
24878: LD_VAR 0 2
24882: PUSH
24883: FOR_IN
24884: IFFALSE 24900
// SetLives ( i , 600 ) ;
24886: LD_VAR 0 1
24890: PPUSH
24891: LD_INT 600
24893: PPUSH
24894: CALL_OW 234
24898: GO 24883
24900: POP
24901: POP
// end ;
24902: PPOPN 2
24904: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24905: LD_INT 0
24907: PPUSH
// case cmd of 301 :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 301
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24953
24921: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24922: LD_VAR 0 6
24926: PPUSH
24927: LD_VAR 0 7
24931: PPUSH
24932: LD_VAR 0 8
24936: PPUSH
24937: LD_VAR 0 4
24941: PPUSH
24942: LD_VAR 0 5
24946: PPUSH
24947: CALL 26154 0 5
24951: GO 25074
24953: LD_INT 302
24955: DOUBLE
24956: EQUAL
24957: IFTRUE 24961
24959: GO 24998
24961: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24962: LD_VAR 0 6
24966: PPUSH
24967: LD_VAR 0 7
24971: PPUSH
24972: LD_VAR 0 8
24976: PPUSH
24977: LD_VAR 0 9
24981: PPUSH
24982: LD_VAR 0 4
24986: PPUSH
24987: LD_VAR 0 5
24991: PPUSH
24992: CALL 26245 0 6
24996: GO 25074
24998: LD_INT 303
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25043
25006: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25007: LD_VAR 0 6
25011: PPUSH
25012: LD_VAR 0 7
25016: PPUSH
25017: LD_VAR 0 8
25021: PPUSH
25022: LD_VAR 0 9
25026: PPUSH
25027: LD_VAR 0 4
25031: PPUSH
25032: LD_VAR 0 5
25036: PPUSH
25037: CALL 25079 0 6
25041: GO 25074
25043: LD_INT 304
25045: DOUBLE
25046: EQUAL
25047: IFTRUE 25051
25049: GO 25073
25051: POP
// hHackTeleport ( unit , x , y ) ; end ;
25052: LD_VAR 0 2
25056: PPUSH
25057: LD_VAR 0 4
25061: PPUSH
25062: LD_VAR 0 5
25066: PPUSH
25067: CALL 26838 0 3
25071: GO 25074
25073: POP
// end ;
25074: LD_VAR 0 12
25078: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25079: LD_INT 0
25081: PPUSH
25082: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25083: LD_VAR 0 1
25087: PUSH
25088: LD_INT 1
25090: LESS
25091: PUSH
25092: LD_VAR 0 1
25096: PUSH
25097: LD_INT 3
25099: GREATER
25100: OR
25101: PUSH
25102: LD_VAR 0 5
25106: PPUSH
25107: LD_VAR 0 6
25111: PPUSH
25112: CALL_OW 428
25116: OR
25117: IFFALSE 25121
// exit ;
25119: GO 25841
// uc_side := your_side ;
25121: LD_ADDR_OWVAR 20
25125: PUSH
25126: LD_OWVAR 2
25130: ST_TO_ADDR
// uc_nation := nation ;
25131: LD_ADDR_OWVAR 21
25135: PUSH
25136: LD_VAR 0 1
25140: ST_TO_ADDR
// bc_level = 1 ;
25141: LD_ADDR_OWVAR 43
25145: PUSH
25146: LD_INT 1
25148: ST_TO_ADDR
// case btype of 1 :
25149: LD_VAR 0 2
25153: PUSH
25154: LD_INT 1
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25173
25162: POP
// bc_type := b_depot ; 2 :
25163: LD_ADDR_OWVAR 42
25167: PUSH
25168: LD_INT 0
25170: ST_TO_ADDR
25171: GO 25785
25173: LD_INT 2
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25192
25181: POP
// bc_type := b_warehouse ; 3 :
25182: LD_ADDR_OWVAR 42
25186: PUSH
25187: LD_INT 1
25189: ST_TO_ADDR
25190: GO 25785
25192: LD_INT 3
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25211
25200: POP
// bc_type := b_lab ; 4 .. 9 :
25201: LD_ADDR_OWVAR 42
25205: PUSH
25206: LD_INT 6
25208: ST_TO_ADDR
25209: GO 25785
25211: LD_INT 4
25213: DOUBLE
25214: GREATEREQUAL
25215: IFFALSE 25223
25217: LD_INT 9
25219: DOUBLE
25220: LESSEQUAL
25221: IFTRUE 25225
25223: GO 25277
25225: POP
// begin bc_type := b_lab_half ;
25226: LD_ADDR_OWVAR 42
25230: PUSH
25231: LD_INT 7
25233: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25234: LD_ADDR_OWVAR 44
25238: PUSH
25239: LD_INT 10
25241: PUSH
25242: LD_INT 11
25244: PUSH
25245: LD_INT 12
25247: PUSH
25248: LD_INT 15
25250: PUSH
25251: LD_INT 14
25253: PUSH
25254: LD_INT 13
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: PUSH
25265: LD_VAR 0 2
25269: PUSH
25270: LD_INT 3
25272: MINUS
25273: ARRAY
25274: ST_TO_ADDR
// end ; 10 .. 13 :
25275: GO 25785
25277: LD_INT 10
25279: DOUBLE
25280: GREATEREQUAL
25281: IFFALSE 25289
25283: LD_INT 13
25285: DOUBLE
25286: LESSEQUAL
25287: IFTRUE 25291
25289: GO 25368
25291: POP
// begin bc_type := b_lab_full ;
25292: LD_ADDR_OWVAR 42
25296: PUSH
25297: LD_INT 8
25299: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25300: LD_ADDR_OWVAR 44
25304: PUSH
25305: LD_INT 10
25307: PUSH
25308: LD_INT 12
25310: PUSH
25311: LD_INT 14
25313: PUSH
25314: LD_INT 13
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: PUSH
25323: LD_VAR 0 2
25327: PUSH
25328: LD_INT 9
25330: MINUS
25331: ARRAY
25332: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25333: LD_ADDR_OWVAR 45
25337: PUSH
25338: LD_INT 11
25340: PUSH
25341: LD_INT 15
25343: PUSH
25344: LD_INT 12
25346: PUSH
25347: LD_INT 15
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: LD_VAR 0 2
25360: PUSH
25361: LD_INT 9
25363: MINUS
25364: ARRAY
25365: ST_TO_ADDR
// end ; 14 :
25366: GO 25785
25368: LD_INT 14
25370: DOUBLE
25371: EQUAL
25372: IFTRUE 25376
25374: GO 25387
25376: POP
// bc_type := b_workshop ; 15 :
25377: LD_ADDR_OWVAR 42
25381: PUSH
25382: LD_INT 2
25384: ST_TO_ADDR
25385: GO 25785
25387: LD_INT 15
25389: DOUBLE
25390: EQUAL
25391: IFTRUE 25395
25393: GO 25406
25395: POP
// bc_type := b_factory ; 16 :
25396: LD_ADDR_OWVAR 42
25400: PUSH
25401: LD_INT 3
25403: ST_TO_ADDR
25404: GO 25785
25406: LD_INT 16
25408: DOUBLE
25409: EQUAL
25410: IFTRUE 25414
25412: GO 25425
25414: POP
// bc_type := b_ext_gun ; 17 :
25415: LD_ADDR_OWVAR 42
25419: PUSH
25420: LD_INT 17
25422: ST_TO_ADDR
25423: GO 25785
25425: LD_INT 17
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25461
25433: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25434: LD_ADDR_OWVAR 42
25438: PUSH
25439: LD_INT 19
25441: PUSH
25442: LD_INT 23
25444: PUSH
25445: LD_INT 19
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: PUSH
25453: LD_VAR 0 1
25457: ARRAY
25458: ST_TO_ADDR
25459: GO 25785
25461: LD_INT 18
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25480
25469: POP
// bc_type := b_ext_radar ; 19 :
25470: LD_ADDR_OWVAR 42
25474: PUSH
25475: LD_INT 20
25477: ST_TO_ADDR
25478: GO 25785
25480: LD_INT 19
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25499
25488: POP
// bc_type := b_ext_radio ; 20 :
25489: LD_ADDR_OWVAR 42
25493: PUSH
25494: LD_INT 22
25496: ST_TO_ADDR
25497: GO 25785
25499: LD_INT 20
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25518
25507: POP
// bc_type := b_ext_siberium ; 21 :
25508: LD_ADDR_OWVAR 42
25512: PUSH
25513: LD_INT 21
25515: ST_TO_ADDR
25516: GO 25785
25518: LD_INT 21
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25537
25526: POP
// bc_type := b_ext_computer ; 22 :
25527: LD_ADDR_OWVAR 42
25531: PUSH
25532: LD_INT 24
25534: ST_TO_ADDR
25535: GO 25785
25537: LD_INT 22
25539: DOUBLE
25540: EQUAL
25541: IFTRUE 25545
25543: GO 25556
25545: POP
// bc_type := b_ext_track ; 23 :
25546: LD_ADDR_OWVAR 42
25550: PUSH
25551: LD_INT 16
25553: ST_TO_ADDR
25554: GO 25785
25556: LD_INT 23
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25575
25564: POP
// bc_type := b_ext_laser ; 24 :
25565: LD_ADDR_OWVAR 42
25569: PUSH
25570: LD_INT 25
25572: ST_TO_ADDR
25573: GO 25785
25575: LD_INT 24
25577: DOUBLE
25578: EQUAL
25579: IFTRUE 25583
25581: GO 25594
25583: POP
// bc_type := b_control_tower ; 25 :
25584: LD_ADDR_OWVAR 42
25588: PUSH
25589: LD_INT 36
25591: ST_TO_ADDR
25592: GO 25785
25594: LD_INT 25
25596: DOUBLE
25597: EQUAL
25598: IFTRUE 25602
25600: GO 25613
25602: POP
// bc_type := b_breastwork ; 26 :
25603: LD_ADDR_OWVAR 42
25607: PUSH
25608: LD_INT 31
25610: ST_TO_ADDR
25611: GO 25785
25613: LD_INT 26
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25632
25621: POP
// bc_type := b_bunker ; 27 :
25622: LD_ADDR_OWVAR 42
25626: PUSH
25627: LD_INT 32
25629: ST_TO_ADDR
25630: GO 25785
25632: LD_INT 27
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25651
25640: POP
// bc_type := b_turret ; 28 :
25641: LD_ADDR_OWVAR 42
25645: PUSH
25646: LD_INT 33
25648: ST_TO_ADDR
25649: GO 25785
25651: LD_INT 28
25653: DOUBLE
25654: EQUAL
25655: IFTRUE 25659
25657: GO 25670
25659: POP
// bc_type := b_armoury ; 29 :
25660: LD_ADDR_OWVAR 42
25664: PUSH
25665: LD_INT 4
25667: ST_TO_ADDR
25668: GO 25785
25670: LD_INT 29
25672: DOUBLE
25673: EQUAL
25674: IFTRUE 25678
25676: GO 25689
25678: POP
// bc_type := b_barracks ; 30 :
25679: LD_ADDR_OWVAR 42
25683: PUSH
25684: LD_INT 5
25686: ST_TO_ADDR
25687: GO 25785
25689: LD_INT 30
25691: DOUBLE
25692: EQUAL
25693: IFTRUE 25697
25695: GO 25708
25697: POP
// bc_type := b_solar_power ; 31 :
25698: LD_ADDR_OWVAR 42
25702: PUSH
25703: LD_INT 27
25705: ST_TO_ADDR
25706: GO 25785
25708: LD_INT 31
25710: DOUBLE
25711: EQUAL
25712: IFTRUE 25716
25714: GO 25727
25716: POP
// bc_type := b_oil_power ; 32 :
25717: LD_ADDR_OWVAR 42
25721: PUSH
25722: LD_INT 26
25724: ST_TO_ADDR
25725: GO 25785
25727: LD_INT 32
25729: DOUBLE
25730: EQUAL
25731: IFTRUE 25735
25733: GO 25746
25735: POP
// bc_type := b_siberite_power ; 33 :
25736: LD_ADDR_OWVAR 42
25740: PUSH
25741: LD_INT 28
25743: ST_TO_ADDR
25744: GO 25785
25746: LD_INT 33
25748: DOUBLE
25749: EQUAL
25750: IFTRUE 25754
25752: GO 25765
25754: POP
// bc_type := b_oil_mine ; 34 :
25755: LD_ADDR_OWVAR 42
25759: PUSH
25760: LD_INT 29
25762: ST_TO_ADDR
25763: GO 25785
25765: LD_INT 34
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25784
25773: POP
// bc_type := b_siberite_mine ; end ;
25774: LD_ADDR_OWVAR 42
25778: PUSH
25779: LD_INT 30
25781: ST_TO_ADDR
25782: GO 25785
25784: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25785: LD_ADDR_VAR 0 8
25789: PUSH
25790: LD_VAR 0 5
25794: PPUSH
25795: LD_VAR 0 6
25799: PPUSH
25800: LD_VAR 0 3
25804: PPUSH
25805: CALL_OW 47
25809: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25810: LD_OWVAR 42
25814: PUSH
25815: LD_INT 32
25817: PUSH
25818: LD_INT 33
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: IN
25825: IFFALSE 25841
// PlaceWeaponTurret ( b , weapon ) ;
25827: LD_VAR 0 8
25831: PPUSH
25832: LD_VAR 0 4
25836: PPUSH
25837: CALL_OW 431
// end ;
25841: LD_VAR 0 7
25845: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25852: LD_ADDR_VAR 0 4
25856: PUSH
25857: LD_INT 22
25859: PUSH
25860: LD_OWVAR 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: LD_INT 30
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 30
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PPUSH
25901: CALL_OW 69
25905: ST_TO_ADDR
// if not tmp then
25906: LD_VAR 0 4
25910: NOT
25911: IFFALSE 25915
// exit ;
25913: GO 25974
// for i in tmp do
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_VAR 0 4
25924: PUSH
25925: FOR_IN
25926: IFFALSE 25972
// for j = 1 to 3 do
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: DOUBLE
25934: LD_INT 1
25936: DEC
25937: ST_TO_ADDR
25938: LD_INT 3
25940: PUSH
25941: FOR_TO
25942: IFFALSE 25968
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25944: LD_VAR 0 2
25948: PPUSH
25949: CALL_OW 274
25953: PPUSH
25954: LD_VAR 0 3
25958: PPUSH
25959: LD_INT 99999
25961: PPUSH
25962: CALL_OW 277
25966: GO 25941
25968: POP
25969: POP
25970: GO 25925
25972: POP
25973: POP
// end ;
25974: LD_VAR 0 1
25978: RET
// export function hHackSetLevel10 ; var i , j ; begin
25979: LD_INT 0
25981: PPUSH
25982: PPUSH
25983: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_INT 21
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PPUSH
25999: CALL_OW 69
26003: PUSH
26004: FOR_IN
26005: IFFALSE 26057
// if IsSelected ( i ) then
26007: LD_VAR 0 2
26011: PPUSH
26012: CALL_OW 306
26016: IFFALSE 26055
// begin for j := 1 to 4 do
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: DOUBLE
26024: LD_INT 1
26026: DEC
26027: ST_TO_ADDR
26028: LD_INT 4
26030: PUSH
26031: FOR_TO
26032: IFFALSE 26053
// SetSkill ( i , j , 10 ) ;
26034: LD_VAR 0 2
26038: PPUSH
26039: LD_VAR 0 3
26043: PPUSH
26044: LD_INT 10
26046: PPUSH
26047: CALL_OW 237
26051: GO 26031
26053: POP
26054: POP
// end ;
26055: GO 26004
26057: POP
26058: POP
// end ;
26059: LD_VAR 0 1
26063: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26064: LD_INT 0
26066: PPUSH
26067: PPUSH
26068: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26069: LD_ADDR_VAR 0 2
26073: PUSH
26074: LD_INT 22
26076: PUSH
26077: LD_OWVAR 2
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 21
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 69
26104: PUSH
26105: FOR_IN
26106: IFFALSE 26147
// begin for j := 1 to 4 do
26108: LD_ADDR_VAR 0 3
26112: PUSH
26113: DOUBLE
26114: LD_INT 1
26116: DEC
26117: ST_TO_ADDR
26118: LD_INT 4
26120: PUSH
26121: FOR_TO
26122: IFFALSE 26143
// SetSkill ( i , j , 10 ) ;
26124: LD_VAR 0 2
26128: PPUSH
26129: LD_VAR 0 3
26133: PPUSH
26134: LD_INT 10
26136: PPUSH
26137: CALL_OW 237
26141: GO 26121
26143: POP
26144: POP
// end ;
26145: GO 26105
26147: POP
26148: POP
// end ;
26149: LD_VAR 0 1
26153: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26154: LD_INT 0
26156: PPUSH
// uc_side := your_side ;
26157: LD_ADDR_OWVAR 20
26161: PUSH
26162: LD_OWVAR 2
26166: ST_TO_ADDR
// uc_nation := nation ;
26167: LD_ADDR_OWVAR 21
26171: PUSH
26172: LD_VAR 0 1
26176: ST_TO_ADDR
// InitHc ;
26177: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26181: LD_INT 0
26183: PPUSH
26184: LD_VAR 0 2
26188: PPUSH
26189: LD_VAR 0 3
26193: PPUSH
26194: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26198: LD_VAR 0 4
26202: PPUSH
26203: LD_VAR 0 5
26207: PPUSH
26208: CALL_OW 428
26212: PUSH
26213: LD_INT 0
26215: EQUAL
26216: IFFALSE 26240
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26218: CALL_OW 44
26222: PPUSH
26223: LD_VAR 0 4
26227: PPUSH
26228: LD_VAR 0 5
26232: PPUSH
26233: LD_INT 1
26235: PPUSH
26236: CALL_OW 48
// end ;
26240: LD_VAR 0 6
26244: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26245: LD_INT 0
26247: PPUSH
26248: PPUSH
// uc_side := your_side ;
26249: LD_ADDR_OWVAR 20
26253: PUSH
26254: LD_OWVAR 2
26258: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26259: LD_VAR 0 1
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: LD_INT 4
26275: PUSH
26276: LD_INT 5
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: IN
26286: IFFALSE 26298
// uc_nation := nation_american else
26288: LD_ADDR_OWVAR 21
26292: PUSH
26293: LD_INT 1
26295: ST_TO_ADDR
26296: GO 26341
// if chassis in [ 11 , 12 , 13 , 14 ] then
26298: LD_VAR 0 1
26302: PUSH
26303: LD_INT 11
26305: PUSH
26306: LD_INT 12
26308: PUSH
26309: LD_INT 13
26311: PUSH
26312: LD_INT 14
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: IN
26321: IFFALSE 26333
// uc_nation := nation_arabian else
26323: LD_ADDR_OWVAR 21
26327: PUSH
26328: LD_INT 2
26330: ST_TO_ADDR
26331: GO 26341
// uc_nation := nation_russian ;
26333: LD_ADDR_OWVAR 21
26337: PUSH
26338: LD_INT 3
26340: ST_TO_ADDR
// vc_chassis := chassis ;
26341: LD_ADDR_OWVAR 37
26345: PUSH
26346: LD_VAR 0 1
26350: ST_TO_ADDR
// vc_engine := engine ;
26351: LD_ADDR_OWVAR 39
26355: PUSH
26356: LD_VAR 0 2
26360: ST_TO_ADDR
// vc_control := control ;
26361: LD_ADDR_OWVAR 38
26365: PUSH
26366: LD_VAR 0 3
26370: ST_TO_ADDR
// vc_weapon := weapon ;
26371: LD_ADDR_OWVAR 40
26375: PUSH
26376: LD_VAR 0 4
26380: ST_TO_ADDR
// un := CreateVehicle ;
26381: LD_ADDR_VAR 0 8
26385: PUSH
26386: CALL_OW 45
26390: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26391: LD_VAR 0 8
26395: PPUSH
26396: LD_INT 0
26398: PPUSH
26399: LD_INT 5
26401: PPUSH
26402: CALL_OW 12
26406: PPUSH
26407: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26411: LD_VAR 0 8
26415: PPUSH
26416: LD_VAR 0 5
26420: PPUSH
26421: LD_VAR 0 6
26425: PPUSH
26426: LD_INT 1
26428: PPUSH
26429: CALL_OW 48
// end ;
26433: LD_VAR 0 7
26437: RET
// export hInvincible ; every 1 do
26438: GO 26440
26440: DISABLE
// hInvincible := [ ] ;
26441: LD_ADDR_EXP 119
26445: PUSH
26446: EMPTY
26447: ST_TO_ADDR
26448: END
// every 10 do var i ;
26449: GO 26451
26451: DISABLE
26452: LD_INT 0
26454: PPUSH
// begin enable ;
26455: ENABLE
// if not hInvincible then
26456: LD_EXP 119
26460: NOT
26461: IFFALSE 26465
// exit ;
26463: GO 26509
// for i in hInvincible do
26465: LD_ADDR_VAR 0 1
26469: PUSH
26470: LD_EXP 119
26474: PUSH
26475: FOR_IN
26476: IFFALSE 26507
// if GetLives ( i ) < 1000 then
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 256
26487: PUSH
26488: LD_INT 1000
26490: LESS
26491: IFFALSE 26505
// SetLives ( i , 1000 ) ;
26493: LD_VAR 0 1
26497: PPUSH
26498: LD_INT 1000
26500: PPUSH
26501: CALL_OW 234
26505: GO 26475
26507: POP
26508: POP
// end ;
26509: PPOPN 1
26511: END
// export function hHackInvincible ; var i ; begin
26512: LD_INT 0
26514: PPUSH
26515: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26516: LD_ADDR_VAR 0 2
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 21
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 21
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: PPUSH
26549: CALL_OW 69
26553: PUSH
26554: FOR_IN
26555: IFFALSE 26616
// if IsSelected ( i ) then
26557: LD_VAR 0 2
26561: PPUSH
26562: CALL_OW 306
26566: IFFALSE 26614
// begin if i in hInvincible then
26568: LD_VAR 0 2
26572: PUSH
26573: LD_EXP 119
26577: IN
26578: IFFALSE 26598
// hInvincible := hInvincible diff i else
26580: LD_ADDR_EXP 119
26584: PUSH
26585: LD_EXP 119
26589: PUSH
26590: LD_VAR 0 2
26594: DIFF
26595: ST_TO_ADDR
26596: GO 26614
// hInvincible := hInvincible union i ;
26598: LD_ADDR_EXP 119
26602: PUSH
26603: LD_EXP 119
26607: PUSH
26608: LD_VAR 0 2
26612: UNION
26613: ST_TO_ADDR
// end ;
26614: GO 26554
26616: POP
26617: POP
// end ;
26618: LD_VAR 0 1
26622: RET
// export function hHackInvisible ; var i , j ; begin
26623: LD_INT 0
26625: PPUSH
26626: PPUSH
26627: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26628: LD_ADDR_VAR 0 2
26632: PUSH
26633: LD_INT 21
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PPUSH
26643: CALL_OW 69
26647: PUSH
26648: FOR_IN
26649: IFFALSE 26673
// if IsSelected ( i ) then
26651: LD_VAR 0 2
26655: PPUSH
26656: CALL_OW 306
26660: IFFALSE 26671
// ComForceInvisible ( i ) ;
26662: LD_VAR 0 2
26666: PPUSH
26667: CALL_OW 496
26671: GO 26648
26673: POP
26674: POP
// end ;
26675: LD_VAR 0 1
26679: RET
// export function hHackChangeYourSide ; begin
26680: LD_INT 0
26682: PPUSH
// if your_side = 8 then
26683: LD_OWVAR 2
26687: PUSH
26688: LD_INT 8
26690: EQUAL
26691: IFFALSE 26703
// your_side := 0 else
26693: LD_ADDR_OWVAR 2
26697: PUSH
26698: LD_INT 0
26700: ST_TO_ADDR
26701: GO 26717
// your_side := your_side + 1 ;
26703: LD_ADDR_OWVAR 2
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: LD_INT 1
26715: PLUS
26716: ST_TO_ADDR
// end ;
26717: LD_VAR 0 1
26721: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
26726: PPUSH
// for i in all_units do
26727: LD_ADDR_VAR 0 2
26731: PUSH
26732: LD_OWVAR 3
26736: PUSH
26737: FOR_IN
26738: IFFALSE 26816
// if IsSelected ( i ) then
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 306
26749: IFFALSE 26814
// begin j := GetSide ( i ) ;
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_VAR 0 2
26760: PPUSH
26761: CALL_OW 255
26765: ST_TO_ADDR
// if j = 8 then
26766: LD_VAR 0 3
26770: PUSH
26771: LD_INT 8
26773: EQUAL
26774: IFFALSE 26786
// j := 0 else
26776: LD_ADDR_VAR 0 3
26780: PUSH
26781: LD_INT 0
26783: ST_TO_ADDR
26784: GO 26800
// j := j + 1 ;
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_VAR 0 3
26795: PUSH
26796: LD_INT 1
26798: PLUS
26799: ST_TO_ADDR
// SetSide ( i , j ) ;
26800: LD_VAR 0 2
26804: PPUSH
26805: LD_VAR 0 3
26809: PPUSH
26810: CALL_OW 235
// end ;
26814: GO 26737
26816: POP
26817: POP
// end ;
26818: LD_VAR 0 1
26822: RET
// export function hHackFog ; begin
26823: LD_INT 0
26825: PPUSH
// FogOff ( true ) ;
26826: LD_INT 1
26828: PPUSH
26829: CALL_OW 344
// end ;
26833: LD_VAR 0 1
26837: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26838: LD_INT 0
26840: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26841: LD_VAR 0 1
26845: PPUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: LD_INT 1
26858: PPUSH
26859: LD_INT 1
26861: PPUSH
26862: CALL_OW 483
// CenterOnXY ( x , y ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_VAR 0 3
26875: PPUSH
26876: CALL_OW 84
// end ; end_of_file
26880: LD_VAR 0 4
26884: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26885: LD_INT 0
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 264
26900: PUSH
26901: LD_EXP 47
26905: EQUAL
26906: IFFALSE 26978
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26908: LD_INT 68
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 255
26920: PPUSH
26921: CALL_OW 321
26925: PUSH
26926: LD_INT 2
26928: EQUAL
26929: IFFALSE 26941
// eff := 70 else
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_INT 70
26938: ST_TO_ADDR
26939: GO 26949
// eff := 30 ;
26941: LD_ADDR_VAR 0 4
26945: PUSH
26946: LD_INT 30
26948: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 250
26958: PPUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL_OW 251
26968: PPUSH
26969: LD_VAR 0 4
26973: PPUSH
26974: CALL_OW 495
// end ; end ;
26978: LD_VAR 0 2
26982: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26983: LD_INT 0
26985: PPUSH
// end ;
26986: LD_VAR 0 4
26990: RET
// export function SOS_Command ( cmd ) ; begin
26991: LD_INT 0
26993: PPUSH
// end ;
26994: LD_VAR 0 2
26998: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26999: LD_INT 0
27001: PPUSH
// end ;
27002: LD_VAR 0 6
27006: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27007: LD_INT 0
27009: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27010: LD_VAR 0 1
27014: PUSH
27015: LD_INT 250
27017: EQUAL
27018: PUSH
27019: LD_VAR 0 2
27023: PPUSH
27024: CALL_OW 264
27028: PUSH
27029: LD_EXP 50
27033: EQUAL
27034: AND
27035: IFFALSE 27056
// MinerPlaceMine ( unit , x , y ) ;
27037: LD_VAR 0 2
27041: PPUSH
27042: LD_VAR 0 4
27046: PPUSH
27047: LD_VAR 0 5
27051: PPUSH
27052: CALL 29405 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27056: LD_VAR 0 1
27060: PUSH
27061: LD_INT 251
27063: EQUAL
27064: PUSH
27065: LD_VAR 0 2
27069: PPUSH
27070: CALL_OW 264
27074: PUSH
27075: LD_EXP 50
27079: EQUAL
27080: AND
27081: IFFALSE 27102
// MinerDetonateMine ( unit , x , y ) ;
27083: LD_VAR 0 2
27087: PPUSH
27088: LD_VAR 0 4
27092: PPUSH
27093: LD_VAR 0 5
27097: PPUSH
27098: CALL 29682 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27102: LD_VAR 0 1
27106: PUSH
27107: LD_INT 252
27109: EQUAL
27110: PUSH
27111: LD_VAR 0 2
27115: PPUSH
27116: CALL_OW 264
27120: PUSH
27121: LD_EXP 50
27125: EQUAL
27126: AND
27127: IFFALSE 27148
// MinerCreateMinefield ( unit , x , y ) ;
27129: LD_VAR 0 2
27133: PPUSH
27134: LD_VAR 0 4
27138: PPUSH
27139: LD_VAR 0 5
27143: PPUSH
27144: CALL 30099 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27148: LD_VAR 0 1
27152: PUSH
27153: LD_INT 253
27155: EQUAL
27156: PUSH
27157: LD_VAR 0 2
27161: PPUSH
27162: CALL_OW 257
27166: PUSH
27167: LD_INT 5
27169: EQUAL
27170: AND
27171: IFFALSE 27192
// ComBinocular ( unit , x , y ) ;
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_VAR 0 4
27182: PPUSH
27183: LD_VAR 0 5
27187: PPUSH
27188: CALL 30470 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27192: LD_VAR 0 1
27196: PUSH
27197: LD_INT 254
27199: EQUAL
27200: PUSH
27201: LD_VAR 0 2
27205: PPUSH
27206: CALL_OW 264
27210: PUSH
27211: LD_EXP 45
27215: EQUAL
27216: AND
27217: PUSH
27218: LD_VAR 0 3
27222: PPUSH
27223: CALL_OW 263
27227: PUSH
27228: LD_INT 3
27230: EQUAL
27231: AND
27232: IFFALSE 27248
// HackDestroyVehicle ( unit , selectedUnit ) ;
27234: LD_VAR 0 2
27238: PPUSH
27239: LD_VAR 0 3
27243: PPUSH
27244: CALL 28765 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27248: LD_VAR 0 1
27252: PUSH
27253: LD_INT 255
27255: EQUAL
27256: PUSH
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL_OW 264
27266: PUSH
27267: LD_INT 14
27269: PUSH
27270: LD_INT 53
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: IN
27277: AND
27278: PUSH
27279: LD_VAR 0 4
27283: PPUSH
27284: LD_VAR 0 5
27288: PPUSH
27289: CALL_OW 488
27293: AND
27294: IFFALSE 27318
// CutTreeXYR ( unit , x , y , 12 ) ;
27296: LD_VAR 0 2
27300: PPUSH
27301: LD_VAR 0 4
27305: PPUSH
27306: LD_VAR 0 5
27310: PPUSH
27311: LD_INT 12
27313: PPUSH
27314: CALL 27331 0 4
// end ;
27318: LD_VAR 0 6
27322: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
27323: LD_INT 0
27325: PPUSH
// end ;
27326: LD_VAR 0 4
27330: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27331: LD_INT 0
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
27340: PPUSH
27341: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27342: LD_VAR 0 1
27346: NOT
27347: PUSH
27348: LD_VAR 0 2
27352: PPUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 488
27362: NOT
27363: OR
27364: PUSH
27365: LD_VAR 0 4
27369: NOT
27370: OR
27371: IFFALSE 27375
// exit ;
27373: GO 27715
// list := [ ] ;
27375: LD_ADDR_VAR 0 13
27379: PUSH
27380: EMPTY
27381: ST_TO_ADDR
// if x - r < 0 then
27382: LD_VAR 0 2
27386: PUSH
27387: LD_VAR 0 4
27391: MINUS
27392: PUSH
27393: LD_INT 0
27395: LESS
27396: IFFALSE 27408
// min_x := 0 else
27398: LD_ADDR_VAR 0 7
27402: PUSH
27403: LD_INT 0
27405: ST_TO_ADDR
27406: GO 27424
// min_x := x - r ;
27408: LD_ADDR_VAR 0 7
27412: PUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_VAR 0 4
27422: MINUS
27423: ST_TO_ADDR
// if y - r < 0 then
27424: LD_VAR 0 3
27428: PUSH
27429: LD_VAR 0 4
27433: MINUS
27434: PUSH
27435: LD_INT 0
27437: LESS
27438: IFFALSE 27450
// min_y := 0 else
27440: LD_ADDR_VAR 0 8
27444: PUSH
27445: LD_INT 0
27447: ST_TO_ADDR
27448: GO 27466
// min_y := y - r ;
27450: LD_ADDR_VAR 0 8
27454: PUSH
27455: LD_VAR 0 3
27459: PUSH
27460: LD_VAR 0 4
27464: MINUS
27465: ST_TO_ADDR
// max_x := x + r ;
27466: LD_ADDR_VAR 0 9
27470: PUSH
27471: LD_VAR 0 2
27475: PUSH
27476: LD_VAR 0 4
27480: PLUS
27481: ST_TO_ADDR
// max_y := y + r ;
27482: LD_ADDR_VAR 0 10
27486: PUSH
27487: LD_VAR 0 3
27491: PUSH
27492: LD_VAR 0 4
27496: PLUS
27497: ST_TO_ADDR
// for _x = min_x to max_x do
27498: LD_ADDR_VAR 0 11
27502: PUSH
27503: DOUBLE
27504: LD_VAR 0 7
27508: DEC
27509: ST_TO_ADDR
27510: LD_VAR 0 9
27514: PUSH
27515: FOR_TO
27516: IFFALSE 27633
// for _y = min_y to max_y do
27518: LD_ADDR_VAR 0 12
27522: PUSH
27523: DOUBLE
27524: LD_VAR 0 8
27528: DEC
27529: ST_TO_ADDR
27530: LD_VAR 0 10
27534: PUSH
27535: FOR_TO
27536: IFFALSE 27629
// begin if not ValidHex ( _x , _y ) then
27538: LD_VAR 0 11
27542: PPUSH
27543: LD_VAR 0 12
27547: PPUSH
27548: CALL_OW 488
27552: NOT
27553: IFFALSE 27557
// continue ;
27555: GO 27535
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27557: LD_VAR 0 11
27561: PPUSH
27562: LD_VAR 0 12
27566: PPUSH
27567: CALL_OW 351
27571: PUSH
27572: LD_VAR 0 11
27576: PPUSH
27577: LD_VAR 0 12
27581: PPUSH
27582: CALL_OW 554
27586: AND
27587: IFFALSE 27627
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27589: LD_ADDR_VAR 0 13
27593: PUSH
27594: LD_VAR 0 13
27598: PPUSH
27599: LD_VAR 0 13
27603: PUSH
27604: LD_INT 1
27606: PLUS
27607: PPUSH
27608: LD_VAR 0 11
27612: PUSH
27613: LD_VAR 0 12
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PPUSH
27622: CALL_OW 2
27626: ST_TO_ADDR
// end ;
27627: GO 27535
27629: POP
27630: POP
27631: GO 27515
27633: POP
27634: POP
// if not list then
27635: LD_VAR 0 13
27639: NOT
27640: IFFALSE 27644
// exit ;
27642: GO 27715
// for i in list do
27644: LD_ADDR_VAR 0 6
27648: PUSH
27649: LD_VAR 0 13
27653: PUSH
27654: FOR_IN
27655: IFFALSE 27713
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27657: LD_VAR 0 1
27661: PPUSH
27662: LD_STRING M
27664: PUSH
27665: LD_VAR 0 6
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PUSH
27674: LD_VAR 0 6
27678: PUSH
27679: LD_INT 2
27681: ARRAY
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: PUSH
27704: EMPTY
27705: LIST
27706: PPUSH
27707: CALL_OW 447
27711: GO 27654
27713: POP
27714: POP
// end ;
27715: LD_VAR 0 5
27719: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27720: LD_EXP 122
27724: NOT
27725: IFFALSE 27775
27727: GO 27729
27729: DISABLE
// begin initHack := true ;
27730: LD_ADDR_EXP 122
27734: PUSH
27735: LD_INT 1
27737: ST_TO_ADDR
// hackTanks := [ ] ;
27738: LD_ADDR_EXP 123
27742: PUSH
27743: EMPTY
27744: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27745: LD_ADDR_EXP 124
27749: PUSH
27750: EMPTY
27751: ST_TO_ADDR
// hackLimit := 3 ;
27752: LD_ADDR_EXP 125
27756: PUSH
27757: LD_INT 3
27759: ST_TO_ADDR
// hackDist := 12 ;
27760: LD_ADDR_EXP 126
27764: PUSH
27765: LD_INT 12
27767: ST_TO_ADDR
// hackCounter := [ ] ;
27768: LD_ADDR_EXP 127
27772: PUSH
27773: EMPTY
27774: ST_TO_ADDR
// end ;
27775: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27776: LD_EXP 122
27780: PUSH
27781: LD_INT 34
27783: PUSH
27784: LD_EXP 45
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PPUSH
27793: CALL_OW 69
27797: AND
27798: IFFALSE 28053
27800: GO 27802
27802: DISABLE
27803: LD_INT 0
27805: PPUSH
27806: PPUSH
// begin enable ;
27807: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27808: LD_ADDR_VAR 0 1
27812: PUSH
27813: LD_INT 34
27815: PUSH
27816: LD_EXP 45
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PPUSH
27825: CALL_OW 69
27829: PUSH
27830: FOR_IN
27831: IFFALSE 28051
// begin if not i in hackTanks then
27833: LD_VAR 0 1
27837: PUSH
27838: LD_EXP 123
27842: IN
27843: NOT
27844: IFFALSE 27927
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27846: LD_ADDR_EXP 123
27850: PUSH
27851: LD_EXP 123
27855: PPUSH
27856: LD_EXP 123
27860: PUSH
27861: LD_INT 1
27863: PLUS
27864: PPUSH
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL_OW 1
27874: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27875: LD_ADDR_EXP 124
27879: PUSH
27880: LD_EXP 124
27884: PPUSH
27885: LD_EXP 124
27889: PUSH
27890: LD_INT 1
27892: PLUS
27893: PPUSH
27894: EMPTY
27895: PPUSH
27896: CALL_OW 1
27900: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27901: LD_ADDR_EXP 127
27905: PUSH
27906: LD_EXP 127
27910: PPUSH
27911: LD_EXP 127
27915: PUSH
27916: LD_INT 1
27918: PLUS
27919: PPUSH
27920: EMPTY
27921: PPUSH
27922: CALL_OW 1
27926: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 302
27936: NOT
27937: IFFALSE 27950
// begin HackUnlinkAll ( i ) ;
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL 28056 0 1
// continue ;
27948: GO 27830
// end ; HackCheckCapturedStatus ( i ) ;
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL 28499 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27959: LD_ADDR_VAR 0 2
27963: PUSH
27964: LD_INT 81
27966: PUSH
27967: LD_VAR 0 1
27971: PPUSH
27972: CALL_OW 255
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 33
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 91
27993: PUSH
27994: LD_VAR 0 1
27998: PUSH
27999: LD_EXP 126
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 50
28011: PUSH
28012: EMPTY
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: ST_TO_ADDR
// if not tmp then
28026: LD_VAR 0 2
28030: NOT
28031: IFFALSE 28035
// continue ;
28033: GO 27830
// HackLink ( i , tmp ) ;
28035: LD_VAR 0 1
28039: PPUSH
28040: LD_VAR 0 2
28044: PPUSH
28045: CALL 28192 0 2
// end ;
28049: GO 27830
28051: POP
28052: POP
// end ;
28053: PPOPN 2
28055: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
28060: PPUSH
// if not hack in hackTanks then
28061: LD_VAR 0 1
28065: PUSH
28066: LD_EXP 123
28070: IN
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28187
// index := GetElementIndex ( hackTanks , hack ) ;
28076: LD_ADDR_VAR 0 4
28080: PUSH
28081: LD_EXP 123
28085: PPUSH
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL 35661 0 2
28095: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28096: LD_EXP 124
28100: PUSH
28101: LD_VAR 0 4
28105: ARRAY
28106: IFFALSE 28187
// begin for i in hackTanksCaptured [ index ] do
28108: LD_ADDR_VAR 0 3
28112: PUSH
28113: LD_EXP 124
28117: PUSH
28118: LD_VAR 0 4
28122: ARRAY
28123: PUSH
28124: FOR_IN
28125: IFFALSE 28151
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28127: LD_VAR 0 3
28131: PUSH
28132: LD_INT 1
28134: ARRAY
28135: PPUSH
28136: LD_VAR 0 3
28140: PUSH
28141: LD_INT 2
28143: ARRAY
28144: PPUSH
28145: CALL_OW 235
28149: GO 28124
28151: POP
28152: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28153: LD_ADDR_EXP 124
28157: PUSH
28158: LD_EXP 124
28162: PPUSH
28163: LD_VAR 0 4
28167: PPUSH
28168: EMPTY
28169: PPUSH
28170: CALL_OW 1
28174: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28175: LD_VAR 0 1
28179: PPUSH
28180: LD_INT 0
28182: PPUSH
28183: CALL_OW 505
// end ; end ;
28187: LD_VAR 0 2
28191: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28192: LD_INT 0
28194: PPUSH
28195: PPUSH
28196: PPUSH
// if not hack in hackTanks or not vehicles then
28197: LD_VAR 0 1
28201: PUSH
28202: LD_EXP 123
28206: IN
28207: NOT
28208: PUSH
28209: LD_VAR 0 2
28213: NOT
28214: OR
28215: IFFALSE 28219
// exit ;
28217: GO 28494
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28219: LD_ADDR_VAR 0 2
28223: PUSH
28224: LD_VAR 0 1
28228: PPUSH
28229: LD_VAR 0 2
28233: PPUSH
28234: LD_INT 1
28236: PPUSH
28237: LD_INT 1
28239: PPUSH
28240: CALL 36311 0 4
28244: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28245: LD_ADDR_VAR 0 5
28249: PUSH
28250: LD_EXP 123
28254: PPUSH
28255: LD_VAR 0 1
28259: PPUSH
28260: CALL 35661 0 2
28264: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28265: LD_EXP 124
28269: PUSH
28270: LD_VAR 0 5
28274: ARRAY
28275: PUSH
28276: LD_EXP 125
28280: LESS
28281: IFFALSE 28470
// begin for i := 1 to vehicles do
28283: LD_ADDR_VAR 0 4
28287: PUSH
28288: DOUBLE
28289: LD_INT 1
28291: DEC
28292: ST_TO_ADDR
28293: LD_VAR 0 2
28297: PUSH
28298: FOR_TO
28299: IFFALSE 28468
// begin if hackTanksCaptured [ index ] = hackLimit then
28301: LD_EXP 124
28305: PUSH
28306: LD_VAR 0 5
28310: ARRAY
28311: PUSH
28312: LD_EXP 125
28316: EQUAL
28317: IFFALSE 28321
// break ;
28319: GO 28468
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28321: LD_ADDR_EXP 127
28325: PUSH
28326: LD_EXP 127
28330: PPUSH
28331: LD_VAR 0 5
28335: PPUSH
28336: LD_EXP 127
28340: PUSH
28341: LD_VAR 0 5
28345: ARRAY
28346: PUSH
28347: LD_INT 1
28349: PLUS
28350: PPUSH
28351: CALL_OW 1
28355: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28356: LD_ADDR_EXP 124
28360: PUSH
28361: LD_EXP 124
28365: PPUSH
28366: LD_VAR 0 5
28370: PUSH
28371: LD_EXP 124
28375: PUSH
28376: LD_VAR 0 5
28380: ARRAY
28381: PUSH
28382: LD_INT 1
28384: PLUS
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PPUSH
28390: LD_VAR 0 2
28394: PUSH
28395: LD_VAR 0 4
28399: ARRAY
28400: PUSH
28401: LD_VAR 0 2
28405: PUSH
28406: LD_VAR 0 4
28410: ARRAY
28411: PPUSH
28412: CALL_OW 255
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PPUSH
28421: CALL 35876 0 3
28425: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28426: LD_VAR 0 2
28430: PUSH
28431: LD_VAR 0 4
28435: ARRAY
28436: PPUSH
28437: LD_VAR 0 1
28441: PPUSH
28442: CALL_OW 255
28446: PPUSH
28447: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28451: LD_VAR 0 2
28455: PUSH
28456: LD_VAR 0 4
28460: ARRAY
28461: PPUSH
28462: CALL_OW 141
// end ;
28466: GO 28298
28468: POP
28469: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_EXP 124
28479: PUSH
28480: LD_VAR 0 5
28484: ARRAY
28485: PUSH
28486: LD_INT 0
28488: PLUS
28489: PPUSH
28490: CALL_OW 505
// end ;
28494: LD_VAR 0 3
28498: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28499: LD_INT 0
28501: PPUSH
28502: PPUSH
28503: PPUSH
28504: PPUSH
// if not hack in hackTanks then
28505: LD_VAR 0 1
28509: PUSH
28510: LD_EXP 123
28514: IN
28515: NOT
28516: IFFALSE 28520
// exit ;
28518: GO 28760
// index := GetElementIndex ( hackTanks , hack ) ;
28520: LD_ADDR_VAR 0 4
28524: PUSH
28525: LD_EXP 123
28529: PPUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL 35661 0 2
28539: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: DOUBLE
28546: LD_EXP 124
28550: PUSH
28551: LD_VAR 0 4
28555: ARRAY
28556: INC
28557: ST_TO_ADDR
28558: LD_INT 1
28560: PUSH
28561: FOR_DOWNTO
28562: IFFALSE 28734
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28564: LD_ADDR_VAR 0 5
28568: PUSH
28569: LD_EXP 124
28573: PUSH
28574: LD_VAR 0 4
28578: ARRAY
28579: PUSH
28580: LD_VAR 0 3
28584: ARRAY
28585: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28586: LD_VAR 0 5
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: CALL_OW 302
28599: NOT
28600: PUSH
28601: LD_VAR 0 5
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: CALL_OW 255
28614: PUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 255
28624: NONEQUAL
28625: OR
28626: IFFALSE 28732
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28628: LD_VAR 0 5
28632: PUSH
28633: LD_INT 1
28635: ARRAY
28636: PPUSH
28637: CALL_OW 305
28641: PUSH
28642: LD_VAR 0 5
28646: PUSH
28647: LD_INT 1
28649: ARRAY
28650: PPUSH
28651: CALL_OW 255
28655: PUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 255
28665: EQUAL
28666: AND
28667: IFFALSE 28691
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28669: LD_VAR 0 5
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: LD_VAR 0 5
28682: PUSH
28683: LD_INT 2
28685: ARRAY
28686: PPUSH
28687: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28691: LD_ADDR_EXP 124
28695: PUSH
28696: LD_EXP 124
28700: PPUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_EXP 124
28710: PUSH
28711: LD_VAR 0 4
28715: ARRAY
28716: PPUSH
28717: LD_VAR 0 3
28721: PPUSH
28722: CALL_OW 3
28726: PPUSH
28727: CALL_OW 1
28731: ST_TO_ADDR
// end ; end ;
28732: GO 28561
28734: POP
28735: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_EXP 124
28745: PUSH
28746: LD_VAR 0 4
28750: ARRAY
28751: PUSH
28752: LD_INT 0
28754: PLUS
28755: PPUSH
28756: CALL_OW 505
// end ;
28760: LD_VAR 0 2
28764: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28765: LD_INT 0
28767: PPUSH
28768: PPUSH
28769: PPUSH
28770: PPUSH
// if not hack in hackTanks then
28771: LD_VAR 0 1
28775: PUSH
28776: LD_EXP 123
28780: IN
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 28871
// index := GetElementIndex ( hackTanks , hack ) ;
28786: LD_ADDR_VAR 0 5
28790: PUSH
28791: LD_EXP 123
28795: PPUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL 35661 0 2
28805: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28806: LD_ADDR_VAR 0 4
28810: PUSH
28811: DOUBLE
28812: LD_INT 1
28814: DEC
28815: ST_TO_ADDR
28816: LD_EXP 124
28820: PUSH
28821: LD_VAR 0 5
28825: ARRAY
28826: PUSH
28827: FOR_TO
28828: IFFALSE 28869
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28830: LD_EXP 124
28834: PUSH
28835: LD_VAR 0 5
28839: ARRAY
28840: PUSH
28841: LD_VAR 0 4
28845: ARRAY
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: PUSH
28851: LD_VAR 0 2
28855: EQUAL
28856: IFFALSE 28867
// KillUnit ( vehicle ) ;
28858: LD_VAR 0 2
28862: PPUSH
28863: CALL_OW 66
28867: GO 28827
28869: POP
28870: POP
// end ;
28871: LD_VAR 0 3
28875: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28876: LD_EXP 128
28880: NOT
28881: IFFALSE 28916
28883: GO 28885
28885: DISABLE
// begin initMiner := true ;
28886: LD_ADDR_EXP 128
28890: PUSH
28891: LD_INT 1
28893: ST_TO_ADDR
// minersList := [ ] ;
28894: LD_ADDR_EXP 129
28898: PUSH
28899: EMPTY
28900: ST_TO_ADDR
// minerMinesList := [ ] ;
28901: LD_ADDR_EXP 130
28905: PUSH
28906: EMPTY
28907: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28908: LD_ADDR_EXP 131
28912: PUSH
28913: LD_INT 5
28915: ST_TO_ADDR
// end ;
28916: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28917: LD_EXP 128
28921: PUSH
28922: LD_INT 34
28924: PUSH
28925: LD_EXP 50
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PPUSH
28934: CALL_OW 69
28938: AND
28939: IFFALSE 29402
28941: GO 28943
28943: DISABLE
28944: LD_INT 0
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
// begin enable ;
28950: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28951: LD_ADDR_VAR 0 1
28955: PUSH
28956: LD_INT 34
28958: PUSH
28959: LD_EXP 50
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PPUSH
28968: CALL_OW 69
28972: PUSH
28973: FOR_IN
28974: IFFALSE 29046
// begin if not i in minersList then
28976: LD_VAR 0 1
28980: PUSH
28981: LD_EXP 129
28985: IN
28986: NOT
28987: IFFALSE 29044
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28989: LD_ADDR_EXP 129
28993: PUSH
28994: LD_EXP 129
28998: PPUSH
28999: LD_EXP 129
29003: PUSH
29004: LD_INT 1
29006: PLUS
29007: PPUSH
29008: LD_VAR 0 1
29012: PPUSH
29013: CALL_OW 1
29017: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29018: LD_ADDR_EXP 130
29022: PUSH
29023: LD_EXP 130
29027: PPUSH
29028: LD_EXP 130
29032: PUSH
29033: LD_INT 1
29035: PLUS
29036: PPUSH
29037: EMPTY
29038: PPUSH
29039: CALL_OW 1
29043: ST_TO_ADDR
// end end ;
29044: GO 28973
29046: POP
29047: POP
// for i := minerMinesList downto 1 do
29048: LD_ADDR_VAR 0 1
29052: PUSH
29053: DOUBLE
29054: LD_EXP 130
29058: INC
29059: ST_TO_ADDR
29060: LD_INT 1
29062: PUSH
29063: FOR_DOWNTO
29064: IFFALSE 29400
// begin if IsLive ( minersList [ i ] ) then
29066: LD_EXP 129
29070: PUSH
29071: LD_VAR 0 1
29075: ARRAY
29076: PPUSH
29077: CALL_OW 300
29081: IFFALSE 29109
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29083: LD_EXP 129
29087: PUSH
29088: LD_VAR 0 1
29092: ARRAY
29093: PPUSH
29094: LD_EXP 130
29098: PUSH
29099: LD_VAR 0 1
29103: ARRAY
29104: PPUSH
29105: CALL_OW 505
// if not minerMinesList [ i ] then
29109: LD_EXP 130
29113: PUSH
29114: LD_VAR 0 1
29118: ARRAY
29119: NOT
29120: IFFALSE 29124
// continue ;
29122: GO 29063
// for j := minerMinesList [ i ] downto 1 do
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: DOUBLE
29130: LD_EXP 130
29134: PUSH
29135: LD_VAR 0 1
29139: ARRAY
29140: INC
29141: ST_TO_ADDR
29142: LD_INT 1
29144: PUSH
29145: FOR_DOWNTO
29146: IFFALSE 29396
// begin side := GetSide ( minersList [ i ] ) ;
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_EXP 129
29157: PUSH
29158: LD_VAR 0 1
29162: ARRAY
29163: PPUSH
29164: CALL_OW 255
29168: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29169: LD_ADDR_VAR 0 4
29173: PUSH
29174: LD_EXP 130
29178: PUSH
29179: LD_VAR 0 1
29183: ARRAY
29184: PUSH
29185: LD_VAR 0 2
29189: ARRAY
29190: PUSH
29191: LD_INT 1
29193: ARRAY
29194: PPUSH
29195: LD_EXP 130
29199: PUSH
29200: LD_VAR 0 1
29204: ARRAY
29205: PUSH
29206: LD_VAR 0 2
29210: ARRAY
29211: PUSH
29212: LD_INT 2
29214: ARRAY
29215: PPUSH
29216: CALL_OW 428
29220: ST_TO_ADDR
// if not tmp then
29221: LD_VAR 0 4
29225: NOT
29226: IFFALSE 29230
// continue ;
29228: GO 29145
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29230: LD_VAR 0 4
29234: PUSH
29235: LD_INT 81
29237: PUSH
29238: LD_VAR 0 3
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: IN
29252: PUSH
29253: LD_EXP 130
29257: PUSH
29258: LD_VAR 0 1
29262: ARRAY
29263: PUSH
29264: LD_VAR 0 2
29268: ARRAY
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: LD_EXP 130
29278: PUSH
29279: LD_VAR 0 1
29283: ARRAY
29284: PUSH
29285: LD_VAR 0 2
29289: ARRAY
29290: PUSH
29291: LD_INT 2
29293: ARRAY
29294: PPUSH
29295: CALL_OW 458
29299: AND
29300: IFFALSE 29394
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29302: LD_EXP 130
29306: PUSH
29307: LD_VAR 0 1
29311: ARRAY
29312: PUSH
29313: LD_VAR 0 2
29317: ARRAY
29318: PUSH
29319: LD_INT 1
29321: ARRAY
29322: PPUSH
29323: LD_EXP 130
29327: PUSH
29328: LD_VAR 0 1
29332: ARRAY
29333: PUSH
29334: LD_VAR 0 2
29338: ARRAY
29339: PUSH
29340: LD_INT 2
29342: ARRAY
29343: PPUSH
29344: LD_VAR 0 3
29348: PPUSH
29349: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29353: LD_ADDR_EXP 130
29357: PUSH
29358: LD_EXP 130
29362: PPUSH
29363: LD_VAR 0 1
29367: PPUSH
29368: LD_EXP 130
29372: PUSH
29373: LD_VAR 0 1
29377: ARRAY
29378: PPUSH
29379: LD_VAR 0 2
29383: PPUSH
29384: CALL_OW 3
29388: PPUSH
29389: CALL_OW 1
29393: ST_TO_ADDR
// end ; end ;
29394: GO 29145
29396: POP
29397: POP
// end ;
29398: GO 29063
29400: POP
29401: POP
// end ;
29402: PPOPN 4
29404: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
// result := false ;
29409: LD_ADDR_VAR 0 4
29413: PUSH
29414: LD_INT 0
29416: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29417: LD_VAR 0 1
29421: PPUSH
29422: CALL_OW 264
29426: PUSH
29427: LD_EXP 50
29431: EQUAL
29432: NOT
29433: IFFALSE 29437
// exit ;
29435: GO 29677
// index := GetElementIndex ( minersList , unit ) ;
29437: LD_ADDR_VAR 0 5
29441: PUSH
29442: LD_EXP 129
29446: PPUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL 35661 0 2
29456: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29457: LD_EXP 130
29461: PUSH
29462: LD_VAR 0 5
29466: ARRAY
29467: PUSH
29468: LD_EXP 131
29472: GREATEREQUAL
29473: IFFALSE 29477
// exit ;
29475: GO 29677
// ComMoveXY ( unit , x , y ) ;
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_VAR 0 3
29491: PPUSH
29492: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29496: LD_INT 35
29498: PPUSH
29499: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29503: LD_VAR 0 1
29507: PPUSH
29508: LD_VAR 0 2
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: CALL 66433 0 3
29522: NOT
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 314
29533: AND
29534: IFFALSE 29538
// exit ;
29536: GO 29677
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29538: LD_VAR 0 2
29542: PPUSH
29543: LD_VAR 0 3
29547: PPUSH
29548: CALL_OW 428
29552: PUSH
29553: LD_VAR 0 1
29557: EQUAL
29558: PUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 314
29568: NOT
29569: AND
29570: IFFALSE 29496
// PlaySoundXY ( x , y , PlantMine ) ;
29572: LD_VAR 0 2
29576: PPUSH
29577: LD_VAR 0 3
29581: PPUSH
29582: LD_STRING PlantMine
29584: PPUSH
29585: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29589: LD_VAR 0 2
29593: PPUSH
29594: LD_VAR 0 3
29598: PPUSH
29599: LD_VAR 0 1
29603: PPUSH
29604: CALL_OW 255
29608: PPUSH
29609: LD_INT 0
29611: PPUSH
29612: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29616: LD_ADDR_EXP 130
29620: PUSH
29621: LD_EXP 130
29625: PPUSH
29626: LD_VAR 0 5
29630: PUSH
29631: LD_EXP 130
29635: PUSH
29636: LD_VAR 0 5
29640: ARRAY
29641: PUSH
29642: LD_INT 1
29644: PLUS
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PPUSH
29650: LD_VAR 0 2
29654: PUSH
29655: LD_VAR 0 3
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PPUSH
29664: CALL 35876 0 3
29668: ST_TO_ADDR
// result := true ;
29669: LD_ADDR_VAR 0 4
29673: PUSH
29674: LD_INT 1
29676: ST_TO_ADDR
// end ;
29677: LD_VAR 0 4
29681: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29682: LD_INT 0
29684: PPUSH
29685: PPUSH
29686: PPUSH
// if not unit in minersList then
29687: LD_VAR 0 1
29691: PUSH
29692: LD_EXP 129
29696: IN
29697: NOT
29698: IFFALSE 29702
// exit ;
29700: GO 30094
// index := GetElementIndex ( minersList , unit ) ;
29702: LD_ADDR_VAR 0 6
29706: PUSH
29707: LD_EXP 129
29711: PPUSH
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL 35661 0 2
29721: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29722: LD_ADDR_VAR 0 5
29726: PUSH
29727: DOUBLE
29728: LD_EXP 130
29732: PUSH
29733: LD_VAR 0 6
29737: ARRAY
29738: INC
29739: ST_TO_ADDR
29740: LD_INT 1
29742: PUSH
29743: FOR_DOWNTO
29744: IFFALSE 29905
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29746: LD_EXP 130
29750: PUSH
29751: LD_VAR 0 6
29755: ARRAY
29756: PUSH
29757: LD_VAR 0 5
29761: ARRAY
29762: PUSH
29763: LD_INT 1
29765: ARRAY
29766: PUSH
29767: LD_VAR 0 2
29771: EQUAL
29772: PUSH
29773: LD_EXP 130
29777: PUSH
29778: LD_VAR 0 6
29782: ARRAY
29783: PUSH
29784: LD_VAR 0 5
29788: ARRAY
29789: PUSH
29790: LD_INT 2
29792: ARRAY
29793: PUSH
29794: LD_VAR 0 3
29798: EQUAL
29799: AND
29800: IFFALSE 29903
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29802: LD_EXP 130
29806: PUSH
29807: LD_VAR 0 6
29811: ARRAY
29812: PUSH
29813: LD_VAR 0 5
29817: ARRAY
29818: PUSH
29819: LD_INT 1
29821: ARRAY
29822: PPUSH
29823: LD_EXP 130
29827: PUSH
29828: LD_VAR 0 6
29832: ARRAY
29833: PUSH
29834: LD_VAR 0 5
29838: ARRAY
29839: PUSH
29840: LD_INT 2
29842: ARRAY
29843: PPUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 255
29853: PPUSH
29854: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29858: LD_ADDR_EXP 130
29862: PUSH
29863: LD_EXP 130
29867: PPUSH
29868: LD_VAR 0 6
29872: PPUSH
29873: LD_EXP 130
29877: PUSH
29878: LD_VAR 0 6
29882: ARRAY
29883: PPUSH
29884: LD_VAR 0 5
29888: PPUSH
29889: CALL_OW 3
29893: PPUSH
29894: CALL_OW 1
29898: ST_TO_ADDR
// exit ;
29899: POP
29900: POP
29901: GO 30094
// end ; end ;
29903: GO 29743
29905: POP
29906: POP
// for i := minerMinesList [ index ] downto 1 do
29907: LD_ADDR_VAR 0 5
29911: PUSH
29912: DOUBLE
29913: LD_EXP 130
29917: PUSH
29918: LD_VAR 0 6
29922: ARRAY
29923: INC
29924: ST_TO_ADDR
29925: LD_INT 1
29927: PUSH
29928: FOR_DOWNTO
29929: IFFALSE 30092
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29931: LD_EXP 130
29935: PUSH
29936: LD_VAR 0 6
29940: ARRAY
29941: PUSH
29942: LD_VAR 0 5
29946: ARRAY
29947: PUSH
29948: LD_INT 1
29950: ARRAY
29951: PPUSH
29952: LD_EXP 130
29956: PUSH
29957: LD_VAR 0 6
29961: ARRAY
29962: PUSH
29963: LD_VAR 0 5
29967: ARRAY
29968: PUSH
29969: LD_INT 2
29971: ARRAY
29972: PPUSH
29973: LD_VAR 0 2
29977: PPUSH
29978: LD_VAR 0 3
29982: PPUSH
29983: CALL_OW 298
29987: PUSH
29988: LD_INT 6
29990: LESS
29991: IFFALSE 30090
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29993: LD_EXP 130
29997: PUSH
29998: LD_VAR 0 6
30002: ARRAY
30003: PUSH
30004: LD_VAR 0 5
30008: ARRAY
30009: PUSH
30010: LD_INT 1
30012: ARRAY
30013: PPUSH
30014: LD_EXP 130
30018: PUSH
30019: LD_VAR 0 6
30023: ARRAY
30024: PUSH
30025: LD_VAR 0 5
30029: ARRAY
30030: PUSH
30031: LD_INT 2
30033: ARRAY
30034: PPUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 255
30044: PPUSH
30045: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30049: LD_ADDR_EXP 130
30053: PUSH
30054: LD_EXP 130
30058: PPUSH
30059: LD_VAR 0 6
30063: PPUSH
30064: LD_EXP 130
30068: PUSH
30069: LD_VAR 0 6
30073: ARRAY
30074: PPUSH
30075: LD_VAR 0 5
30079: PPUSH
30080: CALL_OW 3
30084: PPUSH
30085: CALL_OW 1
30089: ST_TO_ADDR
// end ; end ;
30090: GO 29928
30092: POP
30093: POP
// end ;
30094: LD_VAR 0 4
30098: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
30105: PPUSH
30106: PPUSH
30107: PPUSH
30108: PPUSH
30109: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 264
30119: PUSH
30120: LD_EXP 50
30124: EQUAL
30125: NOT
30126: PUSH
30127: LD_VAR 0 1
30131: PUSH
30132: LD_EXP 129
30136: IN
30137: NOT
30138: OR
30139: IFFALSE 30143
// exit ;
30141: GO 30465
// index := GetElementIndex ( minersList , unit ) ;
30143: LD_ADDR_VAR 0 6
30147: PUSH
30148: LD_EXP 129
30152: PPUSH
30153: LD_VAR 0 1
30157: PPUSH
30158: CALL 35661 0 2
30162: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30163: LD_ADDR_VAR 0 8
30167: PUSH
30168: LD_EXP 131
30172: PUSH
30173: LD_EXP 130
30177: PUSH
30178: LD_VAR 0 6
30182: ARRAY
30183: MINUS
30184: ST_TO_ADDR
// if not minesFreeAmount then
30185: LD_VAR 0 8
30189: NOT
30190: IFFALSE 30194
// exit ;
30192: GO 30465
// tmp := [ ] ;
30194: LD_ADDR_VAR 0 7
30198: PUSH
30199: EMPTY
30200: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30201: LD_ADDR_VAR 0 5
30205: PUSH
30206: DOUBLE
30207: LD_INT 1
30209: DEC
30210: ST_TO_ADDR
30211: LD_VAR 0 8
30215: PUSH
30216: FOR_TO
30217: IFFALSE 30412
// begin _d := rand ( 0 , 5 ) ;
30219: LD_ADDR_VAR 0 11
30223: PUSH
30224: LD_INT 0
30226: PPUSH
30227: LD_INT 5
30229: PPUSH
30230: CALL_OW 12
30234: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30235: LD_ADDR_VAR 0 12
30239: PUSH
30240: LD_INT 2
30242: PPUSH
30243: LD_INT 6
30245: PPUSH
30246: CALL_OW 12
30250: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30251: LD_ADDR_VAR 0 9
30255: PUSH
30256: LD_VAR 0 2
30260: PPUSH
30261: LD_VAR 0 11
30265: PPUSH
30266: LD_VAR 0 12
30270: PPUSH
30271: CALL_OW 272
30275: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30276: LD_ADDR_VAR 0 10
30280: PUSH
30281: LD_VAR 0 3
30285: PPUSH
30286: LD_VAR 0 11
30290: PPUSH
30291: LD_VAR 0 12
30295: PPUSH
30296: CALL_OW 273
30300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30301: LD_VAR 0 9
30305: PPUSH
30306: LD_VAR 0 10
30310: PPUSH
30311: CALL_OW 488
30315: PUSH
30316: LD_VAR 0 9
30320: PUSH
30321: LD_VAR 0 10
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_VAR 0 7
30334: IN
30335: NOT
30336: AND
30337: PUSH
30338: LD_VAR 0 9
30342: PPUSH
30343: LD_VAR 0 10
30347: PPUSH
30348: CALL_OW 458
30352: NOT
30353: AND
30354: IFFALSE 30396
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30356: LD_ADDR_VAR 0 7
30360: PUSH
30361: LD_VAR 0 7
30365: PPUSH
30366: LD_VAR 0 7
30370: PUSH
30371: LD_INT 1
30373: PLUS
30374: PPUSH
30375: LD_VAR 0 9
30379: PUSH
30380: LD_VAR 0 10
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PPUSH
30389: CALL_OW 1
30393: ST_TO_ADDR
30394: GO 30410
// i := i - 1 ;
30396: LD_ADDR_VAR 0 5
30400: PUSH
30401: LD_VAR 0 5
30405: PUSH
30406: LD_INT 1
30408: MINUS
30409: ST_TO_ADDR
// end ;
30410: GO 30216
30412: POP
30413: POP
// for i in tmp do
30414: LD_ADDR_VAR 0 5
30418: PUSH
30419: LD_VAR 0 7
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30463
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30427: LD_VAR 0 1
30431: PPUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_INT 1
30439: ARRAY
30440: PPUSH
30441: LD_VAR 0 5
30445: PUSH
30446: LD_INT 2
30448: ARRAY
30449: PPUSH
30450: CALL 29405 0 3
30454: NOT
30455: IFFALSE 30461
// exit ;
30457: POP
30458: POP
30459: GO 30465
30461: GO 30424
30463: POP
30464: POP
// end ;
30465: LD_VAR 0 4
30469: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30470: LD_INT 0
30472: PPUSH
30473: PPUSH
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
// if not GetClass ( unit ) = class_sniper then
30479: LD_VAR 0 1
30483: PPUSH
30484: CALL_OW 257
30488: PUSH
30489: LD_INT 5
30491: EQUAL
30492: NOT
30493: IFFALSE 30497
// exit ;
30495: GO 30885
// dist := 8 ;
30497: LD_ADDR_VAR 0 5
30501: PUSH
30502: LD_INT 8
30504: ST_TO_ADDR
// viewRange := 12 ;
30505: LD_ADDR_VAR 0 7
30509: PUSH
30510: LD_INT 12
30512: ST_TO_ADDR
// side := GetSide ( unit ) ;
30513: LD_ADDR_VAR 0 6
30517: PUSH
30518: LD_VAR 0 1
30522: PPUSH
30523: CALL_OW 255
30527: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30528: LD_INT 61
30530: PPUSH
30531: LD_VAR 0 6
30535: PPUSH
30536: CALL_OW 321
30540: PUSH
30541: LD_INT 2
30543: EQUAL
30544: IFFALSE 30554
// viewRange := 16 ;
30546: LD_ADDR_VAR 0 7
30550: PUSH
30551: LD_INT 16
30553: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30554: LD_VAR 0 1
30558: PPUSH
30559: LD_VAR 0 2
30563: PPUSH
30564: LD_VAR 0 3
30568: PPUSH
30569: CALL_OW 297
30573: PUSH
30574: LD_VAR 0 5
30578: GREATER
30579: IFFALSE 30658
// begin ComMoveXY ( unit , x , y ) ;
30581: LD_VAR 0 1
30585: PPUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: LD_VAR 0 3
30595: PPUSH
30596: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30600: LD_INT 35
30602: PPUSH
30603: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30607: LD_VAR 0 1
30611: PPUSH
30612: LD_VAR 0 2
30616: PPUSH
30617: LD_VAR 0 3
30621: PPUSH
30622: CALL 66433 0 3
30626: NOT
30627: IFFALSE 30631
// exit ;
30629: GO 30885
// until GetDistUnitXY ( unit , x , y ) < dist ;
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_VAR 0 2
30640: PPUSH
30641: LD_VAR 0 3
30645: PPUSH
30646: CALL_OW 297
30650: PUSH
30651: LD_VAR 0 5
30655: LESS
30656: IFFALSE 30600
// end ; ComTurnXY ( unit , x , y ) ;
30658: LD_VAR 0 1
30662: PPUSH
30663: LD_VAR 0 2
30667: PPUSH
30668: LD_VAR 0 3
30672: PPUSH
30673: CALL_OW 118
// wait ( 5 ) ;
30677: LD_INT 5
30679: PPUSH
30680: CALL_OW 67
// _d := GetDir ( unit ) ;
30684: LD_ADDR_VAR 0 10
30688: PUSH
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL_OW 254
30698: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30699: LD_ADDR_VAR 0 8
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 250
30713: PPUSH
30714: LD_VAR 0 10
30718: PPUSH
30719: LD_VAR 0 5
30723: PPUSH
30724: CALL_OW 272
30728: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30729: LD_ADDR_VAR 0 9
30733: PUSH
30734: LD_VAR 0 1
30738: PPUSH
30739: CALL_OW 251
30743: PPUSH
30744: LD_VAR 0 10
30748: PPUSH
30749: LD_VAR 0 5
30753: PPUSH
30754: CALL_OW 273
30758: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30759: LD_VAR 0 8
30763: PPUSH
30764: LD_VAR 0 9
30768: PPUSH
30769: CALL_OW 488
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30885
// ComAnimCustom ( unit , 1 ) ;
30778: LD_VAR 0 1
30782: PPUSH
30783: LD_INT 1
30785: PPUSH
30786: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30790: LD_VAR 0 8
30794: PPUSH
30795: LD_VAR 0 9
30799: PPUSH
30800: LD_VAR 0 6
30804: PPUSH
30805: LD_VAR 0 7
30809: PPUSH
30810: CALL_OW 330
// repeat wait ( 1 ) ;
30814: LD_INT 1
30816: PPUSH
30817: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 316
30830: PUSH
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 314
30840: OR
30841: PUSH
30842: LD_VAR 0 1
30846: PPUSH
30847: CALL_OW 302
30851: NOT
30852: OR
30853: PUSH
30854: LD_VAR 0 1
30858: PPUSH
30859: CALL_OW 301
30863: OR
30864: IFFALSE 30814
// RemoveSeeing ( _x , _y , side ) ;
30866: LD_VAR 0 8
30870: PPUSH
30871: LD_VAR 0 9
30875: PPUSH
30876: LD_VAR 0 6
30880: PPUSH
30881: CALL_OW 331
// end ; end_of_file
30885: LD_VAR 0 4
30889: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30890: LD_INT 0
30892: PPUSH
30893: PPUSH
// if exist_mode then
30894: LD_VAR 0 2
30898: IFFALSE 30923
// unit := CreateCharacter ( prefix & ident ) else
30900: LD_ADDR_VAR 0 5
30904: PUSH
30905: LD_VAR 0 3
30909: PUSH
30910: LD_VAR 0 1
30914: STR
30915: PPUSH
30916: CALL_OW 34
30920: ST_TO_ADDR
30921: GO 30938
// unit := NewCharacter ( ident ) ;
30923: LD_ADDR_VAR 0 5
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 25
30937: ST_TO_ADDR
// result := unit ;
30938: LD_ADDR_VAR 0 4
30942: PUSH
30943: LD_VAR 0 5
30947: ST_TO_ADDR
// end ;
30948: LD_VAR 0 4
30952: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30953: LD_INT 0
30955: PPUSH
30956: PPUSH
// if not side or not nation then
30957: LD_VAR 0 1
30961: NOT
30962: PUSH
30963: LD_VAR 0 2
30967: NOT
30968: OR
30969: IFFALSE 30973
// exit ;
30971: GO 31741
// case nation of nation_american :
30973: LD_VAR 0 2
30977: PUSH
30978: LD_INT 1
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31200
30986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30987: LD_ADDR_VAR 0 4
30991: PUSH
30992: LD_INT 35
30994: PUSH
30995: LD_INT 45
30997: PUSH
30998: LD_INT 46
31000: PUSH
31001: LD_INT 47
31003: PUSH
31004: LD_INT 82
31006: PUSH
31007: LD_INT 83
31009: PUSH
31010: LD_INT 84
31012: PUSH
31013: LD_INT 85
31015: PUSH
31016: LD_INT 86
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: LD_INT 6
31027: PUSH
31028: LD_INT 15
31030: PUSH
31031: LD_INT 16
31033: PUSH
31034: LD_INT 7
31036: PUSH
31037: LD_INT 12
31039: PUSH
31040: LD_INT 13
31042: PUSH
31043: LD_INT 10
31045: PUSH
31046: LD_INT 14
31048: PUSH
31049: LD_INT 20
31051: PUSH
31052: LD_INT 21
31054: PUSH
31055: LD_INT 22
31057: PUSH
31058: LD_INT 25
31060: PUSH
31061: LD_INT 32
31063: PUSH
31064: LD_INT 27
31066: PUSH
31067: LD_INT 36
31069: PUSH
31070: LD_INT 69
31072: PUSH
31073: LD_INT 39
31075: PUSH
31076: LD_INT 34
31078: PUSH
31079: LD_INT 40
31081: PUSH
31082: LD_INT 48
31084: PUSH
31085: LD_INT 49
31087: PUSH
31088: LD_INT 50
31090: PUSH
31091: LD_INT 51
31093: PUSH
31094: LD_INT 52
31096: PUSH
31097: LD_INT 53
31099: PUSH
31100: LD_INT 54
31102: PUSH
31103: LD_INT 55
31105: PUSH
31106: LD_INT 56
31108: PUSH
31109: LD_INT 57
31111: PUSH
31112: LD_INT 58
31114: PUSH
31115: LD_INT 59
31117: PUSH
31118: LD_INT 60
31120: PUSH
31121: LD_INT 61
31123: PUSH
31124: LD_INT 62
31126: PUSH
31127: LD_INT 80
31129: PUSH
31130: LD_INT 82
31132: PUSH
31133: LD_INT 83
31135: PUSH
31136: LD_INT 84
31138: PUSH
31139: LD_INT 85
31141: PUSH
31142: LD_INT 86
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: ST_TO_ADDR
31198: GO 31665
31200: LD_INT 2
31202: DOUBLE
31203: EQUAL
31204: IFTRUE 31208
31206: GO 31434
31208: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31209: LD_ADDR_VAR 0 4
31213: PUSH
31214: LD_INT 35
31216: PUSH
31217: LD_INT 45
31219: PUSH
31220: LD_INT 46
31222: PUSH
31223: LD_INT 47
31225: PUSH
31226: LD_INT 82
31228: PUSH
31229: LD_INT 83
31231: PUSH
31232: LD_INT 84
31234: PUSH
31235: LD_INT 85
31237: PUSH
31238: LD_INT 87
31240: PUSH
31241: LD_INT 70
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 11
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: LD_INT 4
31255: PUSH
31256: LD_INT 5
31258: PUSH
31259: LD_INT 6
31261: PUSH
31262: LD_INT 15
31264: PUSH
31265: LD_INT 18
31267: PUSH
31268: LD_INT 7
31270: PUSH
31271: LD_INT 17
31273: PUSH
31274: LD_INT 8
31276: PUSH
31277: LD_INT 20
31279: PUSH
31280: LD_INT 21
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_INT 72
31288: PUSH
31289: LD_INT 26
31291: PUSH
31292: LD_INT 69
31294: PUSH
31295: LD_INT 39
31297: PUSH
31298: LD_INT 40
31300: PUSH
31301: LD_INT 41
31303: PUSH
31304: LD_INT 42
31306: PUSH
31307: LD_INT 43
31309: PUSH
31310: LD_INT 48
31312: PUSH
31313: LD_INT 49
31315: PUSH
31316: LD_INT 50
31318: PUSH
31319: LD_INT 51
31321: PUSH
31322: LD_INT 52
31324: PUSH
31325: LD_INT 53
31327: PUSH
31328: LD_INT 54
31330: PUSH
31331: LD_INT 55
31333: PUSH
31334: LD_INT 56
31336: PUSH
31337: LD_INT 60
31339: PUSH
31340: LD_INT 61
31342: PUSH
31343: LD_INT 62
31345: PUSH
31346: LD_INT 66
31348: PUSH
31349: LD_INT 67
31351: PUSH
31352: LD_INT 68
31354: PUSH
31355: LD_INT 81
31357: PUSH
31358: LD_INT 82
31360: PUSH
31361: LD_INT 83
31363: PUSH
31364: LD_INT 84
31366: PUSH
31367: LD_INT 85
31369: PUSH
31370: LD_INT 87
31372: PUSH
31373: LD_INT 88
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
31432: GO 31665
31434: LD_INT 3
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31664
31442: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31443: LD_ADDR_VAR 0 4
31447: PUSH
31448: LD_INT 46
31450: PUSH
31451: LD_INT 47
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 82
31462: PUSH
31463: LD_INT 83
31465: PUSH
31466: LD_INT 84
31468: PUSH
31469: LD_INT 85
31471: PUSH
31472: LD_INT 86
31474: PUSH
31475: LD_INT 11
31477: PUSH
31478: LD_INT 9
31480: PUSH
31481: LD_INT 20
31483: PUSH
31484: LD_INT 19
31486: PUSH
31487: LD_INT 21
31489: PUSH
31490: LD_INT 24
31492: PUSH
31493: LD_INT 22
31495: PUSH
31496: LD_INT 25
31498: PUSH
31499: LD_INT 28
31501: PUSH
31502: LD_INT 29
31504: PUSH
31505: LD_INT 30
31507: PUSH
31508: LD_INT 31
31510: PUSH
31511: LD_INT 37
31513: PUSH
31514: LD_INT 38
31516: PUSH
31517: LD_INT 32
31519: PUSH
31520: LD_INT 27
31522: PUSH
31523: LD_INT 33
31525: PUSH
31526: LD_INT 69
31528: PUSH
31529: LD_INT 39
31531: PUSH
31532: LD_INT 34
31534: PUSH
31535: LD_INT 40
31537: PUSH
31538: LD_INT 71
31540: PUSH
31541: LD_INT 23
31543: PUSH
31544: LD_INT 44
31546: PUSH
31547: LD_INT 48
31549: PUSH
31550: LD_INT 49
31552: PUSH
31553: LD_INT 50
31555: PUSH
31556: LD_INT 51
31558: PUSH
31559: LD_INT 52
31561: PUSH
31562: LD_INT 53
31564: PUSH
31565: LD_INT 54
31567: PUSH
31568: LD_INT 55
31570: PUSH
31571: LD_INT 56
31573: PUSH
31574: LD_INT 57
31576: PUSH
31577: LD_INT 58
31579: PUSH
31580: LD_INT 59
31582: PUSH
31583: LD_INT 63
31585: PUSH
31586: LD_INT 64
31588: PUSH
31589: LD_INT 65
31591: PUSH
31592: LD_INT 82
31594: PUSH
31595: LD_INT 83
31597: PUSH
31598: LD_INT 84
31600: PUSH
31601: LD_INT 85
31603: PUSH
31604: LD_INT 86
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: ST_TO_ADDR
31662: GO 31665
31664: POP
// if state > - 1 and state < 3 then
31665: LD_VAR 0 3
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: GREATER
31674: PUSH
31675: LD_VAR 0 3
31679: PUSH
31680: LD_INT 3
31682: LESS
31683: AND
31684: IFFALSE 31741
// for i in result do
31686: LD_ADDR_VAR 0 5
31690: PUSH
31691: LD_VAR 0 4
31695: PUSH
31696: FOR_IN
31697: IFFALSE 31739
// if GetTech ( i , side ) <> state then
31699: LD_VAR 0 5
31703: PPUSH
31704: LD_VAR 0 1
31708: PPUSH
31709: CALL_OW 321
31713: PUSH
31714: LD_VAR 0 3
31718: NONEQUAL
31719: IFFALSE 31737
// result := result diff i ;
31721: LD_ADDR_VAR 0 4
31725: PUSH
31726: LD_VAR 0 4
31730: PUSH
31731: LD_VAR 0 5
31735: DIFF
31736: ST_TO_ADDR
31737: GO 31696
31739: POP
31740: POP
// end ;
31741: LD_VAR 0 4
31745: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31746: LD_INT 0
31748: PPUSH
31749: PPUSH
31750: PPUSH
// result := true ;
31751: LD_ADDR_VAR 0 3
31755: PUSH
31756: LD_INT 1
31758: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31759: LD_ADDR_VAR 0 5
31763: PUSH
31764: LD_VAR 0 2
31768: PPUSH
31769: CALL_OW 480
31773: ST_TO_ADDR
// if not tmp then
31774: LD_VAR 0 5
31778: NOT
31779: IFFALSE 31783
// exit ;
31781: GO 31832
// for i in tmp do
31783: LD_ADDR_VAR 0 4
31787: PUSH
31788: LD_VAR 0 5
31792: PUSH
31793: FOR_IN
31794: IFFALSE 31830
// if GetTech ( i , side ) <> state_researched then
31796: LD_VAR 0 4
31800: PPUSH
31801: LD_VAR 0 1
31805: PPUSH
31806: CALL_OW 321
31810: PUSH
31811: LD_INT 2
31813: NONEQUAL
31814: IFFALSE 31828
// begin result := false ;
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_INT 0
31823: ST_TO_ADDR
// exit ;
31824: POP
31825: POP
31826: GO 31832
// end ;
31828: GO 31793
31830: POP
31831: POP
// end ;
31832: LD_VAR 0 3
31836: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31837: LD_INT 0
31839: PPUSH
31840: PPUSH
31841: PPUSH
31842: PPUSH
31843: PPUSH
31844: PPUSH
31845: PPUSH
31846: PPUSH
31847: PPUSH
31848: PPUSH
31849: PPUSH
31850: PPUSH
31851: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31852: LD_VAR 0 1
31856: NOT
31857: PUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 257
31867: PUSH
31868: LD_INT 9
31870: NONEQUAL
31871: OR
31872: IFFALSE 31876
// exit ;
31874: GO 32449
// side := GetSide ( unit ) ;
31876: LD_ADDR_VAR 0 9
31880: PUSH
31881: LD_VAR 0 1
31885: PPUSH
31886: CALL_OW 255
31890: ST_TO_ADDR
// tech_space := tech_spacanom ;
31891: LD_ADDR_VAR 0 12
31895: PUSH
31896: LD_INT 29
31898: ST_TO_ADDR
// tech_time := tech_taurad ;
31899: LD_ADDR_VAR 0 13
31903: PUSH
31904: LD_INT 28
31906: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31907: LD_ADDR_VAR 0 11
31911: PUSH
31912: LD_VAR 0 1
31916: PPUSH
31917: CALL_OW 310
31921: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31922: LD_VAR 0 11
31926: PPUSH
31927: CALL_OW 247
31931: PUSH
31932: LD_INT 2
31934: EQUAL
31935: IFFALSE 31939
// exit ;
31937: GO 32449
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31939: LD_ADDR_VAR 0 8
31943: PUSH
31944: LD_INT 81
31946: PUSH
31947: LD_VAR 0 9
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: LD_INT 21
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PPUSH
31977: CALL_OW 69
31981: ST_TO_ADDR
// if not tmp then
31982: LD_VAR 0 8
31986: NOT
31987: IFFALSE 31991
// exit ;
31989: GO 32449
// if in_unit then
31991: LD_VAR 0 11
31995: IFFALSE 32019
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31997: LD_ADDR_VAR 0 10
32001: PUSH
32002: LD_VAR 0 8
32006: PPUSH
32007: LD_VAR 0 11
32011: PPUSH
32012: CALL_OW 74
32016: ST_TO_ADDR
32017: GO 32039
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32019: LD_ADDR_VAR 0 10
32023: PUSH
32024: LD_VAR 0 8
32028: PPUSH
32029: LD_VAR 0 1
32033: PPUSH
32034: CALL_OW 74
32038: ST_TO_ADDR
// if not enemy then
32039: LD_VAR 0 10
32043: NOT
32044: IFFALSE 32048
// exit ;
32046: GO 32449
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32048: LD_VAR 0 11
32052: PUSH
32053: LD_VAR 0 11
32057: PPUSH
32058: LD_VAR 0 10
32062: PPUSH
32063: CALL_OW 296
32067: PUSH
32068: LD_INT 13
32070: GREATER
32071: AND
32072: PUSH
32073: LD_VAR 0 1
32077: PPUSH
32078: LD_VAR 0 10
32082: PPUSH
32083: CALL_OW 296
32087: PUSH
32088: LD_INT 12
32090: GREATER
32091: OR
32092: IFFALSE 32096
// exit ;
32094: GO 32449
// missile := [ 1 ] ;
32096: LD_ADDR_VAR 0 14
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32107: LD_VAR 0 9
32111: PPUSH
32112: LD_VAR 0 12
32116: PPUSH
32117: CALL_OW 325
32121: IFFALSE 32150
// missile := Insert ( missile , missile + 1 , 2 ) ;
32123: LD_ADDR_VAR 0 14
32127: PUSH
32128: LD_VAR 0 14
32132: PPUSH
32133: LD_VAR 0 14
32137: PUSH
32138: LD_INT 1
32140: PLUS
32141: PPUSH
32142: LD_INT 2
32144: PPUSH
32145: CALL_OW 2
32149: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32150: LD_VAR 0 9
32154: PPUSH
32155: LD_VAR 0 13
32159: PPUSH
32160: CALL_OW 325
32164: PUSH
32165: LD_VAR 0 10
32169: PPUSH
32170: CALL_OW 255
32174: PPUSH
32175: LD_VAR 0 13
32179: PPUSH
32180: CALL_OW 325
32184: NOT
32185: AND
32186: IFFALSE 32215
// missile := Insert ( missile , missile + 1 , 3 ) ;
32188: LD_ADDR_VAR 0 14
32192: PUSH
32193: LD_VAR 0 14
32197: PPUSH
32198: LD_VAR 0 14
32202: PUSH
32203: LD_INT 1
32205: PLUS
32206: PPUSH
32207: LD_INT 3
32209: PPUSH
32210: CALL_OW 2
32214: ST_TO_ADDR
// if missile < 2 then
32215: LD_VAR 0 14
32219: PUSH
32220: LD_INT 2
32222: LESS
32223: IFFALSE 32227
// exit ;
32225: GO 32449
// x := GetX ( enemy ) ;
32227: LD_ADDR_VAR 0 4
32231: PUSH
32232: LD_VAR 0 10
32236: PPUSH
32237: CALL_OW 250
32241: ST_TO_ADDR
// y := GetY ( enemy ) ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_VAR 0 10
32251: PPUSH
32252: CALL_OW 251
32256: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32257: LD_ADDR_VAR 0 6
32261: PUSH
32262: LD_VAR 0 4
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PPUSH
32271: LD_INT 1
32273: PPUSH
32274: CALL_OW 12
32278: PLUS
32279: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32280: LD_ADDR_VAR 0 7
32284: PUSH
32285: LD_VAR 0 5
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PPUSH
32294: LD_INT 1
32296: PPUSH
32297: CALL_OW 12
32301: PLUS
32302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32303: LD_VAR 0 6
32307: PPUSH
32308: LD_VAR 0 7
32312: PPUSH
32313: CALL_OW 488
32317: NOT
32318: IFFALSE 32340
// begin _x := x ;
32320: LD_ADDR_VAR 0 6
32324: PUSH
32325: LD_VAR 0 4
32329: ST_TO_ADDR
// _y := y ;
32330: LD_ADDR_VAR 0 7
32334: PUSH
32335: LD_VAR 0 5
32339: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32340: LD_ADDR_VAR 0 3
32344: PUSH
32345: LD_INT 1
32347: PPUSH
32348: LD_VAR 0 14
32352: PPUSH
32353: CALL_OW 12
32357: ST_TO_ADDR
// case i of 1 :
32358: LD_VAR 0 3
32362: PUSH
32363: LD_INT 1
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32388
32371: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32372: LD_VAR 0 1
32376: PPUSH
32377: LD_VAR 0 10
32381: PPUSH
32382: CALL_OW 115
32386: GO 32449
32388: LD_INT 2
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32418
32396: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32397: LD_VAR 0 1
32401: PPUSH
32402: LD_VAR 0 6
32406: PPUSH
32407: LD_VAR 0 7
32411: PPUSH
32412: CALL_OW 153
32416: GO 32449
32418: LD_INT 3
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32448
32426: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32427: LD_VAR 0 1
32431: PPUSH
32432: LD_VAR 0 6
32436: PPUSH
32437: LD_VAR 0 7
32441: PPUSH
32442: CALL_OW 154
32446: GO 32449
32448: POP
// end ;
32449: LD_VAR 0 2
32453: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
// if not unit or not building then
32462: LD_VAR 0 1
32466: NOT
32467: PUSH
32468: LD_VAR 0 2
32472: NOT
32473: OR
32474: IFFALSE 32478
// exit ;
32476: GO 32636
// x := GetX ( building ) ;
32478: LD_ADDR_VAR 0 5
32482: PUSH
32483: LD_VAR 0 2
32487: PPUSH
32488: CALL_OW 250
32492: ST_TO_ADDR
// y := GetY ( building ) ;
32493: LD_ADDR_VAR 0 6
32497: PUSH
32498: LD_VAR 0 2
32502: PPUSH
32503: CALL_OW 251
32507: ST_TO_ADDR
// for i = 0 to 5 do
32508: LD_ADDR_VAR 0 4
32512: PUSH
32513: DOUBLE
32514: LD_INT 0
32516: DEC
32517: ST_TO_ADDR
32518: LD_INT 5
32520: PUSH
32521: FOR_TO
32522: IFFALSE 32634
// begin _x := ShiftX ( x , i , 3 ) ;
32524: LD_ADDR_VAR 0 7
32528: PUSH
32529: LD_VAR 0 5
32533: PPUSH
32534: LD_VAR 0 4
32538: PPUSH
32539: LD_INT 3
32541: PPUSH
32542: CALL_OW 272
32546: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32547: LD_ADDR_VAR 0 8
32551: PUSH
32552: LD_VAR 0 6
32556: PPUSH
32557: LD_VAR 0 4
32561: PPUSH
32562: LD_INT 3
32564: PPUSH
32565: CALL_OW 273
32569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32570: LD_VAR 0 7
32574: PPUSH
32575: LD_VAR 0 8
32579: PPUSH
32580: CALL_OW 488
32584: NOT
32585: IFFALSE 32589
// continue ;
32587: GO 32521
// if HexInfo ( _x , _y ) = 0 then
32589: LD_VAR 0 7
32593: PPUSH
32594: LD_VAR 0 8
32598: PPUSH
32599: CALL_OW 428
32603: PUSH
32604: LD_INT 0
32606: EQUAL
32607: IFFALSE 32632
// begin ComMoveXY ( unit , _x , _y ) ;
32609: LD_VAR 0 1
32613: PPUSH
32614: LD_VAR 0 7
32618: PPUSH
32619: LD_VAR 0 8
32623: PPUSH
32624: CALL_OW 111
// exit ;
32628: POP
32629: POP
32630: GO 32636
// end ; end ;
32632: GO 32521
32634: POP
32635: POP
// end ;
32636: LD_VAR 0 3
32640: RET
// export function ScanBase ( side , base_area ) ; begin
32641: LD_INT 0
32643: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32644: LD_ADDR_VAR 0 3
32648: PUSH
32649: LD_VAR 0 2
32653: PPUSH
32654: LD_INT 81
32656: PUSH
32657: LD_VAR 0 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PPUSH
32666: CALL_OW 70
32670: ST_TO_ADDR
// end ;
32671: LD_VAR 0 3
32675: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32676: LD_INT 0
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
// result := false ;
32682: LD_ADDR_VAR 0 2
32686: PUSH
32687: LD_INT 0
32689: ST_TO_ADDR
// side := GetSide ( unit ) ;
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_VAR 0 1
32699: PPUSH
32700: CALL_OW 255
32704: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32705: LD_ADDR_VAR 0 4
32709: PUSH
32710: LD_VAR 0 1
32714: PPUSH
32715: CALL_OW 248
32719: ST_TO_ADDR
// case nat of 1 :
32720: LD_VAR 0 4
32724: PUSH
32725: LD_INT 1
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32744
32733: POP
// tech := tech_lassight ; 2 :
32734: LD_ADDR_VAR 0 5
32738: PUSH
32739: LD_INT 12
32741: ST_TO_ADDR
32742: GO 32783
32744: LD_INT 2
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32763
32752: POP
// tech := tech_mortar ; 3 :
32753: LD_ADDR_VAR 0 5
32757: PUSH
32758: LD_INT 41
32760: ST_TO_ADDR
32761: GO 32783
32763: LD_INT 3
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32771
32769: GO 32782
32771: POP
// tech := tech_bazooka ; end ;
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: LD_INT 44
32779: ST_TO_ADDR
32780: GO 32783
32782: POP
// if Researched ( side , tech ) then
32783: LD_VAR 0 3
32787: PPUSH
32788: LD_VAR 0 5
32792: PPUSH
32793: CALL_OW 325
32797: IFFALSE 32824
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32799: LD_ADDR_VAR 0 2
32803: PUSH
32804: LD_INT 5
32806: PUSH
32807: LD_INT 8
32809: PUSH
32810: LD_INT 9
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: PUSH
32818: LD_VAR 0 4
32822: ARRAY
32823: ST_TO_ADDR
// end ;
32824: LD_VAR 0 2
32828: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32829: LD_INT 0
32831: PPUSH
32832: PPUSH
32833: PPUSH
// if not mines then
32834: LD_VAR 0 2
32838: NOT
32839: IFFALSE 32843
// exit ;
32841: GO 32987
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32843: LD_ADDR_VAR 0 5
32847: PUSH
32848: LD_INT 81
32850: PUSH
32851: LD_VAR 0 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 21
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PPUSH
32881: CALL_OW 69
32885: ST_TO_ADDR
// for i in mines do
32886: LD_ADDR_VAR 0 4
32890: PUSH
32891: LD_VAR 0 2
32895: PUSH
32896: FOR_IN
32897: IFFALSE 32985
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32899: LD_VAR 0 4
32903: PUSH
32904: LD_INT 1
32906: ARRAY
32907: PPUSH
32908: LD_VAR 0 4
32912: PUSH
32913: LD_INT 2
32915: ARRAY
32916: PPUSH
32917: CALL_OW 458
32921: NOT
32922: IFFALSE 32926
// continue ;
32924: GO 32896
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32926: LD_VAR 0 4
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: PPUSH
32935: LD_VAR 0 4
32939: PUSH
32940: LD_INT 2
32942: ARRAY
32943: PPUSH
32944: CALL_OW 428
32948: PUSH
32949: LD_VAR 0 5
32953: IN
32954: IFFALSE 32983
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32956: LD_VAR 0 4
32960: PUSH
32961: LD_INT 1
32963: ARRAY
32964: PPUSH
32965: LD_VAR 0 4
32969: PUSH
32970: LD_INT 2
32972: ARRAY
32973: PPUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 456
// end ;
32983: GO 32896
32985: POP
32986: POP
// end ;
32987: LD_VAR 0 3
32991: RET
// export function Count ( array ) ; var i ; begin
32992: LD_INT 0
32994: PPUSH
32995: PPUSH
// result := 0 ;
32996: LD_ADDR_VAR 0 2
33000: PUSH
33001: LD_INT 0
33003: ST_TO_ADDR
// for i in array do
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_VAR 0 1
33013: PUSH
33014: FOR_IN
33015: IFFALSE 33039
// if i then
33017: LD_VAR 0 3
33021: IFFALSE 33037
// result := result + 1 ;
33023: LD_ADDR_VAR 0 2
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_INT 1
33035: PLUS
33036: ST_TO_ADDR
33037: GO 33014
33039: POP
33040: POP
// end ;
33041: LD_VAR 0 2
33045: RET
// export function IsEmpty ( building ) ; begin
33046: LD_INT 0
33048: PPUSH
// if not building then
33049: LD_VAR 0 1
33053: NOT
33054: IFFALSE 33058
// exit ;
33056: GO 33101
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33058: LD_ADDR_VAR 0 2
33062: PUSH
33063: LD_VAR 0 1
33067: PUSH
33068: LD_INT 22
33070: PUSH
33071: LD_VAR 0 1
33075: PPUSH
33076: CALL_OW 255
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 58
33087: PUSH
33088: EMPTY
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PPUSH
33095: CALL_OW 69
33099: IN
33100: ST_TO_ADDR
// end ;
33101: LD_VAR 0 2
33105: RET
// export function IsNotFull ( building ) ; begin
33106: LD_INT 0
33108: PPUSH
// if not building then
33109: LD_VAR 0 1
33113: NOT
33114: IFFALSE 33118
// exit ;
33116: GO 33137
// result := UnitsInside ( building ) < 6 ;
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 313
33132: PUSH
33133: LD_INT 6
33135: LESS
33136: ST_TO_ADDR
// end ;
33137: LD_VAR 0 2
33141: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33142: LD_INT 0
33144: PPUSH
33145: PPUSH
33146: PPUSH
33147: PPUSH
// tmp := [ ] ;
33148: LD_ADDR_VAR 0 3
33152: PUSH
33153: EMPTY
33154: ST_TO_ADDR
// list := [ ] ;
33155: LD_ADDR_VAR 0 5
33159: PUSH
33160: EMPTY
33161: ST_TO_ADDR
// for i = 16 to 25 do
33162: LD_ADDR_VAR 0 4
33166: PUSH
33167: DOUBLE
33168: LD_INT 16
33170: DEC
33171: ST_TO_ADDR
33172: LD_INT 25
33174: PUSH
33175: FOR_TO
33176: IFFALSE 33249
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: LD_VAR 0 3
33187: PUSH
33188: LD_INT 22
33190: PUSH
33191: LD_VAR 0 1
33195: PPUSH
33196: CALL_OW 255
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 91
33207: PUSH
33208: LD_VAR 0 1
33212: PUSH
33213: LD_INT 6
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 30
33223: PUSH
33224: LD_VAR 0 4
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: PUSH
33238: EMPTY
33239: LIST
33240: PPUSH
33241: CALL_OW 69
33245: ADD
33246: ST_TO_ADDR
33247: GO 33175
33249: POP
33250: POP
// for i = 1 to tmp do
33251: LD_ADDR_VAR 0 4
33255: PUSH
33256: DOUBLE
33257: LD_INT 1
33259: DEC
33260: ST_TO_ADDR
33261: LD_VAR 0 3
33265: PUSH
33266: FOR_TO
33267: IFFALSE 33355
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33269: LD_ADDR_VAR 0 5
33273: PUSH
33274: LD_VAR 0 5
33278: PUSH
33279: LD_VAR 0 3
33283: PUSH
33284: LD_VAR 0 4
33288: ARRAY
33289: PPUSH
33290: CALL_OW 266
33294: PUSH
33295: LD_VAR 0 3
33299: PUSH
33300: LD_VAR 0 4
33304: ARRAY
33305: PPUSH
33306: CALL_OW 250
33310: PUSH
33311: LD_VAR 0 3
33315: PUSH
33316: LD_VAR 0 4
33320: ARRAY
33321: PPUSH
33322: CALL_OW 251
33326: PUSH
33327: LD_VAR 0 3
33331: PUSH
33332: LD_VAR 0 4
33336: ARRAY
33337: PPUSH
33338: CALL_OW 254
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: PUSH
33349: EMPTY
33350: LIST
33351: ADD
33352: ST_TO_ADDR
33353: GO 33266
33355: POP
33356: POP
// result := list ;
33357: LD_ADDR_VAR 0 2
33361: PUSH
33362: LD_VAR 0 5
33366: ST_TO_ADDR
// end ;
33367: LD_VAR 0 2
33371: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33372: LD_INT 0
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// if not factory then
33381: LD_VAR 0 1
33385: NOT
33386: IFFALSE 33390
// exit ;
33388: GO 33983
// if control = control_apeman then
33390: LD_VAR 0 4
33394: PUSH
33395: LD_INT 5
33397: EQUAL
33398: IFFALSE 33507
// begin tmp := UnitsInside ( factory ) ;
33400: LD_ADDR_VAR 0 8
33404: PUSH
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 313
33414: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33415: LD_VAR 0 8
33419: PPUSH
33420: LD_INT 25
33422: PUSH
33423: LD_INT 12
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PPUSH
33430: CALL_OW 72
33434: NOT
33435: IFFALSE 33445
// control := control_manual ;
33437: LD_ADDR_VAR 0 4
33441: PUSH
33442: LD_INT 1
33444: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33445: LD_ADDR_VAR 0 8
33449: PUSH
33450: LD_VAR 0 1
33454: PPUSH
33455: CALL 33142 0 1
33459: ST_TO_ADDR
// if tmp then
33460: LD_VAR 0 8
33464: IFFALSE 33507
// begin for i in tmp do
33466: LD_ADDR_VAR 0 7
33470: PUSH
33471: LD_VAR 0 8
33475: PUSH
33476: FOR_IN
33477: IFFALSE 33505
// if i [ 1 ] = b_ext_radio then
33479: LD_VAR 0 7
33483: PUSH
33484: LD_INT 1
33486: ARRAY
33487: PUSH
33488: LD_INT 22
33490: EQUAL
33491: IFFALSE 33503
// begin control := control_remote ;
33493: LD_ADDR_VAR 0 4
33497: PUSH
33498: LD_INT 2
33500: ST_TO_ADDR
// break ;
33501: GO 33505
// end ;
33503: GO 33476
33505: POP
33506: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33507: LD_VAR 0 1
33511: PPUSH
33512: LD_VAR 0 2
33516: PPUSH
33517: LD_VAR 0 3
33521: PPUSH
33522: LD_VAR 0 4
33526: PPUSH
33527: LD_VAR 0 5
33531: PPUSH
33532: CALL_OW 448
33536: IFFALSE 33571
// begin result := [ chassis , engine , control , weapon ] ;
33538: LD_ADDR_VAR 0 6
33542: PUSH
33543: LD_VAR 0 2
33547: PUSH
33548: LD_VAR 0 3
33552: PUSH
33553: LD_VAR 0 4
33557: PUSH
33558: LD_VAR 0 5
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: ST_TO_ADDR
// exit ;
33569: GO 33983
// end ; _chassis := AvailableChassisList ( factory ) ;
33571: LD_ADDR_VAR 0 9
33575: PUSH
33576: LD_VAR 0 1
33580: PPUSH
33581: CALL_OW 475
33585: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33586: LD_ADDR_VAR 0 11
33590: PUSH
33591: LD_VAR 0 1
33595: PPUSH
33596: CALL_OW 476
33600: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33601: LD_ADDR_VAR 0 12
33605: PUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 477
33615: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33616: LD_ADDR_VAR 0 10
33620: PUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: CALL_OW 478
33630: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33631: LD_VAR 0 9
33635: NOT
33636: PUSH
33637: LD_VAR 0 11
33641: NOT
33642: OR
33643: PUSH
33644: LD_VAR 0 12
33648: NOT
33649: OR
33650: PUSH
33651: LD_VAR 0 10
33655: NOT
33656: OR
33657: IFFALSE 33692
// begin result := [ chassis , engine , control , weapon ] ;
33659: LD_ADDR_VAR 0 6
33663: PUSH
33664: LD_VAR 0 2
33668: PUSH
33669: LD_VAR 0 3
33673: PUSH
33674: LD_VAR 0 4
33678: PUSH
33679: LD_VAR 0 5
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// exit ;
33690: GO 33983
// end ; if not chassis in _chassis then
33692: LD_VAR 0 2
33696: PUSH
33697: LD_VAR 0 9
33701: IN
33702: NOT
33703: IFFALSE 33729
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_VAR 0 9
33714: PUSH
33715: LD_INT 1
33717: PPUSH
33718: LD_VAR 0 9
33722: PPUSH
33723: CALL_OW 12
33727: ARRAY
33728: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33729: LD_VAR 0 2
33733: PPUSH
33734: LD_VAR 0 3
33738: PPUSH
33739: CALL 33988 0 2
33743: NOT
33744: IFFALSE 33803
// repeat engine := _engine [ 1 ] ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_VAR 0 11
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33760: LD_ADDR_VAR 0 11
33764: PUSH
33765: LD_VAR 0 11
33769: PPUSH
33770: LD_INT 1
33772: PPUSH
33773: CALL_OW 3
33777: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33778: LD_VAR 0 2
33782: PPUSH
33783: LD_VAR 0 3
33787: PPUSH
33788: CALL 33988 0 2
33792: PUSH
33793: LD_VAR 0 11
33797: PUSH
33798: EMPTY
33799: EQUAL
33800: OR
33801: IFFALSE 33746
// if not control in _control then
33803: LD_VAR 0 4
33807: PUSH
33808: LD_VAR 0 12
33812: IN
33813: NOT
33814: IFFALSE 33840
// control := _control [ rand ( 1 , _control ) ] ;
33816: LD_ADDR_VAR 0 4
33820: PUSH
33821: LD_VAR 0 12
33825: PUSH
33826: LD_INT 1
33828: PPUSH
33829: LD_VAR 0 12
33833: PPUSH
33834: CALL_OW 12
33838: ARRAY
33839: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33840: LD_VAR 0 2
33844: PPUSH
33845: LD_VAR 0 5
33849: PPUSH
33850: CALL 34208 0 2
33854: NOT
33855: IFFALSE 33914
// repeat weapon := _weapon [ 1 ] ;
33857: LD_ADDR_VAR 0 5
33861: PUSH
33862: LD_VAR 0 10
33866: PUSH
33867: LD_INT 1
33869: ARRAY
33870: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33871: LD_ADDR_VAR 0 10
33875: PUSH
33876: LD_VAR 0 10
33880: PPUSH
33881: LD_INT 1
33883: PPUSH
33884: CALL_OW 3
33888: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33889: LD_VAR 0 2
33893: PPUSH
33894: LD_VAR 0 5
33898: PPUSH
33899: CALL 34208 0 2
33903: PUSH
33904: LD_VAR 0 10
33908: PUSH
33909: EMPTY
33910: EQUAL
33911: OR
33912: IFFALSE 33857
// result := [ ] ;
33914: LD_ADDR_VAR 0 6
33918: PUSH
33919: EMPTY
33920: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33921: LD_VAR 0 1
33925: PPUSH
33926: LD_VAR 0 2
33930: PPUSH
33931: LD_VAR 0 3
33935: PPUSH
33936: LD_VAR 0 4
33940: PPUSH
33941: LD_VAR 0 5
33945: PPUSH
33946: CALL_OW 448
33950: IFFALSE 33983
// result := [ chassis , engine , control , weapon ] ;
33952: LD_ADDR_VAR 0 6
33956: PUSH
33957: LD_VAR 0 2
33961: PUSH
33962: LD_VAR 0 3
33966: PUSH
33967: LD_VAR 0 4
33971: PUSH
33972: LD_VAR 0 5
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: ST_TO_ADDR
// end ;
33983: LD_VAR 0 6
33987: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33988: LD_INT 0
33990: PPUSH
// if not chassis or not engine then
33991: LD_VAR 0 1
33995: NOT
33996: PUSH
33997: LD_VAR 0 2
34001: NOT
34002: OR
34003: IFFALSE 34007
// exit ;
34005: GO 34203
// case engine of engine_solar :
34007: LD_VAR 0 2
34011: PUSH
34012: LD_INT 2
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34020
34018: GO 34058
34020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_INT 11
34028: PUSH
34029: LD_INT 12
34031: PUSH
34032: LD_INT 13
34034: PUSH
34035: LD_INT 14
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
34056: GO 34187
34058: LD_INT 1
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34128
34066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_INT 11
34074: PUSH
34075: LD_INT 12
34077: PUSH
34078: LD_INT 13
34080: PUSH
34081: LD_INT 14
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 3
34092: PUSH
34093: LD_INT 4
34095: PUSH
34096: LD_INT 5
34098: PUSH
34099: LD_INT 21
34101: PUSH
34102: LD_INT 23
34104: PUSH
34105: LD_INT 22
34107: PUSH
34108: LD_INT 24
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: ST_TO_ADDR
34126: GO 34187
34128: LD_INT 3
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34136
34134: GO 34186
34136: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34137: LD_ADDR_VAR 0 3
34141: PUSH
34142: LD_INT 13
34144: PUSH
34145: LD_INT 14
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 3
34153: PUSH
34154: LD_INT 4
34156: PUSH
34157: LD_INT 5
34159: PUSH
34160: LD_INT 21
34162: PUSH
34163: LD_INT 22
34165: PUSH
34166: LD_INT 23
34168: PUSH
34169: LD_INT 24
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
34184: GO 34187
34186: POP
// result := ( chassis in result ) ;
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_VAR 0 1
34196: PUSH
34197: LD_VAR 0 3
34201: IN
34202: ST_TO_ADDR
// end ;
34203: LD_VAR 0 3
34207: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34208: LD_INT 0
34210: PPUSH
// if not chassis or not weapon then
34211: LD_VAR 0 1
34215: NOT
34216: PUSH
34217: LD_VAR 0 2
34221: NOT
34222: OR
34223: IFFALSE 34227
// exit ;
34225: GO 35289
// case weapon of us_machine_gun :
34227: LD_VAR 0 2
34231: PUSH
34232: LD_INT 2
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34270
34240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: LD_INT 4
34257: PUSH
34258: LD_INT 5
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
34268: GO 35273
34270: LD_INT 3
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34278
34276: GO 34308
34278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34279: LD_ADDR_VAR 0 3
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: LD_INT 4
34295: PUSH
34296: LD_INT 5
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: ST_TO_ADDR
34306: GO 35273
34308: LD_INT 11
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34316
34314: GO 34346
34316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34317: LD_ADDR_VAR 0 3
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 4
34333: PUSH
34334: LD_INT 5
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
34344: GO 35273
34346: LD_INT 4
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34380
34354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: LD_INT 3
34365: PUSH
34366: LD_INT 4
34368: PUSH
34369: LD_INT 5
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: ST_TO_ADDR
34378: GO 35273
34380: LD_INT 5
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34388
34386: GO 34414
34388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34389: LD_ADDR_VAR 0 3
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 4
34402: PUSH
34403: LD_INT 5
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: ST_TO_ADDR
34412: GO 35273
34414: LD_INT 9
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34422
34420: GO 34448
34422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: LD_INT 3
34433: PUSH
34434: LD_INT 4
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
34446: GO 35273
34448: LD_INT 7
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34482
34456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: LD_INT 3
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
34480: GO 35273
34482: LD_INT 12
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 34516
34490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 4
34504: PUSH
34505: LD_INT 5
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: ST_TO_ADDR
34514: GO 35273
34516: LD_INT 13
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34524
34522: GO 34550
34524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34525: LD_ADDR_VAR 0 3
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: LD_INT 4
34538: PUSH
34539: LD_INT 5
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: ST_TO_ADDR
34548: GO 35273
34550: LD_INT 14
34552: DOUBLE
34553: EQUAL
34554: IFTRUE 34558
34556: GO 34576
34558: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34559: LD_ADDR_VAR 0 3
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: ST_TO_ADDR
34574: GO 35273
34576: LD_INT 6
34578: DOUBLE
34579: EQUAL
34580: IFTRUE 34584
34582: GO 34602
34584: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34585: LD_ADDR_VAR 0 3
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: ST_TO_ADDR
34600: GO 35273
34602: LD_INT 10
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34610
34608: GO 34628
34610: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_INT 4
34618: PUSH
34619: LD_INT 5
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: ST_TO_ADDR
34626: GO 35273
34628: LD_INT 22
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34662
34636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_INT 11
34644: PUSH
34645: LD_INT 12
34647: PUSH
34648: LD_INT 13
34650: PUSH
34651: LD_INT 14
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: ST_TO_ADDR
34660: GO 35273
34662: LD_INT 23
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 34696
34670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_INT 11
34678: PUSH
34679: LD_INT 12
34681: PUSH
34682: LD_INT 13
34684: PUSH
34685: LD_INT 14
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
34694: GO 35273
34696: LD_INT 24
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34730
34704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_INT 11
34712: PUSH
34713: LD_INT 12
34715: PUSH
34716: LD_INT 13
34718: PUSH
34719: LD_INT 14
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
34728: GO 35273
34730: LD_INT 30
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34764
34738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_INT 11
34746: PUSH
34747: LD_INT 12
34749: PUSH
34750: LD_INT 13
34752: PUSH
34753: LD_INT 14
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
34762: GO 35273
34764: LD_INT 25
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34790
34772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_INT 13
34780: PUSH
34781: LD_INT 14
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: ST_TO_ADDR
34788: GO 35273
34790: LD_INT 27
34792: DOUBLE
34793: EQUAL
34794: IFTRUE 34798
34796: GO 34816
34798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_INT 13
34806: PUSH
34807: LD_INT 14
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35273
34816: LD_EXP 48
34820: DOUBLE
34821: EQUAL
34822: IFTRUE 34826
34824: GO 34852
34826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_INT 11
34834: PUSH
34835: LD_INT 12
34837: PUSH
34838: LD_INT 13
34840: PUSH
34841: LD_INT 14
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
34850: GO 35273
34852: LD_INT 28
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34878
34860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 13
34868: PUSH
34869: LD_INT 14
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 35273
34878: LD_INT 29
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34904
34886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 13
34894: PUSH
34895: LD_INT 14
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: ST_TO_ADDR
34902: GO 35273
34904: LD_INT 31
34906: DOUBLE
34907: EQUAL
34908: IFTRUE 34912
34910: GO 34930
34912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34913: LD_ADDR_VAR 0 3
34917: PUSH
34918: LD_INT 13
34920: PUSH
34921: LD_INT 14
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: ST_TO_ADDR
34928: GO 35273
34930: LD_INT 26
34932: DOUBLE
34933: EQUAL
34934: IFTRUE 34938
34936: GO 34956
34938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_INT 13
34946: PUSH
34947: LD_INT 14
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: ST_TO_ADDR
34954: GO 35273
34956: LD_INT 42
34958: DOUBLE
34959: EQUAL
34960: IFTRUE 34964
34962: GO 34990
34964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34965: LD_ADDR_VAR 0 3
34969: PUSH
34970: LD_INT 21
34972: PUSH
34973: LD_INT 22
34975: PUSH
34976: LD_INT 23
34978: PUSH
34979: LD_INT 24
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: ST_TO_ADDR
34988: GO 35273
34990: LD_INT 43
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35024
34998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34999: LD_ADDR_VAR 0 3
35003: PUSH
35004: LD_INT 21
35006: PUSH
35007: LD_INT 22
35009: PUSH
35010: LD_INT 23
35012: PUSH
35013: LD_INT 24
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: ST_TO_ADDR
35022: GO 35273
35024: LD_INT 44
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35058
35032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_INT 21
35040: PUSH
35041: LD_INT 22
35043: PUSH
35044: LD_INT 23
35046: PUSH
35047: LD_INT 24
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
35056: GO 35273
35058: LD_INT 45
35060: DOUBLE
35061: EQUAL
35062: IFTRUE 35066
35064: GO 35092
35066: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_INT 21
35074: PUSH
35075: LD_INT 22
35077: PUSH
35078: LD_INT 23
35080: PUSH
35081: LD_INT 24
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
35090: GO 35273
35092: LD_INT 49
35094: DOUBLE
35095: EQUAL
35096: IFTRUE 35100
35098: GO 35126
35100: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35101: LD_ADDR_VAR 0 3
35105: PUSH
35106: LD_INT 21
35108: PUSH
35109: LD_INT 22
35111: PUSH
35112: LD_INT 23
35114: PUSH
35115: LD_INT 24
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: ST_TO_ADDR
35124: GO 35273
35126: LD_INT 51
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35160
35134: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35135: LD_ADDR_VAR 0 3
35139: PUSH
35140: LD_INT 21
35142: PUSH
35143: LD_INT 22
35145: PUSH
35146: LD_INT 23
35148: PUSH
35149: LD_INT 24
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
35158: GO 35273
35160: LD_INT 52
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35168
35166: GO 35194
35168: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_INT 21
35176: PUSH
35177: LD_INT 22
35179: PUSH
35180: LD_INT 23
35182: PUSH
35183: LD_INT 24
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
35192: GO 35273
35194: LD_INT 53
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 35220
35202: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35203: LD_ADDR_VAR 0 3
35207: PUSH
35208: LD_INT 23
35210: PUSH
35211: LD_INT 24
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: ST_TO_ADDR
35218: GO 35273
35220: LD_INT 46
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35228
35226: GO 35246
35228: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35229: LD_ADDR_VAR 0 3
35233: PUSH
35234: LD_INT 23
35236: PUSH
35237: LD_INT 24
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: ST_TO_ADDR
35244: GO 35273
35246: LD_INT 47
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35254
35252: GO 35272
35254: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_INT 23
35262: PUSH
35263: LD_INT 24
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: ST_TO_ADDR
35270: GO 35273
35272: POP
// result := ( chassis in result ) ;
35273: LD_ADDR_VAR 0 3
35277: PUSH
35278: LD_VAR 0 1
35282: PUSH
35283: LD_VAR 0 3
35287: IN
35288: ST_TO_ADDR
// end ;
35289: LD_VAR 0 3
35293: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
// result := array ;
35303: LD_ADDR_VAR 0 5
35307: PUSH
35308: LD_VAR 0 1
35312: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35313: LD_VAR 0 1
35317: NOT
35318: PUSH
35319: LD_VAR 0 2
35323: NOT
35324: OR
35325: PUSH
35326: LD_VAR 0 3
35330: NOT
35331: OR
35332: PUSH
35333: LD_VAR 0 2
35337: PUSH
35338: LD_VAR 0 1
35342: GREATER
35343: OR
35344: PUSH
35345: LD_VAR 0 3
35349: PUSH
35350: LD_VAR 0 1
35354: GREATER
35355: OR
35356: IFFALSE 35360
// exit ;
35358: GO 35656
// if direction then
35360: LD_VAR 0 4
35364: IFFALSE 35428
// begin d := 1 ;
35366: LD_ADDR_VAR 0 9
35370: PUSH
35371: LD_INT 1
35373: ST_TO_ADDR
// if i_from > i_to then
35374: LD_VAR 0 2
35378: PUSH
35379: LD_VAR 0 3
35383: GREATER
35384: IFFALSE 35410
// length := ( array - i_from ) + i_to else
35386: LD_ADDR_VAR 0 11
35390: PUSH
35391: LD_VAR 0 1
35395: PUSH
35396: LD_VAR 0 2
35400: MINUS
35401: PUSH
35402: LD_VAR 0 3
35406: PLUS
35407: ST_TO_ADDR
35408: GO 35426
// length := i_to - i_from ;
35410: LD_ADDR_VAR 0 11
35414: PUSH
35415: LD_VAR 0 3
35419: PUSH
35420: LD_VAR 0 2
35424: MINUS
35425: ST_TO_ADDR
// end else
35426: GO 35489
// begin d := - 1 ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: ST_TO_ADDR
// if i_from > i_to then
35437: LD_VAR 0 2
35441: PUSH
35442: LD_VAR 0 3
35446: GREATER
35447: IFFALSE 35467
// length := i_from - i_to else
35449: LD_ADDR_VAR 0 11
35453: PUSH
35454: LD_VAR 0 2
35458: PUSH
35459: LD_VAR 0 3
35463: MINUS
35464: ST_TO_ADDR
35465: GO 35489
// length := ( array - i_to ) + i_from ;
35467: LD_ADDR_VAR 0 11
35471: PUSH
35472: LD_VAR 0 1
35476: PUSH
35477: LD_VAR 0 3
35481: MINUS
35482: PUSH
35483: LD_VAR 0 2
35487: PLUS
35488: ST_TO_ADDR
// end ; if not length then
35489: LD_VAR 0 11
35493: NOT
35494: IFFALSE 35498
// exit ;
35496: GO 35656
// tmp := array ;
35498: LD_ADDR_VAR 0 10
35502: PUSH
35503: LD_VAR 0 1
35507: ST_TO_ADDR
// for i = 1 to length do
35508: LD_ADDR_VAR 0 6
35512: PUSH
35513: DOUBLE
35514: LD_INT 1
35516: DEC
35517: ST_TO_ADDR
35518: LD_VAR 0 11
35522: PUSH
35523: FOR_TO
35524: IFFALSE 35644
// begin for j = 1 to array do
35526: LD_ADDR_VAR 0 7
35530: PUSH
35531: DOUBLE
35532: LD_INT 1
35534: DEC
35535: ST_TO_ADDR
35536: LD_VAR 0 1
35540: PUSH
35541: FOR_TO
35542: IFFALSE 35630
// begin k := j + d ;
35544: LD_ADDR_VAR 0 8
35548: PUSH
35549: LD_VAR 0 7
35553: PUSH
35554: LD_VAR 0 9
35558: PLUS
35559: ST_TO_ADDR
// if k > array then
35560: LD_VAR 0 8
35564: PUSH
35565: LD_VAR 0 1
35569: GREATER
35570: IFFALSE 35580
// k := 1 ;
35572: LD_ADDR_VAR 0 8
35576: PUSH
35577: LD_INT 1
35579: ST_TO_ADDR
// if not k then
35580: LD_VAR 0 8
35584: NOT
35585: IFFALSE 35597
// k := array ;
35587: LD_ADDR_VAR 0 8
35591: PUSH
35592: LD_VAR 0 1
35596: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35597: LD_ADDR_VAR 0 10
35601: PUSH
35602: LD_VAR 0 10
35606: PPUSH
35607: LD_VAR 0 8
35611: PPUSH
35612: LD_VAR 0 1
35616: PUSH
35617: LD_VAR 0 7
35621: ARRAY
35622: PPUSH
35623: CALL_OW 1
35627: ST_TO_ADDR
// end ;
35628: GO 35541
35630: POP
35631: POP
// array := tmp ;
35632: LD_ADDR_VAR 0 1
35636: PUSH
35637: LD_VAR 0 10
35641: ST_TO_ADDR
// end ;
35642: GO 35523
35644: POP
35645: POP
// result := array ;
35646: LD_ADDR_VAR 0 5
35650: PUSH
35651: LD_VAR 0 1
35655: ST_TO_ADDR
// end ;
35656: LD_VAR 0 5
35660: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35661: LD_INT 0
35663: PPUSH
35664: PPUSH
// result := 0 ;
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// if not array or not value in array then
35673: LD_VAR 0 1
35677: NOT
35678: PUSH
35679: LD_VAR 0 2
35683: PUSH
35684: LD_VAR 0 1
35688: IN
35689: NOT
35690: OR
35691: IFFALSE 35695
// exit ;
35693: GO 35749
// for i = 1 to array do
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: DOUBLE
35701: LD_INT 1
35703: DEC
35704: ST_TO_ADDR
35705: LD_VAR 0 1
35709: PUSH
35710: FOR_TO
35711: IFFALSE 35747
// if value = array [ i ] then
35713: LD_VAR 0 2
35717: PUSH
35718: LD_VAR 0 1
35722: PUSH
35723: LD_VAR 0 4
35727: ARRAY
35728: EQUAL
35729: IFFALSE 35745
// begin result := i ;
35731: LD_ADDR_VAR 0 3
35735: PUSH
35736: LD_VAR 0 4
35740: ST_TO_ADDR
// exit ;
35741: POP
35742: POP
35743: GO 35749
// end ;
35745: GO 35710
35747: POP
35748: POP
// end ;
35749: LD_VAR 0 3
35753: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35754: LD_INT 0
35756: PPUSH
// vc_chassis := chassis ;
35757: LD_ADDR_OWVAR 37
35761: PUSH
35762: LD_VAR 0 1
35766: ST_TO_ADDR
// vc_engine := engine ;
35767: LD_ADDR_OWVAR 39
35771: PUSH
35772: LD_VAR 0 2
35776: ST_TO_ADDR
// vc_control := control ;
35777: LD_ADDR_OWVAR 38
35781: PUSH
35782: LD_VAR 0 3
35786: ST_TO_ADDR
// vc_weapon := weapon ;
35787: LD_ADDR_OWVAR 40
35791: PUSH
35792: LD_VAR 0 4
35796: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35797: LD_ADDR_OWVAR 41
35801: PUSH
35802: LD_VAR 0 5
35806: ST_TO_ADDR
// end ;
35807: LD_VAR 0 6
35811: RET
// export function WantPlant ( unit ) ; var task ; begin
35812: LD_INT 0
35814: PPUSH
35815: PPUSH
// result := false ;
35816: LD_ADDR_VAR 0 2
35820: PUSH
35821: LD_INT 0
35823: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_VAR 0 1
35833: PPUSH
35834: CALL_OW 437
35838: ST_TO_ADDR
// if task then
35839: LD_VAR 0 3
35843: IFFALSE 35871
// if task [ 1 ] [ 1 ] = p then
35845: LD_VAR 0 3
35849: PUSH
35850: LD_INT 1
35852: ARRAY
35853: PUSH
35854: LD_INT 1
35856: ARRAY
35857: PUSH
35858: LD_STRING p
35860: EQUAL
35861: IFFALSE 35871
// result := true ;
35863: LD_ADDR_VAR 0 2
35867: PUSH
35868: LD_INT 1
35870: ST_TO_ADDR
// end ;
35871: LD_VAR 0 2
35875: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35876: LD_INT 0
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
// if pos < 1 then
35882: LD_VAR 0 2
35886: PUSH
35887: LD_INT 1
35889: LESS
35890: IFFALSE 35894
// exit ;
35892: GO 36197
// if pos = 1 then
35894: LD_VAR 0 2
35898: PUSH
35899: LD_INT 1
35901: EQUAL
35902: IFFALSE 35935
// result := Replace ( arr , pos [ 1 ] , value ) else
35904: LD_ADDR_VAR 0 4
35908: PUSH
35909: LD_VAR 0 1
35913: PPUSH
35914: LD_VAR 0 2
35918: PUSH
35919: LD_INT 1
35921: ARRAY
35922: PPUSH
35923: LD_VAR 0 3
35927: PPUSH
35928: CALL_OW 1
35932: ST_TO_ADDR
35933: GO 36197
// begin tmp := arr ;
35935: LD_ADDR_VAR 0 6
35939: PUSH
35940: LD_VAR 0 1
35944: ST_TO_ADDR
// s_arr := [ tmp ] ;
35945: LD_ADDR_VAR 0 7
35949: PUSH
35950: LD_VAR 0 6
35954: PUSH
35955: EMPTY
35956: LIST
35957: ST_TO_ADDR
// for i = 1 to pos - 1 do
35958: LD_ADDR_VAR 0 5
35962: PUSH
35963: DOUBLE
35964: LD_INT 1
35966: DEC
35967: ST_TO_ADDR
35968: LD_VAR 0 2
35972: PUSH
35973: LD_INT 1
35975: MINUS
35976: PUSH
35977: FOR_TO
35978: IFFALSE 36023
// begin tmp := tmp [ pos [ i ] ] ;
35980: LD_ADDR_VAR 0 6
35984: PUSH
35985: LD_VAR 0 6
35989: PUSH
35990: LD_VAR 0 2
35994: PUSH
35995: LD_VAR 0 5
35999: ARRAY
36000: ARRAY
36001: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36002: LD_ADDR_VAR 0 7
36006: PUSH
36007: LD_VAR 0 7
36011: PUSH
36012: LD_VAR 0 6
36016: PUSH
36017: EMPTY
36018: LIST
36019: ADD
36020: ST_TO_ADDR
// end ;
36021: GO 35977
36023: POP
36024: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36025: LD_ADDR_VAR 0 6
36029: PUSH
36030: LD_VAR 0 6
36034: PPUSH
36035: LD_VAR 0 2
36039: PUSH
36040: LD_VAR 0 2
36044: ARRAY
36045: PPUSH
36046: LD_VAR 0 3
36050: PPUSH
36051: CALL_OW 1
36055: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36056: LD_ADDR_VAR 0 7
36060: PUSH
36061: LD_VAR 0 7
36065: PPUSH
36066: LD_VAR 0 7
36070: PPUSH
36071: LD_VAR 0 6
36075: PPUSH
36076: CALL_OW 1
36080: ST_TO_ADDR
// for i = s_arr downto 2 do
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: DOUBLE
36087: LD_VAR 0 7
36091: INC
36092: ST_TO_ADDR
36093: LD_INT 2
36095: PUSH
36096: FOR_DOWNTO
36097: IFFALSE 36181
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36099: LD_ADDR_VAR 0 6
36103: PUSH
36104: LD_VAR 0 7
36108: PUSH
36109: LD_VAR 0 5
36113: PUSH
36114: LD_INT 1
36116: MINUS
36117: ARRAY
36118: PPUSH
36119: LD_VAR 0 2
36123: PUSH
36124: LD_VAR 0 5
36128: PUSH
36129: LD_INT 1
36131: MINUS
36132: ARRAY
36133: PPUSH
36134: LD_VAR 0 7
36138: PUSH
36139: LD_VAR 0 5
36143: ARRAY
36144: PPUSH
36145: CALL_OW 1
36149: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36150: LD_ADDR_VAR 0 7
36154: PUSH
36155: LD_VAR 0 7
36159: PPUSH
36160: LD_VAR 0 5
36164: PUSH
36165: LD_INT 1
36167: MINUS
36168: PPUSH
36169: LD_VAR 0 6
36173: PPUSH
36174: CALL_OW 1
36178: ST_TO_ADDR
// end ;
36179: GO 36096
36181: POP
36182: POP
// result := s_arr [ 1 ] ;
36183: LD_ADDR_VAR 0 4
36187: PUSH
36188: LD_VAR 0 7
36192: PUSH
36193: LD_INT 1
36195: ARRAY
36196: ST_TO_ADDR
// end ; end ;
36197: LD_VAR 0 4
36201: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36202: LD_INT 0
36204: PPUSH
36205: PPUSH
// if not list then
36206: LD_VAR 0 1
36210: NOT
36211: IFFALSE 36215
// exit ;
36213: GO 36306
// i := list [ pos1 ] ;
36215: LD_ADDR_VAR 0 5
36219: PUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_VAR 0 2
36229: ARRAY
36230: ST_TO_ADDR
// if not i then
36231: LD_VAR 0 5
36235: NOT
36236: IFFALSE 36240
// exit ;
36238: GO 36306
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36240: LD_ADDR_VAR 0 1
36244: PUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: LD_VAR 0 2
36254: PPUSH
36255: LD_VAR 0 1
36259: PUSH
36260: LD_VAR 0 3
36264: ARRAY
36265: PPUSH
36266: CALL_OW 1
36270: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36271: LD_ADDR_VAR 0 1
36275: PUSH
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_VAR 0 3
36285: PPUSH
36286: LD_VAR 0 5
36290: PPUSH
36291: CALL_OW 1
36295: ST_TO_ADDR
// result := list ;
36296: LD_ADDR_VAR 0 4
36300: PUSH
36301: LD_VAR 0 1
36305: ST_TO_ADDR
// end ;
36306: LD_VAR 0 4
36310: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36311: LD_INT 0
36313: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL_OW 250
36328: PPUSH
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 251
36338: PPUSH
36339: LD_VAR 0 2
36343: PPUSH
36344: LD_VAR 0 3
36348: PPUSH
36349: LD_VAR 0 4
36353: PPUSH
36354: CALL 36364 0 5
36358: ST_TO_ADDR
// end ;
36359: LD_VAR 0 5
36363: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36364: LD_INT 0
36366: PPUSH
36367: PPUSH
36368: PPUSH
36369: PPUSH
// if not list then
36370: LD_VAR 0 3
36374: NOT
36375: IFFALSE 36379
// exit ;
36377: GO 36767
// result := [ ] ;
36379: LD_ADDR_VAR 0 6
36383: PUSH
36384: EMPTY
36385: ST_TO_ADDR
// for i in list do
36386: LD_ADDR_VAR 0 7
36390: PUSH
36391: LD_VAR 0 3
36395: PUSH
36396: FOR_IN
36397: IFFALSE 36599
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_VAR 0 7
36408: PPUSH
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_VAR 0 2
36418: PPUSH
36419: CALL_OW 297
36423: ST_TO_ADDR
// if not result then
36424: LD_VAR 0 6
36428: NOT
36429: IFFALSE 36455
// result := [ [ i , tmp ] ] else
36431: LD_ADDR_VAR 0 6
36435: PUSH
36436: LD_VAR 0 7
36440: PUSH
36441: LD_VAR 0 9
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: ST_TO_ADDR
36453: GO 36597
// begin if result [ result ] [ 2 ] < tmp then
36455: LD_VAR 0 6
36459: PUSH
36460: LD_VAR 0 6
36464: ARRAY
36465: PUSH
36466: LD_INT 2
36468: ARRAY
36469: PUSH
36470: LD_VAR 0 9
36474: LESS
36475: IFFALSE 36517
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36477: LD_ADDR_VAR 0 6
36481: PUSH
36482: LD_VAR 0 6
36486: PPUSH
36487: LD_VAR 0 6
36491: PUSH
36492: LD_INT 1
36494: PLUS
36495: PPUSH
36496: LD_VAR 0 7
36500: PUSH
36501: LD_VAR 0 9
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PPUSH
36510: CALL_OW 2
36514: ST_TO_ADDR
36515: GO 36597
// for j = 1 to result do
36517: LD_ADDR_VAR 0 8
36521: PUSH
36522: DOUBLE
36523: LD_INT 1
36525: DEC
36526: ST_TO_ADDR
36527: LD_VAR 0 6
36531: PUSH
36532: FOR_TO
36533: IFFALSE 36595
// begin if tmp < result [ j ] [ 2 ] then
36535: LD_VAR 0 9
36539: PUSH
36540: LD_VAR 0 6
36544: PUSH
36545: LD_VAR 0 8
36549: ARRAY
36550: PUSH
36551: LD_INT 2
36553: ARRAY
36554: LESS
36555: IFFALSE 36593
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36557: LD_ADDR_VAR 0 6
36561: PUSH
36562: LD_VAR 0 6
36566: PPUSH
36567: LD_VAR 0 8
36571: PPUSH
36572: LD_VAR 0 7
36576: PUSH
36577: LD_VAR 0 9
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PPUSH
36586: CALL_OW 2
36590: ST_TO_ADDR
// break ;
36591: GO 36595
// end ; end ;
36593: GO 36532
36595: POP
36596: POP
// end ; end ;
36597: GO 36396
36599: POP
36600: POP
// if result and not asc then
36601: LD_VAR 0 6
36605: PUSH
36606: LD_VAR 0 4
36610: NOT
36611: AND
36612: IFFALSE 36687
// begin tmp := result ;
36614: LD_ADDR_VAR 0 9
36618: PUSH
36619: LD_VAR 0 6
36623: ST_TO_ADDR
// for i = tmp downto 1 do
36624: LD_ADDR_VAR 0 7
36628: PUSH
36629: DOUBLE
36630: LD_VAR 0 9
36634: INC
36635: ST_TO_ADDR
36636: LD_INT 1
36638: PUSH
36639: FOR_DOWNTO
36640: IFFALSE 36685
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36642: LD_ADDR_VAR 0 6
36646: PUSH
36647: LD_VAR 0 6
36651: PPUSH
36652: LD_VAR 0 9
36656: PUSH
36657: LD_VAR 0 7
36661: MINUS
36662: PUSH
36663: LD_INT 1
36665: PLUS
36666: PPUSH
36667: LD_VAR 0 9
36671: PUSH
36672: LD_VAR 0 7
36676: ARRAY
36677: PPUSH
36678: CALL_OW 1
36682: ST_TO_ADDR
36683: GO 36639
36685: POP
36686: POP
// end ; tmp := [ ] ;
36687: LD_ADDR_VAR 0 9
36691: PUSH
36692: EMPTY
36693: ST_TO_ADDR
// if mode then
36694: LD_VAR 0 5
36698: IFFALSE 36767
// begin for i = 1 to result do
36700: LD_ADDR_VAR 0 7
36704: PUSH
36705: DOUBLE
36706: LD_INT 1
36708: DEC
36709: ST_TO_ADDR
36710: LD_VAR 0 6
36714: PUSH
36715: FOR_TO
36716: IFFALSE 36755
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36718: LD_ADDR_VAR 0 9
36722: PUSH
36723: LD_VAR 0 9
36727: PPUSH
36728: LD_VAR 0 7
36732: PPUSH
36733: LD_VAR 0 6
36737: PUSH
36738: LD_VAR 0 7
36742: ARRAY
36743: PUSH
36744: LD_INT 1
36746: ARRAY
36747: PPUSH
36748: CALL_OW 1
36752: ST_TO_ADDR
36753: GO 36715
36755: POP
36756: POP
// result := tmp ;
36757: LD_ADDR_VAR 0 6
36761: PUSH
36762: LD_VAR 0 9
36766: ST_TO_ADDR
// end ; end ;
36767: LD_VAR 0 6
36771: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36772: LD_INT 0
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36780: LD_ADDR_VAR 0 5
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: ST_TO_ADDR
// if not x or not y then
36802: LD_VAR 0 2
36806: NOT
36807: PUSH
36808: LD_VAR 0 3
36812: NOT
36813: OR
36814: IFFALSE 36818
// exit ;
36816: GO 38470
// if not range then
36818: LD_VAR 0 4
36822: NOT
36823: IFFALSE 36833
// range := 10 ;
36825: LD_ADDR_VAR 0 4
36829: PUSH
36830: LD_INT 10
36832: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36833: LD_ADDR_VAR 0 8
36837: PUSH
36838: LD_INT 81
36840: PUSH
36841: LD_VAR 0 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 92
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_VAR 0 3
36862: PUSH
36863: LD_VAR 0 4
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: LD_INT 21
36879: PUSH
36880: LD_INT 3
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: PPUSH
36896: CALL_OW 69
36900: ST_TO_ADDR
// if not tmp then
36901: LD_VAR 0 8
36905: NOT
36906: IFFALSE 36910
// exit ;
36908: GO 38470
// for i in tmp do
36910: LD_ADDR_VAR 0 6
36914: PUSH
36915: LD_VAR 0 8
36919: PUSH
36920: FOR_IN
36921: IFFALSE 38445
// begin points := [ 0 , 0 , 0 ] ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// bpoints := 1 ;
36942: LD_ADDR_VAR 0 10
36946: PUSH
36947: LD_INT 1
36949: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36950: LD_VAR 0 6
36954: PPUSH
36955: CALL_OW 247
36959: PUSH
36960: LD_INT 1
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36968
36966: GO 37546
36968: POP
// begin if GetClass ( i ) = 1 then
36969: LD_VAR 0 6
36973: PPUSH
36974: CALL_OW 257
36978: PUSH
36979: LD_INT 1
36981: EQUAL
36982: IFFALSE 37003
// points := [ 10 , 5 , 3 ] ;
36984: LD_ADDR_VAR 0 9
36988: PUSH
36989: LD_INT 10
36991: PUSH
36992: LD_INT 5
36994: PUSH
36995: LD_INT 3
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37003: LD_VAR 0 6
37007: PPUSH
37008: CALL_OW 257
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: LD_INT 4
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: IN
37027: IFFALSE 37048
// points := [ 3 , 2 , 1 ] ;
37029: LD_ADDR_VAR 0 9
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37048: LD_VAR 0 6
37052: PPUSH
37053: CALL_OW 257
37057: PUSH
37058: LD_INT 5
37060: EQUAL
37061: IFFALSE 37082
// points := [ 130 , 5 , 2 ] ;
37063: LD_ADDR_VAR 0 9
37067: PUSH
37068: LD_INT 130
37070: PUSH
37071: LD_INT 5
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37082: LD_VAR 0 6
37086: PPUSH
37087: CALL_OW 257
37091: PUSH
37092: LD_INT 8
37094: EQUAL
37095: IFFALSE 37116
// points := [ 35 , 35 , 30 ] ;
37097: LD_ADDR_VAR 0 9
37101: PUSH
37102: LD_INT 35
37104: PUSH
37105: LD_INT 35
37107: PUSH
37108: LD_INT 30
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37116: LD_VAR 0 6
37120: PPUSH
37121: CALL_OW 257
37125: PUSH
37126: LD_INT 9
37128: EQUAL
37129: IFFALSE 37150
// points := [ 20 , 55 , 40 ] ;
37131: LD_ADDR_VAR 0 9
37135: PUSH
37136: LD_INT 20
37138: PUSH
37139: LD_INT 55
37141: PUSH
37142: LD_INT 40
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37150: LD_VAR 0 6
37154: PPUSH
37155: CALL_OW 257
37159: PUSH
37160: LD_INT 12
37162: PUSH
37163: LD_INT 16
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: IN
37170: IFFALSE 37191
// points := [ 5 , 3 , 2 ] ;
37172: LD_ADDR_VAR 0 9
37176: PUSH
37177: LD_INT 5
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37191: LD_VAR 0 6
37195: PPUSH
37196: CALL_OW 257
37200: PUSH
37201: LD_INT 17
37203: EQUAL
37204: IFFALSE 37225
// points := [ 100 , 50 , 75 ] ;
37206: LD_ADDR_VAR 0 9
37210: PUSH
37211: LD_INT 100
37213: PUSH
37214: LD_INT 50
37216: PUSH
37217: LD_INT 75
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37225: LD_VAR 0 6
37229: PPUSH
37230: CALL_OW 257
37234: PUSH
37235: LD_INT 15
37237: EQUAL
37238: IFFALSE 37259
// points := [ 10 , 5 , 3 ] ;
37240: LD_ADDR_VAR 0 9
37244: PUSH
37245: LD_INT 10
37247: PUSH
37248: LD_INT 5
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37259: LD_VAR 0 6
37263: PPUSH
37264: CALL_OW 257
37268: PUSH
37269: LD_INT 14
37271: EQUAL
37272: IFFALSE 37293
// points := [ 10 , 0 , 0 ] ;
37274: LD_ADDR_VAR 0 9
37278: PUSH
37279: LD_INT 10
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37293: LD_VAR 0 6
37297: PPUSH
37298: CALL_OW 257
37302: PUSH
37303: LD_INT 11
37305: EQUAL
37306: IFFALSE 37327
// points := [ 30 , 10 , 5 ] ;
37308: LD_ADDR_VAR 0 9
37312: PUSH
37313: LD_INT 30
37315: PUSH
37316: LD_INT 10
37318: PUSH
37319: LD_INT 5
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37327: LD_VAR 0 1
37331: PPUSH
37332: LD_INT 5
37334: PPUSH
37335: CALL_OW 321
37339: PUSH
37340: LD_INT 2
37342: EQUAL
37343: IFFALSE 37360
// bpoints := bpoints * 1.8 ;
37345: LD_ADDR_VAR 0 10
37349: PUSH
37350: LD_VAR 0 10
37354: PUSH
37355: LD_REAL  1.80000000000000E+0000
37358: MUL
37359: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37360: LD_VAR 0 6
37364: PPUSH
37365: CALL_OW 257
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: LD_INT 3
37378: PUSH
37379: LD_INT 4
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: IN
37388: PUSH
37389: LD_VAR 0 1
37393: PPUSH
37394: LD_INT 51
37396: PPUSH
37397: CALL_OW 321
37401: PUSH
37402: LD_INT 2
37404: EQUAL
37405: AND
37406: IFFALSE 37423
// bpoints := bpoints * 1.2 ;
37408: LD_ADDR_VAR 0 10
37412: PUSH
37413: LD_VAR 0 10
37417: PUSH
37418: LD_REAL  1.20000000000000E+0000
37421: MUL
37422: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37423: LD_VAR 0 6
37427: PPUSH
37428: CALL_OW 257
37432: PUSH
37433: LD_INT 5
37435: PUSH
37436: LD_INT 7
37438: PUSH
37439: LD_INT 9
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: IN
37447: PUSH
37448: LD_VAR 0 1
37452: PPUSH
37453: LD_INT 52
37455: PPUSH
37456: CALL_OW 321
37460: PUSH
37461: LD_INT 2
37463: EQUAL
37464: AND
37465: IFFALSE 37482
// bpoints := bpoints * 1.5 ;
37467: LD_ADDR_VAR 0 10
37471: PUSH
37472: LD_VAR 0 10
37476: PUSH
37477: LD_REAL  1.50000000000000E+0000
37480: MUL
37481: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37482: LD_VAR 0 1
37486: PPUSH
37487: LD_INT 66
37489: PPUSH
37490: CALL_OW 321
37494: PUSH
37495: LD_INT 2
37497: EQUAL
37498: IFFALSE 37515
// bpoints := bpoints * 1.1 ;
37500: LD_ADDR_VAR 0 10
37504: PUSH
37505: LD_VAR 0 10
37509: PUSH
37510: LD_REAL  1.10000000000000E+0000
37513: MUL
37514: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37515: LD_ADDR_VAR 0 10
37519: PUSH
37520: LD_VAR 0 10
37524: PUSH
37525: LD_VAR 0 6
37529: PPUSH
37530: LD_INT 1
37532: PPUSH
37533: CALL_OW 259
37537: PUSH
37538: LD_REAL  1.15000000000000E+0000
37541: MUL
37542: MUL
37543: ST_TO_ADDR
// end ; unit_vehicle :
37544: GO 38374
37546: LD_INT 2
37548: DOUBLE
37549: EQUAL
37550: IFTRUE 37554
37552: GO 38362
37554: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37555: LD_VAR 0 6
37559: PPUSH
37560: CALL_OW 264
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 42
37570: PUSH
37571: LD_INT 24
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: IN
37579: IFFALSE 37600
// points := [ 25 , 5 , 3 ] ;
37581: LD_ADDR_VAR 0 9
37585: PUSH
37586: LD_INT 25
37588: PUSH
37589: LD_INT 5
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37600: LD_VAR 0 6
37604: PPUSH
37605: CALL_OW 264
37609: PUSH
37610: LD_INT 4
37612: PUSH
37613: LD_INT 43
37615: PUSH
37616: LD_INT 25
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: IN
37624: IFFALSE 37645
// points := [ 40 , 15 , 5 ] ;
37626: LD_ADDR_VAR 0 9
37630: PUSH
37631: LD_INT 40
37633: PUSH
37634: LD_INT 15
37636: PUSH
37637: LD_INT 5
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37645: LD_VAR 0 6
37649: PPUSH
37650: CALL_OW 264
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: LD_INT 23
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: IN
37665: IFFALSE 37686
// points := [ 7 , 25 , 8 ] ;
37667: LD_ADDR_VAR 0 9
37671: PUSH
37672: LD_INT 7
37674: PUSH
37675: LD_INT 25
37677: PUSH
37678: LD_INT 8
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37686: LD_VAR 0 6
37690: PPUSH
37691: CALL_OW 264
37695: PUSH
37696: LD_INT 5
37698: PUSH
37699: LD_INT 27
37701: PUSH
37702: LD_INT 44
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: IN
37710: IFFALSE 37731
// points := [ 14 , 50 , 16 ] ;
37712: LD_ADDR_VAR 0 9
37716: PUSH
37717: LD_INT 14
37719: PUSH
37720: LD_INT 50
37722: PUSH
37723: LD_INT 16
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37731: LD_VAR 0 6
37735: PPUSH
37736: CALL_OW 264
37740: PUSH
37741: LD_INT 6
37743: PUSH
37744: LD_INT 46
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: IN
37751: IFFALSE 37772
// points := [ 32 , 120 , 70 ] ;
37753: LD_ADDR_VAR 0 9
37757: PUSH
37758: LD_INT 32
37760: PUSH
37761: LD_INT 120
37763: PUSH
37764: LD_INT 70
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37772: LD_VAR 0 6
37776: PPUSH
37777: CALL_OW 264
37781: PUSH
37782: LD_INT 7
37784: PUSH
37785: LD_INT 28
37787: PUSH
37788: LD_INT 45
37790: PUSH
37791: LD_EXP 48
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: IN
37802: IFFALSE 37823
// points := [ 35 , 20 , 45 ] ;
37804: LD_ADDR_VAR 0 9
37808: PUSH
37809: LD_INT 35
37811: PUSH
37812: LD_INT 20
37814: PUSH
37815: LD_INT 45
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37823: LD_VAR 0 6
37827: PPUSH
37828: CALL_OW 264
37832: PUSH
37833: LD_INT 47
37835: PUSH
37836: EMPTY
37837: LIST
37838: IN
37839: IFFALSE 37860
// points := [ 67 , 45 , 75 ] ;
37841: LD_ADDR_VAR 0 9
37845: PUSH
37846: LD_INT 67
37848: PUSH
37849: LD_INT 45
37851: PUSH
37852: LD_INT 75
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37860: LD_VAR 0 6
37864: PPUSH
37865: CALL_OW 264
37869: PUSH
37870: LD_INT 26
37872: PUSH
37873: EMPTY
37874: LIST
37875: IN
37876: IFFALSE 37897
// points := [ 120 , 30 , 80 ] ;
37878: LD_ADDR_VAR 0 9
37882: PUSH
37883: LD_INT 120
37885: PUSH
37886: LD_INT 30
37888: PUSH
37889: LD_INT 80
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37897: LD_VAR 0 6
37901: PPUSH
37902: CALL_OW 264
37906: PUSH
37907: LD_INT 22
37909: PUSH
37910: EMPTY
37911: LIST
37912: IN
37913: IFFALSE 37934
// points := [ 40 , 1 , 1 ] ;
37915: LD_ADDR_VAR 0 9
37919: PUSH
37920: LD_INT 40
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37934: LD_VAR 0 6
37938: PPUSH
37939: CALL_OW 264
37943: PUSH
37944: LD_INT 29
37946: PUSH
37947: EMPTY
37948: LIST
37949: IN
37950: IFFALSE 37971
// points := [ 70 , 200 , 400 ] ;
37952: LD_ADDR_VAR 0 9
37956: PUSH
37957: LD_INT 70
37959: PUSH
37960: LD_INT 200
37962: PUSH
37963: LD_INT 400
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37971: LD_VAR 0 6
37975: PPUSH
37976: CALL_OW 264
37980: PUSH
37981: LD_INT 14
37983: PUSH
37984: LD_INT 53
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: IN
37991: IFFALSE 38012
// points := [ 40 , 10 , 20 ] ;
37993: LD_ADDR_VAR 0 9
37997: PUSH
37998: LD_INT 40
38000: PUSH
38001: LD_INT 10
38003: PUSH
38004: LD_INT 20
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38012: LD_VAR 0 6
38016: PPUSH
38017: CALL_OW 264
38021: PUSH
38022: LD_INT 9
38024: PUSH
38025: EMPTY
38026: LIST
38027: IN
38028: IFFALSE 38049
// points := [ 5 , 70 , 20 ] ;
38030: LD_ADDR_VAR 0 9
38034: PUSH
38035: LD_INT 5
38037: PUSH
38038: LD_INT 70
38040: PUSH
38041: LD_INT 20
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38049: LD_VAR 0 6
38053: PPUSH
38054: CALL_OW 264
38058: PUSH
38059: LD_INT 10
38061: PUSH
38062: EMPTY
38063: LIST
38064: IN
38065: IFFALSE 38086
// points := [ 35 , 110 , 70 ] ;
38067: LD_ADDR_VAR 0 9
38071: PUSH
38072: LD_INT 35
38074: PUSH
38075: LD_INT 110
38077: PUSH
38078: LD_INT 70
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38086: LD_VAR 0 6
38090: PPUSH
38091: CALL_OW 265
38095: PUSH
38096: LD_INT 25
38098: EQUAL
38099: IFFALSE 38120
// points := [ 80 , 65 , 100 ] ;
38101: LD_ADDR_VAR 0 9
38105: PUSH
38106: LD_INT 80
38108: PUSH
38109: LD_INT 65
38111: PUSH
38112: LD_INT 100
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38120: LD_VAR 0 6
38124: PPUSH
38125: CALL_OW 263
38129: PUSH
38130: LD_INT 1
38132: EQUAL
38133: IFFALSE 38168
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38135: LD_ADDR_VAR 0 10
38139: PUSH
38140: LD_VAR 0 10
38144: PUSH
38145: LD_VAR 0 6
38149: PPUSH
38150: CALL_OW 311
38154: PPUSH
38155: LD_INT 3
38157: PPUSH
38158: CALL_OW 259
38162: PUSH
38163: LD_INT 4
38165: MUL
38166: MUL
38167: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38168: LD_VAR 0 6
38172: PPUSH
38173: CALL_OW 263
38177: PUSH
38178: LD_INT 2
38180: EQUAL
38181: IFFALSE 38232
// begin j := IsControledBy ( i ) ;
38183: LD_ADDR_VAR 0 7
38187: PUSH
38188: LD_VAR 0 6
38192: PPUSH
38193: CALL_OW 312
38197: ST_TO_ADDR
// if j then
38198: LD_VAR 0 7
38202: IFFALSE 38232
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38204: LD_ADDR_VAR 0 10
38208: PUSH
38209: LD_VAR 0 10
38213: PUSH
38214: LD_VAR 0 7
38218: PPUSH
38219: LD_INT 3
38221: PPUSH
38222: CALL_OW 259
38226: PUSH
38227: LD_INT 3
38229: MUL
38230: MUL
38231: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38232: LD_VAR 0 6
38236: PPUSH
38237: CALL_OW 264
38241: PUSH
38242: LD_INT 5
38244: PUSH
38245: LD_INT 6
38247: PUSH
38248: LD_INT 46
38250: PUSH
38251: LD_INT 44
38253: PUSH
38254: LD_INT 47
38256: PUSH
38257: LD_INT 45
38259: PUSH
38260: LD_INT 28
38262: PUSH
38263: LD_INT 7
38265: PUSH
38266: LD_INT 27
38268: PUSH
38269: LD_INT 29
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: IN
38284: PUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: LD_INT 52
38292: PPUSH
38293: CALL_OW 321
38297: PUSH
38298: LD_INT 2
38300: EQUAL
38301: AND
38302: IFFALSE 38319
// bpoints := bpoints * 1.2 ;
38304: LD_ADDR_VAR 0 10
38308: PUSH
38309: LD_VAR 0 10
38313: PUSH
38314: LD_REAL  1.20000000000000E+0000
38317: MUL
38318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38319: LD_VAR 0 6
38323: PPUSH
38324: CALL_OW 264
38328: PUSH
38329: LD_INT 6
38331: PUSH
38332: LD_INT 46
38334: PUSH
38335: LD_INT 47
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: IN
38343: IFFALSE 38360
// bpoints := bpoints * 1.2 ;
38345: LD_ADDR_VAR 0 10
38349: PUSH
38350: LD_VAR 0 10
38354: PUSH
38355: LD_REAL  1.20000000000000E+0000
38358: MUL
38359: ST_TO_ADDR
// end ; unit_building :
38360: GO 38374
38362: LD_INT 3
38364: DOUBLE
38365: EQUAL
38366: IFTRUE 38370
38368: GO 38373
38370: POP
// ; end ;
38371: GO 38374
38373: POP
// for j = 1 to 3 do
38374: LD_ADDR_VAR 0 7
38378: PUSH
38379: DOUBLE
38380: LD_INT 1
38382: DEC
38383: ST_TO_ADDR
38384: LD_INT 3
38386: PUSH
38387: FOR_TO
38388: IFFALSE 38441
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38390: LD_ADDR_VAR 0 5
38394: PUSH
38395: LD_VAR 0 5
38399: PPUSH
38400: LD_VAR 0 7
38404: PPUSH
38405: LD_VAR 0 5
38409: PUSH
38410: LD_VAR 0 7
38414: ARRAY
38415: PUSH
38416: LD_VAR 0 9
38420: PUSH
38421: LD_VAR 0 7
38425: ARRAY
38426: PUSH
38427: LD_VAR 0 10
38431: MUL
38432: PLUS
38433: PPUSH
38434: CALL_OW 1
38438: ST_TO_ADDR
38439: GO 38387
38441: POP
38442: POP
// end ;
38443: GO 36920
38445: POP
38446: POP
// result := Replace ( result , 4 , tmp ) ;
38447: LD_ADDR_VAR 0 5
38451: PUSH
38452: LD_VAR 0 5
38456: PPUSH
38457: LD_INT 4
38459: PPUSH
38460: LD_VAR 0 8
38464: PPUSH
38465: CALL_OW 1
38469: ST_TO_ADDR
// end ;
38470: LD_VAR 0 5
38474: RET
// export function DangerAtRange ( unit , range ) ; begin
38475: LD_INT 0
38477: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38478: LD_ADDR_VAR 0 3
38482: PUSH
38483: LD_VAR 0 1
38487: PPUSH
38488: CALL_OW 255
38492: PPUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 250
38502: PPUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 251
38512: PPUSH
38513: LD_VAR 0 2
38517: PPUSH
38518: CALL 36772 0 4
38522: ST_TO_ADDR
// end ;
38523: LD_VAR 0 3
38527: RET
// export function DangerInArea ( side , area ) ; begin
38528: LD_INT 0
38530: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_INT 81
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PPUSH
38553: CALL_OW 70
38557: ST_TO_ADDR
// end ;
38558: LD_VAR 0 3
38562: RET
// export function IsExtension ( b ) ; begin
38563: LD_INT 0
38565: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38566: LD_ADDR_VAR 0 2
38570: PUSH
38571: LD_VAR 0 1
38575: PUSH
38576: LD_INT 23
38578: PUSH
38579: LD_INT 20
38581: PUSH
38582: LD_INT 22
38584: PUSH
38585: LD_INT 17
38587: PUSH
38588: LD_INT 24
38590: PUSH
38591: LD_INT 21
38593: PUSH
38594: LD_INT 19
38596: PUSH
38597: LD_INT 16
38599: PUSH
38600: LD_INT 25
38602: PUSH
38603: LD_INT 18
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: IN
38618: ST_TO_ADDR
// end ;
38619: LD_VAR 0 2
38623: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38624: LD_INT 0
38626: PPUSH
38627: PPUSH
38628: PPUSH
// result := [ ] ;
38629: LD_ADDR_VAR 0 4
38633: PUSH
38634: EMPTY
38635: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38636: LD_ADDR_VAR 0 5
38640: PUSH
38641: LD_VAR 0 2
38645: PPUSH
38646: LD_INT 21
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PPUSH
38656: CALL_OW 70
38660: ST_TO_ADDR
// if not tmp then
38661: LD_VAR 0 5
38665: NOT
38666: IFFALSE 38670
// exit ;
38668: GO 38734
// if checkLink then
38670: LD_VAR 0 3
38674: IFFALSE 38724
// begin for i in tmp do
38676: LD_ADDR_VAR 0 6
38680: PUSH
38681: LD_VAR 0 5
38685: PUSH
38686: FOR_IN
38687: IFFALSE 38722
// if GetBase ( i ) <> base then
38689: LD_VAR 0 6
38693: PPUSH
38694: CALL_OW 274
38698: PUSH
38699: LD_VAR 0 1
38703: NONEQUAL
38704: IFFALSE 38720
// ComLinkToBase ( base , i ) ;
38706: LD_VAR 0 1
38710: PPUSH
38711: LD_VAR 0 6
38715: PPUSH
38716: CALL_OW 169
38720: GO 38686
38722: POP
38723: POP
// end ; result := tmp ;
38724: LD_ADDR_VAR 0 4
38728: PUSH
38729: LD_VAR 0 5
38733: ST_TO_ADDR
// end ;
38734: LD_VAR 0 4
38738: RET
// export function ComComplete ( units , b ) ; var i ; begin
38739: LD_INT 0
38741: PPUSH
38742: PPUSH
// if not units then
38743: LD_VAR 0 1
38747: NOT
38748: IFFALSE 38752
// exit ;
38750: GO 38842
// for i in units do
38752: LD_ADDR_VAR 0 4
38756: PUSH
38757: LD_VAR 0 1
38761: PUSH
38762: FOR_IN
38763: IFFALSE 38840
// if BuildingStatus ( b ) = bs_build then
38765: LD_VAR 0 2
38769: PPUSH
38770: CALL_OW 461
38774: PUSH
38775: LD_INT 1
38777: EQUAL
38778: IFFALSE 38838
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38780: LD_VAR 0 4
38784: PPUSH
38785: LD_STRING h
38787: PUSH
38788: LD_VAR 0 2
38792: PPUSH
38793: CALL_OW 250
38797: PUSH
38798: LD_VAR 0 2
38802: PPUSH
38803: CALL_OW 251
38807: PUSH
38808: LD_VAR 0 2
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: PPUSH
38834: CALL_OW 446
38838: GO 38762
38840: POP
38841: POP
// end ;
38842: LD_VAR 0 3
38846: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38847: LD_INT 0
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
38854: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38855: LD_VAR 0 1
38859: NOT
38860: PUSH
38861: LD_VAR 0 1
38865: PPUSH
38866: CALL_OW 263
38870: PUSH
38871: LD_INT 2
38873: NONEQUAL
38874: OR
38875: IFFALSE 38879
// exit ;
38877: GO 39195
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38879: LD_ADDR_VAR 0 6
38883: PUSH
38884: LD_INT 22
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: CALL_OW 255
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 30
38906: PUSH
38907: LD_INT 36
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 34
38916: PUSH
38917: LD_INT 31
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PPUSH
38933: CALL_OW 69
38937: ST_TO_ADDR
// if not tmp then
38938: LD_VAR 0 6
38942: NOT
38943: IFFALSE 38947
// exit ;
38945: GO 39195
// result := [ ] ;
38947: LD_ADDR_VAR 0 2
38951: PUSH
38952: EMPTY
38953: ST_TO_ADDR
// for i in tmp do
38954: LD_ADDR_VAR 0 3
38958: PUSH
38959: LD_VAR 0 6
38963: PUSH
38964: FOR_IN
38965: IFFALSE 39036
// begin t := UnitsInside ( i ) ;
38967: LD_ADDR_VAR 0 4
38971: PUSH
38972: LD_VAR 0 3
38976: PPUSH
38977: CALL_OW 313
38981: ST_TO_ADDR
// if t then
38982: LD_VAR 0 4
38986: IFFALSE 39034
// for j in t do
38988: LD_ADDR_VAR 0 7
38992: PUSH
38993: LD_VAR 0 4
38997: PUSH
38998: FOR_IN
38999: IFFALSE 39032
// result := Replace ( result , result + 1 , j ) ;
39001: LD_ADDR_VAR 0 2
39005: PUSH
39006: LD_VAR 0 2
39010: PPUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 1
39018: PLUS
39019: PPUSH
39020: LD_VAR 0 7
39024: PPUSH
39025: CALL_OW 1
39029: ST_TO_ADDR
39030: GO 38998
39032: POP
39033: POP
// end ;
39034: GO 38964
39036: POP
39037: POP
// if not result then
39038: LD_VAR 0 2
39042: NOT
39043: IFFALSE 39047
// exit ;
39045: GO 39195
// mech := result [ 1 ] ;
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: LD_VAR 0 2
39056: PUSH
39057: LD_INT 1
39059: ARRAY
39060: ST_TO_ADDR
// if result > 1 then
39061: LD_VAR 0 2
39065: PUSH
39066: LD_INT 1
39068: GREATER
39069: IFFALSE 39181
// begin for i = 2 to result do
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: DOUBLE
39077: LD_INT 2
39079: DEC
39080: ST_TO_ADDR
39081: LD_VAR 0 2
39085: PUSH
39086: FOR_TO
39087: IFFALSE 39179
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39089: LD_ADDR_VAR 0 4
39093: PUSH
39094: LD_VAR 0 2
39098: PUSH
39099: LD_VAR 0 3
39103: ARRAY
39104: PPUSH
39105: LD_INT 3
39107: PPUSH
39108: CALL_OW 259
39112: PUSH
39113: LD_VAR 0 2
39117: PUSH
39118: LD_VAR 0 3
39122: ARRAY
39123: PPUSH
39124: CALL_OW 432
39128: MINUS
39129: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39130: LD_VAR 0 4
39134: PUSH
39135: LD_VAR 0 5
39139: PPUSH
39140: LD_INT 3
39142: PPUSH
39143: CALL_OW 259
39147: PUSH
39148: LD_VAR 0 5
39152: PPUSH
39153: CALL_OW 432
39157: MINUS
39158: GREATEREQUAL
39159: IFFALSE 39177
// mech := result [ i ] ;
39161: LD_ADDR_VAR 0 5
39165: PUSH
39166: LD_VAR 0 2
39170: PUSH
39171: LD_VAR 0 3
39175: ARRAY
39176: ST_TO_ADDR
// end ;
39177: GO 39086
39179: POP
39180: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39181: LD_VAR 0 1
39185: PPUSH
39186: LD_VAR 0 5
39190: PPUSH
39191: CALL_OW 135
// end ;
39195: LD_VAR 0 2
39199: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39200: LD_INT 0
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
// result := [ ] ;
39215: LD_ADDR_VAR 0 7
39219: PUSH
39220: EMPTY
39221: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 266
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: IN
39242: NOT
39243: IFFALSE 39247
// exit ;
39245: GO 40881
// if name then
39247: LD_VAR 0 3
39251: IFFALSE 39267
// SetBName ( base_dep , name ) ;
39253: LD_VAR 0 1
39257: PPUSH
39258: LD_VAR 0 3
39262: PPUSH
39263: CALL_OW 500
// base := GetBase ( base_dep ) ;
39267: LD_ADDR_VAR 0 15
39271: PUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 274
39281: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39282: LD_ADDR_VAR 0 16
39286: PUSH
39287: LD_VAR 0 1
39291: PPUSH
39292: CALL_OW 255
39296: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39297: LD_ADDR_VAR 0 17
39301: PUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 248
39311: ST_TO_ADDR
// if sources then
39312: LD_VAR 0 5
39316: IFFALSE 39363
// for i = 1 to 3 do
39318: LD_ADDR_VAR 0 8
39322: PUSH
39323: DOUBLE
39324: LD_INT 1
39326: DEC
39327: ST_TO_ADDR
39328: LD_INT 3
39330: PUSH
39331: FOR_TO
39332: IFFALSE 39361
// AddResourceType ( base , i , sources [ i ] ) ;
39334: LD_VAR 0 15
39338: PPUSH
39339: LD_VAR 0 8
39343: PPUSH
39344: LD_VAR 0 5
39348: PUSH
39349: LD_VAR 0 8
39353: ARRAY
39354: PPUSH
39355: CALL_OW 276
39359: GO 39331
39361: POP
39362: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39363: LD_ADDR_VAR 0 18
39367: PUSH
39368: LD_VAR 0 15
39372: PPUSH
39373: LD_VAR 0 2
39377: PPUSH
39378: LD_INT 1
39380: PPUSH
39381: CALL 38624 0 3
39385: ST_TO_ADDR
// InitHc ;
39386: CALL_OW 19
// InitUc ;
39390: CALL_OW 18
// uc_side := side ;
39394: LD_ADDR_OWVAR 20
39398: PUSH
39399: LD_VAR 0 16
39403: ST_TO_ADDR
// uc_nation := nation ;
39404: LD_ADDR_OWVAR 21
39408: PUSH
39409: LD_VAR 0 17
39413: ST_TO_ADDR
// if buildings then
39414: LD_VAR 0 18
39418: IFFALSE 40740
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39420: LD_ADDR_VAR 0 19
39424: PUSH
39425: LD_VAR 0 18
39429: PPUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 30
39435: PUSH
39436: LD_INT 29
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 30
39445: PUSH
39446: LD_INT 30
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: PPUSH
39458: CALL_OW 72
39462: ST_TO_ADDR
// if tmp then
39463: LD_VAR 0 19
39467: IFFALSE 39515
// for i in tmp do
39469: LD_ADDR_VAR 0 8
39473: PUSH
39474: LD_VAR 0 19
39478: PUSH
39479: FOR_IN
39480: IFFALSE 39513
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39482: LD_VAR 0 8
39486: PPUSH
39487: CALL_OW 250
39491: PPUSH
39492: LD_VAR 0 8
39496: PPUSH
39497: CALL_OW 251
39501: PPUSH
39502: LD_VAR 0 16
39506: PPUSH
39507: CALL_OW 441
39511: GO 39479
39513: POP
39514: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39515: LD_VAR 0 18
39519: PPUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 30
39525: PUSH
39526: LD_INT 32
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 30
39535: PUSH
39536: LD_INT 33
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PPUSH
39548: CALL_OW 72
39552: IFFALSE 39640
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39554: LD_ADDR_VAR 0 8
39558: PUSH
39559: LD_VAR 0 18
39563: PPUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 30
39569: PUSH
39570: LD_INT 32
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 30
39579: PUSH
39580: LD_INT 33
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PPUSH
39592: CALL_OW 72
39596: PUSH
39597: FOR_IN
39598: IFFALSE 39638
// begin if not GetBWeapon ( i ) then
39600: LD_VAR 0 8
39604: PPUSH
39605: CALL_OW 269
39609: NOT
39610: IFFALSE 39636
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39612: LD_VAR 0 8
39616: PPUSH
39617: LD_VAR 0 8
39621: PPUSH
39622: LD_VAR 0 2
39626: PPUSH
39627: CALL 40886 0 2
39631: PPUSH
39632: CALL_OW 431
// end ;
39636: GO 39597
39638: POP
39639: POP
// end ; for i = 1 to personel do
39640: LD_ADDR_VAR 0 8
39644: PUSH
39645: DOUBLE
39646: LD_INT 1
39648: DEC
39649: ST_TO_ADDR
39650: LD_VAR 0 6
39654: PUSH
39655: FOR_TO
39656: IFFALSE 40720
// begin if i > 4 then
39658: LD_VAR 0 8
39662: PUSH
39663: LD_INT 4
39665: GREATER
39666: IFFALSE 39670
// break ;
39668: GO 40720
// case i of 1 :
39670: LD_VAR 0 8
39674: PUSH
39675: LD_INT 1
39677: DOUBLE
39678: EQUAL
39679: IFTRUE 39683
39681: GO 39763
39683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39684: LD_ADDR_VAR 0 12
39688: PUSH
39689: LD_VAR 0 18
39693: PPUSH
39694: LD_INT 22
39696: PUSH
39697: LD_VAR 0 16
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 58
39708: PUSH
39709: EMPTY
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 30
39717: PUSH
39718: LD_INT 32
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 30
39727: PUSH
39728: LD_INT 4
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 30
39737: PUSH
39738: LD_INT 5
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: PPUSH
39756: CALL_OW 72
39760: ST_TO_ADDR
39761: GO 39985
39763: LD_INT 2
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39833
39771: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39772: LD_ADDR_VAR 0 12
39776: PUSH
39777: LD_VAR 0 18
39781: PPUSH
39782: LD_INT 22
39784: PUSH
39785: LD_VAR 0 16
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 30
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 30
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PPUSH
39826: CALL_OW 72
39830: ST_TO_ADDR
39831: GO 39985
39833: LD_INT 3
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39841
39839: GO 39903
39841: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39842: LD_ADDR_VAR 0 12
39846: PUSH
39847: LD_VAR 0 18
39851: PPUSH
39852: LD_INT 22
39854: PUSH
39855: LD_VAR 0 16
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 30
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 30
39879: PUSH
39880: LD_INT 3
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PPUSH
39896: CALL_OW 72
39900: ST_TO_ADDR
39901: GO 39985
39903: LD_INT 4
39905: DOUBLE
39906: EQUAL
39907: IFTRUE 39911
39909: GO 39984
39911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39912: LD_ADDR_VAR 0 12
39916: PUSH
39917: LD_VAR 0 18
39921: PPUSH
39922: LD_INT 22
39924: PUSH
39925: LD_VAR 0 16
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 30
39939: PUSH
39940: LD_INT 6
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 30
39949: PUSH
39950: LD_INT 7
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 30
39959: PUSH
39960: LD_INT 8
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PPUSH
39977: CALL_OW 72
39981: ST_TO_ADDR
39982: GO 39985
39984: POP
// if i = 1 then
39985: LD_VAR 0 8
39989: PUSH
39990: LD_INT 1
39992: EQUAL
39993: IFFALSE 40104
// begin tmp := [ ] ;
39995: LD_ADDR_VAR 0 19
39999: PUSH
40000: EMPTY
40001: ST_TO_ADDR
// for j in f do
40002: LD_ADDR_VAR 0 9
40006: PUSH
40007: LD_VAR 0 12
40011: PUSH
40012: FOR_IN
40013: IFFALSE 40086
// if GetBType ( j ) = b_bunker then
40015: LD_VAR 0 9
40019: PPUSH
40020: CALL_OW 266
40024: PUSH
40025: LD_INT 32
40027: EQUAL
40028: IFFALSE 40055
// tmp := Insert ( tmp , 1 , j ) else
40030: LD_ADDR_VAR 0 19
40034: PUSH
40035: LD_VAR 0 19
40039: PPUSH
40040: LD_INT 1
40042: PPUSH
40043: LD_VAR 0 9
40047: PPUSH
40048: CALL_OW 2
40052: ST_TO_ADDR
40053: GO 40084
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40055: LD_ADDR_VAR 0 19
40059: PUSH
40060: LD_VAR 0 19
40064: PPUSH
40065: LD_VAR 0 19
40069: PUSH
40070: LD_INT 1
40072: PLUS
40073: PPUSH
40074: LD_VAR 0 9
40078: PPUSH
40079: CALL_OW 2
40083: ST_TO_ADDR
40084: GO 40012
40086: POP
40087: POP
// if tmp then
40088: LD_VAR 0 19
40092: IFFALSE 40104
// f := tmp ;
40094: LD_ADDR_VAR 0 12
40098: PUSH
40099: LD_VAR 0 19
40103: ST_TO_ADDR
// end ; x := personel [ i ] ;
40104: LD_ADDR_VAR 0 13
40108: PUSH
40109: LD_VAR 0 6
40113: PUSH
40114: LD_VAR 0 8
40118: ARRAY
40119: ST_TO_ADDR
// if x = - 1 then
40120: LD_VAR 0 13
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: EQUAL
40129: IFFALSE 40338
// begin for j in f do
40131: LD_ADDR_VAR 0 9
40135: PUSH
40136: LD_VAR 0 12
40140: PUSH
40141: FOR_IN
40142: IFFALSE 40334
// repeat InitHc ;
40144: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40148: LD_VAR 0 9
40152: PPUSH
40153: CALL_OW 266
40157: PUSH
40158: LD_INT 5
40160: EQUAL
40161: IFFALSE 40231
// begin if UnitsInside ( j ) < 3 then
40163: LD_VAR 0 9
40167: PPUSH
40168: CALL_OW 313
40172: PUSH
40173: LD_INT 3
40175: LESS
40176: IFFALSE 40212
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40178: LD_INT 0
40180: PPUSH
40181: LD_INT 5
40183: PUSH
40184: LD_INT 8
40186: PUSH
40187: LD_INT 9
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: PUSH
40195: LD_VAR 0 17
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 4
40205: PPUSH
40206: CALL_OW 380
40210: GO 40229
// PrepareHuman ( false , i , skill ) ;
40212: LD_INT 0
40214: PPUSH
40215: LD_VAR 0 8
40219: PPUSH
40220: LD_VAR 0 4
40224: PPUSH
40225: CALL_OW 380
// end else
40229: GO 40248
// PrepareHuman ( false , i , skill ) ;
40231: LD_INT 0
40233: PPUSH
40234: LD_VAR 0 8
40238: PPUSH
40239: LD_VAR 0 4
40243: PPUSH
40244: CALL_OW 380
// un := CreateHuman ;
40248: LD_ADDR_VAR 0 14
40252: PUSH
40253: CALL_OW 44
40257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40258: LD_ADDR_VAR 0 7
40262: PUSH
40263: LD_VAR 0 7
40267: PPUSH
40268: LD_INT 1
40270: PPUSH
40271: LD_VAR 0 14
40275: PPUSH
40276: CALL_OW 2
40280: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40281: LD_VAR 0 14
40285: PPUSH
40286: LD_VAR 0 9
40290: PPUSH
40291: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40295: LD_VAR 0 9
40299: PPUSH
40300: CALL_OW 313
40304: PUSH
40305: LD_INT 6
40307: EQUAL
40308: PUSH
40309: LD_VAR 0 9
40313: PPUSH
40314: CALL_OW 266
40318: PUSH
40319: LD_INT 32
40321: PUSH
40322: LD_INT 31
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: IN
40329: OR
40330: IFFALSE 40144
40332: GO 40141
40334: POP
40335: POP
// end else
40336: GO 40718
// for j = 1 to x do
40338: LD_ADDR_VAR 0 9
40342: PUSH
40343: DOUBLE
40344: LD_INT 1
40346: DEC
40347: ST_TO_ADDR
40348: LD_VAR 0 13
40352: PUSH
40353: FOR_TO
40354: IFFALSE 40716
// begin InitHc ;
40356: CALL_OW 19
// if not f then
40360: LD_VAR 0 12
40364: NOT
40365: IFFALSE 40454
// begin PrepareHuman ( false , i , skill ) ;
40367: LD_INT 0
40369: PPUSH
40370: LD_VAR 0 8
40374: PPUSH
40375: LD_VAR 0 4
40379: PPUSH
40380: CALL_OW 380
// un := CreateHuman ;
40384: LD_ADDR_VAR 0 14
40388: PUSH
40389: CALL_OW 44
40393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40394: LD_ADDR_VAR 0 7
40398: PUSH
40399: LD_VAR 0 7
40403: PPUSH
40404: LD_INT 1
40406: PPUSH
40407: LD_VAR 0 14
40411: PPUSH
40412: CALL_OW 2
40416: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40417: LD_VAR 0 14
40421: PPUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 250
40431: PPUSH
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 251
40441: PPUSH
40442: LD_INT 10
40444: PPUSH
40445: LD_INT 0
40447: PPUSH
40448: CALL_OW 50
// continue ;
40452: GO 40353
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40454: LD_VAR 0 12
40458: PUSH
40459: LD_INT 1
40461: ARRAY
40462: PPUSH
40463: CALL_OW 313
40467: PUSH
40468: LD_VAR 0 12
40472: PUSH
40473: LD_INT 1
40475: ARRAY
40476: PPUSH
40477: CALL_OW 266
40481: PUSH
40482: LD_INT 32
40484: PUSH
40485: LD_INT 31
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: IN
40492: AND
40493: PUSH
40494: LD_VAR 0 12
40498: PUSH
40499: LD_INT 1
40501: ARRAY
40502: PPUSH
40503: CALL_OW 313
40507: PUSH
40508: LD_INT 6
40510: EQUAL
40511: OR
40512: IFFALSE 40532
// f := Delete ( f , 1 ) ;
40514: LD_ADDR_VAR 0 12
40518: PUSH
40519: LD_VAR 0 12
40523: PPUSH
40524: LD_INT 1
40526: PPUSH
40527: CALL_OW 3
40531: ST_TO_ADDR
// if not f then
40532: LD_VAR 0 12
40536: NOT
40537: IFFALSE 40555
// begin x := x + 2 ;
40539: LD_ADDR_VAR 0 13
40543: PUSH
40544: LD_VAR 0 13
40548: PUSH
40549: LD_INT 2
40551: PLUS
40552: ST_TO_ADDR
// continue ;
40553: GO 40353
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40555: LD_VAR 0 12
40559: PUSH
40560: LD_INT 1
40562: ARRAY
40563: PPUSH
40564: CALL_OW 266
40568: PUSH
40569: LD_INT 5
40571: EQUAL
40572: IFFALSE 40646
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40574: LD_VAR 0 12
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: PPUSH
40583: CALL_OW 313
40587: PUSH
40588: LD_INT 3
40590: LESS
40591: IFFALSE 40627
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40593: LD_INT 0
40595: PPUSH
40596: LD_INT 5
40598: PUSH
40599: LD_INT 8
40601: PUSH
40602: LD_INT 9
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: PUSH
40610: LD_VAR 0 17
40614: ARRAY
40615: PPUSH
40616: LD_VAR 0 4
40620: PPUSH
40621: CALL_OW 380
40625: GO 40644
// PrepareHuman ( false , i , skill ) ;
40627: LD_INT 0
40629: PPUSH
40630: LD_VAR 0 8
40634: PPUSH
40635: LD_VAR 0 4
40639: PPUSH
40640: CALL_OW 380
// end else
40644: GO 40663
// PrepareHuman ( false , i , skill ) ;
40646: LD_INT 0
40648: PPUSH
40649: LD_VAR 0 8
40653: PPUSH
40654: LD_VAR 0 4
40658: PPUSH
40659: CALL_OW 380
// un := CreateHuman ;
40663: LD_ADDR_VAR 0 14
40667: PUSH
40668: CALL_OW 44
40672: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40673: LD_ADDR_VAR 0 7
40677: PUSH
40678: LD_VAR 0 7
40682: PPUSH
40683: LD_INT 1
40685: PPUSH
40686: LD_VAR 0 14
40690: PPUSH
40691: CALL_OW 2
40695: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40696: LD_VAR 0 14
40700: PPUSH
40701: LD_VAR 0 12
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: PPUSH
40710: CALL_OW 52
// end ;
40714: GO 40353
40716: POP
40717: POP
// end ;
40718: GO 39655
40720: POP
40721: POP
// result := result ^ buildings ;
40722: LD_ADDR_VAR 0 7
40726: PUSH
40727: LD_VAR 0 7
40731: PUSH
40732: LD_VAR 0 18
40736: ADD
40737: ST_TO_ADDR
// end else
40738: GO 40881
// begin for i = 1 to personel do
40740: LD_ADDR_VAR 0 8
40744: PUSH
40745: DOUBLE
40746: LD_INT 1
40748: DEC
40749: ST_TO_ADDR
40750: LD_VAR 0 6
40754: PUSH
40755: FOR_TO
40756: IFFALSE 40879
// begin if i > 4 then
40758: LD_VAR 0 8
40762: PUSH
40763: LD_INT 4
40765: GREATER
40766: IFFALSE 40770
// break ;
40768: GO 40879
// x := personel [ i ] ;
40770: LD_ADDR_VAR 0 13
40774: PUSH
40775: LD_VAR 0 6
40779: PUSH
40780: LD_VAR 0 8
40784: ARRAY
40785: ST_TO_ADDR
// if x = - 1 then
40786: LD_VAR 0 13
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: EQUAL
40795: IFFALSE 40799
// continue ;
40797: GO 40755
// PrepareHuman ( false , i , skill ) ;
40799: LD_INT 0
40801: PPUSH
40802: LD_VAR 0 8
40806: PPUSH
40807: LD_VAR 0 4
40811: PPUSH
40812: CALL_OW 380
// un := CreateHuman ;
40816: LD_ADDR_VAR 0 14
40820: PUSH
40821: CALL_OW 44
40825: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40826: LD_VAR 0 14
40830: PPUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 250
40840: PPUSH
40841: LD_VAR 0 1
40845: PPUSH
40846: CALL_OW 251
40850: PPUSH
40851: LD_INT 10
40853: PPUSH
40854: LD_INT 0
40856: PPUSH
40857: CALL_OW 50
// result := result ^ un ;
40861: LD_ADDR_VAR 0 7
40865: PUSH
40866: LD_VAR 0 7
40870: PUSH
40871: LD_VAR 0 14
40875: ADD
40876: ST_TO_ADDR
// end ;
40877: GO 40755
40879: POP
40880: POP
// end ; end ;
40881: LD_VAR 0 7
40885: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40886: LD_INT 0
40888: PPUSH
40889: PPUSH
40890: PPUSH
40891: PPUSH
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
40896: PPUSH
40897: PPUSH
40898: PPUSH
40899: PPUSH
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
// result := false ;
40904: LD_ADDR_VAR 0 3
40908: PUSH
40909: LD_INT 0
40911: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40912: LD_VAR 0 1
40916: NOT
40917: PUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 266
40927: PUSH
40928: LD_INT 32
40930: PUSH
40931: LD_INT 33
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: IN
40938: NOT
40939: OR
40940: IFFALSE 40944
// exit ;
40942: GO 42053
// nat := GetNation ( tower ) ;
40944: LD_ADDR_VAR 0 12
40948: PUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: CALL_OW 248
40958: ST_TO_ADDR
// side := GetSide ( tower ) ;
40959: LD_ADDR_VAR 0 16
40963: PUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 255
40973: ST_TO_ADDR
// x := GetX ( tower ) ;
40974: LD_ADDR_VAR 0 10
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 250
40988: ST_TO_ADDR
// y := GetY ( tower ) ;
40989: LD_ADDR_VAR 0 11
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 251
41003: ST_TO_ADDR
// if not x or not y then
41004: LD_VAR 0 10
41008: NOT
41009: PUSH
41010: LD_VAR 0 11
41014: NOT
41015: OR
41016: IFFALSE 41020
// exit ;
41018: GO 42053
// weapon := 0 ;
41020: LD_ADDR_VAR 0 18
41024: PUSH
41025: LD_INT 0
41027: ST_TO_ADDR
// fac_list := [ ] ;
41028: LD_ADDR_VAR 0 17
41032: PUSH
41033: EMPTY
41034: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41035: LD_ADDR_VAR 0 6
41039: PUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 274
41049: PPUSH
41050: LD_VAR 0 2
41054: PPUSH
41055: LD_INT 0
41057: PPUSH
41058: CALL 38624 0 3
41062: PPUSH
41063: LD_INT 30
41065: PUSH
41066: LD_INT 3
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PPUSH
41073: CALL_OW 72
41077: ST_TO_ADDR
// if not factories then
41078: LD_VAR 0 6
41082: NOT
41083: IFFALSE 41087
// exit ;
41085: GO 42053
// for i in factories do
41087: LD_ADDR_VAR 0 8
41091: PUSH
41092: LD_VAR 0 6
41096: PUSH
41097: FOR_IN
41098: IFFALSE 41123
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41100: LD_ADDR_VAR 0 17
41104: PUSH
41105: LD_VAR 0 17
41109: PUSH
41110: LD_VAR 0 8
41114: PPUSH
41115: CALL_OW 478
41119: UNION
41120: ST_TO_ADDR
41121: GO 41097
41123: POP
41124: POP
// if not fac_list then
41125: LD_VAR 0 17
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 42053
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_INT 4
41141: PUSH
41142: LD_INT 5
41144: PUSH
41145: LD_INT 9
41147: PUSH
41148: LD_INT 10
41150: PUSH
41151: LD_INT 6
41153: PUSH
41154: LD_INT 7
41156: PUSH
41157: LD_INT 11
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 27
41171: PUSH
41172: LD_INT 28
41174: PUSH
41175: LD_INT 26
41177: PUSH
41178: LD_INT 30
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 43
41189: PUSH
41190: LD_INT 44
41192: PUSH
41193: LD_INT 46
41195: PUSH
41196: LD_INT 45
41198: PUSH
41199: LD_INT 47
41201: PUSH
41202: LD_INT 49
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: PUSH
41218: LD_VAR 0 12
41222: ARRAY
41223: ST_TO_ADDR
// list := list isect fac_list ;
41224: LD_ADDR_VAR 0 5
41228: PUSH
41229: LD_VAR 0 5
41233: PUSH
41234: LD_VAR 0 17
41238: ISECT
41239: ST_TO_ADDR
// if not list then
41240: LD_VAR 0 5
41244: NOT
41245: IFFALSE 41249
// exit ;
41247: GO 42053
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41249: LD_VAR 0 12
41253: PUSH
41254: LD_INT 3
41256: EQUAL
41257: PUSH
41258: LD_INT 49
41260: PUSH
41261: LD_VAR 0 5
41265: IN
41266: AND
41267: PUSH
41268: LD_INT 31
41270: PPUSH
41271: LD_VAR 0 16
41275: PPUSH
41276: CALL_OW 321
41280: PUSH
41281: LD_INT 2
41283: EQUAL
41284: AND
41285: IFFALSE 41345
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41287: LD_INT 22
41289: PUSH
41290: LD_VAR 0 16
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 35
41301: PUSH
41302: LD_INT 49
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 91
41311: PUSH
41312: LD_VAR 0 1
41316: PUSH
41317: LD_INT 10
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: PPUSH
41330: CALL_OW 69
41334: NOT
41335: IFFALSE 41345
// weapon := ru_time_lapser ;
41337: LD_ADDR_VAR 0 18
41341: PUSH
41342: LD_INT 49
41344: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41345: LD_VAR 0 12
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: IN
41360: PUSH
41361: LD_INT 11
41363: PUSH
41364: LD_VAR 0 5
41368: IN
41369: PUSH
41370: LD_INT 30
41372: PUSH
41373: LD_VAR 0 5
41377: IN
41378: OR
41379: AND
41380: PUSH
41381: LD_INT 6
41383: PPUSH
41384: LD_VAR 0 16
41388: PPUSH
41389: CALL_OW 321
41393: PUSH
41394: LD_INT 2
41396: EQUAL
41397: AND
41398: IFFALSE 41563
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41400: LD_INT 22
41402: PUSH
41403: LD_VAR 0 16
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 35
41417: PUSH
41418: LD_INT 11
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 35
41427: PUSH
41428: LD_INT 30
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 91
41442: PUSH
41443: LD_VAR 0 1
41447: PUSH
41448: LD_INT 18
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: PPUSH
41461: CALL_OW 69
41465: NOT
41466: PUSH
41467: LD_INT 22
41469: PUSH
41470: LD_VAR 0 16
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: LD_INT 30
41484: PUSH
41485: LD_INT 32
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 30
41494: PUSH
41495: LD_INT 33
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 91
41509: PUSH
41510: LD_VAR 0 1
41514: PUSH
41515: LD_INT 12
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: PUSH
41528: EMPTY
41529: LIST
41530: PPUSH
41531: CALL_OW 69
41535: PUSH
41536: LD_INT 2
41538: GREATER
41539: AND
41540: IFFALSE 41563
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41542: LD_ADDR_VAR 0 18
41546: PUSH
41547: LD_INT 11
41549: PUSH
41550: LD_INT 30
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_VAR 0 12
41561: ARRAY
41562: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41563: LD_VAR 0 18
41567: NOT
41568: PUSH
41569: LD_INT 40
41571: PPUSH
41572: LD_VAR 0 16
41576: PPUSH
41577: CALL_OW 321
41581: PUSH
41582: LD_INT 2
41584: EQUAL
41585: AND
41586: PUSH
41587: LD_INT 7
41589: PUSH
41590: LD_VAR 0 5
41594: IN
41595: PUSH
41596: LD_INT 28
41598: PUSH
41599: LD_VAR 0 5
41603: IN
41604: OR
41605: PUSH
41606: LD_INT 45
41608: PUSH
41609: LD_VAR 0 5
41613: IN
41614: OR
41615: AND
41616: IFFALSE 41870
// begin hex := GetHexInfo ( x , y ) ;
41618: LD_ADDR_VAR 0 4
41622: PUSH
41623: LD_VAR 0 10
41627: PPUSH
41628: LD_VAR 0 11
41632: PPUSH
41633: CALL_OW 546
41637: ST_TO_ADDR
// if hex [ 1 ] then
41638: LD_VAR 0 4
41642: PUSH
41643: LD_INT 1
41645: ARRAY
41646: IFFALSE 41650
// exit ;
41648: GO 42053
// height := hex [ 2 ] ;
41650: LD_ADDR_VAR 0 15
41654: PUSH
41655: LD_VAR 0 4
41659: PUSH
41660: LD_INT 2
41662: ARRAY
41663: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41664: LD_ADDR_VAR 0 14
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: LD_INT 3
41677: PUSH
41678: LD_INT 5
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// for i in tmp do
41687: LD_ADDR_VAR 0 8
41691: PUSH
41692: LD_VAR 0 14
41696: PUSH
41697: FOR_IN
41698: IFFALSE 41868
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41700: LD_ADDR_VAR 0 9
41704: PUSH
41705: LD_VAR 0 10
41709: PPUSH
41710: LD_VAR 0 8
41714: PPUSH
41715: LD_INT 5
41717: PPUSH
41718: CALL_OW 272
41722: PUSH
41723: LD_VAR 0 11
41727: PPUSH
41728: LD_VAR 0 8
41732: PPUSH
41733: LD_INT 5
41735: PPUSH
41736: CALL_OW 273
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41745: LD_VAR 0 9
41749: PUSH
41750: LD_INT 1
41752: ARRAY
41753: PPUSH
41754: LD_VAR 0 9
41758: PUSH
41759: LD_INT 2
41761: ARRAY
41762: PPUSH
41763: CALL_OW 488
41767: IFFALSE 41866
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41769: LD_ADDR_VAR 0 4
41773: PUSH
41774: LD_VAR 0 9
41778: PUSH
41779: LD_INT 1
41781: ARRAY
41782: PPUSH
41783: LD_VAR 0 9
41787: PUSH
41788: LD_INT 2
41790: ARRAY
41791: PPUSH
41792: CALL_OW 546
41796: ST_TO_ADDR
// if hex [ 1 ] then
41797: LD_VAR 0 4
41801: PUSH
41802: LD_INT 1
41804: ARRAY
41805: IFFALSE 41809
// continue ;
41807: GO 41697
// h := hex [ 2 ] ;
41809: LD_ADDR_VAR 0 13
41813: PUSH
41814: LD_VAR 0 4
41818: PUSH
41819: LD_INT 2
41821: ARRAY
41822: ST_TO_ADDR
// if h + 7 < height then
41823: LD_VAR 0 13
41827: PUSH
41828: LD_INT 7
41830: PLUS
41831: PUSH
41832: LD_VAR 0 15
41836: LESS
41837: IFFALSE 41866
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41839: LD_ADDR_VAR 0 18
41843: PUSH
41844: LD_INT 7
41846: PUSH
41847: LD_INT 28
41849: PUSH
41850: LD_INT 45
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: PUSH
41858: LD_VAR 0 12
41862: ARRAY
41863: ST_TO_ADDR
// break ;
41864: GO 41868
// end ; end ; end ;
41866: GO 41697
41868: POP
41869: POP
// end ; if not weapon then
41870: LD_VAR 0 18
41874: NOT
41875: IFFALSE 41935
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41877: LD_ADDR_VAR 0 5
41881: PUSH
41882: LD_VAR 0 5
41886: PUSH
41887: LD_INT 11
41889: PUSH
41890: LD_INT 30
41892: PUSH
41893: LD_INT 49
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: DIFF
41901: ST_TO_ADDR
// if not list then
41902: LD_VAR 0 5
41906: NOT
41907: IFFALSE 41911
// exit ;
41909: GO 42053
// weapon := list [ rand ( 1 , list ) ] ;
41911: LD_ADDR_VAR 0 18
41915: PUSH
41916: LD_VAR 0 5
41920: PUSH
41921: LD_INT 1
41923: PPUSH
41924: LD_VAR 0 5
41928: PPUSH
41929: CALL_OW 12
41933: ARRAY
41934: ST_TO_ADDR
// end ; if weapon then
41935: LD_VAR 0 18
41939: IFFALSE 42053
// begin tmp := CostOfWeapon ( weapon ) ;
41941: LD_ADDR_VAR 0 14
41945: PUSH
41946: LD_VAR 0 18
41950: PPUSH
41951: CALL_OW 451
41955: ST_TO_ADDR
// j := GetBase ( tower ) ;
41956: LD_ADDR_VAR 0 9
41960: PUSH
41961: LD_VAR 0 1
41965: PPUSH
41966: CALL_OW 274
41970: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41971: LD_VAR 0 9
41975: PPUSH
41976: LD_INT 1
41978: PPUSH
41979: CALL_OW 275
41983: PUSH
41984: LD_VAR 0 14
41988: PUSH
41989: LD_INT 1
41991: ARRAY
41992: GREATEREQUAL
41993: PUSH
41994: LD_VAR 0 9
41998: PPUSH
41999: LD_INT 2
42001: PPUSH
42002: CALL_OW 275
42006: PUSH
42007: LD_VAR 0 14
42011: PUSH
42012: LD_INT 2
42014: ARRAY
42015: GREATEREQUAL
42016: AND
42017: PUSH
42018: LD_VAR 0 9
42022: PPUSH
42023: LD_INT 3
42025: PPUSH
42026: CALL_OW 275
42030: PUSH
42031: LD_VAR 0 14
42035: PUSH
42036: LD_INT 3
42038: ARRAY
42039: GREATEREQUAL
42040: AND
42041: IFFALSE 42053
// result := weapon ;
42043: LD_ADDR_VAR 0 3
42047: PUSH
42048: LD_VAR 0 18
42052: ST_TO_ADDR
// end ; end ;
42053: LD_VAR 0 3
42057: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42058: LD_INT 0
42060: PPUSH
42061: PPUSH
// result := true ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_INT 1
42069: ST_TO_ADDR
// if array1 = array2 then
42070: LD_VAR 0 1
42074: PUSH
42075: LD_VAR 0 2
42079: EQUAL
42080: IFFALSE 42140
// begin for i = 1 to array1 do
42082: LD_ADDR_VAR 0 4
42086: PUSH
42087: DOUBLE
42088: LD_INT 1
42090: DEC
42091: ST_TO_ADDR
42092: LD_VAR 0 1
42096: PUSH
42097: FOR_TO
42098: IFFALSE 42136
// if array1 [ i ] <> array2 [ i ] then
42100: LD_VAR 0 1
42104: PUSH
42105: LD_VAR 0 4
42109: ARRAY
42110: PUSH
42111: LD_VAR 0 2
42115: PUSH
42116: LD_VAR 0 4
42120: ARRAY
42121: NONEQUAL
42122: IFFALSE 42134
// begin result := false ;
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_INT 0
42131: ST_TO_ADDR
// break ;
42132: GO 42136
// end ;
42134: GO 42097
42136: POP
42137: POP
// end else
42138: GO 42148
// result := false ;
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_INT 0
42147: ST_TO_ADDR
// end ;
42148: LD_VAR 0 3
42152: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42153: LD_INT 0
42155: PPUSH
42156: PPUSH
// if not array1 or not array2 then
42157: LD_VAR 0 1
42161: NOT
42162: PUSH
42163: LD_VAR 0 2
42167: NOT
42168: OR
42169: IFFALSE 42173
// exit ;
42171: GO 42237
// result := true ;
42173: LD_ADDR_VAR 0 3
42177: PUSH
42178: LD_INT 1
42180: ST_TO_ADDR
// for i = 1 to array1 do
42181: LD_ADDR_VAR 0 4
42185: PUSH
42186: DOUBLE
42187: LD_INT 1
42189: DEC
42190: ST_TO_ADDR
42191: LD_VAR 0 1
42195: PUSH
42196: FOR_TO
42197: IFFALSE 42235
// if array1 [ i ] <> array2 [ i ] then
42199: LD_VAR 0 1
42203: PUSH
42204: LD_VAR 0 4
42208: ARRAY
42209: PUSH
42210: LD_VAR 0 2
42214: PUSH
42215: LD_VAR 0 4
42219: ARRAY
42220: NONEQUAL
42221: IFFALSE 42233
// begin result := false ;
42223: LD_ADDR_VAR 0 3
42227: PUSH
42228: LD_INT 0
42230: ST_TO_ADDR
// break ;
42231: GO 42235
// end ;
42233: GO 42196
42235: POP
42236: POP
// end ;
42237: LD_VAR 0 3
42241: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42242: LD_INT 0
42244: PPUSH
42245: PPUSH
42246: PPUSH
// pom := GetBase ( fac ) ;
42247: LD_ADDR_VAR 0 5
42251: PUSH
42252: LD_VAR 0 1
42256: PPUSH
42257: CALL_OW 274
42261: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42262: LD_ADDR_VAR 0 4
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: LD_INT 1
42274: ARRAY
42275: PPUSH
42276: LD_VAR 0 2
42280: PUSH
42281: LD_INT 2
42283: ARRAY
42284: PPUSH
42285: LD_VAR 0 2
42289: PUSH
42290: LD_INT 3
42292: ARRAY
42293: PPUSH
42294: LD_VAR 0 2
42298: PUSH
42299: LD_INT 4
42301: ARRAY
42302: PPUSH
42303: CALL_OW 449
42307: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42308: LD_ADDR_VAR 0 3
42312: PUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: LD_INT 1
42320: PPUSH
42321: CALL_OW 275
42325: PUSH
42326: LD_VAR 0 4
42330: PUSH
42331: LD_INT 1
42333: ARRAY
42334: GREATEREQUAL
42335: PUSH
42336: LD_VAR 0 5
42340: PPUSH
42341: LD_INT 2
42343: PPUSH
42344: CALL_OW 275
42348: PUSH
42349: LD_VAR 0 4
42353: PUSH
42354: LD_INT 2
42356: ARRAY
42357: GREATEREQUAL
42358: AND
42359: PUSH
42360: LD_VAR 0 5
42364: PPUSH
42365: LD_INT 3
42367: PPUSH
42368: CALL_OW 275
42372: PUSH
42373: LD_VAR 0 4
42377: PUSH
42378: LD_INT 3
42380: ARRAY
42381: GREATEREQUAL
42382: AND
42383: ST_TO_ADDR
// end ;
42384: LD_VAR 0 3
42388: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42389: LD_INT 0
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
// pom := GetBase ( building ) ;
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_VAR 0 1
42404: PPUSH
42405: CALL_OW 274
42409: ST_TO_ADDR
// if not pom then
42410: LD_VAR 0 3
42414: NOT
42415: IFFALSE 42419
// exit ;
42417: GO 42589
// btype := GetBType ( building ) ;
42419: LD_ADDR_VAR 0 5
42423: PUSH
42424: LD_VAR 0 1
42428: PPUSH
42429: CALL_OW 266
42433: ST_TO_ADDR
// if btype = b_armoury then
42434: LD_VAR 0 5
42438: PUSH
42439: LD_INT 4
42441: EQUAL
42442: IFFALSE 42452
// btype := b_barracks ;
42444: LD_ADDR_VAR 0 5
42448: PUSH
42449: LD_INT 5
42451: ST_TO_ADDR
// if btype = b_depot then
42452: LD_VAR 0 5
42456: PUSH
42457: LD_INT 0
42459: EQUAL
42460: IFFALSE 42470
// btype := b_warehouse ;
42462: LD_ADDR_VAR 0 5
42466: PUSH
42467: LD_INT 1
42469: ST_TO_ADDR
// if btype = b_workshop then
42470: LD_VAR 0 5
42474: PUSH
42475: LD_INT 2
42477: EQUAL
42478: IFFALSE 42488
// btype := b_factory ;
42480: LD_ADDR_VAR 0 5
42484: PUSH
42485: LD_INT 3
42487: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42488: LD_ADDR_VAR 0 4
42492: PUSH
42493: LD_VAR 0 5
42497: PPUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 248
42507: PPUSH
42508: CALL_OW 450
42512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42513: LD_ADDR_VAR 0 2
42517: PUSH
42518: LD_VAR 0 3
42522: PPUSH
42523: LD_INT 1
42525: PPUSH
42526: CALL_OW 275
42530: PUSH
42531: LD_VAR 0 4
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: GREATEREQUAL
42540: PUSH
42541: LD_VAR 0 3
42545: PPUSH
42546: LD_INT 2
42548: PPUSH
42549: CALL_OW 275
42553: PUSH
42554: LD_VAR 0 4
42558: PUSH
42559: LD_INT 2
42561: ARRAY
42562: GREATEREQUAL
42563: AND
42564: PUSH
42565: LD_VAR 0 3
42569: PPUSH
42570: LD_INT 3
42572: PPUSH
42573: CALL_OW 275
42577: PUSH
42578: LD_VAR 0 4
42582: PUSH
42583: LD_INT 3
42585: ARRAY
42586: GREATEREQUAL
42587: AND
42588: ST_TO_ADDR
// end ;
42589: LD_VAR 0 2
42593: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42594: LD_INT 0
42596: PPUSH
42597: PPUSH
42598: PPUSH
// pom := GetBase ( building ) ;
42599: LD_ADDR_VAR 0 4
42603: PUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 274
42613: ST_TO_ADDR
// if not pom then
42614: LD_VAR 0 4
42618: NOT
42619: IFFALSE 42623
// exit ;
42621: GO 42724
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 2
42632: PPUSH
42633: LD_VAR 0 1
42637: PPUSH
42638: CALL_OW 248
42642: PPUSH
42643: CALL_OW 450
42647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_VAR 0 4
42657: PPUSH
42658: LD_INT 1
42660: PPUSH
42661: CALL_OW 275
42665: PUSH
42666: LD_VAR 0 5
42670: PUSH
42671: LD_INT 1
42673: ARRAY
42674: GREATEREQUAL
42675: PUSH
42676: LD_VAR 0 4
42680: PPUSH
42681: LD_INT 2
42683: PPUSH
42684: CALL_OW 275
42688: PUSH
42689: LD_VAR 0 5
42693: PUSH
42694: LD_INT 2
42696: ARRAY
42697: GREATEREQUAL
42698: AND
42699: PUSH
42700: LD_VAR 0 4
42704: PPUSH
42705: LD_INT 3
42707: PPUSH
42708: CALL_OW 275
42712: PUSH
42713: LD_VAR 0 5
42717: PUSH
42718: LD_INT 3
42720: ARRAY
42721: GREATEREQUAL
42722: AND
42723: ST_TO_ADDR
// end ;
42724: LD_VAR 0 3
42728: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42729: LD_INT 0
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
// result := false ;
42742: LD_ADDR_VAR 0 8
42746: PUSH
42747: LD_INT 0
42749: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42750: LD_VAR 0 5
42754: NOT
42755: PUSH
42756: LD_VAR 0 1
42760: NOT
42761: OR
42762: PUSH
42763: LD_VAR 0 2
42767: NOT
42768: OR
42769: PUSH
42770: LD_VAR 0 3
42774: NOT
42775: OR
42776: IFFALSE 42780
// exit ;
42778: GO 43594
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42780: LD_ADDR_VAR 0 14
42784: PUSH
42785: LD_VAR 0 1
42789: PPUSH
42790: LD_VAR 0 2
42794: PPUSH
42795: LD_VAR 0 3
42799: PPUSH
42800: LD_VAR 0 4
42804: PPUSH
42805: LD_VAR 0 5
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: PPUSH
42814: CALL_OW 248
42818: PPUSH
42819: LD_INT 0
42821: PPUSH
42822: CALL 44831 0 6
42826: ST_TO_ADDR
// if not hexes then
42827: LD_VAR 0 14
42831: NOT
42832: IFFALSE 42836
// exit ;
42834: GO 43594
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42836: LD_ADDR_VAR 0 17
42840: PUSH
42841: LD_VAR 0 5
42845: PPUSH
42846: LD_INT 22
42848: PUSH
42849: LD_VAR 0 13
42853: PPUSH
42854: CALL_OW 255
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 30
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 30
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PPUSH
42895: CALL_OW 72
42899: ST_TO_ADDR
// for i = 1 to hexes do
42900: LD_ADDR_VAR 0 9
42904: PUSH
42905: DOUBLE
42906: LD_INT 1
42908: DEC
42909: ST_TO_ADDR
42910: LD_VAR 0 14
42914: PUSH
42915: FOR_TO
42916: IFFALSE 43592
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42918: LD_ADDR_VAR 0 13
42922: PUSH
42923: LD_VAR 0 14
42927: PUSH
42928: LD_VAR 0 9
42932: ARRAY
42933: PUSH
42934: LD_INT 1
42936: ARRAY
42937: PPUSH
42938: LD_VAR 0 14
42942: PUSH
42943: LD_VAR 0 9
42947: ARRAY
42948: PUSH
42949: LD_INT 2
42951: ARRAY
42952: PPUSH
42953: CALL_OW 428
42957: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42958: LD_VAR 0 14
42962: PUSH
42963: LD_VAR 0 9
42967: ARRAY
42968: PUSH
42969: LD_INT 1
42971: ARRAY
42972: PPUSH
42973: LD_VAR 0 14
42977: PUSH
42978: LD_VAR 0 9
42982: ARRAY
42983: PUSH
42984: LD_INT 2
42986: ARRAY
42987: PPUSH
42988: CALL_OW 351
42992: PUSH
42993: LD_VAR 0 14
42997: PUSH
42998: LD_VAR 0 9
43002: ARRAY
43003: PUSH
43004: LD_INT 1
43006: ARRAY
43007: PPUSH
43008: LD_VAR 0 14
43012: PUSH
43013: LD_VAR 0 9
43017: ARRAY
43018: PUSH
43019: LD_INT 2
43021: ARRAY
43022: PPUSH
43023: CALL_OW 488
43027: NOT
43028: OR
43029: PUSH
43030: LD_VAR 0 13
43034: PPUSH
43035: CALL_OW 247
43039: PUSH
43040: LD_INT 3
43042: EQUAL
43043: OR
43044: IFFALSE 43050
// exit ;
43046: POP
43047: POP
43048: GO 43594
// if not tmp then
43050: LD_VAR 0 13
43054: NOT
43055: IFFALSE 43059
// continue ;
43057: GO 42915
// result := true ;
43059: LD_ADDR_VAR 0 8
43063: PUSH
43064: LD_INT 1
43066: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43067: LD_VAR 0 6
43071: PUSH
43072: LD_VAR 0 13
43076: PPUSH
43077: CALL_OW 247
43081: PUSH
43082: LD_INT 2
43084: EQUAL
43085: AND
43086: PUSH
43087: LD_VAR 0 13
43091: PPUSH
43092: CALL_OW 263
43096: PUSH
43097: LD_INT 1
43099: EQUAL
43100: AND
43101: IFFALSE 43265
// begin if IsDrivenBy ( tmp ) then
43103: LD_VAR 0 13
43107: PPUSH
43108: CALL_OW 311
43112: IFFALSE 43116
// continue ;
43114: GO 42915
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43116: LD_VAR 0 6
43120: PPUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 60
43126: PUSH
43127: EMPTY
43128: LIST
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: LD_INT 55
43139: PUSH
43140: EMPTY
43141: LIST
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PPUSH
43151: CALL_OW 72
43155: IFFALSE 43263
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43157: LD_ADDR_VAR 0 18
43161: PUSH
43162: LD_VAR 0 6
43166: PPUSH
43167: LD_INT 3
43169: PUSH
43170: LD_INT 60
43172: PUSH
43173: EMPTY
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 55
43185: PUSH
43186: EMPTY
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PPUSH
43197: CALL_OW 72
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: ST_TO_ADDR
// if IsInUnit ( driver ) then
43206: LD_VAR 0 18
43210: PPUSH
43211: CALL_OW 310
43215: IFFALSE 43226
// ComExit ( driver ) ;
43217: LD_VAR 0 18
43221: PPUSH
43222: CALL 68015 0 1
// AddComEnterUnit ( driver , tmp ) ;
43226: LD_VAR 0 18
43230: PPUSH
43231: LD_VAR 0 13
43235: PPUSH
43236: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43240: LD_VAR 0 18
43244: PPUSH
43245: LD_VAR 0 7
43249: PPUSH
43250: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43254: LD_VAR 0 18
43258: PPUSH
43259: CALL_OW 181
// end ; continue ;
43263: GO 42915
// end ; if not cleaners or not tmp in cleaners then
43265: LD_VAR 0 6
43269: NOT
43270: PUSH
43271: LD_VAR 0 13
43275: PUSH
43276: LD_VAR 0 6
43280: IN
43281: NOT
43282: OR
43283: IFFALSE 43590
// begin if dep then
43285: LD_VAR 0 17
43289: IFFALSE 43425
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43291: LD_ADDR_VAR 0 16
43295: PUSH
43296: LD_VAR 0 17
43300: PUSH
43301: LD_INT 1
43303: ARRAY
43304: PPUSH
43305: CALL_OW 250
43309: PPUSH
43310: LD_VAR 0 17
43314: PUSH
43315: LD_INT 1
43317: ARRAY
43318: PPUSH
43319: CALL_OW 254
43323: PPUSH
43324: LD_INT 5
43326: PPUSH
43327: CALL_OW 272
43331: PUSH
43332: LD_VAR 0 17
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: PPUSH
43341: CALL_OW 251
43345: PPUSH
43346: LD_VAR 0 17
43350: PUSH
43351: LD_INT 1
43353: ARRAY
43354: PPUSH
43355: CALL_OW 254
43359: PPUSH
43360: LD_INT 5
43362: PPUSH
43363: CALL_OW 273
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43372: LD_VAR 0 16
43376: PUSH
43377: LD_INT 1
43379: ARRAY
43380: PPUSH
43381: LD_VAR 0 16
43385: PUSH
43386: LD_INT 2
43388: ARRAY
43389: PPUSH
43390: CALL_OW 488
43394: IFFALSE 43425
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43396: LD_VAR 0 13
43400: PPUSH
43401: LD_VAR 0 16
43405: PUSH
43406: LD_INT 1
43408: ARRAY
43409: PPUSH
43410: LD_VAR 0 16
43414: PUSH
43415: LD_INT 2
43417: ARRAY
43418: PPUSH
43419: CALL_OW 111
// continue ;
43423: GO 42915
// end ; end ; r := GetDir ( tmp ) ;
43425: LD_ADDR_VAR 0 15
43429: PUSH
43430: LD_VAR 0 13
43434: PPUSH
43435: CALL_OW 254
43439: ST_TO_ADDR
// if r = 5 then
43440: LD_VAR 0 15
43444: PUSH
43445: LD_INT 5
43447: EQUAL
43448: IFFALSE 43458
// r := 0 ;
43450: LD_ADDR_VAR 0 15
43454: PUSH
43455: LD_INT 0
43457: ST_TO_ADDR
// for j = r to 5 do
43458: LD_ADDR_VAR 0 10
43462: PUSH
43463: DOUBLE
43464: LD_VAR 0 15
43468: DEC
43469: ST_TO_ADDR
43470: LD_INT 5
43472: PUSH
43473: FOR_TO
43474: IFFALSE 43588
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43476: LD_ADDR_VAR 0 11
43480: PUSH
43481: LD_VAR 0 13
43485: PPUSH
43486: CALL_OW 250
43490: PPUSH
43491: LD_VAR 0 10
43495: PPUSH
43496: LD_INT 2
43498: PPUSH
43499: CALL_OW 272
43503: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43504: LD_ADDR_VAR 0 12
43508: PUSH
43509: LD_VAR 0 13
43513: PPUSH
43514: CALL_OW 251
43518: PPUSH
43519: LD_VAR 0 10
43523: PPUSH
43524: LD_INT 2
43526: PPUSH
43527: CALL_OW 273
43531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43532: LD_VAR 0 11
43536: PPUSH
43537: LD_VAR 0 12
43541: PPUSH
43542: CALL_OW 488
43546: PUSH
43547: LD_VAR 0 11
43551: PPUSH
43552: LD_VAR 0 12
43556: PPUSH
43557: CALL_OW 428
43561: NOT
43562: AND
43563: IFFALSE 43586
// begin ComMoveXY ( tmp , _x , _y ) ;
43565: LD_VAR 0 13
43569: PPUSH
43570: LD_VAR 0 11
43574: PPUSH
43575: LD_VAR 0 12
43579: PPUSH
43580: CALL_OW 111
// break ;
43584: GO 43588
// end ; end ;
43586: GO 43473
43588: POP
43589: POP
// end ; end ;
43590: GO 42915
43592: POP
43593: POP
// end ;
43594: LD_VAR 0 8
43598: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43599: LD_INT 0
43601: PPUSH
// result := true ;
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_INT 1
43609: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43610: LD_VAR 0 2
43614: PUSH
43615: LD_INT 24
43617: DOUBLE
43618: EQUAL
43619: IFTRUE 43629
43621: LD_INT 33
43623: DOUBLE
43624: EQUAL
43625: IFTRUE 43629
43627: GO 43654
43629: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43630: LD_ADDR_VAR 0 3
43634: PUSH
43635: LD_INT 32
43637: PPUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 321
43647: PUSH
43648: LD_INT 2
43650: EQUAL
43651: ST_TO_ADDR
43652: GO 43974
43654: LD_INT 20
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43662
43660: GO 43687
43662: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_INT 6
43670: PPUSH
43671: LD_VAR 0 1
43675: PPUSH
43676: CALL_OW 321
43680: PUSH
43681: LD_INT 2
43683: EQUAL
43684: ST_TO_ADDR
43685: GO 43974
43687: LD_INT 22
43689: DOUBLE
43690: EQUAL
43691: IFTRUE 43701
43693: LD_INT 36
43695: DOUBLE
43696: EQUAL
43697: IFTRUE 43701
43699: GO 43726
43701: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43702: LD_ADDR_VAR 0 3
43706: PUSH
43707: LD_INT 15
43709: PPUSH
43710: LD_VAR 0 1
43714: PPUSH
43715: CALL_OW 321
43719: PUSH
43720: LD_INT 2
43722: EQUAL
43723: ST_TO_ADDR
43724: GO 43974
43726: LD_INT 30
43728: DOUBLE
43729: EQUAL
43730: IFTRUE 43734
43732: GO 43759
43734: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43735: LD_ADDR_VAR 0 3
43739: PUSH
43740: LD_INT 20
43742: PPUSH
43743: LD_VAR 0 1
43747: PPUSH
43748: CALL_OW 321
43752: PUSH
43753: LD_INT 2
43755: EQUAL
43756: ST_TO_ADDR
43757: GO 43974
43759: LD_INT 28
43761: DOUBLE
43762: EQUAL
43763: IFTRUE 43773
43765: LD_INT 21
43767: DOUBLE
43768: EQUAL
43769: IFTRUE 43773
43771: GO 43798
43773: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43774: LD_ADDR_VAR 0 3
43778: PUSH
43779: LD_INT 21
43781: PPUSH
43782: LD_VAR 0 1
43786: PPUSH
43787: CALL_OW 321
43791: PUSH
43792: LD_INT 2
43794: EQUAL
43795: ST_TO_ADDR
43796: GO 43974
43798: LD_INT 16
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43833
43806: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_EXP 55
43816: PPUSH
43817: LD_VAR 0 1
43821: PPUSH
43822: CALL_OW 321
43826: PUSH
43827: LD_INT 2
43829: EQUAL
43830: ST_TO_ADDR
43831: GO 43974
43833: LD_INT 19
43835: DOUBLE
43836: EQUAL
43837: IFTRUE 43847
43839: LD_INT 23
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 43874
43847: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_EXP 54
43857: PPUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: CALL_OW 321
43867: PUSH
43868: LD_INT 2
43870: EQUAL
43871: ST_TO_ADDR
43872: GO 43974
43874: LD_INT 17
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43907
43882: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 39
43890: PPUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 321
43900: PUSH
43901: LD_INT 2
43903: EQUAL
43904: ST_TO_ADDR
43905: GO 43974
43907: LD_INT 18
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 43940
43915: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 40
43923: PPUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 321
43933: PUSH
43934: LD_INT 2
43936: EQUAL
43937: ST_TO_ADDR
43938: GO 43974
43940: LD_INT 27
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 43973
43948: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43949: LD_ADDR_VAR 0 3
43953: PUSH
43954: LD_INT 35
43956: PPUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: CALL_OW 321
43966: PUSH
43967: LD_INT 2
43969: EQUAL
43970: ST_TO_ADDR
43971: GO 43974
43973: POP
// end ;
43974: LD_VAR 0 3
43978: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43979: LD_INT 0
43981: PPUSH
43982: PPUSH
43983: PPUSH
43984: PPUSH
43985: PPUSH
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
43990: PPUSH
43991: PPUSH
// result := false ;
43992: LD_ADDR_VAR 0 6
43996: PUSH
43997: LD_INT 0
43999: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44000: LD_VAR 0 1
44004: NOT
44005: PUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 266
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: IN
44026: NOT
44027: OR
44028: PUSH
44029: LD_VAR 0 2
44033: NOT
44034: OR
44035: PUSH
44036: LD_VAR 0 5
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 4
44055: PUSH
44056: LD_INT 5
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: IN
44067: NOT
44068: OR
44069: PUSH
44070: LD_VAR 0 3
44074: PPUSH
44075: LD_VAR 0 4
44079: PPUSH
44080: CALL_OW 488
44084: NOT
44085: OR
44086: IFFALSE 44090
// exit ;
44088: GO 44826
// side := GetSide ( depot ) ;
44090: LD_ADDR_VAR 0 9
44094: PUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 255
44104: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44105: LD_VAR 0 9
44109: PPUSH
44110: LD_VAR 0 2
44114: PPUSH
44115: CALL 43599 0 2
44119: NOT
44120: IFFALSE 44124
// exit ;
44122: GO 44826
// pom := GetBase ( depot ) ;
44124: LD_ADDR_VAR 0 10
44128: PUSH
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 274
44138: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44139: LD_ADDR_VAR 0 11
44143: PUSH
44144: LD_VAR 0 2
44148: PPUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: CALL_OW 248
44158: PPUSH
44159: CALL_OW 450
44163: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44164: LD_VAR 0 10
44168: PPUSH
44169: LD_INT 1
44171: PPUSH
44172: CALL_OW 275
44176: PUSH
44177: LD_VAR 0 11
44181: PUSH
44182: LD_INT 1
44184: ARRAY
44185: GREATEREQUAL
44186: PUSH
44187: LD_VAR 0 10
44191: PPUSH
44192: LD_INT 2
44194: PPUSH
44195: CALL_OW 275
44199: PUSH
44200: LD_VAR 0 11
44204: PUSH
44205: LD_INT 2
44207: ARRAY
44208: GREATEREQUAL
44209: AND
44210: PUSH
44211: LD_VAR 0 10
44215: PPUSH
44216: LD_INT 3
44218: PPUSH
44219: CALL_OW 275
44223: PUSH
44224: LD_VAR 0 11
44228: PUSH
44229: LD_INT 3
44231: ARRAY
44232: GREATEREQUAL
44233: AND
44234: NOT
44235: IFFALSE 44239
// exit ;
44237: GO 44826
// if GetBType ( depot ) = b_depot then
44239: LD_VAR 0 1
44243: PPUSH
44244: CALL_OW 266
44248: PUSH
44249: LD_INT 0
44251: EQUAL
44252: IFFALSE 44264
// dist := 28 else
44254: LD_ADDR_VAR 0 14
44258: PUSH
44259: LD_INT 28
44261: ST_TO_ADDR
44262: GO 44272
// dist := 36 ;
44264: LD_ADDR_VAR 0 14
44268: PUSH
44269: LD_INT 36
44271: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44272: LD_VAR 0 1
44276: PPUSH
44277: LD_VAR 0 3
44281: PPUSH
44282: LD_VAR 0 4
44286: PPUSH
44287: CALL_OW 297
44291: PUSH
44292: LD_VAR 0 14
44296: GREATER
44297: IFFALSE 44301
// exit ;
44299: GO 44826
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44301: LD_ADDR_VAR 0 12
44305: PUSH
44306: LD_VAR 0 2
44310: PPUSH
44311: LD_VAR 0 3
44315: PPUSH
44316: LD_VAR 0 4
44320: PPUSH
44321: LD_VAR 0 5
44325: PPUSH
44326: LD_VAR 0 1
44330: PPUSH
44331: CALL_OW 248
44335: PPUSH
44336: LD_INT 0
44338: PPUSH
44339: CALL 44831 0 6
44343: ST_TO_ADDR
// if not hexes then
44344: LD_VAR 0 12
44348: NOT
44349: IFFALSE 44353
// exit ;
44351: GO 44826
// hex := GetHexInfo ( x , y ) ;
44353: LD_ADDR_VAR 0 15
44357: PUSH
44358: LD_VAR 0 3
44362: PPUSH
44363: LD_VAR 0 4
44367: PPUSH
44368: CALL_OW 546
44372: ST_TO_ADDR
// if hex [ 1 ] then
44373: LD_VAR 0 15
44377: PUSH
44378: LD_INT 1
44380: ARRAY
44381: IFFALSE 44385
// exit ;
44383: GO 44826
// height := hex [ 2 ] ;
44385: LD_ADDR_VAR 0 13
44389: PUSH
44390: LD_VAR 0 15
44394: PUSH
44395: LD_INT 2
44397: ARRAY
44398: ST_TO_ADDR
// for i = 1 to hexes do
44399: LD_ADDR_VAR 0 7
44403: PUSH
44404: DOUBLE
44405: LD_INT 1
44407: DEC
44408: ST_TO_ADDR
44409: LD_VAR 0 12
44413: PUSH
44414: FOR_TO
44415: IFFALSE 44745
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44417: LD_VAR 0 12
44421: PUSH
44422: LD_VAR 0 7
44426: ARRAY
44427: PUSH
44428: LD_INT 1
44430: ARRAY
44431: PPUSH
44432: LD_VAR 0 12
44436: PUSH
44437: LD_VAR 0 7
44441: ARRAY
44442: PUSH
44443: LD_INT 2
44445: ARRAY
44446: PPUSH
44447: CALL_OW 488
44451: NOT
44452: PUSH
44453: LD_VAR 0 12
44457: PUSH
44458: LD_VAR 0 7
44462: ARRAY
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: PPUSH
44468: LD_VAR 0 12
44472: PUSH
44473: LD_VAR 0 7
44477: ARRAY
44478: PUSH
44479: LD_INT 2
44481: ARRAY
44482: PPUSH
44483: CALL_OW 428
44487: PUSH
44488: LD_INT 0
44490: GREATER
44491: OR
44492: PUSH
44493: LD_VAR 0 12
44497: PUSH
44498: LD_VAR 0 7
44502: ARRAY
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: PPUSH
44508: LD_VAR 0 12
44512: PUSH
44513: LD_VAR 0 7
44517: ARRAY
44518: PUSH
44519: LD_INT 2
44521: ARRAY
44522: PPUSH
44523: CALL_OW 351
44527: OR
44528: IFFALSE 44534
// exit ;
44530: POP
44531: POP
44532: GO 44826
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44534: LD_ADDR_VAR 0 8
44538: PUSH
44539: LD_VAR 0 12
44543: PUSH
44544: LD_VAR 0 7
44548: ARRAY
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: PPUSH
44554: LD_VAR 0 12
44558: PUSH
44559: LD_VAR 0 7
44563: ARRAY
44564: PUSH
44565: LD_INT 2
44567: ARRAY
44568: PPUSH
44569: CALL_OW 546
44573: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44574: LD_VAR 0 8
44578: PUSH
44579: LD_INT 1
44581: ARRAY
44582: PUSH
44583: LD_VAR 0 8
44587: PUSH
44588: LD_INT 2
44590: ARRAY
44591: PUSH
44592: LD_VAR 0 13
44596: PUSH
44597: LD_INT 2
44599: PLUS
44600: GREATER
44601: OR
44602: PUSH
44603: LD_VAR 0 8
44607: PUSH
44608: LD_INT 2
44610: ARRAY
44611: PUSH
44612: LD_VAR 0 13
44616: PUSH
44617: LD_INT 2
44619: MINUS
44620: LESS
44621: OR
44622: PUSH
44623: LD_VAR 0 8
44627: PUSH
44628: LD_INT 3
44630: ARRAY
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 8
44637: PUSH
44638: LD_INT 9
44640: PUSH
44641: LD_INT 10
44643: PUSH
44644: LD_INT 11
44646: PUSH
44647: LD_INT 12
44649: PUSH
44650: LD_INT 13
44652: PUSH
44653: LD_INT 16
44655: PUSH
44656: LD_INT 17
44658: PUSH
44659: LD_INT 18
44661: PUSH
44662: LD_INT 19
44664: PUSH
44665: LD_INT 20
44667: PUSH
44668: LD_INT 21
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: IN
44686: NOT
44687: OR
44688: PUSH
44689: LD_VAR 0 8
44693: PUSH
44694: LD_INT 5
44696: ARRAY
44697: NOT
44698: OR
44699: PUSH
44700: LD_VAR 0 8
44704: PUSH
44705: LD_INT 6
44707: ARRAY
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 7
44717: PUSH
44718: LD_INT 9
44720: PUSH
44721: LD_INT 10
44723: PUSH
44724: LD_INT 11
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: IN
44735: NOT
44736: OR
44737: IFFALSE 44743
// exit ;
44739: POP
44740: POP
44741: GO 44826
// end ;
44743: GO 44414
44745: POP
44746: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44747: LD_VAR 0 9
44751: PPUSH
44752: LD_VAR 0 3
44756: PPUSH
44757: LD_VAR 0 4
44761: PPUSH
44762: LD_INT 20
44764: PPUSH
44765: CALL 36772 0 4
44769: PUSH
44770: LD_INT 4
44772: ARRAY
44773: IFFALSE 44777
// exit ;
44775: GO 44826
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44777: LD_VAR 0 2
44781: PUSH
44782: LD_INT 29
44784: PUSH
44785: LD_INT 30
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: IN
44792: PUSH
44793: LD_VAR 0 3
44797: PPUSH
44798: LD_VAR 0 4
44802: PPUSH
44803: LD_VAR 0 9
44807: PPUSH
44808: CALL_OW 440
44812: NOT
44813: AND
44814: IFFALSE 44818
// exit ;
44816: GO 44826
// result := true ;
44818: LD_ADDR_VAR 0 6
44822: PUSH
44823: LD_INT 1
44825: ST_TO_ADDR
// end ;
44826: LD_VAR 0 6
44830: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44831: LD_INT 0
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
// result = [ ] ;
44891: LD_ADDR_VAR 0 7
44895: PUSH
44896: EMPTY
44897: ST_TO_ADDR
// temp_list = [ ] ;
44898: LD_ADDR_VAR 0 9
44902: PUSH
44903: EMPTY
44904: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44905: LD_VAR 0 4
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: IN
44936: NOT
44937: PUSH
44938: LD_VAR 0 1
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: IN
44953: PUSH
44954: LD_VAR 0 5
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 3
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: IN
44973: NOT
44974: AND
44975: OR
44976: IFFALSE 44980
// exit ;
44978: GO 63371
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44980: LD_VAR 0 1
44984: PUSH
44985: LD_INT 6
44987: PUSH
44988: LD_INT 7
44990: PUSH
44991: LD_INT 8
44993: PUSH
44994: LD_INT 13
44996: PUSH
44997: LD_INT 12
44999: PUSH
45000: LD_INT 15
45002: PUSH
45003: LD_INT 11
45005: PUSH
45006: LD_INT 14
45008: PUSH
45009: LD_INT 10
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: IN
45023: IFFALSE 45033
// btype = b_lab ;
45025: LD_ADDR_VAR 0 1
45029: PUSH
45030: LD_INT 6
45032: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45033: LD_VAR 0 6
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: IN
45052: NOT
45053: PUSH
45054: LD_VAR 0 1
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: LD_INT 6
45073: PUSH
45074: LD_INT 36
45076: PUSH
45077: LD_INT 4
45079: PUSH
45080: LD_INT 5
45082: PUSH
45083: LD_INT 31
45085: PUSH
45086: LD_INT 32
45088: PUSH
45089: LD_INT 33
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: IN
45105: NOT
45106: PUSH
45107: LD_VAR 0 6
45111: PUSH
45112: LD_INT 1
45114: EQUAL
45115: AND
45116: OR
45117: PUSH
45118: LD_VAR 0 1
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: IN
45133: NOT
45134: PUSH
45135: LD_VAR 0 6
45139: PUSH
45140: LD_INT 2
45142: EQUAL
45143: AND
45144: OR
45145: IFFALSE 45155
// mode = 0 ;
45147: LD_ADDR_VAR 0 6
45151: PUSH
45152: LD_INT 0
45154: ST_TO_ADDR
// case mode of 0 :
45155: LD_VAR 0 6
45159: PUSH
45160: LD_INT 0
45162: DOUBLE
45163: EQUAL
45164: IFTRUE 45168
45166: GO 56621
45168: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45169: LD_ADDR_VAR 0 11
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 3
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45362: LD_ADDR_VAR 0 12
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 3
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 3
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45558: LD_ADDR_VAR 0 13
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45757: LD_ADDR_VAR 0 14
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45953: LD_ADDR_VAR 0 15
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46146: LD_ADDR_VAR 0 16
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46339: LD_ADDR_VAR 0 17
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46569: LD_ADDR_VAR 0 18
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46799: LD_ADDR_VAR 0 19
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47029: LD_ADDR_VAR 0 20
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47259: LD_ADDR_VAR 0 21
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47489: LD_ADDR_VAR 0 22
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47719: LD_ADDR_VAR 0 23
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47999: LD_ADDR_VAR 0 24
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48275: LD_ADDR_VAR 0 25
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48549: LD_ADDR_VAR 0 26
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48825: LD_ADDR_VAR 0 27
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49105: LD_ADDR_VAR 0 28
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49387: LD_ADDR_VAR 0 29
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 3
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 3
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49666: LD_ADDR_VAR 0 30
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 3
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49944: LD_ADDR_VAR 0 31
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50222: LD_ADDR_VAR 0 32
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 3
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50500: LD_ADDR_VAR 0 33
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50779: LD_ADDR_VAR 0 34
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51059: LD_ADDR_VAR 0 35
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51171: LD_ADDR_VAR 0 36
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51283: LD_ADDR_VAR 0 37
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51395: LD_ADDR_VAR 0 38
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51507: LD_ADDR_VAR 0 39
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51619: LD_ADDR_VAR 0 40
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51731: LD_ADDR_VAR 0 41
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52081: LD_ADDR_VAR 0 42
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 3
52390: NEG
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52431: LD_ADDR_VAR 0 43
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 3
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52779: LD_ADDR_VAR 0 44
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: LD_INT 3
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53129: LD_ADDR_VAR 0 45
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: NEG
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53479: LD_ADDR_VAR 0 46
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 3
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53827: LD_ADDR_VAR 0 47
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53978: LD_ADDR_VAR 0 48
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54125: LD_ADDR_VAR 0 49
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54269: LD_ADDR_VAR 0 50
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54413: LD_ADDR_VAR 0 51
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54560: LD_ADDR_VAR 0 52
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54711: LD_ADDR_VAR 0 53
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54941: LD_ADDR_VAR 0 54
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55171: LD_ADDR_VAR 0 55
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55401: LD_ADDR_VAR 0 56
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55631: LD_ADDR_VAR 0 57
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55861: LD_ADDR_VAR 0 58
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56091: LD_ADDR_VAR 0 59
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56179: LD_ADDR_VAR 0 60
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56267: LD_ADDR_VAR 0 61
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56355: LD_ADDR_VAR 0 62
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56443: LD_ADDR_VAR 0 63
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56531: LD_ADDR_VAR 0 64
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// end ; 1 :
56619: GO 62516
56621: LD_INT 1
56623: DOUBLE
56624: EQUAL
56625: IFTRUE 56629
56627: GO 59252
56629: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56630: LD_ADDR_VAR 0 11
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 3
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56674: LD_ADDR_VAR 0 12
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56715: LD_ADDR_VAR 0 13
56719: PUSH
56720: LD_INT 3
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56755: LD_ADDR_VAR 0 14
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56796: LD_ADDR_VAR 0 15
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56840: LD_ADDR_VAR 0 16
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56886: LD_ADDR_VAR 0 17
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 3
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56930: LD_ADDR_VAR 0 18
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56971: LD_ADDR_VAR 0 19
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57011: LD_ADDR_VAR 0 20
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 3
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57052: LD_ADDR_VAR 0 21
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57096: LD_ADDR_VAR 0 22
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 3
57127: NEG
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: LIST
57141: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57142: LD_ADDR_VAR 0 23
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 4
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57186: LD_ADDR_VAR 0 24
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57227: LD_ADDR_VAR 0 25
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 3
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 4
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57267: LD_ADDR_VAR 0 26
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 4
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57308: LD_ADDR_VAR 0 27
57312: PUSH
57313: LD_INT 3
57315: NEG
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57352: LD_ADDR_VAR 0 28
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 3
57371: NEG
57372: PUSH
57373: LD_INT 4
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 4
57383: NEG
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57398: LD_ADDR_VAR 0 29
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: LD_INT 4
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 4
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 5
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 5
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 4
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 6
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 6
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 5
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57553: LD_ADDR_VAR 0 30
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 4
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 4
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 5
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 5
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 6
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 6
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57696: LD_ADDR_VAR 0 31
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: LD_INT 3
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 4
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 4
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 4
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 5
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 5
57773: PUSH
57774: LD_INT 5
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: LD_INT 5
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 6
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 6
57803: PUSH
57804: LD_INT 6
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 5
57813: PUSH
57814: LD_INT 6
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57835: LD_ADDR_VAR 0 32
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 5
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 5
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 4
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 6
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 6
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57978: LD_ADDR_VAR 0 33
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 4
58030: NEG
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 4
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 5
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 5
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 5
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 6
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 6
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58133: LD_ADDR_VAR 0 34
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 4
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 4
58200: NEG
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 4
58212: NEG
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 5
58224: NEG
58225: PUSH
58226: LD_INT 4
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 5
58236: NEG
58237: PUSH
58238: LD_INT 5
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 5
58248: NEG
58249: PUSH
58250: LD_INT 6
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 6
58260: NEG
58261: PUSH
58262: LD_INT 5
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 6
58272: NEG
58273: PUSH
58274: LD_INT 6
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58296: LD_ADDR_VAR 0 41
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 3
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58340: LD_ADDR_VAR 0 42
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58381: LD_ADDR_VAR 0 43
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58421: LD_ADDR_VAR 0 44
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58462: LD_ADDR_VAR 0 45
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58506: LD_ADDR_VAR 0 46
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58552: LD_ADDR_VAR 0 47
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58585: LD_ADDR_VAR 0 48
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58616: LD_ADDR_VAR 0 49
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58645: LD_ADDR_VAR 0 50
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58674: LD_ADDR_VAR 0 51
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58705: LD_ADDR_VAR 0 52
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58738: LD_ADDR_VAR 0 53
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58782: LD_ADDR_VAR 0 54
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58823: LD_ADDR_VAR 0 55
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58863: LD_ADDR_VAR 0 56
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58904: LD_ADDR_VAR 0 57
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58948: LD_ADDR_VAR 0 58
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58994: LD_ADDR_VAR 0 59
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59038: LD_ADDR_VAR 0 60
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59079: LD_ADDR_VAR 0 61
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59119: LD_ADDR_VAR 0 62
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: LIST
59159: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59160: LD_ADDR_VAR 0 63
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59204: LD_ADDR_VAR 0 64
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: ST_TO_ADDR
// end ; 2 :
59250: GO 62516
59252: LD_INT 2
59254: DOUBLE
59255: EQUAL
59256: IFTRUE 59260
59258: GO 62515
59260: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59261: LD_ADDR_VAR 0 29
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 4
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 5
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 5
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 5
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: LD_INT 3
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 4
59391: PUSH
59392: LD_INT 4
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: LD_INT 4
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 3
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 4
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 4
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 4
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 5
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 5
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: LD_INT 5
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 4
59600: NEG
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 4
59646: NEG
59647: PUSH
59648: LD_INT 4
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: LD_INT 5
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: LD_INT 4
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 3
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 4
59694: NEG
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 5
59706: NEG
59707: PUSH
59708: LD_INT 4
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: LD_INT 5
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 3
59730: NEG
59731: PUSH
59732: LD_INT 5
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 5
59742: NEG
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59799: LD_ADDR_VAR 0 30
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: LD_INT 4
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 4
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 5
59826: PUSH
59827: LD_INT 4
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 5
59836: PUSH
59837: LD_INT 5
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 5
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: LD_INT 5
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 4
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 4
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 5
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 5
60068: NEG
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 3
60103: NEG
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 4
60151: NEG
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 4
60163: NEG
60164: PUSH
60165: LD_INT 4
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 4
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: NEG
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 5
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 4
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 4
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 5
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60346: LD_ADDR_VAR 0 31
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 4
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: LD_INT 5
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 5
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: LD_INT 4
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 5
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 4
60525: NEG
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 4
60548: NEG
60549: PUSH
60550: LD_INT 4
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: LD_INT 5
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: LD_INT 4
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: LD_INT 3
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 4
60596: NEG
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 5
60608: NEG
60609: PUSH
60610: LD_INT 4
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 5
60620: NEG
60621: PUSH
60622: LD_INT 5
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: LD_INT 5
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 5
60644: NEG
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 4
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 4
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 4
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 5
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 5
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 4
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 5
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60896: LD_ADDR_VAR 0 32
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 5
60959: NEG
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 5
60970: NEG
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 5
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 3
61005: NEG
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: LD_INT 4
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: NEG
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 4
61077: NEG
61078: PUSH
61079: LD_INT 4
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 4
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: NEG
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 4
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 5
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: LD_INT 5
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: LD_INT 5
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 4
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 4
61308: PUSH
61309: LD_INT 4
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 4
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 5
61328: PUSH
61329: LD_INT 4
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 5
61338: PUSH
61339: LD_INT 5
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: PUSH
61349: LD_INT 5
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 5
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: LD_INT 5
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61443: LD_ADDR_VAR 0 33
61447: PUSH
61448: LD_INT 4
61450: NEG
61451: PUSH
61452: LD_INT 4
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: LD_INT 5
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: LD_INT 4
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 4
61498: NEG
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 5
61510: NEG
61511: PUSH
61512: LD_INT 4
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 5
61522: NEG
61523: PUSH
61524: LD_INT 5
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 5
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 5
61546: NEG
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 4
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: LD_INT 4
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 4
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 4
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 5
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 4
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 3
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 5
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 4
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 4
61783: PUSH
61784: LD_INT 4
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 3
61793: PUSH
61794: LD_INT 4
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: LD_INT 4
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 4
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 5
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 5
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61981: LD_ADDR_VAR 0 34
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 4
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 5
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 4
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 4
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: LD_INT 5
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: NEG
62079: PUSH
62080: LD_INT 5
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 4
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 4
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: LD_INT 3
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 5
62203: PUSH
62204: LD_INT 4
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 5
62213: PUSH
62214: LD_INT 5
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 4
62223: PUSH
62224: LD_INT 5
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 3
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 5
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: LD_INT 5
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: LD_INT 4
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: LD_INT 4
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: LD_INT 4
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 4
62366: NEG
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 4
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 4
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 5
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 5
62445: NEG
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: ST_TO_ADDR
// end ; end ;
62513: GO 62516
62515: POP
// case btype of b_depot , b_warehouse :
62516: LD_VAR 0 1
62520: PUSH
62521: LD_INT 0
62523: DOUBLE
62524: EQUAL
62525: IFTRUE 62535
62527: LD_INT 1
62529: DOUBLE
62530: EQUAL
62531: IFTRUE 62535
62533: GO 62736
62535: POP
// case nation of nation_american :
62536: LD_VAR 0 5
62540: PUSH
62541: LD_INT 1
62543: DOUBLE
62544: EQUAL
62545: IFTRUE 62549
62547: GO 62605
62549: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62550: LD_ADDR_VAR 0 9
62554: PUSH
62555: LD_VAR 0 11
62559: PUSH
62560: LD_VAR 0 12
62564: PUSH
62565: LD_VAR 0 13
62569: PUSH
62570: LD_VAR 0 14
62574: PUSH
62575: LD_VAR 0 15
62579: PUSH
62580: LD_VAR 0 16
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 4
62597: PUSH
62598: LD_INT 1
62600: PLUS
62601: ARRAY
62602: ST_TO_ADDR
62603: GO 62734
62605: LD_INT 2
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62669
62613: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62614: LD_ADDR_VAR 0 9
62618: PUSH
62619: LD_VAR 0 17
62623: PUSH
62624: LD_VAR 0 18
62628: PUSH
62629: LD_VAR 0 19
62633: PUSH
62634: LD_VAR 0 20
62638: PUSH
62639: LD_VAR 0 21
62643: PUSH
62644: LD_VAR 0 22
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: PUSH
62657: LD_VAR 0 4
62661: PUSH
62662: LD_INT 1
62664: PLUS
62665: ARRAY
62666: ST_TO_ADDR
62667: GO 62734
62669: LD_INT 3
62671: DOUBLE
62672: EQUAL
62673: IFTRUE 62677
62675: GO 62733
62677: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62678: LD_ADDR_VAR 0 9
62682: PUSH
62683: LD_VAR 0 23
62687: PUSH
62688: LD_VAR 0 24
62692: PUSH
62693: LD_VAR 0 25
62697: PUSH
62698: LD_VAR 0 26
62702: PUSH
62703: LD_VAR 0 27
62707: PUSH
62708: LD_VAR 0 28
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: LD_VAR 0 4
62725: PUSH
62726: LD_INT 1
62728: PLUS
62729: ARRAY
62730: ST_TO_ADDR
62731: GO 62734
62733: POP
62734: GO 63289
62736: LD_INT 2
62738: DOUBLE
62739: EQUAL
62740: IFTRUE 62750
62742: LD_INT 3
62744: DOUBLE
62745: EQUAL
62746: IFTRUE 62750
62748: GO 62806
62750: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62751: LD_ADDR_VAR 0 9
62755: PUSH
62756: LD_VAR 0 29
62760: PUSH
62761: LD_VAR 0 30
62765: PUSH
62766: LD_VAR 0 31
62770: PUSH
62771: LD_VAR 0 32
62775: PUSH
62776: LD_VAR 0 33
62780: PUSH
62781: LD_VAR 0 34
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: LD_VAR 0 4
62798: PUSH
62799: LD_INT 1
62801: PLUS
62802: ARRAY
62803: ST_TO_ADDR
62804: GO 63289
62806: LD_INT 16
62808: DOUBLE
62809: EQUAL
62810: IFTRUE 62868
62812: LD_INT 17
62814: DOUBLE
62815: EQUAL
62816: IFTRUE 62868
62818: LD_INT 18
62820: DOUBLE
62821: EQUAL
62822: IFTRUE 62868
62824: LD_INT 19
62826: DOUBLE
62827: EQUAL
62828: IFTRUE 62868
62830: LD_INT 22
62832: DOUBLE
62833: EQUAL
62834: IFTRUE 62868
62836: LD_INT 20
62838: DOUBLE
62839: EQUAL
62840: IFTRUE 62868
62842: LD_INT 21
62844: DOUBLE
62845: EQUAL
62846: IFTRUE 62868
62848: LD_INT 23
62850: DOUBLE
62851: EQUAL
62852: IFTRUE 62868
62854: LD_INT 24
62856: DOUBLE
62857: EQUAL
62858: IFTRUE 62868
62860: LD_INT 25
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62868
62866: GO 62924
62868: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62869: LD_ADDR_VAR 0 9
62873: PUSH
62874: LD_VAR 0 35
62878: PUSH
62879: LD_VAR 0 36
62883: PUSH
62884: LD_VAR 0 37
62888: PUSH
62889: LD_VAR 0 38
62893: PUSH
62894: LD_VAR 0 39
62898: PUSH
62899: LD_VAR 0 40
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: LD_VAR 0 4
62916: PUSH
62917: LD_INT 1
62919: PLUS
62920: ARRAY
62921: ST_TO_ADDR
62922: GO 63289
62924: LD_INT 6
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62980
62930: LD_INT 7
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62980
62936: LD_INT 8
62938: DOUBLE
62939: EQUAL
62940: IFTRUE 62980
62942: LD_INT 13
62944: DOUBLE
62945: EQUAL
62946: IFTRUE 62980
62948: LD_INT 12
62950: DOUBLE
62951: EQUAL
62952: IFTRUE 62980
62954: LD_INT 15
62956: DOUBLE
62957: EQUAL
62958: IFTRUE 62980
62960: LD_INT 11
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62980
62966: LD_INT 14
62968: DOUBLE
62969: EQUAL
62970: IFTRUE 62980
62972: LD_INT 10
62974: DOUBLE
62975: EQUAL
62976: IFTRUE 62980
62978: GO 63036
62980: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62981: LD_ADDR_VAR 0 9
62985: PUSH
62986: LD_VAR 0 41
62990: PUSH
62991: LD_VAR 0 42
62995: PUSH
62996: LD_VAR 0 43
63000: PUSH
63001: LD_VAR 0 44
63005: PUSH
63006: LD_VAR 0 45
63010: PUSH
63011: LD_VAR 0 46
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: LD_VAR 0 4
63028: PUSH
63029: LD_INT 1
63031: PLUS
63032: ARRAY
63033: ST_TO_ADDR
63034: GO 63289
63036: LD_INT 36
63038: DOUBLE
63039: EQUAL
63040: IFTRUE 63044
63042: GO 63100
63044: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63045: LD_ADDR_VAR 0 9
63049: PUSH
63050: LD_VAR 0 47
63054: PUSH
63055: LD_VAR 0 48
63059: PUSH
63060: LD_VAR 0 49
63064: PUSH
63065: LD_VAR 0 50
63069: PUSH
63070: LD_VAR 0 51
63074: PUSH
63075: LD_VAR 0 52
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: PUSH
63088: LD_VAR 0 4
63092: PUSH
63093: LD_INT 1
63095: PLUS
63096: ARRAY
63097: ST_TO_ADDR
63098: GO 63289
63100: LD_INT 4
63102: DOUBLE
63103: EQUAL
63104: IFTRUE 63126
63106: LD_INT 5
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63126
63112: LD_INT 34
63114: DOUBLE
63115: EQUAL
63116: IFTRUE 63126
63118: LD_INT 37
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63126
63124: GO 63182
63126: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63127: LD_ADDR_VAR 0 9
63131: PUSH
63132: LD_VAR 0 53
63136: PUSH
63137: LD_VAR 0 54
63141: PUSH
63142: LD_VAR 0 55
63146: PUSH
63147: LD_VAR 0 56
63151: PUSH
63152: LD_VAR 0 57
63156: PUSH
63157: LD_VAR 0 58
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: LD_VAR 0 4
63174: PUSH
63175: LD_INT 1
63177: PLUS
63178: ARRAY
63179: ST_TO_ADDR
63180: GO 63289
63182: LD_INT 31
63184: DOUBLE
63185: EQUAL
63186: IFTRUE 63232
63188: LD_INT 32
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63232
63194: LD_INT 33
63196: DOUBLE
63197: EQUAL
63198: IFTRUE 63232
63200: LD_INT 27
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63232
63206: LD_INT 26
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63232
63212: LD_INT 28
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63232
63218: LD_INT 29
63220: DOUBLE
63221: EQUAL
63222: IFTRUE 63232
63224: LD_INT 30
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63232
63230: GO 63288
63232: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63233: LD_ADDR_VAR 0 9
63237: PUSH
63238: LD_VAR 0 59
63242: PUSH
63243: LD_VAR 0 60
63247: PUSH
63248: LD_VAR 0 61
63252: PUSH
63253: LD_VAR 0 62
63257: PUSH
63258: LD_VAR 0 63
63262: PUSH
63263: LD_VAR 0 64
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: PUSH
63276: LD_VAR 0 4
63280: PUSH
63281: LD_INT 1
63283: PLUS
63284: ARRAY
63285: ST_TO_ADDR
63286: GO 63289
63288: POP
// temp_list2 = [ ] ;
63289: LD_ADDR_VAR 0 10
63293: PUSH
63294: EMPTY
63295: ST_TO_ADDR
// for i in temp_list do
63296: LD_ADDR_VAR 0 8
63300: PUSH
63301: LD_VAR 0 9
63305: PUSH
63306: FOR_IN
63307: IFFALSE 63359
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63309: LD_ADDR_VAR 0 10
63313: PUSH
63314: LD_VAR 0 10
63318: PUSH
63319: LD_VAR 0 8
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: PUSH
63328: LD_VAR 0 2
63332: PLUS
63333: PUSH
63334: LD_VAR 0 8
63338: PUSH
63339: LD_INT 2
63341: ARRAY
63342: PUSH
63343: LD_VAR 0 3
63347: PLUS
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: EMPTY
63354: LIST
63355: ADD
63356: ST_TO_ADDR
63357: GO 63306
63359: POP
63360: POP
// result = temp_list2 ;
63361: LD_ADDR_VAR 0 7
63365: PUSH
63366: LD_VAR 0 10
63370: ST_TO_ADDR
// end ;
63371: LD_VAR 0 7
63375: RET
// export function EnemyInRange ( unit , dist ) ; begin
63376: LD_INT 0
63378: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63379: LD_ADDR_VAR 0 3
63383: PUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: CALL_OW 255
63393: PPUSH
63394: LD_VAR 0 1
63398: PPUSH
63399: CALL_OW 250
63403: PPUSH
63404: LD_VAR 0 1
63408: PPUSH
63409: CALL_OW 251
63413: PPUSH
63414: LD_VAR 0 2
63418: PPUSH
63419: CALL 36772 0 4
63423: PUSH
63424: LD_INT 4
63426: ARRAY
63427: ST_TO_ADDR
// end ;
63428: LD_VAR 0 3
63432: RET
// export function PlayerSeeMe ( unit ) ; begin
63433: LD_INT 0
63435: PPUSH
// result := See ( your_side , unit ) ;
63436: LD_ADDR_VAR 0 2
63440: PUSH
63441: LD_OWVAR 2
63445: PPUSH
63446: LD_VAR 0 1
63450: PPUSH
63451: CALL_OW 292
63455: ST_TO_ADDR
// end ;
63456: LD_VAR 0 2
63460: RET
// export function ReverseDir ( unit ) ; begin
63461: LD_INT 0
63463: PPUSH
// if not unit then
63464: LD_VAR 0 1
63468: NOT
63469: IFFALSE 63473
// exit ;
63471: GO 63496
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63473: LD_ADDR_VAR 0 2
63477: PUSH
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 254
63487: PUSH
63488: LD_INT 3
63490: PLUS
63491: PUSH
63492: LD_INT 6
63494: MOD
63495: ST_TO_ADDR
// end ;
63496: LD_VAR 0 2
63500: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63501: LD_INT 0
63503: PPUSH
63504: PPUSH
63505: PPUSH
63506: PPUSH
63507: PPUSH
// if not hexes then
63508: LD_VAR 0 2
63512: NOT
63513: IFFALSE 63517
// exit ;
63515: GO 63665
// dist := 9999 ;
63517: LD_ADDR_VAR 0 5
63521: PUSH
63522: LD_INT 9999
63524: ST_TO_ADDR
// for i = 1 to hexes do
63525: LD_ADDR_VAR 0 4
63529: PUSH
63530: DOUBLE
63531: LD_INT 1
63533: DEC
63534: ST_TO_ADDR
63535: LD_VAR 0 2
63539: PUSH
63540: FOR_TO
63541: IFFALSE 63653
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63543: LD_VAR 0 1
63547: PPUSH
63548: LD_VAR 0 2
63552: PUSH
63553: LD_VAR 0 4
63557: ARRAY
63558: PUSH
63559: LD_INT 1
63561: ARRAY
63562: PPUSH
63563: LD_VAR 0 2
63567: PUSH
63568: LD_VAR 0 4
63572: ARRAY
63573: PUSH
63574: LD_INT 2
63576: ARRAY
63577: PPUSH
63578: CALL_OW 297
63582: PUSH
63583: LD_VAR 0 5
63587: LESS
63588: IFFALSE 63651
// begin hex := hexes [ i ] ;
63590: LD_ADDR_VAR 0 7
63594: PUSH
63595: LD_VAR 0 2
63599: PUSH
63600: LD_VAR 0 4
63604: ARRAY
63605: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63606: LD_ADDR_VAR 0 5
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: LD_VAR 0 2
63620: PUSH
63621: LD_VAR 0 4
63625: ARRAY
63626: PUSH
63627: LD_INT 1
63629: ARRAY
63630: PPUSH
63631: LD_VAR 0 2
63635: PUSH
63636: LD_VAR 0 4
63640: ARRAY
63641: PUSH
63642: LD_INT 2
63644: ARRAY
63645: PPUSH
63646: CALL_OW 297
63650: ST_TO_ADDR
// end ; end ;
63651: GO 63540
63653: POP
63654: POP
// result := hex ;
63655: LD_ADDR_VAR 0 3
63659: PUSH
63660: LD_VAR 0 7
63664: ST_TO_ADDR
// end ;
63665: LD_VAR 0 3
63669: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63670: LD_INT 0
63672: PPUSH
63673: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63674: LD_VAR 0 1
63678: NOT
63679: PUSH
63680: LD_VAR 0 1
63684: PUSH
63685: LD_INT 21
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 23
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PPUSH
63709: CALL_OW 69
63713: IN
63714: NOT
63715: OR
63716: IFFALSE 63720
// exit ;
63718: GO 63767
// for i = 1 to 3 do
63720: LD_ADDR_VAR 0 3
63724: PUSH
63725: DOUBLE
63726: LD_INT 1
63728: DEC
63729: ST_TO_ADDR
63730: LD_INT 3
63732: PUSH
63733: FOR_TO
63734: IFFALSE 63765
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63736: LD_VAR 0 1
63740: PPUSH
63741: CALL_OW 250
63745: PPUSH
63746: LD_VAR 0 1
63750: PPUSH
63751: CALL_OW 251
63755: PPUSH
63756: LD_INT 1
63758: PPUSH
63759: CALL_OW 453
63763: GO 63733
63765: POP
63766: POP
// end ;
63767: LD_VAR 0 2
63771: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63772: LD_INT 0
63774: PPUSH
63775: PPUSH
63776: PPUSH
63777: PPUSH
63778: PPUSH
63779: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63780: LD_VAR 0 1
63784: NOT
63785: PUSH
63786: LD_VAR 0 2
63790: NOT
63791: OR
63792: PUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: CALL_OW 314
63802: OR
63803: IFFALSE 63807
// exit ;
63805: GO 64248
// x := GetX ( enemy_unit ) ;
63807: LD_ADDR_VAR 0 7
63811: PUSH
63812: LD_VAR 0 2
63816: PPUSH
63817: CALL_OW 250
63821: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63822: LD_ADDR_VAR 0 8
63826: PUSH
63827: LD_VAR 0 2
63831: PPUSH
63832: CALL_OW 251
63836: ST_TO_ADDR
// if not x or not y then
63837: LD_VAR 0 7
63841: NOT
63842: PUSH
63843: LD_VAR 0 8
63847: NOT
63848: OR
63849: IFFALSE 63853
// exit ;
63851: GO 64248
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63853: LD_ADDR_VAR 0 6
63857: PUSH
63858: LD_VAR 0 7
63862: PPUSH
63863: LD_INT 0
63865: PPUSH
63866: LD_INT 4
63868: PPUSH
63869: CALL_OW 272
63873: PUSH
63874: LD_VAR 0 8
63878: PPUSH
63879: LD_INT 0
63881: PPUSH
63882: LD_INT 4
63884: PPUSH
63885: CALL_OW 273
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_VAR 0 7
63898: PPUSH
63899: LD_INT 1
63901: PPUSH
63902: LD_INT 4
63904: PPUSH
63905: CALL_OW 272
63909: PUSH
63910: LD_VAR 0 8
63914: PPUSH
63915: LD_INT 1
63917: PPUSH
63918: LD_INT 4
63920: PPUSH
63921: CALL_OW 273
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_VAR 0 7
63934: PPUSH
63935: LD_INT 2
63937: PPUSH
63938: LD_INT 4
63940: PPUSH
63941: CALL_OW 272
63945: PUSH
63946: LD_VAR 0 8
63950: PPUSH
63951: LD_INT 2
63953: PPUSH
63954: LD_INT 4
63956: PPUSH
63957: CALL_OW 273
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_VAR 0 7
63970: PPUSH
63971: LD_INT 3
63973: PPUSH
63974: LD_INT 4
63976: PPUSH
63977: CALL_OW 272
63981: PUSH
63982: LD_VAR 0 8
63986: PPUSH
63987: LD_INT 3
63989: PPUSH
63990: LD_INT 4
63992: PPUSH
63993: CALL_OW 273
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_VAR 0 7
64006: PPUSH
64007: LD_INT 4
64009: PPUSH
64010: LD_INT 4
64012: PPUSH
64013: CALL_OW 272
64017: PUSH
64018: LD_VAR 0 8
64022: PPUSH
64023: LD_INT 4
64025: PPUSH
64026: LD_INT 4
64028: PPUSH
64029: CALL_OW 273
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_VAR 0 7
64042: PPUSH
64043: LD_INT 5
64045: PPUSH
64046: LD_INT 4
64048: PPUSH
64049: CALL_OW 272
64053: PUSH
64054: LD_VAR 0 8
64058: PPUSH
64059: LD_INT 5
64061: PPUSH
64062: LD_INT 4
64064: PPUSH
64065: CALL_OW 273
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: ST_TO_ADDR
// for i = tmp downto 1 do
64082: LD_ADDR_VAR 0 4
64086: PUSH
64087: DOUBLE
64088: LD_VAR 0 6
64092: INC
64093: ST_TO_ADDR
64094: LD_INT 1
64096: PUSH
64097: FOR_DOWNTO
64098: IFFALSE 64199
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64100: LD_VAR 0 6
64104: PUSH
64105: LD_VAR 0 4
64109: ARRAY
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PPUSH
64115: LD_VAR 0 6
64119: PUSH
64120: LD_VAR 0 4
64124: ARRAY
64125: PUSH
64126: LD_INT 2
64128: ARRAY
64129: PPUSH
64130: CALL_OW 488
64134: NOT
64135: PUSH
64136: LD_VAR 0 6
64140: PUSH
64141: LD_VAR 0 4
64145: ARRAY
64146: PUSH
64147: LD_INT 1
64149: ARRAY
64150: PPUSH
64151: LD_VAR 0 6
64155: PUSH
64156: LD_VAR 0 4
64160: ARRAY
64161: PUSH
64162: LD_INT 2
64164: ARRAY
64165: PPUSH
64166: CALL_OW 428
64170: PUSH
64171: LD_INT 0
64173: NONEQUAL
64174: OR
64175: IFFALSE 64197
// tmp := Delete ( tmp , i ) ;
64177: LD_ADDR_VAR 0 6
64181: PUSH
64182: LD_VAR 0 6
64186: PPUSH
64187: LD_VAR 0 4
64191: PPUSH
64192: CALL_OW 3
64196: ST_TO_ADDR
64197: GO 64097
64199: POP
64200: POP
// j := GetClosestHex ( unit , tmp ) ;
64201: LD_ADDR_VAR 0 5
64205: PUSH
64206: LD_VAR 0 1
64210: PPUSH
64211: LD_VAR 0 6
64215: PPUSH
64216: CALL 63501 0 2
64220: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64221: LD_VAR 0 1
64225: PPUSH
64226: LD_VAR 0 5
64230: PUSH
64231: LD_INT 1
64233: ARRAY
64234: PPUSH
64235: LD_VAR 0 5
64239: PUSH
64240: LD_INT 2
64242: ARRAY
64243: PPUSH
64244: CALL_OW 111
// end ;
64248: LD_VAR 0 3
64252: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64253: LD_INT 0
64255: PPUSH
64256: PPUSH
64257: PPUSH
// uc_side = 0 ;
64258: LD_ADDR_OWVAR 20
64262: PUSH
64263: LD_INT 0
64265: ST_TO_ADDR
// uc_nation = 0 ;
64266: LD_ADDR_OWVAR 21
64270: PUSH
64271: LD_INT 0
64273: ST_TO_ADDR
// InitHc_All ( ) ;
64274: CALL_OW 584
// InitVc ;
64278: CALL_OW 20
// if mastodonts then
64282: LD_VAR 0 6
64286: IFFALSE 64353
// for i = 1 to mastodonts do
64288: LD_ADDR_VAR 0 11
64292: PUSH
64293: DOUBLE
64294: LD_INT 1
64296: DEC
64297: ST_TO_ADDR
64298: LD_VAR 0 6
64302: PUSH
64303: FOR_TO
64304: IFFALSE 64351
// begin vc_chassis := 31 ;
64306: LD_ADDR_OWVAR 37
64310: PUSH
64311: LD_INT 31
64313: ST_TO_ADDR
// vc_control := control_rider ;
64314: LD_ADDR_OWVAR 38
64318: PUSH
64319: LD_INT 4
64321: ST_TO_ADDR
// animal := CreateVehicle ;
64322: LD_ADDR_VAR 0 12
64326: PUSH
64327: CALL_OW 45
64331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64332: LD_VAR 0 12
64336: PPUSH
64337: LD_VAR 0 8
64341: PPUSH
64342: LD_INT 0
64344: PPUSH
64345: CALL 66541 0 3
// end ;
64349: GO 64303
64351: POP
64352: POP
// if horses then
64353: LD_VAR 0 5
64357: IFFALSE 64424
// for i = 1 to horses do
64359: LD_ADDR_VAR 0 11
64363: PUSH
64364: DOUBLE
64365: LD_INT 1
64367: DEC
64368: ST_TO_ADDR
64369: LD_VAR 0 5
64373: PUSH
64374: FOR_TO
64375: IFFALSE 64422
// begin hc_class := 21 ;
64377: LD_ADDR_OWVAR 28
64381: PUSH
64382: LD_INT 21
64384: ST_TO_ADDR
// hc_gallery :=  ;
64385: LD_ADDR_OWVAR 33
64389: PUSH
64390: LD_STRING 
64392: ST_TO_ADDR
// animal := CreateHuman ;
64393: LD_ADDR_VAR 0 12
64397: PUSH
64398: CALL_OW 44
64402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64403: LD_VAR 0 12
64407: PPUSH
64408: LD_VAR 0 8
64412: PPUSH
64413: LD_INT 0
64415: PPUSH
64416: CALL 66541 0 3
// end ;
64420: GO 64374
64422: POP
64423: POP
// if birds then
64424: LD_VAR 0 1
64428: IFFALSE 64495
// for i = 1 to birds do
64430: LD_ADDR_VAR 0 11
64434: PUSH
64435: DOUBLE
64436: LD_INT 1
64438: DEC
64439: ST_TO_ADDR
64440: LD_VAR 0 1
64444: PUSH
64445: FOR_TO
64446: IFFALSE 64493
// begin hc_class = 18 ;
64448: LD_ADDR_OWVAR 28
64452: PUSH
64453: LD_INT 18
64455: ST_TO_ADDR
// hc_gallery =  ;
64456: LD_ADDR_OWVAR 33
64460: PUSH
64461: LD_STRING 
64463: ST_TO_ADDR
// animal := CreateHuman ;
64464: LD_ADDR_VAR 0 12
64468: PUSH
64469: CALL_OW 44
64473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64474: LD_VAR 0 12
64478: PPUSH
64479: LD_VAR 0 8
64483: PPUSH
64484: LD_INT 0
64486: PPUSH
64487: CALL 66541 0 3
// end ;
64491: GO 64445
64493: POP
64494: POP
// if tigers then
64495: LD_VAR 0 2
64499: IFFALSE 64583
// for i = 1 to tigers do
64501: LD_ADDR_VAR 0 11
64505: PUSH
64506: DOUBLE
64507: LD_INT 1
64509: DEC
64510: ST_TO_ADDR
64511: LD_VAR 0 2
64515: PUSH
64516: FOR_TO
64517: IFFALSE 64581
// begin hc_class = class_tiger ;
64519: LD_ADDR_OWVAR 28
64523: PUSH
64524: LD_INT 14
64526: ST_TO_ADDR
// hc_gallery =  ;
64527: LD_ADDR_OWVAR 33
64531: PUSH
64532: LD_STRING 
64534: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64535: LD_ADDR_OWVAR 35
64539: PUSH
64540: LD_INT 7
64542: NEG
64543: PPUSH
64544: LD_INT 7
64546: PPUSH
64547: CALL_OW 12
64551: ST_TO_ADDR
// animal := CreateHuman ;
64552: LD_ADDR_VAR 0 12
64556: PUSH
64557: CALL_OW 44
64561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64562: LD_VAR 0 12
64566: PPUSH
64567: LD_VAR 0 8
64571: PPUSH
64572: LD_INT 0
64574: PPUSH
64575: CALL 66541 0 3
// end ;
64579: GO 64516
64581: POP
64582: POP
// if apemans then
64583: LD_VAR 0 3
64587: IFFALSE 64710
// for i = 1 to apemans do
64589: LD_ADDR_VAR 0 11
64593: PUSH
64594: DOUBLE
64595: LD_INT 1
64597: DEC
64598: ST_TO_ADDR
64599: LD_VAR 0 3
64603: PUSH
64604: FOR_TO
64605: IFFALSE 64708
// begin hc_class = class_apeman ;
64607: LD_ADDR_OWVAR 28
64611: PUSH
64612: LD_INT 12
64614: ST_TO_ADDR
// hc_gallery =  ;
64615: LD_ADDR_OWVAR 33
64619: PUSH
64620: LD_STRING 
64622: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64623: LD_ADDR_OWVAR 35
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PPUSH
64632: LD_INT 2
64634: PPUSH
64635: CALL_OW 12
64639: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64640: LD_ADDR_OWVAR 31
64644: PUSH
64645: LD_INT 1
64647: PPUSH
64648: LD_INT 3
64650: PPUSH
64651: CALL_OW 12
64655: PUSH
64656: LD_INT 1
64658: PPUSH
64659: LD_INT 3
64661: PPUSH
64662: CALL_OW 12
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// animal := CreateHuman ;
64679: LD_ADDR_VAR 0 12
64683: PUSH
64684: CALL_OW 44
64688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64689: LD_VAR 0 12
64693: PPUSH
64694: LD_VAR 0 8
64698: PPUSH
64699: LD_INT 0
64701: PPUSH
64702: CALL 66541 0 3
// end ;
64706: GO 64604
64708: POP
64709: POP
// if enchidnas then
64710: LD_VAR 0 4
64714: IFFALSE 64781
// for i = 1 to enchidnas do
64716: LD_ADDR_VAR 0 11
64720: PUSH
64721: DOUBLE
64722: LD_INT 1
64724: DEC
64725: ST_TO_ADDR
64726: LD_VAR 0 4
64730: PUSH
64731: FOR_TO
64732: IFFALSE 64779
// begin hc_class = 13 ;
64734: LD_ADDR_OWVAR 28
64738: PUSH
64739: LD_INT 13
64741: ST_TO_ADDR
// hc_gallery =  ;
64742: LD_ADDR_OWVAR 33
64746: PUSH
64747: LD_STRING 
64749: ST_TO_ADDR
// animal := CreateHuman ;
64750: LD_ADDR_VAR 0 12
64754: PUSH
64755: CALL_OW 44
64759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64760: LD_VAR 0 12
64764: PPUSH
64765: LD_VAR 0 8
64769: PPUSH
64770: LD_INT 0
64772: PPUSH
64773: CALL 66541 0 3
// end ;
64777: GO 64731
64779: POP
64780: POP
// if fishes then
64781: LD_VAR 0 7
64785: IFFALSE 64852
// for i = 1 to fishes do
64787: LD_ADDR_VAR 0 11
64791: PUSH
64792: DOUBLE
64793: LD_INT 1
64795: DEC
64796: ST_TO_ADDR
64797: LD_VAR 0 7
64801: PUSH
64802: FOR_TO
64803: IFFALSE 64850
// begin hc_class = 20 ;
64805: LD_ADDR_OWVAR 28
64809: PUSH
64810: LD_INT 20
64812: ST_TO_ADDR
// hc_gallery =  ;
64813: LD_ADDR_OWVAR 33
64817: PUSH
64818: LD_STRING 
64820: ST_TO_ADDR
// animal := CreateHuman ;
64821: LD_ADDR_VAR 0 12
64825: PUSH
64826: CALL_OW 44
64830: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64831: LD_VAR 0 12
64835: PPUSH
64836: LD_VAR 0 9
64840: PPUSH
64841: LD_INT 0
64843: PPUSH
64844: CALL 66541 0 3
// end ;
64848: GO 64802
64850: POP
64851: POP
// end ;
64852: LD_VAR 0 10
64856: RET
// export function WantHeal ( sci , unit ) ; begin
64857: LD_INT 0
64859: PPUSH
// if GetTaskList ( sci ) > 0 then
64860: LD_VAR 0 1
64864: PPUSH
64865: CALL_OW 437
64869: PUSH
64870: LD_INT 0
64872: GREATER
64873: IFFALSE 64943
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64875: LD_VAR 0 1
64879: PPUSH
64880: CALL_OW 437
64884: PUSH
64885: LD_INT 1
64887: ARRAY
64888: PUSH
64889: LD_INT 1
64891: ARRAY
64892: PUSH
64893: LD_STRING l
64895: EQUAL
64896: PUSH
64897: LD_VAR 0 1
64901: PPUSH
64902: CALL_OW 437
64906: PUSH
64907: LD_INT 1
64909: ARRAY
64910: PUSH
64911: LD_INT 4
64913: ARRAY
64914: PUSH
64915: LD_VAR 0 2
64919: EQUAL
64920: AND
64921: IFFALSE 64933
// result := true else
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: LD_INT 1
64930: ST_TO_ADDR
64931: GO 64941
// result := false ;
64933: LD_ADDR_VAR 0 3
64937: PUSH
64938: LD_INT 0
64940: ST_TO_ADDR
// end else
64941: GO 64951
// result := false ;
64943: LD_ADDR_VAR 0 3
64947: PUSH
64948: LD_INT 0
64950: ST_TO_ADDR
// end ;
64951: LD_VAR 0 3
64955: RET
// export function HealTarget ( sci ) ; begin
64956: LD_INT 0
64958: PPUSH
// if not sci then
64959: LD_VAR 0 1
64963: NOT
64964: IFFALSE 64968
// exit ;
64966: GO 65033
// result := 0 ;
64968: LD_ADDR_VAR 0 2
64972: PUSH
64973: LD_INT 0
64975: ST_TO_ADDR
// if GetTaskList ( sci ) then
64976: LD_VAR 0 1
64980: PPUSH
64981: CALL_OW 437
64985: IFFALSE 65033
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64987: LD_VAR 0 1
64991: PPUSH
64992: CALL_OW 437
64996: PUSH
64997: LD_INT 1
64999: ARRAY
65000: PUSH
65001: LD_INT 1
65003: ARRAY
65004: PUSH
65005: LD_STRING l
65007: EQUAL
65008: IFFALSE 65033
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65010: LD_ADDR_VAR 0 2
65014: PUSH
65015: LD_VAR 0 1
65019: PPUSH
65020: CALL_OW 437
65024: PUSH
65025: LD_INT 1
65027: ARRAY
65028: PUSH
65029: LD_INT 4
65031: ARRAY
65032: ST_TO_ADDR
// end ;
65033: LD_VAR 0 2
65037: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65038: LD_INT 0
65040: PPUSH
65041: PPUSH
65042: PPUSH
65043: PPUSH
// if not base_units then
65044: LD_VAR 0 1
65048: NOT
65049: IFFALSE 65053
// exit ;
65051: GO 65140
// result := false ;
65053: LD_ADDR_VAR 0 2
65057: PUSH
65058: LD_INT 0
65060: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65061: LD_ADDR_VAR 0 5
65065: PUSH
65066: LD_VAR 0 1
65070: PPUSH
65071: LD_INT 21
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PPUSH
65081: CALL_OW 72
65085: ST_TO_ADDR
// if not tmp then
65086: LD_VAR 0 5
65090: NOT
65091: IFFALSE 65095
// exit ;
65093: GO 65140
// for i in tmp do
65095: LD_ADDR_VAR 0 3
65099: PUSH
65100: LD_VAR 0 5
65104: PUSH
65105: FOR_IN
65106: IFFALSE 65138
// begin result := EnemyInRange ( i , 22 ) ;
65108: LD_ADDR_VAR 0 2
65112: PUSH
65113: LD_VAR 0 3
65117: PPUSH
65118: LD_INT 22
65120: PPUSH
65121: CALL 63376 0 2
65125: ST_TO_ADDR
// if result then
65126: LD_VAR 0 2
65130: IFFALSE 65136
// exit ;
65132: POP
65133: POP
65134: GO 65140
// end ;
65136: GO 65105
65138: POP
65139: POP
// end ;
65140: LD_VAR 0 2
65144: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65145: LD_INT 0
65147: PPUSH
65148: PPUSH
// if not units then
65149: LD_VAR 0 1
65153: NOT
65154: IFFALSE 65158
// exit ;
65156: GO 65228
// result := [ ] ;
65158: LD_ADDR_VAR 0 3
65162: PUSH
65163: EMPTY
65164: ST_TO_ADDR
// for i in units do
65165: LD_ADDR_VAR 0 4
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: FOR_IN
65176: IFFALSE 65226
// if GetTag ( i ) = tag then
65178: LD_VAR 0 4
65182: PPUSH
65183: CALL_OW 110
65187: PUSH
65188: LD_VAR 0 2
65192: EQUAL
65193: IFFALSE 65224
// result := Replace ( result , result + 1 , i ) ;
65195: LD_ADDR_VAR 0 3
65199: PUSH
65200: LD_VAR 0 3
65204: PPUSH
65205: LD_VAR 0 3
65209: PUSH
65210: LD_INT 1
65212: PLUS
65213: PPUSH
65214: LD_VAR 0 4
65218: PPUSH
65219: CALL_OW 1
65223: ST_TO_ADDR
65224: GO 65175
65226: POP
65227: POP
// end ;
65228: LD_VAR 0 3
65232: RET
// export function IsDriver ( un ) ; begin
65233: LD_INT 0
65235: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65236: LD_ADDR_VAR 0 2
65240: PUSH
65241: LD_VAR 0 1
65245: PUSH
65246: LD_INT 55
65248: PUSH
65249: EMPTY
65250: LIST
65251: PPUSH
65252: CALL_OW 69
65256: IN
65257: ST_TO_ADDR
// end ;
65258: LD_VAR 0 2
65262: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65263: LD_INT 0
65265: PPUSH
65266: PPUSH
// list := [ ] ;
65267: LD_ADDR_VAR 0 5
65271: PUSH
65272: EMPTY
65273: ST_TO_ADDR
// case d of 0 :
65274: LD_VAR 0 3
65278: PUSH
65279: LD_INT 0
65281: DOUBLE
65282: EQUAL
65283: IFTRUE 65287
65285: GO 65420
65287: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65288: LD_ADDR_VAR 0 5
65292: PUSH
65293: LD_VAR 0 1
65297: PUSH
65298: LD_INT 4
65300: MINUS
65301: PUSH
65302: LD_VAR 0 2
65306: PUSH
65307: LD_INT 4
65309: MINUS
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: LIST
65318: PUSH
65319: LD_VAR 0 1
65323: PUSH
65324: LD_INT 3
65326: MINUS
65327: PUSH
65328: LD_VAR 0 2
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: PUSH
65341: LD_VAR 0 1
65345: PUSH
65346: LD_INT 4
65348: PLUS
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: LD_INT 4
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: LD_VAR 0 1
65367: PUSH
65368: LD_INT 3
65370: PLUS
65371: PUSH
65372: LD_VAR 0 2
65376: PUSH
65377: LD_INT 3
65379: PLUS
65380: PUSH
65381: LD_INT 5
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: LIST
65388: PUSH
65389: LD_VAR 0 1
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 4
65401: PLUS
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: ST_TO_ADDR
// end ; 1 :
65418: GO 66118
65420: LD_INT 1
65422: DOUBLE
65423: EQUAL
65424: IFTRUE 65428
65426: GO 65561
65428: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65429: LD_ADDR_VAR 0 5
65433: PUSH
65434: LD_VAR 0 1
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: LD_INT 4
65446: MINUS
65447: PUSH
65448: LD_INT 3
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: LIST
65455: PUSH
65456: LD_VAR 0 1
65460: PUSH
65461: LD_INT 3
65463: MINUS
65464: PUSH
65465: LD_VAR 0 2
65469: PUSH
65470: LD_INT 3
65472: MINUS
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: PUSH
65482: LD_VAR 0 1
65486: PUSH
65487: LD_INT 4
65489: MINUS
65490: PUSH
65491: LD_VAR 0 2
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_VAR 0 2
65513: PUSH
65514: LD_INT 3
65516: PLUS
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: LD_VAR 0 1
65530: PUSH
65531: LD_INT 4
65533: PLUS
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_INT 4
65542: PLUS
65543: PUSH
65544: LD_INT 5
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: ST_TO_ADDR
// end ; 2 :
65559: GO 66118
65561: LD_INT 2
65563: DOUBLE
65564: EQUAL
65565: IFTRUE 65569
65567: GO 65698
65569: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65570: LD_ADDR_VAR 0 5
65574: PUSH
65575: LD_VAR 0 1
65579: PUSH
65580: LD_VAR 0 2
65584: PUSH
65585: LD_INT 3
65587: MINUS
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: PUSH
65597: LD_VAR 0 1
65601: PUSH
65602: LD_INT 4
65604: PLUS
65605: PUSH
65606: LD_VAR 0 2
65610: PUSH
65611: LD_INT 4
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: PUSH
65619: LD_VAR 0 1
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: LD_INT 4
65631: PLUS
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: PUSH
65641: LD_VAR 0 1
65645: PUSH
65646: LD_INT 3
65648: MINUS
65649: PUSH
65650: LD_VAR 0 2
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: PUSH
65663: LD_VAR 0 1
65667: PUSH
65668: LD_INT 4
65670: MINUS
65671: PUSH
65672: LD_VAR 0 2
65676: PUSH
65677: LD_INT 4
65679: MINUS
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: ST_TO_ADDR
// end ; 3 :
65696: GO 66118
65698: LD_INT 3
65700: DOUBLE
65701: EQUAL
65702: IFTRUE 65706
65704: GO 65839
65706: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65707: LD_ADDR_VAR 0 5
65711: PUSH
65712: LD_VAR 0 1
65716: PUSH
65717: LD_INT 3
65719: PLUS
65720: PUSH
65721: LD_VAR 0 2
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: PUSH
65734: LD_VAR 0 1
65738: PUSH
65739: LD_INT 4
65741: PLUS
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 4
65750: PLUS
65751: PUSH
65752: LD_INT 5
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: PUSH
65760: LD_VAR 0 1
65764: PUSH
65765: LD_INT 4
65767: MINUS
65768: PUSH
65769: LD_VAR 0 2
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: PUSH
65782: LD_VAR 0 1
65786: PUSH
65787: LD_VAR 0 2
65791: PUSH
65792: LD_INT 4
65794: MINUS
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: PUSH
65804: LD_VAR 0 1
65808: PUSH
65809: LD_INT 3
65811: MINUS
65812: PUSH
65813: LD_VAR 0 2
65817: PUSH
65818: LD_INT 3
65820: MINUS
65821: PUSH
65822: LD_INT 2
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: ST_TO_ADDR
// end ; 4 :
65837: GO 66118
65839: LD_INT 4
65841: DOUBLE
65842: EQUAL
65843: IFTRUE 65847
65845: GO 65980
65847: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65848: LD_ADDR_VAR 0 5
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 4
65865: PLUS
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: PUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 3
65882: PLUS
65883: PUSH
65884: LD_VAR 0 2
65888: PUSH
65889: LD_INT 3
65891: PLUS
65892: PUSH
65893: LD_INT 5
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: PUSH
65901: LD_VAR 0 1
65905: PUSH
65906: LD_INT 4
65908: PLUS
65909: PUSH
65910: LD_VAR 0 2
65914: PUSH
65915: LD_INT 4
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: LD_VAR 0 2
65932: PUSH
65933: LD_INT 3
65935: MINUS
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: LD_VAR 0 1
65949: PUSH
65950: LD_INT 4
65952: MINUS
65953: PUSH
65954: LD_VAR 0 2
65958: PUSH
65959: LD_INT 4
65961: MINUS
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: ST_TO_ADDR
// end ; 5 :
65978: GO 66118
65980: LD_INT 5
65982: DOUBLE
65983: EQUAL
65984: IFTRUE 65988
65986: GO 66117
65988: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65989: LD_ADDR_VAR 0 5
65993: PUSH
65994: LD_VAR 0 1
65998: PUSH
65999: LD_INT 4
66001: MINUS
66002: PUSH
66003: LD_VAR 0 2
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: LIST
66015: PUSH
66016: LD_VAR 0 1
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: LD_INT 4
66028: MINUS
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 4
66045: PLUS
66046: PUSH
66047: LD_VAR 0 2
66051: PUSH
66052: LD_INT 4
66054: PLUS
66055: PUSH
66056: LD_INT 5
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 3
66071: PLUS
66072: PUSH
66073: LD_VAR 0 2
66077: PUSH
66078: LD_INT 4
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: PUSH
66086: LD_VAR 0 1
66090: PUSH
66091: LD_VAR 0 2
66095: PUSH
66096: LD_INT 3
66098: PLUS
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: ST_TO_ADDR
// end ; end ;
66115: GO 66118
66117: POP
// result := list ;
66118: LD_ADDR_VAR 0 4
66122: PUSH
66123: LD_VAR 0 5
66127: ST_TO_ADDR
// end ;
66128: LD_VAR 0 4
66132: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66133: LD_INT 0
66135: PPUSH
66136: PPUSH
66137: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66138: LD_VAR 0 1
66142: NOT
66143: PUSH
66144: LD_VAR 0 2
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: LD_INT 4
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: IN
66167: NOT
66168: OR
66169: IFFALSE 66173
// exit ;
66171: GO 66265
// tmp := [ ] ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: EMPTY
66179: ST_TO_ADDR
// for i in units do
66180: LD_ADDR_VAR 0 4
66184: PUSH
66185: LD_VAR 0 1
66189: PUSH
66190: FOR_IN
66191: IFFALSE 66234
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66193: LD_ADDR_VAR 0 5
66197: PUSH
66198: LD_VAR 0 5
66202: PPUSH
66203: LD_VAR 0 5
66207: PUSH
66208: LD_INT 1
66210: PLUS
66211: PPUSH
66212: LD_VAR 0 4
66216: PPUSH
66217: LD_VAR 0 2
66221: PPUSH
66222: CALL_OW 259
66226: PPUSH
66227: CALL_OW 2
66231: ST_TO_ADDR
66232: GO 66190
66234: POP
66235: POP
// if not tmp then
66236: LD_VAR 0 5
66240: NOT
66241: IFFALSE 66245
// exit ;
66243: GO 66265
// result := SortListByListDesc ( units , tmp ) ;
66245: LD_ADDR_VAR 0 3
66249: PUSH
66250: LD_VAR 0 1
66254: PPUSH
66255: LD_VAR 0 5
66259: PPUSH
66260: CALL_OW 77
66264: ST_TO_ADDR
// end ;
66265: LD_VAR 0 3
66269: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66270: LD_INT 0
66272: PPUSH
66273: PPUSH
66274: PPUSH
// result := false ;
66275: LD_ADDR_VAR 0 3
66279: PUSH
66280: LD_INT 0
66282: ST_TO_ADDR
// x := GetX ( building ) ;
66283: LD_ADDR_VAR 0 4
66287: PUSH
66288: LD_VAR 0 2
66292: PPUSH
66293: CALL_OW 250
66297: ST_TO_ADDR
// y := GetY ( building ) ;
66298: LD_ADDR_VAR 0 5
66302: PUSH
66303: LD_VAR 0 2
66307: PPUSH
66308: CALL_OW 251
66312: ST_TO_ADDR
// if not building or not x or not y then
66313: LD_VAR 0 2
66317: NOT
66318: PUSH
66319: LD_VAR 0 4
66323: NOT
66324: OR
66325: PUSH
66326: LD_VAR 0 5
66330: NOT
66331: OR
66332: IFFALSE 66336
// exit ;
66334: GO 66428
// if GetTaskList ( unit ) then
66336: LD_VAR 0 1
66340: PPUSH
66341: CALL_OW 437
66345: IFFALSE 66428
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66347: LD_STRING e
66349: PUSH
66350: LD_VAR 0 1
66354: PPUSH
66355: CALL_OW 437
66359: PUSH
66360: LD_INT 1
66362: ARRAY
66363: PUSH
66364: LD_INT 1
66366: ARRAY
66367: EQUAL
66368: PUSH
66369: LD_VAR 0 4
66373: PUSH
66374: LD_VAR 0 1
66378: PPUSH
66379: CALL_OW 437
66383: PUSH
66384: LD_INT 1
66386: ARRAY
66387: PUSH
66388: LD_INT 2
66390: ARRAY
66391: EQUAL
66392: AND
66393: PUSH
66394: LD_VAR 0 5
66398: PUSH
66399: LD_VAR 0 1
66403: PPUSH
66404: CALL_OW 437
66408: PUSH
66409: LD_INT 1
66411: ARRAY
66412: PUSH
66413: LD_INT 3
66415: ARRAY
66416: EQUAL
66417: AND
66418: IFFALSE 66428
// result := true end ;
66420: LD_ADDR_VAR 0 3
66424: PUSH
66425: LD_INT 1
66427: ST_TO_ADDR
// end ;
66428: LD_VAR 0 3
66432: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66433: LD_INT 0
66435: PPUSH
// result := false ;
66436: LD_ADDR_VAR 0 4
66440: PUSH
66441: LD_INT 0
66443: ST_TO_ADDR
// if GetTaskList ( unit ) then
66444: LD_VAR 0 1
66448: PPUSH
66449: CALL_OW 437
66453: IFFALSE 66536
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66455: LD_STRING M
66457: PUSH
66458: LD_VAR 0 1
66462: PPUSH
66463: CALL_OW 437
66467: PUSH
66468: LD_INT 1
66470: ARRAY
66471: PUSH
66472: LD_INT 1
66474: ARRAY
66475: EQUAL
66476: PUSH
66477: LD_VAR 0 2
66481: PUSH
66482: LD_VAR 0 1
66486: PPUSH
66487: CALL_OW 437
66491: PUSH
66492: LD_INT 1
66494: ARRAY
66495: PUSH
66496: LD_INT 2
66498: ARRAY
66499: EQUAL
66500: AND
66501: PUSH
66502: LD_VAR 0 3
66506: PUSH
66507: LD_VAR 0 1
66511: PPUSH
66512: CALL_OW 437
66516: PUSH
66517: LD_INT 1
66519: ARRAY
66520: PUSH
66521: LD_INT 3
66523: ARRAY
66524: EQUAL
66525: AND
66526: IFFALSE 66536
// result := true ;
66528: LD_ADDR_VAR 0 4
66532: PUSH
66533: LD_INT 1
66535: ST_TO_ADDR
// end ; end ;
66536: LD_VAR 0 4
66540: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66541: LD_INT 0
66543: PPUSH
66544: PPUSH
66545: PPUSH
66546: PPUSH
// if not unit or not area then
66547: LD_VAR 0 1
66551: NOT
66552: PUSH
66553: LD_VAR 0 2
66557: NOT
66558: OR
66559: IFFALSE 66563
// exit ;
66561: GO 66727
// tmp := AreaToList ( area , i ) ;
66563: LD_ADDR_VAR 0 6
66567: PUSH
66568: LD_VAR 0 2
66572: PPUSH
66573: LD_VAR 0 5
66577: PPUSH
66578: CALL_OW 517
66582: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66583: LD_ADDR_VAR 0 5
66587: PUSH
66588: DOUBLE
66589: LD_INT 1
66591: DEC
66592: ST_TO_ADDR
66593: LD_VAR 0 6
66597: PUSH
66598: LD_INT 1
66600: ARRAY
66601: PUSH
66602: FOR_TO
66603: IFFALSE 66725
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66605: LD_ADDR_VAR 0 7
66609: PUSH
66610: LD_VAR 0 6
66614: PUSH
66615: LD_INT 1
66617: ARRAY
66618: PUSH
66619: LD_VAR 0 5
66623: ARRAY
66624: PUSH
66625: LD_VAR 0 6
66629: PUSH
66630: LD_INT 2
66632: ARRAY
66633: PUSH
66634: LD_VAR 0 5
66638: ARRAY
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66644: LD_VAR 0 7
66648: PUSH
66649: LD_INT 1
66651: ARRAY
66652: PPUSH
66653: LD_VAR 0 7
66657: PUSH
66658: LD_INT 2
66660: ARRAY
66661: PPUSH
66662: CALL_OW 428
66666: PUSH
66667: LD_INT 0
66669: EQUAL
66670: IFFALSE 66723
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66672: LD_VAR 0 1
66676: PPUSH
66677: LD_VAR 0 7
66681: PUSH
66682: LD_INT 1
66684: ARRAY
66685: PPUSH
66686: LD_VAR 0 7
66690: PUSH
66691: LD_INT 2
66693: ARRAY
66694: PPUSH
66695: LD_VAR 0 3
66699: PPUSH
66700: CALL_OW 48
// result := IsPlaced ( unit ) ;
66704: LD_ADDR_VAR 0 4
66708: PUSH
66709: LD_VAR 0 1
66713: PPUSH
66714: CALL_OW 305
66718: ST_TO_ADDR
// exit ;
66719: POP
66720: POP
66721: GO 66727
// end ; end ;
66723: GO 66602
66725: POP
66726: POP
// end ;
66727: LD_VAR 0 4
66731: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66732: LD_INT 0
66734: PPUSH
66735: PPUSH
66736: PPUSH
// if not side or side > 8 then
66737: LD_VAR 0 1
66741: NOT
66742: PUSH
66743: LD_VAR 0 1
66747: PUSH
66748: LD_INT 8
66750: GREATER
66751: OR
66752: IFFALSE 66756
// exit ;
66754: GO 66943
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66756: LD_ADDR_VAR 0 4
66760: PUSH
66761: LD_INT 22
66763: PUSH
66764: LD_VAR 0 1
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 21
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PPUSH
66787: CALL_OW 69
66791: ST_TO_ADDR
// if not tmp then
66792: LD_VAR 0 4
66796: NOT
66797: IFFALSE 66801
// exit ;
66799: GO 66943
// enable_addtolog := true ;
66801: LD_ADDR_OWVAR 81
66805: PUSH
66806: LD_INT 1
66808: ST_TO_ADDR
// AddToLog ( [ ) ;
66809: LD_STRING [
66811: PPUSH
66812: CALL_OW 561
// for i in tmp do
66816: LD_ADDR_VAR 0 3
66820: PUSH
66821: LD_VAR 0 4
66825: PUSH
66826: FOR_IN
66827: IFFALSE 66934
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66829: LD_STRING [
66831: PUSH
66832: LD_VAR 0 3
66836: PPUSH
66837: CALL_OW 266
66841: STR
66842: PUSH
66843: LD_STRING , 
66845: STR
66846: PUSH
66847: LD_VAR 0 3
66851: PPUSH
66852: CALL_OW 250
66856: STR
66857: PUSH
66858: LD_STRING , 
66860: STR
66861: PUSH
66862: LD_VAR 0 3
66866: PPUSH
66867: CALL_OW 251
66871: STR
66872: PUSH
66873: LD_STRING , 
66875: STR
66876: PUSH
66877: LD_VAR 0 3
66881: PPUSH
66882: CALL_OW 254
66886: STR
66887: PUSH
66888: LD_STRING , 
66890: STR
66891: PUSH
66892: LD_VAR 0 3
66896: PPUSH
66897: LD_INT 1
66899: PPUSH
66900: CALL_OW 268
66904: STR
66905: PUSH
66906: LD_STRING , 
66908: STR
66909: PUSH
66910: LD_VAR 0 3
66914: PPUSH
66915: LD_INT 2
66917: PPUSH
66918: CALL_OW 268
66922: STR
66923: PUSH
66924: LD_STRING ],
66926: STR
66927: PPUSH
66928: CALL_OW 561
// end ;
66932: GO 66826
66934: POP
66935: POP
// AddToLog ( ]; ) ;
66936: LD_STRING ];
66938: PPUSH
66939: CALL_OW 561
// end ;
66943: LD_VAR 0 2
66947: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66948: LD_INT 0
66950: PPUSH
66951: PPUSH
66952: PPUSH
66953: PPUSH
66954: PPUSH
// if not area or not rate or not max then
66955: LD_VAR 0 1
66959: NOT
66960: PUSH
66961: LD_VAR 0 2
66965: NOT
66966: OR
66967: PUSH
66968: LD_VAR 0 4
66972: NOT
66973: OR
66974: IFFALSE 66978
// exit ;
66976: GO 67170
// while 1 do
66978: LD_INT 1
66980: IFFALSE 67170
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66982: LD_ADDR_VAR 0 9
66986: PUSH
66987: LD_VAR 0 1
66991: PPUSH
66992: LD_INT 1
66994: PPUSH
66995: CALL_OW 287
66999: PUSH
67000: LD_INT 10
67002: MUL
67003: ST_TO_ADDR
// r := rate / 10 ;
67004: LD_ADDR_VAR 0 7
67008: PUSH
67009: LD_VAR 0 2
67013: PUSH
67014: LD_INT 10
67016: DIVREAL
67017: ST_TO_ADDR
// time := 1 1$00 ;
67018: LD_ADDR_VAR 0 8
67022: PUSH
67023: LD_INT 2100
67025: ST_TO_ADDR
// if amount < min then
67026: LD_VAR 0 9
67030: PUSH
67031: LD_VAR 0 3
67035: LESS
67036: IFFALSE 67054
// r := r * 2 else
67038: LD_ADDR_VAR 0 7
67042: PUSH
67043: LD_VAR 0 7
67047: PUSH
67048: LD_INT 2
67050: MUL
67051: ST_TO_ADDR
67052: GO 67080
// if amount > max then
67054: LD_VAR 0 9
67058: PUSH
67059: LD_VAR 0 4
67063: GREATER
67064: IFFALSE 67080
// r := r / 2 ;
67066: LD_ADDR_VAR 0 7
67070: PUSH
67071: LD_VAR 0 7
67075: PUSH
67076: LD_INT 2
67078: DIVREAL
67079: ST_TO_ADDR
// time := time / r ;
67080: LD_ADDR_VAR 0 8
67084: PUSH
67085: LD_VAR 0 8
67089: PUSH
67090: LD_VAR 0 7
67094: DIVREAL
67095: ST_TO_ADDR
// if time < 0 then
67096: LD_VAR 0 8
67100: PUSH
67101: LD_INT 0
67103: LESS
67104: IFFALSE 67121
// time := time * - 1 ;
67106: LD_ADDR_VAR 0 8
67110: PUSH
67111: LD_VAR 0 8
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: MUL
67120: ST_TO_ADDR
// wait ( time ) ;
67121: LD_VAR 0 8
67125: PPUSH
67126: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67130: LD_INT 35
67132: PPUSH
67133: LD_INT 875
67135: PPUSH
67136: CALL_OW 12
67140: PPUSH
67141: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67145: LD_INT 1
67147: PPUSH
67148: LD_INT 5
67150: PPUSH
67151: CALL_OW 12
67155: PPUSH
67156: LD_VAR 0 1
67160: PPUSH
67161: LD_INT 1
67163: PPUSH
67164: CALL_OW 55
// end ;
67168: GO 66978
// end ;
67170: LD_VAR 0 5
67174: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67175: LD_INT 0
67177: PPUSH
67178: PPUSH
67179: PPUSH
67180: PPUSH
67181: PPUSH
67182: PPUSH
67183: PPUSH
67184: PPUSH
// if not turrets or not factories then
67185: LD_VAR 0 1
67189: NOT
67190: PUSH
67191: LD_VAR 0 2
67195: NOT
67196: OR
67197: IFFALSE 67201
// exit ;
67199: GO 67508
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67201: LD_ADDR_VAR 0 10
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: LD_INT 6
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: LD_INT 4
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 5
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 24
67243: PUSH
67244: LD_INT 25
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 23
67253: PUSH
67254: LD_INT 27
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 42
67267: PUSH
67268: LD_INT 43
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 44
67277: PUSH
67278: LD_INT 46
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 45
67287: PUSH
67288: LD_INT 47
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: LIST
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: LIST
67304: ST_TO_ADDR
// result := [ ] ;
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: EMPTY
67311: ST_TO_ADDR
// for i in turrets do
67312: LD_ADDR_VAR 0 4
67316: PUSH
67317: LD_VAR 0 1
67321: PUSH
67322: FOR_IN
67323: IFFALSE 67506
// begin nat := GetNation ( i ) ;
67325: LD_ADDR_VAR 0 7
67329: PUSH
67330: LD_VAR 0 4
67334: PPUSH
67335: CALL_OW 248
67339: ST_TO_ADDR
// weapon := 0 ;
67340: LD_ADDR_VAR 0 8
67344: PUSH
67345: LD_INT 0
67347: ST_TO_ADDR
// if not nat then
67348: LD_VAR 0 7
67352: NOT
67353: IFFALSE 67357
// continue ;
67355: GO 67322
// for j in list [ nat ] do
67357: LD_ADDR_VAR 0 5
67361: PUSH
67362: LD_VAR 0 10
67366: PUSH
67367: LD_VAR 0 7
67371: ARRAY
67372: PUSH
67373: FOR_IN
67374: IFFALSE 67415
// if GetBWeapon ( i ) = j [ 1 ] then
67376: LD_VAR 0 4
67380: PPUSH
67381: CALL_OW 269
67385: PUSH
67386: LD_VAR 0 5
67390: PUSH
67391: LD_INT 1
67393: ARRAY
67394: EQUAL
67395: IFFALSE 67413
// begin weapon := j [ 2 ] ;
67397: LD_ADDR_VAR 0 8
67401: PUSH
67402: LD_VAR 0 5
67406: PUSH
67407: LD_INT 2
67409: ARRAY
67410: ST_TO_ADDR
// break ;
67411: GO 67415
// end ;
67413: GO 67373
67415: POP
67416: POP
// if not weapon then
67417: LD_VAR 0 8
67421: NOT
67422: IFFALSE 67426
// continue ;
67424: GO 67322
// for k in factories do
67426: LD_ADDR_VAR 0 6
67430: PUSH
67431: LD_VAR 0 2
67435: PUSH
67436: FOR_IN
67437: IFFALSE 67502
// begin weapons := AvailableWeaponList ( k ) ;
67439: LD_ADDR_VAR 0 9
67443: PUSH
67444: LD_VAR 0 6
67448: PPUSH
67449: CALL_OW 478
67453: ST_TO_ADDR
// if not weapons then
67454: LD_VAR 0 9
67458: NOT
67459: IFFALSE 67463
// continue ;
67461: GO 67436
// if weapon in weapons then
67463: LD_VAR 0 8
67467: PUSH
67468: LD_VAR 0 9
67472: IN
67473: IFFALSE 67500
// begin result := [ i , weapon ] ;
67475: LD_ADDR_VAR 0 3
67479: PUSH
67480: LD_VAR 0 4
67484: PUSH
67485: LD_VAR 0 8
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: ST_TO_ADDR
// exit ;
67494: POP
67495: POP
67496: POP
67497: POP
67498: GO 67508
// end ; end ;
67500: GO 67436
67502: POP
67503: POP
// end ;
67504: GO 67322
67506: POP
67507: POP
// end ;
67508: LD_VAR 0 3
67512: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67513: LD_INT 0
67515: PPUSH
// if not side or side > 8 then
67516: LD_VAR 0 3
67520: NOT
67521: PUSH
67522: LD_VAR 0 3
67526: PUSH
67527: LD_INT 8
67529: GREATER
67530: OR
67531: IFFALSE 67535
// exit ;
67533: GO 67594
// if not range then
67535: LD_VAR 0 4
67539: NOT
67540: IFFALSE 67551
// range := - 12 ;
67542: LD_ADDR_VAR 0 4
67546: PUSH
67547: LD_INT 12
67549: NEG
67550: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67551: LD_VAR 0 1
67555: PPUSH
67556: LD_VAR 0 2
67560: PPUSH
67561: LD_VAR 0 3
67565: PPUSH
67566: LD_VAR 0 4
67570: PPUSH
67571: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67575: LD_VAR 0 1
67579: PPUSH
67580: LD_VAR 0 2
67584: PPUSH
67585: LD_VAR 0 3
67589: PPUSH
67590: CALL_OW 331
// end ;
67594: LD_VAR 0 5
67598: RET
// export function Video ( mode ) ; begin
67599: LD_INT 0
67601: PPUSH
// ingame_video = mode ;
67602: LD_ADDR_OWVAR 52
67606: PUSH
67607: LD_VAR 0 1
67611: ST_TO_ADDR
// interface_hidden = mode ;
67612: LD_ADDR_OWVAR 54
67616: PUSH
67617: LD_VAR 0 1
67621: ST_TO_ADDR
// end ;
67622: LD_VAR 0 2
67626: RET
// export function Join ( array , element ) ; begin
67627: LD_INT 0
67629: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67630: LD_ADDR_VAR 0 3
67634: PUSH
67635: LD_VAR 0 1
67639: PPUSH
67640: LD_VAR 0 1
67644: PUSH
67645: LD_INT 1
67647: PLUS
67648: PPUSH
67649: LD_VAR 0 2
67653: PPUSH
67654: CALL_OW 1
67658: ST_TO_ADDR
// end ;
67659: LD_VAR 0 3
67663: RET
// export function JoinUnion ( array , element ) ; begin
67664: LD_INT 0
67666: PPUSH
// result := array union element ;
67667: LD_ADDR_VAR 0 3
67671: PUSH
67672: LD_VAR 0 1
67676: PUSH
67677: LD_VAR 0 2
67681: UNION
67682: ST_TO_ADDR
// end ;
67683: LD_VAR 0 3
67687: RET
// export function GetBehemoths ( side ) ; begin
67688: LD_INT 0
67690: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67691: LD_ADDR_VAR 0 2
67695: PUSH
67696: LD_INT 22
67698: PUSH
67699: LD_VAR 0 1
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 31
67710: PUSH
67711: LD_INT 25
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PPUSH
67722: CALL_OW 69
67726: ST_TO_ADDR
// end ;
67727: LD_VAR 0 2
67731: RET
// export function Shuffle ( array ) ; var i , index ; begin
67732: LD_INT 0
67734: PPUSH
67735: PPUSH
67736: PPUSH
// result := [ ] ;
67737: LD_ADDR_VAR 0 2
67741: PUSH
67742: EMPTY
67743: ST_TO_ADDR
// if not array then
67744: LD_VAR 0 1
67748: NOT
67749: IFFALSE 67753
// exit ;
67751: GO 67852
// Randomize ;
67753: CALL_OW 10
// for i = array downto 1 do
67757: LD_ADDR_VAR 0 3
67761: PUSH
67762: DOUBLE
67763: LD_VAR 0 1
67767: INC
67768: ST_TO_ADDR
67769: LD_INT 1
67771: PUSH
67772: FOR_DOWNTO
67773: IFFALSE 67850
// begin index := rand ( 1 , array ) ;
67775: LD_ADDR_VAR 0 4
67779: PUSH
67780: LD_INT 1
67782: PPUSH
67783: LD_VAR 0 1
67787: PPUSH
67788: CALL_OW 12
67792: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67793: LD_ADDR_VAR 0 2
67797: PUSH
67798: LD_VAR 0 2
67802: PPUSH
67803: LD_VAR 0 2
67807: PUSH
67808: LD_INT 1
67810: PLUS
67811: PPUSH
67812: LD_VAR 0 1
67816: PUSH
67817: LD_VAR 0 4
67821: ARRAY
67822: PPUSH
67823: CALL_OW 2
67827: ST_TO_ADDR
// array := Delete ( array , index ) ;
67828: LD_ADDR_VAR 0 1
67832: PUSH
67833: LD_VAR 0 1
67837: PPUSH
67838: LD_VAR 0 4
67842: PPUSH
67843: CALL_OW 3
67847: ST_TO_ADDR
// end ;
67848: GO 67772
67850: POP
67851: POP
// end ;
67852: LD_VAR 0 2
67856: RET
// export function GetBaseMaterials ( base ) ; begin
67857: LD_INT 0
67859: PPUSH
// result := [ 0 , 0 , 0 ] ;
67860: LD_ADDR_VAR 0 2
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: ST_TO_ADDR
// if not base then
67879: LD_VAR 0 1
67883: NOT
67884: IFFALSE 67888
// exit ;
67886: GO 67937
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67888: LD_ADDR_VAR 0 2
67892: PUSH
67893: LD_VAR 0 1
67897: PPUSH
67898: LD_INT 1
67900: PPUSH
67901: CALL_OW 275
67905: PUSH
67906: LD_VAR 0 1
67910: PPUSH
67911: LD_INT 2
67913: PPUSH
67914: CALL_OW 275
67918: PUSH
67919: LD_VAR 0 1
67923: PPUSH
67924: LD_INT 3
67926: PPUSH
67927: CALL_OW 275
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: ST_TO_ADDR
// end ;
67937: LD_VAR 0 2
67941: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67942: LD_INT 0
67944: PPUSH
67945: PPUSH
// result := array ;
67946: LD_ADDR_VAR 0 3
67950: PUSH
67951: LD_VAR 0 1
67955: ST_TO_ADDR
// if size > 0 then
67956: LD_VAR 0 2
67960: PUSH
67961: LD_INT 0
67963: GREATER
67964: IFFALSE 68010
// for i := array downto size do
67966: LD_ADDR_VAR 0 4
67970: PUSH
67971: DOUBLE
67972: LD_VAR 0 1
67976: INC
67977: ST_TO_ADDR
67978: LD_VAR 0 2
67982: PUSH
67983: FOR_DOWNTO
67984: IFFALSE 68008
// result := Delete ( result , result ) ;
67986: LD_ADDR_VAR 0 3
67990: PUSH
67991: LD_VAR 0 3
67995: PPUSH
67996: LD_VAR 0 3
68000: PPUSH
68001: CALL_OW 3
68005: ST_TO_ADDR
68006: GO 67983
68008: POP
68009: POP
// end ;
68010: LD_VAR 0 3
68014: RET
// export function ComExit ( unit ) ; var tmp ; begin
68015: LD_INT 0
68017: PPUSH
68018: PPUSH
// if not IsInUnit ( unit ) then
68019: LD_VAR 0 1
68023: PPUSH
68024: CALL_OW 310
68028: NOT
68029: IFFALSE 68033
// exit ;
68031: GO 68093
// tmp := IsInUnit ( unit ) ;
68033: LD_ADDR_VAR 0 3
68037: PUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: CALL_OW 310
68047: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68048: LD_VAR 0 3
68052: PPUSH
68053: CALL_OW 247
68057: PUSH
68058: LD_INT 2
68060: EQUAL
68061: IFFALSE 68074
// ComExitVehicle ( unit ) else
68063: LD_VAR 0 1
68067: PPUSH
68068: CALL_OW 121
68072: GO 68083
// ComExitBuilding ( unit ) ;
68074: LD_VAR 0 1
68078: PPUSH
68079: CALL_OW 122
// result := tmp ;
68083: LD_ADDR_VAR 0 2
68087: PUSH
68088: LD_VAR 0 3
68092: ST_TO_ADDR
// end ;
68093: LD_VAR 0 2
68097: RET
// export function ComExitAll ( units ) ; var i ; begin
68098: LD_INT 0
68100: PPUSH
68101: PPUSH
// if not units then
68102: LD_VAR 0 1
68106: NOT
68107: IFFALSE 68111
// exit ;
68109: GO 68137
// for i in units do
68111: LD_ADDR_VAR 0 3
68115: PUSH
68116: LD_VAR 0 1
68120: PUSH
68121: FOR_IN
68122: IFFALSE 68135
// ComExit ( i ) ;
68124: LD_VAR 0 3
68128: PPUSH
68129: CALL 68015 0 1
68133: GO 68121
68135: POP
68136: POP
// end ;
68137: LD_VAR 0 2
68141: RET
// export function ResetHc ; begin
68142: LD_INT 0
68144: PPUSH
// InitHc ;
68145: CALL_OW 19
// hc_importance := 0 ;
68149: LD_ADDR_OWVAR 32
68153: PUSH
68154: LD_INT 0
68156: ST_TO_ADDR
// end ;
68157: LD_VAR 0 1
68161: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68162: LD_INT 0
68164: PPUSH
68165: PPUSH
68166: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68167: LD_ADDR_VAR 0 6
68171: PUSH
68172: LD_VAR 0 1
68176: PUSH
68177: LD_VAR 0 3
68181: PLUS
68182: PUSH
68183: LD_INT 2
68185: DIV
68186: ST_TO_ADDR
// if _x < 0 then
68187: LD_VAR 0 6
68191: PUSH
68192: LD_INT 0
68194: LESS
68195: IFFALSE 68212
// _x := _x * - 1 ;
68197: LD_ADDR_VAR 0 6
68201: PUSH
68202: LD_VAR 0 6
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: MUL
68211: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68212: LD_ADDR_VAR 0 7
68216: PUSH
68217: LD_VAR 0 2
68221: PUSH
68222: LD_VAR 0 4
68226: PLUS
68227: PUSH
68228: LD_INT 2
68230: DIV
68231: ST_TO_ADDR
// if _y < 0 then
68232: LD_VAR 0 7
68236: PUSH
68237: LD_INT 0
68239: LESS
68240: IFFALSE 68257
// _y := _y * - 1 ;
68242: LD_ADDR_VAR 0 7
68246: PUSH
68247: LD_VAR 0 7
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: MUL
68256: ST_TO_ADDR
// result := [ _x , _y ] ;
68257: LD_ADDR_VAR 0 5
68261: PUSH
68262: LD_VAR 0 6
68266: PUSH
68267: LD_VAR 0 7
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: ST_TO_ADDR
// end ;
68276: LD_VAR 0 5
68280: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68281: LD_INT 0
68283: PPUSH
68284: PPUSH
68285: PPUSH
68286: PPUSH
// task := GetTaskList ( unit ) ;
68287: LD_ADDR_VAR 0 7
68291: PUSH
68292: LD_VAR 0 1
68296: PPUSH
68297: CALL_OW 437
68301: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68302: LD_VAR 0 7
68306: NOT
68307: PUSH
68308: LD_VAR 0 1
68312: PPUSH
68313: LD_VAR 0 2
68317: PPUSH
68318: CALL_OW 308
68322: NOT
68323: AND
68324: IFFALSE 68328
// exit ;
68326: GO 68446
// if IsInArea ( unit , area ) then
68328: LD_VAR 0 1
68332: PPUSH
68333: LD_VAR 0 2
68337: PPUSH
68338: CALL_OW 308
68342: IFFALSE 68360
// begin ComMoveToArea ( unit , goAway ) ;
68344: LD_VAR 0 1
68348: PPUSH
68349: LD_VAR 0 3
68353: PPUSH
68354: CALL_OW 113
// exit ;
68358: GO 68446
// end ; if task [ 1 ] [ 1 ] <> M then
68360: LD_VAR 0 7
68364: PUSH
68365: LD_INT 1
68367: ARRAY
68368: PUSH
68369: LD_INT 1
68371: ARRAY
68372: PUSH
68373: LD_STRING M
68375: NONEQUAL
68376: IFFALSE 68380
// exit ;
68378: GO 68446
// x := task [ 1 ] [ 2 ] ;
68380: LD_ADDR_VAR 0 5
68384: PUSH
68385: LD_VAR 0 7
68389: PUSH
68390: LD_INT 1
68392: ARRAY
68393: PUSH
68394: LD_INT 2
68396: ARRAY
68397: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68398: LD_ADDR_VAR 0 6
68402: PUSH
68403: LD_VAR 0 7
68407: PUSH
68408: LD_INT 1
68410: ARRAY
68411: PUSH
68412: LD_INT 3
68414: ARRAY
68415: ST_TO_ADDR
// if InArea ( x , y , area ) then
68416: LD_VAR 0 5
68420: PPUSH
68421: LD_VAR 0 6
68425: PPUSH
68426: LD_VAR 0 2
68430: PPUSH
68431: CALL_OW 309
68435: IFFALSE 68446
// ComStop ( unit ) ;
68437: LD_VAR 0 1
68441: PPUSH
68442: CALL_OW 141
// end ;
68446: LD_VAR 0 4
68450: RET
// export function Abs ( value ) ; begin
68451: LD_INT 0
68453: PPUSH
// result := value ;
68454: LD_ADDR_VAR 0 2
68458: PUSH
68459: LD_VAR 0 1
68463: ST_TO_ADDR
// if value < 0 then
68464: LD_VAR 0 1
68468: PUSH
68469: LD_INT 0
68471: LESS
68472: IFFALSE 68489
// result := value * - 1 ;
68474: LD_ADDR_VAR 0 2
68478: PUSH
68479: LD_VAR 0 1
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: MUL
68488: ST_TO_ADDR
// end ;
68489: LD_VAR 0 2
68493: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68494: LD_INT 0
68496: PPUSH
68497: PPUSH
68498: PPUSH
68499: PPUSH
68500: PPUSH
68501: PPUSH
68502: PPUSH
68503: PPUSH
// if not unit or not building then
68504: LD_VAR 0 1
68508: NOT
68509: PUSH
68510: LD_VAR 0 2
68514: NOT
68515: OR
68516: IFFALSE 68520
// exit ;
68518: GO 68746
// x := GetX ( building ) ;
68520: LD_ADDR_VAR 0 4
68524: PUSH
68525: LD_VAR 0 2
68529: PPUSH
68530: CALL_OW 250
68534: ST_TO_ADDR
// y := GetY ( building ) ;
68535: LD_ADDR_VAR 0 6
68539: PUSH
68540: LD_VAR 0 2
68544: PPUSH
68545: CALL_OW 251
68549: ST_TO_ADDR
// d := GetDir ( building ) ;
68550: LD_ADDR_VAR 0 8
68554: PUSH
68555: LD_VAR 0 2
68559: PPUSH
68560: CALL_OW 254
68564: ST_TO_ADDR
// r := 4 ;
68565: LD_ADDR_VAR 0 9
68569: PUSH
68570: LD_INT 4
68572: ST_TO_ADDR
// for i := 1 to 5 do
68573: LD_ADDR_VAR 0 10
68577: PUSH
68578: DOUBLE
68579: LD_INT 1
68581: DEC
68582: ST_TO_ADDR
68583: LD_INT 5
68585: PUSH
68586: FOR_TO
68587: IFFALSE 68744
// begin _x := ShiftX ( x , d , r + i ) ;
68589: LD_ADDR_VAR 0 5
68593: PUSH
68594: LD_VAR 0 4
68598: PPUSH
68599: LD_VAR 0 8
68603: PPUSH
68604: LD_VAR 0 9
68608: PUSH
68609: LD_VAR 0 10
68613: PLUS
68614: PPUSH
68615: CALL_OW 272
68619: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68620: LD_ADDR_VAR 0 7
68624: PUSH
68625: LD_VAR 0 6
68629: PPUSH
68630: LD_VAR 0 8
68634: PPUSH
68635: LD_VAR 0 9
68639: PUSH
68640: LD_VAR 0 10
68644: PLUS
68645: PPUSH
68646: CALL_OW 273
68650: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68651: LD_VAR 0 5
68655: PPUSH
68656: LD_VAR 0 7
68660: PPUSH
68661: CALL_OW 488
68665: PUSH
68666: LD_VAR 0 5
68670: PPUSH
68671: LD_VAR 0 7
68675: PPUSH
68676: CALL_OW 428
68680: PPUSH
68681: CALL_OW 247
68685: PUSH
68686: LD_INT 3
68688: PUSH
68689: LD_INT 2
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: IN
68696: NOT
68697: AND
68698: IFFALSE 68742
// begin ComMoveXY ( unit , _x , _y ) ;
68700: LD_VAR 0 1
68704: PPUSH
68705: LD_VAR 0 5
68709: PPUSH
68710: LD_VAR 0 7
68714: PPUSH
68715: CALL_OW 111
// result := [ _x , _y ] ;
68719: LD_ADDR_VAR 0 3
68723: PUSH
68724: LD_VAR 0 5
68728: PUSH
68729: LD_VAR 0 7
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: ST_TO_ADDR
// exit ;
68738: POP
68739: POP
68740: GO 68746
// end ; end ;
68742: GO 68586
68744: POP
68745: POP
// end ;
68746: LD_VAR 0 3
68750: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68751: LD_INT 0
68753: PPUSH
68754: PPUSH
68755: PPUSH
// result := 0 ;
68756: LD_ADDR_VAR 0 3
68760: PUSH
68761: LD_INT 0
68763: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68764: LD_VAR 0 1
68768: PUSH
68769: LD_INT 0
68771: LESS
68772: PUSH
68773: LD_VAR 0 1
68777: PUSH
68778: LD_INT 8
68780: GREATER
68781: OR
68782: PUSH
68783: LD_VAR 0 2
68787: PUSH
68788: LD_INT 0
68790: LESS
68791: OR
68792: PUSH
68793: LD_VAR 0 2
68797: PUSH
68798: LD_INT 8
68800: GREATER
68801: OR
68802: IFFALSE 68806
// exit ;
68804: GO 68881
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: LD_INT 22
68813: PUSH
68814: LD_VAR 0 2
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PPUSH
68823: CALL_OW 69
68827: PUSH
68828: FOR_IN
68829: IFFALSE 68879
// begin un := UnitShoot ( i ) ;
68831: LD_ADDR_VAR 0 5
68835: PUSH
68836: LD_VAR 0 4
68840: PPUSH
68841: CALL_OW 504
68845: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68846: LD_VAR 0 5
68850: PPUSH
68851: CALL_OW 255
68855: PUSH
68856: LD_VAR 0 1
68860: EQUAL
68861: IFFALSE 68877
// begin result := un ;
68863: LD_ADDR_VAR 0 3
68867: PUSH
68868: LD_VAR 0 5
68872: ST_TO_ADDR
// exit ;
68873: POP
68874: POP
68875: GO 68881
// end ; end ;
68877: GO 68828
68879: POP
68880: POP
// end ;
68881: LD_VAR 0 3
68885: RET
// export function GetCargoBay ( units ) ; begin
68886: LD_INT 0
68888: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68889: LD_ADDR_VAR 0 2
68893: PUSH
68894: LD_VAR 0 1
68898: PPUSH
68899: LD_INT 2
68901: PUSH
68902: LD_INT 34
68904: PUSH
68905: LD_INT 12
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 34
68914: PUSH
68915: LD_INT 51
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 34
68924: PUSH
68925: LD_INT 32
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 34
68934: PUSH
68935: LD_EXP 44
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: PPUSH
68951: CALL_OW 72
68955: ST_TO_ADDR
// end ;
68956: LD_VAR 0 2
68960: RET
// export function Negate ( value ) ; begin
68961: LD_INT 0
68963: PPUSH
// result := not value ;
68964: LD_ADDR_VAR 0 2
68968: PUSH
68969: LD_VAR 0 1
68973: NOT
68974: ST_TO_ADDR
// end ;
68975: LD_VAR 0 2
68979: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
68980: LD_INT 0
68982: PPUSH
// if x1 = x2 then
68983: LD_VAR 0 1
68987: PUSH
68988: LD_VAR 0 3
68992: EQUAL
68993: IFFALSE 69027
// begin if y1 > y2 then
68995: LD_VAR 0 2
68999: PUSH
69000: LD_VAR 0 4
69004: GREATER
69005: IFFALSE 69017
// result := 0 else
69007: LD_ADDR_VAR 0 5
69011: PUSH
69012: LD_INT 0
69014: ST_TO_ADDR
69015: GO 69025
// result := 3 ;
69017: LD_ADDR_VAR 0 5
69021: PUSH
69022: LD_INT 3
69024: ST_TO_ADDR
// exit ;
69025: GO 69113
// end ; if y1 = y2 then
69027: LD_VAR 0 2
69031: PUSH
69032: LD_VAR 0 4
69036: EQUAL
69037: IFFALSE 69071
// begin if x1 > x2 then
69039: LD_VAR 0 1
69043: PUSH
69044: LD_VAR 0 3
69048: GREATER
69049: IFFALSE 69061
// result := 1 else
69051: LD_ADDR_VAR 0 5
69055: PUSH
69056: LD_INT 1
69058: ST_TO_ADDR
69059: GO 69069
// result := 4 ;
69061: LD_ADDR_VAR 0 5
69065: PUSH
69066: LD_INT 4
69068: ST_TO_ADDR
// exit ;
69069: GO 69113
// end ; if x1 > x2 and y1 > y2 then
69071: LD_VAR 0 1
69075: PUSH
69076: LD_VAR 0 3
69080: GREATER
69081: PUSH
69082: LD_VAR 0 2
69086: PUSH
69087: LD_VAR 0 4
69091: GREATER
69092: AND
69093: IFFALSE 69105
// result := 2 else
69095: LD_ADDR_VAR 0 5
69099: PUSH
69100: LD_INT 2
69102: ST_TO_ADDR
69103: GO 69113
// result := 5 ;
69105: LD_ADDR_VAR 0 5
69109: PUSH
69110: LD_INT 5
69112: ST_TO_ADDR
// end ;
69113: LD_VAR 0 5
69117: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69118: LD_INT 0
69120: PPUSH
69121: PPUSH
// if not driver or not IsInUnit ( driver ) then
69122: LD_VAR 0 1
69126: NOT
69127: PUSH
69128: LD_VAR 0 1
69132: PPUSH
69133: CALL_OW 310
69137: NOT
69138: OR
69139: IFFALSE 69143
// exit ;
69141: GO 69233
// vehicle := IsInUnit ( driver ) ;
69143: LD_ADDR_VAR 0 3
69147: PUSH
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 310
69157: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69158: LD_VAR 0 1
69162: PPUSH
69163: LD_STRING \
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: PUSH
69193: LD_STRING E
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_VAR 0 3
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PPUSH
69229: CALL_OW 446
// end ;
69233: LD_VAR 0 2
69237: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69238: LD_INT 0
69240: PPUSH
69241: PPUSH
// if not driver or not IsInUnit ( driver ) then
69242: LD_VAR 0 1
69246: NOT
69247: PUSH
69248: LD_VAR 0 1
69252: PPUSH
69253: CALL_OW 310
69257: NOT
69258: OR
69259: IFFALSE 69263
// exit ;
69261: GO 69353
// vehicle := IsInUnit ( driver ) ;
69263: LD_ADDR_VAR 0 3
69267: PUSH
69268: LD_VAR 0 1
69272: PPUSH
69273: CALL_OW 310
69277: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69278: LD_VAR 0 1
69282: PPUSH
69283: LD_STRING \
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 0
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: PUSH
69313: LD_STRING E
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: LD_VAR 0 3
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PPUSH
69349: CALL_OW 447
// end ;
69353: LD_VAR 0 2
69357: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69358: LD_INT 0
69360: PPUSH
69361: PPUSH
69362: PPUSH
// tmp := [ ] ;
69363: LD_ADDR_VAR 0 5
69367: PUSH
69368: EMPTY
69369: ST_TO_ADDR
// for i in units do
69370: LD_ADDR_VAR 0 4
69374: PUSH
69375: LD_VAR 0 1
69379: PUSH
69380: FOR_IN
69381: IFFALSE 69419
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69383: LD_ADDR_VAR 0 5
69387: PUSH
69388: LD_VAR 0 5
69392: PPUSH
69393: LD_VAR 0 5
69397: PUSH
69398: LD_INT 1
69400: PLUS
69401: PPUSH
69402: LD_VAR 0 4
69406: PPUSH
69407: CALL_OW 256
69411: PPUSH
69412: CALL_OW 2
69416: ST_TO_ADDR
69417: GO 69380
69419: POP
69420: POP
// if not tmp then
69421: LD_VAR 0 5
69425: NOT
69426: IFFALSE 69430
// exit ;
69428: GO 69478
// if asc then
69430: LD_VAR 0 2
69434: IFFALSE 69458
// result := SortListByListAsc ( units , tmp ) else
69436: LD_ADDR_VAR 0 3
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_VAR 0 5
69450: PPUSH
69451: CALL_OW 76
69455: ST_TO_ADDR
69456: GO 69478
// result := SortListByListDesc ( units , tmp ) ;
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: LD_VAR 0 1
69467: PPUSH
69468: LD_VAR 0 5
69472: PPUSH
69473: CALL_OW 77
69477: ST_TO_ADDR
// end ;
69478: LD_VAR 0 3
69482: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69483: LD_INT 0
69485: PPUSH
69486: PPUSH
// task := GetTaskList ( mech ) ;
69487: LD_ADDR_VAR 0 4
69491: PUSH
69492: LD_VAR 0 1
69496: PPUSH
69497: CALL_OW 437
69501: ST_TO_ADDR
// if not task then
69502: LD_VAR 0 4
69506: NOT
69507: IFFALSE 69511
// exit ;
69509: GO 69553
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69511: LD_ADDR_VAR 0 3
69515: PUSH
69516: LD_VAR 0 4
69520: PUSH
69521: LD_INT 1
69523: ARRAY
69524: PUSH
69525: LD_INT 1
69527: ARRAY
69528: PUSH
69529: LD_STRING r
69531: EQUAL
69532: PUSH
69533: LD_VAR 0 4
69537: PUSH
69538: LD_INT 1
69540: ARRAY
69541: PUSH
69542: LD_INT 4
69544: ARRAY
69545: PUSH
69546: LD_VAR 0 2
69550: EQUAL
69551: AND
69552: ST_TO_ADDR
// end ;
69553: LD_VAR 0 3
69557: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69558: LD_INT 0
69560: PPUSH
// SetDir ( unit , d ) ;
69561: LD_VAR 0 1
69565: PPUSH
69566: LD_VAR 0 4
69570: PPUSH
69571: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69575: LD_VAR 0 1
69579: PPUSH
69580: LD_VAR 0 2
69584: PPUSH
69585: LD_VAR 0 3
69589: PPUSH
69590: LD_VAR 0 5
69594: PPUSH
69595: CALL_OW 48
// end ;
69599: LD_VAR 0 6
69603: RET
// export function ToNaturalNumber ( number ) ; begin
69604: LD_INT 0
69606: PPUSH
// result := number div 1 ;
69607: LD_ADDR_VAR 0 2
69611: PUSH
69612: LD_VAR 0 1
69616: PUSH
69617: LD_INT 1
69619: DIV
69620: ST_TO_ADDR
// if number < 0 then
69621: LD_VAR 0 1
69625: PUSH
69626: LD_INT 0
69628: LESS
69629: IFFALSE 69639
// result := 0 ;
69631: LD_ADDR_VAR 0 2
69635: PUSH
69636: LD_INT 0
69638: ST_TO_ADDR
// end ;
69639: LD_VAR 0 2
69643: RET
// export function SortByClass ( units , class ) ; var un ; begin
69644: LD_INT 0
69646: PPUSH
69647: PPUSH
// if not units or not class then
69648: LD_VAR 0 1
69652: NOT
69653: PUSH
69654: LD_VAR 0 2
69658: NOT
69659: OR
69660: IFFALSE 69664
// exit ;
69662: GO 69759
// result := [ ] ;
69664: LD_ADDR_VAR 0 3
69668: PUSH
69669: EMPTY
69670: ST_TO_ADDR
// for un in units do
69671: LD_ADDR_VAR 0 4
69675: PUSH
69676: LD_VAR 0 1
69680: PUSH
69681: FOR_IN
69682: IFFALSE 69757
// if GetClass ( un ) = class then
69684: LD_VAR 0 4
69688: PPUSH
69689: CALL_OW 257
69693: PUSH
69694: LD_VAR 0 2
69698: EQUAL
69699: IFFALSE 69726
// result := Insert ( result , 1 , un ) else
69701: LD_ADDR_VAR 0 3
69705: PUSH
69706: LD_VAR 0 3
69710: PPUSH
69711: LD_INT 1
69713: PPUSH
69714: LD_VAR 0 4
69718: PPUSH
69719: CALL_OW 2
69723: ST_TO_ADDR
69724: GO 69755
// result := Replace ( result , result + 1 , un ) ;
69726: LD_ADDR_VAR 0 3
69730: PUSH
69731: LD_VAR 0 3
69735: PPUSH
69736: LD_VAR 0 3
69740: PUSH
69741: LD_INT 1
69743: PLUS
69744: PPUSH
69745: LD_VAR 0 4
69749: PPUSH
69750: CALL_OW 1
69754: ST_TO_ADDR
69755: GO 69681
69757: POP
69758: POP
// end ;
69759: LD_VAR 0 3
69763: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69764: LD_INT 0
69766: PPUSH
69767: PPUSH
69768: PPUSH
69769: PPUSH
69770: PPUSH
69771: PPUSH
69772: PPUSH
// result := [ ] ;
69773: LD_ADDR_VAR 0 4
69777: PUSH
69778: EMPTY
69779: ST_TO_ADDR
// if x - r < 0 then
69780: LD_VAR 0 1
69784: PUSH
69785: LD_VAR 0 3
69789: MINUS
69790: PUSH
69791: LD_INT 0
69793: LESS
69794: IFFALSE 69806
// min_x := 0 else
69796: LD_ADDR_VAR 0 8
69800: PUSH
69801: LD_INT 0
69803: ST_TO_ADDR
69804: GO 69822
// min_x := x - r ;
69806: LD_ADDR_VAR 0 8
69810: PUSH
69811: LD_VAR 0 1
69815: PUSH
69816: LD_VAR 0 3
69820: MINUS
69821: ST_TO_ADDR
// if y - r < 0 then
69822: LD_VAR 0 2
69826: PUSH
69827: LD_VAR 0 3
69831: MINUS
69832: PUSH
69833: LD_INT 0
69835: LESS
69836: IFFALSE 69848
// min_y := 0 else
69838: LD_ADDR_VAR 0 7
69842: PUSH
69843: LD_INT 0
69845: ST_TO_ADDR
69846: GO 69864
// min_y := y - r ;
69848: LD_ADDR_VAR 0 7
69852: PUSH
69853: LD_VAR 0 2
69857: PUSH
69858: LD_VAR 0 3
69862: MINUS
69863: ST_TO_ADDR
// max_x := x + r ;
69864: LD_ADDR_VAR 0 9
69868: PUSH
69869: LD_VAR 0 1
69873: PUSH
69874: LD_VAR 0 3
69878: PLUS
69879: ST_TO_ADDR
// max_y := y + r ;
69880: LD_ADDR_VAR 0 10
69884: PUSH
69885: LD_VAR 0 2
69889: PUSH
69890: LD_VAR 0 3
69894: PLUS
69895: ST_TO_ADDR
// for _x = min_x to max_x do
69896: LD_ADDR_VAR 0 5
69900: PUSH
69901: DOUBLE
69902: LD_VAR 0 8
69906: DEC
69907: ST_TO_ADDR
69908: LD_VAR 0 9
69912: PUSH
69913: FOR_TO
69914: IFFALSE 70015
// for _y = min_y to max_y do
69916: LD_ADDR_VAR 0 6
69920: PUSH
69921: DOUBLE
69922: LD_VAR 0 7
69926: DEC
69927: ST_TO_ADDR
69928: LD_VAR 0 10
69932: PUSH
69933: FOR_TO
69934: IFFALSE 70011
// begin if not ValidHex ( _x , _y ) then
69936: LD_VAR 0 5
69940: PPUSH
69941: LD_VAR 0 6
69945: PPUSH
69946: CALL_OW 488
69950: NOT
69951: IFFALSE 69955
// continue ;
69953: GO 69933
// if GetResourceTypeXY ( _x , _y ) then
69955: LD_VAR 0 5
69959: PPUSH
69960: LD_VAR 0 6
69964: PPUSH
69965: CALL_OW 283
69969: IFFALSE 70009
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69971: LD_ADDR_VAR 0 4
69975: PUSH
69976: LD_VAR 0 4
69980: PPUSH
69981: LD_VAR 0 4
69985: PUSH
69986: LD_INT 1
69988: PLUS
69989: PPUSH
69990: LD_VAR 0 5
69994: PUSH
69995: LD_VAR 0 6
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PPUSH
70004: CALL_OW 1
70008: ST_TO_ADDR
// end ;
70009: GO 69933
70011: POP
70012: POP
70013: GO 69913
70015: POP
70016: POP
// end ;
70017: LD_VAR 0 4
70021: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
70022: LD_INT 0
70024: PPUSH
70025: PPUSH
70026: PPUSH
70027: PPUSH
70028: PPUSH
70029: PPUSH
// if not units then
70030: LD_VAR 0 1
70034: NOT
70035: IFFALSE 70039
// exit ;
70037: GO 70440
// result := UnitFilter ( units , [ f_ok ] ) ;
70039: LD_ADDR_VAR 0 3
70043: PUSH
70044: LD_VAR 0 1
70048: PPUSH
70049: LD_INT 50
70051: PUSH
70052: EMPTY
70053: LIST
70054: PPUSH
70055: CALL_OW 72
70059: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70060: LD_ADDR_VAR 0 7
70064: PUSH
70065: LD_VAR 0 1
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: PPUSH
70074: CALL_OW 255
70078: ST_TO_ADDR
// if not result then
70079: LD_VAR 0 3
70083: NOT
70084: IFFALSE 70088
// exit ;
70086: GO 70440
// for i in result do
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: LD_VAR 0 3
70097: PUSH
70098: FOR_IN
70099: IFFALSE 70438
// begin tag := GetTag ( i ) + 1 ;
70101: LD_ADDR_VAR 0 8
70105: PUSH
70106: LD_VAR 0 4
70110: PPUSH
70111: CALL_OW 110
70115: PUSH
70116: LD_INT 1
70118: PLUS
70119: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70120: LD_ADDR_VAR 0 6
70124: PUSH
70125: LD_VAR 0 4
70129: PPUSH
70130: CALL_OW 250
70134: PPUSH
70135: LD_VAR 0 4
70139: PPUSH
70140: CALL_OW 251
70144: PPUSH
70145: LD_INT 6
70147: PPUSH
70148: CALL 69764 0 3
70152: ST_TO_ADDR
// if cr then
70153: LD_VAR 0 6
70157: IFFALSE 70196
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70159: LD_VAR 0 4
70163: PPUSH
70164: LD_VAR 0 6
70168: PUSH
70169: LD_INT 1
70171: ARRAY
70172: PUSH
70173: LD_INT 1
70175: ARRAY
70176: PPUSH
70177: LD_VAR 0 6
70181: PUSH
70182: LD_INT 1
70184: ARRAY
70185: PUSH
70186: LD_INT 2
70188: ARRAY
70189: PPUSH
70190: CALL_OW 116
70194: GO 70436
// if path > tag then
70196: LD_VAR 0 2
70200: PUSH
70201: LD_VAR 0 8
70205: GREATER
70206: IFFALSE 70384
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
70208: LD_ADDR_VAR 0 5
70212: PUSH
70213: LD_INT 81
70215: PUSH
70216: LD_VAR 0 7
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 91
70227: PUSH
70228: LD_VAR 0 4
70232: PUSH
70233: LD_INT 12
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: LIST
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PPUSH
70245: CALL_OW 69
70249: ST_TO_ADDR
// if enemy then
70250: LD_VAR 0 5
70254: IFFALSE 70282
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70256: LD_VAR 0 4
70260: PPUSH
70261: LD_VAR 0 5
70265: PPUSH
70266: LD_VAR 0 4
70270: PPUSH
70271: CALL_OW 74
70275: PPUSH
70276: CALL_OW 115
70280: GO 70382
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70282: LD_VAR 0 4
70286: PPUSH
70287: LD_VAR 0 2
70291: PUSH
70292: LD_VAR 0 8
70296: ARRAY
70297: PUSH
70298: LD_INT 1
70300: ARRAY
70301: PPUSH
70302: LD_VAR 0 2
70306: PUSH
70307: LD_VAR 0 8
70311: ARRAY
70312: PUSH
70313: LD_INT 2
70315: ARRAY
70316: PPUSH
70317: CALL_OW 297
70321: PUSH
70322: LD_INT 6
70324: GREATER
70325: IFFALSE 70368
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70327: LD_VAR 0 4
70331: PPUSH
70332: LD_VAR 0 2
70336: PUSH
70337: LD_VAR 0 8
70341: ARRAY
70342: PUSH
70343: LD_INT 1
70345: ARRAY
70346: PPUSH
70347: LD_VAR 0 2
70351: PUSH
70352: LD_VAR 0 8
70356: ARRAY
70357: PUSH
70358: LD_INT 2
70360: ARRAY
70361: PPUSH
70362: CALL_OW 114
70366: GO 70382
// SetTag ( i , tag ) ;
70368: LD_VAR 0 4
70372: PPUSH
70373: LD_VAR 0 8
70377: PPUSH
70378: CALL_OW 109
// end else
70382: GO 70436
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70384: LD_ADDR_VAR 0 5
70388: PUSH
70389: LD_INT 81
70391: PUSH
70392: LD_VAR 0 7
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PPUSH
70401: CALL_OW 69
70405: ST_TO_ADDR
// if enemy then
70406: LD_VAR 0 5
70410: IFFALSE 70436
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70412: LD_VAR 0 4
70416: PPUSH
70417: LD_VAR 0 5
70421: PPUSH
70422: LD_VAR 0 4
70426: PPUSH
70427: CALL_OW 74
70431: PPUSH
70432: CALL_OW 115
// end ; end ;
70436: GO 70098
70438: POP
70439: POP
// end ; end_of_file
70440: LD_VAR 0 3
70444: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70445: LD_VAR 0 1
70449: PUSH
70450: LD_INT 200
70452: DOUBLE
70453: GREATEREQUAL
70454: IFFALSE 70462
70456: LD_INT 299
70458: DOUBLE
70459: LESSEQUAL
70460: IFTRUE 70464
70462: GO 70496
70464: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70465: LD_VAR 0 1
70469: PPUSH
70470: LD_VAR 0 2
70474: PPUSH
70475: LD_VAR 0 3
70479: PPUSH
70480: LD_VAR 0 4
70484: PPUSH
70485: LD_VAR 0 5
70489: PPUSH
70490: CALL 27007 0 5
70494: GO 70573
70496: LD_INT 300
70498: DOUBLE
70499: GREATEREQUAL
70500: IFFALSE 70508
70502: LD_INT 399
70504: DOUBLE
70505: LESSEQUAL
70506: IFTRUE 70510
70508: GO 70572
70510: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70511: LD_VAR 0 1
70515: PPUSH
70516: LD_VAR 0 2
70520: PPUSH
70521: LD_VAR 0 3
70525: PPUSH
70526: LD_VAR 0 4
70530: PPUSH
70531: LD_VAR 0 5
70535: PPUSH
70536: LD_VAR 0 6
70540: PPUSH
70541: LD_VAR 0 7
70545: PPUSH
70546: LD_VAR 0 8
70550: PPUSH
70551: LD_VAR 0 9
70555: PPUSH
70556: LD_VAR 0 10
70560: PPUSH
70561: LD_VAR 0 11
70565: PPUSH
70566: CALL 24905 0 11
70570: GO 70573
70572: POP
// end ;
70573: PPOPN 11
70575: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70576: LD_VAR 0 1
70580: PPUSH
70581: LD_VAR 0 2
70585: PPUSH
70586: LD_VAR 0 3
70590: PPUSH
70591: LD_VAR 0 4
70595: PPUSH
70596: LD_VAR 0 5
70600: PPUSH
70601: CALL 26999 0 5
// end ; end_of_file
70605: PPOPN 5
70607: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_VAR 0 2
70617: PPUSH
70618: LD_VAR 0 3
70622: PPUSH
70623: LD_VAR 0 4
70627: PPUSH
70628: LD_VAR 0 5
70632: PPUSH
70633: LD_VAR 0 6
70637: PPUSH
70638: CALL 13100 0 6
// end ;
70642: PPOPN 6
70644: END
