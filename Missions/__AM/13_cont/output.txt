// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// PrepareVehicles ;
 178: CALL 1228 0 0
// PrepareHeroes ;
 182: CALL 554 0 0
// PrepareAmericansRandom ;
 186: CALL 1132 0 0
// PrepareDifficulty ;
 190: CALL 6378 0 0
// end ;
 194: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 195: LD_EXP 40
 199: PUSH
 200: LD_INT 1
 202: EQUAL
 203: IFFALSE 509
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
// begin enable ;
 211: ENABLE
// fogoff ( true ) ;
 212: LD_INT 1
 214: PPUSH
 215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 219: LD_ADDR_VAR 0 1
 223: PUSH
 224: LD_INT 22
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 21
 236: PUSH
 237: LD_INT 1
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 270
// SetLives ( i , 1000 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: LD_INT 1000
 263: PPUSH
 264: CALL_OW 234
 268: GO 253
 270: POP
 271: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 2
 289: PUSH
 290: LD_INT 30
 292: PUSH
 293: LD_INT 0
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 30
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL_OW 69
 323: PUSH
 324: FOR_IN
 325: IFFALSE 349
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 327: LD_VAR 0 1
 331: PPUSH
 332: CALL_OW 274
 336: PPUSH
 337: LD_INT 1
 339: PPUSH
 340: LD_INT 9999
 342: PPUSH
 343: CALL_OW 277
 347: GO 324
 349: POP
 350: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 351: LD_ADDR_VAR 0 1
 355: PUSH
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 30
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 30
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PPUSH
 398: CALL_OW 69
 402: PUSH
 403: FOR_IN
 404: IFFALSE 428
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 406: LD_VAR 0 1
 410: PPUSH
 411: CALL_OW 274
 415: PPUSH
 416: LD_INT 2
 418: PPUSH
 419: LD_INT 9999
 421: PPUSH
 422: CALL_OW 277
 426: GO 403
 428: POP
 429: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 430: LD_ADDR_VAR 0 1
 434: PUSH
 435: LD_INT 22
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: LD_INT 2
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: LD_INT 30
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: FOR_IN
 483: IFFALSE 507
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 485: LD_VAR 0 1
 489: PPUSH
 490: CALL_OW 274
 494: PPUSH
 495: LD_INT 3
 497: PPUSH
 498: LD_INT 9999
 500: PPUSH
 501: CALL_OW 277
 505: GO 482
 507: POP
 508: POP
// end ;
 509: PPOPN 1
 511: END
// every 0 0$1 trigger achivCounter >= 2 do
 512: LD_EXP 41
 516: PUSH
 517: LD_INT 2
 519: GREATEREQUAL
 520: IFFALSE 532
 522: GO 524
 524: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 525: LD_STRING ACH_REMOTE
 527: PPUSH
 528: CALL_OW 543
 532: END
// every 0 0$1 trigger destroyCounter >= 30 do
 533: LD_EXP 42
 537: PUSH
 538: LD_INT 30
 540: GREATEREQUAL
 541: IFFALSE 553
 543: GO 545
 545: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 546: LD_STRING ACH_DEFMASTER
 548: PPUSH
 549: CALL_OW 543
 553: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 568: LD_ADDR_EXP 1
 572: PUSH
 573: LD_STRING 13c_JMM
 575: PPUSH
 576: LD_INT 1
 578: PPUSH
 579: CALL 5708 0 2
 583: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 584: LD_ADDR_EXP 2
 588: PUSH
 589: LD_STRING 13c_Stevens
 591: PPUSH
 592: LD_INT 1
 594: PPUSH
 595: CALL 5708 0 2
 599: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 600: LD_ADDR_EXP 3
 604: PUSH
 605: LD_STRING 13c_Lisa
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 5708 0 2
 615: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 616: LD_ADDR_EXP 4
 620: PUSH
 621: LD_STRING 13c_Donaldson
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: CALL 5708 0 2
 631: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 632: LD_ADDR_EXP 5
 636: PUSH
 637: LD_STRING 13c_Bobby
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL 5708 0 2
 647: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 648: LD_ADDR_EXP 6
 652: PUSH
 653: LD_STRING 13c_Cyrus
 655: PPUSH
 656: LD_INT 1
 658: PPUSH
 659: CALL 5708 0 2
 663: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 664: LD_ADDR_EXP 7
 668: PUSH
 669: LD_STRING 13c_Denis
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: CALL 5708 0 2
 679: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 680: LD_ADDR_EXP 8
 684: PUSH
 685: LD_STRING 13c_Brown
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: CALL 5708 0 2
 695: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 696: LD_ADDR_EXP 9
 700: PUSH
 701: LD_STRING 13c_Gladstone
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: CALL 5708 0 2
 711: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 712: LD_ADDR_EXP 10
 716: PUSH
 717: LD_STRING 13c_Houten
 719: PPUSH
 720: LD_INT 1
 722: PPUSH
 723: CALL 5708 0 2
 727: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 728: LD_ADDR_EXP 11
 732: PUSH
 733: LD_STRING 13c_Cornel
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL 5708 0 2
 743: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 744: LD_ADDR_EXP 12
 748: PUSH
 749: LD_STRING 13c_Gary
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: CALL 5708 0 2
 759: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 760: LD_ADDR_EXP 13
 764: PUSH
 765: LD_STRING 13c_Frank
 767: PPUSH
 768: LD_INT 1
 770: PPUSH
 771: CALL 5708 0 2
 775: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 776: LD_ADDR_EXP 14
 780: PUSH
 781: LD_STRING 13c_Kikuchi
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: CALL 5708 0 2
 791: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 792: LD_ADDR_EXP 15
 796: PUSH
 797: LD_STRING Powell
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL 5708 0 2
 807: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 808: LD_ADDR_VAR 0 2
 812: PUSH
 813: LD_EXP 1
 817: PUSH
 818: LD_EXP 2
 822: PUSH
 823: LD_EXP 3
 827: PUSH
 828: LD_EXP 4
 832: PUSH
 833: LD_EXP 5
 837: PUSH
 838: LD_EXP 6
 842: PUSH
 843: LD_EXP 7
 847: PUSH
 848: LD_EXP 8
 852: PUSH
 853: LD_EXP 9
 857: PUSH
 858: LD_EXP 10
 862: PUSH
 863: LD_EXP 11
 867: PUSH
 868: LD_EXP 12
 872: PUSH
 873: LD_EXP 13
 877: PUSH
 878: LD_EXP 14
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 33
 916: PUSH
 917: LD_INT 1
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 21
 926: PUSH
 927: LD_INT 2
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PPUSH
 939: CALL_OW 69
 943: ST_TO_ADDR
// for i = tmp downto 1 do
 944: LD_ADDR_VAR 0 4
 948: PUSH
 949: DOUBLE
 950: LD_VAR 0 2
 954: INC
 955: ST_TO_ADDR
 956: LD_INT 1
 958: PUSH
 959: FOR_DOWNTO
 960: IFFALSE 997
// if not tmp [ i ] then
 962: LD_VAR 0 2
 966: PUSH
 967: LD_VAR 0 4
 971: ARRAY
 972: NOT
 973: IFFALSE 995
// tmp := Delete ( tmp , i ) ;
 975: LD_ADDR_VAR 0 2
 979: PUSH
 980: LD_VAR 0 2
 984: PPUSH
 985: LD_VAR 0 4
 989: PPUSH
 990: CALL_OW 3
 994: ST_TO_ADDR
 995: GO 959
 997: POP
 998: POP
// for i = 1 to tmp do
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: DOUBLE
1005: LD_INT 1
1007: DEC
1008: ST_TO_ADDR
1009: LD_VAR 0 2
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1045
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1017: LD_VAR 0 2
1021: PUSH
1022: LD_VAR 0 4
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_VAR 0 4
1037: ARRAY
1038: PPUSH
1039: CALL_OW 52
1043: GO 1014
1045: POP
1046: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 25
1059: PUSH
1060: LD_INT 2
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 69
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: PUSH
1080: LD_INT 22
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 34
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PPUSH
1104: CALL_OW 69
1108: PUSH
1109: LD_INT 0
1111: EQUAL
1112: AND
1113: IFFALSE 1127
// SetClass ( JMM , 2 ) ;
1115: LD_EXP 1
1119: PPUSH
1120: LD_INT 2
1122: PPUSH
1123: CALL_OW 336
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareAmericansRandom ; var i ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
// uc_side = 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1144: LD_ADDR_EXP 16
1148: PUSH
1149: LD_STRING 13c_others
1151: PPUSH
1152: CALL_OW 31
1156: ST_TO_ADDR
// for i in others13 do
1157: LD_ADDR_VAR 0 2
1161: PUSH
1162: LD_EXP 16
1166: PUSH
1167: FOR_IN
1168: IFFALSE 1221
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1170: LD_VAR 0 2
1174: PPUSH
1175: LD_INT 22
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 21
1187: PUSH
1188: LD_INT 2
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: LD_INT 58
1197: PUSH
1198: EMPTY
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 69
1210: PUSH
1211: LD_INT 1
1213: ARRAY
1214: PPUSH
1215: CALL_OW 52
1219: GO 1167
1221: POP
1222: POP
// end ;
1223: LD_VAR 0 1
1227: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1228: LD_INT 0
1230: PPUSH
1231: PPUSH
1232: PPUSH
1233: PPUSH
1234: PPUSH
1235: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1236: LD_ADDR_VAR 0 5
1240: PUSH
1241: LD_STRING 13_VehiclesIn13_1
1243: PPUSH
1244: EMPTY
1245: PPUSH
1246: CALL_OW 30
1250: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1251: LD_ADDR_EXP 24
1255: PUSH
1256: LD_STRING 13_ResourcesInCargo13_1
1258: PPUSH
1259: EMPTY
1260: PPUSH
1261: CALL_OW 30
1265: ST_TO_ADDR
// cargoList = [ ] ;
1266: LD_ADDR_VAR 0 6
1270: PUSH
1271: EMPTY
1272: ST_TO_ADDR
// uc_side = 1 ;
1273: LD_ADDR_OWVAR 20
1277: PUSH
1278: LD_INT 1
1280: ST_TO_ADDR
// if vehicles > 0 then
1281: LD_VAR 0 5
1285: PUSH
1286: LD_INT 0
1288: GREATER
1289: IFFALSE 1644
// begin for i := 1 to vehicles do
1291: LD_ADDR_VAR 0 2
1295: PUSH
1296: DOUBLE
1297: LD_INT 1
1299: DEC
1300: ST_TO_ADDR
1301: LD_VAR 0 5
1305: PUSH
1306: FOR_TO
1307: IFFALSE 1456
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1309: LD_ADDR_OWVAR 21
1313: PUSH
1314: LD_VAR 0 5
1318: PUSH
1319: LD_VAR 0 2
1323: ARRAY
1324: PUSH
1325: LD_INT 1
1327: ARRAY
1328: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1329: LD_ADDR_OWVAR 37
1333: PUSH
1334: LD_VAR 0 5
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 2
1347: ARRAY
1348: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1349: LD_ADDR_OWVAR 39
1353: PUSH
1354: LD_VAR 0 5
1358: PUSH
1359: LD_VAR 0 2
1363: ARRAY
1364: PUSH
1365: LD_INT 3
1367: ARRAY
1368: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1369: LD_ADDR_OWVAR 38
1373: PUSH
1374: LD_VAR 0 5
1378: PUSH
1379: LD_VAR 0 2
1383: ARRAY
1384: PUSH
1385: LD_INT 4
1387: ARRAY
1388: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1389: LD_ADDR_OWVAR 40
1393: PUSH
1394: LD_VAR 0 5
1398: PUSH
1399: LD_VAR 0 2
1403: ARRAY
1404: PUSH
1405: LD_INT 5
1407: ARRAY
1408: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1409: LD_ADDR_OWVAR 41
1413: PUSH
1414: LD_INT 40
1416: ST_TO_ADDR
// veh = CreateVehicle ;
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: CALL_OW 45
1426: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1427: LD_VAR 0 4
1431: PPUSH
1432: LD_INT 3
1434: PPUSH
1435: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1439: LD_VAR 0 4
1443: PPUSH
1444: LD_INT 2
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 49
// end ;
1454: GO 1306
1456: POP
1457: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1458: LD_ADDR_VAR 0 6
1462: PUSH
1463: LD_INT 22
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 21
1475: PUSH
1476: LD_INT 2
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 34
1485: PUSH
1486: LD_INT 12
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: PPUSH
1498: CALL_OW 69
1502: ST_TO_ADDR
// if cargoList > 0 then
1503: LD_VAR 0 6
1507: PUSH
1508: LD_INT 0
1510: GREATER
1511: IFFALSE 1644
// for i = 1 to cargoList do
1513: LD_ADDR_VAR 0 2
1517: PUSH
1518: DOUBLE
1519: LD_INT 1
1521: DEC
1522: ST_TO_ADDR
1523: LD_VAR 0 6
1527: PUSH
1528: FOR_TO
1529: IFFALSE 1642
// begin if resources > 0 then
1531: LD_EXP 24
1535: PUSH
1536: LD_INT 0
1538: GREATER
1539: IFFALSE 1640
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1541: LD_VAR 0 6
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PPUSH
1552: LD_INT 1
1554: PPUSH
1555: LD_EXP 24
1559: PUSH
1560: LD_VAR 0 2
1564: ARRAY
1565: PUSH
1566: LD_INT 1
1568: ARRAY
1569: PPUSH
1570: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1574: LD_VAR 0 6
1578: PUSH
1579: LD_VAR 0 2
1583: ARRAY
1584: PPUSH
1585: LD_INT 2
1587: PPUSH
1588: LD_EXP 24
1592: PUSH
1593: LD_VAR 0 2
1597: ARRAY
1598: PUSH
1599: LD_INT 2
1601: ARRAY
1602: PPUSH
1603: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1607: LD_VAR 0 6
1611: PUSH
1612: LD_VAR 0 2
1616: ARRAY
1617: PPUSH
1618: LD_INT 3
1620: PPUSH
1621: LD_EXP 24
1625: PUSH
1626: LD_VAR 0 2
1630: ARRAY
1631: PUSH
1632: LD_INT 3
1634: ARRAY
1635: PPUSH
1636: CALL_OW 291
// end ; end ;
1640: GO 1528
1642: POP
1643: POP
// end ; end ;
1644: LD_VAR 0 1
1648: RET
// export function PowellSupport ; var i , veh , un ; begin
1649: LD_INT 0
1651: PPUSH
1652: PPUSH
1653: PPUSH
1654: PPUSH
// for i = 1 to 3 do
1655: LD_ADDR_VAR 0 2
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_INT 3
1667: PUSH
1668: FOR_TO
1669: IFFALSE 1870
// begin uc_nation = 1 ;
1671: LD_ADDR_OWVAR 21
1675: PUSH
1676: LD_INT 1
1678: ST_TO_ADDR
// uc_side = 1 ;
1679: LD_ADDR_OWVAR 20
1683: PUSH
1684: LD_INT 1
1686: ST_TO_ADDR
// vc_engine = 3 ;
1687: LD_ADDR_OWVAR 39
1691: PUSH
1692: LD_INT 3
1694: ST_TO_ADDR
// vc_control = 1 ;
1695: LD_ADDR_OWVAR 38
1699: PUSH
1700: LD_INT 1
1702: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1703: LD_ADDR_OWVAR 40
1707: PUSH
1708: LD_INT 9
1710: PUSH
1711: LD_INT 5
1713: PUSH
1714: LD_INT 4
1716: PUSH
1717: LD_INT 7
1719: PUSH
1720: LD_INT 6
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 5
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// if vc_weapon = 6 then
1742: LD_OWVAR 40
1746: PUSH
1747: LD_INT 6
1749: EQUAL
1750: IFFALSE 1762
// vc_chassis = 4 else
1752: LD_ADDR_OWVAR 37
1756: PUSH
1757: LD_INT 4
1759: ST_TO_ADDR
1760: GO 1770
// vc_chassis = 3 ;
1762: LD_ADDR_OWVAR 37
1766: PUSH
1767: LD_INT 3
1769: ST_TO_ADDR
// veh = CreateVehicle ;
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: CALL_OW 45
1779: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1780: LD_VAR 0 3
1784: PPUSH
1785: LD_INT 2
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// SetDir ( veh , 1 ) ;
1795: LD_VAR 0 3
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: CALL_OW 233
// hc_gallery =  ;
1807: LD_ADDR_OWVAR 33
1811: PUSH
1812: LD_STRING 
1814: ST_TO_ADDR
// hc_name =  ;
1815: LD_ADDR_OWVAR 26
1819: PUSH
1820: LD_STRING 
1822: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1823: LD_INT 0
1825: PPUSH
1826: LD_INT 3
1828: PPUSH
1829: LD_INT 7
1831: PPUSH
1832: LD_INT 10
1834: PPUSH
1835: CALL_OW 12
1839: PPUSH
1840: CALL_OW 380
// un = CreateHuman ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: CALL_OW 44
1853: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1854: LD_VAR 0 4
1858: PPUSH
1859: LD_VAR 0 3
1863: PPUSH
1864: CALL_OW 52
// end ;
1868: GO 1668
1870: POP
1871: POP
// end ; end_of_file
1872: LD_VAR 0 1
1876: RET
// export function PrepareBurlak ; begin
1877: LD_INT 0
1879: PPUSH
// uc_side = 7 ;
1880: LD_ADDR_OWVAR 20
1884: PUSH
1885: LD_INT 7
1887: ST_TO_ADDR
// uc_nation = 3 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 3
1895: ST_TO_ADDR
// vc_engine = 3 ;
1896: LD_ADDR_OWVAR 39
1900: PUSH
1901: LD_INT 3
1903: ST_TO_ADDR
// vc_control = 1 ;
1904: LD_ADDR_OWVAR 38
1908: PUSH
1909: LD_INT 1
1911: ST_TO_ADDR
// vc_weapon = 46 ;
1912: LD_ADDR_OWVAR 40
1916: PUSH
1917: LD_INT 46
1919: ST_TO_ADDR
// vc_chassis = 24 ;
1920: LD_ADDR_OWVAR 37
1924: PUSH
1925: LD_INT 24
1927: ST_TO_ADDR
// Masha = CreateVehicle ;
1928: LD_ADDR_EXP 18
1932: PUSH
1933: CALL_OW 45
1937: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1938: LD_EXP 18
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1953: LD_EXP 18
1957: PPUSH
1958: LD_INT 1
1960: PPUSH
1961: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1965: LD_ADDR_EXP 17
1969: PUSH
1970: LD_STRING Burlak
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL 5708 0 2
1980: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1981: LD_EXP 17
1985: PPUSH
1986: LD_EXP 18
1990: PPUSH
1991: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1995: LD_EXP 18
1999: PPUSH
2000: LD_INT 107
2002: PPUSH
2003: LD_INT 118
2005: PPUSH
2006: CALL_OW 114
// spawnBurlak = 1 ;
2010: LD_ADDR_EXP 27
2014: PUSH
2015: LD_INT 1
2017: ST_TO_ADDR
// end ;
2018: LD_VAR 0 1
2022: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2023: LD_INT 0
2025: PPUSH
2026: PPUSH
2027: PPUSH
2028: PPUSH
// uc_side = 7 ;
2029: LD_ADDR_OWVAR 20
2033: PUSH
2034: LD_INT 7
2036: ST_TO_ADDR
// uc_nation = 3 ;
2037: LD_ADDR_OWVAR 21
2041: PUSH
2042: LD_INT 3
2044: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2045: LD_ADDR_EXP 19
2049: PUSH
2050: LD_STRING Gnyevko
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 5708 0 2
2060: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2061: LD_ADDR_EXP 20
2065: PUSH
2066: LD_STRING Titov
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 5708 0 2
2076: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2077: LD_ADDR_EXP 21
2081: PUSH
2082: LD_STRING Xavier2
2084: PPUSH
2085: LD_INT 0
2087: PPUSH
2088: CALL 5708 0 2
2092: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2093: LD_ADDR_EXP 22
2097: PUSH
2098: LD_STRING Belkov
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL 5708 0 2
2108: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2109: LD_ADDR_EXP 23
2113: PUSH
2114: LD_STRING Lipshchin
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: CALL 5708 0 2
2124: ST_TO_ADDR
// for i = 1 to 5 do
2125: LD_ADDR_VAR 0 2
2129: PUSH
2130: DOUBLE
2131: LD_INT 1
2133: DEC
2134: ST_TO_ADDR
2135: LD_INT 5
2137: PUSH
2138: FOR_TO
2139: IFFALSE 2227
// begin vc_engine = 3 ;
2141: LD_ADDR_OWVAR 39
2145: PUSH
2146: LD_INT 3
2148: ST_TO_ADDR
// vc_control = 1 ;
2149: LD_ADDR_OWVAR 38
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2157: LD_ADDR_OWVAR 40
2161: PUSH
2162: LD_INT 43
2164: PUSH
2165: LD_INT 44
2167: PUSH
2168: LD_INT 45
2170: PUSH
2171: LD_INT 49
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 1
2182: PPUSH
2183: LD_INT 4
2185: PPUSH
2186: CALL_OW 12
2190: ARRAY
2191: ST_TO_ADDR
// vc_chassis = 22 ;
2192: LD_ADDR_OWVAR 37
2196: PUSH
2197: LD_INT 22
2199: ST_TO_ADDR
// veh = CreateVehicle ;
2200: LD_ADDR_VAR 0 3
2204: PUSH
2205: CALL_OW 45
2209: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2210: LD_VAR 0 3
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 0
2220: PPUSH
2221: CALL_OW 49
// end ;
2225: GO 2138
2227: POP
2228: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 7
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 21
2246: PUSH
2247: LD_INT 2
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 58
2256: PUSH
2257: EMPTY
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL_OW 69
2269: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2270: LD_EXP 19
2274: PPUSH
2275: LD_VAR 0 4
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2288: LD_EXP 20
2292: PPUSH
2293: LD_VAR 0 4
2297: PUSH
2298: LD_INT 2
2300: ARRAY
2301: PPUSH
2302: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2306: LD_EXP 21
2310: PPUSH
2311: LD_VAR 0 4
2315: PUSH
2316: LD_INT 3
2318: ARRAY
2319: PPUSH
2320: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2324: LD_EXP 22
2328: PPUSH
2329: LD_VAR 0 4
2333: PUSH
2334: LD_INT 4
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2342: LD_EXP 23
2346: PPUSH
2347: LD_VAR 0 4
2351: PUSH
2352: LD_INT 5
2354: ARRAY
2355: PPUSH
2356: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2360: LD_EXP 19
2364: PPUSH
2365: LD_INT 3
2367: PPUSH
2368: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2372: LD_EXP 20
2376: PUSH
2377: LD_EXP 23
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PPUSH
2386: LD_INT 9
2388: PPUSH
2389: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2393: LD_ADDR_VAR 0 4
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 7
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PPUSH
2408: CALL_OW 69
2412: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2413: LD_VAR 0 4
2417: PPUSH
2418: LD_INT 107
2420: PPUSH
2421: LD_INT 118
2423: PPUSH
2424: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_INT 34
2442: PUSH
2443: LD_INT 49
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: PPUSH
2450: CALL_OW 72
2454: PPUSH
2455: LD_EXP 18
2459: PPUSH
2460: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2464: LD_VAR 0 4
2468: PPUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 34
2474: PUSH
2475: LD_INT 49
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PPUSH
2486: CALL_OW 72
2490: PPUSH
2491: LD_INT 107
2493: PPUSH
2494: LD_INT 118
2496: PPUSH
2497: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2501: LD_VAR 0 4
2505: PPUSH
2506: LD_INT 34
2508: PUSH
2509: LD_INT 49
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 72
2520: PUSH
2521: LD_INT 0
2523: EQUAL
2524: PUSH
2525: LD_EXP 18
2529: PPUSH
2530: CALL_OW 303
2534: OR
2535: IFFALSE 2428
// repeat wait ( 0 0$1 ) ;
2537: LD_INT 35
2539: PPUSH
2540: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2544: LD_ADDR_VAR 0 4
2548: PUSH
2549: LD_INT 22
2551: PUSH
2552: LD_INT 7
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PPUSH
2559: CALL_OW 69
2563: PUSH
2564: LD_EXP 17
2568: DIFF
2569: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2570: LD_VAR 0 4
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 118
2580: PPUSH
2581: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2585: LD_EXP 17
2589: PPUSH
2590: CALL_OW 302
2594: PUSH
2595: LD_EXP 17
2599: PPUSH
2600: CALL_OW 310
2604: NOT
2605: AND
2606: IFFALSE 2623
// ComMoveXY ( Burlak , 107 , 118 ) ;
2608: LD_EXP 17
2612: PPUSH
2613: LD_INT 107
2615: PPUSH
2616: LD_INT 118
2618: PPUSH
2619: CALL_OW 111
// until not tmp ;
2623: LD_VAR 0 4
2627: NOT
2628: IFFALSE 2537
// end ; end_of_file
2630: LD_VAR 0 1
2634: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2635: LD_EXP 31
2639: IFFALSE 2815
2641: GO 2643
2643: DISABLE
2644: LD_INT 0
2646: PPUSH
2647: PPUSH
// begin enable ;
2648: ENABLE
// rnd = 0 ;
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 0
2656: ST_TO_ADDR
// uc_side = 8 ;
2657: LD_ADDR_OWVAR 20
2661: PUSH
2662: LD_INT 8
2664: ST_TO_ADDR
// uc_nation = 2 ;
2665: LD_ADDR_OWVAR 21
2669: PUSH
2670: LD_INT 2
2672: ST_TO_ADDR
// hc_name =  ;
2673: LD_ADDR_OWVAR 26
2677: PUSH
2678: LD_STRING 
2680: ST_TO_ADDR
// hc_gallery =  ;
2681: LD_ADDR_OWVAR 33
2685: PUSH
2686: LD_STRING 
2688: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2689: LD_INT 0
2691: PPUSH
2692: LD_INT 4
2694: PPUSH
2695: LD_INT 10
2697: PPUSH
2698: CALL_OW 380
// un = CreateHuman ;
2702: LD_ADDR_VAR 0 1
2706: PUSH
2707: CALL_OW 44
2711: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_INT 8
2719: PUSH
2720: LD_INT 9
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 12
2737: ARRAY
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// SetTag ( un , 1 ) ;
2746: LD_VAR 0 1
2750: PPUSH
2751: LD_INT 1
2753: PPUSH
2754: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: LD_INT 1
2765: PPUSH
2766: LD_EXP 31
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2776: LD_VAR 0 1
2780: PPUSH
2781: LD_EXP 31
2785: PUSH
2786: LD_VAR 0 2
2790: ARRAY
2791: PUSH
2792: LD_INT 1
2794: ARRAY
2795: PPUSH
2796: LD_EXP 31
2800: PUSH
2801: LD_VAR 0 2
2805: ARRAY
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: PPUSH
2811: CALL_OW 158
// end ;
2815: PPOPN 2
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2818: LD_INT 22
2820: PUSH
2821: LD_INT 8
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: LD_INT 61
2833: PUSH
2834: EMPTY
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 33
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: LIST
2855: PPUSH
2856: CALL_OW 69
2860: IFFALSE 2933
2862: GO 2864
2864: DISABLE
2865: LD_INT 0
2867: PPUSH
// begin enable ;
2868: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2869: LD_ADDR_VAR 0 1
2873: PUSH
2874: LD_INT 22
2876: PUSH
2877: LD_INT 8
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: LD_INT 3
2886: PUSH
2887: LD_INT 61
2889: PUSH
2890: EMPTY
2891: LIST
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 33
2899: PUSH
2900: LD_INT 2
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: LIST
2911: PPUSH
2912: CALL_OW 69
2916: PUSH
2917: FOR_IN
2918: IFFALSE 2931
// Connect ( i ) ;
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL 5823 0 1
2929: GO 2917
2931: POP
2932: POP
// end ; end_of_file
2933: PPOPN 1
2935: END
// every 1 do
2936: GO 2938
2938: DISABLE
// begin InGameOn ;
2939: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 21
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: PUSH
2972: LD_INT 1
2974: ARRAY
2975: PPUSH
2976: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2980: LD_INT 22
2982: PUSH
2983: LD_INT 1
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 21
2992: PUSH
2993: LD_INT 2
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PPUSH
3004: CALL_OW 69
3008: PPUSH
3009: LD_INT 69
3011: PPUSH
3012: LD_INT 94
3014: PPUSH
3015: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3019: LD_EXP 1
3023: PPUSH
3024: LD_STRING D2-JMM-1
3026: PPUSH
3027: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3031: LD_INT 22
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 21
3043: PUSH
3044: LD_INT 2
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 69
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: PPUSH
3064: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3068: LD_EXP 2
3072: PPUSH
3073: LD_STRING D2-Huck-1
3075: PPUSH
3076: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3080: LD_INT 22
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 21
3092: PUSH
3093: LD_INT 2
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PPUSH
3104: CALL_OW 69
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PPUSH
3113: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3117: LD_EXP 1
3121: PPUSH
3122: LD_STRING D2-JMM-2
3124: PPUSH
3125: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3129: LD_INT 22
3131: PUSH
3132: LD_INT 1
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 21
3141: PUSH
3142: LD_INT 2
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: CALL_OW 69
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: CALL_OW 87
// InGameOff ;
3166: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3170: LD_STRING M1
3172: PPUSH
3173: CALL_OW 337
// SaveForQuickRestart ;
3177: CALL_OW 22
// end ;
3181: END
// every 10 10$0 do
3182: GO 3184
3184: DISABLE
// begin DialogueOn ;
3185: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3189: LD_EXP 15
3193: PPUSH
3194: LD_STRING D3-Pow-1
3196: PPUSH
3197: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3201: LD_EXP 1
3205: PPUSH
3206: LD_STRING D3-JMM-1
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3213: LD_EXP 15
3217: PPUSH
3218: LD_STRING D3-Pow-2
3220: PPUSH
3221: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3225: LD_EXP 1
3229: PPUSH
3230: LD_STRING D3-JMM-2
3232: PPUSH
3233: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3237: LD_EXP 15
3241: PPUSH
3242: LD_STRING D3-Pow-3
3244: PPUSH
3245: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3249: LD_EXP 1
3253: PPUSH
3254: LD_STRING D3-JMM-3
3256: PPUSH
3257: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3261: LD_EXP 15
3265: PPUSH
3266: LD_STRING D3-Pow-4
3268: PPUSH
3269: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3273: LD_EXP 1
3277: PPUSH
3278: LD_STRING D3-JMM-4
3280: PPUSH
3281: CALL_OW 88
// DialogueOff ;
3285: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3289: LD_STRING M2
3291: PPUSH
3292: CALL_OW 337
// wait ( 2 2$30 ) ;
3296: LD_INT 5250
3298: PPUSH
3299: CALL_OW 67
// PrepareBurlak ;
3303: CALL 1877 0 0
// BurlakArmy ;
3307: CALL 2023 0 0
// end ;
3311: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3312: LD_INT 1
3314: PPUSH
3315: LD_EXP 18
3319: PPUSH
3320: CALL_OW 292
3324: IFFALSE 3483
3326: GO 3328
3328: DISABLE
// begin DialogueOn ;
3329: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3333: LD_EXP 18
3337: PPUSH
3338: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3342: LD_INT 22
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 26
3354: PUSH
3355: LD_INT 1
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: LD_INT 25
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 25
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 3
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 25
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 25
3407: PUSH
3408: LD_INT 5
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: PPUSH
3428: CALL_OW 69
3432: PPUSH
3433: LD_STRING D5-Sol1-1
3435: PPUSH
3436: LD_STRING D5-FSol1-1
3438: PPUSH
3439: CALL 6177 0 3
// Say ( JMM , D5-JMM-1 ) ;
3443: LD_EXP 1
3447: PPUSH
3448: LD_STRING D5-JMM-1
3450: PPUSH
3451: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3455: LD_EXP 17
3459: PPUSH
3460: LD_STRING DAmer-Bur-1
3462: PPUSH
3463: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_STRING DAmer-JMM-1
3474: PPUSH
3475: CALL_OW 88
// DialogueOff ;
3479: CALL_OW 7
// end ;
3483: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3484: LD_INT 4
3486: PPUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 7
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 70
3501: IFFALSE 3900
3503: GO 3505
3505: DISABLE
3506: LD_INT 0
3508: PPUSH
// begin enable ;
3509: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3510: LD_ADDR_VAR 0 1
3514: PUSH
3515: LD_INT 4
3517: PPUSH
3518: LD_INT 22
3520: PUSH
3521: LD_INT 7
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: CALL_OW 70
3532: PUSH
3533: FOR_IN
3534: IFFALSE 3898
// begin if i = Burlak or i = Masha then
3536: LD_VAR 0 1
3540: PUSH
3541: LD_EXP 17
3545: EQUAL
3546: PUSH
3547: LD_VAR 0 1
3551: PUSH
3552: LD_EXP 18
3556: EQUAL
3557: OR
3558: IFFALSE 3705
// begin RemoveUnit ( i ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: CALL_OW 64
// DialogueOn ;
3569: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3573: LD_EXP 1
3577: PPUSH
3578: LD_STRING D5a-JMM-1
3580: PPUSH
3581: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3585: LD_INT 22
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: PUSH
3595: LD_INT 26
3597: PUSH
3598: LD_INT 1
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: LD_INT 2
3607: PUSH
3608: LD_INT 25
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PUSH
3618: LD_INT 25
3620: PUSH
3621: LD_INT 2
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PUSH
3628: LD_INT 25
3630: PUSH
3631: LD_INT 3
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PUSH
3638: LD_INT 25
3640: PUSH
3641: LD_INT 4
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 5
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: PPUSH
3671: CALL_OW 69
3675: PPUSH
3676: LD_STRING D5a-Sol1-1
3678: PPUSH
3679: LD_STRING D5-FSol1-1
3681: PPUSH
3682: CALL 6177 0 3
// DialogueOff ;
3686: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3690: LD_STRING M2b
3692: PPUSH
3693: CALL_OW 337
// spawnBurlak = 0 ;
3697: LD_ADDR_EXP 27
3701: PUSH
3702: LD_INT 0
3704: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 247
3714: PUSH
3715: LD_INT 2
3717: EQUAL
3718: PUSH
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 263
3728: PUSH
3729: LD_INT 1
3731: EQUAL
3732: AND
3733: IFFALSE 3861
// begin case IsDrivenBy ( i ) of Gnyevko :
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 311
3744: PUSH
3745: LD_EXP 19
3749: DOUBLE
3750: EQUAL
3751: IFTRUE 3755
3753: GO 3768
3755: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3756: LD_INT 1
3758: PPUSH
3759: LD_STRING 13_Gnyevko_1
3761: PPUSH
3762: CALL_OW 39
3766: GO 3861
3768: LD_EXP 20
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3791
3778: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3779: LD_INT 1
3781: PPUSH
3782: LD_STRING 13_Titov_1
3784: PPUSH
3785: CALL_OW 39
3789: GO 3861
3791: LD_EXP 21
3795: DOUBLE
3796: EQUAL
3797: IFTRUE 3801
3799: GO 3814
3801: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3802: LD_INT 1
3804: PPUSH
3805: LD_STRING 13_Xavier_1
3807: PPUSH
3808: CALL_OW 39
3812: GO 3861
3814: LD_EXP 22
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3837
3824: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3825: LD_INT 1
3827: PPUSH
3828: LD_STRING 13_Belkov_1
3830: PPUSH
3831: CALL_OW 39
3835: GO 3861
3837: LD_EXP 23
3841: DOUBLE
3842: EQUAL
3843: IFTRUE 3847
3845: GO 3860
3847: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3848: LD_INT 1
3850: PPUSH
3851: LD_STRING 13_Lipshchin_1
3853: PPUSH
3854: CALL_OW 39
3858: GO 3861
3860: POP
// end ; if GetWeapon ( i ) = 49 then
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 264
3870: PUSH
3871: LD_INT 49
3873: EQUAL
3874: IFFALSE 3887
// DestroyUnit ( i ) else
3876: LD_VAR 0 1
3880: PPUSH
3881: CALL_OW 65
3885: GO 3896
// RemoveUnit ( i ) ;
3887: LD_VAR 0 1
3891: PPUSH
3892: CALL_OW 64
// end ;
3896: GO 3533
3898: POP
3899: POP
// end ;
3900: PPOPN 1
3902: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3903: LD_EXP 17
3907: PPUSH
3908: CALL_OW 302
3912: PUSH
3913: LD_EXP 18
3917: PPUSH
3918: CALL_OW 256
3922: PUSH
3923: LD_INT 500
3925: LESS
3926: AND
3927: PUSH
3928: LD_EXP 18
3932: PPUSH
3933: CALL_OW 255
3937: PUSH
3938: LD_INT 7
3940: EQUAL
3941: AND
3942: IFFALSE 3962
3944: GO 3946
3946: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3947: LD_EXP 17
3951: PPUSH
3952: LD_INT 107
3954: PPUSH
3955: LD_INT 118
3957: PPUSH
3958: CALL_OW 111
3962: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3963: LD_EXP 17
3967: PPUSH
3968: CALL_OW 301
3972: PUSH
3973: LD_EXP 27
3977: PUSH
3978: LD_INT 1
3980: EQUAL
3981: AND
3982: IFFALSE 4115
3984: GO 3986
3986: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
3987: LD_EXP 1
3991: PPUSH
3992: LD_STRING D5b-JMM-1
3994: PPUSH
3995: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
3999: LD_INT 22
4001: PUSH
4002: LD_INT 1
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 26
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 25
4024: PUSH
4025: LD_INT 1
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PUSH
4032: LD_INT 25
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 25
4044: PUSH
4045: LD_INT 3
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 25
4054: PUSH
4055: LD_INT 4
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 5
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 69
4089: PPUSH
4090: LD_STRING D5b-Sol1-1
4092: PPUSH
4093: LD_STRING 
4095: PPUSH
4096: CALL 6177 0 3
// ChangeMissionObjectives ( M2a ) ;
4100: LD_STRING M2a
4102: PPUSH
4103: CALL_OW 337
// burlakStatus = 1 ;
4107: LD_ADDR_EXP 28
4111: PUSH
4112: LD_INT 1
4114: ST_TO_ADDR
// end ;
4115: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4116: LD_EXP 2
4120: PPUSH
4121: CALL_OW 301
4125: IFFALSE 4262
4127: GO 4129
4129: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4130: LD_EXP 1
4134: PPUSH
4135: LD_STRING D6-JMM-1
4137: PPUSH
4138: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4142: LD_INT 22
4144: PUSH
4145: LD_INT 1
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 26
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 2
4164: PUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 25
4177: PUSH
4178: LD_INT 2
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 25
4187: PUSH
4188: LD_INT 3
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_INT 25
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 25
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 69
4232: PPUSH
4233: LD_STRING D6-Sol1-1
4235: PPUSH
4236: LD_STRING 
4238: PPUSH
4239: CALL 6177 0 3
// Say ( JMM , D6-JMM-2 ) ;
4243: LD_EXP 1
4247: PPUSH
4248: LD_STRING D6-JMM-2
4250: PPUSH
4251: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4255: LD_STRING M1a
4257: PPUSH
4258: CALL_OW 337
// end ;
4262: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4263: LD_INT 25
4265: PPUSH
4266: LD_INT 1
4268: PPUSH
4269: CALL_OW 321
4273: PUSH
4274: LD_INT 2
4276: EQUAL
4277: IFFALSE 4294
4279: GO 4281
4281: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4282: LD_EXP 2
4286: PPUSH
4287: LD_STRING D6-Huck-2
4289: PPUSH
4290: CALL_OW 88
// end ;
4294: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4295: LD_INT 22
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 34
4310: PUSH
4311: LD_INT 8
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: LD_INT 35
4320: PUSH
4321: LD_INT 8
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PPUSH
4337: CALL_OW 69
4341: PUSH
4342: LD_INT 0
4344: GREATER
4345: IFFALSE 4537
4347: GO 4349
4349: DISABLE
4350: LD_INT 0
4352: PPUSH
4353: PPUSH
// begin enable ;
4354: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4355: LD_ADDR_VAR 0 1
4359: PUSH
4360: LD_INT 5
4362: PPUSH
4363: LD_INT 22
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 30
4385: PUSH
4386: LD_INT 1
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 57
4398: PUSH
4399: EMPTY
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: PPUSH
4412: CALL_OW 70
4416: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 5
4424: PPUSH
4425: LD_INT 22
4427: PUSH
4428: LD_INT 1
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 21
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PUSH
4445: LD_INT 30
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: LD_INT 57
4460: PUSH
4461: EMPTY
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 70
4478: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4479: LD_VAR 0 1
4483: PUSH
4484: LD_INT 0
4486: GREATER
4487: PUSH
4488: LD_VAR 0 2
4492: PUSH
4493: LD_INT 0
4495: GREATER
4496: AND
4497: IFFALSE 4537
// begin disable ;
4499: DISABLE
// DialogueOn ;
4500: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4504: LD_EXP 1
4508: PPUSH
4509: LD_STRING D7-JMM-1
4511: PPUSH
4512: CALL_OW 88
// DialogueOff ;
4516: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4520: LD_STRING M4
4522: PPUSH
4523: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4527: LD_INT 5
4529: PPUSH
4530: LD_INT 0
4532: PPUSH
4533: CALL_OW 424
// end ; end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4540: LD_INT 6
4542: PPUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 25
4555: PUSH
4556: LD_INT 4
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 70
4571: PUSH
4572: LD_INT 0
4574: GREATER
4575: PUSH
4576: LD_EXP 37
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: AND
4585: PUSH
4586: LD_EXP 29
4590: PUSH
4591: LD_INT 0
4593: EQUAL
4594: AND
4595: IFFALSE 4660
4597: GO 4599
4599: DISABLE
// begin enable ;
4600: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4601: LD_ADDR_EXP 26
4605: PUSH
4606: LD_INT 6
4608: PPUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 1
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 25
4621: PUSH
4622: LD_INT 4
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 70
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4642: LD_INT 6
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: CALL_OW 424
// radationResearched = 1 ;
4652: LD_ADDR_EXP 29
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ;
4660: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4661: LD_EXP 26
4665: PPUSH
4666: CALL_OW 301
4670: PUSH
4671: LD_EXP 29
4675: PUSH
4676: LD_INT 1
4678: EQUAL
4679: AND
4680: IFFALSE 4716
4682: GO 4684
4684: DISABLE
// begin enable ;
4685: ENABLE
// radationResearched = 0 ;
4686: LD_ADDR_EXP 29
4690: PUSH
4691: LD_INT 0
4693: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4694: LD_INT 6
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4704: LD_EXP 1
4708: PPUSH
4709: LD_STRING D9a-JMM-1
4711: PPUSH
4712: CALL_OW 88
// end ; end_of_file
4716: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4717: LD_VAR 0 5
4721: PUSH
4722: LD_INT 8
4724: EQUAL
4725: PUSH
4726: LD_EXP 35
4730: PUSH
4731: LD_INT 0
4733: EQUAL
4734: AND
4735: IFFALSE 4788
// begin eventVar1 = 1 ;
4737: LD_ADDR_EXP 35
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// DialogueOn ;
4745: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4749: LD_EXP 1
4753: PPUSH
4754: LD_STRING D6a-JMM-1
4756: PPUSH
4757: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4761: LD_EXP 15
4765: PPUSH
4766: LD_STRING D6a-Pow-1
4768: PPUSH
4769: CALL_OW 94
// DialogueOff ;
4773: CALL_OW 7
// wait ( 3 3$0 ) ;
4777: LD_INT 6300
4779: PPUSH
4780: CALL_OW 67
// PowellSupport ;
4784: CALL 1649 0 0
// end ; end ;
4788: PPOPN 5
4790: END
// on UnitDestroyed ( un ) do begin if GetWeapon ( un ) = ar_control_tower then
4791: LD_VAR 0 1
4795: PPUSH
4796: CALL_OW 264
4800: PUSH
4801: LD_INT 31
4803: EQUAL
4804: IFFALSE 4820
// achivCounter := achivCounter + 1 ;
4806: LD_ADDR_EXP 41
4810: PUSH
4811: LD_EXP 41
4815: PUSH
4816: LD_INT 1
4818: PLUS
4819: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4820: LD_VAR 0 1
4824: PPUSH
4825: CALL_OW 255
4829: PUSH
4830: LD_INT 1
4832: NONEQUAL
4833: PUSH
4834: LD_VAR 0 1
4838: PPUSH
4839: CALL_OW 247
4843: PUSH
4844: LD_INT 2
4846: EQUAL
4847: AND
4848: IFFALSE 4864
// destroyCounter := destroyCounter + 1 ;
4850: LD_ADDR_EXP 42
4854: PUSH
4855: LD_EXP 42
4859: PUSH
4860: LD_INT 1
4862: PLUS
4863: ST_TO_ADDR
// end ;
4864: PPOPN 1
4866: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4867: LD_VAR 0 2
4871: PUSH
4872: LD_EXP 18
4876: EQUAL
4877: IFFALSE 4886
// SetAchievement ( ACH_MASHA ) ;
4879: LD_STRING ACH_MASHA
4881: PPUSH
4882: CALL_OW 543
// end ;
4886: PPOPN 4
4888: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4889: LD_VAR 0 1
4893: PPUSH
4894: CALL_OW 264
4898: PUSH
4899: LD_INT 8
4901: EQUAL
4902: PUSH
4903: LD_EXP 36
4907: PUSH
4908: LD_INT 0
4910: EQUAL
4911: AND
4912: IFFALSE 4981
// begin eventVar2 = 1 ;
4914: LD_ADDR_EXP 36
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// DialogueOn ;
4922: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4926: LD_EXP 1
4930: PPUSH
4931: LD_STRING D6b-JMM-1
4933: PPUSH
4934: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4938: LD_EXP 15
4942: PPUSH
4943: LD_STRING D6b-Pow-1
4945: PPUSH
4946: CALL_OW 94
// DialogueOff ;
4950: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4954: LD_INT 5
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
4964: LD_INT 7
4966: PPUSH
4967: LD_INT 1
4969: PPUSH
4970: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
4974: LD_STRING M3
4976: PPUSH
4977: CALL_OW 337
// end ; end ;
4981: PPOPN 2
4983: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
4984: LD_VAR 0 2
4988: PPUSH
4989: LD_VAR 0 3
4993: PPUSH
4994: LD_INT 5
4996: PPUSH
4997: CALL_OW 309
5001: PUSH
5002: LD_EXP 37
5006: PUSH
5007: LD_INT 0
5009: EQUAL
5010: AND
5011: IFFALSE 5229
// begin eventVar3 = 1 ;
5013: LD_ADDR_EXP 37
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5021: LD_INT 175
5023: PPUSH
5024: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5028: LD_INT 7
5030: PPUSH
5031: LD_INT 22
5033: PUSH
5034: LD_INT 1
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 21
5043: PUSH
5044: LD_INT 2
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 34
5053: PUSH
5054: LD_INT 11
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: PPUSH
5066: CALL_OW 70
5070: PUSH
5071: LD_INT 0
5073: GREATER
5074: IFFALSE 5093
// begin radarOnSpot = 1 ;
5076: LD_ADDR_EXP 30
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5084: LD_STRING M3a
5086: PPUSH
5087: CALL_OW 337
// end else
5091: GO 5100
// begin ChangeMissionObjectives ( M3b ) ;
5093: LD_STRING M3b
5095: PPUSH
5096: CALL_OW 337
// end ; DialogueOn ;
5100: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5104: LD_EXP 2
5108: PPUSH
5109: LD_STRING D8-Huck-1
5111: PPUSH
5112: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5116: LD_EXP 1
5120: PPUSH
5121: LD_STRING D8-JMM-1
5123: PPUSH
5124: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5128: LD_EXP 2
5132: PPUSH
5133: LD_STRING D8-Huck-2
5135: PPUSH
5136: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5140: LD_EXP 1
5144: PPUSH
5145: LD_STRING D8-JMM-2
5147: PPUSH
5148: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5152: LD_EXP 2
5156: PPUSH
5157: LD_STRING D8-Huck-3
5159: PPUSH
5160: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5164: LD_EXP 1
5168: PPUSH
5169: LD_STRING D8-JMM-3
5171: PPUSH
5172: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5176: LD_EXP 2
5180: PPUSH
5181: LD_STRING D8-Huck-4
5183: PPUSH
5184: CALL_OW 88
// DialogueOff ;
5188: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5192: LD_INT 5
5194: PPUSH
5195: LD_INT 0
5197: PPUSH
5198: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5202: LD_INT 7
5204: PPUSH
5205: LD_INT 0
5207: PPUSH
5208: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5212: LD_INT 6
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5222: LD_STRING M5
5224: PPUSH
5225: CALL_OW 337
// end ; end ;
5229: PPOPN 3
5231: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5232: LD_EXP 26
5236: PPUSH
5237: CALL_OW 302
5241: PUSH
5242: LD_VAR 0 2
5246: PUSH
5247: LD_EXP 26
5251: EQUAL
5252: AND
5253: PUSH
5254: LD_EXP 38
5258: PUSH
5259: LD_INT 0
5261: EQUAL
5262: AND
5263: PUSH
5264: LD_EXP 37
5268: PUSH
5269: LD_INT 1
5271: EQUAL
5272: AND
5273: IFFALSE 5319
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5275: LD_VAR 0 1
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL_OW 268
5287: PUSH
5288: LD_INT 11
5290: EQUAL
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: LD_INT 2
5299: PPUSH
5300: CALL_OW 268
5304: PUSH
5305: LD_INT 11
5307: EQUAL
5308: OR
5309: IFFALSE 5319
// eventVar4 = 1 ;
5311: LD_ADDR_EXP 38
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// end ;
5319: PPOPN 2
5321: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5322: LD_INT 0
5324: PPUSH
5325: PPUSH
// begin if GetNation ( unit ) = 2 then
5326: LD_VAR 0 1
5330: PPUSH
5331: CALL_OW 248
5335: PUSH
5336: LD_INT 2
5338: EQUAL
5339: IFFALSE 5585
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5341: LD_ADDR_EXP 32
5345: PUSH
5346: LD_EXP 32
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: ST_TO_ADDR
// for i := 1 to sibDeposits do
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_EXP 31
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5473
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5373: LD_EXP 31
5377: PUSH
5378: LD_VAR 0 4
5382: ARRAY
5383: PUSH
5384: LD_INT 1
5386: ARRAY
5387: PUSH
5388: LD_VAR 0 2
5392: EQUAL
5393: PUSH
5394: LD_EXP 31
5398: PUSH
5399: LD_VAR 0 4
5403: ARRAY
5404: PUSH
5405: LD_INT 2
5407: ARRAY
5408: PUSH
5409: LD_VAR 0 3
5413: EQUAL
5414: AND
5415: IFFALSE 5471
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5417: LD_ADDR_EXP 31
5421: PUSH
5422: LD_EXP 31
5426: PPUSH
5427: LD_VAR 0 4
5431: PUSH
5432: EMPTY
5433: LIST
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: CALL_OW 3
5443: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5444: LD_ADDR_EXP 31
5448: PUSH
5449: LD_EXP 31
5453: PPUSH
5454: LD_VAR 0 4
5458: PUSH
5459: EMPTY
5460: LIST
5461: PUSH
5462: LD_INT 2
5464: ARRAY
5465: PPUSH
5466: CALL_OW 3
5470: ST_TO_ADDR
// end ;
5471: GO 5370
5473: POP
5474: POP
// if eventVar5 = 0 then
5475: LD_EXP 39
5479: PUSH
5480: LD_INT 0
5482: EQUAL
5483: IFFALSE 5585
// begin eventVar5 = 1 ;
5485: LD_ADDR_EXP 39
5489: PUSH
5490: LD_INT 1
5492: ST_TO_ADDR
// DialogueOn ;
5493: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5497: LD_EXP 2
5501: PPUSH
5502: LD_STRING D4-Sci1-1
5504: PPUSH
5505: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5509: LD_EXP 1
5513: PPUSH
5514: LD_STRING D4-JMM-1
5516: PPUSH
5517: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5521: LD_EXP 2
5525: PPUSH
5526: LD_STRING D4-Sci1-2
5528: PPUSH
5529: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5533: LD_EXP 1
5537: PPUSH
5538: LD_STRING D4-JMM-2
5540: PPUSH
5541: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5545: LD_EXP 2
5549: PPUSH
5550: LD_STRING D4-Sci1-3
5552: PPUSH
5553: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_STRING D4-JMM-3
5564: PPUSH
5565: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5569: LD_EXP 1
5573: PPUSH
5574: LD_STRING D4-JMM-3a
5576: PPUSH
5577: CALL_OW 88
// DialogueOff ;
5581: CALL_OW 7
// end ; end ; end ;
5585: PPOPN 5
5587: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5588: LD_VAR 0 1
5592: PPUSH
5593: CALL_OW 255
5597: PUSH
5598: LD_INT 1
5600: EQUAL
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: CALL_OW 266
5611: PUSH
5612: LD_INT 0
5614: EQUAL
5615: AND
5616: PUSH
5617: LD_INT 22
5619: PUSH
5620: LD_INT 1
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 21
5629: PUSH
5630: LD_INT 3
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: LD_INT 2
5639: PUSH
5640: LD_INT 30
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: LD_INT 30
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: PPUSH
5670: CALL_OW 69
5674: PUSH
5675: LD_INT 1
5677: EQUAL
5678: AND
5679: IFFALSE 5693
// SetBName ( building , omega ) ;
5681: LD_VAR 0 1
5685: PPUSH
5686: LD_STRING omega
5688: PPUSH
5689: CALL_OW 500
// end ;
5693: PPOPN 2
5695: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: CALL 12741 0 1
// end ; end_of_file
5705: PPOPN 1
5707: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// if exist_mode then
5712: LD_VAR 0 2
5716: IFFALSE 5735
// unit := CreateCharacter ( ident ) else
5718: LD_ADDR_VAR 0 4
5722: PUSH
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 34
5732: ST_TO_ADDR
5733: GO 5750
// unit := NewCharacter ( ident ) ;
5735: LD_ADDR_VAR 0 4
5739: PUSH
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 25
5749: ST_TO_ADDR
// result := unit ;
5750: LD_ADDR_VAR 0 3
5754: PUSH
5755: LD_VAR 0 4
5759: ST_TO_ADDR
// end ;
5760: LD_VAR 0 3
5764: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5765: LD_INT 0
5767: PPUSH
// vc_chassis := chassis ;
5768: LD_ADDR_OWVAR 37
5772: PUSH
5773: LD_VAR 0 1
5777: ST_TO_ADDR
// vc_engine := engine ;
5778: LD_ADDR_OWVAR 39
5782: PUSH
5783: LD_VAR 0 2
5787: ST_TO_ADDR
// vc_control := control ;
5788: LD_ADDR_OWVAR 38
5792: PUSH
5793: LD_VAR 0 3
5797: ST_TO_ADDR
// vc_weapon := weapon ;
5798: LD_ADDR_OWVAR 40
5802: PUSH
5803: LD_VAR 0 4
5807: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5808: LD_ADDR_OWVAR 41
5812: PUSH
5813: LD_VAR 0 5
5817: ST_TO_ADDR
// end ;
5818: LD_VAR 0 6
5822: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5823: LD_INT 0
5825: PPUSH
5826: PPUSH
5827: PPUSH
5828: PPUSH
5829: PPUSH
5830: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5831: LD_VAR 0 1
5835: NOT
5836: PUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 263
5846: PUSH
5847: LD_INT 2
5849: EQUAL
5850: NOT
5851: OR
5852: IFFALSE 5856
// exit ;
5854: GO 6172
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5856: LD_ADDR_VAR 0 6
5860: PUSH
5861: LD_INT 22
5863: PUSH
5864: LD_VAR 0 1
5868: PPUSH
5869: CALL_OW 255
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PUSH
5878: LD_INT 2
5880: PUSH
5881: LD_INT 30
5883: PUSH
5884: LD_INT 36
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 34
5893: PUSH
5894: LD_INT 31
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL_OW 69
5914: ST_TO_ADDR
// if not tmp then
5915: LD_VAR 0 6
5919: NOT
5920: IFFALSE 5924
// exit ;
5922: GO 6172
// result := [ ] ;
5924: LD_ADDR_VAR 0 2
5928: PUSH
5929: EMPTY
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 3
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6013
// begin t := UnitsInside ( i ) ;
5944: LD_ADDR_VAR 0 4
5948: PUSH
5949: LD_VAR 0 3
5953: PPUSH
5954: CALL_OW 313
5958: ST_TO_ADDR
// if t then
5959: LD_VAR 0 4
5963: IFFALSE 6011
// for j in t do
5965: LD_ADDR_VAR 0 7
5969: PUSH
5970: LD_VAR 0 4
5974: PUSH
5975: FOR_IN
5976: IFFALSE 6009
// result := Insert ( result , result + 1 , j ) ;
5978: LD_ADDR_VAR 0 2
5982: PUSH
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_VAR 0 2
5992: PUSH
5993: LD_INT 1
5995: PLUS
5996: PPUSH
5997: LD_VAR 0 7
6001: PPUSH
6002: CALL_OW 2
6006: ST_TO_ADDR
6007: GO 5975
6009: POP
6010: POP
// end ;
6011: GO 5941
6013: POP
6014: POP
// if not result then
6015: LD_VAR 0 2
6019: NOT
6020: IFFALSE 6024
// exit ;
6022: GO 6172
// mech := result [ 1 ] ;
6024: LD_ADDR_VAR 0 5
6028: PUSH
6029: LD_VAR 0 2
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: ST_TO_ADDR
// if result > 1 then
6038: LD_VAR 0 2
6042: PUSH
6043: LD_INT 1
6045: GREATER
6046: IFFALSE 6158
// for i = 2 to result do
6048: LD_ADDR_VAR 0 3
6052: PUSH
6053: DOUBLE
6054: LD_INT 2
6056: DEC
6057: ST_TO_ADDR
6058: LD_VAR 0 2
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6156
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6066: LD_ADDR_VAR 0 4
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_VAR 0 3
6080: ARRAY
6081: PPUSH
6082: LD_INT 3
6084: PPUSH
6085: CALL_OW 259
6089: PUSH
6090: LD_VAR 0 2
6094: PUSH
6095: LD_VAR 0 3
6099: ARRAY
6100: PPUSH
6101: CALL_OW 432
6105: MINUS
6106: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6107: LD_VAR 0 4
6111: PUSH
6112: LD_VAR 0 5
6116: PPUSH
6117: LD_INT 3
6119: PPUSH
6120: CALL_OW 259
6124: PUSH
6125: LD_VAR 0 5
6129: PPUSH
6130: CALL_OW 432
6134: MINUS
6135: GREATEREQUAL
6136: IFFALSE 6154
// mech := result [ i ] ;
6138: LD_ADDR_VAR 0 5
6142: PUSH
6143: LD_VAR 0 2
6147: PUSH
6148: LD_VAR 0 3
6152: ARRAY
6153: ST_TO_ADDR
// end ;
6154: GO 6063
6156: POP
6157: POP
// ComLinkTo ( vehicle , mech ) ;
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_VAR 0 5
6167: PPUSH
6168: CALL_OW 135
// end ;
6172: LD_VAR 0 2
6176: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6177: LD_INT 0
6179: PPUSH
6180: PPUSH
6181: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6182: LD_ADDR_VAR 0 1
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_EXP 1
6196: PUSH
6197: LD_EXP 2
6201: PUSH
6202: LD_EXP 3
6206: PUSH
6207: LD_EXP 4
6211: PUSH
6212: LD_EXP 5
6216: PUSH
6217: LD_EXP 6
6221: PUSH
6222: LD_EXP 7
6226: PUSH
6227: LD_EXP 8
6231: PUSH
6232: LD_EXP 9
6236: PUSH
6237: LD_EXP 10
6241: PUSH
6242: LD_EXP 11
6246: PUSH
6247: LD_EXP 12
6251: PUSH
6252: LD_EXP 13
6256: PUSH
6257: LD_EXP 14
6261: PUSH
6262: LD_EXP 15
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: DIFF
6284: ST_TO_ADDR
// if not characters then
6285: LD_VAR 0 1
6289: NOT
6290: IFFALSE 6294
// exit ;
6292: GO 6373
// speaker := characters [ rand ( 1 , characters ) ] ;
6294: LD_ADDR_VAR 0 6
6298: PUSH
6299: LD_VAR 0 1
6303: PUSH
6304: LD_INT 1
6306: PPUSH
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 12
6316: ARRAY
6317: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6318: LD_VAR 0 6
6322: PPUSH
6323: CALL_OW 258
6327: PUSH
6328: LD_INT 1
6330: EQUAL
6331: IFFALSE 6349
// Say ( speaker , dialogMID ) else
6333: LD_VAR 0 6
6337: PPUSH
6338: LD_VAR 0 2
6342: PPUSH
6343: CALL_OW 88
6347: GO 6363
// Say ( speaker , dialogFID ) ;
6349: LD_VAR 0 6
6353: PPUSH
6354: LD_VAR 0 3
6358: PPUSH
6359: CALL_OW 88
// result := speaker ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: LD_VAR 0 6
6372: ST_TO_ADDR
// end ;
6373: LD_VAR 0 4
6377: RET
// export function PrepareDifficulty ; begin
6378: LD_INT 0
6380: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6381: LD_INT 5
6383: PPUSH
6384: LD_INT 8
6386: PPUSH
6387: LD_INT 2
6389: PPUSH
6390: CALL_OW 322
// if difficulty = 1 then
6394: LD_OWVAR 67
6398: PUSH
6399: LD_INT 1
6401: EQUAL
6402: IFFALSE 6521
// begin SetTech ( 66 , 8 , state_researched ) ;
6404: LD_INT 66
6406: PPUSH
6407: LD_INT 8
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6417: LD_INT 67
6419: PPUSH
6420: LD_INT 8
6422: PPUSH
6423: LD_INT 0
6425: PPUSH
6426: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6430: LD_INT 68
6432: PPUSH
6433: LD_INT 8
6435: PPUSH
6436: LD_INT 0
6438: PPUSH
6439: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6443: LD_INT 51
6445: PPUSH
6446: LD_INT 8
6448: PPUSH
6449: LD_INT 2
6451: PPUSH
6452: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6456: LD_INT 52
6458: PPUSH
6459: LD_INT 8
6461: PPUSH
6462: LD_INT 0
6464: PPUSH
6465: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6469: LD_INT 53
6471: PPUSH
6472: LD_INT 8
6474: PPUSH
6475: LD_INT 0
6477: PPUSH
6478: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6482: LD_INT 60
6484: PPUSH
6485: LD_INT 8
6487: PPUSH
6488: LD_INT 2
6490: PPUSH
6491: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6495: LD_INT 61
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: LD_INT 0
6503: PPUSH
6504: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6508: LD_INT 62
6510: PPUSH
6511: LD_INT 8
6513: PPUSH
6514: LD_INT 0
6516: PPUSH
6517: CALL_OW 322
// end ; if difficulty = 2 then
6521: LD_OWVAR 67
6525: PUSH
6526: LD_INT 2
6528: EQUAL
6529: IFFALSE 6648
// begin SetTech ( 66 , 8 , state_researched ) ;
6531: LD_INT 66
6533: PPUSH
6534: LD_INT 8
6536: PPUSH
6537: LD_INT 2
6539: PPUSH
6540: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6544: LD_INT 67
6546: PPUSH
6547: LD_INT 8
6549: PPUSH
6550: LD_INT 2
6552: PPUSH
6553: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6557: LD_INT 68
6559: PPUSH
6560: LD_INT 8
6562: PPUSH
6563: LD_INT 0
6565: PPUSH
6566: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6570: LD_INT 51
6572: PPUSH
6573: LD_INT 8
6575: PPUSH
6576: LD_INT 2
6578: PPUSH
6579: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6583: LD_INT 52
6585: PPUSH
6586: LD_INT 8
6588: PPUSH
6589: LD_INT 2
6591: PPUSH
6592: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 8
6601: PPUSH
6602: LD_INT 2
6604: PPUSH
6605: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6609: LD_INT 60
6611: PPUSH
6612: LD_INT 8
6614: PPUSH
6615: LD_INT 2
6617: PPUSH
6618: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6622: LD_INT 61
6624: PPUSH
6625: LD_INT 8
6627: PPUSH
6628: LD_INT 2
6630: PPUSH
6631: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6635: LD_INT 62
6637: PPUSH
6638: LD_INT 8
6640: PPUSH
6641: LD_INT 0
6643: PPUSH
6644: CALL_OW 322
// end ; if difficulty = 3 then
6648: LD_OWVAR 67
6652: PUSH
6653: LD_INT 3
6655: EQUAL
6656: IFFALSE 6775
// begin SetTech ( 66 , 8 , state_researched ) ;
6658: LD_INT 66
6660: PPUSH
6661: LD_INT 8
6663: PPUSH
6664: LD_INT 2
6666: PPUSH
6667: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6671: LD_INT 67
6673: PPUSH
6674: LD_INT 8
6676: PPUSH
6677: LD_INT 2
6679: PPUSH
6680: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6684: LD_INT 68
6686: PPUSH
6687: LD_INT 8
6689: PPUSH
6690: LD_INT 0
6692: PPUSH
6693: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6697: LD_INT 51
6699: PPUSH
6700: LD_INT 8
6702: PPUSH
6703: LD_INT 2
6705: PPUSH
6706: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6710: LD_INT 52
6712: PPUSH
6713: LD_INT 8
6715: PPUSH
6716: LD_INT 2
6718: PPUSH
6719: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6723: LD_INT 53
6725: PPUSH
6726: LD_INT 8
6728: PPUSH
6729: LD_INT 2
6731: PPUSH
6732: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6736: LD_INT 60
6738: PPUSH
6739: LD_INT 8
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6749: LD_INT 61
6751: PPUSH
6752: LD_INT 8
6754: PPUSH
6755: LD_INT 2
6757: PPUSH
6758: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6762: LD_INT 62
6764: PPUSH
6765: LD_INT 8
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 322
// end ; end ;
6775: LD_VAR 0 1
6779: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6788: LD_ADDR_VAR 0 7
6792: PUSH
6793: LD_INT 22
6795: PUSH
6796: LD_VAR 0 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 25
6807: PUSH
6808: LD_INT 9
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 69
6823: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6824: LD_ADDR_VAR 0 8
6828: PUSH
6829: LD_INT 22
6831: PUSH
6832: LD_VAR 0 2
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 21
6846: PUSH
6847: LD_INT 3
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6867: LD_ADDR_VAR 0 5
6871: PUSH
6872: LD_INT 1
6874: PPUSH
6875: LD_INT 3
6877: PPUSH
6878: CALL_OW 12
6882: ST_TO_ADDR
// for i = 1 to list do
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: DOUBLE
6889: LD_INT 1
6891: DEC
6892: ST_TO_ADDR
6893: LD_VAR 0 7
6897: PUSH
6898: FOR_TO
6899: IFFALSE 7081
// for ta in filter do
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: LD_VAR 0 8
6910: PUSH
6911: FOR_IN
6912: IFFALSE 7077
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6914: LD_VAR 0 7
6918: PUSH
6919: LD_VAR 0 6
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 4
6929: PPUSH
6930: CALL_OW 296
6934: PUSH
6935: LD_INT 13
6937: LESSEQUAL
6938: IFFALSE 7075
// begin case c of 1 :
6940: LD_VAR 0 5
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 6991
6953: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6954: LD_VAR 0 7
6958: PUSH
6959: LD_VAR 0 6
6963: ARRAY
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 250
6974: PPUSH
6975: LD_VAR 0 4
6979: PPUSH
6980: CALL_OW 251
6984: PPUSH
6985: CALL_OW 154
6989: GO 7075
6991: LD_INT 2
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7063
6999: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7000: LD_VAR 0 7
7004: PUSH
7005: LD_VAR 0 6
7009: ARRAY
7010: PPUSH
7011: LD_VAR 0 4
7015: PPUSH
7016: CALL_OW 250
7020: PUSH
7021: LD_INT 1
7023: NEG
7024: PPUSH
7025: LD_INT 1
7027: PPUSH
7028: CALL_OW 12
7032: PLUS
7033: PPUSH
7034: LD_VAR 0 4
7038: PPUSH
7039: CALL_OW 251
7043: PUSH
7044: LD_INT 1
7046: NEG
7047: PPUSH
7048: LD_INT 1
7050: PPUSH
7051: CALL_OW 12
7055: PLUS
7056: PPUSH
7057: CALL_OW 153
7061: GO 7075
7063: LD_INT 3
7065: DOUBLE
7066: EQUAL
7067: IFTRUE 7071
7069: GO 7074
7071: POP
// ; end ;
7072: GO 7075
7074: POP
// end ; end ;
7075: GO 6911
7077: POP
7078: POP
7079: GO 6898
7081: POP
7082: POP
// end ;
7083: LD_VAR 0 3
7087: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7088: LD_INT 0
7090: PPUSH
7091: PPUSH
// for i in charactersList do
7092: LD_ADDR_VAR 0 4
7096: PUSH
7097: LD_VAR 0 1
7101: PUSH
7102: FOR_IN
7103: IFFALSE 7121
// SaveCharacters ( i , ident ) ;
7105: LD_VAR 0 4
7109: PPUSH
7110: LD_VAR 0 2
7114: PPUSH
7115: CALL_OW 38
7119: GO 7102
7121: POP
7122: POP
// end ;
7123: LD_VAR 0 3
7127: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
7135: PPUSH
7136: PPUSH
7137: PPUSH
7138: PPUSH
7139: PPUSH
7140: PPUSH
// for i = 1 to medicCount do
7141: LD_ADDR_VAR 0 13
7145: PUSH
7146: DOUBLE
7147: LD_INT 1
7149: DEC
7150: ST_TO_ADDR
7151: LD_VAR 0 7
7155: PUSH
7156: FOR_TO
7157: IFFALSE 7239
// begin uc_side = side ;
7159: LD_ADDR_OWVAR 20
7163: PUSH
7164: LD_VAR 0 1
7168: ST_TO_ADDR
// uc_nation = nation ;
7169: LD_ADDR_OWVAR 21
7173: PUSH
7174: LD_VAR 0 2
7178: ST_TO_ADDR
// hc_name =  ;
7179: LD_ADDR_OWVAR 26
7183: PUSH
7184: LD_STRING 
7186: ST_TO_ADDR
// hc_gallery =  ;
7187: LD_ADDR_OWVAR 33
7191: PUSH
7192: LD_STRING 
7194: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7195: LD_INT 0
7197: PPUSH
7198: LD_INT 4
7200: PPUSH
7201: LD_VAR 0 8
7205: PPUSH
7206: CALL_OW 380
// un = CreateHuman ;
7210: LD_ADDR_VAR 0 15
7214: PUSH
7215: CALL_OW 44
7219: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7220: LD_VAR 0 15
7224: PPUSH
7225: LD_VAR 0 9
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 49
// end ;
7237: GO 7156
7239: POP
7240: POP
// for i = 1 to soldierCount do
7241: LD_ADDR_VAR 0 13
7245: PUSH
7246: DOUBLE
7247: LD_INT 1
7249: DEC
7250: ST_TO_ADDR
7251: LD_VAR 0 3
7255: PUSH
7256: FOR_TO
7257: IFFALSE 7339
// begin uc_side = side ;
7259: LD_ADDR_OWVAR 20
7263: PUSH
7264: LD_VAR 0 1
7268: ST_TO_ADDR
// uc_nation = nation ;
7269: LD_ADDR_OWVAR 21
7273: PUSH
7274: LD_VAR 0 2
7278: ST_TO_ADDR
// hc_name =  ;
7279: LD_ADDR_OWVAR 26
7283: PUSH
7284: LD_STRING 
7286: ST_TO_ADDR
// hc_gallery =  ;
7287: LD_ADDR_OWVAR 33
7291: PUSH
7292: LD_STRING 
7294: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7295: LD_INT 0
7297: PPUSH
7298: LD_INT 1
7300: PPUSH
7301: LD_VAR 0 8
7305: PPUSH
7306: CALL_OW 380
// un = CreateHuman ;
7310: LD_ADDR_VAR 0 15
7314: PUSH
7315: CALL_OW 44
7319: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7320: LD_VAR 0 15
7324: PPUSH
7325: LD_VAR 0 9
7329: PPUSH
7330: LD_INT 0
7332: PPUSH
7333: CALL_OW 49
// end ;
7337: GO 7256
7339: POP
7340: POP
// for i = 1 to sniperCount do
7341: LD_ADDR_VAR 0 13
7345: PUSH
7346: DOUBLE
7347: LD_INT 1
7349: DEC
7350: ST_TO_ADDR
7351: LD_VAR 0 4
7355: PUSH
7356: FOR_TO
7357: IFFALSE 7439
// begin uc_side = side ;
7359: LD_ADDR_OWVAR 20
7363: PUSH
7364: LD_VAR 0 1
7368: ST_TO_ADDR
// uc_nation = nation ;
7369: LD_ADDR_OWVAR 21
7373: PUSH
7374: LD_VAR 0 2
7378: ST_TO_ADDR
// hc_name =  ;
7379: LD_ADDR_OWVAR 26
7383: PUSH
7384: LD_STRING 
7386: ST_TO_ADDR
// hc_gallery =  ;
7387: LD_ADDR_OWVAR 33
7391: PUSH
7392: LD_STRING 
7394: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7395: LD_INT 0
7397: PPUSH
7398: LD_INT 5
7400: PPUSH
7401: LD_VAR 0 8
7405: PPUSH
7406: CALL_OW 380
// un = CreateHuman ;
7410: LD_ADDR_VAR 0 15
7414: PUSH
7415: CALL_OW 44
7419: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7420: LD_VAR 0 15
7424: PPUSH
7425: LD_VAR 0 9
7429: PPUSH
7430: LD_INT 0
7432: PPUSH
7433: CALL_OW 49
// end ;
7437: GO 7356
7439: POP
7440: POP
// for i = 1 to bazookCount do
7441: LD_ADDR_VAR 0 13
7445: PUSH
7446: DOUBLE
7447: LD_INT 1
7449: DEC
7450: ST_TO_ADDR
7451: LD_VAR 0 5
7455: PUSH
7456: FOR_TO
7457: IFFALSE 7539
// begin uc_side = side ;
7459: LD_ADDR_OWVAR 20
7463: PUSH
7464: LD_VAR 0 1
7468: ST_TO_ADDR
// uc_nation = nation ;
7469: LD_ADDR_OWVAR 21
7473: PUSH
7474: LD_VAR 0 2
7478: ST_TO_ADDR
// hc_name =  ;
7479: LD_ADDR_OWVAR 26
7483: PUSH
7484: LD_STRING 
7486: ST_TO_ADDR
// hc_gallery =  ;
7487: LD_ADDR_OWVAR 33
7491: PUSH
7492: LD_STRING 
7494: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7495: LD_INT 0
7497: PPUSH
7498: LD_INT 9
7500: PPUSH
7501: LD_VAR 0 8
7505: PPUSH
7506: CALL_OW 380
// un = CreateHuman ;
7510: LD_ADDR_VAR 0 15
7514: PUSH
7515: CALL_OW 44
7519: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7520: LD_VAR 0 15
7524: PPUSH
7525: LD_VAR 0 9
7529: PPUSH
7530: LD_INT 0
7532: PPUSH
7533: CALL_OW 49
// end ;
7537: GO 7456
7539: POP
7540: POP
// for i = 1 to mortalCount do
7541: LD_ADDR_VAR 0 13
7545: PUSH
7546: DOUBLE
7547: LD_INT 1
7549: DEC
7550: ST_TO_ADDR
7551: LD_VAR 0 6
7555: PUSH
7556: FOR_TO
7557: IFFALSE 7639
// begin uc_side = side ;
7559: LD_ADDR_OWVAR 20
7563: PUSH
7564: LD_VAR 0 1
7568: ST_TO_ADDR
// uc_nation = nation ;
7569: LD_ADDR_OWVAR 21
7573: PUSH
7574: LD_VAR 0 2
7578: ST_TO_ADDR
// hc_name =  ;
7579: LD_ADDR_OWVAR 26
7583: PUSH
7584: LD_STRING 
7586: ST_TO_ADDR
// hc_gallery =  ;
7587: LD_ADDR_OWVAR 33
7591: PUSH
7592: LD_STRING 
7594: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7595: LD_INT 0
7597: PPUSH
7598: LD_INT 8
7600: PPUSH
7601: LD_VAR 0 8
7605: PPUSH
7606: CALL_OW 380
// un = CreateHuman ;
7610: LD_ADDR_VAR 0 15
7614: PUSH
7615: CALL_OW 44
7619: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7620: LD_VAR 0 15
7624: PPUSH
7625: LD_VAR 0 9
7629: PPUSH
7630: LD_INT 0
7632: PPUSH
7633: CALL_OW 49
// end ;
7637: GO 7556
7639: POP
7640: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7641: LD_ADDR_VAR 0 17
7645: PUSH
7646: LD_INT 22
7648: PUSH
7649: LD_VAR 0 1
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 25
7660: PUSH
7661: LD_INT 4
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PPUSH
7672: CALL_OW 69
7676: ST_TO_ADDR
// for i in medic_list do
7677: LD_ADDR_VAR 0 13
7681: PUSH
7682: LD_VAR 0 17
7686: PUSH
7687: FOR_IN
7688: IFFALSE 7723
// if GetTag ( i ) = 1 then
7690: LD_VAR 0 13
7694: PPUSH
7695: CALL_OW 110
7699: PUSH
7700: LD_INT 1
7702: EQUAL
7703: IFFALSE 7721
// medic_list := medic_list diff i ;
7705: LD_ADDR_VAR 0 17
7709: PUSH
7710: LD_VAR 0 17
7714: PUSH
7715: LD_VAR 0 13
7719: DIFF
7720: ST_TO_ADDR
7721: GO 7687
7723: POP
7724: POP
// for i in medic_list do
7725: LD_ADDR_VAR 0 13
7729: PUSH
7730: LD_VAR 0 17
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7754
// ComMoveToArea ( i , healArea ) ;
7738: LD_VAR 0 13
7742: PPUSH
7743: LD_VAR 0 10
7747: PPUSH
7748: CALL_OW 113
7752: GO 7735
7754: POP
7755: POP
// repeat wait ( 0 0$1 ) ;
7756: LD_INT 35
7758: PPUSH
7759: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7763: LD_ADDR_VAR 0 16
7767: PUSH
7768: LD_INT 22
7770: PUSH
7771: LD_VAR 0 1
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 1
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 24
7788: PUSH
7789: LD_INT 550
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 24
7802: PUSH
7803: LD_INT 250
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PPUSH
7819: CALL_OW 69
7823: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7824: LD_ADDR_VAR 0 18
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: LD_INT 25
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 25
7856: PUSH
7857: LD_INT 5
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 25
7866: PUSH
7867: LD_INT 8
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 25
7876: PUSH
7877: LD_INT 9
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 24
7893: PUSH
7894: LD_INT 1000
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: ST_TO_ADDR
// if medicCount > 0 then
7911: LD_VAR 0 7
7915: PUSH
7916: LD_INT 0
7918: GREATER
7919: IFFALSE 7993
// begin if damageUnit_list > 0 then
7921: LD_VAR 0 16
7925: PUSH
7926: LD_INT 0
7928: GREATER
7929: IFFALSE 7993
// begin for i in damageUnit_list do
7931: LD_ADDR_VAR 0 13
7935: PUSH
7936: LD_VAR 0 16
7940: PUSH
7941: FOR_IN
7942: IFFALSE 7991
// begin ComMoveToArea ( i , healArea ) ;
7944: LD_VAR 0 13
7948: PPUSH
7949: LD_VAR 0 10
7953: PPUSH
7954: CALL_OW 113
// for j in medic_list do
7958: LD_ADDR_VAR 0 14
7962: PUSH
7963: LD_VAR 0 17
7967: PUSH
7968: FOR_IN
7969: IFFALSE 7987
// AddComHeal ( j , i ) ;
7971: LD_VAR 0 14
7975: PPUSH
7976: LD_VAR 0 13
7980: PPUSH
7981: CALL_OW 188
7985: GO 7968
7987: POP
7988: POP
// end ;
7989: GO 7941
7991: POP
7992: POP
// end ; end ; for i in soldiersOK_list do
7993: LD_ADDR_VAR 0 13
7997: PUSH
7998: LD_VAR 0 18
8002: PUSH
8003: FOR_IN
8004: IFFALSE 8180
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8006: LD_ADDR_VAR 0 21
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_VAR 0 11
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 69
8027: PPUSH
8028: LD_VAR 0 13
8032: PPUSH
8033: CALL_OW 74
8037: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8038: LD_ADDR_VAR 0 22
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_VAR 0 11
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: LD_INT 59
8060: PUSH
8061: EMPTY
8062: LIST
8063: PUSH
8064: LD_INT 21
8066: PUSH
8067: LD_INT 1
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_INT 21
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: EMPTY
8095: LIST
8096: PPUSH
8097: CALL_OW 69
8101: PPUSH
8102: LD_VAR 0 13
8106: PPUSH
8107: CALL_OW 74
8111: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8112: LD_VAR 0 13
8116: PPUSH
8117: LD_VAR 0 21
8121: PPUSH
8122: CALL_OW 296
8126: PUSH
8127: LD_INT 8
8129: PLUS
8130: PUSH
8131: LD_VAR 0 13
8135: PPUSH
8136: LD_VAR 0 22
8140: PPUSH
8141: CALL_OW 296
8145: LESS
8146: IFFALSE 8164
// begin ComAttackUnit ( i , target1 ) ;
8148: LD_VAR 0 13
8152: PPUSH
8153: LD_VAR 0 21
8157: PPUSH
8158: CALL_OW 115
// end else
8162: GO 8178
// begin ComAttackUnit ( i , target2 ) ;
8164: LD_VAR 0 13
8168: PPUSH
8169: LD_VAR 0 22
8173: PPUSH
8174: CALL_OW 115
// end ; end ;
8178: GO 8003
8180: POP
8181: POP
// until soldiersOK_list = [ ] ;
8182: LD_VAR 0 18
8186: PUSH
8187: EMPTY
8188: EQUAL
8189: IFFALSE 7756
// end ;
8191: LD_VAR 0 12
8195: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8196: LD_INT 0
8198: PPUSH
8199: PPUSH
8200: PPUSH
8201: PPUSH
8202: PPUSH
8203: PPUSH
8204: PPUSH
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
// amChassisTab = [ ] ;
8209: LD_ADDR_VAR 0 19
8213: PUSH
8214: EMPTY
8215: ST_TO_ADDR
// arChassisTab = [ ] ;
8216: LD_ADDR_VAR 0 18
8220: PUSH
8221: EMPTY
8222: ST_TO_ADDR
// ruChassisTab = [ ] ;
8223: LD_ADDR_VAR 0 17
8227: PUSH
8228: EMPTY
8229: ST_TO_ADDR
// for i = 1 to vehCount do
8230: LD_ADDR_VAR 0 13
8234: PUSH
8235: DOUBLE
8236: LD_INT 1
8238: DEC
8239: ST_TO_ADDR
8240: LD_VAR 0 3
8244: PUSH
8245: FOR_TO
8246: IFFALSE 9670
// begin wait ( 0 0$01 ) ;
8248: LD_INT 35
8250: PPUSH
8251: CALL_OW 67
// if nation = 1 then
8255: LD_VAR 0 5
8259: PUSH
8260: LD_INT 1
8262: EQUAL
8263: IFFALSE 8744
// begin uc_side = side ;
8265: LD_ADDR_OWVAR 20
8269: PUSH
8270: LD_VAR 0 2
8274: ST_TO_ADDR
// uc_nation = nation ;
8275: LD_ADDR_OWVAR 21
8279: PUSH
8280: LD_VAR 0 5
8284: ST_TO_ADDR
// vc_engine = vehengine ;
8285: LD_ADDR_OWVAR 39
8289: PUSH
8290: LD_VAR 0 6
8294: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8295: LD_ADDR_OWVAR 40
8299: PUSH
8300: LD_VAR 0 10
8304: PUSH
8305: LD_INT 1
8307: PPUSH
8308: LD_VAR 0 10
8312: PPUSH
8313: CALL_OW 12
8317: ARRAY
8318: ST_TO_ADDR
// for j = 1 to AMWeapon do
8319: LD_ADDR_VAR 0 14
8323: PUSH
8324: DOUBLE
8325: LD_INT 1
8327: DEC
8328: ST_TO_ADDR
8329: LD_VAR 0 10
8333: PUSH
8334: FOR_TO
8335: IFFALSE 8636
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8337: LD_VAR 0 10
8341: PUSH
8342: LD_VAR 0 14
8346: ARRAY
8347: PUSH
8348: LD_INT 2
8350: EQUAL
8351: PUSH
8352: LD_VAR 0 10
8356: PUSH
8357: LD_VAR 0 14
8361: ARRAY
8362: PUSH
8363: LD_INT 3
8365: EQUAL
8366: OR
8367: IFFALSE 8420
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8369: LD_ADDR_VAR 0 19
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: LD_INT 2
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 4
8385: PUSH
8386: LD_INT 5
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8396: LD_ADDR_OWVAR 37
8400: PUSH
8401: LD_VAR 0 19
8405: PUSH
8406: LD_INT 1
8408: PPUSH
8409: LD_VAR 0 19
8413: PPUSH
8414: CALL_OW 12
8418: ARRAY
8419: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8420: LD_VAR 0 10
8424: PUSH
8425: LD_VAR 0 14
8429: ARRAY
8430: PUSH
8431: LD_INT 4
8433: EQUAL
8434: PUSH
8435: LD_VAR 0 10
8439: PUSH
8440: LD_VAR 0 14
8444: ARRAY
8445: PUSH
8446: LD_INT 5
8448: EQUAL
8449: OR
8450: PUSH
8451: LD_VAR 0 10
8455: PUSH
8456: LD_VAR 0 14
8460: ARRAY
8461: PUSH
8462: LD_INT 9
8464: EQUAL
8465: OR
8466: PUSH
8467: LD_VAR 0 10
8471: PUSH
8472: LD_VAR 0 14
8476: ARRAY
8477: PUSH
8478: LD_INT 11
8480: EQUAL
8481: OR
8482: PUSH
8483: LD_VAR 0 10
8487: PUSH
8488: LD_VAR 0 14
8492: ARRAY
8493: PUSH
8494: LD_INT 7
8496: EQUAL
8497: OR
8498: IFFALSE 8547
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8500: LD_ADDR_VAR 0 19
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 4
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8523: LD_ADDR_OWVAR 37
8527: PUSH
8528: LD_VAR 0 19
8532: PUSH
8533: LD_INT 1
8535: PPUSH
8536: LD_VAR 0 19
8540: PPUSH
8541: CALL_OW 12
8545: ARRAY
8546: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8547: LD_VAR 0 10
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PUSH
8558: LD_INT 8
8560: EQUAL
8561: PUSH
8562: LD_VAR 0 10
8566: PUSH
8567: LD_VAR 0 14
8571: ARRAY
8572: PUSH
8573: LD_INT 6
8575: EQUAL
8576: OR
8577: PUSH
8578: LD_VAR 0 10
8582: PUSH
8583: LD_VAR 0 14
8587: ARRAY
8588: PUSH
8589: LD_INT 10
8591: EQUAL
8592: OR
8593: IFFALSE 8634
// begin amChassisTab = [ 4 , 5 ] ;
8595: LD_ADDR_VAR 0 19
8599: PUSH
8600: LD_INT 4
8602: PUSH
8603: LD_INT 5
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8610: LD_ADDR_OWVAR 37
8614: PUSH
8615: LD_VAR 0 19
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 19
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: ST_TO_ADDR
// end ; end ;
8634: GO 8334
8636: POP
8637: POP
// veh = CreateVehicle ;
8638: LD_ADDR_VAR 0 16
8642: PUSH
8643: CALL_OW 45
8647: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8648: LD_VAR 0 16
8652: PPUSH
8653: LD_VAR 0 1
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 49
// if vc_control = 1 then
8665: LD_OWVAR 38
8669: PUSH
8670: LD_INT 1
8672: EQUAL
8673: IFFALSE 8730
// begin hc_gallery =  ;
8675: LD_ADDR_OWVAR 33
8679: PUSH
8680: LD_STRING 
8682: ST_TO_ADDR
// hc_name =  ;
8683: LD_ADDR_OWVAR 26
8687: PUSH
8688: LD_STRING 
8690: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8691: LD_INT 0
8693: PPUSH
8694: LD_INT 3
8696: PPUSH
8697: LD_VAR 0 4
8701: PPUSH
8702: CALL_OW 380
// un = CreateHuman ;
8706: LD_ADDR_VAR 0 15
8710: PUSH
8711: CALL_OW 44
8715: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8716: LD_VAR 0 15
8720: PPUSH
8721: LD_VAR 0 16
8725: PPUSH
8726: CALL_OW 52
// end ; i = i + 1 ;
8730: LD_ADDR_VAR 0 13
8734: PUSH
8735: LD_VAR 0 13
8739: PUSH
8740: LD_INT 1
8742: PLUS
8743: ST_TO_ADDR
// end ; if nation = 2 then
8744: LD_VAR 0 5
8748: PUSH
8749: LD_INT 2
8751: EQUAL
8752: IFFALSE 9254
// begin uc_side = side ;
8754: LD_ADDR_OWVAR 20
8758: PUSH
8759: LD_VAR 0 2
8763: ST_TO_ADDR
// uc_nation = nation ;
8764: LD_ADDR_OWVAR 21
8768: PUSH
8769: LD_VAR 0 5
8773: ST_TO_ADDR
// vc_engine = vehengine ;
8774: LD_ADDR_OWVAR 39
8778: PUSH
8779: LD_VAR 0 6
8783: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8784: LD_INT 22
8786: PUSH
8787: LD_VAR 0 2
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 21
8798: PUSH
8799: LD_INT 2
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 33
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 50
8818: PUSH
8819: EMPTY
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: PUSH
8833: LD_INT 8
8835: LESSEQUAL
8836: IFFALSE 8864
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8838: LD_ADDR_OWVAR 38
8842: PUSH
8843: LD_VAR 0 7
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_VAR 0 7
8855: PPUSH
8856: CALL_OW 12
8860: ARRAY
8861: ST_TO_ADDR
8862: GO 8872
// vc_control = control_apeman ;
8864: LD_ADDR_OWVAR 38
8868: PUSH
8869: LD_INT 5
8871: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8872: LD_ADDR_OWVAR 40
8876: PUSH
8877: LD_VAR 0 9
8881: PUSH
8882: LD_INT 1
8884: PPUSH
8885: LD_VAR 0 9
8889: PPUSH
8890: CALL_OW 12
8894: ARRAY
8895: ST_TO_ADDR
// for j = 1 to ARWeapons do
8896: LD_ADDR_VAR 0 14
8900: PUSH
8901: DOUBLE
8902: LD_INT 1
8904: DEC
8905: ST_TO_ADDR
8906: LD_VAR 0 9
8910: PUSH
8911: FOR_TO
8912: IFFALSE 9146
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8914: LD_VAR 0 9
8918: PUSH
8919: LD_VAR 0 14
8923: ARRAY
8924: PUSH
8925: LD_INT 24
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 9
8933: PUSH
8934: LD_VAR 0 14
8938: ARRAY
8939: PUSH
8940: LD_INT 22
8942: EQUAL
8943: OR
8944: PUSH
8945: LD_VAR 0 9
8949: PUSH
8950: LD_VAR 0 14
8954: ARRAY
8955: PUSH
8956: LD_INT 23
8958: EQUAL
8959: OR
8960: PUSH
8961: LD_VAR 0 9
8965: PUSH
8966: LD_VAR 0 14
8970: ARRAY
8971: PUSH
8972: LD_INT 30
8974: EQUAL
8975: OR
8976: IFFALSE 9025
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8978: LD_ADDR_VAR 0 18
8982: PUSH
8983: LD_INT 11
8985: PUSH
8986: LD_INT 12
8988: PUSH
8989: LD_INT 13
8991: PUSH
8992: LD_INT 14
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9001: LD_ADDR_OWVAR 37
9005: PUSH
9006: LD_VAR 0 18
9010: PUSH
9011: LD_INT 1
9013: PPUSH
9014: LD_VAR 0 18
9018: PPUSH
9019: CALL_OW 12
9023: ARRAY
9024: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9025: LD_VAR 0 9
9029: PUSH
9030: LD_VAR 0 14
9034: ARRAY
9035: PUSH
9036: LD_INT 29
9038: EQUAL
9039: PUSH
9040: LD_VAR 0 9
9044: PUSH
9045: LD_VAR 0 14
9049: ARRAY
9050: PUSH
9051: LD_INT 28
9053: EQUAL
9054: OR
9055: PUSH
9056: LD_VAR 0 9
9060: PUSH
9061: LD_VAR 0 14
9065: ARRAY
9066: PUSH
9067: LD_INT 27
9069: EQUAL
9070: OR
9071: PUSH
9072: LD_VAR 0 9
9076: PUSH
9077: LD_VAR 0 14
9081: ARRAY
9082: PUSH
9083: LD_INT 26
9085: EQUAL
9086: OR
9087: PUSH
9088: LD_VAR 0 9
9092: PUSH
9093: LD_VAR 0 14
9097: ARRAY
9098: PUSH
9099: LD_INT 25
9101: EQUAL
9102: OR
9103: IFFALSE 9144
// begin arChassisTab = [ 13 , 14 ] ;
9105: LD_ADDR_VAR 0 18
9109: PUSH
9110: LD_INT 13
9112: PUSH
9113: LD_INT 14
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9120: LD_ADDR_OWVAR 37
9124: PUSH
9125: LD_VAR 0 18
9129: PUSH
9130: LD_INT 1
9132: PPUSH
9133: LD_VAR 0 18
9137: PPUSH
9138: CALL_OW 12
9142: ARRAY
9143: ST_TO_ADDR
// end ; end ;
9144: GO 8911
9146: POP
9147: POP
// veh = CreateVehicle ;
9148: LD_ADDR_VAR 0 16
9152: PUSH
9153: CALL_OW 45
9157: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9158: LD_VAR 0 16
9162: PPUSH
9163: LD_VAR 0 1
9167: PPUSH
9168: LD_INT 0
9170: PPUSH
9171: CALL_OW 49
// if vc_control = 1 then
9175: LD_OWVAR 38
9179: PUSH
9180: LD_INT 1
9182: EQUAL
9183: IFFALSE 9240
// begin hc_gallery =  ;
9185: LD_ADDR_OWVAR 33
9189: PUSH
9190: LD_STRING 
9192: ST_TO_ADDR
// hc_name =  ;
9193: LD_ADDR_OWVAR 26
9197: PUSH
9198: LD_STRING 
9200: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9201: LD_INT 0
9203: PPUSH
9204: LD_INT 3
9206: PPUSH
9207: LD_VAR 0 4
9211: PPUSH
9212: CALL_OW 380
// un = CreateHuman ;
9216: LD_ADDR_VAR 0 15
9220: PUSH
9221: CALL_OW 44
9225: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9226: LD_VAR 0 15
9230: PPUSH
9231: LD_VAR 0 16
9235: PPUSH
9236: CALL_OW 52
// end ; i = i + 1 ;
9240: LD_ADDR_VAR 0 13
9244: PUSH
9245: LD_VAR 0 13
9249: PUSH
9250: LD_INT 1
9252: PLUS
9253: ST_TO_ADDR
// end ; if nation = 3 then
9254: LD_VAR 0 5
9258: PUSH
9259: LD_INT 3
9261: EQUAL
9262: IFFALSE 9668
// begin uc_side = side ;
9264: LD_ADDR_OWVAR 20
9268: PUSH
9269: LD_VAR 0 2
9273: ST_TO_ADDR
// uc_nation = nation ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_VAR 0 5
9283: ST_TO_ADDR
// vc_engine = vehengine ;
9284: LD_ADDR_OWVAR 39
9288: PUSH
9289: LD_VAR 0 6
9293: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9294: LD_ADDR_OWVAR 38
9298: PUSH
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 7
9311: PPUSH
9312: CALL_OW 12
9316: ARRAY
9317: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9318: LD_ADDR_OWVAR 40
9322: PUSH
9323: LD_VAR 0 8
9327: PUSH
9328: LD_INT 1
9330: PPUSH
9331: LD_VAR 0 8
9335: PPUSH
9336: CALL_OW 12
9340: ARRAY
9341: ST_TO_ADDR
// for j = 1 to RuWeapons do
9342: LD_ADDR_VAR 0 14
9346: PUSH
9347: DOUBLE
9348: LD_INT 1
9350: DEC
9351: ST_TO_ADDR
9352: LD_VAR 0 8
9356: PUSH
9357: FOR_TO
9358: IFFALSE 9544
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9360: LD_VAR 0 8
9364: PUSH
9365: LD_VAR 0 14
9369: ARRAY
9370: PUSH
9371: LD_INT 42
9373: EQUAL
9374: PUSH
9375: LD_VAR 0 8
9379: PUSH
9380: LD_VAR 0 14
9384: ARRAY
9385: PUSH
9386: LD_INT 43
9388: EQUAL
9389: OR
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_VAR 0 14
9400: ARRAY
9401: PUSH
9402: LD_INT 44
9404: EQUAL
9405: OR
9406: PUSH
9407: LD_VAR 0 8
9411: PUSH
9412: LD_VAR 0 14
9416: ARRAY
9417: PUSH
9418: LD_INT 45
9420: EQUAL
9421: OR
9422: PUSH
9423: LD_VAR 0 8
9427: PUSH
9428: LD_VAR 0 14
9432: ARRAY
9433: PUSH
9434: LD_INT 49
9436: EQUAL
9437: OR
9438: IFFALSE 9475
// begin ruChassisTab = [ 24 ] ;
9440: LD_ADDR_VAR 0 17
9444: PUSH
9445: LD_INT 24
9447: PUSH
9448: EMPTY
9449: LIST
9450: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9451: LD_ADDR_OWVAR 37
9455: PUSH
9456: LD_VAR 0 17
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 17
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9475: LD_VAR 0 8
9479: PUSH
9480: LD_VAR 0 14
9484: ARRAY
9485: PUSH
9486: LD_INT 46
9488: EQUAL
9489: PUSH
9490: LD_VAR 0 8
9494: PUSH
9495: LD_VAR 0 14
9499: ARRAY
9500: PUSH
9501: LD_INT 47
9503: EQUAL
9504: OR
9505: IFFALSE 9542
// begin ruChassisTab = [ 24 ] ;
9507: LD_ADDR_VAR 0 17
9511: PUSH
9512: LD_INT 24
9514: PUSH
9515: EMPTY
9516: LIST
9517: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9518: LD_ADDR_OWVAR 37
9522: PUSH
9523: LD_VAR 0 17
9527: PUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_VAR 0 17
9535: PPUSH
9536: CALL_OW 12
9540: ARRAY
9541: ST_TO_ADDR
// end ; end ;
9542: GO 9357
9544: POP
9545: POP
// veh = CreateVehicle ;
9546: LD_ADDR_VAR 0 16
9550: PUSH
9551: CALL_OW 45
9555: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9556: LD_VAR 0 16
9560: PPUSH
9561: LD_VAR 0 1
9565: PPUSH
9566: LD_INT 0
9568: PPUSH
9569: CALL_OW 49
// if vc_control = 1 then
9573: LD_OWVAR 38
9577: PUSH
9578: LD_INT 1
9580: EQUAL
9581: IFFALSE 9668
// begin if uc_side = 8 then
9583: LD_OWVAR 20
9587: PUSH
9588: LD_INT 8
9590: EQUAL
9591: IFFALSE 9603
// uc_nation = 2 else
9593: LD_ADDR_OWVAR 21
9597: PUSH
9598: LD_INT 2
9600: ST_TO_ADDR
9601: GO 9613
// uc_nation = nation ;
9603: LD_ADDR_OWVAR 21
9607: PUSH
9608: LD_VAR 0 5
9612: ST_TO_ADDR
// hc_gallery =  ;
9613: LD_ADDR_OWVAR 33
9617: PUSH
9618: LD_STRING 
9620: ST_TO_ADDR
// hc_name =  ;
9621: LD_ADDR_OWVAR 26
9625: PUSH
9626: LD_STRING 
9628: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9629: LD_INT 0
9631: PPUSH
9632: LD_INT 3
9634: PPUSH
9635: LD_VAR 0 4
9639: PPUSH
9640: CALL_OW 380
// un = CreateHuman ;
9644: LD_ADDR_VAR 0 15
9648: PUSH
9649: CALL_OW 44
9653: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9654: LD_VAR 0 15
9658: PPUSH
9659: LD_VAR 0 16
9663: PPUSH
9664: CALL_OW 52
// end ; end ; end ;
9668: GO 8245
9670: POP
9671: POP
// repeat wait ( 0 0$1 ) ;
9672: LD_INT 35
9674: PPUSH
9675: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9679: LD_ADDR_VAR 0 20
9683: PUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 2
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 24
9708: PUSH
9709: LD_INT 250
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 2
9718: PUSH
9719: LD_INT 34
9721: PUSH
9722: LD_INT 25
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 34
9731: PUSH
9732: LD_INT 26
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 34
9741: PUSH
9742: LD_INT 27
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 34
9751: PUSH
9752: LD_INT 28
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 34
9761: PUSH
9762: LD_INT 29
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 34
9771: PUSH
9772: LD_INT 46
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 44
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 34
9791: PUSH
9792: LD_INT 45
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 34
9801: PUSH
9802: LD_INT 47
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PPUSH
9827: CALL_OW 69
9831: ST_TO_ADDR
// if vehicleOK_list > 0 then
9832: LD_VAR 0 20
9836: PUSH
9837: LD_INT 0
9839: GREATER
9840: IFFALSE 10059
// begin for i in vehicleOK_list do
9842: LD_ADDR_VAR 0 13
9846: PUSH
9847: LD_VAR 0 20
9851: PUSH
9852: FOR_IN
9853: IFFALSE 10057
// begin if GetSide ( i ) <> side then
9855: LD_VAR 0 13
9859: PPUSH
9860: CALL_OW 255
9864: PUSH
9865: LD_VAR 0 2
9869: NONEQUAL
9870: IFFALSE 9883
// begin ComStop ( i ) ;
9872: LD_VAR 0 13
9876: PPUSH
9877: CALL_OW 141
// continue ;
9881: GO 9852
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9883: LD_ADDR_VAR 0 21
9887: PUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 11
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PPUSH
9900: CALL_OW 69
9904: PPUSH
9905: LD_VAR 0 13
9909: PPUSH
9910: CALL_OW 74
9914: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9915: LD_ADDR_VAR 0 22
9919: PUSH
9920: LD_INT 22
9922: PUSH
9923: LD_VAR 0 11
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 2
9934: PUSH
9935: LD_INT 59
9937: PUSH
9938: EMPTY
9939: LIST
9940: PUSH
9941: LD_INT 21
9943: PUSH
9944: LD_INT 1
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 21
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: PPUSH
9974: CALL_OW 69
9978: PPUSH
9979: LD_VAR 0 13
9983: PPUSH
9984: CALL_OW 74
9988: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9989: LD_VAR 0 13
9993: PPUSH
9994: LD_VAR 0 21
9998: PPUSH
9999: CALL_OW 296
10003: PUSH
10004: LD_INT 8
10006: PLUS
10007: PUSH
10008: LD_VAR 0 13
10012: PPUSH
10013: LD_VAR 0 22
10017: PPUSH
10018: CALL_OW 296
10022: LESS
10023: IFFALSE 10041
// begin ComAttackUnit ( i , target1 ) ;
10025: LD_VAR 0 13
10029: PPUSH
10030: LD_VAR 0 21
10034: PPUSH
10035: CALL_OW 115
// end else
10039: GO 10055
// begin ComAttackUnit ( i , target2 ) ;
10041: LD_VAR 0 13
10045: PPUSH
10046: LD_VAR 0 22
10050: PPUSH
10051: CALL_OW 115
// end ; end ;
10055: GO 9852
10057: POP
10058: POP
// end ; until vehicleOK_list = 0 ;
10059: LD_VAR 0 20
10063: PUSH
10064: LD_INT 0
10066: EQUAL
10067: IFFALSE 9672
// end ;
10069: LD_VAR 0 12
10073: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10074: LD_INT 0
10076: PPUSH
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
10081: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10082: LD_ADDR_VAR 0 6
10086: PUSH
10087: LD_INT 22
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 34
10101: PUSH
10102: LD_INT 29
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: ST_TO_ADDR
// if veh_list = 0 then
10118: LD_VAR 0 6
10122: PUSH
10123: LD_INT 0
10125: EQUAL
10126: IFFALSE 10130
// exit ;
10128: GO 10335
// if veh_list > 0 then
10130: LD_VAR 0 6
10134: PUSH
10135: LD_INT 0
10137: GREATER
10138: IFFALSE 10335
// begin for i in veh_List do
10140: LD_ADDR_VAR 0 4
10144: PUSH
10145: LD_VAR 0 6
10149: PUSH
10150: FOR_IN
10151: IFFALSE 10333
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10153: LD_ADDR_VAR 0 7
10157: PUSH
10158: LD_INT 22
10160: PUSH
10161: LD_VAR 0 2
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 24
10172: PUSH
10173: LD_INT 250
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: LD_INT 59
10185: PUSH
10186: EMPTY
10187: LIST
10188: PUSH
10189: LD_INT 21
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 2
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: PPUSH
10223: CALL_OW 69
10227: PPUSH
10228: LD_VAR 0 4
10232: PPUSH
10233: CALL_OW 74
10237: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10238: LD_VAR 0 4
10242: PPUSH
10243: LD_VAR 0 7
10247: PPUSH
10248: CALL_OW 115
// if not HasTask ( i ) then
10252: LD_VAR 0 4
10256: PPUSH
10257: CALL_OW 314
10261: NOT
10262: IFFALSE 10331
// begin wait ( 0 0$0.1 ) ;
10264: LD_INT 4
10266: PPUSH
10267: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10271: LD_ADDR_VAR 0 8
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_VAR 0 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 24
10290: PUSH
10291: LD_INT 250
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PPUSH
10302: CALL_OW 69
10306: PPUSH
10307: LD_VAR 0 4
10311: PPUSH
10312: CALL_OW 74
10316: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10317: LD_VAR 0 4
10321: PPUSH
10322: LD_VAR 0 8
10326: PPUSH
10327: CALL_OW 115
// end ; end ;
10331: GO 10150
10333: POP
10334: POP
// end ; end ; end_of_file
10335: LD_VAR 0 3
10339: RET
// every 0 0$1 do
10340: GO 10342
10342: DISABLE
// begin enable ;
10343: ENABLE
// IntBazooka ( 7 , 1 ) ;
10344: LD_INT 7
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL 6780 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10354: LD_INT 8
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: CALL 10074 0 2
// end ;
10364: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10365: LD_INT 22
10367: PUSH
10368: LD_INT 3
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 21
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 50
10387: PUSH
10388: EMPTY
10389: LIST
10390: PUSH
10391: LD_INT 2
10393: PUSH
10394: LD_INT 34
10396: PUSH
10397: LD_INT 46
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 34
10406: PUSH
10407: LD_INT 44
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 34
10416: PUSH
10417: LD_INT 45
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 34
10426: PUSH
10427: LD_INT 47
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PPUSH
10447: CALL_OW 69
10451: PUSH
10452: LD_INT 0
10454: GREATER
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 21
10468: PUSH
10469: LD_INT 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 50
10478: PUSH
10479: EMPTY
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 49
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PPUSH
10498: CALL_OW 69
10502: PUSH
10503: LD_INT 0
10505: GREATER
10506: AND
10507: IFFALSE 10679
10509: GO 10511
10511: DISABLE
10512: LD_INT 0
10514: PPUSH
10515: PPUSH
// begin enable ;
10516: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10517: LD_ADDR_VAR 0 1
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_INT 3
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 21
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 50
10544: PUSH
10545: EMPTY
10546: LIST
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 34
10553: PUSH
10554: LD_INT 46
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 34
10563: PUSH
10564: LD_INT 44
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 34
10573: PUSH
10574: LD_INT 45
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 34
10583: PUSH
10584: LD_INT 47
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 22
10616: PUSH
10617: LD_INT 3
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 21
10626: PUSH
10627: LD_INT 2
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 50
10636: PUSH
10637: EMPTY
10638: LIST
10639: PUSH
10640: LD_INT 34
10642: PUSH
10643: LD_INT 49
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_VAR 0 1
10670: PUSH
10671: LD_INT 1
10673: ARRAY
10674: PPUSH
10675: CALL_OW 112
// end ; end_of_file
10679: PPOPN 2
10681: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10682: LD_EXP 38
10686: PUSH
10687: LD_INT 1
10689: EQUAL
10690: IFFALSE 11592
10692: GO 10694
10694: DISABLE
10695: LD_INT 0
10697: PPUSH
10698: PPUSH
10699: PPUSH
// begin m1 := false ;
10700: LD_ADDR_VAR 0 1
10704: PUSH
10705: LD_INT 0
10707: ST_TO_ADDR
// m2 := false ;
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_INT 0
10715: ST_TO_ADDR
// m3 := false ;
10716: LD_ADDR_VAR 0 3
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING D9b-JMM-1
10731: PPUSH
10732: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10736: LD_EXP 15
10740: PPUSH
10741: LD_STRING D9b-Pow-1
10743: PPUSH
10744: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10748: LD_EXP 1
10752: PPUSH
10753: LD_STRING D9b-JMM-2
10755: PPUSH
10756: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10760: LD_EXP 15
10764: PPUSH
10765: LD_STRING D9b-Pow-2
10767: PPUSH
10768: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10772: LD_EXP 1
10776: PPUSH
10777: LD_STRING D9b-JMM-3
10779: PPUSH
10780: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10784: LD_EXP 15
10788: PPUSH
10789: LD_STRING D9b-Pow-3
10791: PPUSH
10792: CALL_OW 94
// if tick <= 60 60$00 then
10796: LD_OWVAR 1
10800: PUSH
10801: LD_INT 126000
10803: LESSEQUAL
10804: IFFALSE 10813
// SetAchievement ( ACH_ASPEED_13 ) ;
10806: LD_STRING ACH_ASPEED_13
10808: PPUSH
10809: CALL_OW 543
// if burlakStatus = 1 then
10813: LD_EXP 28
10817: PUSH
10818: LD_INT 1
10820: EQUAL
10821: IFFALSE 10843
// begin m1 := true ;
10823: LD_ADDR_VAR 0 1
10827: PUSH
10828: LD_INT 1
10830: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10831: LD_STRING Burlak
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 101
// end else
10841: GO 10854
// begin AddMedal ( Burlak , - 1 ) ;
10843: LD_STRING Burlak
10845: PPUSH
10846: LD_INT 1
10848: NEG
10849: PPUSH
10850: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10854: LD_EXP 2
10858: PPUSH
10859: CALL_OW 302
10863: IFFALSE 10885
// begin m2 := true ;
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10873: LD_STRING Stevens
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 101
// end else
10883: GO 10896
// begin AddMedal ( Stevens , - 1 ) ;
10885: LD_STRING Stevens
10887: PPUSH
10888: LD_INT 1
10890: NEG
10891: PPUSH
10892: CALL_OW 101
// end ; if radarOnSpot = 1 then
10896: LD_EXP 30
10900: PUSH
10901: LD_INT 1
10903: EQUAL
10904: IFFALSE 10926
// begin m3 := true ;
10906: LD_ADDR_VAR 0 3
10910: PUSH
10911: LD_INT 1
10913: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10914: LD_STRING Observation
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 101
// end else
10924: GO 10937
// begin AddMedal ( Observation , - 1 ) ;
10926: LD_STRING Observation
10928: PPUSH
10929: LD_INT 1
10931: NEG
10932: PPUSH
10933: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10937: LD_VAR 0 1
10941: PUSH
10942: LD_VAR 0 2
10946: AND
10947: PUSH
10948: LD_VAR 0 3
10952: AND
10953: PUSH
10954: LD_OWVAR 67
10958: PUSH
10959: LD_INT 3
10961: EQUAL
10962: AND
10963: IFFALSE 10975
// SetAchievementEX ( ACH_AMER , 13 ) ;
10965: LD_STRING ACH_AMER
10967: PPUSH
10968: LD_INT 13
10970: PPUSH
10971: CALL_OW 564
// GiveMedals ( MAIN ) ;
10975: LD_STRING MAIN
10977: PPUSH
10978: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10982: LD_EXP 28
10986: PPUSH
10987: LD_STRING 13_BurlakStatus_1
10989: PPUSH
10990: CALL_OW 39
// if IsLive ( Stevens ) then
10994: LD_EXP 2
10998: PPUSH
10999: CALL_OW 300
11003: IFFALSE 11017
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
11005: LD_INT 1
11007: PPUSH
11008: LD_STRING 13_StevensStatus_1
11010: PPUSH
11011: CALL_OW 39
11015: GO 11027
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
11017: LD_INT 0
11019: PPUSH
11020: LD_STRING 13_StevensStatus_1
11022: PPUSH
11023: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
11027: LD_INT 22
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 21
11039: PUSH
11040: LD_INT 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: LD_INT 25
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 25
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 25
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 25
11082: PUSH
11083: LD_INT 4
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 25
11092: PUSH
11093: LD_INT 5
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 8
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: PPUSH
11124: CALL_OW 69
11128: PPUSH
11129: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_EXP 34
11142: PUSH
11143: LD_STRING JMM
11145: STR
11146: PPUSH
11147: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11151: LD_EXP 8
11155: PPUSH
11156: LD_EXP 34
11160: PUSH
11161: LD_STRING Brown
11163: STR
11164: PPUSH
11165: CALL 7088 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11169: LD_EXP 4
11173: PPUSH
11174: LD_EXP 34
11178: PUSH
11179: LD_STRING Donaldson
11181: STR
11182: PPUSH
11183: CALL 7088 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11187: LD_EXP 5
11191: PPUSH
11192: LD_EXP 34
11196: PUSH
11197: LD_STRING Bobby
11199: STR
11200: PPUSH
11201: CALL 7088 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11205: LD_EXP 6
11209: PPUSH
11210: LD_EXP 34
11214: PUSH
11215: LD_STRING Cyrus
11217: STR
11218: PPUSH
11219: CALL 7088 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11223: LD_EXP 3
11227: PPUSH
11228: LD_EXP 34
11232: PUSH
11233: LD_STRING Lisa
11235: STR
11236: PPUSH
11237: CALL 7088 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11241: LD_EXP 13
11245: PPUSH
11246: LD_EXP 34
11250: PUSH
11251: LD_STRING Frank
11253: STR
11254: PPUSH
11255: CALL 7088 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11259: LD_EXP 14
11263: PPUSH
11264: LD_EXP 34
11268: PUSH
11269: LD_STRING Kikuchi
11271: STR
11272: PPUSH
11273: CALL 7088 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11277: LD_EXP 10
11281: PPUSH
11282: LD_EXP 34
11286: PUSH
11287: LD_STRING Houten
11289: STR
11290: PPUSH
11291: CALL 7088 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11295: LD_EXP 12
11299: PPUSH
11300: LD_EXP 34
11304: PUSH
11305: LD_STRING Gary
11307: STR
11308: PPUSH
11309: CALL 7088 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11313: LD_EXP 11
11317: PPUSH
11318: LD_EXP 34
11322: PUSH
11323: LD_STRING Cornell
11325: STR
11326: PPUSH
11327: CALL 7088 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11331: LD_EXP 7
11335: PPUSH
11336: LD_EXP 34
11340: PUSH
11341: LD_STRING Denis
11343: STR
11344: PPUSH
11345: CALL 7088 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11349: LD_EXP 9
11353: PPUSH
11354: LD_EXP 34
11358: PUSH
11359: LD_STRING Gladstone
11361: STR
11362: PPUSH
11363: CALL 7088 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11367: LD_EXP 2
11371: PPUSH
11372: LD_EXP 34
11376: PUSH
11377: LD_STRING Stevens
11379: STR
11380: PPUSH
11381: CALL 7088 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11385: LD_INT 50
11387: PUSH
11388: EMPTY
11389: LIST
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_INT 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 21
11403: PUSH
11404: LD_INT 1
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 25
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 25
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 25
11436: PUSH
11437: LD_INT 3
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 25
11446: PUSH
11447: LD_INT 4
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 25
11456: PUSH
11457: LD_INT 5
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 25
11466: PUSH
11467: LD_INT 8
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 69
11493: PUSH
11494: LD_EXP 1
11498: PUSH
11499: LD_EXP 8
11503: PUSH
11504: LD_EXP 4
11508: PUSH
11509: LD_EXP 5
11513: PUSH
11514: LD_EXP 6
11518: PUSH
11519: LD_EXP 3
11523: PUSH
11524: LD_EXP 13
11528: PUSH
11529: LD_EXP 9
11533: PUSH
11534: LD_EXP 14
11538: PUSH
11539: LD_EXP 7
11543: PUSH
11544: LD_EXP 10
11548: PUSH
11549: LD_EXP 12
11553: PUSH
11554: LD_EXP 11
11558: PUSH
11559: LD_EXP 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING 13_other_survivors
11583: PPUSH
11584: CALL_OW 38
// YouWin ;
11588: CALL_OW 103
// end ; end_of_file
11592: PPOPN 3
11594: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11595: LD_EXP 32
11599: PUSH
11600: LD_INT 2
11602: EQUAL
11603: IFFALSE 11739
11605: GO 11607
11607: DISABLE
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11613: LD_ADDR_VAR 0 2
11617: PUSH
11618: LD_INT 22
11620: PUSH
11621: LD_INT 1
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 21
11630: PUSH
11631: LD_INT 3
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: LD_INT 30
11643: PUSH
11644: LD_INT 0
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 30
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: PPUSH
11671: CALL_OW 69
11675: ST_TO_ADDR
// for i in tmp do
11676: LD_ADDR_VAR 0 1
11680: PUSH
11681: LD_VAR 0 2
11685: PUSH
11686: FOR_IN
11687: IFFALSE 11720
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_VAR 0 3
11698: PUSH
11699: LD_VAR 0 1
11703: PPUSH
11704: CALL_OW 274
11708: PPUSH
11709: LD_INT 3
11711: PPUSH
11712: CALL_OW 275
11716: PLUS
11717: ST_TO_ADDR
11718: GO 11686
11720: POP
11721: POP
// if yourSiberite < 79 then
11722: LD_VAR 0 3
11726: PUSH
11727: LD_INT 79
11729: LESS
11730: IFFALSE 11739
// YouLost ( siberite ) ;
11732: LD_STRING siberite
11734: PPUSH
11735: CALL_OW 104
// end ;
11739: PPOPN 3
11741: END
// every 0 0$1 trigger IsDead ( JMM ) do
11742: LD_EXP 1
11746: PPUSH
11747: CALL_OW 301
11751: IFFALSE 11763
11753: GO 11755
11755: DISABLE
// YouLost ( JMM ) ; end_of_file
11756: LD_STRING JMM
11758: PPUSH
11759: CALL_OW 104
11763: END
// every 8 8$0 + 7 7$0 do
11764: GO 11766
11766: DISABLE
// begin enable ;
11767: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11768: LD_INT 8
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: LD_INT 3
11779: PPUSH
11780: CALL_OW 12
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: LD_INT 2
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: LD_INT 4
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_OWVAR 67
11809: ARRAY
11810: PPUSH
11811: LD_INT 0
11813: PPUSH
11814: LD_INT 10
11816: PPUSH
11817: LD_INT 8
11819: PUSH
11820: LD_INT 9
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 1
11829: PPUSH
11830: LD_INT 2
11832: PPUSH
11833: CALL_OW 12
11837: ARRAY
11838: PPUSH
11839: LD_INT 12
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL 7128 0 11
// end ;
11849: END
// every 8 8$0 + 7 7$0 do var i , veh ;
11850: GO 11852
11852: DISABLE
11853: LD_INT 0
11855: PPUSH
11856: PPUSH
// begin enable ;
11857: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11858: LD_ADDR_EXP 33
11862: PUSH
11863: LD_EXP 33
11867: PUSH
11868: LD_INT 1
11870: PLUS
11871: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
11872: LD_INT 22
11874: PUSH
11875: LD_INT 8
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 34
11884: PUSH
11885: LD_INT 31
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: PUSH
11901: LD_INT 0
11903: EQUAL
11904: IFFALSE 12045
// begin uc_side := 8 ;
11906: LD_ADDR_OWVAR 20
11910: PUSH
11911: LD_INT 8
11913: ST_TO_ADDR
// uc_nation := 2 ;
11914: LD_ADDR_OWVAR 21
11918: PUSH
11919: LD_INT 2
11921: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11922: LD_INT 14
11924: PPUSH
11925: LD_INT 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_INT 31
11933: PPUSH
11934: LD_INT 100
11936: PPUSH
11937: CALL 5765 0 5
// for i = 1 to 2 do
11941: LD_ADDR_VAR 0 1
11945: PUSH
11946: DOUBLE
11947: LD_INT 1
11949: DEC
11950: ST_TO_ADDR
11951: LD_INT 2
11953: PUSH
11954: FOR_TO
11955: IFFALSE 12043
// begin veh := CreateVehicle ;
11957: LD_ADDR_VAR 0 2
11961: PUSH
11962: CALL_OW 45
11966: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11967: LD_VAR 0 2
11971: PPUSH
11972: LD_INT 5
11974: PPUSH
11975: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
11979: LD_VAR 0 2
11983: PPUSH
11984: LD_INT 181
11986: PPUSH
11987: LD_INT 105
11989: PPUSH
11990: LD_INT 12
11992: PPUSH
11993: LD_INT 0
11995: PPUSH
11996: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12000: LD_INT 0
12002: PPUSH
12003: LD_INT 7
12005: PUSH
12006: LD_INT 9
12008: PUSH
12009: LD_INT 10
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: PUSH
12017: LD_OWVAR 67
12021: ARRAY
12022: PPUSH
12023: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12027: CALL_OW 44
12031: PPUSH
12032: LD_VAR 0 2
12036: PPUSH
12037: CALL_OW 52
// end ;
12041: GO 11954
12043: POP
12044: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12045: LD_INT 8
12047: PUSH
12048: LD_INT 9
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 1
12057: PPUSH
12058: LD_INT 2
12060: PPUSH
12061: CALL_OW 12
12065: ARRAY
12066: PPUSH
12067: LD_INT 8
12069: PPUSH
12070: LD_INT 4
12072: PPUSH
12073: LD_INT 6
12075: PPUSH
12076: CALL_OW 12
12080: PUSH
12081: LD_INT 6
12083: PPUSH
12084: LD_INT 9
12086: PPUSH
12087: CALL_OW 12
12091: PUSH
12092: LD_INT 7
12094: PPUSH
12095: LD_INT 10
12097: PPUSH
12098: CALL_OW 12
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: LD_OWVAR 67
12112: ARRAY
12113: PPUSH
12114: LD_INT 10
12116: PPUSH
12117: LD_INT 2
12119: PPUSH
12120: LD_INT 3
12122: PPUSH
12123: LD_INT 5
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PPUSH
12133: EMPTY
12134: PPUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 26
12140: PUSH
12141: LD_INT 27
12143: PUSH
12144: LD_INT 28
12146: PUSH
12147: LD_INT 29
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PPUSH
12157: EMPTY
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL 8196 0 11
// end ;
12166: PPOPN 2
12168: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12169: LD_EXP 33
12173: PUSH
12174: LD_INT 4
12176: GREATEREQUAL
12177: IFFALSE 12459
12179: GO 12181
12181: DISABLE
12182: LD_INT 0
12184: PPUSH
12185: PPUSH
// begin enable ;
12186: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12187: LD_ADDR_EXP 33
12191: PUSH
12192: LD_EXP 33
12196: PUSH
12197: LD_INT 1
12199: PLUS
12200: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
12201: LD_INT 22
12203: PUSH
12204: LD_INT 8
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 31
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: PUSH
12230: LD_INT 0
12232: EQUAL
12233: IFFALSE 12374
// begin uc_side := 8 ;
12235: LD_ADDR_OWVAR 20
12239: PUSH
12240: LD_INT 8
12242: ST_TO_ADDR
// uc_nation := 2 ;
12243: LD_ADDR_OWVAR 21
12247: PUSH
12248: LD_INT 2
12250: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12251: LD_INT 14
12253: PPUSH
12254: LD_INT 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: LD_INT 31
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: CALL 5765 0 5
// for i = 1 to 2 do
12270: LD_ADDR_VAR 0 1
12274: PUSH
12275: DOUBLE
12276: LD_INT 1
12278: DEC
12279: ST_TO_ADDR
12280: LD_INT 2
12282: PUSH
12283: FOR_TO
12284: IFFALSE 12372
// begin veh := CreateVehicle ;
12286: LD_ADDR_VAR 0 2
12290: PUSH
12291: CALL_OW 45
12295: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12296: LD_VAR 0 2
12300: PPUSH
12301: LD_INT 5
12303: PPUSH
12304: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12308: LD_VAR 0 2
12312: PPUSH
12313: LD_INT 181
12315: PPUSH
12316: LD_INT 105
12318: PPUSH
12319: LD_INT 12
12321: PPUSH
12322: LD_INT 0
12324: PPUSH
12325: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12329: LD_INT 0
12331: PPUSH
12332: LD_INT 8
12334: PUSH
12335: LD_INT 9
12337: PUSH
12338: LD_INT 10
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_OWVAR 67
12350: ARRAY
12351: PPUSH
12352: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12356: CALL_OW 44
12360: PPUSH
12361: LD_VAR 0 2
12365: PPUSH
12366: CALL_OW 52
// end ;
12370: GO 12283
12372: POP
12373: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12374: LD_INT 8
12376: PUSH
12377: LD_INT 9
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 1
12386: PPUSH
12387: LD_INT 2
12389: PPUSH
12390: CALL_OW 12
12394: ARRAY
12395: PPUSH
12396: LD_INT 8
12398: PPUSH
12399: LD_INT 1
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: LD_OWVAR 67
12417: ARRAY
12418: PPUSH
12419: LD_INT 10
12421: PPUSH
12422: LD_INT 3
12424: PPUSH
12425: LD_INT 3
12427: PPUSH
12428: LD_INT 1
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: LD_INT 47
12440: PUSH
12441: LD_INT 47
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: EMPTY
12449: PPUSH
12450: EMPTY
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL 8196 0 11
// end ;
12459: PPOPN 2
12461: END
// every 1 1$0 trigger eventVar2 = 1 do
12462: LD_EXP 36
12466: PUSH
12467: LD_INT 1
12469: EQUAL
12470: IFFALSE 12572
12472: GO 12474
12474: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12475: LD_INT 8
12477: PUSH
12478: LD_INT 9
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 1
12487: PPUSH
12488: LD_INT 2
12490: PPUSH
12491: CALL_OW 12
12495: ARRAY
12496: PPUSH
12497: LD_INT 3
12499: PPUSH
12500: LD_INT 5
12502: PUSH
12503: LD_INT 7
12505: PUSH
12506: LD_INT 8
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_OWVAR 67
12518: ARRAY
12519: PPUSH
12520: LD_INT 10
12522: PPUSH
12523: LD_INT 3
12525: PPUSH
12526: LD_INT 3
12528: PPUSH
12529: LD_INT 3
12531: PUSH
12532: LD_INT 3
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: LD_INT 46
12541: PUSH
12542: LD_INT 44
12544: PUSH
12545: LD_INT 45
12547: PUSH
12548: LD_INT 47
12550: PUSH
12551: LD_INT 49
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: PPUSH
12561: EMPTY
12562: PPUSH
12563: EMPTY
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL 8196 0 11
// end ; end_of_file
12572: END
// every 1 1$0 do
12573: GO 12575
12575: DISABLE
// begin enable ;
12576: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12577: LD_INT 3
12579: PPUSH
12580: LD_INT 5
12582: PPUSH
12583: CALL_OW 12
12587: PPUSH
12588: LD_INT 13
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 55
// end ; end_of_file
12598: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
12599: GO 12601
12601: DISABLE
// begin ru_radar := 98 ;
12602: LD_ADDR_EXP 43
12606: PUSH
12607: LD_INT 98
12609: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12610: LD_ADDR_EXP 44
12614: PUSH
12615: LD_INT 89
12617: ST_TO_ADDR
// us_hack := 99 ;
12618: LD_ADDR_EXP 45
12622: PUSH
12623: LD_INT 99
12625: ST_TO_ADDR
// us_artillery := 97 ;
12626: LD_ADDR_EXP 46
12630: PUSH
12631: LD_INT 97
12633: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12634: LD_ADDR_EXP 47
12638: PUSH
12639: LD_INT 91
12641: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
12642: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
12643: LD_INT 0
12645: PPUSH
12646: PPUSH
12647: PPUSH
12648: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
12649: LD_VAR 0 1
12653: PPUSH
12654: CALL_OW 264
12658: PUSH
12659: LD_EXP 47
12663: EQUAL
12664: IFFALSE 12736
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12666: LD_INT 68
12668: PPUSH
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 255
12678: PPUSH
12679: CALL_OW 321
12683: PUSH
12684: LD_INT 2
12686: EQUAL
12687: IFFALSE 12699
// eff := 70 else
12689: LD_ADDR_VAR 0 6
12693: PUSH
12694: LD_INT 70
12696: ST_TO_ADDR
12697: GO 12707
// eff := 30 ;
12699: LD_ADDR_VAR 0 6
12703: PUSH
12704: LD_INT 30
12706: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 250
12716: PPUSH
12717: LD_VAR 0 1
12721: PPUSH
12722: CALL_OW 251
12726: PPUSH
12727: LD_VAR 0 6
12731: PPUSH
12732: CALL_OW 495
// end ; end ;
12736: LD_VAR 0 4
12740: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
12741: LD_INT 0
12743: PPUSH
12744: PPUSH
12745: PPUSH
12746: PPUSH
12747: PPUSH
12748: PPUSH
// if cmd = 124 then
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 124
12756: EQUAL
12757: IFFALSE 12963
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
12759: LD_ADDR_VAR 0 5
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: LD_INT 34
12769: PUSH
12770: LD_INT 53
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 34
12779: PUSH
12780: LD_INT 14
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 69
12796: ST_TO_ADDR
// if not tmp then
12797: LD_VAR 0 5
12801: NOT
12802: IFFALSE 12806
// exit ;
12804: GO 12963
// for i in tmp do
12806: LD_ADDR_VAR 0 3
12810: PUSH
12811: LD_VAR 0 5
12815: PUSH
12816: FOR_IN
12817: IFFALSE 12961
// begin taskList := GetTaskList ( i ) ;
12819: LD_ADDR_VAR 0 6
12823: PUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: CALL_OW 437
12833: ST_TO_ADDR
// if not taskList then
12834: LD_VAR 0 6
12838: NOT
12839: IFFALSE 12843
// continue ;
12841: GO 12816
// for j = 1 to taskList do
12843: LD_ADDR_VAR 0 4
12847: PUSH
12848: DOUBLE
12849: LD_INT 1
12851: DEC
12852: ST_TO_ADDR
12853: LD_VAR 0 6
12857: PUSH
12858: FOR_TO
12859: IFFALSE 12957
// if taskList [ j ] [ 1 ] = | then
12861: LD_VAR 0 6
12865: PUSH
12866: LD_VAR 0 4
12870: ARRAY
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PUSH
12876: LD_STRING |
12878: EQUAL
12879: IFFALSE 12955
// begin _taskList := Delete ( taskList , 1 ) ;
12881: LD_ADDR_VAR 0 7
12885: PUSH
12886: LD_VAR 0 6
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 3
12898: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_VAR 0 7
12908: PPUSH
12909: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
12913: LD_VAR 0 3
12917: PPUSH
12918: LD_VAR 0 6
12922: PUSH
12923: LD_VAR 0 4
12927: ARRAY
12928: PUSH
12929: LD_INT 2
12931: ARRAY
12932: PPUSH
12933: LD_VAR 0 6
12937: PUSH
12938: LD_VAR 0 4
12942: ARRAY
12943: PUSH
12944: LD_INT 3
12946: ARRAY
12947: PPUSH
12948: LD_INT 8
12950: PPUSH
12951: CALL 12968 0 4
// end ;
12955: GO 12858
12957: POP
12958: POP
// end ;
12959: GO 12816
12961: POP
12962: POP
// end ; end ;
12963: LD_VAR 0 2
12967: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12968: LD_INT 0
12970: PPUSH
12971: PPUSH
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
12976: PPUSH
12977: PPUSH
12978: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
12979: LD_VAR 0 1
12983: NOT
12984: PUSH
12985: LD_VAR 0 2
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: CALL_OW 488
12999: NOT
13000: OR
13001: PUSH
13002: LD_VAR 0 4
13006: NOT
13007: OR
13008: IFFALSE 13012
// exit ;
13010: GO 13352
// list := [ ] ;
13012: LD_ADDR_VAR 0 13
13016: PUSH
13017: EMPTY
13018: ST_TO_ADDR
// if x - r < 0 then
13019: LD_VAR 0 2
13023: PUSH
13024: LD_VAR 0 4
13028: MINUS
13029: PUSH
13030: LD_INT 0
13032: LESS
13033: IFFALSE 13045
// min_x := 0 else
13035: LD_ADDR_VAR 0 7
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
13043: GO 13061
// min_x := x - r ;
13045: LD_ADDR_VAR 0 7
13049: PUSH
13050: LD_VAR 0 2
13054: PUSH
13055: LD_VAR 0 4
13059: MINUS
13060: ST_TO_ADDR
// if y - r < 0 then
13061: LD_VAR 0 3
13065: PUSH
13066: LD_VAR 0 4
13070: MINUS
13071: PUSH
13072: LD_INT 0
13074: LESS
13075: IFFALSE 13087
// min_y := 0 else
13077: LD_ADDR_VAR 0 8
13081: PUSH
13082: LD_INT 0
13084: ST_TO_ADDR
13085: GO 13103
// min_y := y - r ;
13087: LD_ADDR_VAR 0 8
13091: PUSH
13092: LD_VAR 0 3
13096: PUSH
13097: LD_VAR 0 4
13101: MINUS
13102: ST_TO_ADDR
// max_x := x + r ;
13103: LD_ADDR_VAR 0 9
13107: PUSH
13108: LD_VAR 0 2
13112: PUSH
13113: LD_VAR 0 4
13117: PLUS
13118: ST_TO_ADDR
// max_y := y + r ;
13119: LD_ADDR_VAR 0 10
13123: PUSH
13124: LD_VAR 0 3
13128: PUSH
13129: LD_VAR 0 4
13133: PLUS
13134: ST_TO_ADDR
// for _x = min_x to max_x do
13135: LD_ADDR_VAR 0 11
13139: PUSH
13140: DOUBLE
13141: LD_VAR 0 7
13145: DEC
13146: ST_TO_ADDR
13147: LD_VAR 0 9
13151: PUSH
13152: FOR_TO
13153: IFFALSE 13270
// for _y = min_y to max_y do
13155: LD_ADDR_VAR 0 12
13159: PUSH
13160: DOUBLE
13161: LD_VAR 0 8
13165: DEC
13166: ST_TO_ADDR
13167: LD_VAR 0 10
13171: PUSH
13172: FOR_TO
13173: IFFALSE 13266
// begin if not ValidHex ( _x , _y ) then
13175: LD_VAR 0 11
13179: PPUSH
13180: LD_VAR 0 12
13184: PPUSH
13185: CALL_OW 488
13189: NOT
13190: IFFALSE 13194
// continue ;
13192: GO 13172
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13194: LD_VAR 0 11
13198: PPUSH
13199: LD_VAR 0 12
13203: PPUSH
13204: CALL_OW 351
13208: PUSH
13209: LD_VAR 0 11
13213: PPUSH
13214: LD_VAR 0 12
13218: PPUSH
13219: CALL_OW 554
13223: AND
13224: IFFALSE 13264
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13226: LD_ADDR_VAR 0 13
13230: PUSH
13231: LD_VAR 0 13
13235: PPUSH
13236: LD_VAR 0 13
13240: PUSH
13241: LD_INT 1
13243: PLUS
13244: PPUSH
13245: LD_VAR 0 11
13249: PUSH
13250: LD_VAR 0 12
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 2
13263: ST_TO_ADDR
// end ;
13264: GO 13172
13266: POP
13267: POP
13268: GO 13152
13270: POP
13271: POP
// if not list then
13272: LD_VAR 0 13
13276: NOT
13277: IFFALSE 13281
// exit ;
13279: GO 13352
// for i in list do
13281: LD_ADDR_VAR 0 6
13285: PUSH
13286: LD_VAR 0 13
13290: PUSH
13291: FOR_IN
13292: IFFALSE 13350
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
13294: LD_VAR 0 1
13298: PPUSH
13299: LD_STRING M
13301: PUSH
13302: LD_VAR 0 6
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: PUSH
13311: LD_VAR 0 6
13315: PUSH
13316: LD_INT 2
13318: ARRAY
13319: PUSH
13320: LD_INT 0
13322: PUSH
13323: LD_INT 0
13325: PUSH
13326: LD_INT 0
13328: PUSH
13329: LD_INT 0
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: PPUSH
13344: CALL_OW 447
13348: GO 13291
13350: POP
13351: POP
// end ;
13352: LD_VAR 0 5
13356: RET
